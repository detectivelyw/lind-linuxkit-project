From 446b7b805b6b0203194b73cd39af7241dc62105b Mon Sep 17 00:00:00 2001
From: Yiwen Li <detectivelyw@gmail.com>
Date: Wed, 5 Jun 2019 16:39:43 -0400
Subject: [PATCH 4/4] instrumented drivers.

---
 drivers/acpi/ac.c                          |  17 +
 drivers/acpi/acpi_apd.c                    |   3 +
 drivers/acpi/acpi_cmos_rtc.c               |   6 +
 drivers/acpi/acpi_lpss.c                   |   2 +
 drivers/acpi/acpi_memhotplug.c             |   2 +
 drivers/acpi/acpi_pad.c                    |   2 +
 drivers/acpi/acpi_platform.c               |  15 +
 drivers/acpi/acpi_pnp.c                    |   7 +
 drivers/acpi/acpi_processor.c              |  59 ++++
 drivers/acpi/acpica/dsargs.c               |  17 +
 drivers/acpi/acpica/dscontrol.c            |  24 ++
 drivers/acpi/acpica/dsfield.c              |  36 ++
 drivers/acpi/acpica/dsinit.c               |   5 +
 drivers/acpi/acpica/dsmethod.c             |  33 ++
 drivers/acpi/acpica/dsmthdat.c             |  27 ++
 drivers/acpi/acpica/dsobject.c             |  26 ++
 drivers/acpi/acpica/dsopcode.c             |  29 ++
 drivers/acpi/acpica/dspkginit.c            |  20 ++
 drivers/acpi/acpica/dsutils.c              |  33 ++
 drivers/acpi/acpica/dswexec.c              |  25 ++
 drivers/acpi/acpica/dswload.c              |  26 ++
 drivers/acpi/acpica/dswload2.c             |  32 ++
 drivers/acpi/acpica/dswscope.c             |   7 +
 drivers/acpi/acpica/dswstate.c             |  36 ++
 drivers/acpi/acpica/evevent.c              |  12 +
 drivers/acpi/acpica/evglock.c              |  10 +
 drivers/acpi/acpica/evgpe.c                |  14 +
 drivers/acpi/acpica/evgpeblk.c             |  22 ++
 drivers/acpi/acpica/evgpeinit.c            |  19 ++
 drivers/acpi/acpica/evgpeutil.c            |  16 +
 drivers/acpi/acpica/evhandler.c            |  28 ++
 drivers/acpi/acpica/evmisc.c               |   6 +
 drivers/acpi/acpica/evregion.c             |  45 +++
 drivers/acpi/acpica/evrgnini.c             |  39 +++
 drivers/acpi/acpica/evsci.c                |   4 +
 drivers/acpi/acpica/evxface.c              |  27 ++
 drivers/acpi/acpica/evxfevnt.c             |  27 ++
 drivers/acpi/acpica/evxfgpe.c              |  18 +
 drivers/acpi/acpica/evxfregn.c             |   6 +
 drivers/acpi/acpica/exconvrt.c             |  13 +
 drivers/acpi/acpica/excreate.c             |  10 +
 drivers/acpi/acpica/exfield.c              |  23 ++
 drivers/acpi/acpica/exfldio.c              |  59 ++++
 drivers/acpi/acpica/exmisc.c               |  36 ++
 drivers/acpi/acpica/exmutex.c              |  16 +
 drivers/acpi/acpica/exnames.c              |  33 ++
 drivers/acpi/acpica/exoparg1.c             |  70 ++++
 drivers/acpi/acpica/exoparg2.c             |  27 ++
 drivers/acpi/acpica/exprep.c               |  22 ++
 drivers/acpi/acpica/exregion.c             |  23 ++
 drivers/acpi/acpica/exresnte.c             |  14 +
 drivers/acpi/acpica/exresolv.c             |  19 ++
 drivers/acpi/acpica/exresop.c              |   7 +
 drivers/acpi/acpica/exstore.c              |  29 ++
 drivers/acpi/acpica/exstoren.c             |   6 +
 drivers/acpi/acpica/exsystem.c             |   9 +
 drivers/acpi/acpica/extrace.c              |  23 ++
 drivers/acpi/acpica/exutils.c              |  19 ++
 drivers/acpi/acpica/hwacpi.c               |  12 +
 drivers/acpi/acpica/hwgpe.c                |  22 ++
 drivers/acpi/acpica/hwpci.c                |   2 +
 drivers/acpi/acpica/hwregs.c               |  39 +++
 drivers/acpi/acpica/hwvalid.c              |  25 ++
 drivers/acpi/acpica/hwxface.c              |  18 +
 drivers/acpi/acpica/nsaccess.c             |  33 ++
 drivers/acpi/acpica/nsalloc.c              |  14 +
 drivers/acpi/acpica/nsarguments.c          |  11 +
 drivers/acpi/acpica/nsconvert.c            |  11 +
 drivers/acpi/acpica/nseval.c               |  17 +
 drivers/acpi/acpica/nsinit.c               |  31 ++
 drivers/acpi/acpica/nsload.c               |   6 +
 drivers/acpi/acpica/nsnames.c              |  14 +
 drivers/acpi/acpica/nsobject.c             |   7 +
 drivers/acpi/acpica/nsparse.c              |   3 +
 drivers/acpi/acpica/nspredef.c             |  25 ++
 drivers/acpi/acpica/nsprepkg.c             |  48 +++
 drivers/acpi/acpica/nsrepair.c             |  29 ++
 drivers/acpi/acpica/nsrepair2.c            |  27 ++
 drivers/acpi/acpica/nssearch.c             |  17 +
 drivers/acpi/acpica/nsutils.c              |  25 ++
 drivers/acpi/acpica/nswalk.c               |  13 +
 drivers/acpi/acpica/nsxfeval.c             |  55 +++
 drivers/acpi/acpica/nsxfname.c             |  26 ++
 drivers/acpi/acpica/nsxfobj.c              |  11 +
 drivers/acpi/acpica/psargs.c               |  49 +++
 drivers/acpi/acpica/psloop.c               |  23 ++
 drivers/acpi/acpica/psobject.c             |  53 +++
 drivers/acpi/acpica/psopinfo.c             |   4 +
 drivers/acpi/acpica/psparse.c              |  29 ++
 drivers/acpi/acpica/psscope.c              |   7 +
 drivers/acpi/acpica/pstree.c               |  12 +
 drivers/acpi/acpica/psutils.c              |  11 +
 drivers/acpi/acpica/pswalk.c               |   7 +
 drivers/acpi/acpica/psxface.c              |  14 +
 drivers/acpi/acpica/rsaddr.c               |   5 +
 drivers/acpi/acpica/rscalc.c               |  22 ++
 drivers/acpi/acpica/rscreate.c             |  17 +
 drivers/acpi/acpica/rslist.c               |  19 ++
 drivers/acpi/acpica/rsmisc.c               |  21 ++
 drivers/acpi/acpica/rsutils.c              |  14 +
 drivers/acpi/acpica/rsxface.c              |  28 ++
 drivers/acpi/acpica/tbdata.c               |  38 +++
 drivers/acpi/acpica/tbfadt.c               |  10 +
 drivers/acpi/acpica/tbinstal.c             |  11 +
 drivers/acpi/acpica/tbprint.c              |   8 +
 drivers/acpi/acpica/tbutils.c              |   9 +
 drivers/acpi/acpica/tbxface.c              |  26 ++
 drivers/acpi/acpica/tbxfload.c             |   9 +
 drivers/acpi/acpica/tbxfroot.c             |  14 +
 drivers/acpi/acpica/utaddress.c            |   8 +
 drivers/acpi/acpica/utalloc.c              |  16 +
 drivers/acpi/acpica/utascii.c              |   8 +
 drivers/acpi/acpica/utcopy.c               |  34 ++
 drivers/acpi/acpica/utdecode.c             |  12 +
 drivers/acpi/acpica/utdelete.c             |  51 +++
 drivers/acpi/acpica/uteval.c               |  14 +
 drivers/acpi/acpica/uthex.c                |   4 +
 drivers/acpi/acpica/utids.c                |  27 ++
 drivers/acpi/acpica/utinit.c               |   6 +
 drivers/acpi/acpica/utlock.c               |   7 +
 drivers/acpi/acpica/utmath.c               |   2 +
 drivers/acpi/acpica/utmisc.c               |  12 +
 drivers/acpi/acpica/utmutex.c              |  17 +
 drivers/acpi/acpica/utobject.c             |  23 ++
 drivers/acpi/acpica/utosi.c                |  10 +
 drivers/acpi/acpica/utownerid.c            |   8 +
 drivers/acpi/acpica/utpredef.c             |   7 +
 drivers/acpi/acpica/utresrc.c              |   2 +
 drivers/acpi/acpica/utstate.c              |   8 +
 drivers/acpi/acpica/utstring.c             |   7 +
 drivers/acpi/acpica/utxface.c              |  12 +
 drivers/acpi/acpica/utxferror.c            |   3 +
 drivers/acpi/acpica/utxfinit.c             |  15 +
 drivers/acpi/apei/bert.c                   |   2 +
 drivers/acpi/apei/erst.c                   |   2 +
 drivers/acpi/apei/ghes.c                   |   2 +
 drivers/acpi/apei/hest.c                   |   2 +
 drivers/acpi/battery.c                     |  35 ++
 drivers/acpi/blacklist.c                   |   5 +
 drivers/acpi/bus.c                         | 130 ++++++++
 drivers/acpi/button.c                      |  36 ++
 drivers/acpi/container.c                   |  11 +
 drivers/acpi/cppc_acpi.c                   |  56 ++++
 drivers/acpi/debugfs.c                     |   2 +
 drivers/acpi/device_pm.c                   |  53 +++
 drivers/acpi/device_sysfs.c                |  81 +++++
 drivers/acpi/dptf/int340x_thermal.c        |   3 +
 drivers/acpi/ec.c                          | 119 +++++++
 drivers/acpi/event.c                       |  11 +
 drivers/acpi/fan.c                         |  22 ++
 drivers/acpi/glue.c                        |  55 +++
 drivers/acpi/hed.c                         |   2 +
 drivers/acpi/ioapic.c                      |  53 +++
 drivers/acpi/nfit/core.c                   |   2 +
 drivers/acpi/osi.c                         |  24 ++
 drivers/acpi/osl.c                         | 147 ++++++++
 drivers/acpi/pci_irq.c                     |  36 ++
 drivers/acpi/pci_link.c                    |  75 +++++
 drivers/acpi/pci_root.c                    |  76 +++++
 drivers/acpi/power.c                       |  45 +++
 drivers/acpi/processor_core.c              |  13 +
 drivers/acpi/processor_driver.c            |  14 +
 drivers/acpi/processor_idle.c              | 117 +++++++
 drivers/acpi/processor_pdc.c               |  21 ++
 drivers/acpi/processor_perflib.c           |  85 +++++
 drivers/acpi/processor_thermal.c           |  17 +
 drivers/acpi/processor_throttling.c        |  78 +++++
 drivers/acpi/property.c                    |  61 ++++
 drivers/acpi/resource.c                    |  26 ++
 drivers/acpi/sbs.c                         |   2 +
 drivers/acpi/sbshc.c                       |   2 +
 drivers/acpi/scan.c                        | 225 +++++++++++++
 drivers/acpi/sleep.c                       |  49 +++
 drivers/acpi/sysfs.c                       |  52 ++-
 drivers/acpi/tables.c                      |  38 +++
 drivers/acpi/thermal.c                     |  28 ++
 drivers/acpi/utils.c                       |  53 +++
 drivers/acpi/wakeup.c                      |   5 +
 drivers/acpi/x86/apple.c                   |  28 ++
 drivers/acpi/x86/utils.c                   |   9 +
 drivers/ata/ahci.c                         | 120 +++++++
 drivers/ata/ahci.h                         |   2 +
 drivers/ata/ata_generic.c                  |   2 +
 drivers/ata/ata_piix.c                     |  33 ++
 drivers/ata/libahci.c                      | 205 ++++++++++++
 drivers/ata/libata-acpi.c                  |  38 +++
 drivers/ata/libata-core.c                  | 519 +++++++++++++++++++++++++++++
 drivers/ata/libata-eh.c                    | 392 ++++++++++++++++++++++
 drivers/ata/libata-scsi.c                  | 148 ++++++++
 drivers/ata/libata-sff.c                   |  95 ++++++
 drivers/ata/libata-transport.c             |  30 ++
 drivers/ata/pata_sis.c                     |   2 +
 drivers/ata/sata_mv.c                      |   2 +
 drivers/ata/sata_nv.c                      |   2 +
 drivers/ata/sata_promise.c                 |   2 +
 drivers/ata/sata_sil.c                     |   2 +
 drivers/ata/sata_sis.c                     |   2 +
 drivers/ata/sata_svw.c                     |   2 +
 drivers/ata/sata_uli.c                     |   2 +
 drivers/ata/sata_via.c                     |   2 +
 drivers/ata/sata_vsc.c                     |   2 +
 drivers/base/attribute_container.c         |  20 ++
 drivers/base/base.h                        |   2 +
 drivers/base/bus.c                         | 109 ++++++
 drivers/base/cacheinfo.c                   |  76 ++++-
 drivers/base/class.c                       |  52 +++
 drivers/base/container.c                   |   6 +
 drivers/base/core.c                        | 205 ++++++++++++
 drivers/base/cpu.c                         |  28 ++
 drivers/base/dd.c                          |  77 +++++
 drivers/base/devres.c                      |  83 +++++
 drivers/base/devtmpfs.c                    |  12 +
 drivers/base/dma-mapping.c                 |  20 ++
 drivers/base/driver.c                      |  15 +
 drivers/base/firmware.c                    |   4 +
 drivers/base/firmware_class.c              |  51 +++
 drivers/base/hypervisor.c                  |   2 +
 drivers/base/init.c                        |   2 +
 drivers/base/map.c                         |  14 +
 drivers/base/memory.c                      |   2 +
 drivers/base/module.c                      |  13 +
 drivers/base/platform.c                    | 102 ++++++
 drivers/base/power/common.c                |   9 +
 drivers/base/power/main.c                  |  73 ++++
 drivers/base/power/opp/debugfs.c           |   2 +
 drivers/base/power/power.h                 |   2 +
 drivers/base/power/qos.c                   |  58 ++++
 drivers/base/power/runtime.c               | 142 ++++++++
 drivers/base/power/sysfs.c                 |  37 ++
 drivers/base/power/wakeirq.c               |  24 ++
 drivers/base/power/wakeup.c                |  85 +++++
 drivers/base/property.c                    |  85 +++++
 drivers/base/regmap/regmap-debugfs.c       |  20 ++
 drivers/base/regmap/regmap.c               | 100 ++++++
 drivers/base/regmap/trace.h                |   2 +
 drivers/base/syscore.c                     |   6 +
 drivers/base/topology.c                    |   3 +
 drivers/base/transport_class.c             |  17 +
 drivers/block/brd.c                        |   2 +
 drivers/block/cryptoloop.c                 |   2 +
 drivers/block/loop.c                       |  97 ++++++
 drivers/block/nbd.c                        |   2 +
 drivers/block/virtio_blk.c                 |   2 +
 drivers/block/xen-blkfront.c               |   2 +
 drivers/cdrom/cdrom.c                      | 178 ++++++++++
 drivers/char/hangcheck-timer.c             |   2 +
 drivers/char/hpet.c                        |  54 +++
 drivers/char/hw_random/amd-rng.c           |   2 +
 drivers/char/hw_random/core.c              |  54 +++
 drivers/char/hw_random/intel-rng.c         |   2 +
 drivers/char/hw_random/timeriomem-rng.c    |   2 +
 drivers/char/hw_random/via-rng.c           |   9 +
 drivers/char/hw_random/virtio-rng.c        |   2 +
 drivers/char/mem.c                         |  41 +++
 drivers/char/misc.c                        |  25 ++
 drivers/char/nvram.c                       |  28 ++
 drivers/char/random.c                      |  59 ++++
 drivers/char/virtio_console.c              |   2 +
 drivers/clk/clk-gpio.c                     |  15 +
 drivers/clk/clk.c                          | 147 ++++++++
 drivers/clk/x86/clk-pmc-atom.c             |  23 ++
 drivers/clocksource/acpi_pm.c              |  16 +
 drivers/connector/cn_proc.c                |  37 ++
 drivers/connector/cn_queue.c               |  17 +
 drivers/connector/connector.c              |  16 +
 drivers/cpufreq/acpi-cpufreq.c             | 100 ++++++
 drivers/cpufreq/cpufreq.c                  | 189 +++++++++++
 drivers/cpufreq/cpufreq_conservative.c     |   2 +
 drivers/cpufreq/cpufreq_ondemand.c         |  21 ++
 drivers/cpufreq/cpufreq_performance.c      |   5 +
 drivers/cpufreq/cpufreq_powersave.c        |   2 +
 drivers/cpufreq/cpufreq_stats.c            |   2 +
 drivers/cpufreq/cpufreq_userspace.c        |  12 +
 drivers/cpufreq/intel_pstate.c             | 129 +++++++
 drivers/cpufreq/p4-clockmod.c              |   2 +
 drivers/cpufreq/pcc-cpufreq.c              |   2 +
 drivers/cpufreq/powernow-k8.c              |   2 +
 drivers/cpuidle/cpuidle.c                  |  35 ++
 drivers/cpuidle/driver.c                   |  16 +
 drivers/cpuidle/governor.c                 |  13 +
 drivers/cpuidle/governors/ladder.c         |   2 +
 drivers/cpuidle/governors/menu.c           |   9 +
 drivers/cpuidle/sysfs.c                    |  25 ++
 drivers/crypto/padlock-aes.c               |   2 +
 drivers/crypto/padlock-sha.c               |   2 +
 drivers/dax/device.c                       |   2 +
 drivers/dax/pmem.c                         |   2 +
 drivers/dax/super.c                        |  43 +++
 drivers/devfreq/devfreq.c                  |   2 +
 drivers/devfreq/governor_simpleondemand.c  |   2 +
 drivers/firmware/dmi-id.c                  |  13 +
 drivers/firmware/dmi-sysfs.c               |   2 +
 drivers/firmware/dmi_scan.c                |  27 ++
 drivers/firmware/efi/capsule.c             |   9 +
 drivers/firmware/efi/efi-pstore.c          |   2 +
 drivers/firmware/efi/efi.c                 |  42 +++
 drivers/firmware/efi/efivars.c             |  38 +++
 drivers/firmware/efi/esrt.c                |  27 ++
 drivers/firmware/efi/reboot.c              |  11 +
 drivers/firmware/efi/vars.c                |  46 +++
 drivers/firmware/memmap.c                  |  26 ++
 drivers/hid/hid-core.c                     |  93 ++++++
 drivers/hid/hid-debug.c                    |  15 +
 drivers/hid/hid-generic.c                  |   2 +
 drivers/hid/usbhid/hid-core.c              |  40 +++
 drivers/hid/usbhid/hid-quirks.c            |   9 +
 drivers/hv/hv_balloon.c                    |   2 +
 drivers/hv/hv_util.c                       |   2 +
 drivers/hv/vmbus_drv.c                     |   2 +
 drivers/hwmon/hwmon.c                      |  34 ++
 drivers/i2c/i2c-core-base.c                | 104 ++++++
 drivers/i2c/i2c-dev.c                      |   2 +
 drivers/idle/intel_idle.c                  |   2 +
 drivers/input/evdev.c                      |  68 ++++
 drivers/input/ff-core.c                    |  16 +
 drivers/input/input-mt.c                   |  23 ++
 drivers/input/input.c                      | 191 +++++++++++
 drivers/input/joydev.c                     |   2 +
 drivers/input/keyboard/atkbd.c             | 149 +++++++++
 drivers/input/misc/atlas_btns.c            |   2 +
 drivers/input/misc/pcspkr.c                |   2 +
 drivers/input/misc/uinput.c                |   2 +
 drivers/input/misc/xen-kbdfront.c          |   2 +
 drivers/input/mousedev.c                   |   2 +
 drivers/input/serio/hyperv-keyboard.c      |   2 +
 drivers/input/serio/i8042-x86ia64io.h      |   2 +
 drivers/input/serio/i8042.c                | 154 +++++++++
 drivers/input/serio/libps2.c               |  18 +
 drivers/input/serio/pcips2.c               |   2 +
 drivers/input/serio/serio.c                |  68 ++++
 drivers/input/serio/serio_raw.c            |   2 +
 drivers/input/serio/serport.c              |  16 +
 drivers/mailbox/pcc.c                      |  41 +++
 drivers/md/dm-bio-prison-v1.c              |   2 +
 drivers/md/dm-bio-prison-v2.c              |   2 +
 drivers/md/dm-bufio.c                      |   2 +
 drivers/md/dm-crypt.c                      |   2 +
 drivers/md/dm-exception-store.c            |   2 +
 drivers/md/dm-io.c                         |  22 ++
 drivers/md/dm-ioctl.c                      |  66 ++++
 drivers/md/dm-kcopyd.c                     |  34 ++
 drivers/md/dm-linear.c                     |  13 +
 drivers/md/dm-snap-persistent.c            |   2 +
 drivers/md/dm-snap-transient.c             |   2 +
 drivers/md/dm-snap.c                       |   2 +
 drivers/md/dm-stats.c                      |  42 +++
 drivers/md/dm-stripe.c                     |  22 ++
 drivers/md/dm-target.c                     |  17 +
 drivers/md/dm-thin.c                       |   2 +
 drivers/md/dm.c                            | 139 +++++++-
 drivers/message/fusion/mptbase.c           |   2 +
 drivers/message/fusion/mptspi.c            |   2 +
 drivers/mfd/lpc_ich.c                      |   2 +
 drivers/mfd/lpc_sch.c                      |   2 +
 drivers/mfd/sm501.c                        |   2 +
 drivers/mfd/vx855.c                        |   2 +
 drivers/mfd/wl1273-core.c                  |   2 +
 drivers/net/Space.c                        |  12 +
 drivers/net/hyperv/netvsc_drv.c            |   2 +
 drivers/net/ipvlan/ipvlan_core.c           |   2 +
 drivers/net/ipvlan/ipvlan_main.c           |   2 +
 drivers/net/loopback.c                     |  13 +
 drivers/net/macvlan.c                      |   2 +
 drivers/net/macvtap.c                      |   2 +
 drivers/net/nlmon.c                        |   2 +
 drivers/net/phy/mdio_bus.c                 |  34 ++
 drivers/net/phy/phy_device.c               |  84 +++++
 drivers/net/tap.c                          |   2 +
 drivers/net/tun.c                          |   2 +
 drivers/net/veth.c                         |   2 +
 drivers/net/virtio_net.c                   |   2 +
 drivers/net/vmxnet3/vmxnet3_drv.c          |   2 +
 drivers/net/vxlan.c                        |   2 +
 drivers/net/xen-netfront.c                 |   2 +
 drivers/nvdimm/blk.c                       |   2 +
 drivers/nvdimm/btt.c                       |   2 +
 drivers/nvdimm/bus.c                       |   2 +
 drivers/nvdimm/core.c                      |   2 +
 drivers/nvdimm/dimm.c                      |   2 +
 drivers/nvdimm/label.c                     |   2 +
 drivers/nvdimm/pmem.c                      |   2 +
 drivers/nvdimm/region.c                    |   2 +
 drivers/nvme/host/core.c                   |   2 +
 drivers/nvme/host/pci.c                    |   2 +
 drivers/nvmem/core.c                       |  62 ++++
 drivers/oprofile/oprof.c                   |   2 +
 drivers/oprofile/oprofilefs.c              |   2 +
 drivers/pci/access.c                       |  72 ++++
 drivers/pci/ats.c                          |  25 ++
 drivers/pci/bus.c                          |  13 +
 drivers/pci/host-bridge.c                  |   5 +
 drivers/pci/hotplug/pci_hotplug_core.c     |  28 ++
 drivers/pci/hotplug/pciehp_core.c          |   2 +
 drivers/pci/hotplug/shpchp_core.c          |   2 +
 drivers/pci/iov.c                          |   2 +
 drivers/pci/msi.c                          | 189 +++++++++++
 drivers/pci/pci-acpi.c                     |  88 +++++
 drivers/pci/pci-driver.c                   |  72 ++++
 drivers/pci/pci-label.c                    |  27 ++
 drivers/pci/pci-stub.c                     |   2 +
 drivers/pci/pci-sysfs.c                    | 103 ++++++
 drivers/pci/pci.c                          | 329 ++++++++++++++++++
 drivers/pci/pci.h                          |   2 +
 drivers/pci/pcie/aspm.c                    |  37 ++
 drivers/pci/pcie/pme.c                     |  17 +
 drivers/pci/pcie/portdrv_bus.c             |   4 +
 drivers/pci/pcie/portdrv_core.c            |  20 ++
 drivers/pci/pcie/portdrv_pci.c             |  19 ++
 drivers/pci/probe.c                        | 244 ++++++++++++++
 drivers/pci/proc.c                         |  23 ++
 drivers/pci/quirks.c                       | 176 ++++++++++
 drivers/pci/rom.c                          |   9 +
 drivers/pci/search.c                       |  39 +++
 drivers/pci/setup-bus.c                    | 120 +++++++
 drivers/pci/setup-irq.c                    |  13 +
 drivers/pci/setup-res.c                    |  26 ++
 drivers/pci/slot.c                         |  21 ++
 drivers/pci/vc.c                           |  13 +
 drivers/pci/xen-pcifront.c                 |   2 +
 drivers/phy/phy-core.c                     |   2 +
 drivers/platform/x86/intel_ips.c           |   2 +
 drivers/platform/x86/mxm-wmi.c             |   2 +
 drivers/platform/x86/pmc_atom.c            |  20 ++
 drivers/platform/x86/wmi-bmof.c            |   2 +
 drivers/platform/x86/wmi.c                 |   2 +
 drivers/pnp/core.c                         |  25 ++
 drivers/pnp/driver.c                       |  45 +++
 drivers/pnp/manager.c                      |  16 +
 drivers/pnp/pnpacpi/core.c                 |  45 +++
 drivers/pnp/pnpacpi/rsparser.c             |  54 +++
 drivers/pnp/quirks.c                       |  12 +
 drivers/pnp/resource.c                     |  42 +++
 drivers/pnp/system.c                       |   6 +
 drivers/power/supply/power_supply_core.c   |  53 +++
 drivers/power/supply/power_supply_sysfs.c  |   7 +
 drivers/pps/pps.c                          |  14 +
 drivers/ptp/ptp_clock.c                    |  19 ++
 drivers/ptp/ptp_kvm.c                      |   2 +
 drivers/rtc/class.c                        |  30 ++
 drivers/rtc/hctosys.c                      |   2 +
 drivers/rtc/interface.c                    | 125 +++++++
 drivers/rtc/rtc-cmos.c                     | 125 +++++++
 drivers/rtc/rtc-dev.c                      |  55 +++
 drivers/rtc/rtc-lib.c                      |   8 +
 drivers/rtc/rtc-mc146818-lib.c             |   7 +
 drivers/rtc/rtc-proc.c                     |   8 +
 drivers/rtc/rtc-sysfs.c                    |  19 ++
 drivers/scsi/hosts.c                       |  47 +++
 drivers/scsi/scsi.c                        |  53 +++
 drivers/scsi/scsi_common.c                 |  31 ++
 drivers/scsi/scsi_devinfo.c                |  53 +++
 drivers/scsi/scsi_error.c                  | 129 +++++++
 drivers/scsi/scsi_ioctl.c                  |  13 +
 drivers/scsi/scsi_lib.c                    | 262 +++++++++++++++
 drivers/scsi/scsi_logging.c                |  31 ++
 drivers/scsi/scsi_pm.c                     |  37 ++
 drivers/scsi/scsi_scan.c                   | 110 ++++++
 drivers/scsi/scsi_sysctl.c                 |   5 +
 drivers/scsi/scsi_sysfs.c                  |  76 +++++
 drivers/scsi/scsi_transport_spi.c          |  64 ++++
 drivers/scsi/sd.c                          | 118 +++++++
 drivers/scsi/sg.c                          |  82 +++++
 drivers/scsi/sr.c                          |  56 ++++
 drivers/scsi/sr_ioctl.c                    |  39 +++
 drivers/scsi/sr_vendor.c                   |  10 +
 drivers/scsi/storvsc_drv.c                 |   2 +
 drivers/scsi/virtio_scsi.c                 |   2 +
 drivers/scsi/vmw_pvscsi.c                  |   2 +
 drivers/scsi/xen-scsifront.c               |   2 +
 drivers/thermal/step_wise.c                |   7 +
 drivers/thermal/thermal_core.c             |  89 +++++
 drivers/thermal/thermal_sysfs.c            |  33 ++
 drivers/tty/hvc/hvc_console.c              |   2 +
 drivers/tty/hvc/hvc_xen.c                  |   2 +
 drivers/tty/n_null.c                       |   6 +
 drivers/tty/n_tty.c                        | 197 +++++++++++
 drivers/tty/pty.c                          |  66 ++++
 drivers/tty/serial/8250/8250.h             |   2 +
 drivers/tty/serial/8250/8250_core.c        | 110 ++++++
 drivers/tty/serial/8250/8250_exar.c        |  17 +
 drivers/tty/serial/8250/8250_lpss.c        |   8 +
 drivers/tty/serial/8250/8250_pci.c         |  73 ++++
 drivers/tty/serial/8250/8250_pnp.c         |  23 ++
 drivers/tty/serial/8250/8250_port.c        | 319 ++++++++++++++++++
 drivers/tty/serial/earlycon.c              |  23 ++
 drivers/tty/serial/serial_core.c           | 184 ++++++++++
 drivers/tty/sysrq.c                        |  49 +++
 drivers/tty/tty_audit.c                    |  38 +++
 drivers/tty/tty_baudrate.c                 |  30 ++
 drivers/tty/tty_buffer.c                   |  33 ++
 drivers/tty/tty_io.c                       | 301 +++++++++++++++++
 drivers/tty/tty_ioctl.c                    |  72 ++++
 drivers/tty/tty_jobctrl.c                  |  66 ++++
 drivers/tty/tty_ldisc.c                    |  70 ++++
 drivers/tty/tty_ldsem.c                    |  38 +++
 drivers/tty/tty_mutex.c                    |  12 +
 drivers/tty/tty_port.c                     |  65 ++++
 drivers/tty/vt/consolemap.c                |  71 ++++
 drivers/tty/vt/keyboard.c                  | 131 ++++++++
 drivers/tty/vt/vc_screen.c                 |  18 +
 drivers/tty/vt/vt.c                        | 401 ++++++++++++++++++++++
 drivers/tty/vt/vt_ioctl.c                  |  25 ++
 drivers/usb/core/buffer.c                  |  12 +
 drivers/usb/core/devio.c                   | 107 ++++++
 drivers/usb/core/driver.c                  |  60 ++++
 drivers/usb/core/file.c                    |   3 +
 drivers/usb/core/hub.c                     |  76 +++++
 drivers/usb/core/notify.c                  |   6 +
 drivers/usb/core/usb-acpi.c                |  10 +
 drivers/usb/core/usb.c                     |  43 +++
 drivers/video/console/vgacon.c             |  53 +++
 drivers/video/fbdev/core/fb_notify.c       |   4 +
 drivers/video/fbdev/core/fbcon.c           | 114 +++++++
 drivers/video/fbdev/core/fbmem.c           |  41 +++
 drivers/video/fbdev/hyperv_fb.c            |   2 +
 drivers/video/fbdev/vesafb.c               |   2 +
 drivers/video/fbdev/xen-fbfront.c          |   2 +
 drivers/virtio/virtio.c                    |   2 +
 drivers/virtio/virtio_balloon.c            |   2 +
 drivers/virtio/virtio_input.c              |   2 +
 drivers/virtio/virtio_mmio.c               |   2 +
 drivers/virtio/virtio_pci_common.c         |   2 +
 drivers/virtio/virtio_pci_legacy.c         |   2 +
 drivers/virtio/virtio_pci_modern.c         |   2 +
 drivers/virtio/virtio_ring.c               |   2 +
 drivers/xen/balloon.c                      |   2 +
 drivers/xen/cpu_hotplug.c                  |   2 +
 drivers/xen/evtchn.c                       |   2 +
 drivers/xen/gntalloc.c                     |   2 +
 drivers/xen/gntdev.c                       |   2 +
 drivers/xen/grant-table.c                  |   2 +
 drivers/xen/manage.c                       |   2 +
 drivers/xen/pci.c                          |   2 +
 drivers/xen/pcpu.c                         |   2 +
 drivers/xen/platform-pci.c                 |   2 +
 drivers/xen/privcmd.c                      |   2 +
 drivers/xen/sys-hypervisor.c               |   2 +
 drivers/xen/xen-acpi-pad.c                 |   2 +
 drivers/xen/xen-acpi-processor.c           |   2 +
 drivers/xen/xenbus/xenbus_dev_frontend.c   |   2 +
 drivers/xen/xenbus/xenbus_probe.c          |   2 +
 drivers/xen/xenbus/xenbus_probe_frontend.c |   2 +
 drivers/xen/xenfs/super.c                  |   2 +
 543 files changed, 18027 insertions(+), 3 deletions(-)

diff --git a/drivers/acpi/ac.c b/drivers/acpi/ac.c
index 8f52483..f7971fc 100644
--- a/drivers/acpi/ac.c
+++ b/drivers/acpi/ac.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  acpi_ac.c - ACPI AC Adapter Driver ($Revision: 27 $)
  *
@@ -130,7 +132,9 @@ static int acpi_ac_get_state(struct acpi_ac *ac)
 	acpi_status status = AE_OK;
 
 	if (!ac)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	status = acpi_evaluate_integer(ac->device->handle, "_PSR", NULL,
 				       &ac->state);
@@ -151,6 +155,7 @@ static int get_ac_property(struct power_supply *psy,
 			   enum power_supply_property psp,
 			   union power_supply_propval *val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_ac *ac = to_acpi_ac(psy);
 
 	if (!ac)
@@ -256,6 +261,7 @@ static int acpi_ac_remove_fs(struct acpi_ac *ac)
 
 static void acpi_ac_notify(struct acpi_device *device, u32 event)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_ac *ac = acpi_driver_data(device);
 
 	if (!ac)
@@ -292,6 +298,7 @@ static void acpi_ac_notify(struct acpi_device *device, u32 event)
 static int acpi_ac_battery_notify(struct notifier_block *nb,
 				  unsigned long action, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_ac *ac = container_of(nb, struct acpi_ac, battery_nb);
 	struct acpi_bus_event *event = (struct acpi_bus_event *)data;
 
@@ -311,6 +318,7 @@ static int acpi_ac_battery_notify(struct notifier_block *nb,
 
 static int thinkpad_e530_quirk(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ac_sleep_before_get_state_ms = 1000;
 	return 0;
 }
@@ -335,7 +343,9 @@ static int acpi_ac_add(struct acpi_device *device)
 
 
 	if (!device)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ac = kzalloc(sizeof(struct acpi_ac), GFP_KERNEL);
 	if (!ac)
@@ -394,7 +404,9 @@ static int acpi_ac_resume(struct device *dev)
 	unsigned old_state;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ac = acpi_driver_data(to_acpi_device(dev));
 	if (!ac)
@@ -416,6 +428,7 @@ static int acpi_ac_remove(struct acpi_device *device)
 	struct acpi_ac *ac = NULL;
 
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!device || !acpi_driver_data(device))
 		return -EINVAL;
 
@@ -439,11 +452,14 @@ static int __init acpi_ac_init(void)
 	int result;
 
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	for (i = 0; i < ARRAY_SIZE(acpi_ac_blacklist); i++)
 		if (acpi_dev_present(acpi_ac_blacklist[i].hid, "1",
 				     acpi_ac_blacklist[i].hrv)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_info(PREFIX "AC: found native %s PMIC, not loading\n",
 				acpi_ac_blacklist[i].hid);
 			return -ENODEV;
@@ -469,6 +485,7 @@ static int __init acpi_ac_init(void)
 
 static void __exit acpi_ac_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_bus_unregister_driver(&acpi_ac_driver);
 #ifdef CONFIG_ACPI_PROCFS_POWER
 	acpi_unlock_ac_dir(acpi_ac_dir);
diff --git a/drivers/acpi/acpi_apd.c b/drivers/acpi/acpi_apd.c
index d5999eb..b05b3dd 100644
--- a/drivers/acpi/acpi_apd.c
+++ b/drivers/acpi/acpi_apd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * AMD ACPI support for ACPI2platform device.
  *
@@ -137,6 +139,7 @@ static int acpi_apd_create_device(struct acpi_device *adev,
 	int ret;
 
 	if (!dev_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pdev = acpi_create_platform_device(adev, NULL);
 		return IS_ERR_OR_NULL(pdev) ? PTR_ERR(pdev) : 1;
 	}
diff --git a/drivers/acpi/acpi_cmos_rtc.c b/drivers/acpi/acpi_cmos_rtc.c
index 0980a13..84a3cda 100644
--- a/drivers/acpi/acpi_cmos_rtc.c
+++ b/drivers/acpi/acpi_cmos_rtc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ACPI support for CMOS RTC Address Space access
  *
@@ -35,6 +37,7 @@ acpi_cmos_rtc_space_handler(u32 function, acpi_physical_address address,
 	int i;
 	u8 *value = (u8 *)value64;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (address > 0xff || !value64)
 		return AE_BAD_PARAMETER;
 
@@ -64,15 +67,18 @@ static int acpi_install_cmos_rtc_space_handler(struct acpi_device *adev,
 			&acpi_cmos_rtc_space_handler,
 			NULL, NULL);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err(PREFIX "Error installing CMOS-RTC region handler\n");
 		return -ENODEV;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
 static void acpi_remove_cmos_rtc_space_handler(struct acpi_device *adev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ACPI_FAILURE(acpi_remove_address_space_handler(adev->handle,
 			ACPI_ADR_SPACE_CMOS, &acpi_cmos_rtc_space_handler)))
 		pr_err(PREFIX "Error removing CMOS-RTC region handler\n");
diff --git a/drivers/acpi/acpi_lpss.c b/drivers/acpi/acpi_lpss.c
index 032ae44..78070a7 100644
--- a/drivers/acpi/acpi_lpss.c
+++ b/drivers/acpi/acpi_lpss.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ACPI support for Intel Lynxpoint LPSS.
  *
diff --git a/drivers/acpi/acpi_memhotplug.c b/drivers/acpi/acpi_memhotplug.c
index 6b0d3ef..927a173 100644
--- a/drivers/acpi/acpi_memhotplug.c
+++ b/drivers/acpi/acpi_memhotplug.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2004, 2013 Intel Corporation
  * Author: Naveen B S <naveen.b.s@intel.com>
diff --git a/drivers/acpi/acpi_pad.c b/drivers/acpi/acpi_pad.c
index 7544310..27298a7 100644
--- a/drivers/acpi/acpi_pad.c
+++ b/drivers/acpi/acpi_pad.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * acpi_pad.c ACPI Processor Aggregator Driver
  *
diff --git a/drivers/acpi/acpi_platform.c b/drivers/acpi/acpi_platform.c
index 88cd949..ba9d17c 100644
--- a/drivers/acpi/acpi_platform.c
+++ b/drivers/acpi/acpi_platform.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ACPI support for platform bus type.
  *
@@ -46,8 +48,10 @@ static void acpi_platform_fill_resource(struct acpi_device *adev,
 	 */
 	parent = acpi_get_first_physical_node(adev->parent);
 	if (parent && dev_is_pci(parent))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dest->parent = pci_find_resource(to_pci_dev(parent), dest);
 }
+}
 
 /**
  * acpi_create_platform_device - Create platform device for ACPI device node
@@ -72,23 +76,31 @@ struct platform_device *acpi_create_platform_device(struct acpi_device *adev,
 
 	/* If the ACPI node already has a physical device attached, skip it. */
 	if (adev->physical_node_count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (!acpi_match_device_ids(adev, forbidden_id_list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_LIST_HEAD(&resource_list);
 	count = acpi_dev_get_resources(adev, &resource_list, NULL, NULL);
 	if (count < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
 	} else if (count > 0) {
 		resources = kzalloc(count * sizeof(struct resource),
 				    GFP_KERNEL);
 		if (!resources) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(&adev->dev, "No memory for resources\n");
 			acpi_dev_free_resource_list(&resource_list);
 			return ERR_PTR(-ENOMEM);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = 0;
 		list_for_each_entry(rentry, &resource_list, node)
 			acpi_platform_fill_resource(adev, rentry->res,
@@ -97,6 +109,7 @@ struct platform_device *acpi_create_platform_device(struct acpi_device *adev,
 		acpi_dev_free_resource_list(&resource_list);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(&pdevinfo, 0, sizeof(pdevinfo));
 	/*
 	 * If the ACPI node has a parent and that parent has a physical device
@@ -122,7 +135,9 @@ struct platform_device *acpi_create_platform_device(struct acpi_device *adev,
 		dev_err(&adev->dev, "platform device creation failed: %ld\n",
 			PTR_ERR(pdev));
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_dev_node(&pdev->dev, acpi_get_node(adev->handle));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(&adev->dev, "created platform device %s\n",
 			dev_name(&pdev->dev));
 	}
diff --git a/drivers/acpi/acpi_pnp.c b/drivers/acpi/acpi_pnp.c
index 67d97c0..1536aa8d 100644
--- a/drivers/acpi/acpi_pnp.c
+++ b/drivers/acpi/acpi_pnp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ACPI support for PNP bus type
  *
@@ -321,7 +323,9 @@ static bool matching_id(const char *idstr, const char *list_id)
 	int i;
 
 	if (memcmp(idstr, list_id, 3))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	for (i = 3; i < 7; i++) {
 		char c = toupper(idstr[i]);
@@ -330,6 +334,7 @@ static bool matching_id(const char *idstr, const char *list_id)
 		    || (list_id[i] != 'X' && c != toupper(list_id[i])))
 			return false;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 
@@ -342,9 +347,11 @@ static bool acpi_pnp_match(const char *idstr, const struct acpi_device_id **matc
 			if (matchid)
 				*matchid = devid;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
diff --git a/drivers/acpi/acpi_processor.c b/drivers/acpi/acpi_processor.c
index 86c1059..c9448d6 100644
--- a/drivers/acpi/acpi_processor.c
+++ b/drivers/acpi/acpi_processor.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * acpi_processor.c - ACPI processor enumeration support
  *
@@ -46,7 +48,9 @@ static int acpi_processor_errata_piix4(struct pci_dev *dev)
 
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/*
 	 * Note that 'dev' references the PIIX4 ACPI Controller.
@@ -152,6 +156,7 @@ static int acpi_processor_errata(void)
 			     PCI_DEVICE_ID_INTEL_82371AB_3, PCI_ANY_ID,
 			     PCI_ANY_ID, NULL);
 	if (dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = acpi_processor_errata_piix4(dev);
 		pci_dev_put(dev);
 	}
@@ -167,16 +172,19 @@ static int acpi_processor_errata(void)
 int __weak acpi_map_cpu(acpi_handle handle,
 		phys_cpuid_t physid, u32 acpi_id, int *pcpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 
 int __weak acpi_unmap_cpu(int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 
 int __weak arch_register_cpu(int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 
@@ -189,7 +197,9 @@ static int acpi_processor_hotadd_init(struct acpi_processor *pr)
 	int ret;
 
 	if (invalid_phys_cpuid(pr->phys_id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	status = acpi_evaluate_integer(pr->handle, "_STA", NULL, &sta);
 	if (ACPI_FAILURE(status) || !(sta & ACPI_STA_DEVICE_PRESENT))
@@ -245,6 +255,7 @@ static int acpi_processor_get_info(struct acpi_device *device)
 	 * is required for proper C3 usage (to maintain cache coherency).
 	 */
 	if (acpi_gbl_FADT.pm2_control_block && acpi_gbl_FADT.pm2_control_length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr->flags.bm_control = 1;
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 				  "Bus mastering arbitration control present\n"));
@@ -256,6 +267,7 @@ static int acpi_processor_get_info(struct acpi_device *device)
 		/* Declared with "Processor" statement; match ProcessorID */
 		status = acpi_evaluate_object(pr->handle, NULL, NULL, &buffer);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(&device->dev,
 				"Failed to evaluate processor object (0x%x)\n",
 				status);
@@ -271,16 +283,19 @@ static int acpi_processor_get_info(struct acpi_device *device)
 		status = acpi_evaluate_integer(pr->handle, METHOD_NAME__UID,
 						NULL, &value);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(&device->dev,
 				"Failed to evaluate processor _UID (0x%x)\n",
 				status);
 			return -ENODEV;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_declaration = 1;
 		pr->acpi_id = value;
 	}
 
 	if (acpi_duplicate_processor_id(pr->acpi_id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&device->dev,
 			"Failed to get unique processor _UID (0x%x)\n",
 			pr->acpi_id);
@@ -290,17 +305,22 @@ static int acpi_processor_get_info(struct acpi_device *device)
 	pr->phys_id = acpi_get_phys_id(pr->handle, device_declaration,
 					pr->acpi_id);
 	if (invalid_phys_cpuid(pr->phys_id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_handle_debug(pr->handle, "failed to get CPU physical ID.\n");
+}
 
 	pr->id = acpi_map_cpuid(pr->phys_id, pr->acpi_id);
 	if (!cpu0_initialized && !acpi_has_cpu_in_madt()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpu0_initialized = 1;
 		/*
 		 * Handle UP system running SMP kernel, with no CPU
 		 * entry in MADT
 		 */
 		if (invalid_logical_cpuid(pr->id) && (num_online_cpus() == 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr->id = 0;
+}
 	}
 
 	/*
@@ -312,9 +332,12 @@ static int acpi_processor_get_info(struct acpi_device *device)
 	 *  because cpuid <-> apicid mapping is persistent now.
 	 */
 	if (invalid_logical_cpuid(pr->id) || !cpu_present(pr->id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int ret = acpi_processor_hotadd_init(pr);
 		if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
+}
 	}
 
 	/*
@@ -332,10 +355,14 @@ static int acpi_processor_get_info(struct acpi_device *device)
 
 	if (!object.processor.pblk_address)
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO, "No PBLK (NULL address)\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (object.processor.pblk_length != 6)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&device->dev, "Invalid PBLK length [%d]\n",
 			    object.processor.pblk_length);
+}
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr->throttling.address = object.processor.pblk_address;
 		pr->throttling.duty_offset = acpi_gbl_FADT.duty_offset;
 		pr->throttling.duty_width = acpi_gbl_FADT.duty_width;
@@ -350,8 +377,11 @@ static int acpi_processor_get_info(struct acpi_device *device)
 	 */
 	status = acpi_evaluate_integer(pr->handle, "_SUN", NULL, &value);
 	if (ACPI_SUCCESS(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		arch_fix_phys_package_id(pr->id, value);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -372,9 +402,12 @@ static int acpi_processor_add(struct acpi_device *device,
 
 	pr = kzalloc(sizeof(struct acpi_processor), GFP_KERNEL);
 	if (!pr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (!zalloc_cpumask_var(&pr->throttling.shared_cpu_map, GFP_KERNEL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = -ENOMEM;
 		goto err_free_pr;
 	}
@@ -386,7 +419,9 @@ static int acpi_processor_add(struct acpi_device *device,
 
 	result = acpi_processor_get_info(device);
 	if (result) /* Processor is not physically present or unavailable */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	BUG_ON(pr->id >= nr_cpu_ids);
 
@@ -397,6 +432,7 @@ static int acpi_processor_add(struct acpi_device *device,
 	 */
 	if (per_cpu(processor_device_array, pr->id) != NULL &&
 	    per_cpu(processor_device_array, pr->id) != device) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(&device->dev,
 			"BIOS reported wrong ACPI id %d for the processor\n",
 			pr->id);
@@ -412,6 +448,7 @@ static int acpi_processor_add(struct acpi_device *device,
 
 	dev = get_cpu_device(pr->id);
 	if (!dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = -ENODEV;
 		goto err;
 	}
@@ -424,14 +461,18 @@ static int acpi_processor_add(struct acpi_device *device,
 
 	/* Trigger the processor driver's .probe() if present. */
 	if (device_attach(dev) >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_err(dev, "Processor driver could not be attached\n");
 	acpi_unbind_one(dev);
 
  err:
 	free_cpumask_var(pr->throttling.shared_cpu_map);
 	device->driver_data = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	per_cpu(processors, pr->id) = NULL;
  err_free_pr:
 	kfree(pr);
@@ -447,6 +488,7 @@ static void acpi_processor_remove(struct acpi_device *device)
 {
 	struct acpi_processor *pr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!device || !acpi_driver_data(device))
 		return;
 
@@ -504,7 +546,9 @@ static acpi_status __init acpi_hwp_native_thermal_lvt_osc(acpi_handle handle,
 	};
 
 	if (acpi_hwp_native_thermal_lvt_set)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_CTRL_TERMINATE;
+}
 
 	capbuf[0] = 0x0000;
 	capbuf[1] = 0x1000; /* set bit 12 */
@@ -528,6 +572,7 @@ static acpi_status __init acpi_hwp_native_thermal_lvt_osc(acpi_handle handle,
 void __init acpi_early_processor_osc(void)
 {
 	if (boot_cpu_has(X86_FEATURE_HWP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_walk_namespace(ACPI_TYPE_PROCESSOR, ACPI_ROOT_OBJECT,
 				    ACPI_UINT32_MAX,
 				    acpi_hwp_native_thermal_lvt_osc,
@@ -565,6 +610,7 @@ static struct acpi_scan_handler processor_handler = {
 static int acpi_processor_container_attach(struct acpi_device *dev,
 					   const struct acpi_device_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -599,15 +645,20 @@ static void __init processor_validated_ids_update(int proc_id)
 	int i;
 
 	if (nr_unique_ids == NR_CPUS||nr_duplicate_ids == NR_CPUS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * Firstly, compare the proc_id with duplicate IDs, if the proc_id is
 	 * already in the IDs, do nothing.
 	 */
 	for (i = 0; i < nr_duplicate_ids; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (duplicate_processor_ids[i] == proc_id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 	}
 
 	/*
@@ -615,7 +666,9 @@ static void __init processor_validated_ids_update(int proc_id)
 	 * the IDs, put it in the duplicate IDs.
 	 */
 	for (i = 0; i < nr_unique_ids; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unique_processor_ids[i] == proc_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			duplicate_processor_ids[nr_duplicate_ids] = proc_id;
 			nr_duplicate_ids++;
 			return;
@@ -642,7 +695,9 @@ static acpi_status __init acpi_processor_ids_walk(acpi_handle handle,
 
 	status = acpi_get_type(handle, &acpi_type);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	switch (acpi_type) {
 	case ACPI_TYPE_PROCESSOR:
@@ -690,9 +745,13 @@ bool acpi_duplicate_processor_id(int proc_id)
 	 * in the duplicate IDs, return true, otherwise, return false.
 	 */
 	for (i = 0; i < nr_duplicate_ids; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (duplicate_processor_ids[i] == proc_id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
diff --git a/drivers/acpi/acpica/dsargs.c b/drivers/acpi/acpica/dsargs.c
index 2873455..c074b9a 100644
--- a/drivers/acpi/acpica/dsargs.c
+++ b/drivers/acpi/acpica/dsargs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dsargs - Support for execution of dynamic arguments for static
@@ -88,6 +90,7 @@ acpi_ds_execute_arguments(struct acpi_namespace_node *node,
 
 	op = acpi_ps_alloc_op(AML_INT_EVAL_SUBTREE_OP, aml_start);
 	if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -99,6 +102,7 @@ acpi_ds_execute_arguments(struct acpi_namespace_node *node,
 
 	walk_state = acpi_ds_create_walk_state(0, NULL, NULL, NULL);
 	if (!walk_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -106,6 +110,7 @@ acpi_ds_execute_arguments(struct acpi_namespace_node *node,
 	status = acpi_ds_init_aml_walk(walk_state, op, NULL, aml_start,
 				       aml_length, NULL, ACPI_IMODE_LOAD_PASS1);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ds_delete_walk_state(walk_state);
 		goto cleanup;
 	}
@@ -131,6 +136,7 @@ acpi_ds_execute_arguments(struct acpi_namespace_node *node,
 
 	op = acpi_ps_alloc_op(AML_INT_EVAL_SUBTREE_OP, aml_start);
 	if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -140,6 +146,7 @@ acpi_ds_execute_arguments(struct acpi_namespace_node *node,
 
 	walk_state = acpi_ds_create_walk_state(0, NULL, NULL, NULL);
 	if (!walk_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -149,6 +156,7 @@ acpi_ds_execute_arguments(struct acpi_namespace_node *node,
 	status = acpi_ds_init_aml_walk(walk_state, op, NULL, aml_start,
 				       aml_length, NULL, ACPI_IMODE_EXECUTE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ds_delete_walk_state(walk_state);
 		goto cleanup;
 	}
@@ -186,6 +194,7 @@ acpi_ds_get_buffer_field_arguments(union acpi_operand_object *obj_desc)
 	ACPI_FUNCTION_TRACE_PTR(ds_get_buffer_field_arguments, obj_desc);
 
 	if (obj_desc->common.flags & AOPOBJ_DATA_VALID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -231,6 +240,7 @@ acpi_ds_get_bank_field_arguments(union acpi_operand_object *obj_desc)
 	ACPI_FUNCTION_TRACE_PTR(ds_get_bank_field_arguments, obj_desc);
 
 	if (obj_desc->common.flags & AOPOBJ_DATA_VALID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -281,6 +291,7 @@ acpi_status acpi_ds_get_buffer_arguments(union acpi_operand_object *obj_desc)
 	ACPI_FUNCTION_TRACE_PTR(ds_get_buffer_arguments, obj_desc);
 
 	if (obj_desc->common.flags & AOPOBJ_DATA_VALID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -288,6 +299,7 @@ acpi_status acpi_ds_get_buffer_arguments(union acpi_operand_object *obj_desc)
 
 	node = obj_desc->buffer.node;
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "No pointer back to namespace node in buffer object %p",
 			    obj_desc));
@@ -325,6 +337,7 @@ acpi_status acpi_ds_get_package_arguments(union acpi_operand_object *obj_desc)
 	ACPI_FUNCTION_TRACE_PTR(ds_get_package_arguments, obj_desc);
 
 	if (obj_desc->common.flags & AOPOBJ_DATA_VALID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -332,6 +345,7 @@ acpi_status acpi_ds_get_package_arguments(union acpi_operand_object *obj_desc)
 
 	node = obj_desc->package.node;
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "No pointer back to namespace node in package %p",
 			    obj_desc));
@@ -371,11 +385,13 @@ acpi_status acpi_ds_get_region_arguments(union acpi_operand_object *obj_desc)
 	ACPI_FUNCTION_TRACE_PTR(ds_get_region_arguments, obj_desc);
 
 	if (obj_desc->region.flags & AOPOBJ_DATA_VALID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
 	extra_desc = acpi_ns_get_secondary_object(obj_desc);
 	if (!extra_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_EXIST);
 	}
 
@@ -397,6 +413,7 @@ acpi_status acpi_ds_get_region_arguments(union acpi_operand_object *obj_desc)
 					   extra_desc->extra.aml_length,
 					   extra_desc->extra.aml_start);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/dscontrol.c b/drivers/acpi/acpica/dscontrol.c
index f470e81..4fe7aea 100644
--- a/drivers/acpi/acpica/dscontrol.c
+++ b/drivers/acpi/acpica/dscontrol.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dscontrol - Support for execution control opcodes -
@@ -84,12 +86,14 @@ acpi_ds_exec_begin_control_op(struct acpi_walk_state *walk_state,
 		 * There is no need to allocate a new control state.
 		 */
 		if (walk_state->control_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (walk_state->control_state->control.
 			    aml_predicate_start ==
 			    (walk_state->parser_state.aml - 1)) {
 
 				/* Reset the state to start-of-loop */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				walk_state->control_state->common.state =
 				    ACPI_CONTROL_CONDITIONAL_EXECUTING;
 				break;
@@ -106,6 +110,7 @@ acpi_ds_exec_begin_control_op(struct acpi_walk_state *walk_state,
 		 */
 		control_state = acpi_ut_create_control_state();
 		if (!control_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			break;
 		}
@@ -131,6 +136,7 @@ acpi_ds_exec_begin_control_op(struct acpi_walk_state *walk_state,
 		/* If predicate is true, the IF was executed, ignore ELSE part */
 
 		if (walk_state->last_predicate) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_CTRL_TRUE;
 		}
 
@@ -200,6 +206,7 @@ acpi_ds_exec_end_control_op(struct acpi_walk_state *walk_state,
 
 		ACPI_DEBUG_PRINT((ACPI_DB_DISPATCH, "[WHILE_OP] Op=%p\n", op));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		control_state = walk_state->control_state;
 		if (control_state->common.value) {
 
@@ -214,6 +221,7 @@ acpi_ds_exec_end_control_op(struct acpi_walk_state *walk_state,
 			control_state->control.loop_count++;
 			if (control_state->control.loop_count >
 			    acpi_gbl_max_loop_iterations) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_AML_INFINITE_LOOP;
 				break;
 			}
@@ -263,6 +271,7 @@ acpi_ds_exec_end_control_op(struct acpi_walk_state *walk_state,
 			    acpi_ds_create_operands(walk_state,
 						    op->common.value.arg);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 
@@ -275,6 +284,7 @@ acpi_ds_exec_end_control_op(struct acpi_walk_state *walk_state,
 			    acpi_ex_resolve_to_value(&walk_state->operands[0],
 						     walk_state);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 
@@ -313,6 +323,7 @@ acpi_ds_exec_end_control_op(struct acpi_walk_state *walk_state,
 							     obj_desc[0],
 							     walk_state);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return (status);
 				}
 			}
@@ -322,11 +333,14 @@ acpi_ds_exec_end_control_op(struct acpi_walk_state *walk_state,
 		} else {
 			/* No return operand */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (walk_state->num_operands) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ut_remove_reference(walk_state->
 							 operands[0]);
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			walk_state->operands[0] = NULL;
 			walk_state->num_operands = 0;
 			walk_state->return_desc = NULL;
@@ -338,6 +352,7 @@ acpi_ds_exec_end_control_op(struct acpi_walk_state *walk_state,
 
 		/* End the control method execution right now */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_CTRL_TERMINATE;
 		break;
 
@@ -349,6 +364,7 @@ acpi_ds_exec_end_control_op(struct acpi_walk_state *walk_state,
 
 	case AML_BREAKPOINT_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_db_signal_break_point(walk_state);
 
 		/* Call to the OSL in case OS wants a piece of the action */
@@ -362,6 +378,7 @@ acpi_ds_exec_end_control_op(struct acpi_walk_state *walk_state,
 
 		/* Pop and delete control states until we find a while */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (walk_state->control_state &&
 		       (walk_state->control_state->control.opcode !=
 			AML_WHILE_OP)) {
@@ -373,26 +390,32 @@ acpi_ds_exec_end_control_op(struct acpi_walk_state *walk_state,
 
 		/* No while found? */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!walk_state->control_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_AML_NO_WHILE);
 		}
 
 		/* Was: walk_state->aml_last_while = walk_state->control_state->Control.aml_predicate_start; */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		walk_state->aml_last_while =
 		    walk_state->control_state->control.package_end;
 
 		/* Return status depending on opcode */
 
 		if (op->common.aml_opcode == AML_BREAK_OP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_CTRL_BREAK;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_CTRL_CONTINUE;
 		}
 		break;
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Unknown control opcode=0x%X Op=%p",
 			    op->common.aml_opcode, op));
 
@@ -400,5 +423,6 @@ acpi_ds_exec_end_control_op(struct acpi_walk_state *walk_state,
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (status);
 }
diff --git a/drivers/acpi/acpica/dsfield.c b/drivers/acpi/acpica/dsfield.c
index 7bcf5f5e..7589ec8 100644
--- a/drivers/acpi/acpica/dsfield.c
+++ b/drivers/acpi/acpica/dsfield.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dsfield - Dispatcher field routines
@@ -166,6 +168,7 @@ acpi_ds_create_buffer_field(union acpi_parse_object *op,
 
 		/* For create_field, name is the 4th argument */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		arg = acpi_ps_get_arg(op, 3);
 	} else {
 		/* For all other create_XXXField operators, name is the 3rd argument */
@@ -174,22 +177,26 @@ acpi_ds_create_buffer_field(union acpi_parse_object *op,
 	}
 
 	if (!arg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_AML_NO_OPERAND);
 	}
 
 	if (walk_state->deferred_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		node = walk_state->deferred_node;
 		status = AE_OK;
 	} else {
 		/* Execute flag should always be set when this function is entered */
 
 		if (!(walk_state->parse_flags & ACPI_PARSE_EXECUTE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO, "Parse execute mode is not set"));
 			return_ACPI_STATUS(AE_AML_INTERNAL);
 		}
 
 		/* Creating new namespace node, should not already exist */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = ACPI_NS_NO_UPSEARCH | ACPI_NS_DONT_OPEN_SCOPE |
 		    ACPI_NS_ERROR_IF_FOUND;
 
@@ -199,6 +206,7 @@ acpi_ds_create_buffer_field(union acpi_parse_object *op,
 		 */
 		if (walk_state->method_node &&
 		    !(walk_state->parse_flags & ACPI_PARSE_MODULE_LEVEL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flags |= ACPI_NS_TEMPORARY;
 		}
 
@@ -209,6 +217,7 @@ acpi_ds_create_buffer_field(union acpi_parse_object *op,
 					ACPI_IMODE_LOAD_PASS1, flags,
 					walk_state, &node);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR_NAMESPACE(arg->common.value.string, status);
 			return_ACPI_STATUS(status);
 		}
@@ -228,6 +237,7 @@ acpi_ds_create_buffer_field(union acpi_parse_object *op,
 	 */
 	obj_desc = acpi_ns_get_attached_object(node);
 	if (obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -240,6 +250,7 @@ acpi_ds_create_buffer_field(union acpi_parse_object *op,
 
 	obj_desc = acpi_ut_create_internal_object(ACPI_TYPE_BUFFER_FIELD);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -315,6 +326,7 @@ acpi_ds_get_field_names(struct acpi_create_field_info *info,
 			    (u64)arg->common.value.size;
 
 			if (position > ACPI_UINT32_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "Bit offset within field too large (> 0xFFFFFFFF)"));
 				return_ACPI_STATUS(AE_SUPPORT);
@@ -338,6 +350,7 @@ acpi_ds_get_field_names(struct acpi_create_field_info *info,
 
 			/* access_type (byte_acc, word_acc, etc.) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			info->field_flags = (u8)
 			    ((info->
 			      field_flags & ~(AML_FIELD_ACCESS_TYPE_MASK)) |
@@ -369,12 +382,14 @@ acpi_ds_get_field_names(struct acpi_create_field_info *info,
 			 */
 			child = arg->common.value.arg;
 			if (child->common.aml_opcode == AML_INT_BYTELIST_OP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				info->resource_buffer = child->named.data;
 				info->resource_length =
 				    (u16)child->named.value.integer;
 			} else {
 				/* Lookup the Connection() namepath, it should already exist */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = acpi_ns_lookup(walk_state->scope_info,
 							child->common.value.
 							name, ACPI_TYPE_ANY,
@@ -383,6 +398,7 @@ acpi_ds_get_field_names(struct acpi_create_field_info *info,
 							walk_state,
 							&info->connection_node);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ACPI_ERROR_NAMESPACE(child->common.
 							     value.name,
 							     status);
@@ -402,6 +418,7 @@ acpi_ds_get_field_names(struct acpi_create_field_info *info,
 						ACPI_NS_DONT_OPEN_SCOPE,
 						walk_state, &info->field_node);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR_NAMESPACE((char *)&arg->named.name,
 						     status);
 				return_ACPI_STATUS(status);
@@ -419,6 +436,7 @@ acpi_ds_get_field_names(struct acpi_create_field_info *info,
 				    (info->field_node)) {
 					status = acpi_ex_prep_field_value(info);
 					if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						return_ACPI_STATUS(status);
 					}
 				}
@@ -430,6 +448,7 @@ acpi_ds_get_field_names(struct acpi_create_field_info *info,
 			    (u64)arg->common.value.size;
 
 			if (position > ACPI_UINT32_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "Field [%4.4s] bit offset too large (> 0xFFFFFFFF)",
 					    ACPI_CAST_PTR(char,
@@ -444,6 +463,7 @@ acpi_ds_get_field_names(struct acpi_create_field_info *info,
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Invalid opcode in field list: 0x%X",
 				    arg->common.aml_opcode));
@@ -453,6 +473,7 @@ acpi_ds_get_field_names(struct acpi_create_field_info *info,
 		arg = arg->common.next;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -498,11 +519,13 @@ acpi_ds_create_field(union acpi_parse_object *op,
 							&region_node);
 #endif
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR_NAMESPACE(arg->common.value.name, status);
 			return_ACPI_STATUS(status);
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(&info, 0, sizeof(struct acpi_create_field_info));
 
 	/* Second arg is the field flags */
@@ -550,13 +573,16 @@ acpi_ds_init_field_objects(union acpi_parse_object *op,
 	/* Execute flag should always be set when this function is entered */
 
 	if (!(walk_state->parse_flags & ACPI_PARSE_EXECUTE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (walk_state->parse_flags & ACPI_PARSE_DEFERRED_OP) {
 
 			/* bank_field Op is deferred, just return OK */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_OK);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Parse deferred mode is not set"));
 		return_ACPI_STATUS(AE_AML_INTERNAL);
 	}
@@ -574,23 +600,27 @@ acpi_ds_init_field_objects(union acpi_parse_object *op,
 
 	case AML_BANK_FIELD_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		arg = acpi_ps_get_arg(op, 4);
 		type = ACPI_TYPE_LOCAL_BANK_FIELD;
 		break;
 
 	case AML_INDEX_FIELD_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		arg = acpi_ps_get_arg(op, 3);
 		type = ACPI_TYPE_LOCAL_INDEX_FIELD;
 		break;
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
 	/* Creating new namespace node(s), should not already exist */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flags = ACPI_NS_NO_UPSEARCH | ACPI_NS_DONT_OPEN_SCOPE |
 	    ACPI_NS_ERROR_IF_FOUND;
 
@@ -600,6 +630,7 @@ acpi_ds_init_field_objects(union acpi_parse_object *op,
 	 */
 	if (walk_state->method_node &&
 	    !(walk_state->parse_flags & ACPI_PARSE_MODULE_LEVEL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= ACPI_NS_TEMPORARY;
 	}
 
@@ -618,14 +649,17 @@ acpi_ds_init_field_objects(union acpi_parse_object *op,
 						ACPI_IMODE_LOAD_PASS1, flags,
 						walk_state, &node);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR_NAMESPACE((char *)&arg->named.name,
 						     status);
 				if (status != AE_ALREADY_EXISTS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status);
 				}
 
 				/* Name already exists, just ignore this error */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_OK;
 			}
 
@@ -637,6 +671,7 @@ acpi_ds_init_field_objects(union acpi_parse_object *op,
 		arg = arg->common.next;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -765,6 +800,7 @@ acpi_ds_create_index_field(union acpi_parse_object *op,
 			   ACPI_NS_SEARCH_PARENT, walk_state,
 			   &info.register_node);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR_NAMESPACE(arg->common.value.string, status);
 		return_ACPI_STATUS(status);
 	}
diff --git a/drivers/acpi/acpica/dsinit.c b/drivers/acpi/acpica/dsinit.c
index b1842dd..ebb8bc8 100644
--- a/drivers/acpi/acpica/dsinit.c
+++ b/drivers/acpi/acpica/dsinit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dsinit - Object initialization namespace walk
@@ -94,6 +96,7 @@ acpi_ds_init_one_object(acpi_handle obj_handle,
 	 * was just loaded
 	 */
 	if (node->owner_id != info->owner_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -106,6 +109,7 @@ acpi_ds_init_one_object(acpi_handle obj_handle,
 
 		status = acpi_ds_initialize_region(obj_handle);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status,
 					"During Region initialization %p [%4.4s]",
 					obj_handle,
@@ -200,6 +204,7 @@ acpi_ds_initialize_objects(u32 table_index,
 
 	status = acpi_tb_get_owner_id(table_index, &owner_id);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/dsmethod.c b/drivers/acpi/acpica/dsmethod.c
index d7fc369..725a6b1 100644
--- a/drivers/acpi/acpica/dsmethod.c
+++ b/drivers/acpi/acpica/dsmethod.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dsmethod - Parser/Interpreter interface - control method parsing
@@ -103,6 +105,7 @@ acpi_ds_auto_serialize_method(struct acpi_namespace_node *node,
 
 	op = acpi_ps_alloc_op(AML_METHOD_OP, obj_desc->method.aml_start);
 	if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -114,6 +117,7 @@ acpi_ds_auto_serialize_method(struct acpi_namespace_node *node,
 	walk_state =
 	    acpi_ds_create_walk_state(node->owner_id, NULL, NULL, NULL);
 	if (!walk_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ps_free_op(op);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
@@ -122,6 +126,7 @@ acpi_ds_auto_serialize_method(struct acpi_namespace_node *node,
 				       obj_desc->method.aml_start,
 				       obj_desc->method.aml_length, NULL, 0);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ds_delete_walk_state(walk_state);
 		acpi_ps_free_op(op);
 		return_ACPI_STATUS(status);
@@ -164,6 +169,7 @@ acpi_ds_detect_named_opcodes(struct acpi_walk_state *walk_state,
 	if (!
 	    (walk_state->op_info->
 	     flags & (AML_NAMED | AML_CREATE | AML_FIELD))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -218,6 +224,7 @@ acpi_ds_method_error(acpi_status status, struct acpi_walk_state *walk_state)
 
 	/* Ignore AE_OK and control exception codes */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ACPI_SUCCESS(status) || (status & AE_CODE_CONTROL)) {
 		return (status);
 	}
@@ -289,6 +296,7 @@ acpi_ds_create_method_mutex(union acpi_operand_object *method_desc)
 
 	mutex_desc = acpi_ut_create_internal_object(ACPI_TYPE_MUTEX);
 	if (!mutex_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -296,6 +304,7 @@ acpi_ds_create_method_mutex(union acpi_operand_object *method_desc)
 
 	status = acpi_os_create_mutex(&mutex_desc->mutex.os_mutex);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_delete_object_desc(mutex_desc);
 		return_ACPI_STATUS(status);
 	}
@@ -332,6 +341,7 @@ acpi_ds_begin_method_execution(struct acpi_namespace_node *method_node,
 	ACPI_FUNCTION_TRACE_PTR(ds_begin_method_execution, method_node);
 
 	if (!method_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NULL_ENTRY);
 	}
 
@@ -340,6 +350,7 @@ acpi_ds_begin_method_execution(struct acpi_namespace_node *method_node,
 	/* Prevent wraparound of thread count */
 
 	if (obj_desc->method.thread_count == ACPI_UINT8_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Method reached maximum reentrancy limit (255)"));
 		return_ACPI_STATUS(AE_AML_METHOD_LIMIT);
@@ -357,6 +368,7 @@ acpi_ds_begin_method_execution(struct acpi_namespace_node *method_node,
 		if (!obj_desc->method.mutex) {
 			status = acpi_ds_create_method_mutex(obj_desc);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 		}
@@ -377,6 +389,7 @@ acpi_ds_begin_method_execution(struct acpi_namespace_node *method_node,
 		       info_flags & ACPI_METHOD_IGNORE_SYNC_LEVEL))
 		    && (walk_state->thread->current_sync_level >
 			obj_desc->method.mutex->mutex.sync_level)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Cannot acquire Mutex for method [%4.4s]"
 				    ", current SyncLevel is too large (%u)",
@@ -403,6 +416,7 @@ acpi_ds_begin_method_execution(struct acpi_namespace_node *method_node,
 						      mutex.os_mutex,
 						      ACPI_WAIT_FOREVER);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 
@@ -466,9 +480,12 @@ acpi_ds_begin_method_execution(struct acpi_namespace_node *method_node,
 cleanup:
 	/* On error, must release the method mutex (if present) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (obj_desc->method.mutex) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_os_release_mutex(obj_desc->method.mutex->mutex.os_mutex);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -509,11 +526,13 @@ acpi_ds_call_control_method(struct acpi_thread_state *thread,
 	 */
 	method_node = this_walk_state->method_call_node;
 	if (!method_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NULL_ENTRY);
 	}
 
 	obj_desc = acpi_ns_get_attached_object(method_node);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NULL_OBJECT);
 	}
 
@@ -523,6 +542,7 @@ acpi_ds_call_control_method(struct acpi_thread_state *thread,
 	    acpi_ds_begin_method_execution(method_node, obj_desc,
 					   this_walk_state);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -532,6 +552,7 @@ acpi_ds_call_control_method(struct acpi_thread_state *thread,
 	    acpi_ds_create_walk_state(obj_desc->method.owner_id, NULL, obj_desc,
 				      thread);
 	if (!next_walk_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -550,6 +571,7 @@ acpi_ds_call_control_method(struct acpi_thread_state *thread,
 	 */
 	info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info));
 	if (!info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -589,16 +611,19 @@ acpi_ds_call_control_method(struct acpi_thread_state *thread,
 		status =
 		    obj_desc->method.dispatch.implementation(next_walk_state);
 		if (status == AE_OK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_CTRL_TERMINATE;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 
 cleanup:
 
 	/* On error, we must terminate the method properly */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_ds_terminate_control_method(obj_desc, next_walk_state);
 	acpi_ds_delete_walk_state(next_walk_state);
 
@@ -644,6 +669,7 @@ acpi_ds_restart_control_method(struct acpi_walk_state *walk_state,
 
 		/* Is the implicit return object the same as the return desc? */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		same_as_implicit_return =
 		    (walk_state->implicit_return_obj == return_desc);
 
@@ -655,6 +681,7 @@ acpi_ds_restart_control_method(struct acpi_walk_state *walk_state,
 
 			status = acpi_ds_result_push(return_desc, walk_state);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ut_remove_reference(return_desc);
 				return_ACPI_STATUS(status);
 			}
@@ -689,6 +716,7 @@ acpi_ds_restart_control_method(struct acpi_walk_state *walk_state,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -719,6 +747,7 @@ acpi_ds_terminate_control_method(union acpi_operand_object *method_desc,
 	/* method_desc is required, walk_state is optional */
 
 	if (!method_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -755,6 +784,7 @@ acpi_ds_terminate_control_method(union acpi_operand_object *method_desc,
 			 */
 			if (method_desc->method.
 			    info_flags & ACPI_METHOD_MODIFIED_NAMESPACE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				(void)acpi_ex_exit_interpreter();
 				acpi_ns_delete_namespace_by_owner(method_desc->
 								  method.
@@ -791,6 +821,7 @@ acpi_ds_terminate_control_method(union acpi_operand_object *method_desc,
 	if (method_desc->method.thread_count) {
 		method_desc->method.thread_count--;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Invalid zero thread count in method"));
 	}
 
@@ -819,7 +850,9 @@ acpi_ds_terminate_control_method(union acpi_operand_object *method_desc,
 		 */
 		if (method_desc->method.
 		    info_flags & ACPI_METHOD_SERIALIZED_PENDING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (walk_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_INFO(("Marking method %4.4s as Serialized "
 					   "because of AE_ALREADY_EXISTS error",
 					   walk_state->method_node->name.
diff --git a/drivers/acpi/acpica/dsmthdat.c b/drivers/acpi/acpica/dsmthdat.c
index 27a7de9..1ffb960 100644
--- a/drivers/acpi/acpica/dsmthdat.c
+++ b/drivers/acpi/acpica/dsmthdat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: dsmthdat - control method arguments and local variables
@@ -203,6 +205,7 @@ acpi_ds_method_data_init_args(union acpi_operand_object **params,
 	if (!params) {
 		ACPI_DEBUG_PRINT((ACPI_DB_EXEC,
 				  "No parameter list passed to method\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -219,6 +222,7 @@ acpi_ds_method_data_init_args(union acpi_operand_object **params,
 		    acpi_ds_method_data_set_value(ACPI_REFCLASS_ARG, index,
 						  params[index], walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -226,6 +230,7 @@ acpi_ds_method_data_init_args(union acpi_operand_object **params,
 	}
 
 	ACPI_DEBUG_PRINT((ACPI_DB_EXEC, "%u args passed to method\n", index));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -260,6 +265,7 @@ acpi_ds_method_data_get_node(u8 type,
 	case ACPI_REFCLASS_LOCAL:
 
 		if (index > ACPI_METHOD_MAX_LOCAL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Local index %u is invalid (max %u)",
 				    index, ACPI_METHOD_MAX_LOCAL));
@@ -274,6 +280,7 @@ acpi_ds_method_data_get_node(u8 type,
 	case ACPI_REFCLASS_ARG:
 
 		if (index > ACPI_METHOD_MAX_ARG) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Arg index %u is invalid (max %u)",
 				    index, ACPI_METHOD_MAX_ARG));
@@ -287,10 +294,12 @@ acpi_ds_method_data_get_node(u8 type,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Type %u is invalid", type));
 		return_ACPI_STATUS(AE_TYPE);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -331,6 +340,7 @@ acpi_ds_method_data_set_value(u8 type,
 
 	status = acpi_ds_method_data_get_node(type, index, walk_state, &node);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -380,6 +390,7 @@ acpi_ds_method_data_get_value(u8 type,
 	/* Validate the object descriptor */
 
 	if (!dest_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Null object descriptor pointer"));
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
@@ -388,6 +399,7 @@ acpi_ds_method_data_get_value(u8 type,
 
 	status = acpi_ds_method_data_get_node(type, index, walk_state, &node);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -408,12 +420,16 @@ acpi_ds_method_data_get_value(u8 type,
 
 		/* If slack enabled, init the local_x/arg_x to an Integer of value zero */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (acpi_gbl_enable_interpreter_slack) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			object = acpi_ut_create_integer_object((u64) 0);
 			if (!object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(AE_NO_MEMORY);
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			node->object = object;
 		}
 
@@ -423,6 +439,7 @@ acpi_ds_method_data_get_value(u8 type,
 			switch (type) {
 			case ACPI_REFCLASS_ARG:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "Uninitialized Arg[%u] at node %p",
 					    index, node));
@@ -438,6 +455,7 @@ acpi_ds_method_data_get_value(u8 type,
 
 			default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "Not a Arg/Local opcode: 0x%X",
 					    type));
@@ -485,6 +503,7 @@ acpi_ds_method_data_delete_value(u8 type,
 
 	status = acpi_ds_method_data_get_node(type, index, walk_state, &node);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -509,6 +528,7 @@ acpi_ds_method_data_delete_value(u8 type,
 		acpi_ut_remove_reference(object);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_VOID;
 }
 
@@ -548,6 +568,7 @@ acpi_ds_store_object_to_local(u8 type,
 	/* Parameter validation */
 
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -555,6 +576,7 @@ acpi_ds_store_object_to_local(u8 type,
 
 	status = acpi_ds_method_data_get_node(type, index, walk_state, &node);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -562,6 +584,7 @@ acpi_ds_store_object_to_local(u8 type,
 	if (current_obj_desc == obj_desc) {
 		ACPI_DEBUG_PRINT((ACPI_DB_EXEC, "Obj=%p already installed!\n",
 				  obj_desc));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -578,6 +601,7 @@ acpi_ds_store_object_to_local(u8 type,
 		    acpi_ut_copy_iobject_to_iobject(obj_desc, &new_obj_desc,
 						    walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	}
@@ -637,9 +661,11 @@ acpi_ds_store_object_to_local(u8 type,
 				/* Remove local reference if we copied the object above */
 
 				if (new_obj_desc != obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					acpi_ut_remove_reference(new_obj_desc);
 				}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 		}
@@ -664,6 +690,7 @@ acpi_ds_store_object_to_local(u8 type,
 		acpi_ut_remove_reference(new_obj_desc);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
diff --git a/drivers/acpi/acpica/dsobject.c b/drivers/acpi/acpica/dsobject.c
index 8244855..2bcf5773 100644
--- a/drivers/acpi/acpica/dsobject.c
+++ b/drivers/acpi/acpica/dsobject.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dsobject - Dispatcher object management routines
@@ -100,6 +102,7 @@ acpi_ds_build_internal_object(struct acpi_walk_state *walk_state,
 				 */
 				goto create_new_object;
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = acpi_ns_lookup(walk_state->scope_info,
 							op->common.value.string,
 							ACPI_TYPE_ANY,
@@ -112,6 +115,7 @@ acpi_ds_build_internal_object(struct acpi_walk_state *walk_state,
 							 acpi_namespace_node,
 							 &(op->common.node)));
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ACPI_ERROR_NAMESPACE(op->common.value.
 							     string, status);
 					return_ACPI_STATUS(status);
@@ -128,6 +132,7 @@ acpi_ds_build_internal_object(struct acpi_walk_state *walk_state,
 						   (op->common.aml_opcode))->
 						  object_type);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -135,6 +140,7 @@ acpi_ds_build_internal_object(struct acpi_walk_state *walk_state,
 	    acpi_ds_init_object_from_op(walk_state, op, op->common.aml_opcode,
 					&obj_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_remove_reference(obj_desc);
 		return_ACPI_STATUS(status);
 	}
@@ -206,6 +212,7 @@ acpi_ds_build_internal_buffer_obj(struct acpi_walk_state *walk_state,
 		obj_desc = acpi_ut_create_internal_object(ACPI_TYPE_BUFFER);
 		*obj_desc_ptr = obj_desc;
 		if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_NO_MEMORY);
 		}
 	}
@@ -220,6 +227,7 @@ acpi_ds_build_internal_buffer_obj(struct acpi_walk_state *walk_state,
 	byte_list = arg->named.next;
 	if (byte_list) {
 		if (byte_list->common.aml_opcode != AML_INT_BYTELIST_OP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Expecting bytelist, found AML opcode 0x%X in op %p",
 				    byte_list->common.aml_opcode, byte_list));
@@ -238,12 +246,14 @@ acpi_ds_build_internal_buffer_obj(struct acpi_walk_state *walk_state,
 	 */
 	obj_desc->buffer.length = buffer_length;
 	if (byte_list_length > buffer_length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		obj_desc->buffer.length = byte_list_length;
 	}
 
 	/* Allocate the buffer */
 
 	if (obj_desc->buffer.length == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		obj_desc->buffer.pointer = NULL;
 		ACPI_DEBUG_PRINT((ACPI_DB_EXEC,
 				  "Buffer defined with zero length in AML, creating\n"));
@@ -251,6 +261,7 @@ acpi_ds_build_internal_buffer_obj(struct acpi_walk_state *walk_state,
 		obj_desc->buffer.pointer =
 		    ACPI_ALLOCATE_ZEROED(obj_desc->buffer.length);
 		if (!obj_desc->buffer.pointer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_delete_object_desc(obj_desc);
 			return_ACPI_STATUS(AE_NO_MEMORY);
 		}
@@ -298,6 +309,7 @@ acpi_ds_create_node(struct acpi_walk_state *walk_state,
 	 * the named object node the first time through
 	 */
 	if (acpi_ns_get_attached_object(node)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -305,6 +317,7 @@ acpi_ds_create_node(struct acpi_walk_state *walk_state,
 
 		/* No arguments, there is nothing to do */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -314,6 +327,7 @@ acpi_ds_create_node(struct acpi_walk_state *walk_state,
 	    acpi_ds_build_internal_object(walk_state, op->common.value.arg,
 					  &obj_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -368,6 +382,7 @@ acpi_ds_init_object_from_op(struct acpi_walk_state *walk_state,
 
 		/* Unknown opcode */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_TYPE);
 	}
 
@@ -398,6 +413,7 @@ acpi_ds_init_object_from_op(struct acpi_walk_state *walk_state,
 				  walk_state->operands[0]);
 
 		if (!op->named.data) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_OK);
 		}
 
@@ -432,6 +448,7 @@ acpi_ds_init_object_from_op(struct acpi_walk_state *walk_state,
 
 			case AML_ONES_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				obj_desc->integer.value = ACPI_UINT64_MAX;
 
 				/* Truncate value if we are executing from a 32-bit ACPI table */
@@ -443,11 +460,13 @@ acpi_ds_init_object_from_op(struct acpi_walk_state *walk_state,
 
 			case AML_REVISION_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				obj_desc->integer.value = ACPI_CA_VERSION;
 				break;
 
 			default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "Unknown constant opcode 0x%X",
 					    opcode));
@@ -465,6 +484,7 @@ acpi_ds_init_object_from_op(struct acpi_walk_state *walk_state,
 
 				/* Warn if we found a 64-bit constant in a 32-bit table */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_WARNING((AE_INFO,
 					      "Truncated 64-bit constant found in 32-bit table: %8.8X%8.8X => %8.8X",
 					      ACPI_FORMAT_UINT64(op->common.
@@ -476,6 +496,7 @@ acpi_ds_init_object_from_op(struct acpi_walk_state *walk_state,
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO, "Unknown Integer type 0x%X",
 				    op_info->type));
 			status = AE_AML_OPERAND_TYPE;
@@ -554,6 +575,7 @@ acpi_ds_init_object_from_op(struct acpi_walk_state *walk_state,
 				obj_desc->reference.node = op->common.node;
 				obj_desc->reference.class = ACPI_REFCLASS_NAME;
 				if (op->common.node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					obj_desc->reference.object =
 					    op->common.node->object;
 				}
@@ -561,11 +583,13 @@ acpi_ds_init_object_from_op(struct acpi_walk_state *walk_state,
 
 			case AML_DEBUG_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				obj_desc->reference.class = ACPI_REFCLASS_DEBUG;
 				break;
 
 			default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "Unimplemented reference type for AML opcode: 0x%4.4X",
 					    opcode));
@@ -577,6 +601,7 @@ acpi_ds_init_object_from_op(struct acpi_walk_state *walk_state,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Unimplemented data type: 0x%X",
 			    obj_desc->common.type));
 
@@ -584,5 +609,6 @@ acpi_ds_init_object_from_op(struct acpi_walk_state *walk_state,
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
diff --git a/drivers/acpi/acpica/dsopcode.c b/drivers/acpi/acpica/dsopcode.c
index 0336df7..5306ee8 100644
--- a/drivers/acpi/acpica/dsopcode.c
+++ b/drivers/acpi/acpica/dsopcode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dsopcode - Dispatcher support for regions and fields
@@ -124,6 +126,7 @@ acpi_ds_init_buffer_field(u16 aml_opcode,
 	/* Host object must be a Buffer */
 
 	if (buffer_desc->common.type != ACPI_TYPE_BUFFER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Target of Create Field is not a Buffer object - %s",
 			    acpi_ut_get_object_type_name(buffer_desc)));
@@ -138,6 +141,7 @@ acpi_ds_init_buffer_field(u16 aml_opcode,
 	 * after resolution in acpi_ex_resolve_operands().
 	 */
 	if (ACPI_GET_DESCRIPTOR_TYPE(result_desc) != ACPI_DESC_TYPE_NAMED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "(%s) destination not a NS Node [%s]",
 			    acpi_ps_get_opcode_name(aml_opcode),
@@ -157,6 +161,7 @@ acpi_ds_init_buffer_field(u16 aml_opcode,
 
 		/* Offset is in bits, count is in bits */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		field_flags = AML_FIELD_ACCESS_BYTE;
 		bit_offset = offset;
 		bit_count = (u32) length_desc->integer.value;
@@ -164,6 +169,7 @@ acpi_ds_init_buffer_field(u16 aml_opcode,
 		/* Must have a valid (>0) bit count */
 
 		if (bit_count == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Attempt to CreateField of length zero"));
 			status = AE_AML_OPERAND_VALUE;
@@ -175,6 +181,7 @@ acpi_ds_init_buffer_field(u16 aml_opcode,
 
 		/* Offset is in bits, Field is one bit */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bit_offset = offset;
 		bit_count = 1;
 		field_flags = AML_FIELD_ACCESS_BYTE;
@@ -184,6 +191,7 @@ acpi_ds_init_buffer_field(u16 aml_opcode,
 
 		/* Offset is in bytes, field is one byte */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bit_offset = 8 * offset;
 		bit_count = 8;
 		field_flags = AML_FIELD_ACCESS_BYTE;
@@ -193,6 +201,7 @@ acpi_ds_init_buffer_field(u16 aml_opcode,
 
 		/* Offset is in bytes, field is one word */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bit_offset = 8 * offset;
 		bit_count = 16;
 		field_flags = AML_FIELD_ACCESS_WORD;
@@ -211,6 +220,7 @@ acpi_ds_init_buffer_field(u16 aml_opcode,
 
 		/* Offset is in bytes, field is one qword */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bit_offset = 8 * offset;
 		bit_count = 64;
 		field_flags = AML_FIELD_ACCESS_QWORD;
@@ -218,6 +228,7 @@ acpi_ds_init_buffer_field(u16 aml_opcode,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Unknown field creation opcode 0x%02X",
 			    aml_opcode));
@@ -228,6 +239,7 @@ acpi_ds_init_buffer_field(u16 aml_opcode,
 	/* Entire field must fit within the current length of the buffer */
 
 	if ((bit_offset + bit_count) > (8 * (u32)buffer_desc->buffer.length)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Field [%4.4s] at bit offset/length %u/%u "
 			    "exceeds size of target Buffer (%u bits)",
@@ -265,12 +277,14 @@ acpi_ds_init_buffer_field(u16 aml_opcode,
 	acpi_ut_remove_reference(buffer_desc);
 
 	if (aml_opcode == AML_CREATE_FIELD_OP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_remove_reference(length_desc);
 	}
 
 	/* On failure, delete the result descriptor */
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_remove_reference(result_desc);	/* Result descriptor */
 	} else {
 		/* Now the address and length are valid for this buffer_field */
@@ -320,11 +334,13 @@ acpi_ds_eval_buffer_field_operands(struct acpi_walk_state *walk_state,
 
 	status = acpi_ds_create_operands(walk_state, next_op);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
 	obj_desc = acpi_ns_get_attached_object(node);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_EXIST);
 	}
 
@@ -334,6 +350,7 @@ acpi_ds_eval_buffer_field_operands(struct acpi_walk_state *walk_state,
 	    acpi_ex_resolve_operands(op->common.aml_opcode, ACPI_WALK_OPERANDS,
 				     walk_state);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "(%s) bad operand(s), status 0x%X",
 			    acpi_ps_get_opcode_name(op->common.aml_opcode),
 			    status));
@@ -363,6 +380,7 @@ acpi_ds_eval_buffer_field_operands(struct acpi_walk_state *walk_state,
 					      walk_state->operands[2]);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -410,6 +428,7 @@ acpi_ds_eval_region_operands(struct acpi_walk_state *walk_state,
 
 	status = acpi_ds_create_operands(walk_state, next_op);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -419,11 +438,13 @@ acpi_ds_eval_region_operands(struct acpi_walk_state *walk_state,
 	    acpi_ex_resolve_operands(op->common.aml_opcode, ACPI_WALK_OPERANDS,
 				     walk_state);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
 	obj_desc = acpi_ns_get_attached_object(node);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_EXIST);
 	}
 
@@ -502,6 +523,7 @@ acpi_ds_eval_table_region_operands(struct acpi_walk_state *walk_state,
 	 */
 	status = acpi_ds_create_operands(walk_state, next_op);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -602,6 +624,7 @@ acpi_ds_eval_data_object_operands(struct acpi_walk_state *walk_state,
 	/* Ignore if child is not valid */
 
 	if (!op->common.value.arg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Dispatch: Missing child while executing TermArg for %X",
 			    op->common.aml_opcode));
@@ -610,6 +633,7 @@ acpi_ds_eval_data_object_operands(struct acpi_walk_state *walk_state,
 
 	status = acpi_ds_create_operand(walk_state, op->common.value.arg, 1);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -618,6 +642,7 @@ acpi_ds_eval_data_object_operands(struct acpi_walk_state *walk_state,
 					    operands[walk_state->num_operands -
 						     1]), walk_state);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -630,6 +655,7 @@ acpi_ds_eval_data_object_operands(struct acpi_walk_state *walk_state,
 
 	status = acpi_ds_obj_stack_pop(1, walk_state);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -656,6 +682,7 @@ acpi_ds_eval_data_object_operands(struct acpi_walk_state *walk_state,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_AML_BAD_OPCODE);
 	}
 
@@ -675,6 +702,7 @@ acpi_ds_eval_data_object_operands(struct acpi_walk_state *walk_state,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -732,6 +760,7 @@ acpi_ds_eval_bank_field_operands(struct acpi_walk_state *walk_state,
 
 	status = acpi_ds_create_operand(walk_state, next_op, 0);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/dspkginit.c b/drivers/acpi/acpica/dspkginit.c
index 6d487ed..6d11801 100644
--- a/drivers/acpi/acpica/dspkginit.c
+++ b/drivers/acpi/acpica/dspkginit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dspkginit - Completion of deferred package initialization
@@ -118,6 +120,7 @@ acpi_ds_build_internal_package_obj(struct acpi_walk_state *walk_state,
 		obj_desc = acpi_ut_create_internal_object(ACPI_TYPE_PACKAGE);
 		*obj_desc_ptr = obj_desc;
 		if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_NO_MEMORY);
 		}
 
@@ -125,6 +128,7 @@ acpi_ds_build_internal_package_obj(struct acpi_walk_state *walk_state,
 	}
 
 	if (obj_desc->package.flags & AOPOBJ_DATA_VALID) {	/* Just in case */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -138,6 +142,7 @@ acpi_ds_build_internal_package_obj(struct acpi_walk_state *walk_state,
 							   1) * sizeof(void *));
 
 	if (!obj_desc->package.elements) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_delete_object_desc(obj_desc);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
@@ -183,6 +188,7 @@ acpi_ds_build_internal_package_obj(struct acpi_walk_state *walk_state,
 							  &obj_desc->package.
 							  elements[i]);
 			if (status == AE_NOT_FOUND) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO, "%-48s",
 					    "****DS namepath not found"));
 			}
@@ -209,9 +215,11 @@ acpi_ds_build_internal_package_obj(struct acpi_walk_state *walk_state,
 				/* Make new element ref count match original ref count */
 				/* TBD: Probably need an acpi_ut_add_references function */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				for (index = 0;
 				     index < ((u32)reference_count - 1);
 				     index++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					acpi_ut_add_reference((obj_desc->
 							       package.
 							       elements[i]));
@@ -243,6 +251,7 @@ acpi_ds_build_internal_package_obj(struct acpi_walk_state *walk_state,
 			 * and are not going to be used because of the package truncation.
 			 */
 			if (arg->common.node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ut_remove_reference(ACPI_CAST_PTR
 							 (union
 							  acpi_operand_object,
@@ -252,10 +261,12 @@ acpi_ds_build_internal_package_obj(struct acpi_walk_state *walk_state,
 
 			/* Find out how many elements there really are */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			i++;
 			arg = arg->common.next;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_INFO(("Actual Package length (%u) is larger than "
 			   "NumElements field (%u), truncated",
 			   i, element_count));
@@ -298,6 +309,7 @@ acpi_ds_init_package_element(u8 object_type,
 	union acpi_operand_object **element_ptr;
 
 	if (!source_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -311,6 +323,7 @@ acpi_ds_init_package_element(u8 object_type,
 
 		/* A direct call was made to this function */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		element_ptr = (union acpi_operand_object **)context;
 	} else {
 		/* Call came from acpi_ut_walk_package_tree */
@@ -329,6 +342,7 @@ acpi_ds_init_package_element(u8 object_type,
 		source_object->package.flags |= AOPOBJ_DATA_VALID;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -360,6 +374,7 @@ acpi_ds_resolve_package_element(union acpi_operand_object **element_ptr)
 	/* Check if reference element is already resolved */
 
 	if (element->reference.resolved) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -372,6 +387,7 @@ acpi_ds_resolve_package_element(union acpi_operand_object **element_ptr)
 				ACPI_NS_SEARCH_PARENT | ACPI_NS_DONT_OPEN_SCOPE,
 				NULL, &resolved_node);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ns_externalize_name(ACPI_UINT32_MAX,
 						  (char *)element->reference.
 						  aml, NULL, &external_path);
@@ -387,6 +403,7 @@ acpi_ds_resolve_package_element(union acpi_operand_object **element_ptr)
 
 		/* Named reference not resolved, return a NULL package element */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not resolve named package element [%4.4s] in [%4.4s]",
 			    resolved_node->name.ascii,
@@ -417,6 +434,7 @@ acpi_ds_resolve_package_element(union acpi_operand_object **element_ptr)
 	 * to the Alias target. This effectively "resolves" the alias.
 	 */
 	if (resolved_node->type == ACPI_TYPE_LOCAL_ALIAS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		resolved_node = ACPI_CAST_PTR(struct acpi_namespace_node,
 					      resolved_node->object);
 	}
@@ -443,6 +461,7 @@ acpi_ds_resolve_package_element(union acpi_operand_object **element_ptr)
 	 */
 	status = acpi_ex_resolve_node_to_value(&resolved_node, NULL);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 #if 0
@@ -492,5 +511,6 @@ acpi_ds_resolve_package_element(union acpi_operand_object **element_ptr)
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_VOID;
 }
diff --git a/drivers/acpi/acpica/dsutils.c b/drivers/acpi/acpica/dsutils.c
index 0dabd9b..0783f04 100644
--- a/drivers/acpi/acpica/dsutils.c
+++ b/drivers/acpi/acpica/dsutils.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: dsutils - Dispatcher utilities
@@ -75,6 +77,7 @@ void acpi_ds_clear_implicit_return(struct acpi_walk_state *walk_state)
 	 * Slack must be enabled for this feature
 	 */
 	if (!acpi_gbl_enable_interpreter_slack) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -123,6 +126,7 @@ acpi_ds_do_implicit_return(union acpi_operand_object *return_desc,
 	 * have a valid return object
 	 */
 	if ((!acpi_gbl_enable_interpreter_slack) || (!return_desc)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
@@ -138,6 +142,7 @@ acpi_ds_do_implicit_return(union acpi_operand_object *return_desc,
 	 */
 	if (walk_state->implicit_return_obj) {
 		if (walk_state->implicit_return_obj == return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (TRUE);
 		}
 		acpi_ds_clear_implicit_return(walk_state);
@@ -150,6 +155,7 @@ acpi_ds_do_implicit_return(union acpi_operand_object *return_desc,
 		acpi_ut_add_reference(return_desc);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (TRUE);
 }
 
@@ -177,6 +183,7 @@ acpi_ds_is_result_used(union acpi_parse_object * op,
 	/* Must have both an Op and a Result Object */
 
 	if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Null Op"));
 		return_UINT8(TRUE);
 	}
@@ -210,6 +217,7 @@ acpi_ds_is_result_used(union acpi_parse_object * op,
 				  "At Method level, result of [%s] not used\n",
 				  acpi_ps_get_opcode_name(op->common.
 							  aml_opcode)));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_UINT8(FALSE);
 	}
 
@@ -218,6 +226,7 @@ acpi_ds_is_result_used(union acpi_parse_object * op,
 	parent_info =
 	    acpi_ps_get_opcode_info(op->common.parent->common.aml_opcode);
 	if (parent_info->class == AML_CLASS_UNKNOWN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Unknown parent opcode Op=%p", op));
 		return_UINT8(FALSE);
 	}
@@ -306,6 +315,7 @@ acpi_ds_is_result_used(union acpi_parse_object * op,
 			  acpi_ps_get_opcode_name(op->common.parent->common.
 						  aml_opcode), op));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_UINT8(TRUE);
 
 result_not_used:
@@ -346,11 +356,13 @@ acpi_ds_delete_result_if_not_used(union acpi_parse_object *op,
 	ACPI_FUNCTION_TRACE_PTR(ds_delete_result_if_not_used, result_obj);
 
 	if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Null Op"));
 		return_VOID;
 	}
 
 	if (!result_obj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -364,6 +376,7 @@ acpi_ds_delete_result_if_not_used(union acpi_parse_object *op,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_VOID;
 }
 
@@ -486,6 +499,7 @@ acpi_ds_create_operand(struct acpi_walk_state *walk_state,
 						 &name_string, &name_length);
 
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -504,6 +518,7 @@ acpi_ds_create_operand(struct acpi_walk_state *walk_state,
 		    (walk_state->deferred_node->type == ACPI_TYPE_BUFFER_FIELD)
 		    && (arg_index == (u32)
 			((walk_state->opcode == AML_CREATE_FIELD_OP) ? 3 : 2))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			obj_desc =
 			    ACPI_CAST_PTR(union acpi_operand_object,
 					  walk_state->deferred_node);
@@ -530,10 +545,12 @@ acpi_ds_create_operand(struct acpi_walk_state *walk_state,
 
 				/* Enter name into namespace if not found */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				interpreter_mode = ACPI_IMODE_LOAD_PASS2;
 			} else {
 				/* Return a failure if name not found */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				interpreter_mode = ACPI_IMODE_EXECUTE;
 			}
 
@@ -550,6 +567,7 @@ acpi_ds_create_operand(struct acpi_walk_state *walk_state,
 			 * error is for the cond_ref_of opcode.
 			 */
 			if (status == AE_NOT_FOUND) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (parent_op->common.aml_opcode ==
 				    AML_CONDITIONAL_REF_OF_OP) {
 					/*
@@ -583,6 +601,7 @@ acpi_ds_create_operand(struct acpi_walk_state *walk_state,
 			}
 
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR_NAMESPACE(name_string, status);
 			}
 		}
@@ -594,6 +613,7 @@ acpi_ds_create_operand(struct acpi_walk_state *walk_state,
 		/* Check status from the lookup */
 
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -601,9 +621,11 @@ acpi_ds_create_operand(struct acpi_walk_state *walk_state,
 
 		status = acpi_ds_obj_stack_push(obj_desc, walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_db_display_argument_object(obj_desc, walk_state);
 	} else {
 		/* Check for null name case */
@@ -621,6 +643,7 @@ acpi_ds_create_operand(struct acpi_walk_state *walk_state,
 			ACPI_DEBUG_PRINT((ACPI_DB_DISPATCH,
 					  "Null namepath: Arg=%p\n", arg));
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opcode = arg->common.aml_opcode;
 		}
 
@@ -628,6 +651,7 @@ acpi_ds_create_operand(struct acpi_walk_state *walk_state,
 
 		op_info = acpi_ps_get_opcode_info(opcode);
 		if (op_info->object_type == ACPI_TYPE_INVALID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_NOT_IMPLEMENTED);
 		}
 
@@ -654,6 +678,7 @@ acpi_ds_create_operand(struct acpi_walk_state *walk_state,
 			    acpi_ut_create_internal_object(op_info->
 							   object_type);
 			if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(AE_NO_MEMORY);
 			}
 
@@ -663,6 +688,7 @@ acpi_ds_create_operand(struct acpi_walk_state *walk_state,
 			    acpi_ds_init_object_from_op(walk_state, arg, opcode,
 							&obj_desc);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ut_delete_object_desc(obj_desc);
 				return_ACPI_STATUS(status);
 			}
@@ -672,12 +698,15 @@ acpi_ds_create_operand(struct acpi_walk_state *walk_state,
 
 		status = acpi_ds_obj_stack_push(obj_desc, walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_db_display_argument_object(obj_desc, walk_state);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -714,6 +743,7 @@ acpi_ds_create_operands(struct acpi_walk_state *walk_state,
 	arg = first_arg;
 	while (arg) {
 		if (index >= ACPI_OBJ_NUM_OPERANDS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_BAD_DATA);
 		}
 
@@ -749,6 +779,7 @@ acpi_ds_create_operands(struct acpi_walk_state *walk_state,
 		index--;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 
 cleanup:
@@ -811,6 +842,7 @@ acpi_status acpi_ds_evaluate_name_path(struct acpi_walk_state *walk_state)
 	}
 
 	if (op->common.flags & ACPI_PARSEOP_TARGET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new_obj_desc = *operand;
 		goto push_result;
 	}
@@ -846,6 +878,7 @@ acpi_status acpi_ds_evaluate_name_path(struct acpi_walk_state *walk_state)
 
 	status = acpi_ds_obj_stack_pop(1, walk_state);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		walk_state->result_obj = new_obj_desc;
 		goto exit;
 	}
diff --git a/drivers/acpi/acpica/dswexec.c b/drivers/acpi/acpica/dswexec.c
index 20d7744..35df3e6 100644
--- a/drivers/acpi/acpica/dswexec.c
+++ b/drivers/acpi/acpica/dswexec.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dswexec - Dispatcher method execution callbacks;
@@ -100,6 +102,7 @@ acpi_ds_get_predicate_value(struct acpi_walk_state *walk_state,
 	if (result_obj) {
 		status = acpi_ds_result_pop(&obj_desc, walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status,
 					"Could not get result from predicate evaluation"));
 
@@ -108,6 +111,7 @@ acpi_ds_get_predicate_value(struct acpi_walk_state *walk_state,
 	} else {
 		status = acpi_ds_create_operand(walk_state, walk_state->op, 0);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -115,6 +119,7 @@ acpi_ds_get_predicate_value(struct acpi_walk_state *walk_state,
 		    acpi_ex_resolve_to_value(&walk_state->operands[0],
 					     walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -122,6 +127,7 @@ acpi_ds_get_predicate_value(struct acpi_walk_state *walk_state,
 	}
 
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "No predicate ObjDesc=%p State=%p",
 			    obj_desc, walk_state));
@@ -140,6 +146,7 @@ acpi_ds_get_predicate_value(struct acpi_walk_state *walk_state,
 	}
 
 	if (local_obj_desc->common.type != ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Bad predicate (not an integer) ObjDesc=%p State=%p Type=0x%X",
 			    obj_desc, walk_state, obj_desc->common.type));
@@ -187,6 +194,7 @@ acpi_ds_get_predicate_value(struct acpi_walk_state *walk_state,
 	 * we don't need it anymore)
 	 */
 	if (local_obj_desc != obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_remove_reference(local_obj_desc);
 	}
 	acpi_ut_remove_reference(obj_desc);
@@ -241,6 +249,7 @@ acpi_ds_exec_begin_op(struct acpi_walk_state *walk_state,
 								object_type),
 					  op));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ds_scope_stack_pop(walk_state);
 			if (ACPI_FAILURE(status)) {
 				goto error_exit;
@@ -249,10 +258,13 @@ acpi_ds_exec_begin_op(struct acpi_walk_state *walk_state,
 	}
 
 	if (op == walk_state->origin) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (out_op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*out_op = op;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -281,6 +293,7 @@ acpi_ds_exec_begin_op(struct acpi_walk_state *walk_state,
 	/* We want to send namepaths to the load code */
 
 	if (op->common.aml_opcode == AML_INT_NAMEPATH_OP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opcode_class = AML_CLASS_NAMED_OBJECT;
 	}
 
@@ -316,6 +329,7 @@ acpi_ds_exec_begin_op(struct acpi_walk_state *walk_state,
 							     op->named.node->
 							     type, walk_state);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status);
 				}
 			}
@@ -334,6 +348,7 @@ acpi_ds_exec_begin_op(struct acpi_walk_state *walk_state,
 
 	/* Nothing to do here during method execution */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 
 error_exit:
@@ -371,6 +386,7 @@ acpi_status acpi_ds_exec_end_op(struct acpi_walk_state *walk_state)
 	op_class = walk_state->op_info->class;
 
 	if (op_class == AML_CLASS_UNKNOWN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Unknown opcode 0x%X",
 			    op->common.aml_opcode));
 		return_ACPI_STATUS(AE_NOT_IMPLEMENTED);
@@ -389,6 +405,7 @@ acpi_status acpi_ds_exec_end_op(struct acpi_walk_state *walk_state)
 
 	status = acpi_db_single_step(walk_state, op, op_class);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -453,8 +470,10 @@ acpi_status acpi_ds_exec_end_op(struct acpi_walk_state *walk_state)
 				walk_state->operands[1]->reference.class)
 			    && (walk_state->operands[0]->reference.value ==
 				walk_state->operands[1]->reference.value)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_OK;
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_EXCEPTION((AE_INFO, status,
 						"While resolving operands for [%s]",
 						acpi_ps_get_opcode_name
@@ -502,6 +521,7 @@ acpi_status acpi_ds_exec_end_op(struct acpi_walk_state *walk_state)
 						  "Method Reference in a Package, Op=%p\n",
 						  op));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				op->common.node = (struct acpi_namespace_node *)
 				    op->asl.value.arg->asl.node;
 				acpi_ut_add_reference(op->asl.value.arg->asl.
@@ -518,6 +538,7 @@ acpi_status acpi_ds_exec_end_op(struct acpi_walk_state *walk_state)
 			 */
 			/* next_op points to the op that holds the method name */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			next_op = first_arg;
 
 			/* next_op points to first argument op */
@@ -542,6 +563,7 @@ acpi_status acpi_ds_exec_end_op(struct acpi_walk_state *walk_state)
 
 				/* On error, clear all resolved operands */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ds_clear_operands(walk_state);
 				break;
 			}
@@ -677,6 +699,7 @@ acpi_status acpi_ds_exec_end_op(struct acpi_walk_state *walk_state)
 
 		case AML_TYPE_UNDEFINED:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Undefined opcode type Op=%p", op));
 			return_ACPI_STATUS(AE_NOT_IMPLEMENTED);
@@ -690,6 +713,7 @@ acpi_status acpi_ds_exec_end_op(struct acpi_walk_state *walk_state)
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Unimplemented opcode, class=0x%X "
 				    "type=0x%X Opcode=0x%X Op=%p",
@@ -728,6 +752,7 @@ acpi_status acpi_ds_exec_end_op(struct acpi_walk_state *walk_state)
 
 		/* Break to debugger to display result */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_db_display_result_object(walk_state->result_obj,
 					      walk_state);
 
diff --git a/drivers/acpi/acpica/dswload.c b/drivers/acpi/acpica/dswload.c
index eaa859a..e1cdd1c 100644
--- a/drivers/acpi/acpica/dswload.c
+++ b/drivers/acpi/acpica/dswload.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dswload - Dispatcher first pass namespace load callbacks
@@ -117,9 +119,11 @@ acpi_ds_init_callbacks(struct acpi_walk_state *walk_state, u32 pass_number)
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -163,7 +167,9 @@ acpi_ds_load1_begin_op(struct acpi_walk_state *walk_state,
 
 		/* Check if this object has already been installed in the namespace */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (op->common.node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*out_op = op;
 			return_ACPI_STATUS(AE_OK);
 		}
@@ -207,6 +213,7 @@ acpi_ds_load1_begin_op(struct acpi_walk_state *walk_state,
 		}
 #endif
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR_NAMESPACE(path, status);
 			return_ACPI_STATUS(status);
 		}
@@ -245,6 +252,7 @@ acpi_ds_load1_begin_op(struct acpi_walk_state *walk_state,
 					  acpi_ut_get_node_name(node),
 					  acpi_ut_get_type_name(node->type)));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			node->type = ACPI_TYPE_ANY;
 			walk_state->scope_info->common.value = ACPI_TYPE_ANY;
 			break;
@@ -266,6 +274,7 @@ acpi_ds_load1_begin_op(struct acpi_walk_state *walk_state,
 
 			/* All other types are an error */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Invalid type (%s) for target of "
 				    "Scope operator [%4.4s] (Cannot override)",
@@ -307,21 +316,25 @@ acpi_ds_load1_begin_op(struct acpi_walk_state *walk_state,
 		 * during the load phase, only during execution.
 		 */
 		if (walk_state->method_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			node = NULL;
 			status = AE_OK;
 			break;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = ACPI_NS_NO_UPSEARCH;
 		if ((walk_state->opcode != AML_SCOPE_OP) &&
 		    (!(walk_state->parse_flags & ACPI_PARSE_DEFERRED_OP))) {
 			if (walk_state->namespace_override) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				flags |= ACPI_NS_OVERRIDE_IF_FOUND;
 				ACPI_DEBUG_PRINT((ACPI_DB_DISPATCH,
 						  "[%s] Override allowed\n",
 						  acpi_ut_get_type_name
 						  (object_type)));
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				flags |= ACPI_NS_ERROR_IF_FOUND;
 				ACPI_DEBUG_PRINT((ACPI_DB_DISPATCH,
 						  "[%s] Cannot already exist\n",
@@ -345,10 +358,12 @@ acpi_ds_load1_begin_op(struct acpi_walk_state *walk_state,
 				   ACPI_IMODE_LOAD_PASS1, flags, walk_state,
 				   &node);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (status == AE_ALREADY_EXISTS) {
 
 				/* The name already exists in this scope */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (node->flags & ANOBJ_IS_EXTERNAL) {
 					/*
 					 * Allow one create on an object or segment that was
@@ -365,16 +380,20 @@ acpi_ds_load1_begin_op(struct acpi_walk_state *walk_state,
 						    (node, object_type,
 						     walk_state);
 						if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 							return_ACPI_STATUS
 							    (status);
 						}
 					}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					status = AE_OK;
 				}
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR_NAMESPACE(path, status);
 				return_ACPI_STATUS(status);
 			}
@@ -390,6 +409,7 @@ acpi_ds_load1_begin_op(struct acpi_walk_state *walk_state,
 
 		op = acpi_ps_alloc_op(walk_state->opcode, walk_state->aml);
 		if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_NO_MEMORY);
 		}
 	}
@@ -447,6 +467,7 @@ acpi_status acpi_ds_load1_end_op(struct acpi_walk_state *walk_state)
 	/* We are only interested in opcodes that have an associated name */
 
 	if (!(walk_state->op_info->flags & (AML_NAMED | AML_FIELD))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -468,6 +489,7 @@ acpi_status acpi_ds_load1_end_op(struct acpi_walk_state *walk_state)
 				    acpi_ds_init_field_objects(op, walk_state);
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -485,6 +507,7 @@ acpi_status acpi_ds_load1_end_op(struct acpi_walk_state *walk_state)
 						   common.value.integer),
 						  walk_state);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 		} else if (op->common.aml_opcode == AML_DATA_REGION_OP) {
@@ -494,6 +517,7 @@ acpi_status acpi_ds_load1_end_op(struct acpi_walk_state *walk_state)
 						  ACPI_ADR_SPACE_DATA_TABLE,
 						  walk_state);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 		}
@@ -591,6 +615,7 @@ acpi_status acpi_ds_load1_end_op(struct acpi_walk_state *walk_state)
 				walk_state->num_operands = 0;
 
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status);
 				}
 			}
@@ -609,5 +634,6 @@ acpi_status acpi_ds_load1_end_op(struct acpi_walk_state *walk_state)
 		status = acpi_ds_scope_stack_pop(walk_state);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
diff --git a/drivers/acpi/acpica/dswload2.c b/drivers/acpi/acpica/dswload2.c
index aad83ef..a3f7ae6 100644
--- a/drivers/acpi/acpica/dswload2.c
+++ b/drivers/acpi/acpica/dswload2.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dswload2 - Dispatcher second pass namespace load callbacks
@@ -89,6 +91,7 @@ acpi_ds_load2_begin_op(struct acpi_walk_state *walk_state,
 
 			/* We are executing a while loop outside of a method */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ds_exec_begin_op(walk_state, out_op);
 			return_ACPI_STATUS(status);
 		}
@@ -98,6 +101,7 @@ acpi_ds_load2_begin_op(struct acpi_walk_state *walk_state,
 		if ((!(walk_state->op_info->flags & AML_NSOPCODE) &&
 		     (walk_state->opcode != AML_INT_NAMEPATH_OP)) ||
 		    (!(walk_state->op_info->flags & AML_NAMED))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_OK);
 		}
 
@@ -107,11 +111,13 @@ acpi_ds_load2_begin_op(struct acpi_walk_state *walk_state,
 
 			/* For Namepath op, get the path string */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			buffer_ptr = op->common.value.string;
 			if (!buffer_ptr) {
 
 				/* No name, just exit */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(AE_OK);
 			}
 		} else {
@@ -139,6 +145,7 @@ acpi_ds_load2_begin_op(struct acpi_walk_state *walk_state,
 	case AML_BANK_FIELD_OP:
 	case AML_INDEX_FIELD_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		node = NULL;
 		status = AE_OK;
 		break;
@@ -160,12 +167,14 @@ acpi_ds_load2_begin_op(struct acpi_walk_state *walk_state,
 		/* Special case for Scope(\) -> refers to the Root node */
 
 		if (op && (op->named.node == acpi_gbl_root_node)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			node = op->named.node;
 
 			status =
 			    acpi_ds_scope_stack_push(node, object_type,
 						     walk_state);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 		} else {
@@ -248,6 +257,7 @@ acpi_ds_load2_begin_op(struct acpi_walk_state *walk_state,
 
 			/* All other types are an error */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Invalid type (%s) for target of "
 				    "Scope operator [%4.4s] (Cannot override)",
@@ -273,10 +283,12 @@ acpi_ds_load2_begin_op(struct acpi_walk_state *walk_state,
 				    acpi_ds_scope_stack_push(node, object_type,
 							     walk_state);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status);
 				}
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_OK);
 		}
 
@@ -297,16 +309,19 @@ acpi_ds_load2_begin_op(struct acpi_walk_state *walk_state,
 			break;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = ACPI_NS_NO_UPSEARCH;
 		if (walk_state->pass_number == ACPI_IMODE_EXECUTE) {
 
 			/* Execution mode, node cannot already exist, node is temporary */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flags |= ACPI_NS_ERROR_IF_FOUND;
 
 			if (!
 			    (walk_state->
 			     parse_flags & ACPI_PARSE_MODULE_LEVEL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				flags |= ACPI_NS_TEMPORARY;
 			}
 		}
@@ -334,6 +349,7 @@ acpi_ds_load2_begin_op(struct acpi_walk_state *walk_state,
 				   object_type, ACPI_IMODE_LOAD_PASS2, flags,
 				   walk_state, &node);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ACPI_SUCCESS(status) && (flags & ACPI_NS_TEMPORARY)) {
 			ACPI_DEBUG_PRINT((ACPI_DB_DISPATCH,
 					  "***New Node [%4.4s] %p is temporary\n",
@@ -343,6 +359,7 @@ acpi_ds_load2_begin_op(struct acpi_walk_state *walk_state,
 	}
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR_NAMESPACE(buffer_ptr, status);
 		return_ACPI_STATUS(status);
 	}
@@ -353,6 +370,7 @@ acpi_ds_load2_begin_op(struct acpi_walk_state *walk_state,
 
 		op = acpi_ps_alloc_op(walk_state->opcode, walk_state->aml);
 		if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_NO_MEMORY);
 		}
 
@@ -407,9 +425,11 @@ acpi_status acpi_ds_load2_end_op(struct acpi_walk_state *walk_state)
 	/* Check if opcode had an associated namespace object */
 
 	if (!(walk_state->op_info->flags & AML_NSOBJECT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (op->common.aml_opcode == AML_SCOPE_OP) {
 		ACPI_DEBUG_PRINT((ACPI_DB_DISPATCH,
 				  "Ending scope Op=%p State=%p\n", op,
@@ -498,6 +518,7 @@ acpi_status acpi_ds_load2_end_op(struct acpi_walk_state *walk_state)
 		 * If we are executing a method, initialize the field
 		 */
 		if (walk_state->method_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ds_init_field_objects(op, walk_state);
 		}
 
@@ -546,6 +567,7 @@ acpi_status acpi_ds_load2_end_op(struct acpi_walk_state *walk_state)
 
 		case AML_POWER_RESOURCE_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ex_create_power_resource(walk_state);
 			break;
 
@@ -556,11 +578,13 @@ acpi_status acpi_ds_load2_end_op(struct acpi_walk_state *walk_state)
 
 		case AML_EVENT_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ex_create_event(walk_state);
 			break;
 
 		case AML_ALIAS_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ex_create_alias(walk_state);
 			break;
 
@@ -568,6 +592,7 @@ acpi_status acpi_ds_load2_end_op(struct acpi_walk_state *walk_state)
 
 			/* Unknown opcode */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_OK;
 			goto cleanup;
 		}
@@ -594,6 +619,7 @@ acpi_status acpi_ds_load2_end_op(struct acpi_walk_state *walk_state)
 				    ((op->common.value.arg)->common.value.
 				     integer);
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				region_space = ACPI_ADR_SPACE_DATA_TABLE;
 			}
 
@@ -619,6 +645,7 @@ acpi_status acpi_ds_load2_end_op(struct acpi_walk_state *walk_state)
 							       region_space,
 							       walk_state);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status);
 				}
 			}
@@ -647,6 +674,7 @@ acpi_status acpi_ds_load2_end_op(struct acpi_walk_state *walk_state)
 					  walk_state, op, op->named.node));
 
 			if (!acpi_ns_get_attached_object(op->named.node)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				walk_state->operands[0] =
 				    ACPI_CAST_PTR(void, op->named.node);
 				walk_state->num_operands = 1;
@@ -664,10 +692,12 @@ acpi_status acpi_ds_load2_end_op(struct acpi_walk_state *walk_state)
 								  walk_state);
 				}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				walk_state->operands[0] = NULL;
 				walk_state->num_operands = 0;
 
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status);
 				}
 			}
@@ -710,6 +740,7 @@ acpi_status acpi_ds_load2_end_op(struct acpi_walk_state *walk_state)
 			 * would resolve
 			 */
 			if (new_node->type != ACPI_TYPE_METHOD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_AML_OPERAND_TYPE;
 			}
 
@@ -719,6 +750,7 @@ acpi_status acpi_ds_load2_end_op(struct acpi_walk_state *walk_state)
 			 */
 			op->common.node = new_node;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR_NAMESPACE(arg->common.value.string, status);
 		}
 		break;
diff --git a/drivers/acpi/acpica/dswscope.c b/drivers/acpi/acpica/dswscope.c
index 3e08198..d7d43f5 100644
--- a/drivers/acpi/acpica/dswscope.c
+++ b/drivers/acpi/acpica/dswscope.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dswscope - Scope stack manipulation
@@ -70,6 +72,7 @@ void acpi_ds_scope_stack_clear(struct acpi_walk_state *walk_state)
 
 		/* Pop a scope off the stack */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scope_info = walk_state->scope_info;
 		walk_state->scope_info = scope_info->scope.next;
 
@@ -111,6 +114,7 @@ acpi_ds_scope_stack_push(struct acpi_namespace_node *node,
 
 		/* Invalid scope   */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Null scope parameter"));
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
@@ -118,6 +122,7 @@ acpi_ds_scope_stack_push(struct acpi_namespace_node *node,
 	/* Make sure object type is valid */
 
 	if (!acpi_ut_valid_object_type(type)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARNING((AE_INFO, "Invalid object type: 0x%X", type));
 	}
 
@@ -125,6 +130,7 @@ acpi_ds_scope_stack_push(struct acpi_namespace_node *node,
 
 	scope_info = acpi_ut_create_generic_state();
 	if (!scope_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -187,6 +193,7 @@ acpi_status acpi_ds_scope_stack_pop(struct acpi_walk_state *walk_state)
 	 */
 	scope_info = acpi_ut_pop_generic_state(&walk_state->scope_info);
 	if (!scope_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_STACK_UNDERFLOW);
 	}
 
diff --git a/drivers/acpi/acpica/dswstate.c b/drivers/acpi/acpica/dswstate.c
index da111a1..6ad01d8 100644
--- a/drivers/acpi/acpica/dswstate.c
+++ b/drivers/acpi/acpica/dswstate.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: dswstate - Dispatcher parse tree walk management routines
@@ -83,11 +85,13 @@ acpi_ds_result_pop(union acpi_operand_object **object,
 	/* Incorrect state of result stack */
 
 	if (state && !walk_state->result_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "No results on result stack"));
 		return (AE_AML_INTERNAL);
 	}
 
 	if (!state && walk_state->result_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "No result state for result stack"));
 		return (AE_AML_INTERNAL);
 	}
@@ -95,6 +99,7 @@ acpi_ds_result_pop(union acpi_operand_object **object,
 	/* Empty result stack */
 
 	if (!state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Result stack is empty! State=%p",
 			    walk_state));
 		return (AE_AML_NO_RETURN_VALUE);
@@ -107,6 +112,7 @@ acpi_ds_result_pop(union acpi_operand_object **object,
 
 	*object = state->results.obj_desc[index];
 	if (!*object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "No result objects on result stack, State=%p",
 			    walk_state));
@@ -117,6 +123,7 @@ acpi_ds_result_pop(union acpi_operand_object **object,
 	if (index == 0) {
 		status = acpi_ds_result_stack_pop(walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (status);
 		}
 	}
@@ -126,6 +133,7 @@ acpi_ds_result_pop(union acpi_operand_object **object,
 			  acpi_ut_get_object_type_name(*object),
 			  index, walk_state, walk_state->result_count));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -153,6 +161,7 @@ acpi_ds_result_push(union acpi_operand_object *object,
 	ACPI_FUNCTION_NAME(ds_result_push);
 
 	if (walk_state->result_count > walk_state->result_size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Result stack is full"));
 		return (AE_AML_INTERNAL);
 	} else if (walk_state->result_count == walk_state->result_size) {
@@ -161,6 +170,7 @@ acpi_ds_result_push(union acpi_operand_object *object,
 
 		status = acpi_ds_result_stack_push(walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Failed to extend the result stack"));
 			return (status);
@@ -168,17 +178,20 @@ acpi_ds_result_push(union acpi_operand_object *object,
 	}
 
 	if (!(walk_state->result_count < walk_state->result_size)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "No free elements in result stack"));
 		return (AE_AML_INTERNAL);
 	}
 
 	state = walk_state->results;
 	if (!state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "No result stack frame during push"));
 		return (AE_AML_INTERNAL);
 	}
 
 	if (!object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Null Object! Obj=%p State=%p Num=%u",
 			    object, walk_state, walk_state->result_count));
@@ -224,6 +237,7 @@ static acpi_status acpi_ds_result_stack_push(struct acpi_walk_state *walk_state)
 
 	if (((u32) walk_state->result_size + ACPI_RESULTS_FRAME_OBJ_NUM) >
 	    ACPI_RESULTS_OBJ_NUM_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Result stack overflow: State=%p Num=%u",
 			    walk_state, walk_state->result_size));
 		return (AE_STACK_OVERFLOW);
@@ -231,6 +245,7 @@ static acpi_status acpi_ds_result_stack_push(struct acpi_walk_state *walk_state)
 
 	state = acpi_ut_create_generic_state();
 	if (!state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_NO_MEMORY);
 	}
 
@@ -271,10 +286,12 @@ static acpi_status acpi_ds_result_stack_pop(struct acpi_walk_state *walk_state)
 		ACPI_DEBUG_PRINT((ACPI_DB_EXEC,
 				  "Result stack underflow - State=%p\n",
 				  walk_state));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_AML_NO_OPERAND);
 	}
 
 	if (walk_state->result_size < ACPI_RESULTS_FRAME_OBJ_NUM) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Insufficient result stack size"));
 		return (AE_AML_INTERNAL);
 	}
@@ -314,6 +331,7 @@ acpi_ds_obj_stack_push(void *object, struct acpi_walk_state *walk_state)
 	/* Check for stack overflow */
 
 	if (walk_state->num_operands >= ACPI_OBJ_NUM_OPERANDS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Object stack overflow! Obj=%p State=%p #Ops=%u",
 			    object, walk_state, walk_state->num_operands));
@@ -365,6 +383,7 @@ acpi_ds_obj_stack_pop(u32 pop_count, struct acpi_walk_state *walk_state)
 		/* Check for stack underflow */
 
 		if (walk_state->num_operands == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Object stack underflow! Count=%X State=%p #Ops=%u",
 				    pop_count, walk_state,
@@ -381,6 +400,7 @@ acpi_ds_obj_stack_pop(u32 pop_count, struct acpi_walk_state *walk_state)
 	ACPI_DEBUG_PRINT((ACPI_DB_EXEC, "Count=%X State=%p #Ops=%u\n",
 			  pop_count, walk_state, walk_state->num_operands));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -408,6 +428,7 @@ acpi_ds_obj_stack_pop_and_delete(u32 pop_count,
 	ACPI_FUNCTION_NAME(ds_obj_stack_pop_and_delete);
 
 	if (pop_count == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -449,6 +470,7 @@ struct acpi_walk_state *acpi_ds_get_current_walk_state(struct acpi_thread_state
 	ACPI_FUNCTION_NAME(ds_get_current_walk_state);
 
 	if (!thread) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
@@ -551,6 +573,7 @@ struct acpi_walk_state *acpi_ds_create_walk_state(acpi_owner_id owner_id,
 
 	walk_state = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_walk_state));
 	if (!walk_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_PTR(NULL);
 	}
 
@@ -571,9 +594,11 @@ struct acpi_walk_state *acpi_ds_create_walk_state(acpi_owner_id owner_id,
 	/* Put the new state at the head of the walk list */
 
 	if (thread) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ds_push_walk_state(walk_state, thread);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_PTR(walk_state);
 }
 
@@ -626,6 +651,7 @@ acpi_ds_init_aml_walk(struct acpi_walk_state *walk_state,
 
 	status = acpi_ps_init_scope(&walk_state->parser_state, op);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -642,6 +668,7 @@ acpi_ds_init_aml_walk(struct acpi_walk_state *walk_state,
 		    acpi_ds_scope_stack_push(method_node, ACPI_TYPE_METHOD,
 					     walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -651,6 +678,7 @@ acpi_ds_init_aml_walk(struct acpi_walk_state *walk_state,
 						       ACPI_METHOD_NUM_ARGS,
 						       walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	} else {
@@ -680,6 +708,7 @@ acpi_ds_init_aml_walk(struct acpi_walk_state *walk_state,
 						     parser_state->start_node->
 						     type, walk_state);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 		}
@@ -708,10 +737,12 @@ void acpi_ds_delete_walk_state(struct acpi_walk_state *walk_state)
 	ACPI_FUNCTION_TRACE_PTR(ds_delete_walk_state, walk_state);
 
 	if (!walk_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
 	if (walk_state->descriptor_type != ACPI_DESC_TYPE_WALK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "%p is not a valid walk state",
 			    walk_state));
 		return_VOID;
@@ -720,6 +751,7 @@ void acpi_ds_delete_walk_state(struct acpi_walk_state *walk_state)
 	/* There should not be any open scopes */
 
 	if (walk_state->parser_state.scope) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "%p walk still has a scope list",
 			    walk_state));
 		acpi_ps_cleanup_scope(&walk_state->parser_state);
@@ -728,6 +760,7 @@ void acpi_ds_delete_walk_state(struct acpi_walk_state *walk_state)
 	/* Always must free any linked control states */
 
 	while (walk_state->control_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		state = walk_state->control_state;
 		walk_state->control_state = state->common.next;
 
@@ -737,6 +770,7 @@ void acpi_ds_delete_walk_state(struct acpi_walk_state *walk_state)
 	/* Always must free any linked parse states */
 
 	while (walk_state->scope_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		state = walk_state->scope_info;
 		walk_state->scope_info = state->common.next;
 
@@ -746,12 +780,14 @@ void acpi_ds_delete_walk_state(struct acpi_walk_state *walk_state)
 	/* Always must free any stacked result states */
 
 	while (walk_state->results) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		state = walk_state->results;
 		walk_state->results = state->common.next;
 
 		acpi_ut_delete_generic_state(state);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_FREE(walk_state);
 	return_VOID;
 }
diff --git a/drivers/acpi/acpica/evevent.c b/drivers/acpi/acpica/evevent.c
index d3b6b31..26146ed 100644
--- a/drivers/acpi/acpica/evevent.c
+++ b/drivers/acpi/acpica/evevent.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evevent - Fixed Event handling and dispatch
@@ -74,6 +76,7 @@ acpi_status acpi_ev_initialize_events(void)
 	/* If Hardware Reduced flag is set, there are no fixed events */
 
 	if (acpi_gbl_reduced_hardware) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -84,6 +87,7 @@ acpi_status acpi_ev_initialize_events(void)
 	 */
 	status = acpi_ev_fixed_event_initialize();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"Unable to initialize fixed events"));
 		return_ACPI_STATUS(status);
@@ -91,11 +95,13 @@ acpi_status acpi_ev_initialize_events(void)
 
 	status = acpi_ev_gpe_initialize();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"Unable to initialize general purpose events"));
 		return_ACPI_STATUS(status);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -120,6 +126,7 @@ acpi_status acpi_ev_install_xrupt_handlers(void)
 	/* If Hardware Reduced flag is set, there is no ACPI h/w */
 
 	if (acpi_gbl_reduced_hardware) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -127,6 +134,7 @@ acpi_status acpi_ev_install_xrupt_handlers(void)
 
 	status = acpi_ev_install_sci_handler();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"Unable to install System Control Interrupt handler"));
 		return_ACPI_STATUS(status);
@@ -136,6 +144,7 @@ acpi_status acpi_ev_install_xrupt_handlers(void)
 
 	status = acpi_ev_init_global_lock_handler();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"Unable to initialize Global Lock handler"));
 		return_ACPI_STATUS(status);
@@ -178,11 +187,13 @@ static acpi_status acpi_ev_fixed_event_initialize(void)
 						    [i].enable_register_id,
 						    ACPI_DISABLE_EVENT);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -269,6 +280,7 @@ static u32 acpi_ev_fixed_event_dispatch(u32 event)
 
 	/* Clear the status bit */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	(void)acpi_write_bit_register(acpi_gbl_fixed_event_info[event].
 				      status_register_id, ACPI_CLEAR_STATUS);
 
diff --git a/drivers/acpi/acpica/evglock.c b/drivers/acpi/acpica/evglock.c
index 0ce33b0..c413eca 100644
--- a/drivers/acpi/acpica/evglock.c
+++ b/drivers/acpi/acpica/evglock.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evglock - Global Lock support
@@ -73,6 +75,7 @@ acpi_status acpi_ev_init_global_lock_handler(void)
 	/* If Hardware Reduced flag is set, there is no global lock */
 
 	if (acpi_gbl_reduced_hardware) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -90,6 +93,7 @@ acpi_status acpi_ev_init_global_lock_handler(void)
 	 */
 	acpi_gbl_global_lock_present = FALSE;
 	if (status == AE_NO_HARDWARE_RESPONSE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "No response from Global Lock hardware, disabling lock"));
 
@@ -98,6 +102,7 @@ acpi_status acpi_ev_init_global_lock_handler(void)
 
 	status = acpi_os_create_lock(&acpi_gbl_global_lock_pending_lock);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -217,6 +222,7 @@ acpi_status acpi_ev_acquire_global_lock(u16 timeout)
 	    acpi_ex_system_wait_mutex(acpi_gbl_global_lock_mutex->mutex.
 				      os_mutex, timeout);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -230,6 +236,7 @@ acpi_status acpi_ev_acquire_global_lock(u16 timeout)
 	 */
 	acpi_gbl_global_lock_handle++;
 	if (acpi_gbl_global_lock_handle == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_gbl_global_lock_handle = 1;
 	}
 
@@ -238,6 +245,7 @@ acpi_status acpi_ev_acquire_global_lock(u16 timeout)
 	 * treat the lock as a standard mutex.
 	 */
 	if (!acpi_gbl_global_lock_present) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_gbl_global_lock_acquired = TRUE;
 		return_ACPI_STATUS(AE_OK);
 	}
@@ -277,6 +285,7 @@ acpi_status acpi_ev_acquire_global_lock(u16 timeout)
 
 		flags = acpi_os_acquire_lock(acpi_gbl_global_lock_pending_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while (ACPI_SUCCESS(status));
 
 	acpi_gbl_global_lock_pending = FALSE;
@@ -307,6 +316,7 @@ acpi_status acpi_ev_release_global_lock(void)
 	/* Lock must be already acquired */
 
 	if (!acpi_gbl_global_lock_acquired) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARNING((AE_INFO,
 			      "Cannot release the ACPI Global Lock, it has not been acquired"));
 		return_ACPI_STATUS(AE_NOT_ACQUIRED);
diff --git a/drivers/acpi/acpica/evgpe.c b/drivers/acpi/acpica/evgpe.c
index 2293820..1b7a618 100644
--- a/drivers/acpi/acpica/evgpe.c
+++ b/drivers/acpi/acpica/evgpe.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evgpe - General Purpose Event handling and dispatch
@@ -77,6 +79,7 @@ acpi_ev_update_gpe_enable_mask(struct acpi_gpe_event_info *gpe_event_info)
 
 	gpe_register_info = gpe_event_info->register_info;
 	if (!gpe_register_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_EXIST);
 	}
 
@@ -119,6 +122,7 @@ acpi_status acpi_ev_enable_gpe(struct acpi_gpe_event_info *gpe_event_info)
 
 	status = acpi_hw_clear_gpe(gpe_event_info);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -151,6 +155,7 @@ acpi_ev_mask_gpe(struct acpi_gpe_event_info *gpe_event_info, u8 is_masked)
 
 	gpe_register_info = gpe_event_info->register_info;
 	if (!gpe_register_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_EXIST);
 	}
 
@@ -203,6 +208,7 @@ acpi_ev_add_gpe_reference(struct acpi_gpe_event_info *gpe_event_info)
 	ACPI_FUNCTION_TRACE(ev_add_gpe_reference);
 
 	if (gpe_event_info->runtime_count == ACPI_UINT8_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_LIMIT);
 	}
 
@@ -217,10 +223,12 @@ acpi_ev_add_gpe_reference(struct acpi_gpe_event_info *gpe_event_info)
 		}
 
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gpe_event_info->runtime_count--;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -245,6 +253,7 @@ acpi_ev_remove_gpe_reference(struct acpi_gpe_event_info *gpe_event_info)
 	ACPI_FUNCTION_TRACE(ev_remove_gpe_reference);
 
 	if (!gpe_event_info->runtime_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_LIMIT);
 	}
 
@@ -294,11 +303,13 @@ struct acpi_gpe_event_info *acpi_ev_low_get_gpe_info(u32 gpe_number,
 	 * (Two steps)
 	 */
 	if (!gpe_block || (gpe_number < gpe_block->block_base_number)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
 	gpe_index = gpe_number - gpe_block->block_base_number;
 	if (gpe_index >= gpe_block->gpe_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
@@ -338,6 +349,7 @@ struct acpi_gpe_event_info *acpi_ev_get_gpe_event_info(acpi_handle gpe_device,
 
 		/* Examine GPE Block 0 and 1 (These blocks are permanent) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < ACPI_MAX_GPE_BLOCKS; i++) {
 			gpe_info = acpi_ev_low_get_gpe_info(gpe_number,
 							    acpi_gbl_gpe_fadt_blocks
@@ -401,6 +413,7 @@ u32 acpi_ev_gpe_detect(struct acpi_gpe_xrupt_info *gpe_xrupt_list)
 	/* Check for the case where there are no GPEs */
 
 	if (!gpe_xrupt_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (int_status);
 	}
 
@@ -770,6 +783,7 @@ acpi_ev_gpe_dispatch(struct acpi_namespace_node *gpe_device,
 	 */
 	status = acpi_hw_low_set_gpe(gpe_event_info, ACPI_GPE_DISABLE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"Unable to disable GPE %02X", gpe_number));
 		return_UINT32(ACPI_INTERRUPT_NOT_HANDLED);
diff --git a/drivers/acpi/acpica/evgpeblk.c b/drivers/acpi/acpica/evgpeblk.c
index 3a3cb86..3a5aea8 100644
--- a/drivers/acpi/acpica/evgpeblk.c
+++ b/drivers/acpi/acpica/evgpeblk.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evgpeblk - GPE block creation and initialization.
@@ -84,6 +86,7 @@ acpi_ev_install_gpe_block(struct acpi_gpe_block_info *gpe_block,
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_EVENTS);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -97,11 +100,15 @@ acpi_ev_install_gpe_block(struct acpi_gpe_block_info *gpe_block,
 
 	flags = acpi_os_acquire_lock(acpi_gbl_gpe_lock);
 	if (gpe_xrupt_block->gpe_block_list_head) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next_gpe_block = gpe_xrupt_block->gpe_block_list_head;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (next_gpe_block->next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			next_gpe_block = next_gpe_block->next;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next_gpe_block->next = gpe_block;
 		gpe_block->previous = next_gpe_block;
 	} else {
@@ -137,6 +144,7 @@ acpi_status acpi_ev_delete_gpe_block(struct acpi_gpe_block_info *gpe_block)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_EVENTS);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -216,6 +224,7 @@ acpi_ev_create_gpe_info_blocks(struct acpi_gpe_block_info *gpe_block)
 						 sizeof(struct
 							acpi_gpe_register_info));
 	if (!gpe_register_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not allocate the GpeRegisterInfo table"));
 		return_ACPI_STATUS(AE_NO_MEMORY);
@@ -229,6 +238,7 @@ acpi_ev_create_gpe_info_blocks(struct acpi_gpe_block_info *gpe_block)
 					      sizeof(struct
 						     acpi_gpe_event_info));
 	if (!gpe_event_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not allocate the GpeEventInfo table"));
 		status = AE_NO_MEMORY;
@@ -297,16 +307,21 @@ acpi_ev_create_gpe_info_blocks(struct acpi_gpe_block_info *gpe_block)
 		this_register++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 
 error_exit:
 	if (gpe_register_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(gpe_register_info);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (gpe_event_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(gpe_event_info);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -345,6 +360,7 @@ acpi_ev_create_gpe_block(struct acpi_namespace_node *gpe_device,
 	ACPI_FUNCTION_TRACE(ev_create_gpe_block);
 
 	if (!register_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -352,6 +368,7 @@ acpi_ev_create_gpe_block(struct acpi_namespace_node *gpe_device,
 
 	gpe_block = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_gpe_block_info));
 	if (!gpe_block) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -371,6 +388,7 @@ acpi_ev_create_gpe_block(struct acpi_namespace_node *gpe_device,
 	 */
 	status = acpi_ev_create_gpe_info_blocks(gpe_block);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(gpe_block);
 		return_ACPI_STATUS(status);
 	}
@@ -379,6 +397,7 @@ acpi_ev_create_gpe_block(struct acpi_namespace_node *gpe_device,
 
 	status = acpi_ev_install_gpe_block(gpe_block, interrupt_number);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(gpe_block->register_info);
 		ACPI_FREE(gpe_block->event_info);
 		ACPI_FREE(gpe_block);
@@ -455,6 +474,7 @@ acpi_ev_initialize_gpe_block(struct acpi_gpe_xrupt_info *gpe_xrupt_info,
 	 * any GPE blocks that have been initialized already.
 	 */
 	if (!gpe_block || gpe_block->initialized) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -490,6 +510,7 @@ acpi_ev_initialize_gpe_block(struct acpi_gpe_xrupt_info *gpe_xrupt_info,
 
 			status = acpi_ev_add_gpe_reference(gpe_event_info);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_EXCEPTION((AE_INFO, status,
 					"Could not enable GPE 0x%02X",
 					gpe_number));
@@ -499,6 +520,7 @@ acpi_ev_initialize_gpe_block(struct acpi_gpe_xrupt_info *gpe_xrupt_info,
 			gpe_event_info->flags |= ACPI_GPE_AUTO_ENABLED;
 
 			if (event_status & ACPI_EVENT_FLAG_STATUS_SET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_INFO(("GPE 0x%02X active on init",
 					   gpe_number));
 				(void)acpi_ev_gpe_dispatch(gpe_block->node,
diff --git a/drivers/acpi/acpica/evgpeinit.c b/drivers/acpi/acpica/evgpeinit.c
index 8649c62..e10315e 100644
--- a/drivers/acpi/acpica/evgpeinit.c
+++ b/drivers/acpi/acpica/evgpeinit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evgpeinit - System GPE initialization and update
@@ -91,6 +93,7 @@ acpi_status acpi_ev_gpe_initialize(void)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -139,6 +142,7 @@ acpi_status acpi_ev_gpe_initialize(void)
 						  &acpi_gbl_gpe_fadt_blocks[0]);
 
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status,
 					"Could not create GPE Block 0"));
 		}
@@ -149,12 +153,14 @@ acpi_status acpi_ev_gpe_initialize(void)
 
 		/* GPE block 1 exists (has both length and address > 0) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		register_count1 = (u16)(acpi_gbl_FADT.gpe1_block_length / 2);
 
 		/* Check for GPE0/GPE1 overlap (if both banks exist) */
 
 		if ((register_count0) &&
 		    (gpe_number_max >= acpi_gbl_FADT.gpe1_base)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "GPE0 block (GPE 0 to %u) overlaps the GPE1 block "
 				    "(GPE %u to %u) - Ignoring GPE1",
@@ -182,6 +188,7 @@ acpi_status acpi_ev_gpe_initialize(void)
 						     [1]);
 
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_EXCEPTION((AE_INFO, status,
 						"Could not create GPE Block 1"));
 			}
@@ -197,12 +204,14 @@ acpi_status acpi_ev_gpe_initialize(void)
 
 	/* Exit if there are no GPE registers */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((register_count0 + register_count1) == 0) {
 
 		/* GPEs are not required by ACPI, this is OK */
 
 		ACPI_DEBUG_PRINT((ACPI_DB_INIT,
 				  "There are no GPE blocks defined in the FADT\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_OK;
 		goto cleanup;
 	}
@@ -244,6 +253,7 @@ void acpi_ev_update_gpes(acpi_owner_id table_owner_id)
 	 */
 	status = acpi_ut_acquire_mutex(ACPI_MTX_EVENTS);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -335,6 +345,7 @@ acpi_ev_match_gpe_method(acpi_handle obj_handle,
 
 	if ((walk_info->execute_by_owner_id) &&
 	    (method_node->owner_id != walk_info->owner_id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -349,6 +360,7 @@ acpi_ev_match_gpe_method(acpi_handle obj_handle,
 	/* 2) Name must begin with an underscore */
 
 	if (name[0] != '_') {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);	/* Ignore this method */
 	}
 
@@ -359,11 +371,13 @@ acpi_ev_match_gpe_method(acpi_handle obj_handle,
 	switch (name[1]) {
 	case 'L':
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type = ACPI_GPE_LEVEL_TRIGGERED;
 		break;
 
 	case 'E':
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type = ACPI_GPE_EDGE_TRIGGERED;
 		break;
 
@@ -374,6 +388,7 @@ acpi_ev_match_gpe_method(acpi_handle obj_handle,
 		ACPI_DEBUG_PRINT((ACPI_DB_LOAD,
 				  "Ignoring unknown GPE method type: %s "
 				  "(name not of form _Lxx or _Exx)", name));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -387,6 +402,7 @@ acpi_ev_match_gpe_method(acpi_handle obj_handle,
 		ACPI_DEBUG_PRINT((ACPI_DB_LOAD,
 				  "Could not extract GPE number from name: %s "
 				  "(name is not of form _Lxx or _Exx)", name));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -411,6 +427,7 @@ acpi_ev_match_gpe_method(acpi_handle obj_handle,
 
 		/* If there is already a handler, ignore this GPE method */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -421,10 +438,12 @@ acpi_ev_match_gpe_method(acpi_handle obj_handle,
 		 * for a type mismatch (if both the _Lxx AND _Exx exist)
 		 */
 		if (type != (gpe_event_info->flags & ACPI_GPE_XRUPT_TYPE_MASK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "For GPE 0x%.2X, found both _L%2.2X and _E%2.2X methods",
 				    gpe_number, gpe_number, gpe_number));
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
diff --git a/drivers/acpi/acpica/evgpeutil.c b/drivers/acpi/acpica/evgpeutil.c
index c8adb40..c34aba6 100644
--- a/drivers/acpi/acpica/evgpeutil.c
+++ b/drivers/acpi/acpica/evgpeutil.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evgpeutil - GPE utilities
@@ -89,7 +91,9 @@ acpi_ev_walk_gpe_list(acpi_gpe_callback gpe_walk_callback, void *context)
 			    gpe_walk_callback(gpe_xrupt_info, gpe_block,
 					      context);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (status == AE_CTRL_END) {	/* Callback abort */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					status = AE_OK;
 				}
 				goto unlock_and_exit;
@@ -176,11 +180,14 @@ acpi_ev_get_gpe_xrupt_block(u32 interrupt_number,
 
 	next_gpe_xrupt = acpi_gbl_gpe_xrupt_list_head;
 	while (next_gpe_xrupt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (next_gpe_xrupt->interrupt_number == interrupt_number) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*gpe_xrupt_block = next_gpe_xrupt;
 			return_ACPI_STATUS(AE_OK);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next_gpe_xrupt = next_gpe_xrupt->next;
 	}
 
@@ -188,6 +195,7 @@ acpi_ev_get_gpe_xrupt_block(u32 interrupt_number,
 
 	gpe_xrupt = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_gpe_xrupt_info));
 	if (!gpe_xrupt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -197,11 +205,15 @@ acpi_ev_get_gpe_xrupt_block(u32 interrupt_number,
 
 	flags = acpi_os_acquire_lock(acpi_gbl_gpe_lock);
 	if (acpi_gbl_gpe_xrupt_list_head) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next_gpe_xrupt = acpi_gbl_gpe_xrupt_list_head;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (next_gpe_xrupt->next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			next_gpe_xrupt = next_gpe_xrupt->next;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next_gpe_xrupt->next = gpe_xrupt;
 		gpe_xrupt->previous = next_gpe_xrupt;
 	} else {
@@ -213,10 +225,12 @@ acpi_ev_get_gpe_xrupt_block(u32 interrupt_number,
 	/* Install new interrupt handler if not SCI_INT */
 
 	if (interrupt_number != acpi_gbl_FADT.sci_interrupt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_os_install_interrupt_handler(interrupt_number,
 							   acpi_ev_gpe_xrupt_handler,
 							   gpe_xrupt);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status,
 					"Could not install GPE interrupt handler at level 0x%X",
 					interrupt_number));
@@ -251,6 +265,7 @@ acpi_status acpi_ev_delete_gpe_xrupt(struct acpi_gpe_xrupt_info *gpe_xrupt)
 	/* We never want to remove the SCI interrupt handler */
 
 	if (gpe_xrupt->interrupt_number == acpi_gbl_FADT.sci_interrupt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gpe_xrupt->gpe_block_list_head = NULL;
 		return_ACPI_STATUS(AE_OK);
 	}
@@ -315,6 +330,7 @@ acpi_ev_delete_gpe_handlers(struct acpi_gpe_xrupt_info *gpe_xrupt_info,
 
 	/* Examine each GPE Register within the block */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < gpe_block->register_count; i++) {
 
 		/* Now look at the individual GPEs in this byte register */
diff --git a/drivers/acpi/acpica/evhandler.c b/drivers/acpi/acpica/evhandler.c
index 2db61ef..206e210 100644
--- a/drivers/acpi/acpica/evhandler.c
+++ b/drivers/acpi/acpica/evhandler.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evhandler - Support for Address Space handlers
@@ -85,6 +87,7 @@ acpi_status acpi_ev_install_region_handlers(void)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -120,6 +123,7 @@ acpi_status acpi_ev_install_region_handlers(void)
 
 			/* These exceptions are all OK */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_OK;
 			break;
 
@@ -167,6 +171,7 @@ acpi_ev_has_default_handler(struct acpi_namespace_node *node,
 			if (handler_obj->address_space.space_id == space_id) {
 				if (handler_obj->address_space.handler_flags &
 				    ACPI_ADDR_HANDLER_DEFAULT_INSTALLED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return (TRUE);
 				}
 			}
@@ -175,6 +180,7 @@ acpi_ev_has_default_handler(struct acpi_namespace_node *node,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (FALSE);
 }
 
@@ -212,6 +218,7 @@ acpi_ev_install_handler(acpi_handle obj_handle,
 	/* Parameter validation */
 
 	if (!handler_obj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -219,6 +226,7 @@ acpi_ev_install_handler(acpi_handle obj_handle,
 
 	node = acpi_ns_validate_handle(obj_handle);
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -228,6 +236,7 @@ acpi_ev_install_handler(acpi_handle obj_handle,
 	 */
 	if ((node->type != ACPI_TYPE_DEVICE) &&
 	    (node->type != ACPI_TYPE_REGION) && (node != acpi_gbl_root_node)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -238,6 +247,7 @@ acpi_ev_install_handler(acpi_handle obj_handle,
 
 		/* No object, just exit */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -287,6 +297,7 @@ acpi_ev_install_handler(acpi_handle obj_handle,
 
 		/* This region is for a different address space, just ignore it */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -330,6 +341,7 @@ union acpi_operand_object *acpi_ev_find_region_handler(acpi_adr_space_type
 		/* Same space_id indicates a handler is installed */
 
 		if (handler_obj->address_space.space_id == space_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (handler_obj);
 		}
 
@@ -338,6 +350,7 @@ union acpi_operand_object *acpi_ev_find_region_handler(acpi_adr_space_type
 		handler_obj = handler_obj->address_space.next;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (NULL);
 }
 
@@ -379,52 +392,61 @@ acpi_ev_install_space_handler(struct acpi_namespace_node *node,
 	if ((node->type != ACPI_TYPE_DEVICE) &&
 	    (node->type != ACPI_TYPE_PROCESSOR) &&
 	    (node->type != ACPI_TYPE_THERMAL) && (node != acpi_gbl_root_node)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit;
 	}
 
 	if (handler == ACPI_DEFAULT_HANDLER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = ACPI_ADDR_HANDLER_DEFAULT_INSTALLED;
 
 		switch (space_id) {
 		case ACPI_ADR_SPACE_SYSTEM_MEMORY:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			handler = acpi_ex_system_memory_space_handler;
 			setup = acpi_ev_system_memory_region_setup;
 			break;
 
 		case ACPI_ADR_SPACE_SYSTEM_IO:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			handler = acpi_ex_system_io_space_handler;
 			setup = acpi_ev_io_space_region_setup;
 			break;
 
 		case ACPI_ADR_SPACE_PCI_CONFIG:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			handler = acpi_ex_pci_config_space_handler;
 			setup = acpi_ev_pci_config_region_setup;
 			break;
 
 		case ACPI_ADR_SPACE_CMOS:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			handler = acpi_ex_cmos_space_handler;
 			setup = acpi_ev_cmos_region_setup;
 			break;
 
 		case ACPI_ADR_SPACE_PCI_BAR_TARGET:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			handler = acpi_ex_pci_bar_space_handler;
 			setup = acpi_ev_pci_bar_region_setup;
 			break;
 
 		case ACPI_ADR_SPACE_DATA_TABLE:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			handler = acpi_ex_data_table_space_handler;
 			setup = NULL;
 			break;
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_BAD_PARAMETER;
 			goto unlock_and_exit;
 		}
@@ -433,6 +455,7 @@ acpi_ev_install_space_handler(struct acpi_namespace_node *node,
 	/* If the caller hasn't specified a setup routine, use the default */
 
 	if (!setup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		setup = acpi_ev_default_region_setup;
 	}
 
@@ -450,6 +473,7 @@ acpi_ev_install_space_handler(struct acpi_namespace_node *node,
 							  handler);
 
 		if (handler_obj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (handler_obj->address_space.handler == handler) {
 				/*
 				 * It is (relatively) OK to attempt to install the SAME
@@ -461,6 +485,7 @@ acpi_ev_install_space_handler(struct acpi_namespace_node *node,
 			} else {
 				/* A handler is already installed */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_ALREADY_EXISTS;
 			}
 
@@ -474,6 +499,7 @@ acpi_ev_install_space_handler(struct acpi_namespace_node *node,
 		/* obj_desc does not exist, create one */
 
 		if (node->type == ACPI_TYPE_ANY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			type = ACPI_TYPE_DEVICE;
 		} else {
 			type = node->type;
@@ -481,6 +507,7 @@ acpi_ev_install_space_handler(struct acpi_namespace_node *node,
 
 		obj_desc = acpi_ut_create_internal_object(type);
 		if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto unlock_and_exit;
 		}
@@ -517,6 +544,7 @@ acpi_ev_install_space_handler(struct acpi_namespace_node *node,
 	handler_obj =
 	    acpi_ut_create_internal_object(ACPI_TYPE_LOCAL_ADDRESS_HANDLER);
 	if (!handler_obj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto unlock_and_exit;
 	}
diff --git a/drivers/acpi/acpica/evmisc.c b/drivers/acpi/acpica/evmisc.c
index 4f6bb3f..1251f29 100644
--- a/drivers/acpi/acpica/evmisc.c
+++ b/drivers/acpi/acpica/evmisc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evmisc - Miscellaneous event manager support functions
@@ -80,6 +82,7 @@ u8 acpi_ev_is_notify_object(struct acpi_namespace_node *node)
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 }
@@ -112,6 +115,7 @@ acpi_ev_queue_notify_request(struct acpi_namespace_node *node, u32 notify_value)
 	/* Are Notifies allowed on this object? */
 
 	if (!acpi_ev_is_notify_object(node)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_TYPE);
 	}
 
@@ -202,6 +206,7 @@ static void ACPI_SYSTEM_XFACE acpi_ev_notify_dispatch(void *context)
 	/* Invoke a global notify handler if installed */
 
 	if (info->notify.global->handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->notify.global->handler(info->notify.node,
 					     info->notify.value,
 					     info->notify.global->context);
@@ -252,6 +257,7 @@ void acpi_ev_terminate(void)
 
 		/* Disable all fixed events */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < ACPI_NUM_FIXED_EVENTS; i++) {
 			status = acpi_disable_event(i, 0);
 			if (ACPI_FAILURE(status)) {
diff --git a/drivers/acpi/acpica/evregion.c b/drivers/acpi/acpica/evregion.c
index 28b447f..ab7a7a6 100644
--- a/drivers/acpi/acpica/evregion.c
+++ b/drivers/acpi/acpica/evregion.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evregion - Operation Region support
@@ -83,6 +85,7 @@ acpi_status acpi_ev_initialize_op_regions(void)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -151,6 +154,7 @@ acpi_ev_address_space_dispatch(union acpi_operand_object *region_obj,
 
 	region_obj2 = acpi_ns_get_secondary_object(region_obj);
 	if (!region_obj2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_EXIST);
 	}
 
@@ -158,6 +162,7 @@ acpi_ev_address_space_dispatch(union acpi_operand_object *region_obj,
 
 	handler_desc = region_obj->region.handler;
 	if (!handler_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "No handler for Region [%4.4s] (%p) [%s]",
 			    acpi_ut_get_node_name(region_obj->region.node),
@@ -183,6 +188,7 @@ acpi_ev_address_space_dispatch(union acpi_operand_object *region_obj,
 
 			/* No initialization routine, exit with error */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "No init routine for region(%p) [%s]",
 				    region_obj,
@@ -208,6 +214,7 @@ acpi_ev_address_space_dispatch(union acpi_operand_object *region_obj,
 		/* Check for failure of the Region Setup */
 
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status,
 					"During region initialization: [%s]",
 					acpi_ut_get_region_name(region_obj->
@@ -256,6 +263,7 @@ acpi_ev_address_space_dispatch(union acpi_operand_object *region_obj,
 
 		/* Get the Connection (resource_template) buffer */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		context->connection = field_obj->field.resource_buffer;
 		context->length = field_obj->field.resource_length;
 		context->access_length = field_obj->field.access_length;
@@ -265,6 +273,7 @@ acpi_ev_address_space_dispatch(union acpi_operand_object *region_obj,
 
 		/* Get the Connection (resource_template) buffer */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		context->connection = field_obj->field.resource_buffer;
 		context->length = field_obj->field.resource_length;
 		context->access_length = field_obj->field.access_length;
@@ -295,6 +304,7 @@ acpi_ev_address_space_dispatch(union acpi_operand_object *region_obj,
 			 region_obj2->extra.region_context);
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status, "Returned by Handler for [%s]",
 				acpi_ut_get_region_name(region_obj->region.
 							space_id)));
@@ -309,6 +319,7 @@ acpi_ev_address_space_dispatch(union acpi_operand_object *region_obj,
 		acpi_ex_enter_interpreter();
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -343,6 +354,7 @@ acpi_ev_detach_region(union acpi_operand_object *region_obj,
 
 	region_obj2 = acpi_ns_get_secondary_object(region_obj);
 	if (!region_obj2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 	region_context = &region_obj2->extra.region_context;
@@ -354,6 +366,7 @@ acpi_ev_detach_region(union acpi_operand_object *region_obj,
 
 		/* This region has no handler, all done */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -381,6 +394,7 @@ acpi_ev_detach_region(union acpi_operand_object *region_obj,
 				status =
 				    acpi_ut_release_mutex(ACPI_MTX_NAMESPACE);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_VOID;
 				}
 			}
@@ -391,6 +405,7 @@ acpi_ev_detach_region(union acpi_operand_object *region_obj,
 			    acpi_ev_execute_reg_method(region_obj,
 						       ACPI_REG_DISCONNECT);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_EXCEPTION((AE_INFO, status,
 						"from region _REG, [%s]",
 						acpi_ut_get_region_name
@@ -401,6 +416,7 @@ acpi_ev_detach_region(union acpi_operand_object *region_obj,
 				status =
 				    acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_VOID;
 				}
 			}
@@ -410,6 +426,7 @@ acpi_ev_detach_region(union acpi_operand_object *region_obj,
 			 * the deactivate notification
 			 */
 			if (region_obj->region.flags & AOPOBJ_SETUP_COMPLETE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				region_setup = handler_obj->address_space.setup;
 				status =
 				    region_setup(region_obj,
@@ -422,12 +439,15 @@ acpi_ev_detach_region(union acpi_operand_object *region_obj,
 				 * operation. We don't need access to it anymore here.
 				 */
 				if (region_context) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					*region_context = NULL;
 				}
 
 				/* Init routine may fail, Just ignore errors */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ACPI_EXCEPTION((AE_INFO, status,
 							"from region handler - deactivate, [%s]",
 							acpi_ut_get_region_name
@@ -435,6 +455,7 @@ acpi_ev_detach_region(union acpi_operand_object *region_obj,
 							 space_id)));
 				}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				region_obj->region.flags &=
 				    ~(AOPOBJ_SETUP_COMPLETE);
 			}
@@ -462,6 +483,7 @@ acpi_ev_detach_region(union acpi_operand_object *region_obj,
 		/* Prevent infinite loop if list is corrupted */
 
 		if (obj_desc == start_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Circular handler list in region object %p",
 				    region_obj));
@@ -475,6 +497,7 @@ acpi_ev_detach_region(union acpi_operand_object *region_obj,
 			  "Cannot remove region %p from address handler %p\n",
 			  region_obj, handler_obj));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_VOID;
 }
 
@@ -504,6 +527,7 @@ acpi_ev_attach_region(union acpi_operand_object *handler_obj,
 	/* Install the region's handler */
 
 	if (region_obj->region.handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_ALREADY_EXISTS);
 	}
 
@@ -553,11 +577,13 @@ acpi_ev_execute_reg_method(union acpi_operand_object *region_obj, u32 function)
 
 	if (!acpi_gbl_namespace_initialized ||
 	    region_obj->region.handler == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
 	region_obj2 = acpi_ns_get_secondary_object(region_obj);
 	if (!region_obj2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_EXIST);
 	}
 
@@ -579,25 +605,31 @@ acpi_ev_execute_reg_method(union acpi_operand_object *region_obj, u32 function)
 		region_obj2->extra.method_REG = method_node;
 	}
 	if (region_obj2->extra.method_REG == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
 	/* _REG(DISCONNECT) should be paired with _REG(CONNECT) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((function == ACPI_REG_CONNECT &&
 	     region_obj->common.flags & AOPOBJ_REG_CONNECTED) ||
 	    (function == ACPI_REG_DISCONNECT &&
 	     !(region_obj->common.flags & AOPOBJ_REG_CONNECTED))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
 	/* Allocate and initialize the evaluation information block */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info));
 	if (!info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	info->prefix_node = region_obj2->extra.method_REG;
 	info->relative_pathname = NULL;
 	info->parameters = args;
@@ -616,16 +648,20 @@ acpi_ev_execute_reg_method(union acpi_operand_object *region_obj, u32 function)
 	args[0] =
 	    acpi_ut_create_integer_object((u64)region_obj->region.space_id);
 	if (!args[0]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup1;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	args[1] = acpi_ut_create_integer_object((u64)function);
 	if (!args[1]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup2;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	args[2] = NULL;		/* Terminate list */
 
 	/* Execute the method, no return value */
@@ -640,9 +676,12 @@ acpi_ev_execute_reg_method(union acpi_operand_object *region_obj, u32 function)
 		goto cleanup2;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (function == ACPI_REG_CONNECT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		region_obj->common.flags |= AOPOBJ_REG_CONNECTED;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		region_obj->common.flags &= ~AOPOBJ_REG_CONNECTED;
 	}
 
@@ -698,6 +737,7 @@ acpi_ev_execute_reg_methods(struct acpi_namespace_node *node,
 	/* Special case for EC: handle "orphan" _REG methods with no region */
 
 	if (space_id == ACPI_ADR_SPACE_EC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ev_orphan_ec_reg_method(node);
 	}
 
@@ -734,6 +774,7 @@ acpi_ev_reg_run(acpi_handle obj_handle,
 
 	node = acpi_ns_validate_handle(obj_handle);
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -742,6 +783,7 @@ acpi_ev_reg_run(acpi_handle obj_handle,
 	 * space handlers
 	 */
 	if ((node->type != ACPI_TYPE_REGION) && (node != acpi_gbl_root_node)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -752,6 +794,7 @@ acpi_ev_reg_run(acpi_handle obj_handle,
 
 		/* No object, just exit */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -761,6 +804,7 @@ acpi_ev_reg_run(acpi_handle obj_handle,
 
 		/* This region is for a different address space, just ignore it */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -806,6 +850,7 @@ acpi_ev_orphan_ec_reg_method(struct acpi_namespace_node *ec_device_node)
 	ACPI_FUNCTION_TRACE(ev_orphan_ec_reg_method);
 
 	if (!ec_device_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
diff --git a/drivers/acpi/acpica/evrgnini.c b/drivers/acpi/acpica/evrgnini.c
index 93ec528..edb4517 100644
--- a/drivers/acpi/acpica/evrgnini.c
+++ b/drivers/acpi/acpica/evrgnini.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evrgnini- ACPI address_space (op_region) init
@@ -80,21 +82,26 @@ acpi_ev_system_memory_region_setup(acpi_handle handle,
 	ACPI_FUNCTION_TRACE(ev_system_memory_region_setup);
 
 	if (function == ACPI_REGION_DEACTIVATE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (*region_context) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			local_region_context =
 			    (struct acpi_mem_space_context *)*region_context;
 
 			/* Delete a cached mapping if present */
 
 			if (local_region_context->mapped_length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_os_unmap_memory(local_region_context->
 						     mapped_logical_address,
 						     local_region_context->
 						     mapped_length);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_FREE(local_region_context);
 			*region_context = NULL;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -103,6 +110,7 @@ acpi_ev_system_memory_region_setup(acpi_handle handle,
 	local_region_context =
 	    ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_mem_space_context));
 	if (!(local_region_context)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -137,6 +145,7 @@ acpi_ev_io_space_region_setup(acpi_handle handle,
 {
 	ACPI_FUNCTION_TRACE(ev_io_space_region_setup);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (function == ACPI_REGION_DEACTIVATE) {
 		*region_context = NULL;
 	} else {
@@ -189,14 +198,18 @@ acpi_ev_pci_config_region_setup(acpi_handle handle,
 		ACPI_DEBUG_PRINT((ACPI_DB_OPREGION,
 				  "Attempting to init a region %p, with no handler\n",
 				  region_obj));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_EXIST);
 	}
 
 	*region_context = NULL;
 	if (function == ACPI_REGION_DEACTIVATE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pci_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_FREE(pci_id);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -219,6 +232,7 @@ acpi_ev_pci_config_region_setup(acpi_handle handle,
 
 		/* Start search from the parent object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_root_node = parent_node;
 		while (pci_root_node != acpi_gbl_root_node) {
 
@@ -230,6 +244,7 @@ acpi_ev_pci_config_region_setup(acpi_handle handle,
 
 				status = acpi_install_address_space_handler((acpi_handle)pci_root_node, ACPI_ADR_SPACE_PCI_CONFIG, ACPI_DEFAULT_HANDLER, NULL, NULL);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (status == AE_SAME_HANDLER) {
 						/*
 						 * It is OK if the handler is already installed on the
@@ -238,6 +253,7 @@ acpi_ev_pci_config_region_setup(acpi_handle handle,
 						 */
 						status = AE_OK;
 					} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						ACPI_EXCEPTION((AE_INFO, status,
 								"Could not install PciConfig handler "
 								"for Root Bridge %4.4s",
@@ -253,6 +269,7 @@ acpi_ev_pci_config_region_setup(acpi_handle handle,
 
 		/* PCI root bridge not found, use namespace root node */
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_root_node = handler_obj->address_space.node;
 	}
 
@@ -261,6 +278,7 @@ acpi_ev_pci_config_region_setup(acpi_handle handle,
 	 * (install_address_space_handler could have initialized it)
 	 */
 	if (region_obj->region.flags & AOPOBJ_SETUP_COMPLETE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -268,6 +286,7 @@ acpi_ev_pci_config_region_setup(acpi_handle handle,
 
 	pci_id = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_pci_id));
 	if (!pci_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -284,6 +303,7 @@ acpi_ev_pci_config_region_setup(acpi_handle handle,
 	}
 
 	if (!pci_device_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(pci_id);
 		return_ACPI_STATUS(AE_AML_OPERAND_TYPE);
 	}
@@ -309,6 +329,7 @@ acpi_ev_pci_config_region_setup(acpi_handle handle,
 	status = acpi_ut_evaluate_numeric_object(METHOD_NAME__SEG,
 						 pci_root_node, &pci_value);
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_id->segment = ACPI_LOWORD(pci_value);
 	}
 
@@ -317,6 +338,7 @@ acpi_ev_pci_config_region_setup(acpi_handle handle,
 	status = acpi_ut_evaluate_numeric_object(METHOD_NAME__BBN,
 						 pci_root_node, &pci_value);
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_id->bus = ACPI_LOWORD(pci_value);
 	}
 
@@ -326,6 +348,7 @@ acpi_ev_pci_config_region_setup(acpi_handle handle,
 	    acpi_hw_derive_pci_id(pci_id, pci_root_node,
 				  region_obj->region.node);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(pci_id);
 		return_ACPI_STATUS(status);
 	}
@@ -359,6 +382,7 @@ static u8 acpi_ev_is_pci_root_bridge(struct acpi_namespace_node *node)
 
 	status = acpi_ut_execute_HID(node, &hid);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
@@ -366,25 +390,32 @@ static u8 acpi_ev_is_pci_root_bridge(struct acpi_namespace_node *node)
 	ACPI_FREE(hid);
 
 	if (match) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (TRUE);
 	}
 
 	/* The _HID did not match. Get the _CID and check for a PCI Root Bridge */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = acpi_ut_execute_CID(node, &cid);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
 	/* Check all _CIDs in the returned list */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < cid->count; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (acpi_ut_is_pci_root_bridge(cid->ids[i].string)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_FREE(cid);
 			return (TRUE);
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_FREE(cid);
 	return (FALSE);
 }
@@ -413,6 +444,7 @@ acpi_ev_pci_bar_region_setup(acpi_handle handle,
 {
 	ACPI_FUNCTION_TRACE(ev_pci_bar_region_setup);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -440,6 +472,7 @@ acpi_ev_cmos_region_setup(acpi_handle handle,
 {
 	ACPI_FUNCTION_TRACE(ev_cmos_region_setup);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -465,6 +498,7 @@ acpi_ev_default_region_setup(acpi_handle handle,
 {
 	ACPI_FUNCTION_TRACE(ev_default_region_setup);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (function == ACPI_REGION_DEACTIVATE) {
 		*region_context = NULL;
 	} else {
@@ -520,10 +554,12 @@ acpi_status acpi_ev_initialize_region(union acpi_operand_object *region_obj)
 	ACPI_FUNCTION_TRACE(ev_initialize_region);
 
 	if (!region_obj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
 	if (region_obj->common.flags & AOPOBJ_OBJECT_INITIALIZED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -540,6 +576,7 @@ acpi_status acpi_ev_initialize_region(union acpi_operand_object *region_obj)
 
 		/* Check to see if a handler exists */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		handler_obj = NULL;
 		obj_desc = acpi_ns_get_attached_object(node);
 		if (obj_desc) {
@@ -565,6 +602,7 @@ acpi_status acpi_ev_initialize_region(union acpi_operand_object *region_obj)
 				if (!acpi_gbl_parse_table_as_term_list &&
 				    obj_desc->method.
 				    info_flags & ACPI_METHOD_MODULE_LEVEL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					handler_obj =
 					    obj_desc->method.dispatch.handler;
 				}
@@ -618,5 +656,6 @@ acpi_status acpi_ev_initialize_region(union acpi_operand_object *region_obj)
 			  acpi_ut_get_region_name(space_id), space_id,
 			  region_obj));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
diff --git a/drivers/acpi/acpica/evsci.c b/drivers/acpi/acpica/evsci.c
index 8ce73b9..b729966 100644
--- a/drivers/acpi/acpica/evsci.c
+++ b/drivers/acpi/acpica/evsci.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: evsci - System Control Interrupt configuration and
@@ -75,6 +77,7 @@ u32 acpi_ev_sci_dispatch(void)
 	/* Are there any host-installed SCI handlers? */
 
 	if (!acpi_gbl_sci_handler_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (int_status);
 	}
 
@@ -230,6 +233,7 @@ acpi_status acpi_ev_remove_all_sci_handlers(void)
 					     acpi_ev_sci_xrupt_handler);
 
 	if (!acpi_gbl_sci_handler_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
diff --git a/drivers/acpi/acpica/evxface.c b/drivers/acpi/acpica/evxface.c
index dd1b9dd..174e7ce 100644
--- a/drivers/acpi/acpica/evxface.c
+++ b/drivers/acpi/acpica/evxface.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evxface - External interfaces for ACPI events
@@ -105,11 +107,13 @@ acpi_install_notify_handler(acpi_handle device,
 
 	if ((!device) || (!handler) || (!handler_type) ||
 	    (handler_type > ACPI_MAX_NOTIFY_HANDLER_TYPE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -124,6 +128,7 @@ acpi_install_notify_handler(acpi_handle device,
 		for (i = 0; i < ACPI_NUM_NOTIFY_TYPES; i++) {
 			if (handler_type & (i + 1)) {
 				if (acpi_gbl_global_notify[i].handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					status = AE_ALREADY_EXISTS;
 					goto unlock_and_exit;
 				}
@@ -146,6 +151,7 @@ acpi_install_notify_handler(acpi_handle device,
 	/* Are Notifies allowed on this object? */
 
 	if (!acpi_ev_is_notify_object(node)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_TYPE;
 		goto unlock_and_exit;
 	}
@@ -159,6 +165,7 @@ acpi_install_notify_handler(acpi_handle device,
 
 		obj_desc = acpi_ut_create_internal_object(node->type);
 		if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto unlock_and_exit;
 		}
@@ -178,11 +185,14 @@ acpi_install_notify_handler(acpi_handle device,
 		if (handler_type & (i + 1)) {
 			handler_obj = obj_desc->common_notify.notify_list[i];
 			while (handler_obj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (handler_obj->notify.handler == handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					status = AE_ALREADY_EXISTS;
 					goto unlock_and_exit;
 				}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				handler_obj = handler_obj->notify.next[i];
 			}
 		}
@@ -192,6 +202,7 @@ acpi_install_notify_handler(acpi_handle device,
 
 	handler_obj = acpi_ut_create_internal_object(ACPI_TYPE_LOCAL_NOTIFY);
 	if (!handler_obj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto unlock_and_exit;
 	}
@@ -215,6 +226,7 @@ acpi_install_notify_handler(acpi_handle device,
 	/* Add an extra reference if handler was installed in both lists */
 
 	if (handler_type == ACPI_ALL_NOTIFY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_add_reference(handler_obj);
 	}
 
@@ -257,6 +269,7 @@ acpi_remove_notify_handler(acpi_handle device,
 
 	/* Parameter validation */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!device) || (!handler) || (!handler_type) ||
 	    (handler_type > ACPI_MAX_NOTIFY_HANDLER_TYPE)) {
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
@@ -430,6 +443,7 @@ acpi_status acpi_install_sci_handler(acpi_sci_handler address, void *context)
 	ACPI_FUNCTION_TRACE(acpi_install_sci_handler);
 
 	if (!address) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -504,6 +518,7 @@ acpi_status acpi_remove_sci_handler(acpi_sci_handler address)
 	ACPI_FUNCTION_TRACE(acpi_remove_sci_handler);
 
 	if (!address) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -574,17 +589,20 @@ acpi_install_global_event_handler(acpi_gbl_event_handler handler, void *context)
 	/* Parameter validation */
 
 	if (!handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_EVENTS);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
 	/* Don't allow two handlers. */
 
 	if (acpi_gbl_global_event_handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_ALREADY_EXISTS;
 		goto cleanup;
 	}
@@ -625,17 +643,20 @@ acpi_install_fixed_event_handler(u32 event,
 	/* Parameter validation */
 
 	if (event > ACPI_EVENT_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_EVENTS);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
 	/* Do not allow multiple handlers */
 
 	if (acpi_gbl_fixed_event_handlers[event].handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_ALREADY_EXISTS;
 		goto cleanup;
 	}
@@ -649,6 +670,7 @@ acpi_install_fixed_event_handler(u32 event,
 	if (ACPI_SUCCESS(status))
 		status = acpi_enable_event(event, 0);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARNING((AE_INFO,
 			      "Could not enable fixed event - %s (%u)",
 			      acpi_ut_get_event_name(event), event));
@@ -693,6 +715,7 @@ acpi_remove_fixed_event_handler(u32 event, acpi_event_handler handler)
 	/* Parameter validation */
 
 	if (event > ACPI_EVENT_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -762,6 +785,7 @@ acpi_ev_install_gpe_handler(acpi_handle gpe_device,
 
 	/* Parameter validation */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!address) || (type & ~ACPI_GPE_XRUPT_TYPE_MASK)) {
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
@@ -949,6 +973,7 @@ acpi_remove_gpe_handler(acpi_handle gpe_device,
 	/* Parameter validation */
 
 	if (!address) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -1053,6 +1078,7 @@ acpi_status acpi_acquire_global_lock(u16 timeout, u32 *handle)
 	acpi_status status;
 
 	if (!handle) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -1092,6 +1118,7 @@ acpi_status acpi_release_global_lock(u32 handle)
 {
 	acpi_status status;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!handle || (handle != acpi_gbl_global_lock_handle)) {
 		return (AE_NOT_ACQUIRED);
 	}
diff --git a/drivers/acpi/acpica/evxfevnt.c b/drivers/acpi/acpica/evxfevnt.c
index c773ac4..bed9d2c 100644
--- a/drivers/acpi/acpica/evxfevnt.c
+++ b/drivers/acpi/acpica/evxfevnt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evxfevnt - External Interfaces, ACPI event disable/enable
@@ -72,12 +74,14 @@ acpi_status acpi_enable(void)
 	/* ACPI tables must be present */
 
 	if (acpi_gbl_fadt_index == ACPI_INVALID_TABLE_INDEX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_ACPI_TABLES);
 	}
 
 	/* If the Hardware Reduced flag is set, machine is always in acpi mode */
 
 	if (acpi_gbl_reduced_hardware) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -86,6 +90,7 @@ acpi_status acpi_enable(void)
 	if (acpi_hw_get_mode() == ACPI_SYS_MODE_ACPI) {
 		ACPI_DEBUG_PRINT((ACPI_DB_INIT,
 				  "System is already in ACPI mode\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -93,6 +98,7 @@ acpi_status acpi_enable(void)
 
 	status = acpi_hw_set_mode(ACPI_SYS_MODE_ACPI);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not transition to ACPI mode"));
 		return_ACPI_STATUS(status);
@@ -100,16 +106,21 @@ acpi_status acpi_enable(void)
 
 	/* Sanity check that transition succeeded */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (retry = 0; retry < 30000; ++retry) {
 		if (acpi_hw_get_mode() == ACPI_SYS_MODE_ACPI) {
 			if (retry != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_WARNING((AE_INFO,
 				"Platform took > %d00 usec to enter ACPI mode", retry));
+}
 			return_ACPI_STATUS(AE_OK);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_os_stall(100);	/* 100 usec */
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_ERROR((AE_INFO, "Hardware did not enter ACPI mode"));
 	return_ACPI_STATUS(AE_NO_HARDWARE_RESPONSE);
 }
@@ -136,6 +147,7 @@ acpi_status acpi_disable(void)
 	/* If the Hardware Reduced flag is set, machine is always in acpi mode */
 
 	if (acpi_gbl_reduced_hardware) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -183,12 +195,14 @@ acpi_status acpi_enable_event(u32 event, u32 flags)
 	/* If Hardware Reduced flag is set, there are no fixed events */
 
 	if (acpi_gbl_reduced_hardware) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
 	/* Decode the Fixed Event */
 
 	if (event > ACPI_EVENT_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -200,6 +214,7 @@ acpi_status acpi_enable_event(u32 event, u32 flags)
 	    acpi_write_bit_register(acpi_gbl_fixed_event_info[event].
 				    enable_register_id, ACPI_ENABLE_EVENT);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -209,16 +224,19 @@ acpi_status acpi_enable_event(u32 event, u32 flags)
 	    acpi_read_bit_register(acpi_gbl_fixed_event_info[event].
 				   enable_register_id, &value);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
 	if (value != 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not enable %s event",
 			    acpi_ut_get_event_name(event)));
 		return_ACPI_STATUS(AE_NO_HARDWARE_RESPONSE);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -246,12 +264,14 @@ acpi_status acpi_disable_event(u32 event, u32 flags)
 	/* If Hardware Reduced flag is set, there are no fixed events */
 
 	if (acpi_gbl_reduced_hardware) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
 	/* Decode the Fixed Event */
 
 	if (event > ACPI_EVENT_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -263,6 +283,7 @@ acpi_status acpi_disable_event(u32 event, u32 flags)
 	    acpi_write_bit_register(acpi_gbl_fixed_event_info[event].
 				    enable_register_id, ACPI_DISABLE_EVENT);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -270,16 +291,19 @@ acpi_status acpi_disable_event(u32 event, u32 flags)
 	    acpi_read_bit_register(acpi_gbl_fixed_event_info[event].
 				   enable_register_id, &value);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
 	if (value != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not disable %s events",
 			    acpi_ut_get_event_name(event)));
 		return_ACPI_STATUS(AE_NO_HARDWARE_RESPONSE);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -305,12 +329,14 @@ acpi_status acpi_clear_event(u32 event)
 	/* If Hardware Reduced flag is set, there are no fixed events */
 
 	if (acpi_gbl_reduced_hardware) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
 	/* Decode the Fixed Event */
 
 	if (event > ACPI_EVENT_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -349,6 +375,7 @@ acpi_status acpi_get_event_status(u32 event, acpi_event_status * event_status)
 	ACPI_FUNCTION_TRACE(acpi_get_event_status);
 
 	if (!event_status) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
diff --git a/drivers/acpi/acpica/evxfgpe.c b/drivers/acpi/acpica/evxfgpe.c
index 67c7c4c..9662e95 100644
--- a/drivers/acpi/acpica/evxfgpe.c
+++ b/drivers/acpi/acpica/evxfgpe.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evxfgpe - External Interfaces for General Purpose Events (GPEs)
@@ -82,6 +84,7 @@ acpi_status acpi_update_all_gpes(void)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_EVENTS);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -132,6 +135,7 @@ acpi_status acpi_enable_gpe(acpi_handle gpe_device, u32 gpe_number)
 	 */
 	gpe_event_info = acpi_ev_get_gpe_event_info(gpe_device, gpe_number);
 	if (gpe_event_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ACPI_GPE_DISPATCH_TYPE(gpe_event_info->flags) !=
 		    ACPI_GPE_DISPATCH_NONE) {
 			status = acpi_ev_add_gpe_reference(gpe_event_info);
@@ -174,6 +178,7 @@ acpi_status acpi_disable_gpe(acpi_handle gpe_device, u32 gpe_number)
 
 	gpe_event_info = acpi_ev_get_gpe_event_info(gpe_device, gpe_number);
 	if (gpe_event_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ev_remove_gpe_reference(gpe_event_info) ;
 	}
 
@@ -225,6 +230,7 @@ acpi_status acpi_set_gpe(acpi_handle gpe_device, u32 gpe_number, u8 action)
 
 	gpe_event_info = acpi_ev_get_gpe_event_info(gpe_device, gpe_number);
 	if (!gpe_event_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit;
 	}
@@ -285,6 +291,7 @@ acpi_status acpi_mask_gpe(acpi_handle gpe_device, u32 gpe_number, u8 is_masked)
 
 	gpe_event_info = acpi_ev_get_gpe_event_info(gpe_device, gpe_number);
 	if (!gpe_event_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit;
 	}
@@ -335,6 +342,7 @@ acpi_status acpi_mark_gpe_for_wake(acpi_handle gpe_device, u32 gpe_number)
 
 		/* Mark the GPE as a possible wake event */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gpe_event_info->flags |= ACPI_GPE_CAN_WAKE;
 		status = AE_OK;
 	}
@@ -522,6 +530,7 @@ acpi_set_gpe_wake_mask(acpi_handle gpe_device, u32 gpe_number, u8 action)
 	 */
 	gpe_event_info = acpi_ev_get_gpe_event_info(gpe_device, gpe_number);
 	if (!gpe_event_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit;
 	}
@@ -594,6 +603,7 @@ acpi_status acpi_clear_gpe(acpi_handle gpe_device, u32 gpe_number)
 
 	gpe_event_info = acpi_ev_get_gpe_event_info(gpe_device, gpe_number);
 	if (!gpe_event_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit;
 	}
@@ -637,6 +647,7 @@ acpi_get_gpe_status(acpi_handle gpe_device,
 
 	gpe_event_info = acpi_ev_get_gpe_event_info(gpe_device, gpe_number);
 	if (!gpe_event_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit;
 	}
@@ -682,6 +693,7 @@ acpi_status acpi_finish_gpe(acpi_handle gpe_device, u32 gpe_number)
 
 	gpe_event_info = acpi_ev_get_gpe_event_info(gpe_device, gpe_number);
 	if (!gpe_event_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit;
 	}
@@ -715,6 +727,7 @@ acpi_status acpi_disable_all_gpes(void)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_EVENTS);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -746,6 +759,7 @@ acpi_status acpi_enable_all_runtime_gpes(void)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_EVENTS);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -777,6 +791,7 @@ acpi_status acpi_enable_all_wakeup_gpes(void)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_EVENTS);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -815,6 +830,7 @@ acpi_install_gpe_block(acpi_handle gpe_device,
 
 	ACPI_FUNCTION_TRACE(acpi_install_gpe_block);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!gpe_device) || (!gpe_block_address) || (!register_count)) {
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
@@ -912,6 +928,7 @@ acpi_status acpi_remove_gpe_block(acpi_handle gpe_device)
 	ACPI_FUNCTION_TRACE(acpi_remove_gpe_block);
 
 	if (!gpe_device) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -976,6 +993,7 @@ acpi_status acpi_get_gpe_device(u32 index, acpi_handle *gpe_device)
 	ACPI_FUNCTION_TRACE(acpi_get_gpe_device);
 
 	if (!gpe_device) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
diff --git a/drivers/acpi/acpica/evxfregn.c b/drivers/acpi/acpica/evxfregn.c
index beba9d5..b1c9d04 100644
--- a/drivers/acpi/acpica/evxfregn.c
+++ b/drivers/acpi/acpica/evxfregn.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: evxfregn - External Interfaces, ACPI Operation Regions and
@@ -87,11 +89,13 @@ acpi_install_address_space_handler(acpi_handle device,
 	/* Parameter validation */
 
 	if (!device) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -99,6 +103,7 @@ acpi_install_address_space_handler(acpi_handle device,
 
 	node = acpi_ns_validate_handle(device);
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit;
 	}
@@ -153,6 +158,7 @@ acpi_remove_address_space_handler(acpi_handle device,
 	/* Parameter validation */
 
 	if (!device) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
diff --git a/drivers/acpi/acpica/exconvrt.c b/drivers/acpi/acpica/exconvrt.c
index f71028e..29d1ebd 100644
--- a/drivers/acpi/acpica/exconvrt.c
+++ b/drivers/acpi/acpica/exconvrt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exconvrt - Object conversion routines
@@ -86,6 +88,7 @@ acpi_ex_convert_to_integer(union acpi_operand_object *obj_desc,
 
 		/* No conversion necessary */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*result_desc = obj_desc;
 		return_ACPI_STATUS(AE_OK);
 
@@ -223,12 +226,15 @@ acpi_ex_convert_to_buffer(union acpi_operand_object *obj_desc,
 		return_desc =
 		    acpi_ut_create_buffer_object(acpi_gbl_integer_byte_width);
 		if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_NO_MEMORY);
 		}
 
 		/* Copy the integer to the buffer, LSB first */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new_buf = return_desc->buffer.pointer;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(new_buf, &obj_desc->integer.value,
 		       acpi_gbl_integer_byte_width);
 		break;
@@ -247,11 +253,13 @@ acpi_ex_convert_to_buffer(union acpi_operand_object *obj_desc,
 							   obj_desc->string.
 							   length + 1);
 		if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_NO_MEMORY);
 		}
 
 		/* Copy the string to the buffer */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new_buf = return_desc->buffer.pointer;
 		strncpy((char *)new_buf, (char *)obj_desc->string.pointer,
 			obj_desc->string.length);
@@ -259,11 +267,13 @@ acpi_ex_convert_to_buffer(union acpi_operand_object *obj_desc,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_TYPE);
 	}
 
 	/* Mark buffer initialized */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_desc->common.flags |= AOPOBJ_DATA_VALID;
 	*result_desc = return_desc;
 	return_ACPI_STATUS(AE_OK);
@@ -303,6 +313,7 @@ acpi_ex_convert_to_ascii(u64 integer, u16 base, u8 *string, u8 data_width)
 
 		/* Setup max length for the decimal number */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (data_width) {
 		case 1:
 
@@ -414,6 +425,7 @@ acpi_ex_convert_to_string(union acpi_operand_object * obj_desc,
 
 		/* No conversion necessary */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*result_desc = obj_desc;
 		return_ACPI_STATUS(AE_OK);
 
@@ -594,6 +606,7 @@ acpi_ex_convert_to_target_type(acpi_object_type destination_type,
 	case ARGI_SIMPLE_TARGET:
 	case ARGI_INTEGER_REF:	/* Handles Increment, Decrement cases */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (destination_type) {
 		case ACPI_TYPE_LOCAL_REGION_FIELD:
 			/*
diff --git a/drivers/acpi/acpica/excreate.c b/drivers/acpi/acpica/excreate.c
index b8adb11..863bce4 100644
--- a/drivers/acpi/acpica/excreate.c
+++ b/drivers/acpi/acpica/excreate.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: excreate - Named object creation
@@ -145,6 +147,7 @@ acpi_status acpi_ex_create_event(struct acpi_walk_state *walk_state)
 
 	obj_desc = acpi_ut_create_internal_object(ACPI_TYPE_EVENT);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -199,6 +202,7 @@ acpi_status acpi_ex_create_mutex(struct acpi_walk_state *walk_state)
 
 	obj_desc = acpi_ut_create_internal_object(ACPI_TYPE_MUTEX);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -265,6 +269,7 @@ acpi_ex_create_region(u8 * aml_start,
 	 * just return
 	 */
 	if (acpi_ns_get_attached_object(node)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -290,6 +295,7 @@ acpi_ex_create_region(u8 * aml_start,
 
 	obj_desc = acpi_ut_create_internal_object(ACPI_TYPE_REGION);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -306,6 +312,7 @@ acpi_ex_create_region(u8 * aml_start,
 		region_obj2->extra.scope_node =
 		    walk_state->scope_info->scope.node;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		region_obj2->extra.scope_node = node;
 	}
 
@@ -358,6 +365,7 @@ acpi_status acpi_ex_create_processor(struct acpi_walk_state *walk_state)
 
 	obj_desc = acpi_ut_create_internal_object(ACPI_TYPE_PROCESSOR);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -405,6 +413,7 @@ acpi_status acpi_ex_create_power_resource(struct acpi_walk_state *walk_state)
 
 	obj_desc = acpi_ut_create_internal_object(ACPI_TYPE_POWER);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -455,6 +464,7 @@ acpi_ex_create_method(u8 * aml_start,
 
 	obj_desc = acpi_ut_create_internal_object(ACPI_TYPE_METHOD);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto exit;
 	}
diff --git a/drivers/acpi/acpica/exfield.c b/drivers/acpi/acpica/exfield.c
index 5fda981..4cda59a 100644
--- a/drivers/acpi/acpica/exfield.c
+++ b/drivers/acpi/acpica/exfield.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exfield - ACPI AML (p-code) execution - field manipulation
@@ -77,6 +79,7 @@ acpi_ex_get_serial_access_length(u32 accessor_type, u32 access_length)
 	switch (accessor_type) {
 	case AML_FIELD_ATTRIB_QUICK:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		length = 0;
 		break;
 
@@ -142,6 +145,7 @@ acpi_ex_read_data_from_field(struct acpi_walk_state *walk_state,
 	/* Parameter validation */
 
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_AML_NO_OPERAND);
 	}
 	if (!ret_buffer_desc) {
@@ -349,6 +353,7 @@ acpi_ex_write_data_to_field(union acpi_operand_object *source_desc,
 	/* Parameter validation */
 
 	if (!source_desc || !obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_AML_NO_OPERAND);
 	}
 
@@ -358,8 +363,10 @@ acpi_ex_write_data_to_field(union acpi_operand_object *source_desc,
 		 * evaluate them now and save the results.
 		 */
 		if (!(obj_desc->common.flags & AOPOBJ_DATA_VALID)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ds_get_buffer_field_arguments(obj_desc);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 		}
@@ -384,6 +391,7 @@ acpi_ex_write_data_to_field(union acpi_operand_object *source_desc,
 		 * of Function
 		 */
 		if (source_desc->common.type != ACPI_TYPE_BUFFER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "SMBus/IPMI/GenericSerialBus write requires "
 				    "Buffer, found type %s",
@@ -392,13 +400,16 @@ acpi_ex_write_data_to_field(union acpi_operand_object *source_desc,
 			return_ACPI_STATUS(AE_AML_OPERAND_TYPE);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (obj_desc->field.region_obj->region.space_id ==
 		    ACPI_ADR_SPACE_SMBUS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			length = ACPI_SMBUS_BUFFER_SIZE;
 			function =
 			    ACPI_WRITE | (obj_desc->field.attribute << 16);
 		} else if (obj_desc->field.region_obj->region.space_id ==
 			   ACPI_ADR_SPACE_GSBUS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			accessor_type = obj_desc->field.attribute;
 			length =
 			    acpi_ex_get_serial_access_length(accessor_type,
@@ -416,11 +427,14 @@ acpi_ex_write_data_to_field(union acpi_operand_object *source_desc,
 			function = ACPI_WRITE | (accessor_type << 16);
 		} else {	/* IPMI */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			length = ACPI_IPMI_BUFFER_SIZE;
 			function = ACPI_WRITE;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (source_desc->buffer.length < length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "SMBus/IPMI/GenericSerialBus write requires "
 				    "Buffer of length %u, found length %u",
@@ -431,12 +445,16 @@ acpi_ex_write_data_to_field(union acpi_operand_object *source_desc,
 
 		/* Create the bi-directional buffer */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		buffer_desc = acpi_ut_create_buffer_object(length);
 		if (!buffer_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_NO_MEMORY);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		buffer = buffer_desc->buffer.pointer;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(buffer, source_desc->buffer.pointer, length);
 
 		/* Lock entire transaction if requested */
@@ -465,6 +483,7 @@ acpi_ex_write_data_to_field(union acpi_operand_object *source_desc,
 		 * is thus the number of pins.
 		 */
 		if (source_desc->common.type != ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_AML_OPERAND_TYPE);
 		}
 
@@ -477,6 +496,7 @@ acpi_ex_write_data_to_field(union acpi_operand_object *source_desc,
 				  obj_desc->field.pin_number_index,
 				  obj_desc->field.bit_length));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		buffer = &source_desc->integer.value;
 
 		/* Lock entire transaction if requested */
@@ -503,18 +523,21 @@ acpi_ex_write_data_to_field(union acpi_operand_object *source_desc,
 
 	case ACPI_TYPE_BUFFER:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		buffer = source_desc->buffer.pointer;
 		length = source_desc->buffer.length;
 		break;
 
 	case ACPI_TYPE_STRING:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		buffer = source_desc->string.pointer;
 		length = source_desc->string.length;
 		break;
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_AML_OPERAND_TYPE);
 	}
 
diff --git a/drivers/acpi/acpica/exfldio.c b/drivers/acpi/acpica/exfldio.c
index a656608..0f4c836 100644
--- a/drivers/acpi/acpica/exfldio.c
+++ b/drivers/acpi/acpica/exfldio.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exfldio - Aml Field I/O
@@ -94,6 +96,7 @@ acpi_ex_setup_region(union acpi_operand_object *obj_desc,
 	/* We must have a valid region */
 
 	if (rgn_desc->common.type != ACPI_TYPE_REGION) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Needed Region, found type 0x%X (%s)",
 			    rgn_desc->common.type,
 			    acpi_ut_get_object_type_name(rgn_desc)));
@@ -106,6 +109,7 @@ acpi_ex_setup_region(union acpi_operand_object *obj_desc,
 	/* Validate the Space ID */
 
 	if (!acpi_is_valid_space_id(space_id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Invalid/unknown Address Space ID: 0x%2.2X",
 			    space_id));
@@ -117,8 +121,10 @@ acpi_ex_setup_region(union acpi_operand_object *obj_desc,
 	 * evaluate them now and save the results.
 	 */
 	if (!(rgn_desc->common.flags & AOPOBJ_DATA_VALID)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ds_get_region_arguments(rgn_desc);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	}
@@ -133,6 +139,7 @@ acpi_ex_setup_region(union acpi_operand_object *obj_desc,
 
 		/* SMBus or IPMI has a non-linear address space */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 #ifdef ACPI_UNDER_DEVELOPMENT
@@ -155,6 +162,7 @@ acpi_ex_setup_region(union acpi_operand_object *obj_desc,
 	if (rgn_desc->region.length <
 	    (obj_desc->common_field.base_byte_offset + field_datum_byte_offset +
 	     obj_desc->common_field.access_byte_width)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (acpi_gbl_enable_interpreter_slack) {
 			/*
 			 * Slack mode only:  We will go ahead and allow access to this
@@ -168,10 +176,12 @@ acpi_ex_setup_region(union acpi_operand_object *obj_desc,
 			     base_byte_offset +
 			     obj_desc->common_field.access_byte_width +
 			     field_datum_byte_offset)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(AE_OK);
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rgn_desc->region.length <
 		    obj_desc->common_field.access_byte_width) {
 			/*
@@ -207,6 +217,7 @@ acpi_ex_setup_region(union acpi_operand_object *obj_desc,
 		return_ACPI_STATUS(AE_AML_REGION_LIMIT);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -244,6 +255,7 @@ acpi_ex_access_region(union acpi_operand_object *obj_desc,
 	 */
 	status = acpi_ex_setup_region(obj_desc, field_datum_byte_offset);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -285,13 +297,16 @@ acpi_ex_access_region(union acpi_operand_object *obj_desc,
 						value);
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status == AE_NOT_IMPLEMENTED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Region %s (ID=%u) not implemented",
 				    acpi_ut_get_region_name(rgn_desc->region.
 							    space_id),
 				    rgn_desc->region.space_id));
 		} else if (status == AE_NOT_EXIST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Region %s (ID=%u) has no handler",
 				    acpi_ut_get_region_name(rgn_desc->region.
@@ -300,6 +315,7 @@ acpi_ex_access_region(union acpi_operand_object *obj_desc,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -324,6 +340,7 @@ static u8
 acpi_ex_register_overflow(union acpi_operand_object *obj_desc, u64 value)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (obj_desc->common_field.bit_length >= ACPI_INTEGER_BIT_SIZE) {
 		/*
 		 * The field is large enough to hold the maximum integer, so we can
@@ -379,6 +396,7 @@ acpi_ex_field_datum_io(union acpi_operand_object *obj_desc,
 
 	if (read_write == ACPI_READ) {
 		if (!value) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			local_value = 0;
 
 			/* To support reads without saving return value */
@@ -407,8 +425,10 @@ acpi_ex_field_datum_io(union acpi_operand_object *obj_desc,
 		 * evaluate them now and save the results.
 		 */
 		if (!(obj_desc->common.flags & AOPOBJ_DATA_VALID)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ds_get_buffer_field_arguments(obj_desc);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 		}
@@ -436,6 +456,7 @@ acpi_ex_field_datum_io(union acpi_operand_object *obj_desc,
 			       obj_desc->common_field.access_byte_width);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_OK;
 		break;
 
@@ -447,6 +468,7 @@ acpi_ex_field_datum_io(union acpi_operand_object *obj_desc,
 		if (acpi_ex_register_overflow(obj_desc->bank_field.bank_obj,
 					      (u64) obj_desc->bank_field.
 					      value)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_AML_REGISTER_LIMIT);
 		}
 
@@ -460,6 +482,7 @@ acpi_ex_field_datum_io(union acpi_operand_object *obj_desc,
 					      sizeof(obj_desc->bank_field.
 						     value));
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -488,11 +511,13 @@ acpi_ex_field_datum_io(union acpi_operand_object *obj_desc,
 		if (acpi_ex_register_overflow(obj_desc->index_field.index_obj,
 					      (u64) obj_desc->index_field.
 					      value)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_AML_REGISTER_LIMIT);
 		}
 
 		/* Write the index value to the index_register (itself a region_field) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		field_datum_byte_offset += obj_desc->index_field.value;
 
 		ACPI_DEBUG_PRINT((ACPI_DB_BFIELD,
@@ -504,9 +529,11 @@ acpi_ex_field_datum_io(union acpi_operand_object *obj_desc,
 					      &field_datum_byte_offset,
 					      sizeof(field_datum_byte_offset));
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (read_write == ACPI_READ) {
 
 			/* Read the datum from the data_register */
@@ -534,13 +561,16 @@ acpi_ex_field_datum_io(union acpi_operand_object *obj_desc,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Wrong object type in field I/O %u",
 			    obj_desc->common.type));
 		status = AE_AML_INTERNAL;
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (read_write == ACPI_READ) {
 			ACPI_DEBUG_PRINT((ACPI_DB_BFIELD,
 					  "Value Read %8.8X%8.8X, Width %u\n",
@@ -556,6 +586,7 @@ acpi_ex_field_datum_io(union acpi_operand_object *obj_desc,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -615,9 +646,11 @@ acpi_ex_write_with_update_rule(union acpi_operand_object *obj_desc,
 							   &current_value,
 							   ACPI_READ);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status);
 				}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				merged_value |= (current_value & ~mask);
 			}
 			break;
@@ -626,6 +659,7 @@ acpi_ex_write_with_update_rule(union acpi_operand_object *obj_desc,
 
 			/* Set positions outside the field to all ones */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			merged_value |= ~mask;
 			break;
 
@@ -633,11 +667,13 @@ acpi_ex_write_with_update_rule(union acpi_operand_object *obj_desc,
 
 			/* Set positions outside the field to all zeros */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			merged_value &= mask;
 			break;
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Unknown UpdateRule value: 0x%X",
 				    (obj_desc->common_field.field_flags &
@@ -699,6 +735,7 @@ acpi_ex_extract_from_field(union acpi_operand_object *obj_desc,
 
 	if (buffer_length <
 	    ACPI_ROUND_BITS_UP_TO_BYTES(obj_desc->common_field.bit_length)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Field size %u (bits) is too large for buffer (%u)",
 			    obj_desc->common_field.bit_length, buffer_length));
@@ -723,9 +760,11 @@ acpi_ex_extract_from_field(union acpi_operand_object *obj_desc,
 			status =
 			    acpi_ex_field_datum_io(obj_desc, 0, &raw_datum,
 						   ACPI_READ);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(buffer, &raw_datum, buffer_length);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -734,6 +773,7 @@ acpi_ex_extract_from_field(union acpi_operand_object *obj_desc,
 	/* Field algorithm is limited to sizeof(u64), truncate if needed */
 
 	if (obj_desc->common_field.access_byte_width > sizeof(u64)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		obj_desc->common_field.access_byte_width = sizeof(u64);
 		access_bit_width = sizeof(u64) * 8;
 	}
@@ -755,6 +795,7 @@ acpi_ex_extract_from_field(union acpi_operand_object *obj_desc,
 	    acpi_ex_field_datum_io(obj_desc, field_offset, &raw_datum,
 				   ACPI_READ);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 	merged_datum =
@@ -766,11 +807,13 @@ acpi_ex_extract_from_field(union acpi_operand_object *obj_desc,
 
 		/* Get next input datum from the field */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		field_offset += obj_desc->common_field.access_byte_width;
 		status =
 		    acpi_ex_field_datum_io(obj_desc, field_offset, &raw_datum,
 					   ACPI_READ);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -785,18 +828,21 @@ acpi_ex_extract_from_field(union acpi_operand_object *obj_desc,
 		if (access_bit_width -
 		    obj_desc->common_field.start_field_bit_offset <
 		    ACPI_INTEGER_BIT_SIZE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			merged_datum |=
 			    raw_datum << (access_bit_width -
 					  obj_desc->common_field.
 					  start_field_bit_offset);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (i == datum_count) {
 			break;
 		}
 
 		/* Write merged datum to target buffer */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(((char *)buffer) + buffer_offset, &merged_datum,
 		       ACPI_MIN(obj_desc->common_field.access_byte_width,
 				buffer_length - buffer_offset));
@@ -873,8 +919,10 @@ acpi_ex_insert_into_field(union acpi_operand_object *obj_desc,
 
 		/* We need to create a new buffer */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new_buffer = ACPI_ALLOCATE_ZEROED(required_length);
 		if (!new_buffer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_NO_MEMORY);
 		}
 
@@ -892,6 +940,7 @@ acpi_ex_insert_into_field(union acpi_operand_object *obj_desc,
 
 	/* Algo is limited to sizeof(u64), so cut the access_byte_width */
 	if (obj_desc->common_field.access_byte_width > sizeof(u64)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		obj_desc->common_field.access_byte_width = sizeof(u64);
 	}
 
@@ -928,6 +977,7 @@ acpi_ex_insert_into_field(union acpi_operand_object *obj_desc,
 
 		/* Write merged datum to the target field */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		merged_datum &= mask;
 		status =
 		    acpi_ex_write_with_update_rule(obj_desc, mask, merged_datum,
@@ -936,6 +986,7 @@ acpi_ex_insert_into_field(union acpi_operand_object *obj_desc,
 			goto exit;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		field_offset += obj_desc->common_field.access_byte_width;
 
 		/*
@@ -950,14 +1001,17 @@ acpi_ex_insert_into_field(union acpi_operand_object *obj_desc,
 		if ((access_bit_width -
 		     obj_desc->common_field.start_field_bit_offset) <
 		    ACPI_INTEGER_BIT_SIZE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			merged_datum =
 			    raw_datum >> (access_bit_width -
 					  obj_desc->common_field.
 					  start_field_bit_offset);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			merged_datum = 0;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask = width_mask;
 
 		if (i == datum_count) {
@@ -966,7 +1020,9 @@ acpi_ex_insert_into_field(union acpi_operand_object *obj_desc,
 
 		/* Get the next input datum from the buffer */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		buffer_offset += obj_desc->common_field.access_byte_width;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(&raw_datum, ((char *)buffer) + buffer_offset,
 		       ACPI_MIN(obj_desc->common_field.access_byte_width,
 				buffer_length - buffer_offset));
@@ -981,6 +1037,7 @@ acpi_ex_insert_into_field(union acpi_operand_object *obj_desc,
 			    obj_desc->common_field.start_field_bit_offset) %
 	    access_bit_width;
 	if (buffer_tail_bits) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask &= ACPI_MASK_BITS_ABOVE(buffer_tail_bits);
 	}
 
@@ -995,7 +1052,9 @@ acpi_ex_insert_into_field(union acpi_operand_object *obj_desc,
 	/* Free temporary buffer if we used one */
 
 	if (new_buffer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(new_buffer);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
diff --git a/drivers/acpi/acpica/exmisc.c b/drivers/acpi/acpica/exmisc.c
index 1e7649c..173515e 100644
--- a/drivers/acpi/acpica/exmisc.c
+++ b/drivers/acpi/acpica/exmisc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exmisc - ACPI AML (p-code) execution - specific opcodes
@@ -78,6 +80,7 @@ acpi_ex_get_object_reference(union acpi_operand_object *obj_desc,
 	switch (ACPI_GET_DESCRIPTOR_TYPE(obj_desc)) {
 	case ACPI_DESC_TYPE_OPERAND:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (obj_desc->common.type != ACPI_TYPE_LOCAL_REFERENCE) {
 			return_ACPI_STATUS(AE_AML_OPERAND_TYPE);
 		}
@@ -161,6 +164,7 @@ u64 acpi_ex_do_math_op(u16 opcode, u64 integer0, u64 integer1)
 	switch (opcode) {
 	case AML_ADD_OP:	/* Add (Integer0, Integer1, Result) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (integer0 + integer1);
 
 	case AML_BIT_AND_OP:	/* And (Integer0, Integer1, Result) */
@@ -169,6 +173,7 @@ u64 acpi_ex_do_math_op(u16 opcode, u64 integer0, u64 integer1)
 
 	case AML_BIT_NAND_OP:	/* NAnd (Integer0, Integer1, Result) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (~(integer0 & integer1));
 
 	case AML_BIT_OR_OP:	/* Or (Integer0, Integer1, Result) */
@@ -177,14 +182,17 @@ u64 acpi_ex_do_math_op(u16 opcode, u64 integer0, u64 integer1)
 
 	case AML_BIT_NOR_OP:	/* NOr (Integer0, Integer1, Result) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (~(integer0 | integer1));
 
 	case AML_BIT_XOR_OP:	/* XOr (Integer0, Integer1, Result) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (integer0 ^ integer1);
 
 	case AML_MULTIPLY_OP:	/* Multiply (Integer0, Integer1, Result) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (integer0 * integer1);
 
 	case AML_SHIFT_LEFT_OP:	/* shift_left (Operand, shift_count, Result) */
@@ -194,8 +202,10 @@ u64 acpi_ex_do_math_op(u16 opcode, u64 integer0, u64 integer1)
 		 * width since the behavior of this is not well-defined in the C language.
 		 */
 		if (integer1 >= acpi_gbl_integer_bit_width) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (0);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (integer0 << integer1);
 
 	case AML_SHIFT_RIGHT_OP:	/* shift_right (Operand, shift_count, Result) */
@@ -205,16 +215,19 @@ u64 acpi_ex_do_math_op(u16 opcode, u64 integer0, u64 integer1)
 		 * width since the behavior of this is not well-defined in the C language.
 		 */
 		if (integer1 >= acpi_gbl_integer_bit_width) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (0);
 		}
 		return (integer0 >> integer1);
 
 	case AML_SUBTRACT_OP:	/* Subtract (Integer0, Integer1, Result) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (integer0 - integer1);
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (0);
 	}
 }
@@ -251,7 +264,9 @@ acpi_ex_do_logical_numeric_op(u16 opcode,
 	switch (opcode) {
 	case AML_LOGICAL_AND_OP:	/* LAnd (Integer0, Integer1) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (integer0 && integer1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			local_result = TRUE;
 		}
 		break;
@@ -259,12 +274,14 @@ acpi_ex_do_logical_numeric_op(u16 opcode,
 	case AML_LOGICAL_OR_OP:	/* LOr (Integer0, Integer1) */
 
 		if (integer0 || integer1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			local_result = TRUE;
 		}
 		break;
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Invalid numeric logical opcode: %X", opcode));
 		status = AE_AML_INTERNAL;
@@ -347,6 +364,7 @@ acpi_ex_do_logical_op(u16 opcode,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Invalid object type for logical operator: %X",
 			    operand0->common.type));
@@ -373,6 +391,7 @@ acpi_ex_do_logical_op(u16 opcode,
 		case AML_LOGICAL_EQUAL_OP:	/* LEqual (Operand0, Operand1) */
 
 			if (integer0 == integer1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				local_result = TRUE;
 			}
 			break;
@@ -380,19 +399,23 @@ acpi_ex_do_logical_op(u16 opcode,
 		case AML_LOGICAL_GREATER_OP:	/* LGreater (Operand0, Operand1) */
 
 			if (integer0 > integer1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				local_result = TRUE;
 			}
 			break;
 
 		case AML_LOGICAL_LESS_OP:	/* LLess (Operand0, Operand1) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (integer0 < integer1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				local_result = TRUE;
 			}
 			break;
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Invalid comparison opcode: %X", opcode));
 			status = AE_AML_INTERNAL;
@@ -423,46 +446,58 @@ acpi_ex_do_logical_op(u16 opcode,
 
 				/* Length and all bytes match ==> TRUE */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				local_result = TRUE;
 			}
 			break;
 
 		case AML_LOGICAL_GREATER_OP:	/* LGreater (Operand0, Operand1) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (compare > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				local_result = TRUE;
 				goto cleanup;	/* TRUE */
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (compare < 0) {
 				goto cleanup;	/* FALSE */
 			}
 
 			/* Bytes match (to shortest length), compare lengths */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (length0 > length1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				local_result = TRUE;
 			}
 			break;
 
 		case AML_LOGICAL_LESS_OP:	/* LLess (Operand0, Operand1) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (compare > 0) {
 				goto cleanup;	/* FALSE */
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (compare < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				local_result = TRUE;
 				goto cleanup;	/* TRUE */
 			}
 
 			/* Bytes match (to shortest length), compare lengths */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (length0 < length1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				local_result = TRUE;
 			}
 			break;
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Invalid comparison opcode: %X", opcode));
 			status = AE_AML_INTERNAL;
@@ -475,6 +510,7 @@ acpi_ex_do_logical_op(u16 opcode,
 	/* New object was created if implicit conversion performed - delete */
 
 	if (local_operand1 != operand1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_remove_reference(local_operand1);
 	}
 
diff --git a/drivers/acpi/acpica/exmutex.c b/drivers/acpi/acpica/exmutex.c
index ecd95b3..ff1a1c8 100644
--- a/drivers/acpi/acpica/exmutex.c
+++ b/drivers/acpi/acpica/exmutex.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exmutex - ASL Mutex Acquire/Release functions
@@ -71,6 +73,7 @@ void acpi_ex_unlink_mutex(union acpi_operand_object *obj_desc)
 	struct acpi_thread_state *thread = obj_desc->mutex.owner_thread;
 
 	if (!thread) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -125,6 +128,7 @@ acpi_ex_link_mutex(union acpi_operand_object *obj_desc,
 	/* Update old first object to point back to this object */
 
 	if (list_head) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_head->mutex.prev = obj_desc;
 	}
 
@@ -166,6 +170,7 @@ acpi_ex_acquire_mutex_object(u16 timeout,
 	ACPI_FUNCTION_TRACE_PTR(ex_acquire_mutex_object, obj_desc);
 
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -194,6 +199,7 @@ acpi_ex_acquire_mutex_object(u16 timeout,
 
 		/* Includes failure from a timeout on time_desc */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -231,6 +237,7 @@ acpi_ex_acquire_mutex(union acpi_operand_object *time_desc,
 	ACPI_FUNCTION_TRACE_PTR(ex_acquire_mutex, obj_desc);
 
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -321,6 +328,7 @@ acpi_status acpi_ex_release_mutex_object(union acpi_operand_object *obj_desc)
 	ACPI_FUNCTION_TRACE(ex_release_mutex_object);
 
 	if (obj_desc->mutex.acquisition_depth == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_ACQUIRED);
 	}
 
@@ -331,6 +339,7 @@ acpi_status acpi_ex_release_mutex_object(union acpi_operand_object *obj_desc)
 
 		/* Just decrement the depth and return */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -338,6 +347,7 @@ acpi_status acpi_ex_release_mutex_object(union acpi_operand_object *obj_desc)
 
 		/* Unlink the mutex from the owner's list */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ex_unlink_mutex(obj_desc);
 		obj_desc->mutex.owner_thread = NULL;
 	}
@@ -347,6 +357,7 @@ acpi_status acpi_ex_release_mutex_object(union acpi_operand_object *obj_desc)
 	if (obj_desc == acpi_gbl_global_lock_mutex) {
 		status = acpi_ev_release_global_lock();
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_os_release_mutex(obj_desc->mutex.os_mutex);
 	}
 
@@ -380,6 +391,7 @@ acpi_ex_release_mutex(union acpi_operand_object *obj_desc,
 	ACPI_FUNCTION_TRACE(ex_release_mutex);
 
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -502,6 +514,7 @@ void acpi_ex_release_all_mutexes(struct acpi_thread_state *thread)
 	/* Traverse the list of owned mutexes, releasing each one */
 
 	while (next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		obj_desc = next;
 		ACPI_DEBUG_PRINT((ACPI_DB_EXEC,
 				  "Mutex [%4.4s] force-release, SyncLevel %u Depth %u\n",
@@ -515,13 +528,16 @@ void acpi_ex_release_all_mutexes(struct acpi_thread_state *thread)
 
 			/* Ignore errors */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			(void)acpi_ev_release_global_lock();
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_os_release_mutex(obj_desc->mutex.os_mutex);
 		}
 
 		/* Update Thread sync_level (Last mutex is the important one) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		thread->current_sync_level =
 		    obj_desc->mutex.original_sync_level;
 
diff --git a/drivers/acpi/acpica/exnames.c b/drivers/acpi/acpica/exnames.c
index caa5ed1..e446d10 100644
--- a/drivers/acpi/acpica/exnames.c
+++ b/drivers/acpi/acpica/exnames.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exnames - interpreter/scanner name load/execute
@@ -87,6 +89,7 @@ static char *acpi_ex_allocate_name_string(u32 prefix_count, u32 num_name_segs)
 
 		/* Special case for root */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		size_needed = 1 + (ACPI_NAME_SIZE * num_name_segs) + 2 + 1;
 	} else {
 		size_needed =
@@ -99,19 +102,23 @@ static char *acpi_ex_allocate_name_string(u32 prefix_count, u32 num_name_segs)
 	 */
 	name_string = ACPI_ALLOCATE(size_needed);
 	if (!name_string) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not allocate size %u", size_needed));
 		return_PTR(NULL);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	temp_ptr = name_string;
 
 	/* Set up Root or Parent prefixes if needed */
 
 	if (prefix_count == ACPI_UINT32_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*temp_ptr++ = AML_ROOT_PREFIX;
 	} else {
 		while (prefix_count--) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*temp_ptr++ = AML_PARENT_PREFIX;
 		}
 	}
@@ -122,12 +129,14 @@ static char *acpi_ex_allocate_name_string(u32 prefix_count, u32 num_name_segs)
 
 		/* Set up multi prefixes   */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*temp_ptr++ = AML_MULTI_NAME_PREFIX;
 		*temp_ptr++ = (char)num_name_segs;
 	} else if (2 == num_name_segs) {
 
 		/* Set up dual prefixes */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*temp_ptr++ = AML_DUAL_NAME_PREFIX;
 	}
 
@@ -170,6 +179,7 @@ static acpi_status acpi_ex_name_segment(u8 ** in_aml_address, char *name_string)
 	char_buf[0] = *aml_address;
 
 	if ('0' <= char_buf[0] && char_buf[0] <= '9') {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Invalid leading digit: %c", char_buf[0]));
 		return_ACPI_STATUS(AE_CTRL_PENDING);
 	}
@@ -192,6 +202,7 @@ static acpi_status acpi_ex_name_segment(u8 ** in_aml_address, char *name_string)
 		char_buf[4] = '\0';
 
 		if (name_string) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			strcat(name_string, char_buf);
 			ACPI_DEBUG_PRINT((ACPI_DB_NAMES,
 					  "Appended to - %s\n", name_string));
@@ -207,6 +218,7 @@ static acpi_status acpi_ex_name_segment(u8 ** in_aml_address, char *name_string)
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 				  "Leading character is not alpha: %02Xh (not a name)\n",
 				  char_buf[0]));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_CTRL_PENDING;
 	} else {
 		/*
@@ -260,8 +272,10 @@ acpi_ex_get_name_string(acpi_object_type data_type,
 
 		/* Disallow prefixes for types associated with field_unit names */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		name_string = acpi_ex_allocate_name_string(0, 1);
 		if (!name_string) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 		} else {
 			status =
@@ -297,11 +311,14 @@ acpi_ex_get_name_string(acpi_object_type data_type,
 						  "ParentPrefix (^) at %p\n",
 						  aml_address));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				aml_address++;
 				prefix_count++;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			} while (*aml_address == AML_PARENT_PREFIX);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			has_prefix = TRUE;
 			break;
 
@@ -321,16 +338,19 @@ acpi_ex_get_name_string(acpi_object_type data_type,
 					  "DualNamePrefix at %p\n",
 					  aml_address));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			aml_address++;
 			name_string =
 			    acpi_ex_allocate_name_string(prefix_count, 2);
 			if (!name_string) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_NO_MEMORY;
 				break;
 			}
 
 			/* Indicate that we processed a prefix */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			has_prefix = TRUE;
 
 			status =
@@ -350,6 +370,7 @@ acpi_ex_get_name_string(acpi_object_type data_type,
 
 			/* Fetch count of segments remaining in name path */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			aml_address++;
 			num_segments = *aml_address;
 
@@ -357,19 +378,23 @@ acpi_ex_get_name_string(acpi_object_type data_type,
 			    acpi_ex_allocate_name_string(prefix_count,
 							 num_segments);
 			if (!name_string) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_NO_MEMORY;
 				break;
 			}
 
 			/* Indicate that we processed a prefix */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			aml_address++;
 			has_prefix = TRUE;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			while (num_segments &&
 			       (status =
 				acpi_ex_name_segment(&aml_address,
 						     name_string)) == AE_OK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				num_segments--;
 			}
 
@@ -379,6 +404,7 @@ acpi_ex_get_name_string(acpi_object_type data_type,
 
 			/* null_name valid as of 8-12-98 ASL/AML Grammar Update */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (prefix_count == ACPI_UINT32_MAX) {
 				ACPI_DEBUG_PRINT((ACPI_DB_EXEC,
 						  "NameSeg is \"\\\" followed by NULL\n"));
@@ -386,10 +412,12 @@ acpi_ex_get_name_string(acpi_object_type data_type,
 
 			/* Consume the NULL byte */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			aml_address++;
 			name_string =
 			    acpi_ex_allocate_name_string(prefix_count, 0);
 			if (!name_string) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_NO_MEMORY;
 				break;
 			}
@@ -403,6 +431,7 @@ acpi_ex_get_name_string(acpi_object_type data_type,
 			name_string =
 			    acpi_ex_allocate_name_string(prefix_count, 1);
 			if (!name_string) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_NO_MEMORY;
 				break;
 			}
@@ -417,14 +446,18 @@ acpi_ex_get_name_string(acpi_object_type data_type,
 
 		/* Ran out of segments after processing a prefix */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Malformed Name at %p", name_string));
 		status = AE_AML_BAD_NAME;
 	}
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (name_string) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_FREE(name_string);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/exoparg1.c b/drivers/acpi/acpica/exoparg1.c
index f787651..10d8f05 100644
--- a/drivers/acpi/acpica/exoparg1.c
+++ b/drivers/acpi/acpica/exoparg1.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exoparg1 - AML execution - opcodes with 1 argument
@@ -157,6 +159,7 @@ acpi_status acpi_ex_opcode_1A_0T_0R(struct acpi_walk_state *walk_state)
 	switch (walk_state->opcode) {
 	case AML_RELEASE_OP:	/*  Release (mutex_object) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ex_release_mutex(operand[0], walk_state);
 		break;
 
@@ -223,6 +226,7 @@ acpi_status acpi_ex_opcode_1A_1T_0R(struct acpi_walk_state *walk_state)
 	switch (walk_state->opcode) {
 	case AML_LOAD_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ex_load_op(operand[0], operand[1], walk_state);
 		break;
 
@@ -278,20 +282,25 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 
 		/* Create a return object of type Integer for these opcodes */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_desc = acpi_ut_create_internal_object(ACPI_TYPE_INTEGER);
 		if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto cleanup;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (walk_state->opcode) {
 		case AML_BIT_NOT_OP:	/* Not (Operand, Result)  */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_desc->integer.value = ~operand[0]->integer.value;
 			break;
 
 		case AML_FIND_SET_LEFT_BIT_OP:	/* find_set_left_bit (Operand, Result) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_desc->integer.value = operand[0]->integer.value;
 
 			/*
@@ -300,14 +309,17 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 			 */
 			for (temp32 = 0; return_desc->integer.value &&
 			     temp32 < ACPI_INTEGER_BIT_SIZE; ++temp32) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_desc->integer.value >>= 1;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_desc->integer.value = temp32;
 			break;
 
 		case AML_FIND_SET_RIGHT_BIT_OP:	/* find_set_right_bit (Operand, Result) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_desc->integer.value = operand[0]->integer.value;
 
 			/*
@@ -316,6 +328,7 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 			 */
 			for (temp32 = 0; return_desc->integer.value &&
 			     temp32 < ACPI_INTEGER_BIT_SIZE; ++temp32) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_desc->integer.value <<= 1;
 			}
 
@@ -344,11 +357,13 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 
 				/* Get the least significant 4-bit BCD digit */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				temp32 = ((u32) digit) & 0xF;
 
 				/* Check the range of the digit */
 
 				if (temp32 > 9) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ACPI_ERROR((AE_INFO,
 						    "BCD digit too large (not decimal): 0x%X",
 						    temp32));
@@ -359,6 +374,7 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 
 				/* Sum the digit into the result with the current power of 10 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_desc->integer.value +=
 				    (((u64) temp32) * power_of_ten);
 
@@ -374,6 +390,7 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 
 		case AML_TO_BCD_OP:	/* to_bcd (Operand, Result) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_desc->integer.value = 0;
 			digit = operand[0]->integer.value;
 
@@ -382,6 +399,7 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 			for (i = 0;
 			     (i < acpi_gbl_integer_nybble_width) && (digit > 0);
 			     i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				(void)acpi_ut_short_divide(digit, 10, &digit,
 							   &temp32);
 
@@ -395,7 +413,9 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 
 			/* Overflow if there is any data left in Digit */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (digit > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "Integer too large to convert to BCD: 0x%8.8X%8.8X",
 					    ACPI_FORMAT_UINT64(operand[0]->
@@ -423,6 +443,7 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 
 			/* Get the object reference, store it, and remove our reference */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ex_get_object_reference(operand[0],
 							      &return_desc2,
 							      walk_state);
@@ -455,6 +476,7 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 		 */
 		status = acpi_ex_store(operand[0], operand[1], walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -470,6 +492,7 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 			walk_state->result_obj = operand[0];
 			walk_state->operands[0] = NULL;	/* Prevent deletion */
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 
 		/*
@@ -491,6 +514,7 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 
 			/* No conversion performed, add ref to handle return value */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_add_reference(return_desc);
 		}
 		break;
@@ -504,17 +528,20 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 
 			/* No conversion performed, add ref to handle return value */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_add_reference(return_desc);
 		}
 		break;
 
 	case AML_TO_BUFFER_OP:	/* to_buffer (Data, Result) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ex_convert_to_buffer(operand[0], &return_desc);
 		if (return_desc == operand[0]) {
 
 			/* No conversion performed, add ref to handle return value */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_add_reference(return_desc);
 		}
 		break;
@@ -529,6 +556,7 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 
 			/* No conversion performed, add ref to handle return value */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_add_reference(return_desc);
 		}
 		break;
@@ -538,6 +566,7 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 
 		/* These are two obsolete opcodes */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "%s is obsolete and not implemented",
 			    acpi_ps_get_opcode_name(walk_state->opcode)));
@@ -546,16 +575,19 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 
 	default:		/* Unknown opcode */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Unknown AML opcode 0x%X",
 			    walk_state->opcode));
 		status = AE_AML_BAD_OPCODE;
 		goto cleanup;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ACPI_SUCCESS(status)) {
 
 		/* Store the return value computed above into the target object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ex_store(return_desc, operand[1], walk_state);
 	}
 
@@ -563,16 +595,21 @@ acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *walk_state)
 
 	/* Delete return object on error */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_remove_reference(return_desc);
 	}
 
 	/* Save return object on success */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (!walk_state->result_obj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		walk_state->result_obj = return_desc;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -607,6 +644,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 		return_desc = acpi_ut_create_integer_object((u64) 0);
 		if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto cleanup;
 		}
@@ -616,6 +654,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 		 * return_desc->Integer.Value is initially == 0 (FALSE) from above.
 		 */
 		if (!operand[0]->integer.value) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_desc->integer.value = ACPI_UINT64_MAX;
 		}
 		break;
@@ -628,6 +667,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 		 */
 		return_desc = acpi_ut_create_internal_object(ACPI_TYPE_INTEGER);
 		if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto cleanup;
 		}
@@ -642,6 +682,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 			/* Internal reference object - prevent deletion */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_add_reference(temp_desc);
 		}
 
@@ -655,6 +696,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 		status = acpi_ex_resolve_operands(AML_LOGICAL_NOT_OP,
 						  &temp_desc, walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status,
 					"While resolving operands for [%s]",
 					acpi_ps_get_opcode_name(walk_state->
@@ -668,15 +710,18 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 		 * Perform the actual increment or decrement
 		 */
 		if (walk_state->opcode == AML_INCREMENT_OP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_desc->integer.value =
 			    temp_desc->integer.value + 1;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_desc->integer.value =
 			    temp_desc->integer.value - 1;
 		}
 
 		/* Finished with this Integer object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_remove_reference(temp_desc);
 
 		/*
@@ -705,8 +750,10 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 		/* Allocate a descriptor to hold the type. */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_desc = acpi_ut_create_integer_object((u64) type);
 		if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto cleanup;
 		}
@@ -739,11 +786,13 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 		switch (type) {
 		case ACPI_TYPE_INTEGER:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			value = acpi_gbl_integer_byte_width;
 			break;
 
 		case ACPI_TYPE_STRING:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			value = temp_desc->string.length;
 			break;
 
@@ -751,6 +800,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 			/* Buffer arguments may not be evaluated at this point */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ds_get_buffer_arguments(temp_desc);
 			value = temp_desc->buffer.length;
 			break;
@@ -759,12 +809,14 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 			/* Package arguments may not be evaluated at this point */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ds_get_package_arguments(temp_desc);
 			value = temp_desc->package.count;
 			break;
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Operand must be Buffer/Integer/String/Package"
 				    " - found type %s",
@@ -774,6 +826,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 			goto cleanup;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ACPI_FAILURE(status)) {
 			goto cleanup;
 		}
@@ -784,6 +837,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 		 */
 		return_desc = acpi_ut_create_integer_object(value);
 		if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto cleanup;
 		}
@@ -813,9 +867,11 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 			    && ((temp_desc->common.type == ACPI_TYPE_STRING)
 				|| (temp_desc->common.type ==
 				    ACPI_TYPE_LOCAL_REFERENCE))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				operand[0] = temp_desc;
 				acpi_ut_add_reference(temp_desc);
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_AML_OPERAND_TYPE;
 				goto cleanup;
 			}
@@ -854,6 +910,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 					/* Get the object to which the reference refers */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					temp_desc =
 					    operand[0]->reference.object;
 					acpi_ut_remove_reference(operand[0]);
@@ -873,6 +930,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 			default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_AML_OPERAND_TYPE;
 				goto cleanup;
 			}
@@ -931,12 +989,14 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 				/* These types have no node subobject, return the NS node */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_desc = operand[0];
 				break;
 
 			default:
 				/* For most types, get the object attached to the node */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_desc = acpi_ns_get_attached_object((struct acpi_namespace_node *)operand[0]);
 				acpi_ut_add_reference(return_desc);
 				break;
@@ -955,6 +1015,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 				switch (operand[0]->reference.target_type) {
 				case ACPI_TYPE_BUFFER_FIELD:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					temp_desc =
 					    operand[0]->reference.object;
 
@@ -974,6 +1035,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 					    acpi_ut_create_integer_object((u64)
 									  temp_desc->buffer.pointer[operand[0]->reference.value]);
 					if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						status = AE_NO_MEMORY;
 						goto cleanup;
 					}
@@ -1001,6 +1063,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 				default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ACPI_ERROR((AE_INFO,
 						    "Unknown Index TargetType 0x%X in reference object %p",
 						    operand[0]->reference.
@@ -1013,6 +1076,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 			case ACPI_REFCLASS_REFOF:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_desc = operand[0]->reference.object;
 
 				if (ACPI_GET_DESCRIPTOR_TYPE(return_desc) ==
@@ -1044,6 +1108,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 							goto cleanup;
 						}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						return_desc = temp_desc;
 						break;
 
@@ -1051,6 +1116,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 						/* Add another reference to the object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						acpi_ut_add_reference
 						    (return_desc);
 						break;
@@ -1060,6 +1126,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 			default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "Unknown class in reference(%p) - 0x%2.2X",
 					    operand[0],
@@ -1073,6 +1140,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Unknown AML opcode 0x%X",
 			    walk_state->opcode));
 
@@ -1085,6 +1153,7 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 	/* Delete return object on error */
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_remove_reference(return_desc);
 	}
 
@@ -1094,5 +1163,6 @@ acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *walk_state)
 		walk_state->result_obj = return_desc;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
diff --git a/drivers/acpi/acpica/exoparg2.c b/drivers/acpi/acpica/exoparg2.c
index 57980b7..b9d2e66 100644
--- a/drivers/acpi/acpica/exoparg2.c
+++ b/drivers/acpi/acpica/exoparg2.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exoparg2 - AML execution - opcodes with 2 arguments
@@ -103,6 +105,7 @@ acpi_status acpi_ex_opcode_2A_0T_0R(struct acpi_walk_state *walk_state)
 
 		/* The first operand is a namespace node */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		node = (struct acpi_namespace_node *)operand[0];
 
 		/* Second value is the notify value */
@@ -271,6 +274,7 @@ acpi_status acpi_ex_opcode_2A_1T_1R(struct acpi_walk_state *walk_state)
 
 		return_desc = acpi_ut_create_internal_object(ACPI_TYPE_INTEGER);
 		if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto cleanup;
 		}
@@ -285,14 +289,17 @@ acpi_status acpi_ex_opcode_2A_1T_1R(struct acpi_walk_state *walk_state)
 	switch (walk_state->opcode) {
 	case AML_MOD_OP:	/* Mod (Dividend, Divisor, remainder_result (ACPI 2.0) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_desc = acpi_ut_create_internal_object(ACPI_TYPE_INTEGER);
 		if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto cleanup;
 		}
 
 		/* return_desc will contain the remainder */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ut_divide(operand[0]->integer.value,
 					operand[1]->integer.value,
 					NULL, &return_desc->integer.value);
@@ -324,13 +331,16 @@ acpi_status acpi_ex_opcode_2A_1T_1R(struct acpi_walk_state *walk_state)
 		while ((length < operand[0]->buffer.length) &&
 		       (length < operand[1]->integer.value) &&
 		       (operand[0]->buffer.pointer[length])) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			length++;
 		}
 
 		/* Allocate a new string object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_desc = acpi_ut_create_string_object(length);
 		if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto cleanup;
 		}
@@ -359,6 +369,7 @@ acpi_status acpi_ex_opcode_2A_1T_1R(struct acpi_walk_state *walk_state)
 		return_desc =
 		    acpi_ut_create_internal_object(ACPI_TYPE_LOCAL_REFERENCE);
 		if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto cleanup;
 		}
@@ -376,11 +387,14 @@ acpi_status acpi_ex_opcode_2A_1T_1R(struct acpi_walk_state *walk_state)
 		switch ((operand[0])->common.type) {
 		case ACPI_TYPE_STRING:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (index >= operand[0]->string.length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				length = operand[0]->string.length;
 				status = AE_AML_STRING_LIMIT;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_desc->reference.target_type =
 			    ACPI_TYPE_BUFFER_FIELD;
 			return_desc->reference.index_pointer =
@@ -390,6 +404,7 @@ acpi_status acpi_ex_opcode_2A_1T_1R(struct acpi_walk_state *walk_state)
 		case ACPI_TYPE_BUFFER:
 
 			if (index >= operand[0]->buffer.length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				length = operand[0]->buffer.length;
 				status = AE_AML_BUFFER_LIMIT;
 			}
@@ -403,6 +418,7 @@ acpi_status acpi_ex_opcode_2A_1T_1R(struct acpi_walk_state *walk_state)
 		case ACPI_TYPE_PACKAGE:
 
 			if (index >= operand[0]->package.count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				length = operand[0]->package.count;
 				status = AE_AML_PACKAGE_LIMIT;
 			}
@@ -414,6 +430,7 @@ acpi_status acpi_ex_opcode_2A_1T_1R(struct acpi_walk_state *walk_state)
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Invalid object type: %X",
 				    (operand[0])->common.type));
@@ -424,6 +441,7 @@ acpi_status acpi_ex_opcode_2A_1T_1R(struct acpi_walk_state *walk_state)
 		/* Failure means that the Index was beyond the end of the object */
 
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status,
 					"Index (0x%X%8.8X) is beyond end of object (length 0x%X)",
 					ACPI_FORMAT_UINT64(index),
@@ -449,6 +467,7 @@ acpi_status acpi_ex_opcode_2A_1T_1R(struct acpi_walk_state *walk_state)
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Unknown AML opcode 0x%X",
 			    walk_state->opcode));
 		status = AE_AML_BAD_OPCODE;
@@ -477,6 +496,7 @@ acpi_status acpi_ex_opcode_2A_1T_1R(struct acpi_walk_state *walk_state)
 	/* Delete return object on error */
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_remove_reference(return_desc);
 		walk_state->result_obj = NULL;
 	}
@@ -510,6 +530,7 @@ acpi_status acpi_ex_opcode_2A_0T_1R(struct acpi_walk_state *walk_state)
 
 	return_desc = acpi_ut_create_internal_object(ACPI_TYPE_INTEGER);
 	if (!return_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -535,12 +556,14 @@ acpi_status acpi_ex_opcode_2A_0T_1R(struct acpi_walk_state *walk_state)
 		goto store_logical_result;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (walk_state->opcode) {
 	case AML_ACQUIRE_OP:	/* Acquire (mutex_object, Timeout) */
 
 		status =
 		    acpi_ex_acquire_mutex(operand[1], operand[0], walk_state);
 		if (status == AE_TIME) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			logical_result = TRUE;	/* TRUE = Acquire timed out */
 			status = AE_OK;
 		}
@@ -548,8 +571,10 @@ acpi_status acpi_ex_opcode_2A_0T_1R(struct acpi_walk_state *walk_state)
 
 	case AML_WAIT_OP:	/* Wait (event_object, Timeout) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ex_system_wait_event(operand[1], operand[0]);
 		if (status == AE_TIME) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			logical_result = TRUE;	/* TRUE, Wait timed out */
 			status = AE_OK;
 		}
@@ -557,6 +582,7 @@ acpi_status acpi_ex_opcode_2A_0T_1R(struct acpi_walk_state *walk_state)
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Unknown AML opcode 0x%X",
 			    walk_state->opcode));
 
@@ -578,6 +604,7 @@ acpi_status acpi_ex_opcode_2A_0T_1R(struct acpi_walk_state *walk_state)
 	/* Delete return object on error */
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_remove_reference(return_desc);
 	}
 
diff --git a/drivers/acpi/acpica/exprep.c b/drivers/acpi/acpica/exprep.c
index 8de0606..f3662c7 100644
--- a/drivers/acpi/acpica/exprep.c
+++ b/drivers/acpi/acpica/exprep.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exprep - ACPI AML field prep utilities
@@ -251,6 +253,7 @@ acpi_ex_decode_field_access(union acpi_operand_object *obj_desc,
 		bit_length = byte_alignment * 8;
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		byte_alignment = 1;
 		bit_length = 8;
 		break;
@@ -258,24 +261,28 @@ acpi_ex_decode_field_access(union acpi_operand_object *obj_desc,
 	case AML_FIELD_ACCESS_BYTE:
 	case AML_FIELD_ACCESS_BUFFER:	/* ACPI 2.0 (SMBus Buffer) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		byte_alignment = 1;
 		bit_length = 8;
 		break;
 
 	case AML_FIELD_ACCESS_WORD:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		byte_alignment = 2;
 		bit_length = 16;
 		break;
 
 	case AML_FIELD_ACCESS_DWORD:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		byte_alignment = 4;
 		bit_length = 32;
 		break;
 
 	case AML_FIELD_ACCESS_QWORD:	/* ACPI 2.0 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		byte_alignment = 8;
 		bit_length = 64;
 		break;
@@ -284,6 +291,7 @@ acpi_ex_decode_field_access(union acpi_operand_object *obj_desc,
 
 		/* Invalid field access type */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Unknown field access type 0x%X", access));
 
 		return_UINT32(0);
@@ -362,6 +370,7 @@ acpi_ex_prep_common_field_object(union acpi_operand_object *obj_desc,
 	access_bit_width =
 	    acpi_ex_decode_field_access(obj_desc, field_flags, &byte_alignment);
 	if (!access_bit_width) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_AML_OPERAND_VALUE);
 	}
 
@@ -423,12 +432,14 @@ acpi_status acpi_ex_prep_field_value(struct acpi_create_field_info *info)
 
 	if (info->field_type != ACPI_TYPE_LOCAL_INDEX_FIELD) {
 		if (!info->region_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO, "Null RegionNode"));
 			return_ACPI_STATUS(AE_AML_NO_OPERAND);
 		}
 
 		type = acpi_ns_get_type(info->region_node);
 		if (type != ACPI_TYPE_REGION) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Needed Region, found type 0x%X (%s)", type,
 				    acpi_ut_get_type_name(type)));
@@ -441,6 +452,7 @@ acpi_status acpi_ex_prep_field_value(struct acpi_create_field_info *info)
 
 	obj_desc = acpi_ut_create_internal_object(info->field_type);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -453,6 +465,7 @@ acpi_status acpi_ex_prep_field_value(struct acpi_create_field_info *info)
 						  info->field_bit_position,
 						  info->field_bit_length);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_delete_object_desc(obj_desc);
 		return_ACPI_STATUS(status);
 	}
@@ -470,21 +483,25 @@ acpi_status acpi_ex_prep_field_value(struct acpi_create_field_info *info)
 		obj_desc->field.access_length = info->access_length;
 
 		if (info->connection_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			second_desc = info->connection_node->object;
 			if (!(second_desc->common.flags & AOPOBJ_DATA_VALID)) {
 				status =
 				    acpi_ds_get_buffer_arguments(second_desc);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					acpi_ut_delete_object_desc(obj_desc);
 					return_ACPI_STATUS(status);
 				}
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			obj_desc->field.resource_buffer =
 			    second_desc->buffer.pointer;
 			obj_desc->field.resource_length =
 			    (u16)second_desc->buffer.length;
 		} else if (info->resource_buffer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			obj_desc->field.resource_buffer = info->resource_buffer;
 			obj_desc->field.resource_length = info->resource_length;
 		}
@@ -496,6 +513,7 @@ acpi_status acpi_ex_prep_field_value(struct acpi_create_field_info *info)
 		if ((obj_desc->field.region_obj->region.space_id ==
 		     ACPI_ADR_SPACE_EC)
 		    && (obj_desc->common_field.bit_length > 8)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			access_byte_width =
 			    ACPI_ROUND_BITS_UP_TO_BYTES(obj_desc->common_field.
 							bit_length);
@@ -503,6 +521,7 @@ acpi_status acpi_ex_prep_field_value(struct acpi_create_field_info *info)
 			/* Maximum byte width supported is 255 */
 
 			if (access_byte_width < 256) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				obj_desc->common_field.access_byte_width =
 				    (u8)access_byte_width;
 			}
@@ -521,6 +540,7 @@ acpi_status acpi_ex_prep_field_value(struct acpi_create_field_info *info)
 
 	case ACPI_TYPE_LOCAL_BANK_FIELD:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		obj_desc->bank_field.value = info->bank_value;
 		obj_desc->bank_field.region_obj =
 		    acpi_ns_get_attached_object(info->region_node);
@@ -566,6 +586,7 @@ acpi_status acpi_ex_prep_field_value(struct acpi_create_field_info *info)
 
 		if (!obj_desc->index_field.data_obj
 		    || !obj_desc->index_field.index_obj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Null Index Object during field prep"));
 			acpi_ut_delete_object_desc(obj_desc);
@@ -574,6 +595,7 @@ acpi_status acpi_ex_prep_field_value(struct acpi_create_field_info *info)
 
 		/* An additional reference for the attached objects */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_add_reference(obj_desc->index_field.data_obj);
 		acpi_ut_add_reference(obj_desc->index_field.index_obj);
 
diff --git a/drivers/acpi/acpica/exregion.c b/drivers/acpi/acpica/exregion.c
index 7bcc9d8..b54f2c4 100644
--- a/drivers/acpi/acpica/exregion.c
+++ b/drivers/acpi/acpica/exregion.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exregion - ACPI default op_region (address space) handlers
@@ -89,26 +91,31 @@ acpi_ex_system_memory_space_handler(u32 function,
 	switch (bit_width) {
 	case 8:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		length = 1;
 		break;
 
 	case 16:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		length = 2;
 		break;
 
 	case 32:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		length = 4;
 		break;
 
 	case 64:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		length = 8;
 		break;
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Invalid SystemMemory width %u",
 			    bit_width));
 		return_ACPI_STATUS(AE_AML_OPERAND_VALUE);
@@ -142,6 +149,7 @@ acpi_ex_system_memory_space_handler(u32 function,
 
 			/* Valid mapping, delete it */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_os_unmap_memory(mem_info->mapped_logical_address,
 					     mem_info->mapped_length);
 		}
@@ -168,10 +176,12 @@ acpi_ex_system_memory_space_handler(u32 function,
 		page_boundary_map_length = (acpi_size)
 		    (ACPI_ROUND_UP(address, ACPI_DEFAULT_PAGE_SIZE) - address);
 		if (page_boundary_map_length == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			page_boundary_map_length = ACPI_DEFAULT_PAGE_SIZE;
 		}
 
 		if (map_length > page_boundary_map_length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			map_length = page_boundary_map_length;
 		}
 
@@ -180,6 +190,7 @@ acpi_ex_system_memory_space_handler(u32 function,
 		mem_info->mapped_logical_address =
 		    acpi_os_map_memory(address, map_length);
 		if (!mem_info->mapped_logical_address) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Could not map memory at 0x%8.8X%8.8X, size %u",
 				    ACPI_FORMAT_UINT64(address),
@@ -220,11 +231,13 @@ acpi_ex_system_memory_space_handler(u32 function,
 		switch (bit_width) {
 		case 8:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*value = (u64)ACPI_GET8(logical_addr_ptr);
 			break;
 
 		case 16:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*value = (u64)ACPI_GET16(logical_addr_ptr);
 			break;
 
@@ -235,6 +248,7 @@ acpi_ex_system_memory_space_handler(u32 function,
 
 		case 64:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*value = (u64)ACPI_GET64(logical_addr_ptr);
 			break;
 
@@ -248,24 +262,29 @@ acpi_ex_system_memory_space_handler(u32 function,
 
 	case ACPI_WRITE:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (bit_width) {
 		case 8:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_SET8(logical_addr_ptr, *value);
 			break;
 
 		case 16:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_SET16(logical_addr_ptr, *value);
 			break;
 
 		case 32:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_SET32(logical_addr_ptr, *value);
 			break;
 
 		case 64:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_SET64(logical_addr_ptr, *value);
 			break;
 
@@ -279,10 +298,12 @@ acpi_ex_system_memory_space_handler(u32 function,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -325,6 +346,7 @@ acpi_ex_system_io_space_handler(u32 function,
 	switch (function) {
 	case ACPI_READ:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_hw_read_port((acpi_io_address)address,
 					   &value32, bit_width);
 		*value = value32;
@@ -415,6 +437,7 @@ acpi_ex_pci_config_space_handler(u32 function,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		break;
 	}
diff --git a/drivers/acpi/acpica/exresnte.c b/drivers/acpi/acpica/exresnte.c
index 91c1de0..6bc49b8 100644
--- a/drivers/acpi/acpica/exresnte.c
+++ b/drivers/acpi/acpica/exresnte.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exresnte - AML Interpreter object resolution
@@ -104,6 +106,7 @@ acpi_ex_resolve_node_to_value(struct acpi_namespace_node **object_ptr,
 
 		/* There is always exactly one level of indirection */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		node = ACPI_CAST_PTR(struct acpi_namespace_node, node->object);
 		source_desc = acpi_ns_get_attached_object(node);
 		entry_type = acpi_ns_get_type((acpi_handle)node);
@@ -120,10 +123,12 @@ acpi_ex_resolve_node_to_value(struct acpi_namespace_node **object_ptr,
 	    (entry_type == ACPI_TYPE_THERMAL) ||
 	    (entry_type == ACPI_TYPE_METHOD) ||
 	    (node->flags & (ANOBJ_METHOD_ARG | ANOBJ_METHOD_LOCAL))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
 	if (!source_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "No object attached to node [%4.4s] %p",
 			    node->name.ascii, node));
 		return_ACPI_STATUS(AE_AML_UNINITIALIZED_NODE);
@@ -137,6 +142,7 @@ acpi_ex_resolve_node_to_value(struct acpi_namespace_node **object_ptr,
 	case ACPI_TYPE_PACKAGE:
 
 		if (source_desc->common.type != ACPI_TYPE_PACKAGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO, "Object not a Package, type %s",
 				    acpi_ut_get_object_type_name(source_desc)));
 			return_ACPI_STATUS(AE_AML_OPERAND_TYPE);
@@ -155,6 +161,7 @@ acpi_ex_resolve_node_to_value(struct acpi_namespace_node **object_ptr,
 	case ACPI_TYPE_BUFFER:
 
 		if (source_desc->common.type != ACPI_TYPE_BUFFER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO, "Object not a Buffer, type %s",
 				    acpi_ut_get_object_type_name(source_desc)));
 			return_ACPI_STATUS(AE_AML_OPERAND_TYPE);
@@ -173,6 +180,7 @@ acpi_ex_resolve_node_to_value(struct acpi_namespace_node **object_ptr,
 	case ACPI_TYPE_STRING:
 
 		if (source_desc->common.type != ACPI_TYPE_STRING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO, "Object not a String, type %s",
 				    acpi_ut_get_object_type_name(source_desc)));
 			return_ACPI_STATUS(AE_AML_OPERAND_TYPE);
@@ -187,6 +195,7 @@ acpi_ex_resolve_node_to_value(struct acpi_namespace_node **object_ptr,
 	case ACPI_TYPE_INTEGER:
 
 		if (source_desc->common.type != ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO, "Object not a Integer, type %s",
 				    acpi_ut_get_object_type_name(source_desc)));
 			return_ACPI_STATUS(AE_AML_OPERAND_TYPE);
@@ -230,6 +239,7 @@ acpi_ex_resolve_node_to_value(struct acpi_namespace_node **object_ptr,
 
 	case ACPI_TYPE_ANY:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Untyped entry %p, no attached object!", node));
 
@@ -237,6 +247,7 @@ acpi_ex_resolve_node_to_value(struct acpi_namespace_node **object_ptr,
 
 	case ACPI_TYPE_LOCAL_REFERENCE:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (source_desc->reference.class) {
 		case ACPI_REFCLASS_TABLE:	/* This is a ddb_handle */
 		case ACPI_REFCLASS_REFOF:
@@ -244,6 +255,7 @@ acpi_ex_resolve_node_to_value(struct acpi_namespace_node **object_ptr,
 
 			/* Return an additional reference to the object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			obj_desc = source_desc;
 			acpi_ut_add_reference(obj_desc);
 			break;
@@ -252,6 +264,7 @@ acpi_ex_resolve_node_to_value(struct acpi_namespace_node **object_ptr,
 
 			/* No named references are allowed here */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Unsupported Reference type 0x%X",
 				    source_desc->reference.class));
@@ -264,6 +277,7 @@ acpi_ex_resolve_node_to_value(struct acpi_namespace_node **object_ptr,
 
 		/* Default case is for unknown types */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Node %p - Unknown object type 0x%X",
 			    node, entry_type));
diff --git a/drivers/acpi/acpica/exresolv.c b/drivers/acpi/acpica/exresolv.c
index 5e1854ea..a4e168b 100644
--- a/drivers/acpi/acpica/exresolv.c
+++ b/drivers/acpi/acpica/exresolv.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exresolv - AML Interpreter object resolution
@@ -80,6 +82,7 @@ acpi_ex_resolve_to_value(union acpi_operand_object **stack_ptr,
 	ACPI_FUNCTION_TRACE_PTR(ex_resolve_to_value, stack_ptr);
 
 	if (!stack_ptr || !*stack_ptr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Internal - null pointer"));
 		return_ACPI_STATUS(AE_AML_NO_OPERAND);
 	}
@@ -92,10 +95,12 @@ acpi_ex_resolve_to_value(union acpi_operand_object **stack_ptr,
 	if (ACPI_GET_DESCRIPTOR_TYPE(*stack_ptr) == ACPI_DESC_TYPE_OPERAND) {
 		status = acpi_ex_resolve_object_to_value(stack_ptr, walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
 		if (!*stack_ptr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO, "Internal - null pointer"));
 			return_ACPI_STATUS(AE_AML_NO_OPERAND);
 		}
@@ -111,11 +116,13 @@ acpi_ex_resolve_to_value(union acpi_operand_object **stack_ptr,
 						  (struct acpi_namespace_node,
 						   stack_ptr), walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	}
 
 	ACPI_DEBUG_PRINT((ACPI_DB_EXEC, "Resolved object %p\n", *stack_ptr));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -166,6 +173,7 @@ acpi_ex_resolve_object_to_value(union acpi_operand_object **stack_ptr,
 							       walk_state,
 							       &obj_desc);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 
@@ -184,6 +192,7 @@ acpi_ex_resolve_object_to_value(union acpi_operand_object **stack_ptr,
 
 		case ACPI_REFCLASS_INDEX:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			switch (stack_desc->reference.target_type) {
 			case ACPI_TYPE_BUFFER_FIELD:
 
@@ -194,6 +203,7 @@ acpi_ex_resolve_object_to_value(union acpi_operand_object **stack_ptr,
 
 				/* If method call or copy_object - do not dereference */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if ((walk_state->opcode ==
 				     AML_INT_METHODCALL_OP)
 				    || (walk_state->opcode ==
@@ -203,6 +213,7 @@ acpi_ex_resolve_object_to_value(union acpi_operand_object **stack_ptr,
 
 				/* Otherwise, dereference the package_index to a package element */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				obj_desc = *stack_desc->reference.where;
 				if (obj_desc) {
 					/*
@@ -229,6 +240,7 @@ acpi_ex_resolve_object_to_value(union acpi_operand_object **stack_ptr,
 
 				/* Invalid reference object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "Unknown TargetType 0x%X in Index/Reference object %p",
 					    stack_desc->reference.target_type,
@@ -250,6 +262,7 @@ acpi_ex_resolve_object_to_value(union acpi_operand_object **stack_ptr,
 
 			/* Dereference the name */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if ((stack_desc->reference.node->type ==
 			     ACPI_TYPE_DEVICE)
 			    || (stack_desc->reference.node->type ==
@@ -257,20 +270,24 @@ acpi_ex_resolve_object_to_value(union acpi_operand_object **stack_ptr,
 
 				/* These node types do not have 'real' subobjects */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*stack_ptr = (void *)stack_desc->reference.node;
 			} else {
 				/* Get the object pointed to by the namespace node */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*stack_ptr =
 				    (stack_desc->reference.node)->object;
 				acpi_ut_add_reference(*stack_ptr);
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_remove_reference(stack_desc);
 			break;
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Unknown Reference type 0x%X in %p",
 				    ref_type, stack_desc));
@@ -313,6 +330,7 @@ acpi_ex_resolve_object_to_value(union acpi_operand_object **stack_ptr,
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -351,6 +369,7 @@ acpi_ex_resolve_multiple(struct acpi_walk_state *walk_state,
 	switch (ACPI_GET_DESCRIPTOR_TYPE(obj_desc)) {
 	case ACPI_DESC_TYPE_OPERAND:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type = obj_desc->common.type;
 		break;
 
diff --git a/drivers/acpi/acpica/exresop.c b/drivers/acpi/acpica/exresop.c
index c485242..8575e35 100644
--- a/drivers/acpi/acpica/exresop.c
+++ b/drivers/acpi/acpica/exresop.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exresop - AML Interpreter operand/object resolution
@@ -80,6 +82,7 @@ acpi_ex_check_object_type(acpi_object_type type_needed,
 
 		/* All types OK, so we don't perform any typechecks */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -92,11 +95,13 @@ acpi_ex_check_object_type(acpi_object_type type_needed,
 		if ((this_type == ACPI_TYPE_INTEGER) &&
 		    (((union acpi_operand_object *)object)->common.flags &
 		     AOPOBJ_AML_CONSTANT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_OK);
 		}
 	}
 
 	if (type_needed != this_type) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Needed type [%s], found [%s] %p",
 			    acpi_ut_get_type_name(type_needed),
@@ -105,6 +110,7 @@ acpi_ex_check_object_type(acpi_object_type type_needed,
 		return (AE_AML_OPERAND_TYPE);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -147,6 +153,7 @@ acpi_ex_resolve_operands(u16 opcode,
 
 	op_info = acpi_ps_get_opcode_info(opcode);
 	if (op_info->class == AML_CLASS_UNKNOWN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_AML_BAD_OPCODE);
 	}
 
diff --git a/drivers/acpi/acpica/exstore.c b/drivers/acpi/acpica/exstore.c
index bdd43cd..5ef6e60 100644
--- a/drivers/acpi/acpica/exstore.c
+++ b/drivers/acpi/acpica/exstore.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exstore - AML Interpreter object store support
@@ -95,6 +97,7 @@ acpi_ex_store(union acpi_operand_object *source_desc,
 	/* Validate parameters */
 
 	if (!source_desc || !dest_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Null parameter"));
 		return_ACPI_STATUS(AE_AML_NO_OPERAND);
 	}
@@ -127,6 +130,7 @@ acpi_ex_store(union acpi_operand_object *source_desc,
 		/* Allow stores to Constants -- a Noop as per ACPI spec */
 
 		if (dest_desc->common.flags & AOPOBJ_AML_CONSTANT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_OK);
 		}
 
@@ -136,6 +140,7 @@ acpi_ex_store(union acpi_operand_object *source_desc,
 
 		/* Destination is not a Reference object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Target is not a Reference or Constant object - [%s] %p",
 			    acpi_ut_get_object_type_name(dest_desc),
@@ -157,6 +162,7 @@ acpi_ex_store(union acpi_operand_object *source_desc,
 
 		/* Storing an object into a Name "container" */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ex_store_object_to_node(source_desc,
 						      ref_desc->reference.
 						      object, walk_state,
@@ -193,11 +199,13 @@ acpi_ex_store(union acpi_operand_object *source_desc,
 				  source_desc,
 				  acpi_ut_get_object_type_name(source_desc)));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_DEBUG_OBJECT(source_desc, 0, 0);
 		break;
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Unknown Reference Class 0x%2.2X",
 			    ref_desc->reference.class));
 		ACPI_DUMP_ENTRY(ref_desc, ACPI_LV_INFO);
@@ -206,6 +214,7 @@ acpi_ex_store(union acpi_operand_object *source_desc,
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -258,6 +267,7 @@ acpi_ex_store_object_to_index(union acpi_operand_object *source_desc,
 
 			/* This is a DDBHandle, just add a reference to it */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_add_reference(source_desc);
 			new_desc = source_desc;
 		} else {
@@ -268,28 +278,35 @@ acpi_ex_store_object_to_index(union acpi_operand_object *source_desc,
 							    &new_desc,
 							    walk_state);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (obj_desc) {
 
 			/* Decrement reference count by the ref count of the parent package */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			for (i = 0; i < ((union acpi_operand_object *)
 					 index_desc->reference.object)->common.
 			     reference_count; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ut_remove_reference(obj_desc);
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*(index_desc->reference.where) = new_desc;
 
 		/* Increment ref count by the ref count of the parent package-1 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 1; i < ((union acpi_operand_object *)
 				 index_desc->reference.object)->common.
 		     reference_count; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_add_reference(new_desc);
 		}
 
@@ -313,6 +330,7 @@ acpi_ex_store_object_to_index(union acpi_operand_object *source_desc,
 		obj_desc = index_desc->reference.object;
 		if ((obj_desc->common.type != ACPI_TYPE_BUFFER) &&
 		    (obj_desc->common.type != ACPI_TYPE_STRING)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_AML_OPERAND_TYPE);
 		}
 
@@ -333,6 +351,7 @@ acpi_ex_store_object_to_index(union acpi_operand_object *source_desc,
 
 			/* Note: Takes advantage of common string/buffer fields */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			value = source_desc->buffer.pointer[0];
 			break;
 
@@ -340,6 +359,7 @@ acpi_ex_store_object_to_index(union acpi_operand_object *source_desc,
 
 			/* All other types are invalid */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Source must be type [Integer/Buffer/String], found [%s]",
 				    acpi_ut_get_object_type_name(source_desc)));
@@ -358,6 +378,7 @@ acpi_ex_store_object_to_index(union acpi_operand_object *source_desc,
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -443,8 +464,10 @@ acpi_ex_store_object_to_node(union acpi_operand_object *source_desc,
 			 * elsewhere.
 			 */
 			if (walk_state->opcode == AML_STORE_OP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (source_desc->common.type !=
 				    ACPI_TYPE_PACKAGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ACPI_ERROR((AE_INFO,
 						    "Cannot assign type [%s] to [Package] "
 						    "(source must be type Pkg)",
@@ -466,6 +489,7 @@ acpi_ex_store_object_to_node(union acpi_operand_object *source_desc,
 		case ACPI_TYPE_PROCESSOR:
 		case ACPI_TYPE_THERMAL:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Target must be [Buffer/Integer/String/Reference]"
 				    ", found [%s] (%4.4s)",
@@ -485,11 +509,13 @@ acpi_ex_store_object_to_node(union acpi_operand_object *source_desc,
 	 */
 	status = acpi_ex_resolve_object(&source_desc, target_type, walk_state);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
 	/* Do the actual store operation */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (target_type) {
 		/*
 		 * The simple data types all support implicit source operand
@@ -518,6 +544,7 @@ acpi_ex_store_object_to_node(union acpi_operand_object *source_desc,
 		    acpi_ex_store_object_to_object(source_desc, target_desc,
 						   &new_desc, walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -572,6 +599,7 @@ acpi_ex_store_object_to_node(union acpi_operand_object *source_desc,
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -612,6 +640,7 @@ acpi_ex_store_direct_to_node(union acpi_operand_object *source_desc,
 	status =
 	    acpi_ut_copy_iobject_to_iobject(source_desc, &new_desc, walk_state);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/exstoren.c b/drivers/acpi/acpica/exstoren.c
index 56f59cf5..b27b403 100644
--- a/drivers/acpi/acpica/exstoren.c
+++ b/drivers/acpi/acpica/exstoren.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exstoren - AML Interpreter object store support,
@@ -121,6 +123,7 @@ acpi_ex_resolve_object(union acpi_operand_object **source_desc_ptr,
 
 			/* Conversion successful but still not a valid type */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Cannot assign type [%s] to [%s] (must be type Int/Str/Buf)",
 				    acpi_ut_get_object_type_name(source_desc),
@@ -226,9 +229,11 @@ acpi_ex_store_object_to_object(union acpi_operand_object *source_desc,
 							&actual_src_desc,
 							walk_state);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (source_desc == actual_src_desc) {
 			/*
 			 * No conversion was performed. Return the source_desc as the
@@ -287,6 +292,7 @@ acpi_ex_store_object_to_object(union acpi_operand_object *source_desc,
 
 		/* Delete the intermediate (temporary) source object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_remove_reference(actual_src_desc);
 	}
 
diff --git a/drivers/acpi/acpica/exsystem.c b/drivers/acpi/acpica/exsystem.c
index ad3b610..df45d49 100644
--- a/drivers/acpi/acpica/exsystem.c
+++ b/drivers/acpi/acpica/exsystem.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exsystem - Interface to OS services
@@ -70,6 +72,7 @@ acpi_status acpi_ex_system_wait_semaphore(acpi_semaphore semaphore, u16 timeout)
 
 	status = acpi_os_wait_semaphore(semaphore, 1, ACPI_DO_NOT_WAIT);
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -115,13 +118,16 @@ acpi_status acpi_ex_system_wait_mutex(acpi_mutex mutex, u16 timeout)
 
 	status = acpi_os_acquire_mutex(mutex, ACPI_DO_NOT_WAIT);
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (status == AE_TIME) {
 
 		/* We must wait, so unlock the interpreter */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ex_exit_interpreter();
 		status = acpi_os_acquire_mutex(mutex, timeout);
 
@@ -134,6 +140,7 @@ acpi_status acpi_ex_system_wait_mutex(acpi_mutex mutex, u16 timeout)
 		acpi_ex_enter_interpreter();
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -196,6 +203,7 @@ acpi_status acpi_ex_system_do_sleep(u64 how_long)
 
 	/* Since this thread will sleep, we must release the interpreter */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_ex_exit_interpreter();
 
 	/*
@@ -300,6 +308,7 @@ acpi_status acpi_ex_system_reset_event(union acpi_operand_object *obj_desc)
 	status =
 	    acpi_os_create_semaphore(ACPI_NO_UNIT_LIMIT, 0, &temp_semaphore);
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		(void)acpi_os_delete_semaphore(obj_desc->event.os_semaphore);
 		obj_desc->event.os_semaphore = temp_semaphore;
 	}
diff --git a/drivers/acpi/acpica/extrace.c b/drivers/acpi/acpica/extrace.c
index ae9df86..658df45 100644
--- a/drivers/acpi/acpica/extrace.c
+++ b/drivers/acpi/acpica/extrace.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: extrace - Support for interpreter execution tracing
@@ -77,6 +79,7 @@ static u8 acpi_ex_interpreter_trace_enabled(char *name)
 	/* Check if tracing is enabled */
 
 	if (!(acpi_gbl_trace_flags & ACPI_TRACE_ENABLED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
@@ -91,20 +94,26 @@ static u8 acpi_ex_interpreter_trace_enabled(char *name)
 	 *    not be cleared by the trace stopper during the first match
 	 */
 	if (acpi_gbl_trace_method_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (TRUE);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (name &&
 	    (acpi_gbl_trace_method_name &&
 	     strcmp(acpi_gbl_trace_method_name, name))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((acpi_gbl_trace_flags & ACPI_TRACE_ONESHOT) &&
 	    !acpi_gbl_trace_method_name) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (TRUE);
 }
 
@@ -168,6 +177,7 @@ acpi_ex_trace_point(acpi_trace_event_type type,
 
 	ACPI_FUNCTION_NAME(ex_trace_point);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pathname) {
 		ACPI_DEBUG_PRINT((ACPI_DB_TRACE_POINT,
 				  "%s %s [0x%p:%s] execution.\n",
@@ -212,6 +222,7 @@ acpi_ex_start_trace_method(struct acpi_namespace_node *method_node,
 
 	enabled = acpi_ex_interpreter_trace_enabled(pathname);
 	if (enabled && !acpi_gbl_trace_method_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_gbl_trace_method_object = obj_desc;
 		acpi_gbl_original_dbg_level = acpi_dbg_level;
 		acpi_gbl_original_dbg_layer = acpi_dbg_layer;
@@ -219,14 +230,18 @@ acpi_ex_start_trace_method(struct acpi_namespace_node *method_node,
 		acpi_dbg_layer = ACPI_TRACE_LAYER_ALL;
 
 		if (acpi_gbl_trace_dbg_level) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_dbg_level = acpi_gbl_trace_dbg_level;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (acpi_gbl_trace_dbg_layer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_dbg_layer = acpi_gbl_trace_dbg_layer;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (enabled) {
 		ACPI_TRACE_POINT(ACPI_TRACE_AML_METHOD, TRUE,
 				 obj_desc ? obj_desc->method.aml_start : NULL,
@@ -234,6 +249,7 @@ acpi_ex_start_trace_method(struct acpi_namespace_node *method_node,
 	}
 
 	if (pathname) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(pathname);
 	}
 }
@@ -267,6 +283,7 @@ acpi_ex_stop_trace_method(struct acpi_namespace_node *method_node,
 		pathname = acpi_ns_get_normalized_pathname(method_node, TRUE);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enabled = acpi_ex_interpreter_trace_enabled(NULL);
 
 	if (enabled) {
@@ -281,16 +298,20 @@ acpi_ex_stop_trace_method(struct acpi_namespace_node *method_node,
 
 		/* Disable further tracing if type is one-shot */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (acpi_gbl_trace_flags & ACPI_TRACE_ONESHOT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_gbl_trace_method_name = NULL;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_dbg_level = acpi_gbl_original_dbg_level;
 		acpi_dbg_layer = acpi_gbl_original_dbg_layer;
 		acpi_gbl_trace_method_object = NULL;
 	}
 
 	if (pathname) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(pathname);
 	}
 }
@@ -316,6 +337,7 @@ acpi_ex_start_trace_opcode(union acpi_parse_object *op,
 
 	ACPI_FUNCTION_NAME(ex_start_trace_opcode);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_ex_interpreter_trace_enabled(NULL) &&
 	    (acpi_gbl_trace_flags & ACPI_TRACE_OPCODE)) {
 		ACPI_TRACE_POINT(ACPI_TRACE_AML_OPCODE, TRUE,
@@ -344,6 +366,7 @@ acpi_ex_stop_trace_opcode(union acpi_parse_object *op,
 
 	ACPI_FUNCTION_NAME(ex_stop_trace_opcode);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_ex_interpreter_trace_enabled(NULL) &&
 	    (acpi_gbl_trace_flags & ACPI_TRACE_OPCODE)) {
 		ACPI_TRACE_POINT(ACPI_TRACE_AML_OPCODE, FALSE,
diff --git a/drivers/acpi/acpica/exutils.c b/drivers/acpi/acpica/exutils.c
index 34d6083..037259d 100644
--- a/drivers/acpi/acpica/exutils.c
+++ b/drivers/acpi/acpica/exutils.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: exutils - interpreter/scanner utilities
@@ -91,11 +93,13 @@ void acpi_ex_enter_interpreter(void)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_INTERPRETER);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not acquire AML Interpreter mutex"));
 	}
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Could not acquire AML Namespace mutex"));
 	}
 
@@ -133,10 +137,12 @@ void acpi_ex_exit_interpreter(void)
 
 	status = acpi_ut_release_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Could not release AML Namespace mutex"));
 	}
 	status = acpi_ut_release_mutex(ACPI_MTX_INTERPRETER);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not release AML Interpreter mutex"));
 	}
@@ -169,6 +175,7 @@ u8 acpi_ex_truncate_for32bit_table(union acpi_operand_object *obj_desc)
 	if ((!obj_desc) ||
 	    (ACPI_GET_DESCRIPTOR_TYPE(obj_desc) != ACPI_DESC_TYPE_OPERAND) ||
 	    (obj_desc->common.type != ACPI_TYPE_INTEGER)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
@@ -182,6 +189,7 @@ u8 acpi_ex_truncate_for32bit_table(union acpi_operand_object *obj_desc)
 		return (TRUE);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (FALSE);
 }
 
@@ -208,6 +216,7 @@ void acpi_ex_acquire_global_lock(u32 field_flags)
 	/* Only use the lock if the always_lock bit is set */
 
 	if (!(field_flags & AML_FIELD_LOCK_RULE_MASK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -218,10 +227,12 @@ void acpi_ex_acquire_global_lock(u32 field_flags)
 					      acpi_os_get_thread_id());
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"Could not acquire Global Lock"));
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_VOID;
 }
 
@@ -247,6 +258,7 @@ void acpi_ex_release_global_lock(u32 field_flags)
 	/* Only use the lock if the always_lock bit is set */
 
 	if (!(field_flags & AML_FIELD_LOCK_RULE_MASK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -257,10 +269,12 @@ void acpi_ex_release_global_lock(u32 field_flags)
 
 		/* Report the error, but there isn't much else we can do */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"Could not release Global Lock"));
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_VOID;
 }
 
@@ -288,6 +302,7 @@ static u32 acpi_ex_digits_needed(u64 value, u32 base)
 	/* u64 is unsigned, so we don't worry about a '-' prefix */
 
 	if (value == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_UINT32(1);
 	}
 
@@ -302,6 +317,7 @@ static u32 acpi_ex_digits_needed(u64 value, u32 base)
 		num_digits++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_UINT32(num_digits);
 }
 
@@ -330,6 +346,7 @@ void acpi_ex_eisa_id_to_string(char *out_string, u64 compressed_id)
 	/* The EISAID should be a 32-bit integer */
 
 	if (compressed_id > ACPI_UINT32_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARNING((AE_INFO,
 			      "Expected EISAID is larger than 32 bits: "
 			      "0x%8.8X%8.8X, truncating",
@@ -410,6 +427,7 @@ void acpi_ex_pci_cls_to_string(char *out_string, u8 class_code[3])
 
 	/* All 3 bytes are hexadecimal */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	out_string[0] = acpi_ut_hex_to_ascii_char((u64)class_code[0], 4);
 	out_string[1] = acpi_ut_hex_to_ascii_char((u64)class_code[0], 0);
 	out_string[2] = acpi_ut_hex_to_ascii_char((u64)class_code[1], 4);
@@ -438,6 +456,7 @@ u8 acpi_is_valid_space_id(u8 space_id)
 	    (space_id < ACPI_USER_REGION_BEGIN) &&
 	    (space_id != ACPI_ADR_SPACE_DATA_TABLE) &&
 	    (space_id != ACPI_ADR_SPACE_FIXED_HARDWARE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
diff --git a/drivers/acpi/acpica/hwacpi.c b/drivers/acpi/acpica/hwacpi.c
index fad249e..afa8372 100644
--- a/drivers/acpi/acpica/hwacpi.c
+++ b/drivers/acpi/acpica/hwacpi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: hwacpi - ACPI Hardware Initialization/Mode Interface
@@ -69,6 +71,7 @@ acpi_status acpi_hw_set_mode(u32 mode)
 	/* If the Hardware Reduced flag is set, machine is always in acpi mode */
 
 	if (acpi_gbl_reduced_hardware) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -77,6 +80,7 @@ acpi_status acpi_hw_set_mode(u32 mode)
 	 * system does not support mode transition.
 	 */
 	if (!acpi_gbl_FADT.smi_command) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "No SMI_CMD in FADT, mode transition failed"));
 		return_ACPI_STATUS(AE_NO_HARDWARE_RESPONSE);
@@ -90,6 +94,7 @@ acpi_status acpi_hw_set_mode(u32 mode)
 	 * transitions are not supported.
 	 */
 	if (!acpi_gbl_FADT.acpi_enable && !acpi_gbl_FADT.acpi_disable) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "No ACPI mode transition supported in this system "
 			    "(enable/disable both zero)"));
@@ -120,15 +125,18 @@ acpi_status acpi_hw_set_mode(u32 mode)
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"Could not write ACPI mode change"));
 		return_ACPI_STATUS(status);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -155,6 +163,7 @@ u32 acpi_hw_get_mode(void)
 	/* If the Hardware Reduced flag is set, machine is always in acpi mode */
 
 	if (acpi_gbl_reduced_hardware) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_UINT32(ACPI_SYS_MODE_ACPI);
 	}
 
@@ -163,15 +172,18 @@ u32 acpi_hw_get_mode(void)
 	 * system does not support mode transition.
 	 */
 	if (!acpi_gbl_FADT.smi_command) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_UINT32(ACPI_SYS_MODE_ACPI);
 	}
 
 	status = acpi_read_bit_register(ACPI_BITREG_SCI_ENABLE, &value);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_UINT32(ACPI_SYS_MODE_LEGACY);
 	}
 
 	if (value) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_UINT32(ACPI_SYS_MODE_ACPI);
 	} else {
 		return_UINT32(ACPI_SYS_MODE_LEGACY);
diff --git a/drivers/acpi/acpica/hwgpe.c b/drivers/acpi/acpica/hwgpe.c
index 5eb11b3..bba3ff1 100644
--- a/drivers/acpi/acpica/hwgpe.c
+++ b/drivers/acpi/acpica/hwgpe.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: hwgpe - Low level GPE enable/disable/clear functions
@@ -108,6 +110,7 @@ acpi_hw_low_set_gpe(struct acpi_gpe_event_info *gpe_event_info, u32 action)
 
 	gpe_register_info = gpe_event_info->register_info;
 	if (!gpe_register_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_NOT_EXIST);
 	}
 
@@ -115,6 +118,7 @@ acpi_hw_low_set_gpe(struct acpi_gpe_event_info *gpe_event_info, u32 action)
 
 	status = acpi_hw_read(&enable_mask, &gpe_register_info->enable_address);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -126,7 +130,9 @@ acpi_hw_low_set_gpe(struct acpi_gpe_event_info *gpe_event_info, u32 action)
 
 		/* Only enable if the corresponding enable_mask bit is set */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(register_bit & gpe_register_info->enable_mask)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_BAD_PARAMETER);
 		}
 
@@ -144,6 +150,7 @@ acpi_hw_low_set_gpe(struct acpi_gpe_event_info *gpe_event_info, u32 action)
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Invalid GPE Action, %u", action));
 		return (AE_BAD_PARAMETER);
 	}
@@ -156,6 +163,7 @@ acpi_hw_low_set_gpe(struct acpi_gpe_event_info *gpe_event_info, u32 action)
 		    acpi_hw_write(enable_mask,
 				  &gpe_register_info->enable_address);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (status);
 }
 
@@ -183,6 +191,7 @@ acpi_status acpi_hw_clear_gpe(struct acpi_gpe_event_info *gpe_event_info)
 
 	gpe_register_info = gpe_event_info->register_info;
 	if (!gpe_register_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_NOT_EXIST);
 	}
 
@@ -223,6 +232,7 @@ acpi_hw_get_gpe_status(struct acpi_gpe_event_info *gpe_event_info,
 	ACPI_FUNCTION_ENTRY();
 
 	if (!event_status) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -230,6 +240,7 @@ acpi_hw_get_gpe_status(struct acpi_gpe_event_info *gpe_event_info,
 
 	if (ACPI_GPE_DISPATCH_TYPE(gpe_event_info->flags) !=
 	    ACPI_GPE_DISPATCH_NONE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_event_status |= ACPI_EVENT_FLAG_HAS_HANDLER;
 	}
 
@@ -244,18 +255,21 @@ acpi_hw_get_gpe_status(struct acpi_gpe_event_info *gpe_event_info,
 	/* GPE currently enabled? (enabled for runtime?) */
 
 	if (register_bit & gpe_register_info->enable_for_run) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_event_status |= ACPI_EVENT_FLAG_ENABLED;
 	}
 
 	/* GPE currently masked? (masked for runtime?) */
 
 	if (register_bit & gpe_register_info->mask_for_run) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_event_status |= ACPI_EVENT_FLAG_MASKED;
 	}
 
 	/* GPE enabled for wake? */
 
 	if (register_bit & gpe_register_info->enable_for_wake) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_event_status |= ACPI_EVENT_FLAG_WAKE_ENABLED;
 	}
 
@@ -263,10 +277,12 @@ acpi_hw_get_gpe_status(struct acpi_gpe_event_info *gpe_event_info,
 
 	status = acpi_hw_read(&in_byte, &gpe_register_info->enable_address);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
 	if (register_bit & in_byte) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_event_status |= ACPI_EVENT_FLAG_ENABLE_SET;
 	}
 
@@ -274,10 +290,12 @@ acpi_hw_get_gpe_status(struct acpi_gpe_event_info *gpe_event_info,
 
 	status = acpi_hw_read(&in_byte, &gpe_register_info->status_address);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
 	if (register_bit & in_byte) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_event_status |= ACPI_EVENT_FLAG_STATUS_SET;
 	}
 
@@ -334,6 +352,7 @@ acpi_hw_disable_gpe_block(struct acpi_gpe_xrupt_info *gpe_xrupt_info,
 
 	/* Examine each GPE Register within the block */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < gpe_block->register_count; i++) {
 
 		/* Disable all GPEs in this register */
@@ -371,6 +390,7 @@ acpi_hw_clear_gpe_block(struct acpi_gpe_xrupt_info *gpe_xrupt_info,
 
 	/* Examine each GPE Register within the block */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < gpe_block->register_count; i++) {
 
 		/* Clear status on all GPEs in this register */
@@ -414,6 +434,7 @@ acpi_hw_enable_runtime_gpe_block(struct acpi_gpe_xrupt_info *gpe_xrupt_info,
 
 	/* Examine each GPE Register within the block */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < gpe_block->register_count; i++) {
 		gpe_register_info = &gpe_block->register_info[i];
 		if (!gpe_register_info->enable_for_run) {
@@ -459,6 +480,7 @@ acpi_hw_enable_wakeup_gpe_block(struct acpi_gpe_xrupt_info *gpe_xrupt_info,
 
 	/* Examine each GPE Register within the block */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < gpe_block->register_count; i++) {
 		gpe_register_info = &gpe_block->register_info[i];
 
diff --git a/drivers/acpi/acpica/hwpci.c b/drivers/acpi/acpica/hwpci.c
index 2838199..4f08aa6 100644
--- a/drivers/acpi/acpica/hwpci.c
+++ b/drivers/acpi/acpica/hwpci.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: hwpci - Obtain PCI bus, device, and function numbers
diff --git a/drivers/acpi/acpica/hwregs.c b/drivers/acpi/acpica/hwregs.c
index acb417b..b5d23a7 100644
--- a/drivers/acpi/acpica/hwregs.c
+++ b/drivers/acpi/acpica/hwregs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: hwregs - Read/write access functions for the various ACPI
@@ -105,17 +107,22 @@ acpi_hw_get_access_bit_width(u64 address,
 	if (!reg->bit_offset && reg->bit_width &&
 	    ACPI_IS_POWER_OF_TWO(reg->bit_width) &&
 	    ACPI_IS_ALIGNED(reg->bit_width, 8)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		access_bit_width = reg->bit_width;
 	} else if (reg->access_width) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		access_bit_width = ACPI_ACCESS_BIT_WIDTH(reg->access_width);
 	} else {
 		access_bit_width =
 		    ACPI_ROUND_UP_POWER_OF_TWO_8(reg->bit_offset +
 						 reg->bit_width);
 		if (access_bit_width <= 8) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			access_bit_width = 8;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			while (!ACPI_IS_ALIGNED(address, access_bit_width >> 3)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				access_bit_width >>= 1;
 			}
 		}
@@ -124,6 +131,7 @@ acpi_hw_get_access_bit_width(u64 address,
 	/* Maximum IO port access bit width is 32 */
 
 	if (reg->space_id == ACPI_ADR_SPACE_SYSTEM_IO) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		max_bit_width = 32;
 	}
 
@@ -133,8 +141,10 @@ acpi_hw_get_access_bit_width(u64 address,
 	 * a 32-bit accesses.
 	 */
 	if (access_bit_width < max_bit_width) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (access_bit_width);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (max_bit_width);
 }
 
@@ -164,6 +174,7 @@ acpi_hw_validate_register(struct acpi_generic_address *reg,
 	/* Must have a valid pointer to a GAS structure */
 
 	if (!reg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -174,6 +185,7 @@ acpi_hw_validate_register(struct acpi_generic_address *reg,
 	 */
 	ACPI_MOVE_64_TO_64(address, &reg->address);
 	if (!(*address)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_ADDRESS);
 	}
 
@@ -181,6 +193,7 @@ acpi_hw_validate_register(struct acpi_generic_address *reg,
 
 	if ((reg->space_id != ACPI_ADR_SPACE_SYSTEM_MEMORY) &&
 	    (reg->space_id != ACPI_ADR_SPACE_SYSTEM_IO)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Unsupported address space: 0x%X", reg->space_id));
 		return (AE_SUPPORT);
@@ -189,6 +202,7 @@ acpi_hw_validate_register(struct acpi_generic_address *reg,
 	/* Validate the access_width */
 
 	if (reg->access_width > 4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Unsupported register access width: 0x%X",
 			    reg->access_width));
@@ -202,12 +216,14 @@ acpi_hw_validate_register(struct acpi_generic_address *reg,
 	bit_width =
 	    ACPI_ROUND_UP(reg->bit_offset + reg->bit_width, access_width);
 	if (max_bit_width < bit_width) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARNING((AE_INFO,
 			      "Requested bit width 0x%X is smaller than register bit width 0x%X",
 			      max_bit_width, bit_width));
 		return (AE_SUPPORT);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -246,6 +262,7 @@ acpi_status acpi_hw_read(u32 *value, struct acpi_generic_address *reg)
 
 	status = acpi_hw_validate_register(reg, 32, &address);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -265,6 +282,7 @@ acpi_status acpi_hw_read(u32 *value, struct acpi_generic_address *reg)
 	index = 0;
 	while (bit_width) {
 		if (bit_offset >= access_width) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			value32 = 0;
 			bit_offset -= access_width;
 		} else {
@@ -306,6 +324,7 @@ acpi_status acpi_hw_read(u32 *value, struct acpi_generic_address *reg)
 			  *value, access_width, ACPI_FORMAT_UINT64(address),
 			  acpi_ut_get_region_name(reg->space_id)));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (status);
 }
 
@@ -341,6 +360,7 @@ acpi_status acpi_hw_write(u32 value, struct acpi_generic_address *reg)
 
 	status = acpi_hw_validate_register(reg, 32, &address);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -364,9 +384,11 @@ acpi_status acpi_hw_write(u32 value, struct acpi_generic_address *reg)
 					ACPI_MASK_BITS_ABOVE_32(access_width));
 
 		if (bit_offset >= access_width) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bit_offset -= access_width;
 		} else {
 			if (reg->space_id == ACPI_ADR_SPACE_SYSTEM_MEMORY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				value64 = (u64)value32;
 				status =
 				    acpi_os_write_memory((acpi_physical_address)
@@ -401,6 +423,7 @@ acpi_status acpi_hw_write(u32 value, struct acpi_generic_address *reg)
 			  value, access_width, ACPI_FORMAT_UINT64(address),
 			  acpi_ut_get_region_name(reg->space_id)));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (status);
 }
 
@@ -443,6 +466,7 @@ acpi_status acpi_hw_clear_acpi_status(void)
 
 	/* Clear the GPE Bits in all GPE registers in all GPE blocks */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = acpi_ev_walk_gpe_list(acpi_hw_clear_gpe_block, NULL);
 
 exit:
@@ -466,6 +490,7 @@ struct acpi_bit_register_info *acpi_hw_get_bit_register_info(u32 register_id)
 	ACPI_FUNCTION_ENTRY();
 
 	if (register_id > ACPI_BITREG_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Invalid BitRegister ID: 0x%X",
 			    register_id));
 		return (NULL);
@@ -500,6 +525,7 @@ acpi_status acpi_hw_write_pm1_control(u32 pm1a_control, u32 pm1b_control)
 	status =
 	    acpi_hw_write(pm1a_control, &acpi_gbl_FADT.xpm1a_control_block);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -533,6 +559,7 @@ acpi_status acpi_hw_register_read(u32 register_id, u32 *return_value)
 	switch (register_id) {
 	case ACPI_REGISTER_PM1_STATUS:	/* PM1 A/B: 16-bit access each */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_hw_read_multiple(&value,
 					       &acpi_gbl_xpm1a_status,
 					       &acpi_gbl_xpm1b_status);
@@ -569,6 +596,7 @@ acpi_status acpi_hw_register_read(u32 register_id, u32 *return_value)
 
 	case ACPI_REGISTER_PM_TIMER:	/* 32-bit access */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_hw_read(&value, &acpi_gbl_FADT.xpm_timer_block);
 		break;
 
@@ -580,6 +608,7 @@ acpi_status acpi_hw_register_read(u32 register_id, u32 *return_value)
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Unknown Register ID: 0x%X", register_id));
 		status = AE_BAD_PARAMETER;
 		break;
@@ -667,6 +696,7 @@ acpi_status acpi_hw_register_write(u32 register_id, u32 value)
 
 		/* Insert the bits to be preserved */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_INSERT_BITS(value, ACPI_PM1_CONTROL_PRESERVED_BITS,
 				 read_value);
 
@@ -693,6 +723,7 @@ acpi_status acpi_hw_register_write(u32 register_id, u32 value)
 
 		/* Insert the bits to be preserved */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_INSERT_BITS(value, ACPI_PM2_CONTROL_PRESERVED_BITS,
 				 read_value);
 
@@ -702,6 +733,7 @@ acpi_status acpi_hw_register_write(u32 register_id, u32 value)
 
 	case ACPI_REGISTER_PM_TIMER:	/* 32-bit access */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_hw_write(value, &acpi_gbl_FADT.xpm_timer_block);
 		break;
 
@@ -715,6 +747,7 @@ acpi_status acpi_hw_register_write(u32 register_id, u32 value)
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Unknown Register ID: 0x%X", register_id));
 		status = AE_BAD_PARAMETER;
 		break;
@@ -751,14 +784,17 @@ acpi_hw_read_multiple(u32 *value,
 
 	status = acpi_hw_read(&value_a, register_a);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
 	/* Second register is optional */
 
 	if (register_b->address) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_hw_read(&value_b, register_b);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (status);
 		}
 	}
@@ -802,6 +838,7 @@ acpi_hw_write_multiple(u32 value,
 
 	status = acpi_hw_write(value, register_a);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -818,9 +855,11 @@ acpi_hw_write_multiple(u32 value,
 	 * and writes have no side effects"
 	 */
 	if (register_b->address) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_hw_write(value, register_b);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (status);
 }
 
diff --git a/drivers/acpi/acpica/hwvalid.c b/drivers/acpi/acpica/hwvalid.c
index 3094cec..9e5c935 100644
--- a/drivers/acpi/acpica/hwvalid.c
+++ b/drivers/acpi/acpica/hwvalid.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: hwvalid - I/O request validation
@@ -133,11 +135,13 @@ acpi_hw_validate_io_request(acpi_io_address address, u32 bit_width)
 	/* Supported widths are 8/16/32 */
 
 	if ((bit_width != 8) && (bit_width != 16) && (bit_width != 32)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Bad BitWidth parameter: %8.8X", bit_width));
 		return (AE_BAD_PARAMETER);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	port_info = acpi_protected_ports;
 	byte_width = ACPI_DIV_8(bit_width);
 	last_address = address + byte_width - 1;
@@ -150,6 +154,7 @@ acpi_hw_validate_io_request(acpi_io_address address, u32 bit_width)
 	/* Maximum 16-bit address in I/O space */
 
 	if (last_address > ACPI_UINT16_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Illegal I/O port address/length above 64K: %8.8X%8.8X/0x%X",
 			    ACPI_FORMAT_UINT64(address), byte_width));
@@ -159,6 +164,7 @@ acpi_hw_validate_io_request(acpi_io_address address, u32 bit_width)
 	/* Exit if requested address is not within the protected port table */
 
 	if (address > acpi_protected_ports[ACPI_PORT_INFO_ENTRIES - 1].end) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -179,6 +185,7 @@ acpi_hw_validate_io_request(acpi_io_address address, u32 bit_width)
 
 			/* Port illegality may depend on the _OSI calls made by the BIOS */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (acpi_gbl_osi_data >= port_info->osi_dependency) {
 				ACPI_DEBUG_PRINT((ACPI_DB_IO,
 						  "Denied AML access to port 0x%8.8X%8.8X/%X (%s 0x%.4X-0x%.4X)",
@@ -187,6 +194,7 @@ acpi_hw_validate_io_request(acpi_io_address address, u32 bit_width)
 						  port_info->start,
 						  port_info->end));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(AE_AML_ILLEGAL_ADDRESS);
 			}
 		}
@@ -198,6 +206,7 @@ acpi_hw_validate_io_request(acpi_io_address address, u32 bit_width)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -226,6 +235,7 @@ acpi_status acpi_hw_read_port(acpi_io_address address, u32 *value, u32 width)
 	/* Truncate address to 16 bits if requested */
 
 	if (acpi_gbl_truncate_io_addresses) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		address &= ACPI_UINT16_MAX;
 	}
 
@@ -237,7 +247,9 @@ acpi_status acpi_hw_read_port(acpi_io_address address, u32 *value, u32 width)
 		return (status);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (status != AE_AML_ILLEGAL_ADDRESS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -250,18 +262,24 @@ acpi_status acpi_hw_read_port(acpi_io_address address, u32 *value, u32 width)
 
 		/* Validate and read one byte */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (acpi_hw_validate_io_request(address, 8) == AE_OK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_os_read_port(address, &one_byte, 8);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*value |= (one_byte << i);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		address++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -289,6 +307,7 @@ acpi_status acpi_hw_write_port(acpi_io_address address, u32 value, u32 width)
 	/* Truncate address to 16 bits if requested */
 
 	if (acpi_gbl_truncate_io_addresses) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		address &= ACPI_UINT16_MAX;
 	}
 
@@ -300,7 +319,9 @@ acpi_status acpi_hw_write_port(acpi_io_address address, u32 value, u32 width)
 		return (status);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (status != AE_AML_ILLEGAL_ADDRESS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -313,16 +334,20 @@ acpi_status acpi_hw_write_port(acpi_io_address address, u32 value, u32 width)
 
 		/* Validate and write one byte */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (acpi_hw_validate_io_request(address, 8) == AE_OK) {
 			status =
 			    acpi_os_write_port(address, (value >> i) & 0xFF, 8);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		address++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
diff --git a/drivers/acpi/acpica/hwxface.c b/drivers/acpi/acpica/hwxface.c
index 34684ae..5677952 100644
--- a/drivers/acpi/acpica/hwxface.c
+++ b/drivers/acpi/acpica/hwxface.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: hwxface - Public ACPICA hardware interfaces
@@ -134,6 +136,7 @@ acpi_status acpi_read(u64 *return_value, struct acpi_generic_address *reg)
 	ACPI_FUNCTION_NAME(acpi_read);
 
 	if (!return_value) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -223,6 +226,7 @@ acpi_status acpi_write(u64 value, struct acpi_generic_address *reg)
 
 	status = acpi_hw_validate_register(reg, 64, &address);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -309,6 +313,7 @@ acpi_status acpi_read_bit_register(u32 register_id, u32 *return_value)
 
 	bit_reg_info = acpi_hw_get_bit_register_info(register_id);
 	if (!bit_reg_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -317,6 +322,7 @@ acpi_status acpi_read_bit_register(u32 register_id, u32 *return_value)
 	status = acpi_hw_register_read(bit_reg_info->parent_register,
 				       &register_value);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -370,6 +376,7 @@ acpi_status acpi_write_bit_register(u32 register_id, u32 value)
 
 	bit_reg_info = acpi_hw_get_bit_register_info(register_id);
 	if (!bit_reg_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -489,6 +496,7 @@ acpi_get_sleep_type_data(u8 sleep_state, u8 *sleep_type_a, u8 *sleep_type_b)
 	/* Validate parameters */
 
 	if ((sleep_state > ACPI_S_STATES_MAX) || !sleep_type_a || !sleep_type_b) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -496,6 +504,7 @@ acpi_get_sleep_type_data(u8 sleep_state, u8 *sleep_type_a, u8 *sleep_type_b)
 
 	info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info));
 	if (!info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -507,6 +516,7 @@ acpi_get_sleep_type_data(u8 sleep_state, u8 *sleep_type_a, u8 *sleep_type_b)
 
 	status = acpi_ns_evaluate(info);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status == AE_NOT_FOUND) {
 
 			/* The _Sx states are optional, ignore NOT_FOUND */
@@ -520,6 +530,7 @@ acpi_get_sleep_type_data(u8 sleep_state, u8 *sleep_type_a, u8 *sleep_type_b)
 	/* Must have a return object */
 
 	if (!info->return_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "No Sleep State object returned from [%s]",
 			    info->relative_pathname));
 		status = AE_AML_NO_RETURN_VALUE;
@@ -529,6 +540,7 @@ acpi_get_sleep_type_data(u8 sleep_state, u8 *sleep_type_a, u8 *sleep_type_b)
 	/* Return object must be of type Package */
 
 	if (info->return_object->common.type != ACPI_TYPE_PACKAGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Sleep State return object is not a Package"));
 		status = AE_AML_OPERAND_TYPE;
@@ -544,18 +556,22 @@ acpi_get_sleep_type_data(u8 sleep_state, u8 *sleep_type_a, u8 *sleep_type_b)
 	switch (info->return_object->package.count) {
 	case 0:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_AML_PACKAGE_LIMIT;
 		break;
 
 	case 1:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (elements[0]->common.type != ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_AML_OPERAND_TYPE;
 			break;
 		}
 
 		/* A valid _Sx_ package with one integer */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*sleep_type_a = (u8)elements[0]->integer.value;
 		*sleep_type_b = (u8)(elements[0]->integer.value >> 8);
 		break;
@@ -565,6 +581,7 @@ acpi_get_sleep_type_data(u8 sleep_state, u8 *sleep_type_a, u8 *sleep_type_b)
 
 		if ((elements[0]->common.type != ACPI_TYPE_INTEGER) ||
 		    (elements[1]->common.type != ACPI_TYPE_INTEGER)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_AML_OPERAND_TYPE;
 			break;
 		}
@@ -581,6 +598,7 @@ acpi_get_sleep_type_data(u8 sleep_state, u8 *sleep_type_a, u8 *sleep_type_b)
 
 warning_cleanup:
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"While evaluating Sleep State [%s]",
 				info->relative_pathname));
diff --git a/drivers/acpi/acpica/nsaccess.c b/drivers/acpi/acpica/nsaccess.c
index f2733f5..0cb1801 100644
--- a/drivers/acpi/acpica/nsaccess.c
+++ b/drivers/acpi/acpica/nsaccess.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: nsaccess - Top-level functions for accessing ACPI namespace
@@ -79,6 +81,7 @@ acpi_status acpi_ns_root_initialize(void)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -87,6 +90,7 @@ acpi_status acpi_ns_root_initialize(void)
 	 * that acpi_ns_root_initialize() has already been called; just return.
 	 */
 	if (acpi_gbl_root_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_OK;
 		goto unlock_and_exit;
 	}
@@ -116,6 +120,7 @@ acpi_status acpi_ns_root_initialize(void)
 				   init_val->type, ACPI_IMODE_LOAD_PASS2,
 				   ACPI_NS_NO_UPSEARCH, NULL, &new_node);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status,
 					"Could not create predefined name %s",
 					init_val->name));
@@ -129,6 +134,7 @@ acpi_status acpi_ns_root_initialize(void)
 		if (init_val->val) {
 			status = acpi_os_predefined_override(init_val, &val);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "Could not override predefined %s",
 					    init_val->name));
@@ -145,6 +151,7 @@ acpi_status acpi_ns_root_initialize(void)
 			obj_desc =
 			    acpi_ut_create_internal_object(init_val->type);
 			if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_NO_MEMORY;
 				goto unlock_and_exit;
 			}
@@ -202,6 +209,7 @@ acpi_status acpi_ns_root_initialize(void)
 				    acpi_os_create_mutex(&obj_desc->mutex.
 							 os_mutex);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					acpi_ut_remove_reference(obj_desc);
 					goto unlock_and_exit;
 				}
@@ -217,6 +225,7 @@ acpi_status acpi_ns_root_initialize(void)
 					    acpi_os_create_semaphore(1, 0,
 								     &acpi_gbl_global_lock_semaphore);
 					if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						acpi_ut_remove_reference
 						    (obj_desc);
 						goto unlock_and_exit;
@@ -226,6 +235,7 @@ acpi_status acpi_ns_root_initialize(void)
 
 			default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "Unsupported initial type value 0x%X",
 					    init_val->type));
@@ -255,6 +265,7 @@ acpi_status acpi_ns_root_initialize(void)
 					  &acpi_gbl_fadt_gpe_device);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -307,6 +318,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 	ACPI_FUNCTION_TRACE(ns_lookup);
 
 	if (!return_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -317,6 +329,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 	acpi_gbl_ns_lookup_count++;
 
 	if (!acpi_gbl_root_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_NAMESPACE);
 	}
 
@@ -327,11 +340,14 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 				  "Null scope prefix, using root node (%p)\n",
 				  acpi_gbl_root_node));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prefix_node = acpi_gbl_root_node;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prefix_node = scope_info->scope.node;
 		if (ACPI_GET_DESCRIPTOR_TYPE(prefix_node) !=
 		    ACPI_DESC_TYPE_NAMED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO, "%p is not a namespace node [%s]",
 				    prefix_node,
 				    acpi_ut_get_descriptor_name(prefix_node)));
@@ -353,6 +369,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 
 	/* Save type. TBD: may be no longer necessary */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	type_to_check_for = type;
 
 	/*
@@ -362,6 +379,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 
 		/* A Null name_path is allowed and refers to the root */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		num_segments = 0;
 		this_node = acpi_gbl_root_node;
 		path = "";
@@ -415,6 +433,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 
 				/* Name is fully qualified, no search rules apply */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				search_parent_flag = ACPI_NS_NO_UPSEARCH;
 
 				/*
@@ -437,6 +456,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 					    (ACPI_UINT32_MAX, pathname, NULL,
 					     &external_path);
 					if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						ACPI_ERROR((AE_INFO,
 							    "%s: Path has too many parent prefixes (^)",
 							    external_path));
@@ -444,10 +464,12 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 						ACPI_FREE(external_path);
 					}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(AE_NOT_FOUND);
 				}
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (search_parent_flag == ACPI_NS_NO_UPSEARCH) {
 				ACPI_DEBUG_PRINT((ACPI_DB_NAMES,
 						  "Search scope is [%4.4s], path has %u carat(s)\n",
@@ -487,6 +509,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 
 			/* More than one name_seg, search rules do not apply */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			search_parent_flag = ACPI_NS_NO_UPSEARCH;
 
 			/* Two segments, point to first name segment */
@@ -503,6 +526,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 
 			/* More than one name_seg, search rules do not apply */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			search_parent_flag = ACPI_NS_NO_UPSEARCH;
 
 			/* Extract segment count, point to first name segment */
@@ -548,6 +572,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 
 			/* This is the last segment, enable typechecking */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			this_search_type = type;
 
 			/*
@@ -568,6 +593,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 			/* Set override flag according to caller */
 
 			if (flags & ACPI_NS_OVERRIDE_IF_FOUND) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				local_flags |= ACPI_NS_OVERRIDE_IF_FOUND;
 			}
 		}
@@ -584,6 +610,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 					     this_search_type, local_flags,
 					     &this_node);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (status == AE_NOT_FOUND) {
 
 				/* Name not found in ACPI namespace */
@@ -632,13 +659,17 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 			 * remaining segments).
 			 */
 			if (this_node->type == ACPI_TYPE_LOCAL_ALIAS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!this_node->object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(AE_NOT_EXIST);
 				}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (acpi_ns_opens_scope
 				    (((struct acpi_namespace_node *)
 				      this_node->object)->type)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					this_node =
 					    (struct acpi_namespace_node *)
 					    this_node->object;
@@ -677,6 +708,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 
 				/* Complain about a type mismatch */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_WARNING((AE_INFO,
 					      "NsLookup: Type mismatch on %4.4s (%s), searching for (%s)",
 					      ACPI_CAST_PTR(char, &simple_name),
@@ -714,6 +746,7 @@ acpi_ns_lookup(union acpi_generic_state *scope_info,
 			    acpi_ds_scope_stack_push(this_node, type,
 						     walk_state);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 		}
diff --git a/drivers/acpi/acpica/nsalloc.c b/drivers/acpi/acpica/nsalloc.c
index 8ba5b32..9ed5c88 100644
--- a/drivers/acpi/acpica/nsalloc.c
+++ b/drivers/acpi/acpica/nsalloc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: nsalloc - Namespace allocation and deletion utilities
@@ -70,6 +72,7 @@ struct acpi_namespace_node *acpi_ns_create_node(u32 name)
 
 	node = acpi_os_acquire_object(acpi_gbl_namespace_cache);
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_PTR(NULL);
 	}
 
@@ -125,10 +128,13 @@ void acpi_ns_delete_node(struct acpi_namespace_node *node)
 
 		/* Invoke the attached data deletion handler if present */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (obj_desc->data.handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			obj_desc->data.handler(node, obj_desc->data.pointer);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next_desc = obj_desc->common.next_object;
 		acpi_ut_remove_reference(obj_desc);
 		obj_desc = next_desc;
@@ -137,6 +143,7 @@ void acpi_ns_delete_node(struct acpi_namespace_node *node)
 	/* Special case for the statically allocated root node */
 
 	if (node == acpi_gbl_root_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -176,6 +183,7 @@ void acpi_ns_remove_node(struct acpi_namespace_node *node)
 
 	/* Find the node that is the previous peer in the parent's child list */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (next_node != node) {
 		prev_node = next_node;
 		next_node = next_node->peer;
@@ -261,6 +269,7 @@ void acpi_ns_install_node(struct acpi_walk_state *walk_state, struct acpi_namesp
 		/* Add node to the end of the peer list */
 
 		while (child_node->peer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			child_node = child_node->peer;
 		}
 
@@ -304,6 +313,7 @@ void acpi_ns_delete_children(struct acpi_namespace_node *parent_node)
 	ACPI_FUNCTION_TRACE_PTR(ns_delete_children, parent_node);
 
 	if (!parent_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -315,6 +325,7 @@ void acpi_ns_delete_children(struct acpi_namespace_node *parent_node)
 		/* Grandchildren should have all been deleted already */
 
 		if (next_node->child) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO, "Found a grandchild! P=%p C=%p",
 				    parent_node, next_node));
 		}
@@ -356,6 +367,7 @@ void acpi_ns_delete_namespace_subtree(struct acpi_namespace_node *parent_node)
 	ACPI_FUNCTION_TRACE(ns_delete_namespace_subtree);
 
 	if (!parent_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -363,6 +375,7 @@ void acpi_ns_delete_namespace_subtree(struct acpi_namespace_node *parent_node)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -446,6 +459,7 @@ void acpi_ns_delete_namespace_by_owner(acpi_owner_id owner_id)
 	ACPI_FUNCTION_TRACE_U32(ns_delete_namespace_by_owner, owner_id);
 
 	if (owner_id == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
diff --git a/drivers/acpi/acpica/nsarguments.c b/drivers/acpi/acpica/nsarguments.c
index 67b7370..897567d 100644
--- a/drivers/acpi/acpica/nsarguments.c
+++ b/drivers/acpi/acpica/nsarguments.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: nsarguments - Validation of args for ACPI predefined methods
@@ -77,6 +79,7 @@ void acpi_ns_check_argument_types(struct acpi_evaluate_info *info)
 	 * to suppress repetitive messages.
 	 */
 	if (!info->predefined || (info->node->flags & ANOBJ_EVALUATED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -90,6 +93,7 @@ void acpi_ns_check_argument_types(struct acpi_evaluate_info *info)
 		user_arg_type = info->parameters[i]->common.type;
 
 		if (user_arg_type != arg_type) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname,
 					      ACPI_WARN_ALWAYS,
 					      "Argument #%u type mismatch - "
@@ -131,6 +135,7 @@ acpi_ns_check_acpi_compliance(char *pathname,
 	u32 required_param_count;
 
 	if (!predefined || (node->flags & ANOBJ_EVALUATED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -148,6 +153,7 @@ acpi_ns_check_acpi_compliance(char *pathname,
 
 			/* Object requires args, must be implemented as a method */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_BIOS_ERROR_PREDEFINED((AE_INFO, pathname,
 						    ACPI_WARN_ALWAYS,
 						    "Object (%s) must be a control method with %u arguments",
@@ -159,6 +165,7 @@ acpi_ns_check_acpi_compliance(char *pathname,
 
 			/* Object requires no args and no return value, must be a method */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_BIOS_ERROR_PREDEFINED((AE_INFO, pathname,
 						    ACPI_WARN_ALWAYS,
 						    "Object (%s) must be a control method "
@@ -167,6 +174,7 @@ acpi_ns_check_acpi_compliance(char *pathname,
 									  type)));
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -183,6 +191,7 @@ acpi_ns_check_acpi_compliance(char *pathname,
 	aml_param_count = node->object->method.param_count;
 
 	if (aml_param_count < required_param_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_BIOS_ERROR_PREDEFINED((AE_INFO, pathname, ACPI_WARN_ALWAYS,
 					    "Insufficient arguments - "
 					    "ASL declared %u, ACPI requires %u",
@@ -191,6 +200,7 @@ acpi_ns_check_acpi_compliance(char *pathname,
 	} else if ((aml_param_count > required_param_count)
 		   && !(predefined->info.
 			argument_list & ARG_COUNT_IS_MINIMUM)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_BIOS_ERROR_PREDEFINED((AE_INFO, pathname, ACPI_WARN_ALWAYS,
 					    "Excess arguments - "
 					    "ASL declared %u, ACPI requires %u",
@@ -225,6 +235,7 @@ acpi_ns_check_argument_count(char *pathname,
 	u32 required_param_count;
 
 	if (node->flags & ANOBJ_EVALUATED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
diff --git a/drivers/acpi/acpica/nsconvert.c b/drivers/acpi/acpica/nsconvert.c
index e4a7da8..c5069c6 100644
--- a/drivers/acpi/acpica/nsconvert.c
+++ b/drivers/acpi/acpica/nsconvert.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: nsconvert - Object conversions for objects returned by
@@ -78,6 +80,7 @@ acpi_ns_convert_to_integer(union acpi_operand_object *original_object,
 
 		/* String-to-Integer conversion */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ut_strtoul64(original_object->string.pointer,
 					   acpi_gbl_integer_byte_width, &value);
 		if (ACPI_FAILURE(status)) {
@@ -328,6 +331,7 @@ acpi_ns_convert_to_unicode(struct acpi_namespace_node *scope,
 	u32 i;
 
 	if (!original_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -406,7 +410,9 @@ acpi_ns_convert_to_resource(struct acpi_namespace_node *scope,
 
 			/* We can only repair an Integer==0 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (original_object->integer.value) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (AE_AML_OPERAND_TYPE);
 			}
 			break;
@@ -425,17 +431,21 @@ acpi_ns_convert_to_resource(struct acpi_namespace_node *scope,
 		case ACPI_TYPE_STRING:
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_AML_OPERAND_TYPE);
 		}
 	}
 
 	/* Create the new buffer object for the resource descriptor */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	new_object = acpi_ut_create_buffer_object(2);
 	if (!new_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_NO_MEMORY);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	buffer = ACPI_CAST_PTR(u8, new_object->buffer.pointer);
 
 	/* Initialize the Buffer with a single end_tag descriptor */
@@ -480,6 +490,7 @@ acpi_ns_convert_to_reference(struct acpi_namespace_node *scope,
 	status =
 	    acpi_ns_internalize_name(original_object->string.pointer, &name);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/nseval.c b/drivers/acpi/acpica/nseval.c
index d22167c..00f7b67 100644
--- a/drivers/acpi/acpica/nseval.c
+++ b/drivers/acpi/acpica/nseval.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: nseval - Object evaluation, includes control method execution
@@ -88,6 +90,7 @@ acpi_status acpi_ns_evaluate(struct acpi_evaluate_info *info)
 	ACPI_FUNCTION_TRACE(ns_evaluate);
 
 	if (!info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -104,6 +107,7 @@ acpi_status acpi_ns_evaluate(struct acpi_evaluate_info *info)
 		    acpi_ns_get_node(info->prefix_node, info->relative_pathname,
 				     ACPI_NS_NO_UPSEARCH, &info->node);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	}
@@ -113,6 +117,7 @@ acpi_status acpi_ns_evaluate(struct acpi_evaluate_info *info)
 	 * proper scoping context will be established before execution.
 	 */
 	if (acpi_ns_get_type(info->node) == ACPI_TYPE_LOCAL_METHOD_ALIAS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->node =
 		    ACPI_CAST_PTR(struct acpi_namespace_node,
 				  info->node->object);
@@ -137,6 +142,7 @@ acpi_status acpi_ns_evaluate(struct acpi_evaluate_info *info)
 
 	info->full_pathname = acpi_ns_get_normalized_pathname(info->node, TRUE);
 	if (!info->full_pathname) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -151,6 +157,7 @@ acpi_status acpi_ns_evaluate(struct acpi_evaluate_info *info)
 		/* Warn on impossible argument count */
 
 		if (info->param_count > ACPI_METHOD_NUM_ARGS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname,
 					      ACPI_WARN_ALWAYS,
 					      "Excess arguments (%u) - using only %u",
@@ -213,6 +220,7 @@ acpi_status acpi_ns_evaluate(struct acpi_evaluate_info *info)
 		/* Verify that there is a method object associated with this node */
 
 		if (!info->obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "%s: Method has no attached sub-object",
 				    info->full_pathname));
@@ -274,6 +282,7 @@ acpi_status acpi_ns_evaluate(struct acpi_evaluate_info *info)
 		acpi_ex_exit_interpreter();
 
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			info->return_object = NULL;
 			goto cleanup;
 		}
@@ -283,6 +292,7 @@ acpi_status acpi_ns_evaluate(struct acpi_evaluate_info *info)
 				  acpi_ut_get_object_type_name(info->
 							       return_object)));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_CTRL_RETURN_VALUE;	/* Always has a "return value" */
 		break;
 	}
@@ -307,6 +317,7 @@ acpi_status acpi_ns_evaluate(struct acpi_evaluate_info *info)
 
 		/* Map AE_CTRL_RETURN_VALUE to AE_OK, we are done with it */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_OK;
 	}
 
@@ -351,19 +362,24 @@ void acpi_ns_exec_module_code_list(void)
 
 	next = acpi_gbl_module_code_list;
 	if (!next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
 	/* Allocate the evaluation information block */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	info = ACPI_ALLOCATE(sizeof(struct acpi_evaluate_info));
 	if (!info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
 	/* Walk the list, executing each "method" */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prev = next;
 		next = next->method.mutex;
 
@@ -378,6 +394,7 @@ void acpi_ns_exec_module_code_list(void)
 		acpi_ut_remove_reference(prev);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_INFO(("Executed %u blocks of module-level executable AML code",
 		   method_count));
 
diff --git a/drivers/acpi/acpica/nsinit.c b/drivers/acpi/acpica/nsinit.c
index 9c62979..89782ef 100644
--- a/drivers/acpi/acpica/nsinit.c
+++ b/drivers/acpi/acpica/nsinit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: nsinit - namespace initialization
@@ -101,6 +103,7 @@ acpi_status acpi_ns_initialize_objects(void)
 				     ACPI_UINT32_MAX, acpi_ns_init_one_object,
 				     NULL, &info, NULL);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status, "During WalkNamespace"));
 	}
 
@@ -150,6 +153,7 @@ acpi_status acpi_ns_initialize_devices(u32 flags)
 
 		/* Init counters */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info.device_count = 0;
 		info.num_STA = 0;
 		info.num_INI = 0;
@@ -173,6 +177,7 @@ acpi_status acpi_ns_initialize_devices(u32 flags)
 		info.evaluate_info =
 		    ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info));
 		if (!info.evaluate_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto error_exit;
 		}
@@ -189,6 +194,7 @@ acpi_status acpi_ns_initialize_devices(u32 flags)
 
 		status = acpi_ns_evaluate(info.evaluate_info);
 		if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			info.num_INI++;
 		}
 
@@ -209,6 +215,7 @@ acpi_status acpi_ns_initialize_devices(u32 flags)
 
 			status = acpi_ns_evaluate(info.evaluate_info);
 			if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				info.num_INI++;
 			}
 		}
@@ -252,6 +259,7 @@ acpi_status acpi_ns_initialize_devices(u32 flags)
 		 * I/O addresses to 16 bits -- for Windows compatibility.
 		 */
 		if (acpi_gbl_osi_data >= ACPI_OSI_WIN_2000) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_gbl_truncate_io_addresses = TRUE;
 		}
 
@@ -267,6 +275,7 @@ acpi_status acpi_ns_initialize_devices(u32 flags)
 				      info.device_count));
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 
 error_exit:
@@ -315,6 +324,7 @@ acpi_ns_init_one_object(acpi_handle obj_handle,
 	type = acpi_ns_get_type(obj_handle);
 	obj_desc = acpi_ns_get_attached_object(node);
 	if (!obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -328,11 +338,13 @@ acpi_ns_init_one_object(acpi_handle obj_handle,
 
 	case ACPI_TYPE_BUFFER_FIELD:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->field_count++;
 		break;
 
 	case ACPI_TYPE_LOCAL_BANK_FIELD:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->field_count++;
 		break;
 
@@ -350,12 +362,14 @@ acpi_ns_init_one_object(acpi_handle obj_handle,
 
 		/* No init required, just exit now */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
 	/* If the object is already initialized, nothing else to do */
 
 	if (obj_desc->common.flags & AOPOBJ_DATA_VALID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -376,12 +390,14 @@ acpi_ns_init_one_object(acpi_handle obj_handle,
 
 	case ACPI_TYPE_BUFFER_FIELD:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->field_init++;
 		status = acpi_ds_get_buffer_field_arguments(obj_desc);
 		break;
 
 	case ACPI_TYPE_LOCAL_BANK_FIELD:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->field_init++;
 		status = acpi_ds_get_bank_field_arguments(obj_desc);
 		break;
@@ -420,6 +436,7 @@ acpi_ns_init_one_object(acpi_handle obj_handle,
 	}
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"Could not execute arguments for [%4.4s] (%s)",
 				acpi_ut_get_node_name(node),
@@ -472,6 +489,7 @@ acpi_ns_find_ini_methods(acpi_handle obj_handle,
 	/* We are only looking for methods named _INI */
 
 	if (!ACPI_COMPARE_NAME(node->name.ascii, METHOD_NAME__INI)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -487,7 +505,9 @@ acpi_ns_find_ini_methods(acpi_handle obj_handle,
 
 		/* Mark parent and bubble up the INI present flag to the root */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (parent_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			parent_node->flags |= ANOBJ_SUBTREE_HAS_INI;
 			parent_node = parent_node->parent;
 		}
@@ -498,6 +518,7 @@ acpi_ns_find_ini_methods(acpi_handle obj_handle,
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -534,6 +555,7 @@ acpi_ns_init_one_device(acpi_handle obj_handle,
 	if ((device_node->type != ACPI_TYPE_DEVICE) &&
 	    (device_node->type != ACPI_TYPE_PROCESSOR) &&
 	    (device_node->type != ACPI_TYPE_THERMAL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -545,6 +567,7 @@ acpi_ns_init_one_device(acpi_handle obj_handle,
 	 * can exit now and stop traversing this entire subtree.
 	 */
 	if (!(device_node->flags & ANOBJ_SUBTREE_HAS_INI)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_CTRL_DEPTH);
 	}
 
@@ -562,11 +585,13 @@ acpi_ns_init_one_device(acpi_handle obj_handle,
 	ACPI_DEBUG_EXEC(acpi_ut_display_init_pathname
 			(ACPI_TYPE_METHOD, device_node, METHOD_NAME__STA));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = acpi_ut_execute_STA(device_node, &flags);
 	if (ACPI_FAILURE(status)) {
 
 		/* Ignore error and move on to next device */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -581,6 +606,7 @@ acpi_ns_init_one_device(acpi_handle obj_handle,
 	 * other words, the device is present, ..., and functioning)"
 	 */
 	if (flags != ACPI_UINT32_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		walk_info->num_STA++;
 	}
 
@@ -594,6 +620,7 @@ acpi_ns_init_one_device(acpi_handle obj_handle,
 
 		/* Device is not present, we must examine the Functioning bit */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (flags & ACPI_STA_DEVICE_FUNCTIONING) {
 			/*
 			 * Device is not present but is "functioning". In this case,
@@ -640,6 +667,7 @@ acpi_ns_init_one_device(acpi_handle obj_handle,
 				(ACPI_TYPE_METHOD, device_node,
 				 METHOD_NAME__INI));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(info, 0, sizeof(struct acpi_evaluate_info));
 		info->prefix_node = device_node;
 		info->relative_pathname = METHOD_NAME__INI;
@@ -648,6 +676,7 @@ acpi_ns_init_one_device(acpi_handle obj_handle,
 
 		status = acpi_ns_evaluate(info);
 		if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			walk_info->num_INI++;
 		}
 #ifdef ACPI_DEBUG_OUTPUT
@@ -668,6 +697,7 @@ acpi_ns_init_one_device(acpi_handle obj_handle,
 
 	/* Ignore errors from above */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = AE_OK;
 
 	/*
@@ -679,5 +709,6 @@ acpi_ns_init_one_device(acpi_handle obj_handle,
 		    acpi_gbl_init_handler(device_node, ACPI_INIT_DEVICE_INI);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
diff --git a/drivers/acpi/acpica/nsload.c b/drivers/acpi/acpica/nsload.c
index d2915e1..1ef80ef 100644
--- a/drivers/acpi/acpica/nsload.c
+++ b/drivers/acpi/acpica/nsload.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: nsload - namespace loading/expanding/contracting procedures
@@ -82,6 +84,7 @@ acpi_ns_load_table(u32 table_index, struct acpi_namespace_node *node)
 	/* If table already loaded into namespace, just return */
 
 	if (acpi_tb_is_table_loaded(table_index)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_ALREADY_EXISTS;
 		goto unlock;
 	}
@@ -125,6 +128,7 @@ acpi_ns_load_table(u32 table_index, struct acpi_namespace_node *node)
 
 unlock:
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -159,9 +163,11 @@ acpi_ns_load_table(u32 table_index, struct acpi_namespace_node *node)
 	 */
 	if (!acpi_gbl_parse_table_as_term_list
 	    && !acpi_gbl_group_module_level_code) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ns_exec_module_code_list();
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
diff --git a/drivers/acpi/acpica/nsnames.c b/drivers/acpi/acpica/nsnames.c
index a410760..f8ed9b5 100644
--- a/drivers/acpi/acpica/nsnames.c
+++ b/drivers/acpi/acpica/nsnames.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: nsnames - Name manipulation and search
@@ -92,6 +94,7 @@ acpi_size acpi_ns_get_pathname_length(struct acpi_namespace_node *node)
 	/* Validate the Node */
 
 	if (ACPI_GET_DESCRIPTOR_TYPE(node) != ACPI_DESC_TYPE_NAMED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Invalid/cached reference target node: %p, descriptor type %d",
 			    node, ACPI_GET_DESCRIPTOR_TYPE(node)));
@@ -127,6 +130,7 @@ acpi_ns_handle_to_name(acpi_handle target_handle, struct acpi_buffer *buffer)
 
 	node = acpi_ns_validate_handle(target_handle);
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -134,6 +138,7 @@ acpi_ns_handle_to_name(acpi_handle target_handle, struct acpi_buffer *buffer)
 
 	status = acpi_ut_initialize_buffer(buffer, ACPI_PATH_SEGMENT_LENGTH);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -175,6 +180,7 @@ acpi_ns_handle_to_pathname(acpi_handle target_handle,
 
 	node = acpi_ns_validate_handle(target_handle);
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -183,6 +189,7 @@ acpi_ns_handle_to_pathname(acpi_handle target_handle,
 	required_size =
 	    acpi_ns_build_normalized_path(node, NULL, 0, no_trailing);
 	if (!required_size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -190,6 +197,7 @@ acpi_ns_handle_to_pathname(acpi_handle target_handle,
 
 	status = acpi_ut_initialize_buffer(buffer, required_size);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -251,6 +259,7 @@ acpi_ns_build_normalized_path(struct acpi_namespace_node *node,
 	 * validate both full_path and path_size.
 	 */
 	if (!full_path) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		path_size = 0;
 	}
 
@@ -258,6 +267,7 @@ acpi_ns_build_normalized_path(struct acpi_namespace_node *node,
 		goto build_trailing_null;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	next_node = node;
 	while (next_node && next_node != acpi_gbl_root_node) {
 		if (next_node != node) {
@@ -270,6 +280,7 @@ acpi_ns_build_normalized_path(struct acpi_namespace_node *node,
 		for (i = 0; i < 4; i++) {
 			c = name[4 - i - 1];
 			if (do_no_trailing && c != '_') {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				do_no_trailing = FALSE;
 			}
 			if (!do_no_trailing) {
@@ -285,6 +296,7 @@ acpi_ns_build_normalized_path(struct acpi_namespace_node *node,
 	/* Reverse the path string */
 
 	if (length <= path_size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		left = full_path;
 		right = full_path + length - 1;
 
@@ -334,6 +346,7 @@ char *acpi_ns_get_normalized_pathname(struct acpi_namespace_node *node,
 
 	size = acpi_ns_build_normalized_path(node, NULL, 0, no_trailing);
 	if (!size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_PTR(NULL);
 	}
 
@@ -341,6 +354,7 @@ char *acpi_ns_get_normalized_pathname(struct acpi_namespace_node *node,
 
 	name_buffer = ACPI_ALLOCATE_ZEROED(size);
 	if (!name_buffer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Could not allocate %u bytes", (u32)size));
 		return_PTR(NULL);
 	}
diff --git a/drivers/acpi/acpica/nsobject.c b/drivers/acpi/acpica/nsobject.c
index 707b2aa..77f8be6 100644
--- a/drivers/acpi/acpica/nsobject.c
+++ b/drivers/acpi/acpica/nsobject.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: nsobject - Utilities for objects attached to namespace
@@ -86,6 +88,7 @@ acpi_ns_attach_object(struct acpi_namespace_node *node,
 
 		/* Invalid handle */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Null NamedObj handle"));
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
@@ -94,6 +97,7 @@ acpi_ns_attach_object(struct acpi_namespace_node *node,
 
 		/* Null object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Null object, but type not ACPI_TYPE_ANY"));
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
@@ -103,6 +107,7 @@ acpi_ns_attach_object(struct acpi_namespace_node *node,
 
 		/* Not a name handle */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Invalid handle %p [%s]",
 			    node, acpi_ut_get_descriptor_name(node)));
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
@@ -115,12 +120,14 @@ acpi_ns_attach_object(struct acpi_namespace_node *node,
 				  "Obj %p already installed in NameObj %p\n",
 				  object, node));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
 	/* If null object, we will just install it */
 
 	if (!object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		obj_desc = NULL;
 		object_type = ACPI_TYPE_ANY;
 	}
diff --git a/drivers/acpi/acpica/nsparse.c b/drivers/acpi/acpica/nsparse.c
index 2fc33a5..d20f96a 100644
--- a/drivers/acpi/acpica/nsparse.c
+++ b/drivers/acpi/acpica/nsparse.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: nsparse - namespace interface to AML parser
@@ -80,6 +82,7 @@ acpi_ns_execute_table(u32 table_index, struct acpi_namespace_node *start_node)
 
 	status = acpi_get_table_by_index(table_index, &table);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/nspredef.c b/drivers/acpi/acpica/nspredef.c
index 9d14b50..1df927b 100644
--- a/drivers/acpi/acpica/nspredef.c
+++ b/drivers/acpi/acpica/nspredef.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: nspredef - Validation of ACPI predefined methods and objects
@@ -109,6 +111,7 @@ acpi_ns_check_return_value(struct acpi_namespace_node *node,
 
 	predefined = info->predefined;
 	if (!predefined) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -117,6 +120,7 @@ acpi_ns_check_return_value(struct acpi_namespace_node *node,
 	 * validate the return object
 	 */
 	if ((return_status != AE_OK) && (return_status != AE_CTRL_RETURN_VALUE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -136,6 +140,7 @@ acpi_ns_check_return_value(struct acpi_namespace_node *node,
 	if (acpi_gbl_disable_auto_repair ||
 	    (!predefined->info.expected_btypes) ||
 	    (predefined->info.expected_btypes == ACPI_RTYPE_ALL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -170,6 +175,7 @@ acpi_ns_check_return_value(struct acpi_namespace_node *node,
 
 			/* We might be able to fix some errors */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if ((status != AE_AML_OPERAND_TYPE) &&
 			    (status != AE_AML_OPERAND_VALUE)) {
 				goto exit;
@@ -194,9 +200,11 @@ acpi_ns_check_return_value(struct acpi_namespace_node *node,
 	 * messages during the next evaluation of the same method/object.
 	 */
 	if (ACPI_FAILURE(status) || (info->return_flags & ACPI_OBJECT_REPAIRED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		node->flags |= ANOBJ_EVALUATED;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (status);
 }
 
@@ -232,6 +240,7 @@ acpi_ns_check_object_type(struct acpi_evaluate_info *info,
 
 	if (return_object &&
 	    ACPI_GET_DESCRIPTOR_TYPE(return_object) == ACPI_DESC_TYPE_NAMED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname,
 				      info->node_flags,
 				      "Invalid return type - Found a Namespace node [%4.4s] type %s",
@@ -268,6 +277,7 @@ acpi_ns_check_object_type(struct acpi_evaluate_info *info,
 	status = acpi_ns_simple_repair(info, expected_btypes,
 				       package_index, return_object_ptr);
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);	/* Successful repair */
 	}
 
@@ -275,20 +285,24 @@ acpi_ns_check_object_type(struct acpi_evaluate_info *info,
 
 	/* Create a string with all expected types for this predefined object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_ut_get_expected_return_types(type_buffer, expected_btypes);
 
 	if (!return_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname,
 				      info->node_flags,
 				      "Expected return object of type %s",
 				      type_buffer));
 	} else if (package_index == ACPI_NOT_PACKAGE_ELEMENT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname,
 				      info->node_flags,
 				      "Return type mismatch - found %s, expected %s",
 				      acpi_ut_get_object_type_name
 				      (return_object), type_buffer));
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname,
 				      info->node_flags,
 				      "Return Package type mismatch at index %u - "
@@ -297,6 +311,7 @@ acpi_ns_check_object_type(struct acpi_evaluate_info *info,
 				      (return_object), type_buffer));
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_AML_OPERAND_TYPE);
 }
 
@@ -327,9 +342,11 @@ acpi_ns_check_reference(struct acpi_evaluate_info *info,
 	 * a reference to a named object (reference class: NAME)
 	 */
 	if (return_object->reference.class == ACPI_REFCLASS_NAME) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname, info->node_flags,
 			      "Return type mismatch - unexpected reference object type [%s] %2.2X",
 			      acpi_ut_get_reference_name(return_object),
@@ -357,6 +374,7 @@ static u32 acpi_ns_get_bitmapped_type(union acpi_operand_object *return_object)
 	u32 return_btype;
 
 	if (!return_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (ACPI_RTYPE_NONE);
 	}
 
@@ -365,26 +383,31 @@ static u32 acpi_ns_get_bitmapped_type(union acpi_operand_object *return_object)
 	switch (return_object->common.type) {
 	case ACPI_TYPE_INTEGER:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_btype = ACPI_RTYPE_INTEGER;
 		break;
 
 	case ACPI_TYPE_BUFFER:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_btype = ACPI_RTYPE_BUFFER;
 		break;
 
 	case ACPI_TYPE_STRING:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_btype = ACPI_RTYPE_STRING;
 		break;
 
 	case ACPI_TYPE_PACKAGE:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_btype = ACPI_RTYPE_PACKAGE;
 		break;
 
 	case ACPI_TYPE_LOCAL_REFERENCE:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_btype = ACPI_RTYPE_REFERENCE;
 		break;
 
@@ -392,9 +415,11 @@ static u32 acpi_ns_get_bitmapped_type(union acpi_operand_object *return_object)
 
 		/* Not one of the supported objects, must be incorrect */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_btype = ACPI_RTYPE_ANY;
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (return_btype);
 }
diff --git a/drivers/acpi/acpica/nsprepkg.c b/drivers/acpi/acpica/nsprepkg.c
index a8ea8fb..0ca61ee 100644
--- a/drivers/acpi/acpica/nsprepkg.c
+++ b/drivers/acpi/acpica/nsprepkg.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: nsprepkg - Validation of package objects for predefined names
@@ -121,10 +123,13 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 	 * is the variable-length package (ACPI_PTYPE1_VAR).
 	 */
 	if (!count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (package->ret_info.type == ACPI_PTYPE1_VAR) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_OK);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname,
 				      info->node_flags,
 				      "Return Package has no elements (empty)"));
@@ -141,6 +146,7 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 	switch (package->ret_info.type) {
 	case ACPI_PTYPE_CUSTOM:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ns_custom_package(info, elements, count);
 		break;
 
@@ -165,6 +171,7 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 
 		/* Validate all elements of the returned package */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ns_check_package_elements(info, elements,
 							package->ret_info.
 							object_type1,
@@ -186,6 +193,7 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 							   package->ret_info.
 							   object_type1, i);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 
@@ -208,7 +216,9 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 
 		/* Variable number of sub-objects */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < count; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (i < package->ret_info3.count) {
 
 				/* These are the required package elements (0, 1, or 2) */
@@ -220,6 +230,7 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 							      object_type[i],
 							      i);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return (status);
 				}
 			} else {
@@ -232,10 +243,12 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 							      tail_object_type,
 							      i);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return (status);
 				}
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			elements++;
 		}
 		break;
@@ -248,9 +261,11 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 		    acpi_ns_check_object_type(info, elements,
 					      ACPI_RTYPE_INTEGER, 0);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (status);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		elements++;
 		count--;
 
@@ -268,6 +283,7 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 		    acpi_ns_check_object_type(info, elements,
 					      ACPI_RTYPE_INTEGER, 0);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (status);
 		}
 
@@ -280,6 +296,7 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 			goto package_too_small;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = expected_count;
 		elements++;
 
@@ -313,11 +330,13 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 			    acpi_ns_wrap_with_package(info, return_object,
 						      return_object_ptr);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 
 			/* Update locals to point to the new package (of 1 element) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_object = *return_object_ptr;
 			elements = return_object->package.elements;
 			count = 1;
@@ -340,22 +359,29 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 
 		/* The package must contain pairs of (UUID + type) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (count & 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			expected_count = count + 1;
 			goto package_too_small;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (count > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ns_check_object_type(info, elements,
 							   package->ret_info.
 							   object_type1, 0);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 
 			/* Validate length of the UUID buffer */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if ((*elements)->buffer.length != 16) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_WARN_PREDEFINED((AE_INFO,
 						      info->full_pathname,
 						      info->node_flags,
@@ -363,13 +389,16 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 				return (AE_AML_OPERAND_VALUE);
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ns_check_object_type(info, elements + 1,
 							   package->ret_info.
 							   object_type2, 0);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			elements += 2;
 			count -= 2;
 		}
@@ -379,6 +408,7 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 
 		/* Should not get here if predefined info table is correct */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname,
 				      info->node_flags,
 				      "Invalid internal return type in table entry: %X",
@@ -387,12 +417,14 @@ acpi_ns_check_package(struct acpi_evaluate_info *info,
 		return (AE_AML_INTERNAL);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (status);
 
 package_too_small:
 
 	/* Error exit for the case with an incorrect package count */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname, info->node_flags,
 			      "Return Package is too small - found %u elements, expected %u",
 			      count, expected_count));
@@ -445,6 +477,7 @@ acpi_ns_check_package_list(struct acpi_evaluate_info *info,
 		status = acpi_ns_check_object_type(info, &sub_package,
 						   ACPI_RTYPE_PACKAGE, i);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (status);
 		}
 
@@ -458,6 +491,7 @@ acpi_ns_check_package_list(struct acpi_evaluate_info *info,
 
 			/* Each subpackage has a fixed number of elements */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			expected_count =
 			    package->ret_info.count1 + package->ret_info.count2;
 			if (sub_package->package.count < expected_count) {
@@ -475,6 +509,7 @@ acpi_ns_check_package_list(struct acpi_evaluate_info *info,
 							   package->ret_info.
 							   count2, 0);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 			break;
@@ -503,6 +538,7 @@ acpi_ns_check_package_list(struct acpi_evaluate_info *info,
 							   package->ret_info.
 							   count1, 0);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 			break;
@@ -533,6 +569,7 @@ acpi_ns_check_package_list(struct acpi_evaluate_info *info,
 							      object_type[j],
 							      j);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return (status);
 				}
 			}
@@ -542,6 +579,7 @@ acpi_ns_check_package_list(struct acpi_evaluate_info *info,
 
 			/* Each subpackage has a variable but minimum length */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			expected_count = package->ret_info.count1;
 			if (sub_package->package.count < expected_count) {
 				goto package_too_small;
@@ -556,6 +594,7 @@ acpi_ns_check_package_list(struct acpi_evaluate_info *info,
 							   sub_package->package.
 							   count, 0, 0, 0);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 			break;
@@ -569,6 +608,7 @@ acpi_ns_check_package_list(struct acpi_evaluate_info *info,
 							   ACPI_RTYPE_INTEGER,
 							   0);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 
@@ -581,12 +621,15 @@ acpi_ns_check_package_list(struct acpi_evaluate_info *info,
 				goto package_too_small;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sub_package->package.count <
 			    package->ret_info.count1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				expected_count = package->ret_info.count1;
 				goto package_too_small;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (expected_count == 0) {
 				/*
 				 * Either the num_entries element was originally zero or it was
@@ -608,12 +651,14 @@ acpi_ns_check_package_list(struct acpi_evaluate_info *info,
 							   (expected_count - 1),
 							   0, 0, 1);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (status);
 			}
 			break;
 
 		default:	/* Should not get here, type was validated by caller */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO, "Invalid Package type: %X",
 				    package->ret_info.type));
 			return (AE_AML_INTERNAL);
@@ -622,12 +667,14 @@ acpi_ns_check_package_list(struct acpi_evaluate_info *info,
 		elements++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 
 package_too_small:
 
 	/* The subpackage count was smaller than required */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname, info->node_flags,
 			      "Return SubPackage[%u] is too small - found %u elements, expected %u",
 			      i, sub_package->package.count, expected_count));
@@ -666,6 +713,7 @@ acpi_ns_custom_package(struct acpi_evaluate_info *info,
 	/* Get version number, must be Integer */
 
 	if ((*elements)->common.type != ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname,
 				      info->node_flags,
 				      "Return Package has invalid object type for version number"));
diff --git a/drivers/acpi/acpica/nsrepair.c b/drivers/acpi/acpica/nsrepair.c
index 418ef2a..94a7fde 100644
--- a/drivers/acpi/acpica/nsrepair.c
+++ b/drivers/acpi/acpica/nsrepair.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: nsrepair - Repair for objects returned by predefined methods
@@ -172,6 +174,7 @@ acpi_ns_simple_repair(struct acpi_evaluate_info *info,
 						 package_index);
 	if (predefined) {
 		if (!return_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_WARN_PREDEFINED((AE_INFO, info->full_pathname,
 					      ACPI_WARN_ALWAYS,
 					      "Missing expected return value"));
@@ -183,6 +186,7 @@ acpi_ns_simple_repair(struct acpi_evaluate_info *info,
 
 			/* A fatal error occurred during a conversion */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status,
 					"During return object analysis"));
 			return (status);
@@ -197,6 +201,7 @@ acpi_ns_simple_repair(struct acpi_evaluate_info *info,
 	 * expected.
 	 */
 	if (info->return_btype & expected_btypes) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -215,8 +220,11 @@ acpi_ns_simple_repair(struct acpi_evaluate_info *info,
 	 * Try to fix if there was no return object. Warning if failed to fix.
 	 */
 	if (!return_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (expected_btypes && (!(expected_btypes & ACPI_RTYPE_NONE))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (package_index != ACPI_NOT_PACKAGE_ELEMENT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_WARN_PREDEFINED((AE_INFO,
 						      info->full_pathname,
 						      ACPI_WARN_ALWAYS,
@@ -228,37 +236,47 @@ acpi_ns_simple_repair(struct acpi_evaluate_info *info,
 								package_index,
 								return_object_ptr);
 				if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return (AE_OK);	/* Repair was successful */
 				}
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_WARN_PREDEFINED((AE_INFO,
 						      info->full_pathname,
 						      ACPI_WARN_ALWAYS,
 						      "Missing expected return value"));
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_AML_NO_RETURN_VALUE);
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (expected_btypes & ACPI_RTYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ns_convert_to_integer(return_object, &new_object);
 		if (ACPI_SUCCESS(status)) {
 			goto object_repaired;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (expected_btypes & ACPI_RTYPE_STRING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ns_convert_to_string(return_object, &new_object);
 		if (ACPI_SUCCESS(status)) {
 			goto object_repaired;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (expected_btypes & ACPI_RTYPE_BUFFER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ns_convert_to_buffer(return_object, &new_object);
 		if (ACPI_SUCCESS(status)) {
 			goto object_repaired;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (expected_btypes & ACPI_RTYPE_PACKAGE) {
 		/*
 		 * A package is expected. We will wrap the existing object with a
@@ -283,17 +301,21 @@ acpi_ns_simple_repair(struct acpi_evaluate_info *info,
 
 	/* We cannot repair this object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_AML_OPERAND_TYPE);
 
 object_repaired:
 
 	/* Object was successfully repaired */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (package_index != ACPI_NOT_PACKAGE_ELEMENT) {
 
 		/* Update reference count of new object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(info->return_flags & ACPI_OBJECT_WRAPPED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			new_object->common.reference_count =
 			    return_object->common.reference_count;
 		}
@@ -314,6 +336,7 @@ acpi_ns_simple_repair(struct acpi_evaluate_info *info,
 
 	/* Delete old object, install the new return object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_ut_remove_reference(return_object);
 	*return_object_ptr = new_object;
 	info->return_flags |= ACPI_OBJECT_REPAIRED;
@@ -361,12 +384,14 @@ static const struct acpi_simple_repair_info *acpi_ns_match_simple_repair(struct
 				return (this_name);
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (NULL);
 		}
 
 		this_name++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (NULL);		/* Name was not found in the repair table */
 }
 
@@ -402,6 +427,7 @@ acpi_ns_repair_null_element(struct acpi_evaluate_info *info,
 	/* No repair needed if return object is non-NULL */
 
 	if (return_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -514,6 +540,7 @@ acpi_ns_remove_null_elements(struct acpi_evaluate_info *info,
 
 	for (i = 0; i < count; i++) {
 		if (!*source) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			new_count--;
 		} else {
 			*dest = *source;
@@ -532,6 +559,7 @@ acpi_ns_remove_null_elements(struct acpi_evaluate_info *info,
 
 		/* NULL terminate list and update the package count */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*dest = NULL;
 		obj_desc->package.count = new_count;
 	}
@@ -576,6 +604,7 @@ acpi_ns_wrap_with_package(struct acpi_evaluate_info *info,
 	 */
 	pkg_obj_desc = acpi_ut_create_package_object(1);
 	if (!pkg_obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_NO_MEMORY);
 	}
 
diff --git a/drivers/acpi/acpica/nsrepair2.c b/drivers/acpi/acpica/nsrepair2.c
index 06037e0..9eb4970 100644
--- a/drivers/acpi/acpica/nsrepair2.c
+++ b/drivers/acpi/acpica/nsrepair2.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: nsrepair2 - Repair for objects returned by specific
@@ -193,6 +195,7 @@ acpi_ns_complex_repairs(struct acpi_evaluate_info *info,
 
 	predefined = acpi_ns_match_complex_repair(node);
 	if (!predefined) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (validate_status);
 	}
 
@@ -223,12 +226,14 @@ static const struct acpi_repair_info *acpi_ns_match_complex_repair(struct
 	this_name = acpi_ns_repairable_names;
 	while (this_name->repair_function) {
 		if (ACPI_COMPARE_NAME(node->name.ascii, this_name->name)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (this_name);
 		}
 
 		this_name++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (NULL);		/* Not found */
 }
 
@@ -295,6 +300,7 @@ acpi_ns_repair_FDE(struct acpi_evaluate_info *info,
 
 		/* This is the expected type. Length should be (at least) 5 DWORDs */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (return_object->buffer.length >= ACPI_FDE_DWORD_BUFFER_SIZE) {
 			return (AE_OK);
 		}
@@ -381,6 +387,7 @@ acpi_ns_repair_CID(struct acpi_evaluate_info *info,
 	/* Check for _CID as a simple string */
 
 	if (return_object->common.type == ACPI_TYPE_STRING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ns_repair_HID(info, return_object_ptr);
 		return (status);
 	}
@@ -388,32 +395,41 @@ acpi_ns_repair_CID(struct acpi_evaluate_info *info,
 	/* Exit if not a Package */
 
 	if (return_object->common.type != ACPI_TYPE_PACKAGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
 	/* Examine each element of the _CID package */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	element_ptr = return_object->package.elements;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < return_object->package.count; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		original_element = *element_ptr;
 		original_ref_count = original_element->common.reference_count;
 
 		status = acpi_ns_repair_HID(info, element_ptr);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (status);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (original_element != *element_ptr) {
 
 			/* Update reference count of new object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			(*element_ptr)->common.reference_count =
 			    original_ref_count;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		element_ptr++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -454,6 +470,7 @@ acpi_ns_repair_CST(struct acpi_evaluate_info *info,
 	 */
 	outer_element_count = return_object->package.count - 1;
 	i = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (i < outer_element_count) {
 		outer_elements = &return_object->package.elements[i + 1];
 		removing = FALSE;
@@ -534,10 +551,12 @@ acpi_ns_repair_HID(struct acpi_evaluate_info *info,
 	/* We only care about string _HID objects (not integers) */
 
 	if (return_object->common.type != ACPI_TYPE_STRING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
 	if (return_object->string.length == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARN_PREDEFINED((AE_INFO,
 				      info->full_pathname, info->node_flags,
 				      "Invalid zero-length _HID or _CID string"));
@@ -552,6 +571,7 @@ acpi_ns_repair_HID(struct acpi_evaluate_info *info,
 
 	new_string = acpi_ut_create_string_object(return_object->string.length);
 	if (!new_string) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_NO_MEMORY);
 	}
 
@@ -563,6 +583,7 @@ acpi_ns_repair_HID(struct acpi_evaluate_info *info,
 	 */
 	source = return_object->string.pointer;
 	if (*source == '*') {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		source++;
 		new_string->string.length--;
 
@@ -640,6 +661,7 @@ acpi_ns_repair_PRT(struct acpi_evaluate_info *info,
 		 */
 		obj_desc = sub_object_list[3];
 		if (!obj_desc || (obj_desc->common.type != ACPI_TYPE_INTEGER)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sub_object_list[3] = sub_object_list[2];
 			sub_object_list[2] = obj_desc;
 			info->return_flags |= ACPI_OBJECT_REPAIRED;
@@ -695,6 +717,7 @@ acpi_ns_repair_PSS(struct acpi_evaluate_info *info,
 					   ACPI_SORT_DESCENDING,
 					   "CpuFrequency");
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -759,6 +782,7 @@ acpi_ns_repair_TSS(struct acpi_evaluate_info *info,
 	status = acpi_ns_get_node(info->node, "^_PSS",
 				  ACPI_NS_NO_UPSEARCH, &node);
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -809,6 +833,7 @@ acpi_ns_check_sorted_list(struct acpi_evaluate_info *info,
 	/* The top-level object must be a package */
 
 	if (return_object->common.type != ACPI_TYPE_PACKAGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_AML_OPERAND_TYPE);
 	}
 
@@ -911,6 +936,7 @@ acpi_ns_sort_list(union acpi_operand_object **elements,
 
 	/* Simple bubble sort */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 1; i < count; i++) {
 		for (j = (count - 1); j >= i; j--) {
 			obj_desc1 = elements[j - 1]->package.elements[index];
@@ -962,6 +988,7 @@ acpi_ns_remove_element(union acpi_operand_object *obj_desc, u32 index)
 
 	/* Examine all elements of the package object, remove matched index */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < count; i++) {
 		if (i == index) {
 			acpi_ut_remove_reference(*source);	/* Remove one ref for being in pkg */
diff --git a/drivers/acpi/acpica/nssearch.c b/drivers/acpi/acpica/nssearch.c
index 5de8957..98b8c08 100644
--- a/drivers/acpi/acpica/nssearch.c
+++ b/drivers/acpi/acpica/nssearch.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: nssearch - Namespace search
@@ -133,6 +135,7 @@ acpi_ns_search_one_scope(u32 target_name,
 
 			if (acpi_ns_get_type(node) ==
 			    ACPI_TYPE_LOCAL_METHOD_ALIAS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				node =
 				    ACPI_CAST_PTR(struct acpi_namespace_node,
 						  node->object);
@@ -167,6 +170,7 @@ acpi_ns_search_one_scope(u32 target_name,
 			  acpi_ut_get_node_name(parent_node), parent_node,
 			  parent_node->child));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_NOT_FOUND);
 }
 
@@ -215,6 +219,7 @@ acpi_ns_search_parent_tree(u32 target_name,
 	if (!parent_node) {
 		ACPI_DEBUG_PRINT((ACPI_DB_NAMES, "[%4.4s] has no parent\n",
 				  ACPI_CAST_PTR(char, &target_name)));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_FOUND);
 	}
 
@@ -223,6 +228,7 @@ acpi_ns_search_parent_tree(u32 target_name,
 				  "[%4.4s] type [%s] must be local to this scope (no parent search)\n",
 				  ACPI_CAST_PTR(char, &target_name),
 				  acpi_ut_get_type_name(type)));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_FOUND);
 	}
 
@@ -245,6 +251,7 @@ acpi_ns_search_parent_tree(u32 target_name,
 		    acpi_ns_search_one_scope(target_name, parent_node,
 					     ACPI_TYPE_ANY, return_node);
 		if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -255,6 +262,7 @@ acpi_ns_search_parent_tree(u32 target_name,
 
 	/* Not found in parent tree */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_NOT_FOUND);
 }
 
@@ -299,6 +307,7 @@ acpi_ns_search_and_enter(u32 target_name,
 	/* Parameter validation */
 
 	if (!node || !target_name || !return_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Null parameter: Node %p Name 0x%X ReturnNode %p",
 			    node, target_name, return_node));
@@ -343,13 +352,16 @@ acpi_ns_search_and_enter(u32 target_name,
 						  (*return_node)->type,
 						  walk_state->owner_id));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ns_delete_children(*return_node);
 				if (acpi_gbl_runtime_namespace_override) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					acpi_ut_remove_reference((*return_node)->object);
 					(*return_node)->object = NULL;
 					(*return_node)->owner_id =
 					    walk_state->owner_id;
 				} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					acpi_ns_remove_node(*return_node);
 					*return_node = ACPI_ENTRY_NOT_FOUND;
 				}
@@ -358,6 +370,7 @@ acpi_ns_search_and_enter(u32 target_name,
 			/* Return an error if we don't expect to find the object */
 
 			else if (flags & ACPI_NS_ERROR_IF_FOUND) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_ALREADY_EXISTS;
 			}
 		}
@@ -369,6 +382,7 @@ acpi_ns_search_and_enter(u32 target_name,
 
 		/* Either found it or there was an error: finished either way */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -390,6 +404,7 @@ acpi_ns_search_and_enter(u32 target_name,
 		    acpi_ns_search_parent_tree(target_name, node, type,
 					       return_node);
 		if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	}
@@ -401,6 +416,7 @@ acpi_ns_search_and_enter(u32 target_name,
 				  "%4.4s Not found in %p [Not adding]\n",
 				  ACPI_CAST_PTR(char, &target_name), node));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_FOUND);
 	}
 
@@ -408,6 +424,7 @@ acpi_ns_search_and_enter(u32 target_name,
 
 	new_node = acpi_ns_create_node(target_name);
 	if (!new_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 #ifdef ACPI_ASL_COMPILER
diff --git a/drivers/acpi/acpica/nsutils.c b/drivers/acpi/acpica/nsutils.c
index b43fe5fc..71cff76 100644
--- a/drivers/acpi/acpica/nsutils.c
+++ b/drivers/acpi/acpica/nsutils.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: nsutils - Utilities for accessing ACPI namespace, accessing
@@ -75,6 +77,7 @@ acpi_ns_print_node_pathname(struct acpi_namespace_node *node,
 	acpi_status status;
 
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_os_printf("[NULL NAME]");
 		return;
 	}
@@ -111,6 +114,7 @@ acpi_object_type acpi_ns_get_type(struct acpi_namespace_node * node)
 	ACPI_FUNCTION_TRACE(ns_get_type);
 
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARNING((AE_INFO, "Null Node parameter"));
 		return_UINT8(ACPI_TYPE_ANY);
 	}
@@ -139,6 +143,7 @@ u32 acpi_ns_local(acpi_object_type type)
 
 		/* Type code out of range  */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARNING((AE_INFO, "Invalid Object Type 0x%X", type));
 		return_UINT32(ACPI_NS_NORMAL);
 	}
@@ -187,12 +192,14 @@ void acpi_ns_get_internal_name_length(struct acpi_namestring_info *info)
 		/* Skip redundant root_prefix, like \\_SB.PCI0.SBRG.EC0 */
 
 		while (ACPI_IS_ROOT_PREFIX(*next_external_char)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			next_external_char++;
 		}
 	} else {
 		/* Handle Carat prefixes */
 
 		while (ACPI_IS_PARENT_PREFIX(*next_external_char)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			info->num_carats++;
 			next_external_char++;
 		}
@@ -252,6 +259,7 @@ acpi_status acpi_ns_build_internal_name(struct acpi_namestring_info *info)
 			internal_name[1] = AML_DUAL_NAME_PREFIX;
 			result = &internal_name[2];
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			internal_name[1] = AML_MULTI_NAME_PREFIX;
 			internal_name[2] = (char)num_segments;
 			result = &internal_name[3];
@@ -263,7 +271,9 @@ acpi_status acpi_ns_build_internal_name(struct acpi_namestring_info *info)
 		 */
 		i = 0;
 		if (info->num_carats) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			for (i = 0; i < info->num_carats; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				internal_name[i] = AML_PARENT_PREFIX;
 			}
 		}
@@ -271,9 +281,11 @@ acpi_status acpi_ns_build_internal_name(struct acpi_namestring_info *info)
 		if (num_segments <= 1) {
 			result = &internal_name[i];
 		} else if (num_segments == 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			internal_name[i] = AML_DUAL_NAME_PREFIX;
 			result = &internal_name[(acpi_size)i + 1];
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			internal_name[i] = AML_MULTI_NAME_PREFIX;
 			internal_name[(acpi_size)i + 1] = (char)num_segments;
 			result = &internal_name[(acpi_size)i + 2];
@@ -302,6 +314,7 @@ acpi_status acpi_ns_build_internal_name(struct acpi_namestring_info *info)
 
 		if (!ACPI_IS_PATH_SEPARATOR(*external_name) &&
 		    (*external_name != 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_BAD_PATHNAME);
 		}
 
@@ -352,6 +365,7 @@ acpi_ns_internalize_name(const char *external_name, char **converted_name)
 	ACPI_FUNCTION_TRACE(ns_internalize_name);
 
 	if ((!external_name) || (*external_name == 0) || (!converted_name)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -364,6 +378,7 @@ acpi_ns_internalize_name(const char *external_name, char **converted_name)
 
 	internal_name = ACPI_ALLOCATE_ZEROED(info.length);
 	if (!internal_name) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -372,6 +387,7 @@ acpi_ns_internalize_name(const char *external_name, char **converted_name)
 	info.internal_name = internal_name;
 	status = acpi_ns_build_internal_name(&info);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(internal_name);
 		return_ACPI_STATUS(status);
 	}
@@ -411,6 +427,7 @@ acpi_ns_externalize_name(u32 internal_name_length,
 
 	ACPI_FUNCTION_TRACE(ns_externalize_name);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!internal_name_length || !internal_name || !converted_name) {
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
@@ -573,6 +590,7 @@ struct acpi_namespace_node *acpi_ns_validate_handle(acpi_handle handle)
 	/* We can at least attempt to verify the handle */
 
 	if (ACPI_GET_DESCRIPTOR_TYPE(handle) != ACPI_DESC_TYPE_NAMED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
@@ -602,6 +620,7 @@ void acpi_ns_terminate(void)
 	/* Delete any module-level code blocks */
 
 	next = acpi_gbl_module_code_list;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (next) {
 		prev = next;
 		next = next->method.mutex;
@@ -648,6 +667,7 @@ u32 acpi_ns_opens_scope(acpi_object_type type)
 
 		/* type code out of range  */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARNING((AE_INFO, "Invalid Object Type 0x%X", type));
 		return (ACPI_NS_NORMAL);
 	}
@@ -694,15 +714,18 @@ acpi_ns_get_node_unlocked(struct acpi_namespace_node *prefix_node,
 	if (!pathname) {
 		*return_node = prefix_node;
 		if (!prefix_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*return_node = acpi_gbl_root_node;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
 	/* Quick check for a reference to the root */
 
 	if (ACPI_IS_ROOT_PREFIX(pathname[0]) && (!pathname[1])) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*return_node = acpi_gbl_root_node;
 		return_ACPI_STATUS(AE_OK);
 	}
@@ -711,6 +734,7 @@ acpi_ns_get_node_unlocked(struct acpi_namespace_node *prefix_node,
 
 	status = acpi_ns_internalize_name(pathname, &internal_path);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -766,6 +790,7 @@ acpi_ns_get_node(struct acpi_namespace_node *prefix_node,
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/nswalk.c b/drivers/acpi/acpica/nswalk.c
index 6b6e6f4..85a5e2d 100644
--- a/drivers/acpi/acpica/nswalk.c
+++ b/drivers/acpi/acpica/nswalk.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: nswalk - Functions for walking the ACPI namespace
@@ -124,6 +126,7 @@ struct acpi_namespace_node *acpi_ns_get_next_node_typed(acpi_object_type type,
 
 		/* next_node is NULL if we are at the end-of-list */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (next_node);
 	}
 
@@ -207,6 +210,7 @@ acpi_ns_walk_namespace(acpi_object_type type,
 
 	/* Null child means "get first node" */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	parent_node = start_node;
 	child_node = acpi_ns_get_next_node(parent_node, NULL);
 	child_type = ACPI_TYPE_ANY;
@@ -218,6 +222,7 @@ acpi_ns_walk_namespace(acpi_object_type type,
 	 * bubbled up to (and passed) the original parent handle (start_entry)
 	 */
 	while (level > 0 && child_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_OK;
 
 		/* Found next child, get the type if we are not searching for ANY */
@@ -236,6 +241,7 @@ acpi_ns_walk_namespace(acpi_object_type type,
 		 */
 		if ((child_node->flags & ANOBJ_TEMPORARY) &&
 		    !(flags & ACPI_NS_WALK_TEMP_NODES)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_CTRL_DEPTH;
 		}
 
@@ -250,6 +256,7 @@ acpi_ns_walk_namespace(acpi_object_type type,
 				mutex_status =
 				    acpi_ut_release_mutex(ACPI_MTX_NAMESPACE);
 				if (ACPI_FAILURE(mutex_status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(mutex_status);
 				}
 			}
@@ -278,6 +285,7 @@ acpi_ns_walk_namespace(acpi_object_type type,
 				mutex_status =
 				    acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 				if (ACPI_FAILURE(mutex_status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(mutex_status);
 				}
 			}
@@ -293,6 +301,7 @@ acpi_ns_walk_namespace(acpi_object_type type,
 
 				/* Exit now, with OK status */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(AE_OK);
 
 			default:
@@ -326,14 +335,17 @@ acpi_ns_walk_namespace(acpi_object_type type,
 		/* No more children, re-visit this node */
 
 		if (!node_previously_visited) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			node_previously_visited = TRUE;
 			continue;
 		}
 
 		/* No more children, visit peers */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		child_node = acpi_ns_get_next_node(parent_node, child_node);
 		if (child_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			node_previously_visited = FALSE;
 		}
 
@@ -354,5 +366,6 @@ acpi_ns_walk_namespace(acpi_object_type type,
 
 	/* Complete walk, not terminated by user function */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
diff --git a/drivers/acpi/acpica/nsxfeval.c b/drivers/acpi/acpica/nsxfeval.c
index 783f4c8..4909c70 100644
--- a/drivers/acpi/acpica/nsxfeval.c
+++ b/drivers/acpi/acpica/nsxfeval.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: nsxfeval - Public interfaces to the ACPI subsystem
@@ -93,29 +95,36 @@ acpi_evaluate_object_typed(acpi_handle handle,
 	/* Return buffer must be valid */
 
 	if (!return_buffer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
 	if (return_buffer->length == ACPI_ALLOCATE_BUFFER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		free_buffer_on_error = TRUE;
 	}
 
 	if (pathname) {
 		status = acpi_get_handle(handle, pathname, &target_handle);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		target_handle = handle;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	full_pathname = acpi_ns_get_external_pathname(target_handle);
 	if (!full_pathname) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
 	/* Evaluate the object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = acpi_evaluate_object(target_handle, NULL, external_params,
 				      return_buffer);
 	if (ACPI_FAILURE(status)) {
@@ -124,14 +133,17 @@ acpi_evaluate_object_typed(acpi_handle handle,
 
 	/* Type ANY means "don't care about return value type" */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (return_type == ACPI_TYPE_ANY) {
 		goto exit;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (return_buffer->length == 0) {
 
 		/* Error because caller specifically asked for a return value */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "%s did not return any object",
 			    full_pathname));
 		status = AE_NULL_OBJECT;
@@ -140,12 +152,14 @@ acpi_evaluate_object_typed(acpi_handle handle,
 
 	/* Examine the object type returned from evaluate_object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (((union acpi_object *)return_buffer->pointer)->type == return_type) {
 		goto exit;
 	}
 
 	/* Return object type does not match requested type */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_ERROR((AE_INFO,
 		    "Incorrect return type from %s - received [%s], requested [%s]",
 		    full_pathname,
@@ -165,6 +179,7 @@ acpi_evaluate_object_typed(acpi_handle handle,
 		return_buffer->pointer = NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_buffer->length = 0;
 	status = AE_TYPE;
 
@@ -211,6 +226,7 @@ acpi_evaluate_object(acpi_handle handle,
 
 	info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info));
 	if (!info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -218,6 +234,7 @@ acpi_evaluate_object(acpi_handle handle,
 
 	info->prefix_node = acpi_ns_validate_handle(handle);
 	if (!info->prefix_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto cleanup;
 	}
@@ -250,6 +267,7 @@ acpi_evaluate_object(acpi_handle handle,
 					  pathname));
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto cleanup;
 	}
@@ -266,6 +284,7 @@ acpi_evaluate_object(acpi_handle handle,
 		/* Warn on impossible argument count */
 
 		if (info->param_count > ACPI_METHOD_NUM_ARGS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_WARN_PREDEFINED((AE_INFO, pathname,
 					      ACPI_WARN_ALWAYS,
 					      "Excess arguments (%u) - using only %u",
@@ -283,6 +302,7 @@ acpi_evaluate_object(acpi_handle handle,
 							 param_count +
 							 1) * sizeof(void *));
 		if (!info->parameters) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			goto cleanup;
 		}
@@ -478,6 +498,7 @@ acpi_evaluate_object(acpi_handle handle,
 		acpi_ut_delete_internal_object_list(info->parameters);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_FREE(info);
 	return_ACPI_STATUS(status);
 }
@@ -512,6 +533,7 @@ static void acpi_ns_resolve_references(struct acpi_evaluate_info *info)
 	/* We are interested in reference objects only */
 
 	if ((info->return_object)->common.type != ACPI_TYPE_LOCAL_REFERENCE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -525,30 +547,37 @@ static void acpi_ns_resolve_references(struct acpi_evaluate_info *info)
 	switch (info->return_object->reference.class) {
 	case ACPI_REFCLASS_INDEX:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		obj_desc = *(info->return_object->reference.where);
 		break;
 
 	case ACPI_REFCLASS_REFOF:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		node = info->return_object->reference.object;
 		if (node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			obj_desc = node->object;
 		}
 		break;
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
 	/* Replace the existing reference object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (obj_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_add_reference(obj_desc);
 		acpi_ut_remove_reference(info->return_object);
 		info->return_object = obj_desc;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return;
 }
 
@@ -601,6 +630,7 @@ acpi_walk_namespace(acpi_object_type type,
 
 	if ((type > ACPI_TYPE_LOCAL_MAX) ||
 	    (!max_depth) || (!descending_callback && !ascending_callback)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -617,6 +647,7 @@ acpi_walk_namespace(acpi_object_type type,
 	 */
 	status = acpi_ut_acquire_read_lock(&acpi_gbl_namespace_rw_lock);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -634,6 +665,7 @@ acpi_walk_namespace(acpi_object_type type,
 	/* Now we can validate the starting node */
 
 	if (!acpi_ns_validate_handle(start_object)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit2;
 	}
@@ -683,16 +715,19 @@ acpi_ns_get_device_callback(acpi_handle obj_handle,
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
 	node = acpi_ns_validate_handle(obj_handle);
 	status = acpi_ut_release_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -713,8 +748,10 @@ acpi_ns_get_device_callback(acpi_handle obj_handle,
 	if (info->hid != NULL) {
 		status = acpi_ut_execute_HID(node, &hid);
 		if (status == AE_NOT_FOUND) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_OK);
 		} else if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_CTRL_DEPTH);
 		}
 
@@ -728,26 +765,32 @@ acpi_ns_get_device_callback(acpi_handle obj_handle,
 			 */
 			status = acpi_ut_execute_CID(node, &cid);
 			if (status == AE_NOT_FOUND) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (AE_OK);
 			} else if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (AE_CTRL_DEPTH);
 			}
 
 			/* Walk the CID list */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			found = FALSE;
 			for (i = 0; i < cid->count; i++) {
 				if (strcmp(cid->ids[i].string, info->hid) == 0) {
 
 					/* Found a matching CID */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					found = TRUE;
 					break;
 				}
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_FREE(cid);
 			if (!found) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (AE_OK);
 			}
 		}
@@ -757,6 +800,7 @@ acpi_ns_get_device_callback(acpi_handle obj_handle,
 
 	status = acpi_ut_execute_STA(node, &flags);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_CTRL_DEPTH);
 	}
 
@@ -815,6 +859,7 @@ acpi_get_devices(const char *HID,
 	/* Parameter validation */
 
 	if (!user_function) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -834,6 +879,7 @@ acpi_get_devices(const char *HID,
 	 */
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -871,11 +917,13 @@ acpi_attach_data(acpi_handle obj_handle,
 	/* Parameter validation */
 
 	if (!obj_handle || !handler || !data) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -883,6 +931,7 @@ acpi_attach_data(acpi_handle obj_handle,
 
 	node = acpi_ns_validate_handle(obj_handle);
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit;
 	}
@@ -916,6 +965,7 @@ acpi_detach_data(acpi_handle obj_handle, acpi_object_handler handler)
 
 	/* Parameter validation */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!obj_handle || !handler) {
 		return (AE_BAD_PARAMETER);
 	}
@@ -967,11 +1017,13 @@ acpi_get_data_full(acpi_handle obj_handle, acpi_object_handler handler,
 	/* Parameter validation */
 
 	if (!obj_handle || !handler || !data) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -979,12 +1031,14 @@ acpi_get_data_full(acpi_handle obj_handle, acpi_object_handler handler,
 
 	node = acpi_ns_validate_handle(obj_handle);
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit;
 	}
 
 	status = acpi_ns_get_attached_data(node, handler, data);
 	if (ACPI_SUCCESS(status) && callback) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		callback(*data);
 	}
 
@@ -1011,6 +1065,7 @@ ACPI_EXPORT_SYMBOL(acpi_get_data_full)
 acpi_status
 acpi_get_data(acpi_handle obj_handle, acpi_object_handler handler, void **data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acpi_get_data_full(obj_handle, handler, data, NULL);
 }
 
diff --git a/drivers/acpi/acpica/nsxfname.c b/drivers/acpi/acpica/nsxfname.c
index 1069662..7e5d398 100644
--- a/drivers/acpi/acpica/nsxfname.c
+++ b/drivers/acpi/acpica/nsxfname.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: nsxfname - Public interfaces to the ACPI subsystem
@@ -89,6 +91,7 @@ acpi_get_handle(acpi_handle parent,
 	/* Parameter Validation */
 
 	if (!ret_handle || !pathname) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -97,6 +100,7 @@ acpi_get_handle(acpi_handle parent,
 	if (parent) {
 		prefix_node = acpi_ns_validate_handle(parent);
 		if (!prefix_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_BAD_PARAMETER);
 		}
 	}
@@ -115,6 +119,7 @@ acpi_get_handle(acpi_handle parent,
 		/* Special case for root-only, since we can't search for it */
 
 		if (!strcmp(pathname, ACPI_NS_ROOT_PATH)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*ret_handle =
 			    ACPI_CAST_PTR(acpi_handle, acpi_gbl_root_node);
 			return (AE_OK);
@@ -123,6 +128,7 @@ acpi_get_handle(acpi_handle parent,
 
 		/* Relative path with null prefix is disallowed */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -134,6 +140,7 @@ acpi_get_handle(acpi_handle parent,
 		*ret_handle = ACPI_CAST_PTR(acpi_handle, node);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (status);
 }
 
@@ -162,11 +169,13 @@ acpi_get_name(acpi_handle handle, u32 name_type, struct acpi_buffer *buffer)
 	/* Parameter validation */
 
 	if (name_type > ACPI_NAME_TYPE_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
 	status = acpi_ut_validate_buffer(buffer);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -176,6 +185,7 @@ acpi_get_name(acpi_handle handle, u32 name_type, struct acpi_buffer *buffer)
 	 */
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -277,32 +287,38 @@ acpi_get_object_info(acpi_handle handle,
 	/* Parameter validation */
 
 	if (!handle || !return_buffer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
 	node = acpi_ns_validate_handle(handle);
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		(void)acpi_ut_release_mutex(ACPI_MTX_NAMESPACE);
 		return (AE_BAD_PARAMETER);
 	}
 
 	/* Get the namespace node data while the namespace is locked */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	info_size = sizeof(struct acpi_device_info);
 	type = node->type;
 	name = node->name.integer;
 
 	if (node->type == ACPI_TYPE_METHOD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		param_count = node->object->method.param_count;
 	}
 
 	status = acpi_ut_release_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -349,6 +365,7 @@ acpi_get_object_info(acpi_handle handle,
 
 		status = acpi_ut_execute_CLS(node, &cls);
 		if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			info_size += cls->length;
 			valid |= ACPI_VALID_CLS;
 		}
@@ -360,6 +377,7 @@ acpi_get_object_info(acpi_handle handle,
 	 */
 	info = ACPI_ALLOCATE_ZEROED(info_size);
 	if (!info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -403,6 +421,7 @@ acpi_get_object_info(acpi_handle handle,
 						       ACPI_NUM_sx_w_METHODS,
 						       info->lowest_dstates);
 		if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			valid |= ACPI_VALID_SXWS;
 		}
 
@@ -470,6 +489,7 @@ acpi_get_object_info(acpi_handle handle,
 	}
 
 	if (cls) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next_id_string = acpi_ns_copy_device_id(&info->class_code,
 							cls, next_id_string);
 	}
@@ -487,17 +507,22 @@ acpi_get_object_info(acpi_handle handle,
 
 cleanup:
 	if (hid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(hid);
 	}
 	if (uid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(uid);
 	}
 	if (cid_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(cid_list);
 	}
 	if (cls) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(cls);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (status);
 }
 
@@ -535,6 +560,7 @@ acpi_status acpi_install_method(u8 *buffer)
 	/* Parameter validation */
 
 	if (!buffer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
diff --git a/drivers/acpi/acpica/nsxfobj.c b/drivers/acpi/acpica/nsxfobj.c
index 47f689e..335985153 100644
--- a/drivers/acpi/acpica/nsxfobj.c
+++ b/drivers/acpi/acpica/nsxfobj.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: nsxfobj - Public interfaces to the ACPI subsystem
@@ -71,6 +73,7 @@ acpi_status acpi_get_type(acpi_handle handle, acpi_object_type *ret_type)
 	/* Parameter Validation */
 
 	if (!ret_type) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -83,6 +86,7 @@ acpi_status acpi_get_type(acpi_handle handle, acpi_object_type *ret_type)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -90,6 +94,7 @@ acpi_status acpi_get_type(acpi_handle handle, acpi_object_type *ret_type)
 
 	node = acpi_ns_validate_handle(handle);
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		(void)acpi_ut_release_mutex(ACPI_MTX_NAMESPACE);
 		return (AE_BAD_PARAMETER);
 	}
@@ -122,17 +127,20 @@ acpi_status acpi_get_parent(acpi_handle handle, acpi_handle *ret_handle)
 	acpi_status status;
 
 	if (!ret_handle) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
 	/* Special case for the predefined Root Node (no parent) */
 
 	if (handle == ACPI_ROOT_OBJECT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_NULL_ENTRY);
 	}
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -140,6 +148,7 @@ acpi_status acpi_get_parent(acpi_handle handle, acpi_handle *ret_handle)
 
 	node = acpi_ns_validate_handle(handle);
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit;
 	}
@@ -152,6 +161,7 @@ acpi_status acpi_get_parent(acpi_handle handle, acpi_handle *ret_handle)
 	/* Return exception if parent is null */
 
 	if (!parent_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NULL_ENTRY;
 	}
 
@@ -193,6 +203,7 @@ acpi_get_next_object(acpi_object_type type,
 	/* Parameter validation */
 
 	if (type > ACPI_TYPE_EXTERNAL_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
diff --git a/drivers/acpi/acpica/psargs.c b/drivers/acpi/acpica/psargs.c
index eb9dfac..b5a33a1 100644
--- a/drivers/acpi/acpica/psargs.c
+++ b/drivers/acpi/acpica/psargs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: psargs - Parse AML opcode arguments
@@ -175,6 +177,7 @@ char *acpi_ps_get_next_namestring(struct acpi_parse_state *parser_state)
 		/* null_name */
 
 		if (end == start) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			start = NULL;
 		}
 		end++;
@@ -294,6 +297,7 @@ acpi_ps_get_next_namepath(struct acpi_walk_state *walk_state,
 
 		name_op = acpi_ps_alloc_op(AML_INT_NAMEPATH_OP, start);
 		if (!name_op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_NO_MEMORY);
 		}
 
@@ -308,6 +312,7 @@ acpi_ps_get_next_namepath(struct acpi_walk_state *walk_state,
 		acpi_ps_append_arg(arg, name_op);
 
 		if (!method_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Control Method %p has no attached object",
 				    node));
@@ -334,13 +339,16 @@ acpi_ps_get_next_namepath(struct acpi_walk_state *walk_state,
 
 		if ((walk_state->parse_flags & ACPI_PARSE_MODE_MASK) !=
 		    ACPI_PARSE_EXECUTE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_OK;
 		}
 
 		/* 2) not_found during a cond_ref_of(x) is ok by definition */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (walk_state->op->common.aml_opcode ==
 			 AML_CONDITIONAL_REF_OF_OP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_OK;
 		}
 
@@ -354,6 +362,7 @@ acpi_ps_get_next_namepath(struct acpi_walk_state *walk_state,
 			   AML_PACKAGE_OP)
 			  || (arg->common.parent->common.aml_opcode ==
 			      AML_VARIABLE_PACKAGE_OP))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_OK;
 		}
 	}
@@ -361,6 +370,7 @@ acpi_ps_get_next_namepath(struct acpi_walk_state *walk_state,
 	/* Final exception check (may have been changed from code above) */
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR_NAMESPACE(path, status);
 
 		if ((walk_state->parse_flags & ACPI_PARSE_MODE_MASK) ==
@@ -368,6 +378,7 @@ acpi_ps_get_next_namepath(struct acpi_walk_state *walk_state,
 
 			/* Report a control method execution error */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_ds_method_error(status, walk_state);
 		}
 	}
@@ -407,6 +418,7 @@ acpi_ps_get_next_simple_arg(struct acpi_parse_state *parser_state,
 
 		/* Get 1 byte from the AML stream */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opcode = AML_BYTE_OP;
 		arg->common.value.integer = (u64) *aml;
 		length = 1;
@@ -416,6 +428,7 @@ acpi_ps_get_next_simple_arg(struct acpi_parse_state *parser_state,
 
 		/* Get 2 bytes from the AML stream */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opcode = AML_WORD_OP;
 		ACPI_MOVE_16_TO_64(&arg->common.value.integer, aml);
 		length = 2;
@@ -425,6 +438,7 @@ acpi_ps_get_next_simple_arg(struct acpi_parse_state *parser_state,
 
 		/* Get 4 bytes from the AML stream */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opcode = AML_DWORD_OP;
 		ACPI_MOVE_32_TO_64(&arg->common.value.integer, aml);
 		length = 4;
@@ -434,6 +448,7 @@ acpi_ps_get_next_simple_arg(struct acpi_parse_state *parser_state,
 
 		/* Get 8 bytes from the AML stream */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opcode = AML_QWORD_OP;
 		ACPI_MOVE_64_TO_64(&arg->common.value.integer, aml);
 		length = 8;
@@ -443,6 +458,7 @@ acpi_ps_get_next_simple_arg(struct acpi_parse_state *parser_state,
 
 		/* Get a pointer to the string, point past the string */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opcode = AML_STRING_OP;
 		arg->common.value.string = ACPI_CAST_PTR(char, aml);
 
@@ -465,6 +481,7 @@ acpi_ps_get_next_simple_arg(struct acpi_parse_state *parser_state,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Invalid ArgType 0x%X", arg_type));
 		return_VOID;
 	}
@@ -511,30 +528,35 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 	switch (ACPI_GET8(parser_state->aml)) {
 	case AML_FIELD_OFFSET_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opcode = AML_INT_RESERVEDFIELD_OP;
 		parser_state->aml++;
 		break;
 
 	case AML_FIELD_ACCESS_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opcode = AML_INT_ACCESSFIELD_OP;
 		parser_state->aml++;
 		break;
 
 	case AML_FIELD_CONNECTION_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opcode = AML_INT_CONNECTION_OP;
 		parser_state->aml++;
 		break;
 
 	case AML_FIELD_EXT_ACCESS_OP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opcode = AML_INT_EXTACCESSFIELD_OP;
 		parser_state->aml++;
 		break;
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opcode = AML_INT_NAMEDFIELD_OP;
 		break;
 	}
@@ -543,6 +565,7 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 
 	field = acpi_ps_alloc_op(opcode, aml);
 	if (!field) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_PTR(NULL);
 	}
 
@@ -599,6 +622,7 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 
 		/* Get the two bytes (Type/Attribute) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		access_type = ACPI_GET8(parser_state->aml);
 		parser_state->aml++;
 		access_attribute = ACPI_GET8(parser_state->aml);
@@ -610,6 +634,7 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 		/* This opcode has a third byte, access_length */
 
 		if (opcode == AML_INT_EXTACCESSFIELD_OP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			access_length = ACPI_GET8(parser_state->aml);
 			parser_state->aml++;
 
@@ -626,6 +651,7 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 		 */
 		aml = parser_state->aml;
 		if (ACPI_GET8(parser_state->aml) == AML_BUFFER_OP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			parser_state->aml++;
 
 			ASL_CV_CAPTURE_COMMENTS_ONLY(parser_state);
@@ -642,12 +668,14 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 				arg =
 				    acpi_ps_alloc_op(AML_INT_BYTELIST_OP, aml);
 				if (!arg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					acpi_ps_free_op(field);
 					return_PTR(NULL);
 				}
 
 				/* Get the actual buffer length argument */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				opcode = ACPI_GET8(parser_state->aml);
 				parser_state->aml++;
 
@@ -655,6 +683,7 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 				switch (opcode) {
 				case AML_BYTE_OP:	/* AML_BYTEDATA_ARG */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					buffer_length =
 					    ACPI_GET8(parser_state->aml);
 					parser_state->aml += 1;
@@ -662,6 +691,7 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 
 				case AML_WORD_OP:	/* AML_WORDDATA_ARG */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					buffer_length =
 					    ACPI_GET16(parser_state->aml);
 					parser_state->aml += 2;
@@ -669,6 +699,7 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 
 				case AML_DWORD_OP:	/* AML_DWORDATA_ARG */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					buffer_length =
 					    ACPI_GET32(parser_state->aml);
 					parser_state->aml += 4;
@@ -676,6 +707,7 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 
 				default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					buffer_length = 0;
 					break;
 				}
@@ -683,16 +715,20 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 				/* Fill in bytelist data */
 
 				ASL_CV_CAPTURE_COMMENTS_ONLY(parser_state);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				arg->named.value.size = buffer_length;
 				arg->named.data = parser_state->aml;
 			}
 
 			/* Skip to End of byte data */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			parser_state->aml = pkg_end;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			arg = acpi_ps_alloc_op(AML_INT_NAMEPATH_OP, aml);
 			if (!arg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ps_free_op(field);
 				return_PTR(NULL);
 			}
@@ -705,6 +741,7 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 
 		/* Link the buffer/namestring to parent (CONNECTION_OP) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ps_append_arg(field, arg);
 		break;
 
@@ -714,6 +751,7 @@ static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_PTR(field);
 }
 
@@ -762,6 +800,7 @@ acpi_ps_get_next_arg(struct acpi_walk_state *walk_state,
 
 		arg = acpi_ps_alloc_op(AML_BYTE_OP, parser_state->aml);
 		if (!arg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_NO_MEMORY);
 		}
 
@@ -785,14 +824,17 @@ acpi_ps_get_next_arg(struct acpi_walk_state *walk_state,
 			while (parser_state->aml < parser_state->pkg_end) {
 				field = acpi_ps_get_next_field(parser_state);
 				if (!field) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(AE_NO_MEMORY);
 				}
 
 				if (prev) {
 					prev->common.next = field;
 				} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					arg = field;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				prev = field;
 			}
 
@@ -811,6 +853,7 @@ acpi_ps_get_next_arg(struct acpi_walk_state *walk_state,
 			arg = acpi_ps_alloc_op(AML_INT_BYTELIST_OP,
 					       parser_state->aml);
 			if (!arg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(AE_NO_MEMORY);
 			}
 
@@ -835,6 +878,7 @@ acpi_ps_get_next_arg(struct acpi_walk_state *walk_state,
 				  acpi_ut_get_argument_type_name(arg_type),
 				  arg_type));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		subop = acpi_ps_peek_opcode(parser_state);
 		if (subop == 0 ||
 		    acpi_ps_is_leading_char(subop) ||
@@ -847,6 +891,7 @@ acpi_ps_get_next_arg(struct acpi_walk_state *walk_state,
 			    acpi_ps_alloc_op(AML_INT_NAMEPATH_OP,
 					     parser_state->aml);
 			if (!arg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(AE_NO_MEMORY);
 			}
 
@@ -857,6 +902,7 @@ acpi_ps_get_next_arg(struct acpi_walk_state *walk_state,
 		} else {
 			/* Single complex argument, nothing returned */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			walk_state->arg_count = 1;
 		}
 		break;
@@ -881,6 +927,7 @@ acpi_ps_get_next_arg(struct acpi_walk_state *walk_state,
 			    acpi_ps_alloc_op(AML_INT_NAMEPATH_OP,
 					     parser_state->aml);
 			if (!arg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(AE_NO_MEMORY);
 			}
 
@@ -890,6 +937,7 @@ acpi_ps_get_next_arg(struct acpi_walk_state *walk_state,
 						      ACPI_POSSIBLE_METHOD_CALL);
 
 			if (arg->common.aml_opcode == AML_INT_METHODCALL_OP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ps_free_op(arg);
 				arg = NULL;
 				walk_state->arg_count = 1;
@@ -928,6 +976,7 @@ acpi_ps_get_next_arg(struct acpi_walk_state *walk_state,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Invalid ArgType: 0x%X", arg_type));
 		status = AE_AML_OPERAND_TYPE;
 		break;
diff --git a/drivers/acpi/acpica/psloop.c b/drivers/acpi/acpica/psloop.c
index bb04dec..6388e30 100644
--- a/drivers/acpi/acpica/psloop.c
+++ b/drivers/acpi/acpica/psloop.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: psloop - Main AML parse loop
@@ -119,6 +121,7 @@ acpi_ps_get_arguments(struct acpi_walk_state *walk_state,
 						   op,
 						   ACPI_POSSIBLE_METHOD_CALL);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -154,6 +157,7 @@ acpi_ps_get_arguments(struct acpi_walk_state *walk_state,
 						 GET_CURRENT_ARG_TYPE
 						 (walk_state->arg_types), &arg);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 
@@ -194,6 +198,7 @@ acpi_ps_get_arguments(struct acpi_walk_state *walk_state,
 				 */
 				if (walk_state->pass_number ==
 				    ACPI_IMODE_LOAD_PASS1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					acpi_ps_link_module_code(op->common.
 								 parent,
 								 aml_op_start,
@@ -211,6 +216,7 @@ acpi_ps_get_arguments(struct acpi_walk_state *walk_state,
 
 				/* Skip body of if/else/while in pass 1 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				walk_state->parser_state.aml =
 				    walk_state->parser_state.pkg_end;
 				walk_state->arg_count = 0;
@@ -232,6 +238,7 @@ acpi_ps_get_arguments(struct acpi_walk_state *walk_state,
 								    aml_opcode);
 					if ((op_info->class ==
 					     AML_CLASS_EXECUTE) && (!arg)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						ACPI_WARNING((AE_INFO,
 							      "Unsupported module-level executable opcode "
 							      "0x%.2X at table offset 0x%.4X",
@@ -307,6 +314,7 @@ acpi_ps_get_arguments(struct acpi_walk_state *walk_state,
 		case AML_WHILE_OP:
 
 			if (walk_state->control_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				walk_state->control_state->control.package_end =
 				    walk_state->parser_state.pkg_end;
 			}
@@ -322,6 +330,7 @@ acpi_ps_get_arguments(struct acpi_walk_state *walk_state,
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -356,6 +365,7 @@ acpi_ps_link_module_code(union acpi_parse_object *parent_op,
 	/* Get the tail of the list */
 
 	prev = next = acpi_gbl_module_code_list;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (next) {
 		prev = next;
 		next = next->method.mutex;
@@ -436,6 +446,7 @@ acpi_status acpi_ps_parse_loop(struct acpi_walk_state *walk_state)
 	ACPI_FUNCTION_TRACE_PTR(ps_parse_loop, walk_state);
 
 	if (walk_state->descending_callback == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -473,11 +484,14 @@ acpi_status acpi_ps_parse_loop(struct acpi_walk_state *walk_state)
 				if (ACPI_FAILURE(status)
 				    && ((status & AE_CODE_MASK) !=
 					AE_CODE_CONTROL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (status == AE_AML_NO_RETURN_VALUE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						ACPI_EXCEPTION((AE_INFO, status,
 								"Invoked method did not return a value"));
 					}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ACPI_EXCEPTION((AE_INFO, status,
 							"GetPredicate Failed"));
 					return_ACPI_STATUS(status);
@@ -497,6 +511,7 @@ acpi_status acpi_ps_parse_loop(struct acpi_walk_state *walk_state)
 
 			/* We were in the middle of an op */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			op = walk_state->prev_op;
 			walk_state->arg_types = walk_state->prev_arg_types;
 		}
@@ -508,6 +523,7 @@ acpi_status acpi_ps_parse_loop(struct acpi_walk_state *walk_state)
 	while ((parser_state->aml < parser_state->aml_end) || (op)) {
 		ASL_CV_CAPTURE_COMMENTS(walk_state);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		aml_op_start = parser_state->aml;
 		if (!op) {
 			status =
@@ -518,10 +534,12 @@ acpi_status acpi_ps_parse_loop(struct acpi_walk_state *walk_state)
 				}
 
 				if (status == AE_CTRL_PARSE_PENDING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					status = AE_OK;
 				}
 
 				if (status == AE_CTRL_TERMINATE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status);
 				}
 
@@ -529,6 +547,7 @@ acpi_status acpi_ps_parse_loop(struct acpi_walk_state *walk_state)
 				    acpi_ps_complete_op(walk_state, &op,
 							status);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status);
 				}
 
@@ -571,6 +590,7 @@ acpi_status acpi_ps_parse_loop(struct acpi_walk_state *walk_state)
 				    acpi_ps_complete_op(walk_state, &op,
 							status);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status);
 				}
 
@@ -597,6 +617,7 @@ acpi_status acpi_ps_parse_loop(struct acpi_walk_state *walk_state)
 				    acpi_ps_complete_op(walk_state, &op,
 							status);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status);
 				}
 
@@ -660,12 +681,14 @@ acpi_status acpi_ps_parse_loop(struct acpi_walk_state *walk_state)
 			status =
 			    acpi_ps_next_parse_state(walk_state, op, status);
 			if (status == AE_CTRL_PENDING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_OK;
 			}
 		}
 
 		status = acpi_ps_complete_op(walk_state, &op, status);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
diff --git a/drivers/acpi/acpica/psobject.c b/drivers/acpi/acpica/psobject.c
index 0bef6df..85432d1 100644
--- a/drivers/acpi/acpica/psobject.c
+++ b/drivers/acpi/acpica/psobject.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: psobject - Support for parse objects
@@ -97,7 +99,9 @@ static acpi_status acpi_ps_get_aml_opcode(struct acpi_walk_state *walk_state)
 
 		/* The opcode is unrecognized. Complain and skip unknown opcodes */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (walk_state->pass_number == 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			aml_offset = (u32)ACPI_PTR_DIFF(walk_state->aml,
 							walk_state->
 							parser_state.aml_start);
@@ -146,11 +150,14 @@ static acpi_status acpi_ps_get_aml_opcode(struct acpi_walk_state *walk_state)
 
 		/* Increment past one-byte or two-byte opcode */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		walk_state->parser_state.aml++;
 		if (walk_state->opcode > 0xFF) {	/* Can only happen if first byte is 0x5B */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			walk_state->parser_state.aml++;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_CTRL_PARSE_CONTINUE);
 
 	default:
@@ -163,6 +170,7 @@ static acpi_status acpi_ps_get_aml_opcode(struct acpi_walk_state *walk_state)
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -209,6 +217,7 @@ acpi_ps_build_named_op(struct acpi_walk_state *walk_state,
 					 GET_CURRENT_ARG_TYPE(walk_state->
 							      arg_types), &arg);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -232,6 +241,7 @@ acpi_ps_build_named_op(struct acpi_walk_state *walk_state,
 	 * Make sure that we found a NAME and didn't run out of arguments
 	 */
 	if (!GET_CURRENT_ARG_TYPE(walk_state->arg_types)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_AML_NO_OPERAND);
 	}
 
@@ -247,22 +257,29 @@ acpi_ps_build_named_op(struct acpi_walk_state *walk_state,
 
 	status = walk_state->descending_callback(walk_state, op);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status != AE_CTRL_TERMINATE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status,
 					"During name lookup/catalog"));
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
 	if (!*op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_CTRL_PARSE_CONTINUE);
 	}
 
 	status = acpi_ps_next_parse_state(walk_state, *op, status);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status == AE_CTRL_PENDING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_CTRL_PARSE_PENDING;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -308,6 +325,7 @@ acpi_ps_build_named_op(struct acpi_walk_state *walk_state,
 		(*op)->named.length = 0;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -340,9 +358,11 @@ acpi_ps_create_op(struct acpi_walk_state *walk_state,
 
 	status = acpi_ps_get_aml_opcode(walk_state);
 	if (status == AE_CTRL_PARSE_CONTINUE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_CTRL_PARSE_CONTINUE);
 	}
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -351,6 +371,7 @@ acpi_ps_create_op(struct acpi_walk_state *walk_state,
 	walk_state->op_info = acpi_ps_get_opcode_info(walk_state->opcode);
 	op = acpi_ps_alloc_op(walk_state->opcode, aml_op_start);
 	if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -386,6 +407,7 @@ acpi_ps_create_op(struct acpi_walk_state *walk_state,
 		}
 #endif
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -449,10 +471,12 @@ acpi_ps_create_op(struct acpi_walk_state *walk_state,
 		status = walk_state->descending_callback(walk_state, &op);
 		status = acpi_ps_next_parse_state(walk_state, op, status);
 		if (status == AE_CTRL_PENDING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_CTRL_PARSE_PENDING;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -487,6 +511,7 @@ acpi_ps_complete_op(struct acpi_walk_state *walk_state,
 
 	status2 = acpi_ps_complete_this_op(walk_state, *op);
 	if (ACPI_FAILURE(status2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status2);
 	}
 
@@ -523,10 +548,12 @@ acpi_ps_complete_op(struct acpi_walk_state *walk_state,
 
 			status2 = acpi_ps_complete_this_op(walk_state, *op);
 			if (ACPI_FAILURE(status2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status2);
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_OK;
 		break;
 
@@ -535,7 +562,9 @@ acpi_ps_complete_op(struct acpi_walk_state *walk_state,
 
 		/* Pop off scopes until we find the While */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (!(*op) || ((*op)->common.aml_opcode != AML_WHILE_OP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ps_pop_scope(&(walk_state->parser_state), op,
 					  &walk_state->arg_types,
 					  &walk_state->arg_count);
@@ -543,6 +572,7 @@ acpi_ps_complete_op(struct acpi_walk_state *walk_state,
 
 		/* Close this iteration of the While loop */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		walk_state->op = *op;
 		walk_state->op_info =
 		    acpi_ps_get_opcode_info((*op)->common.aml_opcode);
@@ -553,9 +583,11 @@ acpi_ps_complete_op(struct acpi_walk_state *walk_state,
 
 		status2 = acpi_ps_complete_this_op(walk_state, *op);
 		if (ACPI_FAILURE(status2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status2);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_OK;
 		break;
 
@@ -567,6 +599,7 @@ acpi_ps_complete_op(struct acpi_walk_state *walk_state,
 				status2 =
 				    acpi_ps_complete_this_op(walk_state, *op);
 				if (ACPI_FAILURE(status2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status2);
 				}
 
@@ -581,23 +614,28 @@ acpi_ps_complete_op(struct acpi_walk_state *walk_state,
 
 		} while (*op);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 
 	default:		/* All other non-AE_OK status */
 
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (*op) {
 				status2 =
 				    acpi_ps_complete_this_op(walk_state, *op);
 				if (ACPI_FAILURE(status2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status2);
 				}
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ps_pop_scope(&(walk_state->parser_state), op,
 					  &walk_state->arg_types,
 					  &walk_state->arg_count);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (*op);
 
 #if 0
@@ -626,6 +664,7 @@ acpi_ps_complete_op(struct acpi_walk_state *walk_state,
 		*op = NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -662,7 +701,9 @@ acpi_ps_complete_final_op(struct acpi_walk_state *walk_state,
 			  op));
 	do {
 		if (op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (walk_state->ascending_callback != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				walk_state->op = op;
 				walk_state->op_info =
 				    acpi_ps_get_opcode_info(op->common.
@@ -679,26 +720,32 @@ acpi_ps_complete_final_op(struct acpi_walk_state *walk_state,
 					    acpi_ps_complete_op(walk_state, &op,
 								AE_OK);
 					if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						return_ACPI_STATUS(status);
 					}
 				}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (status == AE_CTRL_TERMINATE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					status = AE_OK;
 
 					/* Clean up */
 					do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						if (op) {
 							status2 =
 							    acpi_ps_complete_this_op
 							    (walk_state, op);
 							if (ACPI_FAILURE
 							    (status2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 								return_ACPI_STATUS
 								    (status2);
 							}
 						}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						acpi_ps_pop_scope(&
 								  (walk_state->
 								   parser_state),
@@ -708,11 +755,14 @@ acpi_ps_complete_final_op(struct acpi_walk_state *walk_state,
 								  &walk_state->
 								  arg_count);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					} while (op);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return_ACPI_STATUS(status);
 				}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				else if (ACPI_FAILURE(status)) {
 
 					/* First error is most important */
@@ -724,8 +774,10 @@ acpi_ps_complete_final_op(struct acpi_walk_state *walk_state,
 				}
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status2 = acpi_ps_complete_this_op(walk_state, op);
 			if (ACPI_FAILURE(status2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status2);
 			}
 		}
@@ -736,5 +788,6 @@ acpi_ps_complete_final_op(struct acpi_walk_state *walk_state,
 
 	} while (op);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
diff --git a/drivers/acpi/acpica/psopinfo.c b/drivers/acpi/acpica/psopinfo.c
index eff2295..401868c 100644
--- a/drivers/acpi/acpica/psopinfo.c
+++ b/drivers/acpi/acpica/psopinfo.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: psopinfo - AML opcode information functions and dispatch tables
@@ -142,6 +144,7 @@ const struct acpi_opcode_info *acpi_ps_get_opcode_info(u16 opcode)
 
 	ACPI_DEBUG_PRINT((ACPI_DB_EXEC, "%s [%4.4X]\n", opcode_name, opcode));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (&acpi_gbl_aml_op_info[_UNK]);
 }
 
@@ -195,6 +198,7 @@ u8 acpi_ps_get_argument_count(u32 op_type)
 		return (acpi_gbl_argument_count[op_type]);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (0);
 }
 
diff --git a/drivers/acpi/acpica/psparse.c b/drivers/acpi/acpica/psparse.c
index ac88319..66b0b22 100644
--- a/drivers/acpi/acpica/psparse.c
+++ b/drivers/acpi/acpica/psparse.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: psparse - Parser top level AML parse routines
@@ -78,6 +80,7 @@ u32 acpi_ps_get_opcode_size(u32 opcode)
 	/* Extended (2-byte) opcode if > 255 */
 
 	if (opcode > 0x00FF) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (2);
 	}
 
@@ -110,6 +113,7 @@ u16 acpi_ps_peek_opcode(struct acpi_parse_state * parser_state)
 
 		/* Extended opcode, get the second opcode byte */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		aml++;
 		opcode = (u16) ((opcode << 8) | ACPI_GET8(aml));
 	}
@@ -145,6 +149,7 @@ acpi_ps_complete_this_op(struct acpi_walk_state *walk_state,
 	/* Check for null Op, can happen if AML code is corrupt */
 
 	if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);	/* OK for now */
 	}
 
@@ -155,6 +160,7 @@ acpi_ps_complete_this_op(struct acpi_walk_state *walk_state,
 	if (((walk_state->parse_flags & ACPI_PARSE_TREE_MASK) !=
 	     ACPI_PARSE_DELETE_TREE)
 	    || (walk_state->op_info->class == AML_CLASS_ARGUMENT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -191,6 +197,7 @@ acpi_ps_complete_this_op(struct acpi_walk_state *walk_state,
 			    acpi_ps_alloc_op(AML_INT_RETURN_VALUE_OP,
 					     op->common.aml);
 			if (!replacement_op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_NO_MEMORY;
 			}
 			break;
@@ -216,6 +223,7 @@ acpi_ps_complete_this_op(struct acpi_walk_state *walk_state,
 				    acpi_ps_alloc_op(AML_INT_RETURN_VALUE_OP,
 						     op->common.aml);
 				if (!replacement_op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					status = AE_NO_MEMORY;
 				}
 			} else
@@ -232,6 +240,7 @@ acpi_ps_complete_this_op(struct acpi_walk_state *walk_state,
 							     aml_opcode,
 							     op->common.aml);
 					if (!replacement_op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						status = AE_NO_MEMORY;
 					} else {
 						replacement_op->named.data =
@@ -249,6 +258,7 @@ acpi_ps_complete_this_op(struct acpi_walk_state *walk_state,
 			    acpi_ps_alloc_op(AML_INT_RETURN_VALUE_OP,
 					     op->common.aml);
 			if (!replacement_op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_NO_MEMORY;
 			}
 		}
@@ -300,6 +310,7 @@ acpi_ps_complete_this_op(struct acpi_walk_state *walk_state,
 						next = NULL;
 					}
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				prev = next;
 			}
 	}
@@ -349,6 +360,7 @@ acpi_ps_next_parse_state(struct acpi_walk_state *walk_state,
 
 	case AE_CTRL_BREAK:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parser_state->aml = walk_state->aml_last_while;
 		walk_state->control_state->common.value = FALSE;
 		status = AE_CTRL_BREAK;
@@ -356,12 +368,14 @@ acpi_ps_next_parse_state(struct acpi_walk_state *walk_state,
 
 	case AE_CTRL_CONTINUE:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parser_state->aml = walk_state->aml_last_while;
 		status = AE_CTRL_CONTINUE;
 		break;
 
 	case AE_CTRL_PENDING:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parser_state->aml = walk_state->aml_last_while;
 		break;
 
@@ -402,6 +416,7 @@ acpi_ps_next_parse_state(struct acpi_walk_state *walk_state,
 
 		/* A method call (invocation) -- transfer control */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_CTRL_TRANSFER;
 		walk_state->prev_op = op;
 		walk_state->method_call_op = op;
@@ -416,8 +431,10 @@ acpi_ps_next_parse_state(struct acpi_walk_state *walk_state,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = callback_status;
 		if ((callback_status & AE_CODE_MASK) == AE_CODE_CONTROL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_OK;
 		}
 		break;
@@ -454,6 +471,7 @@ acpi_status acpi_ps_parse_aml(struct acpi_walk_state *walk_state)
 			  walk_state->parser_state.aml_size));
 
 	if (!walk_state->parser_state.aml) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NULL_OBJECT);
 	}
 
@@ -461,15 +479,18 @@ acpi_status acpi_ps_parse_aml(struct acpi_walk_state *walk_state)
 
 	thread = acpi_ut_create_thread_state();
 	if (!thread) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (walk_state->method_desc) {
 
 			/* Executing a control method - additional cleanup */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ds_terminate_control_method(walk_state->
 							 method_desc,
 							 walk_state);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ds_delete_walk_state(walk_state);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
@@ -533,22 +554,27 @@ acpi_status acpi_ps_parse_aml(struct acpi_walk_state *walk_state)
 			walk_state = acpi_ds_get_current_walk_state(thread);
 			continue;
 		} else if (status == AE_CTRL_TERMINATE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_OK;
 		} else if ((status != AE_OK) && (walk_state->method_desc)) {
 
 			/* Either the method parse or actual execution failed */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ex_exit_interpreter();
 			if (status == AE_ABORT_METHOD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ns_print_node_pathname(walk_state->
 							    method_node,
 							    "Method aborted:");
 				acpi_os_printf("\n");
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR_METHOD
 				    ("Method parse/execution failed",
 				     walk_state->method_node, NULL, status);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ex_enter_interpreter();
 
 			/* Check for possible multi-thread reentrancy problem */
@@ -623,6 +649,7 @@ acpi_status acpi_ps_parse_aml(struct acpi_walk_state *walk_state)
 						    ((u64) 0);
 						if (!previous_walk_state->
 						    implicit_return_obj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 							return_ACPI_STATUS
 							    (AE_NO_MEMORY);
 						}
@@ -655,6 +682,7 @@ acpi_status acpi_ps_parse_aml(struct acpi_walk_state *walk_state)
 			} else {
 				/* On error, delete any return object or implicit return */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ut_remove_reference(previous_walk_state->
 							 return_desc);
 				acpi_ds_clear_implicit_return
@@ -681,6 +709,7 @@ acpi_status acpi_ps_parse_aml(struct acpi_walk_state *walk_state)
 
 				/* Caller doesn't want it, must delete it */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ut_remove_reference(previous_walk_state->
 							 return_desc);
 			}
diff --git a/drivers/acpi/acpica/psscope.c b/drivers/acpi/acpica/psscope.c
index 22d7f1d..2cab747 100644
--- a/drivers/acpi/acpica/psscope.c
+++ b/drivers/acpi/acpica/psscope.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: psscope - Parser scope stack management routines
@@ -111,6 +113,7 @@ acpi_ps_init_scope(struct acpi_parse_state * parser_state,
 
 	scope = acpi_ut_create_generic_state();
 	if (!scope) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -152,6 +155,7 @@ acpi_ps_push_scope(struct acpi_parse_state *parser_state,
 
 	scope = acpi_ut_create_generic_state();
 	if (!scope) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -176,6 +180,7 @@ acpi_ps_push_scope(struct acpi_parse_state *parser_state,
 		scope->parse_scope.arg_end = ACPI_TO_POINTER(ACPI_MAX_PTR);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -251,6 +256,7 @@ void acpi_ps_cleanup_scope(struct acpi_parse_state *parser_state)
 	ACPI_FUNCTION_TRACE_PTR(ps_cleanup_scope, parser_state);
 
 	if (!parser_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -261,5 +267,6 @@ void acpi_ps_cleanup_scope(struct acpi_parse_state *parser_state)
 		acpi_ut_delete_generic_state(scope);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_VOID;
 }
diff --git a/drivers/acpi/acpica/pstree.c b/drivers/acpi/acpica/pstree.c
index c06d6e2..bd44e71 100644
--- a/drivers/acpi/acpica/pstree.c
+++ b/drivers/acpi/acpica/pstree.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: pstree - Parser op tree manipulation/traversal/search
@@ -88,6 +90,7 @@ union acpi_parse_object *acpi_ps_get_arg(union acpi_parse_object *op, u32 argn)
 
 		/* Invalid opcode or ASCII character */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
@@ -97,6 +100,7 @@ union acpi_parse_object *acpi_ps_get_arg(union acpi_parse_object *op, u32 argn)
 
 		/* Has no linked argument objects */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
@@ -108,6 +112,7 @@ union acpi_parse_object *acpi_ps_get_arg(union acpi_parse_object *op, u32 argn)
 		arg = arg->common.next;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (arg);
 }
 
@@ -133,6 +138,7 @@ acpi_ps_append_arg(union acpi_parse_object *op, union acpi_parse_object *arg)
 	ACPI_FUNCTION_TRACE(ps_append_arg);
 
 	if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -143,6 +149,7 @@ acpi_ps_append_arg(union acpi_parse_object *op, union acpi_parse_object *arg)
 
 		/* Invalid opcode */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Invalid AML Opcode: 0x%2.2X",
 			    op->common.aml_opcode));
 		return_VOID;
@@ -154,6 +161,7 @@ acpi_ps_append_arg(union acpi_parse_object *op, union acpi_parse_object *arg)
 
 		/* Has no linked argument objects */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -163,8 +171,10 @@ acpi_ps_append_arg(union acpi_parse_object *op, union acpi_parse_object *arg)
 
 		/* Append to existing argument list */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prev_arg = op->common.value.arg;
 		while (prev_arg->common.next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			prev_arg = prev_arg->common.next;
 		}
 		prev_arg->common.next = arg;
@@ -183,6 +193,7 @@ acpi_ps_append_arg(union acpi_parse_object *op, union acpi_parse_object *arg)
 		op->common.arg_list_length++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_VOID;
 }
 
@@ -210,6 +221,7 @@ union acpi_parse_object *acpi_ps_get_depth_next(union acpi_parse_object *origin,
 	ACPI_FUNCTION_ENTRY();
 
 	if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
diff --git a/drivers/acpi/acpica/psutils.c b/drivers/acpi/acpica/psutils.c
index 0264276..0ebe880 100644
--- a/drivers/acpi/acpica/psutils.c
+++ b/drivers/acpi/acpica/psutils.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: psutils - Parser miscellaneous utilities (Parser only)
@@ -67,6 +69,7 @@ union acpi_parse_object *acpi_ps_create_scope_op(u8 *aml)
 
 	scope_op = acpi_ps_alloc_op(AML_SCOPE_OP, aml);
 	if (!scope_op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
@@ -127,10 +130,13 @@ union acpi_parse_object *acpi_ps_alloc_op(u16 opcode, u8 *aml)
 	/* Determine type of parse_op required */
 
 	if (op_info->flags & AML_DEFER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = ACPI_PARSEOP_DEFERRED;
 	} else if (op_info->flags & AML_NAMED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = ACPI_PARSEOP_NAMED_OBJECT;
 	} else if (opcode == AML_INT_BYTELIST_OP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = ACPI_PARSEOP_BYTELIST;
 	}
 
@@ -150,6 +156,7 @@ union acpi_parse_object *acpi_ps_alloc_op(u16 opcode, u8 *aml)
 	/* Initialize the Op */
 
 	if (op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ps_init_op(op, opcode);
 		op->common.aml = aml;
 		op->common.flags = flags;
@@ -160,6 +167,7 @@ union acpi_parse_object *acpi_ps_alloc_op(u16 opcode, u8 *aml)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (gbl_capture_comments) {
 		ASL_CV_TRANSFER_COMMENTS(op);
 	}
@@ -185,6 +193,7 @@ void acpi_ps_free_op(union acpi_parse_object *op)
 	ACPI_FUNCTION_NAME(ps_free_op);
 
 	ASL_CV_CLEAR_OP_COMMENTS(op);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (op->common.aml_opcode == AML_INT_RETURN_VALUE_OP) {
 		ACPI_DEBUG_PRINT((ACPI_DB_ALLOCATIONS,
 				  "Free retval op: %p\n", op));
@@ -221,6 +230,7 @@ u32 acpi_ps_get_name(union acpi_parse_object * op)
 
 	/* The "generic" object has no name associated with it */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (op->common.flags & ACPI_PARSEOP_GENERIC) {
 		return (0);
 	}
@@ -239,6 +249,7 @@ void acpi_ps_set_name(union acpi_parse_object *op, u32 name)
 	/* The "generic" object has no name associated with it */
 
 	if (op->common.flags & ACPI_PARSEOP_GENERIC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
diff --git a/drivers/acpi/acpica/pswalk.c b/drivers/acpi/acpica/pswalk.c
index 22a37c8..a7e5d3a 100644
--- a/drivers/acpi/acpica/pswalk.c
+++ b/drivers/acpi/acpica/pswalk.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: pswalk - Parser routines to walk parsed op tree(s)
@@ -82,6 +84,7 @@ void acpi_ps_delete_parse_tree(union acpi_parse_object *subtree_root)
 
 				/* Still going downward in tree (Op is not completed yet) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				op = next;
 				continue;
 			}
@@ -97,15 +100,19 @@ void acpi_ps_delete_parse_tree(union acpi_parse_object *subtree_root)
 		/* If we are back to the starting point, the walk is complete. */
 
 		if (op == subtree_root) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_VOID;
 		}
 
 		if (next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			op = next;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			op = parent;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_VOID;
 }
diff --git a/drivers/acpi/acpica/psxface.c b/drivers/acpi/acpica/psxface.c
index c88a681..e3700b0 100644
--- a/drivers/acpi/acpica/psxface.c
+++ b/drivers/acpi/acpica/psxface.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: psxface - Parser external interfaces
@@ -79,6 +81,7 @@ acpi_debug_trace(const char *name, u32 debug_level, u32 debug_layer, u32 flags)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -130,6 +133,7 @@ acpi_status acpi_ps_execute_method(struct acpi_evaluate_info *info)
 	/* Validate the Info and method Node */
 
 	if (!info || !info->node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NULL_ENTRY);
 	}
 
@@ -138,6 +142,7 @@ acpi_status acpi_ps_execute_method(struct acpi_evaluate_info *info)
 	status =
 	    acpi_ds_begin_method_execution(info->node, info->obj_desc, NULL);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -157,6 +162,7 @@ acpi_status acpi_ps_execute_method(struct acpi_evaluate_info *info)
 
 	op = acpi_ps_create_scope_op(info->obj_desc->method.aml_start);
 	if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -168,6 +174,7 @@ acpi_status acpi_ps_execute_method(struct acpi_evaluate_info *info)
 	    acpi_ds_create_walk_state(info->obj_desc->method.owner_id, NULL,
 				      NULL, NULL);
 	if (!walk_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -177,11 +184,13 @@ acpi_status acpi_ps_execute_method(struct acpi_evaluate_info *info)
 				       info->obj_desc->method.aml_length, info,
 				       info->pass_number);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ds_delete_walk_state(walk_state);
 		goto cleanup;
 	}
 
 	if (info->obj_desc->method.info_flags & ACPI_METHOD_MODULE_LEVEL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		walk_state->parse_flags |= ACPI_PARSE_MODULE_LEVEL;
 	}
 
@@ -210,6 +219,7 @@ acpi_status acpi_ps_execute_method(struct acpi_evaluate_info *info)
 		walk_state->implicit_return_obj =
 		    acpi_ut_create_integer_object((u64) 0);
 		if (!walk_state->implicit_return_obj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 			acpi_ds_delete_walk_state(walk_state);
 			goto cleanup;
@@ -232,6 +242,7 @@ acpi_status acpi_ps_execute_method(struct acpi_evaluate_info *info)
 	/* Exit now if error above */
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -244,9 +255,11 @@ acpi_status acpi_ps_execute_method(struct acpi_evaluate_info *info)
 				  info->return_object));
 		ACPI_DUMP_STACK_ENTRY(info->return_object);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_CTRL_RETURN_VALUE;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -279,6 +292,7 @@ acpi_status acpi_ps_execute_table(struct acpi_evaluate_info *info)
 
 	op = acpi_ps_create_scope_op(info->obj_desc->method.aml_start);
 	if (!op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
diff --git a/drivers/acpi/acpica/rsaddr.c b/drivers/acpi/acpica/rsaddr.c
index a131a28..8aa585e 100644
--- a/drivers/acpi/acpica/rsaddr.c
+++ b/drivers/acpi/acpica/rsaddr.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: rsaddr - Address resource descriptors (16/32/64)
@@ -314,6 +316,7 @@ acpi_rs_get_address_common(struct acpi_resource *resource,
 
 	if ((aml->address.resource_type > 2) &&
 	    (aml->address.resource_type < 0xC0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
@@ -337,6 +340,7 @@ acpi_rs_get_address_common(struct acpi_resource *resource,
 		    aml->address.specific_flags;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (TRUE);
 }
 
@@ -362,6 +366,7 @@ acpi_rs_set_address_common(union aml_resource *aml,
 
 	/* Set the Resource Type and General Flags */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	(void)acpi_rs_convert_resource_to_aml(resource, aml,
 					      acpi_rs_convert_general_flags);
 
diff --git a/drivers/acpi/acpica/rscalc.c b/drivers/acpi/acpica/rscalc.c
index 659fb71..680e06c 100644
--- a/drivers/acpi/acpica/rscalc.c
+++ b/drivers/acpi/acpica/rscalc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: rscalc - Calculate stream and list lengths
@@ -112,9 +114,11 @@ acpi_rs_struct_option_length(struct acpi_resource_source *resource_source)
 	 * resource_source_index (1).
 	 */
 	if (resource_source->string_ptr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ((acpi_rs_length)(resource_source->string_length + 1));
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (0);
 }
 
@@ -159,6 +163,7 @@ acpi_rs_stream_option_length(u32 resource_length,
 
 		/* Compute the length of the optional string */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		string_length =
 		    resource_length - minimum_aml_resource_length - 1;
 	}
@@ -205,12 +210,14 @@ acpi_rs_get_aml_length(struct acpi_resource *resource,
 		/* Validate the descriptor type */
 
 		if (resource->type > ACPI_RESOURCE_TYPE_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_AML_INVALID_RESOURCE_TYPE);
 		}
 
 		/* Sanity check the length. It must not be zero, or we loop forever */
 
 		if (!resource->length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_AML_BAD_RESOURCE_LENGTH);
 		}
 
@@ -227,7 +234,9 @@ acpi_rs_get_aml_length(struct acpi_resource *resource,
 
 			/* Length can be 3 or 2 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (resource->data.irq.descriptor_length == 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				total_size--;
 			}
 			break;
@@ -236,7 +245,9 @@ acpi_rs_get_aml_length(struct acpi_resource *resource,
 
 			/* Length can be 1 or 0 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (resource->data.irq.descriptor_length == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				total_size--;
 			}
 			break;
@@ -252,12 +263,14 @@ acpi_rs_get_aml_length(struct acpi_resource *resource,
 
 				/* Base size of a Large resource descriptor */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				total_size =
 				    sizeof(struct aml_resource_large_header);
 			}
 
 			/* Add the size of the vendor-specific data */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			total_size = (acpi_rs_length)
 			    (total_size + resource->data.vendor.byte_length);
 			break;
@@ -329,6 +342,7 @@ acpi_rs_get_aml_length(struct acpi_resource *resource,
 
 		case ACPI_RESOURCE_TYPE_GPIO:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			total_size = (acpi_rs_length)(total_size +
 						      (resource->data.gpio.
 						       pin_table_length * 2) +
@@ -342,6 +356,7 @@ acpi_rs_get_aml_length(struct acpi_resource *resource,
 
 		case ACPI_RESOURCE_TYPE_PIN_FUNCTION:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			total_size = (acpi_rs_length)(total_size +
 						      (resource->data.
 						       pin_function.
@@ -358,6 +373,7 @@ acpi_rs_get_aml_length(struct acpi_resource *resource,
 
 		case ACPI_RESOURCE_TYPE_SERIAL_BUS:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			total_size =
 			    acpi_gbl_aml_resource_serial_bus_sizes[resource->
 								   data.
@@ -377,6 +393,7 @@ acpi_rs_get_aml_length(struct acpi_resource *resource,
 
 		case ACPI_RESOURCE_TYPE_PIN_CONFIG:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			total_size = (acpi_rs_length)(total_size +
 						      (resource->data.
 						       pin_config.
@@ -391,6 +408,7 @@ acpi_rs_get_aml_length(struct acpi_resource *resource,
 
 		case ACPI_RESOURCE_TYPE_PIN_GROUP:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			total_size = (acpi_rs_length)(total_size +
 						      (resource->data.pin_group.
 						       pin_table_length * 2) +
@@ -404,6 +422,7 @@ acpi_rs_get_aml_length(struct acpi_resource *resource,
 
 		case ACPI_RESOURCE_TYPE_PIN_GROUP_FUNCTION:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			total_size = (acpi_rs_length)(total_size +
 						      resource->data.
 						      pin_group_function.
@@ -421,6 +440,7 @@ acpi_rs_get_aml_length(struct acpi_resource *resource,
 
 		case ACPI_RESOURCE_TYPE_PIN_GROUP_CONFIG:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			total_size = (acpi_rs_length)(total_size +
 						      resource->data.
 						      pin_group_config.
@@ -454,6 +474,7 @@ acpi_rs_get_aml_length(struct acpi_resource *resource,
 
 	/* Did not find an end_tag resource descriptor */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_AML_NO_RESOURCE_END_TAG);
 }
 
@@ -510,6 +531,7 @@ acpi_rs_get_list_length(u8 *aml_buffer,
 			return_ACPI_STATUS(status);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		aml_resource = (void *)aml_buffer;
 
 		/* Get the resource length and base (minimum) AML size */
diff --git a/drivers/acpi/acpica/rscreate.c b/drivers/acpi/acpica/rscreate.c
index f72ff0b..463433d 100644
--- a/drivers/acpi/acpica/rscreate.c
+++ b/drivers/acpi/acpica/rscreate.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: rscreate - Create resource lists/tables
@@ -85,6 +87,7 @@ acpi_buffer_to_resource(u8 *aml_buffer,
 	    acpi_rs_get_list_length(aml_buffer, aml_buffer_length,
 				    &list_size_needed);
 	if (status == AE_AML_NO_RESOURCE_END_TAG) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_OK;
 	}
 	if (ACPI_FAILURE(status)) {
@@ -165,6 +168,7 @@ acpi_rs_create_resource_list(union acpi_operand_object *aml_buffer,
 	ACPI_DEBUG_PRINT((ACPI_DB_INFO, "Status=%X ListSizeNeeded=%X\n",
 			  status, (u32) list_size_needed));
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -237,6 +241,7 @@ acpi_rs_create_pci_routing_table(union acpi_operand_object *package_object,
 	    acpi_rs_get_pci_routing_table_length(package_object,
 						 &buffer_size_needed);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -247,6 +252,7 @@ acpi_rs_create_pci_routing_table(union acpi_operand_object *package_object,
 
 	status = acpi_ut_initialize_buffer(output_buffer, buffer_size_needed);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -281,6 +287,7 @@ acpi_rs_create_pci_routing_table(union acpi_operand_object *package_object,
 		/* Each subpackage must be of length 4 */
 
 		if ((*top_object_list)->package.count != 4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "(PRT[%u]) Need package of length 4, found length %u",
 				    index, (*top_object_list)->package.count));
@@ -298,6 +305,7 @@ acpi_rs_create_pci_routing_table(union acpi_operand_object *package_object,
 
 		obj_desc = sub_object_list[0];
 		if (!obj_desc || obj_desc->common.type != ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "(PRT[%u].Address) Need Integer, found %s",
 				    index,
@@ -311,6 +319,7 @@ acpi_rs_create_pci_routing_table(union acpi_operand_object *package_object,
 
 		obj_desc = sub_object_list[1];
 		if (!obj_desc || obj_desc->common.type != ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "(PRT[%u].Pin) Need Integer, found %s",
 				    index,
@@ -331,6 +340,7 @@ acpi_rs_create_pci_routing_table(union acpi_operand_object *package_object,
 
 				if (obj_desc->reference.class !=
 				    ACPI_REFCLASS_NAME) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ACPI_ERROR((AE_INFO,
 						    "(PRT[%u].Source) Need name, found Reference Class 0x%X",
 						    index,
@@ -357,6 +367,7 @@ acpi_rs_create_pci_routing_table(union acpi_operand_object *package_object,
 
 			case ACPI_TYPE_STRING:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				strcpy(user_prt->source,
 				       obj_desc->string.pointer);
 
@@ -379,6 +390,7 @@ acpi_rs_create_pci_routing_table(union acpi_operand_object *package_object,
 
 			default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "(PRT[%u].Source) Need Ref/String/Integer, found %s",
 					    index,
@@ -397,6 +409,7 @@ acpi_rs_create_pci_routing_table(union acpi_operand_object *package_object,
 
 		obj_desc = sub_object_list[3];
 		if (!obj_desc || obj_desc->common.type != ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "(PRT[%u].SourceIndex) Need Integer, found %s",
 				    index,
@@ -413,6 +426,7 @@ acpi_rs_create_pci_routing_table(union acpi_operand_object *package_object,
 
 	ACPI_DEBUG_PRINT((ACPI_DB_INFO, "OutputBuffer %p Length %X\n",
 			  output_buffer->pointer, (u32) output_buffer->length));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -456,6 +470,7 @@ acpi_rs_create_aml_resources(struct acpi_buffer *resource_list,
 	ACPI_DEBUG_PRINT((ACPI_DB_INFO, "AmlSizeNeeded=%X, %s\n",
 			  (u32)aml_size_needed, acpi_format_exception(status)));
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -463,6 +478,7 @@ acpi_rs_create_aml_resources(struct acpi_buffer *resource_list,
 
 	status = acpi_ut_initialize_buffer(output_buffer, aml_size_needed);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -472,6 +488,7 @@ acpi_rs_create_aml_resources(struct acpi_buffer *resource_list,
 						  aml_size_needed,
 						  output_buffer->pointer);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/rslist.c b/drivers/acpi/acpica/rslist.c
index 36a6657..ebb55ce 100644
--- a/drivers/acpi/acpica/rslist.c
+++ b/drivers/acpi/acpica/rslist.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: rslist - Linked list utilities
@@ -82,21 +84,26 @@ acpi_rs_convert_aml_to_resources(u8 * aml,
 	 */
 	resource = *resource_ptr;
 	if (ACPI_IS_MISALIGNED(resource)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARNING((AE_INFO,
 			      "Misaligned resource pointer %p", resource));
 	}
 
 	/* Get the appropriate conversion info table */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	aml_resource = ACPI_CAST_PTR(union aml_resource, aml);
 
 	if (acpi_ut_get_resource_type(aml) == ACPI_RESOURCE_NAME_SERIAL_BUS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (aml_resource->common_serial_bus.type >
 		    AML_RESOURCE_MAX_SERIALBUSTYPE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			conversion_table = NULL;
 		} else {
 			/* This is an I2C, SPI, or UART serial_bus descriptor */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			conversion_table =
 			    acpi_gbl_convert_resource_serial_bus_dispatch
 			    [aml_resource->common_serial_bus.type];
@@ -107,6 +114,7 @@ acpi_rs_convert_aml_to_resources(u8 * aml,
 	}
 
 	if (!conversion_table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Invalid/unsupported resource descriptor: Type 0x%2.2X",
 			    resource_index));
@@ -119,6 +127,7 @@ acpi_rs_convert_aml_to_resources(u8 * aml,
 	    acpi_rs_convert_aml_to_resource(resource, aml_resource,
 					    conversion_table);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"Could not convert AML resource (Type 0x%X)",
 				*aml));
@@ -173,6 +182,7 @@ acpi_rs_convert_resources_to_aml(struct acpi_resource *resource,
 		/* Validate the (internal) Resource Type */
 
 		if (resource->type > ACPI_RESOURCE_TYPE_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Invalid descriptor type (0x%X) in resource list",
 				    resource->type));
@@ -182,6 +192,7 @@ acpi_rs_convert_resources_to_aml(struct acpi_resource *resource,
 		/* Sanity check the length. It must not be zero, or we loop forever */
 
 		if (!resource->length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Invalid zero length descriptor in resource list\n"));
 			return_ACPI_STATUS(AE_AML_BAD_RESOURCE_LENGTH);
@@ -190,12 +201,15 @@ acpi_rs_convert_resources_to_aml(struct acpi_resource *resource,
 		/* Perform the conversion */
 
 		if (resource->type == ACPI_RESOURCE_TYPE_SERIAL_BUS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (resource->data.common_serial_bus.type >
 			    AML_RESOURCE_MAX_SERIALBUSTYPE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				conversion_table = NULL;
 			} else {
 				/* This is an I2C, SPI, or UART serial_bus descriptor */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				conversion_table =
 				    acpi_gbl_convert_resource_serial_bus_dispatch
 				    [resource->data.common_serial_bus.type];
@@ -206,6 +220,7 @@ acpi_rs_convert_resources_to_aml(struct acpi_resource *resource,
 		}
 
 		if (!conversion_table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Invalid/unsupported resource descriptor: Type 0x%2.2X",
 				    resource->type));
@@ -218,6 +233,7 @@ acpi_rs_convert_resources_to_aml(struct acpi_resource *resource,
 								       aml),
 							 conversion_table);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status,
 					"Could not convert resource (type 0x%X) to AML",
 					resource->type));
@@ -231,6 +247,7 @@ acpi_rs_convert_resources_to_aml(struct acpi_resource *resource,
 					      ACPI_CAST_PTR(union aml_resource,
 							    aml), NULL);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 
@@ -240,6 +257,7 @@ acpi_rs_convert_resources_to_aml(struct acpi_resource *resource,
 
 			/* An End Tag indicates the end of the input Resource Template */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_OK);
 		}
 
@@ -256,5 +274,6 @@ acpi_rs_convert_resources_to_aml(struct acpi_resource *resource,
 
 	/* Completed buffer, but did not find an end_tag resource descriptor */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_AML_NO_RESOURCE_END_TAG);
 }
diff --git a/drivers/acpi/acpica/rsmisc.c b/drivers/acpi/acpica/rsmisc.c
index cc4b548..9ae0a41 100644
--- a/drivers/acpi/acpica/rsmisc.c
+++ b/drivers/acpi/acpica/rsmisc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: rsmisc - Miscellaneous resource descriptors
@@ -84,6 +86,7 @@ acpi_rs_convert_aml_to_resource(struct acpi_resource *resource,
 	ACPI_FUNCTION_TRACE(rs_convert_aml_to_resource);
 
 	if (!info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -482,6 +485,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 	ACPI_FUNCTION_TRACE(rs_convert_resource_to_aml);
 
 	if (!info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -502,6 +506,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 		switch (info->opcode) {
 		case ACPI_RSC_INITSET:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memset(aml, 0, INIT_RESOURCE_LENGTH(info));
 			aml_length = INIT_RESOURCE_LENGTH(info);
 			acpi_rs_set_resource_header(INIT_RESOURCE_TYPE(info),
@@ -556,6 +561,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 		case ACPI_RSC_COUNT16:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			item_count = ACPI_GET16(source);
 			aml_length = (u16) (aml_length + item_count);
 			acpi_rs_set_resource_length(aml_length, aml);
@@ -563,6 +569,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 		case ACPI_RSC_COUNT_GPIO_PIN:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			item_count = ACPI_GET16(source);
 			ACPI_SET16(destination, aml_length);
 
@@ -574,6 +581,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 		case ACPI_RSC_COUNT_GPIO_VEN:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			item_count = ACPI_GET16(source);
 			ACPI_SET16(destination, item_count);
 
@@ -586,6 +594,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 			/* Set resource source string length */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			item_count = ACPI_GET16(source);
 			ACPI_SET16(destination, aml_length);
 
@@ -603,6 +612,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 		case ACPI_RSC_COUNT_SERIAL_VEN:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			item_count = ACPI_GET16(source);
 			ACPI_SET16(destination, item_count + info->value);
 			aml_length = (u16)(aml_length + item_count);
@@ -611,6 +621,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 		case ACPI_RSC_COUNT_SERIAL_RES:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			item_count = ACPI_GET16(source);
 			aml_length = (u16)(aml_length + item_count);
 			acpi_rs_set_resource_length(aml_length, aml);
@@ -618,6 +629,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 		case ACPI_RSC_LENGTH:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_rs_set_resource_length(info->value, aml);
 			break;
 
@@ -627,6 +639,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 		case ACPI_RSC_MOVE64:
 
 			if (info->value) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				item_count = info->value;
 			}
 			acpi_rs_move_data(destination, source, item_count,
@@ -635,6 +648,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 		case ACPI_RSC_MOVE_GPIO_PIN:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			destination = (char *)ACPI_ADD_PTR(void, aml,
 							   ACPI_GET16
 							   (destination));
@@ -647,6 +661,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 			/* Used for both resource_source string and vendor_data */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			destination = (char *)ACPI_ADD_PTR(void, aml,
 							   ACPI_GET16
 							   (destination));
@@ -657,6 +672,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 		case ACPI_RSC_MOVE_SERIAL_VEN:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			destination = (char *)ACPI_ADD_PTR(void, aml,
 							   (aml_length -
 							    item_count));
@@ -667,6 +683,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 		case ACPI_RSC_MOVE_SERIAL_RES:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			destination = (char *)ACPI_ADD_PTR(void, aml,
 							   (aml_length -
 							    item_count));
@@ -679,6 +696,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 			/* Set the Resource Type, General Flags, and Type-Specific Flags */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_rs_set_address_common(aml, resource);
 			break;
 
@@ -743,6 +761,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 			switch (COMPARE_OPCODE(info)) {
 			case ACPI_RSC_COMPARE_VALUE:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (*ACPI_ADD_PTR(u8, resource,
 						  COMPARE_TARGET(info)) !=
 				    COMPARE_VALUE(info)) {
@@ -752,6 +771,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 			default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ACPI_ERROR((AE_INFO,
 					    "Invalid conversion sub-opcode"));
 				return_ACPI_STATUS(AE_BAD_PARAMETER);
@@ -771,6 +791,7 @@ acpi_rs_convert_resource_to_aml(struct acpi_resource *resource,
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO, "Invalid conversion opcode"));
 			return_ACPI_STATUS(AE_BAD_PARAMETER);
 		}
diff --git a/drivers/acpi/acpica/rsutils.c b/drivers/acpi/acpica/rsutils.c
index b2aeca0..8f07faa 100644
--- a/drivers/acpi/acpica/rsutils.c
+++ b/drivers/acpi/acpica/rsutils.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: rsutils - Utilities for the resource manager
@@ -104,6 +106,7 @@ u16 acpi_rs_encode_bitmask(u8 * list, u8 count)
 
 	/* Encode the list into a single bitmask */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0, mask = 0; i < count; i++) {
 		mask |= (0x1 << list[i]);
 	}
@@ -171,12 +174,14 @@ acpi_rs_move_data(void *destination, void *source, u16 item_count, u8 move_type)
 
 		case ACPI_RSC_MOVE64:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_MOVE_64_TO_64(&ACPI_CAST_PTR(u64, destination)[i],
 					   &ACPI_CAST_PTR(u64, source)[i]);
 			break;
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
 		}
 	}
@@ -285,6 +290,7 @@ static u16 acpi_rs_strcpy(char *destination, char *source)
 
 	ACPI_FUNCTION_ENTRY();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; source[i]; i++) {
 		destination[i] = source[i];
 	}
@@ -342,6 +348,7 @@ acpi_rs_get_resource_source(acpi_rs_length resource_length,
 
 		/* Get the resource_source_index */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		resource_source->index = aml_resource_source[0];
 
 		resource_source->string_ptr = string_ptr;
@@ -423,6 +430,7 @@ acpi_rs_set_resource_source(union aml_resource *aml,
 
 		/* Point to the end of the AML descriptor */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		aml_resource_source = ACPI_ADD_PTR(u8, aml, minimum_length);
 
 		/* Copy the resource_source_index */
@@ -482,6 +490,7 @@ acpi_rs_get_prt_method_data(struct acpi_namespace_node *node,
 	    acpi_ut_evaluate_object(node, METHOD_NAME__PRT, ACPI_BTYPE_PACKAGE,
 				    &obj_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -532,6 +541,7 @@ acpi_rs_get_crs_method_data(struct acpi_namespace_node *node,
 	    acpi_ut_evaluate_object(node, METHOD_NAME__CRS, ACPI_BTYPE_BUFFER,
 				    &obj_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -583,6 +593,7 @@ acpi_rs_get_prs_method_data(struct acpi_namespace_node *node,
 	    acpi_ut_evaluate_object(node, METHOD_NAME__PRS, ACPI_BTYPE_BUFFER,
 				    &obj_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -634,6 +645,7 @@ acpi_rs_get_aei_method_data(struct acpi_namespace_node *node,
 	    acpi_ut_evaluate_object(node, METHOD_NAME__AEI, ACPI_BTYPE_BUFFER,
 				    &obj_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -687,6 +699,7 @@ acpi_rs_get_method_data(acpi_handle handle,
 				    (struct acpi_namespace_node, handle), path,
 				    ACPI_BTYPE_BUFFER, &obj_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -738,6 +751,7 @@ acpi_rs_set_srs_method_data(struct acpi_namespace_node *node,
 
 	info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info));
 	if (!info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
diff --git a/drivers/acpi/acpica/rsxface.c b/drivers/acpi/acpica/rsxface.c
index be65e65..6dd4b31 100644
--- a/drivers/acpi/acpica/rsxface.c
+++ b/drivers/acpi/acpica/rsxface.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: rsxface - Public interfaces to the resource manager
@@ -103,15 +105,18 @@ acpi_rs_validate_parameters(acpi_handle device_handle,
 	 * Must have a valid handle to an ACPI device
 	 */
 	if (!device_handle) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
 	node = acpi_ns_validate_handle(device_handle);
 	if (!node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
 	if (node->type != ACPI_TYPE_DEVICE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_TYPE);
 	}
 
@@ -124,6 +129,7 @@ acpi_rs_validate_parameters(acpi_handle device_handle,
 	 */
 	status = acpi_ut_validate_buffer(buffer);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -167,6 +173,7 @@ acpi_get_irq_routing_table(acpi_handle device_handle,
 
 	status = acpi_rs_validate_parameters(device_handle, ret_buffer, &node);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -212,6 +219,7 @@ acpi_get_current_resources(acpi_handle device_handle,
 
 	status = acpi_rs_validate_parameters(device_handle, ret_buffer, &node);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -254,6 +262,7 @@ acpi_get_possible_resources(acpi_handle device_handle,
 
 	status = acpi_rs_validate_parameters(device_handle, ret_buffer, &node);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -292,6 +301,7 @@ acpi_set_current_resources(acpi_handle device_handle,
 	/* Validate the buffer, don't allow zero length */
 
 	if ((!in_buffer) || (!in_buffer->pointer) || (!in_buffer->length)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -299,6 +309,7 @@ acpi_set_current_resources(acpi_handle device_handle,
 
 	status = acpi_rs_validate_parameters(device_handle, in_buffer, &node);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -339,6 +350,7 @@ acpi_get_event_resources(acpi_handle device_handle,
 
 	status = acpi_rs_validate_parameters(device_handle, ret_buffer, &node);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -372,6 +384,7 @@ acpi_resource_to_address64(struct acpi_resource *resource,
 	struct acpi_resource_address32 *address32;
 
 	if (!resource || !out) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -380,6 +393,7 @@ acpi_resource_to_address64(struct acpi_resource *resource,
 	switch (resource->type) {
 	case ACPI_RESOURCE_TYPE_ADDRESS16:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		address16 =
 		    ACPI_CAST_PTR(struct acpi_resource_address16,
 				  &resource->data);
@@ -388,6 +402,7 @@ acpi_resource_to_address64(struct acpi_resource *resource,
 
 	case ACPI_RESOURCE_TYPE_ADDRESS32:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		address32 =
 		    ACPI_CAST_PTR(struct acpi_resource_address32,
 				  &resource->data);
@@ -398,15 +413,18 @@ acpi_resource_to_address64(struct acpi_resource *resource,
 
 		/* Simple copy for 64 bit source */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(out, &resource->data,
 		       sizeof(struct acpi_resource_address64));
 		break;
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -441,6 +459,7 @@ acpi_get_vendor_resource(acpi_handle device_handle,
 
 	/* Other parameters are validated by acpi_walk_resources */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!uuid || !ret_buffer) {
 		return (AE_BAD_PARAMETER);
 	}
@@ -485,6 +504,7 @@ acpi_rs_match_vendor_resource(struct acpi_resource *resource, void *context)
 	/* Ignore all descriptors except Vendor */
 
 	if (resource->type != ACPI_RESOURCE_TYPE_VENDOR) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -552,11 +572,13 @@ acpi_walk_resource_buffer(struct acpi_buffer *buffer,
 	/* Parameter validation */
 
 	if (!buffer || !buffer->pointer || !user_function) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
 	/* Buffer contains the resource list and length */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	resource = ACPI_CAST_PTR(struct acpi_resource, buffer->pointer);
 	resource_end =
 	    ACPI_ADD_PTR(struct acpi_resource, buffer->pointer, buffer->length);
@@ -568,6 +590,7 @@ acpi_walk_resource_buffer(struct acpi_buffer *buffer,
 		/* Sanity check the resource type */
 
 		if (resource->type > ACPI_RESOURCE_TYPE_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_AML_INVALID_RESOURCE_TYPE;
 			break;
 		}
@@ -575,6 +598,7 @@ acpi_walk_resource_buffer(struct acpi_buffer *buffer,
 		/* Sanity check the length. It must not be zero, or we loop forever */
 
 		if (!resource->length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_AML_BAD_RESOURCE_LENGTH);
 		}
 
@@ -586,6 +610,7 @@ acpi_walk_resource_buffer(struct acpi_buffer *buffer,
 
 				/* This is an OK termination by the user function */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status = AE_OK;
 			}
 			break;
@@ -602,6 +627,7 @@ acpi_walk_resource_buffer(struct acpi_buffer *buffer,
 		resource = ACPI_NEXT_RESOURCE(resource);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -643,6 +669,7 @@ acpi_walk_resources(acpi_handle device_handle,
 	     !ACPI_COMPARE_NAME(name, METHOD_NAME__PRS) &&
 	     !ACPI_COMPARE_NAME(name, METHOD_NAME__AEI) &&
 	     !ACPI_COMPARE_NAME(name, METHOD_NAME__DMA))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -651,6 +678,7 @@ acpi_walk_resources(acpi_handle device_handle,
 	buffer.length = ACPI_ALLOCATE_LOCAL_BUFFER;
 	status = acpi_rs_get_method_data(device_handle, name, &buffer);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/tbdata.c b/drivers/acpi/acpica/tbdata.c
index b19a2f0..e08d0e2 100644
--- a/drivers/acpi/acpica/tbdata.c
+++ b/drivers/acpi/acpica/tbdata.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: tbdata - Table manager data structure functions
@@ -84,6 +86,7 @@ acpi_tb_compare_tables(struct acpi_table_desc *table_desc, u32 table_index)
 	    acpi_tb_acquire_table(&acpi_gbl_root_table_list.tables[table_index],
 				  &table, &table_length, &table_flags);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
@@ -166,6 +169,7 @@ acpi_tb_acquire_table(struct acpi_table_desc *table_desc,
 	case ACPI_TABLE_ORIGIN_INTERNAL_VIRTUAL:
 	case ACPI_TABLE_ORIGIN_EXTERNAL_VIRTUAL:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table = ACPI_CAST_PTR(struct acpi_table_header,
 				      ACPI_PHYSADDR_TO_PTR(table_desc->
 							   address));
@@ -179,6 +183,7 @@ acpi_tb_acquire_table(struct acpi_table_desc *table_desc,
 	/* Table is not valid yet */
 
 	if (!table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_NO_MEMORY);
 	}
 
@@ -255,6 +260,7 @@ acpi_tb_acquire_temp_table(struct acpi_table_desc *table_desc,
 		    acpi_os_map_memory(address,
 				       sizeof(struct acpi_table_header));
 		if (!table_header) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_NO_MEMORY);
 		}
 
@@ -267,12 +273,15 @@ acpi_tb_acquire_temp_table(struct acpi_table_desc *table_desc,
 	case ACPI_TABLE_ORIGIN_INTERNAL_VIRTUAL:
 	case ACPI_TABLE_ORIGIN_EXTERNAL_VIRTUAL:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table_header = ACPI_CAST_PTR(struct acpi_table_header,
 					     ACPI_PHYSADDR_TO_PTR(address));
 		if (!table_header) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_NO_MEMORY);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_tb_init_table_descriptor(table_desc, address, flags,
 					      table_header);
 		return (AE_OK);
@@ -284,6 +293,7 @@ acpi_tb_acquire_temp_table(struct acpi_table_desc *table_desc,
 
 	/* Table is not valid yet */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_NO_MEMORY);
 }
 
@@ -336,6 +346,7 @@ acpi_status acpi_tb_validate_table(struct acpi_table_desc *table_desc)
 					       &table_desc->length,
 					       &table_desc->flags);
 		if (!table_desc->pointer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_NO_MEMORY;
 		}
 	}
@@ -364,6 +375,7 @@ void acpi_tb_invalidate_table(struct acpi_table_desc *table_desc)
 	/* Table must be validated */
 
 	if (!table_desc->pointer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -468,8 +480,10 @@ acpi_tb_check_duplication(struct acpi_table_desc *table_desc, u32 *table_index)
 
 			/* Table is still loaded, this is an error */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_ALREADY_EXISTS);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*table_index = i;
 			return_ACPI_STATUS(AE_CTRL_TERMINATE);
 		}
@@ -477,6 +491,7 @@ acpi_tb_check_duplication(struct acpi_table_desc *table_desc, u32 *table_index)
 
 	/* Indicate no duplication to the caller */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -509,12 +524,14 @@ acpi_tb_verify_temp_table(struct acpi_table_desc *table_desc,
 
 	status = acpi_tb_validate_temp_table(table_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
 	/* If a particular signature is expected (DSDT/FACS), it must match */
 
 	if (signature && !ACPI_COMPARE_NAME(&table_desc->signature, signature)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_BIOS_ERROR((AE_INFO,
 				 "Invalid signature 0x%X for ACPI table, expected [%s]",
 				 table_desc->signature.integer, signature));
@@ -530,6 +547,7 @@ acpi_tb_verify_temp_table(struct acpi_table_desc *table_desc,
 		    acpi_tb_verify_checksum(table_desc->pointer,
 					    table_desc->length);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, AE_NO_MEMORY,
 					"%4.4s 0x%8.8X%8.8X"
 					" Attempted table install failed",
@@ -549,7 +567,9 @@ acpi_tb_verify_temp_table(struct acpi_table_desc *table_desc,
 			status =
 			    acpi_tb_check_duplication(table_desc, table_index);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (status != AE_CTRL_TERMINATE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ACPI_EXCEPTION((AE_INFO, AE_NO_MEMORY,
 							"%4.4s 0x%8.8X%8.8X"
 							" Table is duplicated",
@@ -569,6 +589,7 @@ acpi_tb_verify_temp_table(struct acpi_table_desc *table_desc,
 		table_desc->flags |= ACPI_TABLE_IS_VERIFIED;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 
 invalidate_and_exit:
@@ -600,6 +621,7 @@ acpi_status acpi_tb_resize_root_table_list(void)
 	/* allow_resize flag is a parameter to acpi_initialize_tables */
 
 	if (!(acpi_gbl_root_table_list.flags & ACPI_ROOT_ALLOW_RESIZE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Resize of Root Table Array is not allowed"));
 		return_ACPI_STATUS(AE_SUPPORT);
@@ -608,6 +630,7 @@ acpi_status acpi_tb_resize_root_table_list(void)
 	/* Increase the Table Array size */
 
 	if (acpi_gbl_root_table_list.flags & ACPI_ROOT_ORIGIN_ALLOCATED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table_count = acpi_gbl_root_table_list.max_table_count;
 	} else {
 		table_count = acpi_gbl_root_table_list.current_table_count;
@@ -617,6 +640,7 @@ acpi_status acpi_tb_resize_root_table_list(void)
 	tables = ACPI_ALLOCATE_ZEROED(((acpi_size)max_table_count) *
 				      sizeof(struct acpi_table_desc));
 	if (!tables) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not allocate new root table array"));
 		return_ACPI_STATUS(AE_NO_MEMORY);
@@ -624,6 +648,7 @@ acpi_status acpi_tb_resize_root_table_list(void)
 
 	/* Copy and free the previous table array */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	current_table_count = 0;
 	if (acpi_gbl_root_table_list.tables) {
 		for (i = 0; i < table_count; i++) {
@@ -636,6 +661,7 @@ acpi_status acpi_tb_resize_root_table_list(void)
 		}
 
 		if (acpi_gbl_root_table_list.flags & ACPI_ROOT_ORIGIN_ALLOCATED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_FREE(acpi_gbl_root_table_list.tables);
 		}
 	}
@@ -672,8 +698,10 @@ acpi_tb_get_next_table_descriptor(u32 *table_index,
 
 	if (acpi_gbl_root_table_list.current_table_count >=
 	    acpi_gbl_root_table_list.max_table_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_tb_resize_root_table_list();
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (status);
 		}
 	}
@@ -685,9 +713,11 @@ acpi_tb_get_next_table_descriptor(u32 *table_index,
 		*table_index = i;
 	}
 	if (table_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*table_desc = &acpi_gbl_root_table_list.tables[i];
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -713,6 +743,7 @@ void acpi_tb_terminate(void)
 
 	/* Delete the individual tables */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < acpi_gbl_root_table_list.current_table_count; i++) {
 		acpi_tb_uninstall_table(&acpi_gbl_root_table_list.tables[i]);
 	}
@@ -756,6 +787,7 @@ acpi_status acpi_tb_delete_namespace_by_owner(u32 table_index)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_TABLES);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -838,6 +870,7 @@ acpi_status acpi_tb_release_owner_id(u32 table_index)
 
 	(void)acpi_ut_acquire_mutex(ACPI_MTX_TABLES);
 	if (table_index < acpi_gbl_root_table_list.current_table_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_release_owner_id(&
 					 (acpi_gbl_root_table_list.
 					  tables[table_index].owner_id));
@@ -925,6 +958,7 @@ void acpi_tb_set_table_loaded_flag(u32 table_index, u8 is_loaded)
 			acpi_gbl_root_table_list.tables[table_index].flags |=
 			    ACPI_TABLE_IS_LOADED;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_gbl_root_table_list.tables[table_index].flags &=
 			    ~ACPI_TABLE_IS_LOADED;
 		}
@@ -961,6 +995,7 @@ acpi_tb_load_table(u32 table_index, struct acpi_namespace_node *parent_node)
 	 */
 	status = acpi_get_table_by_index(table_index, &table);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -1021,6 +1056,7 @@ acpi_tb_install_and_load_table(acpi_physical_address address,
 		goto exit;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = acpi_tb_load_table(i, acpi_gbl_root_node);
 
 exit:
@@ -1052,6 +1088,7 @@ acpi_status acpi_tb_unload_table(u32 table_index)
 	/* Ensure the table is still loaded */
 
 	if (!acpi_tb_is_table_loaded(table_index)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_EXIST);
 	}
 
@@ -1094,6 +1131,7 @@ void acpi_tb_notify_table(u32 event, void *table)
 	/* Invoke table handler if present */
 
 	if (acpi_gbl_table_handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		(void)acpi_gbl_table_handler(event, table,
 					     acpi_gbl_table_handler_context);
 	}
diff --git a/drivers/acpi/acpica/tbfadt.c b/drivers/acpi/acpica/tbfadt.c
index 5f051d8..592b16f 100644
--- a/drivers/acpi/acpica/tbfadt.c
+++ b/drivers/acpi/acpica/tbfadt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: tbfadt   - FADT table utilities
@@ -208,6 +210,7 @@ acpi_tb_init_generic_address(struct acpi_generic_address *generic_address,
 		 * allow for a large number of GPEs.
 		 */
 		if (!(flags & ACPI_FADT_GPE_REGISTER)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "%s - 32-bit FADT register is too long (%u bytes, %u bits) "
 				    "to convert to GAS struct - 255 bits max, truncating",
@@ -215,6 +218,7 @@ acpi_tb_init_generic_address(struct acpi_generic_address *generic_address,
 				    (byte_width * 8)));
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bit_width = 255;
 	}
 
@@ -270,10 +274,12 @@ acpi_tb_select_address(char *register_name, u32 address32, u64 address64)
 		return ((u64)address32);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (address32 && (address64 != (u64)address32)) {
 
 		/* Address mismatch between 32-bit and 64-bit versions */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_BIOS_WARNING((AE_INFO,
 				   "32/64X %s address mismatch in FADT: "
 				   "0x%8.8X/0x%8.8X%8.8X, using %u-bit address",
@@ -285,12 +291,14 @@ acpi_tb_select_address(char *register_name, u32 address32, u64 address64)
 		/* 32-bit address override */
 
 		if (acpi_gbl_use32_bit_fadt_addresses) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ((u64)address32);
 		}
 	}
 
 	/* Default is to use the 64-bit address */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (address64);
 }
 
@@ -324,6 +332,7 @@ void acpi_tb_parse_fadt(void)
 	fadt_desc = &acpi_gbl_root_table_list.tables[acpi_gbl_fadt_index];
 	status = acpi_tb_get_table(fadt_desc, &table);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 	length = fadt_desc->length;
@@ -360,6 +369,7 @@ void acpi_tb_parse_fadt(void)
 						       &acpi_gbl_facs_index);
 		}
 		if (acpi_gbl_FADT.Xfacs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_tb_install_standard_table((acpi_physical_address)
 						       acpi_gbl_FADT.Xfacs,
 						       ACPI_TABLE_ORIGIN_INTERNAL_PHYSICAL,
diff --git a/drivers/acpi/acpica/tbinstal.c b/drivers/acpi/acpica/tbinstal.c
index 0dfc0ac..bf07bd9 100644
--- a/drivers/acpi/acpica/tbinstal.c
+++ b/drivers/acpi/acpica/tbinstal.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: tbinstal - ACPI table installation and removal
@@ -73,6 +75,7 @@ acpi_tb_install_table_with_override(struct acpi_table_desc *new_table_desc,
 
 	status = acpi_tb_get_next_table_descriptor(&i, NULL);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -142,6 +145,7 @@ acpi_tb_install_standard_table(acpi_physical_address address,
 
 	status = acpi_tb_acquire_temp_table(&new_table_desc, address, flags);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not acquire table length at %8.8X%8.8X",
 			    ACPI_FORMAT_UINT64(address)));
@@ -155,6 +159,7 @@ acpi_tb_install_standard_table(acpi_physical_address address,
 	if (!reload &&
 	    acpi_gbl_disable_ssdt_table_install &&
 	    ACPI_COMPARE_NAME(&new_table_desc.signature, ACPI_SIG_SSDT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_INFO(("Ignoring installation of %4.4s at %8.8X%8.8X",
 			   new_table_desc.signature.ascii,
 			   ACPI_FORMAT_UINT64(address)));
@@ -169,6 +174,7 @@ acpi_tb_install_standard_table(acpi_physical_address address,
 
 	status = acpi_tb_verify_temp_table(&new_table_desc, NULL, &i);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status == AE_CTRL_TERMINATE) {
 			/*
 			 * Table was unloaded, allow it to be reloaded.
@@ -241,6 +247,7 @@ void acpi_tb_override_table(struct acpi_table_desc *old_table_desc)
 
 	status = acpi_os_table_override(old_table_desc->pointer, &table);
 	if (ACPI_SUCCESS(status) && table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_tb_acquire_temp_table(&new_table_desc,
 					   ACPI_PTR_TO_PHYSADDR(table),
 					   ACPI_TABLE_ORIGIN_EXTERNAL_VIRTUAL);
@@ -253,6 +260,7 @@ void acpi_tb_override_table(struct acpi_table_desc *old_table_desc)
 	status = acpi_os_physical_table_override(old_table_desc->pointer,
 						 &address, &length);
 	if (ACPI_SUCCESS(status) && address && length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_tb_acquire_temp_table(&new_table_desc, address,
 					   ACPI_TABLE_ORIGIN_INTERNAL_PHYSICAL);
 		override_type = "Physical";
@@ -269,9 +277,11 @@ void acpi_tb_override_table(struct acpi_table_desc *old_table_desc)
 	 */
 	status = acpi_tb_verify_temp_table(&new_table_desc, NULL, NULL);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_INFO(("%4.4s 0x%8.8X%8.8X"
 		   " %s table override, new table: 0x%8.8X%8.8X",
 		   old_table_desc->signature.ascii,
@@ -315,6 +325,7 @@ void acpi_tb_uninstall_table(struct acpi_table_desc *table_desc)
 
 	/* Table must be installed */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!table_desc->address) {
 		return_VOID;
 	}
diff --git a/drivers/acpi/acpica/tbprint.c b/drivers/acpi/acpica/tbprint.c
index edfd7b1..4e85fc7 100644
--- a/drivers/acpi/acpica/tbprint.c
+++ b/drivers/acpi/acpica/tbprint.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: tbprint - Table output utilities
@@ -74,6 +76,7 @@ static void acpi_tb_fix_string(char *string, acpi_size length)
 
 	while (length && *string) {
 		if (!isprint((int)*string)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*string = '?';
 		}
 
@@ -101,6 +104,7 @@ acpi_tb_cleanup_table_header(struct acpi_table_header *out_header,
 			     struct acpi_table_header *header)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(out_header, header, sizeof(struct acpi_table_header));
 
 	acpi_tb_fix_string(out_header->signature, ACPI_NAME_SIZE);
@@ -139,6 +143,7 @@ acpi_tb_print_table_header(acpi_physical_address address,
 
 		/* RSDP has no common fields */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(local_header.oem_id,
 		       ACPI_CAST_PTR(struct acpi_table_rsdp, header)->oem_id,
 		       ACPI_OEM_ID_SIZE);
@@ -194,6 +199,7 @@ acpi_status acpi_tb_verify_checksum(struct acpi_table_header *table, u32 length)
 
 	if (ACPI_COMPARE_NAME(table->signature, ACPI_SIG_S3PT) ||
 	    ACPI_COMPARE_NAME(table->signature, ACPI_SIG_FACS)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
@@ -204,6 +210,7 @@ acpi_status acpi_tb_verify_checksum(struct acpi_table_header *table, u32 length)
 	/* Checksum ok? (should be zero) */
 
 	if (checksum) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_BIOS_WARNING((AE_INFO,
 				   "Incorrect checksum in table [%4.4s] - 0x%2.2X, "
 				   "should be 0x%2.2X",
@@ -215,6 +222,7 @@ acpi_status acpi_tb_verify_checksum(struct acpi_table_header *table, u32 length)
 #endif
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
diff --git a/drivers/acpi/acpica/tbutils.c b/drivers/acpi/acpica/tbutils.c
index 0c6768d..7213260 100644
--- a/drivers/acpi/acpica/tbutils.c
+++ b/drivers/acpi/acpica/tbutils.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: tbutils - ACPI Table utilities
@@ -73,11 +75,13 @@ acpi_status acpi_tb_initialize_facs(void)
 	/* If Hardware Reduced flag is set, there is no FACS */
 
 	if (acpi_gbl_reduced_hardware) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_gbl_FACS = NULL;
 		return (AE_OK);
 	} else if (acpi_gbl_FADT.Xfacs &&
 		   (!acpi_gbl_FADT.facs
 		    || !acpi_gbl_use32_bit_facs_addresses)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		(void)acpi_get_table_by_index(acpi_gbl_xfacs_index,
 					      ACPI_CAST_INDIRECT_PTR(struct
 								     acpi_table_header,
@@ -93,6 +97,7 @@ acpi_status acpi_tb_initialize_facs(void)
 
 	/* If there is no FACS, just continue. There was already an error msg */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 #endif				/* !ACPI_REDUCED_HARDWARE */
@@ -118,6 +123,7 @@ void acpi_tb_check_dsdt_header(void)
 
 	if (acpi_gbl_original_dsdt_header.length != acpi_gbl_DSDT->length ||
 	    acpi_gbl_original_dsdt_header.checksum != acpi_gbl_DSDT->checksum) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_BIOS_ERROR((AE_INFO,
 				 "The DSDT has been corrupted or replaced - "
 				 "old, new headers below"));
@@ -160,6 +166,7 @@ struct acpi_table_header *acpi_tb_copy_dsdt(u32 table_index)
 
 	new_table = ACPI_ALLOCATE(table_desc->length);
 	if (!new_table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Could not copy DSDT of length 0x%X",
 			    table_desc->length));
 		return (NULL);
@@ -272,6 +279,7 @@ acpi_tb_parse_root_table(acpi_physical_address rsdp_address)
 
 	rsdp = acpi_os_map_memory(rsdp_address, sizeof(struct acpi_table_rsdp));
 	if (!rsdp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -307,6 +315,7 @@ acpi_tb_parse_root_table(acpi_physical_address rsdp_address)
 
 	table = acpi_os_map_memory(address, sizeof(struct acpi_table_header));
 	if (!table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
diff --git a/drivers/acpi/acpica/tbxface.c b/drivers/acpi/acpica/tbxface.c
index 26ad596..69fc731 100644
--- a/drivers/acpi/acpica/tbxface.c
+++ b/drivers/acpi/acpica/tbxface.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: tbxface - ACPI table-oriented external interfaces
@@ -66,6 +68,7 @@ ACPI_MODULE_NAME("tbxface")
 acpi_status acpi_allocate_root_table(u32 initial_table_count)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_gbl_root_table_list.max_table_count = initial_table_count;
 	acpi_gbl_root_table_list.flags = ACPI_ROOT_ALLOW_RESIZE;
 
@@ -112,13 +115,16 @@ acpi_initialize_tables(struct acpi_table_desc *initial_table_array,
 	 * if requested
 	 */
 	if (!initial_table_array) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_allocate_root_table(initial_table_count);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	} else {
 		/* Root Table Array has been statically allocated by the host */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(initial_table_array, 0,
 		       (acpi_size)initial_table_count *
 		       sizeof(struct acpi_table_desc));
@@ -127,6 +133,7 @@ acpi_initialize_tables(struct acpi_table_desc *initial_table_array,
 		acpi_gbl_root_table_list.max_table_count = initial_table_count;
 		acpi_gbl_root_table_list.flags = ACPI_ROOT_ORIGIN_UNKNOWN;
 		if (allow_resize) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_gbl_root_table_list.flags |=
 			    ACPI_ROOT_ALLOW_RESIZE;
 		}
@@ -136,6 +143,7 @@ acpi_initialize_tables(struct acpi_table_desc *initial_table_array,
 
 	rsdp_address = acpi_os_get_root_pointer();
 	if (!rsdp_address) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NOT_FOUND);
 	}
 
@@ -177,6 +185,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_reallocate_root_table(void)
 	 * for the table array in the call to acpi_initialize_tables.
 	 */
 	if (acpi_gbl_root_table_list.flags & ACPI_ROOT_ORIGIN_ALLOCATED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_SUPPORT);
 	}
 
@@ -191,6 +200,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_reallocate_root_table(void)
 	for (i = 0; i < acpi_gbl_root_table_list.current_table_count; ++i) {
 		table_desc = &acpi_gbl_root_table_list.tables[i];
 		if (table_desc->pointer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Table [%4.4s] is not invalidated during early boot stage",
 				    table_desc->signature.ascii));
@@ -211,6 +221,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_reallocate_root_table(void)
 				    acpi_tb_verify_temp_table(table_desc, NULL,
 							      &j);
 				if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					acpi_tb_uninstall_table(table_desc);
 				}
 			}
@@ -254,6 +265,7 @@ acpi_get_table_header(char *signature,
 	/* Parameter validation */
 
 	if (!signature || !out_table_header) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -281,25 +293,31 @@ acpi_get_table_header(char *signature,
 						       sizeof(struct
 							      acpi_table_header));
 				if (!header) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return (AE_NO_MEMORY);
 				}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				memcpy(out_table_header, header,
 				       sizeof(struct acpi_table_header));
 				acpi_os_unmap_memory(header,
 						     sizeof(struct
 							    acpi_table_header));
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (AE_NOT_FOUND);
 			}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(out_table_header,
 			       acpi_gbl_root_table_list.tables[i].pointer,
 			       sizeof(struct acpi_table_header));
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_NOT_FOUND);
 }
 
@@ -336,6 +354,7 @@ acpi_get_table(char *signature,
 	/* Parameter validation */
 
 	if (!signature || !out_table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -395,6 +414,7 @@ void acpi_put_table(struct acpi_table_header *table)
 	ACPI_FUNCTION_TRACE(acpi_put_table);
 
 	if (!table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -442,6 +462,7 @@ acpi_get_table_by_index(u32 table_index, struct acpi_table_header **out_table)
 	/* Parameter validation */
 
 	if (!out_table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -457,6 +478,7 @@ acpi_get_table_by_index(u32 table_index, struct acpi_table_header **out_table)
 	/* Validate index */
 
 	if (table_index >= acpi_gbl_root_table_list.current_table_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_BAD_PARAMETER;
 		goto unlock_and_exit;
 	}
@@ -492,17 +514,20 @@ acpi_install_table_handler(acpi_table_handler handler, void *context)
 	ACPI_FUNCTION_TRACE(acpi_install_table_handler);
 
 	if (!handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_EVENTS);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
 	/* Don't allow more than one handler */
 
 	if (acpi_gbl_table_handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_ALREADY_EXISTS;
 		goto cleanup;
 	}
@@ -539,6 +564,7 @@ acpi_status acpi_remove_table_handler(acpi_table_handler handler)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_EVENTS);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/tbxfload.c b/drivers/acpi/acpica/tbxfload.c
index d81f442..5c3d160 100644
--- a/drivers/acpi/acpica/tbxfload.c
+++ b/drivers/acpi/acpica/tbxfload.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: tbxfload - Table load/unload external interfaces
@@ -83,6 +85,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_load_tables(void)
 	 */
 	status = acpi_ev_install_region_handlers();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"During Region initialization"));
 		return_ACPI_STATUS(status);
@@ -95,10 +98,12 @@ acpi_status ACPI_INIT_FUNCTION acpi_load_tables(void)
 	/* Don't let single failures abort the load */
 
 	if (status == AE_CTRL_TERMINATE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_OK;
 	}
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"While loading namespace from ACPI tables"));
 	}
@@ -113,6 +118,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_load_tables(void)
 		 */
 		status = acpi_ns_initialize_objects();
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	}
@@ -285,6 +291,7 @@ acpi_install_table(acpi_physical_address address, u8 physical)
 	ACPI_FUNCTION_TRACE(acpi_install_table);
 
 	if (physical) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = ACPI_TABLE_ORIGIN_INTERNAL_PHYSICAL;
 	} else {
 		flags = ACPI_TABLE_ORIGIN_EXTERNAL_VIRTUAL;
@@ -324,6 +331,7 @@ acpi_status acpi_load_table(struct acpi_table_header *table)
 	/* Parameter validation */
 
 	if (!table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
@@ -366,6 +374,7 @@ acpi_status acpi_unload_parent_table(acpi_handle object)
 	/* Parameter validation */
 
 	if (!object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_BAD_PARAMETER);
 	}
 
diff --git a/drivers/acpi/acpica/tbxfroot.c b/drivers/acpi/acpica/tbxfroot.c
index f9f9a7d..836ad53 100644
--- a/drivers/acpi/acpica/tbxfroot.c
+++ b/drivers/acpi/acpica/tbxfroot.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: tbxfroot - Find the root ACPI table (RSDT)
@@ -62,6 +64,7 @@ ACPI_MODULE_NAME("tbxfroot")
 u32 acpi_tb_get_rsdp_length(struct acpi_table_rsdp *rsdp)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ACPI_VALIDATE_RSDP_SIG(rsdp->signature)) {
 
 		/* BAD Signature */
@@ -103,12 +106,14 @@ acpi_status acpi_tb_validate_rsdp(struct acpi_table_rsdp *rsdp)
 
 		/* Nope, BAD Signature */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_SIGNATURE);
 	}
 
 	/* Check the standard checksum */
 
 	if (acpi_tb_checksum((u8 *) rsdp, ACPI_RSDP_CHECKSUM_LENGTH) != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_CHECKSUM);
 	}
 
@@ -116,9 +121,11 @@ acpi_status acpi_tb_validate_rsdp(struct acpi_table_rsdp *rsdp)
 
 	if ((rsdp->revision >= 2) &&
 	    (acpi_tb_checksum((u8 *) rsdp, ACPI_RSDP_XCHECKSUM_LENGTH) != 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_CHECKSUM);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -157,6 +164,7 @@ acpi_find_root_pointer(acpi_physical_address *table_address)
 				       ACPI_EBDA_PTR_LOCATION,
 				       ACPI_EBDA_PTR_LENGTH);
 	if (!table_ptr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not map memory at 0x%8.8X for length %u",
 			    ACPI_EBDA_PTR_LOCATION, ACPI_EBDA_PTR_LENGTH));
@@ -182,6 +190,7 @@ acpi_find_root_pointer(acpi_physical_address *table_address)
 					       physical_address,
 					       ACPI_EBDA_WINDOW_SIZE);
 		if (!table_ptr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR((AE_INFO,
 				    "Could not map memory at 0x%8.8X for length %u",
 				    physical_address, ACPI_EBDA_WINDOW_SIZE));
@@ -198,6 +207,7 @@ acpi_find_root_pointer(acpi_physical_address *table_address)
 
 			/* Return the physical address */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			physical_address +=
 			    (u32) ACPI_PTR_DIFF(mem_rover, table_ptr);
 
@@ -215,6 +225,7 @@ acpi_find_root_pointer(acpi_physical_address *table_address)
 				       ACPI_HI_RSDP_WINDOW_SIZE);
 
 	if (!table_ptr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Could not map memory at 0x%8.8X for length %u",
 			    ACPI_HI_RSDP_WINDOW_BASE,
@@ -241,6 +252,7 @@ acpi_find_root_pointer(acpi_physical_address *table_address)
 
 	/* A valid RSDP was not found */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_BIOS_ERROR((AE_INFO, "A valid RSDP was not found"));
 	return_ACPI_STATUS(AE_NOT_FOUND);
 }
@@ -286,6 +298,7 @@ u8 *acpi_tb_scan_memory_for_rsdp(u8 *start_address, u32 length)
 			ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 					  "RSDP located at physical address %p\n",
 					  mem_rover));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_PTR(mem_rover);
 		}
 
@@ -297,5 +310,6 @@ u8 *acpi_tb_scan_memory_for_rsdp(u8 *start_address, u32 length)
 	ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 			  "Searched entire block from %p, valid RSDP was not found\n",
 			  start_address));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_PTR(NULL);
 }
diff --git a/drivers/acpi/acpica/utaddress.c b/drivers/acpi/acpica/utaddress.c
index 26a0633..d3572ea 100644
--- a/drivers/acpi/acpica/utaddress.c
+++ b/drivers/acpi/acpica/utaddress.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utaddress - op_region address range check
@@ -82,6 +84,7 @@ acpi_ut_add_address_range(acpi_adr_space_type space_id,
 
 	if ((space_id != ACPI_ADR_SPACE_SYSTEM_MEMORY) &&
 	    (space_id != ACPI_ADR_SPACE_SYSTEM_IO)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
@@ -89,6 +92,7 @@ acpi_ut_add_address_range(acpi_adr_space_type space_id,
 
 	range_info = ACPI_ALLOCATE(sizeof(struct acpi_address_range));
 	if (!range_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -204,6 +208,7 @@ acpi_ut_check_address_range(acpi_adr_space_type space_id,
 
 	if ((space_id != ACPI_ADR_SPACE_SYSTEM_MEMORY) &&
 	    (space_id != ACPI_ADR_SPACE_SYSTEM_IO)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_UINT32(0);
 	}
 
@@ -228,6 +233,7 @@ acpi_ut_check_address_range(acpi_adr_space_type space_id,
 
 			/* Found an address range overlap */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			overlap_count++;
 			if (warn) {	/* Optional warning message */
 				pathname =
@@ -252,6 +258,7 @@ acpi_ut_check_address_range(acpi_adr_space_type space_id,
 		range_info = range_info->next;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_UINT32(overlap_count);
 }
 
@@ -276,6 +283,7 @@ void acpi_ut_delete_address_lists(void)
 
 	/* Delete all elements in all address range lists */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ACPI_ADDRESS_RANGE_MAX; i++) {
 		next = acpi_gbl_address_range_list[i];
 
diff --git a/drivers/acpi/acpica/utalloc.c b/drivers/acpi/acpica/utalloc.c
index 5594a35..e240018 100644
--- a/drivers/acpi/acpica/utalloc.c
+++ b/drivers/acpi/acpica/utalloc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utalloc - local memory allocation routines
@@ -105,6 +107,7 @@ acpi_status acpi_ut_create_caches(void)
 				 ACPI_MAX_NAMESPACE_CACHE_DEPTH,
 				 &acpi_gbl_namespace_cache);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -113,6 +116,7 @@ acpi_status acpi_ut_create_caches(void)
 				 ACPI_MAX_STATE_CACHE_DEPTH,
 				 &acpi_gbl_state_cache);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -122,6 +126,7 @@ acpi_status acpi_ut_create_caches(void)
 				 ACPI_MAX_PARSE_CACHE_DEPTH,
 				 &acpi_gbl_ps_node_cache);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -131,6 +136,7 @@ acpi_status acpi_ut_create_caches(void)
 				 ACPI_MAX_EXTPARSE_CACHE_DEPTH,
 				 &acpi_gbl_ps_node_ext_cache);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -140,6 +146,7 @@ acpi_status acpi_ut_create_caches(void)
 				 ACPI_MAX_OBJECT_CACHE_DEPTH,
 				 &acpi_gbl_operand_cache);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 #ifdef ACPI_ASL_COMPILER
@@ -225,6 +232,7 @@ acpi_status acpi_ut_delete_caches(void)
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	(void)acpi_os_delete_cache(acpi_gbl_namespace_cache);
 	acpi_gbl_namespace_cache = NULL;
 
@@ -287,6 +295,7 @@ acpi_status acpi_ut_validate_buffer(struct acpi_buffer *buffer)
 	/* Obviously, the structure pointer must be valid */
 
 	if (!buffer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -295,12 +304,14 @@ acpi_status acpi_ut_validate_buffer(struct acpi_buffer *buffer)
 	if ((buffer->length == ACPI_NO_BUFFER) ||
 	    (buffer->length == ACPI_ALLOCATE_BUFFER) ||
 	    (buffer->length == ACPI_ALLOCATE_LOCAL_BUFFER)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
 	/* Length is valid, the buffer pointer must be also */
 
 	if (!buffer->pointer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -329,6 +340,7 @@ acpi_ut_initialize_buffer(struct acpi_buffer *buffer, acpi_size required_length)
 	/* Parameter validation */
 
 	if (!buffer || !required_length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -348,6 +360,7 @@ acpi_ut_initialize_buffer(struct acpi_buffer *buffer, acpi_size required_length)
 
 		/* Return the exception (and the required buffer length) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BUFFER_OVERFLOW);
 
 	case ACPI_ALLOCATE_BUFFER:
@@ -373,6 +386,7 @@ acpi_ut_initialize_buffer(struct acpi_buffer *buffer, acpi_size required_length)
 		/* Existing buffer: Validate the size of the buffer */
 
 		if (input_buffer_length < required_length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_BUFFER_OVERFLOW);
 		}
 		break;
@@ -381,11 +395,13 @@ acpi_ut_initialize_buffer(struct acpi_buffer *buffer, acpi_size required_length)
 	/* Validate allocation from above or input buffer pointer */
 
 	if (!buffer->pointer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_NO_MEMORY);
 	}
 
 	/* Have a valid buffer, clear it */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(buffer->pointer, 0, required_length);
 	return (AE_OK);
 }
diff --git a/drivers/acpi/acpica/utascii.c b/drivers/acpi/acpica/utascii.c
index 909bdb1..05648a0 100644
--- a/drivers/acpi/acpica/utascii.c
+++ b/drivers/acpi/acpica/utascii.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utascii - Utility ascii functions
@@ -64,6 +66,7 @@ u8 acpi_ut_valid_nameseg(char *name)
 
 	/* Validate each character in the signature */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ACPI_NAME_SIZE; i++) {
 		if (!acpi_ut_valid_name_char(name[i], i)) {
 			return (FALSE);
@@ -99,13 +102,17 @@ u8 acpi_ut_valid_name_char(char character, u32 position)
 
 		/* Allow a '!' in the last position */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (character == '!' && position == 3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (TRUE);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (TRUE);
 }
 
@@ -127,6 +134,7 @@ void acpi_ut_check_and_repair_ascii(u8 *name, char *repaired_name, u32 count)
 {
 	u32 i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < count; i++) {
 		repaired_name[i] = (char)name[i];
 
diff --git a/drivers/acpi/acpica/utcopy.c b/drivers/acpi/acpica/utcopy.c
index e938225..91ec9e4 100644
--- a/drivers/acpi/acpica/utcopy.c
+++ b/drivers/acpi/acpica/utcopy.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utcopy - Internal to external object translation utilities
@@ -124,11 +126,13 @@ acpi_ut_copy_isimple_to_esimple(union acpi_operand_object *internal_object,
 	 * package element)
 	 */
 	if (!internal_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_OK);
 	}
 
 	/* Always clear the external object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(external_object, 0, sizeof(union acpi_object));
 
 	/*
@@ -142,6 +146,7 @@ acpi_ut_copy_isimple_to_esimple(union acpi_operand_object *internal_object,
 	switch (internal_object->common.type) {
 	case ACPI_TYPE_STRING:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		external_object->string.pointer = (char *)data_space;
 		external_object->string.length = internal_object->string.length;
 		*buffer_space_used = ACPI_ROUND_UP_TO_NATIVE_WORD((acpi_size)
@@ -149,6 +154,7 @@ acpi_ut_copy_isimple_to_esimple(union acpi_operand_object *internal_object,
 								  string.
 								  length + 1);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy((void *)data_space,
 		       (void *)internal_object->string.pointer,
 		       (acpi_size)internal_object->string.length + 1);
@@ -176,6 +182,7 @@ acpi_ut_copy_isimple_to_esimple(union acpi_operand_object *internal_object,
 
 		/* This is an object reference. */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (internal_object->reference.class) {
 		case ACPI_REFCLASS_NAME:
 			/*
@@ -192,6 +199,7 @@ acpi_ut_copy_isimple_to_esimple(union acpi_operand_object *internal_object,
 
 			/* All other reference types are unsupported */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_TYPE);
 		}
 		break;
@@ -208,6 +216,7 @@ acpi_ut_copy_isimple_to_esimple(union acpi_operand_object *internal_object,
 
 	case ACPI_TYPE_POWER:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		external_object->power_resource.system_level =
 		    internal_object->power_resource.system_level;
 
@@ -227,6 +236,7 @@ acpi_ut_copy_isimple_to_esimple(union acpi_operand_object *internal_object,
 		return_ACPI_STATUS(AE_SUPPORT);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -469,12 +479,14 @@ acpi_ut_copy_esimple_to_isimple(union acpi_object *external_object,
 								 external_object->
 								 type);
 		if (!internal_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(AE_NO_MEMORY);
 		}
 		break;
 
 	case ACPI_TYPE_ANY:	/* This is the case for a NULL object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*ret_internal_object = NULL;
 		return_ACPI_STATUS(AE_OK);
 
@@ -482,6 +494,7 @@ acpi_ut_copy_esimple_to_isimple(union acpi_object *external_object,
 
 		/* All other types are not supported */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Unsupported object type, cannot convert to internal object: %s",
 			    acpi_ut_get_type_name(external_object->type)));
@@ -502,6 +515,7 @@ acpi_ut_copy_esimple_to_isimple(union acpi_object *external_object,
 			goto error_exit;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(internal_object->string.pointer,
 		       external_object->string.pointer,
 		       external_object->string.length);
@@ -537,6 +551,7 @@ acpi_ut_copy_esimple_to_isimple(union acpi_object *external_object,
 
 		/* An incoming reference is defined to be a namespace node */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		internal_object->reference.class = ACPI_REFCLASS_REFOF;
 		internal_object->reference.object =
 		    external_object->reference.handle;
@@ -587,6 +602,7 @@ acpi_ut_copy_epackage_to_ipackage(union acpi_object *external_object,
 	package_object =
 	    acpi_ut_create_package_object(external_object->package.count);
 	if (!package_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -605,6 +621,7 @@ acpi_ut_copy_epackage_to_ipackage(union acpi_object *external_object,
 
 			/* Truncate package and delete it */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			package_object->package.count = i;
 			package_elements[i] = NULL;
 			acpi_ut_remove_reference(package_object);
@@ -690,9 +707,11 @@ acpi_ut_copy_simple_object(union acpi_operand_object *source_desc,
 	 */
 	copy_size = sizeof(union acpi_operand_object);
 	if (ACPI_GET_DESCRIPTOR_TYPE(source_desc) == ACPI_DESC_TYPE_NAMED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		copy_size = sizeof(struct acpi_namespace_node);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(ACPI_CAST_PTR(char, dest_desc),
 	       ACPI_CAST_PTR(char, source_desc), copy_size);
 
@@ -719,6 +738,7 @@ acpi_ut_copy_simple_object(union acpi_operand_object *source_desc,
 			dest_desc->buffer.pointer =
 			    ACPI_ALLOCATE(source_desc->buffer.length);
 			if (!dest_desc->buffer.pointer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (AE_NO_MEMORY);
 			}
 
@@ -741,11 +761,13 @@ acpi_ut_copy_simple_object(union acpi_operand_object *source_desc,
 			    ACPI_ALLOCATE((acpi_size)source_desc->string.
 					  length + 1);
 			if (!dest_desc->string.pointer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (AE_NO_MEMORY);
 			}
 
 			/* Copy the actual string data */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(dest_desc->string.pointer,
 			       source_desc->string.pointer,
 			       (acpi_size)source_desc->string.length + 1);
@@ -765,6 +787,7 @@ acpi_ut_copy_simple_object(union acpi_operand_object *source_desc,
 			break;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_add_reference(source_desc->reference.object);
 		break;
 
@@ -773,6 +796,7 @@ acpi_ut_copy_simple_object(union acpi_operand_object *source_desc,
 		 * We copied the Region Handler, so we now must add a reference
 		 */
 		if (dest_desc->region.handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_add_reference(dest_desc->region.handler);
 		}
 		break;
@@ -783,18 +807,22 @@ acpi_ut_copy_simple_object(union acpi_operand_object *source_desc,
 		 */
 	case ACPI_TYPE_MUTEX:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_os_create_mutex(&dest_desc->mutex.os_mutex);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (status);
 		}
 		break;
 
 	case ACPI_TYPE_EVENT:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_os_create_semaphore(ACPI_NO_UNIT_LIMIT, 0,
 						  &dest_desc->event.
 						  os_semaphore);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (status);
 		}
 		break;
@@ -806,6 +834,7 @@ acpi_ut_copy_simple_object(union acpi_operand_object *source_desc,
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 }
 
@@ -843,6 +872,7 @@ acpi_ut_copy_ielement_to_ielement(u8 object_type,
 
 		/* A null source object indicates a (legal) null package element */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (source_object) {
 			/*
 			 * This is a simple object, just copy it
@@ -939,6 +969,7 @@ acpi_ut_copy_ipackage_to_ipackage(union acpi_operand_object *source_obj,
 							   count +
 							   1) * sizeof(void *));
 	if (!dest_obj->package.elements) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Package allocation failure"));
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
@@ -987,6 +1018,7 @@ acpi_ut_copy_iobject_to_iobject(union acpi_operand_object *source_desc,
 
 	*dest_desc = acpi_ut_create_internal_object(source_desc->common.type);
 	if (!*dest_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -1003,8 +1035,10 @@ acpi_ut_copy_iobject_to_iobject(union acpi_operand_object *source_desc,
 	/* Delete the allocated object if copy failed */
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_ut_remove_reference(*dest_desc);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
diff --git a/drivers/acpi/acpica/utdecode.c b/drivers/acpi/acpica/utdecode.c
index 02cd2c2..7aa4aa8 100644
--- a/drivers/acpi/acpica/utdecode.c
+++ b/drivers/acpi/acpica/utdecode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utdecode - Utility decoding routines (value-to-string)
@@ -118,6 +120,7 @@ const char *acpi_gbl_region_types[ACPI_NUM_PREDEFINED_REGIONS] = {
 const char *acpi_ut_get_region_name(u8 space_id)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (space_id >= ACPI_USER_REGION_BEGIN) {
 		return ("UserDefinedRegion");
 	} else if (space_id == ACPI_ADR_SPACE_DATA_TABLE) {
@@ -156,6 +159,7 @@ static const char *acpi_gbl_event_types[ACPI_NUM_FIXED_EVENTS] = {
 const char *acpi_ut_get_event_name(u32 event_id)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (event_id > ACPI_EVENT_MAX) {
 		return ("InvalidEventID");
 	}
@@ -225,6 +229,7 @@ static const char *acpi_gbl_ns_type_names[] = {
 const char *acpi_ut_get_type_name(acpi_object_type type)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type > ACPI_TYPE_INVALID) {
 		return (acpi_gbl_bad_type);
 	}
@@ -236,6 +241,7 @@ const char *acpi_ut_get_object_type_name(union acpi_operand_object *obj_desc)
 {
 	ACPI_FUNCTION_TRACE(ut_get_object_type_name);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!obj_desc) {
 		ACPI_DEBUG_PRINT((ACPI_DB_EXEC, "Null Object Descriptor\n"));
 		return_STR("[NULL Object Descriptor]");
@@ -276,18 +282,21 @@ const char *acpi_ut_get_node_name(void *object)
 	/* Must return a string of exactly 4 characters == ACPI_NAME_SIZE */
 
 	if (!object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ("NULL");
 	}
 
 	/* Check for Root node */
 
 	if ((object == ACPI_ROOT_OBJECT) || (object == acpi_gbl_root_node)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ("\"\\\" ");
 	}
 
 	/* Descriptor must be a namespace node */
 
 	if (ACPI_GET_DESCRIPTOR_TYPE(node) != ACPI_DESC_TYPE_NAMED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ("####");
 	}
 
@@ -338,6 +347,7 @@ static const char *acpi_gbl_desc_type_names[] = {
 const char *acpi_ut_get_descriptor_name(void *object)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!object) {
 		return ("NULL OBJECT");
 	}
@@ -376,6 +386,7 @@ static const char *acpi_gbl_ref_class_names[] = {
 const char *acpi_ut_get_reference_name(union acpi_operand_object *object)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!object) {
 		return ("NULL Object");
 	}
@@ -604,6 +615,7 @@ u8 acpi_ut_valid_object_type(acpi_object_type type)
 
 		/* Note: Assumes all TYPEs are contiguous (external/local) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
diff --git a/drivers/acpi/acpica/utdelete.c b/drivers/acpi/acpica/utdelete.c
index c6eb9fa..d98653e 100644
--- a/drivers/acpi/acpica/utdelete.c
+++ b/drivers/acpi/acpica/utdelete.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: utdelete - object deletion and reference count utilities
@@ -81,6 +83,7 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 	ACPI_FUNCTION_TRACE_PTR(ut_delete_internal_obj, object);
 
 	if (!object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -143,7 +146,9 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 		 */
 	case ACPI_TYPE_DEVICE:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (object->device.gpe_block) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			(void)acpi_ev_delete_gpe_block(object->device.
 						       gpe_block);
 		}
@@ -155,8 +160,11 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 
 		/* Walk the address handler list for this object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		handler_desc = object->common_notify.handler;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (handler_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			next_desc = handler_desc->address_space.next;
 			acpi_ut_remove_reference(handler_desc);
 			handler_desc = next_desc;
@@ -169,6 +177,7 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 				  "***** Mutex %p, OS Mutex %p\n",
 				  object, object->mutex.os_mutex));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (object == acpi_gbl_global_lock_mutex) {
 
 			/* Global Lock has extra semaphore */
@@ -181,6 +190,7 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 			acpi_os_delete_mutex(object->mutex.os_mutex);
 			acpi_gbl_global_lock_mutex = NULL;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ex_unlink_mutex(object);
 			acpi_os_delete_mutex(object->mutex.os_mutex);
 		}
@@ -192,6 +202,7 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 				  "***** Event %p, OS Semaphore %p\n",
 				  object, object->event.os_semaphore));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		(void)acpi_os_delete_semaphore(object->event.os_semaphore);
 		object->event.os_semaphore = NULL;
 		break;
@@ -203,14 +214,18 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 
 		/* Delete the method mutex if it exists */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (object->method.mutex) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_os_delete_mutex(object->method.mutex->mutex.
 					     os_mutex);
 			acpi_ut_delete_object_desc(object->method.mutex);
 			object->method.mutex = NULL;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (object->method.node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			object->method.node = NULL;
 		}
 		break;
@@ -225,10 +240,12 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 		 * are installed in this list. (Not created within a method)
 		 */
 		if (!(object->region.node->flags & ANOBJ_TEMPORARY)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_remove_address_range(object->region.space_id,
 						     object->region.node);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		second_desc = acpi_ns_get_secondary_object(object);
 		if (second_desc) {
 			/*
@@ -238,6 +255,7 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 			 */
 			handler_desc = object->region.handler;
 			if (handler_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				next_desc =
 				    handler_desc->address_space.region_list;
 				start_desc = next_desc;
@@ -246,8 +264,11 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 
 				/* Remove the region object from the handler list */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				while (next_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (next_desc == object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						*last_obj_ptr =
 						    next_desc->region.next;
 						break;
@@ -255,12 +276,14 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 
 					/* Walk the linked list of handlers */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					last_obj_ptr = &next_desc->region.next;
 					next_desc = next_desc->region.next;
 
 					/* Prevent infinite loop if list is corrupted */
 
 					if (next_desc == start_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						ACPI_ERROR((AE_INFO,
 							    "Circular region list in address handler object %p",
 							    handler_desc));
@@ -268,12 +291,15 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 					}
 				}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (handler_desc->address_space.handler_flags &
 				    ACPI_ADDR_HANDLER_DEFAULT_INSTALLED) {
 
 					/* Deactivate region and free region context */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (handler_desc->address_space.setup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						(void)handler_desc->
 						    address_space.setup(object,
 									ACPI_REGION_DEACTIVATE,
@@ -286,11 +312,13 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 					}
 				}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_ut_remove_reference(handler_desc);
 			}
 
 			/* Now we can free the Extra object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_delete_object_desc(second_desc);
 		}
 		break;
@@ -311,8 +339,10 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 		ACPI_DEBUG_PRINT((ACPI_DB_ALLOCATIONS,
 				  "***** Bank Field %p\n", object));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		second_desc = acpi_ns_get_secondary_object(object);
 		if (second_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_delete_object_desc(second_desc);
 		}
 		break;
@@ -327,6 +357,7 @@ static void acpi_ut_delete_internal_obj(union acpi_operand_object *object)
 	if (obj_pointer) {
 		ACPI_DEBUG_PRINT((ACPI_DB_ALLOCATIONS,
 				  "Deleting Object Subptr %p\n", obj_pointer));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(obj_pointer);
 	}
 
@@ -366,6 +397,7 @@ void acpi_ut_delete_internal_object_list(union acpi_operand_object **obj_list)
 
 	/* Free the combined parameter pointer list and object array */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_FREE(obj_list);
 	return;
 }
@@ -393,6 +425,7 @@ acpi_ut_update_ref_count(union acpi_operand_object *object, u32 action)
 	ACPI_FUNCTION_NAME(ut_update_ref_count);
 
 	if (!object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -415,6 +448,7 @@ acpi_ut_update_ref_count(union acpi_operand_object *object, u32 action)
 		/* The current reference count should never be zero here */
 
 		if (!original_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_WARNING((AE_INFO,
 				      "Obj %p, Reference Count was zero before increment\n",
 				      object));
@@ -439,6 +473,7 @@ acpi_ut_update_ref_count(union acpi_operand_object *object, u32 action)
 		acpi_os_release_lock(acpi_gbl_reference_count_lock, lock_flags);
 
 		if (!original_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_WARNING((AE_INFO,
 				      "Obj %p, Reference Count is already zero, cannot decrement\n",
 				      object));
@@ -457,6 +492,7 @@ acpi_ut_update_ref_count(union acpi_operand_object *object, u32 action)
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_os_release_lock(acpi_gbl_reference_count_lock, lock_flags);
 		ACPI_ERROR((AE_INFO, "Unknown Reference Count action (0x%X)",
 			    action));
@@ -468,6 +504,7 @@ acpi_ut_update_ref_count(union acpi_operand_object *object, u32 action)
 	 * (A deleted object will have a huge reference count)
 	 */
 	if (new_count > ACPI_MAX_REFERENCE_COUNT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_WARNING((AE_INFO,
 			      "Large Reference Count (0x%X) in object %p, Type=0x%.2X",
 			      new_count, object, object->common.type));
@@ -514,6 +551,7 @@ acpi_ut_update_object_reference(union acpi_operand_object *object, u16 action)
 		if (ACPI_GET_DESCRIPTOR_TYPE(object) == ACPI_DESC_TYPE_NAMED) {
 			ACPI_DEBUG_PRINT((ACPI_DB_ALLOCATIONS,
 					  "Object %p is NS handle\n", object));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (AE_OK);
 		}
 
@@ -534,6 +572,7 @@ acpi_ut_update_object_reference(union acpi_operand_object *object, u16 action)
 				prev_object =
 				    object->common_notify.notify_list[i];
 				while (prev_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					next_object =
 					    prev_object->notify.next[i];
 					acpi_ut_update_ref_count(prev_object,
@@ -585,6 +624,7 @@ acpi_ut_update_object_reference(union acpi_operand_object *object, u16 action)
 					break;
 				}
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			next_object = NULL;
 			break;
 
@@ -600,6 +640,7 @@ acpi_ut_update_object_reference(union acpi_operand_object *object, u16 action)
 
 		case ACPI_TYPE_LOCAL_BANK_FIELD:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			next_object = object->bank_field.bank_obj;
 			status =
 			    acpi_ut_create_update_state_and_push(object->
@@ -614,6 +655,7 @@ acpi_ut_update_object_reference(union acpi_operand_object *object, u16 action)
 
 		case ACPI_TYPE_LOCAL_INDEX_FIELD:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			next_object = object->index_field.index_obj;
 			status =
 			    acpi_ut_create_update_state_and_push(object->
@@ -655,6 +697,7 @@ acpi_ut_update_object_reference(union acpi_operand_object *object, u16 action)
 		/* Move on to the next object to be updated */
 
 		if (next_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			object = next_object;
 			next_object = NULL;
 		} else if (state_list) {
@@ -664,20 +707,25 @@ acpi_ut_update_object_reference(union acpi_operand_object *object, u16 action)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (AE_OK);
 
 error_exit:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_EXCEPTION((AE_INFO, status,
 			"Could not update object reference count"));
 
 	/* Free any stacked Update State objects */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (state_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		state = acpi_ut_pop_generic_state(&state_list);
 		acpi_ut_delete_generic_state(state);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (status);
 }
 
@@ -702,6 +750,7 @@ void acpi_ut_add_reference(union acpi_operand_object *object)
 	/* Ensure that we have a valid object */
 
 	if (!acpi_ut_valid_internal_object(object)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -738,12 +787,14 @@ void acpi_ut_remove_reference(union acpi_operand_object *object)
 	 */
 	if (!object ||
 	    (ACPI_GET_DESCRIPTOR_TYPE(object) == ACPI_DESC_TYPE_NAMED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
 	/* Ensure that we have a valid object */
 
 	if (!acpi_ut_valid_internal_object(object)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
diff --git a/drivers/acpi/acpica/uteval.c b/drivers/acpi/acpica/uteval.c
index 3fce751..033206b 100644
--- a/drivers/acpi/acpica/uteval.c
+++ b/drivers/acpi/acpica/uteval.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: uteval - Object evaluation
@@ -83,6 +85,7 @@ acpi_ut_evaluate_object(struct acpi_namespace_node *prefix_node,
 
 	info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info));
 	if (!info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -99,6 +102,7 @@ acpi_ut_evaluate_object(struct acpi_namespace_node *prefix_node,
 					  acpi_ut_get_node_name(prefix_node),
 					  path));
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR_METHOD("Method execution failed",
 					  prefix_node, path, status);
 		}
@@ -109,7 +113,9 @@ acpi_ut_evaluate_object(struct acpi_namespace_node *prefix_node,
 	/* Did we get a return object? */
 
 	if (!info->return_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (expected_return_btypes) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_ERROR_METHOD("No object was returned from",
 					  prefix_node, path, AE_NOT_EXIST);
 
@@ -124,26 +130,31 @@ acpi_ut_evaluate_object(struct acpi_namespace_node *prefix_node,
 	switch ((info->return_object)->common.type) {
 	case ACPI_TYPE_INTEGER:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_btype = ACPI_BTYPE_INTEGER;
 		break;
 
 	case ACPI_TYPE_BUFFER:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_btype = ACPI_BTYPE_BUFFER;
 		break;
 
 	case ACPI_TYPE_STRING:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_btype = ACPI_BTYPE_STRING;
 		break;
 
 	case ACPI_TYPE_PACKAGE:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_btype = ACPI_BTYPE_PACKAGE;
 		break;
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_btype = 0;
 		break;
 	}
@@ -161,6 +172,7 @@ acpi_ut_evaluate_object(struct acpi_namespace_node *prefix_node,
 	/* Is the return object one of the expected types? */
 
 	if (!(expected_return_btypes & return_btype)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR_METHOD("Return object type is incorrect",
 				  prefix_node, path, AE_TYPE);
 
@@ -216,6 +228,7 @@ acpi_ut_evaluate_numeric_object(const char *object_name,
 	status = acpi_ut_evaluate_object(device_node, object_name,
 					 ACPI_BTYPE_INTEGER, &obj_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -271,6 +284,7 @@ acpi_ut_execute_STA(struct acpi_namespace_node *device_node, u32 * flags)
 			status = AE_OK;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/uthex.c b/drivers/acpi/acpica/uthex.c
index fb406da..57ea4fd 100644
--- a/drivers/acpi/acpica/uthex.c
+++ b/drivers/acpi/acpica/uthex.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: uthex -- Hex/ASCII support functions
@@ -96,6 +98,7 @@ acpi_status acpi_ut_ascii_to_hex_byte(char *two_ascii_chars, u8 *return_byte)
 
 	if (!isxdigit((int)two_ascii_chars[0]) ||
 	    !isxdigit((int)two_ascii_chars[1])) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_HEX_CONSTANT);
 	}
 
@@ -136,5 +139,6 @@ u8 acpi_ut_ascii_char_to_hex(int hex_char)
 
 	/* Lower case a-f */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ((u8)(hex_char - 0x57));
 }
diff --git a/drivers/acpi/acpica/utids.c b/drivers/acpi/acpica/utids.c
index a6eb580..2e5233d 100644
--- a/drivers/acpi/acpica/utids.c
+++ b/drivers/acpi/acpica/utids.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utids - support for device Ids - HID, UID, CID, SUB, CLS
@@ -80,12 +82,14 @@ acpi_ut_execute_HID(struct acpi_namespace_node *device_node,
 					 ACPI_BTYPE_INTEGER | ACPI_BTYPE_STRING,
 					 &obj_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
 	/* Get the size of the String to be returned, includes null terminator */
 
 	if (obj_desc->common.type == ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		length = ACPI_EISAID_STRING_SIZE;
 	} else {
 		length = obj_desc->string.length + 1;
@@ -97,6 +101,7 @@ acpi_ut_execute_HID(struct acpi_namespace_node *device_node,
 	    ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_pnp_device_id) +
 				 (acpi_size)length);
 	if (!hid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -158,12 +163,14 @@ acpi_ut_execute_UID(struct acpi_namespace_node *device_node,
 					 ACPI_BTYPE_INTEGER | ACPI_BTYPE_STRING,
 					 &obj_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
 	/* Get the size of the String to be returned, includes null terminator */
 
 	if (obj_desc->common.type == ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		length = ACPI_MAX64_DECIMAL_DIGITS + 1;
 	} else {
 		length = obj_desc->string.length + 1;
@@ -175,6 +182,7 @@ acpi_ut_execute_UID(struct acpi_namespace_node *device_node,
 	    ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_pnp_device_id) +
 				 (acpi_size)length);
 	if (!uid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -249,6 +257,7 @@ acpi_ut_execute_CID(struct acpi_namespace_node *device_node,
 					 ACPI_BTYPE_INTEGER | ACPI_BTYPE_STRING
 					 | ACPI_BTYPE_PACKAGE, &obj_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -259,14 +268,17 @@ acpi_ut_execute_CID(struct acpi_namespace_node *device_node,
 	 * correct type (Integer or String).
 	 */
 	if (obj_desc->common.type == ACPI_TYPE_PACKAGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = obj_desc->package.count;
 		cid_objects = obj_desc->package.elements;
 	} else {		/* Single Integer or String CID */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = 1;
 		cid_objects = &obj_desc;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	string_area_size = 0;
 	for (i = 0; i < count; i++) {
 
@@ -280,11 +292,13 @@ acpi_ut_execute_CID(struct acpi_namespace_node *device_node,
 
 		case ACPI_TYPE_STRING:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			string_area_size += cid_objects[i]->string.length + 1;
 			break;
 
 		default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_TYPE;
 			goto cleanup;
 		}
@@ -302,6 +316,7 @@ acpi_ut_execute_CID(struct acpi_namespace_node *device_node,
 
 	cid_list = ACPI_ALLOCATE_ZEROED(cid_list_size);
 	if (!cid_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
@@ -326,6 +341,7 @@ acpi_ut_execute_CID(struct acpi_namespace_node *device_node,
 
 			/* Copy the String CID from the returned object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			strcpy(next_id_string, cid_objects[i]->string.pointer);
 			length = cid_objects[i]->string.length + 1;
 		}
@@ -385,26 +401,34 @@ acpi_ut_execute_CLS(struct acpi_namespace_node *device_node,
 	status = acpi_ut_evaluate_object(device_node, METHOD_NAME__CLS,
 					 ACPI_BTYPE_PACKAGE, &obj_desc);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
 	/* Get the size of the String to be returned, includes null terminator */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	length = ACPI_PCICLS_STRING_SIZE;
 	cls_objects = obj_desc->package.elements;
 	count = obj_desc->package.count;
 
 	if (obj_desc->common.type == ACPI_TYPE_PACKAGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (count > 0
 		    && cls_objects[0]->common.type == ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			class_code[0] = (u8)cls_objects[0]->integer.value;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (count > 1
 		    && cls_objects[1]->common.type == ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			class_code[1] = (u8)cls_objects[1]->integer.value;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (count > 2
 		    && cls_objects[2]->common.type == ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			class_code[2] = (u8)cls_objects[2]->integer.value;
 		}
 	}
@@ -415,12 +439,14 @@ acpi_ut_execute_CLS(struct acpi_namespace_node *device_node,
 	    ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_pnp_device_id) +
 				 (acpi_size)length);
 	if (!cls) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_NO_MEMORY;
 		goto cleanup;
 	}
 
 	/* Area for the string starts after PNP_DEVICE_ID struct */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cls->string =
 	    ACPI_ADD_PTR(char, cls, sizeof(struct acpi_pnp_device_id));
 
@@ -434,6 +460,7 @@ acpi_ut_execute_CLS(struct acpi_namespace_node *device_node,
 
 	/* On exit, we must delete the return object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_ut_remove_reference(obj_desc);
 	return_ACPI_STATUS(status);
 }
diff --git a/drivers/acpi/acpica/utinit.c b/drivers/acpi/acpica/utinit.c
index 23e766d..cc36099 100644
--- a/drivers/acpi/acpica/utinit.c
+++ b/drivers/acpi/acpica/utinit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utinit - Common ACPI subsystem initialization
@@ -85,6 +87,7 @@ static void acpi_ut_free_gpe_lists(void)
 	/* Free global GPE blocks and related info structures */
 
 	gpe_xrupt_info = acpi_gbl_gpe_xrupt_list_head;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (gpe_xrupt_info) {
 		gpe_block = gpe_xrupt_info->gpe_block_list_head;
 		while (gpe_block) {
@@ -127,6 +130,7 @@ acpi_status acpi_ut_init_globals(void)
 
 	status = acpi_ut_create_caches();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -259,6 +263,7 @@ static void acpi_ut_terminate(void)
 {
 	ACPI_FUNCTION_TRACE(ut_terminate);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_ut_free_gpe_lists();
 	acpi_ut_delete_address_lists();
 	return_VOID;
@@ -283,6 +288,7 @@ void acpi_ut_subsystem_shutdown(void)
 
 	/* Just exit if subsystem is already shutdown */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_gbl_shutdown) {
 		ACPI_ERROR((AE_INFO, "ACPI Subsystem is already terminated"));
 		return_VOID;
diff --git a/drivers/acpi/acpica/utlock.c b/drivers/acpi/acpica/utlock.c
index db2d991..5cf9e48 100644
--- a/drivers/acpi/acpica/utlock.c
+++ b/drivers/acpi/acpica/utlock.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utlock - Reader/Writer lock interfaces
@@ -66,6 +68,7 @@ acpi_status acpi_ut_create_rw_lock(struct acpi_rw_lock *lock)
 	lock->num_readers = 0;
 	status = acpi_os_create_mutex(&lock->reader_mutex);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -76,6 +79,7 @@ acpi_status acpi_ut_create_rw_lock(struct acpi_rw_lock *lock)
 void acpi_ut_delete_rw_lock(struct acpi_rw_lock *lock)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_os_delete_mutex(lock->reader_mutex);
 	acpi_os_delete_mutex(lock->writer_mutex);
 
@@ -108,6 +112,7 @@ acpi_status acpi_ut_acquire_read_lock(struct acpi_rw_lock *lock)
 
 	status = acpi_os_acquire_mutex(lock->reader_mutex, ACPI_WAIT_FOREVER);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -130,6 +135,7 @@ acpi_status acpi_ut_release_read_lock(struct acpi_rw_lock *lock)
 
 	status = acpi_os_acquire_mutex(lock->reader_mutex, ACPI_WAIT_FOREVER);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -171,5 +177,6 @@ acpi_status acpi_ut_acquire_write_lock(struct acpi_rw_lock *lock)
 void acpi_ut_release_write_lock(struct acpi_rw_lock *lock)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_os_release_mutex(lock->writer_mutex);
 }
diff --git a/drivers/acpi/acpica/utmath.c b/drivers/acpi/acpica/utmath.c
index 5f9c680..50292a1 100644
--- a/drivers/acpi/acpica/utmath.c
+++ b/drivers/acpi/acpica/utmath.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: utmath - Integer math support routines
diff --git a/drivers/acpi/acpica/utmisc.c b/drivers/acpi/acpica/utmisc.c
index 45c78c2..c712e18 100644
--- a/drivers/acpi/acpica/utmisc.c
+++ b/drivers/acpi/acpica/utmisc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: utmisc - common utility procedures
@@ -69,6 +71,7 @@ u8 acpi_ut_is_pci_root_bridge(char *id)
 	if (!(strcmp(id,
 		     PCI_ROOT_HID_STRING)) ||
 	    !(strcmp(id, PCI_EXPRESS_ROOT_HID_STRING))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (TRUE);
 	}
 
@@ -169,6 +172,7 @@ void acpi_ut_set_integer_width(u8 revision)
 	} else {
 		/* 64-bit case (ACPI 2.0+) */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_gbl_integer_bit_width = 64;
 		acpi_gbl_integer_nybble_width = 16;
 		acpi_gbl_integer_byte_width = 8;
@@ -201,11 +205,13 @@ acpi_ut_create_update_state_and_push(union acpi_operand_object *object,
 	/* Ignore null objects; these are expected */
 
 	if (!object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_OK);
 	}
 
 	state = acpi_ut_create_update_state(object, action);
 	if (!state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_NO_MEMORY);
 	}
 
@@ -243,6 +249,7 @@ acpi_ut_walk_package_tree(union acpi_operand_object *source_object,
 
 	state = acpi_ut_create_pkg_state(source_object, target_object, 0);
 	if (!state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(AE_NO_MEMORY);
 	}
 
@@ -272,6 +279,7 @@ acpi_ut_walk_package_tree(union acpi_operand_object *source_object,
 			    walk_callback(ACPI_COPY_TYPE_SIMPLE,
 					  this_source_obj, state, context);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 
@@ -312,6 +320,7 @@ acpi_ut_walk_package_tree(union acpi_operand_object *source_object,
 			    walk_callback(ACPI_COPY_TYPE_PACKAGE,
 					  this_source_obj, state, context);
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 
@@ -328,12 +337,14 @@ acpi_ut_walk_package_tree(union acpi_operand_object *source_object,
 
 				/* Free any stacked Update State objects */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				while (state_list) {
 					state =
 					    acpi_ut_pop_generic_state
 					    (&state_list);
 					acpi_ut_delete_generic_state(state);
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(AE_NO_MEMORY);
 			}
 		}
@@ -341,6 +352,7 @@ acpi_ut_walk_package_tree(union acpi_operand_object *source_object,
 
 	/* We should never get here */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_ERROR((AE_INFO, "State list did not terminate correctly"));
 
 	return_ACPI_STATUS(AE_AML_INTERNAL);
diff --git a/drivers/acpi/acpica/utmutex.c b/drivers/acpi/acpica/utmutex.c
index 5863547..9acd857 100644
--- a/drivers/acpi/acpica/utmutex.c
+++ b/drivers/acpi/acpica/utmutex.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: utmutex - local mutex support
@@ -77,6 +79,7 @@ acpi_status acpi_ut_mutex_initialize(void)
 	for (i = 0; i < ACPI_NUM_MUTEX; i++) {
 		status = acpi_ut_create_mutex(i);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	}
@@ -85,16 +88,19 @@ acpi_status acpi_ut_mutex_initialize(void)
 
 	status = acpi_os_create_lock (&acpi_gbl_gpe_lock);
 	if (ACPI_FAILURE (status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS (status);
 	}
 
 	status = acpi_os_create_lock (&acpi_gbl_hardware_lock);
 	if (ACPI_FAILURE (status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS (status);
 	}
 
 	status = acpi_os_create_lock(&acpi_gbl_reference_count_lock);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -102,6 +108,7 @@ acpi_status acpi_ut_mutex_initialize(void)
 
 	status = acpi_os_create_mutex(&acpi_gbl_osi_mutex);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -109,9 +116,11 @@ acpi_status acpi_ut_mutex_initialize(void)
 
 	status = acpi_ut_create_rw_lock(&acpi_gbl_namespace_rw_lock);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -136,6 +145,7 @@ void acpi_ut_mutex_terminate(void)
 
 	/* Delete each predefined mutex object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ACPI_NUM_MUTEX; i++) {
 		acpi_ut_delete_mutex(i);
 	}
@@ -200,6 +210,7 @@ static void acpi_ut_delete_mutex(acpi_mutex_handle mutex_id)
 
 	ACPI_FUNCTION_TRACE_U32(ut_delete_mutex, mutex_id);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_os_delete_mutex(acpi_gbl_mutex_info[mutex_id].mutex);
 
 	acpi_gbl_mutex_info[mutex_id].mutex = NULL;
@@ -228,9 +239,11 @@ acpi_status acpi_ut_acquire_mutex(acpi_mutex_handle mutex_id)
 	ACPI_FUNCTION_NAME(ut_acquire_mutex);
 
 	if (mutex_id > ACPI_MAX_MUTEX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	this_thread_id = acpi_os_get_thread_id();
 
 #ifdef ACPI_MUTEX_DEBUG
@@ -285,11 +298,13 @@ acpi_status acpi_ut_acquire_mutex(acpi_mutex_handle mutex_id)
 		acpi_gbl_mutex_info[mutex_id].use_count++;
 		acpi_gbl_mutex_info[mutex_id].thread_id = this_thread_id;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"Thread %u could not acquire Mutex [0x%X]",
 				(u32)this_thread_id, mutex_id));
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (status);
 }
 
@@ -314,6 +329,7 @@ acpi_status acpi_ut_release_mutex(acpi_mutex_handle mutex_id)
 			  acpi_ut_get_mutex_name(mutex_id)));
 
 	if (mutex_id > ACPI_MAX_MUTEX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
@@ -321,6 +337,7 @@ acpi_status acpi_ut_release_mutex(acpi_mutex_handle mutex_id)
 	 * Mutex must be acquired in order to release it!
 	 */
 	if (acpi_gbl_mutex_info[mutex_id].thread_id == ACPI_MUTEX_NOT_ACQUIRED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Mutex [0x%X] is not acquired, cannot release",
 			    mutex_id));
diff --git a/drivers/acpi/acpica/utobject.c b/drivers/acpi/acpica/utobject.c
index cb3db9f..5100c04 100644
--- a/drivers/acpi/acpica/utobject.c
+++ b/drivers/acpi/acpica/utobject.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utobject - ACPI object create/delete/size/cache routines
@@ -102,9 +104,11 @@ union acpi_operand_object *acpi_ut_create_internal_object_dbg(const char
 	    acpi_ut_allocate_object_desc_dbg(module_name, line_number,
 					     component_id);
 	if (!object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_PTR(NULL);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (type) {
 	case ACPI_TYPE_REGION:
 	case ACPI_TYPE_BUFFER_FIELD:
@@ -116,6 +120,7 @@ union acpi_operand_object *acpi_ut_create_internal_object_dbg(const char
 		    acpi_ut_allocate_object_desc_dbg(module_name, line_number,
 						     component_id);
 		if (!second_object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_ut_delete_object_desc(object);
 			return_PTR(NULL);
 		}
@@ -170,6 +175,7 @@ union acpi_operand_object *acpi_ut_create_package_object(u32 count)
 
 	package_desc = acpi_ut_create_internal_object(ACPI_TYPE_PACKAGE);
 	if (!package_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_PTR(NULL);
 	}
 
@@ -180,6 +186,7 @@ union acpi_operand_object *acpi_ut_create_package_object(u32 count)
 	package_elements = ACPI_ALLOCATE_ZEROED(((acpi_size)count +
 						 1) * sizeof(void *));
 	if (!package_elements) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_FREE(package_desc);
 		return_PTR(NULL);
 	}
@@ -211,6 +218,7 @@ union acpi_operand_object *acpi_ut_create_integer_object(u64 initial_value)
 
 	integer_desc = acpi_ut_create_internal_object(ACPI_TYPE_INTEGER);
 	if (!integer_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_PTR(NULL);
 	}
 
@@ -241,6 +249,7 @@ union acpi_operand_object *acpi_ut_create_buffer_object(acpi_size buffer_size)
 
 	buffer_desc = acpi_ut_create_internal_object(ACPI_TYPE_BUFFER);
 	if (!buffer_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_PTR(NULL);
 	}
 
@@ -296,6 +305,7 @@ union acpi_operand_object *acpi_ut_create_string_object(acpi_size string_size)
 
 	string_desc = acpi_ut_create_internal_object(ACPI_TYPE_STRING);
 	if (!string_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_PTR(NULL);
 	}
 
@@ -305,6 +315,7 @@ union acpi_operand_object *acpi_ut_create_string_object(acpi_size string_size)
 	 */
 	string = ACPI_ALLOCATE_ZEROED(string_size + 1);
 	if (!string) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Could not allocate size %u",
 			    (u32)string_size));
 
@@ -343,6 +354,7 @@ u8 acpi_ut_valid_internal_object(void *object)
 
 	if (!object) {
 		ACPI_DEBUG_PRINT((ACPI_DB_EXEC, "**** Null Object Ptr\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (FALSE);
 	}
 
@@ -353,6 +365,7 @@ u8 acpi_ut_valid_internal_object(void *object)
 
 		/* The object appears to be a valid union acpi_operand_object */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (TRUE);
 
 	default:
@@ -363,6 +376,7 @@ u8 acpi_ut_valid_internal_object(void *object)
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (FALSE);
 }
 
@@ -390,6 +404,7 @@ void *acpi_ut_allocate_object_desc_dbg(const char *module_name,
 
 	object = acpi_os_acquire_object(acpi_gbl_operand_cache);
 	if (!object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((module_name, line_number,
 			    "Could not allocate an object descriptor"));
 
@@ -425,6 +440,7 @@ void acpi_ut_delete_object_desc(union acpi_operand_object *object)
 	/* Object must be of type union acpi_operand_object */
 
 	if (ACPI_GET_DESCRIPTOR_TYPE(object) != ACPI_DESC_TYPE_OPERAND) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "%p is not an ACPI Operand object [%s]", object,
 			    acpi_ut_get_descriptor_name(object)));
@@ -483,6 +499,7 @@ acpi_ut_get_simple_object_size(union acpi_operand_object *internal_object,
 
 		/* A namespace node should never get here */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Received a namespace node [%4.4s] "
 			    "where an operand object is required",
@@ -500,6 +517,7 @@ acpi_ut_get_simple_object_size(union acpi_operand_object *internal_object,
 	switch (internal_object->common.type) {
 	case ACPI_TYPE_STRING:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		length += (acpi_size)internal_object->string.length + 1;
 		break;
 
@@ -518,6 +536,7 @@ acpi_ut_get_simple_object_size(union acpi_operand_object *internal_object,
 
 	case ACPI_TYPE_LOCAL_REFERENCE:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (internal_object->reference.class) {
 		case ACPI_REFCLASS_NAME:
 			/*
@@ -528,9 +547,11 @@ acpi_ut_get_simple_object_size(union acpi_operand_object *internal_object,
 			    acpi_ns_get_pathname_length(internal_object->
 							reference.node);
 			if (!size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(AE_BAD_PARAMETER);
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			length += ACPI_ROUND_UP_TO_NATIVE_WORD(size);
 			break;
 
@@ -553,6 +574,7 @@ acpi_ut_get_simple_object_size(union acpi_operand_object *internal_object,
 
 	default:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Cannot convert to external object - "
 			    "unsupported type [%s] 0x%X in object %p",
 			    acpi_ut_get_object_type_name(internal_object),
@@ -660,6 +682,7 @@ acpi_ut_get_package_object_size(union acpi_operand_object *internal_object,
 	    acpi_ut_walk_package_tree(internal_object, NULL,
 				      acpi_ut_get_element_length, &info);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
diff --git a/drivers/acpi/acpica/utosi.c b/drivers/acpi/acpica/utosi.c
index 3175b13..b405b17 100644
--- a/drivers/acpi/acpica/utosi.c
+++ b/drivers/acpi/acpica/utosi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utosi - Support for the _OSI predefined control method
@@ -139,6 +141,7 @@ acpi_status acpi_ut_initialize_interfaces(void)
 
 	status = acpi_os_acquire_mutex(acpi_gbl_osi_mutex, ACPI_WAIT_FOREVER);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -177,6 +180,7 @@ acpi_status acpi_ut_interface_terminate(void)
 
 	status = acpi_os_acquire_mutex(acpi_gbl_osi_mutex, ACPI_WAIT_FOREVER);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -229,6 +233,7 @@ acpi_status acpi_ut_install_interface(acpi_string interface_name)
 	interface_info =
 	    ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_interface_info));
 	if (!interface_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_NO_MEMORY);
 	}
 
@@ -267,6 +272,7 @@ acpi_status acpi_ut_remove_interface(acpi_string interface_name)
 	struct acpi_interface_info *next_interface;
 
 	previous_interface = next_interface = acpi_gbl_supported_interfaces;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (next_interface) {
 		if (!strcmp(interface_name, next_interface->name)) {
 			/*
@@ -331,6 +337,7 @@ acpi_status acpi_ut_update_interfaces(u8 action)
 	struct acpi_interface_info *next_interface;
 
 	next_interface = acpi_gbl_supported_interfaces;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (next_interface) {
 		if (((next_interface->flags & ACPI_OSI_FEATURE) &&
 		     (action & ACPI_FEATURE_STRINGS)) ||
@@ -374,12 +381,14 @@ struct acpi_interface_info *acpi_ut_get_interface(acpi_string interface_name)
 	next_interface = acpi_gbl_supported_interfaces;
 	while (next_interface) {
 		if (!strcmp(interface_name, next_interface->name)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (next_interface);
 		}
 
 		next_interface = next_interface->next;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (NULL);
 }
 
@@ -422,6 +431,7 @@ acpi_status acpi_ut_osi_implementation(struct acpi_walk_state *walk_state)
 	/* Validate the string input argument (from the AML caller) */
 
 	string_desc = walk_state->arguments[0].object;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!string_desc || (string_desc->common.type != ACPI_TYPE_STRING)) {
 		return_ACPI_STATUS(AE_TYPE);
 	}
diff --git a/drivers/acpi/acpica/utownerid.c b/drivers/acpi/acpica/utownerid.c
index 1b3ee74..5f86e79 100644
--- a/drivers/acpi/acpica/utownerid.c
+++ b/drivers/acpi/acpica/utownerid.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: utownerid - Support for Table/Method Owner IDs
@@ -73,6 +75,7 @@ acpi_status acpi_ut_allocate_owner_id(acpi_owner_id *owner_id)
 	/* Guard against multiple allocations of ID to the same location */
 
 	if (*owner_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Owner ID [0x%2.2X] already exists", *owner_id));
 		return_ACPI_STATUS(AE_ALREADY_EXISTS);
@@ -82,6 +85,7 @@ acpi_status acpi_ut_allocate_owner_id(acpi_owner_id *owner_id)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_CACHES);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_ACPI_STATUS(status);
 	}
 
@@ -93,6 +97,7 @@ acpi_status acpi_ut_allocate_owner_id(acpi_owner_id *owner_id)
 	for (i = 0, j = acpi_gbl_last_owner_id_index;
 	     i < (ACPI_NUM_OWNERID_MASKS + 1); i++, j++) {
 		if (j >= ACPI_NUM_OWNERID_MASKS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			j = 0;	/* Wraparound to start of mask array */
 		}
 
@@ -189,6 +194,7 @@ void acpi_ut_release_owner_id(acpi_owner_id *owner_id_ptr)
 	/* Zero is not a valid owner_ID */
 
 	if (owner_id == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Invalid OwnerId: 0x%2.2X", owner_id));
 		return_VOID;
 	}
@@ -197,6 +203,7 @@ void acpi_ut_release_owner_id(acpi_owner_id *owner_id_ptr)
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_CACHES);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return_VOID;
 	}
 
@@ -214,6 +221,7 @@ void acpi_ut_release_owner_id(acpi_owner_id *owner_id_ptr)
 	if (acpi_gbl_owner_id_mask[index] & bit) {
 		acpi_gbl_owner_id_mask[index] ^= bit;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO,
 			    "Release of non-allocated OwnerId: 0x%2.2X",
 			    owner_id + 1));
diff --git a/drivers/acpi/acpica/utpredef.c b/drivers/acpi/acpica/utpredef.c
index 350709f..01ed3fa 100644
--- a/drivers/acpi/acpica/utpredef.c
+++ b/drivers/acpi/acpica/utpredef.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utpredef - support functions for predefined names
@@ -111,20 +113,24 @@ const union acpi_predefined_info *acpi_ut_match_predefined_method(char *name)
 	/* Quick check for a predefined name, first character must be underscore */
 
 	if (name[0] != '_') {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
 	/* Search info table for a predefined method/object name */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	this_name = acpi_gbl_predefined_methods;
 	while (this_name->info.name[0]) {
 		if (ACPI_COMPARE_NAME(name, this_name->info.name)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (this_name);
 		}
 
 		this_name = acpi_ut_get_next_predefined_method(this_name);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (NULL);		/* Not found */
 }
 
@@ -148,6 +154,7 @@ void acpi_ut_get_expected_return_types(char *buffer, u32 expected_btypes)
 	u32 j;
 
 	if (!expected_btypes) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		strcpy(buffer, "NONE");
 		return;
 	}
diff --git a/drivers/acpi/acpica/utresrc.c b/drivers/acpi/acpica/utresrc.c
index f9801d1..fb52c21 100644
--- a/drivers/acpi/acpica/utresrc.c
+++ b/drivers/acpi/acpica/utresrc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: utresrc - Resource management utilities
diff --git a/drivers/acpi/acpica/utstate.c b/drivers/acpi/acpica/utstate.c
index eafabcd..4a061da 100644
--- a/drivers/acpi/acpica/utstate.c
+++ b/drivers/acpi/acpica/utstate.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: utstate - state object support procedures
@@ -156,6 +158,7 @@ struct acpi_thread_state *acpi_ut_create_thread_state(void)
 
 	state = acpi_ut_create_generic_state();
 	if (!state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
@@ -167,10 +170,12 @@ struct acpi_thread_state *acpi_ut_create_thread_state(void)
 	/* Check for invalid thread ID - zero is very bad, it will break things */
 
 	if (!state->thread.thread_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_ERROR((AE_INFO, "Invalid zero ID from AcpiOsGetThreadId"));
 		state->thread.thread_id = (acpi_thread_id) 1;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ((struct acpi_thread_state *)state);
 }
 
@@ -200,6 +205,7 @@ union acpi_generic_state *acpi_ut_create_update_state(union acpi_operand_object
 
 	state = acpi_ut_create_generic_state();
 	if (!state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
@@ -236,6 +242,7 @@ union acpi_generic_state *acpi_ut_create_pkg_state(void *internal_object,
 
 	state = acpi_ut_create_generic_state();
 	if (!state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
@@ -273,6 +280,7 @@ union acpi_generic_state *acpi_ut_create_control_state(void)
 
 	state = acpi_ut_create_generic_state();
 	if (!state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (NULL);
 	}
 
diff --git a/drivers/acpi/acpica/utstring.c b/drivers/acpi/acpica/utstring.c
index 9eacbcb..f6fa9f3 100644
--- a/drivers/acpi/acpica/utstring.c
+++ b/drivers/acpi/acpica/utstring.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: utstring - Common functions for strings and characters
@@ -67,6 +69,7 @@ void acpi_ut_print_string(char *string, u16 max_length)
 	u32 i;
 
 	if (!string) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_os_printf("<\"NULL STRING PTR\">");
 		return;
 	}
@@ -178,9 +181,11 @@ void acpi_ut_repair_name(char *name)
 	 * error during the execution of module-level code.
 	 */
 	if (ACPI_COMPARE_NAME(name, "\\___")) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_MOVE_NAME(&original_name, name);
 
 	/* Check each character in the name */
@@ -203,7 +208,9 @@ void acpi_ut_repair_name(char *name)
 
 		/* Report warning only if in strict mode or debug mode */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!acpi_gbl_enable_interpreter_slack) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_WARNING((AE_INFO,
 				      "Invalid character(s) in name (0x%.8X), repaired: [%4.4s]",
 				      original_name, name));
diff --git a/drivers/acpi/acpica/utxface.c b/drivers/acpi/acpica/utxface.c
index 6b9ba40..fde362f 100644
--- a/drivers/acpi/acpica/utxface.c
+++ b/drivers/acpi/acpica/utxface.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utxface - External interfaces, miscellaneous utility functions
@@ -297,11 +299,13 @@ acpi_status acpi_install_interface(acpi_string interface_name)
 	/* Parameter validation */
 
 	if (!interface_name || (strlen(interface_name) == 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (AE_BAD_PARAMETER);
 	}
 
 	status = acpi_os_acquire_mutex(acpi_gbl_osi_mutex, ACPI_WAIT_FOREVER);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -317,11 +321,13 @@ acpi_status acpi_install_interface(acpi_string interface_name)
 			interface_info->flags &= ~ACPI_OSI_INVALID;
 			status = AE_OK;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_ALREADY_EXISTS;
 		}
 	} else {
 		/* New interface name, install into the global list */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_ut_install_interface(interface_name);
 	}
 
@@ -348,6 +354,7 @@ acpi_status acpi_remove_interface(acpi_string interface_name)
 
 	/* Parameter validation */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!interface_name || (strlen(interface_name) == 0)) {
 		return (AE_BAD_PARAMETER);
 	}
@@ -385,10 +392,12 @@ acpi_status acpi_install_interface_handler(acpi_interface_handler handler)
 
 	status = acpi_os_acquire_mutex(acpi_gbl_osi_mutex, ACPI_WAIT_FOREVER);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
 	if (handler && acpi_gbl_interface_handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_ALREADY_EXISTS;
 	} else {
 		acpi_gbl_interface_handler = handler;
@@ -419,6 +428,7 @@ acpi_status acpi_update_interfaces(u8 action)
 
 	status = acpi_os_acquire_mutex(acpi_gbl_osi_mutex, ACPI_WAIT_FOREVER);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (status);
 	}
 
@@ -454,6 +464,7 @@ acpi_check_address_range(acpi_adr_space_type space_id,
 
 	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (0);
 	}
 
@@ -491,6 +502,7 @@ acpi_decode_pld_buffer(u8 *in_buffer,
 
 	/* Parameter validation */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!in_buffer || !return_buffer
 	    || (length < ACPI_PLD_REV1_BUFFER_SIZE)) {
 		return (AE_BAD_PARAMETER);
diff --git a/drivers/acpi/acpica/utxferror.c b/drivers/acpi/acpica/utxferror.c
index 950a1e5..86de923 100644
--- a/drivers/acpi/acpica/utxferror.c
+++ b/drivers/acpi/acpica/utxferror.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*******************************************************************************
  *
  * Module Name: utxferror - Various error/warning output functions
@@ -111,6 +113,7 @@ acpi_exception(const char *module_name,
 	/* For AE_OK, just print the message */
 
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_os_printf(ACPI_MSG_EXCEPTION);
 
 	} else {
diff --git a/drivers/acpi/acpica/utxfinit.c b/drivers/acpi/acpica/utxfinit.c
index 6d51806..483fe4e 100644
--- a/drivers/acpi/acpica/utxfinit.c
+++ b/drivers/acpi/acpica/utxfinit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  *
  * Module Name: utxfinit - External interfaces for ACPICA initialization
@@ -82,6 +84,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_initialize_subsystem(void)
 
 	status = acpi_os_initialize();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status, "During OSL initialization"));
 		return_ACPI_STATUS(status);
 	}
@@ -90,6 +93,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_initialize_subsystem(void)
 
 	status = acpi_ut_init_globals();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"During initialization of globals"));
 		return_ACPI_STATUS(status);
@@ -99,6 +103,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_initialize_subsystem(void)
 
 	status = acpi_ut_mutex_initialize();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"During Global Mutex creation"));
 		return_ACPI_STATUS(status);
@@ -110,6 +115,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_initialize_subsystem(void)
 	 */
 	status = acpi_ns_root_initialize();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"During Namespace initialization"));
 		return_ACPI_STATUS(status);
@@ -119,11 +125,13 @@ acpi_status ACPI_INIT_FUNCTION acpi_initialize_subsystem(void)
 
 	status = acpi_ut_initialize_interfaces();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status,
 				"During OSI interfaces initialization"));
 		return_ACPI_STATUS(status);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(AE_OK);
 }
 
@@ -166,6 +174,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_enable_subsystem(u32 flags)
 
 		status = acpi_enable();
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_WARNING((AE_INFO, "AcpiEnable failed"));
 			return_ACPI_STATUS(status);
 		}
@@ -178,6 +187,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_enable_subsystem(u32 flags)
 	if (!(flags & ACPI_NO_FACS_INIT)) {
 		status = acpi_tb_initialize_facs();
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_WARNING((AE_INFO, "Could not map the FACS table"));
 			return_ACPI_STATUS(status);
 		}
@@ -203,6 +213,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_enable_subsystem(u32 flags)
 
 		status = acpi_ev_initialize_events();
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	}
@@ -217,11 +228,13 @@ acpi_status ACPI_INIT_FUNCTION acpi_enable_subsystem(u32 flags)
 
 		status = acpi_ev_install_xrupt_handlers();
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	}
 #endif				/* !ACPI_REDUCED_HARDWARE */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return_ACPI_STATUS(status);
 }
 
@@ -278,6 +291,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_initialize_objects(u32 flags)
 		if (!(flags & ACPI_NO_OBJECT_INIT)) {
 			status = acpi_ns_initialize_objects();
 			if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return_ACPI_STATUS(status);
 			}
 		}
@@ -290,6 +304,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_initialize_objects(u32 flags)
 	if (!(flags & (ACPI_NO_DEVICE_INIT | ACPI_NO_ADDRESS_SPACE_INIT))) {
 		status = acpi_ns_initialize_devices(flags);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return_ACPI_STATUS(status);
 		}
 	}
diff --git a/drivers/acpi/apei/bert.c b/drivers/acpi/apei/bert.c
index 12771fc..7b5e223 100644
--- a/drivers/acpi/apei/bert.c
+++ b/drivers/acpi/apei/bert.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * APEI Boot Error Record Table (BERT) support
  *
diff --git a/drivers/acpi/apei/erst.c b/drivers/acpi/apei/erst.c
index a943cf1..c3ba5ad 100644
--- a/drivers/acpi/apei/erst.c
+++ b/drivers/acpi/apei/erst.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * APEI Error Record Serialization Table support
  *
diff --git a/drivers/acpi/apei/ghes.c b/drivers/acpi/apei/ghes.c
index 572b6c7..1dd1f4b 100644
--- a/drivers/acpi/apei/ghes.c
+++ b/drivers/acpi/apei/ghes.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * APEI Generic Hardware Error Source support
  *
diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c
index 9cb7411..6bcd808 100644
--- a/drivers/acpi/apei/hest.c
+++ b/drivers/acpi/apei/hest.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * APEI Hardware Error Souce Table support
  *
diff --git a/drivers/acpi/battery.c b/drivers/acpi/battery.c
index 13e7b56..1b55349 100644
--- a/drivers/acpi/battery.c
+++ b/drivers/acpi/battery.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  battery.c - ACPI Battery Driver (Revision: 2.0)
  *
@@ -157,11 +159,13 @@ struct acpi_battery {
 
 static inline int acpi_battery_present(struct acpi_battery *battery)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return battery->device->status.battery_present;
 }
 
 static int acpi_battery_technology(struct acpi_battery *battery)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!strcasecmp("NiCd", battery->type))
 		return POWER_SUPPLY_TECHNOLOGY_NiCd;
 	if (!strcasecmp("NiMH", battery->type))
@@ -402,7 +406,9 @@ static int extract_package(struct acpi_battery *battery,
 	int i;
 	union acpi_object *element;
 	if (package->type != ACPI_TYPE_PACKAGE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	for (i = 0; i < num; ++i) {
 		if (package->package.count <= i)
 			return -EFAULT;
@@ -429,6 +435,7 @@ static int extract_package(struct acpi_battery *battery,
 
 static int acpi_battery_get_status(struct acpi_battery *battery)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_bus_get_status(battery->device)) {
 		ACPI_EXCEPTION((AE_INFO, AE_ERROR, "Evaluating _STA"));
 		return -ENODEV;
@@ -443,6 +450,7 @@ static int extract_battery_info(const int use_bix,
 {
 	int result = -EFAULT;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (use_bix && battery_bix_broken_package)
 		result = extract_package(battery, buffer->pointer,
 				extended_info_offsets + 1,
@@ -476,6 +484,7 @@ static int extract_battery_info(const int use_bix,
 
 static int acpi_battery_get_info(struct acpi_battery *battery)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const int xinfo = test_bit(ACPI_BATTERY_XINFO_PRESENT, &battery->flags);
 	int use_bix;
 	int result = -ENODEV;
@@ -520,7 +529,9 @@ static int acpi_battery_get_state(struct acpi_battery *battery)
 	struct acpi_buffer buffer = { ACPI_ALLOCATE_BUFFER, NULL };
 
 	if (!acpi_battery_present(battery))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (battery->update_time &&
 	    time_before(jiffies, battery->update_time +
@@ -603,6 +614,7 @@ static ssize_t acpi_battery_alarm_show(struct device *dev,
 					struct device_attribute *attr,
 					char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_battery *battery = to_acpi_battery(dev_get_drvdata(dev));
 	return sprintf(buf, "%d\n", battery->alarm * 1000);
 }
@@ -614,7 +626,9 @@ static ssize_t acpi_battery_alarm_store(struct device *dev,
 	unsigned long x;
 	struct acpi_battery *battery = to_acpi_battery(dev_get_drvdata(dev));
 	if (sscanf(buf, "%lu\n", &x) == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		battery->alarm = x/1000;
+}
 	if (acpi_battery_present(battery))
 		acpi_battery_set_alarm(battery);
 	return count;
@@ -631,6 +645,7 @@ static int sysfs_add_battery(struct acpi_battery *battery)
 	struct power_supply_config psy_cfg = { .drv_data = battery, };
 
 	if (battery->power_unit == ACPI_BATTERY_POWER_UNIT_MA) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		battery->bat_desc.properties = charge_battery_props;
 		battery->bat_desc.num_properties =
 			ARRAY_SIZE(charge_battery_props);
@@ -658,6 +673,7 @@ static int sysfs_add_battery(struct acpi_battery *battery)
 
 static void sysfs_remove_battery(struct acpi_battery *battery)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&battery->sysfs_lock);
 	if (!battery->bat) {
 		mutex_unlock(&battery->sysfs_lock);
@@ -702,6 +718,7 @@ static void find_battery(const struct dmi_header *dm, void *private)
  */
 static void acpi_battery_quirks(struct acpi_battery *battery)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(ACPI_BATTERY_QUIRK_PERCENTAGE_CAPACITY, &battery->flags))
 		return;
 
@@ -746,7 +763,9 @@ static int acpi_battery_update(struct acpi_battery *battery, bool resume)
 	int result, old_present = acpi_battery_present(battery);
 	result = acpi_battery_get_status(battery);
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 	if (!acpi_battery_present(battery)) {
 		sysfs_remove_battery(battery);
 		battery->update_time = 0;
@@ -792,7 +811,9 @@ static void acpi_battery_refresh(struct acpi_battery *battery)
 	int power_unit;
 
 	if (!battery->bat)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	power_unit = battery->power_unit;
 
@@ -1094,6 +1115,7 @@ static void acpi_battery_remove_fs(struct acpi_device *device)
 
 static void acpi_battery_notify(struct acpi_device *device, u32 event)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_battery *battery = acpi_driver_data(device);
 	struct power_supply *old;
 
@@ -1123,6 +1145,7 @@ static void acpi_battery_notify(struct acpi_device *device, u32 event)
 static int battery_notify(struct notifier_block *nb,
 			       unsigned long mode, void *_unused)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_battery *battery = container_of(nb, struct acpi_battery,
 						    pm_nb);
 	int result;
@@ -1155,6 +1178,7 @@ static int battery_notify(struct notifier_block *nb,
 static int __init
 battery_bix_broken_package_quirk(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	battery_bix_broken_package = 1;
 	return 0;
 }
@@ -1162,6 +1186,7 @@ battery_bix_broken_package_quirk(const struct dmi_system_id *d)
 static int __init
 battery_notification_delay_quirk(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	battery_notification_delay_ms = 1000;
 	return 0;
 }
@@ -1198,6 +1223,7 @@ static int acpi_battery_update_retry(struct acpi_battery *battery)
 {
 	int retry, ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (retry = 5; retry; retry--) {
 		ret = acpi_battery_update(battery, false);
 		if (!ret)
@@ -1214,7 +1240,9 @@ static int acpi_battery_add(struct acpi_device *device)
 	struct acpi_battery *battery = NULL;
 
 	if (!device)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (device->dep_unmet)
 		return -EPROBE_DEFER;
@@ -1268,6 +1296,7 @@ static int acpi_battery_remove(struct acpi_device *device)
 {
 	struct acpi_battery *battery = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!device || !acpi_driver_data(device))
 		return -EINVAL;
 	device_init_wakeup(&device->dev, 0);
@@ -1290,7 +1319,9 @@ static int acpi_battery_resume(struct device *dev)
 	struct acpi_battery *battery;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	battery = acpi_driver_data(to_acpi_device(dev));
 	if (!battery)
@@ -1326,6 +1357,7 @@ static void __init acpi_battery_init_async(void *unused, async_cookie_t cookie)
 
 	for (i = 0; i < ARRAY_SIZE(acpi_battery_blacklist); i++)
 		if (acpi_dev_present(acpi_battery_blacklist[i], "1", -1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_info(PREFIX ACPI_BATTERY_DEVICE_NAME
 				": found native %s PMIC, not loading\n",
 				acpi_battery_blacklist[i]);
@@ -1350,7 +1382,9 @@ static void __init acpi_battery_init_async(void *unused, async_cookie_t cookie)
 static int __init acpi_battery_init(void)
 {
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	async_cookie = async_schedule(acpi_battery_init_async, NULL);
 	return 0;
@@ -1358,6 +1392,7 @@ static int __init acpi_battery_init(void)
 
 static void __exit acpi_battery_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	async_synchronize_cookie(async_cookie + 1);
 	if (battery_driver_registered)
 		acpi_bus_unregister_driver(&acpi_battery_driver);
diff --git a/drivers/acpi/blacklist.c b/drivers/acpi/blacklist.c
index 995c4d8..e62eef6 100644
--- a/drivers/acpi/blacklist.c
+++ b/drivers/acpi/blacklist.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  blacklist.c
  *
@@ -60,11 +62,13 @@ int __init acpi_blacklisted(void)
 
 	i = acpi_match_platform_list(acpi_blacklist);
 	if (i >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err(PREFIX "Vendor \"%6.6s\" System \"%8.8s\" Revision 0x%x has a known ACPI BIOS problem.\n",
 		       acpi_blacklist[i].oem_id,
 		       acpi_blacklist[i].oem_table_id,
 		       acpi_blacklist[i].oem_revision);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err(PREFIX "Reason: %s. This is a %s error\n",
 		       acpi_blacklist[i].reason,
 		       (acpi_blacklist[i].data ?
@@ -82,6 +86,7 @@ int __init acpi_blacklisted(void)
 #ifdef CONFIG_ACPI_REV_OVERRIDE_POSSIBLE
 static int __init dmi_enable_rev_override(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	printk(KERN_NOTICE PREFIX "DMI detected: %s (force ACPI _REV to 5)\n",
 	       d->ident);
 	acpi_rev_override_setup(NULL);
diff --git a/drivers/acpi/bus.c b/drivers/acpi/bus.c
index 4d0979e..d902e97 100644
--- a/drivers/acpi/bus.c
+++ b/drivers/acpi/bus.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  acpi_bus.c - ACPI Bus Driver ($Revision: 80 $)
  *
@@ -60,6 +62,7 @@ static inline int set_copy_dsdt(const struct dmi_system_id *id)
 #else
 static int set_copy_dsdt(const struct dmi_system_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	printk(KERN_NOTICE "%s detected - "
 		"force copy of DSDT to local memory\n", id->ident);
 	acpi_gbl_copy_dsdt_locally = 1;
@@ -99,13 +102,16 @@ acpi_status acpi_bus_get_status_handle(acpi_handle handle,
 
 	status = acpi_evaluate_integer(handle, "_STA", NULL, sta);
 	if (ACPI_SUCCESS(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
+}
 
 	if (status == AE_NOT_FOUND) {
 		*sta = ACPI_STA_DEVICE_PRESENT | ACPI_STA_DEVICE_ENABLED |
 		       ACPI_STA_DEVICE_UI      | ACPI_STA_DEVICE_FUNCTIONING;
 		return AE_OK;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return status;
 }
 
@@ -115,16 +121,20 @@ int acpi_bus_get_status(struct acpi_device *device)
 	unsigned long long sta;
 
 	if (acpi_device_always_present(device)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_set_device_status(device, ACPI_STA_DEFAULT);
 		return 0;
 	}
 
 	status = acpi_bus_get_status_handle(device->handle, &sta);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	acpi_set_device_status(device, sta);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (device->status.functional && !device->status.present) {
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO, "Device [%s] status [%08x]: "
 		       "functional but not present;\n",
@@ -140,6 +150,7 @@ EXPORT_SYMBOL(acpi_bus_get_status);
 void acpi_bus_private_data_handler(acpi_handle handle,
 				   void *context)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return;
 }
 EXPORT_SYMBOL(acpi_bus_private_data_handler);
@@ -151,6 +162,7 @@ int acpi_bus_attach_private_data(acpi_handle handle, void *data)
 	status = acpi_attach_data(handle,
 			acpi_bus_private_data_handler, data);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_handle_debug(handle, "Error attaching device data\n");
 		return -ENODEV;
 	}
@@ -164,7 +176,9 @@ int acpi_bus_get_private_data(acpi_handle handle, void **data)
 	acpi_status status;
 
 	if (!*data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	status = acpi_get_data(handle, acpi_bus_private_data_handler, data);
 	if (ACPI_FAILURE(status)) {
@@ -178,6 +192,7 @@ EXPORT_SYMBOL_GPL(acpi_bus_get_private_data);
 
 void acpi_bus_detach_private_data(acpi_handle handle)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_detach_data(handle, acpi_bus_private_data_handler);
 }
 EXPORT_SYMBOL_GPL(acpi_bus_detach_private_data);
@@ -187,6 +202,7 @@ static void acpi_print_osc_error(acpi_handle handle,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_handle_debug(handle, "(%s): %s\n", context->uuid_str, error);
 
 	pr_debug("_OSC request data:");
@@ -207,9 +223,13 @@ acpi_status acpi_run_osc(acpi_handle handle, struct acpi_osc_context *context)
 	struct acpi_buffer output = {ACPI_ALLOCATE_BUFFER, NULL};
 
 	if (!context)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_ERROR;
+}
 	if (guid_parse(context->uuid_str, &guid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_ERROR;
+}
 	context->ret.length = ACPI_ALLOCATE_BUFFER;
 	context->ret.pointer = NULL;
 
@@ -229,14 +249,19 @@ acpi_status acpi_run_osc(acpi_handle handle, struct acpi_osc_context *context)
 
 	status = acpi_evaluate_object(handle, "_OSC", &input, &output);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return status;
+}
 
 	if (!output.length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_NULL_OBJECT;
+}
 
 	out_obj = output.pointer;
 	if (out_obj->type != ACPI_TYPE_BUFFER
 		|| out_obj->buffer.length != context->cap.length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_print_osc_error(handle, context,
 			"_OSC evaluation returned wrong type");
 		status = AE_TYPE;
@@ -245,22 +270,32 @@ acpi_status acpi_run_osc(acpi_handle handle, struct acpi_osc_context *context)
 	/* Need to ignore the bit0 in result code */
 	errors = *((u32 *)out_obj->buffer.pointer) & ~(1 << 0);
 	if (errors) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (errors & OSC_REQUEST_ERROR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_print_osc_error(handle, context,
 				"_OSC request failed");
+}
 		if (errors & OSC_INVALID_UUID_ERROR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_print_osc_error(handle, context,
 				"_OSC invalid UUID");
+}
 		if (errors & OSC_INVALID_REVISION_ERROR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_print_osc_error(handle, context,
 				"_OSC invalid revision");
+}
 		if (errors & OSC_CAPABILITIES_MASK_ERROR) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (((u32 *)context->cap.pointer)[OSC_QUERY_DWORD]
 			    & OSC_QUERY_ENABLE)
 				goto out_success;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_SUPPORT;
 			goto out_kfree;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_ERROR;
 		goto out_kfree;
 	}
@@ -269,15 +304,20 @@ acpi_status acpi_run_osc(acpi_handle handle, struct acpi_osc_context *context)
 	context->ret.pointer = kmemdup(out_obj->buffer.pointer,
 				       context->ret.length, GFP_KERNEL);
 	if (!context->ret.pointer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status =  AE_NO_MEMORY;
 		goto out_kfree;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status =  AE_OK;
 
 out_kfree:
 	kfree(output.pointer);
 	if (status != AE_OK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		context->ret.pointer = NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return status;
 }
 EXPORT_SYMBOL(acpi_run_osc);
@@ -306,35 +346,47 @@ static void acpi_bus_osc_support(void)
 	capbuf[OSC_QUERY_DWORD] = OSC_QUERY_ENABLE;
 	capbuf[OSC_SUPPORT_DWORD] = OSC_SB_PR3_SUPPORT; /* _PR3 is in use */
 	if (IS_ENABLED(CONFIG_ACPI_PROCESSOR_AGGREGATOR))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		capbuf[OSC_SUPPORT_DWORD] |= OSC_SB_PAD_SUPPORT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ENABLED(CONFIG_ACPI_PROCESSOR))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		capbuf[OSC_SUPPORT_DWORD] |= OSC_SB_PPC_OST_SUPPORT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	capbuf[OSC_SUPPORT_DWORD] |= OSC_SB_HOTPLUG_OST_SUPPORT;
 	capbuf[OSC_SUPPORT_DWORD] |= OSC_SB_PCLPI_SUPPORT;
 
 #ifdef CONFIG_X86
 	if (boot_cpu_has(X86_FEATURE_HWP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		capbuf[OSC_SUPPORT_DWORD] |= OSC_SB_CPC_SUPPORT;
 		capbuf[OSC_SUPPORT_DWORD] |= OSC_SB_CPCV2_SUPPORT;
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ENABLED(CONFIG_SCHED_MC_PRIO))
 		capbuf[OSC_SUPPORT_DWORD] |= OSC_SB_CPC_DIVERSE_HIGH_SUPPORT;
 
 	if (!ghes_disable)
 		capbuf[OSC_SUPPORT_DWORD] |= OSC_SB_APEI_SUPPORT;
 	if (ACPI_FAILURE(acpi_get_handle(NULL, "\\_SB", &handle)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (ACPI_SUCCESS(acpi_run_osc(handle, &context))) {
 		u32 *capbuf_ret = context.ret.pointer;
 		if (context.ret.length > OSC_SUPPORT_DWORD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			osc_sb_apei_support_acked =
 				capbuf_ret[OSC_SUPPORT_DWORD] & OSC_SB_APEI_SUPPORT;
 			osc_pc_lpi_support_confirmed =
 				capbuf_ret[OSC_SUPPORT_DWORD] & OSC_SB_PCLPI_SUPPORT;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(context.ret.pointer);
 	}
 	/* do we need to check other returned cap? Sounds no */
@@ -440,6 +492,7 @@ static void acpi_device_notify_fixed(void *data)
 
 static u32 acpi_device_fixed_event(void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_os_execute(OSL_NOTIFY_HANDLER, acpi_device_notify_fixed, data);
 	return ACPI_INTERRUPT_HANDLED;
 }
@@ -453,6 +506,7 @@ static int acpi_device_install_notify_handler(struct acpi_device *device)
 		    acpi_install_fixed_event_handler(ACPI_EVENT_POWER_BUTTON,
 						     acpi_device_fixed_event,
 						     device);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (device->device_type == ACPI_BUS_TYPE_SLEEP_BUTTON)
 		status =
 		    acpi_install_fixed_event_handler(ACPI_EVENT_SLEEP_BUTTON,
@@ -465,12 +519,15 @@ static int acpi_device_install_notify_handler(struct acpi_device *device)
 						     device);
 
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	return 0;
 }
 
 static void acpi_device_remove_notify_handler(struct acpi_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (device->device_type == ACPI_BUS_TYPE_POWER_BUTTON)
 		acpi_remove_fixed_event_handler(ACPI_EVENT_POWER_BUTTON,
 						acpi_device_fixed_event);
@@ -499,6 +556,7 @@ static void sb_notify_work(struct work_struct *dummy)
 	 * the shutdown is in progress
 	 */
 	acpi_get_handle(NULL, "\\_SB", &sb_handle);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		pr_info("Graceful shutdown in progress.\n");
 		acpi_evaluate_ost(sb_handle, ACPI_OST_EC_OSPM_SHUTDOWN,
@@ -512,6 +570,7 @@ static void acpi_sb_notify(acpi_handle handle, u32 event, void *data)
 	static DECLARE_WORK(acpi_sb_work, sb_notify_work);
 
 	if (event == ACPI_SB_NOTIFY_SHUTDOWN_REQUEST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!work_busy(&acpi_sb_work))
 			schedule_work(&acpi_sb_work);
 	} else
@@ -523,7 +582,9 @@ static int __init acpi_setup_sb_notify_handler(void)
 	acpi_handle sb_handle;
 
 	if (ACPI_FAILURE(acpi_get_handle(NULL, "\\_SB", &sb_handle)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	if (ACPI_FAILURE(acpi_install_notify_handler(sb_handle, ACPI_DEVICE_NOTIFY,
 						acpi_sb_notify, NULL)))
@@ -549,6 +610,7 @@ struct device *acpi_get_first_physical_node(struct acpi_device *adev)
 
 	mutex_lock(physical_node_lock);
 	if (list_empty(&adev->physical_node_list)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		phys_dev = NULL;
 	} else {
 		const struct acpi_device_physical_node *node;
@@ -584,6 +646,7 @@ static struct acpi_device *acpi_primary_dev_companion(struct acpi_device *adev,
 bool acpi_device_is_first_physical_node(struct acpi_device *adev,
 					const struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !!acpi_primary_dev_companion(adev, dev);
 }
 
@@ -614,10 +677,14 @@ struct acpi_device *acpi_companion_match(const struct device *dev)
 
 	adev = ACPI_COMPANION(dev);
 	if (!adev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (list_empty(&adev->pnp.ids))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	return acpi_primary_dev_companion(adev, dev);
 }
@@ -638,16 +705,23 @@ static bool acpi_of_match_device(struct acpi_device *adev,
 	int i, nval;
 
 	if (!adev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	of_compatible = adev->data.of_compatible;
 	if (!of_match_table || !of_compatible)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (of_compatible->type == ACPI_TYPE_PACKAGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nval = of_compatible->package.count;
 		obj = of_compatible->package.elements;
 	} else { /* Must be ACPI_TYPE_STRING. */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nval = 1;
 		obj = of_compatible;
 	}
@@ -655,11 +729,17 @@ static bool acpi_of_match_device(struct acpi_device *adev,
 	for (i = 0; i < nval; i++, obj++) {
 		const struct of_device_id *id;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (id = of_match_table; id->compatible[0]; id++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!strcasecmp(obj->string.pointer, id->compatible))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return true;
+}
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -672,7 +752,9 @@ static bool acpi_of_modalias(struct acpi_device *adev,
 
 	of_compatible = adev->data.of_compatible;
 	if (!of_compatible)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	if (of_compatible->type == ACPI_TYPE_PACKAGE)
 		obj = of_compatible->package.elements;
@@ -700,6 +782,7 @@ static bool acpi_of_modalias(struct acpi_device *adev,
 void acpi_set_modalias(struct acpi_device *adev, const char *default_id,
 		       char *modalias, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!acpi_of_modalias(adev, modalias, len))
 		strlcpy(modalias, default_id, len);
 }
@@ -712,7 +795,9 @@ static bool __acpi_match_device_cls(const struct acpi_device_id *id,
 	char buf[3];
 
 	if (!id->cls)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/* Apply class-code bitmask, before checking each class-code byte */
 	for (i = 1; i <= 3; i++) {
@@ -741,15 +826,21 @@ static const struct acpi_device_id *__acpi_match_device(
 	 * driver for it.
 	 */
 	if (!device || !device->status.present)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	list_for_each_entry(hwid, &device->pnp.ids, list) {
 		/* First, check the ACPI/PNP IDs provided by the caller. */
 		for (id = ids; id->id[0] || id->cls; id++) {
 			if (id->id[0] && !strcmp((char *) id->id, hwid->id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return id;
+}
 			else if (id->cls && __acpi_match_device_cls(id, hwid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return id;
+}
 		}
 
 		/*
@@ -764,6 +855,7 @@ static const struct acpi_device_id *__acpi_match_device(
 		    && acpi_of_match_device(device, of_ids))
 			return id;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -781,6 +873,7 @@ static const struct acpi_device_id *__acpi_match_device(
 const struct acpi_device_id *acpi_match_device(const struct acpi_device_id *ids,
 					       const struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __acpi_match_device(acpi_companion_match(dev), ids, NULL);
 }
 EXPORT_SYMBOL_GPL(acpi_match_device);
@@ -821,7 +914,9 @@ int acpi_bus_register_driver(struct acpi_driver *driver)
 	int ret;
 
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 	driver->drv.name = driver->name;
 	driver->drv.bus = &acpi_bus_type;
 	driver->drv.owner = driver->owner;
@@ -841,6 +936,7 @@ EXPORT_SYMBOL(acpi_bus_register_driver);
  */
 void acpi_bus_unregister_driver(struct acpi_driver *driver)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	driver_unregister(&driver->drv);
 }
 
@@ -853,6 +949,7 @@ EXPORT_SYMBOL(acpi_bus_unregister_driver);
 static int acpi_bus_match(struct device *dev, struct device_driver *drv)
 {
 	struct acpi_device *acpi_dev = to_acpi_device(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_driver *acpi_drv = to_acpi_driver(drv);
 
 	return acpi_dev->flags.match_driver
@@ -871,14 +968,20 @@ static int acpi_device_probe(struct device *dev)
 	int ret;
 
 	if (acpi_dev->handler && !acpi_is_pnp_device(acpi_dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!acpi_drv->ops.add)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSYS;
+}
 
 	ret = acpi_drv->ops.add(acpi_dev);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	acpi_dev->driver = acpi_drv;
 	ACPI_DEBUG_PRINT((ACPI_DB_INFO,
@@ -888,9 +991,13 @@ static int acpi_device_probe(struct device *dev)
 	if (acpi_drv->ops.notify) {
 		ret = acpi_device_install_notify_handler(acpi_dev);
 		if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (acpi_drv->ops.remove)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_drv->ops.remove(acpi_dev);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_dev->driver = NULL;
 			acpi_dev->driver_data = NULL;
 			return ret;
@@ -905,6 +1012,7 @@ static int acpi_device_probe(struct device *dev)
 
 static int acpi_device_remove(struct device * dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = to_acpi_device(dev);
 	struct acpi_driver *acpi_drv = acpi_dev->driver;
 
@@ -969,10 +1077,12 @@ static int __init acpi_bus_init_irq(void)
 
 	status = acpi_execute_simple_method(NULL, "\\_PIC", acpi_irq_model);
 	if (ACPI_FAILURE(status) && (status != AE_NOT_FOUND)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status, "Evaluating _PIC"));
 		return -ENODEV;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -991,7 +1101,9 @@ void __init acpi_early_init(void)
 	acpi_status status;
 
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	printk(KERN_INFO PREFIX "Core revision %08x\n", ACPI_CA_VERSION);
 
@@ -1009,6 +1121,7 @@ void __init acpi_early_init(void)
 
 	status = acpi_reallocate_root_table();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX
 		       "Unable to reallocate ACPI tables\n");
 		goto error0;
@@ -1016,6 +1129,7 @@ void __init acpi_early_init(void)
 
 	status = acpi_initialize_subsystem();
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX
 		       "Unable to initialize the ACPI Interpreter\n");
 		goto error0;
@@ -1025,6 +1139,7 @@ void __init acpi_early_init(void)
 	    acpi_gbl_group_module_level_code) {
 		status = acpi_load_tables();
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_ERR PREFIX
 			       "Unable to load the System Description Tables\n");
 			goto error0;
@@ -1035,6 +1150,7 @@ void __init acpi_early_init(void)
 	if (!acpi_ioapic) {
 		/* compatible (0) means level (3) */
 		if (!(acpi_sci_flags & ACPI_MADT_TRIGGER_MASK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_sci_flags &= ~ACPI_MADT_TRIGGER_MASK;
 			acpi_sci_flags |= ACPI_MADT_TRIGGER_LEVEL;
 		}
@@ -1069,10 +1185,13 @@ void __init acpi_subsystem_init(void)
 	acpi_status status;
 
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	status = acpi_enable_subsystem(~ACPI_NO_ACPI_ENABLE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Unable to enable ACPI\n");
 		disable_acpi();
 	} else {
@@ -1088,6 +1207,7 @@ void __init acpi_subsystem_init(void)
 
 static acpi_status acpi_bus_table_handler(u32 event, void *table, void *context)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_scan_table_handler(event, table, context);
 
 	return acpi_sysfs_table_handler(event, table, context);
@@ -1113,8 +1233,10 @@ static int __init acpi_bus_init(void)
 
 	if (acpi_gbl_parse_table_as_term_list ||
 	    !acpi_gbl_group_module_level_code) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_load_tables();
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_ERR PREFIX
 			       "Unable to load the System Description Tables\n");
 			goto error1;
@@ -1123,6 +1245,7 @@ static int __init acpi_bus_init(void)
 
 	status = acpi_enable_subsystem(ACPI_NO_ACPI_ENABLE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX
 		       "Unable to start the ACPI Interpreter\n");
 		goto error1;
@@ -1130,6 +1253,7 @@ static int __init acpi_bus_init(void)
 
 	status = acpi_initialize_objects(ACPI_FULL_INITIALIZATION);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Unable to initialize ACPI objects\n");
 		goto error1;
 	}
@@ -1178,6 +1302,7 @@ static int __init acpi_bus_init(void)
 	    acpi_install_notify_handler(ACPI_ROOT_OBJECT, ACPI_SYSTEM_NOTIFY,
 					&acpi_bus_notify, NULL);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX
 		       "Unable to register for device notifications\n");
 		goto error1;
@@ -1190,7 +1315,9 @@ static int __init acpi_bus_init(void)
 
 	result = bus_register(&acpi_bus_type);
 	if (!result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Mimic structured exception handling */
       error1:
@@ -1206,12 +1333,14 @@ static int __init acpi_init(void)
 	int result;
 
 	if (acpi_disabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_INFO PREFIX "Interpreter disabled.\n");
 		return -ENODEV;
 	}
 
 	acpi_kobj = kobject_create_and_add("acpi", firmware_kobj);
 	if (!acpi_kobj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_WARNING "%s: kset create error\n", __func__);
 		acpi_kobj = NULL;
 	}
@@ -1219,6 +1348,7 @@ static int __init acpi_init(void)
 	init_acpi_device_notify();
 	result = acpi_bus_init();
 	if (result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		disable_acpi();
 		return result;
 	}
diff --git a/drivers/acpi/button.c b/drivers/acpi/button.c
index ef1856b..c5147d3 100644
--- a/drivers/acpi/button.c
+++ b/drivers/acpi/button.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  button.c - ACPI Button Driver
  *
@@ -133,13 +135,16 @@ static int acpi_lid_evaluate_state(struct acpi_device *device)
 
 	status = acpi_evaluate_integer(device->handle, "_LID", NULL, &lid_state);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	return lid_state ? 1 : 0;
 }
 
 static int acpi_lid_notify_state(struct acpi_device *device, int state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_button *button = acpi_driver_data(device);
 	int ret;
 	ktime_t next_report;
@@ -246,6 +251,7 @@ static int acpi_button_state_seq_show(struct seq_file *seq, void *offset)
 
 static int acpi_button_state_open_fs(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, acpi_button_state_seq_show, PDE_DATA(inode));
 }
 
@@ -259,15 +265,20 @@ static const struct file_operations acpi_button_state_fops = {
 
 static int acpi_button_add_fs(struct acpi_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_button *button = acpi_driver_data(device);
 	struct proc_dir_entry *entry = NULL;
 	int ret = 0;
 
 	/* procfs I/F for ACPI lid device only */
 	if (button->type != ACPI_BUTTON_TYPE_LID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_button_dir || acpi_lid_dir) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "More than one Lid device found!\n");
 		return -EEXIST;
 	}
@@ -275,11 +286,14 @@ static int acpi_button_add_fs(struct acpi_device *device)
 	/* create /proc/acpi/button */
 	acpi_button_dir = proc_mkdir(ACPI_BUTTON_CLASS, acpi_root_dir);
 	if (!acpi_button_dir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* create /proc/acpi/button/lid */
 	acpi_lid_dir = proc_mkdir(ACPI_BUTTON_SUBCLASS_LID, acpi_button_dir);
 	if (!acpi_lid_dir) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENODEV;
 		goto remove_button_dir;
 	}
@@ -287,6 +301,7 @@ static int acpi_button_add_fs(struct acpi_device *device)
 	/* create /proc/acpi/button/lid/LID/ */
 	acpi_device_dir(device) = proc_mkdir(acpi_device_bid(device), acpi_lid_dir);
 	if (!acpi_device_dir(device)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENODEV;
 		goto remove_lid_dir;
 	}
@@ -296,6 +311,7 @@ static int acpi_button_add_fs(struct acpi_device *device)
 				 S_IRUGO, acpi_device_dir(device),
 				 &acpi_button_state_fops, device);
 	if (!entry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENODEV;
 		goto remove_dev_dir;
 	}
@@ -318,6 +334,7 @@ static int acpi_button_add_fs(struct acpi_device *device)
 
 static int acpi_button_remove_fs(struct acpi_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_button *button = acpi_driver_data(device);
 
 	if (button->type != ACPI_BUTTON_TYPE_LID)
@@ -341,18 +358,21 @@ static int acpi_button_remove_fs(struct acpi_device *device)
    -------------------------------------------------------------------------- */
 int acpi_lid_notifier_register(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return blocking_notifier_chain_register(&acpi_lid_notifier, nb);
 }
 EXPORT_SYMBOL(acpi_lid_notifier_register);
 
 int acpi_lid_notifier_unregister(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return blocking_notifier_chain_unregister(&acpi_lid_notifier, nb);
 }
 EXPORT_SYMBOL(acpi_lid_notifier_unregister);
 
 int acpi_lid_open(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!lid_device)
 		return -ENODEV;
 
@@ -366,13 +386,16 @@ static int acpi_lid_update_state(struct acpi_device *device)
 
 	state = acpi_lid_evaluate_state(device);
 	if (state < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return state;
+}
 
 	return acpi_lid_notify_state(device, state);
 }
 
 static void acpi_lid_initialize_state(struct acpi_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (lid_init_state) {
 	case ACPI_BUTTON_LID_INIT_OPEN:
 		(void)acpi_lid_notify_state(device, 1);
@@ -388,6 +411,7 @@ static void acpi_lid_initialize_state(struct acpi_device *device)
 
 static void acpi_button_notify(struct acpi_device *device, u32 event)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_button *button = acpi_driver_data(device);
 	struct input_dev *input;
 
@@ -429,6 +453,7 @@ static void acpi_button_notify(struct acpi_device *device, u32 event)
 #ifdef CONFIG_PM_SLEEP
 static int acpi_button_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *device = to_acpi_device(dev);
 	struct acpi_button *button = acpi_driver_data(device);
 
@@ -438,6 +463,7 @@ static int acpi_button_suspend(struct device *dev)
 
 static int acpi_button_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *device = to_acpi_device(dev);
 	struct acpi_button *button = acpi_driver_data(device);
 
@@ -458,12 +484,15 @@ static int acpi_button_add(struct acpi_device *device)
 
 	button = kzalloc(sizeof(struct acpi_button), GFP_KERNEL);
 	if (!button)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	device->driver_data = button;
 
 	button->input = input = input_allocate_device();
 	if (!input) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOMEM;
 		goto err_free_button;
 	}
@@ -479,11 +508,13 @@ static int acpi_button_add(struct acpi_device *device)
 			ACPI_BUTTON_CLASS, ACPI_BUTTON_SUBCLASS_POWER);
 	} else if (!strcmp(hid, ACPI_BUTTON_HID_SLEEP) ||
 		   !strcmp(hid, ACPI_BUTTON_HID_SLEEPF)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		button->type = ACPI_BUTTON_TYPE_SLEEP;
 		strcpy(name, ACPI_BUTTON_DEVICE_NAME_SLEEP);
 		sprintf(class, "%s/%s",
 			ACPI_BUTTON_CLASS, ACPI_BUTTON_SUBCLASS_SLEEP);
 	} else if (!strcmp(hid, ACPI_BUTTON_HID_LID)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		button->type = ACPI_BUTTON_TYPE_LID;
 		strcpy(name, ACPI_BUTTON_DEVICE_NAME_LID);
 		sprintf(class, "%s/%s",
@@ -491,6 +522,7 @@ static int acpi_button_add(struct acpi_device *device)
 		button->last_state = !!acpi_lid_evaluate_state(device);
 		button->last_time = ktime_get();
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Unsupported hid [%s]\n", hid);
 		error = -ENODEV;
 		goto err_free_input;
@@ -526,6 +558,7 @@ static int acpi_button_add(struct acpi_device *device)
 	if (error)
 		goto err_remove_fs;
 	if (button->type == ACPI_BUTTON_TYPE_LID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_lid_initialize_state(device);
 		/*
 		 * This assumes there's only one lid device, or if there are
@@ -549,6 +582,7 @@ static int acpi_button_add(struct acpi_device *device)
 
 static int acpi_button_remove(struct acpi_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_button *button = acpi_driver_data(device);
 
 	acpi_button_remove_fs(device);
@@ -562,6 +596,7 @@ static int param_set_lid_init_state(const char *val, struct kernel_param *kp)
 	int result = 0;
 
 	if (!strncmp(val, "open", sizeof("open") - 1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lid_init_state = ACPI_BUTTON_LID_INIT_OPEN;
 		pr_info("Notify initial lid state as open\n");
 	} else if (!strncmp(val, "method", sizeof("method") - 1)) {
@@ -577,6 +612,7 @@ static int param_set_lid_init_state(const char *val, struct kernel_param *kp)
 
 static int param_get_lid_init_state(char *buffer, struct kernel_param *kp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (lid_init_state) {
 	case ACPI_BUTTON_LID_INIT_OPEN:
 		return sprintf(buffer, "open");
diff --git a/drivers/acpi/container.c b/drivers/acpi/container.c
index 12c2409..3f98a26 100644
--- a/drivers/acpi/container.c
+++ b/drivers/acpi/container.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * container.c  - ACPI Generic Container Driver
  *
@@ -41,6 +43,7 @@ static const struct acpi_device_id container_device_ids[] = {
 
 static int acpi_container_offline(struct container_dev *cdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(&cdev->dev);
 	struct acpi_device *child;
 
@@ -54,6 +57,7 @@ static int acpi_container_offline(struct container_dev *cdev)
 
 static void acpi_container_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(to_container_dev(dev));
 }
 
@@ -65,11 +69,15 @@ static int container_device_attach(struct acpi_device *adev,
 	int ret;
 
 	if (adev->flags.is_dock_station)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	cdev = kzalloc(sizeof(*cdev), GFP_KERNEL);
 	if (!cdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	cdev->offline = acpi_container_offline;
 	dev = &cdev->dev;
@@ -79,6 +87,7 @@ static int container_device_attach(struct acpi_device *adev,
 	dev->release = acpi_container_release;
 	ret = device_register(dev);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_device(dev);
 		return ret;
 	}
@@ -88,6 +97,7 @@ static int container_device_attach(struct acpi_device *adev,
 
 static void container_device_detach(struct acpi_device *adev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = acpi_driver_data(adev);
 
 	adev->driver_data = NULL;
@@ -97,6 +107,7 @@ static void container_device_detach(struct acpi_device *adev)
 
 static void container_device_online(struct acpi_device *adev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = acpi_driver_data(adev);
 
 	kobject_uevent(&dev->kobj, KOBJ_ONLINE);
diff --git a/drivers/acpi/cppc_acpi.c b/drivers/acpi/cppc_acpi.c
index e5b47f0..ed05925 100644
--- a/drivers/acpi/cppc_acpi.c
+++ b/drivers/acpi/cppc_acpi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * CPPC (Collaborative Processor Performance Control) methods used by CPUfreq drivers.
  *
@@ -159,6 +161,7 @@ show_cppc_data(cppc_get_perf_ctrs, cppc_perf_fb_ctrs, wraparound_time);
 static ssize_t show_feedback_ctrs(struct kobject *kobj,
 		struct attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpc_desc *cpc_ptr = to_cpc_desc(kobj);
 	struct cppc_perf_fb_ctrs fb_ctrs = {0};
 	int ret;
@@ -195,7 +198,9 @@ static int check_pcc_chan(bool chk_err_bit)
 	ktime_t next_deadline = ktime_add(ktime_get(), pcc_data.deadline);
 
 	if (!pcc_data.platform_owns_pcc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Retry in case the remote processor was too slow to catch up. */
 	while (!ktime_after(ktime_get(), next_deadline)) {
@@ -342,6 +347,7 @@ static int send_pcc_cmd(u16 cmd)
 
 static void cppc_chan_tx_done(struct mbox_client *cl, void *msg, int ret)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret < 0)
 		pr_debug("TX did not complete: CMD sent:%x, ret:%d\n",
 				*(u16 *)msg, ret);
@@ -368,7 +374,9 @@ static int acpi_get_psd(struct cpc_desc *cpc_ptr, acpi_handle handle)
 	status = acpi_evaluate_object_typed(handle, "_PSD", NULL, &buffer,
 			ACPI_TYPE_PACKAGE);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	psd = buffer.pointer;
 	if (!psd || psd->package.count != 1) {
@@ -429,7 +437,9 @@ int acpi_get_psd_map(struct cppc_cpudata **all_cpu_data)
 	struct cpc_desc *cpc_ptr, *match_cpc_ptr;
 
 	if (!zalloc_cpumask_var(&covered_cpus, GFP_KERNEL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/*
 	 * Now that we have _PSD data from all CPUs, lets setup P-state
@@ -542,6 +552,7 @@ static int register_pcc_channel(int pcc_subspace_idx)
 	u64 usecs_lat;
 
 	if (pcc_subspace_idx >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcc_data.pcc_channel = pcc_mbox_request_channel(&cppc_mbox_cl,
 				pcc_subspace_idx);
 
@@ -597,6 +608,7 @@ static int register_pcc_channel(int pcc_subspace_idx)
  */
 bool __weak cpc_ffh_supported(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -668,14 +680,17 @@ int acpi_cppc_processor_probe(struct acpi_processor *pr)
 	status = acpi_evaluate_object_typed(handle, "_CPC", NULL, &output,
 			ACPI_TYPE_PACKAGE);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENODEV;
 		goto out_buf_free;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	out_obj = (union acpi_object *) output.pointer;
 
 	cpc_ptr = kzalloc(sizeof(struct cpc_desc), GFP_KERNEL);
 	if (!cpc_ptr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOMEM;
 		goto out_buf_free;
 	}
@@ -683,8 +698,10 @@ int acpi_cppc_processor_probe(struct acpi_processor *pr)
 	/* First entry is NumEntries. */
 	cpc_obj = &out_obj->package.elements[0];
 	if (cpc_obj->type == ACPI_TYPE_INTEGER)	{
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		num_ent = cpc_obj->integer.value;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("Unexpected entry type(%d) for NumEntries\n",
 				cpc_obj->type);
 		goto out_free;
@@ -692,24 +709,30 @@ int acpi_cppc_processor_probe(struct acpi_processor *pr)
 
 	/* Only support CPPCv2. Bail otherwise. */
 	if (num_ent != CPPC_NUM_ENT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("Firmware exports %d entries. Expected: %d\n",
 				num_ent, CPPC_NUM_ENT);
 		goto out_free;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpc_ptr->num_entries = num_ent;
 
 	/* Second entry should be revision. */
 	cpc_obj = &out_obj->package.elements[1];
 	if (cpc_obj->type == ACPI_TYPE_INTEGER)	{
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpc_rev = cpc_obj->integer.value;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("Unexpected entry type(%d) for Revision\n",
 				cpc_obj->type);
 		goto out_free;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpc_rev != CPPC_REV) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("Firmware exports revision:%d. Expected:%d\n",
 				cpc_rev, CPPC_REV);
 		goto out_free;
@@ -717,12 +740,15 @@ int acpi_cppc_processor_probe(struct acpi_processor *pr)
 
 	/* Iterate through remaining entries in _CPC */
 	for (i = 2; i < num_ent; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpc_obj = &out_obj->package.elements[i];
 
 		if (cpc_obj->type == ACPI_TYPE_INTEGER)	{
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cpc_ptr->cpc_regs[i-2].type = ACPI_TYPE_INTEGER;
 			cpc_ptr->cpc_regs[i-2].cpc_entry.int_value = cpc_obj->integer.value;
 		} else if (cpc_obj->type == ACPI_TYPE_BUFFER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gas_t = (struct cpc_reg *)
 				cpc_obj->buffer.pointer;
 
@@ -733,22 +759,30 @@ int acpi_cppc_processor_probe(struct acpi_processor *pr)
 			 * so extract it only once.
 			 */
 			if (gas_t->space_id == ACPI_ADR_SPACE_PLATFORM_COMM) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (pcc_data.pcc_subspace_idx < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					pcc_data.pcc_subspace_idx = gas_t->access_width;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				else if (pcc_data.pcc_subspace_idx != gas_t->access_width) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					pr_debug("Mismatched PCC ids.\n");
 					goto out_free;
 				}
 			} else if (gas_t->space_id == ACPI_ADR_SPACE_SYSTEM_MEMORY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (gas_t->address) {
 					void __iomem *addr;
 
 					addr = ioremap(gas_t->address, gas_t->bit_width/8);
 					if (!addr)
 						goto out_free;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					cpc_ptr->cpc_regs[i-2].sys_mem_vaddr = addr;
 				}
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (gas_t->space_id != ACPI_ADR_SPACE_FIXED_HARDWARE || !cpc_ffh_supported()) {
 					/* Support only PCC ,SYS MEM and FFH type regs */
 					pr_debug("Unsupported register type: %d\n", gas_t->space_id);
@@ -756,9 +790,12 @@ int acpi_cppc_processor_probe(struct acpi_processor *pr)
 				}
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cpc_ptr->cpc_regs[i-2].type = ACPI_TYPE_BUFFER;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(&cpc_ptr->cpc_regs[i-2].cpc_entry.reg, gas_t, sizeof(*gas_t));
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("Err in entry:%d in CPC table of CPU:%d \n", i, pr->id);
 			goto out_free;
 		}
@@ -773,11 +810,14 @@ int acpi_cppc_processor_probe(struct acpi_processor *pr)
 
 	/* Register PCC channel once for all CPUs. */
 	if (!pcc_data.pcc_channel_acquired) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = register_pcc_channel(pcc_data.pcc_subspace_idx);
 		if (ret)
 			goto out_free;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		init_rwsem(&pcc_data.pcc_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		init_waitqueue_head(&pcc_data.pcc_write_wait_q);
 	}
 
@@ -787,6 +827,7 @@ int acpi_cppc_processor_probe(struct acpi_processor *pr)
 	/* Add per logical CPU nodes for reading its feedback counters. */
 	cpu_dev = get_cpu_device(pr->id);
 	if (!cpu_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EINVAL;
 		goto out_free;
 	}
@@ -797,10 +838,12 @@ int acpi_cppc_processor_probe(struct acpi_processor *pr)
 	ret = kobject_init_and_add(&cpc_ptr->kobj, &cppc_ktype, &cpu_dev->kobj,
 			"acpi_cppc");
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		per_cpu(cpc_desc_ptr, pr->id) = NULL;
 		goto out_free;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(output.pointer);
 	return 0;
 
@@ -810,8 +853,11 @@ int acpi_cppc_processor_probe(struct acpi_processor *pr)
 		void __iomem *addr = cpc_ptr->cpc_regs[i-2].sys_mem_vaddr;
 
 		if (addr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			iounmap(addr);
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(cpc_ptr);
 
 out_buf_free:
@@ -832,6 +878,7 @@ void acpi_cppc_processor_exit(struct acpi_processor *pr)
 	unsigned int i;
 	void __iomem *addr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpc_ptr = per_cpu(cpc_desc_ptr, pr->id);
 	if (!cpc_ptr)
 		return;
@@ -860,6 +907,7 @@ EXPORT_SYMBOL_GPL(acpi_cppc_processor_exit);
  */
 int __weak cpc_read_ffh(int cpunum, struct cpc_reg *reg, u64 *val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOTSUPP;
 }
 
@@ -875,6 +923,7 @@ int __weak cpc_read_ffh(int cpunum, struct cpc_reg *reg, u64 *val)
  */
 int __weak cpc_write_ffh(int cpunum, struct cpc_reg *reg, u64 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOTSUPP;
 }
 
@@ -891,6 +940,7 @@ static int cpc_read(int cpu, struct cpc_register_resource *reg_res, u64 *val)
 	struct cpc_reg *reg = &reg_res->cpc_entry.reg;
 
 	if (reg_res->type == ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*val = reg_res->cpc_entry.int_value;
 		return ret_val;
 	}
@@ -935,7 +985,9 @@ static int cpc_write(int cpu, struct cpc_register_resource *reg_res, u64 val)
 	struct cpc_reg *reg = &reg_res->cpc_entry.reg;
 
 	if (reg->space_id == ACPI_ADR_SPACE_PLATFORM_COMM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vaddr = GET_PCC_VADDR(reg->address);
+}
 	else if (reg->space_id == ACPI_ADR_SPACE_SYSTEM_MEMORY)
 		vaddr = reg_res->sys_mem_vaddr;
 	else if (reg->space_id == ACPI_ADR_SPACE_FIXED_HARDWARE)
@@ -976,6 +1028,7 @@ static int cpc_write(int cpu, struct cpc_register_resource *reg_res, u64 val)
  */
 int cppc_get_perf_caps(int cpunum, struct cppc_perf_caps *perf_caps)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpc_desc *cpc_desc = per_cpu(cpc_desc_ptr, cpunum);
 	struct cpc_register_resource *highest_reg, *lowest_reg,
 		*lowest_non_linear_reg, *nominal_reg;
@@ -1035,6 +1088,7 @@ EXPORT_SYMBOL_GPL(cppc_get_perf_caps);
  */
 int cppc_get_perf_ctrs(int cpunum, struct cppc_perf_fb_ctrs *perf_fb_ctrs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpc_desc *cpc_desc = per_cpu(cpc_desc_ptr, cpunum);
 	struct cpc_register_resource *delivered_reg, *reference_reg,
 		*ref_perf_reg, *ctr_wrap_reg;
@@ -1108,6 +1162,7 @@ EXPORT_SYMBOL_GPL(cppc_get_perf_ctrs);
  */
 int cppc_set_perf(int cpu, struct cppc_perf_ctrls *perf_ctrls)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpc_desc *cpc_desc = per_cpu(cpc_desc_ptr, cpu);
 	struct cpc_register_resource *desired_reg;
 	int ret = 0;
@@ -1241,6 +1296,7 @@ unsigned int cppc_get_transition_latency(int cpu_num)
 	struct cpc_desc *cpc_desc;
 	struct cpc_register_resource *desired_reg;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpc_desc = per_cpu(cpc_desc_ptr, cpu_num);
 	if (!cpc_desc)
 		return CPUFREQ_ETERNAL;
diff --git a/drivers/acpi/debugfs.c b/drivers/acpi/debugfs.c
index 68bb305..f1ea005 100644
--- a/drivers/acpi/debugfs.c
+++ b/drivers/acpi/debugfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * debugfs.c - ACPI debugfs interface to userspace.
  */
diff --git a/drivers/acpi/device_pm.c b/drivers/acpi/device_pm.c
index 18af710..4d9ace9 100644
--- a/drivers/acpi/device_pm.c
+++ b/drivers/acpi/device_pm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/acpi/device_pm.c - ACPI device power management routines.
  *
@@ -37,6 +39,7 @@ ACPI_MODULE_NAME("device_pm");
  */
 const char *acpi_power_state_string(int state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (state) {
 	case ACPI_STATE_D0:
 		return "D0";
@@ -66,6 +69,7 @@ int acpi_device_get_power(struct acpi_device *device, int *state)
 {
 	int result = ACPI_STATE_UNKNOWN;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!device || !state)
 		return -EINVAL;
 
@@ -129,6 +133,7 @@ int acpi_device_get_power(struct acpi_device *device, int *state)
 
 static int acpi_dev_pm_explicit_set(struct acpi_device *adev, int state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (adev->power.states[state].flags.explicit_set) {
 		char method[5] = { '_', 'P', 'S', '0' + state, '\0' };
 		acpi_status status;
@@ -153,6 +158,7 @@ int acpi_device_set_power(struct acpi_device *device, int state)
 	int target_state = state;
 	int result = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!device || !device->flags.power_manageable
 	    || (state < ACPI_STATE_D0) || (state > ACPI_STATE_D3_COLD))
 		return -EINVAL;
@@ -247,7 +253,9 @@ int acpi_bus_set_power(acpi_handle handle, int state)
 
 	result = acpi_bus_get_device(handle, &device);
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
 	return acpi_device_set_power(device, state);
 }
@@ -259,7 +267,9 @@ int acpi_bus_init_power(struct acpi_device *device)
 	int result;
 
 	if (!device)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	device->power.state = ACPI_STATE_UNKNOWN;
 	if (!acpi_device_is_present(device)) {
@@ -330,6 +340,7 @@ int acpi_device_update_power(struct acpi_device *device, int *state_p)
 	int result;
 
 	if (device->power.state == ACPI_STATE_UNKNOWN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = acpi_bus_init_power(device);
 		if (!result && state_p)
 			*state_p = device->power.state;
@@ -371,6 +382,7 @@ int acpi_bus_update_power(acpi_handle handle, int *state_p)
 	int result;
 
 	result = acpi_bus_get_device(handle, &device);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return result ? result : acpi_device_update_power(device, state_p);
 }
 EXPORT_SYMBOL_GPL(acpi_bus_update_power);
@@ -381,6 +393,7 @@ bool acpi_bus_power_manageable(acpi_handle handle)
 	int result;
 
 	result = acpi_bus_get_device(handle, &device);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return result ? false : device->flags.power_manageable;
 }
 EXPORT_SYMBOL(acpi_bus_power_manageable);
@@ -391,6 +404,7 @@ static DEFINE_MUTEX(acpi_pm_notifier_install_lock);
 
 void acpi_pm_wakeup_event(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_wakeup_dev_event(dev, 0, acpi_s2idle_wakeup());
 }
 EXPORT_SYMBOL_GPL(acpi_pm_wakeup_event);
@@ -400,7 +414,9 @@ static void acpi_pm_notify_handler(acpi_handle handle, u32 val, void *not_used)
 	struct acpi_device *adev;
 
 	if (val != ACPI_NOTIFY_DEVICE_WAKE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	acpi_handle_debug(handle, "Wake notify\n");
 
@@ -442,7 +458,9 @@ acpi_status acpi_add_pm_notifier(struct acpi_device *adev, struct device *dev,
 	acpi_status status = AE_ALREADY_EXISTS;
 
 	if (!dev && !func)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_BAD_PARAMETER;
+}
 
 	mutex_lock(&acpi_pm_notifier_install_lock);
 
@@ -479,6 +497,7 @@ acpi_status acpi_remove_pm_notifier(struct acpi_device *adev)
 	if (!adev->wakeup.flags.notifier_present)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = acpi_remove_notify_handler(adev->handle,
 					    ACPI_SYSTEM_NOTIFY,
 					    acpi_pm_notify_handler);
@@ -503,12 +522,14 @@ bool acpi_bus_can_wakeup(acpi_handle handle)
 	int result;
 
 	result = acpi_bus_get_device(handle, &device);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return result ? false : device->wakeup.flags.valid;
 }
 EXPORT_SYMBOL(acpi_bus_can_wakeup);
 
 bool acpi_pm_device_can_wakeup(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(dev);
 
 	return adev ? acpi_device_can_wakeup(adev) : false;
@@ -638,6 +659,7 @@ int acpi_pm_device_sleep_state(struct device *dev, int *d_min_p, int d_max_in)
 	struct acpi_device *adev;
 	int ret, d_min, d_max;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (d_max_in < ACPI_STATE_D0 || d_max_in > ACPI_STATE_D3_COLD)
 		return -EINVAL;
 
@@ -686,6 +708,7 @@ static void acpi_pm_notify_work_func(struct acpi_device_wakeup_context *context)
 	struct device *dev = context->dev;
 
 	if (dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_wakeup_event(dev, 0);
 		pm_request_resume(dev);
 	}
@@ -705,6 +728,7 @@ static int __acpi_device_wakeup_enable(struct acpi_device *adev,
 	if (wakeup->enable_count >= max_count)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (wakeup->enable_count > 0)
 		goto inc;
 
@@ -741,6 +765,7 @@ static int __acpi_device_wakeup_enable(struct acpi_device *adev,
  */
 static int acpi_device_wakeup_enable(struct acpi_device *adev, u32 target_state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __acpi_device_wakeup_enable(adev, target_state, 1);
 }
 
@@ -762,6 +787,7 @@ static void acpi_device_wakeup_disable(struct acpi_device *adev)
 	if (!wakeup->enable_count)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_disable_gpe(wakeup->gpe_device, wakeup->gpe_number);
 	acpi_disable_wakeup_device_power(adev);
 
@@ -777,6 +803,7 @@ static int __acpi_pm_set_device_wakeup(struct device *dev, bool enable,
 	struct acpi_device *adev;
 	int error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	adev = ACPI_COMPANION(dev);
 	if (!adev) {
 		dev_dbg(dev, "ACPI companion missing in %s!\n", __func__);
@@ -807,6 +834,7 @@ static int __acpi_pm_set_device_wakeup(struct device *dev, bool enable,
  */
 int acpi_pm_set_device_wakeup(struct device *dev, bool enable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __acpi_pm_set_device_wakeup(dev, enable, 1);
 }
 EXPORT_SYMBOL_GPL(acpi_pm_set_device_wakeup);
@@ -818,6 +846,7 @@ EXPORT_SYMBOL_GPL(acpi_pm_set_device_wakeup);
  */
 int acpi_pm_set_bridge_wakeup(struct device *dev, bool enable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __acpi_pm_set_device_wakeup(dev, enable, INT_MAX);
 }
 EXPORT_SYMBOL_GPL(acpi_pm_set_bridge_wakeup);
@@ -834,7 +863,9 @@ static int acpi_dev_pm_low_power(struct device *dev, struct acpi_device *adev,
 	int ret, state;
 
 	if (!acpi_device_power_manageable(adev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = acpi_dev_pm_get_state(dev, adev, system_state, NULL, &state);
 	return ret ? ret : acpi_device_set_power(adev, state);
@@ -846,6 +877,7 @@ static int acpi_dev_pm_low_power(struct device *dev, struct acpi_device *adev,
  */
 static int acpi_dev_pm_full_power(struct acpi_device *adev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acpi_device_power_manageable(adev) ?
 		acpi_device_set_power(adev, ACPI_STATE_D0) : 0;
 }
@@ -861,6 +893,7 @@ static int acpi_dev_pm_full_power(struct acpi_device *adev)
  */
 int acpi_dev_runtime_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(dev);
 	bool remote_wakeup;
 	int error;
@@ -894,6 +927,7 @@ EXPORT_SYMBOL_GPL(acpi_dev_runtime_suspend);
  */
 int acpi_dev_runtime_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(dev);
 	int error;
 
@@ -915,6 +949,7 @@ EXPORT_SYMBOL_GPL(acpi_dev_runtime_resume);
  */
 int acpi_subsys_runtime_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = pm_generic_runtime_suspend(dev);
 	return ret ? ret : acpi_dev_runtime_suspend(dev);
 }
@@ -929,6 +964,7 @@ EXPORT_SYMBOL_GPL(acpi_subsys_runtime_suspend);
  */
 int acpi_subsys_runtime_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = acpi_dev_runtime_resume(dev);
 	return ret ? ret : pm_generic_runtime_resume(dev);
 }
@@ -946,6 +982,7 @@ EXPORT_SYMBOL_GPL(acpi_subsys_runtime_resume);
  */
 int acpi_dev_suspend_late(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(dev);
 	u32 target_state;
 	bool wakeup;
@@ -980,6 +1017,7 @@ EXPORT_SYMBOL_GPL(acpi_dev_suspend_late);
  */
 int acpi_dev_resume_early(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(dev);
 	int error;
 
@@ -998,6 +1036,7 @@ EXPORT_SYMBOL_GPL(acpi_dev_resume_early);
  */
 int acpi_subsys_prepare(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(dev);
 	u32 sys_target;
 	int ret, state;
@@ -1031,6 +1070,7 @@ EXPORT_SYMBOL_GPL(acpi_subsys_prepare);
  */
 int acpi_subsys_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_runtime_resume(dev);
 	return pm_generic_suspend(dev);
 }
@@ -1045,6 +1085,7 @@ EXPORT_SYMBOL_GPL(acpi_subsys_suspend);
  */
 int acpi_subsys_suspend_late(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = pm_generic_suspend_late(dev);
 	return ret ? ret : acpi_dev_suspend_late(dev);
 }
@@ -1060,6 +1101,7 @@ EXPORT_SYMBOL_GPL(acpi_subsys_suspend_late);
  */
 int acpi_subsys_resume_early(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = acpi_dev_resume_early(dev);
 	return ret ? ret : pm_generic_resume_early(dev);
 }
@@ -1116,6 +1158,7 @@ static struct dev_pm_domain acpi_general_pm_domain = {
  */
 static void acpi_dev_pm_detach(struct device *dev, bool power_off)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(dev);
 
 	if (adev && dev->pm_domain == &acpi_general_pm_domain) {
@@ -1157,10 +1200,15 @@ int acpi_dev_pm_attach(struct device *dev, bool power_on)
 	struct acpi_device *adev = ACPI_COMPANION(dev);
 
 	if (!adev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->pm_domain)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EEXIST;
+}
 
 	/*
 	 * Only attach the power domain to the first device if the
@@ -1168,15 +1216,20 @@ int acpi_dev_pm_attach(struct device *dev, bool power_on)
 	 * management twice.
 	 */
 	if (!acpi_device_is_first_physical_node(adev, dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_add_pm_notifier(adev, dev, acpi_pm_notify_work_func);
 	dev_pm_domain_set(dev, &acpi_general_pm_domain);
 	if (power_on) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_dev_pm_full_power(adev);
 		acpi_device_wakeup_disable(adev);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->pm_domain->detach = acpi_dev_pm_detach;
 	return 0;
 }
diff --git a/drivers/acpi/device_sysfs.c b/drivers/acpi/device_sysfs.c
index a041689..cfab0c9 100644
--- a/drivers/acpi/device_sysfs.c
+++ b/drivers/acpi/device_sysfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/acpi/device_sysfs.c - ACPI device sysfs attributes and modalias.
  *
@@ -33,7 +35,9 @@ static ssize_t acpi_object_path(acpi_handle handle, char *buf)
 
 	result = acpi_get_name(handle, ACPI_FULL_PATHNAME, &path);
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
 	result = sprintf(buf, "%s\n", (char *)path.pointer);
 	kfree(path.pointer);
@@ -52,6 +56,7 @@ struct acpi_data_node_attr {
 
 static ssize_t data_node_show_path(struct acpi_data_node *dn, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dn->handle ? acpi_object_path(dn->handle, buf) : 0;
 }
 
@@ -68,6 +73,7 @@ static struct attribute *acpi_data_node_default_attrs[] = {
 static ssize_t acpi_data_node_attr_show(struct kobject *kobj,
 					struct attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_data_node *dn = to_data_node(kobj);
 	struct acpi_data_node_attr *dn_attr = to_attr(attr);
 
@@ -80,6 +86,7 @@ static const struct sysfs_ops acpi_data_node_sysfs_ops = {
 
 static void acpi_data_node_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_data_node *dn = to_data_node(kobj);
 	complete(&dn->kobj_done);
 }
@@ -97,8 +104,11 @@ static void acpi_expose_nondev_subnodes(struct kobject *kobj,
 	struct acpi_data_node *dn;
 
 	if (list_empty(list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dn, list, sibling) {
 		int ret;
 
@@ -106,9 +116,14 @@ static void acpi_expose_nondev_subnodes(struct kobject *kobj,
 		ret = kobject_init_and_add(&dn->kobj, &acpi_data_node_ktype,
 					   kobj, "%s", dn->name);
 		if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_expose_nondev_subnodes(&dn->kobj, &dn->data);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (dn->handle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_handle_err(dn->handle, "Failed to expose (%d)\n", ret);
+}
 	}
 }
 
@@ -118,7 +133,9 @@ static void acpi_hide_nondev_subnodes(struct acpi_device_data *data)
 	struct acpi_data_node *dn;
 
 	if (list_empty(list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	list_for_each_entry_reverse(dn, list, sibling) {
 		acpi_hide_nondev_subnodes(&dn->data);
@@ -148,7 +165,9 @@ static int create_pnp_modalias(struct acpi_device *acpi_dev, char *modalias,
 
 	/* Avoid unnecessarily loading modules for non present devices. */
 	if (!acpi_device_is_present(acpi_dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * Since we skip ACPI_DT_NAMESPACE_HID from the modalias below, 0 should
@@ -161,11 +180,15 @@ static int create_pnp_modalias(struct acpi_device *acpi_dev, char *modalias,
 			count++;
 
 	if (!count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	len = snprintf(modalias, size, "acpi:");
 	if (len <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return len;
+}
 
 	size -= len;
 
@@ -175,10 +198,14 @@ static int create_pnp_modalias(struct acpi_device *acpi_dev, char *modalias,
 
 		count = snprintf(&modalias[len], size, "%s:", id->id);
 		if (count < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
 		if (count >= size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
 		len += count;
 		size -= count;
@@ -247,31 +274,48 @@ int __acpi_device_uevent_modalias(struct acpi_device *adev,
 	int len;
 
 	if (!adev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (list_empty(&adev->pnp.ids))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (add_uevent_var(env, "MODALIAS="))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	len = create_pnp_modalias(adev, &env->buf[env->buflen - 1],
 				  sizeof(env->buf) - env->buflen);
 	if (len < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return len;
+}
 
 	env->buflen += len;
 	if (!adev->data.of_compatible)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (len > 0 && add_uevent_var(env, "MODALIAS="))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	len = create_of_modalias(adev, &env->buf[env->buflen - 1],
 				 sizeof(env->buf) - env->buflen);
 	if (len < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return len;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	env->buflen += len;
 
 	return 0;
@@ -296,29 +340,40 @@ static int __acpi_device_modalias(struct acpi_device *adev, char *buf, int size)
 	int len, count;
 
 	if (!adev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (list_empty(&adev->pnp.ids))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	len = create_pnp_modalias(adev, buf, size - 1);
 	if (len < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return len;
 	} else if (len > 0) {
 		buf[len++] = '\n';
 		size -= len;
 	}
 	if (!adev->data.of_compatible)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return len;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	count = create_of_modalias(adev, buf + len, size - 1);
 	if (count < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return count;
 	} else if (count > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len += count;
 		buf[len++] = '\n';
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return len;
 }
 
@@ -346,6 +401,7 @@ static DEVICE_ATTR(modalias, 0444, acpi_device_modalias_show, NULL);
 static ssize_t real_power_state_show(struct device *dev,
 				     struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = to_acpi_device(dev);
 	int state;
 	int ret;
@@ -362,6 +418,7 @@ static DEVICE_ATTR(real_power_state, 0444, real_power_state_show, NULL);
 static ssize_t power_state_show(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = to_acpi_device(dev);
 
 	return sprintf(buf, "%s\n", acpi_power_state_string(adev->power.state));
@@ -373,6 +430,7 @@ static ssize_t
 acpi_eject_store(struct device *d, struct device_attribute *attr,
 		const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_device = to_acpi_device(d);
 	acpi_object_type not_used;
 	acpi_status status;
@@ -404,6 +462,7 @@ static DEVICE_ATTR(eject, 0200, NULL, acpi_eject_store);
 static ssize_t
 acpi_device_hid_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = to_acpi_device(dev);
 
 	return sprintf(buf, "%s\n", acpi_device_hid(acpi_dev));
@@ -413,6 +472,7 @@ static DEVICE_ATTR(hid, 0444, acpi_device_hid_show, NULL);
 static ssize_t acpi_device_uid_show(struct device *dev,
 				    struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = to_acpi_device(dev);
 
 	return sprintf(buf, "%s\n", acpi_dev->pnp.unique_id);
@@ -422,6 +482,7 @@ static DEVICE_ATTR(uid, 0444, acpi_device_uid_show, NULL);
 static ssize_t acpi_device_adr_show(struct device *dev,
 				    struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = to_acpi_device(dev);
 
 	return sprintf(buf, "0x%08x\n",
@@ -432,6 +493,7 @@ static DEVICE_ATTR(adr, 0444, acpi_device_adr_show, NULL);
 static ssize_t acpi_device_path_show(struct device *dev,
 				     struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = to_acpi_device(dev);
 
 	return acpi_object_path(acpi_dev->handle, buf);
@@ -442,6 +504,7 @@ static DEVICE_ATTR(path, 0444, acpi_device_path_show, NULL);
 static ssize_t description_show(struct device *dev,
 				struct device_attribute *attr,
 				char *buf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = to_acpi_device(dev);
 	int result;
 
@@ -467,6 +530,7 @@ static DEVICE_ATTR(description, 0444, description_show, NULL);
 static ssize_t
 acpi_device_sun_show(struct device *dev, struct device_attribute *attr,
 		     char *buf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = to_acpi_device(dev);
 	acpi_status status;
 	unsigned long long sun;
@@ -482,6 +546,7 @@ static DEVICE_ATTR(sun, 0444, acpi_device_sun_show, NULL);
 static ssize_t
 acpi_device_hrv_show(struct device *dev, struct device_attribute *attr,
 		     char *buf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = to_acpi_device(dev);
 	acpi_status status;
 	unsigned long long hrv;
@@ -496,6 +561,7 @@ static DEVICE_ATTR(hrv, 0444, acpi_device_hrv_show, NULL);
 
 static ssize_t status_show(struct device *dev, struct device_attribute *attr,
 				char *buf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = to_acpi_device(dev);
 	acpi_status status;
 	unsigned long long sta;
@@ -541,10 +607,14 @@ int acpi_device_setup_files(struct acpi_device *dev)
 	 * If device has _STR, 'description' file is created
 	 */
 	if (acpi_has_method(dev->handle, "_STR")) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_evaluate_object(dev->handle, "_STR",
 					NULL, &buffer);
 		if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			buffer.pointer = NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->pnp.str_obj = buffer.pointer;
 		result = device_create_file(&dev->dev, &dev_attr_description);
 		if (result)
@@ -557,12 +627,14 @@ int acpi_device_setup_files(struct acpi_device *dev)
 		result = device_create_file(&dev->dev, &dev_attr_uid);
 
 	if (acpi_has_method(dev->handle, "_SUN")) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = device_create_file(&dev->dev, &dev_attr_sun);
 		if (result)
 			goto end;
 	}
 
 	if (acpi_has_method(dev->handle, "_HRV")) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = device_create_file(&dev->dev, &dev_attr_hrv);
 		if (result)
 			goto end;
@@ -581,17 +653,25 @@ int acpi_device_setup_files(struct acpi_device *dev)
 	if (acpi_has_method(dev->handle, "_EJ0")) {
 		result = device_create_file(&dev->dev, &dev_attr_eject);
 		if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return result;
+}
 	}
 
 	if (dev->flags.power_manageable) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = device_create_file(&dev->dev, &dev_attr_power_state);
 		if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return result;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->power.flags.power_resources)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			result = device_create_file(&dev->dev,
 						    &dev_attr_real_power_state);
+}
 	}
 
 	acpi_expose_nondev_subnodes(&dev->dev.kobj, &dev->data);
@@ -606,6 +686,7 @@ int acpi_device_setup_files(struct acpi_device *dev)
  */
 void acpi_device_remove_files(struct acpi_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_hide_nondev_subnodes(&dev->data);
 
 	if (dev->flags.power_manageable) {
diff --git a/drivers/acpi/dptf/int340x_thermal.c b/drivers/acpi/dptf/int340x_thermal.c
index 8636409..d2dcaf8 100644
--- a/drivers/acpi/dptf/int340x_thermal.c
+++ b/drivers/acpi/dptf/int340x_thermal.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ACPI support for int340x thermal drivers
  *
@@ -33,6 +35,7 @@ static const struct acpi_device_id int340x_thermal_device_ids[] = {
 static int int340x_thermal_handler_attach(struct acpi_device *adev,
 					const struct acpi_device_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ENABLED(CONFIG_INT340X_THERMAL))
 		acpi_create_platform_device(adev, NULL);
 	/* Intel SoC DTS thermal driver needs INT3401 to set IRQ descriptor */
diff --git a/drivers/acpi/ec.c b/drivers/acpi/ec.c
index df84246..127b7ae 100644
--- a/drivers/acpi/ec.c
+++ b/drivers/acpi/ec.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ec.c - ACPI Embedded Controller Driver (v3)
  *
@@ -245,6 +247,7 @@ static int EC_FLAGS_IGNORE_DSDT_GPE; /* Needs ECDT GPE as correction setting */
 
 static bool acpi_ec_started(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return test_bit(EC_FLAGS_STARTED, &ec->flags) &&
 	       !test_bit(EC_FLAGS_STOPPED, &ec->flags);
 }
@@ -275,6 +278,7 @@ static bool acpi_ec_event_enabled(struct acpi_ec *ec)
 
 static bool acpi_ec_flushed(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ec->reference_count == 1;
 }
 
@@ -284,6 +288,7 @@ static bool acpi_ec_flushed(struct acpi_ec *ec)
 
 static inline u8 acpi_ec_read_status(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u8 x = inb(ec->command_addr);
 
 	ec_dbg_raw("EC_SC(R) = 0x%2.2x "
@@ -299,6 +304,7 @@ static inline u8 acpi_ec_read_status(struct acpi_ec *ec)
 
 static inline u8 acpi_ec_read_data(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u8 x = inb(ec->data_addr);
 
 	ec->timestamp = jiffies;
@@ -308,6 +314,7 @@ static inline u8 acpi_ec_read_data(struct acpi_ec *ec)
 
 static inline void acpi_ec_write_cmd(struct acpi_ec *ec, u8 command)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ec_dbg_raw("EC_SC(W) = 0x%2.2x", command);
 	outb(command, ec->command_addr);
 	ec->timestamp = jiffies;
@@ -315,6 +322,7 @@ static inline void acpi_ec_write_cmd(struct acpi_ec *ec, u8 command)
 
 static inline void acpi_ec_write_data(struct acpi_ec *ec, u8 data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ec_dbg_raw("EC_DATA(W) = 0x%2.2x", data);
 	outb(data, ec->data_addr);
 	ec->timestamp = jiffies;
@@ -350,11 +358,13 @@ static inline bool acpi_ec_is_gpe_raised(struct acpi_ec *ec)
 	acpi_event_status gpe_status = 0;
 
 	(void)acpi_get_gpe_status(NULL, ec->gpe, &gpe_status);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (gpe_status & ACPI_EVENT_FLAG_STATUS_SET) ? true : false;
 }
 
 static inline void acpi_ec_enable_gpe(struct acpi_ec *ec, bool open)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (open)
 		acpi_enable_gpe(NULL, ec->gpe);
 	else {
@@ -374,6 +384,7 @@ static inline void acpi_ec_enable_gpe(struct acpi_ec *ec, bool open)
 
 static inline void acpi_ec_disable_gpe(struct acpi_ec *ec, bool close)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (close)
 		acpi_disable_gpe(NULL, ec->gpe);
 	else {
@@ -405,6 +416,7 @@ static inline void acpi_ec_clear_gpe(struct acpi_ec *ec)
 
 static void acpi_ec_submit_request(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ec->reference_count++;
 	if (test_bit(EC_FLAGS_GPE_HANDLER_INSTALLED, &ec->flags) &&
 	    ec->reference_count == 1)
@@ -416,6 +428,7 @@ static void acpi_ec_complete_request(struct acpi_ec *ec)
 	bool flushed = false;
 
 	ec->reference_count--;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(EC_FLAGS_GPE_HANDLER_INSTALLED, &ec->flags) &&
 	    ec->reference_count == 0)
 		acpi_ec_disable_gpe(ec, true);
@@ -426,6 +439,7 @@ static void acpi_ec_complete_request(struct acpi_ec *ec)
 
 static void acpi_ec_mask_gpe(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_bit(EC_FLAGS_GPE_MASKED, &ec->flags)) {
 		acpi_ec_disable_gpe(ec, false);
 		ec_dbg_drv("Polling enabled");
@@ -435,6 +449,7 @@ static void acpi_ec_mask_gpe(struct acpi_ec *ec)
 
 static void acpi_ec_unmask_gpe(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(EC_FLAGS_GPE_MASKED, &ec->flags)) {
 		clear_bit(EC_FLAGS_GPE_MASKED, &ec->flags);
 		acpi_ec_enable_gpe(ec, false);
@@ -455,6 +470,7 @@ static void acpi_ec_unmask_gpe(struct acpi_ec *ec)
  */
 static bool acpi_ec_submit_flushable_request(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!acpi_ec_started(ec))
 		return false;
 	acpi_ec_submit_request(ec);
@@ -463,6 +479,7 @@ static bool acpi_ec_submit_flushable_request(struct acpi_ec *ec)
 
 static void acpi_ec_submit_query(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_ec_mask_gpe(ec);
 	if (!acpi_ec_event_enabled(ec))
 		return;
@@ -476,6 +493,7 @@ static void acpi_ec_submit_query(struct acpi_ec *ec)
 
 static void acpi_ec_complete_query(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_and_clear_bit(EC_FLAGS_QUERY_PENDING, &ec->flags))
 		ec_dbg_evt("Command(%s) unblocked",
 			   acpi_ec_cmd_string(ACPI_EC_COMMAND_QUERY));
@@ -484,6 +502,7 @@ static void acpi_ec_complete_query(struct acpi_ec *ec)
 
 static inline void __acpi_ec_enable_event(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_and_set_bit(EC_FLAGS_QUERY_ENABLED, &ec->flags))
 		ec_log_drv("event unblocked");
 	/*
@@ -495,6 +514,7 @@ static inline void __acpi_ec_enable_event(struct acpi_ec *ec)
 
 static inline void __acpi_ec_disable_event(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_and_clear_bit(EC_FLAGS_QUERY_ENABLED, &ec->flags))
 		ec_log_drv("event blocked");
 }
@@ -503,6 +523,7 @@ static void acpi_ec_enable_event(struct acpi_ec *ec)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ec->lock, flags);
 	if (acpi_ec_started(ec))
 		__acpi_ec_enable_event(ec);
@@ -515,6 +536,7 @@ static bool acpi_ec_query_flushed(struct acpi_ec *ec)
 	bool flushed;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ec->lock, flags);
 	flushed = !ec->nr_pending_queries;
 	spin_unlock_irqrestore(&ec->lock, flags);
@@ -536,6 +558,7 @@ static void acpi_ec_disable_event(struct acpi_ec *ec)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ec->lock, flags);
 	__acpi_ec_disable_event(ec);
 	spin_unlock_irqrestore(&ec->lock, flags);
@@ -544,6 +567,7 @@ static void acpi_ec_disable_event(struct acpi_ec *ec)
 
 void acpi_ec_flush_work(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (first_ec)
 		__acpi_ec_flush_event(first_ec);
 
@@ -556,6 +580,7 @@ static bool acpi_ec_guard_event(struct acpi_ec *ec)
 	bool guarded = true;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ec->lock, flags);
 	/*
 	 * If firmware SCI_EVT clearing timing is "event", we actually
@@ -585,6 +610,7 @@ static int ec_transaction_polled(struct acpi_ec *ec)
 	unsigned long flags;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ec->lock, flags);
 	if (ec->curr && (ec->curr->flags & ACPI_EC_COMMAND_POLL))
 		ret = 1;
@@ -597,6 +623,7 @@ static int ec_transaction_completed(struct acpi_ec *ec)
 	unsigned long flags;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ec->lock, flags);
 	if (ec->curr && (ec->curr->flags & ACPI_EC_COMMAND_COMPLETE))
 		ret = 1;
@@ -606,6 +633,7 @@ static int ec_transaction_completed(struct acpi_ec *ec)
 
 static inline void ec_transaction_transition(struct acpi_ec *ec, unsigned long flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ec->curr->flags |= flag;
 	if (ec->curr->command == ACPI_EC_COMMAND_QUERY) {
 		if (ec_event_clearing == ACPI_EC_EVT_TIMING_STATUS &&
@@ -626,6 +654,7 @@ static void advance_transaction(struct acpi_ec *ec)
 	u8 status;
 	bool wakeup = false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ec_dbg_stm("%s (%d)", in_interrupt() ? "IRQ" : "TASK",
 		   smp_processor_id());
 	/*
@@ -714,12 +743,14 @@ static void advance_transaction(struct acpi_ec *ec)
 
 static void start_transaction(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ec->curr->irq_count = ec->curr->wi = ec->curr->ri = 0;
 	ec->curr->flags = 0;
 }
 
 static int ec_guard(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long guard = usecs_to_jiffies(ec->polling_guard);
 	unsigned long timeout = ec->timestamp + guard;
 
@@ -758,6 +789,7 @@ static int ec_poll(struct acpi_ec *ec)
 	unsigned long flags;
 	int repeat = 5; /* number of command restarts */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (repeat--) {
 		unsigned long delay = jiffies +
 			msecs_to_jiffies(ec_delay);
@@ -816,6 +848,7 @@ static int acpi_ec_transaction(struct acpi_ec *ec, struct transaction *t)
 	int status;
 	u32 glk;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ec || (!t) || (t->wlen && !t->wdata) || (t->rlen && !t->rdata))
 		return -EINVAL;
 	if (t->rdata)
@@ -855,6 +888,7 @@ static int acpi_ec_burst_disable(struct acpi_ec *ec)
 				.wdata = NULL, .rdata = NULL,
 				.wlen = 0, .rlen = 0};
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (acpi_ec_read_status(ec) & ACPI_EC_FLAG_BURST) ?
 				acpi_ec_transaction(ec, &t) : 0;
 }
@@ -888,7 +922,9 @@ int ec_read(u8 addr, u8 *val)
 	u8 temp_data;
 
 	if (!first_ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	err = acpi_ec_read(first_ec, addr, &temp_data);
 
@@ -905,7 +941,9 @@ int ec_write(u8 addr, u8 val)
 	int err;
 
 	if (!first_ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	err = acpi_ec_write(first_ec, addr, val);
 
@@ -922,7 +960,9 @@ int ec_transaction(u8 command,
 				.wlen = wdata_len, .rlen = rdata_len};
 
 	if (!first_ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	return acpi_ec_transaction(first_ec, &t);
 }
@@ -931,6 +971,7 @@ EXPORT_SYMBOL(ec_transaction);
 /* Get the handle to the EC device */
 acpi_handle ec_get_handle(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!first_ec)
 		return NULL;
 	return first_ec->handle;
@@ -941,6 +982,7 @@ static void acpi_ec_start(struct acpi_ec *ec, bool resuming)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ec->lock, flags);
 	if (!test_and_set_bit(EC_FLAGS_STARTED, &ec->flags)) {
 		ec_dbg_drv("Starting EC");
@@ -959,6 +1001,7 @@ static bool acpi_ec_stopped(struct acpi_ec *ec)
 	unsigned long flags;
 	bool flushed;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ec->lock, flags);
 	flushed = acpi_ec_flushed(ec);
 	spin_unlock_irqrestore(&ec->lock, flags);
@@ -969,6 +1012,7 @@ static void acpi_ec_stop(struct acpi_ec *ec, bool suspending)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ec->lock, flags);
 	if (acpi_ec_started(ec)) {
 		ec_dbg_drv("Stopping EC");
@@ -993,6 +1037,7 @@ static void acpi_ec_enter_noirq(struct acpi_ec *ec)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ec->lock, flags);
 	ec->busy_polling = true;
 	ec->polling_guard = 0;
@@ -1004,6 +1049,7 @@ static void acpi_ec_leave_noirq(struct acpi_ec *ec)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ec->lock, flags);
 	ec->busy_polling = ec_busy_polling;
 	ec->polling_guard = ec_polling_guard;
@@ -1016,7 +1062,9 @@ void acpi_ec_block_transactions(void)
 	struct acpi_ec *ec = first_ec;
 
 	if (!ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	mutex_lock(&ec->mutex);
 	/* Prevent transactions from being carried out */
@@ -1040,6 +1088,7 @@ void acpi_ec_unblock_transactions(void)
 static struct acpi_ec_query_handler *
 acpi_ec_get_query_handler(struct acpi_ec_query_handler *handler)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (handler)
 		kref_get(&handler->kref);
 	return handler;
@@ -1052,6 +1101,7 @@ acpi_ec_get_query_handler_by_value(struct acpi_ec *ec, u8 value)
 	bool found = false;
 
 	mutex_lock(&ec->mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(handler, &ec->list, node) {
 		if (value == handler->query_bit) {
 			found = true;
@@ -1072,6 +1122,7 @@ static void acpi_ec_query_handler_release(struct kref *kref)
 
 static void acpi_ec_put_query_handler(struct acpi_ec_query_handler *handler)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kref_put(&handler->kref, acpi_ec_query_handler_release);
 }
 
@@ -1104,6 +1155,7 @@ static void acpi_ec_remove_query_handlers(struct acpi_ec *ec,
 	LIST_HEAD(free_list);
 
 	mutex_lock(&ec->mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(handler, tmp, &ec->list, node) {
 		if (remove_all || query_bit == handler->query_bit) {
 			list_del_init(&handler->node);
@@ -1117,6 +1169,7 @@ static void acpi_ec_remove_query_handlers(struct acpi_ec *ec,
 
 void acpi_ec_remove_query_handler(struct acpi_ec *ec, u8 query_bit)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_ec_remove_query_handlers(ec, false, query_bit);
 }
 EXPORT_SYMBOL_GPL(acpi_ec_remove_query_handler);
@@ -1128,7 +1181,9 @@ static struct acpi_ec_query *acpi_ec_create_query(u8 *pval)
 
 	q = kzalloc(sizeof (struct acpi_ec_query), GFP_KERNEL);
 	if (!q)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	INIT_WORK(&q->work, acpi_ec_event_processor);
 	t = &q->transaction;
 	t->command = ACPI_EC_COMMAND_QUERY;
@@ -1139,6 +1194,7 @@ static struct acpi_ec_query *acpi_ec_create_query(u8 *pval)
 
 static void acpi_ec_delete_query(struct acpi_ec_query *q)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (q) {
 		if (q->handler)
 			acpi_ec_put_query_handler(q->handler);
@@ -1148,6 +1204,7 @@ static void acpi_ec_delete_query(struct acpi_ec_query *q)
 
 static void acpi_ec_event_processor(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_ec_query *q = container_of(work, struct acpi_ec_query, work);
 	struct acpi_ec_query_handler *handler = q->handler;
 
@@ -1168,7 +1225,9 @@ static int acpi_ec_query(struct acpi_ec *ec, u8 *data)
 
 	q = acpi_ec_create_query(&value);
 	if (!q)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/*
 	 * Query the EC to find out which _Qxx method we need to evaluate.
@@ -1215,6 +1274,7 @@ static void acpi_ec_check_event(struct acpi_ec *ec)
 	unsigned long flags;
 
 	if (ec_event_clearing == ACPI_EC_EVT_TIMING_EVENT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ec_guard(ec)) {
 			spin_lock_irqsave(&ec->lock, flags);
 			/*
@@ -1231,6 +1291,7 @@ static void acpi_ec_check_event(struct acpi_ec *ec)
 static void acpi_ec_event_handler(struct work_struct *work)
 {
 	unsigned long flags;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_ec *ec = container_of(work, struct acpi_ec, work);
 
 	ec_dbg_evt("Event started");
@@ -1266,6 +1327,7 @@ static u32 acpi_ec_gpe_handler(acpi_handle gpe_device,
 	unsigned long flags;
 	struct acpi_ec *ec = data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ec->lock, flags);
 	advance_transaction(ec);
 	spin_unlock_irqrestore(&ec->lock, flags);
@@ -1285,6 +1347,7 @@ acpi_ec_space_handler(u32 function, acpi_physical_address address,
 	int result = 0, i, bytes = bits / 8;
 	u8 *value = (u8 *)value64;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((address > 0xFF) || !value || !handler_context)
 		return AE_BAD_PARAMETER;
 
@@ -1324,9 +1387,13 @@ ec_parse_io_ports(struct acpi_resource *resource, void *context);
 static void acpi_ec_free(struct acpi_ec *ec)
 {
 	if (first_ec == ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		first_ec = NULL;
+}
 	if (boot_ec == ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		boot_ec = NULL;
+}
 	kfree(ec);
 }
 
@@ -1335,7 +1402,9 @@ static struct acpi_ec *acpi_ec_alloc(void)
 	struct acpi_ec *ec = kzalloc(sizeof(struct acpi_ec), GFP_KERNEL);
 
 	if (!ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	mutex_init(&ec->mutex);
 	init_waitqueue_head(&ec->wait);
 	INIT_LIST_HEAD(&ec->list);
@@ -1359,6 +1428,7 @@ acpi_ec_register_query_methods(acpi_handle handle, u32 level,
 
 	status = acpi_get_name(handle, ACPI_SINGLE_NAME, &buffer);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ACPI_SUCCESS(status) && sscanf(node_name, "_Q%x", &value) == 1)
 		acpi_ec_add_query_handler(ec, value, handle, NULL, NULL);
 	return AE_OK;
@@ -1377,7 +1447,9 @@ ec_parse_device(acpi_handle handle, u32 Level, void *context, void **retval)
 	status = acpi_walk_resources(handle, METHOD_NAME__CRS,
 				     ec_parse_io_ports, ec);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return status;
+}
 	if (ec->data_addr == 0 || ec->command_addr == 0)
 		return AE_OK;
 
@@ -1414,6 +1486,7 @@ static int ec_install_handlers(struct acpi_ec *ec, bool handle_events)
 
 	acpi_ec_start(ec, false);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_bit(EC_FLAGS_EC_HANDLER_INSTALLED, &ec->flags)) {
 		acpi_ec_enter_noirq(ec);
 		status = acpi_install_address_space_handler(ec->handle,
@@ -1469,6 +1542,7 @@ static int ec_install_handlers(struct acpi_ec *ec, bool handle_events)
 
 static void ec_remove_handlers(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(EC_FLAGS_EC_HANDLER_INSTALLED, &ec->flags)) {
 		if (ACPI_FAILURE(acpi_remove_address_space_handler(ec->handle,
 					ACPI_ADR_SPACE_EC, &acpi_ec_space_handler)))
@@ -1507,7 +1581,9 @@ static int acpi_ec_setup(struct acpi_ec *ec, bool handle_events)
 
 	ret = ec_install_handlers(ec, handle_events);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	/* First EC capable of handling transactions */
 	if (!first_ec) {
@@ -1573,7 +1649,9 @@ static bool acpi_ec_ecdt_get_handle(acpi_handle *phandle)
 	status = acpi_get_table(ACPI_SIG_ECDT, 1,
 				(struct acpi_table_header **)&ecdt_ptr);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	status = acpi_get_handle(NULL, ecdt_ptr->id, &handle);
 	if (ACPI_FAILURE(status))
@@ -1585,6 +1663,7 @@ static bool acpi_ec_ecdt_get_handle(acpi_handle *phandle)
 
 static bool acpi_is_boot_ec(struct acpi_ec *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!boot_ec)
 		return false;
 	if (ec->command_addr == boot_ec->command_addr &&
@@ -1604,6 +1683,7 @@ static int acpi_ec_add(struct acpi_device *device)
 	strcpy(acpi_device_class(device), ACPI_EC_CLASS);
 
 	if (!strcmp(acpi_device_hid(device), ACPI_ECDT_HID)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		is_ecdt = true;
 		ec = boot_ec;
 	} else {
@@ -1665,7 +1745,9 @@ static int acpi_ec_remove(struct acpi_device *device)
 	struct acpi_ec *ec;
 
 	if (!device)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ec = acpi_driver_data(device);
 	release_region(ec->data_addr, 1);
@@ -1684,7 +1766,9 @@ ec_parse_io_ports(struct acpi_resource *resource, void *context)
 	struct acpi_ec *ec = context;
 
 	if (resource->type != ACPI_RESOURCE_TYPE_IO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
+}
 
 	/*
 	 * The first address region returned is the data port, and
@@ -1725,11 +1809,15 @@ int __init acpi_ec_dsdt_probe(void)
 	 * picking up an invalid EC device.
 	 */
 	if (boot_ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	ec = acpi_ec_alloc();
 	if (!ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	/*
 	 * At this point, the namespace is initialized, so start to find
 	 * the namespace objects.
@@ -1737,6 +1825,7 @@ int __init acpi_ec_dsdt_probe(void)
 	status = acpi_get_devices(ec_device_ids[0].id,
 				  ec_parse_device, ec, NULL);
 	if (ACPI_FAILURE(status) || !ec->handle) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENODEV;
 		goto error;
 	}
@@ -1751,6 +1840,7 @@ int __init acpi_ec_dsdt_probe(void)
 error:
 	if (ret)
 		acpi_ec_free(ec);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -1764,10 +1854,14 @@ static int __init acpi_ec_ecdt_start(void)
 	acpi_handle handle;
 
 	if (!boot_ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 	/* In case acpi_ec_ecdt_start() is called after acpi_ec_add() */
 	if (!boot_ec_is_ecdt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/*
 	 * At this point, the namespace and the GPE is initialized, so
@@ -1777,8 +1871,12 @@ static int __init acpi_ec_ecdt_start(void)
 	 * acpi_ec_add(), hence the fast path.
 	 */
 	if (boot_ec->handle == ACPI_ROOT_OBJECT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!acpi_ec_ecdt_get_handle(&handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENODEV;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		boot_ec->handle = handle;
 	}
 
@@ -1809,6 +1907,7 @@ static int ec_flag_query_handshake(const struct dmi_system_id *id)
  */
 static int ec_correct_ecdt(const struct dmi_system_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("Detected system needing ECDT address correction.\n");
 	EC_FLAGS_CORRECT_ECDT = 1;
 	return 0;
@@ -1821,6 +1920,7 @@ static int ec_correct_ecdt(const struct dmi_system_id *id)
  */
 static int ec_honor_ecdt_gpe(const struct dmi_system_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("Detected system needing ignore DSDT GPE setting.\n");
 	EC_FLAGS_IGNORE_DSDT_GPE = 1;
 	return 0;
@@ -1863,7 +1963,9 @@ int __init acpi_ec_ecdt_probe(void)
 
 	ec = acpi_ec_alloc();
 	if (!ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	/*
 	 * Generate a boot ec context
 	 */
@@ -1871,10 +1973,12 @@ int __init acpi_ec_ecdt_probe(void)
 	status = acpi_get_table(ACPI_SIG_ECDT, 1,
 				(struct acpi_table_header **)&ecdt_ptr);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENODEV;
 		goto error;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ecdt_ptr->control.address || !ecdt_ptr->data.address) {
 		/*
 		 * Asus X50GL:
@@ -1884,13 +1988,17 @@ int __init acpi_ec_ecdt_probe(void)
 		goto error;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (EC_FLAGS_CORRECT_ECDT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ec->command_addr = ecdt_ptr->data.address;
 		ec->data_addr = ecdt_ptr->control.address;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ec->command_addr = ecdt_ptr->control.address;
 		ec->data_addr = ecdt_ptr->data.address;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ec->gpe = ecdt_ptr->gpe;
 
 	/*
@@ -1901,6 +2009,7 @@ int __init acpi_ec_ecdt_probe(void)
 error:
 	if (ret)
 		acpi_ec_free(ec);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -1917,6 +2026,7 @@ static int acpi_ec_suspend(struct device *dev)
 
 static int acpi_ec_suspend_noirq(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_ec *ec = acpi_driver_data(to_acpi_device(dev));
 
 	/*
@@ -1932,6 +2042,7 @@ static int acpi_ec_suspend_noirq(struct device *dev)
 
 static int acpi_ec_resume_noirq(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_ec *ec = acpi_driver_data(to_acpi_device(dev));
 
 	if (ec_no_wakeup && test_bit(EC_FLAGS_STARTED, &ec->flags) &&
@@ -1961,6 +2072,7 @@ static int param_set_event_clearing(const char *val, struct kernel_param *kp)
 	int result = 0;
 
 	if (!strncmp(val, "status", sizeof("status") - 1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ec_event_clearing = ACPI_EC_EVT_TIMING_STATUS;
 		pr_info("Assuming SCI_EVT clearing on EC_SC accesses\n");
 	} else if (!strncmp(val, "query", sizeof("query") - 1)) {
@@ -1976,6 +2088,7 @@ static int param_set_event_clearing(const char *val, struct kernel_param *kp)
 
 static int param_get_event_clearing(char *buffer, struct kernel_param *kp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (ec_event_clearing) {
 	case ACPI_EC_EVT_TIMING_STATUS:
 		return sprintf(buffer, "status");
@@ -2010,13 +2123,17 @@ static inline int acpi_ec_query_init(void)
 		ec_query_wq = alloc_workqueue("kec_query", 0,
 					      ec_max_queries);
 		if (!ec_query_wq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENODEV;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static inline void acpi_ec_query_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ec_query_wq) {
 		destroy_workqueue(ec_query_wq);
 		ec_query_wq = NULL;
@@ -2031,7 +2148,9 @@ int __init acpi_ec_init(void)
 	/* register workqueue for _Qxx evaluations */
 	result = acpi_ec_query_init();
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
 	/* Drivers must be started after acpi_ec_query_init() */
 	dsdt_fail = acpi_bus_register_driver(&acpi_ec_driver);
diff --git a/drivers/acpi/event.c b/drivers/acpi/event.c
index 5a127f3..65cbf20 100644
--- a/drivers/acpi/event.c
+++ b/drivers/acpi/event.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * event.c - exporting ACPI events via procfs
@@ -33,6 +35,7 @@ int acpi_notifier_call_chain(struct acpi_device *dev, u32 type, u32 data)
 	strcpy(event.bus_id, dev->pnp.bus_id);
 	event.type = type;
 	event.data = data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (blocking_notifier_call_chain(&acpi_chain_head, 0, (void *)&event)
                         == NOTIFY_BAD) ? -EINVAL : 0;
 }
@@ -40,12 +43,14 @@ EXPORT_SYMBOL(acpi_notifier_call_chain);
 
 int register_acpi_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return blocking_notifier_chain_register(&acpi_chain_head, nb);
 }
 EXPORT_SYMBOL(register_acpi_notifier);
 
 int unregister_acpi_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return blocking_notifier_chain_unregister(&acpi_chain_head, nb);
 }
 EXPORT_SYMBOL(unregister_acpi_notifier);
@@ -108,7 +113,9 @@ int acpi_bus_generate_netlink_event(const char *device_class,
 
 	skb = genlmsg_new(size, GFP_ATOMIC);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/* add the genetlink message header */
 	msg_header = genlmsg_put(skb, 0, acpi_event_seqnum++,
@@ -171,13 +178,17 @@ static int __init acpi_event_init(void)
 	int error = 0;
 
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* create genetlink for acpi event */
 	error = acpi_event_genetlink_init();
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_WARNING PREFIX
 		       "Failed to create genetlink family for ACPI event\n");
+}
 	return 0;
 }
 
diff --git a/drivers/acpi/fan.c b/drivers/acpi/fan.c
index 6cf4988..bf05268 100644
--- a/drivers/acpi/fan.c
+++ b/drivers/acpi/fan.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  acpi_fan.c - ACPI Fan Driver ($Revision: 29 $)
  *
@@ -98,7 +100,9 @@ static int fan_get_max_state(struct thermal_cooling_device *cdev, unsigned long
 	struct acpi_fan *fan = acpi_driver_data(device);
 
 	if (fan->acpi4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*state = fan->fps_count - 1;
+}
 	else
 		*state = 1;
 	return 0;
@@ -114,6 +118,7 @@ static int fan_get_state_acpi4(struct acpi_device *device, unsigned long *state)
 
 	status = acpi_evaluate_object(device->handle, "_FST", NULL, &buffer);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&device->dev, "Get fan state failed\n");
 		return status;
 	}
@@ -162,7 +167,9 @@ static int fan_get_state(struct acpi_device *device, unsigned long *state)
 
 	result = acpi_device_update_power(device, &acpi_state);
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
 	*state = acpi_state == ACPI_STATE_D3_COLD
 			|| acpi_state == ACPI_STATE_D3_HOT ?
@@ -177,13 +184,16 @@ static int fan_get_cur_state(struct thermal_cooling_device *cdev, unsigned long
 	struct acpi_fan *fan = acpi_driver_data(device);
 
 	if (fan->acpi4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return fan_get_state_acpi4(device, state);
+}
 	else
 		return fan_get_state(device, state);
 }
 
 static int fan_set_state(struct acpi_device *device, unsigned long state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (state != 0 && state != 1)
 		return -EINVAL;
 
@@ -193,6 +203,7 @@ static int fan_set_state(struct acpi_device *device, unsigned long state)
 
 static int fan_set_state_acpi4(struct acpi_device *device, unsigned long state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_fan *fan = acpi_driver_data(device);
 	acpi_status status;
 
@@ -216,7 +227,9 @@ fan_set_cur_state(struct thermal_cooling_device *cdev, unsigned long state)
 	struct acpi_fan *fan = acpi_driver_data(device);
 
 	if (fan->acpi4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return fan_set_state_acpi4(device, state);
+}
 	else
 		return fan_set_state(device, state);
  }
@@ -234,6 +247,7 @@ static const struct thermal_cooling_device_ops fan_cooling_ops = {
 
 static bool acpi_fan_is_acpi4(struct acpi_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acpi_has_method(device->handle, "_FIF") &&
 	       acpi_has_method(device->handle, "_FPS") &&
 	       acpi_has_method(device->handle, "_FSL") &&
@@ -251,7 +265,9 @@ static int acpi_fan_get_fif(struct acpi_device *device)
 
 	status = acpi_evaluate_object(device->handle, "_FIF", NULL, &buffer);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return status;
+}
 
 	obj = buffer.pointer;
 	if (!obj || obj->type != ACPI_TYPE_PACKAGE) {
@@ -280,6 +296,7 @@ static int acpi_fan_speed_cmp(const void *a, const void *b)
 
 static int acpi_fan_get_fps(struct acpi_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_fan *fan = acpi_driver_data(device);
 	struct acpi_buffer buffer = { ACPI_ALLOCATE_BUFFER, NULL };
 	union acpi_object *obj;
@@ -331,6 +348,7 @@ static int acpi_fan_probe(struct platform_device *pdev)
 	int result = 0;
 	struct thermal_cooling_device *cdev;
 	struct acpi_fan *fan;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *device = ACPI_COMPANION(&pdev->dev);
 	char *name;
 
@@ -387,6 +405,7 @@ static int acpi_fan_probe(struct platform_device *pdev)
 
 static int acpi_fan_remove(struct platform_device *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_fan *fan = platform_get_drvdata(pdev);
 
 	sysfs_remove_link(&pdev->dev.kobj, "thermal_cooling");
@@ -399,6 +418,7 @@ static int acpi_fan_remove(struct platform_device *pdev)
 #ifdef CONFIG_PM_SLEEP
 static int acpi_fan_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_fan *fan = dev_get_drvdata(dev);
 	if (fan->acpi4)
 		return 0;
@@ -414,7 +434,9 @@ static int acpi_fan_resume(struct device *dev)
 	struct acpi_fan *fan = dev_get_drvdata(dev);
 
 	if (fan->acpi4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	result = acpi_device_update_power(ACPI_COMPANION(dev), NULL);
 	if (result)
diff --git a/drivers/acpi/glue.c b/drivers/acpi/glue.c
index 3be1433..1633deb 100644
--- a/drivers/acpi/glue.c
+++ b/drivers/acpi/glue.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Link physical devices with ACPI devices support
  *
@@ -40,7 +42,9 @@ static DECLARE_RWSEM(bus_type_sem);
 int register_acpi_bus_type(struct acpi_bus_type *type)
 {
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 	if (type && type->match && type->find_companion) {
 		down_write(&bus_type_sem);
 		list_add_tail(&type->list, &bus_type_list);
@@ -48,12 +52,14 @@ int register_acpi_bus_type(struct acpi_bus_type *type)
 		printk(KERN_INFO PREFIX "bus type %s registered\n", type->name);
 		return 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 EXPORT_SYMBOL_GPL(register_acpi_bus_type);
 
 int unregister_acpi_bus_type(struct acpi_bus_type *type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_disabled)
 		return 0;
 	if (type) {
@@ -75,6 +81,7 @@ static struct acpi_bus_type *acpi_get_bus_type(struct device *dev)
 	down_read(&bus_type_sem);
 	list_for_each_entry(tmp, &bus_type_list, list) {
 		if (tmp->match(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = tmp;
 			break;
 		}
@@ -94,7 +101,9 @@ static int find_child_checks(struct acpi_device *adev, bool check_children)
 
 	status = acpi_evaluate_integer(adev->handle, "_STA", NULL, &sta);
 	if (status == AE_NOT_FOUND)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sta_present = false;
+}
 	else if (ACPI_FAILURE(status) || !(sta & ACPI_STA_DEVICE_ENABLED))
 		return -ENODEV;
 
@@ -119,7 +128,9 @@ struct acpi_device *acpi_find_child_device(struct acpi_device *parent,
 	int ret_score = 0;
 
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	list_for_each_entry(adev, &parent->children, node) {
 		unsigned long long addr;
@@ -147,18 +158,25 @@ struct acpi_device *acpi_find_child_device(struct acpi_device *parent,
 		 * we've just found.
 		 */
 		if (!ret_score) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret_score = find_child_checks(ret, check_children);
 			if (ret_score == FIND_CHILD_MAX_SCORE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ret;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		score = find_child_checks(adev, check_children);
 		if (score == FIND_CHILD_MAX_SCORE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return adev;
 		} else if (score > ret_score) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = adev;
 			ret_score = score;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(acpi_find_child_device);
@@ -166,8 +184,10 @@ EXPORT_SYMBOL_GPL(acpi_find_child_device);
 static void acpi_physnode_link_name(char *buf, unsigned int node_id)
 {
 	if (node_id > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		snprintf(buf, PHYSICAL_NODE_NAME_SIZE,
 			 PHYSICAL_NODE_STRING "%u", node_id);
+}
 	else
 		strcpy(buf, PHYSICAL_NODE_STRING);
 }
@@ -182,6 +202,7 @@ int acpi_bind_one(struct device *dev, struct acpi_device *acpi_dev)
 
 	if (has_acpi_companion(dev)) {
 		if (acpi_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_warn(dev, "ACPI companion already set\n");
 			return -EINVAL;
 		} else {
@@ -189,12 +210,15 @@ int acpi_bind_one(struct device *dev, struct acpi_device *acpi_dev)
 		}
 	}
 	if (!acpi_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	get_device(&acpi_dev->dev);
 	get_device(dev);
 	physical_node = kzalloc(sizeof(*physical_node), GFP_KERNEL);
 	if (!physical_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENOMEM;
 		goto err;
 	}
@@ -210,18 +234,23 @@ int acpi_bind_one(struct device *dev, struct acpi_device *acpi_dev)
 	list_for_each_entry(pn, &acpi_dev->physical_node_list, node) {
 		/* Sanity check. */
 		if (pn->dev == dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mutex_unlock(&acpi_dev->physical_node_lock);
 
 			dev_warn(dev, "Already associated with ACPI node\n");
 			kfree(physical_node);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ACPI_COMPANION(dev) != acpi_dev)
 				goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_device(dev);
 			put_device(&acpi_dev->dev);
 			return 0;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pn->node_id == node_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			physnode_list = &pn->node;
 			node_id++;
 		}
@@ -239,20 +268,27 @@ int acpi_bind_one(struct device *dev, struct acpi_device *acpi_dev)
 	retval = sysfs_create_link(&acpi_dev->dev.kobj, &dev->kobj,
 				   physical_node_name);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&acpi_dev->dev, "Failed to create link %s (%d)\n",
 			physical_node_name, retval);
+}
 
 	retval = sysfs_create_link(&dev->kobj, &acpi_dev->dev.kobj,
 				   "firmware_node");
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(dev, "Failed to create link firmware_node (%d)\n",
 			retval);
+}
 
 	mutex_unlock(&acpi_dev->physical_node_lock);
 
 	if (acpi_dev->wakeup.flags.valid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_set_wakeup_capable(dev, true);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  err:
@@ -265,6 +301,7 @@ EXPORT_SYMBOL_GPL(acpi_bind_one);
 
 int acpi_unbind_one(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = ACPI_COMPANION(dev);
 	struct acpi_device_physical_node *entry;
 
@@ -308,7 +345,9 @@ static int acpi_platform_notify(struct device *dev)
 
 		adev = type->find_companion(dev);
 		if (!adev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			DBG("Unable to get handle for %s\n", dev_name(dev));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ENODEV;
 			goto out;
 		}
@@ -320,13 +359,18 @@ static int acpi_platform_notify(struct device *dev)
 	if (!adev)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->bus == &platform_bus_type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_configure_pmsi_domain(dev);
+}
 
 	if (type && type->setup)
 		type->setup(dev);
 	else if (adev->handler && adev->handler->bind)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		adev->handler->bind(dev);
+}
 
  out:
 #if ACPI_GLUE_DEBUG
@@ -349,14 +393,24 @@ static int acpi_platform_notify_remove(struct device *dev)
 	struct acpi_bus_type *type;
 
 	if (!adev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	type = acpi_get_bus_type(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type && type->cleanup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type->cleanup(dev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (adev->handler && adev->handler->unbind)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		adev->handler->unbind(dev);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_unbind_one(dev);
 	return 0;
 }
@@ -364,6 +418,7 @@ static int acpi_platform_notify_remove(struct device *dev)
 void __init init_acpi_device_notify(void)
 {
 	if (platform_notify || platform_notify_remove) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Can't use platform_notify\n");
 		return;
 	}
diff --git a/drivers/acpi/hed.c b/drivers/acpi/hed.c
index 5c67a6d..94355b4 100644
--- a/drivers/acpi/hed.c
+++ b/drivers/acpi/hed.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ACPI Hardware Error Device (PNP0C33) Driver
  *
diff --git a/drivers/acpi/ioapic.c b/drivers/acpi/ioapic.c
index 3595aa9..f6986a2 100644
--- a/drivers/acpi/ioapic.c
+++ b/drivers/acpi/ioapic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IOAPIC/IOxAPIC/IOSAPIC driver
  *
@@ -53,7 +55,9 @@ static acpi_status setup_res(struct acpi_resource *acpi_res, void *data)
 
 	res->flags = 0;
 	if (acpi_dev_filter_resource_type(acpi_res, IORESOURCE_MEM))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
+}
 
 	if (!acpi_dev_resource_memory(acpi_res, res)) {
 		if (acpi_dev_resource_address_space(acpi_res, &win) ||
@@ -75,24 +79,36 @@ static bool acpi_is_ioapic(acpi_handle handle, char **type)
 	bool match = false;
 
 	if (!acpi_has_method(handle, "_GSB"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = acpi_get_object_info(handle, &info);
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (info->valid & ACPI_VALID_HID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hid = info->hardware_id.string;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (hid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (strcmp(hid, "ACPI0009") == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*type = "IOxAPIC";
 				match = true;
 			} else if (strcmp(hid, "ACPI000A") == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*type = "IOAPIC";
 				match = true;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(info);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return match;
 }
 
@@ -107,67 +123,92 @@ static acpi_status handle_ioapic_add(acpi_handle handle, u32 lvl,
 	char *type = NULL;
 
 	if (!acpi_is_ioapic(handle, &type))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&ioapic_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(ioapic, &ioapic_list, list)
 		if (ioapic->handle == handle) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mutex_unlock(&ioapic_list_lock);
 			return AE_OK;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = acpi_evaluate_integer(handle, "_GSB", NULL, &gsi_base);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_handle_warn(handle, "failed to evaluate _GSB method\n");
 		goto exit;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ioapic = kzalloc(sizeof(*ioapic), GFP_KERNEL);
 	if (!ioapic) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("cannot allocate memory for new IOAPIC\n");
 		goto exit;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ioapic->root_handle = (acpi_handle)context;
 		ioapic->handle = handle;
 		ioapic->gsi_base = (u32)gsi_base;
 		INIT_LIST_HEAD(&ioapic->list);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_ioapic_registered(handle, (u32)gsi_base))
 		goto done;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev = acpi_get_pci_dev(handle);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev && pci_resource_len(dev, 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pci_enable_device(dev) < 0)
 			goto exit_put;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_set_master(dev);
 		if (pci_request_region(dev, 0, type))
 			goto exit_disable;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_res = &dev->resource[0];
 		ioapic->pdev = dev;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_dev_put(dev);
 		dev = NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crs_res = &ioapic->res;
 	acpi_walk_resources(handle, METHOD_NAME__CRS, setup_res, crs_res);
 	crs_res->name = type;
 	crs_res->flags |= IORESOURCE_BUSY;
 	if (crs_res->flags == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_handle_warn(handle, "failed to get resource\n");
 		goto exit_release;
 	} else if (insert_resource(&iomem_resource, crs_res)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_handle_warn(handle, "failed to insert resource\n");
 		goto exit_release;
 	}
 
 	/* try pci resource first, then "_CRS" resource */
 	res = pci_res;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!res || !res->flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = crs_res;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_register_ioapic(handle, res->start, (u32)gsi_base)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_handle_warn(handle, "failed to register IOAPIC\n");
 		goto exit_release;
 	}
@@ -176,22 +217,32 @@ static acpi_status handle_ioapic_add(acpi_handle handle, u32 lvl,
 	mutex_unlock(&ioapic_list_lock);
 
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, "%s at %pR, GSI %u\n",
 			 type, res, (u32)gsi_base);
+}
 	else
 		acpi_handle_info(handle, "%s at %pR, GSI %u\n",
 				 type, res, (u32)gsi_base);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return AE_OK;
 
 exit_release:
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_release_region(dev, 0);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ioapic->res.flags && ioapic->res.parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		release_resource(&ioapic->res);
+}
 exit_disable:
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_disable_device(dev);
+}
 exit_put:
 	pci_dev_put(dev);
 	kfree(ioapic);
@@ -217,6 +268,7 @@ void pci_ioapic_remove(struct acpi_pci_root *root)
 	struct acpi_pci_ioapic *ioapic, *tmp;
 
 	mutex_lock(&ioapic_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(ioapic, tmp, &ioapic_list, list) {
 		if (root->device->handle != ioapic->root_handle)
 			continue;
@@ -235,6 +287,7 @@ int acpi_ioapic_remove(struct acpi_pci_root *root)
 	struct acpi_pci_ioapic *ioapic, *tmp;
 
 	mutex_lock(&ioapic_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(ioapic, tmp, &ioapic_list, list) {
 		if (root->device->handle != ioapic->root_handle)
 			continue;
diff --git a/drivers/acpi/nfit/core.c b/drivers/acpi/nfit/core.c
index f14b432..ac1a947 100644
--- a/drivers/acpi/nfit/core.c
+++ b/drivers/acpi/nfit/core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.
  *
diff --git a/drivers/acpi/osi.c b/drivers/acpi/osi.c
index 76998a5..4e7fb3d 100644
--- a/drivers/acpi/osi.c
+++ b/drivers/acpi/osi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  osi.c - _OSI implementation
  *
@@ -61,6 +63,7 @@ osi_setup_entries[OSI_STRING_ENTRIES_MAX] __initdata = {
 
 static u32 acpi_osi_handler(acpi_string interface, u32 supported)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!strcmp("Linux", interface)) {
 		pr_notice_once(FW_BUG
 			"BIOS _OSI(Linux) query %s%s\n",
@@ -86,7 +89,9 @@ void __init acpi_osi_setup(char *str)
 	int i;
 
 	if (!acpi_gbl_create_osi_method)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (str == NULL || *str == '\0') {
 		pr_info("_OSI method disabled\n");
@@ -131,6 +136,7 @@ void __init acpi_osi_setup(char *str)
 
 static void __init __acpi_osi_setup_darwin(bool enable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	osi_config.darwin_enable = !!enable;
 	if (enable) {
 		acpi_osi_setup("!");
@@ -180,6 +186,7 @@ static void __init acpi_osi_setup_darwin(bool enable)
  */
 static void __init __acpi_osi_setup_linux(bool enable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	osi_config.linux_enable = !!enable;
 	if (enable)
 		acpi_osi_setup("Linux");
@@ -210,15 +217,19 @@ static void __init acpi_osi_setup_late(void)
 	acpi_status status;
 
 	if (osi_config.default_disabling) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_update_interfaces(osi_config.default_disabling);
 		if (ACPI_SUCCESS(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_info("Disabled all _OSI OS vendors%s\n",
 				osi_config.default_disabling ==
 				ACPI_DISABLE_ALL_STRINGS ?
 				" and feature groups" : "");
+}
 	}
 
 	for (i = 0; i < OSI_STRING_ENTRIES_MAX; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		osi = &osi_setup_entries[i];
 		str = osi->string;
 		if (*str == '\0')
@@ -228,15 +239,19 @@ static void __init acpi_osi_setup_late(void)
 			if (ACPI_SUCCESS(status))
 				pr_info("Added _OSI(%s)\n", str);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_remove_interface(str);
 			if (ACPI_SUCCESS(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pr_info("Deleted _OSI(%s)\n", str);
+}
 		}
 	}
 }
 
 static int __init osi_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (str && !strcmp("Linux", str))
 		acpi_osi_setup_linux(true);
 	else if (str && !strcmp("!Linux", str))
@@ -254,12 +269,14 @@ __setup("acpi_osi=", osi_setup);
 
 bool acpi_osi_is_win8(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acpi_gbl_osi_data >= ACPI_OSI_WIN_8;
 }
 EXPORT_SYMBOL(acpi_osi_is_win8);
 
 static void __init acpi_osi_dmi_darwin(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_notice("DMI detected to setup _OSI(\"Darwin\"): Apple hardware\n");
 	osi_config.darwin_dmi = 1;
 	__acpi_osi_setup_darwin(true);
@@ -268,6 +285,7 @@ static void __init acpi_osi_dmi_darwin(void)
 static void __init acpi_osi_dmi_linux(bool enable,
 				      const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_notice("DMI detected to setup _OSI(\"Linux\"): %s\n", d->ident);
 	osi_config.linux_dmi = 1;
 	__acpi_osi_setup_linux(enable);
@@ -275,6 +293,7 @@ static void __init acpi_osi_dmi_linux(bool enable,
 
 static int __init dmi_enable_osi_linux(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_osi_dmi_linux(true, d);
 
 	return 0;
@@ -282,6 +301,7 @@ static int __init dmi_enable_osi_linux(const struct dmi_system_id *d)
 
 static int __init dmi_disable_osi_vista(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_notice("DMI detected: %s\n", d->ident);
 	acpi_osi_setup("!Windows 2006");
 	acpi_osi_setup("!Windows 2006 SP1");
@@ -292,6 +312,7 @@ static int __init dmi_disable_osi_vista(const struct dmi_system_id *d)
 
 static int __init dmi_disable_osi_win7(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_notice("DMI detected: %s\n", d->ident);
 	acpi_osi_setup("!Windows 2009");
 
@@ -300,6 +321,7 @@ static int __init dmi_disable_osi_win7(const struct dmi_system_id *d)
 
 static int __init dmi_disable_osi_win8(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_notice("DMI detected: %s\n", d->ident);
 	acpi_osi_setup("!Windows 2012");
 
@@ -483,8 +505,10 @@ static __init void acpi_osi_dmi_blacklisted(void)
 
 	/* Enable _OSI("Darwin") for Apple platforms. */
 	if (x86_apple_machine)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_osi_dmi_darwin();
 }
+}
 
 int __init early_acpi_osi_init(void)
 {
diff --git a/drivers/acpi/osl.c b/drivers/acpi/osl.c
index db78d35..3ef137c 100644
--- a/drivers/acpi/osl.c
+++ b/drivers/acpi/osl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  acpi_osl.c - OS-dependent functions ($Revision: 83 $)
  *
@@ -101,14 +103,19 @@ static void __init acpi_request_region (struct acpi_generic_address *gas,
 	/* Handle possible alignment issues */
 	memcpy(&addr, &gas->address, sizeof(addr));
 	if (!addr || !length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Resources are never freed */
 	if (gas->space_id == ACPI_ADR_SPACE_SYSTEM_IO)
 		request_region(addr, length, desc);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (gas->space_id == ACPI_ADR_SPACE_SYSTEM_MEMORY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		request_mem_region(addr, length, desc);
 }
+}
 
 static int __init acpi_reserve_resources(void)
 {
@@ -182,6 +189,7 @@ void acpi_os_vprintf(const char *fmt, va_list args)
 static unsigned long acpi_rsdp;
 static int __init setup_acpi_rsdp(char *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return kstrtoul(arg, 16, &acpi_rsdp);
 }
 early_param("acpi_rsdp", setup_acpi_rsdp);
@@ -193,14 +201,23 @@ acpi_physical_address __init acpi_os_get_root_pointer(void)
 
 #ifdef CONFIG_KEXEC
 	if (acpi_rsdp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return acpi_rsdp;
+}
 #endif
 
 	if (efi_enabled(EFI_CONFIG_TABLES)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (efi.acpi20 != EFI_INVALID_TABLE_ADDR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return efi.acpi20;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (efi.acpi != EFI_INVALID_TABLE_ADDR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return efi.acpi;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err(PREFIX "System description tables not found\n");
 	} else if (IS_ENABLED(CONFIG_ACPI_LEGACY_TABLES_LOOKUP)) {
 		acpi_find_root_pointer(&pa);
@@ -220,6 +237,7 @@ acpi_map_lookup(acpi_physical_address phys, acpi_size size)
 		    phys + size <= map->phys + map->size)
 			return map;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -231,7 +249,9 @@ acpi_map_vaddr_lookup(acpi_physical_address phys, unsigned int size)
 
 	map = acpi_map_lookup(phys, size);
 	if (map)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return map->virt + (phys - map->phys);
+}
 
 	return NULL;
 }
@@ -244,6 +264,7 @@ void __iomem *acpi_os_get_iomem(acpi_physical_address phys, unsigned int size)
 	mutex_lock(&acpi_ioremap_lock);
 	map = acpi_map_lookup(phys, size);
 	if (map) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		virt = map->virt + (phys - map->phys);
 		map->refcount++;
 	}
@@ -263,6 +284,7 @@ acpi_map_lookup_virt(void __iomem *virt, acpi_size size)
 		    virt + size <= map->virt + map->size)
 			return map;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -279,8 +301,12 @@ static void __iomem *acpi_map(acpi_physical_address pg_off, unsigned long pg_sz)
 
 	pfn = pg_off >> PAGE_SHIFT;
 	if (should_use_kmap(pfn)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pg_sz > PAGE_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (void __iomem __force *)kmap(pfn_to_page(pfn));
 	} else
 		return acpi_os_ioremap(pg_off, pg_sz);
@@ -292,7 +318,9 @@ static void acpi_unmap(acpi_physical_address pg_off, void __iomem *vaddr)
 
 	pfn = pg_off >> PAGE_SHIFT;
 	if (should_use_kmap(pfn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kunmap(pfn_to_page(pfn));
+}
 	else
 		iounmap(vaddr);
 }
@@ -319,6 +347,7 @@ acpi_os_map_iomem(acpi_physical_address phys, acpi_size size)
 	acpi_size pg_sz;
 
 	if (phys > ULONG_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Cannot map memory that high\n");
 		return NULL;
 	}
@@ -336,6 +365,7 @@ acpi_os_map_iomem(acpi_physical_address phys, acpi_size size)
 
 	map = kzalloc(sizeof(*map), GFP_KERNEL);
 	if (!map) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&acpi_ioremap_lock);
 		return NULL;
 	}
@@ -344,6 +374,7 @@ acpi_os_map_iomem(acpi_physical_address phys, acpi_size size)
 	pg_sz = round_up(phys + size, PAGE_SIZE) - pg_off;
 	virt = acpi_map(pg_off, pg_sz);
 	if (!virt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&acpi_ioremap_lock);
 		kfree(map);
 		return NULL;
@@ -372,12 +403,15 @@ EXPORT_SYMBOL_GPL(acpi_os_map_memory);
 static void acpi_os_drop_map_ref(struct acpi_ioremap *map)
 {
 	if (!--map->refcount)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del_rcu(&map->list);
 }
+}
 
 static void acpi_os_map_cleanup(struct acpi_ioremap *map)
 {
 	if (!map->refcount) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		synchronize_rcu_expedited();
 		acpi_unmap(map->phys, map->virt);
 		kfree(map);
@@ -410,7 +444,9 @@ void __ref acpi_os_unmap_iomem(void __iomem *virt, acpi_size size)
 	mutex_lock(&acpi_ioremap_lock);
 	map = acpi_map_lookup_virt(virt, size);
 	if (!map) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&acpi_ioremap_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN(true, PREFIX "%s: bad address %p\n", __func__, virt);
 		return;
 	}
@@ -433,17 +469,25 @@ int acpi_os_map_generic_address(struct acpi_generic_address *gas)
 	void __iomem *virt;
 
 	if (gas->space_id != ACPI_ADR_SPACE_SYSTEM_MEMORY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Handle possible alignment issues */
 	memcpy(&addr, &gas->address, sizeof(addr));
 	if (!addr || !gas->bit_width)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	virt = acpi_os_map_iomem(addr, gas->bit_width / 8);
 	if (!virt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(acpi_os_map_generic_address);
@@ -454,7 +498,9 @@ void acpi_os_unmap_generic_address(struct acpi_generic_address *gas)
 	struct acpi_ioremap *map;
 
 	if (gas->space_id != ACPI_ADR_SPACE_SYSTEM_MEMORY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Handle possible alignment issues */
 	memcpy(&addr, &gas->address, sizeof(addr));
@@ -492,6 +538,7 @@ static bool acpi_rev_override;
 
 int __init acpi_rev_override_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_rev_override = true;
 	return 1;
 }
@@ -509,20 +556,26 @@ acpi_os_predefined_override(const struct acpi_predefined_names *init_val,
 			    acpi_string *new_val)
 {
 	if (!init_val || !new_val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_BAD_PARAMETER;
+}
 
 	*new_val = NULL;
 	if (!memcmp(init_val->name, "_OS_", 4) && strlen(acpi_os_name)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_INFO PREFIX "Overriding _OS definition to '%s'\n",
 		       acpi_os_name);
 		*new_val = acpi_os_name;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!memcmp(init_val->name, "_REV", 4) && acpi_rev_override) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_INFO PREFIX "Overriding _REV return value to 5\n");
 		*new_val = (char *)5;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return AE_OK;
 }
 
@@ -533,6 +586,7 @@ static irqreturn_t acpi_irq(int irq, void *dev_id)
 	handled = (*acpi_irq_handler) (acpi_irq_context);
 
 	if (handled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_irq_handled++;
 		return IRQ_HANDLED;
 	} else {
@@ -554,12 +608,17 @@ acpi_os_install_interrupt_handler(u32 gsi, acpi_osd_handler handler,
 	 * not supported.
 	 */
 	if (gsi != acpi_gbl_FADT.sci_interrupt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_BAD_PARAMETER;
+}
 
 	if (acpi_irq_handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_ALREADY_ACQUIRED;
+}
 
 	if (acpi_gsi_to_irq(gsi, &irq) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "SCI (ACPI GSI %d) not registered\n",
 		       gsi);
 		return AE_OK;
@@ -568,6 +627,7 @@ acpi_os_install_interrupt_handler(u32 gsi, acpi_osd_handler handler,
 	acpi_irq_handler = handler;
 	acpi_irq_context = context;
 	if (request_irq(irq, acpi_irq, IRQF_SHARED, "acpi", acpi_irq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "SCI (IRQ%d) allocation failed\n", irq);
 		acpi_irq_handler = NULL;
 		return AE_NOT_ACQUIRED;
@@ -579,6 +639,7 @@ acpi_os_install_interrupt_handler(u32 gsi, acpi_osd_handler handler,
 
 acpi_status acpi_os_remove_interrupt_handler(u32 gsi, acpi_osd_handler handler)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (gsi != acpi_gbl_FADT.sci_interrupt || !acpi_sci_irq_valid())
 		return AE_BAD_PARAMETER;
 
@@ -595,11 +656,13 @@ acpi_status acpi_os_remove_interrupt_handler(u32 gsi, acpi_osd_handler handler)
 
 void acpi_os_sleep(u64 ms)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msleep(ms);
 }
 
 void acpi_os_stall(u32 us)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (us) {
 		u32 delay = 1000;
 
@@ -618,6 +681,7 @@ void acpi_os_stall(u32 us)
  */
 u64 acpi_os_get_timer(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u64 time_ns = ktime_to_ns(ktime_get());
 	do_div(time_ns, 100);
 	return time_ns;
@@ -628,7 +692,9 @@ acpi_status acpi_os_read_port(acpi_io_address port, u32 * value, u32 width)
 	u32 dummy;
 
 	if (!value)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		value = &dummy;
+}
 
 	*value = 0;
 	if (width <= 8) {
@@ -636,8 +702,10 @@ acpi_status acpi_os_read_port(acpi_io_address port, u32 * value, u32 width)
 	} else if (width <= 16) {
 		*(u16 *) value = inw(port);
 	} else if (width <= 32) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*(u32 *) value = inl(port);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG();
 	}
 
@@ -653,8 +721,10 @@ acpi_status acpi_os_write_port(acpi_io_address port, u32 value, u32 width)
 	} else if (width <= 16) {
 		outw(value, port);
 	} else if (width <= 32) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		outl(value, port);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG();
 	}
 
@@ -674,6 +744,7 @@ acpi_os_read_memory(acpi_physical_address phys_addr, u64 *value, u32 width)
 	rcu_read_lock();
 	virt_addr = acpi_map_vaddr_lookup(phys_addr, size);
 	if (!virt_addr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		virt_addr = acpi_os_ioremap(phys_addr, size);
 		if (!virt_addr)
@@ -719,6 +790,7 @@ acpi_os_write_memory(acpi_physical_address phys_addr, u64 value, u32 width)
 	rcu_read_lock();
 	virt_addr = acpi_map_vaddr_lookup(phys_addr, size);
 	if (!virt_addr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		virt_addr = acpi_os_ioremap(phys_addr, size);
 		if (!virt_addr)
@@ -759,7 +831,9 @@ acpi_os_read_pci_configuration(struct acpi_pci_id * pci_id, u32 reg,
 	u32 value32;
 
 	if (!value)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_BAD_PARAMETER;
+}
 
 	switch (width) {
 	case 8:
@@ -812,6 +886,7 @@ acpi_os_write_pci_configuration(struct acpi_pci_id * pci_id, u32 reg,
 
 static void acpi_os_execute_deferred(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_os_dpc *dpc = container_of(work, struct acpi_os_dpc, work);
 
 	dpc->function(dpc->context);
@@ -1039,6 +1114,7 @@ acpi_status acpi_os_execute(acpi_execute_type type,
 			  function, context));
 
 	if (type == OSL_DEBUGGER_MAIN_THREAD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = acpi_debugger_create_thread(function, context);
 		if (ret) {
 			pr_err("Call to kthread_create() failed.\n");
@@ -1123,6 +1199,7 @@ struct acpi_hp_work {
 
 static void acpi_hotplug_work_fn(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_hp_work *hpw = container_of(work, struct acpi_hp_work, work);
 
 	acpi_os_wait_events_complete();
@@ -1140,7 +1217,9 @@ acpi_status acpi_hotplug_schedule(struct acpi_device *adev, u32 src)
 
 	hpw = kmalloc(sizeof(*hpw), GFP_KERNEL);
 	if (!hpw)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_NO_MEMORY;
+}
 
 	INIT_WORK(&hpw->work, acpi_hotplug_work_fn);
 	hpw->adev = adev;
@@ -1160,6 +1239,7 @@ acpi_status acpi_hotplug_schedule(struct acpi_device *adev, u32 src)
 
 bool acpi_queue_hotplug_work(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return queue_work(kacpi_hotplug_wq, work);
 }
 
@@ -1170,8 +1250,11 @@ acpi_os_create_semaphore(u32 max_units, u32 initial_units, acpi_handle * handle)
 
 	sem = acpi_os_allocate_zeroed(sizeof(struct semaphore));
 	if (!sem)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_NO_MEMORY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sema_init(sem, initial_units);
 
 	*handle = (acpi_handle *) sem;
@@ -1194,7 +1277,9 @@ acpi_status acpi_os_delete_semaphore(acpi_handle handle)
 	struct semaphore *sem = (struct semaphore *)handle;
 
 	if (!sem)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_BAD_PARAMETER;
+}
 
 	ACPI_DEBUG_PRINT((ACPI_DB_MUTEX, "Deleting semaphore[%p].\n", handle));
 
@@ -1216,26 +1301,37 @@ acpi_status acpi_os_wait_semaphore(acpi_handle handle, u32 units, u16 timeout)
 	int ret = 0;
 
 	if (!acpi_os_initialized)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
+}
 
 	if (!sem || (units < 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_BAD_PARAMETER;
+}
 
 	if (units > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_SUPPORT;
+}
 
 	ACPI_DEBUG_PRINT((ACPI_DB_MUTEX, "Waiting for semaphore[%p|%d|%d]\n",
 			  handle, units, timeout));
 
 	if (timeout == ACPI_WAIT_FOREVER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		jiffies = MAX_SCHEDULE_TIMEOUT;
+}
 	else
 		jiffies = msecs_to_jiffies(timeout);
 
 	ret = down_timeout(sem, jiffies);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_TIME;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ACPI_FAILURE(status)) {
 		ACPI_DEBUG_PRINT((ACPI_DB_MUTEX,
 				  "Failed to acquire semaphore[%p|%d|%d], %s",
@@ -1247,6 +1343,7 @@ acpi_status acpi_os_wait_semaphore(acpi_handle handle, u32 units, u16 timeout)
 				  units, timeout));
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return status;
 }
 
@@ -1258,13 +1355,19 @@ acpi_status acpi_os_signal_semaphore(acpi_handle handle, u32 units)
 	struct semaphore *sem = (struct semaphore *)handle;
 
 	if (!acpi_os_initialized)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
+}
 
 	if (!sem || (units < 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_BAD_PARAMETER;
+}
 
 	if (units > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_SUPPORT;
+}
 
 	ACPI_DEBUG_PRINT((ACPI_DB_MUTEX, "Signaling semaphore[%p|%d]\n", handle,
 			  units));
@@ -1291,7 +1394,9 @@ acpi_status acpi_os_get_line(char *buffer, u32 buffer_length, u32 *bytes_read)
 
 	ret = acpi_debugger_read_cmd(buffer, buffer_length);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_ERROR;
+}
 	if (bytes_read)
 		*bytes_read = ret;
 #endif
@@ -1306,7 +1411,9 @@ acpi_status acpi_os_wait_command_ready(void)
 
 	ret = acpi_debugger_wait_command_ready();
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_ERROR;
+}
 	return AE_OK;
 }
 
@@ -1316,12 +1423,15 @@ acpi_status acpi_os_notify_command_complete(void)
 
 	ret = acpi_debugger_notify_command_complete();
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_ERROR;
+}
 	return AE_OK;
 }
 
 acpi_status acpi_os_signal(u32 function, void *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (function) {
 	case ACPI_SIGNAL_FATAL:
 		printk(KERN_ERR PREFIX "Fatal opcode executed\n");
@@ -1348,6 +1458,7 @@ static int __init acpi_os_name_setup(char *str)
 	char *p = acpi_os_name;
 	int count = ACPI_MAX_OVERRIDE_LEN - 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!str || !*str)
 		return 0;
 
@@ -1375,6 +1486,7 @@ __setup("acpi_os_name=", acpi_os_name_setup);
  */
 static int __init acpi_no_auto_serialize_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_gbl_auto_serialize_methods = FALSE;
 	pr_info("ACPI: auto-serialization disabled\n");
 
@@ -1407,6 +1519,7 @@ static unsigned int acpi_enforce_resources = ENFORCE_RESOURCES_STRICT;
 
 static int __init acpi_enforce_resources_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (str == NULL || *str == '\0')
 		return 0;
 
@@ -1432,33 +1545,50 @@ int acpi_check_resource_conflict(const struct resource *res)
 	int clash = 0;
 
 	if (acpi_enforce_resources == ENFORCE_RESOURCES_NO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (!(res->flags & IORESOURCE_IO) && !(res->flags & IORESOURCE_MEM))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (res->flags & IORESOURCE_IO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		space_id = ACPI_ADR_SPACE_SYSTEM_IO;
+}
 	else
 		space_id = ACPI_ADR_SPACE_SYSTEM_MEMORY;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	length = resource_size(res);
 	if (acpi_enforce_resources != ENFORCE_RESOURCES_NO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		warn = 1;
+}
 	clash = acpi_check_address_range(space_id, res->start, length, warn);
 
 	if (clash) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (acpi_enforce_resources != ENFORCE_RESOURCES_NO) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (acpi_enforce_resources == ENFORCE_RESOURCES_LAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				printk(KERN_NOTICE "ACPI: This conflict may"
 				       " cause random problems and system"
 				       " instability\n");
+}
 			printk(KERN_INFO "ACPI: If an ACPI driver is available"
 			       " for this device, you should use it instead of"
 			       " the native driver\n");
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (acpi_enforce_resources == ENFORCE_RESOURCES_STRICT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EBUSY;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(acpi_check_resource_conflict);
@@ -1482,6 +1612,7 @@ EXPORT_SYMBOL(acpi_check_region);
  */
 int acpi_resources_are_enforced(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acpi_enforce_resources == ENFORCE_RESOURCES_STRICT;
 }
 EXPORT_SYMBOL(acpi_resources_are_enforced);
@@ -1491,6 +1622,7 @@ EXPORT_SYMBOL(acpi_resources_are_enforced);
  */
 void acpi_os_delete_lock(acpi_spinlock handle)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_FREE(handle);
 }
 
@@ -1513,6 +1645,7 @@ acpi_cpu_flags acpi_os_acquire_lock(acpi_spinlock lockp)
 
 void acpi_os_release_lock(acpi_spinlock lockp, acpi_cpu_flags flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(lockp, flags);
 }
 
@@ -1538,7 +1671,9 @@ acpi_os_create_cache(char *name, u16 size, u16 depth, acpi_cache_t ** cache)
 {
 	*cache = kmem_cache_create(name, size, 0, 0, NULL);
 	if (*cache == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_ERROR;
+}
 	else
 		return AE_OK;
 }
@@ -1576,6 +1711,7 @@ acpi_status acpi_os_purge_cache(acpi_cache_t * cache)
 
 acpi_status acpi_os_delete_cache(acpi_cache_t * cache)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_destroy(cache);
 	return (AE_OK);
 }
@@ -1603,6 +1739,7 @@ acpi_status acpi_os_release_object(acpi_cache_t * cache, void *object)
 
 static int __init acpi_no_static_ssdt_setup(char *s)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_gbl_disable_ssdt_table_install = TRUE;
 	pr_info("ACPI: static SSDT installation disabled\n");
 
@@ -1613,6 +1750,7 @@ early_param("acpi_no_static_ssdt", acpi_no_static_ssdt_setup);
 
 static int __init acpi_disable_return_repair(char *s)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	printk(KERN_NOTICE PREFIX
 	       "ACPI: Predefined validation mechanism disabled\n");
 	acpi_gbl_disable_auto_repair = TRUE;
@@ -1636,6 +1774,7 @@ acpi_status __init acpi_os_initialize(void)
 		int rv;
 
 		rv = acpi_os_map_generic_address(&acpi_gbl_FADT.reset_register);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug(PREFIX "%s: map reset_reg status %d\n", __func__, rv);
 	}
 	acpi_os_initialized = true;
@@ -1657,6 +1796,7 @@ acpi_status __init acpi_os_initialize1(void)
 
 acpi_status acpi_os_terminate(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_irq_handler) {
 		acpi_os_remove_interrupt_handler(acpi_gbl_FADT.sci_interrupt,
 						 acpi_irq_handler);
@@ -1681,8 +1821,10 @@ acpi_status acpi_os_prepare_sleep(u8 sleep_state, u32 pm1a_control,
 {
 	int rc = 0;
 	if (__acpi_os_prepare_sleep)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = __acpi_os_prepare_sleep(sleep_state,
 					     pm1a_control, pm1b_control);
+}
 	if (rc < 0)
 		return AE_ERROR;
 	else if (rc > 0)
@@ -1694,6 +1836,7 @@ acpi_status acpi_os_prepare_sleep(u8 sleep_state, u32 pm1a_control,
 void acpi_os_set_prepare_sleep(int (*func)(u8 sleep_state,
 			       u32 pm1a_ctrl, u32 pm1b_ctrl))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__acpi_os_prepare_sleep = func;
 }
 
@@ -1716,6 +1859,7 @@ acpi_status acpi_os_prepare_extended_sleep(u8 sleep_state, u32 val_a,
 acpi_status acpi_os_prepare_extended_sleep(u8 sleep_state, u32 val_a,
 				  u32 val_b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return AE_OK;
 }
 #endif
@@ -1723,6 +1867,7 @@ acpi_status acpi_os_prepare_extended_sleep(u8 sleep_state, u32 val_a,
 void acpi_os_set_prepare_extended_sleep(int (*func)(u8 sleep_state,
 			       u32 val_a, u32 val_b))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__acpi_os_prepare_extended_sleep = func;
 }
 
@@ -1732,9 +1877,11 @@ acpi_status acpi_os_enter_sleep(u8 sleep_state,
 	acpi_status status;
 
 	if (acpi_gbl_reduced_hardware)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_os_prepare_extended_sleep(sleep_state,
 							reg_a_value,
 							reg_b_value);
+}
 	else
 		status = acpi_os_prepare_sleep(sleep_state,
 					       reg_a_value, reg_b_value);
diff --git a/drivers/acpi/pci_irq.c b/drivers/acpi/pci_irq.c
index c576a6f..2792fae 100644
--- a/drivers/acpi/pci_irq.c
+++ b/drivers/acpi/pci_irq.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  pci_irq.c - ACPI PCI Interrupt Routing ($Revision: 11 $)
  *
@@ -49,6 +51,7 @@ struct acpi_prt_entry {
 
 static inline char pin_name(int pin)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 'A' + pin - 1;
 }
 
@@ -129,6 +132,7 @@ static void do_prt_fixups(struct acpi_prt_entry *entry,
 	const struct prt_quirk *quirk;
 
 	for (i = 0; i < ARRAY_SIZE(prt_quirks); i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		quirk = &prt_quirks[i];
 
 		/* All current quirks involve link devices, not GSIs */
@@ -165,7 +169,9 @@ static int acpi_pci_irq_check_entry(acpi_handle handle, struct pci_dev *dev,
 
 	entry = kzalloc(sizeof(struct acpi_prt_entry), GFP_KERNEL);
 	if (!entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/*
 	 * Note that the _PRT uses 0=INTA, 1=INTB, etc, while PCI uses
@@ -228,11 +234,14 @@ static int acpi_pci_irq_find_prt_entry(struct pci_dev *dev,
 		handle = ACPI_HANDLE(dev->bus->bridge);
 
 	if (!handle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* 'handle' is the _PRT's parent (root bridge or PCI-PCI bridge) */
 	status = acpi_get_irq_routing_table(handle, &buffer);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(buffer.pointer);
 		return -ENODEV;
 	}
@@ -263,10 +272,16 @@ static int bridge_has_boot_interrupt_variant(struct pci_bus *bus)
 
 	for (bus_it = bus ; bus_it ; bus_it = bus_it->parent) {
 		if (!bus_it->self)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (bus_it->self->irq_reroute_variant)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return bus_it->self->irq_reroute_variant;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -281,6 +296,7 @@ static int acpi_reroute_boot_interrupt(struct pci_dev *dev,
 				       struct acpi_prt_entry *entry)
 {
 	if (noioapicquirk || noioapicreroute) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	} else {
 		switch (bridge_has_boot_interrupt_variant(dev->bus)) {
@@ -330,7 +346,9 @@ static struct acpi_prt_entry *acpi_pci_irq_lookup(struct pci_dev *dev, int pin)
 	 * PCI interrupt routing entry (eg. yenta bridge and add-in card bridge).
 	 */
 	bridge = dev->bus->self;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (bridge) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pin = pci_swizzle_interrupt_pin(dev, pin);
 
 		if ((bridge->class >> 8) == PCI_CLASS_BRIDGE_CARDBUS) {
@@ -340,20 +358,26 @@ static struct acpi_prt_entry *acpi_pci_irq_lookup(struct pci_dev *dev, int pin)
 				ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 						  "No interrupt pin configured for device %s\n",
 						  pci_name(bridge)));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return NULL;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pin = bridge_pin;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = acpi_pci_irq_find_prt_entry(bridge, pin, &entry);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ret && entry) {
 			ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 					 "Derived GSI for %s INT %c from %s\n",
 					 pci_name(dev), pin_name(orig_pin),
 					 pci_name(bridge)));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return entry;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev = bridge;
 		bridge = dev->bus->self;
 	}
@@ -384,6 +408,7 @@ static int acpi_isa_register_gsi(struct pci_dev *dev)
 #else
 static inline int acpi_isa_register_gsi(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 #endif
@@ -429,11 +454,14 @@ int acpi_pci_irq_enable(struct pci_dev *dev)
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 				  "No interrupt pin configured for device %s\n",
 				  pci_name(dev)));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 
 	if (dev->irq_managed && dev->irq > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	entry = acpi_pci_irq_lookup(dev, pin);
 	if (!entry) {
@@ -455,7 +483,9 @@ int acpi_pci_irq_enable(struct pci_dev *dev)
 		else
 			gsi = entry->index;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gsi = -1;
+}
 
 	if (gsi < 0) {
 		/*
@@ -463,12 +493,16 @@ int acpi_pci_irq_enable(struct pci_dev *dev)
 		 * driver reported one, then use it. Exit in any case.
 		 */
 		if (!acpi_pci_irq_valid(dev, pin))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (acpi_isa_register_gsi(dev))
 			dev_warn(&dev->dev, "PCI INT %c: no GSI\n",
 				 pin_name(pin));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(entry);
 		return 0;
 	}
@@ -488,6 +522,7 @@ int acpi_pci_irq_enable(struct pci_dev *dev)
 	else
 		link_desc[0] = '\0';
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&dev->dev, "PCI INT %c%s -> GSI %u (%s, %s) -> IRQ %d\n",
 		pin_name(pin), link_desc, gsi,
 		(triggering == ACPI_LEVEL_SENSITIVE) ? "level" : "edge",
@@ -504,6 +539,7 @@ void acpi_pci_irq_disable(struct pci_dev *dev)
 	u8 pin;
 
 	pin = dev->pin;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pin || !dev->irq_managed || dev->irq <= 0)
 		return;
 
diff --git a/drivers/acpi/pci_link.c b/drivers/acpi/pci_link.c
index bc3d914..34cf2e2 100644
--- a/drivers/acpi/pci_link.c
+++ b/drivers/acpi/pci_link.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  pci_link.c - ACPI PCI Interrupt Link Device Driver ($Revision: 34 $)
  *
@@ -109,23 +111,30 @@ static acpi_status acpi_pci_link_check_possible(struct acpi_resource *resource,
 	case ACPI_RESOURCE_TYPE_IRQ:
 		{
 			struct acpi_resource_irq *p = &resource->data.irq;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!p || !p->interrupt_count) {
 				ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 						  "Blank _PRS IRQ resource\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return AE_OK;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			for (i = 0;
 			     (i < p->interrupt_count
 			      && i < ACPI_PCI_LINK_MAX_POSSIBLE); i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!p->interrupts[i]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					printk(KERN_WARNING PREFIX
 					       "Invalid _PRS IRQ %d\n",
 					       p->interrupts[i]);
 					continue;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				link->irq.possible[i] = p->interrupts[i];
 				link->irq.possible_count++;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			link->irq.triggering = p->triggering;
 			link->irq.polarity = p->polarity;
 			link->irq.resource_type = ACPI_RESOURCE_TYPE_IRQ;
@@ -136,6 +145,7 @@ static acpi_status acpi_pci_link_check_possible(struct acpi_resource *resource,
 			struct acpi_resource_extended_irq *p =
 			    &resource->data.extended_irq;
 			if (!p || !p->interrupt_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				printk(KERN_WARNING PREFIX
 					      "Blank _PRS EXT IRQ resource\n");
 				return AE_OK;
@@ -144,6 +154,7 @@ static acpi_status acpi_pci_link_check_possible(struct acpi_resource *resource,
 			     (i < p->interrupt_count
 			      && i < ACPI_PCI_LINK_MAX_POSSIBLE); i++) {
 				if (!p->interrupts[i]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					printk(KERN_WARNING PREFIX
 					       "Invalid _PRS IRQ %d\n",
 					       p->interrupts[i]);
@@ -163,6 +174,7 @@ static acpi_status acpi_pci_link_check_possible(struct acpi_resource *resource,
 		return AE_OK;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return AE_CTRL_TERMINATE;
 }
 
@@ -173,6 +185,7 @@ static int acpi_pci_link_get_possible(struct acpi_pci_link *link)
 	status = acpi_walk_resources(link->device->handle, METHOD_NAME__PRS,
 				     acpi_pci_link_check_possible, link);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status, "Evaluating _PRS"));
 		return -ENODEV;
 	}
@@ -181,6 +194,7 @@ static int acpi_pci_link_get_possible(struct acpi_pci_link *link)
 			  "Found %d possible IRQs\n",
 			  link->irq.possible_count));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -196,6 +210,7 @@ static acpi_status acpi_pci_link_check_current(struct acpi_resource *resource,
 	case ACPI_RESOURCE_TYPE_IRQ:
 		{
 			struct acpi_resource_irq *p = &resource->data.irq;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!p || !p->interrupt_count) {
 				/*
 				 * IRQ descriptors may have no IRQ# bits set,
@@ -203,8 +218,10 @@ static acpi_status acpi_pci_link_check_current(struct acpi_resource *resource,
 				 */
 				ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 						  "Blank _CRS IRQ resource\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return AE_OK;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*irq = p->interrupts[0];
 			break;
 		}
@@ -231,6 +248,7 @@ static acpi_status acpi_pci_link_check_current(struct acpi_resource *resource,
 		return AE_OK;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return AE_CTRL_TERMINATE;
 }
 
@@ -254,12 +272,15 @@ static int acpi_pci_link_get_current(struct acpi_pci_link *link)
 		/* Query _STA, set link->device->status */
 		result = acpi_bus_get_status(link->device);
 		if (result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_ERR PREFIX "Unable to read status\n");
 			goto end;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!link->device->status.enabled) {
 			ACPI_DEBUG_PRINT((ACPI_DB_INFO, "Link disabled\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
 		}
 	}
@@ -271,12 +292,14 @@ static int acpi_pci_link_get_current(struct acpi_pci_link *link)
 	status = acpi_walk_resources(link->device->handle, METHOD_NAME__CRS,
 				     acpi_pci_link_check_current, &irq);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status, "Evaluating _CRS"));
 		result = -ENODEV;
 		goto end;
 	}
 
 	if (acpi_strict && !irq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "_CRS returned 0\n");
 		result = -ENODEV;
 	}
@@ -300,11 +323,15 @@ static int acpi_pci_link_set(struct acpi_pci_link *link, int irq)
 	struct acpi_buffer buffer = { 0, NULL };
 
 	if (!irq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	resource = kzalloc(sizeof(*resource) + 1, irqs_disabled() ? GFP_ATOMIC: GFP_KERNEL);
 	if (!resource)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	buffer.length = sizeof(*resource) + 1;
 	buffer.pointer = resource;
@@ -317,10 +344,13 @@ static int acpi_pci_link_set(struct acpi_pci_link *link, int irq)
 		resource->res.data.irq.polarity =
 		    link->irq.polarity;
 		if (link->irq.triggering == ACPI_EDGE_SENSITIVE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			resource->res.data.irq.sharable =
 			    ACPI_EXCLUSIVE;
+}
 		else
 			resource->res.data.irq.sharable = ACPI_SHARED;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		resource->res.data.irq.interrupt_count = 1;
 		resource->res.data.irq.interrupts[0] = irq;
 		break;
@@ -335,8 +365,10 @@ static int acpi_pci_link_set(struct acpi_pci_link *link, int irq)
 		resource->res.data.extended_irq.polarity =
 		    link->irq.polarity;
 		if (link->irq.triggering == ACPI_EDGE_SENSITIVE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			resource->res.data.irq.sharable =
 			    ACPI_EXCLUSIVE;
+}
 		else
 			resource->res.data.irq.sharable = ACPI_SHARED;
 		resource->res.data.extended_irq.interrupt_count = 1;
@@ -357,6 +389,7 @@ static int acpi_pci_link_set(struct acpi_pci_link *link, int irq)
 
 	/* check for total failure */
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status, "Evaluating _SRS"));
 		result = -ENODEV;
 		goto end;
@@ -365,10 +398,12 @@ static int acpi_pci_link_set(struct acpi_pci_link *link, int irq)
 	/* Query _STA, set device->status */
 	result = acpi_bus_get_status(link->device);
 	if (result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Unable to read status\n");
 		goto end;
 	}
 	if (!link->device->status.enabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_WARNING PREFIX
 			      "%s [%s] disabled and referenced, BIOS bug\n",
 			      acpi_device_name(link->device),
@@ -498,10 +533,14 @@ static int acpi_irq_get_penalty(int irq)
 	int penalty = 0;
 
 	if (irq == sci_irq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		penalty += sci_penalty;
+}
 
 	if (irq < ACPI_MAX_ISA_IRQS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return penalty + acpi_isa_irq_penalty[irq];
+}
 
 	return penalty + acpi_irq_pci_sharing_penalty(irq);
 }
@@ -527,13 +566,16 @@ int __init acpi_irq_penalty_init(void)
 
 			for (i = 0; i < link->irq.possible_count; i++) {
 				if (link->irq.possible[i] < ACPI_MAX_ISA_IRQS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					acpi_isa_irq_penalty[link->irq.
 							 possible[i]] +=
 					    penalty;
+}
 			}
 
 		} else if (link->irq.active &&
 				(link->irq.active < ACPI_MAX_ISA_IRQS)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_isa_irq_penalty[link->irq.active] +=
 			    PIRQ_PENALTY_PCI_POSSIBLE;
 		}
@@ -550,9 +592,11 @@ static int acpi_pci_link_allocate(struct acpi_pci_link *link)
 	int i;
 
 	if (link->irq.initialized) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (link->refcnt == 0)
 			/* This means the link is disabled but initialized */
 			acpi_pci_link_set(link, link->irq.active);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 
@@ -567,9 +611,12 @@ static int acpi_pci_link_allocate(struct acpi_pci_link *link)
 	 * forget active IRQ that is not in possible list
 	 */
 	if (i == link->irq.possible_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (acpi_strict)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_WARNING PREFIX "_CRS %d not found"
 				      " in _PRS\n", link->irq.active);
+}
 		link->irq.active = 0;
 	}
 
@@ -593,6 +640,7 @@ static int acpi_pci_link_allocate(struct acpi_pci_link *link)
 		}
 	}
 	if (acpi_irq_get_penalty(irq) >= PIRQ_PENALTY_ISA_ALWAYS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "No IRQ available for %s [%s]. "
 			    "Try pci=noacpi or acpi=off\n",
 			    acpi_device_name(link->device),
@@ -602,6 +650,7 @@ static int acpi_pci_link_allocate(struct acpi_pci_link *link)
 
 	/* Attempt to enable the link device at this IRQ. */
 	if (acpi_pci_link_set(link, irq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Unable to set IRQ for %s [%s]. "
 			    "Try pci=noacpi or acpi=off\n",
 			    acpi_device_name(link->device),
@@ -609,8 +658,10 @@ static int acpi_pci_link_allocate(struct acpi_pci_link *link)
 		return -ENODEV;
 	} else {
 		if (link->irq.active < ACPI_MAX_ISA_IRQS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_isa_irq_penalty[link->irq.active] +=
 				PIRQ_PENALTY_PCI_USING;
+}
 
 		printk(KERN_WARNING PREFIX "%s [%s] enabled at IRQ %d\n",
 		       acpi_device_name(link->device),
@@ -635,29 +686,34 @@ int acpi_pci_link_allocate_irq(acpi_handle handle, int index, int *triggering,
 
 	result = acpi_bus_get_device(handle, &device);
 	if (result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Invalid link device\n");
 		return -1;
 	}
 
 	link = acpi_driver_data(device);
 	if (!link) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Invalid link context\n");
 		return -1;
 	}
 
 	/* TBD: Support multiple index (IRQ) entries per Link Device */
 	if (index) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Invalid index %d\n", index);
 		return -1;
 	}
 
 	mutex_lock(&acpi_link_lock);
 	if (acpi_pci_link_allocate(link)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&acpi_link_lock);
 		return -1;
 	}
 
 	if (!link->irq.active) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&acpi_link_lock);
 		printk(KERN_ERR PREFIX "Link active IRQ is 0!\n");
 		return -1;
@@ -689,6 +745,7 @@ int acpi_pci_link_free_irq(acpi_handle handle)
 
 	result = acpi_bus_get_device(handle, &device);
 	if (result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Invalid link device\n");
 		return -1;
 	}
@@ -742,7 +799,9 @@ static int acpi_pci_link_add(struct acpi_device *device,
 
 	link = kzalloc(sizeof(struct acpi_pci_link), GFP_KERNEL);
 	if (!link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	link->device = device;
 	strcpy(acpi_device_name(device), ACPI_PCI_LINK_DEVICE_NAME);
@@ -770,10 +829,14 @@ static int acpi_pci_link_add(struct acpi_device *device,
 	printk(KERN_CONT ")");
 
 	if (!found)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_CONT " *%d", link->irq.active);
+}
 
 	if (!link->device->status.enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_CONT ", disabled.");
+}
 
 	printk(KERN_CONT "\n");
 
@@ -785,13 +848,16 @@ static int acpi_pci_link_add(struct acpi_device *device,
 	mutex_unlock(&acpi_link_lock);
 
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(link);
+}
 
 	return result < 0 ? result : 1;
 }
 
 static int acpi_pci_link_resume(struct acpi_pci_link *link)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (link->refcnt && link->irq.active && link->irq.initialized)
 		return (acpi_pci_link_set(link, link->irq.active));
 
@@ -802,6 +868,7 @@ static void irqrouter_resume(void)
 {
 	struct acpi_pci_link *link;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(link, &acpi_link_list, list) {
 		acpi_pci_link_resume(link);
 	}
@@ -827,6 +894,7 @@ static int __init acpi_irq_penalty_update(char *str, int used)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < 16; i++) {
 		int retval;
 		int irq;
@@ -870,6 +938,7 @@ void acpi_penalize_isa_irq(int irq, int active)
 
 bool acpi_isa_irq_available(int irq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return irq >= 0 && (irq >= ARRAY_SIZE(acpi_isa_irq_penalty) ||
 		    acpi_irq_get_penalty(irq) < PIRQ_PENALTY_ISA_ALWAYS);
 }
@@ -892,6 +961,7 @@ void acpi_penalize_sci_irq(int irq, int trigger, int polarity)
  */
 static int __init acpi_irq_isa(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acpi_irq_penalty_update(str, 1);
 }
 
@@ -904,6 +974,7 @@ __setup("acpi_irq_isa=", acpi_irq_isa);
  */
 static int __init acpi_irq_pci(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acpi_irq_penalty_update(str, 0);
 }
 
@@ -911,6 +982,7 @@ __setup("acpi_irq_pci=", acpi_irq_pci);
 
 static int __init acpi_irq_nobalance_set(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_irq_balance = 0;
 	return 1;
 }
@@ -919,6 +991,7 @@ __setup("acpi_irq_nobalance", acpi_irq_nobalance_set);
 
 static int __init acpi_irq_balance_set(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_irq_balance = 1;
 	return 1;
 }
@@ -932,7 +1005,9 @@ static struct syscore_ops irqrouter_syscore_ops = {
 void __init acpi_pci_link_init(void)
 {
 	if (acpi_noirq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (acpi_irq_balance == -1) {
 		/* no command line switch: enable balancing in IOAPIC mode */
diff --git a/drivers/acpi/pci_root.c b/drivers/acpi/pci_root.c
index 6fc204a..4f6cf79 100644
--- a/drivers/acpi/pci_root.c
+++ b/drivers/acpi/pci_root.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  pci_root.c - ACPI PCI Root Bridge Driver ($Revision: 40 $)
  *
@@ -48,6 +50,7 @@ static void acpi_pci_root_remove(struct acpi_device *device);
 
 static int acpi_pci_root_scan_dependent(struct acpi_device *adev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpiphp_check_host_bridge(adev);
 	return 0;
 }
@@ -88,11 +91,15 @@ int acpi_is_root_bridge(acpi_handle handle)
 
 	ret = acpi_bus_get_device(handle, &device);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = acpi_match_device_ids(device, root_device_ids);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	else
 		return 1;
 }
@@ -107,7 +114,9 @@ get_root_bridge_busnr_callback(struct acpi_resource *resource, void *data)
 
 	status = acpi_resource_to_address64(resource, &address);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
+}
 
 	if ((address.address.address_length > 0) &&
 	    (address.resource_type == ACPI_BUS_NUMBER_RANGE)) {
@@ -115,6 +124,7 @@ get_root_bridge_busnr_callback(struct acpi_resource *resource, void *data)
 		res->end = address.address.minimum + address.address.address_length - 1;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return AE_OK;
 }
 
@@ -128,9 +138,13 @@ static acpi_status try_get_root_bridge_busnr(acpi_handle handle,
 	    acpi_walk_resources(handle, METHOD_NAME__CRS,
 				get_root_bridge_busnr_callback, res);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return status;
+}
 	if (res->start == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_ERROR;
+}
 	return AE_OK;
 }
 
@@ -291,6 +305,7 @@ struct pci_dev *acpi_get_pci_dev(acpi_handle handle)
 	 * Walk up the ACPI CA namespace until we reach a PCI root bridge.
 	 */
 	phandle = handle;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!acpi_is_root_bridge(phandle)) {
 		node = kzalloc(sizeof(struct acpi_handle_node), GFP_KERNEL);
 		if (!node)
@@ -372,15 +387,21 @@ acpi_status acpi_pci_osc_control_set(acpi_handle handle, u32 *mask, u32 req)
 	u32 ctrl, capbuf[3];
 
 	if (!mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_BAD_PARAMETER;
+}
 
 	ctrl = *mask & OSC_PCI_CONTROL_MASKS;
 	if ((ctrl & req) != req)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_TYPE;
+}
 
 	root = acpi_pci_find_root(handle);
 	if (!root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_NOT_EXIST;
+}
 
 	mutex_lock(&osc_lock);
 
@@ -396,12 +417,14 @@ acpi_status acpi_pci_osc_control_set(acpi_handle handle, u32 *mask, u32 req)
 			goto out;
 		if (ctrl == *mask)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		decode_osc_control(root, "platform does not support",
 				   ctrl & ~(*mask));
 		ctrl = *mask;
 	}
 
 	if ((ctrl & req) != req) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		decode_osc_control(root, "not requesting control; platform does not support",
 				   req & ~(ctrl));
 		status = AE_SUPPORT;
@@ -433,6 +456,7 @@ static void negotiate_os_control(struct acpi_pci_root *root, int *no_aspm)
 	 * platform, so avoid calling _OSC at all
 	 */
 	if (x86_apple_machine) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		root->osc_control_set = ~OSC_PCI_EXPRESS_PME_CONTROL;
 		decode_osc_control(root, "OS assumes control of",
 				   root->osc_control_set);
@@ -445,7 +469,9 @@ static void negotiate_os_control(struct acpi_pci_root *root, int *no_aspm)
 	 */
 	support = OSC_PCI_SEGMENT_GROUPS_SUPPORT;
 	if (pci_ext_cfg_avail())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		support |= OSC_PCI_EXT_CONFIG_SUPPORT;
+}
 	if (pcie_aspm_support_enabled())
 		support |= OSC_PCI_ASPM_SUPPORT | OSC_PCI_CLOCK_PM_SUPPORT;
 	if (pci_msi_enabled())
@@ -454,6 +480,7 @@ static void negotiate_os_control(struct acpi_pci_root *root, int *no_aspm)
 	decode_osc_support(root, "OS supports", support);
 	status = acpi_pci_osc_support(root, support);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&device->dev, "_OSC failed (%s); disabling ASPM\n",
 			 acpi_format_exception(status));
 		*no_aspm = 1;
@@ -461,11 +488,13 @@ static void negotiate_os_control(struct acpi_pci_root *root, int *no_aspm)
 	}
 
 	if (pcie_ports_disabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&device->dev, "PCIe port services disabled; not requesting _OSC control\n");
 		return;
 	}
 
 	if ((support & ACPI_PCIE_REQ_SUPPORT) != ACPI_PCIE_REQ_SUPPORT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		decode_osc_support(root, "not requesting OS control; OS requires",
 				   ACPI_PCIE_REQ_SUPPORT);
 		return;
@@ -476,13 +505,17 @@ static void negotiate_os_control(struct acpi_pci_root *root, int *no_aspm)
 		| OSC_PCI_EXPRESS_PME_CONTROL;
 
 	if (pci_aer_available()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (aer_acpi_firmware_first())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_info(&device->dev,
 				 "PCIe AER handled by firmware\n");
+}
 		else
 			control |= OSC_PCI_EXPRESS_AER_CONTROL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	requested = control;
 	status = acpi_pci_osc_control_set(handle, &control,
 					  OSC_PCI_EXPRESS_CAPABILITY_CONTROL);
@@ -498,6 +531,7 @@ static void negotiate_os_control(struct acpi_pci_root *root, int *no_aspm)
 			*no_aspm = 1;
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		decode_osc_control(root, "OS requested", requested);
 		decode_osc_control(root, "platform willing to grant", control);
 		dev_info(&device->dev, "_OSC failed (%s); disabling ASPM\n",
@@ -527,12 +561,15 @@ static int acpi_pci_root_add(struct acpi_device *device,
 
 	root = kzalloc(sizeof(struct acpi_pci_root), GFP_KERNEL);
 	if (!root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	segment = 0;
 	status = acpi_evaluate_integer(handle, METHOD_NAME__SEG, NULL,
 				       &segment);
 	if (ACPI_FAILURE(status) && status != AE_NOT_FOUND) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&device->dev,  "can't evaluate _SEG\n");
 		result = -ENODEV;
 		goto end;
@@ -554,10 +591,16 @@ static int acpi_pci_root_add(struct acpi_device *device,
 		status = acpi_evaluate_integer(handle, METHOD_NAME__BBN,
 					       NULL, &bus);
 		if (ACPI_SUCCESS(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			root->secondary.start = bus;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (status == AE_NOT_FOUND)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			root->secondary.start = 0;
+}
 		else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(&device->dev, "can't evaluate _BBN\n");
 			result = -ENODEV;
 			goto end;
@@ -570,7 +613,9 @@ static int acpi_pci_root_add(struct acpi_device *device,
 	strcpy(acpi_device_class(device), ACPI_PCI_ROOT_CLASS);
 	device->driver_data = root;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (hotadd && dmar_device_add(handle)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = -ENXIO;
 		goto end;
 	}
@@ -596,6 +641,7 @@ static int acpi_pci_root_add(struct acpi_device *device,
 	 */
 	root->bus = pci_acpi_scan_root(root);
 	if (!root->bus) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&device->dev,
 			"Bus %04x:%02x not present in PCI namespace\n",
 			root->segment, (unsigned int)root->secondary.start);
@@ -605,12 +651,15 @@ static int acpi_pci_root_add(struct acpi_device *device,
 	}
 
 	if (no_aspm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcie_no_aspm();
+}
 
 	pci_acpi_add_bus_pm_notifier(device);
 	device_set_wakeup_capable(root->bus->bridge, device->wakeup.flags.valid);
 
 	if (hotadd) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcibios_resource_survey_bus(root->bus);
 		pci_assign_unassigned_root_bus_resources(root->bus);
 		/*
@@ -633,7 +682,9 @@ static int acpi_pci_root_add(struct acpi_device *device,
 
 remove_dmar:
 	if (hotadd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dmar_device_remove(handle);
+}
 end:
 	kfree(root);
 	return result;
@@ -641,6 +692,7 @@ static int acpi_pci_root_add(struct acpi_device *device,
 
 static void acpi_pci_root_remove(struct acpi_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_pci_root *root = acpi_driver_data(device);
 
 	pci_lock_rescan_remove();
@@ -689,11 +741,13 @@ static void acpi_pci_root_validate_resources(struct device *dev,
 		/* Exclude non-addressable range or non-addressable portion */
 		end = min(res1->end, root->end);
 		if (end <= res1->start) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_info(dev, "host bridge window %pR (ignored, not CPU addressable)\n",
 				 res1);
 			free = true;
 			goto next;
 		} else if (res1->end != end) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_info(dev, "host bridge window %pR ([%#llx-%#llx] ignored, not CPU addressable)\n",
 				 res1, (unsigned long long)end + 1,
 				 (unsigned long long)res1->end);
@@ -711,7 +765,9 @@ static void acpi_pci_root_validate_resources(struct device *dev,
 			 * the kernel resource tree doesn't allow overlaps.
 			 */
 			if (resource_overlaps(res1, res2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				res2->start = min(res1->start, res2->start);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				res2->end = max(res1->end, res2->end);
 				dev_info(dev, "host bridge window expanded to %pR; %pR ignored\n",
 					 res2, res1);
@@ -723,7 +779,9 @@ static void acpi_pci_root_validate_resources(struct device *dev,
 next:
 		resource_list_del(entry);
 		if (free)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			resource_list_free_entry(entry);
+}
 		else
 			resource_list_add_tail(entry, resources);
 	}
@@ -772,18 +830,26 @@ int acpi_pci_probe_root_resources(struct acpi_pci_root_info *info)
 				     acpi_dev_filter_resource_type_cb,
 				     (void *)flags);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(&device->dev,
 			 "failed to parse _CRS method, error code %d\n", ret);
+}
 	else if (ret == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(&device->dev,
 			"no IO and memory resources present in _CRS\n");
+}
 	else {
 		resource_list_for_each_entry_safe(entry, tmp, list) {
 			if (entry->res->flags & IORESOURCE_IO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				acpi_pci_root_remap_iospace(entry);
+}
 
 			if (entry->res->flags & IORESOURCE_DISABLED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				resource_list_destroy_entry(entry);
+}
 			else
 				entry->res->name = info->name;
 		}
@@ -804,9 +870,13 @@ static void pci_acpi_root_add_resources(struct acpi_pci_root_info *info)
 	resource_list_for_each_entry_safe(entry, tmp, &info->resources) {
 		res = entry->res;
 		if (res->flags & IORESOURCE_MEM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			root = &iomem_resource;
+}
 		else if (res->flags & IORESOURCE_IO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			root = &ioport_resource;
+}
 		else
 			continue;
 
@@ -819,6 +889,7 @@ static void pci_acpi_root_add_resources(struct acpi_pci_root_info *info)
 
 		conflict = insert_resource_conflict(root, res);
 		if (conflict) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_info(&info->bridge->dev,
 				 "ignoring host bridge window %pR (conflicts with %s %pR)\n",
 				 res, conflict->name, conflict);
@@ -833,7 +904,9 @@ static void __acpi_pci_root_release_info(struct acpi_pci_root_info *info)
 	struct resource_entry *entry, *tmp;
 
 	if (!info)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	resource_list_for_each_entry_safe(entry, tmp, &info->resources) {
 		res = entry->res;
@@ -851,6 +924,7 @@ static void acpi_pci_root_release_info(struct pci_host_bridge *bridge)
 	struct resource *res;
 	struct resource_entry *entry;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	resource_list_for_each_entry(entry, &bridge->windows) {
 		res = entry->res;
 		if (res->flags & IORESOURCE_IO)
@@ -911,7 +985,9 @@ void __init acpi_pci_root_init(void)
 {
 	acpi_hest_init();
 	if (acpi_pci_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pci_acpi_crs_quirks();
 	acpi_scan_add_handler_with_hotplug(&pci_root_handler, "pci_root");
diff --git a/drivers/acpi/power.c b/drivers/acpi/power.c
index 1b475bc1..f3bcfe7 100644
--- a/drivers/acpi/power.c
+++ b/drivers/acpi/power.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/acpi/power.c - ACPI Power Resources management.
  *
@@ -81,6 +83,7 @@ static DEFINE_MUTEX(power_resource_list_lock);
 static inline
 struct acpi_power_resource *to_power_resource(struct acpi_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return container_of(device, struct acpi_power_resource, device);
 }
 
@@ -89,7 +92,9 @@ static struct acpi_power_resource *acpi_power_get_context(acpi_handle handle)
 	struct acpi_device *device;
 
 	if (acpi_bus_get_device(handle, &device))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	return to_power_resource(device);
 }
@@ -97,6 +102,7 @@ static struct acpi_power_resource *acpi_power_get_context(acpi_handle handle)
 static int acpi_power_resources_list_add(acpi_handle handle,
 					 struct list_head *list)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_power_resource *resource = acpi_power_get_context(handle);
 	struct acpi_power_resource_entry *entry;
 
@@ -125,6 +131,7 @@ void acpi_power_resources_list_free(struct list_head *list)
 {
 	struct acpi_power_resource_entry *entry, *e;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(entry, e, list, node) {
 		list_del(&entry->node);
 		kfree(entry);
@@ -137,6 +144,7 @@ int acpi_extract_power_resources(union acpi_object *package, unsigned int start,
 	unsigned int i;
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = start; i < package->package.count; i++) {
 		union acpi_object *element = &package->package.elements[i];
 		acpi_handle rhandle;
@@ -172,6 +180,7 @@ static int acpi_power_get_state(acpi_handle handle, int *state)
 	struct acpi_buffer buffer = { sizeof(node_name), node_name };
 
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!handle || !state)
 		return -EINVAL;
 
@@ -196,6 +205,7 @@ static int acpi_power_get_list_state(struct list_head *list, int *state)
 	struct acpi_power_resource_entry *entry;
 	int cur_state;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!list || !state)
 		return -EINVAL;
 
@@ -229,7 +239,9 @@ static int __acpi_power_on(struct acpi_power_resource *resource)
 
 	status = acpi_evaluate_object(resource->device.handle, "_ON", NULL, NULL);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	ACPI_DEBUG_PRINT((ACPI_DB_INFO, "Power resource [%s] turned on\n",
 			  resource->name));
@@ -246,6 +258,7 @@ static int acpi_power_on_unlocked(struct acpi_power_resource *resource)
 				  "Power resource [%s] already on\n",
 				  resource->name));
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = __acpi_power_on(resource);
 		if (result)
 			resource->ref_count--;
@@ -270,7 +283,9 @@ static int __acpi_power_off(struct acpi_power_resource *resource)
 	status = acpi_evaluate_object(resource->device.handle, "_OFF",
 				      NULL, NULL);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	ACPI_DEBUG_PRINT((ACPI_DB_INFO, "Power resource [%s] turned off\n",
 			  resource->name));
@@ -285,6 +300,7 @@ static int acpi_power_off_unlocked(struct acpi_power_resource *resource)
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 				  "Power resource [%s] already off\n",
 				  resource->name));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 
@@ -315,6 +331,7 @@ static int acpi_power_off_list(struct list_head *list)
 	struct acpi_power_resource_entry *entry;
 	int result = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_reverse(entry, list, node) {
 		result = acpi_power_off(entry->resource);
 		if (result)
@@ -334,6 +351,7 @@ static int acpi_power_on_list(struct list_head *list)
 	struct acpi_power_resource_entry *entry;
 	int result = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(entry, list, node) {
 		result = acpi_power_on(entry->resource);
 		if (result)
@@ -383,7 +401,9 @@ static void acpi_power_hide_list(struct acpi_device *adev,
 	struct acpi_power_resource_entry *entry;
 
 	if (list_empty(resources))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	list_for_each_entry_reverse(entry, resources, node) {
 		struct acpi_device *res_dev = &entry->resource->device;
@@ -403,7 +423,9 @@ static void acpi_power_expose_list(struct acpi_device *adev,
 	int ret;
 
 	if (list_empty(resources))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	ret = sysfs_create_group(&adev->dev.kobj, attr_group);
 	if (ret)
@@ -428,6 +450,7 @@ static void acpi_power_expose_hide(struct acpi_device *adev,
 				   const struct attribute_group *attr_group,
 				   bool expose)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (expose)
 		acpi_power_expose_list(adev, resources, attr_group);
 	else
@@ -439,23 +462,31 @@ void acpi_power_add_remove_device(struct acpi_device *adev, bool add)
 	int state;
 
 	if (adev->wakeup.flags.valid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_power_expose_hide(adev, &adev->wakeup.resources,
 				       &wakeup_attr_group, add);
+}
 
 	if (!adev->power.flags.power_resources)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (state = ACPI_STATE_D0; state <= ACPI_STATE_D3_HOT; state++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_power_expose_hide(adev,
 				       &adev->power.states[state].resources,
 				       &attr_groups[state], add);
 }
+}
 
 int acpi_power_wakeup_list_init(struct list_head *list, int *system_level_p)
 {
 	struct acpi_power_resource_entry *entry;
 	int system_level = 5;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(entry, list, node) {
 		struct acpi_power_resource *resource = entry->resource;
 		acpi_handle handle = resource->device.handle;
@@ -529,6 +560,7 @@ int acpi_device_sleep_wake(struct acpi_device *dev,
 	in_arg[2].integer.value = dev_state;
 	status = acpi_evaluate_object(dev->handle, "_DSW", &arg_list, NULL);
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	} else if (status != AE_NOT_FOUND) {
 		printk(KERN_ERR PREFIX "_DSW execution failed\n");
@@ -558,6 +590,7 @@ int acpi_enable_wakeup_device_power(struct acpi_device *dev, int sleep_state)
 	struct acpi_power_resource_entry *entry;
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev || !dev->wakeup.flags.valid)
 		return -EINVAL;
 
@@ -610,6 +643,7 @@ int acpi_disable_wakeup_device_power(struct acpi_device *dev)
 	struct acpi_power_resource_entry *entry;
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev || !dev->wakeup.flags.valid)
 		return -EINVAL;
 
@@ -661,6 +695,7 @@ int acpi_power_get_inferred_state(struct acpi_device *device, int *state)
 	int list_state = 0;
 	int i = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!device || !state)
 		return -EINVAL;
 
@@ -691,6 +726,7 @@ int acpi_power_get_inferred_state(struct acpi_device *device, int *state)
 
 int acpi_power_on_resources(struct acpi_device *device, int state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!device || state < ACPI_STATE_D0 || state > ACPI_STATE_D3_HOT)
 		return -EINVAL;
 
@@ -701,6 +737,7 @@ int acpi_power_transition(struct acpi_device *device, int state)
 {
 	int result = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!device || (state < ACPI_STATE_D0) || (state > ACPI_STATE_D3_COLD))
 		return -EINVAL;
 
@@ -732,6 +769,7 @@ int acpi_power_transition(struct acpi_device *device, int state)
 
 static void acpi_release_power_resource(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *device = to_acpi_device(dev);
 	struct acpi_power_resource *resource;
 
@@ -750,6 +788,7 @@ static ssize_t acpi_power_in_use_show(struct device *dev,
 				      char *buf) {
 	struct acpi_power_resource *resource;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	resource = to_power_resource(to_acpi_device(dev));
 	return sprintf(buf, "%u\n", !!resource->ref_count);
 }
@@ -757,11 +796,13 @@ static DEVICE_ATTR(resource_in_use, 0444, acpi_power_in_use_show, NULL);
 
 static void acpi_power_sysfs_remove(struct acpi_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_remove_file(&device->dev, &dev_attr_resource_in_use);
 }
 
 static void acpi_power_add_resource_to_list(struct acpi_power_resource *resource)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&power_resource_list_lock);
 
 	if (!list_empty(&acpi_power_resource_list)) {
@@ -790,7 +831,9 @@ int acpi_add_power_resource(acpi_handle handle)
 
 	acpi_bus_get_device(handle, &device);
 	if (device)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	resource = kzalloc(sizeof(*resource), GFP_KERNEL);
 	if (!resource)
@@ -845,6 +888,7 @@ void acpi_resume_power_resources(void)
 
 	mutex_lock(&power_resource_list_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(resource, &acpi_power_resource_list, list_node) {
 		int result, state;
 
@@ -874,6 +918,7 @@ void acpi_turn_off_unused_power_resources(void)
 
 	mutex_lock(&power_resource_list_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_reverse(resource, &acpi_power_resource_list, list_node) {
 		int result, state;
 
diff --git a/drivers/acpi/processor_core.c b/drivers/acpi/processor_core.c
index b933061..e574d01 100644
--- a/drivers/acpi/processor_core.c
+++ b/drivers/acpi/processor_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2005 Intel Corporation
  * Copyright (C) 2009 Hewlett-Packard Development Company, L.P.
@@ -22,6 +24,7 @@ static struct acpi_table_madt *get_madt_table(void)
 	static int read_madt;
 
 	if (!read_madt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ACPI_FAILURE(acpi_get_table(ACPI_SIG_MADT, 0,
 					(struct acpi_table_header **)&madt)))
 			madt = NULL;
@@ -38,10 +41,14 @@ static int map_lapic_id(struct acpi_subtable_header *entry,
 		container_of(entry, struct acpi_madt_local_apic, header);
 
 	if (!(lapic->lapic_flags & ACPI_MADT_ENABLED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (lapic->processor_id != acpi_id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	*apic_id = lapic->id;
 	return 0;
@@ -115,7 +122,9 @@ static phys_cpuid_t map_madt_entry(struct acpi_table_madt *madt,
 	phys_cpuid_t phys_id = PHYS_CPUID_INVALID;	/* CPU hardware ID */
 
 	if (!madt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return phys_id;
+}
 
 	entry = (unsigned long)madt;
 	madt_end = entry + madt->header.length;
@@ -174,6 +183,7 @@ static phys_cpuid_t map_mat_entry(acpi_handle handle, int type, u32 acpi_id)
 	if (!buffer.length || !buffer.pointer)
 		goto exit;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	obj = buffer.pointer;
 	if (obj->type != ACPI_TYPE_BUFFER ||
 	    obj->buffer.length < sizeof(struct acpi_subtable_header)) {
@@ -315,6 +325,7 @@ static int parse_mat_ioapic_entry(acpi_handle handle, u32 gsi_base,
 	if (ACPI_FAILURE(acpi_evaluate_object(handle, "_MAT", NULL, &buffer)))
 		goto exit;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!buffer.length || !buffer.pointer)
 		goto exit;
 
@@ -349,7 +360,9 @@ int acpi_get_ioapic_id(acpi_handle handle, u32 gsi_base, u64 *phys_addr)
 
 	apic_id = parse_mat_ioapic_entry(handle, gsi_base, phys_addr);
 	if (apic_id == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		apic_id = parse_madt_ioapic_entry(gsi_base, phys_addr);
+}
 
 	return apic_id;
 }
diff --git a/drivers/acpi/processor_driver.c b/drivers/acpi/processor_driver.c
index 9d6aff2..2c45850 100644
--- a/drivers/acpi/processor_driver.c
+++ b/drivers/acpi/processor_driver.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * processor_driver.c - ACPI Processor Driver
  *
@@ -73,7 +75,9 @@ static void acpi_processor_notify(acpi_handle handle, u32 event, void *data)
 	int saved;
 
 	if (device->handle != handle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pr = acpi_driver_data(device);
 	if (!pr)
@@ -112,6 +116,7 @@ static int __acpi_processor_start(struct acpi_device *device);
 
 static int acpi_soft_cpu_online(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_processor *pr = per_cpu(processors, cpu);
 	struct acpi_device *device;
 
@@ -141,6 +146,7 @@ static int acpi_soft_cpu_online(unsigned int cpu)
 
 static int acpi_soft_cpu_dead(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_processor *pr = per_cpu(processors, cpu);
 	struct acpi_device *device;
 
@@ -162,15 +168,19 @@ static int acpi_pss_perf_init(struct acpi_processor *pr,
 	acpi_processor_get_throttling_info(pr);
 
 	if (pr->flags.throttling)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr->flags.limit = 1;
+}
 
 	pr->cdev = thermal_cooling_device_register("Processor", device,
 						   &processor_cooling_ops);
 	if (IS_ERR(pr->cdev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = PTR_ERR(pr->cdev);
 		return result;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&device->dev, "registered as cooling_device%d\n",
 		pr->cdev->id);
 
@@ -178,6 +188,7 @@ static int acpi_pss_perf_init(struct acpi_processor *pr,
 				   &pr->cdev->device.kobj,
 				   "thermal_cooling");
 	if (result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&device->dev,
 			"Failed to create sysfs link 'thermal_cooling'\n");
 		goto err_thermal_unregister;
@@ -187,11 +198,13 @@ static int acpi_pss_perf_init(struct acpi_processor *pr,
 				   &device->dev.kobj,
 				   "device");
 	if (result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&pr->cdev->device,
 			"Failed to create sysfs link 'device'\n");
 		goto err_remove_sysfs_thermal;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  err_remove_sysfs_thermal:
@@ -205,6 +218,7 @@ static int acpi_pss_perf_init(struct acpi_processor *pr,
 static void acpi_pss_perf_exit(struct acpi_processor *pr,
 		struct acpi_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pr->cdev) {
 		sysfs_remove_link(&device->dev.kobj, "thermal_cooling");
 		sysfs_remove_link(&pr->cdev->device.kobj, "device");
diff --git a/drivers/acpi/processor_idle.c b/drivers/acpi/processor_idle.c
index d50a7b6..9b7c912 100644
--- a/drivers/acpi/processor_idle.c
+++ b/drivers/acpi/processor_idle.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * processor_idle - idle state submodule to the ACPI processor driver
  *
@@ -85,6 +87,7 @@ static int disabled_by_idle_boot_param(void)
  */
 static int set_max_cstate(const struct dmi_system_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (max_cstate > ACPI_PROCESSOR_MAX_POWER)
 		return 0;
 
@@ -120,6 +123,7 @@ static const struct dmi_system_id processor_power_dmi_table[] = {
  */
 static void __cpuidle acpi_safe_halt(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tif_need_resched()) {
 		safe_halt();
 		local_irq_disable();
@@ -138,6 +142,7 @@ static void lapic_timer_check_state(int state, struct acpi_processor *pr,
 				   struct acpi_processor_cx *cx)
 {
 	struct acpi_processor_power *pwr = &pr->power;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u8 type = local_apic_timer_c2_ok ? ACPI_STATE_C3 : ACPI_STATE_C2;
 
 	if (cpu_has(&cpu_data(pr->id), X86_FEATURE_ARAT))
@@ -162,13 +167,16 @@ static void __lapic_timer_propagate_broadcast(void *arg)
 	struct acpi_processor *pr = (struct acpi_processor *) arg;
 
 	if (pr->power.timer_broadcast_on_state < INT_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tick_broadcast_enable();
+}
 	else
 		tick_broadcast_disable();
 }
 
 static void lapic_timer_propagate_broadcast(struct acpi_processor *pr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	smp_call_function_single(pr->id, __lapic_timer_propagate_broadcast,
 				 (void *)pr, 1);
 }
@@ -181,6 +189,7 @@ static void lapic_timer_state_broadcast(struct acpi_processor *pr,
 	int state = cx - pr->power.states;
 
 	if (state >= pr->power.timer_broadcast_on_state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (broadcast)
 			tick_broadcast_enter();
 		else
@@ -307,29 +316,37 @@ static int acpi_processor_get_power_info_cst(struct acpi_processor *pr)
 	union acpi_object *cst;
 
 	if (nocst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	current_count = 0;
 
 	status = acpi_evaluate_object(pr->handle, "_CST", NULL, &buffer);
 	if (ACPI_FAILURE(status)) {
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO, "No _CST, giving up\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cst = buffer.pointer;
 
 	/* There must be at least 2 elements */
 	if (!cst || (cst->type != ACPI_TYPE_PACKAGE) || cst->package.count < 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("not enough elements in _CST\n");
 		ret = -EFAULT;
 		goto end;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	count = cst->package.elements[0].integer.value;
 
 	/* Validate number of power states. */
 	if (count < 1 || count != cst->package.count - 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("count given by _CST is not valid\n");
 		ret = -EFAULT;
 		goto end;
@@ -338,6 +355,7 @@ static int acpi_processor_get_power_info_cst(struct acpi_processor *pr)
 	/* Tell driver that at least _CST is supported. */
 	pr->flags.has_cst = 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 1; i <= count; i++) {
 		union acpi_object *element;
 		union acpi_object *obj;
@@ -350,14 +368,17 @@ static int acpi_processor_get_power_info_cst(struct acpi_processor *pr)
 		if (element->type != ACPI_TYPE_PACKAGE)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (element->package.count != 4)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		obj = &(element->package.elements[0]);
 
 		if (obj->type != ACPI_TYPE_BUFFER)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		reg = (struct acpi_power_register *)obj->buffer.pointer;
 
 		if (reg->space_id != ACPI_ADR_SPACE_SYSTEM_IO &&
@@ -369,21 +390,27 @@ static int acpi_processor_get_power_info_cst(struct acpi_processor *pr)
 		if (obj->type != ACPI_TYPE_INTEGER)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cx.type = obj->integer.value;
 		/*
 		 * Some buggy BIOSes won't list C1 in _CST -
 		 * Let acpi_processor_get_power_info_default() handle them later
 		 */
 		if (i == 1 && cx.type != ACPI_STATE_C1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			current_count++;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cx.address = reg->address;
 		cx.index = current_count + 1;
 
 		cx.entry_method = ACPI_CSTATE_SYSTEMIO;
 		if (reg->space_id == ACPI_ADR_SPACE_FIXED_HARDWARE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (acpi_processor_ffh_cstate_probe
 					(pr->id, &cx, reg) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cx.entry_method = ACPI_CSTATE_FFH;
 			} else if (cx.type == ACPI_STATE_C1) {
 				/*
@@ -397,6 +424,7 @@ static int acpi_processor_get_power_info_cst(struct acpi_processor *pr)
 			} else {
 				continue;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (cx.type == ACPI_STATE_C1 &&
 			    (boot_option_idle_override == IDLE_NOMWAIT)) {
 				/*
@@ -413,25 +441,32 @@ static int acpi_processor_get_power_info_cst(struct acpi_processor *pr)
 				snprintf(cx.desc, ACPI_CX_DESC_LEN, "ACPI HLT");
 			}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			snprintf(cx.desc, ACPI_CX_DESC_LEN, "ACPI IOPORT 0x%x",
 				 cx.address);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cx.type == ACPI_STATE_C1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cx.valid = 1;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		obj = &(element->package.elements[2]);
 		if (obj->type != ACPI_TYPE_INTEGER)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cx.latency = obj->integer.value;
 
 		obj = &(element->package.elements[3]);
 		if (obj->type != ACPI_TYPE_INTEGER)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		current_count++;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(&(pr->power.states[current_count]), &cx, sizeof(cx));
 
 		/*
@@ -439,6 +474,7 @@ static int acpi_processor_get_power_info_cst(struct acpi_processor *pr)
 		 * (From 1 through ACPI_PROCESSOR_MAX_POWER - 1)
 		 */
 		if (current_count >= (ACPI_PROCESSOR_MAX_POWER - 1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn("Limiting number of power states to max (%d)\n",
 				ACPI_PROCESSOR_MAX_POWER);
 			pr_warn("Please increase ACPI_PROCESSOR_MAX_POWER if needed.\n");
@@ -451,7 +487,9 @@ static int acpi_processor_get_power_info_cst(struct acpi_processor *pr)
 
 	/* Validate number of power states discovered */
 	if (current_count < 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EFAULT;
+}
 
       end:
 	kfree(buffer.pointer);
@@ -467,7 +505,9 @@ static void acpi_processor_power_verify_c3(struct acpi_processor *pr,
 
 
 	if (!cx->address)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * PIIX4 Erratum #18: We don't support C3 when Type-F (fast)
@@ -547,6 +587,7 @@ static int acpi_processor_power_verify(struct acpi_processor *pr)
 
 	pr->power.timer_broadcast_on_state = INT_MAX;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 1; i < ACPI_PROCESSOR_MAX_POWER && i <= max_cstate; i++) {
 		struct acpi_processor_cx *cx = &pr->power.states[i];
 
@@ -595,8 +636,11 @@ static int acpi_processor_get_cstate_info(struct acpi_processor *pr)
 		result = acpi_processor_get_power_info_fadt(pr);
 
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_processor_get_power_info_default(pr);
 
 	pr->power.count = acpi_processor_power_verify(pr);
@@ -606,13 +650,18 @@ static int acpi_processor_get_cstate_info(struct acpi_processor *pr)
 	 * CPU as being "idle manageable"
 	 */
 	for (i = 1; i < ACPI_PROCESSOR_MAX_POWER; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pr->power.states[i].valid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr->power.count = i;
 			if (pr->power.states[i].type >= ACPI_STATE_C2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pr->flags.power = 1;
+}
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -624,7 +673,9 @@ static int acpi_idle_bm_check(void)
 	u32 bm_status = 0;
 
 	if (bm_check_disable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	acpi_read_bit_register(ACPI_BITREG_BUS_MASTER_STATUS, &bm_status);
 	if (bm_status)
@@ -650,6 +701,7 @@ static int acpi_idle_bm_check(void)
  */
 static void __cpuidle acpi_idle_do_entry(struct acpi_processor_cx *cx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cx->entry_method == ACPI_CSTATE_FFH) {
 		/* Call into architectural FFH based C-state */
 		acpi_processor_ffh_cstate_enter(cx);
@@ -672,6 +724,7 @@ static void __cpuidle acpi_idle_do_entry(struct acpi_processor_cx *cx)
  */
 static int acpi_idle_play_dead(struct cpuidle_device *dev, int index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_processor_cx *cx = per_cpu(acpi_cstate[index], dev->cpu);
 
 	ACPI_FLUSH_CPU_CACHE();
@@ -694,6 +747,7 @@ static int acpi_idle_play_dead(struct cpuidle_device *dev, int index)
 
 static bool acpi_idle_fallback_to_c1(struct acpi_processor *pr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return IS_ENABLED(CONFIG_HOTPLUG_CPU) && !pr->flags.has_cst &&
 		!(acpi_gbl_FADT.flags & ACPI_FADT_C2_MP_SUPPORTED);
 }
@@ -710,6 +764,7 @@ static DEFINE_RAW_SPINLOCK(c3_lock);
 static void acpi_idle_enter_bm(struct acpi_processor *pr,
 			       struct acpi_processor_cx *cx, bool timer_bc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_unlazy_tlb(smp_processor_id());
 
 	/*
@@ -754,6 +809,7 @@ static void acpi_idle_enter_bm(struct acpi_processor *pr,
 static int acpi_idle_enter(struct cpuidle_device *dev,
 			   struct cpuidle_driver *drv, int index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_processor_cx *cx = per_cpu(acpi_cstate[index], dev->cpu);
 	struct acpi_processor *pr;
 
@@ -794,6 +850,7 @@ static int acpi_idle_enter(struct cpuidle_device *dev,
 static void acpi_idle_enter_s2idle(struct cpuidle_device *dev,
 				   struct cpuidle_driver *drv, int index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_processor_cx *cx = per_cpu(acpi_cstate[index], dev->cpu);
 
 	if (cx->type == ACPI_STATE_C3) {
@@ -815,6 +872,7 @@ static void acpi_idle_enter_s2idle(struct cpuidle_device *dev,
 static int acpi_processor_setup_cpuidle_cx(struct acpi_processor *pr,
 					   struct cpuidle_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int i, count = ACPI_IDLE_STATE_START;
 	struct acpi_processor_cx *cx;
 
@@ -848,7 +906,9 @@ static int acpi_processor_setup_cstates(struct acpi_processor *pr)
 	struct cpuidle_driver *drv = &acpi_idle_driver;
 
 	if (max_cstate == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		max_cstate = 1;
+}
 
 	if (IS_ENABLED(CONFIG_ARCH_HAS_CPU_RELAX)) {
 		cpuidle_poll_state_init(drv);
@@ -904,20 +964,27 @@ static inline void acpi_processor_cstate_first_run_checks(void)
 	static int first_run;
 
 	if (first_run)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	dmi_check_system(processor_power_dmi_table);
 	max_cstate = acpi_processor_cstate_check(max_cstate);
 	if (max_cstate < ACPI_C_STATES_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_notice("ACPI: processor limited to max C-state %d\n",
 			  max_cstate);
+}
 	first_run++;
 
 	if (acpi_gbl_FADT.cst_control && !nocst) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_os_write_port(acpi_gbl_FADT.smi_command,
 					    acpi_gbl_FADT.cst_control, 8);
 		if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status,
 					"Notifying BIOS of _CST ability failed"));
+}
 	}
 }
 #else
@@ -951,6 +1018,7 @@ struct acpi_lpi_states_array {
 
 static int obj_get_integer(union acpi_object *obj, u32 *value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (obj->type != ACPI_TYPE_INTEGER)
 		return -EINVAL;
 
@@ -971,6 +1039,7 @@ static int acpi_processor_evaluate_lpi(acpi_handle handle,
 	status = acpi_evaluate_object(handle, "_LPI", NULL, &buffer);
 	if (ACPI_FAILURE(status)) {
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO, "No _LPI, giving up\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
 	}
 
@@ -1085,6 +1154,7 @@ static bool combine_lpi_states(struct acpi_lpi_state *local,
 			       struct acpi_lpi_state *parent,
 			       struct acpi_lpi_state *result)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (parent->entry_method == ACPI_CSTATE_INTEGER) {
 		if (!parent->address) /* 0 means autopromotable */
 			return false;
@@ -1113,6 +1183,7 @@ static bool combine_lpi_states(struct acpi_lpi_state *local,
 static void stash_composite_state(struct acpi_lpi_states_array *curr_level,
 				  struct acpi_lpi_state *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	curr_level->composite_states[curr_level->composite_states_size++] = t;
 }
 
@@ -1124,6 +1195,7 @@ static int flatten_lpi_states(struct acpi_processor *pr,
 	struct acpi_lpi_state *p, *t = curr_level->entries;
 
 	curr_level->composite_states_size = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (j = 0; j < state_count; j++, t++) {
 		struct acpi_lpi_state *flpi;
 
@@ -1170,22 +1242,33 @@ static int acpi_processor_get_lpi_info(struct acpi_processor *pr)
 	struct acpi_lpi_states_array info[2], *tmp, *prev, *curr;
 
 	if (!osc_pc_lpi_support_confirmed)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!acpi_has_method(handle, "_LPI"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flat_state_cnt = 0;
 	prev = &info[0];
 	curr = &info[1];
 	handle = pr->handle;
 	ret = acpi_processor_evaluate_lpi(handle, prev);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flatten_lpi_states(pr, prev, NULL);
 
 	status = acpi_get_parent(handle, &pr_ahandle);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_bus_get_device(pr_ahandle, &d);
 		handle = pr_ahandle;
 
@@ -1196,6 +1279,7 @@ static int acpi_processor_get_lpi_info(struct acpi_processor *pr)
 		if (!acpi_has_method(handle, "_LPI"))
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = acpi_processor_evaluate_lpi(handle, curr);
 		if (ret)
 			break;
@@ -1208,10 +1292,13 @@ static int acpi_processor_get_lpi_info(struct acpi_processor *pr)
 		status = acpi_get_parent(handle, &pr_ahandle);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr->power.count = flat_state_cnt;
 	/* reset the index after flattening */
 	for (i = 0; i < pr->power.count; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr->power.lpi_states[i].index = i;
+}
 
 	/* Tell driver that _LPI is supported. */
 	pr->flags.has_lpi = 1;
@@ -1222,11 +1309,13 @@ static int acpi_processor_get_lpi_info(struct acpi_processor *pr)
 
 int __weak acpi_processor_ffh_lpi_probe(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 
 int __weak acpi_processor_ffh_lpi_enter(struct acpi_lpi_state *lpi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 
@@ -1244,6 +1333,7 @@ static int acpi_idle_lpi_enter(struct cpuidle_device *dev,
 	struct acpi_processor *pr;
 	struct acpi_lpi_state *lpi;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr = __this_cpu_read(processors);
 
 	if (unlikely(!pr))
@@ -1264,7 +1354,9 @@ static int acpi_processor_setup_lpi_states(struct acpi_processor *pr)
 	struct cpuidle_driver *drv = &acpi_idle_driver;
 
 	if (!pr->flags.has_lpi)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	for (i = 0; i < pr->power.count && i < CPUIDLE_STATE_MAX; i++) {
 		lpi = &pr->power.lpi_states[i];
@@ -1296,6 +1388,7 @@ static int acpi_processor_setup_cpuidle_states(struct acpi_processor *pr)
 	int i;
 	struct cpuidle_driver *drv = &acpi_idle_driver;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pr->flags.power_setup_done || !pr->flags.power)
 		return -EINVAL;
 
@@ -1321,6 +1414,7 @@ static int acpi_processor_setup_cpuidle_states(struct acpi_processor *pr)
 static int acpi_processor_setup_cpuidle_dev(struct acpi_processor *pr,
 					    struct cpuidle_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pr->flags.power_setup_done || !pr->flags.power || !dev)
 		return -EINVAL;
 
@@ -1348,7 +1442,9 @@ int acpi_processor_hotplug(struct acpi_processor *pr)
 	struct cpuidle_device *dev;
 
 	if (disabled_by_idle_boot_param())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!pr->flags.power_setup_done)
 		return -ENODEV;
@@ -1373,7 +1469,9 @@ int acpi_processor_power_state_has_changed(struct acpi_processor *pr)
 	struct cpuidle_device *dev;
 
 	if (disabled_by_idle_boot_param())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!pr->flags.power_setup_done)
 		return -ENODEV;
@@ -1430,12 +1528,16 @@ int acpi_processor_power_init(struct acpi_processor *pr)
 	struct cpuidle_device *dev;
 
 	if (disabled_by_idle_boot_param())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	acpi_processor_cstate_first_run_checks();
 
 	if (!acpi_processor_get_power_info(pr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr->flags.power_setup_done = 1;
+}
 
 	/*
 	 * Install the idle handler if processor power management is supported.
@@ -1445,17 +1547,25 @@ int acpi_processor_power_init(struct acpi_processor *pr)
 	if (pr->flags.power) {
 		/* Register acpi_idle_driver if not already registered */
 		if (!acpi_processor_registered) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_processor_setup_cpuidle_states(pr);
 			retval = cpuidle_register_driver(&acpi_idle_driver);
 			if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return retval;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("%s registered with cpuidle\n",
 				 acpi_idle_driver.name);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 		if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		per_cpu(acpi_cpuidle_device, pr->id) = dev;
 
 		acpi_processor_setup_cpuidle_dev(pr, dev);
@@ -1465,17 +1575,24 @@ int acpi_processor_power_init(struct acpi_processor *pr)
 		 */
 		retval = cpuidle_register_device(dev);
 		if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (acpi_processor_registered == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cpuidle_unregister_driver(&acpi_idle_driver);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_processor_registered++;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 int acpi_processor_power_exit(struct acpi_processor *pr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpuidle_device *dev = per_cpu(acpi_cpuidle_device, pr->id);
 
 	if (disabled_by_idle_boot_param())
diff --git a/drivers/acpi/processor_pdc.c b/drivers/acpi/processor_pdc.c
index 813f1b7..cf1e09c 100644
--- a/drivers/acpi/processor_pdc.c
+++ b/drivers/acpi/processor_pdc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * Copyright (C) 2005 Intel Corporation
@@ -31,19 +33,26 @@ static bool __init processor_physically_present(acpi_handle handle)
 
 	status = acpi_get_type(handle, &acpi_type);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	switch (acpi_type) {
 	case ACPI_TYPE_PROCESSOR:
 		status = acpi_evaluate_object(handle, NULL, NULL, &buffer);
 		if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
 		acpi_id = object.processor.proc_id;
 		break;
 	case ACPI_TYPE_DEVICE:
 		status = acpi_evaluate_integer(handle, "_UID", NULL, &tmp);
 		if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_id = tmp;
 		break;
 	default:
@@ -58,6 +67,7 @@ static bool __init processor_physically_present(acpi_handle handle)
 
 static void acpi_set_pdc_bits(u32 *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	buf[0] = ACPI_PDC_REVISION_ID;
 	buf[1] = 1;
 
@@ -79,6 +89,7 @@ static struct acpi_object_list *acpi_processor_alloc_pdc(void)
 	if (!obj_list)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	obj = kmalloc(sizeof(union acpi_object), GFP_KERNEL);
 	if (!obj) {
 		kfree(obj_list);
@@ -129,6 +140,7 @@ acpi_processor_eval_pdc(acpi_handle handle, struct acpi_object_list *pdc_in)
 		buffer[2] &= ~(ACPI_PDC_C_C2C3_FFH | ACPI_PDC_C_C1_FFH);
 
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = acpi_evaluate_object(handle, "_PDC", pdc_in, NULL);
 
 	if (ACPI_FAILURE(status))
@@ -143,12 +155,18 @@ void acpi_processor_set_pdc(acpi_handle handle)
 	struct acpi_object_list *obj_list;
 
 	if (arch_has_acpi_pdc() == false)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	obj_list = acpi_processor_alloc_pdc();
 	if (!obj_list)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_processor_eval_pdc(handle, obj_list);
 
 	kfree(obj_list->pointer->buffer.pointer);
@@ -160,7 +178,9 @@ static acpi_status __init
 early_init_pdc(acpi_handle handle, u32 lvl, void *context, void **rv)
 {
 	if (processor_physically_present(handle) == false)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
+}
 
 	acpi_processor_set_pdc(handle);
 	return AE_OK;
@@ -168,6 +188,7 @@ early_init_pdc(acpi_handle handle, u32 lvl, void *context, void **rv)
 
 static int __init set_no_mwait(const struct dmi_system_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_notice("%s detected - disabling mwait for CPU C-states\n",
 		  id->ident);
 	boot_option_idle_override = IDLE_NOMWAIT;
diff --git a/drivers/acpi/processor_perflib.c b/drivers/acpi/processor_perflib.c
index 18b72ee..cccadca 100644
--- a/drivers/acpi/processor_perflib.c
+++ b/drivers/acpi/processor_perflib.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * processor_perflib.c - ACPI Processor P-States Library ($Revision: 71 $)
  *
@@ -76,7 +78,9 @@ static int acpi_processor_ppc_notifier(struct notifier_block *nb,
 	unsigned int ppc = 0;
 
 	if (ignore_ppc < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ignore_ppc = 0;
+}
 
 	if (ignore_ppc)
 		return 0;
@@ -116,7 +120,9 @@ static int acpi_processor_get_platform_limit(struct acpi_processor *pr)
 
 
 	if (!pr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/*
 	 * _PPC indicates the maximum state currently supported by the platform
@@ -150,6 +156,7 @@ static int acpi_processor_get_platform_limit(struct acpi_processor *pr)
  */
 static void acpi_processor_ppc_ost(acpi_handle handle, int status)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_has_method(handle, "_OST"))
 		acpi_evaluate_ost(handle, ACPI_PROCESSOR_NOTIFY_PERFORMANCE,
 				  status, NULL);
@@ -165,29 +172,40 @@ void acpi_processor_ppc_has_changed(struct acpi_processor *pr, int event_flag)
 		 * will be evaluated. Otherwise it is skipped.
 		 */
 		if (event_flag)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_processor_ppc_ost(pr->handle, 1);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = acpi_processor_get_platform_limit(pr);
 	/*
 	 * Only when it is notification event, the _OST object
 	 * will be evaluated. Otherwise it is skipped.
 	 */
 	if (event_flag) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_processor_ppc_ost(pr->handle, 1);
+}
 		else
 			acpi_processor_ppc_ost(pr->handle, 0);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpufreq_update_policy(pr->id);
 }
+}
 
 int acpi_processor_get_bios_limit(int cpu, unsigned int *limit)
 {
 	struct acpi_processor *pr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr = per_cpu(processors, cpu);
 	if (!pr || !pr->performance || !pr->performance->state_count)
 		return -ENODEV;
@@ -209,6 +227,7 @@ void acpi_processor_ppc_init(void)
 
 void acpi_processor_ppc_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_processor_ppc_status & PPC_REGISTERED)
 		cpufreq_unregister_notifier(&acpi_ppc_notifier_block,
 					    CPUFREQ_POLICY_NOTIFIER);
@@ -227,6 +246,7 @@ static int acpi_processor_get_performance_control(struct acpi_processor *pr)
 
 	status = acpi_evaluate_object(pr->handle, "_PCT", NULL, &buffer);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status, "Evaluating _PCT"));
 		return -ENODEV;
 	}
@@ -289,7 +309,9 @@ static void amd_fixup_frequency(struct acpi_processor_px *px, int i)
 	int index = px->control & 0x00000007;
 
 	if (boot_cpu_data.x86_vendor != X86_VENDOR_AMD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if ((boot_cpu_data.x86 == 0x10 && boot_cpu_data.x86_model < 10)
 	    || boot_cpu_data.x86 == 0x11) {
@@ -327,6 +349,7 @@ static int acpi_processor_get_performance_states(struct acpi_processor *pr)
 
 	status = acpi_evaluate_object(pr->handle, "_PSS", NULL, &buffer);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ACPI_EXCEPTION((AE_INFO, status, "Evaluating _PSS"));
 		return -ENODEV;
 	}
@@ -424,26 +447,34 @@ int acpi_processor_get_performance_info(struct acpi_processor *pr)
 	int result = 0;
 
 	if (!pr || !pr->performance || !pr->handle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!acpi_has_method(pr->handle, "_PCT")) {
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 				  "ACPI-based processor performance control unavailable\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	result = acpi_processor_get_performance_control(pr);
 	if (result)
 		goto update_bios;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	result = acpi_processor_get_performance_states(pr);
 	if (result)
 		goto update_bios;
 
 	/* We need to call _PPC once when cpufreq starts */
 	if (ignore_ppc != 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = acpi_processor_get_platform_limit(pr);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return result;
 
 	/*
@@ -453,6 +484,7 @@ int acpi_processor_get_performance_info(struct acpi_processor *pr)
  update_bios:
 #ifdef CONFIG_X86
 	if (acpi_has_method(pr->handle, "_PPC")) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if(boot_cpu_has(X86_FEATURE_EST))
 			printk(KERN_WARNING FW_BUG "BIOS needs update for CPU "
 			       "frequency support\n");
@@ -466,6 +498,7 @@ int acpi_processor_pstate_control(void)
 {
 	acpi_status status;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!acpi_gbl_FADT.smi_command || !acpi_gbl_FADT.pstate_control)
 		return 0;
 
@@ -490,7 +523,9 @@ int acpi_processor_notify_smm(struct module *calling_module)
 	int result;
 
 	if (!(acpi_processor_ppc_status & PPC_REGISTERED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	if (!try_module_get(calling_module))
 		return -EINVAL;
@@ -545,22 +580,29 @@ static int acpi_processor_get_psd(struct acpi_processor	*pr)
 
 	status = acpi_evaluate_object(pr->handle, "_PSD", NULL, &buffer);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	psd = buffer.pointer;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!psd || (psd->type != ACPI_TYPE_PACKAGE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Invalid _PSD data\n");
 		result = -EFAULT;
 		goto end;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (psd->package.count != 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Invalid _PSD data\n");
 		result = -EFAULT;
 		goto end;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pdomain = &(pr->performance->domain_info);
 
 	state.length = sizeof(struct acpi_psd_package);
@@ -569,26 +611,33 @@ static int acpi_processor_get_psd(struct acpi_processor	*pr)
 	status = acpi_extract_package(&(psd->package.elements[0]),
 		&format, &state);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Invalid _PSD data\n");
 		result = -EFAULT;
 		goto end;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pdomain->num_entries != ACPI_PSD_REV0_ENTRIES) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Unknown _PSD:num_entries\n");
 		result = -EFAULT;
 		goto end;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pdomain->revision != ACPI_PSD_REV0_REVISION) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Unknown _PSD:revision\n");
 		result = -EFAULT;
 		goto end;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pdomain->coord_type != DOMAIN_COORD_TYPE_SW_ALL &&
 	    pdomain->coord_type != DOMAIN_COORD_TYPE_SW_ANY &&
 	    pdomain->coord_type != DOMAIN_COORD_TYPE_HW_ALL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Invalid _PSD:coord_type\n");
 		result = -EFAULT;
 		goto end;
@@ -611,7 +660,9 @@ int acpi_processor_preregister_performance(
 	struct acpi_psd_package *match_pdomain;
 
 	if (!zalloc_cpumask_var(&covered_cpus, GFP_KERNEL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	mutex_lock(&performance_mutex);
 
@@ -627,11 +678,13 @@ int acpi_processor_preregister_performance(
 		}
 
 		if (pr->performance) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -EBUSY;
 			goto err_out;
 		}
 
 		if (!performance || !per_cpu_ptr(performance, i)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -EINVAL;
 			goto err_out;
 		}
@@ -646,6 +699,7 @@ int acpi_processor_preregister_performance(
 		pr->performance = per_cpu_ptr(performance, i);
 		cpumask_set_cpu(i, pr->performance->shared_cpu_map);
 		if (acpi_processor_get_psd(pr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -EINVAL;
 			continue;
 		}
@@ -658,13 +712,16 @@ int acpi_processor_preregister_performance(
 	 * domain info.
 	 */
 	for_each_possible_cpu(i) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr = per_cpu(processors, i);
 		if (!pr)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cpumask_test_cpu(i, covered_cpus))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pdomain = &(pr->performance->domain_info);
 		cpumask_set_cpu(i, pr->performance->shared_cpu_map);
 		cpumask_set_cpu(i, covered_cpus);
@@ -674,52 +731,74 @@ int acpi_processor_preregister_performance(
 		/* Validate the Domain info */
 		count_target = pdomain->num_processors;
 		if (pdomain->coord_type == DOMAIN_COORD_TYPE_SW_ALL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr->performance->shared_type = CPUFREQ_SHARED_TYPE_ALL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (pdomain->coord_type == DOMAIN_COORD_TYPE_HW_ALL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr->performance->shared_type = CPUFREQ_SHARED_TYPE_HW;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (pdomain->coord_type == DOMAIN_COORD_TYPE_SW_ANY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr->performance->shared_type = CPUFREQ_SHARED_TYPE_ANY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_possible_cpu(j) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (i == j)
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			match_pr = per_cpu(processors, j);
 			if (!match_pr)
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			match_pdomain = &(match_pr->performance->domain_info);
 			if (match_pdomain->domain != pdomain->domain)
 				continue;
 
 			/* Here i and j are in the same domain */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (match_pdomain->num_processors != count_target) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = -EINVAL;
 				goto err_ret;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (pdomain->coord_type != match_pdomain->coord_type) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = -EINVAL;
 				goto err_ret;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cpumask_set_cpu(j, covered_cpus);
 			cpumask_set_cpu(j, pr->performance->shared_cpu_map);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_possible_cpu(j) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (i == j)
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			match_pr = per_cpu(processors, j);
 			if (!match_pr)
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			match_pdomain = &(match_pr->performance->domain_info);
 			if (match_pdomain->domain != pdomain->domain)
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			match_pr->performance->shared_type = 
 					pr->performance->shared_type;
 			cpumask_copy(match_pr->performance->shared_cpu_map,
@@ -756,17 +835,21 @@ acpi_processor_register_performance(struct acpi_processor_performance
 	struct acpi_processor *pr;
 
 	if (!(acpi_processor_ppc_status & PPC_REGISTERED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&performance_mutex);
 
 	pr = per_cpu(processors, cpu);
 	if (!pr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&performance_mutex);
 		return -ENODEV;
 	}
 
 	if (pr->performance) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&performance_mutex);
 		return -EBUSY;
 	}
@@ -781,6 +864,7 @@ acpi_processor_register_performance(struct acpi_processor_performance
 		return -EIO;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&performance_mutex);
 	return 0;
 }
@@ -793,6 +877,7 @@ void acpi_processor_unregister_performance(unsigned int cpu)
 
 	mutex_lock(&performance_mutex);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr = per_cpu(processors, cpu);
 	if (!pr) {
 		mutex_unlock(&performance_mutex);
diff --git a/drivers/acpi/processor_thermal.c b/drivers/acpi/processor_thermal.c
index 59c3a5d..66211fd 100644
--- a/drivers/acpi/processor_thermal.c
+++ b/drivers/acpi/processor_thermal.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * processor_thermal.c - Passive cooling submodule of the ACPI processor driver
  *
@@ -63,6 +65,7 @@ static unsigned int acpi_thermal_cpufreq_is_init = 0;
 static int phys_package_first_cpu(int cpu)
 {
 	int i;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int id = topology_physical_package_id(cpu);
 
 	for_each_online_cpu(i)
@@ -74,6 +77,7 @@ static int phys_package_first_cpu(int cpu)
 static int cpu_has_cpufreq(unsigned int cpu)
 {
 	struct cpufreq_policy policy;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!acpi_thermal_cpufreq_is_init || cpufreq_get_policy(&policy, cpu))
 		return 0;
 	return 1;
@@ -105,6 +109,7 @@ static struct notifier_block acpi_thermal_cpufreq_notifier_block = {
 
 static int cpufreq_get_max_state(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!cpu_has_cpufreq(cpu))
 		return 0;
 
@@ -113,6 +118,7 @@ static int cpufreq_get_max_state(unsigned int cpu)
 
 static int cpufreq_get_cur_state(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!cpu_has_cpufreq(cpu))
 		return 0;
 
@@ -124,7 +130,9 @@ static int cpufreq_set_cur_state(unsigned int cpu, int state)
 	int i;
 
 	if (!cpu_has_cpufreq(cpu))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	reduction_pctg(cpu) = state;
 
@@ -153,6 +161,7 @@ void acpi_thermal_cpufreq_init(void)
 
 void acpi_thermal_cpufreq_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_thermal_cpufreq_is_init)
 		cpufreq_unregister_notifier
 		    (&acpi_thermal_cpufreq_notifier_block,
@@ -190,7 +199,9 @@ static int acpi_processor_max_state(struct acpi_processor *pr)
 	 */
 	max_state += cpufreq_get_max_state(pr->id);
 	if (pr->flags.throttling)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		max_state += (pr->throttling.state_count -1);
+}
 
 	return max_state;
 }
@@ -202,7 +213,9 @@ processor_get_max_state(struct thermal_cooling_device *cdev,
 	struct acpi_processor *pr;
 
 	if (!device)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	pr = acpi_driver_data(device);
 	if (!pr)
@@ -220,7 +233,9 @@ processor_get_cur_state(struct thermal_cooling_device *cdev,
 	struct acpi_processor *pr;
 
 	if (!device)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	pr = acpi_driver_data(device);
 	if (!pr)
@@ -242,7 +257,9 @@ processor_set_cur_state(struct thermal_cooling_device *cdev,
 	int max_pstate;
 
 	if (!device)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	pr = acpi_driver_data(device);
 	if (!pr)
diff --git a/drivers/acpi/processor_throttling.c b/drivers/acpi/processor_throttling.c
index 7f9aff4..642247d 100644
--- a/drivers/acpi/processor_throttling.c
+++ b/drivers/acpi/processor_throttling.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * processor_throttling.c - Throttling submodule of the ACPI processor driver
  *
@@ -76,7 +78,9 @@ static int acpi_processor_update_tsd_coord(void)
 	struct acpi_processor_throttling *pthrottling, *match_pthrottling;
 
 	if (!zalloc_cpumask_var(&covered_cpus, GFP_KERNEL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/*
 	 * Now that we have _TSD data from all CPUs, lets setup T-state
@@ -96,6 +100,7 @@ static int acpi_processor_update_tsd_coord(void)
 		 * Maybe it is ugly.
 		 */
 		if (!pthrottling->tsd_valid_flag) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -EINVAL;
 			break;
 		}
@@ -103,13 +108,17 @@ static int acpi_processor_update_tsd_coord(void)
 	if (retval)
 		goto err_ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(i) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr = per_cpu(processors, i);
 		if (!pr)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cpumask_test_cpu(i, covered_cpus))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pthrottling = &pr->throttling;
 
 		pdomain = &(pthrottling->domain_info);
@@ -126,14 +135,18 @@ static int acpi_processor_update_tsd_coord(void)
 		count_target = pdomain->num_processors;
 		count = 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_possible_cpu(j) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (i == j)
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			match_pr = per_cpu(processors, j);
 			if (!match_pr)
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			match_pthrottling = &(match_pr->throttling);
 			match_pdomain = &(match_pthrottling->domain_info);
 			if (match_pdomain->domain != pdomain->domain)
@@ -146,27 +159,35 @@ static int acpi_processor_update_tsd_coord(void)
 			 * as illegal.
 			 */
 			if (match_pdomain->num_processors != count_target) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = -EINVAL;
 				goto err_ret;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (pdomain->coord_type != match_pdomain->coord_type) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = -EINVAL;
 				goto err_ret;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cpumask_set_cpu(j, covered_cpus);
 			cpumask_set_cpu(j, pthrottling->shared_cpu_map);
 			count++;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_possible_cpu(j) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (i == j)
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			match_pr = per_cpu(processors, j);
 			if (!match_pr)
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			match_pthrottling = &(match_pr->throttling);
 			match_pdomain = &(match_pthrottling->domain_info);
 			if (match_pdomain->domain != pdomain->domain)
@@ -194,6 +215,7 @@ static int acpi_processor_update_tsd_coord(void)
 		 * The coordination type will be forced as SW_ALL.
 		 */
 		if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pthrottling = &(pr->throttling);
 			cpumask_clear(pthrottling->shared_cpu_map);
 			cpumask_set_cpu(i, pthrottling->shared_cpu_map);
@@ -201,6 +223,7 @@ static int acpi_processor_update_tsd_coord(void)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 
@@ -228,6 +251,7 @@ static int acpi_processor_throttling_notifier(unsigned long event, void *data)
 	struct acpi_processor_throttling *p_throttling;
 
 	cpu = p_tstate->cpu;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr = per_cpu(processors, cpu);
 	if (!pr) {
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO, "Invalid pr pointer\n"));
@@ -291,7 +315,9 @@ static int acpi_processor_get_platform_limit(struct acpi_processor *pr)
 	unsigned long long tpc = 0;
 
 	if (!pr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (ignore_tpc)
 		goto end;
@@ -318,7 +344,9 @@ int acpi_processor_tstate_has_changed(struct acpi_processor *pr)
 	int target_state;
 
 	if (ignore_tpc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	result = acpi_processor_get_platform_limit(pr);
 	if (result) {
@@ -432,14 +460,19 @@ static int acpi_processor_get_throttling_control(struct acpi_processor *pr)
 	status = acpi_evaluate_object(pr->handle, "_PTC", NULL, &buffer);
 	if (ACPI_FAILURE(status)) {
 		if (status != AE_NOT_FOUND) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ACPI_EXCEPTION((AE_INFO, status, "Evaluating _PTC"));
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ptc = (union acpi_object *)buffer.pointer;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ptc || (ptc->type != ACPI_TYPE_PACKAGE)
 	    || (ptc->package.count != 2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Invalid _PTC data\n");
 		result = -EFAULT;
 		goto end;
@@ -449,16 +482,19 @@ static int acpi_processor_get_throttling_control(struct acpi_processor *pr)
 	 * control_register
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	obj = ptc->package.elements[0];
 
 	if ((obj.type != ACPI_TYPE_BUFFER)
 	    || (obj.buffer.length < sizeof(struct acpi_ptc_register))
 	    || (obj.buffer.pointer == NULL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX
 		       "Invalid _PTC data (control_register)\n");
 		result = -EFAULT;
 		goto end;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&pr->throttling.control_register, obj.buffer.pointer,
 	       sizeof(struct acpi_ptc_register));
 
@@ -471,11 +507,13 @@ static int acpi_processor_get_throttling_control(struct acpi_processor *pr)
 	if ((obj.type != ACPI_TYPE_BUFFER)
 	    || (obj.buffer.length < sizeof(struct acpi_ptc_register))
 	    || (obj.buffer.pointer == NULL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Invalid _PTC data (status_register)\n");
 		result = -EFAULT;
 		goto end;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&pr->throttling.status_register, obj.buffer.pointer,
 	       sizeof(struct acpi_ptc_register));
 
@@ -483,13 +521,16 @@ static int acpi_processor_get_throttling_control(struct acpi_processor *pr)
 
 	if ((throttling->control_register.bit_width +
 		throttling->control_register.bit_offset) > 32) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Invalid _PTC control register\n");
 		result = -EFAULT;
 		goto end;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((throttling->status_register.bit_width +
 		throttling->status_register.bit_offset) > 32) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Invalid _PTC status register\n");
 		result = -EFAULT;
 		goto end;
@@ -516,6 +557,7 @@ static int acpi_processor_get_throttling_states(struct acpi_processor *pr)
 
 	status = acpi_evaluate_object(pr->handle, "_TSS", NULL, &buffer);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status != AE_NOT_FOUND) {
 			ACPI_EXCEPTION((AE_INFO, status, "Evaluating _TSS"));
 		}
@@ -595,6 +637,7 @@ static int acpi_processor_get_tsd(struct acpi_processor *pr)
 
 	status = acpi_evaluate_object(pr->handle, "_TSD", NULL, &buffer);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status != AE_NOT_FOUND) {
 			ACPI_EXCEPTION((AE_INFO, status, "Evaluating _TSD"));
 		}
@@ -671,7 +714,9 @@ static int acpi_processor_get_throttling_fadt(struct acpi_processor *pr)
 	u32 duty_value = 0;
 
 	if (!pr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!pr->flags.throttling)
 		return -ENODEV;
@@ -725,6 +770,7 @@ static int acpi_throttling_rdmsr(u64 *value)
 	u64 msr = 0;
 	int ret = -1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((this_cpu_read(cpu_info.x86_vendor) != X86_VENDOR_INTEL) ||
 		!this_cpu_has(X86_FEATURE_ACPI)) {
 		printk(KERN_ERR PREFIX
@@ -746,6 +792,7 @@ static int acpi_throttling_wrmsr(u64 value)
 	int ret = -1;
 	u64 msr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((this_cpu_read(cpu_info.x86_vendor) != X86_VENDOR_INTEL) ||
 		!this_cpu_has(X86_FEATURE_ACPI)) {
 		printk(KERN_ERR PREFIX
@@ -844,6 +891,7 @@ static int acpi_get_throttling_state(struct acpi_processor *pr,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < pr->throttling.state_count; i++) {
 		struct acpi_processor_tx_tss *tx =
 		    (struct acpi_processor_tx_tss *)&(pr->throttling.
@@ -859,6 +907,7 @@ static int acpi_get_throttling_value(struct acpi_processor *pr,
 {
 	int ret = -1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (state >= 0 && state <= pr->throttling.state_count) {
 		struct acpi_processor_tx_tss *tx =
 		    (struct acpi_processor_tx_tss *)&(pr->throttling.
@@ -876,7 +925,9 @@ static int acpi_processor_get_throttling_ptc(struct acpi_processor *pr)
 	u64 value;
 
 	if (!pr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!pr->flags.throttling)
 		return -ENODEV;
@@ -911,6 +962,7 @@ static long __acpi_processor_get_throttling(void *data)
 
 static int call_on_cpu(int cpu, long (*fn)(void *), void *arg, bool direct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (direct || (is_percpu_thread() && cpu == smp_processor_id()))
 		return fn(arg);
 	return work_on_cpu(cpu, fn, arg);
@@ -918,6 +970,7 @@ static int call_on_cpu(int cpu, long (*fn)(void *), void *arg, bool direct)
 
 static int acpi_processor_get_throttling(struct acpi_processor *pr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pr)
 		return -EINVAL;
 
@@ -942,17 +995,21 @@ static int acpi_processor_get_fadt_info(struct acpi_processor *pr)
 
 	if (!pr->throttling.address) {
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO, "No throttling register\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
 	} else if (!pr->throttling.duty_width) {
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO, "No throttling states\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
 	}
 	/* TBD: Support duty_cycle values that span bit 4. */
 	else if ((pr->throttling.duty_offset + pr->throttling.duty_width) > 4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_WARNING PREFIX "duty_cycle spans bit 4\n");
 		return -EINVAL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr->throttling.state_count = 1 << acpi_gbl_FADT.duty_width;
 
 	/*
@@ -963,10 +1020,13 @@ static int acpi_processor_get_fadt_info(struct acpi_processor *pr)
 
 	step = (1000 / pr->throttling.state_count);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < pr->throttling.state_count; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr->throttling.states[i].performance = 1000 - step * i;
 		pr->throttling.states[i].power = 1000 - step * i;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -978,7 +1038,9 @@ static int acpi_processor_set_throttling_fadt(struct acpi_processor *pr,
 	u32 duty_value = 0;
 
 	if (!pr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if ((state < 0) || (state > (pr->throttling.state_count - 1)))
 		return -EINVAL;
@@ -1050,7 +1112,9 @@ static int acpi_processor_set_throttling_ptc(struct acpi_processor *pr,
 	u64 value;
 
 	if (!pr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if ((state < 0) || (state > (pr->throttling.state_count - 1)))
 		return -EINVAL;
@@ -1094,7 +1158,9 @@ static int __acpi_processor_set_throttling(struct acpi_processor *pr,
 	struct throttling_tstate t_state;
 
 	if (!pr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!pr->flags.throttling)
 		return -ENODEV;
@@ -1189,6 +1255,7 @@ static int __acpi_processor_set_throttling(struct acpi_processor *pr,
 int acpi_processor_set_throttling(struct acpi_processor *pr, int state,
 				  bool force)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __acpi_processor_set_throttling(pr, state, force, false);
 }
 
@@ -1216,8 +1283,11 @@ int acpi_processor_get_throttling_info(struct acpi_processor *pr)
 		pr->throttling.acpi_processor_set_throttling =
 		    &acpi_processor_set_throttling_fadt;
 		if (acpi_processor_get_fadt_info(pr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr->throttling.acpi_processor_get_throttling =
 		    &acpi_processor_get_throttling_ptc;
 		pr->throttling.acpi_processor_set_throttling =
@@ -1229,6 +1299,7 @@ int acpi_processor_get_throttling_info(struct acpi_processor *pr)
 	 * that this CPU will have no coordination with other CPUs.
 	 */
 	if (acpi_processor_get_tsd(pr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pthrottling = &pr->throttling;
 		pthrottling->tsd_valid_flag = 0;
 		cpumask_set_cpu(pr->id, pthrottling->shared_cpu_map);
@@ -1243,12 +1314,14 @@ int acpi_processor_get_throttling_info(struct acpi_processor *pr)
 	if (errata.piix4.throttle) {
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 				  "Throttling not supported on PIIX4 A- or B-step\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 
 	ACPI_DEBUG_PRINT((ACPI_DB_INFO, "Found %d throttling states\n",
 			  pr->throttling.state_count));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr->flags.throttling = 1;
 
 	/*
@@ -1261,10 +1334,12 @@ int acpi_processor_get_throttling_info(struct acpi_processor *pr)
 	if (result)
 		goto end;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pr->throttling.state) {
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 				  "Disabling throttling (was T%d)\n",
 				  pr->throttling.state));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = acpi_processor_set_throttling(pr, 0, false);
 		if (result)
 			goto end;
@@ -1272,8 +1347,11 @@ int acpi_processor_get_throttling_info(struct acpi_processor *pr)
 
       end:
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr->flags.throttling = 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return result;
 }
 
diff --git a/drivers/acpi/property.c b/drivers/acpi/property.c
index e26ea20..611cc95 100644
--- a/drivers/acpi/property.c
+++ b/drivers/acpi/property.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ACPI device specific properties support.
  *
@@ -51,7 +53,9 @@ static bool acpi_nondev_subnode_extract(const union acpi_object *desc,
 
 	dn = kzalloc(sizeof(*dn), GFP_KERNEL);
 	if (!dn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	dn->name = link->package.elements[0].string.pointer;
 	dn->fwnode.ops = &acpi_data_fwnode_ops;
@@ -103,7 +107,9 @@ static bool acpi_nondev_subnode_data_ok(acpi_handle handle,
 	status = acpi_evaluate_object_typed(handle, NULL, NULL, &buf,
 					    ACPI_TYPE_PACKAGE);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	if (acpi_nondev_subnode_extract(buf.pointer, handle, link, list,
 					parent))
@@ -122,7 +128,9 @@ static bool acpi_nondev_subnode_ok(acpi_handle scope,
 	acpi_status status;
 
 	if (!scope)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	status = acpi_get_handle(scope, link->package.elements[1].string.pointer,
 				 &handle);
@@ -140,6 +148,7 @@ static int acpi_add_nondev_subnodes(acpi_handle scope,
 	bool ret = false;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < links->package.count; i++) {
 		const union acpi_object *link, *desc;
 		acpi_handle handle;
@@ -248,6 +257,7 @@ static bool acpi_properties_format_valid(const union acpi_object *properties)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < properties->package.count; i++) {
 		const union acpi_object *property;
 
@@ -272,6 +282,7 @@ static void acpi_init_of_compatible(struct acpi_device *adev)
 	ret = acpi_data_get_property_array(&adev->data, "compatible",
 					   ACPI_TYPE_STRING, &of_compatible);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = acpi_dev_get_property(adev, "compatible",
 					    ACPI_TYPE_STRING, &of_compatible);
 		if (ret) {
@@ -294,7 +305,9 @@ static bool acpi_extract_properties(const union acpi_object *desc,
 	int i;
 
 	if (desc->package.count % 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/* Look for the device properties GUID. */
 	for (i = 0; i < desc->package.count; i += 2) {
@@ -347,6 +360,7 @@ void acpi_init_properties(struct acpi_device *adev)
 	 */
 	list_for_each_entry(hwid, &adev->pnp.ids, list) {
 		if (!strcmp(hwid->id, ACPI_DT_NAMESPACE_HID)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_of = true;
 			break;
 		}
@@ -357,24 +371,32 @@ void acpi_init_properties(struct acpi_device *adev)
 	if (ACPI_FAILURE(status))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_extract_properties(buf.pointer, &adev->data)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		adev->data.pointer = buf.pointer;
 		if (acpi_of)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_init_of_compatible(adev);
+}
 	}
 	if (acpi_enumerate_nondev_subnodes(adev->handle, buf.pointer,
 					&adev->data, acpi_fwnode_handle(adev)))
 		adev->data.pointer = buf.pointer;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!adev->data.pointer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_handle_debug(adev->handle, "Invalid _DSD data, skipping\n");
 		ACPI_FREE(buf.pointer);
 	}
 
  out:
 	if (acpi_of && !adev->flags.of_compatible_ok)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_handle_info(adev->handle,
 			 ACPI_DT_NAMESPACE_HID " requires 'compatible' property\n");
+}
 
 	if (!adev->data.pointer)
 		acpi_extract_apple_properties(adev);
@@ -385,7 +407,9 @@ static void acpi_destroy_nondev_subnodes(struct list_head *list)
 	struct acpi_data_node *dn, *next;
 
 	if (list_empty(list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	list_for_each_entry_safe_reverse(dn, next, list, sibling) {
 		acpi_destroy_nondev_subnodes(&dn->data.subnodes);
@@ -398,6 +422,7 @@ static void acpi_destroy_nondev_subnodes(struct list_head *list)
 
 void acpi_free_properties(struct acpi_device *adev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_destroy_nondev_subnodes(&adev->data.subnodes);
 	ACPI_FREE((void *)adev->data.pointer);
 	adev->data.of_compatible = NULL;
@@ -430,6 +455,7 @@ static int acpi_data_get_property(const struct acpi_device_data *data,
 	const union acpi_object *properties;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!data || !name)
 		return -EINVAL;
 
@@ -468,6 +494,7 @@ static int acpi_data_get_property(const struct acpi_device_data *data,
 int acpi_dev_get_property(const struct acpi_device *adev, const char *name,
 			  acpi_object_type type, const union acpi_object **obj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return adev ? acpi_data_get_property(&adev->data, name, type, obj) : -EINVAL;
 }
 EXPORT_SYMBOL_GPL(acpi_dev_get_property);
@@ -475,6 +502,7 @@ EXPORT_SYMBOL_GPL(acpi_dev_get_property);
 static const struct acpi_device_data *
 acpi_device_data_of_node(const struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (is_acpi_device_node(fwnode)) {
 		const struct acpi_device *adev = to_acpi_device_node(fwnode);
 		return &adev->data;
@@ -494,6 +522,7 @@ acpi_device_data_of_node(const struct fwnode_handle *fwnode)
 int acpi_node_prop_get(const struct fwnode_handle *fwnode,
 		       const char *propname, void **valptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acpi_data_get_property(acpi_device_data_of_node(fwnode),
 				      propname, ACPI_TYPE_ANY,
 				      (const union acpi_object **)valptr);
@@ -528,7 +557,9 @@ static int acpi_data_get_property_array(const struct acpi_device_data *data,
 
 	ret = acpi_data_get_property(data, name, ACPI_TYPE_PACKAGE, &prop);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (type != ACPI_TYPE_ANY) {
 		/* Check that all elements are of correct type. */
@@ -589,7 +620,9 @@ int __acpi_node_get_property_reference(const struct fwnode_handle *fwnode,
 
 	data = acpi_device_data_of_node(fwnode);
 	if (!data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	ret = acpi_data_get_property(data, propname, ACPI_TYPE_ANY, &obj);
 	if (ret)
@@ -689,7 +722,9 @@ static int acpi_data_prop_read_single(const struct acpi_device_data *data,
 	int ret;
 
 	if (!val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (proptype >= DEV_PROP_U8 && proptype <= DEV_PROP_U64) {
 		ret = acpi_data_get_property(data, propname, ACPI_TYPE_INTEGER, &obj);
@@ -736,7 +771,9 @@ int acpi_dev_prop_read_single(struct acpi_device *adev, const char *propname,
 	int ret;
 
 	if (!adev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ret = acpi_data_prop_read_single(&adev->data, propname, proptype, val);
 	if (ret < 0 || proptype != ACPI_TYPE_STRING)
@@ -749,6 +786,7 @@ static int acpi_copy_property_array_u8(const union acpi_object *items, u8 *val,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nval; i++) {
 		if (items[i].type != ACPI_TYPE_INTEGER)
 			return -EPROTO;
@@ -765,6 +803,7 @@ static int acpi_copy_property_array_u16(const union acpi_object *items,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nval; i++) {
 		if (items[i].type != ACPI_TYPE_INTEGER)
 			return -EPROTO;
@@ -781,6 +820,7 @@ static int acpi_copy_property_array_u32(const union acpi_object *items,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nval; i++) {
 		if (items[i].type != ACPI_TYPE_INTEGER)
 			return -EPROTO;
@@ -797,6 +837,7 @@ static int acpi_copy_property_array_u64(const union acpi_object *items,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nval; i++) {
 		if (items[i].type != ACPI_TYPE_INTEGER)
 			return -EPROTO;
@@ -811,6 +852,7 @@ static int acpi_copy_property_array_string(const union acpi_object *items,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nval; i++) {
 		if (items[i].type != ACPI_TYPE_STRING)
 			return -EPROTO;
@@ -829,6 +871,7 @@ static int acpi_data_prop_read(const struct acpi_device_data *data,
 	const union acpi_object *items;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (val && nval == 1) {
 		ret = acpi_data_prop_read_single(data, propname, proptype, val);
 		if (ret >= 0)
@@ -877,6 +920,7 @@ static int acpi_data_prop_read(const struct acpi_device_data *data,
 int acpi_dev_prop_read(const struct acpi_device *adev, const char *propname,
 		       enum dev_prop_type proptype, void *val, size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return adev ? acpi_data_prop_read(&adev->data, propname, proptype, val, nval) : -EINVAL;
 }
 
@@ -896,6 +940,7 @@ int acpi_node_prop_read(const struct fwnode_handle *fwnode,
 			const char *propname, enum dev_prop_type proptype,
 			void *val, size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acpi_data_prop_read(acpi_device_data_of_node(fwnode),
 				   propname, proptype, val, nval);
 }
@@ -908,6 +953,7 @@ int acpi_node_prop_read(const struct fwnode_handle *fwnode,
 struct fwnode_handle *acpi_get_next_subnode(const struct fwnode_handle *fwnode,
 					    struct fwnode_handle *child)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct acpi_device *adev = to_acpi_device_node(fwnode);
 	const struct list_head *head;
 	struct list_head *next;
@@ -977,6 +1023,7 @@ struct fwnode_handle *acpi_get_next_subnode(const struct fwnode_handle *fwnode,
  */
 struct fwnode_handle *acpi_node_get_parent(const struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (is_acpi_data_node(fwnode)) {
 		/* All data nodes have parent pointer so just return that */
 		return to_acpi_data_node(fwnode)->parent;
@@ -1012,6 +1059,7 @@ struct fwnode_handle *acpi_graph_get_next_endpoint(
 
 	if (!prev) {
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			port = fwnode_get_next_child_node(fwnode, port);
 			/* Ports must have port property */
 			if (fwnode_property_present(port, "port"))
@@ -1057,6 +1105,7 @@ static struct fwnode_handle *acpi_graph_get_child_prop_value(
 {
 	struct fwnode_handle *child;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fwnode_for_each_child_node(fwnode, child) {
 		u32 nr;
 
@@ -1096,7 +1145,9 @@ int acpi_graph_get_remote_endpoint(const struct fwnode_handle *__fwnode,
 	ret = acpi_node_get_property_reference(__fwnode, "remote-endpoint", 0,
 					       &args);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	/*
 	 * Always require two arguments with the reference: port and
@@ -1137,6 +1188,7 @@ int acpi_graph_get_remote_endpoint(const struct fwnode_handle *__fwnode,
 
 static bool acpi_fwnode_device_is_available(const struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!is_acpi_device_node(fwnode))
 		return false;
 
@@ -1146,6 +1198,7 @@ static bool acpi_fwnode_device_is_available(const struct fwnode_handle *fwnode)
 static bool acpi_fwnode_property_present(const struct fwnode_handle *fwnode,
 					 const char *propname)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !acpi_node_prop_get(fwnode, propname, NULL);
 }
 
@@ -1182,6 +1235,7 @@ acpi_fwnode_property_read_string_array(const struct fwnode_handle *fwnode,
 				       const char *propname, const char **val,
 				       size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acpi_node_prop_read(fwnode, propname, DEV_PROP_STRING,
 				   val, nval);
 }
@@ -1216,7 +1270,9 @@ acpi_fwnode_get_reference_args(const struct fwnode_handle *fwnode,
 	ret = __acpi_node_get_property_reference(fwnode, prop, index,
 						 args_count, &acpi_args);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	if (!args)
 		return 0;
 
@@ -1237,7 +1293,9 @@ acpi_fwnode_graph_get_next_endpoint(const struct fwnode_handle *fwnode,
 
 	endpoint = acpi_graph_get_next_endpoint(fwnode, prev);
 	if (IS_ERR(endpoint))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	return endpoint;
 }
@@ -1255,12 +1313,14 @@ acpi_fwnode_graph_get_remote_endpoint(const struct fwnode_handle *fwnode)
 static struct fwnode_handle *
 acpi_fwnode_get_parent(struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acpi_node_get_parent(fwnode);
 }
 
 static int acpi_fwnode_graph_parse_endpoint(const struct fwnode_handle *fwnode,
 					    struct fwnode_endpoint *endpoint)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fwnode_handle *port_fwnode = fwnode_get_parent(fwnode);
 
 	endpoint->local_fwnode = fwnode;
@@ -1305,6 +1365,7 @@ EXPORT_SYMBOL(is_acpi_device_node);
 
 bool is_acpi_data_node(const struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !IS_ERR_OR_NULL(fwnode) && fwnode->ops == &acpi_data_fwnode_ops;
 }
 EXPORT_SYMBOL(is_acpi_data_node);
diff --git a/drivers/acpi/resource.c b/drivers/acpi/resource.c
index d85e010..a7bdbec 100644
--- a/drivers/acpi/resource.c
+++ b/drivers/acpi/resource.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/acpi/resource.c - ACPI device resources interpretation.
  *
@@ -524,6 +526,7 @@ static acpi_status acpi_dev_new_resource_entry(struct resource_win *win,
 
 	rentry = resource_list_create_entry(NULL, 0);
 	if (!rentry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		c->error = -ENOMEM;
 		return AE_NO_MEMORY;
 	}
@@ -547,13 +550,16 @@ static acpi_status acpi_dev_process_resource(struct acpi_resource *ares,
 
 		ret = c->preproc(ares, c->preproc_data);
 		if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			c->error = ret;
 			return AE_CTRL_TERMINATE;
 		} else if (ret > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return AE_OK;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(&win, 0, sizeof(win));
 
 	if (acpi_dev_resource_memory(ares, res)
@@ -562,14 +568,18 @@ static acpi_status acpi_dev_process_resource(struct acpi_resource *ares,
 	    || acpi_dev_resource_ext_address_space(ares, &win))
 		return acpi_dev_new_resource_entry(&win, c);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; acpi_dev_resource_interrupt(ares, i, res); i++) {
 		acpi_status status;
 
 		status = acpi_dev_new_resource_entry(&win, c);
 		if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return status;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return AE_OK;
 }
 
@@ -582,10 +592,14 @@ static int __acpi_dev_get_resources(struct acpi_device *adev,
 	acpi_status status;
 
 	if (!adev || !adev->handle || !list_empty(list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!acpi_has_method(adev->handle, method))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	c.list = list;
 	c.preproc = preproc;
@@ -595,7 +609,9 @@ static int __acpi_dev_get_resources(struct acpi_device *adev,
 	status = acpi_walk_resources(adev->handle, method,
 				     acpi_dev_process_resource, &c);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_dev_free_resource_list(list);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return c.error ? c.error : -EIO;
 	}
 
@@ -642,6 +658,7 @@ static int is_memory(struct acpi_resource *ares, void *not_used)
 
 	memset(&win, 0, sizeof(win));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !(acpi_dev_resource_memory(ares, res)
 	       || acpi_dev_resource_address_space(ares, &win)
 	       || acpi_dev_resource_ext_address_space(ares, &win));
@@ -665,6 +682,7 @@ static int is_memory(struct acpi_resource *ares, void *not_used)
  */
 int acpi_dev_get_dma_resources(struct acpi_device *adev, struct list_head *list)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __acpi_dev_get_resources(adev, list, is_memory, NULL,
 					METHOD_NAME__DMA);
 }
@@ -710,9 +728,13 @@ int acpi_dev_filter_resource_type(struct acpi_resource *ares,
 	case ACPI_RESOURCE_TYPE_ADDRESS64:
 	case ACPI_RESOURCE_TYPE_EXTENDED_ADDRESS64:
 		if (ares->data.address.resource_type == ACPI_MEMORY_RANGE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			type = IORESOURCE_MEM;
+}
 		else if (ares->data.address.resource_type == ACPI_IO_RANGE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			type = IORESOURCE_IO;
+}
 		else if (ares->data.address.resource_type ==
 			 ACPI_BUS_NUMBER_RANGE)
 			type = IORESOURCE_BUS;
@@ -734,7 +756,9 @@ static int acpi_dev_consumes_res(struct acpi_device *adev, struct resource *res)
 	INIT_LIST_HEAD(&resource_list);
 	ret = acpi_dev_get_resources(adev, &resource_list, NULL, NULL);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	list_for_each_entry(rentry, &resource_list, node) {
 		if (resource_contains(rentry->res, res)) {
@@ -756,7 +780,9 @@ static acpi_status acpi_res_consumer_cb(acpi_handle handle, u32 depth,
 	struct acpi_device *adev;
 
 	if (acpi_bus_get_device(handle, &adev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
+}
 
 	if (acpi_dev_consumes_res(adev, res)) {
 		*consumer = adev;
diff --git a/drivers/acpi/sbs.c b/drivers/acpi/sbs.c
index a2428e9..30762e2 100644
--- a/drivers/acpi/sbs.c
+++ b/drivers/acpi/sbs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  sbs.c - ACPI Smart Battery System Driver ($Revision: 2.0 $)
  *
diff --git a/drivers/acpi/sbshc.c b/drivers/acpi/sbshc.c
index 7a34310..f32ded2 100644
--- a/drivers/acpi/sbshc.c
+++ b/drivers/acpi/sbshc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * SMBus driver for ACPI Embedded Controller (v0.1)
  *
diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index 2f2f503..4143415 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * scan.c - support for transforming the ACPI namespace into individual objects
  */
@@ -57,23 +59,27 @@ struct acpi_dep_data {
 
 void acpi_scan_lock_acquire(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&acpi_scan_lock);
 }
 EXPORT_SYMBOL_GPL(acpi_scan_lock_acquire);
 
 void acpi_scan_lock_release(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&acpi_scan_lock);
 }
 EXPORT_SYMBOL_GPL(acpi_scan_lock_release);
 
 void acpi_lock_hp_context(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&acpi_hp_context_lock);
 }
 
 void acpi_unlock_hp_context(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&acpi_hp_context_lock);
 }
 
@@ -82,6 +88,7 @@ void acpi_initialize_hp_context(struct acpi_device *adev,
 				int (*notify)(struct acpi_device *, u32),
 				void (*uevent)(struct acpi_device *, u32))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_lock_hp_context();
 	hp->notify = notify;
 	hp->uevent = uevent;
@@ -93,7 +100,9 @@ EXPORT_SYMBOL_GPL(acpi_initialize_hp_context);
 int acpi_scan_add_handler(struct acpi_scan_handler *handler)
 {
 	if (!handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	list_add_tail(&handler->list_node, &acpi_scan_handlers_list);
 	return 0;
@@ -106,7 +115,9 @@ int acpi_scan_add_handler_with_hotplug(struct acpi_scan_handler *handler,
 
 	error = acpi_scan_add_handler(handler);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	acpi_sysfs_add_hotplug_profile(&handler->hotplug, hotplug_profile_name);
 	return 0;
@@ -123,6 +134,7 @@ bool acpi_scan_is_offline(struct acpi_device *adev, bool uevent)
 	 */
 	mutex_lock_nested(&adev->physical_node_lock, SINGLE_DEPTH_NESTING);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(pn, &adev->physical_node_list, node)
 		if (device_supports_offline(pn->dev) && !pn->dev->offline) {
 			if (uevent)
@@ -145,7 +157,9 @@ static acpi_status acpi_bus_offline(acpi_handle handle, u32 lvl, void *data,
 	acpi_status status = AE_OK;
 
 	if (acpi_bus_get_device(handle, &device))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
+}
 
 	if (device->handler && !device->handler->hotplug.enabled) {
 		*ret_p = &device->dev;
@@ -188,7 +202,9 @@ static acpi_status acpi_bus_online(acpi_handle handle, u32 lvl, void *data,
 	struct acpi_device_physical_node *pn;
 
 	if (acpi_bus_get_device(handle, &device))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
+}
 
 	mutex_lock(&device->physical_node_lock);
 
@@ -222,6 +238,7 @@ static int acpi_scan_try_to_offline(struct acpi_device *device)
 				     NULL, acpi_bus_offline, (void *)false,
 				     (void **)&errdev);
 	if (status == AE_SUPPORT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(errdev, "Offline disabled.\n");
 		acpi_walk_namespace(ACPI_TYPE_ANY, handle, ACPI_UINT32_MAX,
 				    acpi_bus_online, NULL, NULL, NULL);
@@ -255,6 +272,7 @@ static int acpi_scan_hot_remove(struct acpi_device *device)
 	unsigned long long sta;
 	acpi_status status;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (device->handler && device->handler->hotplug.demand_offline) {
 		if (!acpi_scan_is_offline(device, true))
 			return -EBUSY;
@@ -297,6 +315,7 @@ static int acpi_scan_hot_remove(struct acpi_device *device)
 
 static int acpi_scan_device_not_present(struct acpi_device *adev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!acpi_device_enumerated(adev)) {
 		dev_warn(&adev->dev, "Still not present\n");
 		return -EALREADY;
@@ -310,6 +329,7 @@ static int acpi_scan_device_check(struct acpi_device *adev)
 	int error;
 
 	acpi_bus_get_status(adev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (adev->status.present || adev->status.functional) {
 		/*
 		 * This function is only called for device objects for which
@@ -345,6 +365,7 @@ static int acpi_scan_bus_check(struct acpi_device *adev)
 	int error;
 
 	acpi_bus_get_status(adev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(adev->status.present || adev->status.functional)) {
 		acpi_scan_device_not_present(adev);
 		return 0;
@@ -367,6 +388,7 @@ static int acpi_scan_bus_check(struct acpi_device *adev)
 
 static int acpi_generic_hotplug_event(struct acpi_device *adev, u32 type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (type) {
 	case ACPI_NOTIFY_BUS_CHECK:
 		return acpi_scan_bus_check(adev);
@@ -401,6 +423,7 @@ void acpi_device_hotplug(struct acpi_device *adev, u32 src)
 	if (adev->handle == INVALID_ACPI_HANDLE)
 		goto err_out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (adev->flags.is_dock_station) {
 		error = dock_notify(adev, src);
 	} else if (adev->flags.hotplug_notify) {
@@ -449,7 +472,9 @@ static void acpi_free_power_resources_lists(struct acpi_device *device)
 	int i;
 
 	if (device->wakeup.flags.valid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_power_resources_list_free(&device->wakeup.resources);
+}
 
 	if (!device->power.flags.power_resources)
 		return;
@@ -462,6 +487,7 @@ static void acpi_free_power_resources_lists(struct acpi_device *device)
 
 static void acpi_device_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = to_acpi_device(dev);
 
 	acpi_free_properties(acpi_dev);
@@ -476,7 +502,9 @@ static void acpi_device_del(struct acpi_device *device)
 
 	mutex_lock(&acpi_device_lock);
 	if (device->parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del(&device->node);
+}
 
 	list_for_each_entry(acpi_device_bus_id, &acpi_bus_id_list, node)
 		if (!strcmp(acpi_device_bus_id->bus_id,
@@ -514,6 +542,7 @@ static void acpi_device_del_work_fn(struct work_struct *work_not_used)
 		mutex_lock(&acpi_device_del_lock);
 
 		if (list_empty(&acpi_device_del_list)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mutex_unlock(&acpi_device_del_lock);
 			break;
 		}
@@ -567,7 +596,9 @@ static void acpi_scan_drop_device(acpi_handle handle, void *context)
 	 * objects.
 	 */
 	if (list_empty(&acpi_device_del_list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_queue_hotplug_work(&work);
+}
 
 	list_add_tail(&adev->del_list, &acpi_device_del_list);
 	/* Make acpi_ns_validate_handle() return NULL for this handle. */
@@ -582,13 +613,16 @@ static int acpi_get_device_data(acpi_handle handle, struct acpi_device **device,
 	acpi_status status;
 
 	if (!device)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	status = acpi_get_data_full(handle, acpi_scan_drop_device,
 				    (void **)device, callback);
 	if (ACPI_FAILURE(status) || !*device) {
 		ACPI_DEBUG_PRINT((ACPI_DB_INFO, "No context for object [%p]\n",
 				  handle));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
 	}
 	return 0;
@@ -602,6 +636,7 @@ EXPORT_SYMBOL(acpi_bus_get_device);
 
 static void get_acpi_device(void *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev)
 		get_device(&((struct acpi_device *)dev)->dev);
 }
@@ -616,6 +651,7 @@ struct acpi_device *acpi_bus_get_acpi_device(acpi_handle handle)
 
 void acpi_bus_put_acpi_device(struct acpi_device *adev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	put_device(&adev->dev);
 }
 
@@ -632,6 +668,7 @@ int acpi_device_add(struct acpi_device *device,
 		status = acpi_attach_data(device->handle, acpi_scan_drop_device,
 					  device);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_handle_err(device->handle,
 					"Unable to attach device data\n");
 			return -ENODEV;
@@ -652,6 +689,7 @@ int acpi_device_add(struct acpi_device *device,
 
 	new_bus_id = kzalloc(sizeof(struct acpi_device_bus_id), GFP_KERNEL);
 	if (!new_bus_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err(PREFIX "Memory allocation error\n");
 		result = -ENOMEM;
 		goto err_detach;
@@ -672,6 +710,7 @@ int acpi_device_add(struct acpi_device *device,
 		}
 	}
 	if (!found) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_device_bus_id = new_bus_id;
 		strcpy(acpi_device_bus_id->bus_id, acpi_device_hid(device));
 		acpi_device_bus_id->instance_no = 0;
@@ -683,7 +722,9 @@ int acpi_device_add(struct acpi_device *device,
 		list_add_tail(&device->node, &device->parent->children);
 
 	if (device->wakeup.flags.valid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_add_tail(&device->wakeup_list, &acpi_wakeup_device_list);
+}
 	mutex_unlock(&acpi_device_lock);
 
 	if (device->parent)
@@ -692,6 +733,7 @@ int acpi_device_add(struct acpi_device *device,
 	device->dev.release = release;
 	result = device_add(&device->dev);
 	if (result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&device->dev, "Error registering device\n");
 		goto err;
 	}
@@ -701,12 +743,16 @@ int acpi_device_add(struct acpi_device *device,
 		printk(KERN_ERR PREFIX "Error creating sysfs interface for device %s\n",
 		       dev_name(&device->dev));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  err:
 	mutex_lock(&acpi_device_lock);
 	if (device->parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del(&device->node);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_del(&device->wakeup_list);
 	mutex_unlock(&acpi_device_lock);
 
@@ -749,15 +795,20 @@ acpi_bus_get_ejd(acpi_handle handle, acpi_handle *ejd)
 
 	status = acpi_get_handle(handle, "_EJD", &tmp);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return status;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = acpi_evaluate_object(handle, "_EJD", NULL, &buffer);
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		obj = buffer.pointer;
 		status = acpi_get_handle(ACPI_ROOT_OBJECT, obj->string.pointer,
 					 ejd);
 		kfree(buffer.pointer);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return status;
 }
 EXPORT_SYMBOL_GPL(acpi_bus_get_ejd);
@@ -772,7 +823,9 @@ static int acpi_bus_extract_wakeup_device_power_package(acpi_handle handle,
 	int err = -ENODATA;
 
 	if (!wakeup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	INIT_LIST_HEAD(&wakeup->resources);
 
@@ -859,6 +912,7 @@ static bool acpi_wakeup_gpe_init(struct acpi_device *device)
 
 	/* Power button, Lid switch always enable wakeup */
 	if (!acpi_match_device_ids(device, button_device_ids)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!acpi_match_device_ids(device, &button_device_ids[1])) {
 			/* Do not use Lid/sleep button for S5 wakeup */
 			if (wakeup->sleep_state == ACPI_STATE_S5)
@@ -880,15 +934,20 @@ static void acpi_bus_get_wakeup_device_flags(struct acpi_device *device)
 
 	/* Presence of _PRW indicates wake capable */
 	if (!acpi_has_method(device->handle, "_PRW"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = acpi_bus_extract_wakeup_device_power_package(device->handle,
 							   &device->wakeup);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&device->dev, "_PRW evaluation error: %d\n", err);
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device->wakeup.flags.valid = acpi_wakeup_gpe_init(device);
 	device->wakeup.prepare_count = 0;
 	/*
@@ -918,6 +977,7 @@ static void acpi_bus_init_power_state(struct acpi_device *device, int state)
 	if (ACPI_SUCCESS(status)) {
 		union acpi_object *package = buffer.pointer;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (buffer.length && package
 		    && package->type == ACPI_TYPE_PACKAGE
 		    && package->package.count) {
@@ -951,29 +1011,43 @@ static void acpi_bus_get_power_flags(struct acpi_device *device)
 	    !acpi_has_method(device->handle, "_PR0"))
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device->flags.power_manageable = 1;
 
 	/*
 	 * Power Management Flags
 	 */
 	if (acpi_has_method(device->handle, "_PSC"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device->power.flags.explicit_get = 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_has_method(device->handle, "_IRC"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device->power.flags.inrush_current = 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_has_method(device->handle, "_DSW"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device->power.flags.dsw_present = 1;
+}
 
 	/*
 	 * Enumerate supported power management states
 	 */
 	for (i = ACPI_STATE_D0; i <= ACPI_STATE_D3_HOT; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_bus_init_power_state(device, i);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_LIST_HEAD(&device->power.states[ACPI_STATE_D3_COLD].resources);
 	if (!list_empty(&device->power.states[ACPI_STATE_D3_HOT].resources))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device->power.states[ACPI_STATE_D3_COLD].flags.valid = 1;
+}
 
 	/* Set defaults for D0 and D3hot states (always valid) */
 	device->power.states[ACPI_STATE_D0].flags.valid = 1;
@@ -981,8 +1055,10 @@ static void acpi_bus_get_power_flags(struct acpi_device *device)
 	device->power.states[ACPI_STATE_D3_HOT].flags.valid = 1;
 
 	if (acpi_bus_init_power(device))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device->flags.power_manageable = 0;
 }
+}
 
 static void acpi_bus_get_flags(struct acpi_device *device)
 {
@@ -992,7 +1068,9 @@ static void acpi_bus_get_flags(struct acpi_device *device)
 
 	/* Presence of _RMV indicates 'removable' */
 	if (acpi_has_method(device->handle, "_RMV"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device->flags.removable = 1;
+}
 
 	/* Presence of _EJD|_EJ0 indicates 'ejectable' */
 	if (acpi_has_method(device->handle, "_EJD") ||
@@ -1066,11 +1144,17 @@ bool acpi_bay_match(acpi_handle handle)
 	acpi_handle phandle;
 
 	if (!acpi_has_method(handle, "_EJ0"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (acpi_ata_match(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 	if (ACPI_FAILURE(acpi_get_parent(handle, &phandle)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	return acpi_ata_match(phandle);
 }
@@ -1081,8 +1165,11 @@ bool acpi_device_is_battery(struct acpi_device *adev)
 
 	list_for_each_entry(hwid, &adev->pnp.ids, list)
 		if (!strcmp("PNP0C0A", hwid->id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1091,7 +1178,9 @@ static bool is_ejectable_bay(struct acpi_device *adev)
 	acpi_handle handle = adev->handle;
 
 	if (acpi_has_method(handle, "_EJ0") && acpi_device_is_battery(adev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	return acpi_bay_match(handle);
 }
@@ -1135,11 +1224,15 @@ long acpi_is_video_device(acpi_handle handle)
 
 	/* Is this device able to support video switching ? */
 	if (acpi_has_method(handle, "_DOD") || acpi_has_method(handle, "_DOS"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		video_caps |= ACPI_VIDEO_OUTPUT_SWITCHING;
+}
 
 	/* Is this device able to retrieve a video ROM ? */
 	if (acpi_has_method(handle, "_ROM"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		video_caps |= ACPI_VIDEO_ROM_AVAILABLE;
+}
 
 	/* Is this device able to configure which video head to be POSTed ? */
 	if (acpi_has_method(handle, "_VPO") &&
@@ -1149,9 +1242,11 @@ long acpi_is_video_device(acpi_handle handle)
 
 	/* Only check for backlight functionality if one of the above hit. */
 	if (video_caps)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_walk_namespace(ACPI_TYPE_DEVICE, handle,
 				    ACPI_UINT32_MAX, acpi_backlight_cap_match, NULL,
 				    &video_caps, NULL);
+}
 
 	return video_caps;
 }
@@ -1175,10 +1270,13 @@ static void acpi_add_id(struct acpi_device_pnp *pnp, const char *dev_id)
 
 	id = kmalloc(sizeof(*id), GFP_KERNEL);
 	if (!id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	id->id = kstrdup_const(dev_id, GFP_KERNEL);
 	if (!id->id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(id);
 		return;
 	}
@@ -1198,7 +1296,9 @@ static bool acpi_ibm_smbus_match(acpi_handle handle)
 	struct acpi_buffer path = { sizeof(node_name), node_name };
 
 	if (!dmi_name_in_vendors("IBM"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/* Look for SMBS object */
 	if (ACPI_FAILURE(acpi_get_name(handle, ACPI_SINGLE_NAME, &path)) ||
@@ -1211,6 +1311,7 @@ static bool acpi_ibm_smbus_match(acpi_handle handle)
 	    acpi_has_method(handle, "SBW"))
 		return true;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1245,6 +1346,7 @@ static void acpi_set_pnp_ids(acpi_handle handle, struct acpi_device_pnp *pnp,
 
 		status = acpi_get_object_info(handle, &info);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err(PREFIX "%s: Error reading device info\n",
 					__func__);
 			return;
@@ -1255,6 +1357,7 @@ static void acpi_set_pnp_ids(acpi_handle handle, struct acpi_device_pnp *pnp,
 			pnp->type.platform_id = 1;
 		}
 		if (info->valid & ACPI_VALID_CID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cid_list = &info->compatible_id_list;
 			for (i = 0; i < cid_list->count; i++)
 				acpi_add_id(pnp, cid_list->ids[i].string);
@@ -1267,7 +1370,9 @@ static void acpi_set_pnp_ids(acpi_handle handle, struct acpi_device_pnp *pnp,
 			pnp->unique_id = kstrdup(info->unique_id.string,
 							GFP_KERNEL);
 		if (info->valid & ACPI_VALID_CLS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_add_id(pnp, info->class_code.string);
+}
 
 		kfree(info);
 
@@ -1276,13 +1381,21 @@ static void acpi_set_pnp_ids(acpi_handle handle, struct acpi_device_pnp *pnp,
 		 * synthetic HIDs to make sure drivers can find them.
 		 */
 		if (acpi_is_video_device(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_add_id(pnp, ACPI_VIDEO_HID);
+}
 		else if (acpi_bay_match(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_add_id(pnp, ACPI_BAY_HID);
+}
 		else if (acpi_dock_match(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_add_id(pnp, ACPI_DOCK_HID);
+}
 		else if (acpi_ibm_smbus_match(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_add_id(pnp, ACPI_SMBUS_IBM_HID);
+}
 		else if (list_empty(&pnp->ids) &&
 			 acpi_object_is_system_bus(handle)) {
 			/* \_SB, \_TZ, LNXSYBUS */
@@ -1317,6 +1430,7 @@ void acpi_free_pnp_ids(struct acpi_device_pnp *pnp)
 {
 	struct acpi_hardware_id *id, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(id, tmp, &pnp->ids, list) {
 		kfree_const(id->id);
 		kfree(id);
@@ -1333,10 +1447,15 @@ void acpi_free_pnp_ids(struct acpi_device_pnp *pnp)
 bool acpi_dma_supported(struct acpi_device *adev)
 {
 	if (!adev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (adev->flags.cca_seen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	/*
 	* Per ACPI 6.0 sec 6.2.17, assume devices can do cache-coherent
@@ -1344,8 +1463,11 @@ bool acpi_dma_supported(struct acpi_device *adev)
 	* ia64, and other arches will set CONFIG_ACPI_CCA_REQUIRED=y.
 	*/
 	if (!IS_ENABLED(CONFIG_ACPI_CCA_REQUIRED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1358,10 +1480,14 @@ bool acpi_dma_supported(struct acpi_device *adev)
 enum dev_dma_attr acpi_get_dma_attr(struct acpi_device *adev)
 {
 	if (!acpi_dma_supported(adev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return DEV_DMA_NOT_SUPPORTED;
+}
 
 	if (adev->flags.coherent_dma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return DEV_DMA_COHERENT;
+}
 	else
 		return DEV_DMA_NON_COHERENT;
 }
@@ -1396,6 +1522,7 @@ int acpi_dma_get_range(struct device *dev, u64 *dma_addr, u64 *offset,
 	 * companion containing a _DMA method.
 	 */
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		adev = ACPI_COMPANION(dma_dev);
 		if (adev && acpi_has_method(adev->handle, METHOD_NAME__DMA))
 			break;
@@ -1458,9 +1585,13 @@ int acpi_dma_configure(struct device *dev, enum dev_dma_attr attr)
 	iort_dma_setup(dev, &dma_addr, &size);
 
 	iommu = iort_iommu_configure(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ERR(iommu) && PTR_ERR(iommu) == -EPROBE_DEFER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPROBE_DEFER;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	arch_setup_dma_ops(dev, dma_addr, size,
 				iommu, attr == DEV_DMA_COHERENT);
 
@@ -1474,6 +1605,7 @@ EXPORT_SYMBOL_GPL(acpi_dma_configure);
  */
 void acpi_dma_deconfigure(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	arch_teardown_dma_ops(dev);
 }
 EXPORT_SYMBOL_GPL(acpi_dma_deconfigure);
@@ -1495,7 +1627,10 @@ static void acpi_init_coherency(struct acpi_device *adev)
 		status = acpi_evaluate_integer(adev->handle, "_CCA",
 					       NULL, &cca);
 		if (ACPI_SUCCESS(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			adev->flags.cca_seen = 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (!IS_ENABLED(CONFIG_ACPI_CCA_REQUIRED))
 			/*
 			 * If architecture does not specify that _CCA is
@@ -1516,14 +1651,18 @@ static int acpi_check_spi_i2c_slave(struct acpi_resource *ares, void *data)
 	bool *is_spi_i2c_slave_p = data;
 
 	if (ares->type != ACPI_RESOURCE_TYPE_SERIAL_BUS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/*
 	 * devices that are connected to UART still need to be enumerated to
 	 * platform bus
 	 */
 	if (ares->data.common_serial_bus.type != ACPI_RESOURCE_SERIAL_TYPE_UART)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*is_spi_i2c_slave_p = true;
+}
 
 	 /* no need to do more checking */
 	return -1;
@@ -1540,6 +1679,7 @@ static bool acpi_is_spi_i2c_slave(struct acpi_device *device)
 	     fwnode_property_present(&device->fwnode, "i2cAddress")))
 		return true;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_LIST_HEAD(&resource_list);
 	acpi_dev_get_resources(device, &resource_list, acpi_check_spi_i2c_slave,
 			       &is_spi_i2c_slave);
@@ -1572,6 +1712,7 @@ void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,
 
 void acpi_device_add_finalize(struct acpi_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_set_uevent_suppress(&device->dev, false);
 	kobject_uevent(&device->dev.kobj, KOBJ_ADD);
 }
@@ -1586,6 +1727,7 @@ static int acpi_add_single_object(struct acpi_device **child,
 
 	device = kzalloc(sizeof(struct acpi_device), GFP_KERNEL);
 	if (!device) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR PREFIX "Memory allocation error\n");
 		return -ENOMEM;
 	}
@@ -1596,6 +1738,7 @@ static int acpi_add_single_object(struct acpi_device **child,
 
 	result = acpi_device_add(device, acpi_device_release);
 	if (result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_device_release(&device->dev);
 		return result;
 	}
@@ -1617,7 +1760,9 @@ static acpi_status acpi_get_resource_memory(struct acpi_resource *ares,
 	struct resource *res = context;
 
 	if (acpi_dev_resource_memory(ares, res))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_CTRL_TERMINATE;
+}
 
 	return AE_OK;
 }
@@ -1629,7 +1774,9 @@ static bool acpi_device_should_be_hidden(acpi_handle handle)
 
 	/* Check if it should ignore the UART device */
 	if (!(spcr_uart_addr && acpi_has_method(handle, METHOD_NAME__CRS)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/*
 	 * The UART device described in SPCR table is assumed to have only one
@@ -1637,9 +1784,13 @@ static bool acpi_device_should_be_hidden(acpi_handle handle)
 	 */
 	status = acpi_walk_resources(handle, METHOD_NAME__CRS,
 				     acpi_get_resource_memory, &res);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ACPI_FAILURE(status) || res.start != spcr_uart_addr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_handle_info(handle, "The UART device @%pa in SPCR table will be hidden\n",
 			 &res.start);
 
@@ -1654,24 +1805,32 @@ static int acpi_bus_type_and_status(acpi_handle handle, int *type,
 
 	status = acpi_get_type(handle, &acpi_type);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	switch (acpi_type) {
 	case ACPI_TYPE_ANY:		/* for ACPI_ROOT_OBJECT */
 	case ACPI_TYPE_DEVICE:
 		if (acpi_device_should_be_hidden(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENODEV;
+}
 
 		*type = ACPI_BUS_TYPE_DEVICE;
 		status = acpi_bus_get_status_handle(handle, sta);
 		if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*sta = 0;
+}
 		break;
 	case ACPI_TYPE_PROCESSOR:
 		*type = ACPI_BUS_TYPE_PROCESSOR;
 		status = acpi_bus_get_status_handle(handle, sta);
 		if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENODEV;
+}
 		break;
 	case ACPI_TYPE_THERMAL:
 		*type = ACPI_BUS_TYPE_THERMAL;
@@ -1685,6 +1844,7 @@ static int acpi_bus_type_and_status(acpi_handle handle, int *type,
 		return -ENODEV;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1707,9 +1867,11 @@ static bool acpi_scan_handler_matching(struct acpi_scan_handler *handler,
 			if (matchid)
 				*matchid = devid;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1720,13 +1882,17 @@ static struct acpi_scan_handler *acpi_scan_match_handler(const char *idstr,
 
 	list_for_each_entry(handler, &acpi_scan_handlers_list, list_node)
 		if (acpi_scan_handler_matching(handler, idstr, matchid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return handler;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
 void acpi_scan_hotplug_enabled(struct acpi_hotplug_profile *hotplug, bool val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!!hotplug->enabled == !!val)
 		return;
 
@@ -1742,6 +1908,7 @@ static void acpi_scan_init_hotplug(struct acpi_device *adev)
 	struct acpi_hardware_id *hwid;
 
 	if (acpi_dock_match(adev->handle) || is_ejectable_bay(adev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_dock_add(adev);
 		return;
 	}
@@ -1766,19 +1933,23 @@ static void acpi_device_dep_initialize(struct acpi_device *adev)
 	if (!acpi_has_method(adev->handle, "_DEP"))
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = acpi_evaluate_reference(adev->handle, "_DEP", NULL,
 					&dep_devices);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(&adev->dev, "Failed to evaluate _DEP.\n");
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < dep_devices.count; i++) {
 		struct acpi_device_info *info;
 		int skip;
 
 		status = acpi_get_object_info(dep_devices.handles[i], &info);
 		if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_dbg(&adev->dev, "Error reading _DEP device info\n");
 			continue;
 		}
@@ -1795,10 +1966,14 @@ static void acpi_device_dep_initialize(struct acpi_device *adev)
 		if (skip)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dep = kzalloc(sizeof(struct acpi_dep_data), GFP_KERNEL);
 		if (!dep)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dep->master = dep_devices.handles[i];
 		dep->slave  = adev->handle;
 		adev->dep_unmet++;
@@ -1823,16 +1998,21 @@ static acpi_status acpi_bus_check_add(acpi_handle handle, u32 lvl_not_used,
 
 	result = acpi_bus_type_and_status(handle, &type, &sta);
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
+}
 
 	if (type == ACPI_BUS_TYPE_POWER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_add_power_resource(handle);
 		return AE_OK;
 	}
 
 	acpi_add_single_object(&device, handle, type, sta);
 	if (!device)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_CTRL_DEPTH;
+}
 
 	acpi_scan_init_hotplug(device);
 	acpi_device_dep_initialize(device);
@@ -1841,6 +2021,7 @@ static acpi_status acpi_bus_check_add(acpi_handle handle, u32 lvl_not_used,
 	if (!*return_value)
 		*return_value = device;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return AE_OK;
 }
 
@@ -1854,6 +2035,7 @@ static void acpi_default_enumeration(struct acpi_device *device)
 		acpi_create_platform_device(device, NULL);
 		acpi_device_set_enumerated(device);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		blocking_notifier_call_chain(&acpi_reconfig_chain,
 					     ACPI_RECONFIG_DEVICE_ADD, device);
 	}
@@ -1894,6 +2076,7 @@ static int acpi_scan_attach_handler(struct acpi_device *device)
 		handler = acpi_scan_match_handler(hwid->id, &devid);
 		if (handler) {
 			if (!handler->attach) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				device->pnp.type.platform_id = 0;
 				continue;
 			}
@@ -1902,6 +2085,7 @@ static int acpi_scan_attach_handler(struct acpi_device *device)
 			if (ret > 0)
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			device->handler = NULL;
 			if (ret < 0)
 				break;
@@ -1918,7 +2102,9 @@ static void acpi_bus_attach(struct acpi_device *device)
 	int ret;
 
 	if (ACPI_SUCCESS(acpi_bus_get_ejd(device->handle, &ejd)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		register_dock_dependent_device(device, ejd);
+}
 
 	acpi_bus_get_status(device);
 	/* Skip devices that are not present. */
@@ -1932,11 +2118,15 @@ static void acpi_bus_attach(struct acpi_device *device)
 		goto ok;
 
 	if (!device->flags.initialized) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device->flags.power_manageable =
 			device->power.states[ACPI_STATE_D0].flags.valid;
 		if (acpi_bus_init_power(device))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			device->flags.power_manageable = 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device->flags.initialized = true;
 	} else if (device->flags.visited) {
 		goto ok;
@@ -1944,20 +2134,27 @@ static void acpi_bus_attach(struct acpi_device *device)
 
 	ret = acpi_scan_attach_handler(device);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	device->flags.match_driver = true;
 	if (ret > 0 && !device->flags.spi_i2c_slave) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_device_set_enumerated(device);
 		goto ok;
 	}
 
 	ret = device_attach(&device->dev);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!device->pnp.type.platform_id && !device->flags.spi_i2c_slave)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_device_set_enumerated(device);
+}
 	else
 		acpi_default_enumeration(device);
 
@@ -1975,6 +2172,7 @@ void acpi_walk_dep_device_list(acpi_handle handle)
 	struct acpi_device *adev;
 
 	mutex_lock(&acpi_dep_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(dep, tmp, &acpi_dep_list, node) {
 		if (dep->master == handle) {
 			acpi_bus_get_device(dep->slave, &adev);
@@ -2018,6 +2216,7 @@ int acpi_bus_scan(acpi_handle handle)
 		acpi_bus_attach(device);
 		return 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 EXPORT_SYMBOL(acpi_bus_scan);
@@ -2033,6 +2232,7 @@ void acpi_bus_trim(struct acpi_device *adev)
 	struct acpi_scan_handler *handler = adev->handler;
 	struct acpi_device *child;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_reverse(child, &adev->children, node)
 		acpi_bus_trim(child);
 
@@ -2063,7 +2263,9 @@ int acpi_bus_register_early_device(int type)
 	result = acpi_add_single_object(&device, NULL,
 					type, ACPI_STA_DEFAULT);
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
 	device->flags.match_driver = true;
 	return device_attach(&device->dev);
@@ -2084,12 +2286,16 @@ static int acpi_bus_scan_fixed(void)
 						ACPI_BUS_TYPE_POWER_BUTTON,
 						ACPI_STA_DEFAULT);
 		if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return result;
+}
 
 		device->flags.match_driver = true;
 		result = device_attach(&device->dev);
 		if (result < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return result;
+}
 
 		device_init_wakeup(&device->dev, true);
 	}
@@ -2101,8 +2307,11 @@ static int acpi_bus_scan_fixed(void)
 						ACPI_BUS_TYPE_SLEEP_BUTTON,
 						ACPI_STA_DEFAULT);
 		if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return result;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device->flags.match_driver = true;
 		result = device_attach(&device->dev);
 	}
@@ -2118,7 +2327,9 @@ static void __init acpi_get_spcr_uart_addr(void)
 	status = acpi_get_table(ACPI_SIG_SPCR, 0,
 				(struct acpi_table_header **)&spcr_ptr);
 	if (ACPI_SUCCESS(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spcr_uart_addr = spcr_ptr->serial_port.address;
+}
 	else
 		printk(KERN_WARNING PREFIX "STAO table present, but SPCR is missing\n");
 }
@@ -2153,11 +2364,17 @@ int __init acpi_scan_init(void)
 	status = acpi_get_table(ACPI_SIG_STAO, 0,
 				(struct acpi_table_header **)&stao_ptr);
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (stao_ptr->header.length > sizeof(struct acpi_table_stao))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_INFO PREFIX "STAO Name List not yet supported.");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (stao_ptr->ignore_uart)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_get_spcr_uart_addr();
+}
 	}
 
 	acpi_gpe_apply_masked_gpes();
@@ -2179,6 +2396,7 @@ int __init acpi_scan_init(void)
 	if (!acpi_gbl_reduced_hardware) {
 		result = acpi_bus_scan_fixed();
 		if (result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpi_detach_data(acpi_root->handle,
 					 acpi_scan_drop_device);
 			acpi_device_del(acpi_root);
@@ -2201,6 +2419,7 @@ static DEFINE_MUTEX(acpi_probe_mutex);
 static int __init acpi_match_madt(struct acpi_subtable_header *header,
 				  const unsigned long end)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ape->subtable_valid || ape->subtable_valid(header, ape))
 		if (!ape->probe_subtbl(header, end))
 			acpi_probe_count++;
@@ -2213,7 +2432,9 @@ int __init __acpi_probe_device_table(struct acpi_probe_entry *ap_head, int nr)
 	int count = 0;
 
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	mutex_lock(&acpi_probe_mutex);
 	for (ape = ap_head; nr; ape++, nr--) {
@@ -2243,6 +2464,7 @@ static void acpi_table_events_fn(struct work_struct *work)
 {
 	struct acpi_table_events_work *tew;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tew = container_of(work, struct acpi_table_events_work, work);
 
 	if (tew->event == ACPI_TABLE_EVENT_LOAD) {
@@ -2259,7 +2481,9 @@ void acpi_scan_table_handler(u32 event, void *table, void *context)
 	struct acpi_table_events_work *tew;
 
 	if (!acpi_scan_initialized)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (event != ACPI_TABLE_EVENT_LOAD)
 		return;
@@ -2283,6 +2507,7 @@ EXPORT_SYMBOL(acpi_reconfig_notifier_register);
 
 int acpi_reconfig_notifier_unregister(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return blocking_notifier_chain_unregister(&acpi_reconfig_chain, nb);
 }
 EXPORT_SYMBOL(acpi_reconfig_notifier_unregister);
diff --git a/drivers/acpi/sleep.c b/drivers/acpi/sleep.c
index 8082871..6a6a4d1 100644
--- a/drivers/acpi/sleep.c
+++ b/drivers/acpi/sleep.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * sleep.c - ACPI sleep support.
  *
@@ -38,6 +40,7 @@ static void acpi_sleep_tts_switch(u32 acpi_state)
 	acpi_status status;
 
 	status = acpi_execute_simple_method(NULL, "\\_TTS", acpi_state);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ACPI_FAILURE(status) && status != AE_NOT_FOUND) {
 		/*
 		 * OS can't evaluate the _TTS object correctly. Some warning
@@ -50,6 +53,7 @@ static void acpi_sleep_tts_switch(u32 acpi_state)
 static int tts_notify_reboot(struct notifier_block *this,
 			unsigned long code, void *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_sleep_tts_switch(ACPI_STATE_S5);
 	return NOTIFY_DONE;
 }
@@ -95,6 +99,7 @@ static u32 acpi_target_sleep_state = ACPI_STATE_S0;
 
 u32 acpi_target_system_state(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acpi_target_sleep_state;
 }
 EXPORT_SYMBOL_GPL(acpi_target_system_state);
@@ -112,6 +117,7 @@ static bool nvs_nosave;
 
 void __init acpi_nvs_nosave(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nvs_nosave = true;
 }
 
@@ -127,11 +133,13 @@ static bool nvs_nosave_s3;
 
 void __init acpi_nvs_nosave_s3(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nvs_nosave_s3 = true;
 }
 
 static int __init init_nvs_save_s3(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nvs_nosave_s3 = false;
 	return 0;
 }
@@ -145,17 +153,20 @@ static bool old_suspend_ordering;
 
 void __init acpi_old_suspend_ordering(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	old_suspend_ordering = true;
 }
 
 static int __init init_old_suspend_ordering(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_old_suspend_ordering();
 	return 0;
 }
 
 static int __init init_nvs_nosave(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_nvs_nosave();
 	return 0;
 }
@@ -164,6 +175,7 @@ static bool acpi_sleep_no_lps0;
 
 static int __init init_no_lps0(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_sleep_no_lps0 = true;
 	return 0;
 }
@@ -371,6 +383,7 @@ static void __init acpi_sleep_dmi_check(void)
 {
 	int year;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dmi_get_date(DMI_BIOS_DATE, &year, NULL, NULL) && year >= 2012)
 		acpi_nvs_nosave_s3();
 
@@ -382,6 +395,7 @@ static void __init acpi_sleep_dmi_check(void)
  */
 static int acpi_pm_freeze(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_disable_all_gpes();
 	acpi_os_wait_events_complete();
 	acpi_ec_block_transactions();
@@ -393,6 +407,7 @@ static int acpi_pm_freeze(void)
  */
 static int acpi_pm_pre_suspend(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_pm_freeze();
 	return suspend_nvs_save();
 }
@@ -405,6 +420,7 @@ static int acpi_pm_pre_suspend(void)
  */
 static int __acpi_pm_prepare(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int error = acpi_sleep_prepare(acpi_target_sleep_state);
 	if (error)
 		acpi_target_sleep_state = ACPI_STATE_S0;
@@ -418,6 +434,7 @@ static int __acpi_pm_prepare(void)
  */
 static int acpi_pm_prepare(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int error = __acpi_pm_prepare();
 	if (!error)
 		error = acpi_pm_pre_suspend();
@@ -427,6 +444,7 @@ static int acpi_pm_prepare(void)
 
 static int find_powerf_dev(struct device *dev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *device = to_acpi_device(dev);
 	const char *hid = acpi_device_hid(device);
 
@@ -448,7 +466,9 @@ static void acpi_pm_finish(void)
 	suspend_nvs_free();
 
 	if (acpi_state == ACPI_STATE_S0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	printk(KERN_INFO PREFIX "Waking up from system sleep state S%d\n",
 		acpi_state);
@@ -485,6 +505,7 @@ static void acpi_pm_finish(void)
  */
 static void acpi_pm_start(u32 acpi_state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_target_sleep_state = acpi_state;
 	acpi_sleep_tts_switch(acpi_target_sleep_state);
 	acpi_scan_lock_acquire();
@@ -495,6 +516,7 @@ static void acpi_pm_start(u32 acpi_state)
  */
 static void acpi_pm_end(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_turn_off_unused_power_resources();
 	acpi_scan_lock_release();
 	/*
@@ -527,6 +549,7 @@ static int acpi_suspend_begin(suspend_state_t pm_state)
 	u32 acpi_state = acpi_suspend_states[pm_state];
 	int error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = (nvs_nosave || nvs_nosave_s3) ? 0 : suspend_nvs_alloc();
 	if (error)
 		return error;
@@ -651,6 +674,7 @@ static const struct platform_suspend_ops acpi_suspend_ops = {
  */
 static int acpi_suspend_begin_old(suspend_state_t pm_state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int error = acpi_suspend_begin(pm_state);
 	if (!error)
 		error = __acpi_pm_prepare();
@@ -734,6 +758,7 @@ static void lpi_device_get_constraints(void)
 					  1, ACPI_LPS0_GET_DEVICE_CONSTRAINTS,
 					  NULL, ACPI_TYPE_PACKAGE);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_handle_debug(lps0_device_handle, "_DSM function 1 eval %s\n",
 			  out_obj ? "successful" : "failed");
 
@@ -839,6 +864,7 @@ static void lpi_check_constraints(void)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < lpi_constraints_table_size; ++i) {
 		struct acpi_device *adev;
 
@@ -868,7 +894,9 @@ static void acpi_sleep_run_lps0_dsm(unsigned int func)
 	union acpi_object *out_obj;
 
 	if (!(lps0_dsm_func_mask & (1 << func)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	out_obj = acpi_evaluate_dsm(lps0_device_handle, &lps0_dsm_guid, 1, func, NULL);
 	ACPI_FREE(out_obj);
@@ -883,7 +911,9 @@ static int lps0_device_attach(struct acpi_device *adev,
 	union acpi_object *out_obj;
 
 	if (lps0_device_handle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (acpi_sleep_no_lps0) {
 		acpi_handle_info(adev->handle,
@@ -931,6 +961,7 @@ static struct acpi_scan_handler lps0_handler = {
 
 static int acpi_s2idle_begin(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_scan_lock_acquire();
 	s2idle_in_progress = true;
 	return 0;
@@ -938,6 +969,7 @@ static int acpi_s2idle_begin(void)
 
 static int acpi_s2idle_prepare(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (lps0_device_handle) {
 		acpi_sleep_run_lps0_dsm(ACPI_LPS0_SCREEN_OFF);
 		acpi_sleep_run_lps0_dsm(ACPI_LPS0_ENTRY);
@@ -959,6 +991,7 @@ static int acpi_s2idle_prepare(void)
 static void acpi_s2idle_wake(void)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pm_debug_messages_on)
 		lpi_check_constraints();
 
@@ -989,6 +1022,7 @@ static void acpi_s2idle_sync(void)
 
 static void acpi_s2idle_restore(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_sci_irq_valid())
 		disable_irq_wake(acpi_sci_irq);
 
@@ -1002,6 +1036,7 @@ static void acpi_s2idle_restore(void)
 
 static void acpi_s2idle_end(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	s2idle_in_progress = false;
 	acpi_scan_lock_release();
 }
@@ -1019,6 +1054,7 @@ static void acpi_sleep_suspend_setup(void)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = ACPI_STATE_S1; i < ACPI_STATE_S4; i++)
 		if (acpi_sleep_state_supported(i))
 			sleep_states[i] = 1;
@@ -1039,11 +1075,13 @@ static inline void acpi_sleep_suspend_setup(void) {}
 
 bool acpi_s2idle_wakeup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return s2idle_wakeup;
 }
 
 bool acpi_sleep_no_ec_events(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !s2idle_in_progress || !lps0_device_handle;
 }
 
@@ -1052,6 +1090,7 @@ static u32 saved_bm_rld;
 
 static int  acpi_save_bm_rld(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_read_bit_register(ACPI_BITREG_BUS_MASTER_RLD, &saved_bm_rld);
 	return 0;
 }
@@ -1062,7 +1101,9 @@ static void  acpi_restore_bm_rld(void)
 
 	acpi_read_bit_register(ACPI_BITREG_BUS_MASTER_RLD, &resumed_bm_rld);
 	if (resumed_bm_rld == saved_bm_rld)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	acpi_write_bit_register(ACPI_BITREG_BUS_MASTER_RLD, saved_bm_rld);
 }
@@ -1087,6 +1128,7 @@ static bool nosigcheck;
 
 void __init acpi_no_s4_hw_signature(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nosigcheck = true;
 }
 
@@ -1094,6 +1136,7 @@ static int acpi_hibernation_begin(void)
 {
 	int error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = nvs_nosave ? 0 : suspend_nvs_alloc();
 	if (!error)
 		acpi_pm_start(ACPI_STATE_S4);
@@ -1112,11 +1155,13 @@ static int acpi_hibernation_enter(void)
 	/* Reprogram control registers */
 	acpi_leave_sleep_state_prep(ACPI_STATE_S4);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ACPI_SUCCESS(status) ? 0 : -EFAULT;
 }
 
 static void acpi_hibernation_leave(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_set_resume_via_firmware();
 	/*
 	 * If ACPI is not enabled by the BIOS and the boot kernel, we need to
@@ -1136,6 +1181,7 @@ static void acpi_hibernation_leave(void)
 
 static void acpi_pm_thaw(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_ec_unblock_transactions();
 	acpi_enable_all_runtime_gpes();
 }
@@ -1171,6 +1217,7 @@ static int acpi_hibernation_begin_old(void)
 	error = acpi_sleep_prepare(ACPI_STATE_S4);
 
 	if (!error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!nvs_nosave)
 			error = suspend_nvs_alloc();
 		if (!error) {
@@ -1200,6 +1247,7 @@ static const struct platform_hibernation_ops acpi_hibernation_ops_old = {
 
 static void acpi_sleep_hibernate_setup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!acpi_sleep_state_supported(ACPI_STATE_S4))
 		return;
 
@@ -1252,6 +1300,7 @@ int __init acpi_sleep_init(void)
 		pm_power_off_prepare = acpi_power_off_prepare;
 		pm_power_off = acpi_power_off;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_no_s5 = true;
 	}
 
diff --git a/drivers/acpi/sysfs.c b/drivers/acpi/sysfs.c
index 0fd57bf..c0335f1 100644
--- a/drivers/acpi/sysfs.c
+++ b/drivers/acpi/sysfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * sysfs.c - ACPI sysfs interface to userspace.
@@ -296,7 +298,7 @@ MODULE_PARM_DESC(aml_debug_output,
 
 /* /sys/module/acpi/parameters/acpica_version */
 static int param_get_acpica_version(char *buffer, struct kernel_param *kp)
-{
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int result;
 
 	result = sprintf(buffer, "%x", ACPI_CA_VERSION);
@@ -364,16 +366,22 @@ static int acpi_table_attr_init(struct kobject *tables_obj,
 	struct acpi_table_attr *attr = NULL;
 	char instance_str[ACPI_INST_SIZE];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_attr_init(&table_attr->attr.attr);
 	ACPI_MOVE_NAME(table_attr->name, table_header->signature);
 
 	list_for_each_entry(attr, &acpi_table_attr_list, node) {
 		if (ACPI_COMPARE_NAME(table_attr->name, attr->name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (table_attr->instance < attr->instance)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				table_attr->instance = attr->instance;
+}
+}
 	}
 	table_attr->instance++;
 	if (table_attr->instance > ACPI_MAX_TABLE_INSTANCES) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("%4.4s: too many table instances\n",
 			table_attr->name);
 		return -ERANGE;
@@ -384,6 +392,7 @@ static int acpi_table_attr_init(struct kobject *tables_obj,
 	if (table_attr->instance > 1 || (table_attr->instance == 1 &&
 					 !acpi_get_table
 					 (table_header->signature, 2, &header))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		snprintf(instance_str, sizeof(instance_str), "%u",
 			 table_attr->instance);
 		strcat(table_attr->filename, instance_str);
@@ -438,6 +447,7 @@ static ssize_t acpi_data_show(struct file *filp, struct kobject *kobj,
 	void __iomem *base;
 	ssize_t rc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	data_attr = container_of(bin_attr, struct acpi_data_attr, attr);
 
 	base = acpi_os_map_memory(data_attr->addr, data_attr->attr.size);
@@ -482,15 +492,21 @@ static int acpi_table_data_init(struct acpi_table_header *th)
 
 	for (i = 0; i < NUM_ACPI_DATA_OBJS; i++) {
 		if (ACPI_COMPARE_NAME(th->signature, acpi_data_objs[i].name)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			data_attr = kzalloc(sizeof(*data_attr), GFP_KERNEL);
 			if (!data_attr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sysfs_attr_init(&data_attr->attr.attr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			data_attr->attr.read = acpi_data_show;
 			data_attr->attr.attr.mode = 0400;
 			return acpi_data_objs[i].fn(th, data_attr);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -525,11 +541,14 @@ static int acpi_tables_sysfs_init(void)
 
 		table_attr = kzalloc(sizeof(*table_attr), GFP_KERNEL);
 		if (!table_attr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
 		ret = acpi_table_attr_init(tables_kobj,
 					   table_attr, table_header);
 		if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(table_attr);
 			return ret;
 		}
@@ -591,6 +610,7 @@ static void delete_gpe_attr_array(void)
 	if (counter_attrs) {
 		int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < num_gpes; i++)
 			kfree(counter_attrs[i].attr.name);
 
@@ -603,6 +623,7 @@ static void delete_gpe_attr_array(void)
 
 static void gpe_count(u32 gpe_number)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_gpe_count++;
 
 	if (!all_counters)
@@ -619,6 +640,7 @@ static void gpe_count(u32 gpe_number)
 
 static void fixed_event_count(u32 event_number)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!all_counters)
 		return;
 
@@ -634,6 +656,7 @@ static void fixed_event_count(u32 event_number)
 static void acpi_global_event_handler(u32 event_type, acpi_handle device,
 	u32 event_number, void *context)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (event_type == ACPI_EVENT_TYPE_GPE) {
 		gpe_count(event_number);
 		pr_debug("GPE event 0x%02x\n", event_number);
@@ -651,7 +674,9 @@ static int get_status(u32 index, acpi_event_status *status,
 	int result;
 
 	if (index >= num_gpes + ACPI_NUM_FIXED_EVENTS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (index < num_gpes) {
 		result = acpi_get_gpe_device(index, handle);
@@ -688,6 +713,7 @@ static ssize_t counter_show(struct kobject *kobj,
 	if (index >= num_gpes + ACPI_NUM_FIXED_EVENTS)
 		goto end;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	result = get_status(index, &status, &handle);
 	if (result)
 		goto end;
@@ -736,6 +762,7 @@ static ssize_t counter_set(struct kobject *kobj,
 
 	if (index == num_gpes + ACPI_NUM_FIXED_EVENTS + COUNT_SCI) {
 		int i;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < num_counters; ++i)
 			all_counters[i].count = 0;
 		acpi_gpe_count = 0;
@@ -826,6 +853,7 @@ static int __init acpi_gpe_set_masked_gpes(char *val)
 {
 	u8 gpe;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (kstrtou8(val, 0, &gpe) || gpe > ACPI_MASKABLE_GPE_MAX)
 		return -EINVAL;
 	acpi_masked_gpes |= ((u64)1<<gpe);
@@ -844,8 +872,10 @@ void __init acpi_gpe_apply_masked_gpes(void)
 	     gpe < min_t(u8, ACPI_MASKABLE_GPE_MAX, acpi_current_gpe_count);
 	     gpe++) {
 		if (acpi_masked_gpes & ((u64)1<<gpe)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = acpi_get_gpe_device(gpe, &handle);
 			if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pr_info("Masking GPE 0x%x.\n", gpe);
 				(void)acpi_mask_gpe(handle, gpe, TRUE);
 			}
@@ -859,7 +889,9 @@ void acpi_irq_stats_init(void)
 	int i;
 
 	if (all_counters)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	num_gpes = acpi_current_gpe_count;
 	num_counters = num_gpes + ACPI_NUM_FIXED_EVENTS + NUM_COUNTERS_EXTRA;
@@ -867,7 +899,9 @@ void acpi_irq_stats_init(void)
 	all_attrs = kzalloc(sizeof(struct attribute *) * (num_counters + 1),
 			    GFP_KERNEL);
 	if (all_attrs == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	all_counters = kzalloc(sizeof(struct event_counter) * (num_counters),
 			       GFP_KERNEL);
@@ -914,6 +948,7 @@ void acpi_irq_stats_init(void)
 		if (name == NULL)
 			goto fail;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_attr_init(&counter_attrs[i].attr);
 		counter_attrs[i].attr.name = name;
 		counter_attrs[i].attr.mode = 0644;
@@ -925,7 +960,9 @@ void acpi_irq_stats_init(void)
 
 	interrupt_stats_attr_group.attrs = all_attrs;
 	if (!sysfs_create_group(acpi_kobj, &interrupt_stats_attr_group))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 fail:
 	delete_gpe_attr_array();
@@ -934,6 +971,7 @@ void acpi_irq_stats_init(void)
 
 static void __exit interrupt_stats_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_remove_group(acpi_kobj, &interrupt_stats_attr_group);
 
 	delete_gpe_attr_array();
@@ -945,6 +983,7 @@ static ssize_t
 acpi_show_profile(struct device *dev, struct device_attribute *attr,
 		  char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", acpi_gbl_FADT.preferred_profile);
 }
 
@@ -954,6 +993,7 @@ static const struct device_attribute pm_profile_attr =
 static ssize_t hotplug_enabled_show(struct kobject *kobj,
 				    struct kobj_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_hotplug_profile *hotplug = to_acpi_hotplug_profile(kobj);
 
 	return sprintf(buf, "%d\n", hotplug->enabled);
@@ -963,6 +1003,7 @@ static ssize_t hotplug_enabled_store(struct kobject *kobj,
 				     struct kobj_attribute *attr,
 				     const char *buf, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_hotplug_profile *hotplug = to_acpi_hotplug_profile(kobj);
 	unsigned int val;
 
@@ -1010,6 +1051,7 @@ void acpi_sysfs_add_hotplug_profile(struct acpi_hotplug_profile *hotplug,
 static ssize_t force_remove_show(struct kobject *kobj,
 				 struct kobj_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", 0);
 }
 
@@ -1022,7 +1064,9 @@ static ssize_t force_remove_store(struct kobject *kobj,
 
 	ret = strtobool(buf, &val);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (val) {
 		pr_err("Enabling force_remove is not supported anymore. Please report to linux-acpi@vger.kernel.org if you depend on this functionality\n");
@@ -1041,15 +1085,21 @@ int __init acpi_sysfs_init(void)
 
 	result = acpi_tables_sysfs_init();
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
 	hotplug_kobj = kobject_create_and_add("hotplug", acpi_kobj);
 	if (!hotplug_kobj)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	result = sysfs_create_file(hotplug_kobj, &force_remove_attr.attr);
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
 	result = sysfs_create_file(acpi_kobj, &pm_profile_attr.attr);
 	return result;
diff --git a/drivers/acpi/tables.c b/drivers/acpi/tables.c
index 80ce2a7..282663b 100644
--- a/drivers/acpi/tables.c
+++ b/drivers/acpi/tables.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  acpi_tables.c - ACPI Boot-Time Table Parsing
  *
@@ -59,7 +61,9 @@ static bool acpi_verify_table_checksum __initdata = false;
 void acpi_table_print_madt_entry(struct acpi_subtable_header *header)
 {
 	if (!header)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	switch (header->type) {
 
@@ -67,6 +71,7 @@ void acpi_table_print_madt_entry(struct acpi_subtable_header *header)
 		{
 			struct acpi_madt_local_apic *p =
 			    (struct acpi_madt_local_apic *)header;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("LAPIC (acpi_id[0x%02x] lapic_id[0x%02x] %s)\n",
 				 p->processor_id, p->id,
 				 (p->lapic_flags & ACPI_MADT_ENABLED) ? "enabled" : "disabled");
@@ -77,6 +82,7 @@ void acpi_table_print_madt_entry(struct acpi_subtable_header *header)
 		{
 			struct acpi_madt_local_x2apic *p =
 			    (struct acpi_madt_local_x2apic *)header;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("X2APIC (apic_id[0x%02x] uid[0x%02x] %s)\n",
 				 p->local_apic_id, p->uid,
 				 (p->lapic_flags & ACPI_MADT_ENABLED) ? "enabled" : "disabled");
@@ -87,6 +93,7 @@ void acpi_table_print_madt_entry(struct acpi_subtable_header *header)
 		{
 			struct acpi_madt_io_apic *p =
 			    (struct acpi_madt_io_apic *)header;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("IOAPIC (id[0x%02x] address[0x%08x] gsi_base[%d])\n",
 				 p->id, p->address, p->global_irq_base);
 		}
@@ -161,6 +168,7 @@ void acpi_table_print_madt_entry(struct acpi_subtable_header *header)
 		{
 			struct acpi_madt_io_sapic *p =
 			    (struct acpi_madt_io_sapic *)header;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("IOSAPIC (id[0x%x] address[%p] gsi_base[%d])\n",
 				 p->id, (void *)(unsigned long)p->address,
 				 p->global_irq_base);
@@ -171,6 +179,7 @@ void acpi_table_print_madt_entry(struct acpi_subtable_header *header)
 		{
 			struct acpi_madt_local_sapic *p =
 			    (struct acpi_madt_local_sapic *)header;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("LSAPIC (acpi_id[0x%02x] lsapic_id[0x%02x] lsapic_eid[0x%02x] %s)\n",
 				 p->processor_id, p->id, p->eid,
 				 (p->lapic_flags & ACPI_MADT_ENABLED) ? "enabled" : "disabled");
@@ -193,6 +202,7 @@ void acpi_table_print_madt_entry(struct acpi_subtable_header *header)
 		{
 			struct acpi_madt_generic_interrupt *p =
 				(struct acpi_madt_generic_interrupt *)header;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("GICC (acpi_id[0x%04x] address[%llx] MPIDR[0x%llx] %s)\n",
 				 p->uid, p->base_address,
 				 p->arm_mpidr,
@@ -205,6 +215,7 @@ void acpi_table_print_madt_entry(struct acpi_subtable_header *header)
 		{
 			struct acpi_madt_generic_distributor *p =
 				(struct acpi_madt_generic_distributor *)header;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("GIC Distributor (gic_id[0x%04x] address[%llx] gsi_base[%d])\n",
 				 p->gic_id, p->base_address,
 				 p->global_irq_base);
@@ -249,15 +260,22 @@ acpi_parse_entries_array(char *id, unsigned long table_size,
 	int i;
 
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (!id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!table_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!table_header) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("%4.4s not present\n", id);
 		return -ENODEV;
 	}
@@ -279,6 +297,7 @@ acpi_parse_entries_array(char *id, unsigned long table_size,
 				continue;
 			if (!proc[i].handler ||
 			     (!errs && proc[i].handler(entry, table_end))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				errs++;
 				continue;
 			}
@@ -294,6 +313,7 @@ acpi_parse_entries_array(char *id, unsigned long table_size,
 		 * infinite loop.
 		 */
 		if (entry->length == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("[%4.4s:0x%02x] Invalid zero length\n", id, proc->id);
 			return -EINVAL;
 		}
@@ -303,6 +323,7 @@ acpi_parse_entries_array(char *id, unsigned long table_size,
 	}
 
 	if (max_entries && count > max_entries) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("[%4.4s:0x%02x] found the maximum %i entries\n",
 			id, proc->id, count);
 	}
@@ -321,16 +342,21 @@ acpi_table_parse_entries_array(char *id,
 	u32 instance = 0;
 
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (!id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!strncmp(id, ACPI_SIG_MADT, 4))
 		instance = acpi_apic_instance;
 
 	acpi_get_table(id, instance, &table_header);
 	if (!table_header) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("%4.4s not present\n", id);
 		return -ENODEV;
 	}
@@ -382,10 +408,14 @@ int __init acpi_table_parse(char *id, acpi_tbl_table_handler handler)
 	struct acpi_table_header *table = NULL;
 
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (!id || !handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (strncmp(id, ACPI_SIG_MADT, 4) == 0)
 		acpi_get_table(id, acpi_apic_instance, &table);
@@ -397,8 +427,10 @@ int __init acpi_table_parse(char *id, acpi_tbl_table_handler handler)
 		acpi_put_table(table);
 		return 0;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
 }
+}
 
 /* 
  * The BIOS is supposed to supply a single APIC/MADT,
@@ -411,8 +443,10 @@ static void __init check_multiple_madt(void)
 
 	acpi_get_table(ACPI_SIG_MADT, 2, &table);
 	if (table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("BIOS bug: multiple APIC/MADT found, using %d\n",
 			acpi_apic_instance);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("If \"acpi_apic_instance=%d\" works better, "
 			"notify linux-acpi@vger.kernel.org\n",
 			acpi_apic_instance ? 0 : 2);
@@ -426,6 +460,7 @@ static void __init check_multiple_madt(void)
 
 static void acpi_table_taint(struct acpi_table_header *table)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_warn("Override [%4.4s-%8.8s], this is unsafe: tainting kernel\n",
 		table->signature, table->oem_table_id);
 	add_taint(TAINT_OVERRIDDEN_ACPI_TABLE, LOCKDEP_NOW_UNRELIABLE);
@@ -441,6 +476,7 @@ static u8 __init acpi_table_checksum(u8 *buffer, u32 length)
 	u8 sum = 0;
 	u8 *end = buffer + length;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (buffer < end)
 		sum = (u8) (sum + *(buffer++));
 	return sum;
@@ -479,11 +515,13 @@ void __init acpi_table_upgrade(void)
 	if (data == NULL || size == 0)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (no = 0; no < NR_ACPI_INITRD_TABLES; no++) {
 		file = find_cpio_data(cpio_path, data, size, &offset);
 		if (!file.data)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		data += offset;
 		size -= offset;
 
diff --git a/drivers/acpi/thermal.c b/drivers/acpi/thermal.c
index 551b71a..fb0611a 100644
--- a/drivers/acpi/thermal.c
+++ b/drivers/acpi/thermal.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  acpi_thermal.c - ACPI Thermal Zone Driver ($Revision: 41 $)
  *
@@ -200,7 +202,9 @@ static int acpi_thermal_get_temperature(struct acpi_thermal *tz)
 	unsigned long long tmp;
 
 	if (!tz)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	tz->last_temperature = tz->temperature;
 
@@ -221,7 +225,9 @@ static int acpi_thermal_get_polling_frequency(struct acpi_thermal *tz)
 	unsigned long long tmp;
 
 	if (!tz)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	status = acpi_evaluate_integer(tz->device->handle, "_TZP", NULL, &tmp);
 	if (ACPI_FAILURE(status))
@@ -236,6 +242,7 @@ static int acpi_thermal_get_polling_frequency(struct acpi_thermal *tz)
 
 static int acpi_thermal_set_cooling_mode(struct acpi_thermal *tz, int mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tz)
 		return -EINVAL;
 
@@ -288,6 +295,7 @@ static int acpi_thermal_trips_update(struct acpi_thermal *tz, int flag)
 
 	/* Critical Shutdown */
 	if (flag & ACPI_TRIPS_CRITICAL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_evaluate_integer(tz->device->handle,
 				"_CRT", NULL, &tmp);
 		tz->trips.critical.temperature = tmp;
@@ -890,7 +898,9 @@ static int acpi_thermal_register_thermal_zone(struct acpi_thermal *tz)
 	int i;
 
 	if (tz->trips.critical.flags.valid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		trips++;
+}
 
 	if (tz->trips.hot.flags.valid)
 		trips++;
@@ -939,6 +949,7 @@ static int acpi_thermal_register_thermal_zone(struct acpi_thermal *tz)
 
 static void acpi_thermal_unregister_thermal_zone(struct acpi_thermal *tz)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_remove_link(&tz->device->dev.kobj, "thermal_zone");
 	sysfs_remove_link(&tz->thermal_zone->device.kobj, "device");
 	thermal_zone_device_unregister(tz->thermal_zone);
@@ -953,6 +964,7 @@ static void acpi_thermal_unregister_thermal_zone(struct acpi_thermal *tz)
 
 static void acpi_thermal_notify(struct acpi_device *device, u32 event)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_thermal *tz = acpi_driver_data(device);
 
 
@@ -1003,6 +1015,7 @@ static void acpi_thermal_aml_dependency_fix(struct acpi_thermal *tz)
 	acpi_evaluate_integer(handle, "_CRT", NULL, &value);
 	acpi_evaluate_integer(handle, "_HOT", NULL, &value);
 	acpi_evaluate_integer(handle, "_PSV", NULL, &value);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ACPI_THERMAL_MAX_ACTIVE; i++) {
 		char name[5] = { '_', 'A', 'C', ('0' + i), '\0' };
 		acpi_status status;
@@ -1020,7 +1033,9 @@ static int acpi_thermal_get_info(struct acpi_thermal *tz)
 
 
 	if (!tz)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	acpi_thermal_aml_dependency_fix(tz);
 
@@ -1060,6 +1075,7 @@ static int acpi_thermal_get_info(struct acpi_thermal *tz)
  */
 static void acpi_thermal_guess_offset(struct acpi_thermal *tz)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tz->trips.critical.flags.valid &&
 	    (tz->trips.critical.temperature % 5) == 1)
 		tz->kelvin_offset = 2731;
@@ -1069,6 +1085,7 @@ static void acpi_thermal_guess_offset(struct acpi_thermal *tz)
 
 static void acpi_thermal_check_fn(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_thermal *tz = container_of(work, struct acpi_thermal,
 					       thermal_check_work);
 	acpi_thermal_check(tz);
@@ -1081,7 +1098,9 @@ static int acpi_thermal_add(struct acpi_device *device)
 
 
 	if (!device)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	tz = kzalloc(sizeof(struct acpi_thermal), GFP_KERNEL);
 	if (!tz)
@@ -1119,6 +1138,7 @@ static int acpi_thermal_remove(struct acpi_device *device)
 {
 	struct acpi_thermal *tz = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!device || !acpi_driver_data(device))
 		return -EINVAL;
 
@@ -1144,7 +1164,9 @@ static int acpi_thermal_resume(struct device *dev)
 	int i, j, power_state, result;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	tz = acpi_driver_data(to_acpi_device(dev));
 	if (!tz)
@@ -1256,6 +1278,7 @@ static int __init acpi_thermal_init(void)
 	dmi_check_system(thermal_dmi_table);
 
 	if (off) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_notice(PREFIX "thermal control disabled\n");
 		return -ENODEV;
 	}
@@ -1263,19 +1286,24 @@ static int __init acpi_thermal_init(void)
 	acpi_thermal_pm_queue = alloc_workqueue("acpi_thermal_pm",
 						WQ_HIGHPRI | WQ_MEM_RECLAIM, 0);
 	if (!acpi_thermal_pm_queue)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	result = acpi_bus_register_driver(&acpi_thermal_driver);
 	if (result < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		destroy_workqueue(acpi_thermal_pm_queue);
 		return -ENODEV;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void __exit acpi_thermal_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_bus_unregister_driver(&acpi_thermal_driver);
 	destroy_workqueue(acpi_thermal_pm_queue);
 
diff --git a/drivers/acpi/utils.c b/drivers/acpi/utils.c
index 0a9e597..da1ec07 100644
--- a/drivers/acpi/utils.c
+++ b/drivers/acpi/utils.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  acpi_utils.c - ACPI Utility Functions ($Revision: 10 $)
  *
@@ -64,6 +66,7 @@ acpi_extract_package(union acpi_object *package,
 	u8 *tail = NULL;
 
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!package || (package->type != ACPI_TYPE_PACKAGE)
 	    || (package->package.count < 1)) {
 		printk(KERN_WARNING PREFIX "Invalid package argument\n");
@@ -289,17 +292,21 @@ acpi_evaluate_integer(acpi_handle handle,
 	struct acpi_buffer buffer = { 0, NULL };
 
 	if (!data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_BAD_PARAMETER;
+}
 
 	buffer.length = sizeof(union acpi_object);
 	buffer.pointer = &element;
 	status = acpi_evaluate_object(handle, pathname, arguments, &buffer);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_util_eval_error(handle, pathname, status);
 		return status;
 	}
 
 	if (element.type != ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_util_eval_error(handle, pathname, AE_BAD_DATA);
 		return AE_BAD_DATA;
 	}
@@ -327,6 +334,7 @@ acpi_evaluate_reference(acpi_handle handle,
 
 
 	if (!list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_BAD_PARAMETER;
 	}
 
@@ -406,7 +414,9 @@ acpi_get_physical_device_location(acpi_handle handle, struct acpi_pld_info **pld
 	status = acpi_evaluate_object(handle, "_PLD", NULL, &buffer);
 
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return status;
+}
 
 	output = buffer.pointer;
 
@@ -454,6 +464,7 @@ acpi_evaluate_ost(acpi_handle handle, u32 source_event, u32 status_code,
 	params[0].integer.value = source_event;
 	params[1].integer.value = status_code;
 	if (status_buf != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		params[2].buffer.pointer = status_buf->pointer;
 		params[2].buffer.length = status_buf->length;
 	} else {
@@ -503,6 +514,7 @@ acpi_handle_printk(const char *level, acpi_handle handle, const char *fmt, ...)
 	vaf.va = &args;
 
 	path = acpi_handle_path(handle);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	printk("%sACPI: %s: %pV", level, path ? path : "<n/a>" , &vaf);
 
 	va_end(args);
@@ -579,7 +591,9 @@ acpi_status acpi_evaluate_ej0(acpi_handle handle)
 
 	status = acpi_execute_simple_method(handle, "_EJ0", 1);
 	if (status == AE_NOT_FOUND)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_handle_warn(handle, "No _EJ0 support for device\n");
+}
 	else if (ACPI_FAILURE(status))
 		acpi_handle_warn(handle, "Eject failed (0x%x)\n", status);
 
@@ -598,6 +612,7 @@ acpi_status acpi_evaluate_lck(acpi_handle handle, int lock)
 	acpi_status status;
 
 	status = acpi_execute_simple_method(handle, "_LCK", !!lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ACPI_FAILURE(status) && status != AE_NOT_FOUND) {
 		if (lock)
 			acpi_handle_warn(handle,
@@ -644,6 +659,7 @@ acpi_evaluate_dsm(acpi_handle handle, const guid_t *guid, u64 rev, u64 func,
 	params[2].type = ACPI_TYPE_INTEGER;
 	params[2].integer.value = func;
 	if (argv4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		params[3] = *argv4;
 	} else {
 		params[3].type = ACPI_TYPE_PACKAGE;
@@ -653,12 +669,17 @@ acpi_evaluate_dsm(acpi_handle handle, const guid_t *guid, u64 rev, u64 func,
 
 	ret = acpi_evaluate_object(handle, "_DSM", &input, &buf);
 	if (ACPI_SUCCESS(ret))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (union acpi_object *)buf.pointer;
+}
 
 	if (ret != AE_NOT_FOUND)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_handle_warn(handle,
 				"failed to evaluate _DSM (0x%x)\n", ret);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(acpi_evaluate_dsm);
@@ -681,18 +702,30 @@ bool acpi_check_dsm(acpi_handle handle, const guid_t *guid, u64 rev, u64 funcs)
 	union acpi_object *obj;
 
 	if (funcs == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	obj = acpi_evaluate_dsm(handle, guid, rev, 0, NULL);
 	if (!obj)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/* For compatibility, old BIOSes may return an integer */
 	if (obj->type == ACPI_TYPE_INTEGER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask = obj->integer.value;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (obj->type == ACPI_TYPE_BUFFER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < obj->buffer.length && i < 8; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mask |= (((u64)obj->buffer.pointer[i]) << (i * 8));
+}
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_FREE(obj);
 
 	/*
@@ -700,8 +733,11 @@ bool acpi_check_dsm(acpi_handle handle, const guid_t *guid, u64 rev, u64 funcs)
 	 * function 0 for the specified GUID and revision.
 	 */
 	if ((mask & 0x1) && (mask & funcs) == funcs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 EXPORT_SYMBOL(acpi_check_dsm);
@@ -725,6 +761,7 @@ bool acpi_dev_found(const char *hid)
 	bool found = false;
 
 	mutex_lock(&acpi_device_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(acpi_device_bus_id, &acpi_bus_id_list, node)
 		if (!strcmp(acpi_device_bus_id->bus_id, hid)) {
 			found = true;
@@ -750,19 +787,29 @@ static int acpi_dev_present_cb(struct device *dev, void *data)
 	acpi_status status;
 
 	if (acpi_match_device_ids(adev, match->hid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (match->uid && (!adev->pnp.unique_id ||
 	    strcmp(adev->pnp.unique_id, match->uid)))
 		return 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (match->hrv == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	status = acpi_evaluate_integer(adev->handle, "_HRV", NULL, &hrv);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hrv == match->hrv;
 }
 
@@ -811,6 +858,7 @@ EXPORT_SYMBOL(acpi_video_backlight_string);
 
 static int __init acpi_backlight(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	strlcpy(acpi_video_backlight_string, str,
 		sizeof(acpi_video_backlight_string));
 	return 1;
@@ -830,7 +878,9 @@ int acpi_match_platform_list(const struct acpi_platform_list *plat)
 	int idx = 0;
 
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	for (; plat->oem_id[0]; plat++, idx++) {
 		if (ACPI_FAILURE(acpi_get_table_header(plat->table, 0, &hdr)))
@@ -839,9 +889,11 @@ int acpi_match_platform_list(const struct acpi_platform_list *plat)
 		if (strncmp(plat->oem_id, hdr.oem_id, ACPI_OEM_ID_SIZE))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (strncmp(plat->oem_table_id, hdr.oem_table_id, ACPI_OEM_TABLE_ID_SIZE))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((plat->pred == all_versions) ||
 		    (plat->pred == less_than_or_equal && hdr.oem_revision <= plat->oem_revision) ||
 		    (plat->pred == greater_than_or_equal && hdr.oem_revision >= plat->oem_revision) ||
@@ -849,6 +901,7 @@ int acpi_match_platform_list(const struct acpi_platform_list *plat)
 			return idx;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 EXPORT_SYMBOL(acpi_match_platform_list);
diff --git a/drivers/acpi/wakeup.c b/drivers/acpi/wakeup.c
index 9614126..fef05e9 100644
--- a/drivers/acpi/wakeup.c
+++ b/drivers/acpi/wakeup.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * wakeup.c - support wakeup devices
@@ -32,6 +34,7 @@ void acpi_enable_wakeup_devices(u8 sleep_state)
 {
 	struct list_head *node, *next;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_safe(node, next, &acpi_wakeup_device_list) {
 		struct acpi_device *dev =
 			container_of(node, struct acpi_device, wakeup_list);
@@ -59,6 +62,7 @@ void acpi_disable_wakeup_devices(u8 sleep_state)
 {
 	struct list_head *node, *next;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_safe(node, next, &acpi_wakeup_device_list) {
 		struct acpi_device *dev =
 			container_of(node, struct acpi_device, wakeup_list);
@@ -83,6 +87,7 @@ int __init acpi_wakeup_device_init(void)
 
 	mutex_lock(&acpi_device_lock);
 	list_for_each_safe(node, next, &acpi_wakeup_device_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct acpi_device *dev = container_of(node,
 						       struct acpi_device,
 						       wakeup_list);
diff --git a/drivers/acpi/x86/apple.c b/drivers/acpi/x86/apple.c
index 51b4cf9..5f55dc9 100644
--- a/drivers/acpi/x86/apple.c
+++ b/drivers/acpi/x86/apple.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * apple.c - Apple ACPI quirks
  * Copyright (C) 2017 Lukas Wunner <lukas@wunner.de>
@@ -35,33 +37,46 @@ void acpi_extract_apple_properties(struct acpi_device *adev)
 	void *free_space;
 
 	if (!x86_apple_machine)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	props = acpi_evaluate_dsm_typed(adev->handle, &apple_prp_guid, 1, 0,
 					NULL, ACPI_TYPE_BUFFER);
 	if (!props)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!props->buffer.length)
 		goto out_free;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (props->buffer.pointer[0] != 3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_handle_info(adev->handle, FW_INFO
 				 "unsupported properties version %*ph\n",
 				 props->buffer.length, props->buffer.pointer);
 		goto out_free;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_FREE(props);
 	props = acpi_evaluate_dsm_typed(adev->handle, &apple_prp_guid, 1, 1,
 					NULL, ACPI_TYPE_PACKAGE);
 	if (!props)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	numprops = props->package.count / 2;
 	if (!numprops)
 		goto out_free;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	valid = kcalloc(BITS_TO_LONGS(numprops), sizeof(long), GFP_KERNEL);
 	if (!valid)
 		goto out_free;
@@ -76,17 +91,23 @@ void acpi_extract_apple_properties(struct acpi_device *adev)
 		     val->type != ACPI_TYPE_BUFFER))
 			continue; /* skip invalid properties */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__set_bit(i, valid);
 		newsize += key->string.length + 1;
 		if ( val->type == ACPI_TYPE_BUFFER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			newsize += val->buffer.length;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	numvalid = bitmap_weight(valid, numprops);
 	if (numprops > numvalid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_handle_info(adev->handle, FW_INFO
 				 "skipped %u properties: wrong type\n",
 				 numprops - numvalid);
+}
 	if (numvalid == 0)
 		goto out_free;
 
@@ -102,6 +123,7 @@ void acpi_extract_apple_properties(struct acpi_device *adev)
 	newprops->package.elements = &newprops[1];
 	free_space = &newprops[1 + 3 * numvalid];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_set_bit(i, valid, numprops) {
 		union acpi_object *key = &props->package.elements[i * 2];
 		union acpi_object *val = &props->package.elements[i * 2 + 1];
@@ -115,21 +137,27 @@ void acpi_extract_apple_properties(struct acpi_device *adev)
 		newprops[k].type = ACPI_TYPE_STRING;
 		newprops[k].string.length = key->string.length;
 		newprops[k].string.pointer = free_space;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(free_space, key->string.pointer, key->string.length);
 		free_space += key->string.length + 1;
 
 		newprops[v].type = val->type;
 		if (val->type == ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			newprops[v].integer.value = val->integer.value;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			newprops[v].buffer.length = val->buffer.length;
 			newprops[v].buffer.pointer = free_space;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(free_space, val->buffer.pointer,
 			       val->buffer.length);
 			free_space += val->buffer.length;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		j++; /* count valid properties */
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(free_space != (void *)newprops + newsize);
 
 	adev->data.properties = newprops;
diff --git a/drivers/acpi/x86/utils.c b/drivers/acpi/x86/utils.c
index b4fbb99..3eb9b4b 100644
--- a/drivers/acpi/x86/utils.c
+++ b/drivers/acpi/x86/utils.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * X86 ACPI Utility Functions
  *
@@ -98,22 +100,29 @@ bool acpi_device_always_present(struct acpi_device *adev)
 		if (acpi_match_device_ids(adev, always_present_ids[i].hid))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!adev->pnp.unique_id ||
 		    strcmp(adev->pnp.unique_id, always_present_ids[i].uid))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!x86_match_cpu(always_present_ids[i].cpu_ids))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (always_present_ids[i].dmi_ids[0].matches[0].slot &&
 		    !dmi_check_system(always_present_ids[i].dmi_ids))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (old_status != ACPI_STA_DEFAULT) /* Log only once */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_info(&adev->dev,
 				 "Device [%s] is in always present list\n",
 				 adev->pnp.bus_id);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = true;
 		break;
 	}
diff --git a/drivers/ata/ahci.c b/drivers/ata/ahci.c
index bc013f7..20698e4 100644
--- a/drivers/ata/ahci.c
+++ b/drivers/ata/ahci.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ahci.c - AHCI SATA support
  *
@@ -602,6 +604,7 @@ static void ahci_pci_save_initial_config(struct pci_dev *pdev,
 					 struct ahci_host_priv *hpriv)
 {
 	if (pdev->vendor == PCI_VENDOR_ID_JMICRON && pdev->device == 0x2361) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&pdev->dev, "JMB361 has only one port\n");
 		hpriv->force_port_map = 1;
 	}
@@ -612,10 +615,14 @@ static void ahci_pci_save_initial_config(struct pci_dev *pdev,
 	 * presence register, as bit 4 (counting from 0)
 	 */
 	if (hpriv->flags & AHCI_HFLAG_MV_PATA) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pdev->device == 0x6121)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hpriv->mask_port_map = 0x3;
+}
 		else
 			hpriv->mask_port_map = 0xf;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&pdev->dev,
 			  "Disabling your PATA port. Use the boot option 'ahci.marvell_enable=0' to avoid this.\n");
 	}
@@ -630,7 +637,9 @@ static int ahci_pci_reset_controller(struct ata_host *host)
 
 	rc = ahci_reset_controller(host);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	if (pdev->vendor == PCI_VENDOR_ID_INTEL) {
 		struct ahci_host_priv *hpriv = host->private_data;
@@ -644,6 +653,7 @@ static int ahci_pci_reset_controller(struct ata_host *host)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -656,10 +666,14 @@ static void ahci_pci_init_controller(struct ata_host *host)
 	int mv;
 
 	if (hpriv->flags & AHCI_HFLAG_MV_PATA) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pdev->device == 0x6121)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mv = 2;
+}
 		else
 			mv = 4;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port_mmio = __ahci_port_base(host, mv);
 
 		writel(0, port_mmio + PORT_IRQ_MASK);
@@ -668,7 +682,9 @@ static void ahci_pci_init_controller(struct ata_host *host)
 		tmp = readl(port_mmio + PORT_IRQ_STAT);
 		VPRINTK("PORT_IRQ_STAT 0x%x\n", tmp);
 		if (tmp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			writel(tmp, port_mmio + PORT_IRQ_STAT);
+}
 	}
 
 	ahci_init_controller(host);
@@ -736,6 +752,7 @@ static int ahci_p5wdh_hardreset(struct ata_link *link, unsigned int *class,
 	 * suffice while making probing snappish enough.
 	 */
 	if (online) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = ata_wait_after_reset(link, jiffies + 2 * HZ,
 					  ahci_check_ready);
 		if (rc)
@@ -762,6 +779,7 @@ static int ahci_p5wdh_hardreset(struct ata_link *link, unsigned int *class,
 static int ahci_avn_hardreset(struct ata_link *link, unsigned int *class,
 			      unsigned long deadline)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const unsigned long *timing = sata_ehc_deb_timing(&link->eh_context);
 	struct ata_port *ap = link->ap;
 	struct ahci_port_priv *pp = ap->private_data;
@@ -836,6 +854,7 @@ static void ahci_pci_disable_interrupts(struct ata_host *host)
 
 static int ahci_pci_device_runtime_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	struct ata_host *host = pci_get_drvdata(pdev);
 
@@ -845,6 +864,7 @@ static int ahci_pci_device_runtime_suspend(struct device *dev)
 
 static int ahci_pci_device_runtime_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	struct ata_host *host = pci_get_drvdata(pdev);
 	int rc;
@@ -859,6 +879,7 @@ static int ahci_pci_device_runtime_resume(struct device *dev)
 #ifdef CONFIG_PM_SLEEP
 static int ahci_pci_device_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	struct ata_host *host = pci_get_drvdata(pdev);
 	struct ahci_host_priv *hpriv = host->private_data;
@@ -875,6 +896,7 @@ static int ahci_pci_device_suspend(struct device *dev)
 
 static int ahci_pci_device_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	struct ata_host *host = pci_get_drvdata(pdev);
 	int rc;
@@ -908,14 +930,19 @@ static int ahci_configure_dma_masks(struct pci_dev *pdev, int using_dac)
 	 * value, don't extend it here. This happens on STA2X11, for example.
 	 */
 	if (pdev->dma_mask && pdev->dma_mask < DMA_BIT_MASK(32))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (using_dac &&
 	    !dma_set_mask(&pdev->dev, DMA_BIT_MASK(64))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(64));
 		if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rc = dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));
 			if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev_err(&pdev->dev,
 					"64-bit DMA enable failed\n");
 				return rc;
@@ -924,16 +951,19 @@ static int ahci_configure_dma_masks(struct pci_dev *pdev, int using_dac)
 	} else {
 		rc = dma_set_mask(&pdev->dev, DMA_BIT_MASK(32));
 		if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(&pdev->dev, "32-bit DMA enable failed\n");
 			return rc;
 		}
 		rc = dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));
 		if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(&pdev->dev,
 				"32-bit consistent DMA enable failed\n");
 			return rc;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -945,11 +975,18 @@ static void ahci_pci_print_info(struct ata_host *host)
 
 	pci_read_config_word(pdev, 0x0a, &cc);
 	if (cc == PCI_CLASS_STORAGE_IDE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scc_s = "IDE";
+}
 	else if (cc == PCI_CLASS_STORAGE_SATA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scc_s = "SATA";
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (cc == PCI_CLASS_STORAGE_RAID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scc_s = "RAID";
+}
 	else
 		scc_s = "unknown";
 
@@ -1126,15 +1163,18 @@ static bool ahci_sb600_enable_64bit(struct pci_dev *pdev)
 	    !match)
 		return false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!match->driver_data)
 		goto enable_64bit;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dmi_get_date(DMI_BIOS_DATE, &year, &month, &date);
 	snprintf(buf, sizeof(buf), "%04d%02d%02d", year, month, date);
 
 	if (strcmp(buf, match->driver_data) >= 0)
 		goto enable_64bit;
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(&pdev->dev,
 			 "%s: BIOS too old, forcing 32bit DMA, update BIOS\n",
 			 match->ident);
@@ -1178,6 +1218,7 @@ static bool ahci_broken_system_poweroff(struct pci_dev *pdev)
 		return slot == PCI_SLOT(pdev->devfn);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1257,8 +1298,11 @@ static bool ahci_broken_suspend(struct pci_dev *pdev)
 	char buf[9];
 
 	if (!dmi || pdev->bus->number || pdev->devfn != PCI_DEVFN(0x1f, 2))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dmi_get_date(DMI_BIOS_DATE, &year, &month, &date);
 	snprintf(buf, sizeof(buf), "%04d%02d%02d", year, month, date);
 
@@ -1308,10 +1352,14 @@ static bool ahci_broken_online(struct pci_dev *pdev)
 	unsigned int val;
 
 	if (!dmi)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	val = (unsigned long)dmi->driver_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pdev->bus->number == (val >> 8) && pdev->devfn == (val & 0xff);
 }
 
@@ -1353,17 +1401,22 @@ static void ahci_gtf_filter_workaround(struct ata_host *host)
 	int i;
 
 	if (!dmi)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	filter = (unsigned long)dmi->driver_data;
 	dev_info(host->dev, "applying extra ACPI _GTF filter 0x%x for %s\n",
 		 filter, dmi->ident);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < host->n_ports; i++) {
 		struct ata_port *ap = host->ports[i];
 		struct ata_link *link;
 		struct ata_device *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_for_each_link(link, ap, EDGE)
 			ata_for_each_dev(dev, link, ALL)
 				dev->gtf_filter |= filter;
@@ -1400,8 +1453,10 @@ static void acer_sa5_271_workaround(struct ahci_host_priv *hpriv,
 	};
 
 	if (dmi_check_system(sysids)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&pdev->dev, "enabling Acer Switch Alpha 12 workaround\n");
 		if ((hpriv->saved_cap & 0xC734FF00) == 0xC734FF00) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hpriv->port_map = 0x7;
 			hpriv->cap = 0xC734FF02;
 		}
@@ -1461,10 +1516,14 @@ static void ahci_remap_check(struct pci_dev *pdev, int bar,
 	    !(readl(hpriv->mmio + AHCI_VSCAP) & 1))
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cap = readq(hpriv->mmio + AHCI_REMAP_CAP);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < AHCI_MAX_REMAP; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((cap & (1 << i)) == 0)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (readl(hpriv->mmio + ahci_remap_dcc(i))
 				!= PCI_CLASS_STORAGE_EXPRESS)
 			continue;
@@ -1473,9 +1532,13 @@ static void ahci_remap_check(struct pci_dev *pdev, int bar,
 		count++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_warn(&pdev->dev, "Found %d remapped NVMe devices.\n", count);
 	dev_warn(&pdev->dev,
 		 "Switch your BIOS from RAID to AHCI mode to use them.\n");
@@ -1489,6 +1552,7 @@ static void ahci_remap_check(struct pci_dev *pdev, int bar,
 
 static int ahci_get_irq_vector(struct ata_host *host, int port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_irq_vector(to_pci_dev(host->dev), port);
 }
 
@@ -1498,7 +1562,9 @@ static int ahci_init_msi(struct pci_dev *pdev, unsigned int n_ports,
 	int nvec;
 
 	if (hpriv->flags & AHCI_HFLAG_NO_MSI)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/*
 	 * If number of MSIs is less than number of ports then Sharing Last
@@ -1509,7 +1575,9 @@ static int ahci_init_msi(struct pci_dev *pdev, unsigned int n_ports,
 		nvec = pci_alloc_irq_vectors(pdev, n_ports, INT_MAX,
 				PCI_IRQ_MSIX | PCI_IRQ_MSI);
 		if (nvec > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!(readl(hpriv->mmio + HOST_CTL) & HOST_MRSM)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				hpriv->get_irq_vector = ahci_get_irq_vector;
 				hpriv->flags |= AHCI_HFLAG_MULTI_MSI;
 				return nvec;
@@ -1531,7 +1599,10 @@ static int ahci_init_msi(struct pci_dev *pdev, unsigned int n_ports,
 	 */
 	nvec = pci_alloc_irq_vectors(pdev, 1, 1, PCI_IRQ_MSI);
 	if (nvec == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return nvec;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_alloc_irq_vectors(pdev, 1, 1, PCI_IRQ_MSIX);
 }
 
@@ -1548,6 +1619,7 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 
 	VPRINTK("ENTER\n");
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON((int)ATA_MAX_QUEUE > AHCI_MAX_CMDS);
 
 	ata_print_version_once(&pdev->dev, DRV_VERSION);
@@ -1556,32 +1628,46 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 	   can drive them all so if both drivers are selected make sure
 	   AHCI stays out of the way */
 	if (pdev->vendor == PCI_VENDOR_ID_MARVELL && !marvell_enable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* Apple BIOS on MCP89 prevents us using AHCI */
 	if (is_mcp89_apple(pdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ahci_mcp89_apple_enable(pdev);
+}
 
 	/* Promise's PDC42819 is a SAS/SATA controller that has an AHCI mode.
 	 * At the moment, we can only use the AHCI mode. Let the users know
 	 * that for SAS drives they're out of luck.
 	 */
 	if (pdev->vendor == PCI_VENDOR_ID_PROMISE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&pdev->dev,
 			 "PDC42819 can only drive SATA devices with this driver\n");
+}
 
 	/* Some devices use non-standard BARs */
 	if (pdev->vendor == PCI_VENDOR_ID_STMICRO && pdev->device == 0xCC06)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ahci_pci_bar = AHCI_PCI_BAR_STA2X11;
+}
 	else if (pdev->vendor == 0x1c44 && pdev->device == 0x8000)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ahci_pci_bar = AHCI_PCI_BAR_ENMOTUS;
+}
 	else if (pdev->vendor == 0x177d && pdev->device == 0xa01c)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ahci_pci_bar = AHCI_PCI_BAR_CAVIUM;
+}
 
 	/* acquire resources */
 	rc = pcim_enable_device(pdev);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	if (pdev->vendor == PCI_VENDOR_ID_INTEL &&
 	    (pdev->device == 0x2652 || pdev->device == 0x2653)) {
@@ -1593,6 +1679,7 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 		 */
 		pci_read_config_byte(pdev, ICH_MAP, &map);
 		if (map & 0x3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_info(&pdev->dev,
 				 "controller is in combined mode, can't enable AHCI mode\n");
 			return -ENODEV;
@@ -1604,13 +1691,20 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 	 */
 	rc = pcim_iomap_regions_request_all(pdev, 1 << ahci_pci_bar, DRV_NAME);
 	if (rc == -EBUSY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcim_pin_device(pdev);
+}
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hpriv = devm_kzalloc(dev, sizeof(*hpriv), GFP_KERNEL);
 	if (!hpriv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	hpriv->flags |= (unsigned long)pi.private_data;
 
 	/* MCP65 revision A1 and A2 can't do MSI */
@@ -1620,11 +1714,15 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 
 	/* SB800 does NOT need the workaround to ignore SERR_INTERNAL */
 	if (board_id == board_ahci_sb700 && pdev->revision >= 0x40)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hpriv->flags &= ~AHCI_HFLAG_IGN_SERR_INTERNAL;
+}
 
 	/* only some SB600s can do 64bit DMA */
 	if (ahci_sb600_enable_64bit(pdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hpriv->flags &= ~AHCI_HFLAG_32BIT_ONLY;
+}
 
 	hpriv->mmio = pcim_iomap_table(pdev)[ahci_pci_bar];
 
@@ -1633,7 +1731,9 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 
 	/* must set flag prior to save config in order to take effect */
 	if (ahci_broken_devslp(pdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hpriv->flags |= AHCI_HFLAG_NO_DEVSLP;
+}
 
 #ifdef CONFIG_ARM64
 	if (pdev->vendor == 0x177d && pdev->device == 0xa01c)
@@ -1665,23 +1765,28 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 	}
 
 	if (hpriv->cap & HOST_CAP_PMP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pi.flags |= ATA_FLAG_PMP;
+}
 
 	ahci_set_em_messages(hpriv, &pi);
 
 	if (ahci_broken_system_poweroff(pdev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pi.flags |= ATA_FLAG_NO_POWEROFF_SPINDOWN;
 		dev_info(&pdev->dev,
 			"quirky BIOS, skipping spindown on poweroff\n");
 	}
 
 	if (ahci_broken_suspend(pdev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hpriv->flags |= AHCI_HFLAG_NO_SUSPEND;
 		dev_warn(&pdev->dev,
 			 "BIOS update required for suspend/resume\n");
 	}
 
 	if (ahci_broken_online(pdev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hpriv->flags |= AHCI_HFLAG_SRST_TOUT_IS_OFFLINE;
 		dev_info(&pdev->dev,
 			 "online status unreliable, applying workaround\n");
@@ -1700,7 +1805,9 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 
 	host = ata_host_alloc_pinfo(&pdev->dev, ppi, n_ports);
 	if (!host)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	host->private_data = hpriv;
 
 	if (ahci_init_msi(pdev, n_ports, hpriv) < 0) {
@@ -1715,7 +1822,9 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 		dev_info(&pdev->dev, "SSS flag set, parallel bus scan disabled\n");
 
 	if (pi.flags & ATA_FLAG_EM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ahci_reset_em(host);
+}
 
 	for (i = 0; i < host->n_ports; i++) {
 		struct ata_port *ap = host->ports[i];
@@ -1726,12 +1835,16 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 
 		/* set enclosure management message type */
 		if (ap->flags & ATA_FLAG_EM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ap->em_message_type = hpriv->em_msg_type;
+}
 
 
 		/* disabled/not-implemented port */
 		if (!(hpriv->port_map & (1 << i)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ap->ops = &ata_dummy_port_ops;
+}
 	}
 
 	/* apply workaround for ASUS P5W DH Deluxe mainboard */
@@ -1743,11 +1856,15 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 	/* initialize adapter */
 	rc = ahci_configure_dma_masks(pdev, hpriv->cap & HOST_CAP_64);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	rc = ahci_pci_reset_controller(host);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	ahci_pci_init_controller(host);
 	ahci_pci_print_info(host);
@@ -1756,7 +1873,9 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 
 	rc = ahci_host_activate(host, &ahci_sht);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	pm_runtime_put_noidle(&pdev->dev);
 	return 0;
@@ -1764,6 +1883,7 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 
 static void ahci_remove_one(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_runtime_get_noresume(&pdev->dev);
 	ata_pci_remove_one(pdev);
 }
diff --git a/drivers/ata/ahci.h b/drivers/ata/ahci.h
index 8b61123..ae455cc 100644
--- a/drivers/ata/ahci.h
+++ b/drivers/ata/ahci.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ahci.h - Common AHCI SATA definitions and declarations
  *
diff --git a/drivers/ata/ata_generic.c b/drivers/ata/ata_generic.c
index 9ff545c..c265b83 100644
--- a/drivers/ata/ata_generic.c
+++ b/drivers/ata/ata_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ata_generic.c - Generic PATA/SATA controller driver.
  *  Copyright 2005 Red Hat Inc, all rights reserved.
diff --git a/drivers/ata/ata_piix.c b/drivers/ata/ata_piix.c
index b702c20..72851f9 100644
--- a/drivers/ata/ata_piix.c
+++ b/drivers/ata/ata_piix.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *    ata_piix.c - Intel PATA/SATA controllers
  *
@@ -502,6 +504,7 @@ static const struct ich_laptop ich_laptop[] = {
 
 static int piix_port_start(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(ap->flags & PIIX_FLAG_PIO16))
 		ap->pflags |= ATA_PFLAG_PIO32 | ATA_PFLAG_PIO32CHANGE;
 
@@ -521,6 +524,7 @@ static int piix_port_start(struct ata_port *ap)
 
 static int ich_pata_cable_detect(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(ap->host->dev);
 	struct piix_host_priv *hpriv = ap->host->private_data;
 	const struct ich_laptop *lap = &ich_laptop[0];
@@ -554,6 +558,7 @@ static int ich_pata_cable_detect(struct ata_port *ap)
 static int piix_pata_prereset(struct ata_link *link, unsigned long deadline)
 {
 	struct ata_port *ap = link->ap;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(ap->host->dev);
 
 	if (!pci_test_config_bits(pdev, &piix_enable_bits[ap->port_no]))
@@ -566,6 +571,7 @@ static DEFINE_SPINLOCK(piix_lock);
 static void piix_set_timings(struct ata_port *ap, struct ata_device *adev,
 			     u8 pio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev	= to_pci_dev(ap->host->dev);
 	unsigned long flags;
 	unsigned int is_slave	= (adev->devno != 0);
@@ -662,6 +668,7 @@ static void piix_set_timings(struct ata_port *ap, struct ata_device *adev,
 
 static void piix_set_piomode(struct ata_port *ap, struct ata_device *adev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	piix_set_timings(ap, adev, adev->pio_mode - XFER_PIO_0);
 }
 
@@ -679,6 +686,7 @@ static void piix_set_piomode(struct ata_port *ap, struct ata_device *adev)
 
 static void do_pata_set_dmamode(struct ata_port *ap, struct ata_device *adev, int isich)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev	= to_pci_dev(ap->host->dev);
 	unsigned long flags;
 	u8 speed		= adev->dma_mode;
@@ -757,6 +765,7 @@ static void do_pata_set_dmamode(struct ata_port *ap, struct ata_device *adev, in
 
 static void piix_set_dmamode(struct ata_port *ap, struct ata_device *adev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	do_pata_set_dmamode(ap, adev, 0);
 }
 
@@ -773,6 +782,7 @@ static void piix_set_dmamode(struct ata_port *ap, struct ata_device *adev)
 
 static void ich_set_dmamode(struct ata_port *ap, struct ata_device *adev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	do_pata_set_dmamode(ap, adev, 1);
 }
 
@@ -805,7 +815,9 @@ static int piix_sidpr_scr_read(struct ata_link *link,
 	struct piix_host_priv *hpriv = link->ap->host->private_data;
 
 	if (reg >= ARRAY_SIZE(piix_sidx_map))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	piix_sidpr_sel(link, reg);
 	*val = ioread32(hpriv->sidpr + PIIX_SIDPR_DATA);
@@ -818,7 +830,9 @@ static int piix_sidpr_scr_write(struct ata_link *link,
 	struct piix_host_priv *hpriv = link->ap->host->private_data;
 
 	if (reg >= ARRAY_SIZE(piix_sidx_map))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	piix_sidpr_sel(link, reg);
 	iowrite32(val, hpriv->sidpr + PIIX_SIDPR_DATA);
@@ -828,11 +842,13 @@ static int piix_sidpr_scr_write(struct ata_link *link,
 static int piix_sidpr_set_lpm(struct ata_link *link, enum ata_lpm_policy policy,
 			      unsigned hints)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sata_link_scr_lpm(link, policy, false);
 }
 
 static bool piix_irq_check(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(!ap->ioaddr.bmdma_addr))
 		return false;
 
@@ -978,7 +994,9 @@ static int piix_broken_suspend(void)
 	int i;
 
 	if (dmi_check_system(sysids))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	for (i = 0; i < ARRAY_SIZE(oemstrs); i++)
 		if (dmi_find_device(DMI_DEV_TYPE_OEM_STRING, oemstrs[i], NULL))
@@ -1004,6 +1022,7 @@ static int piix_broken_suspend(void)
 
 static int piix_pci_device_suspend(struct pci_dev *pdev, pm_message_t mesg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_host *host = pci_get_drvdata(pdev);
 	unsigned long flags;
 	int rc = 0;
@@ -1039,6 +1058,7 @@ static int piix_pci_device_suspend(struct pci_dev *pdev, pm_message_t mesg)
 
 static int piix_pci_device_resume(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_host *host = pci_get_drvdata(pdev);
 	unsigned long flags;
 	int rc;
@@ -1072,6 +1092,7 @@ static int piix_pci_device_resume(struct pci_dev *pdev)
 
 static u8 piix_vmw_bmdma_status(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ata_bmdma_status(ap) & ~ATA_DMA_ERR;
 }
 
@@ -1331,6 +1352,7 @@ static int piix_check_450nx_errata(struct pci_dev *ata_dev)
 	u16 cfg;
 	int no_piix_dma = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((pdev = pci_get_device(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82454NX, pdev)) != NULL) {
 		/* Look for 450NX PXB. Check for problem configurations
 		   A PCI quirk checks bit 6 already */
@@ -1354,6 +1376,7 @@ static int piix_check_450nx_errata(struct pci_dev *ata_dev)
 static void piix_init_pcs(struct ata_host *host,
 			  const struct piix_map_db *map_db)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(host->dev);
 	u16 pcs, new_pcs;
 
@@ -1382,6 +1405,7 @@ static const int *piix_init_sata_map(struct pci_dev *pdev,
 
 	map = map_db->map[map_value & map_db->mask];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < 4; i++) {
 		switch (map[i]) {
 		case RV:
@@ -1417,6 +1441,7 @@ static const int *piix_init_sata_map(struct pci_dev *pdev,
 
 static bool piix_no_sidpr(struct ata_host *host)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(host->dev);
 
 	/*
@@ -1450,6 +1475,7 @@ static bool piix_no_sidpr(struct ata_host *host)
 
 static int piix_init_sidpr(struct ata_host *host)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(host->dev);
 	struct piix_host_priv *hpriv = host->private_data;
 	struct ata_link *link0 = &host->ports[0]->link;
@@ -1532,6 +1558,7 @@ static void piix_iocfg_bit18_quirk(struct ata_host *host)
 
 		{ }	/* terminate list */
 	};
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(host->dev);
 	struct piix_host_priv *hpriv = host->private_data;
 
@@ -1581,6 +1608,7 @@ static bool piix_broken_system_poweroff(struct pci_dev *pdev)
 		return slot == PCI_SLOT(pdev->devfn);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1666,6 +1694,7 @@ static int piix_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 	struct piix_host_priv *hpriv;
 	int rc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_print_version_once(&pdev->dev, DRV_VERSION);
 
 	/* no hotplugging support for later devices (FIXME) */
@@ -1763,6 +1792,7 @@ static int piix_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 
 static void piix_remove_one(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_host *host = pci_get_drvdata(pdev);
 	struct piix_host_priv *hpriv = host->private_data;
 
@@ -1789,7 +1819,9 @@ static int __init piix_init(void)
 	DPRINTK("pci_register_driver\n");
 	rc = pci_register_driver(&piix_pci_driver);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	in_module_init = 0;
 
@@ -1799,6 +1831,7 @@ static int __init piix_init(void)
 
 static void __exit piix_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_unregister_driver(&piix_pci_driver);
 }
 
diff --git a/drivers/ata/libahci.c b/drivers/ata/libahci.c
index 3e286d8..6521740 100644
--- a/drivers/ata/libahci.c
+++ b/drivers/ata/libahci.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  libahci.c - Common AHCI SATA low-level routines
  *
@@ -209,20 +211,27 @@ static void ahci_enable_ahci(void __iomem *mmio)
 	/* turn on AHCI_EN */
 	tmp = readl(mmio + HOST_CTL);
 	if (tmp & HOST_AHCI_EN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Some controllers need AHCI_EN to be written multiple times.
 	 * Try a few times before giving up.
 	 */
 	for (i = 0; i < 5; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tmp |= HOST_AHCI_EN;
 		writel(tmp, mmio + HOST_CTL);
 		tmp = readl(mmio + HOST_CTL);	/* flush && sanity check */
 		if (tmp & HOST_AHCI_EN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msleep(10);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(1);
 }
 
@@ -248,12 +257,14 @@ static int ahci_rpm_get_port(struct ata_port *ap)
  */
 static void ahci_rpm_put_port(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_runtime_put(ap->dev);
 }
 
 static ssize_t ahci_show_host_caps(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct ata_port *ap = ata_shost_to_port(shost);
 	struct ahci_host_priv *hpriv = ap->host->private_data;
@@ -264,6 +275,7 @@ static ssize_t ahci_show_host_caps(struct device *dev,
 static ssize_t ahci_show_host_cap2(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct ata_port *ap = ata_shost_to_port(shost);
 	struct ahci_host_priv *hpriv = ap->host->private_data;
@@ -274,6 +286,7 @@ static ssize_t ahci_show_host_cap2(struct device *dev,
 static ssize_t ahci_show_host_version(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct ata_port *ap = ata_shost_to_port(shost);
 	struct ahci_host_priv *hpriv = ap->host->private_data;
@@ -284,6 +297,7 @@ static ssize_t ahci_show_host_version(struct device *dev,
 static ssize_t ahci_show_port_cmd(struct device *dev,
 				  struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct ata_port *ap = ata_shost_to_port(shost);
 	void __iomem *port_mmio = ahci_port_base(ap);
@@ -299,6 +313,7 @@ static ssize_t ahci_show_port_cmd(struct device *dev,
 static ssize_t ahci_read_em_buffer(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct ata_port *ap = ata_shost_to_port(shost);
 	struct ahci_host_priv *hpriv = ap->host->private_data;
@@ -359,6 +374,7 @@ static ssize_t ahci_store_em_buffer(struct device *dev,
 				    struct device_attribute *attr,
 				    const char *buf, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct ata_port *ap = ata_shost_to_port(shost);
 	struct ahci_host_priv *hpriv = ap->host->private_data;
@@ -402,6 +418,7 @@ static ssize_t ahci_store_em_buffer(struct device *dev,
 static ssize_t ahci_show_em_supported(struct device *dev,
 				      struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct ata_port *ap = ata_shost_to_port(shost);
 	struct ahci_host_priv *hpriv = ap->host->private_data;
@@ -462,32 +479,38 @@ void ahci_save_initial_config(struct device *dev, struct ahci_host_priv *hpriv)
 
 	/* some chips have errata preventing 64bit use */
 	if ((cap & HOST_CAP_64) && (hpriv->flags & AHCI_HFLAG_32BIT_ONLY)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(dev, "controller can't do 64bit DMA, forcing 32bit\n");
 		cap &= ~HOST_CAP_64;
 	}
 
 	if ((cap & HOST_CAP_NCQ) && (hpriv->flags & AHCI_HFLAG_NO_NCQ)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(dev, "controller can't do NCQ, turning off CAP_NCQ\n");
 		cap &= ~HOST_CAP_NCQ;
 	}
 
 	if (!(cap & HOST_CAP_NCQ) && (hpriv->flags & AHCI_HFLAG_YES_NCQ)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(dev, "controller can do NCQ, turning on CAP_NCQ\n");
 		cap |= HOST_CAP_NCQ;
 	}
 
 	if ((cap & HOST_CAP_PMP) && (hpriv->flags & AHCI_HFLAG_NO_PMP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(dev, "controller can't do PMP, turning off CAP_PMP\n");
 		cap &= ~HOST_CAP_PMP;
 	}
 
 	if ((cap & HOST_CAP_SNTF) && (hpriv->flags & AHCI_HFLAG_NO_SNTF)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(dev,
 			 "controller can't do SNTF, turning off CAP_SNTF\n");
 		cap &= ~HOST_CAP_SNTF;
 	}
 
 	if ((cap2 & HOST_CAP2_SDS) && (hpriv->flags & AHCI_HFLAG_NO_DEVSLP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(dev,
 			 "controller can't do DEVSLP, turning off\n");
 		cap2 &= ~HOST_CAP2_SDS;
@@ -495,21 +518,25 @@ void ahci_save_initial_config(struct device *dev, struct ahci_host_priv *hpriv)
 	}
 
 	if (!(cap & HOST_CAP_FBS) && (hpriv->flags & AHCI_HFLAG_YES_FBS)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(dev, "controller can do FBS, turning on CAP_FBS\n");
 		cap |= HOST_CAP_FBS;
 	}
 
 	if ((cap & HOST_CAP_FBS) && (hpriv->flags & AHCI_HFLAG_NO_FBS)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(dev, "controller can't do FBS, turning off CAP_FBS\n");
 		cap &= ~HOST_CAP_FBS;
 	}
 
 	if (!(cap & HOST_CAP_ALPM) && (hpriv->flags & AHCI_HFLAG_YES_ALPM)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(dev, "controller can do ALPM, turning on CAP_ALPM\n");
 		cap |= HOST_CAP_ALPM;
 	}
 
 	if (hpriv->force_port_map && port_map != hpriv->force_port_map) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(dev, "forcing port_map 0x%x -> 0x%x\n",
 			 port_map, hpriv->force_port_map);
 		port_map = hpriv->force_port_map;
@@ -517,6 +544,7 @@ void ahci_save_initial_config(struct device *dev, struct ahci_host_priv *hpriv)
 	}
 
 	if (hpriv->mask_port_map) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(dev, "masking port_map 0x%x -> 0x%x\n",
 			port_map,
 			port_map & hpriv->mask_port_map);
@@ -544,6 +572,7 @@ void ahci_save_initial_config(struct device *dev, struct ahci_host_priv *hpriv)
 
 	/* fabricate port_map from cap.nr_ports for < AHCI 1.3 */
 	if (!port_map && vers < 0x10300) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port_map = (1 << ahci_nr_ports(cap)) - 1;
 		dev_warn(dev, "forcing PORTS_IMPL to 0x%x\n", port_map);
 
@@ -581,7 +610,9 @@ static void ahci_restore_initial_config(struct ata_host *host)
 
 	writel(hpriv->saved_cap, mmio + HOST_CAP);
 	if (hpriv->saved_cap2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		writel(hpriv->saved_cap2, mmio + HOST_CAP2);
+}
 	writel(hpriv->saved_port_map, mmio + HOST_PORTS_IMPL);
 	(void) readl(mmio + HOST_PORTS_IMPL);	/* flush */
 }
@@ -600,6 +631,7 @@ static unsigned ahci_scr_offset(struct ata_port *ap, unsigned int sc_reg)
 	if (sc_reg < ARRAY_SIZE(offset) &&
 	    (sc_reg != SCR_NOTIFICATION || (hpriv->cap & HOST_CAP_SNTF)))
 		return offset[sc_reg];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -612,6 +644,7 @@ static int ahci_scr_read(struct ata_link *link, unsigned int sc_reg, u32 *val)
 		*val = readl(port_mmio + offset);
 		return 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EINVAL;
 }
 
@@ -624,6 +657,7 @@ static int ahci_scr_write(struct ata_link *link, unsigned int sc_reg, u32 val)
 		writel(val, port_mmio + offset);
 		return 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EINVAL;
 }
 
@@ -655,6 +689,7 @@ int ahci_stop_engine(struct ata_port *ap)
 	if ((hpriv->flags & AHCI_HFLAG_WAKE_BEFORE_STOP) &&
 	    (ap->link.lpm_policy > ATA_LPM_MAX_POWER) &&
 	    ahci_set_lpm(&ap->link, ATA_LPM_MAX_POWER, ATA_LPM_WAKE_ONLY)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(ap->host->dev, "Failed to wake up port before engine stop\n");
 		return -EIO;
 	}
@@ -663,7 +698,9 @@ int ahci_stop_engine(struct ata_port *ap)
 
 	/* check if the HBA is idle */
 	if ((tmp & (PORT_CMD_START | PORT_CMD_LIST_ON)) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* setting HBA to idle */
 	tmp &= ~PORT_CMD_START;
@@ -673,7 +710,9 @@ int ahci_stop_engine(struct ata_port *ap)
 	tmp = ata_wait_register(ap, port_mmio + PORT_CMD,
 				PORT_CMD_LIST_ON, PORT_CMD_LIST_ON, 1, 500);
 	if (tmp & PORT_CMD_LIST_ON)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	return 0;
 }
@@ -688,13 +727,17 @@ void ahci_start_fis_rx(struct ata_port *ap)
 
 	/* set FIS registers */
 	if (hpriv->cap & HOST_CAP_64)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		writel((pp->cmd_slot_dma >> 16) >> 16,
 		       port_mmio + PORT_LST_ADDR_HI);
+}
 	writel(pp->cmd_slot_dma & 0xffffffff, port_mmio + PORT_LST_ADDR);
 
 	if (hpriv->cap & HOST_CAP_64)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		writel((pp->rx_fis_dma >> 16) >> 16,
 		       port_mmio + PORT_FIS_ADDR_HI);
+}
 	writel(pp->rx_fis_dma & 0xffffffff, port_mmio + PORT_FIS_ADDR);
 
 	/* enable FIS reception */
@@ -721,7 +764,9 @@ static int ahci_stop_fis_rx(struct ata_port *ap)
 	tmp = ata_wait_register(ap, port_mmio + PORT_CMD, PORT_CMD_FIS_ON,
 				PORT_CMD_FIS_ON, 10, 1000);
 	if (tmp & PORT_CMD_FIS_ON)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	return 0;
 }
@@ -736,6 +781,7 @@ static void ahci_power_up(struct ata_port *ap)
 
 	/* spin up device */
 	if (hpriv->cap & HOST_CAP_SSS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd |= PORT_CMD_SPIN_UP;
 		writel(cmd, port_mmio + PORT_CMD);
 	}
@@ -822,7 +868,9 @@ static void ahci_power_down(struct ata_port *ap)
 	u32 cmd, scontrol;
 
 	if (!(hpriv->cap & HOST_CAP_SSS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* put device into listen mode, first set PxSCTL.DET to 0 */
 	scontrol = readl(port_mmio + PORT_SCR_CTL);
@@ -854,11 +902,14 @@ static void ahci_start_port(struct ata_port *ap)
 
 	/* turn on LEDs */
 	if (ap->flags & ATA_FLAG_EM) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_for_each_link(link, ap, EDGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			emp = &pp->em_priv[link->pmp];
 
 			/* EM Transmit bit maybe busy during init */
 			for (i = 0; i < EM_MAX_RETRY; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rc = ap->ops->transmit_led_message(ap,
 							       emp->led_state,
 							       4);
@@ -871,7 +922,9 @@ static void ahci_start_port(struct ata_port *ap)
 				 * ports to fail the same way.
 				 */
 				if (rc == -EBUSY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					msleep(1);
+}
 				else
 					break;
 			}
@@ -879,8 +932,10 @@ static void ahci_start_port(struct ata_port *ap)
 	}
 
 	if (ap->flags & ATA_FLAG_SW_ACTIVITY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_for_each_link(link, ap, EDGE)
 			ahci_init_sw_activity(link);
+}
 
 }
 
@@ -891,6 +946,7 @@ static int ahci_deinit_port(struct ata_port *ap, const char **emsg)
 	/* disable DMA */
 	rc = ahci_stop_engine(ap);
 	if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*emsg = "failed to stop engine";
 		return rc;
 	}
@@ -898,10 +954,12 @@ static int ahci_deinit_port(struct ata_port *ap, const char **emsg)
 	/* disable FIS reception */
 	rc = ahci_stop_fis_rx(ap);
 	if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*emsg = "failed stop FIS RX";
 		return rc;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -934,6 +992,7 @@ int ahci_reset_controller(struct ata_host *host)
 					HOST_RESET, 10, 1000);
 
 		if (tmp & HOST_RESET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(host->dev, "controller reset failed (0x%x)\n",
 				tmp);
 			return -EIO;
@@ -948,8 +1007,11 @@ int ahci_reset_controller(struct ata_host *host)
 		if (!(hpriv->flags & AHCI_HFLAG_NO_WRITE_TO_RO))
 			ahci_restore_initial_config(host);
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(host->dev, "skipping global host reset\n");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL_GPL(ahci_reset_controller);
@@ -961,12 +1023,17 @@ static void ahci_sw_activity(struct ata_link *link)
 	struct ahci_em_priv *emp = &pp->em_priv[link->pmp];
 
 	if (!(link->flags & ATA_LFLAG_SW_ACTIVITY))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	emp->activity++;
 	if (!timer_pending(&emp->timer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mod_timer(&emp->timer, jiffies + msecs_to_jiffies(10));
 }
+}
 
 static void ahci_sw_activity_blink(unsigned long arg)
 {
@@ -1020,6 +1087,7 @@ static void ahci_init_sw_activity(struct ata_link *link)
 
 	/* init activity stats, setup timer */
 	emp->saved_activity = emp->activity = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	setup_timer(&emp->timer, ahci_sw_activity_blink, (unsigned long)link);
 
 	/* check our blink policy and set flag for link if it's enabled */
@@ -1034,6 +1102,7 @@ int ahci_reset_em(struct ata_host *host)
 	u32 em_ctl;
 
 	em_ctl = readl(mmio + HOST_EM_CTL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((em_ctl & EM_CTL_TM) || (em_ctl & EM_CTL_RST))
 		return -EINVAL;
 
@@ -1057,7 +1126,9 @@ static ssize_t ahci_transmit_led_message(struct ata_port *ap, u32 state,
 	/* get the slot number from the message */
 	pmp = (state & EM_MSG_LED_PMP_SLOT) >> 8;
 	if (pmp < EM_MAX_SLOTS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		emp = &pp->em_priv[pmp];
+}
 	else
 		return -EINVAL;
 
@@ -1111,6 +1182,7 @@ static ssize_t ahci_led_show(struct ata_port *ap, char *buf)
 	struct ahci_em_priv *emp;
 	int rc = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_for_each_link(link, ap, EDGE) {
 		emp = &pp->em_priv[link->pmp];
 		rc += sprintf(buf, "%lx\n", emp->led_state);
@@ -1127,7 +1199,9 @@ static ssize_t ahci_led_store(struct ata_port *ap, const char *buf,
 	struct ahci_em_priv *emp;
 
 	if (kstrtouint(buf, 0, &state) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* get the slot number from the message */
 	pmp = (state & EM_MSG_LED_PMP_SLOT) >> 8;
@@ -1202,7 +1276,9 @@ static void ahci_port_init(struct device *dev, struct ata_port *ap,
 	/* make sure port is not active */
 	rc = ahci_deinit_port(ap, &emsg);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(dev, "%s (%d)\n", emsg, rc);
+}
 
 	/* clear SError */
 	tmp = readl(port_mmio + PORT_SCR_ERR);
@@ -1213,15 +1289,19 @@ static void ahci_port_init(struct device *dev, struct ata_port *ap,
 	tmp = readl(port_mmio + PORT_IRQ_STAT);
 	VPRINTK("PORT_IRQ_STAT 0x%x\n", tmp);
 	if (tmp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		writel(tmp, port_mmio + PORT_IRQ_STAT);
+}
 
 	writel(1 << port_no, mmio + HOST_IRQ_STAT);
 
 	/* mark esata ports */
 	tmp = readl(port_mmio + PORT_CMD);
 	if ((tmp & PORT_CMD_ESP) && (hpriv->cap & HOST_CAP_SXS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->pflags |= ATA_PFLAG_EXTERNAL;
 }
+}
 
 void ahci_init_controller(struct ata_host *host)
 {
@@ -1254,6 +1334,7 @@ static void ahci_dev_config(struct ata_device *dev)
 	struct ahci_host_priv *hpriv = dev->link->ap->host->private_data;
 
 	if (hpriv->flags & AHCI_HFLAG_SECT255) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->max_sectors = 255;
 		ata_dev_info(dev,
 			     "SB600 AHCI: limiting to 255 sectors per cmd\n");
@@ -1308,11 +1389,14 @@ int ahci_kick_engine(struct ata_port *ap)
 	 */
 	busy = status & (ATA_BUSY | ATA_DRQ);
 	if (!busy && !sata_pmp_attached(ap)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = 0;
 		goto out_restart;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(hpriv->cap & HOST_CAP_CLO)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = -EOPNOTSUPP;
 		goto out_restart;
 	}
@@ -1326,7 +1410,9 @@ int ahci_kick_engine(struct ata_port *ap)
 	tmp = ata_wait_register(ap, port_mmio + PORT_CMD,
 				PORT_CMD_CLO, PORT_CMD_CLO, 1, 500);
 	if (tmp & PORT_CMD_CLO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = -EIO;
+}
 
 	/* restart engine */
  out_restart:
@@ -1391,6 +1477,7 @@ int ahci_do_softreset(struct ata_link *link, unsigned int *class,
 
 	/* prepare for SRST (AHCI-1.1 10.4.1) */
 	rc = ahci_kick_engine(ap);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rc && rc != -EOPNOTSUPP)
 		ata_link_warn(link, "failed to reset engine (errno=%d)\n", rc);
 
@@ -1468,6 +1555,7 @@ EXPORT_SYMBOL_GPL(ahci_check_ready);
 static int ahci_softreset(struct ata_link *link, unsigned int *class,
 			  unsigned long deadline)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int pmp = sata_srst_pmp(link);
 
 	DPRINTK("ENTER\n");
@@ -1478,6 +1566,7 @@ EXPORT_SYMBOL_GPL(ahci_do_softreset);
 
 static int ahci_bad_pmp_check_ready(struct ata_link *link)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	void __iomem *port_mmio = ahci_port_base(link->ap);
 	u8 status = readl(port_mmio + PORT_TFDATA) & 0xFF;
 	u32 irq_status = readl(port_mmio + PORT_IRQ_STAT);
@@ -1512,6 +1601,7 @@ static int ahci_pmp_retry_softreset(struct ata_link *link, unsigned int *class,
 	 * again to port 0.
 	 */
 	if (rc == -EIO) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		irq_sts = readl(port_mmio + PORT_IRQ_STAT);
 		if (irq_sts & PORT_IRQ_BAD_PMP) {
 			ata_link_warn(link,
@@ -1528,6 +1618,7 @@ static int ahci_pmp_retry_softreset(struct ata_link *link, unsigned int *class,
 int ahci_do_hardreset(struct ata_link *link, unsigned int *class,
 		      unsigned long deadline, bool *online)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const unsigned long *timing = sata_ehc_deb_timing(&link->eh_context);
 	struct ata_port *ap = link->ap;
 	struct ahci_port_priv *pp = ap->private_data;
@@ -1581,6 +1672,7 @@ static void ahci_postreset(struct ata_link *link, unsigned int *class)
 	else
 		new_tmp &= ~PORT_CMD_ATAPI;
 	if (new_tmp != tmp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		writel(new_tmp, port_mmio + PORT_CMD);
 		readl(port_mmio + PORT_CMD); /* flush */
 	}
@@ -1614,6 +1706,7 @@ static int ahci_pmp_qc_defer(struct ata_queued_cmd *qc)
 	struct ata_port *ap = qc->ap;
 	struct ahci_port_priv *pp = ap->private_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!sata_pmp_attached(ap) || pp->fbs_enabled)
 		return ata_std_qc_defer(qc);
 	else
@@ -1642,6 +1735,7 @@ static void ahci_qc_prep(struct ata_queued_cmd *qc)
 		memcpy(cmd_tbl + AHCI_CMD_TBL_CDB, qc->cdb, qc->dev->cdb_len);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	n_elem = 0;
 	if (qc->flags & ATA_QCFLAG_DMAMAP)
 		n_elem = ahci_fill_sg(qc, cmd_tbl);
@@ -1651,7 +1745,9 @@ static void ahci_qc_prep(struct ata_queued_cmd *qc)
 	 */
 	opts = cmd_fis_len | n_elem << 16 | (qc->dev->link->pmp << 12);
 	if (qc->tf.flags & ATA_TFLAG_WRITE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opts |= AHCI_CMD_WRITE;
+}
 	if (is_atapi)
 		opts |= AHCI_CMD_ATAPI | AHCI_CMD_PREFETCH;
 
@@ -1666,6 +1762,7 @@ static void ahci_fbs_dec_intr(struct ata_port *ap)
 	int retries = 3;
 
 	DPRINTK("ENTER\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!pp->fbs_enabled);
 
 	/* time to wait for DEC is not specified by AHCI spec,
@@ -1695,11 +1792,14 @@ static void ahci_error_intr(struct ata_port *ap, u32 irq_stat)
 
 	/* determine active link with error */
 	if (pp->fbs_enabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		void __iomem *port_mmio = ahci_port_base(ap);
 		u32 fbs = readl(port_mmio + PORT_FBS);
 		int pmp = fbs >> PORT_FBS_DWE_OFFSET;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((fbs & PORT_FBS_SDE) && (pmp < ap->nr_pmp_links)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			link = &ap->pmp_link[pmp];
 			fbs_need_dec = true;
 		}
@@ -1710,7 +1810,9 @@ static void ahci_error_intr(struct ata_port *ap, u32 irq_stat)
 				break;
 
 	if (!link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		link = &ap->link;
+}
 
 	active_qc = ata_qc_from_tag(ap, link->active_tag);
 	active_ehi = &link->eh_info;
@@ -1726,7 +1828,9 @@ static void ahci_error_intr(struct ata_port *ap, u32 irq_stat)
 
 	/* some controllers set IRQ_IF_ERR on device errors, ignore it */
 	if (hpriv->flags & AHCI_HFLAG_IGN_IRQ_IF_ERR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		irq_stat &= ~PORT_IRQ_IF_ERR;
+}
 
 	if (irq_stat & PORT_IRQ_TF_ERR) {
 		/* If qc is active, charge it; otherwise, the active
@@ -1739,7 +1843,9 @@ static void ahci_error_intr(struct ata_port *ap, u32 irq_stat)
 			active_ehi->err_mask |= AC_ERR_DEV;
 
 		if (hpriv->flags & AHCI_HFLAG_IGN_SERR_INTERNAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			host_ehi->serror &= ~SERR_INTERNAL;
+}
 	}
 
 	if (irq_stat & PORT_IRQ_UNK_FIS) {
@@ -1752,30 +1858,39 @@ static void ahci_error_intr(struct ata_port *ap, u32 irq_stat)
 				  unk[0], unk[1], unk[2], unk[3]);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sata_pmp_attached(ap) && (irq_stat & PORT_IRQ_BAD_PMP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		active_ehi->err_mask |= AC_ERR_HSM;
 		active_ehi->action |= ATA_EH_RESET;
 		ata_ehi_push_desc(active_ehi, "incorrect PMP");
 	}
 
 	if (irq_stat & (PORT_IRQ_HBUS_ERR | PORT_IRQ_HBUS_DATA_ERR)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		host_ehi->err_mask |= AC_ERR_HOST_BUS;
 		host_ehi->action |= ATA_EH_RESET;
 		ata_ehi_push_desc(host_ehi, "host bus error");
 	}
 
 	if (irq_stat & PORT_IRQ_IF_ERR) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fbs_need_dec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			active_ehi->err_mask |= AC_ERR_DEV;
+}
 		else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			host_ehi->err_mask |= AC_ERR_ATA_BUS;
 			host_ehi->action |= ATA_EH_RESET;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_ehi_push_desc(host_ehi, "interface fatal error");
 	}
 
 	if (irq_stat & (PORT_IRQ_CONNECT | PORT_IRQ_PHYRDY)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_ehi_hotplugged(host_ehi);
 		ata_ehi_push_desc(host_ehi, "%s",
 			irq_stat & PORT_IRQ_CONNECT ?
@@ -1785,8 +1900,11 @@ static void ahci_error_intr(struct ata_port *ap, u32 irq_stat)
 	/* okay, let's hand over to EH */
 
 	if (irq_stat & PORT_IRQ_FREEZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_port_freeze(ap);
+}
 	else if (fbs_need_dec) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_link_abort(link);
 		ahci_fbs_dec_intr(ap);
 	} else
@@ -1805,9 +1923,12 @@ static void ahci_handle_port_interrupt(struct ata_port *ap,
 
 	/* ignore BAD_PMP while resetting */
 	if (unlikely(resetting))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status &= ~PORT_IRQ_BAD_PMP;
+}
 
 	if (sata_lpm_ignore_phy_events(&ap->link)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status &= ~PORT_IRQ_PHYRDY;
 		ahci_scr_write(&ap->link, SCR_ERROR, SERR_PHYRDY_CHG);
 	}
@@ -1828,7 +1949,9 @@ static void ahci_handle_port_interrupt(struct ata_port *ap,
 		 * store AN SDB FIS into receive area.
 		 */
 		if (hpriv->cap & HOST_CAP_SNTF)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sata_async_notification(ap);
+}
 		else {
 			/* If the 'N' bit in word 0 of the FIS is set,
 			 * we just received asynchronous notification.
@@ -1839,12 +1962,16 @@ static void ahci_handle_port_interrupt(struct ata_port *ap,
 			 * when FBS is enabled.
 			 */
 			if (pp->fbs_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				WARN_ON_ONCE(1);
+}
 			else {
 				const __le32 *f = pp->rx_fis + RX_FIS_SDB;
 				u32 f0 = le32_to_cpu(f[0]);
 				if (f0 & (1 << 15))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					sata_async_notification(ap);
+}
 			}
 		}
 	}
@@ -1854,14 +1981,18 @@ static void ahci_handle_port_interrupt(struct ata_port *ap,
 	 * NCQ and non-NCQ commands may be in flight at the same time.
 	 */
 	if (pp->fbs_enabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ap->qc_active) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qc_active = readl(port_mmio + PORT_SCR_ACT);
 			qc_active |= readl(port_mmio + PORT_CMD_ISSUE);
 		}
 	} else {
 		/* pp->active_link is valid iff any command is in flight */
 		if (ap->qc_active && pp->active_link->sactive)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qc_active = readl(port_mmio + PORT_SCR_ACT);
+}
 		else
 			qc_active = readl(port_mmio + PORT_CMD_ISSUE);
 	}
@@ -1871,6 +2002,7 @@ static void ahci_handle_port_interrupt(struct ata_port *ap,
 
 	/* while resetting, invalid completions are expected */
 	if (unlikely(rc < 0 && !resetting)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ehi->err_mask |= AC_ERR_HSM;
 		ehi->action |= ATA_EH_RESET;
 		ata_port_freeze(ap);
@@ -1924,11 +2056,15 @@ u32 ahci_handle_port_intr(struct ata_host *host, u32 irq_masked)
 			VPRINTK("port %u\n", i);
 		} else {
 			VPRINTK("port %u (no irq)\n", i);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ata_ratelimit())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev_warn(host->dev,
 					 "interrupt on disabled port %u\n", i);
+}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		handled = 1;
 	}
 
@@ -1952,7 +2088,9 @@ static irqreturn_t ahci_single_level_irq_intr(int irq, void *dev_instance)
 	/* sigh.  0xffffffff is a valid return from h/w */
 	irq_stat = readl(mmio + HOST_IRQ_STAT);
 	if (!irq_stat)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return IRQ_NONE;
+}
 
 	irq_masked = irq_stat & hpriv->port_map;
 
@@ -1991,9 +2129,12 @@ unsigned int ahci_qc_issue(struct ata_queued_cmd *qc)
 	pp->active_link = qc->dev->link;
 
 	if (ata_is_ncq(qc->tf.protocol))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		writel(1 << qc->tag, port_mmio + PORT_SCR_ACT);
+}
 
 	if (pp->fbs_enabled && pp->fbs_last_dev != qc->dev->link->pmp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		u32 fbs = readl(port_mmio + PORT_FBS);
 		fbs &= ~(PORT_FBS_DEV_MASK | PORT_FBS_DEC);
 		fbs |= qc->dev->link->pmp << PORT_FBS_DEV_OFFSET;
@@ -2015,7 +2156,9 @@ static bool ahci_qc_fill_rtf(struct ata_queued_cmd *qc)
 	u8 *rx_fis = pp->rx_fis;
 
 	if (pp->fbs_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rx_fis += qc->dev->link->pmp * AHCI_RX_FIS_SZ;
+}
 
 	/*
 	 * After a successful execution of an ATA PIO data-in command,
@@ -2095,6 +2238,7 @@ static void ahci_set_aggressive_devslp(struct ata_port *ap, bool sleep)
 
 	devslp = readl(port_mmio + PORT_DEVSLP);
 	if (!(devslp & PORT_DEVSLP_DSP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(ap->host->dev, "port does not support device sleep\n");
 		return;
 	}
@@ -2169,7 +2313,9 @@ static void ahci_enable_fbs(struct ata_port *ap)
 	int rc;
 
 	if (!pp->fbs_supported)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	fbs = readl(port_mmio + PORT_FBS);
 	if (fbs & PORT_FBS_EN) {
@@ -2203,32 +2349,45 @@ static void ahci_disable_fbs(struct ata_port *ap)
 	int rc;
 
 	if (!pp->fbs_supported)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fbs = readl(port_mmio + PORT_FBS);
 	if ((fbs & PORT_FBS_EN) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pp->fbs_enabled = false;
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rc = ahci_stop_engine(ap);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	writel(fbs & ~PORT_FBS_EN, port_mmio + PORT_FBS);
 	fbs = readl(port_mmio + PORT_FBS);
 	if (fbs & PORT_FBS_EN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(ap->host->dev, "Failed to disable FBS\n");
+}
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(ap->host->dev, "FBS is disabled\n");
 		pp->fbs_enabled = false;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hpriv->start_engine(ap);
 }
 
 static void ahci_pmp_attach(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	void __iomem *port_mmio = ahci_port_base(ap);
 	struct ahci_port_priv *pp = ap->private_data;
 	u32 cmd;
@@ -2269,8 +2428,10 @@ static void ahci_pmp_detach(struct ata_port *ap)
 
 	/* see comment above in ahci_pmp_attach() */
 	if (!(ap->pflags & ATA_PFLAG_FROZEN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		writel(pp->intr_mask, port_mmio + PORT_IRQ_MASK);
 }
+}
 
 int ahci_port_resume(struct ata_port *ap)
 {
@@ -2280,7 +2441,9 @@ int ahci_port_resume(struct ata_port *ap)
 	ahci_start_port(ap);
 
 	if (sata_pmp_attached(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ahci_pmp_attach(ap);
+}
 	else
 		ahci_pmp_detach(ap);
 
@@ -2296,7 +2459,9 @@ static int ahci_port_suspend(struct ata_port *ap, pm_message_t mesg)
 
 	rc = ahci_deinit_port(ap, &emsg);
 	if (rc == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ahci_power_down(ap);
+}
 	else {
 		ata_port_err(ap, "%s (%d)\n", emsg, rc);
 		ata_port_freeze(ap);
@@ -2318,11 +2483,14 @@ static int ahci_port_start(struct ata_port *ap)
 
 	pp = devm_kzalloc(dev, sizeof(*pp), GFP_KERNEL);
 	if (!pp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (ap->host->n_ports > 1) {
 		pp->irq_desc = devm_kzalloc(dev, 8, GFP_KERNEL);
 		if (!pp->irq_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			devm_kfree(dev, pp);
 			return -ENOMEM;
 		}
@@ -2332,30 +2500,42 @@ static int ahci_port_start(struct ata_port *ap)
 
 	/* check FBS capability */
 	if ((hpriv->cap & HOST_CAP_FBS) && sata_pmp_supported(ap)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		void __iomem *port_mmio = ahci_port_base(ap);
 		u32 cmd = readl(port_mmio + PORT_CMD);
 		if (cmd & PORT_CMD_FBSCP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pp->fbs_supported = true;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (hpriv->flags & AHCI_HFLAG_YES_FBS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_info(dev, "port %d can do FBS, forcing FBSCP\n",
 				 ap->port_no);
 			pp->fbs_supported = true;
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_warn(dev, "port %d is not capable of FBS\n",
 				 ap->port_no);
+}
 	}
 
 	if (pp->fbs_supported) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dma_sz = AHCI_PORT_PRIV_FBS_DMA_SZ;
 		rx_fis_sz = AHCI_RX_FIS_SZ * 16;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dma_sz = AHCI_PORT_PRIV_DMA_SZ;
 		rx_fis_sz = AHCI_RX_FIS_SZ;
 	}
 
 	mem = dmam_alloc_coherent(dev, dma_sz, &mem_dma, GFP_KERNEL);
 	if (!mem)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(mem, 0, dma_sz);
 
 	/*
@@ -2394,7 +2574,9 @@ static int ahci_port_start(struct ata_port *ap)
 	 * Switch to per-port locking in case each port has its own MSI vector.
 	 */
 	if (hpriv->flags & AHCI_HFLAG_MULTI_MSI) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_init(&pp->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->lock = &pp->lock;
 	}
 
@@ -2414,7 +2596,9 @@ static void ahci_port_stop(struct ata_port *ap)
 	/* de-initialize port */
 	rc = ahci_deinit_port(ap, &emsg);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_port_warn(ap, "%s (%d)\n", emsg, rc);
+}
 
 	/*
 	 * Clear GHC.IS to prevent stuck INTx after disabling MSI and
@@ -2436,11 +2620,19 @@ void ahci_print_info(struct ata_host *host, const char *scc_s)
 
 	speed = (cap >> 20) & 0xf;
 	if (speed == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		speed_s = "1.5";
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (speed == 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		speed_s = "3";
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (speed == 3)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		speed_s = "6";
+}
 	else
 		speed_s = "?";
 
@@ -2504,8 +2696,11 @@ void ahci_set_em_messages(struct ahci_host_priv *hpriv,
 	u32 em_ctl = readl(mmio + HOST_EM_CTL);
 
 	if (!ahci_em_messages || !(hpriv->cap & HOST_CAP_EMS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	messages = (em_ctl & EM_CTRL_MSG_TYPE) >> 16;
 
 	if (messages) {
@@ -2515,7 +2710,9 @@ void ahci_set_em_messages(struct ahci_host_priv *hpriv,
 		hpriv->em_msg_type = messages;
 		pi->flags |= ATA_FLAG_EM;
 		if (!(em_ctl & EM_CTL_ALHD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pi->flags |= ATA_FLAG_SW_ACTIVITY;
+}
 	}
 }
 EXPORT_SYMBOL_GPL(ahci_set_em_messages);
@@ -2528,7 +2725,9 @@ static int ahci_host_activate_multi_irqs(struct ata_host *host,
 
 	rc = ata_host_start(host);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 	/*
 	 * Requests IRQs according to AHCI-1.1 when multiple MSIs were
 	 * allocated. That is one MSI per port, starting from @irq.
@@ -2572,15 +2771,20 @@ int ahci_host_activate(struct ata_host *host, struct scsi_host_template *sht)
 	int rc;
 
 	if (hpriv->flags & AHCI_HFLAG_MULTI_MSI) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (hpriv->irq_handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_warn(host->dev,
 			         "both AHCI_HFLAG_MULTI_MSI flag set and custom irq handler implemented\n");
+}
 		if (!hpriv->get_irq_vector) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(host->dev,
 				"AHCI_HFLAG_MULTI_MSI requires ->get_irq_vector!\n");
 			return -EIO;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = ahci_host_activate_multi_irqs(host, sht);
 	} else {
 		rc = ata_host_activate(host, irq, hpriv->irq_handler,
@@ -2588,6 +2792,7 @@ int ahci_host_activate(struct ata_host *host, struct scsi_host_template *sht)
 	}
 
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 }
 EXPORT_SYMBOL_GPL(ahci_host_activate);
diff --git a/drivers/ata/libata-acpi.c b/drivers/ata/libata-acpi.c
index 97a14fe..260e3b2 100644
--- a/drivers/ata/libata-acpi.c
+++ b/drivers/ata/libata-acpi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * libata-acpi.c
  * Provides ACPI support for PATA/SATA.
@@ -65,6 +67,7 @@ acpi_handle ata_dev_acpi_handle(struct ata_device *dev)
 /* @ap and @dev are the same as ata_acpi_handle_hotplug() */
 static void ata_acpi_detach_device(struct ata_port *ap, struct ata_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev)
 		dev->flags |= ATA_DFLAG_DETACH;
 	else {
@@ -103,6 +106,7 @@ static void ata_acpi_handle_hotplug(struct ata_port *ap, struct ata_device *dev,
 	int wait = 0;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(ap->lock, flags);
 	/*
 	 * When dock driver calls into the routine, it will always use
@@ -133,6 +137,7 @@ static void ata_acpi_handle_hotplug(struct ata_port *ap, struct ata_device *dev,
 
 static int ata_acpi_dev_notify_dock(struct acpi_device *adev, u32 event)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_device *dev = ata_hotplug_data(adev->hp).dev;
 	ata_acpi_handle_hotplug(dev->link->ap, dev, event);
 	return 0;
@@ -140,6 +145,7 @@ static int ata_acpi_dev_notify_dock(struct acpi_device *adev, u32 event)
 
 static int ata_acpi_ap_notify_dock(struct acpi_device *adev, u32 event)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_acpi_handle_hotplug(ata_hotplug_data(adev->hp).ap, NULL, event);
 	return 0;
 }
@@ -152,6 +158,7 @@ static void ata_acpi_uevent(struct ata_port *ap, struct ata_device *dev,
 	char *envp[] = { event_string, NULL };
 
 	if (dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->sdev)
 			kobj = &dev->sdev->sdev_gendev.kobj;
 	} else
@@ -165,11 +172,13 @@ static void ata_acpi_uevent(struct ata_port *ap, struct ata_device *dev,
 
 static void ata_acpi_ap_uevent(struct acpi_device *adev, u32 event)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_acpi_uevent(ata_hotplug_data(adev->hp).ap, NULL, event);
 }
 
 static void ata_acpi_dev_uevent(struct acpi_device *adev, u32 event)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_device *dev = ata_hotplug_data(adev->hp).dev;
 	ata_acpi_uevent(dev->link->ap, dev, event);
 }
@@ -182,21 +191,34 @@ void ata_acpi_bind_port(struct ata_port *ap)
 	struct ata_acpi_hotplug_context *context;
 
 	if (libata_noacpi || ap->flags & ATA_FLAG_ACPI_SATA || !host_companion)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_preset_companion(&ap->tdev, host_companion, ap->port_no);
 
 	if (ata_acpi_gtm(ap, &ap->__acpi_init_gtm) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->pflags |= ATA_PFLAG_INIT_GTM_VALID;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	adev = ACPI_COMPANION(&ap->tdev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!adev || adev->hp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	context = kzalloc(sizeof(*context), GFP_KERNEL);
 	if (!context)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	context->data.ap = ap;
 	acpi_initialize_hp_context(adev, &context->hp, ata_acpi_ap_notify_dock,
 				   ata_acpi_ap_uevent);
@@ -219,26 +241,41 @@ void ata_acpi_bind_dev(struct ata_device *dev)
 			(!(ap->flags & ATA_FLAG_ACPI_SATA) && !port_companion))
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ap->flags & ATA_FLAG_ACPI_SATA) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!sata_pmp_attached(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			adr = SATA_ADR(ap->port_no, NO_PORT_MULT);
+}
 		else
 			adr = SATA_ADR(ap->port_no, dev->link->pmp);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = host_companion;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		adr = dev->devno;
 		parent = port_companion;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_preset_companion(&dev->tdev, parent, adr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	adev = ACPI_COMPANION(&dev->tdev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!adev || adev->hp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	context = kzalloc(sizeof(*context), GFP_KERNEL);
 	if (!context)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	context->data.dev = dev;
 	acpi_initialize_hp_context(adev, &context->hp, ata_acpi_dev_notify_dock,
 				   ata_acpi_dev_uevent);
@@ -289,6 +326,7 @@ int ata_acpi_gtm(struct ata_port *ap, struct ata_acpi_gtm *gtm)
 	union acpi_object *out_obj;
 	acpi_status status;
 	int rc = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_handle handle = ACPI_HANDLE(&ap->tdev);
 
 	if (!handle)
diff --git a/drivers/ata/libata-core.c b/drivers/ata/libata-core.c
index e7ded34..2d1f286 100644
--- a/drivers/ata/libata-core.c
+++ b/drivers/ata/libata-core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  libata-core.c - helper library for ATA
  *
@@ -206,7 +208,9 @@ struct ata_link *ata_link_next(struct ata_link *link, struct ata_port *ap,
 		case ATA_LITER_EDGE:
 		case ATA_LITER_PMP_FIRST:
 			if (sata_pmp_attached(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ap->pmp_link;
+}
 			/* fall through */
 		case ATA_LITER_HOST_FIRST:
 			return &ap->link;
@@ -217,11 +221,15 @@ struct ata_link *ata_link_next(struct ata_link *link, struct ata_port *ap,
 		switch (mode) {
 		case ATA_LITER_HOST_FIRST:
 			if (sata_pmp_attached(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ap->pmp_link;
+}
 			/* fall through */
 		case ATA_LITER_PMP_FIRST:
 			if (unlikely(ap->slave_link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ap->slave_link;
+}
 			/* fall through */
 		case ATA_LITER_EDGE:
 			return NULL;
@@ -229,15 +237,23 @@ struct ata_link *ata_link_next(struct ata_link *link, struct ata_port *ap,
 
 	/* slave_link excludes PMP */
 	if (unlikely(link == ap->slave_link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/* we were over a PMP link */
 	if (++link < ap->pmp_link + ap->nr_pmp_links)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return link;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mode == ATA_LITER_PMP_FIRST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return &ap->link;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -279,11 +295,13 @@ struct ata_device *ata_dev_next(struct ata_device *dev, struct ata_link *link,
 	case ATA_DITER_ALL:
 		if (++dev < link->device + ata_link_max_devices(link))
 			goto check;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
 	case ATA_DITER_ENABLED_REVERSE:
 	case ATA_DITER_ALL_REVERSE:
 		if (--dev >= link->device)
 			goto check;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
 	}
 
@@ -291,6 +309,7 @@ struct ata_device *ata_dev_next(struct ata_device *dev, struct ata_link *link,
 	if ((mode == ATA_DITER_ENABLED || mode == ATA_DITER_ENABLED_REVERSE) &&
 	    !ata_dev_enabled(dev))
 		goto next;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev;
 }
 
@@ -313,9 +332,15 @@ struct ata_link *ata_dev_phys_link(struct ata_device *dev)
 	struct ata_port *ap = dev->link->ap;
 
 	if (!ap->slave_link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return dev->link;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev->devno)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return &ap->link;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ap->slave_link;
 }
 
@@ -339,12 +364,15 @@ void ata_force_cbl(struct ata_port *ap)
 	for (i = ata_force_tbl_size - 1; i >= 0; i--) {
 		const struct ata_force_ent *fe = &ata_force_tbl[i];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fe->port != -1 && fe->port != ap->print_id)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fe->param.cbl == ATA_CBL_NONE)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->cbl = fe->param.cbl;
 		ata_port_notice(ap, "FORCE: cable set to %s\n", fe->param.name);
 		return;
@@ -379,14 +407,17 @@ static void ata_force_link_limits(struct ata_link *link)
 	for (i = ata_force_tbl_size - 1; i >= 0; i--) {
 		const struct ata_force_ent *fe = &ata_force_tbl[i];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fe->port != -1 && fe->port != link->ap->print_id)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fe->device != -1 && fe->device != linkno)
 			continue;
 
 		/* only honor the first spd limit */
 		if (!did_spd && fe->param.spd_limit) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			link->hw_sata_spd_limit = (1 << fe->param.spd_limit) - 1;
 			ata_link_notice(link, "FORCE: PHY spd limit set to %s\n",
 					fe->param.name);
@@ -395,6 +426,7 @@ static void ata_force_link_limits(struct ata_link *link)
 
 		/* let lflags stack */
 		if (fe->param.lflags) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			link->flags |= fe->param.lflags;
 			ata_link_notice(link,
 					"FORCE: link flag 0x%x forced -> 0x%x\n",
@@ -428,29 +460,39 @@ static void ata_force_xfermask(struct ata_device *dev)
 		const struct ata_force_ent *fe = &ata_force_tbl[i];
 		unsigned long pio_mask, mwdma_mask, udma_mask;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fe->port != -1 && fe->port != dev->link->ap->print_id)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fe->device != -1 && fe->device != devno &&
 		    fe->device != alt_devno)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!fe->param.xfer_mask)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_unpack_xfermask(fe->param.xfer_mask,
 				    &pio_mask, &mwdma_mask, &udma_mask);
 		if (udma_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->udma_mask = udma_mask;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (mwdma_mask) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->udma_mask = 0;
 			dev->mwdma_mask = mwdma_mask;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->udma_mask = 0;
 			dev->mwdma_mask = 0;
 			dev->pio_mask = pio_mask;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_notice(dev, "FORCE: xfer_mask set to %s\n",
 			       fe->param.name);
 		return;
@@ -481,17 +523,21 @@ static void ata_force_horkage(struct ata_device *dev)
 	for (i = 0; i < ata_force_tbl_size; i++) {
 		const struct ata_force_ent *fe = &ata_force_tbl[i];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fe->port != -1 && fe->port != dev->link->ap->print_id)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fe->device != -1 && fe->device != devno &&
 		    fe->device != alt_devno)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(~dev->horkage & fe->param.horkage_on) &&
 		    !(dev->horkage & fe->param.horkage_off))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->horkage |= fe->param.horkage_on;
 		dev->horkage &= ~fe->param.horkage_off;
 
@@ -531,7 +577,9 @@ int atapi_cmd_type(u8 opcode)
 	case ATA_16:
 	case ATA_12:
 		if (atapi_passthru16)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ATAPI_PASS_THRU;
+}
 		/* fall thru */
 	default:
 		return ATAPI_MISC;
@@ -658,6 +706,7 @@ static int ata_rwcmd_protocol(struct ata_taskfile *tf, struct ata_device *dev)
 
 	int index, fua, lba48, write;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fua = (tf->flags & ATA_TFLAG_FUA) ? 4 : 0;
 	lba48 = (tf->flags & ATA_TFLAG_LBA48) ? 2 : 0;
 	write = (tf->flags & ATA_TFLAG_WRITE) ? 1 : 0;
@@ -702,6 +751,7 @@ u64 ata_tf_read_block(const struct ata_taskfile *tf, struct ata_device *dev)
 	u64 block = 0;
 
 	if (tf->flags & ATA_TFLAG_LBA) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tf->flags & ATA_TFLAG_LBA48) {
 			block |= (u64)tf->hob_lbah << 40;
 			block |= (u64)tf->hob_lbam << 32;
@@ -756,6 +806,7 @@ int ata_build_rw_tf(struct ata_taskfile *tf, struct ata_device *dev,
 		    u64 block, u32 n_block, unsigned int tf_flags,
 		    unsigned int tag, int class)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tf->flags |= ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE;
 	tf->flags |= tf_flags;
 
@@ -937,6 +988,7 @@ u8 ata_xfer_mask2mode(unsigned long xfer_mask)
 	for (ent = ata_xfer_tbl; ent->shift >= 0; ent++)
 		if (highbit >= ent->shift && highbit < ent->shift + ent->bits)
 			return ent->base + highbit - ent->shift;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0xff;
 }
 
@@ -960,6 +1012,7 @@ unsigned long ata_xfer_mode2mask(u8 xfer_mode)
 		if (xfer_mode >= ent->base && xfer_mode < ent->base + ent->bits)
 			return ((2 << (ent->shift + xfer_mode - ent->base)) - 1)
 				& ~((1 << ent->shift) - 1);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -981,7 +1034,10 @@ int ata_xfer_mode2shift(unsigned long xfer_mode)
 
 	for (ent = ata_xfer_tbl; ent->shift >= 0; ent++)
 		if (xfer_mode >= ent->base && xfer_mode < ent->base + ent->bits)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ent->shift;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -1;
 }
 
@@ -1028,6 +1084,7 @@ const char *ata_mode_string(unsigned long xfer_mask)
 	highbit = fls(xfer_mask) - 1;
 	if (highbit >= 0 && highbit < ARRAY_SIZE(xfer_mode_str))
 		return xfer_mode_str[highbit];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return "<n/a>";
 }
 
@@ -1040,7 +1097,9 @@ const char *sata_spd_string(unsigned int spd)
 	};
 
 	if (spd == 0 || (spd - 1) >= ARRAY_SIZE(spd_str))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return "<unknown>";
+}
 	return spd_str[spd - 1];
 }
 
@@ -1084,30 +1143,39 @@ unsigned int ata_dev_classify(const struct ata_taskfile *tf)
 	 */
 	if ((tf->lbam == 0) && (tf->lbah == 0)) {
 		DPRINTK("found ATA device by sig\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ATA_DEV_ATA;
 	}
 
 	if ((tf->lbam == 0x14) && (tf->lbah == 0xeb)) {
 		DPRINTK("found ATAPI device by sig\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ATA_DEV_ATAPI;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((tf->lbam == 0x69) && (tf->lbah == 0x96)) {
 		DPRINTK("found PMP device by sig\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ATA_DEV_PMP;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((tf->lbam == 0x3c) && (tf->lbah == 0xc3)) {
 		DPRINTK("found SEMB device by sig (could be ATA device)\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ATA_DEV_SEMB;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((tf->lbam == 0xcd) && (tf->lbah == 0xab)) {
 		DPRINTK("found ZAC device by sig\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ATA_DEV_ZAC;
 	}
 
 	DPRINTK("unknown device\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ATA_DEV_UNKNOWN;
 }
 
@@ -1178,13 +1246,18 @@ static u64 ata_id_n_sectors(const u16 *id)
 {
 	if (ata_id_has_lba(id)) {
 		if (ata_id_has_lba48(id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ata_id_u64(id, ATA_ID_LBA_CAPACITY_2);
+}
 		else
 			return ata_id_u32(id, ATA_ID_LBA_CAPACITY);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ata_id_current_chs_valid(id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return id[ATA_ID_CUR_CYLS] * id[ATA_ID_CUR_HEADS] *
 			       id[ATA_ID_CUR_SECTORS];
+}
 		else
 			return id[ATA_ID_CYLS] * id[ATA_ID_HEADS] *
 			       id[ATA_ID_SECTORS];
@@ -1241,6 +1314,7 @@ static int ata_read_native_max_address(struct ata_device *dev, u64 *max_sectors)
 	tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_ISADDR;
 
 	if (lba48) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tf.command = ATA_CMD_READ_NATIVE_MAX_EXT;
 		tf.flags |= ATA_TFLAG_LBA48;
 	} else
@@ -1293,6 +1367,7 @@ static int ata_set_max_sectors(struct ata_device *dev, u64 new_sectors)
 	tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_ISADDR;
 
 	if (lba48) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tf.command = ATA_CMD_SET_MAX_EXT;
 		tf.flags |= ATA_TFLAG_LBA48;
 
@@ -1359,34 +1434,47 @@ static int ata_hpa_resize(struct ata_device *dev)
 		 * be unlocked, skip HPA resizing.
 		 */
 		if (rc == -EACCES || !unlock_hpa) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_warn(dev,
 				     "HPA support seems broken, skipping HPA handling\n");
 			dev->horkage |= ATA_HORKAGE_BROKEN_HPA;
 
 			/* we can continue if device aborted the command */
 			if (rc == -EACCES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rc = 0;
+}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->n_native_sectors = native_sectors;
 
 	/* nothing to do? */
 	if (native_sectors <= sectors || !unlock_hpa) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!print_info || native_sectors == sectors)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (native_sectors > sectors)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_info(dev,
 				"HPA detected: current %llu, native %llu\n",
 				(unsigned long long)sectors,
 				(unsigned long long)native_sectors);
+}
 		else if (native_sectors < sectors)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_warn(dev,
 				"native sectors (%llu) is smaller than sectors (%llu)\n",
 				(unsigned long long)native_sectors,
 				(unsigned long long)sectors);
+}
 		return 0;
 	}
 
@@ -1401,17 +1489,22 @@ static int ata_hpa_resize(struct ata_device *dev)
 		dev->horkage |= ATA_HORKAGE_BROKEN_HPA;
 		return 0;
 	} else if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	/* re-read IDENTIFY data */
 	rc = ata_dev_reread_id(dev, 0);
 	if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_err(dev,
 			    "failed to re-read IDENTIFY data after HPA resizing\n");
 		return rc;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (print_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		u64 new_sectors = ata_id_n_sectors(dev->id);
 		ata_dev_info(dev,
 			"HPA unlocked: %llu -> %llu, native %llu\n",
@@ -1420,6 +1513,7 @@ static int ata_hpa_resize(struct ata_device *dev)
 			(unsigned long long)native_sectors);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1493,7 +1587,9 @@ unsigned long ata_id_xfermask(const u16 *id)
 		 */
 		u8 mode = (id[ATA_ID_OLD_PIO_MODES] >> 8) & 0xFF;
 		if (mode < 5)	/* Valid PIO range */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pio_mask = (2 << mode) - 1;
+}
 		else
 			pio_mask = 1;
 
@@ -1515,15 +1611,27 @@ unsigned long ata_id_xfermask(const u16 *id)
 		int dma = (id[ATA_ID_CFA_MODES] >> 3) & 0x7;
 
 		if (pio)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pio_mask |= (1 << 5);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pio > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pio_mask |= (1 << 6);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mwdma_mask |= (1 << 3);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dma > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mwdma_mask |= (1 << 4);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	udma_mask = 0;
 	if (id[ATA_ID_FIELD_VALID] & (1 << 2))
 		udma_mask = id[ATA_ID_UDMA_MODES] & 0xff;
@@ -1582,6 +1690,7 @@ unsigned ata_exec_internal_sg(struct ata_device *dev,
 
 	/* no internal command while frozen */
 	if (ap->pflags & ATA_PFLAG_FROZEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irqrestore(ap->lock, flags);
 		return AC_ERR_SYSTEM;
 	}
@@ -1594,10 +1703,13 @@ unsigned ata_exec_internal_sg(struct ata_device *dev,
 	 * EH stuff without converting to it.
 	 */
 	if (ap->ops->error_handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tag = ATA_TAG_INTERNAL;
+}
 	else
 		tag = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	qc = __ata_qc_from_tag(ap, tag);
 
 	qc->tag = tag;
@@ -1634,6 +1746,7 @@ unsigned ata_exec_internal_sg(struct ata_device *dev,
 		for_each_sg(sgl, sg, n_elem, i)
 			buflen += sg->length;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_sg_init(qc, sgl, n_elem);
 		qc->nbytes = buflen;
 	}
@@ -1647,7 +1760,9 @@ unsigned ata_exec_internal_sg(struct ata_device *dev,
 
 	if (!timeout) {
 		if (ata_probe_timeout)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			timeout = ata_probe_timeout * 1000;
+}
 		else {
 			timeout = ata_internal_cmd_timeout(dev, command);
 			auto_timeout = 1;
@@ -1665,6 +1780,7 @@ unsigned ata_exec_internal_sg(struct ata_device *dev,
 	ata_sff_flush_pio_task(ap);
 
 	if (!rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irqsave(ap->lock, flags);
 
 		/* We're racing with irq here.  If we lose, the
@@ -1673,18 +1789,25 @@ unsigned ata_exec_internal_sg(struct ata_device *dev,
 		 * cleaned up by ->post_internal_cmd().
 		 */
 		if (qc->flags & ATA_QCFLAG_ACTIVE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qc->err_mask |= AC_ERR_TIMEOUT;
 
 			if (ap->ops->error_handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_port_freeze(ap);
+}
 			else
 				ata_qc_complete(qc);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ata_msg_warn(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_dev_warn(dev, "qc timeout (cmd 0x%x)\n",
 					     command);
+}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irqrestore(ap->lock, flags);
 	}
 
@@ -1698,11 +1821,14 @@ unsigned ata_exec_internal_sg(struct ata_device *dev,
 			qc->err_mask |= AC_ERR_DEV;
 
 		if (!qc->err_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qc->err_mask |= AC_ERR_OTHER;
+}
 
 		if (qc->err_mask & ~AC_ERR_OTHER)
 			qc->err_mask &= ~AC_ERR_OTHER;
 	} else if (qc->tf.command == ATA_CMD_REQ_SENSE_DATA) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		qc->result_tf.command |= ATA_SENSE;
 	}
 
@@ -1721,8 +1847,11 @@ unsigned ata_exec_internal_sg(struct ata_device *dev,
 	spin_unlock_irqrestore(ap->lock, flags);
 
 	if ((err_mask & AC_ERR_TIMEOUT) && auto_timeout)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_internal_cmd_timed_out(dev, command);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err_mask;
 }
 
@@ -1778,22 +1907,31 @@ unsigned int ata_pio_need_iordy(const struct ata_device *adev)
 	 * port is not occupied.  See bko#11703 for details.
 	 */
 	if (adev->link->ap->pflags & ATA_PFLAG_RESETTING)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	/* Controller doesn't support IORDY.  Probably a pointless
 	 * check as the caller should know this.
 	 */
 	if (adev->link->ap->flags & ATA_FLAG_NO_IORDY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	/* CF spec. r4.1 Table 22 says no iordy on PIO5 and PIO6.  */
 	if (ata_id_is_cfa(adev->id)
 	    && (adev->pio_mode == XFER_PIO_5 || adev->pio_mode == XFER_PIO_6))
 		return 0;
 	/* PIO3 and higher it is mandatory */
 	if (adev->pio_mode > XFER_PIO_2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	/* We turn it on when possible */
 	if (ata_id_has_iordy(adev->id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1871,7 +2009,9 @@ int ata_dev_read_id(struct ata_device *dev, unsigned int *p_class,
 	int rc;
 
 	if (ata_msg_ctl(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_dbg(dev, "%s: ENTER\n", __func__);
+}
 
 retry:
 	ata_tf_init(dev, &tf);
@@ -1905,17 +2045,23 @@ int ata_dev_read_id(struct ata_device *dev, unsigned int *p_class,
 	tf.flags |= ATA_TFLAG_POLLING;
 
 	if (ap->ops->read_id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err_mask = ap->ops->read_id(dev, &tf, id);
+}
 	else
 		err_mask = ata_do_dev_read_id(dev, &tf, id);
 
 	if (err_mask) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err_mask & AC_ERR_NODEV_HINT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_dbg(dev, "NODEV after polling detection\n");
 			return -ENOENT;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (is_semb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_info(dev,
 		     "IDENTIFY failed on device w/ SEMB sig, disabled\n");
 			/* SEMB is not supported yet */
@@ -1923,6 +2069,7 @@ int ata_dev_read_id(struct ata_device *dev, unsigned int *p_class,
 			return 0;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((err_mask == AC_ERR_DEV) && (tf.feature & ATA_ABORTED)) {
 			/* Device or controller might have reported
 			 * the wrong device class.  Give a shot at the
@@ -1930,10 +2077,13 @@ int ata_dev_read_id(struct ata_device *dev, unsigned int *p_class,
 			 * aborted by the device.
 			 */
 			if (may_fallback) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				may_fallback = 0;
 
 				if (class == ATA_DEV_ATA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					class = ATA_DEV_ATAPI;
+}
 				else
 					class = ATA_DEV_ATA;
 				goto retry;
@@ -1948,12 +2098,14 @@ int ata_dev_read_id(struct ata_device *dev, unsigned int *p_class,
 			return -ENOENT;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = -EIO;
 		reason = "I/O error";
 		goto err_out;
 	}
 
 	if (dev->horkage & ATA_HORKAGE_DUMP_ID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_dbg(dev, "dumping IDENTIFY data, "
 			    "class=%d may_fallback=%d tried_spinup=%d\n",
 			    class, may_fallback, tried_spinup);
@@ -1973,10 +2125,13 @@ int ata_dev_read_id(struct ata_device *dev, unsigned int *p_class,
 	reason = "device reports invalid type";
 
 	if (class == ATA_DEV_ATA || class == ATA_DEV_ZAC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ata_id_is_ata(id) && !ata_id_is_cfa(id))
 			goto err_out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ap->host->flags & ATA_HOST_IGNORE_ATA &&
 							ata_id_is_ata(id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_dbg(dev,
 				"host indicates ignore ATA devices, ignored\n");
 			return -ENOENT;
@@ -1987,6 +2142,7 @@ int ata_dev_read_id(struct ata_device *dev, unsigned int *p_class,
 	}
 
 	if (!tried_spinup && (id[2] == 0x37c8 || id[2] == 0x738c)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tried_spinup = 1;
 		/*
 		 * Drive powered-up in standby mode, and requires a specific
@@ -1994,7 +2150,9 @@ int ata_dev_read_id(struct ata_device *dev, unsigned int *p_class,
 		 * anything other than the original IDENTIFY command.
 		 */
 		err_mask = ata_dev_set_feature(dev, SETFEATURES_SPINUP, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err_mask && id[2] != 0x738c) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rc = -EIO;
 			reason = "SPINUP failed";
 			goto err_out;
@@ -2021,8 +2179,10 @@ int ata_dev_read_id(struct ata_device *dev, unsigned int *p_class,
 		 * should never trigger.
 		 */
 		if (ata_id_major_version(id) < 4 || !ata_id_has_lba(id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err_mask = ata_dev_init_params(dev, id[3], id[6]);
 			if (err_mask) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rc = -EIO;
 				reason = "INIT_DEV_PARAMS failed";
 				goto err_out;
@@ -2042,8 +2202,10 @@ int ata_dev_read_id(struct ata_device *dev, unsigned int *p_class,
 
  err_out:
 	if (ata_msg_warn(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev, "failed to IDENTIFY (%s, err_mask=0x%x)\n",
 			     reason, err_mask);
+}
 	return rc;
 }
 
@@ -2078,7 +2240,9 @@ unsigned int ata_read_log_page(struct ata_device *dev, u8 log,
 	 * which e.g. lockup on a read log page.
 	 */
 	if (ap_flags & ATA_FLAG_NO_LOG_PAGE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AC_ERR_DEV;
+}
 
 retry:
 	ata_tf_init(dev, &tf);
@@ -2116,7 +2280,9 @@ static bool ata_log_supported(struct ata_device *dev, u8 log)
 	struct ata_port *ap = dev->link->ap;
 
 	if (ata_read_log_page(dev, ATA_LOG_DIRECTORY, 0, ap->sector_buf, 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	return get_unaligned_le16(&ap->sector_buf[log * 2]) ? true : false;
 }
 
@@ -2126,6 +2292,7 @@ static bool ata_identify_page_supported(struct ata_device *dev, u8 page)
 	unsigned int err, i;
 
 	if (!ata_log_supported(dev, ATA_LOG_IDENTIFY_DEVICE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev, "ATA Identify Device Log not supported\n");
 		return false;
 	}
@@ -2157,19 +2324,27 @@ static int ata_do_link_spd_horkage(struct ata_device *dev)
 	u32 target, target_limit;
 
 	if (!sata_scr_valid(plink))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (dev->horkage & ATA_HORKAGE_1_5_GBPS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		target = 1;
+}
 	else
 		return 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	target_limit = (1 << target) - 1;
 
 	/* if already on stricter limit, no need to push further */
 	if (plink->sata_spd_limit <= target_limit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	plink->sata_spd_limit = target_limit;
 
 	/* Request another EH round by returning -EAGAIN if link is
@@ -2177,10 +2352,12 @@ static int ata_do_link_spd_horkage(struct ata_device *dev)
 	 * guaranteed by setting sata_spd_limit to target_limit above.
 	 */
 	if (plink->sata_spd > target) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_info(dev, "applying link speed limit horkage to %s\n",
 			     sata_spd_string(target));
 		return -EAGAIN;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -2189,7 +2366,9 @@ static inline u8 ata_dev_knobble(struct ata_device *dev)
 	struct ata_port *ap = dev->link->ap;
 
 	if (ata_dev_blacklisted(dev) & ATA_HORKAGE_BRIDGE_OK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return ((ap->cbl == ATA_CBL_SATA) && (!ata_id_is_sata(dev->id)));
 }
@@ -2200,6 +2379,7 @@ static void ata_dev_config_ncq_send_recv(struct ata_device *dev)
 	unsigned int err_mask;
 
 	if (!ata_log_supported(dev, ATA_LOG_NCQ_SEND_RECV)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev, "NCQ Send/Recv Log not supported\n");
 		return;
 	}
@@ -2229,6 +2409,7 @@ static void ata_dev_config_ncq_non_data(struct ata_device *dev)
 	unsigned int err_mask;
 
 	if (!ata_log_supported(dev, ATA_LOG_NCQ_NON_DATA)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev,
 			     "NCQ Send/Recv Log not supported\n");
 		return;
@@ -2252,6 +2433,7 @@ static void ata_dev_config_ncq_prio(struct ata_device *dev)
 	unsigned int err_mask;
 
 	if (!(dev->flags & ATA_DFLAG_NCQ_PRIO_ENABLE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->flags &= ~ATA_DFLAG_NCQ_PRIO;
 		return;
 	}
@@ -2286,6 +2468,7 @@ static int ata_dev_config_ncq(struct ata_device *dev,
 	char *aa_desc = "";
 
 	if (!ata_id_has_ncq(dev->id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		desc[0] = '\0';
 		return 0;
 	}
@@ -2338,7 +2521,9 @@ static void ata_dev_config_sense_reporting(struct ata_device *dev)
 	unsigned int err_mask;
 
 	if (!ata_id_has_sense_reporting(dev->id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (ata_id_sense_reporting_enabled(dev->id))
 		return;
@@ -2365,7 +2550,9 @@ static void ata_dev_config_zac(struct ata_device *dev)
 	 * Always set the 'ZAC' flag for Host-managed devices.
 	 */
 	if (dev->class == ATA_DEV_ZAC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->flags |= ATA_DFLAG_ZAC;
+}
 	else if (ata_id_zoned_cap(dev->id) == 0x01)
 		/*
 		 * Check for host-aware devices.
@@ -2412,7 +2599,9 @@ static void ata_dev_config_trusted(struct ata_device *dev)
 	unsigned int err;
 
 	if (!ata_id_has_trusted(dev->id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!ata_identify_page_supported(dev, ATA_LOG_SECURITY)) {
 		ata_dev_warn(dev,
@@ -2466,18 +2655,22 @@ int ata_dev_configure(struct ata_device *dev)
 	int rc;
 
 	if (!ata_dev_enabled(dev) && ata_msg_info(ap)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_info(dev, "%s: ENTER/EXIT -- nodev\n", __func__);
 		return 0;
 	}
 
 	if (ata_msg_probe(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_dbg(dev, "%s: ENTER\n", __func__);
+}
 
 	/* set horkage */
 	dev->horkage |= ata_dev_blacklisted(dev);
 	ata_force_horkage(dev);
 
 	if (dev->horkage & ATA_HORKAGE_DISABLE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_info(dev, "unsupported device, disabling\n");
 		ata_dev_disable(dev);
 		return 0;
@@ -2485,6 +2678,7 @@ int ata_dev_configure(struct ata_device *dev)
 
 	if ((!atapi_enabled || (ap->flags & ATA_FLAG_NO_ATAPI)) &&
 	    dev->class == ATA_DEV_ATAPI) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev, "WARNING: ATAPI is %s, device ignored\n",
 			     atapi_enabled ? "not supported with this driver"
 			     : "disabled");
@@ -2494,7 +2688,9 @@ int ata_dev_configure(struct ata_device *dev)
 
 	rc = ata_do_link_spd_horkage(dev);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	/* some WD SATA-1 drives have issues with LPM, turn on NOLPM for them */
 	if ((dev->horkage & ATA_HORKAGE_WD_BROKEN_LPM) &&
@@ -2502,6 +2698,7 @@ int ata_dev_configure(struct ata_device *dev)
 		dev->horkage |= ATA_HORKAGE_NOLPM;
 
 	if (dev->horkage & ATA_HORKAGE_NOLPM) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev, "LPM support broken, forcing max_power\n");
 		dev->link->ap->target_lpm_policy = ATA_LPM_MAX_POWER;
 	}
@@ -2509,21 +2706,27 @@ int ata_dev_configure(struct ata_device *dev)
 	/* let ACPI work its magic */
 	rc = ata_acpi_on_devcfg(dev);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	/* massage HPA, do it early as it might change IDENTIFY data */
 	rc = ata_hpa_resize(dev);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	/* print device capabilities */
 	if (ata_msg_probe(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_dbg(dev,
 			    "%s: cfg 49:%04x 82:%04x 83:%04x 84:%04x "
 			    "85:%04x 86:%04x 87:%04x 88:%04x\n",
 			    __func__,
 			    id[49], id[82], id[83], id[84],
 			    id[85], id[86], id[87], id[88]);
+}
 
 	/* initialize to-be-configured parameters */
 	dev->flags &= ~ATA_DFLAG_CFG_MASK;
@@ -2543,7 +2746,9 @@ int ata_dev_configure(struct ata_device *dev)
 	xfer_mask = ata_id_xfermask(id);
 
 	if (ata_msg_probe(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dump_id(id);
+}
 
 	/* SCSI only uses 4-char revisions, dump full 8 chars from ATA */
 	ata_id_c_string(dev->id, fwrevbuf, ATA_ID_FW_REV,
@@ -2554,20 +2759,27 @@ int ata_dev_configure(struct ata_device *dev)
 
 	/* ATA-specific feature tests */
 	if (dev->class == ATA_DEV_ATA || dev->class == ATA_DEV_ZAC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ata_id_is_cfa(id)) {
 			/* CPRM may make this media unusable */
 			if (id[ATA_ID_CFA_KEY_MGMT] & 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_dev_warn(dev,
 	"supports DRM functions and may not be fully accessible\n");
+}
 			snprintf(revbuf, 7, "CFA");
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			snprintf(revbuf, 7, "ATA-%d", ata_id_major_version(id));
 			/* Warn the user if the device has TPM extensions */
 			if (ata_id_has_tpm(id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_dev_warn(dev,
 	"supports DRM functions and may not be fully accessible\n");
+}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->n_sectors = ata_id_n_sectors(id);
 
 		/* get current R/W Multiple count setting */
@@ -2576,10 +2788,15 @@ int ata_dev_configure(struct ata_device *dev)
 			unsigned int cnt = dev->id[59] & 0xff;
 			/* only recognize/allow powers of two here */
 			if (is_power_of_2(max) && is_power_of_2(cnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (cnt <= max)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					dev->multi_count = cnt;
+}
+}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ata_id_has_lba(id)) {
 			const char *lba_desc;
 			char ncq_desc[24];
@@ -2587,6 +2804,7 @@ int ata_dev_configure(struct ata_device *dev)
 			lba_desc = "LBA";
 			dev->flags |= ATA_DFLAG_LBA;
 			if (ata_id_has_lba48(id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev->flags |= ATA_DFLAG_LBA48;
 				lba_desc = "LBA48";
 
@@ -2598,10 +2816,13 @@ int ata_dev_configure(struct ata_device *dev)
 			/* config NCQ */
 			rc = ata_dev_config_ncq(dev, ncq_desc, sizeof(ncq_desc));
 			if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return rc;
+}
 
 			/* print device info to dmesg */
 			if (ata_msg_drv(ap) && print_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_dev_info(dev, "%s: %s, %s, max %s\n",
 					     revbuf, modelbuf, fwrevbuf,
 					     ata_mode_string(xfer_mask));
@@ -2627,6 +2848,7 @@ int ata_dev_configure(struct ata_device *dev)
 
 			/* print device info to dmesg */
 			if (ata_msg_drv(ap) && print_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_dev_info(dev, "%s: %s, %s, max %s\n",
 					     revbuf,	modelbuf, fwrevbuf,
 					     ata_mode_string(xfer_mask));
@@ -2652,15 +2874,19 @@ int ata_dev_configure(struct ata_device *dev)
 						     sata_setting,
 						     1);
 			if (err_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_dev_dbg(dev,
 					    "failed to get Identify Device Data, Emask 0x%x\n",
 					    err_mask);
+}
 			else
 				for (i = 0; i < ATA_LOG_DEVSLP_SIZE; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					j = ATA_LOG_DEVSLP_OFFSET + i;
 					dev->devslp_timing[i] = sata_setting[j];
 				}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_config_sense_reporting(dev);
 		ata_dev_config_zac(dev);
 		ata_dev_config_trusted(dev);
@@ -2676,8 +2902,12 @@ int ata_dev_configure(struct ata_device *dev)
 
 		rc = atapi_cdb_len(id);
 		if ((rc < 12) || (rc > ATAPI_CDB_LEN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ata_msg_warn(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_dev_warn(dev, "unsupported CDB len\n");
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rc = -EINVAL;
 			goto err_out_nosup;
 		}
@@ -2696,26 +2926,32 @@ int ata_dev_configure(struct ata_device *dev)
 			err_mask = ata_dev_set_feature(dev,
 					SETFEATURES_SATA_ENABLE, SATA_AN);
 			if (err_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_dev_err(dev,
 					    "failed to enable ATAPI AN (err_mask=0x%x)\n",
 					    err_mask);
+}
 			else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev->flags |= ATA_DFLAG_AN;
 				atapi_an_string = ", ATAPI AN";
 			}
 		}
 
 		if (ata_id_cdb_intr(dev->id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->flags |= ATA_DFLAG_CDB_INTR;
 			cdb_intr_string = ", CDB intr";
 		}
 
 		if (atapi_dmadir || (dev->horkage & ATA_HORKAGE_ATAPI_DMADIR) || atapi_id_dmadir(dev->id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->flags |= ATA_DFLAG_DMADIR;
 			dma_dir_string = ", DMADIR";
 		}
 
 		if (ata_id_has_da(dev->id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->flags |= ATA_DFLAG_DA;
 			zpodd_init(dev);
 		}
@@ -2733,7 +2969,9 @@ int ata_dev_configure(struct ata_device *dev)
 	/* determine max_sectors */
 	dev->max_sectors = ATA_MAX_SECTORS;
 	if (dev->flags & ATA_DFLAG_LBA48)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->max_sectors = ATA_MAX_SECTORS_LBA48;
+}
 
 	/* Limit PATA drive on SATA cable bridge transfers to udma5,
 	   200 sectors */
@@ -2746,20 +2984,27 @@ int ata_dev_configure(struct ata_device *dev)
 
 	if ((dev->class == ATA_DEV_ATAPI) &&
 	    (atapi_command_packet_set(id) == TYPE_TAPE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->max_sectors = ATA_MAX_SECTORS_TAPE;
 		dev->horkage |= ATA_HORKAGE_STUCK_ERR;
 	}
 
 	if (dev->horkage & ATA_HORKAGE_MAX_SEC_128)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->max_sectors = min_t(unsigned int, ATA_MAX_SECTORS_128,
 					 dev->max_sectors);
+}
 
 	if (dev->horkage & ATA_HORKAGE_MAX_SEC_1024)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->max_sectors = min_t(unsigned int, ATA_MAX_SECTORS_1024,
 					 dev->max_sectors);
+}
 
 	if (dev->horkage & ATA_HORKAGE_MAX_SEC_LBA48)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->max_sectors = ATA_MAX_SECTORS_LBA48;
+}
 
 	if (ap->ops->dev_config)
 		ap->ops->dev_config(dev);
@@ -2771,7 +3016,9 @@ int ata_dev_configure(struct ata_device *dev)
 		   with buggy firmware may want to avoid reporting false device
 		   bugs */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (print_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_warn(dev,
 "Drive reports diagnostics failure. This may indicate a drive\n");
 			ata_dev_warn(dev,
@@ -2780,15 +3027,20 @@ int ata_dev_configure(struct ata_device *dev)
 	}
 
 	if ((dev->horkage & ATA_HORKAGE_FIRMWARE_WARN) && print_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev, "WARNING: device requires firmware update to be fully functional\n");
 		ata_dev_warn(dev, "         contact the vendor or visit http://ata.wiki.kernel.org\n");
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_out_nosup:
 	if (ata_msg_probe(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_dbg(dev, "%s: EXIT, err\n", __func__);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 }
 
@@ -2802,6 +3054,7 @@ int ata_dev_configure(struct ata_device *dev)
 
 int ata_cable_40wire(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ATA_CBL_PATA40;
 }
 
@@ -2815,6 +3068,7 @@ int ata_cable_40wire(struct ata_port *ap)
 
 int ata_cable_80wire(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ATA_CBL_PATA80;
 }
 
@@ -2827,6 +3081,7 @@ int ata_cable_80wire(struct ata_port *ap)
 
 int ata_cable_unknown(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ATA_CBL_PATA_UNK;
 }
 
@@ -2839,6 +3094,7 @@ int ata_cable_unknown(struct ata_port *ap)
  */
 int ata_cable_ignore(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ATA_CBL_PATA_IGN;
 }
 
@@ -2851,6 +3107,7 @@ int ata_cable_ignore(struct ata_port *ap)
 
 int ata_cable_sata(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ATA_CBL_SATA;
 }
 
@@ -2876,6 +3133,7 @@ int ata_bus_probe(struct ata_port *ap)
 	int rc;
 	struct ata_device *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_for_each_dev(dev, &ap->link, ALL)
 		tries[dev->devno] = ATA_PROBE_MAX_TRIES;
 
@@ -3005,7 +3263,9 @@ static void sata_print_link_status(struct ata_link *link)
 	u32 sstatus, scontrol, tmp;
 
 	if (sata_scr_read(link, SCR_STATUS, &sstatus))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	sata_scr_read(link, SCR_CONTROL, &scontrol);
 
 	if (ata_phys_link_online(link)) {
@@ -3031,7 +3291,10 @@ struct ata_device *ata_dev_pair(struct ata_device *adev)
 	struct ata_link *link = adev->link;
 	struct ata_device *pair = &link->device[1 - adev->devno];
 	if (!ata_dev_enabled(pair))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pair;
 }
 
@@ -3061,7 +3324,9 @@ int sata_down_spd_limit(struct ata_link *link, u32 spd_limit)
 	int rc, bit;
 
 	if (!sata_scr_valid(link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	/* If SCR can be read, use it to determine the current SPD.
 	 * If not, use cached value in link->sata_spd.
@@ -3121,10 +3386,14 @@ static int __sata_set_spd_needed(struct ata_link *link, u32 *scontrol)
 	 * configuration.
 	 */
 	if (!ata_is_host_link(link) && host_link->sata_spd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		limit &= (1 << host_link->sata_spd) - 1;
+}
 
 	if (limit == UINT_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		target = 0;
+}
 	else
 		target = fls(limit);
 
@@ -3154,7 +3423,9 @@ static int sata_set_spd_needed(struct ata_link *link)
 	u32 scontrol;
 
 	if (sata_scr_read(link, SCR_CONTROL, &scontrol))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	return __sata_set_spd_needed(link, &scontrol);
 }
@@ -3178,7 +3449,9 @@ int sata_set_spd(struct ata_link *link)
 	int rc;
 
 	if ((rc = sata_scr_read(link, SCR_CONTROL, &scontrol)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	if (!__sata_set_spd_needed(link, &scontrol))
 		return 0;
@@ -3238,6 +3511,7 @@ static const struct ata_timing ata_timing[] = {
 
 static void ata_timing_quantize(const struct ata_timing *t, struct ata_timing *q, int T, int UT)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	q->setup	= EZ(t->setup,       T);
 	q->act8b	= EZ(t->act8b,       T);
 	q->rec8b	= EZ(t->rec8b,       T);
@@ -3252,6 +3526,7 @@ static void ata_timing_quantize(const struct ata_timing *t, struct ata_timing *q
 void ata_timing_merge(const struct ata_timing *a, const struct ata_timing *b,
 		      struct ata_timing *m, unsigned int what)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (what & ATA_TIMING_SETUP  ) m->setup   = max(a->setup,   b->setup);
 	if (what & ATA_TIMING_ACT8B  ) m->act8b   = max(a->act8b,   b->act8b);
 	if (what & ATA_TIMING_REC8B  ) m->rec8b   = max(a->rec8b,   b->rec8b);
@@ -3267,6 +3542,7 @@ const struct ata_timing *ata_timing_find_mode(u8 xfer_mode)
 {
 	const struct ata_timing *t = ata_timing;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (xfer_mode > t->mode)
 		t++;
 
@@ -3291,7 +3567,9 @@ int ata_timing_compute(struct ata_device *adev, unsigned short speed,
 	 */
 
 	if (!(s = ata_timing_find_mode(speed)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	memcpy(t, s, sizeof(*s));
 
@@ -3377,6 +3655,7 @@ u8 ata_timing_cycle2mode(unsigned int xfer_shift, int cycle)
 	const struct ata_xfer_ent *ent;
 	const struct ata_timing *t;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (ent = ata_xfer_tbl; ent->shift >= 0; ent++)
 		if (ent->shift == xfer_shift)
 			base_mode = ent->base;
@@ -3506,15 +3785,21 @@ static int ata_dev_set_mode(struct ata_device *dev)
 
 	dev->flags &= ~ATA_DFLAG_PIO;
 	if (dev->xfer_shift == ATA_SHIFT_PIO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->flags |= ATA_DFLAG_PIO;
+}
 
 	if (nosetxfer && ap->flags & ATA_FLAG_SATA && ata_id_is_sata(dev->id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err_whine = " (SET_XFERMODE skipped)";
+}
 	else {
 		if (nosetxfer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_warn(dev,
 				     "NOSETXFER but PATA detected - can't "
 				     "skip SETXFER, might malfunction\n");
+}
 		err_mask = ata_dev_set_xfermode(dev);
 	}
 
@@ -3526,12 +3811,16 @@ static int ata_dev_set_mode(struct ata_device *dev)
 	rc = ata_dev_revalidate(dev, ATA_DEV_UNKNOWN, 0);
 	ehc->i.flags &= ~ATA_EHI_POST_SETMODE;
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	if (dev->xfer_shift == ATA_SHIFT_PIO) {
 		/* Old CFA may refuse this command, which is just fine */
 		if (ata_id_is_cfa(dev->id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ign_dev_err = 1;
+}
 		/* Catch several broken garbage emulations plus some pre
 		   ATA devices */
 		if (ata_id_major_version(dev->id) == 0 &&
@@ -3541,7 +3830,9 @@ static int ata_dev_set_mode(struct ata_device *dev)
 		   any kind of SET_XFERMODE request but support PIO0-2
 		   timings and no IORDY */
 		if (!ata_id_has_iordy(dev->id) && dev->pio_mode <= XFER_PIO_2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ign_dev_err = 1;
+}
 	}
 	/* Early MWDMA devices do DMA but don't allow DMA mode setting.
 	   Don't fail an MWDMA0 set IFF the device indicates it is in MWDMA0 */
@@ -3552,9 +3843,12 @@ static int ata_dev_set_mode(struct ata_device *dev)
 
 	/* if the device is actually configured correctly, ignore dev err */
 	if (dev->xfer_mode == ata_xfer_mask2mode(ata_id_xfermask(dev->id)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ign_dev_err = 1;
+}
 
 	if (err_mask & AC_ERR_DEV) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ign_dev_err)
 			goto fail;
 		else
@@ -3605,9 +3899,14 @@ int ata_do_set_mode(struct ata_link *link, struct ata_device **r_failed_dev)
 
 		mode_mask = ATA_DMA_MASK_ATA;
 		if (dev->class == ATA_DEV_ATAPI)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mode_mask = ATA_DMA_MASK_ATAPI;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (ata_id_is_cfa(dev->id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mode_mask = ATA_DMA_MASK_CFA;
+}
 
 		ata_dev_xfermask(dev);
 		ata_force_xfermask(dev);
@@ -3625,7 +3924,9 @@ int ata_do_set_mode(struct ata_link *link, struct ata_device **r_failed_dev)
 
 		found = 1;
 		if (ata_dma_enabled(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			used_dma = 1;
+}
 	}
 	if (!found)
 		goto out;
@@ -3633,6 +3934,7 @@ int ata_do_set_mode(struct ata_link *link, struct ata_device **r_failed_dev)
 	/* step 2: always set host PIO timings */
 	ata_for_each_dev(dev, link, ENABLED) {
 		if (dev->pio_mode == 0xff) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_warn(dev, "no PIO support\n");
 			rc = -EINVAL;
 			goto out;
@@ -3641,7 +3943,9 @@ int ata_do_set_mode(struct ata_link *link, struct ata_device **r_failed_dev)
 		dev->xfer_mode = dev->pio_mode;
 		dev->xfer_shift = ATA_SHIFT_PIO;
 		if (ap->ops->set_piomode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ap->ops->set_piomode(ap, dev);
+}
 	}
 
 	/* step 3: set host DMA timings */
@@ -3652,7 +3956,9 @@ int ata_do_set_mode(struct ata_link *link, struct ata_device **r_failed_dev)
 		dev->xfer_mode = dev->dma_mode;
 		dev->xfer_shift = ata_xfer_mode2shift(dev->dma_mode);
 		if (ap->ops->set_dmamode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ap->ops->set_dmamode(ap, dev);
+}
 	}
 
 	/* step 4: update devices' xfer mode */
@@ -3666,11 +3972,15 @@ int ata_do_set_mode(struct ata_link *link, struct ata_device **r_failed_dev)
 	 * host channels are not permitted to do so.
 	 */
 	if (used_dma && (ap->host->flags & ATA_HOST_SIMPLEX))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->host->simplex_claimed = ap;
+}
 
  out:
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*r_failed_dev = dev;
+}
 	return rc;
 }
 
@@ -3703,7 +4013,9 @@ int ata_wait_ready(struct ata_link *link, unsigned long deadline,
 
 	/* choose which 0xff timeout to use, read comment in libata.h */
 	if (link->ap->host->flags & ATA_HOST_PARALLEL_SCAN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nodev_deadline = ata_deadline(start, ATA_TMOUT_FF_WAIT_LONG);
+}
 	else
 		nodev_deadline = ata_deadline(start, ATA_TMOUT_FF_WAIT);
 
@@ -3714,15 +4026,20 @@ int ata_wait_ready(struct ata_link *link, unsigned long deadline,
 	WARN_ON(link == link->ap->slave_link);
 
 	if (time_after(nodev_deadline, deadline))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nodev_deadline = deadline;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		unsigned long now = jiffies;
 		int ready, tmp;
 
 		ready = tmp = check_ready(link);
 		if (ready > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
 		/*
 		 * -ENODEV could be transient.  Ignore -ENODEV if link
@@ -3736,27 +4053,40 @@ int ata_wait_ready(struct ata_link *link, unsigned long deadline,
 		 * there's no device attached.
 		 */
 		if (ready == -ENODEV) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ata_link_online(link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ready = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			else if ((link->ap->flags & ATA_FLAG_SATA) &&
 				 !ata_link_offline(link) &&
 				 time_before(now, nodev_deadline))
 				ready = 0;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ready)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ready;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (time_after(now, deadline))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EBUSY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!warned && time_after(now, start + 5 * HZ) &&
 		    (deadline - now > 3 * HZ)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_link_warn(link,
 				"link is slow to respond, please be patient "
 				"(ready=%d)\n", tmp);
 			warned = 1;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_msleep(link->ap, 50);
 	}
 }
@@ -3778,6 +4108,7 @@ int ata_wait_ready(struct ata_link *link, unsigned long deadline,
 int ata_wait_after_reset(struct ata_link *link, unsigned long deadline,
 				int (*check_ready)(struct ata_link *link))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_msleep(link->ap, ATA_WAIT_AFTER_RESET);
 
 	return ata_wait_ready(link, deadline, check_ready);
@@ -3816,19 +4147,26 @@ int sata_link_debounce(struct ata_link *link, const unsigned long *params,
 
 	t = ata_deadline(jiffies, params[2]);
 	if (time_before(t, deadline))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		deadline = t;
+}
 
 	if ((rc = sata_scr_read(link, SCR_STATUS, &cur)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 	cur &= 0xf;
 
 	last = cur;
 	last_jiffies = jiffies;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		ata_msleep(link->ap, interval);
 		if ((rc = sata_scr_read(link, SCR_STATUS, &cur)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return rc;
+}
 		cur &= 0xf;
 
 		/* DET stable? */
@@ -3849,7 +4187,9 @@ int sata_link_debounce(struct ata_link *link, const unsigned long *params,
 		 * -EPIPE to tell upper layer to lower link speed.
 		 */
 		if (time_after(jiffies, deadline))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPIPE;
+}
 	}
 }
 
@@ -3875,7 +4215,9 @@ int sata_link_resume(struct ata_link *link, const unsigned long *params,
 	int rc;
 
 	if ((rc = sata_scr_read(link, SCR_CONTROL, &scontrol)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	/*
 	 * Writes to SControl sometimes get ignored under certain
@@ -3885,7 +4227,9 @@ int sata_link_resume(struct ata_link *link, const unsigned long *params,
 	do {
 		scontrol = (scontrol & 0x0f0) | 0x300;
 		if ((rc = sata_scr_write(link, SCR_CONTROL, scontrol)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return rc;
+}
 		/*
 		 * Some PHYs react badly if SStatus is pounded
 		 * immediately after resuming.  Delay 200ms before
@@ -3896,21 +4240,28 @@ int sata_link_resume(struct ata_link *link, const unsigned long *params,
 
 		/* is SControl restored correctly? */
 		if ((rc = sata_scr_read(link, SCR_CONTROL, &scontrol)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return rc;
+}
 	} while ((scontrol & 0xf0f) != 0x300 && --tries);
 
 	if ((scontrol & 0xf0f) != 0x300) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_link_warn(link, "failed to resume link (SControl %X)\n",
 			     scontrol);
 		return 0;
 	}
 
 	if (tries < ATA_LINK_RESUME_TRIES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_link_warn(link, "link resume succeeded after %d retries\n",
 			      ATA_LINK_RESUME_TRIES - tries);
+}
 
 	if ((rc = sata_link_debounce(link, params, deadline)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	/* clear SError, some PHYs require this even for SRST to work */
 	if (!(rc = sata_scr_read(link, SCR_ERROR, &serror)))
@@ -3947,7 +4298,9 @@ int sata_link_scr_lpm(struct ata_link *link, enum ata_lpm_policy policy,
 
 	rc = sata_scr_read(link, SCR_CONTROL, &scontrol);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	switch (policy) {
 	case ATA_LPM_MAX_POWER:
@@ -4017,22 +4370,30 @@ int ata_std_prereset(struct ata_link *link, unsigned long deadline)
 
 	/* if we're about to do hardreset, nothing more to do */
 	if (ehc->i.action & ATA_EH_HARDRESET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* if SATA, resume link */
 	if (ap->flags & ATA_FLAG_SATA) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = sata_link_resume(link, timing, deadline);
 		/* whine about phy resume failure but proceed */
 		if (rc && rc != -EOPNOTSUPP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_link_warn(link,
 				      "failed to resume link for reset (errno=%d)\n",
 				      rc);
+}
 	}
 
 	/* no point in trying softreset on offline link */
 	if (ata_phys_link_offline(link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ehc->i.action &= ~ATA_EH_SOFTRESET;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -4081,11 +4442,13 @@ int sata_link_hardreset(struct ata_link *link, const unsigned long *timing,
 		if ((rc = sata_scr_read(link, SCR_CONTROL, &scontrol)))
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scontrol = (scontrol & 0x0f0) | 0x304;
 
 		if ((rc = sata_scr_write(link, SCR_CONTROL, scontrol)))
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sata_set_spd(link);
 	}
 
@@ -4115,6 +4478,7 @@ int sata_link_hardreset(struct ata_link *link, const unsigned long *timing,
 	if (online)
 		*online = true;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sata_pmp_supported(link->ap) && ata_is_host_link(link)) {
 		/* If PMP is supported, we have to do follow-up SRST.
 		 * Some PMPs don't send D2H Reg FIS after hardreset if
@@ -4126,14 +4490,20 @@ int sata_link_hardreset(struct ata_link *link, const unsigned long *timing,
 
 			pmp_deadline = ata_deadline(jiffies,
 						    ATA_TMOUT_PMP_SRST_WAIT);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (time_after(pmp_deadline, deadline))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pmp_deadline = deadline;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_wait_ready(link, pmp_deadline, check_ready);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = -EAGAIN;
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rc = 0;
 	if (check_ready)
 		rc = ata_wait_ready(link, deadline, check_ready);
@@ -4141,7 +4511,10 @@ int sata_link_hardreset(struct ata_link *link, const unsigned long *timing,
 	if (rc && rc != -EAGAIN) {
 		/* online is set iff link is online && reset succeeded */
 		if (online)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*online = false;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_link_err(link, "COMRESET failed (errno=%d)\n", rc);
 	}
 	DPRINTK("EXIT, rc=%d\n", rc);
@@ -4165,6 +4538,7 @@ int sata_link_hardreset(struct ata_link *link, const unsigned long *timing,
 int sata_std_hardreset(struct ata_link *link, unsigned int *class,
 		       unsigned long deadline)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const unsigned long *timing = sata_ehc_deb_timing(&link->eh_context);
 	bool online;
 	int rc;
@@ -4226,6 +4600,7 @@ static int ata_dev_same_device(struct ata_device *dev, unsigned int new_class,
 	unsigned char serial[2][ATA_ID_SERNO_LEN + 1];
 
 	if (dev->class != new_class) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_info(dev, "class mismatch %d != %d\n",
 			     dev->class, new_class);
 		return 0;
@@ -4237,17 +4612,20 @@ static int ata_dev_same_device(struct ata_device *dev, unsigned int new_class,
 	ata_id_c_string(new_id, serial[1], ATA_ID_SERNO, sizeof(serial[1]));
 
 	if (strcmp(model[0], model[1])) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_info(dev, "model number mismatch '%s' != '%s'\n",
 			     model[0], model[1]);
 		return 0;
 	}
 
 	if (strcmp(serial[0], serial[1])) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_info(dev, "serial number mismatch '%s' != '%s'\n",
 			     serial[0], serial[1]);
 		return 0;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -4274,11 +4652,15 @@ int ata_dev_reread_id(struct ata_device *dev, unsigned int readid_flags)
 	/* read ID data */
 	rc = ata_dev_read_id(dev, &class, readid_flags, id);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	/* is the device still there? */
 	if (!ata_dev_same_device(dev, class, id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	memcpy(dev->id, id, sizeof(id[0]) * ATA_ID_WORDS);
 	return 0;
@@ -4307,7 +4689,9 @@ int ata_dev_revalidate(struct ata_device *dev, unsigned int new_class,
 	int rc;
 
 	if (!ata_dev_enabled(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* fail early if !ATA && !ATAPI to avoid issuing [P]IDENTIFY to PMP */
 	if (ata_class_enabled(new_class) &&
@@ -4315,6 +4699,7 @@ int ata_dev_revalidate(struct ata_device *dev, unsigned int new_class,
 	    new_class != ATA_DEV_ATAPI &&
 	    new_class != ATA_DEV_ZAC &&
 	    new_class != ATA_DEV_SEMB) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_info(dev, "class mismatch %u != %u\n",
 			     dev->class, new_class);
 		rc = -ENODEV;
@@ -4348,6 +4733,7 @@ int ata_dev_revalidate(struct ata_device *dev, unsigned int new_class,
 	 */
 	if (dev->n_native_sectors == n_native_sectors &&
 	    dev->n_sectors > n_sectors && dev->n_sectors == n_native_sectors) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev,
 			     "new n_sectors matches native, probably "
 			     "late HPA unlock, n_sectors updated\n");
@@ -4364,6 +4750,7 @@ int ata_dev_revalidate(struct ata_device *dev, unsigned int new_class,
 	if (dev->n_native_sectors == n_native_sectors &&
 	    dev->n_sectors < n_sectors && n_sectors == n_native_sectors &&
 	    !(dev->horkage & ATA_HORKAGE_BROKEN_HPA)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev,
 			     "old n_sectors matches native, probably "
 			     "late HPA lock, will try to unlock HPA\n");
@@ -4371,7 +4758,9 @@ int ata_dev_revalidate(struct ata_device *dev, unsigned int new_class,
 		dev->flags |= ATA_DFLAG_UNLOCK_HPA;
 		rc = -EIO;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = -ENODEV;
+}
 
 	/* restore original n_[native_]sectors and fail */
 	dev->n_native_sectors = n_native_sectors;
@@ -4597,13 +4986,20 @@ static unsigned long ata_dev_blacklisted(const struct ata_device *dev)
 
 	while (ad->model_num) {
 		if (glob_match(ad->model_num, model_num)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ad->model_rev == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ad->horkage;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (glob_match(ad->model_rev, model_rev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ad->horkage;
+}
 		}
 		ad++;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -4629,6 +5025,7 @@ static int ata_dma_blacklisted(const struct ata_device *dev)
 
 static int ata_is_40wire(struct ata_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->horkage & ATA_HORKAGE_IVB)
 		return ata_drive_40wire_relaxed(dev->id);
 	return ata_drive_40wire(dev->id);
@@ -4654,18 +5051,24 @@ static int cable_is_40wire(struct ata_port *ap)
 
 	/* If the controller thinks we are 40 wire, we are. */
 	if (ap->cbl == ATA_CBL_PATA40)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/* If the controller thinks we are 80 wire, we are. */
 	if (ap->cbl == ATA_CBL_PATA80 || ap->cbl == ATA_CBL_SATA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* If the system is known to be 40 wire short cable (eg
 	 * laptop), then we allow 80 wire modes even if the drive
 	 * isn't sure.
 	 */
 	if (ap->cbl == ATA_CBL_PATA40_SHORT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* If the controller doesn't know, we scan.
 	 *
@@ -4677,11 +5080,16 @@ static int cable_is_40wire(struct ata_port *ap)
 	 *   to colour the choice
 	 */
 	ata_for_each_link(link, ap, EDGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_for_each_dev(dev, link, ENABLED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!ata_is_40wire(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -4725,6 +5133,7 @@ static void ata_dev_xfermask(struct ata_device *dev)
 	}
 
 	if (ata_dma_blacklisted(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xfer_mask &= ~(ATA_MASK_MWDMA | ATA_MASK_UDMA);
 		ata_dev_warn(dev,
 			     "device is on DMA blacklist, disabling DMA\n");
@@ -4732,16 +5141,21 @@ static void ata_dev_xfermask(struct ata_device *dev)
 
 	if ((host->flags & ATA_HOST_SIMPLEX) &&
 	    host->simplex_claimed && host->simplex_claimed != ap) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xfer_mask &= ~(ATA_MASK_MWDMA | ATA_MASK_UDMA);
 		ata_dev_warn(dev,
 			     "simplex DMA is claimed by other device, disabling DMA\n");
 	}
 
 	if (ap->flags & ATA_FLAG_NO_IORDY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xfer_mask &= ata_pio_mask_no_iordy(dev);
+}
 
 	if (ap->ops->mode_filter)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xfer_mask = ap->ops->mode_filter(dev, xfer_mask);
+}
 
 	/* Apply cable rule here.  Don't apply it early because when
 	 * we handle hot plug the cable type can itself change.
@@ -4754,6 +5168,7 @@ static void ata_dev_xfermask(struct ata_device *dev)
 	if (xfer_mask & (0xF8 << ATA_SHIFT_UDMA))
 		/* UDMA/44 or higher would be available */
 		if (cable_is_40wire(ap)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_warn(dev,
 				     "limited to UDMA/33 due to 40-wire cable\n");
 			xfer_mask &= ~(0xF8 << ATA_SHIFT_UDMA);
@@ -4798,7 +5213,9 @@ static unsigned int ata_dev_set_xfermode(struct ata_device *dev)
 		tf.nsect = dev->xfer_mode;
 	/* If the device has IORDY and the controller does not - turn it off */
  	else if (ata_id_has_iordy(dev->id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tf.nsect = 0x01;
+}
 	else /* In the ancient relic department - skip all of this */
 		return 0;
 
@@ -4841,8 +5258,10 @@ unsigned int ata_dev_set_feature(struct ata_device *dev, u8 enable, u8 feature)
 	tf.nsect = feature;
 
 	if (enable == SETFEATURES_SPINUP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		timeout = ata_probe_timeout ?
 			  ata_probe_timeout * 1000 : SETFEATURES_SPINUP_TIMEOUT;
+}
 	err_mask = ata_exec_internal(dev, &tf, NULL, DMA_NONE, NULL, 0, timeout);
 
 	DPRINTK("EXIT, err_mask=%x\n", err_mask);
@@ -4919,8 +5338,11 @@ int atapi_check_dma(struct ata_queued_cmd *qc)
 		return 1;
 
 	if (ap->ops->check_atapi_dma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ap->ops->check_atapi_dma(qc);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -4944,13 +5366,19 @@ int ata_std_qc_defer(struct ata_queued_cmd *qc)
 	struct ata_link *link = qc->dev->link;
 
 	if (ata_is_ncq(qc->tf.protocol)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ata_tag_valid(link->active_tag))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	} else {
 		if (!ata_tag_valid(link->active_tag) && !link->sactive)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ATA_DEFER_LINK;
 }
 
@@ -5789,12 +6217,14 @@ static const struct dev_pm_ops ata_port_pm_ops = {
  */
 void ata_sas_port_suspend(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_port_suspend_async(ap, PMSG_SUSPEND);
 }
 EXPORT_SYMBOL_GPL(ata_sas_port_suspend);
 
 void ata_sas_port_resume(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_port_resume_async(ap, PMSG_RESUME);
 }
 EXPORT_SYMBOL_GPL(ata_sas_port_resume);
@@ -5808,6 +6238,7 @@ EXPORT_SYMBOL_GPL(ata_sas_port_resume);
  */
 int ata_host_suspend(struct ata_host *host, pm_message_t mesg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	host->dev->power.power_state = mesg;
 	return 0;
 }
@@ -5820,6 +6251,7 @@ int ata_host_suspend(struct ata_host *host, pm_message_t mesg)
  */
 void ata_host_resume(struct ata_host *host)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	host->dev->power.power_state = PMSG_ON;
 }
 #endif
@@ -5923,11 +6355,15 @@ int sata_link_init_spd(struct ata_link *link)
 
 	rc = sata_scr_read(link, SCR_CONTROL, &link->saved_scontrol);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	spd = (link->saved_scontrol >> 4) & 0xf;
 	if (spd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		link->hw_sata_spd_limit &= (1 << spd) - 1;
+}
 
 	ata_force_link_limits(link);
 
@@ -5956,7 +6392,9 @@ struct ata_port *ata_port_alloc(struct ata_host *host)
 
 	ap = kzalloc(sizeof(*ap), GFP_KERNEL);
 	if (!ap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	ap->pflags |= ATA_PFLAG_INITIALIZING | ATA_PFLAG_FROZEN;
 	ap->lock = &host->lock;
@@ -5999,6 +6437,7 @@ struct ata_port *ata_port_alloc(struct ata_host *host)
 
 static void ata_host_release(struct device *gendev, void *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_host *host = dev_get_drvdata(gendev);
 	int i;
 
@@ -6049,7 +6488,9 @@ struct ata_host *ata_host_alloc(struct device *dev, int max_ports)
 	DPRINTK("ENTER\n");
 
 	if (!devres_open_group(dev, NULL, GFP_KERNEL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/* alloc a container for our list of ATA ports (buses) */
 	sz = sizeof(struct ata_host) + (max_ports + 1) * sizeof(void *);
@@ -6112,7 +6553,9 @@ struct ata_host *ata_host_alloc_pinfo(struct device *dev,
 
 	host = ata_host_alloc(dev, n_ports);
 	if (!host)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	for (i = 0, j = 0, pi = NULL; i < host->n_ports; i++) {
 		struct ata_port *ap = host->ports[i];
@@ -6131,6 +6574,7 @@ struct ata_host *ata_host_alloc_pinfo(struct device *dev,
 			host->ops = pi->port_ops;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return host;
 }
 
@@ -6184,6 +6628,7 @@ int ata_slave_link_init(struct ata_port *ap)
 {
 	struct ata_link *link;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(ap->slave_link);
 	WARN_ON(ap->flags & ATA_FLAG_PMP);
 
@@ -6198,6 +6643,7 @@ int ata_slave_link_init(struct ata_port *ap)
 
 static void ata_host_stop(struct device *gendev, void *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_host *host = dev_get_drvdata(gendev);
 	int i;
 
@@ -6243,8 +6689,11 @@ static void ata_finalize_port_ops(struct ata_port_operations *ops)
 	void **pp;
 
 	if (!ops || !ops->inherits)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&lock);
 
 	for (cur = ops->inherits; cur; cur = cur->inherits) {
@@ -6257,7 +6706,9 @@ static void ata_finalize_port_ops(struct ata_port_operations *ops)
 
 	for (pp = begin; pp < end; pp++)
 		if (IS_ERR(*pp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*pp = NULL;
+}
 
 	ops->inherits = NULL;
 
@@ -6287,7 +6738,9 @@ int ata_host_start(struct ata_host *host)
 	int i, rc;
 
 	if (host->flags & ATA_HOST_STARTED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ata_finalize_port_ops(host->ops);
 
@@ -6297,19 +6750,27 @@ int ata_host_start(struct ata_host *host)
 		ata_finalize_port_ops(ap->ops);
 
 		if (!host->ops && !ata_port_is_dummy(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			host->ops = ap->ops;
+}
 
 		if (ap->ops->port_stop)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			have_stop = 1;
+}
 	}
 
 	if (host->ops->host_stop)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		have_stop = 1;
+}
 
 	if (have_stop) {
 		start_dr = devres_alloc(ata_host_stop, 0, GFP_KERNEL);
 		if (!start_dr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	}
 
 	for (i = 0; i < host->n_ports; i++) {
@@ -6318,10 +6779,13 @@ int ata_host_start(struct ata_host *host)
 		if (ap->ops->port_start) {
 			rc = ap->ops->port_start(ap);
 			if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (rc != -ENODEV)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					dev_err(host->dev,
 						"failed to start port %d (errno=%d)\n",
 						i, rc);
+}
 				goto err_out;
 			}
 		}
@@ -6338,8 +6802,11 @@ int ata_host_start(struct ata_host *host)
 		struct ata_port *ap = host->ports[i];
 
 		if (ap->ops->port_stop)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ap->ops->port_stop(ap);
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	devres_free(start_dr);
 	return rc;
 }
@@ -6354,6 +6821,7 @@ int ata_host_start(struct ata_host *host)
 void ata_host_init(struct ata_host *host, struct device *dev,
 		   struct ata_port_operations *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_init(&host->lock);
 	mutex_init(&host->eh_mutex);
 	host->n_tags = ATA_MAX_QUEUE - 1;
@@ -6389,6 +6857,7 @@ int ata_port_probe(struct ata_port *ap)
 		ata_port_wait_eh(ap);
 	} else {
 		DPRINTK("ata%u: bus probe begin\n", ap->print_id);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = ata_bus_probe(ap);
 		DPRINTK("ata%u: bus probe end\n", ap->print_id);
 	}
@@ -6408,7 +6877,9 @@ static void async_port_probe(void *data, async_cookie_t cookie)
 	 * don't need to wait for port 0, only for later ports.
 	 */
 	if (!(ap->host->flags & ATA_HOST_PARALLEL_SCAN) && ap->port_no != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		async_synchronize_cookie(cookie);
+}
 
 	(void)ata_port_probe(ap);
 
@@ -6442,7 +6913,9 @@ int ata_host_register(struct ata_host *host, struct scsi_host_template *sht)
 
 	/* host must have been started */
 	if (!(host->flags & ATA_HOST_STARTED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(host->dev, "BUG: trying to register unstarted host\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(1);
 		return -EINVAL;
 	}
@@ -6452,7 +6925,9 @@ int ata_host_register(struct ata_host *host, struct scsi_host_template *sht)
 	 * allocation time.
 	 */
 	for (i = host->n_ports; host->ports[i]; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(host->ports[i]);
+}
 
 	/* give ports names and add SCSI hosts */
 	for (i = 0; i < host->n_ports; i++) {
@@ -6484,7 +6959,9 @@ int ata_host_register(struct ata_host *host, struct scsi_host_template *sht)
 		/* init sata_spd_limit to the current value */
 		sata_link_init_spd(&ap->link);
 		if (ap->slave_link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sata_link_init_spd(ap->slave_link);
+}
 
 		/* print per-port info to dmesg */
 		xfer_mask = ata_pack_xfermask(ap->pio_mask, ap->mwdma_mask,
@@ -6497,7 +6974,9 @@ int ata_host_register(struct ata_host *host, struct scsi_host_template *sht)
 				      ap->link.eh_info.desc);
 			ata_ehi_clear_desc(&ap->link.eh_info);
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_port_info(ap, "DUMMY\n");
+}
 	}
 
 	/* perform each probe asynchronously */
@@ -6506,12 +6985,15 @@ int ata_host_register(struct ata_host *host, struct scsi_host_template *sht)
 		async_schedule(async_port_probe, ap);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  err_tadd:
 	while (--i >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_tport_delete(host->ports[i]);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 
 }
@@ -6548,10 +7030,13 @@ int ata_host_activate(struct ata_host *host, int irq,
 
 	rc = ata_host_start(host);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	/* Special case for polling mode */
 	if (!irq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(irq_handler);
 		return ata_host_register(host, sht);
 	}
@@ -6560,12 +7045,16 @@ int ata_host_activate(struct ata_host *host, int irq,
 				  dev_driver_string(host->dev),
 				  dev_name(host->dev));
 	if (!irq_desc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	rc = devm_request_irq(host->dev, irq, irq_handler, irq_flags,
 			      irq_desc, host);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	for (i = 0; i < host->n_ports; i++)
 		ata_port_desc(host->ports[i], "irq %d", irq);
@@ -6573,8 +7062,11 @@ int ata_host_activate(struct ata_host *host, int irq,
 	rc = ata_host_register(host, sht);
 	/* if failed, just free the IRQ and leave ports alone */
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		devm_free_irq(host->dev, irq, host);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 }
 
@@ -6643,6 +7135,7 @@ void ata_host_detach(struct ata_host *host)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < host->n_ports; i++)
 		ata_port_detach(host->ports[i]);
 
@@ -6665,6 +7158,7 @@ void ata_host_detach(struct ata_host *host)
  */
 void ata_pci_remove_one(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_host *host = pci_get_drvdata(pdev);
 
 	ata_host_detach(host);
@@ -6707,6 +7201,7 @@ int pci_test_config_bits(struct pci_dev *pdev, const struct pci_bits *bits)
 #ifdef CONFIG_PM
 void ata_pci_device_do_suspend(struct pci_dev *pdev, pm_message_t mesg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_save_state(pdev);
 	pci_disable_device(pdev);
 
@@ -6723,6 +7218,7 @@ int ata_pci_device_do_resume(struct pci_dev *pdev)
 
 	rc = pcim_enable_device(pdev);
 	if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&pdev->dev,
 			"failed to enable device after resume (%d)\n", rc);
 		return rc;
@@ -6734,6 +7230,7 @@ int ata_pci_device_do_resume(struct pci_dev *pdev)
 
 int ata_pci_device_suspend(struct pci_dev *pdev, pm_message_t mesg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_host *host = pci_get_drvdata(pdev);
 	int rc = 0;
 
@@ -6748,6 +7245,7 @@ int ata_pci_device_suspend(struct pci_dev *pdev, pm_message_t mesg)
 
 int ata_pci_device_resume(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_host *host = pci_get_drvdata(pdev);
 	int rc;
 
@@ -6773,6 +7271,7 @@ int ata_pci_device_resume(struct pci_dev *pdev)
  */
 int ata_platform_remove_one(struct platform_device *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_host *host = platform_get_drvdata(pdev);
 
 	ata_host_detach(host);
@@ -6922,11 +7421,16 @@ static void __init ata_parse_force_param(void)
 
 	/* calculate maximum number of params and allocate force_tbl */
 	for (p = ata_force_param_buf; *p; p++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (*p == ',')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			size++;
+}
+}
 
 	ata_force_tbl = kzalloc(sizeof(ata_force_tbl[0]) * size, GFP_KERNEL);
 	if (!ata_force_tbl) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_WARNING "ata: failed to extend force table, "
 		       "libata.force ignored\n");
 		return;
@@ -6939,17 +7443,21 @@ static void __init ata_parse_force_param(void)
 
 		next = cur;
 		if (ata_parse_force_one(&next, &te, &reason)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_WARNING "ata: failed to parse force "
 			       "parameter \"%s\" (%s)\n",
 			       cur, reason);
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (te.port == -1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			te.port = last_port;
 			te.device = last_device;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_force_tbl[idx++] = te;
 
 		last_port = te.port;
@@ -6967,6 +7475,7 @@ static int __init ata_init(void)
 
 	rc = ata_sff_init();
 	if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(ata_force_tbl);
 		return rc;
 	}
@@ -6974,6 +7483,7 @@ static int __init ata_init(void)
 	libata_transport_init();
 	ata_scsi_transport_template = ata_attach_transport();
 	if (!ata_scsi_transport_template) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_sff_exit();
 		rc = -ENOMEM;
 		goto err_out;
@@ -6988,6 +7498,7 @@ static int __init ata_init(void)
 
 static void __exit ata_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_release_transport(ata_scsi_transport_template);
 	libata_transport_exit();
 	ata_sff_exit();
@@ -7001,6 +7512,7 @@ static DEFINE_RATELIMIT_STATE(ratelimit, HZ / 5, 1);
 
 int ata_ratelimit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __ratelimit(&ratelimit);
 }
 
@@ -7075,6 +7587,7 @@ u32 ata_wait_register(struct ata_port *ap, void __iomem *reg, u32 mask, u32 val,
 	deadline = ata_deadline(jiffies, timeout);
 
 	while ((tmp & mask) == val && time_before(jiffies, deadline)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_msleep(ap, interval);
 		tmp = ioread32(reg);
 	}
@@ -7101,7 +7614,9 @@ bool sata_lpm_ignore_phy_events(struct ata_link *link)
 
 	/* if LPM is enabled, PHYRDY doesn't mean anything */
 	if (link->lpm_policy > ATA_LPM_MAX_POWER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	/* ignore the first PHY event after the LPM policy changed
 	 * as it is might be spurious
@@ -7110,6 +7625,7 @@ bool sata_lpm_ignore_phy_events(struct ata_link *link)
 	    time_before(jiffies, lpm_timeout))
 		return true;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 EXPORT_SYMBOL_GPL(sata_lpm_ignore_phy_events);
@@ -7119,6 +7635,7 @@ EXPORT_SYMBOL_GPL(sata_lpm_ignore_phy_events);
  */
 static unsigned int ata_dummy_qc_issue(struct ata_queued_cmd *qc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return AC_ERR_SYSTEM;
 }
 
@@ -7171,8 +7688,10 @@ void ata_link_printk(const struct ata_link *link, const char *level,
 	vaf.va = &args;
 
 	if (sata_pmp_attached(link->ap) || link->ap->slave_link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk("%sata%u.%02u: %pV",
 		       level, link->ap->print_id, link->pmp, &vaf);
+}
 	else
 		printk("%sata%u: %pV",
 		       level, link->ap->print_id, &vaf);
diff --git a/drivers/ata/libata-eh.c b/drivers/ata/libata-eh.c
index ea20e0e..5944885 100644
--- a/drivers/ata/libata-eh.c
+++ b/drivers/ata/libata-eh.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  libata-eh.c - libata error handling
  *
@@ -218,7 +220,9 @@ void ata_ehi_push_desc(struct ata_eh_info *ehi, const char *fmt, ...)
 	va_list args;
 
 	if (ehi->desc_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__ata_ehi_push_desc(ehi, ", ");
+}
 
 	va_start(args, fmt);
 	__ata_ehi_pushv_desc(ehi, fmt, args);
@@ -292,9 +296,14 @@ void ata_port_pbar_desc(struct ata_port *ap, int bar, ssize_t offset,
 	unsigned long long start, len;
 
 	if (pci_resource_flags(pdev, bar) & IORESOURCE_MEM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type = "m";
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (pci_resource_flags(pdev, bar) & IORESOURCE_IO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type = "i";
+}
 
 	start = (unsigned long long)pci_resource_start(pdev, bar);
 	len = (unsigned long long)pci_resource_len(pdev, bar);
@@ -317,9 +326,12 @@ static int ata_lookup_timeout_table(u8 cmd)
 
 		for (cur = ata_eh_cmd_timeout_table[i].commands; *cur; cur++)
 			if (*cur == cmd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return i;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -1;
 }
 
@@ -343,7 +355,9 @@ unsigned long ata_internal_cmd_timeout(struct ata_device *dev, u8 cmd)
 	int idx;
 
 	if (ent < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ATA_EH_CMD_DFL_TIMEOUT;
+}
 
 	idx = ehc->cmd_timeout_idx[dev->devno][ent];
 	return ata_eh_cmd_timeout_table[ent].timeouts[idx];
@@ -368,7 +382,9 @@ void ata_internal_cmd_timed_out(struct ata_device *dev, u8 cmd)
 	int idx;
 
 	if (ent < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	idx = ehc->cmd_timeout_idx[dev->devno][ent];
 	if (ata_eh_cmd_timeout_table[ent].timeouts[idx + 1] != ULONG_MAX)
@@ -396,7 +412,10 @@ static struct ata_ering_entry *ata_ering_top(struct ata_ering *ering)
 	struct ata_ering_entry *ent = &ering->ring[ering->cursor];
 
 	if (ent->err_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ent;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -454,9 +473,11 @@ static void ata_eh_clear_action(struct ata_link *link, struct ata_device *dev,
 
 		/* break ehi->action into ehi->dev_action */
 		if (ehi->action & action) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_for_each_dev(tdev, link, ALL)
 				ehi->dev_action[tdev->devno] |=
 					ehi->action & action;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ehi->action &= ~action;
 		}
 
@@ -530,19 +551,25 @@ enum blk_eh_timer_return ata_scsi_timed_out(struct scsi_cmnd *cmd)
 	DPRINTK("ENTER\n");
 
 	if (ap->ops->error_handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = BLK_EH_NOT_HANDLED;
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = BLK_EH_HANDLED;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(ap->lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	qc = ata_qc_from_tag(ap, ap->link.active_tag);
 	if (qc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(qc->scsicmd != cmd);
 		qc->flags |= ATA_QCFLAG_EH_SCHEDULED;
 		qc->err_mask |= AC_ERR_TIMEOUT;
 		ret = BLK_EH_NOT_HANDLED;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(ap->lock, flags);
 
  out:
@@ -590,6 +617,7 @@ static void ata_eh_unload(struct ata_port *ap)
  */
 void ata_scsi_error(struct Scsi_Host *host)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_port *ap = ata_shost_to_port(host);
 	unsigned long flags;
 	LIST_HEAD(eh_work_q);
@@ -660,7 +688,9 @@ void ata_scsi_cmd_error_handler(struct Scsi_Host *host, struct ata_port *ap,
 		   this as if normal completion won the race */
 
 		if (ap->ops->lost_interrupt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ap->ops->lost_interrupt(ap);
+}
 
 		list_for_each_entry_safe(scmd, tmp, eh_work_q, eh_entry) {
 			struct ata_queued_cmd *qc;
@@ -697,7 +727,9 @@ void ata_scsi_cmd_error_handler(struct Scsi_Host *host, struct ata_port *ap,
 		 * be done atomically w.r.t. setting QCFLAG_FAILED.
 		 */
 		if (nr_timedout)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__ata_port_freeze(ap);
+}
 
 
 		/* initialize eh_tries */
@@ -749,7 +781,9 @@ void ata_scsi_port_error_handler(struct Scsi_Host *host, struct ata_port *ap)
 
 				ehc->saved_xfer_mode[devno] = dev->xfer_mode;
 				if (ata_ncq_enabled(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ehc->saved_ncq_enabled |= 1 << devno;
+}
 			}
 		}
 
@@ -767,6 +801,7 @@ void ata_scsi_port_error_handler(struct Scsi_Host *host, struct ata_port *ap)
 			if ((ap->pflags & ATA_PFLAG_UNLOADING) &&
 			    !(ap->pflags & ATA_PFLAG_UNLOADED))
 				ata_eh_unload(ap);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_eh_finish(ap);
 		}
 
@@ -784,6 +819,7 @@ void ata_scsi_port_error_handler(struct Scsi_Host *host, struct ata_port *ap)
 				spin_unlock_irqrestore(ap->lock, flags);
 				goto repeat;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_port_err(ap,
 				     "EH pending after %d tries, giving up\n",
 				     ATA_EH_MAX_TRIES);
@@ -804,6 +840,7 @@ void ata_scsi_port_error_handler(struct Scsi_Host *host, struct ata_port *ap)
 		spin_unlock_irqrestore(ap->lock, flags);
 		ata_eh_release(ap);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(ata_qc_from_tag(ap, ap->link.active_tag) == NULL);
 		ap->ops->eng_timeout(ap);
 	}
@@ -816,10 +853,14 @@ void ata_scsi_port_error_handler(struct Scsi_Host *host, struct ata_port *ap)
 	if (ap->pflags & ATA_PFLAG_LOADING)
 		ap->pflags &= ~ATA_PFLAG_LOADING;
 	else if (ap->pflags & ATA_PFLAG_SCSI_HOTPLUG)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		schedule_delayed_work(&ap->hotplug_task, 0);
+}
 
 	if (ap->pflags & ATA_PFLAG_RECOVERED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_port_info(ap, "EH complete\n");
+}
 
 	ap->pflags &= ~(ATA_PFLAG_SCSI_HOTPLUG | ATA_PFLAG_RECOVERED);
 
@@ -860,6 +901,7 @@ void ata_port_wait_eh(struct ata_port *ap)
 
 	/* make sure SCSI EH is complete */
 	if (scsi_host_in_recovery(ap->scsi_host)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_msleep(ap, 10);
 		goto retry;
 	}
@@ -874,7 +916,9 @@ static int ata_eh_nr_in_flight(struct ata_port *ap)
 	/* count only non-internal commands */
 	for (tag = 0; tag < ATA_MAX_QUEUE - 1; tag++)
 		if (ata_qc_from_tag(ap, tag))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nr++;
+}
 
 	return nr;
 }
@@ -885,6 +929,7 @@ void ata_eh_fastdrain_timerfn(unsigned long arg)
 	unsigned long flags;
 	int cnt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(ap->lock, flags);
 
 	cnt = ata_eh_nr_in_flight(ap);
@@ -936,17 +981,23 @@ static void ata_eh_set_pending(struct ata_port *ap, int fastdrain)
 
 	/* already scheduled? */
 	if (ap->pflags & ATA_PFLAG_EH_PENDING)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	ap->pflags |= ATA_PFLAG_EH_PENDING;
 
 	if (!fastdrain)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* do we have in-flight qcs? */
 	cnt = ata_eh_nr_in_flight(ap);
 	if (!cnt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* activate fast drain */
 	ap->fastdrain_cnt = cnt;
@@ -998,7 +1049,9 @@ void ata_std_sched_eh(struct ata_port *ap)
 	WARN_ON(!ap->ops->error_handler);
 
 	if (ap->pflags & ATA_PFLAG_INITIALIZING)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	ata_eh_set_pending(ap, 1);
 	scsi_schedule_eh(ap->scsi_host);
@@ -1064,7 +1117,9 @@ static int ata_do_link_abort(struct ata_port *ap, struct ata_link *link)
 	}
 
 	if (!nr_aborted)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_port_schedule_eh(ap);
+}
 
 	return nr_aborted;
 }
@@ -1083,6 +1138,7 @@ static int ata_do_link_abort(struct ata_port *ap, struct ata_link *link)
  */
 int ata_link_abort(struct ata_link *link)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ata_do_link_abort(link->ap, link);
 }
 
@@ -1151,6 +1207,7 @@ int ata_port_freeze(struct ata_port *ap)
 {
 	int nr_aborted;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!ap->ops->error_handler);
 
 	__ata_port_freeze(ap);
@@ -1178,7 +1235,9 @@ int sata_async_notification(struct ata_port *ap)
 	int rc;
 
 	if (!(ap->flags & ATA_FLAG_AN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	rc = sata_scr_read(&ap->link, SCR_NOTIFICATION, &sntf);
 	if (rc == 0)
@@ -1246,7 +1305,9 @@ void ata_eh_freeze_port(struct ata_port *ap)
 	unsigned long flags;
 
 	if (!ap->ops->error_handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_irqsave(ap->lock, flags);
 	__ata_port_freeze(ap);
@@ -1267,7 +1328,9 @@ void ata_eh_thaw_port(struct ata_port *ap)
 	unsigned long flags;
 
 	if (!ap->ops->error_handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_irqsave(ap->lock, flags);
 
@@ -1330,7 +1393,9 @@ void ata_eh_qc_retry(struct ata_queued_cmd *qc)
 {
 	struct scsi_cmnd *scmd = qc->scsicmd;
 	if (!qc->err_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scmd->allowed++;
+}
 	__ata_eh_qc_complete(qc);
 }
 
@@ -1346,10 +1411,16 @@ void ata_eh_qc_retry(struct ata_queued_cmd *qc)
 void ata_dev_disable(struct ata_device *dev)
 {
 	if (!ata_dev_enabled(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ata_msg_drv(dev->link->ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev, "disabled\n");
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_acpi_on_disable(dev);
 	ata_down_xfermask_limit(dev, ATA_DNXFER_FORCE_PIO0 | ATA_DNXFER_QUIET);
 	dev->class++;
@@ -1383,6 +1454,7 @@ void ata_eh_detach_dev(struct ata_device *dev)
 	dev->flags &= ~ATA_DFLAG_DETACH;
 
 	if (ata_scsi_offline_dev(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->flags |= ATA_DFLAG_DETACHED;
 		ap->pflags |= ATA_PFLAG_SCSI_HOTPLUG;
 	}
@@ -1425,7 +1497,9 @@ void ata_eh_about_to_do(struct ata_link *link, struct ata_device *dev,
 	 * slave links as master will do them again.
 	 */
 	if (!(ehc->i.flags & ATA_EHI_QUIET) && link != ap->slave_link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->pflags |= ATA_PFLAG_RECOVERED;
+}
 
 	spin_unlock_irqrestore(ap->lock, flags);
 }
@@ -1466,6 +1540,7 @@ void ata_eh_done(struct ata_link *link, struct ata_device *dev,
  */
 static const char *ata_err_string(unsigned int err_mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (err_mask & AC_ERR_HOST_BUS)
 		return "host bus error";
 	if (err_mask & AC_ERR_ATA_BUS)
@@ -1510,7 +1585,9 @@ static int ata_eh_read_log_10h(struct ata_device *dev,
 
 	err_mask = ata_read_log_page(dev, ATA_LOG_SATA_NCQ, 0, buf, 1);
 	if (err_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	csum = 0;
 	for (i = 0; i < ATA_SECT_SIZE; i++)
@@ -1591,6 +1668,7 @@ static void ata_eh_request_sense(struct ata_queued_cmd *qc,
 	unsigned int err_mask;
 
 	if (qc->ap->pflags & ATA_PFLAG_FROZEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev, "sense data available but port frozen\n");
 		return;
 	}
@@ -1666,6 +1744,7 @@ unsigned int atapi_eh_request_sense(struct ata_device *dev,
 		tf.protocol = ATAPI_PROT_DMA;
 		tf.feature |= ATAPI_PKT_DMA;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tf.protocol = ATAPI_PROT_PIO;
 		tf.lbam = SCSI_SENSE_BUFFERSIZE;
 		tf.lbah = 0;
@@ -1693,14 +1772,17 @@ static void ata_eh_analyze_serror(struct ata_link *link)
 	u32 hotplug_mask;
 
 	if (serror & (SERR_PERSISTENT | SERR_DATA)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err_mask |= AC_ERR_ATA_BUS;
 		action |= ATA_EH_RESET;
 	}
 	if (serror & SERR_PROTOCOL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err_mask |= AC_ERR_HSM;
 		action |= ATA_EH_RESET;
 	}
 	if (serror & SERR_INTERNAL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err_mask |= AC_ERR_SYSTEM;
 		action |= ATA_EH_RESET;
 	}
@@ -1711,14 +1793,19 @@ static void ata_eh_analyze_serror(struct ata_link *link)
 	 * considered as X bit is left at 1 for link plugging.
 	 */
 	if (link->lpm_policy > ATA_LPM_MAX_POWER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hotplug_mask = 0;	/* hotplug doesn't work w/ LPM */
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (!(link->flags & ATA_LFLAG_DISABLED) || ata_is_host_link(link))
 		hotplug_mask = SERR_PHYRDY_CHG | SERR_DEV_XCHG;
 	else
 		hotplug_mask = SERR_PHYRDY_CHG;
 
 	if (serror & hotplug_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_ehi_hotplugged(&ehc->i);
+}
 
 	ehc->i.err_mask |= err_mask;
 	ehc->i.action |= action;
@@ -1751,29 +1838,38 @@ void ata_eh_analyze_ncq_error(struct ata_link *link)
 
 	/* is it NCQ device error? */
 	if (!link->sactive || !(ehc->i.err_mask & AC_ERR_DEV))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* has LLDD analyzed already? */
 	for (tag = 0; tag < ATA_MAX_QUEUE; tag++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		qc = __ata_qc_from_tag(ap, tag);
 
 		if (!(qc->flags & ATA_QCFLAG_FAILED))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (qc->err_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 	}
 
 	/* okay, this error is ours */
 	memset(&tf, 0, sizeof(tf));
 	rc = ata_eh_read_log_10h(dev, &tag, &tf);
 	if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_link_err(link, "failed to read log page 10h (errno=%d)\n",
 			     rc);
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(link->sactive & (1 << tag))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_link_err(link, "log page 10h reported inactive tag %d\n",
 			     tag);
 		return;
@@ -1781,9 +1877,11 @@ void ata_eh_analyze_ncq_error(struct ata_link *link)
 
 	/* we've got the perpetrator, condemn it */
 	qc = __ata_qc_from_tag(ap, tag);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&qc->result_tf, &tf, sizeof(tf));
 	qc->result_tf.flags = ATA_TFLAG_ISADDR | ATA_TFLAG_LBA | ATA_TFLAG_LBA48;
 	qc->err_mask |= AC_ERR_DEV | AC_ERR_NCQ;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((qc->result_tf.command & ATA_SENSE) || qc->result_tf.auxiliary) {
 		char sense_key, asc, ascq;
 
@@ -1796,6 +1894,7 @@ void ata_eh_analyze_ncq_error(struct ata_link *link)
 		qc->flags |= ATA_QCFLAG_SENSE_VALID;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ehc->i.err_mask &= ~AC_ERR_DEV;
 }
 
@@ -1821,6 +1920,7 @@ static unsigned int ata_eh_analyze_tf(struct ata_queued_cmd *qc,
 	u8 stat = tf->command, err = tf->feature;
 
 	if ((stat & (ATA_BUSY | ATA_DRQ | ATA_DRDY)) != ATA_DRDY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		qc->err_mask |= AC_ERR_HSM;
 		return ATA_EH_RESET;
 	}
@@ -1832,8 +1932,11 @@ static unsigned int ata_eh_analyze_tf(struct ata_queued_cmd *qc,
 		 * device fault bit is set.
 		 */
 		if (stat & ATA_DF)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			stat &= ~ATA_SENSE;
+}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 
@@ -1841,13 +1944,24 @@ static unsigned int ata_eh_analyze_tf(struct ata_queued_cmd *qc,
 	case ATA_DEV_ATA:
 	case ATA_DEV_ZAC:
 		if (stat & ATA_SENSE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_eh_request_sense(qc, qc->scsicmd);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err & ATA_ICRC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qc->err_mask |= AC_ERR_ATA_BUS;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err & (ATA_UNC | ATA_AMNF))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qc->err_mask |= AC_ERR_MEDIA;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err & ATA_IDNF)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qc->err_mask |= AC_ERR_INVALID;
+}
 		break;
 
 	case ATA_DEV_ATAPI:
@@ -1874,15 +1988,20 @@ static unsigned int ata_eh_analyze_tf(struct ata_queued_cmd *qc,
 		 * command would need to be retried.
 		 */
 		if (ret == NEEDS_RETRY || ret == ADD_TO_MLQUEUE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qc->flags |= ATA_QCFLAG_RETRY;
 			qc->err_mask |= AC_ERR_OTHER;
 		} else if (ret != SUCCESS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qc->err_mask |= AC_ERR_HSM;
 		}
 	}
 	if (qc->err_mask & (AC_ERR_HSM | AC_ERR_TIMEOUT | AC_ERR_ATA_BUS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		action |= ATA_EH_RESET;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return action;
 }
 
@@ -1895,22 +2014,33 @@ static int ata_eh_categorize_error(unsigned int eflags, unsigned int err_mask,
 		*xfer_ok = 1;
 
 	if (!*xfer_ok)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		base = ATA_ECAT_DUBIOUS_NONE;
+}
 
 	if (err_mask & AC_ERR_ATA_BUS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return base + ATA_ECAT_ATA_BUS;
+}
 
 	if (err_mask & AC_ERR_TIMEOUT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return base + ATA_ECAT_TOUT_HSM;
+}
 
 	if (eflags & ATA_EFLAG_IS_IO) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err_mask & AC_ERR_HSM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return base + ATA_ECAT_TOUT_HSM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((err_mask &
 		     (AC_ERR_DEV|AC_ERR_MEDIA|AC_ERR_INVALID)) == AC_ERR_DEV)
 			return base + ATA_ECAT_UNK_DEV;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1925,6 +2055,7 @@ static int speed_down_verdict_cb(struct ata_ering_entry *ent, void *void_arg)
 	struct speed_down_verdict_arg *arg = void_arg;
 	int cat;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((ent->eflags & ATA_EFLAG_OLD_ER) || (ent->timestamp < arg->since))
 		return -1;
 
@@ -2001,6 +2132,7 @@ static unsigned int ata_eh_speed_down_verdict(struct ata_device *dev)
 
 	/* scan past 5 mins of error history */
 	memset(&arg, 0, sizeof(arg));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	arg.since = j64 - min(j64, j5mins);
 	ata_ering_map(&dev->ering, speed_down_verdict_cb, &arg);
 
@@ -2062,7 +2194,9 @@ static unsigned int ata_eh_speed_down(struct ata_device *dev,
 
 	/* don't bother if Cat-0 error */
 	if (ata_eh_categorize_error(eflags, err_mask, &xfer_ok) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* record error and determine whether speed down is necessary */
 	ata_ering_record(&dev->ering, eflags, err_mask);
@@ -2072,6 +2206,7 @@ static unsigned int ata_eh_speed_down(struct ata_device *dev,
 	if ((verdict & ATA_EH_SPDN_NCQ_OFF) &&
 	    (dev->flags & (ATA_DFLAG_PIO | ATA_DFLAG_NCQ |
 			   ATA_DFLAG_NCQ_OFF)) == ATA_DFLAG_NCQ) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->flags |= ATA_DFLAG_NCQ_OFF;
 		ata_dev_warn(dev, "NCQ disabled due to excessive errors\n");
 		goto done;
@@ -2081,6 +2216,7 @@ static unsigned int ata_eh_speed_down(struct ata_device *dev,
 	if (verdict & ATA_EH_SPDN_SPEED_DOWN) {
 		/* speed down SATA link speed if possible */
 		if (sata_down_spd_limit(link, 0) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			action |= ATA_EH_RESET;
 			goto done;
 		}
@@ -2094,13 +2230,17 @@ static unsigned int ata_eh_speed_down(struct ata_device *dev,
 			int sel;
 
 			if (dev->xfer_shift != ATA_SHIFT_PIO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sel = dma_dnxfer_sel[dev->spdn_cnt];
+}
 			else
 				sel = pio_dnxfer_sel[dev->spdn_cnt];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->spdn_cnt++;
 
 			if (ata_down_xfermask_limit(dev, sel) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				action |= ATA_EH_RESET;
 				goto done;
 			}
@@ -2113,18 +2253,24 @@ static unsigned int ata_eh_speed_down(struct ata_device *dev,
 	if ((verdict & ATA_EH_SPDN_FALLBACK_TO_PIO) && (dev->spdn_cnt >= 2) &&
 	    (link->ap->cbl != ATA_CBL_SATA || dev->class == ATA_DEV_ATAPI) &&
 	    (dev->xfer_shift != ATA_SHIFT_PIO)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ata_down_xfermask_limit(dev, ATA_DNXFER_FORCE_PIO) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->spdn_cnt = 0;
 			action |= ATA_EH_RESET;
 			goto done;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
  done:
 	/* device has been slowed down, blow error history */
 	if (!(verdict & ATA_EH_SPDN_KEEP_ERRORS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_ering_clear(&dev->ering);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return action;
 }
 
@@ -2140,11 +2286,17 @@ static unsigned int ata_eh_speed_down(struct ata_device *dev,
 static inline int ata_eh_worth_retry(struct ata_queued_cmd *qc)
 {
 	if (qc->err_mask & AC_ERR_MEDIA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;	/* don't retry media errors */
+}
 	if (qc->flags & ATA_QCFLAG_IO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;	/* otherwise retry anything from fs stack */
+}
 	if (qc->err_mask & AC_ERR_INVALID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;	/* don't retry these */
+}
 	return qc->err_mask != AC_ERR_DEV;  /* retry if not dev error */
 }
 
@@ -2191,7 +2343,9 @@ static void ata_eh_link_autopsy(struct ata_link *link)
 
 	/* any real error trumps AC_ERR_OTHER */
 	if (ehc->i.err_mask & ~AC_ERR_OTHER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ehc->i.err_mask &= ~AC_ERR_OTHER;
+}
 
 	all_err_mask |= ehc->i.err_mask;
 
@@ -2210,8 +2364,10 @@ static void ata_eh_link_autopsy(struct ata_link *link)
 
 		/* DEV errors are probably spurious in case of ATA_BUS error */
 		if (qc->err_mask & AC_ERR_ATA_BUS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_MEDIA |
 					  AC_ERR_INVALID);
+}
 
 		/* any real error trumps unknown error */
 		if (qc->err_mask & ~AC_ERR_OTHER)
@@ -2229,7 +2385,9 @@ static void ata_eh_link_autopsy(struct ata_link *link)
 		ehc->i.dev = qc->dev;
 		all_err_mask |= qc->err_mask;
 		if (qc->flags & ATA_QCFLAG_IO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			eflags |= ATA_EFLAG_IS_IO;
+}
 		trace_ata_eh_link_autopsy_qc(qc);
 	}
 
@@ -2252,7 +2410,9 @@ static void ata_eh_link_autopsy(struct ata_link *link)
 
 	/* propagate timeout to host link */
 	if ((all_err_mask & AC_ERR_TIMEOUT) && !ata_is_host_link(link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->link.eh_context.i.err_mask |= AC_ERR_TIMEOUT;
+}
 
 	/* record error and consider speeding down */
 	dev = ehc->i.dev;
@@ -2312,8 +2472,10 @@ void ata_eh_autopsy(struct ata_port *ap)
 	 * Perform host link autopsy last.
 	 */
 	if (sata_pmp_attached(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_eh_link_autopsy(&ap->link);
 }
+}
 
 /**
  *	ata_get_cmd_descript - get description for ATA command
@@ -2428,6 +2590,7 @@ const char *ata_get_cmd_descript(u8 command)
 	};
 
 	unsigned int i;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; cmd_descr[i].text; i++)
 		if (cmd_descr[i].command == command)
 			return cmd_descr[i].text;
@@ -2457,6 +2620,7 @@ static void ata_eh_link_report(struct ata_link *link)
 	if (ehc->i.flags & ATA_EHI_QUIET)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	desc = NULL;
 	if (ehc->i.desc[0] != '\0')
 		desc = ehc->i.desc;
@@ -2472,38 +2636,55 @@ static void ata_eh_link_report(struct ata_link *link)
 		if (qc->flags & ATA_QCFLAG_SENSE_VALID && !qc->err_mask)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nr_failed++;
 	}
 
 	if (!nr_failed && !ehc->i.err_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	frozen = "";
 	if (ap->pflags & ATA_PFLAG_FROZEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		frozen = " frozen";
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ap->eh_tries < ATA_EH_MAX_TRIES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		snprintf(tries_buf, sizeof(tries_buf), " t%d",
 			 ap->eh_tries);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ehc->i.dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_err(ehc->i.dev, "exception Emask 0x%x "
 			    "SAct 0x%x SErr 0x%x action 0x%x%s%s\n",
 			    ehc->i.err_mask, link->sactive, ehc->i.serror,
 			    ehc->i.action, frozen, tries_buf);
 		if (desc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_err(ehc->i.dev, "%s\n", desc);
+}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_link_err(link, "exception Emask 0x%x "
 			     "SAct 0x%x SErr 0x%x action 0x%x%s%s\n",
 			     ehc->i.err_mask, link->sactive, ehc->i.serror,
 			     ehc->i.action, frozen, tries_buf);
 		if (desc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_link_err(link, "%s\n", desc);
+}
 	}
 
 #ifdef CONFIG_ATA_VERBOSE_ERROR
 	if (ehc->i.serror)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_link_err(link,
 		  "SError: { %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s}\n",
 		  ehc->i.serror & SERR_DATA_RECOVERED ? "RecovData " : "",
@@ -2523,9 +2704,12 @@ static void ata_eh_link_report(struct ata_link *link)
 		  ehc->i.serror & SERR_TRANS_ST_ERROR ? "TrStaTrns " : "",
 		  ehc->i.serror & SERR_UNRECOG_FIS ? "UnrecFIS " : "",
 		  ehc->i.serror & SERR_DEV_XCHG ? "DevExch " : "");
+}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (tag = 0; tag < ATA_MAX_QUEUE; tag++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct ata_queued_cmd *qc = __ata_qc_from_tag(ap, tag);
 		struct ata_taskfile *cmd = &qc->tf, *res = &qc->result_tf;
 		char data_buf[20] = "";
@@ -2535,6 +2719,7 @@ static void ata_eh_link_report(struct ata_link *link)
 		    ata_dev_phys_link(qc->dev) != link || !qc->err_mask)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (qc->dma_dir != DMA_NONE) {
 			static const char *dma_str[] = {
 				[DMA_BIDIRECTIONAL]	= "bidi",
@@ -2572,27 +2757,35 @@ static void ata_eh_link_report(struct ata_link *link)
 				prot_str = "dma";
 				break;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			snprintf(data_buf, sizeof(data_buf), " %s %u %s",
 				 prot_str, qc->nbytes, dma_str[qc->dma_dir]);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ata_is_atapi(qc->tf.protocol)) {
 			const u8 *cdb = qc->cdb;
 			size_t cdb_len = qc->dev->cdb_len;
 
 			if (qc->scsicmd) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cdb = qc->scsicmd->cmnd;
 				cdb_len = qc->scsicmd->cmd_len;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__scsi_format_command(cdb_buf, sizeof(cdb_buf),
 					      cdb, cdb_len);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			const char *descr = ata_get_cmd_descript(cmd->command);
 			if (descr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_dev_err(qc->dev, "failed command: %s\n",
 					    descr);
+}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_err(qc->dev,
 			"cmd %02x/%02x:%02x:%02x:%02x:%02x/%02x:%02x:%02x:%02x:%02x/%02x "
 			"tag %d%s\n         %s"
@@ -2613,8 +2806,11 @@ static void ata_eh_link_report(struct ata_link *link)
 #ifdef CONFIG_ATA_VERBOSE_ERROR
 		if (res->command & (ATA_BUSY | ATA_DRDY | ATA_DF | ATA_DRQ |
 				    ATA_SENSE | ATA_ERR)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (res->command & ATA_BUSY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_dev_err(qc->dev, "status: { Busy }\n");
+}
 			else
 				ata_dev_err(qc->dev, "status: { %s%s%s%s%s}\n",
 				  res->command & ATA_DRDY ? "DRDY " : "",
@@ -2624,6 +2820,7 @@ static void ata_eh_link_report(struct ata_link *link)
 				  res->command & ATA_ERR ? "ERR " : "");
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cmd->command != ATA_CMD_PACKET &&
 		    (res->feature & (ATA_ICRC | ATA_UNC | ATA_AMNF |
 				     ATA_IDNF | ATA_ABORTED)))
@@ -2670,11 +2867,18 @@ static int ata_do_reset(struct ata_link *link, ata_reset_fn_t reset,
 static int ata_eh_followup_srst_needed(struct ata_link *link, int rc)
 {
 	if ((link->flags & ATA_LFLAG_NO_SRST) || ata_link_offline(link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (rc == -EAGAIN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sata_pmp_supported(link->ap) && ata_is_host_link(link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	return 0;
 }
 
@@ -2704,20 +2908,31 @@ int ata_eh_reset(struct ata_link *link, int classify,
 	while (ata_eh_reset_timeouts[max_tries] != ULONG_MAX)
 		max_tries++;
 	if (link->flags & ATA_LFLAG_RST_ONCE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		max_tries = 1;
+}
 	if (link->flags & ATA_LFLAG_NO_HRST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hardreset = NULL;
+}
 	if (link->flags & ATA_LFLAG_NO_SRST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		softreset = NULL;
+}
 
 	/* make sure each reset attempt is at least COOL_DOWN apart */
 	if (ehc->i.flags & ATA_EHI_DID_RESET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		now = jiffies;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(time_after(ehc->last_reset, now));
 		deadline = ata_deadline(ehc->last_reset,
 					ATA_EH_RESET_COOL_DOWN);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (time_before(now, deadline))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			schedule_timeout_uninterruptible(deadline - now);
+}
 	}
 
 	spin_lock_irqsave(ap->lock, flags);
@@ -2743,16 +2958,20 @@ int ata_eh_reset(struct ata_link *link, int classify,
 		 * configuring devices.
 		 */
 		if (ap->ops->set_piomode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ap->ops->set_piomode(ap, dev);
+}
 	}
 
 	/* prefer hardreset */
 	reset = NULL;
 	ehc->i.action &= ~ATA_EH_RESET;
 	if (hardreset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		reset = hardreset;
 		ehc->i.action |= ATA_EH_HARDRESET;
 	} else if (softreset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		reset = softreset;
 		ehc->i.action |= ATA_EH_SOFTRESET;
 	}
@@ -2762,6 +2981,7 @@ int ata_eh_reset(struct ata_link *link, int classify,
 						      ATA_EH_PRERESET_TIMEOUT);
 
 		if (slave) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sehc->i.action &= ~ATA_EH_RESET;
 			sehc->i.action |= ehc->i.action;
 		}
@@ -2777,24 +2997,33 @@ int ata_eh_reset(struct ata_link *link, int classify,
 
 			tmp = prereset(slave, deadline);
 			if (tmp != -ENOENT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rc = tmp;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ehc->i.action |= sehc->i.action;
 		}
 
 		if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (rc == -ENOENT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_link_dbg(link, "port disabled--ignoring\n");
 				ehc->i.action &= ~ATA_EH_RESET;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_for_each_dev(dev, link, ALL)
 					classes[dev->devno] = ATA_DEV_NONE;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rc = 0;
 			} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_link_err(link,
 					     "prereset failed (errno=%d)\n",
 					     rc);
+}
 			goto out;
 		}
 
@@ -2802,11 +3031,14 @@ int ata_eh_reset(struct ata_link *link, int classify,
 		 * bang classes, thaw and return.
 		 */
 		if (reset && !(ehc->i.action & ATA_EH_RESET)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_for_each_dev(dev, link, ALL)
 				classes[dev->devno] = ATA_DEV_NONE;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if ((ap->pflags & ATA_PFLAG_FROZEN) &&
 			    ata_is_host_link(link))
 				ata_eh_thaw_port(ap);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rc = 0;
 			goto out;
 		}
@@ -2823,8 +3055,10 @@ int ata_eh_reset(struct ata_link *link, int classify,
 
 	if (reset) {
 		if (verbose)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_link_info(link, "%s resetting link\n",
 				      reset == softreset ? "soft" : "hard");
+}
 
 		/* mark that this EH session started with reset */
 		ehc->last_reset = jiffies;
@@ -2835,6 +3069,7 @@ int ata_eh_reset(struct ata_link *link, int classify,
 
 		rc = ata_do_reset(link, reset, classes, deadline, true);
 		if (rc && rc != -EAGAIN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			failed_link = link;
 			goto fail;
 		}
@@ -2844,8 +3079,11 @@ int ata_eh_reset(struct ata_link *link, int classify,
 			int tmp;
 
 			if (verbose)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_link_info(slave, "hard resetting link\n");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_eh_about_to_do(slave, NULL, ATA_EH_RESET);
 			tmp = ata_do_reset(slave, reset, classes, deadline,
 					   false);
@@ -2864,9 +3102,11 @@ int ata_eh_reset(struct ata_link *link, int classify,
 		/* perform follow-up SRST if necessary */
 		if (reset == hardreset &&
 		    ata_eh_followup_srst_needed(link, rc)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			reset = softreset;
 
 			if (!reset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_link_err(link,
 	     "follow-up softreset required but no softreset available\n");
 				failed_link = link;
@@ -2874,19 +3114,26 @@ int ata_eh_reset(struct ata_link *link, int classify,
 				goto fail;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_eh_about_to_do(link, NULL, ATA_EH_RESET);
 			rc = ata_do_reset(link, reset, classes, deadline, true);
 			if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				failed_link = link;
 				goto fail;
 			}
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (verbose)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_link_info(link,
 	"no reset method available, skipping reset\n");
+}
 		if (!(lflags & ATA_LFLAG_ASSUME_CLASS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lflags |= ATA_LFLAG_ASSUME_ATA;
+}
 	}
 
 	/*
@@ -2905,16 +3152,22 @@ int ata_eh_reset(struct ata_link *link, int classify,
 
 		/* apply class override */
 		if (lflags & ATA_LFLAG_ASSUME_ATA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			classes[dev->devno] = ATA_DEV_ATA;
+}
 		else if (lflags & ATA_LFLAG_ASSUME_SEMB)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			classes[dev->devno] = ATA_DEV_SEMB_UNSUP;
+}
 	}
 
 	/* record current link speed */
 	if (sata_scr_read(link, SCR_STATUS, &sstatus) == 0)
 		link->sata_spd = (sstatus >> 4) & 0xf;
 	if (slave && sata_scr_read(slave, SCR_STATUS, &sstatus) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		slave->sata_spd = (sstatus >> 4) & 0xf;
+}
 
 	/* thaw the port */
 	if (ata_is_host_link(link))
@@ -2930,7 +3183,9 @@ int ata_eh_reset(struct ata_link *link, int classify,
 	if (postreset) {
 		postreset(link, classes);
 		if (slave)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			postreset(slave, classes);
+}
 	}
 
 	/*
@@ -2943,12 +3198,16 @@ int ata_eh_reset(struct ata_link *link, int classify,
 	spin_lock_irqsave(link->ap->lock, flags);
 	memset(&link->eh_info, 0, sizeof(link->eh_info));
 	if (slave)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(&slave->eh_info, 0, sizeof(link->eh_info));
+}
 	ap->pflags &= ~ATA_PFLAG_EH_PENDING;
 	spin_unlock_irqrestore(link->ap->lock, flags);
 
 	if (ap->pflags & ATA_PFLAG_FROZEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_eh_thaw_port(ap);
+}
 
 	/*
 	 * Make sure onlineness and classification result correspond.
@@ -2962,17 +3221,21 @@ int ata_eh_reset(struct ata_link *link, int classify,
 	ata_for_each_dev(dev, link, ALL) {
 		if (ata_phys_link_online(ata_dev_phys_link(dev))) {
 			if (classes[dev->devno] == ATA_DEV_UNKNOWN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_dev_dbg(dev, "link online but device misclassified\n");
 				classes[dev->devno] = ATA_DEV_NONE;
 				nr_unknown++;
 			}
 		} else if (ata_phys_link_offline(ata_dev_phys_link(dev))) {
 			if (ata_class_enabled(classes[dev->devno]))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_dev_dbg(dev,
 					    "link offline, clearing class %d to NONE\n",
 					    classes[dev->devno]);
+}
 			classes[dev->devno] = ATA_DEV_NONE;
 		} else if (classes[dev->devno] == ATA_DEV_UNKNOWN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_dbg(dev,
 				    "link status unknown, clearing UNKNOWN to NONE\n");
 			classes[dev->devno] = ATA_DEV_NONE;
@@ -2980,7 +3243,9 @@ int ata_eh_reset(struct ata_link *link, int classify,
 	}
 
 	if (classify && nr_unknown) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (try < max_tries) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_link_warn(link,
 				      "link online but %d devices misclassified, retrying\n",
 				      nr_unknown);
@@ -2988,6 +3253,7 @@ int ata_eh_reset(struct ata_link *link, int classify,
 			rc = -EAGAIN;
 			goto fail;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_link_warn(link,
 			      "link online but %d devices misclassified, "
 			      "device detection might fail\n", nr_unknown);
@@ -2996,7 +3262,9 @@ int ata_eh_reset(struct ata_link *link, int classify,
 	/* reset successful, schedule revalidation */
 	ata_eh_done(link, NULL, ATA_EH_RESET);
 	if (slave)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_eh_done(slave, NULL, ATA_EH_RESET);
+}
 	ehc->last_reset = jiffies;		/* update to completion time */
 	ehc->i.action |= ATA_EH_REVALIDATE;
 	link->lpm_policy = ATA_LPM_UNKNOWN;	/* reset LPM state */
@@ -3006,7 +3274,9 @@ int ata_eh_reset(struct ata_link *link, int classify,
 	/* clear hotplug flag */
 	ehc->i.flags &= ~ATA_EHI_HOTPLUGGED;
 	if (slave)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sehc->i.flags &= ~ATA_EHI_HOTPLUGGED;
+}
 
 	spin_lock_irqsave(ap->lock, flags);
 	ap->pflags &= ~ATA_PFLAG_RESETTING;
@@ -3020,6 +3290,7 @@ int ata_eh_reset(struct ata_link *link, int classify,
 	    sata_scr_read(link, SCR_STATUS, &sstatus))
 		rc = -ERESTART;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (try >= max_tries) {
 		/*
 		 * Thaw host port even if reset failed, so that the port
@@ -3028,11 +3299,15 @@ int ata_eh_reset(struct ata_link *link, int classify,
 		 * shutting down a port after a botched hotplug attempt.
 		 */
 		if (ata_is_host_link(link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_eh_thaw_port(ap);
+}
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	now = jiffies;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (time_before(now, deadline)) {
 		unsigned long delta = deadline - now;
 
@@ -3041,8 +3316,10 @@ int ata_eh_reset(struct ata_link *link, int classify,
 			rc, DIV_ROUND_UP(jiffies_to_msecs(delta), 1000));
 
 		ata_eh_release(ap);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (delta)
 			delta = schedule_timeout_uninterruptible(delta);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_eh_acquire(ap);
 	}
 
@@ -3051,20 +3328,32 @@ int ata_eh_reset(struct ata_link *link, int classify,
 	 * They need to be reset - as well as the PMP - before retrying.
 	 */
 	if (rc == -ERESTART) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ata_is_host_link(link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_eh_thaw_port(ap);
+}
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (try == max_tries - 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sata_down_spd_limit(link, 0);
 		if (slave)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sata_down_spd_limit(slave, 0);
+}
 	} else if (rc == -EPIPE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sata_down_spd_limit(failed_link, 0);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (hardreset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		reset = hardreset;
+}
 	goto retry;
 }
 
@@ -3101,6 +3390,7 @@ static inline void ata_eh_pull_park_action(struct ata_port *ap)
 	 */
 
 	spin_lock_irqsave(ap->lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	reinit_completion(&ap->park_req_pending);
 	ata_for_each_link(link, ap, EDGE) {
 		ata_for_each_dev(dev, link, ALL) {
@@ -3122,6 +3412,7 @@ static void ata_eh_park_issue_cmd(struct ata_device *dev, int park)
 
 	ata_tf_init(dev, &tf);
 	if (park) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ehc->unloaded_mask |= 1 << dev->devno;
 		tf.command = ATA_CMD_IDLEIMMEDIATE;
 		tf.feature = 0x44;
@@ -3163,22 +3454,28 @@ static int ata_eh_revalidate_and_attach(struct ata_link *link,
 		unsigned int readid_flags = 0;
 
 		if (ehc->i.flags & ATA_EHI_DID_RESET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			readid_flags |= ATA_READID_POSTRESET;
+}
 
 		if ((action & ATA_EH_REVALIDATE) && ata_dev_enabled(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			WARN_ON(dev->class == ATA_DEV_PMP);
 
 			if (ata_phys_link_offline(ata_dev_phys_link(dev))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rc = -EIO;
 				goto err;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_eh_about_to_do(link, dev, ATA_EH_REVALIDATE);
 			rc = ata_dev_revalidate(dev, ehc->classes[dev->devno],
 						readid_flags);
 			if (rc)
 				goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_eh_done(link, dev, ATA_EH_REVALIDATE);
 
 			/* Configuration may have changed, reconfigure
@@ -3200,7 +3497,9 @@ static int ata_eh_revalidate_and_attach(struct ata_link *link,
 			dev->class = ehc->classes[dev->devno];
 
 			if (dev->class == ATA_DEV_PMP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rc = sata_pmp_attach(dev);
+}
 			else
 				rc = ata_dev_read_id(dev, &dev->class,
 						     readid_flags, dev->id);
@@ -3231,7 +3530,9 @@ static int ata_eh_revalidate_and_attach(struct ata_link *link,
 	/* PDIAG- should have been released, ask cable type if post-reset */
 	if ((ehc->i.flags & ATA_EHI_DID_RESET) && ata_is_host_link(link)) {
 		if (ap->ops->cable_detect)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ap->cbl = ap->ops->cable_detect(ap);
+}
 		ata_force_cbl(ap);
 	}
 
@@ -3251,6 +3552,7 @@ static int ata_eh_revalidate_and_attach(struct ata_link *link,
 		rc = ata_dev_configure(dev);
 		ehc->i.flags &= ~ATA_EHI_PRINTINFO;
 		if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->class = ATA_DEV_UNKNOWN;
 			goto err;
 		}
@@ -3263,6 +3565,7 @@ static int ata_eh_revalidate_and_attach(struct ata_link *link,
 		ehc->i.flags |= ATA_EHI_SETMODE;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  err:
@@ -3305,7 +3608,9 @@ int ata_set_mode(struct ata_link *link, struct ata_device **r_failed_dev)
 
 	/* has private set_mode? */
 	if (ap->ops->set_mode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = ap->ops->set_mode(link, r_failed_dev);
+}
 	else
 		rc = ata_do_set_mode(link, r_failed_dev);
 
@@ -3348,6 +3653,7 @@ static int atapi_eh_clear_ua(struct ata_device *dev)
 
 		err_mask = atapi_eh_tur(dev, &sense_key);
 		if (err_mask != 0 && err_mask != AC_ERR_DEV) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_warn(dev,
 				     "TEST_UNIT_READY failed (err_mask=0x%x)\n",
 				     err_mask);
@@ -3355,16 +3661,21 @@ static int atapi_eh_clear_ua(struct ata_device *dev)
 		}
 
 		if (!err_mask || sense_key != UNIT_ATTENTION)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err_mask = atapi_eh_request_sense(dev, sense_buffer, sense_key);
 		if (err_mask) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_warn(dev, "failed to clear "
 				"UNIT ATTENTION (err_mask=0x%x)\n", err_mask);
 			return -EIO;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_dev_warn(dev, "UNIT ATTENTION persists after %d tries\n",
 		     ATA_EH_UA_TRIES);
 
@@ -3399,7 +3710,9 @@ static int ata_eh_maybe_retry_flush(struct ata_device *dev)
 
 	/* did flush fail for this device? */
 	if (!ata_tag_valid(link->active_tag))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	qc = __ata_qc_from_tag(ap, link->active_tag);
 	if (qc->dev != dev || (qc->tf.command != ATA_CMD_FLUSH_EXT &&
@@ -3467,6 +3780,7 @@ static int ata_eh_maybe_retry_flush(struct ata_device *dev)
 static int ata_eh_set_lpm(struct ata_link *link, enum ata_lpm_policy policy,
 			  struct ata_device **r_failed_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_port *ap = ata_is_host_link(link) ? link->ap : NULL;
 	struct ata_eh_context *ehc = &link->eh_context;
 	struct ata_device *dev, *link_dev = NULL, *lpm_dev = NULL;
@@ -3609,15 +3923,21 @@ static int ata_eh_skip_recovery(struct ata_link *link)
 
 	/* skip disabled links */
 	if (link->flags & ATA_LFLAG_DISABLED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/* skip if explicitly requested */
 	if (ehc->i.flags & ATA_EHI_NO_RECOVERY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/* thaw frozen port and recover failed devices */
 	if ((ap->pflags & ATA_PFLAG_FROZEN) || ata_link_nr_enabled(link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* reset at least once if reset is requested */
 	if ((ehc->i.action & ATA_EH_RESET) &&
@@ -3626,16 +3946,19 @@ static int ata_eh_skip_recovery(struct ata_link *link)
 
 	/* skip if class codes for all vacant slots are ATA_DEV_NONE */
 	ata_for_each_dev(dev, link, ALL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->class == ATA_DEV_UNKNOWN &&
 		    ehc->classes[dev->devno] != ATA_DEV_NONE)
 			return 0;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
 static int ata_count_probe_trials_cb(struct ata_ering_entry *ent, void *void_arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u64 interval = msecs_to_jiffies(ATA_EH_PROBE_TRIAL_INTERVAL);
 	u64 now = get_jiffies_64();
 	int *trials = void_arg;
@@ -3667,9 +3990,12 @@ static int ata_eh_schedule_probe(struct ata_device *dev)
 
 	/* the link maybe in a deep sleep, wake it up */
 	if (link->lpm_policy > ATA_LPM_MAX_POWER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ata_is_host_link(link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			link->ap->ops->set_lpm(link, ATA_LPM_MAX_POWER,
 					       ATA_LPM_EMPTY);
+}
 		else
 			sata_pmp_set_lpm(link, ATA_LPM_MAX_POWER,
 					 ATA_LPM_EMPTY);
@@ -3692,8 +4018,11 @@ static int ata_eh_schedule_probe(struct ata_device *dev)
 	ata_ering_map(&dev->ering, ata_count_probe_trials_cb, &trials);
 
 	if (trials > ATA_EH_PROBE_TRIALS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sata_down_spd_limit(link, 1);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -3705,7 +4034,9 @@ static int ata_eh_handle_dev_fail(struct ata_device *dev, int err)
 	 * The requester is responsible for ensuring forward progress.
 	 */
 	if (err != -EAGAIN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ehc->tries[dev->devno]--;
+}
 
 	switch (err) {
 	case -ENODEV:
@@ -3787,8 +4118,11 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 
 		/* re-enable link? */
 		if (ehc->i.action & ATA_EH_ENABLE_LINK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_eh_about_to_do(link, NULL, ATA_EH_ENABLE_LINK);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock_irqsave(ap->lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			link->flags &= ~ATA_LFLAG_DISABLED;
 			spin_unlock_irqrestore(ap->lock, flags);
 			ata_eh_done(link, NULL, ATA_EH_ENABLE_LINK);
@@ -3796,7 +4130,9 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 
 		ata_for_each_dev(dev, link, ALL) {
 			if (link->flags & ATA_LFLAG_NO_RETRY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ehc->tries[dev->devno] = 1;
+}
 			else
 				ehc->tries[dev->devno] = ATA_EH_DEV_TRIES;
 
@@ -3807,7 +4143,9 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 
 			/* process hotplug request */
 			if (dev->flags & ATA_DFLAG_DETACH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_eh_detach_dev(dev);
+}
 
 			/* schedule probe if necessary */
 			if (!ata_dev_enabled(dev))
@@ -3828,7 +4166,9 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 
 		/* skip EH if possible. */
 		if (ata_eh_skip_recovery(link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ehc->i.action = 0;
+}
 
 		ata_for_each_dev(dev, link, ALL)
 			ehc->classes[dev->devno] = ATA_DEV_UNKNOWN;
@@ -3844,6 +4184,7 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 		rc = ata_eh_reset(link, ata_link_nr_vacant(link),
 				  prereset, softreset, hardreset, postreset);
 		if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_link_err(link, "reset failed, giving up\n");
 			goto out;
 		}
@@ -3867,17 +4208,25 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 				if (dev->class != ATA_DEV_ATA &&
 				    dev->class != ATA_DEV_ZAC)
 					continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!(ehc->i.dev_action[dev->devno] &
 				      ATA_EH_PARK))
 					continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tmp = dev->unpark_deadline;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (time_before(deadline, tmp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					deadline = tmp;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				else if (time_before_eq(tmp, jiffies))
 					continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (ehc->unloaded_mask & (1 << dev->devno))
 					continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_eh_park_issue_cmd(dev, 1);
 			}
 		}
@@ -3886,10 +4235,12 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 		if (time_before_eq(deadline, now))
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_eh_release(ap);
 		deadline = wait_for_completion_timeout(&ap->park_req_pending,
 						       deadline - now);
 		ata_eh_acquire(ap);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while (deadline);
 	ata_for_each_link(link, ap, EDGE) {
 		ata_for_each_dev(dev, link, ALL) {
@@ -3897,6 +4248,7 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 			      (1 << dev->devno)))
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_eh_park_issue_cmd(dev, 0);
 			ata_eh_done(link, dev, ATA_EH_PARK);
 		}
@@ -3907,6 +4259,7 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 	ata_for_each_link(link, ap, PMP_FIRST) {
 		struct ata_eh_context *ehc = &link->eh_context;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sata_pmp_attached(ap) && ata_is_host_link(link))
 			goto config_lpm;
 
@@ -3917,6 +4270,7 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 
 		/* if PMP got attached, return, pmp EH will take care of it */
 		if (link->device->class == ATA_DEV_PMP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ehc->i.action = 0;
 			return 0;
 		}
@@ -3939,8 +4293,11 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 				rc = atapi_eh_clear_ua(dev);
 				if (rc)
 					goto rest_fail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (zpodd_dev_enabled(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					zpodd_post_poweron(dev);
+}
 			}
 		}
 
@@ -3949,6 +4306,7 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 			if (dev->class != ATA_DEV_ATA &&
 			    dev->class != ATA_DEV_ZAC)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rc = ata_eh_maybe_retry_flush(dev);
 			if (rc)
 				goto rest_fail;
@@ -3957,6 +4315,7 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 	config_lpm:
 		/* configure link power saving */
 		if (link->lpm_policy != ap->target_lpm_policy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rc = ata_eh_set_lpm(link, ap->target_lpm_policy, &dev);
 			if (rc)
 				goto rest_fail;
@@ -3969,8 +4328,11 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 	rest_fail:
 		nr_fails++;
 		if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_eh_handle_dev_fail(dev, rc);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ap->pflags & ATA_PFLAG_FROZEN) {
 			/* PMP reset requires working host port.
 			 * Can't retry if it's frozen.
@@ -3986,9 +4348,12 @@ int ata_eh_recover(struct ata_port *ap, ata_prereset_fn_t prereset,
 
  out:
 	if (rc && r_failed_link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*r_failed_link = link;
+}
 
 	DPRINTK("EXIT, rc=%d\n", rc);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 }
 
@@ -4019,7 +4384,9 @@ void ata_eh_finish(struct ata_port *ap)
 			 * considering both err_mask and tf.
 			 */
 			if (qc->flags & ATA_QCFLAG_RETRY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ata_eh_qc_retry(qc);
+}
 			else
 				ata_eh_qc_complete(qc);
 		} else {
@@ -4065,6 +4432,7 @@ void ata_do_eh(struct ata_port *ap, ata_prereset_fn_t prereset,
 	rc = ata_eh_recover(ap, prereset, softreset, hardreset, postreset,
 			    NULL);
 	if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_for_each_dev(dev, &ap->link, ALL)
 			ata_dev_disable(dev);
 	}
@@ -4088,7 +4456,9 @@ void ata_std_error_handler(struct ata_port *ap)
 
 	/* ignore built-in hardreset if SCR access is not available */
 	if (hardreset == sata_std_hardreset && !sata_scr_valid(&ap->link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hardreset = NULL;
+}
 
 	ata_do_eh(ap, ops->prereset, ops->softreset, hardreset, ops->postreset);
 }
@@ -4116,8 +4486,10 @@ static void ata_eh_handle_port_suspend(struct ata_port *ap)
 		spin_unlock_irqrestore(ap->lock, flags);
 		return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(ap->lock, flags);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(ap->pflags & ATA_PFLAG_SUSPENDED);
 
 	/*
@@ -4126,9 +4498,13 @@ static void ata_eh_handle_port_suspend(struct ata_port *ap)
 	 * Only needed for runtime suspend.
 	 */
 	if (PMSG_IS_AUTO(ap->pm_mesg)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_for_each_dev(dev, &ap->link, ENABLED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (zpodd_dev_enabled(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				zpodd_on_suspend(dev);
+}
 		}
 	}
 
@@ -4141,19 +4517,29 @@ static void ata_eh_handle_port_suspend(struct ata_port *ap)
 	ata_eh_freeze_port(ap);
 
 	if (ap->ops->port_suspend)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = ap->ops->port_suspend(ap, ap->pm_mesg);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_acpi_set_state(ap, ap->pm_mesg);
  out:
 	/* update the flags */
 	spin_lock_irqsave(ap->lock, flags);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ap->pflags &= ~ATA_PFLAG_PM_PENDING;
 	if (rc == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->pflags |= ATA_PFLAG_SUSPENDED;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (ap->pflags & ATA_PFLAG_FROZEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_port_schedule_eh(ap);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(ap->lock, flags);
 
 	return;
@@ -4181,8 +4567,10 @@ static void ata_eh_handle_port_resume(struct ata_port *ap)
 		spin_unlock_irqrestore(ap->lock, flags);
 		return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(ap->lock, flags);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!(ap->pflags & ATA_PFLAG_SUSPENDED));
 
 	/*
@@ -4196,16 +4584,20 @@ static void ata_eh_handle_port_resume(struct ata_port *ap)
 		ata_for_each_dev(dev, link, ALL)
 			ata_ering_clear(&dev->ering);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_acpi_set_state(ap, ap->pm_mesg);
 
 	if (ap->ops->port_resume)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->ops->port_resume(ap);
+}
 
 	/* tell ACPI that we're resuming */
 	ata_acpi_on_resume(ap);
 
 	/* update the flags */
 	spin_lock_irqsave(ap->lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ap->pflags &= ~(ATA_PFLAG_PM_PENDING | ATA_PFLAG_SUSPENDED);
 	spin_unlock_irqrestore(ap->lock, flags);
 }
diff --git a/drivers/ata/libata-scsi.c b/drivers/ata/libata-scsi.c
index 44ba292..be3a0f5 100644
--- a/drivers/ata/libata-scsi.c
+++ b/drivers/ata/libata-scsi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  libata-scsi.c - helper library for ATA
  *
@@ -116,6 +118,7 @@ static ssize_t ata_scsi_lpm_store(struct device *device,
 				  struct device_attribute *attr,
 				  const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(device);
 	struct ata_port *ap = ata_shost_to_port(shost);
 	struct ata_link *link;
@@ -155,6 +158,7 @@ static ssize_t ata_scsi_lpm_store(struct device *device,
 static ssize_t ata_scsi_lpm_show(struct device *dev,
 				 struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct ata_port *ap = ata_shost_to_port(shost);
 
@@ -171,6 +175,7 @@ EXPORT_SYMBOL_GPL(dev_attr_link_power_management_policy);
 static ssize_t ata_scsi_park_show(struct device *device,
 				  struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(device);
 	struct ata_port *ap;
 	struct ata_link *link;
@@ -211,6 +216,7 @@ static ssize_t ata_scsi_park_store(struct device *device,
 				   struct device_attribute *attr,
 				   const char *buf, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(device);
 	struct ata_port *ap;
 	struct ata_device *dev;
@@ -275,6 +281,7 @@ static ssize_t ata_ncq_prio_enable_show(struct device *device,
 					struct device_attribute *attr,
 					char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(device);
 	struct ata_port *ap;
 	struct ata_device *dev;
@@ -302,6 +309,7 @@ static ssize_t ata_ncq_prio_enable_store(struct device *device,
 					 struct device_attribute *attr,
 					 const char *buf, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(device);
 	struct ata_port *ap;
 	struct ata_device *dev;
@@ -354,7 +362,9 @@ void ata_scsi_set_sense(struct ata_device *dev, struct scsi_cmnd *cmd,
 	bool d_sense = (dev->flags & ATA_DFLAG_D_SENSE);
 
 	if (!cmd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	cmd->result = (DRIVER_SENSE << 24) | SAM_STAT_CHECK_CONDITION;
 
@@ -368,7 +378,9 @@ void ata_scsi_set_sense_information(struct ata_device *dev,
 	u64 information;
 
 	if (!cmd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	information = ata_tf_read_block(tf, dev);
 	if (information == U64_MAX)
@@ -381,6 +393,7 @@ void ata_scsi_set_sense_information(struct ata_device *dev,
 static void ata_scsi_set_invalid_field(struct ata_device *dev,
 				       struct scsi_cmnd *cmd, u16 field, u8 bit)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_scsi_set_sense(dev, cmd, ILLEGAL_REQUEST, 0x24, 0x0);
 	/* "Invalid field in CDB" */
 	scsi_set_sense_field_pointer(cmd->sense_buffer, SCSI_SENSE_BUFFERSIZE,
@@ -400,6 +413,7 @@ static ssize_t
 ata_scsi_em_message_store(struct device *dev, struct device_attribute *attr,
 			  const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct ata_port *ap = ata_shost_to_port(shost);
 	if (ap->ops->em_store && (ap->flags & ATA_FLAG_EM))
@@ -411,6 +425,7 @@ static ssize_t
 ata_scsi_em_message_show(struct device *dev, struct device_attribute *attr,
 			 char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct ata_port *ap = ata_shost_to_port(shost);
 
@@ -426,6 +441,7 @@ static ssize_t
 ata_scsi_em_message_type_show(struct device *dev, struct device_attribute *attr,
 			      char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct ata_port *ap = ata_shost_to_port(shost);
 
@@ -439,6 +455,7 @@ static ssize_t
 ata_scsi_activity_show(struct device *dev, struct device_attribute *attr,
 		char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 	struct ata_port *ap = ata_shost_to_port(sdev->host);
 	struct ata_device *atadev = ata_scsi_find_dev(ap, sdev);
@@ -453,6 +470,7 @@ static ssize_t
 ata_scsi_activity_store(struct device *dev, struct device_attribute *attr,
 	const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 	struct ata_port *ap = ata_shost_to_port(sdev->host);
 	struct ata_device *atadev = ata_scsi_find_dev(ap, sdev);
@@ -505,6 +523,7 @@ EXPORT_SYMBOL_GPL(ata_common_sdev_attrs);
 int ata_std_bios_param(struct scsi_device *sdev, struct block_device *bdev,
 		       sector_t capacity, int geom[])
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	geom[0] = 255;
 	geom[1] = 63;
 	sector_div(capacity, 255*63);
@@ -525,6 +544,7 @@ int ata_std_bios_param(struct scsi_device *sdev, struct block_device *bdev,
  */
 void ata_scsi_unlock_native_capacity(struct scsi_device *sdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_port *ap = ata_shost_to_port(sdev->host);
 	struct ata_device *dev;
 	unsigned long flags;
@@ -557,6 +577,7 @@ void ata_scsi_unlock_native_capacity(struct scsi_device *sdev)
 static int ata_get_identity(struct ata_port *ap, struct scsi_device *sdev,
 			    void __user *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_device *dev = ata_scsi_find_dev(ap, sdev);
 	u16 __user *dst = arg;
 	char buf[40];
@@ -604,7 +625,9 @@ int ata_cmd_ioctl(struct scsi_device *scsidev, void __user *arg)
 	int cmd_result;
 
 	if (arg == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (copy_from_user(args, arg, sizeof(args)))
 		return -EFAULT;
@@ -709,7 +732,9 @@ int ata_task_ioctl(struct scsi_device *scsidev, void __user *arg)
 	int cmd_result;
 
 	if (arg == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (copy_from_user(args, arg, sizeof(args)))
 		return -EFAULT;
@@ -774,6 +799,7 @@ int ata_task_ioctl(struct scsi_device *scsidev, void __user *arg)
 
 static int ata_ioc32(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ap->flags & ATA_FLAG_PIO_DMA)
 		return 1;
 	if (ap->pflags & ATA_PFLAG_PIO32)
@@ -835,6 +861,7 @@ EXPORT_SYMBOL_GPL(ata_sas_scsi_ioctl);
 
 int ata_scsi_ioctl(struct scsi_device *scsidev, int cmd, void __user *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ata_sas_scsi_ioctl(ata_shost_to_port(scsidev->host),
 				scsidev, cmd, arg);
 }
@@ -872,6 +899,7 @@ static struct ata_queued_cmd *ata_scsi_qc_new(struct ata_device *dev,
 		qc->sg = scsi_sglist(cmd);
 		qc->n_elem = scsi_sg_count(cmd);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->result = (DID_OK << 16) | (QUEUE_FULL << 1);
 		cmd->scsi_done(cmd);
 	}
@@ -905,6 +933,7 @@ static void ata_dump_status(unsigned id, struct ata_taskfile *tf)
 
 	pr_warn("ata%u: status=0x%02x { ", id, stat);
 	if (stat & ATA_BUSY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_cont("Busy }\n");	/* Data is not valid in this case */
 	} else {
 		if (stat & ATA_DRDY)	pr_cont("DriveReady ");
@@ -1018,6 +1047,7 @@ static void ata_to_sense_error(unsigned id, u8 drv_stat, u8 drv_err, u8 *sk,
 	 *	Is this an error we can process/parse
 	 */
 	if (drv_stat & ATA_BUSY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		drv_err = 0;	/* Ignore the err bits, they're invalid */
 	}
 
@@ -1254,10 +1284,14 @@ static void ata_scsi_sdev_config(struct scsi_device *sdev)
 static int atapi_drain_needed(struct request *rq)
 {
 	if (likely(!blk_rq_is_passthrough(rq)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!blk_rq_bytes(rq) || op_is_write(req_op(rq)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return atapi_cmd_type(scsi_req(rq)->cmd[0]) == ATAPI_MISC;
 }
@@ -1284,12 +1318,14 @@ static int ata_scsi_dev_config(struct scsi_device *sdev,
 		/* configure draining */
 		buf = kmalloc(ATAPI_MAX_DRAIN, q->bounce_gfp | GFP_KERNEL);
 		if (!buf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_err(dev, "drain buffer allocation failed\n");
 			return -ENOMEM;
 		}
 
 		blk_queue_dma_drain(q, atapi_drain_needed, buf, ATAPI_MAX_DRAIN);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->sector_size = ata_id_logical_sector_size(dev->id);
 		sdev->manage_start_stop = 1;
 	}
@@ -1302,19 +1338,25 @@ static int ata_scsi_dev_config(struct scsi_device *sdev,
 	 * IDENTIFY_PACKET is executed as ATA_PROT_PIO.
 	 */
 	if (sdev->sector_size > PAGE_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev,
 			"sector_size=%u > PAGE_SIZE, PIO may malfunction\n",
 			sdev->sector_size);
+}
 
 	blk_queue_update_dma_alignment(q, sdev->sector_size - 1);
 
 	if (dev->flags & ATA_DFLAG_AN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_bit(SDEV_EVT_MEDIA_CHANGE, sdev->supported_events);
+}
 
 	if (dev->flags & ATA_DFLAG_NCQ) {
 		int depth;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		depth = min(sdev->host->can_queue, ata_id_queue_depth(dev->id));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		depth = min(ATA_MAX_QUEUE - 1, depth);
 		scsi_change_queue_depth(sdev, depth);
 	}
@@ -1322,7 +1364,9 @@ static int ata_scsi_dev_config(struct scsi_device *sdev,
 	blk_queue_flush_queueable(q, false);
 
 	if (dev->flags & ATA_DFLAG_TRUSTED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->security_supported = 1;
+}
 
 	dev->sdev = sdev;
 	return 0;
@@ -1370,6 +1414,7 @@ int ata_scsi_slave_config(struct scsi_device *sdev)
  */
 void ata_scsi_slave_destroy(struct scsi_device *sdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_port *ap = ata_shost_to_port(sdev->host);
 	struct request_queue *q = sdev->request_queue;
 	unsigned long flags;
@@ -1409,6 +1454,7 @@ int __ata_change_queue_depth(struct ata_port *ap, struct scsi_device *sdev,
 	struct ata_device *dev;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (queue_depth < 1 || queue_depth == sdev->queue_depth)
 		return sdev->queue_depth;
 
@@ -1453,6 +1499,7 @@ int __ata_change_queue_depth(struct ata_port *ap, struct scsi_device *sdev,
  */
 int ata_scsi_change_queue_depth(struct scsi_device *sdev, int queue_depth)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_port *ap = ata_shost_to_port(sdev->host);
 
 	return __ata_change_queue_depth(ap, sdev, queue_depth);
@@ -1482,6 +1529,7 @@ static unsigned int ata_scsi_start_stop_xlat(struct ata_queued_cmd *qc)
 	u8 bp = 0xff;
 
 	if (scmd->cmd_len < 5) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fp = 4;
 		goto invalid_fld;
 	}
@@ -1575,7 +1623,9 @@ static unsigned int ata_scsi_flush_xlat(struct ata_queued_cmd *qc)
 	tf->protocol = ATA_PROT_NODATA;
 
 	if (qc->dev->flags & ATA_DFLAG_FLUSH_EXT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tf->command = ATA_CMD_FLUSH_EXT;
+}
 	else
 		tf->command = ATA_CMD_FLUSH;
 
@@ -1703,6 +1753,7 @@ static unsigned int ata_scsi_verify_xlat(struct ata_queued_cmd *qc)
 	tf->protocol = ATA_PROT_NODATA;
 
 	if (cdb[0] == VERIFY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (scmd->cmd_len < 10) {
 			fp = 9;
 			goto invalid_fld;
@@ -1834,6 +1885,7 @@ static unsigned int ata_scsi_rw_xlat(struct ata_queued_cmd *qc)
 	int rc;
 	u16 fp = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cdb[0] == WRITE_10 || cdb[0] == WRITE_6 || cdb[0] == WRITE_16)
 		tf_flags |= ATA_TFLAG_WRITE;
 
@@ -2000,6 +2052,7 @@ static int ata_scsi_translate(struct ata_device *dev, struct scsi_cmnd *cmd,
 	if (cmd->sc_data_direction == DMA_FROM_DEVICE ||
 	    cmd->sc_data_direction == DMA_TO_DEVICE) {
 		if (unlikely(scsi_bufflen(cmd) < 1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ata_dev_warn(dev, "WARNING: zero len r/w req\n");
 			goto err_did;
 		}
@@ -2037,13 +2090,16 @@ static int ata_scsi_translate(struct ata_device *dev, struct scsi_cmnd *cmd,
 	cmd->scsi_done(cmd);
 err_mem:
 	DPRINTK("EXIT - internal\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 defer:
 	ata_qc_free(qc);
 	DPRINTK("EXIT - defer\n");
 	if (rc == ATA_DEFER_LINK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return SCSI_MLQUEUE_DEVICE_BUSY;
+}
 	else
 		return SCSI_MLQUEUE_HOST_BUSY;
 }
@@ -2071,6 +2127,7 @@ struct ata_scsi_args {
 static void *ata_scsi_rbuf_get(struct scsi_cmnd *cmd, bool copy_in,
 			       unsigned long *flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ata_scsi_rbuf_lock, *flags);
 
 	memset(ata_scsi_rbuf, 0, ATA_SCSI_RBUF_SIZE);
@@ -2095,6 +2152,7 @@ static void *ata_scsi_rbuf_get(struct scsi_cmnd *cmd, bool copy_in,
 static inline void ata_scsi_rbuf_put(struct scsi_cmnd *cmd, bool copy_out,
 				     unsigned long *flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (copy_out)
 		sg_copy_from_buffer(scsi_sglist(cmd), scsi_sg_count(cmd),
 				    ata_scsi_rbuf, ATA_SCSI_RBUF_SIZE);
@@ -2129,8 +2187,10 @@ static void ata_scsi_rbuf_fill(struct ata_scsi_args *args,
 	ata_scsi_rbuf_put(cmd, rc == 0, &flags);
 
 	if (rc == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->result = SAM_STAT_GOOD;
 }
+}
 
 /**
  *	ata_scsiop_inq_std - Simulate INQUIRY command
@@ -2240,7 +2300,9 @@ static unsigned int ata_scsiop_inq_00(struct ata_scsi_args *args, u8 *rbuf)
 
 	num_pages = sizeof(pages);
 	if (!(args->dev->flags & ATA_DFLAG_ZAC))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		num_pages--;
+}
 	rbuf[3] = num_pages;	/* number of supported VPD pages */
 	memcpy(rbuf + 4, pages, num_pages);
 	return 0;
@@ -2265,6 +2327,7 @@ static unsigned int ata_scsiop_inq_80(struct ata_scsi_args *args, u8 *rbuf)
 		ATA_ID_SERNO_LEN,	/* page len */
 	};
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(rbuf, hdr, sizeof(hdr));
 	ata_id_string(args->id, (unsigned char *) &rbuf[4],
 		      ATA_ID_SERNO, ATA_ID_SERNO_LEN);
@@ -2306,6 +2369,7 @@ static unsigned int ata_scsiop_inq_83(struct ata_scsi_args *args, u8 *rbuf)
 	rbuf[num + 1] = 1;
 	rbuf[num + 3] = sat_model_serial_desc_len;
 	num += 4;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(rbuf + num, "ATA     ", 8);
 	num += 8;
 	ata_id_string(args->id, (unsigned char *) rbuf + num, ATA_ID_PROD,
@@ -2350,6 +2414,7 @@ static unsigned int ata_scsiop_inq_89(struct ata_scsi_args *args, u8 *rbuf)
 	rbuf[2] = (0x238 >> 8);		/* page size fixed at 238h */
 	rbuf[3] = (0x238 & 0xff);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&rbuf[8], "linux   ", 8);
 	memcpy(&rbuf[16], "libata          ", 16);
 	memcpy(&rbuf[32], DRV_VERSION, 4);
@@ -2396,6 +2461,7 @@ static unsigned int ata_scsiop_inq_b0(struct ata_scsi_args *args, u8 *rbuf)
 	 * with the unmap bit set.
 	 */
 	if (ata_id_has_trim(args->id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_unaligned_be64(65535 * ATA_MAX_TRIM_RNUM, &rbuf[36]);
 		put_unaligned_be32(1, &rbuf[28]);
 	}
@@ -2405,6 +2471,7 @@ static unsigned int ata_scsiop_inq_b0(struct ata_scsi_args *args, u8 *rbuf)
 
 static unsigned int ata_scsiop_inq_b1(struct ata_scsi_args *args, u8 *rbuf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int form_factor = ata_id_form_factor(args->id);
 	int media_rotation_rate = ata_id_rotation_rate(args->id);
 	u8 zoned = ata_id_zoned_cap(args->id);
@@ -2465,6 +2532,7 @@ static unsigned int ata_scsiop_inq_b6(struct ata_scsi_args *args, u8 *rbuf)
  */
 static void modecpy(u8 *dest, const u8 *src, int n, bool changeable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (changeable) {
 		memcpy(dest, src, 2);
 		memset(dest + 2, 0, n - 2);
@@ -2488,6 +2556,7 @@ static void modecpy(u8 *dest, const u8 *src, int n, bool changeable)
  */
 static unsigned int ata_msense_caching(u16 *id, u8 *buf, bool changeable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	modecpy(buf, def_cache_mpage, sizeof(def_cache_mpage), changeable);
 	if (changeable) {
 		buf[2] |= (1 << 2);	/* ata_mselect_caching() */
@@ -2512,6 +2581,7 @@ static unsigned int ata_msense_caching(u16 *id, u8 *buf, bool changeable)
 static unsigned int ata_msense_control(struct ata_device *dev, u8 *buf,
 					bool changeable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	modecpy(buf, def_control_mpage, sizeof(def_control_mpage), changeable);
 	if (changeable) {
 		buf[2] |= (1 << 2);	/* ata_mselect_control() */
@@ -2535,6 +2605,7 @@ static unsigned int ata_msense_control(struct ata_device *dev, u8 *buf,
  */
 static unsigned int ata_msense_rw_recovery(u8 *buf, bool changeable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	modecpy(buf, def_rw_recovery_mpage, sizeof(def_rw_recovery_mpage),
 		changeable);
 	return sizeof(def_rw_recovery_mpage);
@@ -2549,7 +2620,9 @@ static int ata_dev_supports_fua(u16 *id)
 	unsigned char model[ATA_ID_PROD_LEN + 1], fw[ATA_ID_FW_REV_LEN + 1];
 
 	if (!libata_fua)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (!ata_id_has_fua(id))
 		return 0;
 
@@ -2712,6 +2785,7 @@ static unsigned int ata_scsiop_read_cap(struct ata_scsi_args *args, u8 *rbuf)
 	VPRINTK("ENTER\n");
 
 	if (args->cmd->cmnd[0] == READ_CAPACITY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (last_lba >= 0xffffffffULL)
 			last_lba = 0xffffffff;
 
@@ -2778,6 +2852,7 @@ static unsigned int ata_scsiop_read_cap(struct ata_scsi_args *args, u8 *rbuf)
 static unsigned int ata_scsiop_report_luns(struct ata_scsi_args *args, u8 *rbuf)
 {
 	VPRINTK("ENTER\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rbuf[3] = 8;	/* just one lun, LUN 0, size 8 bytes */
 
 	return 0;
@@ -2785,6 +2860,7 @@ static unsigned int ata_scsiop_report_luns(struct ata_scsi_args *args, u8 *rbuf)
 
 static void atapi_sense_complete(struct ata_queued_cmd *qc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (qc->err_mask && ((qc->err_mask & AC_ERR_DEV) == 0)) {
 		/* FIXME: not quite right; we don't want the
 		 * translation of taskfile registers into
@@ -2800,6 +2876,7 @@ static void atapi_sense_complete(struct ata_queued_cmd *qc)
 /* is it pointless to prefer PIO for "safety reasons"? */
 static inline int ata_pio_use_silly(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (ap->flags & ATA_FLAG_PIO_DMA);
 }
 
@@ -2814,7 +2891,9 @@ static void atapi_request_sense(struct ata_queued_cmd *qc)
 
 #ifdef CONFIG_ATA_SFF
 	if (ap->ops->sff_tf_read)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->ops->sff_tf_read(ap, &qc->tf);
+}
 #endif
 
 	/* fill these in, for the case where they are -not- overwritten */
@@ -2906,7 +2985,9 @@ static void atapi_qc_complete(struct ata_queued_cmd *qc)
 		 * sure qc->dev->sdev isn't NULL before dereferencing.
 		 */
 		if (qc->cdb[0] == ALLOW_MEDIUM_REMOVAL && qc->dev->sdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qc->dev->sdev->locked = 0;
+}
 
 		qc->scsicmd->result = SAM_STAT_CHECK_CONDITION;
 		ata_qc_done(qc);
@@ -2915,6 +2996,7 @@ static void atapi_qc_complete(struct ata_queued_cmd *qc)
 
 	/* successful completion or old EH failure path */
 	if (unlikely(err_mask & AC_ERR_DEV)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->result = SAM_STAT_CHECK_CONDITION;
 		atapi_request_sense(qc);
 		return;
@@ -2958,6 +3040,7 @@ static unsigned int atapi_xlat(struct ata_queued_cmd *qc)
 
 	qc->tf.flags |= ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE;
 	if (scmd->sc_data_direction == DMA_TO_DEVICE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		qc->tf.flags |= ATA_TFLAG_WRITE;
 		DPRINTK("direction: write\n");
 	}
@@ -2967,7 +3050,9 @@ static unsigned int atapi_xlat(struct ata_queued_cmd *qc)
 
 	/* check whether ATAPI DMA is safe */
 	if (!nodata && !using_pio && atapi_check_dma(qc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		using_pio = 1;
+}
 
 	/* Some controller variants snoop this value for Packet
 	 * transfers to do state machine and FIFO management.  Thus we
@@ -3029,16 +3114,19 @@ static unsigned int atapi_xlat(struct ata_queued_cmd *qc)
 
 static struct ata_device *ata_find_dev(struct ata_port *ap, int devno)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!sata_pmp_attached(ap)) {
 		if (likely(devno >= 0 &&
 			   devno < ata_link_max_devices(&ap->link)))
 			return &ap->link.device[devno];
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (likely(devno >= 0 &&
 			   devno < ap->nr_pmp_links))
 			return &ap->pmp_link[devno].device[0];
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -3050,11 +3138,17 @@ static struct ata_device *__ata_scsi_find_dev(struct ata_port *ap,
 	/* skip commands not addressed to targets we simulate */
 	if (!sata_pmp_attached(ap)) {
 		if (unlikely(scsidev->channel || scsidev->lun))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
 		devno = scsidev->id;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unlikely(scsidev->id || scsidev->lun))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		devno = scsidev->channel;
 	}
 
@@ -3083,8 +3177,11 @@ ata_scsi_find_dev(struct ata_port *ap, const struct scsi_device *scsidev)
 	struct ata_device *dev = __ata_scsi_find_dev(ap, scsidev);
 
 	if (unlikely(!dev || !ata_dev_enabled(dev)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev;
 }
 
@@ -3098,6 +3195,7 @@ ata_scsi_find_dev(struct ata_port *ap, const struct scsi_device *scsidev)
 static u8
 ata_scsi_map_proto(u8 byte1)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch((byte1 & 0x1e) >> 1) {
 	case 3:		/* Non-data */
 		return ATA_PROT_NODATA;
@@ -3147,7 +3245,9 @@ static unsigned int ata_scsi_pass_thru(struct ata_queued_cmd *qc)
 
 	/* 7Fh variable length cmd means a ata pass-thru(32) */
 	if (cdb[0] == VARIABLE_LENGTH_CMD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cdb_offset = 9;
+}
 
 	tf->protocol = ata_scsi_map_proto(cdb[1 + cdb_offset]);
 	if (tf->protocol == ATA_PROT_UNKNOWN) {
@@ -3403,6 +3503,7 @@ static size_t ata_format_dsm_trim_descr(struct scsi_cmnd *cmd, u32 trmax,
 	u32 i = 0;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(len > ATA_SCSI_RBUF_SIZE);
 
 	if (len > ATA_SCSI_RBUF_SIZE)
@@ -3558,6 +3659,7 @@ static unsigned int ata_scsiop_maint_in(struct ata_scsi_args *args, u8 *rbuf)
 	unsigned int err = 0;
 
 	if (cdb[2] != 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(dev, "invalid command format %d\n", cdb[2]);
 		err = 2;
 		goto out;
@@ -3629,6 +3731,7 @@ static void ata_scsi_report_zones_complete(struct ata_queued_cmd *qc)
 	sg_miter_start(&miter, scsi_sglist(scmd), scsi_sg_count(scmd),
 		       SG_MITER_TO_SG | SG_MITER_ATOMIC);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_irq_save(flags);
 	while (sg_miter_next(&miter)) {
 		unsigned int offset = 0;
@@ -3693,6 +3796,7 @@ static unsigned int ata_scsi_zbc_in_xlat(struct ata_queued_cmd *qc)
 	u32 n_block;
 
 	if (unlikely(scmd->cmd_len < 16)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_dev_warn(qc->dev, "invalid cdb length %d\n",
 			     scmd->cmd_len);
 		fp = 15;
@@ -3777,6 +3881,7 @@ static unsigned int ata_scsi_zbc_out_xlat(struct ata_queued_cmd *qc)
 	u16 fp = (u16)-1;
 
 	if (unlikely(scmd->cmd_len < 16)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fp = 15;
 		goto invalid_fld;
 	}
@@ -3864,6 +3969,7 @@ static int ata_mselect_caching(struct ata_queued_cmd *qc,
 	 */
 
 	if (len != CACHE_MPAGE_LEN - 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (len < CACHE_MPAGE_LEN - 2)
 			*fp = len;
 		else
@@ -3920,6 +4026,7 @@ static int ata_mselect_control(struct ata_queued_cmd *qc,
 	 */
 
 	if (len != CONTROL_MPAGE_LEN - 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (len < CONTROL_MPAGE_LEN - 2)
 			*fp = len;
 		else
@@ -3974,6 +4081,7 @@ static unsigned int ata_scsi_mode_select_xlat(struct ata_queued_cmd *qc)
 
 	six_byte = (cdb[0] == MODE_SELECT);
 	if (six_byte) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (scmd->cmd_len < 5) {
 			fp = 4;
 			goto invalid_fld;
@@ -4109,6 +4217,7 @@ static unsigned int ata_scsi_mode_select_xlat(struct ata_queued_cmd *qc)
 
 static u8 ata_scsi_trusted_op(u32 len, bool send, bool dma)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (len == 0)
 		return ATA_CMD_TRUSTED_NONDATA;
 	else if (send)
@@ -4132,6 +4241,7 @@ static unsigned int ata_scsi_security_inout_xlat(struct ata_queued_cmd *qc)
 	 * We don't support the ATA "security" protocol.
 	 */
 	if (secp == 0xef) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_scsi_set_invalid_field(qc->dev, scmd, 1, 0);
 		return 1;
 	}
@@ -4194,7 +4304,9 @@ static unsigned int ata_scsi_var_len_cdb_xlat(struct ata_queued_cmd *qc)
 	 * then pass it to ata_scsi_pass_thru handler.
 	 */
 	if (sa == ATA_32)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ata_scsi_pass_thru(qc);
+}
 
 	/* unsupported service action */
 	return 1;
@@ -4214,6 +4326,7 @@ static unsigned int ata_scsi_var_len_cdb_xlat(struct ata_queued_cmd *qc)
 
 static inline ata_xlat_func_t ata_get_xlat_func(struct ata_device *dev, u8 cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (cmd) {
 	case READ_6:
 	case READ_10:
@@ -4296,14 +4409,17 @@ static inline int __ata_scsi_queuecmd(struct scsi_cmnd *scmd,
 	int rc = 0;
 
 	if (dev->class == ATA_DEV_ATA || dev->class == ATA_DEV_ZAC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unlikely(!scmd->cmd_len || scmd->cmd_len > dev->cdb_len))
 			goto bad_cdb_len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xlat_func = ata_get_xlat_func(dev, scsi_op);
 	} else {
 		if (unlikely(!scmd->cmd_len))
 			goto bad_cdb_len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xlat_func = NULL;
 		if (likely((scsi_op != ATA_16) || !atapi_passthru16)) {
 			/* relay SCSI command to ATAPI device */
@@ -4311,12 +4427,14 @@ static inline int __ata_scsi_queuecmd(struct scsi_cmnd *scmd,
 			if (unlikely(len > scmd->cmd_len || len > dev->cdb_len))
 				goto bad_cdb_len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			xlat_func = atapi_xlat;
 		} else {
 			/* ATA_16 passthru, treat as an ATA command */
 			if (unlikely(scmd->cmd_len > 16))
 				goto bad_cdb_len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			xlat_func = ata_get_xlat_func(dev, scsi_op);
 		}
 	}
@@ -4326,11 +4444,13 @@ static inline int __ata_scsi_queuecmd(struct scsi_cmnd *scmd,
 	else
 		ata_scsi_simulate(dev, scmd);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 
  bad_cdb_len:
 	DPRINTK("bad CDB len=%u, scsi_op=0x%02x, max=%u\n",
 		scmd->cmd_len, scsi_op, dev->cdb_len);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scmd->result = DID_ERROR << 16;
 	scmd->scsi_done(scmd);
 	return 0;
@@ -4367,12 +4487,14 @@ int ata_scsi_queuecmd(struct Scsi_Host *shost, struct scsi_cmnd *cmd)
 
 	spin_lock_irqsave(ap->lock, irq_flags);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_scsi_dump_cdb(ap, cmd);
 
 	dev = ata_scsi_find_dev(ap, scsidev);
 	if (likely(dev))
 		rc = __ata_scsi_queuecmd(cmd, dev);
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->result = (DID_BAD_TARGET << 16);
 		cmd->scsi_done(cmd);
 	}
@@ -4542,6 +4664,7 @@ int ata_scsi_add_hosts(struct ata_host *host, struct scsi_host_template *sht)
 			goto err_add;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  err_add:
@@ -4553,6 +4676,7 @@ int ata_scsi_add_hosts(struct ata_host *host, struct scsi_host_template *sht)
 		scsi_remove_host(shost);
 		scsi_host_put(shost);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 }
 
@@ -4572,6 +4696,7 @@ void ata_scsi_scan_host(struct ata_port *ap, int sync)
 			if (dev->sdev)
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ata_is_host_link(link))
 				id = dev->devno;
 			else
@@ -4583,6 +4708,7 @@ void ata_scsi_scan_host(struct ata_port *ap, int sync)
 				dev->sdev = sdev;
 				scsi_device_put(sdev);
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev->sdev = NULL;
 			}
 		}
@@ -4600,7 +4726,9 @@ void ata_scsi_scan_host(struct ata_port *ap, int sync)
 	}
  exit_loop:
 	if (!link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* we're missing some SCSI devices */
 	if (sync) {
@@ -4608,6 +4736,7 @@ void ata_scsi_scan_host(struct ata_port *ap, int sync)
 		 * any progress, sleep briefly and repeat.
 		 */
 		if (dev != last_failed_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			msleep(100);
 			last_failed_dev = dev;
 			goto repeat;
@@ -4617,10 +4746,12 @@ void ata_scsi_scan_host(struct ata_port *ap, int sync)
 		 * a few more chances.
 		 */
 		if (--tries) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			msleep(100);
 			goto repeat;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_port_err(ap,
 			     "WARNING: synchronous SCSI scan failed without making any progress, switching to async\n");
 	}
@@ -4647,9 +4778,11 @@ void ata_scsi_scan_host(struct ata_port *ap, int sync)
 int ata_scsi_offline_dev(struct ata_device *dev)
 {
 	if (dev->sdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scsi_device_set_state(dev->sdev, SDEV_OFFLINE);
 		return 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -4676,6 +4809,7 @@ static void ata_scsi_remove_dev(struct ata_device *dev)
 	 * increments reference counts regardless of device state.
 	 */
 	mutex_lock(&ap->scsi_host->scan_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(ap->lock, flags);
 
 	/* clearing dev->sdev is protected by host lock */
@@ -4717,6 +4851,7 @@ static void ata_scsi_handle_link_detach(struct ata_link *link)
 	struct ata_port *ap = link->ap;
 	struct ata_device *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_for_each_dev(dev, link, ALL) {
 		unsigned long flags;
 
@@ -4746,6 +4881,7 @@ static void ata_scsi_handle_link_detach(struct ata_link *link)
  */
 void ata_scsi_media_change_notify(struct ata_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->sdev)
 		sdev_evt_send_simple(dev->sdev, SDEV_EVT_MEDIA_CHANGE,
 				     GFP_ATOMIC);
@@ -4833,6 +4969,7 @@ void ata_scsi_hotplug(struct work_struct *work)
 int ata_scsi_user_scan(struct Scsi_Host *shost, unsigned int channel,
 		       unsigned int id, u64 lun)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_port *ap = ata_shost_to_port(shost);
 	unsigned long flags;
 	int devno, rc = 0;
@@ -4946,7 +5083,9 @@ struct ata_port *ata_sas_port_alloc(struct ata_host *host,
 
 	ap = ata_port_alloc(host);
 	if (!ap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	ap->port_no = 0;
 	ap->lock = &host->lock;
@@ -5009,12 +5148,14 @@ EXPORT_SYMBOL_GPL(ata_sas_port_stop);
  */
 void ata_sas_async_probe(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__ata_port_probe(ap);
 }
 EXPORT_SYMBOL_GPL(ata_sas_async_probe);
 
 int ata_sas_sync_probe(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ata_port_probe(ap);
 }
 EXPORT_SYMBOL_GPL(ata_sas_sync_probe);
@@ -5033,6 +5174,7 @@ EXPORT_SYMBOL_GPL(ata_sas_sync_probe);
 
 int ata_sas_port_init(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int rc = ap->ops->port_start(ap);
 
 	if (rc)
@@ -5050,6 +5192,7 @@ EXPORT_SYMBOL_GPL(ata_sas_port_init);
 
 void ata_sas_port_destroy(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ap->ops->port_stop)
 		ap->ops->port_stop(ap);
 	kfree(ap);
@@ -5067,6 +5210,7 @@ EXPORT_SYMBOL_GPL(ata_sas_port_destroy);
 
 int ata_sas_slave_configure(struct scsi_device *sdev, struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_scsi_sdev_config(sdev);
 	ata_scsi_dev_config(sdev, ap->link.device);
 	return 0;
@@ -5090,7 +5234,9 @@ int ata_sas_queuecmd(struct scsi_cmnd *cmd, struct ata_port *ap)
 	ata_scsi_dump_cdb(ap, cmd);
 
 	if (likely(ata_dev_enabled(ap->link.device)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = __ata_scsi_queuecmd(cmd, ap->link.device);
+}
 	else {
 		cmd->result = (DID_BAD_TARGET << 16);
 		cmd->scsi_done(cmd);
@@ -5104,6 +5250,7 @@ int ata_sas_allocate_tag(struct ata_port *ap)
 	unsigned int max_queue = ap->host->n_tags;
 	unsigned int i, tag;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0, tag = ap->sas_last_tag + 1; i < max_queue; i++, tag++) {
 		tag = tag < max_queue ? tag : 0;
 
@@ -5121,5 +5268,6 @@ int ata_sas_allocate_tag(struct ata_port *ap)
 
 void ata_sas_free_tag(unsigned int tag, struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clear_bit(tag, &ap->sas_tag_allocated);
 }
diff --git a/drivers/ata/libata-sff.c b/drivers/ata/libata-sff.c
index cc2f2e3..9c5a53d 100644
--- a/drivers/ata/libata-sff.c
+++ b/drivers/ata/libata-sff.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  libata-sff.c - helper library for PCI IDE BMDMA
  *
@@ -83,6 +85,7 @@ EXPORT_SYMBOL_GPL(ata_sff_port_ops);
  */
 u8 ata_sff_check_status(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ioread8(ap->ioaddr.status_addr);
 }
 EXPORT_SYMBOL_GPL(ata_sff_check_status);
@@ -102,6 +105,7 @@ EXPORT_SYMBOL_GPL(ata_sff_check_status);
  */
 static u8 ata_sff_altstatus(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ap->ops->sff_check_altstatus)
 		return ap->ops->sff_check_altstatus(ap);
 
@@ -124,6 +128,7 @@ static u8 ata_sff_irq_status(struct ata_port *ap)
 {
 	u8 status;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ap->ops->sff_check_altstatus || ap->ioaddr.altstatus_addr) {
 		status = ata_sff_altstatus(ap);
 		/* Not us: We are busy */
@@ -149,6 +154,7 @@ static u8 ata_sff_irq_status(struct ata_port *ap)
 
 static void ata_sff_sync(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ap->ops->sff_check_altstatus)
 		ap->ops->sff_check_altstatus(ap);
 	else if (ap->ioaddr.altstatus_addr)
@@ -169,6 +175,7 @@ static void ata_sff_sync(struct ata_port *ap)
 
 void ata_sff_pause(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_sff_sync(ap);
 	ndelay(400);
 }
@@ -184,6 +191,7 @@ EXPORT_SYMBOL_GPL(ata_sff_pause);
 
 void ata_sff_dma_pause(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ap->ops->sff_check_altstatus || ap->ioaddr.altstatus_addr) {
 		/* An altstatus read will cause the needed delay without
 		   messing up the IRQ status */
@@ -221,6 +229,7 @@ int ata_sff_busy_sleep(struct ata_port *ap,
 	status = ata_sff_busy_wait(ap, ATA_BUSY, 300);
 	timer_start = jiffies;
 	timeout = ata_deadline(timer_start, tmout_pat);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (status != 0xff && (status & ATA_BUSY) &&
 	       time_before(jiffies, timeout)) {
 		ata_msleep(ap, 50);
@@ -255,6 +264,7 @@ EXPORT_SYMBOL_GPL(ata_sff_busy_sleep);
 
 static int ata_sff_check_ready(struct ata_link *link)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u8 status = link->ap->ops->sff_check_status(link->ap);
 
 	return ata_check_ready(status);
@@ -276,6 +286,7 @@ static int ata_sff_check_ready(struct ata_link *link)
  */
 int ata_sff_wait_ready(struct ata_link *link, unsigned long deadline)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ata_wait_ready(link, deadline, ata_sff_check_ready);
 }
 EXPORT_SYMBOL_GPL(ata_sff_wait_ready);
@@ -295,6 +306,7 @@ EXPORT_SYMBOL_GPL(ata_sff_wait_ready);
  */
 static void ata_sff_set_devctl(struct ata_port *ap, u8 ctl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ap->ops->sff_set_devctl)
 		ap->ops->sff_set_devctl(ap, ctl);
 	else
@@ -320,7 +332,9 @@ void ata_sff_dev_select(struct ata_port *ap, unsigned int device)
 	u8 tmp;
 
 	if (device == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tmp = ATA_DEVICE_OBS;
+}
 	else
 		tmp = ATA_DEVICE_OBS | ATA_DEV1;
 
@@ -350,6 +364,7 @@ EXPORT_SYMBOL_GPL(ata_sff_dev_select);
 static void ata_dev_select(struct ata_port *ap, unsigned int device,
 			   unsigned int wait, unsigned int can_sleep)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ata_msg_probe(ap))
 		ata_port_info(ap, "ata_dev_select: ENTER, device %u, wait %u\n",
 			      device, wait);
@@ -384,6 +399,7 @@ void ata_sff_irq_on(struct ata_port *ap)
 	struct ata_ioports *ioaddr = &ap->ioaddr;
 
 	if (ap->ops->sff_irq_on) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->ops->sff_irq_on(ap);
 		return;
 	}
@@ -416,6 +432,7 @@ void ata_sff_tf_load(struct ata_port *ap, const struct ata_taskfile *tf)
 	unsigned int is_addr = tf->flags & ATA_TFLAG_ISADDR;
 
 	if (tf->ctl != ap->last_ctl) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ioaddr->ctl_addr)
 			iowrite8(tf->ctl, ioaddr->ctl_addr);
 		ap->last_ctl = tf->ctl;
@@ -486,6 +503,7 @@ void ata_sff_tf_read(struct ata_port *ap, struct ata_taskfile *tf)
 	tf->device = ioread8(ioaddr->device_addr);
 
 	if (tf->flags & ATA_TFLAG_LBA48) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (likely(ioaddr->ctl_addr)) {
 			iowrite8(tf->ctl | ATA_HOB, ioaddr->ctl_addr);
 			tf->hob_feature = ioread8(ioaddr->error_addr);
@@ -516,6 +534,7 @@ void ata_sff_exec_command(struct ata_port *ap, const struct ata_taskfile *tf)
 {
 	DPRINTK("ata%u: cmd 0x%X\n", ap->print_id, tf->command);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iowrite8(tf->command, ap->ioaddr.command_addr);
 	ata_sff_pause(ap);
 }
@@ -536,6 +555,7 @@ EXPORT_SYMBOL_GPL(ata_sff_exec_command);
 static inline void ata_tf_to_host(struct ata_port *ap,
 				  const struct ata_taskfile *tf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ap->ops->sff_tf_load(ap, tf);
 	ap->ops->sff_exec_command(ap, tf);
 }
@@ -564,7 +584,9 @@ unsigned int ata_sff_data_xfer(struct ata_queued_cmd *qc, unsigned char *buf,
 
 	/* Transfer multiple of 2 bytes */
 	if (rw == READ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ioread16_rep(data_addr, buf, words);
+}
 	else
 		iowrite16_rep(data_addr, buf, words);
 
@@ -620,7 +642,9 @@ unsigned int ata_sff_data_xfer32(struct ata_queued_cmd *qc, unsigned char *buf,
 	int slop = buflen & 3;
 
 	if (!(ap->pflags & ATA_PFLAG_PIO32))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ata_sff_data_xfer(qc, buf, buflen, rw);
+}
 
 	/* Transfer multiple of 4 bytes */
 	if (rw == READ)
@@ -679,6 +703,7 @@ unsigned int ata_sff_data_xfer_noirq(struct ata_queued_cmd *qc, unsigned char *b
 	unsigned long flags;
 	unsigned int consumed;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_irq_save(flags);
 	consumed = ata_sff_data_xfer32(qc, buf, buflen, rw);
 	local_irq_restore(flags);
@@ -705,7 +730,9 @@ static void ata_pio_sector(struct ata_queued_cmd *qc)
 	unsigned char *buf;
 
 	if (qc->curbytes == qc->nbytes - qc->sect_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->hsm_task_state = HSM_ST_LAST;
+}
 
 	page = sg_page(qc->cursg);
 	offset = qc->cursg->offset + qc->cursg_ofs;
@@ -745,6 +772,7 @@ static void ata_pio_sector(struct ata_queued_cmd *qc)
  */
 static void ata_pio_sectors(struct ata_queued_cmd *qc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (is_multi_taskfile(&qc->tf)) {
 		/* READ/WRITE MULTIPLE */
 		unsigned int nsect;
@@ -776,6 +804,7 @@ static void atapi_send_cdb(struct ata_port *ap, struct ata_queued_cmd *qc)
 {
 	/* send SCSI cdb */
 	DPRINTK("send cdb\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(qc->dev->cdb_len < 12);
 
 	ap->ops->sff_data_xfer(qc, qc->cdb, qc->dev->cdb_len, 1);
@@ -814,6 +843,7 @@ static void atapi_send_cdb(struct ata_port *ap, struct ata_queued_cmd *qc)
  */
 static int __atapi_pio_bytes(struct ata_queued_cmd *qc, unsigned int bytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int rw = (qc->tf.flags & ATA_TFLAG_WRITE) ? WRITE : READ;
 	struct ata_port *ap = qc->ap;
 	struct ata_device *dev = qc->dev;
@@ -887,6 +917,7 @@ static void atapi_pio_bytes(struct ata_queued_cmd *qc)
 	struct ata_device *dev = qc->dev;
 	struct ata_eh_info *ehi = &dev->link->eh_info;
 	unsigned int ireason, bc_lo, bc_hi, bytes;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int i_write, do_write = (qc->tf.flags & ATA_TFLAG_WRITE) ? 1 : 0;
 
 	/* Abuse qc->result_tf for temp storage of intermediate TF
@@ -940,6 +971,7 @@ static void atapi_pio_bytes(struct ata_queued_cmd *qc)
 static inline int ata_hsm_ok_in_wq(struct ata_port *ap,
 						struct ata_queued_cmd *qc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (qc->tf.flags & ATA_TFLAG_POLLING)
 		return 1;
 
@@ -972,6 +1004,7 @@ static void ata_hsm_qc_complete(struct ata_queued_cmd *qc, int in_wq)
 	struct ata_port *ap = qc->ap;
 
 	if (ap->ops->error_handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (in_wq) {
 			/* EH might have kicked in while host lock is
 			 * released.
@@ -1016,6 +1049,7 @@ int ata_sff_hsm_move(struct ata_port *ap, struct ata_queued_cmd *qc,
 	struct ata_eh_info *ehi = &link->eh_info;
 	int poll_next;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(ap->lock);
 
 	WARN_ON_ONCE((qc->flags & ATA_QCFLAG_ACTIVE) == 0);
@@ -1262,12 +1296,14 @@ EXPORT_SYMBOL_GPL(ata_sff_hsm_move);
 
 void ata_sff_queue_work(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	queue_work(ata_sff_wq, work);
 }
 EXPORT_SYMBOL_GPL(ata_sff_queue_work);
 
 void ata_sff_queue_delayed_work(struct delayed_work *dwork, unsigned long delay)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	queue_delayed_work(ata_sff_wq, dwork, delay);
 }
 EXPORT_SYMBOL_GPL(ata_sff_queue_delayed_work);
@@ -1276,6 +1312,7 @@ void ata_sff_queue_pio_task(struct ata_link *link, unsigned long delay)
 {
 	struct ata_port *ap = link->ap;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON((ap->sff_pio_task_link != NULL) &&
 		(ap->sff_pio_task_link != link));
 	ap->sff_pio_task_link = link;
@@ -1306,8 +1343,10 @@ void ata_sff_flush_pio_task(struct ata_port *ap)
 	ap->sff_pio_task_link = NULL;
 
 	if (ata_msg_ctl(ap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_port_dbg(ap, "%s: EXIT\n", __func__);
 }
+}
 
 static void ata_sff_pio_task(struct work_struct *work)
 {
@@ -1390,7 +1429,9 @@ unsigned int ata_sff_qc_issue(struct ata_queued_cmd *qc)
 	 * interrupt driven pio and atapi CDB interrupt.
 	 */
 	if (ap->flags & ATA_FLAG_PIO_POLLING)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		qc->tf.flags |= ATA_TFLAG_POLLING;
+}
 
 	/* select the device */
 	ata_dev_select(ap, qc->dev->devno, 1, 0);
@@ -1476,6 +1517,7 @@ EXPORT_SYMBOL_GPL(ata_sff_qc_issue);
  */
 bool ata_sff_qc_fill_rtf(struct ata_queued_cmd *qc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	qc->ap->ops->sff_tf_read(qc->ap, &qc->result_tf);
 	return true;
 }
@@ -1483,6 +1525,7 @@ EXPORT_SYMBOL_GPL(ata_sff_qc_fill_rtf);
 
 static unsigned int ata_sff_idle_irq(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ap->stats.idle_irq++;
 
 #ifdef ATA_IRQ_TRAP
@@ -1561,6 +1604,7 @@ static unsigned int __ata_sff_port_intr(struct ata_port *ap,
  */
 unsigned int ata_sff_port_intr(struct ata_port *ap, struct ata_queued_cmd *qc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __ata_sff_port_intr(ap, qc, false);
 }
 EXPORT_SYMBOL_GPL(ata_sff_port_intr);
@@ -1653,6 +1697,7 @@ static inline irqreturn_t __ata_sff_interrupt(int irq, void *dev_instance,
  */
 irqreturn_t ata_sff_interrupt(int irq, void *dev_instance)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __ata_sff_interrupt(irq, dev_instance, ata_sff_port_intr);
 }
 EXPORT_SYMBOL_GPL(ata_sff_interrupt);
@@ -1707,6 +1752,7 @@ EXPORT_SYMBOL_GPL(ata_sff_lost_interrupt);
  */
 void ata_sff_freeze(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ap->ctl |= ATA_NIEN;
 	ap->last_ctl = ap->ctl;
 
@@ -1765,7 +1811,9 @@ int ata_sff_prereset(struct ata_link *link, unsigned long deadline)
 
 	rc = ata_std_prereset(link, deadline);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	/* if we're about to do hardreset, nothing more to do */
 	if (ehc->i.action & ATA_EH_HARDRESET)
@@ -1822,6 +1870,7 @@ static unsigned int ata_devchk(struct ata_port *ap, unsigned int device)
 	nsect = ioread8(ioaddr->nsect_addr);
 	lbal = ioread8(ioaddr->lbal_addr);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((nsect == 0x55) && (lbal == 0xaa))
 		return 1;	/* we found a device */
 
@@ -1864,7 +1913,9 @@ unsigned int ata_sff_dev_classify(struct ata_device *dev, int present,
 	ap->ops->sff_tf_read(ap, &tf);
 	err = tf.feature;
 	if (r_err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*r_err = err;
+}
 
 	/* see if device passed diags: continue and warn later */
 	if (err == 0)
@@ -1933,7 +1984,9 @@ int ata_sff_wait_after_reset(struct ata_link *link, unsigned int devmask,
 	 * and TF status is 0xff, bail out on it too.
 	 */
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	/* if device 1 was found in ata_devchk, wait for register
 	 * access briefly, then wait for BSY to clear.
@@ -2024,7 +2077,9 @@ int ata_sff_softreset(struct ata_link *link, unsigned int *classes,
 
 	/* determine if device 0/1 are present */
 	if (ata_devchk(ap, 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		devmask |= (1 << 0);
+}
 	if (slave_possible && ata_devchk(ap, 1))
 		devmask |= (1 << 1);
 
@@ -2078,7 +2133,9 @@ int sata_sff_hardreset(struct ata_link *link, unsigned int *class,
 	rc = sata_link_hardreset(link, timing, deadline, &online,
 				 ata_sff_check_ready);
 	if (online)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*class = ata_sff_dev_classify(link->device, 1, NULL);
+}
 
 	DPRINTK("EXIT, class=%u\n", *class);
 	return rc;
@@ -2105,7 +2162,9 @@ void ata_sff_postreset(struct ata_link *link, unsigned int *classes)
 
 	/* is double-select really necessary? */
 	if (classes[0] != ATA_DEV_NONE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ap->ops->sff_dev_select(ap, 1);
+}
 	if (classes[1] != ATA_DEV_NONE)
 		ap->ops->sff_dev_select(ap, 0);
 
@@ -2175,6 +2234,7 @@ void ata_sff_error_handler(struct ata_port *ap)
 	unsigned long flags;
 
 	qc = __ata_qc_from_tag(ap, ap->link.active_tag);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (qc && !(qc->flags & ATA_QCFLAG_FAILED))
 		qc = NULL;
 
@@ -2215,6 +2275,7 @@ EXPORT_SYMBOL_GPL(ata_sff_error_handler);
  */
 void ata_sff_std_ports(struct ata_ioports *ioaddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ioaddr->data_addr = ioaddr->cmd_addr + ATA_REG_DATA;
 	ioaddr->error_addr = ioaddr->cmd_addr + ATA_REG_ERR;
 	ioaddr->feature_addr = ioaddr->cmd_addr + ATA_REG_FEATURE;
@@ -2236,6 +2297,7 @@ static int ata_resources_present(struct pci_dev *pdev, int port)
 
 	/* Check the PCI resources for this channel are enabled */
 	port = port * 2;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < 2; i++) {
 		if (pci_resource_start(pdev, port + i) == 0 ||
 		    pci_resource_len(pdev, port + i) == 0)
@@ -2266,6 +2328,7 @@ static int ata_resources_present(struct pci_dev *pdev, int port)
 int ata_pci_sff_init_host(struct ata_host *host)
 {
 	struct device *gdev = host->dev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(gdev);
 	unsigned int mask = 0;
 	int i, rc;
@@ -2346,7 +2409,9 @@ int ata_pci_sff_prepare_host(struct pci_dev *pdev,
 	int rc;
 
 	if (!devres_open_group(&pdev->dev, NULL, GFP_KERNEL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	host = ata_host_alloc_pinfo(&pdev->dev, ppi, 2);
 	if (!host) {
@@ -2390,6 +2455,7 @@ int ata_pci_sff_activate_host(struct ata_host *host,
 			      struct scsi_host_template *sht)
 {
 	struct device *dev = host->dev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	const char *drv_name = dev_driver_string(host->dev);
 	int legacy_mode = 0, rc;
@@ -2496,6 +2562,7 @@ static int ata_pci_init_one(struct pci_dev *pdev,
 
 	pi = ata_sff_find_valid_pi(ppi);
 	if (!pi) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&pdev->dev, "no valid port_info specified\n");
 		return -EINVAL;
 	}
@@ -2562,6 +2629,7 @@ int ata_pci_sff_init_one(struct pci_dev *pdev,
 		 const struct ata_port_info * const *ppi,
 		 struct scsi_host_template *sht, void *host_priv, int hflag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ata_pci_init_one(pdev, ppi, sht, host_priv, hflag, 0);
 }
 EXPORT_SYMBOL_GPL(ata_pci_sff_init_one);
@@ -2620,6 +2688,7 @@ static void ata_bmdma_fill_sg(struct ata_queued_cmd *qc)
 	unsigned int si, pi;
 
 	pi = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_sg(qc->sg, sg, qc->n_elem, si) {
 		u32 addr, offset;
 		u32 sg_len, len;
@@ -2671,6 +2740,7 @@ static void ata_bmdma_fill_sg_dumb(struct ata_queued_cmd *qc)
 	unsigned int si, pi;
 
 	pi = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_sg(qc->sg, sg, qc->n_elem, si) {
 		u32 addr, offset;
 		u32 sg_len, len, blen;
@@ -2721,6 +2791,7 @@ static void ata_bmdma_fill_sg_dumb(struct ata_queued_cmd *qc)
  */
 void ata_bmdma_qc_prep(struct ata_queued_cmd *qc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(qc->flags & ATA_QCFLAG_DMAMAP))
 		return;
 
@@ -2739,6 +2810,7 @@ EXPORT_SYMBOL_GPL(ata_bmdma_qc_prep);
  */
 void ata_bmdma_dumb_qc_prep(struct ata_queued_cmd *qc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(qc->flags & ATA_QCFLAG_DMAMAP))
 		return;
 
@@ -2767,7 +2839,9 @@ unsigned int ata_bmdma_qc_issue(struct ata_queued_cmd *qc)
 
 	/* defer PIO handling to sff_qc_issue */
 	if (!ata_is_dma(qc->tf.protocol))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ata_sff_qc_issue(qc);
+}
 
 	/* select the device */
 	ata_dev_select(ap, qc->dev->devno, 1, 0);
@@ -2824,6 +2898,7 @@ unsigned int ata_bmdma_port_intr(struct ata_port *ap, struct ata_queued_cmd *qc)
 	bool bmdma_stopped = false;
 	unsigned int handled;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ap->hsm_task_state == HSM_ST_LAST && ata_is_dma(qc->tf.protocol)) {
 		/* check status of DMA engine */
 		host_stat = ap->ops->bmdma_status(ap);
@@ -2869,6 +2944,7 @@ EXPORT_SYMBOL_GPL(ata_bmdma_port_intr);
  */
 irqreturn_t ata_bmdma_interrupt(int irq, void *dev_instance)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __ata_sff_interrupt(irq, dev_instance, ata_bmdma_port_intr);
 }
 EXPORT_SYMBOL_GPL(ata_bmdma_interrupt);
@@ -2892,6 +2968,7 @@ void ata_bmdma_error_handler(struct ata_port *ap)
 	bool thaw = false;
 
 	qc = __ata_qc_from_tag(ap, ap->link.active_tag);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (qc && !(qc->flags & ATA_QCFLAG_FAILED))
 		qc = NULL;
 
@@ -2945,6 +3022,7 @@ void ata_bmdma_post_internal_cmd(struct ata_queued_cmd *qc)
 	unsigned long flags;
 
 	if (ata_is_dma(qc->tf.protocol)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irqsave(ap->lock, flags);
 		ap->ops->bmdma_stop(qc);
 		spin_unlock_irqrestore(ap->lock, flags);
@@ -2968,7 +3046,9 @@ void ata_bmdma_irq_clear(struct ata_port *ap)
 	void __iomem *mmio = ap->ioaddr.bmdma_addr;
 
 	if (!mmio)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	iowrite8(ioread8(mmio + ATA_DMA_STATUS), mmio + ATA_DMA_STATUS);
 }
@@ -2995,7 +3075,9 @@ void ata_bmdma_setup(struct ata_queued_cmd *qc)
 	dmactl = ioread8(ap->ioaddr.bmdma_addr + ATA_DMA_CMD);
 	dmactl &= ~(ATA_DMA_WR | ATA_DMA_START);
 	if (!rw)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dmactl |= ATA_DMA_WR;
+}
 	iowrite8(dmactl, ap->ioaddr.bmdma_addr + ATA_DMA_CMD);
 
 	/* issue r/w command */
@@ -3074,6 +3156,7 @@ EXPORT_SYMBOL_GPL(ata_bmdma_stop);
  */
 u8 ata_bmdma_status(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ioread8(ap->ioaddr.bmdma_addr + ATA_DMA_STATUS);
 }
 EXPORT_SYMBOL_GPL(ata_bmdma_status);
@@ -3093,6 +3176,7 @@ EXPORT_SYMBOL_GPL(ata_bmdma_status);
  */
 int ata_bmdma_port_start(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ap->mwdma_mask || ap->udma_mask) {
 		ap->bmdma_prd =
 			dmam_alloc_coherent(ap->host->dev, ATA_PRD_TBL_SZ,
@@ -3121,6 +3205,7 @@ EXPORT_SYMBOL_GPL(ata_bmdma_port_start);
  */
 int ata_bmdma_port_start32(struct ata_port *ap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ap->pflags |= ATA_PFLAG_PIO32 | ATA_PFLAG_PIO32CHANGE;
 	return ata_bmdma_port_start(ap);
 }
@@ -3143,7 +3228,9 @@ int ata_pci_bmdma_clear_simplex(struct pci_dev *pdev)
 	u8 simplex;
 
 	if (bmdma == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	simplex = inb(bmdma + 0x02);
 	outb(simplex & 0x60, bmdma + 0x02);
@@ -3160,6 +3247,7 @@ static void ata_bmdma_nodma(struct ata_host *host, const char *reason)
 
 	dev_err(host->dev, "BMDMA: %s, falling back to PIO\n", reason);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < 2; i++) {
 		host->ports[i]->mwdma_mask = 0;
 		host->ports[i]->udma_mask = 0;
@@ -3178,6 +3266,7 @@ static void ata_bmdma_nodma(struct ata_host *host, const char *reason)
 void ata_pci_bmdma_init(struct ata_host *host)
 {
 	struct device *gdev = host->dev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(gdev);
 	int i, rc;
 
@@ -3252,7 +3341,9 @@ int ata_pci_bmdma_prepare_host(struct pci_dev *pdev,
 
 	rc = ata_pci_sff_prepare_host(pdev, ppi, r_host);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	ata_pci_bmdma_init(*r_host);
 	return 0;
@@ -3281,6 +3372,7 @@ int ata_pci_bmdma_init_one(struct pci_dev *pdev,
 			   struct scsi_host_template *sht, void *host_priv,
 			   int hflags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ata_pci_init_one(pdev, ppi, sht, host_priv, hflags, 1);
 }
 EXPORT_SYMBOL_GPL(ata_pci_bmdma_init_one);
@@ -3309,12 +3401,15 @@ int __init ata_sff_init(void)
 {
 	ata_sff_wq = alloc_workqueue("ata_sff", WQ_MEM_RECLAIM, WQ_MAX_ACTIVE);
 	if (!ata_sff_wq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
 
 void ata_sff_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	destroy_workqueue(ata_sff_wq);
 }
diff --git a/drivers/ata/libata-transport.c b/drivers/ata/libata-transport.c
index 19e6e53..8797995 100644
--- a/drivers/ata/libata-transport.c
+++ b/drivers/ata/libata-transport.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Copyright 2008 ioogle, Inc.  All rights reserved.
  *	Released under GPL v2.
@@ -235,6 +237,7 @@ static void ata_tport_release(struct device *dev)
  */
 static int ata_is_port(const struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev->release == ata_tport_release;
 }
 
@@ -242,7 +245,9 @@ static int ata_tport_match(struct attribute_container *cont,
 			   struct device *dev)
 {
 	if (!ata_is_port(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return &ata_scsi_transport_template->host_attrs.ac == cont;
 }
 
@@ -305,6 +310,7 @@ int ata_tport_add(struct device *parent,
 	if (error) {
 		goto tport_link_err;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  tport_link_err:
@@ -358,6 +364,7 @@ static void ata_tlink_release(struct device *dev)
  */
 static int ata_is_link(const struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev->release == ata_tlink_release;
 }
 
@@ -366,7 +373,9 @@ static int ata_tlink_match(struct attribute_container *cont,
 {
 	struct ata_internal* i = to_ata_internal(ata_scsi_transport_template);
 	if (!ata_is_link(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return &i->link_attr_cont.ac == cont;
 }
 
@@ -381,6 +390,7 @@ void ata_tlink_delete(struct ata_link *link)
 	struct device *dev = &link->tdev;
 	struct ata_device *ata_dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ata_for_each_dev(ata_dev, link, ALL) {
 		ata_tdev_delete(ata_dev);
 	}
@@ -431,11 +441,14 @@ int ata_tlink_add(struct ata_link *link)
 			goto tlink_dev_err;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
   tlink_dev_err:
 	while (--ata_dev >= link->device) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_tdev_delete(ata_dev);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	transport_remove_device(dev);
 	device_del(dev);
   tlink_err:
@@ -509,6 +522,7 @@ static ssize_t
 show_ata_dev_ering(struct device *dev,
 		   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_device *ata_dev = transport_class_to_dev(dev);
 	struct ata_show_ering_arg arg = { buf, 0 };
 
@@ -523,6 +537,7 @@ static ssize_t
 show_ata_dev_id(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_device *ata_dev = transport_class_to_dev(dev);
 	int written = 0, i = 0;
 
@@ -542,6 +557,7 @@ static ssize_t
 show_ata_dev_gscr(struct device *dev,
 		  struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_device *ata_dev = transport_class_to_dev(dev);
 	int written = 0, i = 0;
 
@@ -563,6 +579,7 @@ static ssize_t
 show_ata_dev_trim(struct device *dev,
 		  struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_device *ata_dev = transport_class_to_dev(dev);
 	unsigned char *mode;
 
@@ -598,6 +615,7 @@ static void ata_tdev_release(struct device *dev)
  */
 static int ata_is_ata_dev(const struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev->release == ata_tdev_release;
 }
 
@@ -606,7 +624,9 @@ static int ata_tdev_match(struct attribute_container *cont,
 {
 	struct ata_internal* i = to_ata_internal(ata_scsi_transport_template);
 	if (!ata_is_ata_dev(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return &i->dev_attr_cont.ac == cont;
 }
 
@@ -622,6 +642,7 @@ static int ata_tdev_match(struct attribute_container *cont,
  */
 static void ata_tdev_free(struct ata_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	transport_destroy_device(&dev->tdev);
 	put_device(&dev->tdev);
 }
@@ -670,6 +691,7 @@ static int ata_tdev_add(struct ata_device *ata_dev)
 	ata_acpi_bind_dev(ata_dev);
 	error = device_add(dev);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ata_tdev_free(ata_dev);
 		return error;
 	}
@@ -710,7 +732,9 @@ struct scsi_transport_template *ata_attach_transport(void)
 
 	i = kzalloc(sizeof(struct ata_internal), GFP_KERNEL);
 	if (!i)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	i->t.eh_strategy_handler	= ata_scsi_error;
 	i->t.user_scan			= ata_scsi_user_scan;
@@ -734,6 +758,7 @@ struct scsi_transport_template *ata_attach_transport(void)
 	SETUP_PORT_ATTRIBUTE(nr_pmp_links);
 	SETUP_PORT_ATTRIBUTE(idle_irq);
 	SETUP_PORT_ATTRIBUTE(port_no);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(count > ATA_PORT_ATTRS);
 	i->port_attrs[count] = NULL;
 
@@ -741,6 +766,7 @@ struct scsi_transport_template *ata_attach_transport(void)
 	SETUP_LINK_ATTRIBUTE(hw_sata_spd_limit);
 	SETUP_LINK_ATTRIBUTE(sata_spd_limit);
 	SETUP_LINK_ATTRIBUTE(sata_spd);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(count > ATA_LINK_ATTRS);
 	i->link_attrs[count] = NULL;
 
@@ -754,6 +780,7 @@ struct scsi_transport_template *ata_attach_transport(void)
 	SETUP_DEV_ATTRIBUTE(id);
 	SETUP_DEV_ATTRIBUTE(gscr);
 	SETUP_DEV_ATTRIBUTE(trim);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(count > ATA_DEV_ATTRS);
 	i->dev_attrs[count] = NULL;
 
@@ -766,6 +793,7 @@ struct scsi_transport_template *ata_attach_transport(void)
  */
 void ata_release_transport(struct scsi_transport_template *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ata_internal *i = to_ata_internal(t);
 
 	transport_container_unregister(&i->t.host_attrs);
@@ -788,6 +816,7 @@ __init int libata_transport_init(void)
 	error = transport_class_register(&ata_dev_class);
 	if (error)
 		goto out_unregister_port;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  out_unregister_port:
@@ -801,6 +830,7 @@ __init int libata_transport_init(void)
 
 void __exit libata_transport_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	transport_class_unregister(&ata_link_class);
 	transport_class_unregister(&ata_port_class);
 	transport_class_unregister(&ata_dev_class);
diff --git a/drivers/ata/pata_sis.c b/drivers/ata/pata_sis.c
index 626f989..7389e6f 100644
--- a/drivers/ata/pata_sis.c
+++ b/drivers/ata/pata_sis.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *    pata_sis.c - SiS ATA driver
  *
diff --git a/drivers/ata/sata_mv.c b/drivers/ata/sata_mv.c
index 3b2246d..1c8106b 100644
--- a/drivers/ata/sata_mv.c
+++ b/drivers/ata/sata_mv.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * sata_mv.c - Marvell SATA support
  *
diff --git a/drivers/ata/sata_nv.c b/drivers/ata/sata_nv.c
index 8c683dd..1a09ad2 100644
--- a/drivers/ata/sata_nv.c
+++ b/drivers/ata/sata_nv.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  sata_nv.c - NVIDIA nForce SATA
  *
diff --git a/drivers/ata/sata_promise.c b/drivers/ata/sata_promise.c
index d032bf6..b5ea673 100644
--- a/drivers/ata/sata_promise.c
+++ b/drivers/ata/sata_promise.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  sata_promise.c - Promise SATA
  *
diff --git a/drivers/ata/sata_sil.c b/drivers/ata/sata_sil.c
index ed76f07..5879739 100644
--- a/drivers/ata/sata_sil.c
+++ b/drivers/ata/sata_sil.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  sata_sil.c - Silicon Image SATA
  *
diff --git a/drivers/ata/sata_sis.c b/drivers/ata/sata_sis.c
index 30f4f35..f8e4a91 100644
--- a/drivers/ata/sata_sis.c
+++ b/drivers/ata/sata_sis.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  sata_sis.c - Silicon Integrated Systems SATA
  *
diff --git a/drivers/ata/sata_svw.c b/drivers/ata/sata_svw.c
index a9d692c..4064ab8 100644
--- a/drivers/ata/sata_svw.c
+++ b/drivers/ata/sata_svw.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  sata_svw.c - ServerWorks / Apple K2 SATA
  *
diff --git a/drivers/ata/sata_uli.c b/drivers/ata/sata_uli.c
index 4f6e8d8..5559bba 100644
--- a/drivers/ata/sata_uli.c
+++ b/drivers/ata/sata_uli.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  sata_uli.c - ULi Electronics SATA
  *
diff --git a/drivers/ata/sata_via.c b/drivers/ata/sata_via.c
index 93b8d78..86ae945 100644
--- a/drivers/ata/sata_via.c
+++ b/drivers/ata/sata_via.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  sata_via.c - VIA Serial ATA controllers
  *
diff --git a/drivers/ata/sata_vsc.c b/drivers/ata/sata_vsc.c
index 9648127..1e54a6c 100644
--- a/drivers/ata/sata_vsc.c
+++ b/drivers/ata/sata_vsc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  sata_vsc.c - Vitesse VSC7174 4 port DPA SATA
  *
diff --git a/drivers/base/attribute_container.c b/drivers/base/attribute_container.c
index 95e3ef8..e678958 100644
--- a/drivers/base/attribute_container.c
+++ b/drivers/base/attribute_container.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * attribute_container.c - implementation of a simple container for classes
  *
@@ -99,6 +101,7 @@ attribute_container_unregister(struct attribute_container *cont)
 	spin_lock(&cont->containers.k_lock);
 	if (!list_empty(&cont->containers.k_list))
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = 0;
 	list_del(&cont->node);
  out:
@@ -158,6 +161,7 @@ attribute_container_add_device(struct device *dev,
 
 		ic = kzalloc(sizeof(*ic), GFP_KERNEL);
 		if (!ic) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(dev, "failed to allocate class container\n");
 			continue;
 		}
@@ -212,6 +216,7 @@ attribute_container_remove_device(struct device *dev,
 	struct attribute_container *cont;
 
 	mutex_lock(&attribute_container_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(cont, &attribute_container_list, node) {
 		struct internal_container *ic;
 		struct klist_iter iter;
@@ -264,6 +269,7 @@ attribute_container_device_trigger(struct device *dev,
 			continue;
 
 		if (attribute_container_no_classdevs(cont)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fn(cont, dev, NULL);
 			continue;
 		}
@@ -296,6 +302,7 @@ attribute_container_trigger(struct device *dev,
 	struct attribute_container *cont;
 
 	mutex_lock(&attribute_container_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(cont, &attribute_container_list, node) {
 		if (cont->match(cont, dev))
 			fn(cont, dev);
@@ -322,18 +329,26 @@ attribute_container_add_attrs(struct device *classdev)
 	BUG_ON(attrs && cont->grp);
 
 	if (!attrs && !cont->grp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (cont->grp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sysfs_create_group(&classdev->kobj, cont->grp);
+}
 
 	for (i = 0; attrs[i]; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_attr_init(&attrs[i]->attr);
 		error = device_create_file(classdev, attrs[i]);
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -352,7 +367,9 @@ attribute_container_add_class_device(struct device *classdev)
 	int error = device_add(classdev);
 
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	return attribute_container_add_attrs(classdev);
 }
 
@@ -367,6 +384,7 @@ attribute_container_add_class_device_adapter(struct attribute_container *cont,
 					     struct device *dev,
 					     struct device *classdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return attribute_container_add_class_device(classdev);
 }
 
@@ -407,6 +425,7 @@ attribute_container_remove_attrs(struct device *classdev)
 void
 attribute_container_class_device_del(struct device *classdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	attribute_container_remove_attrs(classdev);
 	device_del(classdev);
 }
@@ -428,6 +447,7 @@ attribute_container_find_class_device(struct attribute_container *cont,
 	struct internal_container *ic;
 	struct klist_iter iter;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	klist_for_each_entry(ic, &cont->containers, node, &iter) {
 		if (ic->classdev.parent == dev) {
 			cdev = &ic->classdev;
diff --git a/drivers/base/base.h b/drivers/base/base.h
index d800de6..f602d35 100644
--- a/drivers/base/base.h
+++ b/drivers/base/base.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SPDX-License-Identifier: GPL-2.0 */
 #include <linux/notifier.h>
 
diff --git a/drivers/base/bus.c b/drivers/base/bus.c
index 22a64fd3..3fe6d7c 100644
--- a/drivers/base/bus.c
+++ b/drivers/base/bus.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * bus.c - bus driver management
  *
@@ -43,6 +45,7 @@ static struct bus_type *bus_get(struct bus_type *bus)
 		kset_get(&bus->p->subsys);
 		return bus;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -55,6 +58,7 @@ static void bus_put(struct bus_type *bus)
 static ssize_t drv_attr_show(struct kobject *kobj, struct attribute *attr,
 			     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct driver_attribute *drv_attr = to_drv_attr(attr);
 	struct driver_private *drv_priv = to_driver(kobj);
 	ssize_t ret = -EIO;
@@ -67,6 +71,7 @@ static ssize_t drv_attr_show(struct kobject *kobj, struct attribute *attr,
 static ssize_t drv_attr_store(struct kobject *kobj, struct attribute *attr,
 			      const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct driver_attribute *drv_attr = to_drv_attr(attr);
 	struct driver_private *drv_priv = to_driver(kobj);
 	ssize_t ret = -EIO;
@@ -83,6 +88,7 @@ static const struct sysfs_ops driver_sysfs_ops = {
 
 static void driver_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct driver_private *drv_priv = to_driver(kobj);
 
 	pr_debug("driver: '%s': %s\n", kobject_name(kobj), __func__);
@@ -100,6 +106,7 @@ static struct kobj_type driver_ktype = {
 static ssize_t bus_attr_show(struct kobject *kobj, struct attribute *attr,
 			     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bus_attribute *bus_attr = to_bus_attr(attr);
 	struct subsys_private *subsys_priv = to_subsys_private(kobj);
 	ssize_t ret = 0;
@@ -112,6 +119,7 @@ static ssize_t bus_attr_show(struct kobject *kobj, struct attribute *attr,
 static ssize_t bus_attr_store(struct kobject *kobj, struct attribute *attr,
 			      const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bus_attribute *bus_attr = to_bus_attr(attr);
 	struct subsys_private *subsys_priv = to_subsys_private(kobj);
 	ssize_t ret = 0;
@@ -133,13 +141,16 @@ int bus_create_file(struct bus_type *bus, struct bus_attribute *attr)
 		error = sysfs_create_file(&bus->p->subsys.kobj, &attr->attr);
 		bus_put(bus);
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EINVAL;
+}
 	return error;
 }
 EXPORT_SYMBOL_GPL(bus_create_file);
 
 void bus_remove_file(struct bus_type *bus, struct bus_attribute *attr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (bus_get(bus)) {
 		sysfs_remove_file(&bus->p->subsys.kobj, &attr->attr);
 		bus_put(bus);
@@ -149,6 +160,7 @@ EXPORT_SYMBOL_GPL(bus_remove_file);
 
 static void bus_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct subsys_private *priv = to_subsys_private(kobj);
 	struct bus_type *bus = priv->bus;
 
@@ -163,10 +175,13 @@ static struct kobj_type bus_ktype = {
 
 static int bus_uevent_filter(struct kset *kset, struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kobj_type *ktype = get_ktype(kobj);
 
 	if (ktype == &bus_ktype)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	return 0;
 }
 
@@ -180,6 +195,7 @@ static struct kset *bus_kset;
 static ssize_t unbind_store(struct device_driver *drv, const char *buf,
 			    size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bus_type *bus = bus_get(drv->bus);
 	struct device *dev;
 	int err = -ENODEV;
@@ -207,6 +223,7 @@ static DRIVER_ATTR_WO(unbind);
 static ssize_t bind_store(struct device_driver *drv, const char *buf,
 			  size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bus_type *bus = bus_get(drv->bus);
 	struct device *dev;
 	int err = -ENODEV;
@@ -237,12 +254,14 @@ static DRIVER_ATTR_WO(bind);
 
 static ssize_t show_drivers_autoprobe(struct bus_type *bus, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", bus->p->drivers_autoprobe);
 }
 
 static ssize_t store_drivers_autoprobe(struct bus_type *bus,
 				       const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (buf[0] == '0')
 		bus->p->drivers_autoprobe = 0;
 	else
@@ -258,7 +277,9 @@ static ssize_t store_drivers_probe(struct bus_type *bus,
 
 	dev = bus_find_device_by_name(bus, NULL, buf);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 	if (bus_rescan_devices_helper(dev, NULL) == 0)
 		err = count;
 	put_device(dev);
@@ -272,6 +293,7 @@ static struct device *next_device(struct klist_iter *i)
 	struct device_private *dev_prv;
 
 	if (n) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_prv = to_device_private_bus(n);
 		dev = dev_prv->device;
 	}
@@ -305,7 +327,9 @@ int bus_for_each_dev(struct bus_type *bus, struct device *start,
 	int error = 0;
 
 	if (!bus || !bus->p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	klist_iter_init_node(&bus->p->klist_devices, &i,
 			     (start ? &start->p->knode_bus : NULL));
@@ -339,7 +363,9 @@ struct device *bus_find_device(struct bus_type *bus,
 	struct device *dev;
 
 	if (!bus || !bus->p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	klist_iter_init_node(&bus->p->klist_devices, &i,
 			     (start ? &start->p->knode_bus : NULL));
@@ -371,6 +397,7 @@ static int match_name(struct device *dev, void *data)
 struct device *bus_find_device_by_name(struct bus_type *bus,
 				       struct device *start, const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bus_find_device(bus, start, (void *)name, match_name);
 }
 EXPORT_SYMBOL_GPL(bus_find_device_by_name);
@@ -392,7 +419,9 @@ struct device *subsys_find_device_by_id(struct bus_type *subsys, unsigned int id
 	struct device *dev;
 
 	if (!subsys)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (hint) {
 		klist_iter_init_node(&subsys->p->klist_devices, &i, &hint->p->knode_bus);
@@ -422,9 +451,11 @@ static struct device_driver *next_driver(struct klist_iter *i)
 	struct driver_private *drv_priv;
 
 	if (n) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		drv_priv = container_of(n, struct driver_private, knode_bus);
 		return drv_priv->driver;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -455,7 +486,9 @@ int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
 	int error = 0;
 
 	if (!bus)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	klist_iter_init_node(&bus->p->klist_drivers, &i,
 			     start ? &start->p->knode_bus : NULL);
@@ -480,6 +513,7 @@ int bus_add_device(struct device *dev)
 	int error = 0;
 
 	if (bus) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("bus: '%s': add device %s\n", bus->name, dev_name(dev));
 		error = device_add_groups(dev, bus->dev_groups);
 		if (error)
@@ -494,6 +528,7 @@ int bus_add_device(struct device *dev)
 			goto out_subsys;
 		klist_add_tail(&dev->p->knode_bus, &bus->p->klist_devices);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_subsys:
@@ -517,7 +552,9 @@ void bus_probe_device(struct device *dev)
 	struct subsys_interface *sif;
 
 	if (!bus)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (bus->p->drivers_autoprobe)
 		device_initial_probe(dev);
@@ -525,7 +562,9 @@ void bus_probe_device(struct device *dev)
 	mutex_lock(&bus->p->mutex);
 	list_for_each_entry(sif, &bus->p->interfaces, node)
 		if (sif->add_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sif->add_dev(dev, sif);
+}
 	mutex_unlock(&bus->p->mutex);
 }
 
@@ -545,12 +584,19 @@ void bus_remove_device(struct device *dev)
 	struct subsys_interface *sif;
 
 	if (!bus)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&bus->p->mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(sif, &bus->p->interfaces, node)
 		if (sif->remove_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sif->remove_dev(dev, sif);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&bus->p->mutex);
 
 	sysfs_remove_link(&dev->kobj, "subsystem");
@@ -558,8 +604,11 @@ void bus_remove_device(struct device *dev)
 			  dev_name(dev));
 	device_remove_groups(dev, dev->bus->dev_groups);
 	if (klist_node_attached(&dev->p->knode_bus))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		klist_del(&dev->p->knode_bus);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("bus: '%s': remove device %s\n",
 		 dev->bus->name, dev_name(dev));
 	device_release_driver(dev);
@@ -574,13 +623,16 @@ static int __must_check add_bind_files(struct device_driver *drv)
 	if (ret == 0) {
 		ret = driver_create_file(drv, &driver_attr_bind);
 		if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			driver_remove_file(drv, &driver_attr_unbind);
+}
 	}
 	return ret;
 }
 
 static void remove_bind_files(struct device_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	driver_remove_file(drv, &driver_attr_bind);
 	driver_remove_file(drv, &driver_attr_unbind);
 }
@@ -599,13 +651,16 @@ static int add_probe_files(struct bus_type *bus)
 
 	retval = bus_create_file(bus, &bus_attr_drivers_autoprobe);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bus_remove_file(bus, &bus_attr_drivers_probe);
+}
 out:
 	return retval;
 }
 
 static void remove_probe_files(struct bus_type *bus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bus_remove_file(bus, &bus_attr_drivers_autoprobe);
 	bus_remove_file(bus, &bus_attr_drivers_probe);
 }
@@ -613,6 +668,7 @@ static void remove_probe_files(struct bus_type *bus)
 static ssize_t uevent_store(struct device_driver *drv, const char *buf,
 			    size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kobject_synth_uevent(&drv->p->kobj, buf, count);
 	return count;
 }
@@ -625,6 +681,7 @@ static void driver_attach_async(void *_drv, async_cookie_t cookie)
 
 	ret = driver_attach(drv);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("bus: '%s': driver %s async attach completed: %d\n",
 		 drv->bus->name, drv->name, ret);
 }
@@ -641,12 +698,16 @@ int bus_add_driver(struct device_driver *drv)
 
 	bus = bus_get(drv->bus);
 	if (!bus)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("bus: '%s': add driver %s\n", bus->name, drv->name);
 
 	priv = kzalloc(sizeof(*priv), GFP_KERNEL);
 	if (!priv) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOMEM;
 		goto out_put_bus;
 	}
@@ -662,6 +723,7 @@ int bus_add_driver(struct device_driver *drv)
 	klist_add_tail(&priv->knode_bus, &bus->p->klist_drivers);
 	if (drv->bus->p->drivers_autoprobe) {
 		if (driver_allows_async_probing(drv)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("bus: '%s': probing driver %s asynchronously\n",
 				drv->bus->name, drv->name);
 			async_schedule(driver_attach_async, drv);
@@ -675,6 +737,7 @@ int bus_add_driver(struct device_driver *drv)
 
 	error = driver_create_file(drv, &driver_attr_uevent);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "%s: uevent attr (%s) failed\n",
 			__func__, drv->name);
 	}
@@ -694,6 +757,7 @@ int bus_add_driver(struct device_driver *drv)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_unregister:
@@ -715,6 +779,7 @@ int bus_add_driver(struct device_driver *drv)
  */
 void bus_remove_driver(struct device_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!drv->bus)
 		return;
 
@@ -737,6 +802,7 @@ static int __must_check bus_rescan_devices_helper(struct device *dev,
 	int ret = 0;
 
 	if (!dev->driver) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->parent)	/* Needed for USB */
 			device_lock(dev->parent);
 		ret = device_attach(dev);
@@ -756,6 +822,7 @@ static int __must_check bus_rescan_devices_helper(struct device *dev,
  */
 int bus_rescan_devices(struct bus_type *bus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bus_for_each_dev(bus, NULL, NULL, bus_rescan_devices_helper);
 }
 EXPORT_SYMBOL_GPL(bus_rescan_devices);
@@ -771,6 +838,7 @@ EXPORT_SYMBOL_GPL(bus_rescan_devices);
  */
 int device_reprobe(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->driver) {
 		if (dev->parent)        /* Needed for USB */
 			device_lock(dev->parent);
@@ -808,11 +876,13 @@ static int bus_add_groups(struct bus_type *bus,
 static void bus_remove_groups(struct bus_type *bus,
 			      const struct attribute_group **groups)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_remove_groups(&bus->p->subsys.kobj, groups);
 }
 
 static void klist_devices_get(struct klist_node *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device_private *dev_prv = to_device_private_bus(n);
 	struct device *dev = dev_prv->device;
 
@@ -821,6 +891,7 @@ static void klist_devices_get(struct klist_node *n)
 
 static void klist_devices_put(struct klist_node *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device_private *dev_prv = to_device_private_bus(n);
 	struct device *dev = dev_prv->device;
 
@@ -830,6 +901,7 @@ static void klist_devices_put(struct klist_node *n)
 static ssize_t bus_uevent_store(struct bus_type *bus,
 				const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kobject_synth_uevent(&bus->p->subsys.kobj, buf, count);
 	return count;
 }
@@ -851,7 +923,9 @@ int bus_register(struct bus_type *bus)
 
 	priv = kzalloc(sizeof(struct subsys_private), GFP_KERNEL);
 	if (!priv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	priv->bus = bus;
 	bus->p = priv;
@@ -877,6 +951,7 @@ int bus_register(struct bus_type *bus)
 	priv->devices_kset = kset_create_and_add("devices", NULL,
 						 &priv->subsys.kobj);
 	if (!priv->devices_kset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENOMEM;
 		goto bus_devices_fail;
 	}
@@ -884,6 +959,7 @@ int bus_register(struct bus_type *bus)
 	priv->drivers_kset = kset_create_and_add("drivers", NULL,
 						 &priv->subsys.kobj);
 	if (!priv->drivers_kset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENOMEM;
 		goto bus_drivers_fail;
 	}
@@ -901,6 +977,7 @@ int bus_register(struct bus_type *bus)
 	if (retval)
 		goto bus_groups_fail;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("bus: '%s': registered\n", bus->name);
 	return 0;
 
@@ -930,6 +1007,7 @@ EXPORT_SYMBOL_GPL(bus_register);
  */
 void bus_unregister(struct bus_type *bus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("bus: '%s': unregistering\n", bus->name);
 	if (bus->dev_root)
 		device_unregister(bus->dev_root);
@@ -950,6 +1028,7 @@ EXPORT_SYMBOL_GPL(bus_register_notifier);
 
 int bus_unregister_notifier(struct bus_type *bus, struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return blocking_notifier_chain_unregister(&bus->p->bus_notifier, nb);
 }
 EXPORT_SYMBOL_GPL(bus_unregister_notifier);
@@ -962,6 +1041,7 @@ EXPORT_SYMBOL_GPL(bus_get_kset);
 
 struct klist *bus_get_device_klist(struct bus_type *bus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &bus->p->klist_devices;
 }
 EXPORT_SYMBOL_GPL(bus_get_device_klist);
@@ -981,6 +1061,7 @@ static void device_insertion_sort_klist(struct device *a, struct list_head *list
 	struct device_private *dev_prv;
 	struct device *b;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(n, list, n_node) {
 		dev_prv = to_device_private_bus(n);
 		b = dev_prv->device;
@@ -1006,6 +1087,7 @@ void bus_sort_breadthfirst(struct bus_type *bus,
 	device_klist = bus_get_device_klist(bus);
 
 	spin_lock(&device_klist->k_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(n, tmp, &device_klist->k_list, n_node) {
 		dev_prv = to_device_private_bus(n);
 		dev = dev_prv->device;
@@ -1034,7 +1116,9 @@ void subsys_dev_iter_init(struct subsys_dev_iter *iter, struct bus_type *subsys,
 	struct klist_node *start_knode = NULL;
 
 	if (start)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start_knode = &start->p->knode_bus;
+}
 	klist_iter_init_node(&subsys->p->klist_devices, &iter->ki, start_knode);
 	iter->type = type;
 }
@@ -1060,10 +1144,14 @@ struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter)
 	for (;;) {
 		knode = klist_next(&iter->ki);
 		if (!knode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
 		dev = to_device_private_bus(knode)->device;
 		if (!iter->type || iter->type == dev->type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return dev;
+}
 	}
 }
 EXPORT_SYMBOL_GPL(subsys_dev_iter_next);
@@ -1088,18 +1176,24 @@ int subsys_interface_register(struct subsys_interface *sif)
 	struct device *dev;
 
 	if (!sif || !sif->subsys)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	subsys = bus_get(sif->subsys);
 	if (!subsys)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&subsys->p->mutex);
 	list_add_tail(&sif->node, &subsys->p->interfaces);
 	if (sif->add_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		subsys_dev_iter_init(&iter, subsys, NULL, NULL);
 		while ((dev = subsys_dev_iter_next(&iter)))
 			sif->add_dev(dev, sif);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		subsys_dev_iter_exit(&iter);
 	}
 	mutex_unlock(&subsys->p->mutex);
@@ -1115,16 +1209,21 @@ void subsys_interface_unregister(struct subsys_interface *sif)
 	struct device *dev;
 
 	if (!sif || !sif->subsys)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	subsys = sif->subsys;
 
 	mutex_lock(&subsys->p->mutex);
 	list_del_init(&sif->node);
 	if (sif->remove_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		subsys_dev_iter_init(&iter, subsys, NULL, NULL);
 		while ((dev = subsys_dev_iter_next(&iter)))
 			sif->remove_dev(dev, sif);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		subsys_dev_iter_exit(&iter);
 	}
 	mutex_unlock(&subsys->p->mutex);
@@ -1135,6 +1234,7 @@ EXPORT_SYMBOL_GPL(subsys_interface_unregister);
 
 static void system_root_device_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(dev);
 }
 
@@ -1147,10 +1247,13 @@ static int subsys_register(struct bus_type *subsys,
 
 	err = bus_register(subsys);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	dev = kzalloc(sizeof(struct device), GFP_KERNEL);
 	if (!dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOMEM;
 		goto err_dev;
 	}
@@ -1223,7 +1326,9 @@ int subsys_virtual_register(struct bus_type *subsys,
 
 	virtual_dir = virtual_device_parent(NULL);
 	if (!virtual_dir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return subsys_register(subsys, groups, virtual_dir);
 }
@@ -1233,11 +1338,15 @@ int __init buses_init(void)
 {
 	bus_kset = kset_create_and_add("bus", &bus_uevent_ops, NULL);
 	if (!bus_kset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	system_kset = kset_create_and_add("system", NULL, &devices_kset->kobj);
 	if (!system_kset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
diff --git a/drivers/base/cacheinfo.c b/drivers/base/cacheinfo.c
index 07532d8..77675c8 100644
--- a/drivers/base/cacheinfo.c
+++ b/drivers/base/cacheinfo.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * cacheinfo support - processor cache information via sysfs
  *
@@ -215,7 +217,8 @@ static void cache_of_override_properties(unsigned int cpu)
 }
 #else
 static void cache_of_override_properties(unsigned int cpu) { }
-static inline int cache_setup_of_node(unsigned int cpu) { return 0; }
+static inline int cache_setup_of_node(unsigned int cpu) { if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
+ return 0; }
 static inline bool cache_leaves_are_shared(struct cacheinfo *this_leaf,
 					   struct cacheinfo *sib_leaf)
 {
@@ -230,22 +233,33 @@ static inline bool cache_leaves_are_shared(struct cacheinfo *this_leaf,
 
 static int cache_shared_cpu_map_setup(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpu_cacheinfo *this_cpu_ci = get_cpu_cacheinfo(cpu);
 	struct cacheinfo *this_leaf, *sib_leaf;
 	unsigned int index;
 	int ret = 0;
 
 	if (this_cpu_ci->cpu_map_populated)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (of_have_populated_dt())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = cache_setup_of_node(cpu);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (!acpi_disabled)
 		/* No cache property/hierarchy support yet in ACPI */
 		ret = -ENOTSUPP;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (index = 0; index < cache_leaves(cpu); index++) {
 		unsigned int i;
 
@@ -254,25 +268,33 @@ static int cache_shared_cpu_map_setup(unsigned int cpu)
 		if (!cpumask_empty(&this_leaf->shared_cpu_map))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpumask_set_cpu(cpu, &this_leaf->shared_cpu_map);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_online_cpu(i) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			struct cpu_cacheinfo *sib_cpu_ci = get_cpu_cacheinfo(i);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (i == cpu || !sib_cpu_ci->info_list)
 				continue;/* skip if itself or no cacheinfo */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sib_leaf = sib_cpu_ci->info_list + index;
 			if (cache_leaves_are_shared(this_leaf, sib_leaf)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cpumask_set_cpu(cpu, &sib_leaf->shared_cpu_map);
 				cpumask_set_cpu(i, &this_leaf->shared_cpu_map);
 			}
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void cache_shared_cpu_map_remove(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpu_cacheinfo *this_cpu_ci = get_cpu_cacheinfo(cpu);
 	struct cacheinfo *this_leaf, *sib_leaf;
 	unsigned int sibling, index;
@@ -299,12 +321,14 @@ static void cache_shared_cpu_map_remove(unsigned int cpu)
 
 static void cache_override_properties(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (of_have_populated_dt())
 		return cache_of_override_properties(cpu);
 }
 
 static void free_cache_attributes(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!per_cpu_cacheinfo(cpu))
 		return;
 
@@ -316,11 +340,13 @@ static void free_cache_attributes(unsigned int cpu)
 
 int __weak init_cache_level(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOENT;
 }
 
 int __weak populate_cache_leaves(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOENT;
 }
 
@@ -329,12 +355,16 @@ static int detect_cache_attributes(unsigned int cpu)
 	int ret;
 
 	if (init_cache_level(cpu) || !cache_leaves(cpu))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	per_cpu_cacheinfo(cpu) = kcalloc(cache_leaves(cpu),
 					 sizeof(struct cacheinfo), GFP_KERNEL);
 	if (per_cpu_cacheinfo(cpu) == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ret = populate_cache_leaves(cpu);
 	if (ret)
@@ -345,10 +375,12 @@ static int detect_cache_attributes(unsigned int cpu)
 	 */
 	ret = cache_shared_cpu_map_setup(cpu);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("Unable to detect cache hierarchy for CPU %d\n", cpu);
 		goto free_ci;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cache_override_properties(cpu);
 	return 0;
 
@@ -386,6 +418,7 @@ show_one(ways_of_associativity, ways_of_associativity);
 static ssize_t size_show(struct device *dev,
 			 struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cacheinfo *this_leaf = dev_get_drvdata(dev);
 
 	return sprintf(buf, "%uK\n", this_leaf->size >> 10);
@@ -393,6 +426,7 @@ static ssize_t size_show(struct device *dev,
 
 static ssize_t shared_cpumap_show_func(struct device *dev, bool list, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cacheinfo *this_leaf = dev_get_drvdata(dev);
 	const struct cpumask *mask = &this_leaf->shared_cpu_map;
 
@@ -402,18 +436,21 @@ static ssize_t shared_cpumap_show_func(struct device *dev, bool list, char *buf)
 static ssize_t shared_cpu_map_show(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return shared_cpumap_show_func(dev, false, buf);
 }
 
 static ssize_t shared_cpu_list_show(struct device *dev,
 				    struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return shared_cpumap_show_func(dev, true, buf);
 }
 
 static ssize_t type_show(struct device *dev,
 			 struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cacheinfo *this_leaf = dev_get_drvdata(dev);
 
 	switch (this_leaf->type) {
@@ -431,6 +468,7 @@ static ssize_t type_show(struct device *dev,
 static ssize_t allocation_policy_show(struct device *dev,
 				      struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cacheinfo *this_leaf = dev_get_drvdata(dev);
 	unsigned int ci_attr = this_leaf->attributes;
 	int n = 0;
@@ -447,6 +485,7 @@ static ssize_t allocation_policy_show(struct device *dev,
 static ssize_t write_policy_show(struct device *dev,
 				 struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cacheinfo *this_leaf = dev_get_drvdata(dev);
 	unsigned int ci_attr = this_leaf->attributes;
 	int n = 0;
@@ -491,21 +530,32 @@ static umode_t
 cache_default_attrs_is_visible(struct kobject *kobj,
 			       struct attribute *attr, int unused)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = kobj_to_dev(kobj);
 	struct cacheinfo *this_leaf = dev_get_drvdata(dev);
 	const struct cpumask *mask = &this_leaf->shared_cpu_map;
 	umode_t mode = attr->mode;
 
 	if ((attr == &dev_attr_id.attr) && (this_leaf->attributes & CACHE_ID))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return mode;
+}
 	if ((attr == &dev_attr_type.attr) && this_leaf->type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return mode;
+}
 	if ((attr == &dev_attr_level.attr) && this_leaf->level)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return mode;
+}
 	if ((attr == &dev_attr_shared_cpu_map.attr) && !cpumask_empty(mask))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return mode;
+}
 	if ((attr == &dev_attr_shared_cpu_list.attr) && !cpumask_empty(mask))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return mode;
+}
 	if ((attr == &dev_attr_coherency_line_size.attr) &&
 	    this_leaf->coherency_line_size)
 		return mode;
@@ -516,7 +566,9 @@ cache_default_attrs_is_visible(struct kobject *kobj,
 	    this_leaf->number_of_sets)
 		return mode;
 	if ((attr == &dev_attr_size.attr) && this_leaf->size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return mode;
+}
 	if ((attr == &dev_attr_write_policy.attr) &&
 	    (this_leaf->attributes & CACHE_WRITE_POLICY_MASK))
 		return mode;
@@ -549,6 +601,7 @@ static const struct attribute_group *cache_private_groups[] = {
 const struct attribute_group *
 __weak cache_get_priv_group(struct cacheinfo *this_leaf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -559,11 +612,17 @@ cache_get_attribute_groups(struct cacheinfo *this_leaf)
 			cache_get_priv_group(this_leaf);
 
 	if (!priv_group)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return cache_default_groups;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!cache_private_groups[1])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cache_private_groups[1] = priv_group;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cache_private_groups;
 }
 
@@ -573,6 +632,7 @@ static void cpu_cache_sysfs_exit(unsigned int cpu)
 	int i;
 	struct device *ci_dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (per_cpu_index_dev(cpu)) {
 		for (i = 0; i < cache_leaves(cpu); i++) {
 			ci_dev = per_cache_index_dev(cpu, i);
@@ -592,11 +652,15 @@ static int cpu_cache_sysfs_init(unsigned int cpu)
 	struct device *dev = get_cpu_device(cpu);
 
 	if (per_cpu_cacheinfo(cpu) == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	per_cpu_cache_dev(cpu) = cpu_device_create(dev, NULL, NULL, "cache");
 	if (IS_ERR(per_cpu_cache_dev(cpu)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(per_cpu_cache_dev(cpu));
+}
 
 	/* Allocate all required memory */
 	per_cpu_index_dev(cpu) = kcalloc(cache_leaves(cpu),
@@ -604,6 +668,7 @@ static int cpu_cache_sysfs_init(unsigned int cpu)
 	if (unlikely(per_cpu_index_dev(cpu) == NULL))
 		goto err_out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_out:
@@ -622,7 +687,9 @@ static int cache_add_dev(unsigned int cpu)
 
 	rc = cpu_cache_sysfs_init(cpu);
 	if (unlikely(rc < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	parent = per_cpu_cache_dev(cpu);
 	for (i = 0; i < cache_leaves(cpu); i++) {
@@ -633,6 +700,7 @@ static int cache_add_dev(unsigned int cpu)
 		ci_dev = cpu_device_create(parent, this_leaf, cache_groups,
 					   "index%1u", i);
 		if (IS_ERR(ci_dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rc = PTR_ERR(ci_dev);
 			goto err;
 		}
@@ -651,15 +719,21 @@ static int cacheinfo_cpu_online(unsigned int cpu)
 	int rc = detect_cache_attributes(cpu);
 
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 	rc = cache_add_dev(cpu);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		free_cache_attributes(cpu);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 }
 
 static int cacheinfo_cpu_pre_down(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpumask_test_and_clear_cpu(cpu, &cache_dev_map))
 		cpu_cache_sysfs_exit(cpu);
 
diff --git a/drivers/base/class.c b/drivers/base/class.c
index 52eb8e6..fd1e807 100644
--- a/drivers/base/class.c
+++ b/drivers/base/class.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * class.c - basic device class management
  *
@@ -26,6 +28,7 @@
 static ssize_t class_attr_show(struct kobject *kobj, struct attribute *attr,
 			       char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct class_attribute *class_attr = to_class_attr(attr);
 	struct subsys_private *cp = to_subsys_private(kobj);
 	ssize_t ret = -EIO;
@@ -38,6 +41,7 @@ static ssize_t class_attr_show(struct kobject *kobj, struct attribute *attr,
 static ssize_t class_attr_store(struct kobject *kobj, struct attribute *attr,
 				const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct class_attribute *class_attr = to_class_attr(attr);
 	struct subsys_private *cp = to_subsys_private(kobj);
 	ssize_t ret = -EIO;
@@ -49,6 +53,7 @@ static ssize_t class_attr_store(struct kobject *kobj, struct attribute *attr,
 
 static void class_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct subsys_private *cp = to_subsys_private(kobj);
 	struct class *class = cp->class;
 
@@ -65,6 +70,7 @@ static void class_release(struct kobject *kobj)
 
 static const struct kobj_ns_type_operations *class_child_ns_type(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct subsys_private *cp = to_subsys_private(kobj);
 	struct class *class = cp->class;
 
@@ -92,8 +98,10 @@ int class_create_file_ns(struct class *cls, const struct class_attribute *attr,
 	int error;
 
 	if (cls)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = sysfs_create_file_ns(&cls->p->subsys.kobj,
 					     &attr->attr, ns);
+}
 	else
 		error = -EINVAL;
 	return error;
@@ -102,6 +110,7 @@ int class_create_file_ns(struct class *cls, const struct class_attribute *attr,
 void class_remove_file_ns(struct class *cls, const struct class_attribute *attr,
 			  const void *ns)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cls)
 		sysfs_remove_file_ns(&cls->p->subsys.kobj, &attr->attr, ns);
 }
@@ -142,6 +151,7 @@ static int class_add_groups(struct class *cls,
 static void class_remove_groups(struct class *cls,
 				const struct attribute_group **groups)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sysfs_remove_groups(&cls->p->subsys.kobj, groups);
 }
 
@@ -150,17 +160,21 @@ int __class_register(struct class *cls, struct lock_class_key *key)
 	struct subsys_private *cp;
 	int error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("device class '%s': registering\n", cls->name);
 
 	cp = kzalloc(sizeof(*cp), GFP_KERNEL);
 	if (!cp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	klist_init(&cp->klist_devices, klist_class_dev_get, klist_class_dev_put);
 	INIT_LIST_HEAD(&cp->interfaces);
 	kset_init(&cp->glue_dirs);
 	__mutex_init(&cp->mutex, "subsys mutex", key);
 	error = kobject_set_name(&cp->subsys.kobj, "%s", cls->name);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(cp);
 		return error;
 	}
@@ -182,6 +196,7 @@ int __class_register(struct class *cls, struct lock_class_key *key)
 
 	error = kset_register(&cp->subsys);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(cp);
 		return error;
 	}
@@ -193,6 +208,7 @@ EXPORT_SYMBOL_GPL(__class_register);
 
 void class_unregister(struct class *cls)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("device class '%s': unregistering\n", cls->name);
 	class_remove_groups(cls, cls->class_groups);
 	kset_unregister(&cls->p->subsys);
@@ -200,6 +216,7 @@ void class_unregister(struct class *cls)
 
 static void class_create_release(struct class *cls)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s called for %s\n", __func__, cls->name);
 	kfree(cls);
 }
@@ -226,6 +243,7 @@ struct class *__class_create(struct module *owner, const char *name,
 
 	cls = kzalloc(sizeof(*cls), GFP_KERNEL);
 	if (!cls) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENOMEM;
 		goto error;
 	}
@@ -238,6 +256,7 @@ struct class *__class_create(struct module *owner, const char *name,
 	if (retval)
 		goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cls;
 
 error:
@@ -255,6 +274,7 @@ EXPORT_SYMBOL_GPL(__class_create);
  */
 void class_destroy(struct class *cls)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((cls == NULL) || (IS_ERR(cls)))
 		return;
 
@@ -279,7 +299,9 @@ void class_dev_iter_init(struct class_dev_iter *iter, struct class *class,
 	struct klist_node *start_knode = NULL;
 
 	if (start)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start_knode = &start->knode_class;
+}
 	klist_iter_init_node(&class->p->klist_devices, &iter->ki, start_knode);
 	iter->type = type;
 }
@@ -302,13 +324,18 @@ struct device *class_dev_iter_next(struct class_dev_iter *iter)
 	struct klist_node *knode;
 	struct device *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		knode = klist_next(&iter->ki);
 		if (!knode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
 		dev = container_of(knode, struct device, knode_class);
 		if (!iter->type || iter->type == dev->type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return dev;
+}
 	}
 }
 EXPORT_SYMBOL_GPL(class_dev_iter_next);
@@ -352,7 +379,9 @@ int class_for_each_device(struct class *class, struct device *start,
 	int error = 0;
 
 	if (!class)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (!class->p) {
 		WARN(1, "%s called for class '%s' before it was initialized",
 		     __func__, class->name);
@@ -399,8 +428,11 @@ struct device *class_find_device(struct class *class, struct device *start,
 	struct device *dev;
 
 	if (!class)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	if (!class->p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN(1, "%s called for class '%s' before it was initialized",
 		     __func__, class->name);
 		return NULL;
@@ -413,6 +445,7 @@ struct device *class_find_device(struct class *class, struct device *start,
 			break;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	class_dev_iter_exit(&iter);
 
 	return dev;
@@ -426,18 +459,24 @@ int class_interface_register(struct class_interface *class_intf)
 	struct device *dev;
 
 	if (!class_intf || !class_intf->class)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	parent = class_get(class_intf->class);
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&parent->p->mutex);
 	list_add_tail(&class_intf->node, &parent->p->interfaces);
 	if (class_intf->add_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		class_dev_iter_init(&iter, parent, NULL, NULL);
 		while ((dev = class_dev_iter_next(&iter)))
 			class_intf->add_dev(dev, class_intf);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		class_dev_iter_exit(&iter);
 	}
 	mutex_unlock(&parent->p->mutex);
@@ -452,7 +491,9 @@ void class_interface_unregister(struct class_interface *class_intf)
 	struct device *dev;
 
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	mutex_lock(&parent->p->mutex);
 	list_del_init(&class_intf->node);
@@ -472,6 +513,7 @@ ssize_t show_class_attr_string(struct class *class,
 {
 	struct class_attribute_string *cs;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cs = container_of(attr, struct class_attribute_string, attr);
 	return snprintf(buf, PAGE_SIZE, "%s\n", cs->str);
 }
@@ -495,12 +537,16 @@ struct class_compat *class_compat_register(const char *name)
 
 	cls = kmalloc(sizeof(struct class_compat), GFP_KERNEL);
 	if (!cls)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	cls->kobj = kobject_create_and_add(name, &class_kset->kobj);
 	if (!cls->kobj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(cls);
 		return NULL;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cls;
 }
 EXPORT_SYMBOL_GPL(class_compat_register);
@@ -511,6 +557,7 @@ EXPORT_SYMBOL_GPL(class_compat_register);
  */
 void class_compat_unregister(struct class_compat *cls)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kobject_put(cls->kobj);
 	kfree(cls);
 }
@@ -530,7 +577,9 @@ int class_compat_create_link(struct class_compat *cls, struct device *dev,
 
 	error = sysfs_create_link(cls->kobj, &dev->kobj, dev_name(dev));
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	/*
 	 * Optionally add a "device" link (typically to the parent), as a
@@ -559,6 +608,7 @@ EXPORT_SYMBOL_GPL(class_compat_create_link);
 void class_compat_remove_link(struct class_compat *cls, struct device *dev,
 			      struct device *device_link)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (device_link)
 		sysfs_remove_link(&dev->kobj, "device");
 	sysfs_remove_link(cls->kobj, dev_name(dev));
@@ -569,7 +619,9 @@ int __init classes_init(void)
 {
 	class_kset = kset_create_and_add("class", NULL, NULL);
 	if (!class_kset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
diff --git a/drivers/base/container.c b/drivers/base/container.c
index ecbfbe2..fa70aac 100644
--- a/drivers/base/container.c
+++ b/drivers/base/container.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * System bus type for containers.
  *
@@ -17,11 +19,13 @@
 
 static int trivial_online(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int container_offline(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct container_dev *cdev = to_container_dev(dev);
 
 	return cdev->offline ? cdev->offline(cdev) : 0;
@@ -40,5 +44,7 @@ void __init container_dev_init(void)
 
 	ret = subsys_system_register(&container_subsys, NULL);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s() failed: %d\n", __func__, ret);
 }
+}
diff --git a/drivers/base/core.c b/drivers/base/core.c
index c8501cd..3a1e7c1f 100644
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/base/core.c - core driver model code (device registration, etc)
  *
@@ -68,6 +70,7 @@ int device_links_read_lock(void)
 
 void device_links_read_unlock(int idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	srcu_read_unlock(&device_links_srcu, idx);
 }
 #else /* !CONFIG_SRCU */
@@ -108,6 +111,7 @@ static int device_is_dependent(struct device *dev, void *target)
 	struct device_link *link;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(dev == target))
 		return 1;
 
@@ -135,7 +139,9 @@ static int device_reorder_to_tail(struct device *dev, void *not_used)
 	 * of the lists during the registration, so skip them here.
 	 */
 	if (device_is_registered(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		devices_kset_move_last(dev);
+}
 
 	if (device_pm_initialized(dev))
 		device_pm_move_last(dev);
@@ -180,6 +186,7 @@ struct device_link *device_link_add(struct device *consumer,
 {
 	struct device_link *link;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!consumer || !supplier ||
 	    ((flags & DL_FLAG_STATELESS) && (flags & DL_FLAG_AUTOREMOVE)))
 		return NULL;
@@ -284,6 +291,7 @@ EXPORT_SYMBOL_GPL(device_link_add);
 
 static void device_link_free(struct device_link *link)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	put_device(link->consumer);
 	put_device(link->supplier);
 	kfree(link);
@@ -292,11 +300,13 @@ static void device_link_free(struct device_link *link)
 #ifdef CONFIG_SRCU
 static void __device_link_free_srcu(struct rcu_head *rhead)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_link_free(container_of(rhead, struct device_link, rcu_head));
 }
 
 static void __device_link_del(struct device_link *link)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_info(link->consumer, "Dropping the link to %s\n",
 		 dev_name(link->supplier));
 
@@ -331,6 +341,7 @@ static void __device_link_del(struct device_link *link)
  */
 void device_link_del(struct device_link *link)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_links_write_lock();
 	device_pm_lock();
 	__device_link_del(link);
@@ -343,6 +354,7 @@ static void device_links_missing_supplier(struct device *dev)
 {
 	struct device_link *link;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(link, &dev->links.suppliers, c_node)
 		if (link->status == DL_STATE_CONSUMER_PROBE)
 			WRITE_ONCE(link->status, DL_STATE_AVAILABLE);
@@ -372,10 +384,13 @@ int device_links_check_suppliers(struct device *dev)
 	device_links_write_lock();
 
 	list_for_each_entry(link, &dev->links.suppliers, c_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (link->flags & DL_FLAG_STATELESS)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (link->status != DL_STATE_AVAILABLE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			device_links_missing_supplier(dev);
 			ret = -EPROBE_DEFER;
 			break;
@@ -406,17 +421,21 @@ void device_links_driver_bound(struct device *dev)
 	device_links_write_lock();
 
 	list_for_each_entry(link, &dev->links.consumers, s_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (link->flags & DL_FLAG_STATELESS)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(link->status != DL_STATE_DORMANT);
 		WRITE_ONCE(link->status, DL_STATE_AVAILABLE);
 	}
 
 	list_for_each_entry(link, &dev->links.suppliers, c_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (link->flags & DL_FLAG_STATELESS)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(link->status != DL_STATE_CONSUMER_PROBE);
 		WRITE_ONCE(link->status, DL_STATE_ACTIVE);
 	}
@@ -443,11 +462,16 @@ static void __device_links_no_driver(struct device *dev)
 	struct device_link *link, *ln;
 
 	list_for_each_entry_safe_reverse(link, ln, &dev->links.suppliers, c_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (link->flags & DL_FLAG_STATELESS)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (link->flags & DL_FLAG_AUTOREMOVE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__device_link_del(link);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (link->status != DL_STATE_SUPPLIER_UNBIND)
 			WRITE_ONCE(link->status, DL_STATE_AVAILABLE);
 	}
@@ -478,6 +502,7 @@ void device_links_driver_cleanup(struct device *dev)
 
 	device_links_write_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(link, &dev->links.consumers, s_node) {
 		if (link->flags & DL_FLAG_STATELESS)
 			continue;
@@ -513,6 +538,7 @@ bool device_links_busy(struct device *dev)
 
 	device_links_write_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(link, &dev->links.consumers, s_node) {
 		if (link->flags & DL_FLAG_STATELESS)
 			continue;
@@ -599,11 +625,13 @@ static void device_links_purge(struct device *dev)
 	device_links_write_lock();
 
 	list_for_each_entry_safe_reverse(link, ln, &dev->links.suppliers, c_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(link->status == DL_STATE_ACTIVE);
 		__device_link_del(link);
 	}
 
 	list_for_each_entry_safe_reverse(link, ln, &dev->links.consumers, s_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(link->status != DL_STATE_DORMANT &&
 			link->status != DL_STATE_NONE);
 		__device_link_del(link);
@@ -624,16 +652,19 @@ static DEFINE_MUTEX(device_hotplug_lock);
 
 void lock_device_hotplug(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&device_hotplug_lock);
 }
 
 void unlock_device_hotplug(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&device_hotplug_lock);
 }
 
 int lock_device_hotplug_sysfs(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mutex_trylock(&device_hotplug_lock))
 		return 0;
 
@@ -645,6 +676,7 @@ int lock_device_hotplug_sysfs(void)
 #ifdef CONFIG_BLOCK
 static inline int device_is_not_partition(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !(dev->type == &part_type);
 }
 #else
@@ -683,6 +715,7 @@ EXPORT_SYMBOL(dev_driver_string);
 static ssize_t dev_attr_show(struct kobject *kobj, struct attribute *attr,
 			     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device_attribute *dev_attr = to_dev_attr(attr);
 	struct device *dev = kobj_to_dev(kobj);
 	ssize_t ret = -EIO;
@@ -690,6 +723,7 @@ static ssize_t dev_attr_show(struct kobject *kobj, struct attribute *attr,
 	if (dev_attr->show)
 		ret = dev_attr->show(dev, dev_attr, buf);
 	if (ret >= (ssize_t)PAGE_SIZE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		print_symbol("dev_attr_show: %s returned bad count\n",
 				(unsigned long)dev_attr->show);
 	}
@@ -699,6 +733,7 @@ static ssize_t dev_attr_show(struct kobject *kobj, struct attribute *attr,
 static ssize_t dev_attr_store(struct kobject *kobj, struct attribute *attr,
 			      const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device_attribute *dev_attr = to_dev_attr(attr);
 	struct device *dev = kobj_to_dev(kobj);
 	ssize_t ret = -EIO;
@@ -719,6 +754,7 @@ ssize_t device_store_ulong(struct device *dev,
 			   struct device_attribute *attr,
 			   const char *buf, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dev_ext_attribute *ea = to_ext_attr(attr);
 	char *end;
 	unsigned long new = simple_strtoul(buf, &end, 0);
@@ -734,6 +770,7 @@ ssize_t device_show_ulong(struct device *dev,
 			  struct device_attribute *attr,
 			  char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dev_ext_attribute *ea = to_ext_attr(attr);
 	return snprintf(buf, PAGE_SIZE, "%lx\n", *(unsigned long *)(ea->var));
 }
@@ -743,6 +780,7 @@ ssize_t device_store_int(struct device *dev,
 			 struct device_attribute *attr,
 			 const char *buf, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dev_ext_attribute *ea = to_ext_attr(attr);
 	char *end;
 	long new = simple_strtol(buf, &end, 0);
@@ -758,6 +796,7 @@ ssize_t device_show_int(struct device *dev,
 			struct device_attribute *attr,
 			char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dev_ext_attribute *ea = to_ext_attr(attr);
 
 	return snprintf(buf, PAGE_SIZE, "%d\n", *(int *)(ea->var));
@@ -767,6 +806,7 @@ EXPORT_SYMBOL_GPL(device_show_int);
 ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
 			  const char *buf, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dev_ext_attribute *ea = to_ext_attr(attr);
 
 	if (strtobool(buf, ea->var) < 0)
@@ -779,6 +819,7 @@ EXPORT_SYMBOL_GPL(device_store_bool);
 ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
 			 char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dev_ext_attribute *ea = to_ext_attr(attr);
 
 	return snprintf(buf, PAGE_SIZE, "%d\n", *(bool *)(ea->var));
@@ -795,6 +836,7 @@ EXPORT_SYMBOL_GPL(device_show_bool);
  */
 static void device_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = kobj_to_dev(kobj);
 	struct device_private *p = dev->p;
 
@@ -810,7 +852,9 @@ static void device_release(struct kobject *kobj)
 	devres_release_all(dev);
 
 	if (dev->release)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->release(dev);
+}
 	else if (dev->type && dev->type->release)
 		dev->type->release(dev);
 	else if (dev->class && dev->class->dev_release)
@@ -824,6 +868,7 @@ static void device_release(struct kobject *kobj)
 
 static const void *device_namespace(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = kobj_to_dev(kobj);
 	const void *ns = NULL;
 
@@ -842,32 +887,42 @@ static struct kobj_type device_ktype = {
 
 static int dev_uevent_filter(struct kset *kset, struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kobj_type *ktype = get_ktype(kobj);
 
 	if (ktype == &device_ktype) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct device *dev = kobj_to_dev(kobj);
 		if (dev->bus)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
+}
 		if (dev->class)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static const char *dev_uevent_name(struct kset *kset, struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = kobj_to_dev(kobj);
 
 	if (dev->bus)
 		return dev->bus->name;
 	if (dev->class)
 		return dev->class->name;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
 static int dev_uevent(struct kset *kset, struct kobject *kobj,
 		      struct kobj_uevent_env *env)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = kobj_to_dev(kobj);
 	int retval = 0;
 
@@ -887,9 +942,13 @@ static int dev_uevent(struct kset *kset, struct kobject *kobj,
 			if (mode)
 				add_uevent_var(env, "DEVMODE=%#o", mode & 0777);
 			if (!uid_eq(uid, GLOBAL_ROOT_UID))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				add_uevent_var(env, "DEVUID=%u", from_kuid(&init_user_ns, uid));
+}
 			if (!gid_eq(gid, GLOBAL_ROOT_GID))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				add_uevent_var(env, "DEVGID=%u", from_kgid(&init_user_ns, gid));
+}
 			kfree(tmp);
 		}
 	}
@@ -907,26 +966,32 @@ static int dev_uevent(struct kset *kset, struct kobject *kobj,
 	if (dev->bus && dev->bus->uevent) {
 		retval = dev->bus->uevent(dev, env);
 		if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("device: '%s': %s: bus uevent() returned %d\n",
 				 dev_name(dev), __func__, retval);
+}
 	}
 
 	/* have the class specific function add its stuff */
 	if (dev->class && dev->class->dev_uevent) {
 		retval = dev->class->dev_uevent(dev, env);
 		if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("device: '%s': %s: class uevent() "
 				 "returned %d\n", dev_name(dev),
 				 __func__, retval);
+}
 	}
 
 	/* have the device type specific function add its stuff */
 	if (dev->type && dev->type->uevent) {
 		retval = dev->type->uevent(dev, env);
 		if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("device: '%s': %s: dev_type uevent() "
 				 "returned %d\n", dev_name(dev),
 				 __func__, retval);
+}
 	}
 
 	return retval;
@@ -955,6 +1020,7 @@ static ssize_t uevent_show(struct device *dev, struct device_attribute *attr,
 	if (!top_kobj->kset)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kset = top_kobj->kset;
 	if (!kset->uevent_ops || !kset->uevent_ops->uevent)
 		goto out;
@@ -966,7 +1032,9 @@ static ssize_t uevent_show(struct device *dev, struct device_attribute *attr,
 
 	env = kzalloc(sizeof(struct kobj_uevent_env), GFP_KERNEL);
 	if (!env)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/* let the kset specific function add its keys */
 	retval = kset->uevent_ops->uevent(kset, &dev->kobj, env);
@@ -984,6 +1052,7 @@ static ssize_t uevent_show(struct device *dev, struct device_attribute *attr,
 static ssize_t uevent_store(struct device *dev, struct device_attribute *attr,
 			    const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (kobject_synth_uevent(&dev->kobj, buf, count))
 		dev_err(dev, "uevent: failed to send synthetic uevent\n");
 
@@ -1010,7 +1079,9 @@ static ssize_t online_store(struct device *dev, struct device_attribute *attr,
 
 	ret = strtobool(buf, &val);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = lock_device_hotplug_sysfs();
 	if (ret)
@@ -1042,6 +1113,7 @@ union device_attr_group_devres {
 
 static int devm_attr_group_match(struct device *dev, void *res, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ((union device_attr_group_devres *)res)->group == data;
 }
 
@@ -1050,6 +1122,7 @@ static void devm_attr_group_remove(struct device *dev, void *res)
 	union device_attr_group_devres *devres = res;
 	const struct attribute_group *group = devres->group;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(dev, "%s: removing group %p\n", __func__, group);
 	sysfs_remove_group(&dev->kobj, group);
 }
@@ -1059,6 +1132,7 @@ static void devm_attr_groups_remove(struct device *dev, void *res)
 	union device_attr_group_devres *devres = res;
 	const struct attribute_group **groups = devres->groups;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(dev, "%s: removing groups %p\n", __func__, groups);
 	sysfs_remove_groups(&dev->kobj, groups);
 }
@@ -1081,7 +1155,9 @@ int devm_device_add_group(struct device *dev, const struct attribute_group *grp)
 	devres = devres_alloc(devm_attr_group_remove,
 			      sizeof(*devres), GFP_KERNEL);
 	if (!devres)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	error = sysfs_create_group(&dev->kobj, grp);
 	if (error) {
@@ -1106,6 +1182,7 @@ EXPORT_SYMBOL_GPL(devm_device_add_group);
 void devm_device_remove_group(struct device *dev,
 			      const struct attribute_group *grp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(devres_release(dev, devm_attr_group_remove,
 			       devm_attr_group_match,
 			       /* cast away const */ (void *)grp));
@@ -1134,7 +1211,9 @@ int devm_device_add_groups(struct device *dev,
 	devres = devres_alloc(devm_attr_groups_remove,
 			      sizeof(*devres), GFP_KERNEL);
 	if (!devres)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	error = sysfs_create_groups(&dev->kobj, groups);
 	if (error) {
@@ -1159,6 +1238,7 @@ EXPORT_SYMBOL_GPL(devm_device_add_groups);
 void devm_device_remove_groups(struct device *dev,
 			       const struct attribute_group **groups)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(devres_release(dev, devm_attr_groups_remove,
 			       devm_attr_group_match,
 			       /* cast away const */ (void *)groups));
@@ -1174,7 +1254,9 @@ static int device_add_attrs(struct device *dev)
 	if (class) {
 		error = device_add_groups(dev, class->dev_groups);
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 	}
 
 	if (type) {
@@ -1193,17 +1275,23 @@ static int device_add_attrs(struct device *dev)
 			goto err_remove_dev_groups;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  err_remove_dev_groups:
 	device_remove_groups(dev, dev->groups);
  err_remove_type_groups:
 	if (type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_remove_groups(dev, type->groups);
+}
  err_remove_class_groups:
 	if (class)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_remove_groups(dev, class->dev_groups);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -1216,7 +1304,9 @@ static void device_remove_attrs(struct device *dev)
 	device_remove_groups(dev, dev->groups);
 
 	if (type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_remove_groups(dev, type->groups);
+}
 
 	if (class)
 		device_remove_groups(dev, class->dev_groups);
@@ -1239,6 +1329,7 @@ struct kset *devices_kset;
  */
 static void devices_kset_move_before(struct device *deva, struct device *devb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!devices_kset)
 		return;
 	pr_debug("devices_kset: Moving %s before %s\n",
@@ -1255,6 +1346,7 @@ static void devices_kset_move_before(struct device *deva, struct device *devb)
  */
 static void devices_kset_move_after(struct device *deva, struct device *devb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!devices_kset)
 		return;
 	pr_debug("devices_kset: Moving %s after %s\n",
@@ -1271,7 +1363,10 @@ static void devices_kset_move_after(struct device *deva, struct device *devb)
 void devices_kset_move_last(struct device *dev)
 {
 	if (!devices_kset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("devices_kset: Moving %s to end of list\n", dev_name(dev));
 	spin_lock(&devices_kset->list_lock);
 	list_move_tail(&dev->kobj.entry, &devices_kset->list);
@@ -1325,6 +1420,7 @@ EXPORT_SYMBOL_GPL(device_remove_file);
 bool device_remove_file_self(struct device *dev,
 			     const struct device_attribute *attr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev)
 		return sysfs_remove_file_self(&dev->kobj, &attr->attr);
 	else
@@ -1342,7 +1438,9 @@ int device_create_bin_file(struct device *dev,
 {
 	int error = -EINVAL;
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = sysfs_create_bin_file(&dev->kobj, attr);
+}
 	return error;
 }
 EXPORT_SYMBOL_GPL(device_create_bin_file);
@@ -1355,6 +1453,7 @@ EXPORT_SYMBOL_GPL(device_create_bin_file);
 void device_remove_bin_file(struct device *dev,
 			    const struct bin_attribute *attr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev)
 		sysfs_remove_bin_file(&dev->kobj, attr);
 }
@@ -1362,6 +1461,7 @@ EXPORT_SYMBOL_GPL(device_remove_bin_file);
 
 static void klist_children_get(struct klist_node *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device_private *p = to_device_private_parent(n);
 	struct device *dev = p->device;
 
@@ -1370,6 +1470,7 @@ static void klist_children_get(struct klist_node *n)
 
 static void klist_children_put(struct klist_node *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device_private *p = to_device_private_parent(n);
 	struct device *dev = p->device;
 
@@ -1402,6 +1503,7 @@ void device_initialize(struct device *dev)
 	kobject_init(&dev->kobj, &device_ktype);
 	INIT_LIST_HEAD(&dev->dma_pools);
 	mutex_init(&dev->mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_novalidate_class(&dev->mutex);
 	spin_lock_init(&dev->devres_lock);
 	INIT_LIST_HEAD(&dev->devres_head);
@@ -1436,6 +1538,7 @@ struct class_dir {
 
 static void class_dir_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct class_dir *dir = to_class_dir(kobj);
 	kfree(dir);
 }
@@ -1443,6 +1546,7 @@ static void class_dir_release(struct kobject *kobj)
 static const
 struct kobj_ns_type_operations *class_dir_child_ns_type(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct class_dir *dir = to_class_dir(kobj);
 	return dir->class->ns_type;
 }
@@ -1461,7 +1565,9 @@ class_dir_create_and_add(struct class *class, struct kobject *parent_kobj)
 
 	dir = kzalloc(sizeof(*dir), GFP_KERNEL);
 	if (!dir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	dir->class = class;
 	kobject_init(&dir->kobj, &class_dir_ktype);
@@ -1470,9 +1576,11 @@ class_dir_create_and_add(struct class *class, struct kobject *parent_kobj)
 
 	retval = kobject_add(&dir->kobj, parent_kobj, "%s", class->name);
 	if (retval < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kobject_put(&dir->kobj);
 		return NULL;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &dir->kobj;
 }
 
@@ -1489,8 +1597,12 @@ static struct kobject *get_device_parent(struct device *dev,
 #ifdef CONFIG_BLOCK
 		/* block disks show up in /sys/block */
 		if (sysfs_deprecated && dev->class == &block_class) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (parent && parent->class == &block_class)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return &parent->kobj;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return &block_class.p->subsys.kobj;
 		}
 #endif
@@ -1535,6 +1647,7 @@ static struct kobject *get_device_parent(struct device *dev,
 
 	if (parent)
 		return &parent->kobj;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -1544,11 +1657,13 @@ static inline bool live_in_glue_dir(struct kobject *kobj,
 	if (!kobj || !dev->class ||
 	    kobj->kset != &dev->class->p->glue_dirs)
 		return false;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 
 static inline struct kobject *get_glue_dir(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev->kobj.parent;
 }
 
@@ -1561,7 +1676,9 @@ static void cleanup_glue_dir(struct device *dev, struct kobject *glue_dir)
 {
 	/* see if we live in a "glue" directory */
 	if (!live_in_glue_dir(glue_dir, dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	mutex_lock(&gdp_mutex);
 	kobject_put(glue_dir);
@@ -1570,18 +1687,24 @@ static void cleanup_glue_dir(struct device *dev, struct kobject *glue_dir)
 
 static int device_add_class_symlinks(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device_node *of_node = dev_of_node(dev);
 	int error;
 
 	if (of_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = sysfs_create_link(&dev->kobj, &of_node->kobj,"of_node");
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_warn(dev, "Error %d creating of_node link\n",error);
+}
 		/* An error here doesn't warrant bringing down the device */
 	}
 
 	if (!dev->class)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	error = sysfs_create_link(&dev->kobj,
 				  &dev->class->p->subsys.kobj,
@@ -1599,7 +1722,9 @@ static int device_add_class_symlinks(struct device *dev)
 #ifdef CONFIG_BLOCK
 	/* /sys/block has directories and does not need symlinks */
 	if (sysfs_deprecated && dev->class == &block_class)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 #endif
 
 	/* link in the class directory pointing to the device */
@@ -1608,6 +1733,7 @@ static int device_add_class_symlinks(struct device *dev)
 	if (error)
 		goto out_device;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_device:
@@ -1622,18 +1748,27 @@ static int device_add_class_symlinks(struct device *dev)
 
 static void device_remove_class_symlinks(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev_of_node(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_remove_link(&dev->kobj, "of_node");
+}
 
 	if (!dev->class)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (dev->parent && device_is_not_partition(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_remove_link(&dev->kobj, "device");
+}
 	sysfs_remove_link(&dev->kobj, "subsystem");
 #ifdef CONFIG_BLOCK
 	if (sysfs_deprecated && dev->class == &block_class)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 #endif
 	sysfs_delete_link(&dev->class->p->subsys.kobj, &dev->kobj, dev_name(dev));
 }
@@ -1694,6 +1829,7 @@ static int device_create_sys_dev_entry(struct device *dev)
 
 static void device_remove_sys_dev_entry(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kobject *kobj = device_to_dev_kobj(dev);
 	char devt_str[15];
 
@@ -1707,7 +1843,9 @@ int device_private_init(struct device *dev)
 {
 	dev->p = kzalloc(sizeof(*dev->p), GFP_KERNEL);
 	if (!dev->p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	dev->p->device = dev;
 	klist_init(&dev->p->klist_children, klist_children_get,
 		   klist_children_put);
@@ -1770,10 +1908,12 @@ int device_add(struct device *dev)
 		dev_set_name(dev, "%s%u", dev->bus->dev_name, dev->id);
 
 	if (!dev_name(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EINVAL;
 		goto name_error;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("device: '%s': %s\n", dev_name(dev), __func__);
 
 	parent = get_device(dev->parent);
@@ -1783,12 +1923,15 @@ int device_add(struct device *dev)
 
 	/* use parent numa_node */
 	if (parent && (dev_to_node(dev) == NUMA_NO_NODE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_dev_node(dev, dev_to_node(parent));
+}
 
 	/* first, register with generic layer. */
 	/* we require the name to be set before, and pass NULL */
 	error = kobject_add(&dev->kobj, dev->kobj.parent, NULL);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		glue_dir = get_glue_dir(dev);
 		goto Error;
 	}
@@ -1858,7 +2001,9 @@ int device_add(struct device *dev)
 	return error;
  SysEntryError:
 	if (MAJOR(dev->devt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_remove_file(dev, &dev_attr_dev);
+}
  DevAttrError:
 	device_pm_remove(dev);
 	dpm_sysfs_remove(dev);
@@ -1958,14 +2103,19 @@ void device_del(struct device *dev)
 	 * before dpm_sysfs_remove().
 	 */
 	if (dev->bus)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		blocking_notifier_call_chain(&dev->bus->p->bus_notifier,
 					     BUS_NOTIFY_DEL_DEVICE, dev);
+}
 
 	device_links_purge(dev);
 	dpm_sysfs_remove(dev);
 	if (parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		klist_del(&dev->p->knode_parent);
+}
 	if (MAJOR(dev->devt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		devtmpfs_delete_node(dev);
 		device_remove_sys_dev_entry(dev);
 		device_remove_file(dev, &dev_attr_dev);
@@ -1978,7 +2128,9 @@ void device_del(struct device *dev)
 		list_for_each_entry(class_intf,
 				    &dev->class->p->interfaces, node)
 			if (class_intf->remove_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				class_intf->remove_dev(dev, class_intf);
+}
 		/* remove the device from the class list */
 		klist_del(&dev->knode_class);
 		mutex_unlock(&dev->class->p->mutex);
@@ -1996,8 +2148,10 @@ void device_del(struct device *dev)
 	if (platform_notify_remove)
 		platform_notify_remove(dev);
 	if (dev->bus)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		blocking_notifier_call_chain(&dev->bus->p->bus_notifier,
 					     BUS_NOTIFY_REMOVED_DEVICE, dev);
+}
 	kobject_uevent(&dev->kobj, KOBJ_REMOVE);
 	glue_dir = get_glue_dir(dev);
 	kobject_del(&dev->kobj);
@@ -2019,6 +2173,7 @@ EXPORT_SYMBOL_GPL(device_del);
  */
 void device_unregister(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("device: '%s': %s\n", dev_name(dev), __func__);
 	device_del(dev);
 	put_device(dev);
@@ -2027,6 +2182,7 @@ EXPORT_SYMBOL_GPL(device_unregister);
 
 static struct device *prev_device(struct klist_iter *i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct klist_node *n = klist_prev(i);
 	struct device *dev = NULL;
 	struct device_private *p;
@@ -2040,6 +2196,7 @@ static struct device *prev_device(struct klist_iter *i)
 
 static struct device *next_device(struct klist_iter *i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct klist_node *n = klist_next(i);
 	struct device *dev = NULL;
 	struct device_private *p;
@@ -2076,22 +2233,31 @@ const char *device_get_devnode(struct device *dev,
 	if (dev->type && dev->type->devnode)
 		*tmp = dev->type->devnode(dev, mode, uid, gid);
 	if (*tmp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return *tmp;
+}
 
 	/* the class may provide a specific name */
 	if (dev->class && dev->class->devnode)
 		*tmp = dev->class->devnode(dev, mode);
 	if (*tmp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return *tmp;
+}
 
 	/* return name without allocation, tmp == NULL */
 	if (strchr(dev_name(dev), '!') == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return dev_name(dev);
+}
 
 	/* replace '!' in the name with '/' */
 	s = kstrdup(dev_name(dev), GFP_KERNEL);
 	if (!s)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	strreplace(s, '!', '/');
 	return *tmp = s;
 }
@@ -2116,7 +2282,9 @@ int device_for_each_child(struct device *parent, void *data,
 	int error = 0;
 
 	if (!parent->p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	klist_iter_init(&parent->p->klist_children, &i);
 	while ((child = next_device(&i)) && !error)
@@ -2146,7 +2314,9 @@ int device_for_each_child_reverse(struct device *parent, void *data,
 	int error = 0;
 
 	if (!parent->p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	klist_iter_init(&parent->p->klist_children, &i);
 	while ((child = prev_device(&i)) && !error)
@@ -2180,7 +2350,9 @@ struct device *device_find_child(struct device *parent, void *data,
 	struct device *child;
 
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	klist_iter_init(&parent->p->klist_children, &i);
 	while ((child = next_device(&i)))
@@ -2195,7 +2367,9 @@ int __init devices_init(void)
 {
 	devices_kset = kset_create_and_add("devices", &device_uevent_ops, NULL);
 	if (!devices_kset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	dev_kobj = kobject_create_and_add("dev", NULL);
 	if (!dev_kobj)
 		goto dev_kobj_err;
@@ -2206,6 +2380,7 @@ int __init devices_init(void)
 	if (!sysfs_dev_char_kobj)
 		goto char_kobj_err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  char_kobj_err:
@@ -2223,7 +2398,9 @@ static int device_check_offline(struct device *dev, void *not_used)
 
 	ret = device_for_each_child(dev, NULL, device_check_offline);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	return device_supports_offline(dev) && !dev->offline ? -EBUSY : 0;
 }
@@ -2244,7 +2421,9 @@ int device_offline(struct device *dev)
 	int ret;
 
 	if (dev->offline_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	ret = device_for_each_child(dev, NULL, device_check_offline);
 	if (ret)
@@ -2283,6 +2462,7 @@ int device_online(struct device *dev)
 
 	device_lock(dev);
 	if (device_supports_offline(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->offline) {
 			ret = dev->bus->online(dev);
 			if (!ret) {
@@ -2305,11 +2485,13 @@ struct root_device {
 
 static inline struct root_device *to_root_device(struct device *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return container_of(d, struct root_device, dev);
 }
 
 static void root_device_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(to_root_device(dev));
 }
 
@@ -2342,7 +2524,9 @@ struct device *__root_device_register(const char *name, struct module *owner)
 
 	root = kzalloc(sizeof(struct root_device), GFP_KERNEL);
 	if (!root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(err);
+}
 
 	err = dev_set_name(&root->dev, "%s", name);
 	if (err) {
@@ -2384,6 +2568,7 @@ EXPORT_SYMBOL_GPL(__root_device_register);
  */
 void root_device_unregister(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct root_device *root = to_root_device(dev);
 
 	if (root->owner)
@@ -2396,6 +2581,7 @@ EXPORT_SYMBOL_GPL(root_device_unregister);
 
 static void device_create_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("device: '%s': %s\n", dev_name(dev), __func__);
 	kfree(dev);
 }
@@ -2414,6 +2600,7 @@ device_create_groups_vargs(struct class *class, struct device *parent,
 
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENOMEM;
 		goto error;
 	}
@@ -2434,6 +2621,7 @@ device_create_groups_vargs(struct class *class, struct device *parent,
 	if (retval)
 		goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev;
 
 error:
@@ -2577,6 +2765,7 @@ void device_destroy(struct class *class, dev_t devt)
 
 	dev = class_find_device(class, NULL, &devt, __match_devt);
 	if (dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_device(dev);
 		device_unregister(dev);
 	}
@@ -2630,7 +2819,9 @@ int device_rename(struct device *dev, const char *new_name)
 
 	dev = get_device(dev);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	dev_dbg(dev, "renaming to %s\n", new_name);
 
@@ -2668,7 +2859,9 @@ static int device_move_class_links(struct device *dev,
 	int error = 0;
 
 	if (old_parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_remove_link(&dev->kobj, "device");
+}
 	if (new_parent)
 		error = sysfs_create_link(&dev->kobj, &new_parent->kobj,
 					  "device");
@@ -2690,7 +2883,9 @@ int device_move(struct device *dev, struct device *new_parent,
 
 	dev = get_device(dev);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	device_pm_lock();
 	new_parent = get_device(new_parent);
@@ -2859,14 +3054,18 @@ create_syslog_header(const struct device *dev, char *hdr, size_t hdrlen)
 		char c;
 
 		if (strcmp(subsys, "block") == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			c = 'b';
+}
 		else
 			c = 'c';
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pos++;
 		pos += snprintf(hdr + pos, hdrlen - pos,
 				"DEVICE=%c%u:%u",
 				c, MAJOR(dev->devt), MINOR(dev->devt));
 	} else if (strcmp(subsys, "net") == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct net_device *net = to_net_dev(dev);
 
 		pos++;
@@ -2988,14 +3187,18 @@ void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode)
 		struct fwnode_handle *fn = dev->fwnode;
 
 		if (fwnode_is_primary(fn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fn = fn->secondary;
+}
 
 		if (fn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			WARN_ON(fwnode->secondary);
 			fwnode->secondary = fn;
 		}
 		dev->fwnode = fwnode;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->fwnode = fwnode_is_primary(dev->fwnode) ?
 			dev->fwnode->secondary : NULL;
 	}
@@ -3013,6 +3216,7 @@ EXPORT_SYMBOL_GPL(set_primary_fwnode);
  */
 void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (fwnode)
 		fwnode->secondary = ERR_PTR(-ENODEV);
 
@@ -3032,6 +3236,7 @@ void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode)
  */
 void device_set_of_node_from_dev(struct device *dev, const struct device *dev2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	of_node_put(dev->of_node);
 	dev->of_node = of_node_get(dev2->of_node);
 	dev->of_node_reused = true;
diff --git a/drivers/base/cpu.c b/drivers/base/cpu.c
index 825964e..ec6a1c9 100644
--- a/drivers/base/cpu.c
+++ b/drivers/base/cpu.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * CPU subsystem support
  */
@@ -27,8 +29,11 @@ static int cpu_subsys_match(struct device *dev, struct device_driver *drv)
 {
 	/* ACPI style match is the only one that may succeed. */
 	if (acpi_driver_match_device(dev, drv))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -44,6 +49,7 @@ static void change_cpu_under_node(struct cpu *cpu,
 
 static int cpu_subsys_online(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpu *cpu = container_of(dev, struct cpu, dev);
 	int cpuid = dev->id;
 	int from_nid, to_nid;
@@ -67,6 +73,7 @@ static int cpu_subsys_online(struct device *dev)
 
 static int cpu_subsys_offline(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cpu_down(dev->id);
 }
 
@@ -77,6 +84,7 @@ void unregister_cpu(struct cpu *cpu)
 	unregister_cpu_under_node(logical_cpu, cpu_to_node(logical_cpu));
 
 	device_unregister(&cpu->dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	per_cpu(cpu_sys_devices, logical_cpu) = NULL;
 	return;
 }
@@ -140,6 +148,7 @@ EXPORT_SYMBOL_GPL(cpu_subsys);
 static ssize_t show_crash_notes(struct device *dev, struct device_attribute *attr,
 				char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpu *cpu = container_of(dev, struct cpu, dev);
 	ssize_t rc;
 	unsigned long long addr;
@@ -208,6 +217,7 @@ static ssize_t show_cpus_attr(struct device *dev,
 			      struct device_attribute *attr,
 			      char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpu_attr *ca = container_of(attr, struct cpu_attr, attr);
 
 	return cpumap_print_to_pagebuf(true, buf, ca->map);
@@ -229,6 +239,7 @@ static struct cpu_attr cpu_attrs[] = {
 static ssize_t print_cpus_kernel_max(struct device *dev,
 				     struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int n = snprintf(buf, PAGE_SIZE-2, "%d\n", NR_CPUS - 1);
 	return n;
 }
@@ -245,7 +256,9 @@ static ssize_t print_cpus_offline(struct device *dev,
 
 	/* display offline cpus < nr_cpu_ids */
 	if (!alloc_cpumask_var(&offline, GFP_KERNEL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	cpumask_andnot(offline, cpu_possible_mask, cpu_online_mask);
 	n = scnprintf(buf, len, "%*pbl", cpumask_pr_args(offline));
 	free_cpumask_var(offline);
@@ -324,6 +337,7 @@ static ssize_t print_cpu_modalias(struct device *dev,
 	for (i = 0; i < MAX_CPU_FEATURES; i++)
 		if (cpu_have_feature(i)) {
 			if (PAGE_SIZE < n + sizeof(",XXXX\n")) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				WARN(1, "CPU features overflow page\n");
 				break;
 			}
@@ -370,10 +384,14 @@ int register_cpu(struct cpu *cpu, int num)
 #endif
 	cpu->dev.groups = common_cpu_attr_groups;
 	if (cpu->hotpluggable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpu->dev.groups = hotplugable_cpu_attr_groups;
+}
 	error = device_register(&cpu->dev);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	per_cpu(cpu_sys_devices, num) = &cpu->dev;
 	register_cpu_under_node(num, cpu_to_node(num));
@@ -393,6 +411,7 @@ EXPORT_SYMBOL_GPL(get_cpu_device);
 
 static void device_create_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(dev);
 }
 
@@ -406,6 +425,7 @@ __cpu_device_create(struct device *parent, void *drvdata,
 
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENOMEM;
 		goto error;
 	}
@@ -424,6 +444,7 @@ __cpu_device_create(struct device *parent, void *drvdata,
 	if (retval)
 		goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev;
 
 error:
@@ -480,6 +501,7 @@ static const struct attribute_group *cpu_root_attr_groups[] = {
 
 bool cpu_is_hotpluggable(unsigned cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = get_cpu_device(cpu);
 	return dev && container_of(dev, struct cpu, dev)->hotpluggable;
 }
@@ -506,18 +528,21 @@ static void __init cpu_dev_register_generic(void)
 ssize_t __weak cpu_show_meltdown(struct device *dev,
 				 struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "Not affected\n");
 }
 
 ssize_t __weak cpu_show_spectre_v1(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "Not affected\n");
 }
 
 ssize_t __weak cpu_show_spectre_v2(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "Not affected\n");
 }
 
@@ -551,8 +576,11 @@ static inline void cpu_register_vulnerabilities(void) { }
 void __init cpu_dev_init(void)
 {
 	if (subsys_system_register(&cpu_subsys, cpu_root_attr_groups))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Failed to register CPU subsystem");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpu_dev_register_generic();
 	cpu_register_vulnerabilities();
 }
diff --git a/drivers/base/dd.c b/drivers/base/dd.c
index ad44b40..8ba96eb 100644
--- a/drivers/base/dd.c
+++ b/drivers/base/dd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/base/dd.c - The core device/driver interactions.
  *
@@ -104,6 +106,7 @@ static void deferred_probe_work_func(struct work_struct *work)
 	 */
 	mutex_lock(&deferred_probe_mutex);
 	while (!list_empty(&deferred_probe_active_list)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		private = list_first_entry(&deferred_probe_active_list,
 					typeof(*dev->p), deferred_probe);
 		dev = private->device;
@@ -127,12 +130,17 @@ static void deferred_probe_work_func(struct work_struct *work)
 		device_pm_move_last(dev);
 		device_pm_unlock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(dev, "Retrying from deferred list\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (initcall_debug && !initcalls_done)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			deferred_probe_debug(dev);
+}
 		else
 			bus_probe_device(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_lock(&deferred_probe_mutex);
 
 		put_device(dev);
@@ -143,6 +151,7 @@ static DECLARE_WORK(deferred_probe_work, deferred_probe_work_func);
 
 static void driver_deferred_probe_add(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&deferred_probe_mutex);
 	if (list_empty(&dev->p->deferred_probe)) {
 		dev_dbg(dev, "Added to deferred list\n");
@@ -155,6 +164,7 @@ void driver_deferred_probe_del(struct device *dev)
 {
 	mutex_lock(&deferred_probe_mutex);
 	if (!list_empty(&dev->p->deferred_probe)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(dev, "Removed from deferred list\n");
 		list_del_init(&dev->p->deferred_probe);
 	}
@@ -183,7 +193,9 @@ static bool driver_deferred_probe_enable = false;
 static void driver_deferred_probe_trigger(void)
 {
 	if (!driver_deferred_probe_enable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * A successful probe means that all the devices in the pending list
@@ -210,6 +222,7 @@ static void driver_deferred_probe_trigger(void)
  */
 void device_block_probing(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	defer_all_probes = true;
 	/* sync with probes to avoid races. */
 	wait_for_device_probe();
@@ -223,6 +236,7 @@ void device_block_probing(void)
  */
 void device_unblock_probing(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	defer_all_probes = false;
 	driver_deferred_probe_trigger();
 }
@@ -267,6 +281,7 @@ static void driver_bound(struct device *dev)
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("driver: '%s': %s: bound to device '%s'\n", dev->driver->name,
 		 __func__, dev_name(dev));
 
@@ -339,7 +354,9 @@ int device_bind_driver(struct device *dev)
 
 	ret = driver_sysfs_add(dev);
 	if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		driver_bound(dev);
+}
 	else if (dev->bus)
 		blocking_notifier_call_chain(&dev->bus->p->bus_notifier,
 					     BUS_NOTIFY_DRIVER_NOT_BOUND, dev);
@@ -354,6 +371,7 @@ static int really_probe(struct device *dev, struct device_driver *drv)
 {
 	int ret = -EPROBE_DEFER;
 	int local_trigger_count = atomic_read(&deferred_trigger_count);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bool test_remove = IS_ENABLED(CONFIG_DEBUG_TEST_DRIVER_REMOVE) &&
 			   !drv->suppress_bind_attrs;
 
@@ -370,9 +388,13 @@ static int really_probe(struct device *dev, struct device_driver *drv)
 
 	ret = device_links_check_suppliers(dev);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_inc(&probe_count);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("bus: '%s': %s: probing driver %s with device %s\n",
 		 drv->bus->name, __func__, drv->name, dev_name(dev));
 	WARN_ON(!list_empty(&dev->devres_head));
@@ -396,6 +418,7 @@ static int really_probe(struct device *dev, struct device_driver *drv)
 	}
 
 	if (dev->pm_domain && dev->pm_domain->activate) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = dev->pm_domain->activate(dev);
 		if (ret)
 			goto probe_failed;
@@ -419,32 +442,48 @@ static int really_probe(struct device *dev, struct device_driver *drv)
 			goto probe_failed;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_remove) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		test_remove = false;
 
 		if (dev->bus->remove)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->bus->remove(dev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (drv->remove)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			drv->remove(dev);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		devres_release_all(dev);
 		driver_sysfs_remove(dev);
 		dev->driver = NULL;
 		dev_set_drvdata(dev, NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->pm_domain && dev->pm_domain->dismiss)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->pm_domain->dismiss(dev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_runtime_reinit(dev);
 
 		goto re_probe;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pinctrl_init_done(dev);
 
 	if (dev->pm_domain && dev->pm_domain->sync)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->pm_domain->sync(dev);
+}
 
 	driver_bound(dev);
 	ret = 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("bus: '%s': %s: bound device %s to driver %s\n",
 		 drv->bus->name, __func__, dev_name(dev), drv->name);
 	goto done;
@@ -462,7 +501,9 @@ static int really_probe(struct device *dev, struct device_driver *drv)
 	dev->driver = NULL;
 	dev_set_drvdata(dev, NULL);
 	if (dev->pm_domain && dev->pm_domain->dismiss)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->pm_domain->dismiss(dev);
+}
 	pm_runtime_reinit(dev);
 
 	switch (ret) {
@@ -472,7 +513,9 @@ static int really_probe(struct device *dev, struct device_driver *drv)
 		driver_deferred_probe_add(dev);
 		/* Did a trigger occur while probing? Need to re-trigger if yes */
 		if (local_trigger_count != atomic_read(&deferred_trigger_count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			driver_deferred_probe_trigger();
+}
 		break;
 	case -ENODEV:
 	case -ENXIO:
@@ -504,6 +547,7 @@ static int really_probe(struct device *dev, struct device_driver *drv)
  */
 int driver_probe_done(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s: probe_count = %d\n", __func__,
 		 atomic_read(&probe_count));
 	if (atomic_read(&probe_count))
@@ -544,8 +588,11 @@ int driver_probe_device(struct device_driver *drv, struct device *dev)
 	int ret = 0;
 
 	if (!device_is_registered(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("bus: '%s': %s: matched device %s with driver %s\n",
 		 drv->bus->name, __func__, dev_name(dev), drv->name);
 
@@ -575,7 +622,9 @@ bool driver_allows_async_probing(struct device_driver *drv)
 
 	default:
 		if (module_requested_async_probing(drv->owner))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
+}
 
 		return false;
 	}
@@ -628,16 +677,20 @@ static int __device_attach_driver(struct device_driver *drv, void *_data)
 	 * multiple threads.
 	 */
 	if (dev->driver)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	ret = driver_match_device(drv, dev);
 	if (ret == 0) {
 		/* no match */
 		return 0;
 	} else if (ret == -EPROBE_DEFER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(dev, "Device match requests probe deferral\n");
 		driver_deferred_probe_add(dev);
 	} else if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(dev, "Bus failed to match device: %d", ret);
 		return ret;
 	} /* ret > 0 means positive match */
@@ -645,10 +698,14 @@ static int __device_attach_driver(struct device_driver *drv, void *_data)
 	async_allowed = driver_allows_async_probing(drv);
 
 	if (async_allowed)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		data->have_async = true;
+}
 
 	if (data->check_async && async_allowed != data->want_async)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return driver_probe_device(drv, dev);
 }
@@ -665,7 +722,9 @@ static void __device_attach_async_helper(void *_dev, async_cookie_t cookie)
 	device_lock(dev);
 
 	if (dev->parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_runtime_get_sync(dev->parent);
+}
 
 	bus_for_each_drv(dev->bus, NULL, &data, __device_attach_driver);
 	dev_dbg(dev, "async probe completed\n");
@@ -686,14 +745,20 @@ static int __device_attach(struct device *dev, bool allow_async)
 
 	device_lock(dev);
 	if (dev->driver) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (device_is_bound(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = 1;
 			goto out_unlock;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = device_bind_driver(dev);
 		if (ret == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = 1;
+}
 		else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->driver = NULL;
 			ret = 0;
 		}
@@ -777,22 +842,31 @@ static int __driver_attach(struct device *dev, void *data)
 		/* no match */
 		return 0;
 	} else if (ret == -EPROBE_DEFER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(dev, "Device match requests probe deferral\n");
 		driver_deferred_probe_add(dev);
 	} else if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(dev, "Bus failed to match device: %d", ret);
 		return ret;
 	} /* ret > 0 means positive match */
 
 	if (dev->parent)	/* Needed for USB */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_lock(dev->parent);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_lock(dev);
 	if (!dev->driver)
 		driver_probe_device(drv, dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_unlock(dev);
 	if (dev->parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_unlock(dev->parent);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -821,6 +895,7 @@ static void __device_release_driver(struct device *dev, struct device *parent)
 
 	drv = dev->driver;
 	if (drv) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (driver_allows_async_probing(drv))
 			async_synchronize_full();
 
@@ -885,6 +960,7 @@ void device_release_driver_internal(struct device *dev,
 				    struct device_driver *drv,
 				    struct device *parent)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (parent)
 		device_lock(parent);
 
@@ -929,6 +1005,7 @@ void driver_detach(struct device_driver *drv)
 	struct device *dev;
 
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&drv->p->klist_devices.k_lock);
 		if (list_empty(&drv->p->klist_devices.k_list)) {
 			spin_unlock(&drv->p->klist_devices.k_lock);
diff --git a/drivers/base/devres.c b/drivers/base/devres.c
index 71d5770..b646752 100644
--- a/drivers/base/devres.c
+++ b/drivers/base/devres.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/base/devres.c - device resource management
  *
@@ -43,6 +45,7 @@ module_param_named(log, log_devres, int, S_IRUGO | S_IWUSR);
 static void set_node_dbginfo(struct devres_node *node, const char *name,
 			     size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	node->name = name;
 	node->size = size;
 }
@@ -50,6 +53,7 @@ static void set_node_dbginfo(struct devres_node *node, const char *name,
 static void devres_log(struct device *dev, struct devres_node *node,
 		       const char *op)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(log_devres))
 		dev_err(dev, "DEVRES %3s %p %s (%lu bytes)\n",
 			op, node, node->name, (unsigned long)node->size);
@@ -76,9 +80,14 @@ static void group_close_release(struct device *dev, void *res)
 static struct devres_group * node_to_group(struct devres_node *node)
 {
 	if (node->release == &group_open_release)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return container_of(node, struct devres_group, node[0]);
+}
 	if (node->release == &group_close_release)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return container_of(node, struct devres_group, node[1]);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -90,8 +99,11 @@ static __always_inline struct devres * alloc_dr(dr_release_t release,
 
 	dr = kmalloc_node_track_caller(tot_size, gfp, nid);
 	if (unlikely(!dr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(dr, 0, offsetof(struct devres, data));
 
 	INIT_LIST_HEAD(&dr->node.entry);
@@ -101,6 +113,7 @@ static __always_inline struct devres * alloc_dr(dr_release_t release,
 
 static void add_dr(struct device *dev, struct devres_node *node)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	devres_log(dev, node, "ADD");
 	BUG_ON(!list_empty(&node->entry));
 	list_add_tail(&node->entry, &dev->devres_head);
@@ -114,7 +127,9 @@ void * __devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp, int nid
 
 	dr = alloc_dr(release, size, gfp | __GFP_ZERO, nid);
 	if (unlikely(!dr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	set_node_dbginfo(&dr->node, name, size);
 	return dr->data;
 }
@@ -171,7 +186,9 @@ void devres_for_each_res(struct device *dev, dr_release_t release,
 	unsigned long flags;
 
 	if (!fn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_irqsave(&dev->devres_lock, flags);
 	list_for_each_entry_safe_reverse(node, tmp,
@@ -197,9 +214,12 @@ EXPORT_SYMBOL_GPL(devres_for_each_res);
 void devres_free(void *res)
 {
 	if (res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct devres *dr = container_of(res, struct devres, data);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(!list_empty(&dr->node.entry));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(dr);
 	}
 }
@@ -216,6 +236,7 @@ EXPORT_SYMBOL_GPL(devres_free);
  */
 void devres_add(struct device *dev, void *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct devres *dr = container_of(res, struct devres, data);
 	unsigned long flags;
 
@@ -231,15 +252,18 @@ static struct devres *find_dr(struct device *dev, dr_release_t release,
 	struct devres_node *node;
 
 	list_for_each_entry_reverse(node, &dev->devres_head, entry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct devres *dr = container_of(node, struct devres, node);
 
 		if (node->release != release)
 			continue;
 		if (match && !match(dev, dr->data, match_data))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return dr;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -269,6 +293,7 @@ void * devres_find(struct device *dev, dr_release_t release,
 
 	if (dr)
 		return dr->data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL_GPL(devres_find);
@@ -301,6 +326,7 @@ void * devres_get(struct device *dev, void *new_res,
 		dr = new_dr;
 		new_res = NULL;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&dev->devres_lock, flags);
 	devres_free(new_res);
 
@@ -329,6 +355,7 @@ void * devres_remove(struct device *dev, dr_release_t release,
 	struct devres *dr;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dev->devres_lock, flags);
 	dr = find_dr(dev, release, match, match_data);
 	if (dr) {
@@ -368,7 +395,9 @@ int devres_destroy(struct device *dev, dr_release_t release,
 
 	res = devres_remove(dev, release, match, match_data);
 	if (unlikely(!res))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	devres_free(res);
 	return 0;
@@ -398,7 +427,9 @@ int devres_release(struct device *dev, dr_release_t release,
 
 	res = devres_remove(dev, release, match, match_data);
 	if (unlikely(!res))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	(*release)(dev, res);
 	devres_free(res);
@@ -421,6 +452,7 @@ static int remove_nodes(struct device *dev,
 		struct devres_node *node;
 		struct devres_group *grp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		node = list_entry(cur, struct devres_node, entry);
 		cur = cur->next;
 
@@ -439,7 +471,9 @@ static int remove_nodes(struct device *dev,
 	}
 
 	if (!nr_groups)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return cnt;
+}
 
 	/* Second pass - Scan groups and color them.  A group gets
 	 * color value of two iff the group is wholly contained in
@@ -448,21 +482,29 @@ static int remove_nodes(struct device *dev,
 	 * opening marker is enough for an open group.
 	 */
 	cur = first;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (cur != end) {
 		struct devres_node *node;
 		struct devres_group *grp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		node = list_entry(cur, struct devres_node, entry);
 		cur = cur->next;
 
 		grp = node_to_group(node);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(!grp || list_empty(&grp->node[0].entry));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		grp->color++;
 		if (list_empty(&grp->node[1].entry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			grp->color++;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(grp->color <= 0 || grp->color > 2);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (grp->color == 2) {
 			/* No need to update cur or end.  The removed
 			 * nodes are always before both.
@@ -472,6 +514,7 @@ static int remove_nodes(struct device *dev,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cnt;
 }
 
@@ -491,6 +534,7 @@ static int release_nodes(struct device *dev, struct list_head *first,
 	 * handled as devres in the following loop.  This is safe.
 	 */
 	list_for_each_entry_safe_reverse(dr, tmp, &todo, node.entry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		devres_log(dev, &dr->node, "REL");
 		dr->node.release(dev, dr->data);
 		kfree(dr);
@@ -512,7 +556,9 @@ int devres_release_all(struct device *dev)
 
 	/* Looks like an uninitialized device structure */
 	if (WARN_ON(dev->devres_head.next == NULL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 	spin_lock_irqsave(&dev->devres_lock, flags);
 	return release_nodes(dev, dev->devres_head.next, &dev->devres_head,
 			     flags);
@@ -538,7 +584,9 @@ void * devres_open_group(struct device *dev, void *id, gfp_t gfp)
 
 	grp = kmalloc(sizeof(*grp), gfp);
 	if (unlikely(!grp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	grp->node[0].release = &group_open_release;
 	grp->node[1].release = &group_close_release;
@@ -548,7 +596,9 @@ void * devres_open_group(struct device *dev, void *id, gfp_t gfp)
 	set_node_dbginfo(&grp->node[1], "grp>", 0);
 	grp->id = grp;
 	if (id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		grp->id = id;
+}
 
 	spin_lock_irqsave(&dev->devres_lock, flags);
 	add_dr(dev, &grp->node[0]);
@@ -568,15 +618,22 @@ static struct devres_group * find_group(struct device *dev, void *id)
 		if (node->release != &group_open_release)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		grp = container_of(node, struct devres_group, node[0]);
 
 		if (id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (grp->id == id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return grp;
+}
 		} else if (list_empty(&grp->node[1].entry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return grp;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -593,6 +650,7 @@ void devres_close_group(struct device *dev, void *id)
 	struct devres_group *grp;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dev->devres_lock, flags);
 
 	grp = find_group(dev, id);
@@ -627,8 +685,11 @@ void devres_remove_group(struct device *dev, void *id)
 		list_del_init(&grp->node[1].entry);
 		devres_log(dev, &grp->node[0], "REM");
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(1);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&dev->devres_lock, flags);
 
 	kfree(grp);
@@ -653,6 +714,7 @@ int devres_release_group(struct device *dev, void *id)
 	unsigned long flags;
 	int cnt = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dev->devres_lock, flags);
 
 	grp = find_group(dev, id);
@@ -688,6 +750,7 @@ static int devm_action_match(struct device *dev, void *res, void *p)
 	struct action_devres *devres = res;
 	struct action_devres *target = p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return devres->action == target->action &&
 	       devres->data == target->data;
 }
@@ -715,7 +778,9 @@ int devm_add_action(struct device *dev, void (*action)(void *), void *data)
 	devres = devres_alloc(devm_action_release,
 			      sizeof(struct action_devres), GFP_KERNEL);
 	if (!devres)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	devres->data = data;
 	devres->action = action;
@@ -741,6 +806,7 @@ void devm_remove_action(struct device *dev, void (*action)(void *), void *data)
 		.action = action,
 	};
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(devres_destroy(dev, devm_action_release, devm_action_match,
 			       &devres));
 
@@ -757,6 +823,7 @@ static void devm_kmalloc_release(struct device *dev, void *res)
 
 static int devm_kmalloc_match(struct device *dev, void *res, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return res == data;
 }
 
@@ -780,7 +847,9 @@ void * devm_kmalloc(struct device *dev, size_t size, gfp_t gfp)
 	/* use raw alloc_dr for kmalloc caller tracing */
 	dr = alloc_dr(devm_kmalloc_release, size, gfp, dev_to_node(dev));
 	if (unlikely(!dr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/*
 	 * This is named devm_kzalloc_release for historical reasons
@@ -808,7 +877,9 @@ char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp)
 	char *buf;
 
 	if (!s)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	size = strlen(s) + 1;
 	buf = devm_kmalloc(dev, size, gfp);
@@ -842,7 +913,9 @@ char *devm_kvasprintf(struct device *dev, gfp_t gfp, const char *fmt,
 
 	p = devm_kmalloc(dev, len+1, gfp);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	vsnprintf(p, len+1, fmt, ap);
 
@@ -886,6 +959,7 @@ void devm_kfree(struct device *dev, void *p)
 	int rc;
 
 	rc = devres_destroy(dev, devm_kmalloc_release, devm_kmalloc_match, p);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(rc);
 }
 EXPORT_SYMBOL_GPL(devm_kfree);
@@ -905,7 +979,9 @@ void *devm_kmemdup(struct device *dev, const void *src, size_t len, gfp_t gfp)
 
 	p = devm_kmalloc(dev, len, gfp);
 	if (p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(p, src, len);
+}
 
 	return p;
 }
@@ -953,7 +1029,9 @@ unsigned long devm_get_free_pages(struct device *dev,
 	addr = __get_free_pages(gfp_mask, order);
 
 	if (unlikely(!addr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	devres = devres_alloc(devm_pages_release,
 			      sizeof(struct pages_devres), GFP_KERNEL);
@@ -982,6 +1060,7 @@ void devm_free_pages(struct device *dev, unsigned long addr)
 {
 	struct pages_devres devres = { .addr = addr };
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(devres_release(dev, devm_pages_release, devm_pages_match,
 			       &devres));
 }
@@ -997,6 +1076,7 @@ static void devm_percpu_release(struct device *dev, void *pdata)
 
 static int devm_percpu_match(struct device *dev, void *data, void *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct devres *devr = container_of(data, struct devres, data);
 
 	return *(void **)devr->data == p;
@@ -1022,7 +1102,9 @@ void __percpu *__devm_alloc_percpu(struct device *dev, size_t size,
 
 	pcpu = __alloc_percpu(size, align);
 	if (!pcpu)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	p = devres_alloc(devm_percpu_release, sizeof(void *), GFP_KERNEL);
 	if (!p) {
@@ -1047,6 +1129,7 @@ EXPORT_SYMBOL_GPL(__devm_alloc_percpu);
  */
 void devm_free_percpu(struct device *dev, void __percpu *pdata)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(devres_destroy(dev, devm_percpu_release, devm_percpu_match,
 			       (void *)pdata));
 }
diff --git a/drivers/base/devtmpfs.c b/drivers/base/devtmpfs.c
index 50025d7..a11e680 100644
--- a/drivers/base/devtmpfs.c
+++ b/drivers/base/devtmpfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * devtmpfs - kernel-maintained tmpfs-based /dev
@@ -74,6 +76,7 @@ static struct file_system_type dev_fs_type = {
 #ifdef CONFIG_BLOCK
 static inline int is_blockdev(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev->class == &block_class;
 }
 #else
@@ -351,7 +354,9 @@ int devtmpfs_mount(const char *mntdir)
 	int err;
 
 	if (!mount_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!thread)
 		return 0;
@@ -388,6 +393,7 @@ static int devtmpfsd(void *p)
 	sys_chdir("/.."); /* will traverse into overmounted root */
 	sys_chroot(".");
 	complete(&setup_done);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		spin_lock(&req_lock);
 		while (requests) {
@@ -401,12 +407,15 @@ static int devtmpfsd(void *p)
 				complete(&req->done);
 				req = next;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock(&req_lock);
 		}
 		__set_current_state(TASK_INTERRUPTIBLE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&req_lock);
 		schedule();
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 out:
 	complete(&setup_done);
@@ -421,6 +430,7 @@ int __init devtmpfs_init(void)
 {
 	int err = register_filesystem(&dev_fs_type);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "devtmpfs: unable to register devtmpfs "
 		       "type %i\n", err);
 		return err;
@@ -430,11 +440,13 @@ int __init devtmpfs_init(void)
 	if (!IS_ERR(thread)) {
 		wait_for_completion(&setup_done);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(thread);
 		thread = NULL;
 	}
 
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "devtmpfs: unable to create devtmpfs %i\n", err);
 		unregister_filesystem(&dev_fs_type);
 		return err;
diff --git a/drivers/base/dma-mapping.c b/drivers/base/dma-mapping.c
index e584edd..d8f0dd6 100644
--- a/drivers/base/dma-mapping.c
+++ b/drivers/base/dma-mapping.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/base/dma-mapping.c - arch-independent dma-mapping routines
  *
@@ -38,6 +40,7 @@ static int dmam_match(struct device *dev, void *res, void *match_data)
 	struct dma_devres *this = res, *match = match_data;
 
 	if (this->vaddr == match->vaddr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(this->size != match->size ||
 			this->dma_handle != match->dma_handle);
 		return 1;
@@ -66,10 +69,13 @@ void *dmam_alloc_coherent(struct device *dev, size_t size,
 
 	dr = devres_alloc(dmam_release, sizeof(*dr), gfp);
 	if (!dr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	vaddr = dma_alloc_coherent(dev, size, dma_handle, gfp);
 	if (!vaddr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		devres_free(dr);
 		return NULL;
 	}
@@ -99,6 +105,7 @@ void dmam_free_coherent(struct device *dev, size_t size, void *vaddr,
 	struct dma_devres match_data = { size, vaddr, dma_handle };
 
 	dma_free_coherent(dev, size, vaddr, dma_handle);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(devres_destroy(dev, dmam_release, dmam_match, &match_data));
 }
 EXPORT_SYMBOL(dmam_free_coherent);
@@ -125,7 +132,9 @@ void *dmam_alloc_attrs(struct device *dev, size_t size, dma_addr_t *dma_handle,
 
 	dr = devres_alloc(dmam_release, sizeof(*dr), gfp);
 	if (!dr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	vaddr = dma_alloc_attrs(dev, size, dma_handle, gfp, attrs);
 	if (!vaddr) {
@@ -205,6 +214,7 @@ EXPORT_SYMBOL(dmam_release_declared_memory);
 int dma_common_get_sgtable(struct device *dev, struct sg_table *sgt,
 		 void *cpu_addr, dma_addr_t handle, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct page *page = virt_to_page(cpu_addr);
 	int ret;
 
@@ -230,6 +240,7 @@ int dma_common_mmap(struct device *dev, struct vm_area_struct *vma,
 	unsigned long pfn = page_to_pfn(virt_to_page(cpu_addr));
 	unsigned long off = vma->vm_pgoff;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
 
 	if (dma_mmap_from_dev_coherent(dev, vma, cpu_addr, size, &ret))
@@ -256,7 +267,9 @@ static struct vm_struct *__dma_common_pages_remap(struct page **pages,
 
 	area = get_vm_area_caller(size, vm_flags, caller);
 	if (!area)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (map_vm_area(area, prot, pages)) {
 		vunmap(area->addr);
@@ -278,7 +291,9 @@ void *dma_common_pages_remap(struct page **pages, size_t size,
 
 	area = __dma_common_pages_remap(pages, size, vm_flags, prot, caller);
 	if (!area)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	area->pages = pages;
 
@@ -298,6 +313,7 @@ void *dma_common_contiguous_remap(struct page *page, size_t size,
 	struct page **pages;
 	struct vm_struct *area;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pages = kmalloc(sizeof(struct page *) << get_order(size), GFP_KERNEL);
 	if (!pages)
 		return NULL;
@@ -319,6 +335,7 @@ void *dma_common_contiguous_remap(struct page *page, size_t size,
  */
 void dma_common_free_remap(void *cpu_addr, size_t size, unsigned long vm_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct vm_struct *area = find_vm_area(cpu_addr);
 
 	if (!area || (area->flags & vm_flags) != vm_flags) {
@@ -345,12 +362,14 @@ int dma_configure(struct device *dev)
 	if (dev_is_pci(dev)) {
 		bridge = pci_get_host_bridge_device(to_pci_dev(dev));
 		dma_dev = bridge;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (IS_ENABLED(CONFIG_OF) && dma_dev->parent &&
 		    dma_dev->parent->of_node)
 			dma_dev = dma_dev->parent;
 	}
 
 	if (dma_dev->of_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = of_dma_configure(dev, dma_dev->of_node);
 	} else if (has_acpi_companion(dma_dev)) {
 		attr = acpi_get_dma_attr(to_acpi_device_node(dma_dev->fwnode));
@@ -366,6 +385,7 @@ int dma_configure(struct device *dev)
 
 void dma_deconfigure(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	of_dma_deconfigure(dev);
 	acpi_dma_deconfigure(dev);
 }
diff --git a/drivers/base/driver.c b/drivers/base/driver.c
index 4eabfe2..3cfacc0 100644
--- a/drivers/base/driver.c
+++ b/drivers/base/driver.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * driver.c - centralized device driver management
  *
@@ -20,6 +22,7 @@
 
 static struct device *next_device(struct klist_iter *i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct klist_node *n = klist_next(i);
 	struct device *dev = NULL;
 	struct device_private *dev_prv;
@@ -48,7 +51,9 @@ int driver_for_each_device(struct device_driver *drv, struct device *start,
 	int error = 0;
 
 	if (!drv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	klist_iter_init_node(&drv->p->klist_devices, &i,
 			     start ? &start->p->knode_driver : NULL);
@@ -81,6 +86,7 @@ struct device *driver_find_device(struct device_driver *drv,
 	struct klist_iter i;
 	struct device *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!drv || !drv->p)
 		return NULL;
 
@@ -120,6 +126,7 @@ EXPORT_SYMBOL_GPL(driver_create_file);
 void driver_remove_file(struct device_driver *drv,
 			const struct driver_attribute *attr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (drv)
 		sysfs_remove_file(&drv->p->kobj, &attr->attr);
 }
@@ -134,6 +141,7 @@ int driver_add_groups(struct device_driver *drv,
 void driver_remove_groups(struct device_driver *drv,
 			  const struct attribute_group **groups)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_remove_groups(&drv->p->kobj, groups);
 }
 
@@ -160,6 +168,7 @@ int driver_register(struct device_driver *drv)
 
 	other = driver_find(drv->name, drv->bus);
 	if (other) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "Error: Driver '%s' is already registered, "
 			"aborting...\n", drv->name);
 		return -EBUSY;
@@ -167,9 +176,12 @@ int driver_register(struct device_driver *drv)
 
 	ret = bus_add_driver(drv);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	ret = driver_add_groups(drv, drv->groups);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bus_remove_driver(drv);
 		return ret;
 	}
@@ -187,6 +199,7 @@ EXPORT_SYMBOL_GPL(driver_register);
  */
 void driver_unregister(struct device_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!drv || !drv->p) {
 		WARN(1, "Unexpected driver unregister!\n");
 		return;
@@ -216,9 +229,11 @@ struct device_driver *driver_find(const char *name, struct bus_type *bus)
 	if (k) {
 		/* Drop reference added by kset_find_obj() */
 		kobject_put(k);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		priv = to_driver(k);
 		return priv->driver;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL_GPL(driver_find);
diff --git a/drivers/base/firmware.c b/drivers/base/firmware.c
index 1138155..b83b611 100644
--- a/drivers/base/firmware.c
+++ b/drivers/base/firmware.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * firmware.c - firmware subsystem hoohaw.
  *
@@ -22,6 +24,8 @@ int __init firmware_init(void)
 {
 	firmware_kobj = kobject_create_and_add("firmware", NULL);
 	if (!firmware_kobj)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
diff --git a/drivers/base/firmware_class.c b/drivers/base/firmware_class.c
index 4b57cf5..98928a1 100644
--- a/drivers/base/firmware_class.c
+++ b/drivers/base/firmware_class.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * firmware_class.c - Multi purpose firmware loading support
  *
@@ -53,6 +55,7 @@ static bool fw_get_builtin_firmware(struct firmware *fw, const char *name,
 {
 	struct builtin_fw *b_fw;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (b_fw = __start_builtin_fw; b_fw != __end_builtin_fw; b_fw++) {
 		if (strcmp(name, b_fw->name) == 0) {
 			fw->size = b_fw->size;
@@ -71,6 +74,7 @@ static bool fw_is_builtin_firmware(const struct firmware *fw)
 {
 	struct builtin_fw *b_fw;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (b_fw = __start_builtin_fw; b_fw != __end_builtin_fw; b_fw++)
 		if (fw->data == b_fw->data)
 			return true;
@@ -104,6 +108,7 @@ static int loading_timeout = 60;	/* In seconds */
 
 static inline long firmware_loading_timeout(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return loading_timeout > 0 ? loading_timeout * HZ : MAX_JIFFY_OFFSET;
 }
 
@@ -119,12 +124,14 @@ struct fw_state {
 
 static void fw_state_init(struct fw_state *fw_st)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	init_completion(&fw_st->completion);
 	fw_st->status = FW_STATUS_UNKNOWN;
 }
 
 static inline bool __fw_state_is_done(enum fw_status status)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return status == FW_STATUS_DONE || status == FW_STATUS_ABORTED;
 }
 
@@ -133,6 +140,7 @@ static int __fw_state_wait_common(struct fw_state *fw_st, long timeout)
 	long ret;
 
 	ret = wait_for_completion_killable_timeout(&fw_st->completion, timeout);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret != 0 && fw_st->status == FW_STATUS_ABORTED)
 		return -ENOENT;
 	if (!ret)
@@ -146,6 +154,7 @@ static void __fw_state_set(struct fw_state *fw_st,
 {
 	WRITE_ONCE(fw_st->status, status);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (status == FW_STATUS_DONE || status == FW_STATUS_ABORTED)
 		complete_all(&fw_st->completion);
 }
@@ -161,6 +170,7 @@ static void __fw_state_set(struct fw_state *fw_st,
 
 static int __fw_state_check(struct fw_state *fw_st, enum fw_status status)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fw_st->status == status;
 }
 
@@ -268,7 +278,9 @@ static struct firmware_buf *__allocate_fw_buf(const char *fw_name,
 
 	buf = kzalloc(sizeof(*buf), GFP_ATOMIC);
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	buf->fw_id = kstrdup_const(fw_name, GFP_ATOMIC);
 	if (!buf->fw_id) {
@@ -295,6 +307,7 @@ static struct firmware_buf *__fw_lookup_buf(const char *fw_name)
 	struct firmware_buf *tmp;
 	struct firmware_cache *fwc = &fw_cache;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(tmp, &fwc->head, list)
 		if (!strcmp(tmp->fw_id, fw_name))
 			return tmp;
@@ -312,6 +325,7 @@ static int fw_lookup_and_allocate_buf(const char *fw_name,
 	spin_lock(&fwc->lock);
 	tmp = __fw_lookup_buf(fw_name);
 	if (tmp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kref_get(&tmp->ref);
 		spin_unlock(&fwc->lock);
 		*buf = tmp;
@@ -331,6 +345,7 @@ static int fw_lookup_and_allocate_buf(const char *fw_name,
 static void __fw_free_buf(struct kref *ref)
 	__releases(&fwc->lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct firmware_buf *buf = to_fwbuf(ref);
 	struct firmware_cache *fwc = buf->fwc;
 
@@ -361,8 +376,10 @@ static void fw_free_buf(struct firmware_buf *buf)
 	struct firmware_cache *fwc = buf->fwc;
 	spin_lock(&fwc->lock);
 	if (!kref_put(&buf->ref, __fw_free_buf))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&fwc->lock);
 }
+}
 
 /* direct firmware loading support */
 static char fw_path_para[256];
@@ -394,6 +411,7 @@ fw_get_filesystem_firmware(struct device *device, struct firmware_buf *buf)
 
 	/* Already populated data member means we're loading into a buffer */
 	if (buf->data) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		id = READING_FIRMWARE_PREALLOC_BUFFER;
 		msize = buf->allocated_size;
 	}
@@ -450,6 +468,7 @@ static void firmware_free_data(const struct firmware *fw)
 /* store the pages buffer info firmware from buf */
 static void fw_set_page_data(struct firmware_buf *buf, struct firmware *fw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fw->priv = buf;
 #ifdef CONFIG_FW_LOADER_USER_HELPER
 	fw->pages = buf->pages;
@@ -468,8 +487,10 @@ static void fw_name_devm_release(struct device *dev, void *res)
 	struct fw_name_devm *fwn = res;
 
 	if (fwn->magic == (unsigned long)&fw_cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("%s: fw_name-%s devm-%p released\n",
 				__func__, fwn->name, res);
+}
 	kfree_const(fwn->name);
 }
 
@@ -478,6 +499,7 @@ static int fw_devm_match(struct device *dev, void *res,
 {
 	struct fw_name_devm *fwn = res;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (fwn->magic == (unsigned long)&fw_cache) &&
 		!strcmp(fwn->name, match_data);
 }
@@ -499,7 +521,9 @@ static int fw_add_devm_name(struct device *dev, const char *name)
 
 	fwn = fw_find_devm_name(dev, name);
 	if (fwn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	fwn = devres_alloc(fw_name_devm_release, sizeof(struct fw_name_devm),
 			   GFP_KERNEL);
@@ -529,6 +553,7 @@ static int assign_firmware_buf(struct firmware *fw, struct device *device,
 	struct firmware_buf *buf = fw->priv;
 
 	mutex_lock(&fw_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!buf->size || fw_state_is_aborted(&buf->fw_st)) {
 		mutex_unlock(&fw_lock);
 		return -ENOENT;
@@ -1119,6 +1144,7 @@ static inline int
 fw_load_from_user_helper(struct firmware *firmware, const char *name,
 			 struct device *device, unsigned int opt_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOENT;
 }
 
@@ -1140,6 +1166,7 @@ _request_firmware_prepare(struct firmware **firmware_p, const char *name,
 
 	*firmware_p = firmware = kzalloc(sizeof(*firmware), GFP_KERNEL);
 	if (!firmware) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(device, "%s: kmalloc(struct firmware) failed\n",
 			__func__);
 		return -ENOMEM;
@@ -1203,7 +1230,9 @@ _request_firmware(const struct firmware **firmware_p, const char *name,
 	int ret;
 
 	if (!firmware_p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!name || name[0] == '\0') {
 		ret = -EINVAL;
@@ -1334,6 +1363,7 @@ EXPORT_SYMBOL(request_firmware_into_buf);
  **/
 void release_firmware(const struct firmware *fw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (fw) {
 		if (!fw_is_builtin_firmware(fw))
 			firmware_free_data(fw);
@@ -1358,6 +1388,7 @@ static void request_firmware_work_func(struct work_struct *work)
 	struct firmware_work *fw_work;
 	const struct firmware *fw;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fw_work = container_of(work, struct firmware_work, work);
 
 	_request_firmware(&fw, fw_work->name, fw_work->device, NULL, 0,
@@ -1403,7 +1434,9 @@ request_firmware_nowait(
 
 	fw_work = kzalloc(sizeof(struct firmware_work), gfp);
 	if (!fw_work)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	fw_work->module = module;
 	fw_work->name = kstrdup_const(name, gfp);
@@ -1452,6 +1485,7 @@ static int cache_firmware(const char *fw_name)
 	int ret;
 	const struct firmware *fw;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s: %s\n", __func__, fw_name);
 
 	ret = request_firmware(&fw, fw_name, NULL);
@@ -1491,6 +1525,7 @@ static int uncache_firmware(const char *fw_name)
 	struct firmware_buf *buf;
 	struct firmware fw;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s: %s\n", __func__, fw_name);
 
 	if (fw_get_builtin_firmware(&fw, fw_name, NULL, 0))
@@ -1513,6 +1548,7 @@ static struct fw_cache_entry *alloc_fw_cache_entry(const char *name)
 	if (!fce)
 		goto exit;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fce->name = kstrdup_const(name, GFP_ATOMIC);
 	if (!fce->name) {
 		kfree(fce);
@@ -1528,6 +1564,7 @@ static int __fw_entry_found(const char *name)
 	struct firmware_cache *fwc = &fw_cache;
 	struct fw_cache_entry *fce;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(fce, &fwc->fw_names, list) {
 		if (!strcmp(fce->name, name))
 			return 1;
@@ -1545,6 +1582,7 @@ static int fw_cache_piggyback_on_request(const char *name)
 	if (__fw_entry_found(name))
 		goto found;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fce = alloc_fw_cache_entry(name);
 	if (fce) {
 		ret = 1;
@@ -1558,6 +1596,7 @@ static int fw_cache_piggyback_on_request(const char *name)
 
 static void free_fw_cache_entry(struct fw_cache_entry *fce)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree_const(fce->name);
 	kfree(fce);
 }
@@ -1571,6 +1610,7 @@ static void __async_dev_cache_fw_image(void *fw_entry,
 
 	ret = cache_firmware(fce->name);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&fwc->name_lock);
 		list_del(&fce->list);
 		spin_unlock(&fwc->name_lock);
@@ -1590,8 +1630,10 @@ static void dev_create_fw_entry(struct device *dev, void *res,
 
 	fce = alloc_fw_cache_entry(fw_name);
 	if (fce)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_add(&fce->list, head);
 }
+}
 
 static int devm_name_match(struct device *dev, void *res,
 			   void *match_data)
@@ -1611,6 +1653,7 @@ static void dev_cache_fw_image(struct device *dev, void *data)
 			    devm_name_match, &fw_cache,
 			    dev_create_fw_entry, &todo);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(fce, fce_next, &todo, list) {
 		list_del(&fce->list);
 
@@ -1637,6 +1680,7 @@ static void __device_uncache_fw_images(void)
 	struct fw_cache_entry *fce;
 
 	spin_lock(&fwc->name_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!list_empty(&fwc->fw_names)) {
 		fce = list_entry(fwc->fw_names.next,
 				struct fw_cache_entry, list);
@@ -1667,6 +1711,7 @@ static void device_cache_fw_images(void)
 	int old_timeout;
 	DEFINE_WAIT(wait);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s\n", __func__);
 
 	/* cancel uncache work */
@@ -1702,12 +1747,14 @@ static void device_cache_fw_images(void)
  */
 static void device_uncache_fw_images(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s\n", __func__);
 	__device_uncache_fw_images();
 }
 
 static void device_uncache_fw_images_work(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_uncache_fw_images();
 }
 
@@ -1727,6 +1774,7 @@ static void device_uncache_fw_images_delay(unsigned long delay)
 static int fw_pm_notify(struct notifier_block *notify_block,
 			unsigned long mode, void *unused)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (mode) {
 	case PM_HIBERNATION_PREPARE:
 	case PM_SUSPEND_PREPARE:
@@ -1760,6 +1808,7 @@ static int fw_pm_notify(struct notifier_block *notify_block,
 /* stop caching firmware once syscore_suspend is reached */
 static int fw_suspend(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fw_cache.state = FW_LOADER_NO_CACHE;
 	return 0;
 }
@@ -1777,11 +1826,13 @@ static int fw_cache_piggyback_on_request(const char *name)
 static void __init fw_cache_init(void)
 {
 	spin_lock_init(&fw_cache.lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_LIST_HEAD(&fw_cache.head);
 	fw_cache.state = FW_LOADER_NO_CACHE;
 
 #ifdef CONFIG_PM_SLEEP
 	spin_lock_init(&fw_cache.name_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_LIST_HEAD(&fw_cache.fw_names);
 
 	INIT_DELAYED_WORK(&fw_cache.work,
diff --git a/drivers/base/hypervisor.c b/drivers/base/hypervisor.c
index 4f8b741..381b3e7 100644
--- a/drivers/base/hypervisor.c
+++ b/drivers/base/hypervisor.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * hypervisor.c - /sys/hypervisor subsystem.
  *
diff --git a/drivers/base/init.c b/drivers/base/init.c
index 48c0e22..c6e8d3f 100644
--- a/drivers/base/init.c
+++ b/drivers/base/init.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2002-3 Patrick Mochel
  * Copyright (c) 2002-3 Open Source Development Labs
diff --git a/drivers/base/map.c b/drivers/base/map.c
index c1d3823..6e4c5ed 100644
--- a/drivers/base/map.c
+++ b/drivers/base/map.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/drivers/base/map.c
  *
@@ -39,11 +41,15 @@ int kobj_map(struct kobj_map *domain, dev_t dev, unsigned long range,
 	struct probe *p;
 
 	if (n > 255)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		n = 255;
+}
 
 	p = kmalloc_array(n, sizeof(struct probe), GFP_KERNEL);
 	if (p == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	for (i = 0; i < n; i++, p++) {
 		p->owner = module;
@@ -73,7 +79,9 @@ void kobj_unmap(struct kobj_map *domain, dev_t dev, unsigned long range)
 	struct probe *found = NULL;
 
 	if (n > 255)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		n = 255;
+}
 
 	mutex_lock(domain->lock);
 	for (i = 0; i < n; i++, index++) {
@@ -117,6 +125,7 @@ struct kobject *kobj_lookup(struct kobj_map *domain, dev_t dev, int *index)
 		best = p->range - 1;
 		*index = dev - p->dev;
 		if (p->lock && p->lock(dev, data) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			module_put(owner);
 			continue;
 		}
@@ -125,20 +134,25 @@ struct kobject *kobj_lookup(struct kobj_map *domain, dev_t dev, int *index)
 		/* Currently ->owner protects _only_ ->probe() itself. */
 		module_put(owner);
 		if (kobj)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return kobj;
+}
 		goto retry;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(domain->lock);
 	return NULL;
 }
 
 struct kobj_map *kobj_map_init(kobj_probe_t *base_probe, struct mutex *lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kobj_map *p = kmalloc(sizeof(struct kobj_map), GFP_KERNEL);
 	struct probe *base = kzalloc(sizeof(*base), GFP_KERNEL);
 	int i;
 
 	if ((p == NULL) || (base == NULL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(p);
 		kfree(base);
 		return NULL;
diff --git a/drivers/base/memory.c b/drivers/base/memory.c
index 1d60b58..75a8745 100644
--- a/drivers/base/memory.c
+++ b/drivers/base/memory.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * Memory subsystem support
diff --git a/drivers/base/module.c b/drivers/base/module.c
index 2a21578..0215ca9 100644
--- a/drivers/base/module.c
+++ b/drivers/base/module.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * module.c - module sysfs fun for drivers
  *
@@ -17,7 +19,9 @@ static char *make_driver_name(struct device_driver *drv)
 
 	driver_name = kasprintf(GFP_KERNEL, "%s:%s", drv->bus->name, drv->name);
 	if (!driver_name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	return driver_name;
 }
@@ -39,16 +43,21 @@ void module_add_driver(struct module *mod, struct device_driver *drv)
 	struct module_kobject *mk = NULL;
 
 	if (!drv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (mod)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mk = &mod->mkobj;
+}
 	else if (drv->mod_name) {
 		struct kobject *mkobj;
 
 		/* Lookup built-in module entry in /sys/modules */
 		mkobj = kset_find_obj(module_kset, drv->mod_name);
 		if (mkobj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mk = container_of(mkobj, struct module_kobject, kobj);
 			/* remember our module structure */
 			drv->p->mkobj = mk;
@@ -58,7 +67,9 @@ void module_add_driver(struct module *mod, struct device_driver *drv)
 	}
 
 	if (!mk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Don't check return codes; these calls are idempotent */
 	no_warn = sysfs_create_link(&drv->p->kobj, &mk->kobj, "module");
@@ -77,7 +88,9 @@ void module_remove_driver(struct device_driver *drv)
 	char *driver_name;
 
 	if (!drv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	sysfs_remove_link(&drv->p->kobj, "module");
 
diff --git a/drivers/base/platform.c b/drivers/base/platform.c
index 9045c5f..d0c2a4e 100644
--- a/drivers/base/platform.c
+++ b/drivers/base/platform.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * platform.c - platform 'pseudo' bus for legacy devices
  *
@@ -69,6 +71,7 @@ struct resource *platform_get_resource(struct platform_device *dev,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < dev->num_resources; i++) {
 		struct resource *r = &dev->resource[i];
 
@@ -93,6 +96,7 @@ int platform_get_irq(struct platform_device *dev, unsigned int num)
 	return dev->archdata.irqs[num];
 #else
 	struct resource *r;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ENABLED(CONFIG_OF_IRQ) && dev->dev.of_node) {
 		int ret;
 
@@ -142,6 +146,7 @@ int platform_irq_count(struct platform_device *dev)
 {
 	int ret, nr = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((ret = platform_get_irq(dev, nr)) >= 0)
 		nr++;
 
@@ -164,6 +169,7 @@ struct resource *platform_get_resource_byname(struct platform_device *dev,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < dev->num_resources; i++) {
 		struct resource *r = &dev->resource[i];
 
@@ -186,6 +192,7 @@ int platform_get_irq_byname(struct platform_device *dev, const char *name)
 {
 	struct resource *r;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ENABLED(CONFIG_OF_IRQ) && dev->dev.of_node) {
 		int ret;
 
@@ -208,6 +215,7 @@ int platform_add_devices(struct platform_device **devs, int num)
 {
 	int i, ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < num; i++) {
 		ret = platform_device_register(devs[i]);
 		if (ret) {
@@ -235,6 +243,7 @@ struct platform_object {
  */
 void platform_device_put(struct platform_device *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pdev)
 		put_device(&pdev->dev);
 }
@@ -242,6 +251,7 @@ EXPORT_SYMBOL_GPL(platform_device_put);
 
 static void platform_device_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct platform_object *pa = container_of(dev, struct platform_object,
 						  pdev.dev);
 
@@ -297,7 +307,9 @@ int platform_device_add_resources(struct platform_device *pdev,
 	if (res) {
 		r = kmemdup(res, sizeof(struct resource) * num, GFP_KERNEL);
 		if (!r)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	}
 
 	kfree(pdev->resource);
@@ -323,9 +335,12 @@ int platform_device_add_data(struct platform_device *pdev, const void *data,
 	void *d = NULL;
 
 	if (data) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		d = kmemdup(data, size, GFP_KERNEL);
 		if (!d)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	}
 
 	kfree(pdev->dev.platform_data);
@@ -346,6 +361,7 @@ EXPORT_SYMBOL_GPL(platform_device_add_data);
 int platform_device_add_properties(struct platform_device *pdev,
 				   const struct property_entry *properties)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return device_add_properties(&pdev->dev, properties);
 }
 EXPORT_SYMBOL_GPL(platform_device_add_properties);
@@ -362,7 +378,9 @@ int platform_device_add(struct platform_device *pdev)
 	int i, ret;
 
 	if (!pdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!pdev->dev.parent)
 		pdev->dev.parent = &platform_bus;
@@ -385,6 +403,7 @@ int platform_device_add(struct platform_device *pdev)
 		ret = ida_simple_get(&platform_devid_ida, 0, 0, GFP_KERNEL);
 		if (ret < 0)
 			goto err_out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pdev->id = ret;
 		pdev->id_auto = true;
 		dev_set_name(&pdev->dev, "%s.%d.auto", pdev->name, pdev->id);
@@ -400,35 +419,48 @@ int platform_device_add(struct platform_device *pdev)
 		p = r->parent;
 		if (!p) {
 			if (resource_type(r) == IORESOURCE_MEM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				p = &iomem_resource;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			else if (resource_type(r) == IORESOURCE_IO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				p = &ioport_resource;
+}
 		}
 
 		if (p && insert_resource(p, r)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(&pdev->dev, "failed to claim resource %d: %pR\n", i, r);
 			ret = -EBUSY;
 			goto failed;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("Registering platform device '%s'. Parent at %s\n",
 		 dev_name(&pdev->dev), dev_name(pdev->dev.parent));
 
 	ret = device_add(&pdev->dev);
 	if (ret == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
  failed:
 	if (pdev->id_auto) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ida_simple_remove(&platform_devid_ida, pdev->id);
 		pdev->id = PLATFORM_DEVID_AUTO;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (--i >= 0) {
 		struct resource *r = &pdev->resource[i];
 		if (r->parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			release_resource(r);
+}
 	}
 
  err_out:
@@ -449,6 +481,7 @@ void platform_device_del(struct platform_device *pdev)
 	int i;
 
 	if (pdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_remove_properties(&pdev->dev);
 		device_del(&pdev->dev);
 
@@ -472,6 +505,7 @@ EXPORT_SYMBOL_GPL(platform_device_del);
  */
 int platform_device_register(struct platform_device *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_initialize(&pdev->dev);
 	arch_setup_pdev_archdata(pdev);
 	return platform_device_add(pdev);
@@ -488,6 +522,7 @@ EXPORT_SYMBOL_GPL(platform_device_register);
  */
 void platform_device_unregister(struct platform_device *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	platform_device_del(pdev);
 	platform_device_put(pdev);
 }
@@ -541,6 +576,7 @@ struct platform_device *platform_device_register_full(
 		goto err;
 
 	if (pdevinfo->properties) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = platform_device_add_properties(pdev,
 						     pdevinfo->properties);
 		if (ret)
@@ -558,6 +594,7 @@ struct platform_device *platform_device_register_full(
 		return ERR_PTR(ret);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pdev;
 }
 EXPORT_SYMBOL_GPL(platform_device_register_full);
@@ -570,14 +607,18 @@ static int platform_drv_probe(struct device *_dev)
 
 	ret = of_clk_set_defaults(_dev->of_node, false);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = dev_pm_domain_attach(_dev, true);
 	if (ret != -EPROBE_DEFER) {
 		if (drv->probe) {
 			ret = drv->probe(dev);
 			if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev_pm_domain_detach(_dev, true);
+}
 		} else {
 			/* don't fail if just dev_pm_domain_attach failed */
 			ret = 0;
@@ -585,20 +626,24 @@ static int platform_drv_probe(struct device *_dev)
 	}
 
 	if (drv->prevent_deferred_probe && ret == -EPROBE_DEFER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(_dev, "probe deferral not supported\n");
 		ret = -ENXIO;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 static int platform_drv_probe_fail(struct device *_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENXIO;
 }
 
 static int platform_drv_remove(struct device *_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct platform_driver *drv = to_platform_driver(_dev->driver);
 	struct platform_device *dev = to_platform_device(_dev);
 	int ret = 0;
@@ -612,6 +657,7 @@ static int platform_drv_remove(struct device *_dev)
 
 static void platform_drv_shutdown(struct device *_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct platform_driver *drv = to_platform_driver(_dev->driver);
 	struct platform_device *dev = to_platform_device(_dev);
 
@@ -643,6 +689,7 @@ EXPORT_SYMBOL_GPL(__platform_driver_register);
  */
 void platform_driver_unregister(struct platform_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	driver_unregister(&drv->driver);
 }
 EXPORT_SYMBOL_GPL(platform_driver_unregister);
@@ -673,6 +720,7 @@ int __init_or_module __platform_driver_probe(struct platform_driver *drv,
 	int retval, code;
 
 	if (drv->driver.probe_type == PROBE_PREFER_ASYNCHRONOUS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s: drivers registered with %s can not be probed asynchronously\n",
 			 drv->driver.name, __func__);
 		return -EINVAL;
@@ -707,12 +755,17 @@ int __init_or_module __platform_driver_probe(struct platform_driver *drv,
 	spin_lock(&drv->driver.bus->p->klist_drivers.k_lock);
 	drv->probe = NULL;
 	if (code == 0 && list_empty(&drv->driver.p->klist_devices.k_list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENODEV;
+}
 	drv->driver.probe = platform_drv_probe_fail;
 	spin_unlock(&drv->driver.bus->p->klist_drivers.k_lock);
 
 	if (code != retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		platform_driver_unregister(drv);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 EXPORT_SYMBOL_GPL(__platform_driver_probe);
@@ -743,6 +796,7 @@ struct platform_device * __init_or_module __platform_create_bundle(
 
 	pdev = platform_device_alloc(driver->driver.name, -1);
 	if (!pdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOMEM;
 		goto err_out;
 	}
@@ -763,6 +817,7 @@ struct platform_device * __init_or_module __platform_create_bundle(
 	if (error)
 		goto err_pdev_del;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pdev;
 
 err_pdev_del:
@@ -793,6 +848,7 @@ int __platform_register_drivers(struct platform_driver * const *drivers,
 	unsigned int i;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < count; i++) {
 		pr_debug("registering platform driver %ps\n", drivers[i]);
 
@@ -828,6 +884,7 @@ EXPORT_SYMBOL_GPL(__platform_register_drivers);
 void platform_unregister_drivers(struct platform_driver * const *drivers,
 				 unsigned int count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (count--) {
 		pr_debug("unregistering platform driver %ps\n", drivers[count]);
 		platform_driver_unregister(drivers[count]);
@@ -844,12 +901,15 @@ EXPORT_SYMBOL_GPL(platform_unregister_drivers);
 static ssize_t modalias_show(struct device *dev, struct device_attribute *a,
 			     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct platform_device	*pdev = to_platform_device(dev);
 	int len;
 
 	len = of_device_modalias(dev, buf, PAGE_SIZE);
 	if (len != -ENODEV)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return len;
+}
 
 	len = acpi_device_modalias(dev, buf, PAGE_SIZE -1);
 	if (len != -ENODEV)
@@ -865,6 +925,7 @@ static ssize_t driver_override_store(struct device *dev,
 				     struct device_attribute *attr,
 				     const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct platform_device *pdev = to_platform_device(dev);
 	char *driver_override, *old, *cp;
 
@@ -898,6 +959,7 @@ static ssize_t driver_override_store(struct device *dev,
 static ssize_t driver_override_show(struct device *dev,
 				    struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct platform_device *pdev = to_platform_device(dev);
 	ssize_t len;
 
@@ -918,17 +980,22 @@ ATTRIBUTE_GROUPS(platform_dev);
 
 static int platform_uevent(struct device *dev, struct kobj_uevent_env *env)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct platform_device	*pdev = to_platform_device(dev);
 	int rc;
 
 	/* Some devices have extra OF data and an OF-style MODALIAS */
 	rc = of_device_uevent_modalias(dev, env);
 	if (rc != -ENODEV)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	rc = acpi_device_uevent_modalias(dev, env);
 	if (rc != -ENODEV)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	add_uevent_var(env, "MODALIAS=%s%s", PLATFORM_MODULE_PREFIX,
 			pdev->name);
@@ -939,6 +1006,7 @@ static const struct platform_device_id *platform_match_id(
 			const struct platform_device_id *id,
 			struct platform_device *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (id->name[0]) {
 		if (strcmp(pdev->name, id->name) == 0) {
 			pdev->id_entry = id;
@@ -965,23 +1033,32 @@ static const struct platform_device_id *platform_match_id(
 static int platform_match(struct device *dev, struct device_driver *drv)
 {
 	struct platform_device *pdev = to_platform_device(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct platform_driver *pdrv = to_platform_driver(drv);
 
 	/* When driver_override is set, only bind to the matching driver */
 	if (pdev->driver_override)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return !strcmp(pdev->driver_override, drv->name);
+}
 
 	/* Attempt an OF style match first */
 	if (of_driver_match_device(dev, drv))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/* Then try ACPI style match */
 	if (acpi_driver_match_device(dev, drv))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/* Then try to match against the id table */
 	if (pdrv->id_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return platform_match_id(pdrv->id_table, pdev) != NULL;
+}
 
 	/* fall-back to driver name match */
 	return (strcmp(pdev->name, drv->name) == 0);
@@ -991,6 +1068,7 @@ static int platform_match(struct device *dev, struct device_driver *drv)
 
 static int platform_legacy_suspend(struct device *dev, pm_message_t mesg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct platform_driver *pdrv = to_platform_driver(dev->driver);
 	struct platform_device *pdev = to_platform_device(dev);
 	int ret = 0;
@@ -1003,6 +1081,7 @@ static int platform_legacy_suspend(struct device *dev, pm_message_t mesg)
 
 static int platform_legacy_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct platform_driver *pdrv = to_platform_driver(dev->driver);
 	struct platform_device *pdev = to_platform_device(dev);
 	int ret = 0;
@@ -1023,7 +1102,9 @@ int platform_pm_suspend(struct device *dev)
 	int ret = 0;
 
 	if (!drv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (drv->pm) {
 		if (drv->pm->suspend)
@@ -1041,7 +1122,9 @@ int platform_pm_resume(struct device *dev)
 	int ret = 0;
 
 	if (!drv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (drv->pm) {
 		if (drv->pm->resume)
@@ -1063,7 +1146,9 @@ int platform_pm_freeze(struct device *dev)
 	int ret = 0;
 
 	if (!drv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (drv->pm) {
 		if (drv->pm->freeze)
@@ -1081,7 +1166,9 @@ int platform_pm_thaw(struct device *dev)
 	int ret = 0;
 
 	if (!drv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (drv->pm) {
 		if (drv->pm->thaw)
@@ -1099,7 +1186,9 @@ int platform_pm_poweroff(struct device *dev)
 	int ret = 0;
 
 	if (!drv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (drv->pm) {
 		if (drv->pm->poweroff)
@@ -1117,7 +1206,9 @@ int platform_pm_restore(struct device *dev)
 	int ret = 0;
 
 	if (!drv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (drv->pm) {
 		if (drv->pm->restore)
@@ -1154,10 +1245,15 @@ int __init platform_bus_init(void)
 
 	error = device_register(&platform_bus);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	error =  bus_register(&platform_bus_type);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_unregister(&platform_bus);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	of_platform_register_reconfig_notifier();
 	return error;
 }
@@ -1204,6 +1300,7 @@ int __init early_platform_driver_register(struct early_platform_driver *epdrv,
 	 * Drivers will by default be put on the list in compiled-in order.
 	 */
 	if (!epdrv->list.next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INIT_LIST_HEAD(&epdrv->list);
 		list_add_tail(&epdrv->list, &early_platform_driver_list);
 	}
@@ -1306,6 +1403,7 @@ early_platform_match(struct early_platform_driver *epdrv, int id)
 {
 	struct platform_device *pd;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(pd, &early_platform_device_list, dev.devres_head)
 		if (platform_match(&pd->dev, &epdrv->pdrv->driver))
 			if (pd->id == id)
@@ -1324,6 +1422,7 @@ static int __init early_platform_left(struct early_platform_driver *epdrv,
 {
 	struct platform_device *pd;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(pd, &early_platform_device_list, dev.devres_head)
 		if (platform_match(&pd->dev, &epdrv->pdrv->driver))
 			if (pd->id >= id)
@@ -1348,6 +1447,7 @@ static int __init early_platform_driver_probe_id(char *class_str,
 	int n = 0;
 	int left = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(epdrv, &early_platform_driver_list, list) {
 		/* only use drivers matching our class_str */
 		if (strcmp(class_str, epdrv->class_str))
@@ -1439,6 +1539,7 @@ int __init early_platform_driver_probe(char *class_str,
 	int k, n, i;
 
 	n = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = -2; n < nr_probe; i++) {
 		k = early_platform_driver_probe_id(class_str, i, nr_probe - n);
 
@@ -1464,6 +1565,7 @@ void __init early_platform_cleanup(void)
 	/* clean up the devres list used to chain devices */
 	list_for_each_entry_safe(pd, pd2, &early_platform_device_list,
 				 dev.devres_head) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del(&pd->dev.devres_head);
 		memset(&pd->dev.devres_head, 0, sizeof(pd->dev.devres_head));
 	}
diff --git a/drivers/base/power/common.c b/drivers/base/power/common.c
index f6a9ad5..e6fc0bf 100644
--- a/drivers/base/power/common.c
+++ b/drivers/base/power/common.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/base/power/common.c - Common device power management code.
  *
@@ -30,7 +32,9 @@ int dev_pm_get_subsys_data(struct device *dev)
 
 	psd = kzalloc(sizeof(*psd), GFP_KERNEL);
 	if (!psd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	spin_lock_irq(&dev->power.lock);
 
@@ -70,6 +74,7 @@ void dev_pm_put_subsys_data(struct device *dev)
 	if (!psd)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (--psd->refcount == 0)
 		dev->power.subsys_data = NULL;
 	else
@@ -106,7 +111,9 @@ int dev_pm_domain_attach(struct device *dev, bool power_on)
 
 	ret = acpi_dev_pm_attach(dev, power_on);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = genpd_dev_pm_attach(dev);
+}
 
 	return ret;
 }
@@ -126,6 +133,7 @@ EXPORT_SYMBOL_GPL(dev_pm_domain_attach);
  */
 void dev_pm_domain_detach(struct device *dev, bool power_off)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->pm_domain && dev->pm_domain->detach)
 		dev->pm_domain->detach(dev, power_off);
 }
@@ -143,6 +151,7 @@ EXPORT_SYMBOL_GPL(dev_pm_domain_detach);
  */
 void dev_pm_domain_set(struct device *dev, struct dev_pm_domain *pd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->pm_domain == pd)
 		return;
 
diff --git a/drivers/base/power/main.c b/drivers/base/power/main.c
index 770b153..e2ad1ca 100644
--- a/drivers/base/power/main.c
+++ b/drivers/base/power/main.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/base/power/main.c - Where the driver meets power management.
  *
@@ -64,6 +66,7 @@ static int async_error;
 
 static const char *pm_verb(int event)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (event) {
 	case PM_EVENT_SUSPEND:
 		return "suspend";
@@ -107,6 +110,7 @@ void device_pm_sleep_init(struct device *dev)
  */
 void device_pm_lock(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&dpm_list_mtx);
 }
 
@@ -115,6 +119,7 @@ void device_pm_lock(void)
  */
 void device_pm_unlock(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&dpm_list_mtx);
 }
 
@@ -124,6 +129,7 @@ void device_pm_unlock(void)
  */
 void device_pm_add(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("PM: Adding info for %s:%s\n",
 		 dev->bus ? dev->bus->name : "No Bus", dev_name(dev));
 	device_pm_check_callbacks(dev);
@@ -142,6 +148,7 @@ void device_pm_add(struct device *dev)
  */
 void device_pm_remove(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("PM: Removing info for %s:%s\n",
 		 dev->bus ? dev->bus->name : "No Bus", dev_name(dev));
 	complete_all(&dev->power.completion);
@@ -161,6 +168,7 @@ void device_pm_remove(struct device *dev)
  */
 void device_pm_move_before(struct device *deva, struct device *devb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("PM: Moving %s:%s before %s:%s\n",
 		 deva->bus ? deva->bus->name : "No Bus", dev_name(deva),
 		 devb->bus ? devb->bus->name : "No Bus", dev_name(devb));
@@ -175,6 +183,7 @@ void device_pm_move_before(struct device *deva, struct device *devb)
  */
 void device_pm_move_after(struct device *deva, struct device *devb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("PM: Moving %s:%s after %s:%s\n",
 		 deva->bus ? deva->bus->name : "No Bus", dev_name(deva),
 		 devb->bus ? devb->bus->name : "No Bus", dev_name(devb));
@@ -188,6 +197,7 @@ void device_pm_move_after(struct device *deva, struct device *devb)
  */
 void device_pm_move_last(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("PM: Moving %s:%s to end of list\n",
 		 dev->bus ? dev->bus->name : "No Bus", dev_name(dev));
 	list_move_tail(&dev->power.entry, &dpm_list);
@@ -198,6 +208,7 @@ static ktime_t initcall_debug_start(struct device *dev)
 	ktime_t calltime = 0;
 
 	if (pm_print_times_enabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("calling  %s+ @ %i, parent: %s\n",
 			dev_name(dev), task_pid_nr(current),
 			dev->parent ? dev_name(dev->parent) : "none");
@@ -218,6 +229,7 @@ static void initcall_debug_report(struct device *dev, ktime_t calltime,
 	nsecs = (s64) ktime_to_ns(ktime_sub(rettime, calltime));
 
 	if (pm_print_times_enabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("call %s+ returned %d after %Ld usecs\n", dev_name(dev),
 			error, (unsigned long long)nsecs >> 10);
 	}
@@ -230,6 +242,7 @@ static void initcall_debug_report(struct device *dev, ktime_t calltime,
  */
 static void dpm_wait(struct device *dev, bool async)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev)
 		return;
 
@@ -239,12 +252,14 @@ static void dpm_wait(struct device *dev, bool async)
 
 static int dpm_wait_fn(struct device *dev, void *async_ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dpm_wait(dev, *((bool *)async_ptr));
 	return 0;
 }
 
 static void dpm_wait_for_children(struct device *dev, bool async)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
        device_for_each_child(dev, &async, dpm_wait_fn);
 }
 
@@ -271,6 +286,7 @@ static void dpm_wait_for_suppliers(struct device *dev, bool async)
 
 static void dpm_wait_for_superior(struct device *dev, bool async)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dpm_wait(dev->parent, async);
 	dpm_wait_for_suppliers(dev, async);
 }
@@ -300,6 +316,7 @@ static void dpm_wait_for_consumers(struct device *dev, bool async)
 
 static void dpm_wait_for_subordinate(struct device *dev, bool async)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dpm_wait_for_children(dev, async);
 	dpm_wait_for_consumers(dev, async);
 }
@@ -311,6 +328,7 @@ static void dpm_wait_for_subordinate(struct device *dev, bool async)
  */
 static pm_callback_t pm_op(const struct dev_pm_ops *ops, pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (state.event) {
 #ifdef CONFIG_SUSPEND
 	case PM_EVENT_SUSPEND:
@@ -346,6 +364,7 @@ static pm_callback_t pm_op(const struct dev_pm_ops *ops, pm_message_t state)
 static pm_callback_t pm_late_early_op(const struct dev_pm_ops *ops,
 				      pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (state.event) {
 #ifdef CONFIG_SUSPEND
 	case PM_EVENT_SUSPEND:
@@ -380,6 +399,7 @@ static pm_callback_t pm_late_early_op(const struct dev_pm_ops *ops,
  */
 static pm_callback_t pm_noirq_op(const struct dev_pm_ops *ops, pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (state.event) {
 #ifdef CONFIG_SUSPEND
 	case PM_EVENT_SUSPEND:
@@ -406,6 +426,7 @@ static pm_callback_t pm_noirq_op(const struct dev_pm_ops *ops, pm_message_t stat
 
 static void pm_dev_dbg(struct device *dev, pm_message_t state, const char *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(dev, "%s%s%s\n", info, pm_verb(state.event),
 		((state.event & PM_EVENT_SLEEP) && device_may_wakeup(dev)) ?
 		", may wakeup" : "");
@@ -430,7 +451,9 @@ static void dpm_show_time(ktime_t starttime, pm_message_t state, int error,
 	do_div(usecs64, NSEC_PER_USEC);
 	usecs = usecs64;
 	if (usecs == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		usecs = 1;
+}
 
 	pm_pr_dbg("%s%s%s of devices %s after %ld.%03ld msecs\n",
 		  info ?: "", info ? " " : "", pm_verb(state.event),
@@ -445,7 +468,9 @@ static int dpm_run_callback(pm_callback_t cb, struct device *dev,
 	int error;
 
 	if (!cb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	calltime = initcall_debug_start(dev);
 
@@ -542,6 +567,7 @@ static int device_resume_noirq(struct device *dev, pm_message_t state, bool asyn
 	const char *info = NULL;
 	int error = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	TRACE_DEVICE(dev);
 	TRACE_RESUME(0);
 
@@ -583,6 +609,7 @@ static int device_resume_noirq(struct device *dev, pm_message_t state, bool asyn
 
 static bool is_async(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev->power.async_suspend && pm_async_enabled
 		&& !pm_trace_is_enabled();
 }
@@ -594,7 +621,9 @@ static void async_resume_noirq(void *data, async_cookie_t cookie)
 
 	error = device_resume_noirq(dev, pm_transition, true);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_dev_err(dev, pm_transition, " async", error);
+}
 
 	put_device(dev);
 }
@@ -650,6 +679,7 @@ void dpm_noirq_resume_devices(pm_message_t state)
 
 void dpm_noirq_end(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	resume_device_irqs();
 	device_wakeup_disarm_wake_irqs();
 	cpuidle_resume();
@@ -664,6 +694,7 @@ void dpm_noirq_end(void)
  */
 void dpm_resume_noirq(pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dpm_noirq_resume_devices(state);
 	dpm_noirq_end();
 }
@@ -682,6 +713,7 @@ static int device_resume_early(struct device *dev, pm_message_t state, bool asyn
 	const char *info = NULL;
 	int error = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	TRACE_DEVICE(dev);
 	TRACE_RESUME(0);
 
@@ -730,7 +762,9 @@ static void async_resume_early(void *data, async_cookie_t cookie)
 
 	error = device_resume_early(dev, pm_transition, true);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_dev_err(dev, pm_transition, " async", error);
+}
 
 	put_device(dev);
 }
@@ -793,6 +827,7 @@ void dpm_resume_early(pm_message_t state)
  */
 void dpm_resume_start(pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dpm_resume_noirq(state);
 	dpm_resume_early(state);
 }
@@ -811,6 +846,7 @@ static int device_resume(struct device *dev, pm_message_t state, bool async)
 	int error = 0;
 	DECLARE_DPM_WATCHDOG_ON_STACK(wd);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	TRACE_DEVICE(dev);
 	TRACE_RESUME(0);
 
@@ -900,7 +936,9 @@ static void async_resume(void *data, async_cookie_t cookie)
 
 	error = device_resume(dev, pm_transition, true);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_dev_err(dev, pm_transition, " async", error);
+}
 	put_device(dev);
 }
 
@@ -917,6 +955,7 @@ void dpm_resume(pm_message_t state)
 	ktime_t starttime = ktime_get();
 
 	trace_suspend_resume(TPS("dpm_resume"), state.event, true);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	mutex_lock(&dpm_list_mtx);
@@ -972,7 +1011,9 @@ static void device_complete(struct device *dev, pm_message_t state)
 	const char *info = NULL;
 
 	if (dev->power.syscore)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	device_lock(dev);
 
@@ -1017,6 +1058,7 @@ void dpm_complete(pm_message_t state)
 	struct list_head list;
 
 	trace_suspend_resume(TPS("dpm_complete"), state.event, true);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	INIT_LIST_HEAD(&list);
@@ -1053,6 +1095,7 @@ void dpm_complete(pm_message_t state)
  */
 void dpm_resume_end(pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dpm_resume(state);
 	dpm_complete(state);
 }
@@ -1070,6 +1113,7 @@ EXPORT_SYMBOL_GPL(dpm_resume_end);
  */
 static pm_message_t resume_event(pm_message_t sleep_state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (sleep_state.event) {
 	case PM_EVENT_SUSPEND:
 		return PMSG_RESUME;
@@ -1097,6 +1141,7 @@ static int __device_suspend_noirq(struct device *dev, pm_message_t state, bool a
 	const char *info = NULL;
 	int error = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	TRACE_DEVICE(dev);
 	TRACE_SUSPEND(0);
 
@@ -1151,6 +1196,7 @@ static void async_suspend_noirq(void *data, async_cookie_t cookie)
 
 	error = __device_suspend_noirq(dev, pm_transition, true);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dpm_save_failed_dev(dev_name(dev));
 		pm_dev_err(dev, pm_transition, " async", error);
 	}
@@ -1160,6 +1206,7 @@ static void async_suspend_noirq(void *data, async_cookie_t cookie)
 
 static int device_suspend_noirq(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	reinit_completion(&dev->power.completion);
 
 	if (is_async(dev)) {
@@ -1172,6 +1219,7 @@ static int device_suspend_noirq(struct device *dev)
 
 void dpm_noirq_begin(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpuidle_pause();
 	device_wakeup_arm_wake_irqs();
 	suspend_device_irqs();
@@ -1179,6 +1227,7 @@ void dpm_noirq_begin(void)
 
 int dpm_noirq_suspend_devices(pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ktime_t starttime = ktime_get();
 	int error = 0;
 
@@ -1237,7 +1286,9 @@ int dpm_suspend_noirq(pm_message_t state)
 	dpm_noirq_begin();
 	ret = dpm_noirq_suspend_devices(state);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dpm_resume_noirq(resume_event(state));
+}
 
 	return ret;
 }
@@ -1256,6 +1307,7 @@ static int __device_suspend_late(struct device *dev, pm_message_t state, bool as
 	const char *info = NULL;
 	int error = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	TRACE_DEVICE(dev);
 	TRACE_SUSPEND(0);
 
@@ -1312,6 +1364,7 @@ static void async_suspend_late(void *data, async_cookie_t cookie)
 
 	error = __device_suspend_late(dev, pm_transition, true);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dpm_save_failed_dev(dev_name(dev));
 		pm_dev_err(dev, pm_transition, " async", error);
 	}
@@ -1320,6 +1373,7 @@ static void async_suspend_late(void *data, async_cookie_t cookie)
 
 static int device_suspend_late(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	reinit_completion(&dev->power.completion);
 
 	if (is_async(dev)) {
@@ -1337,6 +1391,7 @@ static int device_suspend_late(struct device *dev)
  */
 int dpm_suspend_late(pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ktime_t starttime = ktime_get();
 	int error = 0;
 
@@ -1388,6 +1443,7 @@ int dpm_suspend_late(pm_message_t state)
  */
 int dpm_suspend_end(pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int error = dpm_suspend_late(state);
 	if (error)
 		return error;
@@ -1421,6 +1477,7 @@ static int legacy_suspend(struct device *dev, pm_message_t state,
 	trace_device_pm_callback_start(dev, info, state.event);
 	error = cb(dev, state);
 	trace_device_pm_callback_end(dev, error);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	suspend_report_result(cb, error);
 
 	initcall_debug_report(dev, calltime, error, state, info);
@@ -1435,6 +1492,7 @@ static void dpm_clear_suppliers_direct_complete(struct device *dev)
 
 	idx = device_links_read_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(link, &dev->links.suppliers, c_node) {
 		spin_lock_irq(&link->supplier->power.lock);
 		link->supplier->power.direct_complete = false;
@@ -1457,6 +1515,7 @@ static int __device_suspend(struct device *dev, pm_message_t state, bool async)
 	int error = 0;
 	DECLARE_DPM_WATCHDOG_ON_STACK(wd);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	TRACE_DEVICE(dev);
 	TRACE_SUSPEND(0);
 
@@ -1578,6 +1637,7 @@ static void async_suspend(void *data, async_cookie_t cookie)
 
 	error = __device_suspend(dev, pm_transition, true);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dpm_save_failed_dev(dev_name(dev));
 		pm_dev_err(dev, pm_transition, " async", error);
 	}
@@ -1587,6 +1647,7 @@ static void async_suspend(void *data, async_cookie_t cookie)
 
 static int device_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	reinit_completion(&dev->power.completion);
 
 	if (is_async(dev)) {
@@ -1604,6 +1665,7 @@ static int device_suspend(struct device *dev)
  */
 int dpm_suspend(pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ktime_t starttime = ktime_get();
 	int error = 0;
 
@@ -1663,7 +1725,9 @@ static int device_prepare(struct device *dev, pm_message_t state)
 	int ret = 0;
 
 	if (dev->power.syscore)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * If a device's parent goes into runtime suspend at the wrong time,
@@ -1729,6 +1793,7 @@ int dpm_prepare(pm_message_t state)
 	int error = 0;
 
 	trace_suspend_resume(TPS("dpm_prepare"), state.event, true);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	/*
@@ -1792,6 +1857,7 @@ int dpm_suspend_start(pm_message_t state)
 
 	error = dpm_prepare(state);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		suspend_stats.failed_prepare++;
 		dpm_save_failed_step(SUSPEND_PREPARE);
 	} else
@@ -1802,6 +1868,7 @@ EXPORT_SYMBOL_GPL(dpm_suspend_start);
 
 void __suspend_report_result(const char *function, void *fn, int ret)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret)
 		printk(KERN_ERR "%s(): %pF returns %d\n", function, fn, ret);
 }
@@ -1814,6 +1881,7 @@ EXPORT_SYMBOL_GPL(__suspend_report_result);
  */
 int device_pm_wait_for_dev(struct device *subordinate, struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dpm_wait(dev, subordinate->power.async_suspend);
 	return async_error;
 }
@@ -1832,7 +1900,9 @@ void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *))
 	struct device *dev;
 
 	if (!fn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	device_pm_lock();
 	list_for_each_entry(dev, &dpm_list, power.entry)
@@ -1844,7 +1914,9 @@ EXPORT_SYMBOL_GPL(dpm_for_each_dev);
 static bool pm_ops_is_empty(const struct dev_pm_ops *ops)
 {
 	if (!ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	return !ops->prepare &&
 	       !ops->suspend &&
@@ -1858,6 +1930,7 @@ static bool pm_ops_is_empty(const struct dev_pm_ops *ops)
 
 void device_pm_check_callbacks(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&dev->power.lock);
 	dev->power.no_pm_callbacks =
 		(!dev->bus || (pm_ops_is_empty(dev->bus->pm) &&
diff --git a/drivers/base/power/opp/debugfs.c b/drivers/base/power/opp/debugfs.c
index 81cf120..91633188 100644
--- a/drivers/base/power/opp/debugfs.c
+++ b/drivers/base/power/opp/debugfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Generic OPP debugfs interface
  *
diff --git a/drivers/base/power/power.h b/drivers/base/power/power.h
index 7beee75..0f87a05 100644
--- a/drivers/base/power/power.h
+++ b/drivers/base/power/power.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SPDX-License-Identifier: GPL-2.0 */
 #include <linux/pm_qos.h>
 
diff --git a/drivers/base/power/qos.c b/drivers/base/power/qos.c
index 277d43a..7413192 100644
--- a/drivers/base/power/qos.c
+++ b/drivers/base/power/qos.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Devices PM QoS constraints management
  *
@@ -59,6 +61,7 @@ enum pm_qos_flags_status __dev_pm_qos_flags(struct device *dev, s32 mask)
 	struct pm_qos_flags *pqf;
 	s32 val;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&dev->power.lock);
 
 	if (IS_ERR_OR_NULL(qos))
@@ -85,6 +88,7 @@ enum pm_qos_flags_status dev_pm_qos_flags(struct device *dev, s32 mask)
 	unsigned long irqflags;
 	enum pm_qos_flags_status ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dev->power.lock, irqflags);
 	ret = __dev_pm_qos_flags(dev, mask);
 	spin_unlock_irqrestore(&dev->power.lock, irqflags);
@@ -101,6 +105,7 @@ EXPORT_SYMBOL_GPL(dev_pm_qos_flags);
  */
 s32 __dev_pm_qos_read_value(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&dev->power.lock);
 
 	return dev_pm_qos_raw_read_value(dev);
@@ -115,6 +120,7 @@ s32 dev_pm_qos_read_value(struct device *dev)
 	unsigned long flags;
 	s32 ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dev->power.lock, flags);
 	ret = __dev_pm_qos_read_value(dev);
 	spin_unlock_irqrestore(&dev->power.lock, flags);
@@ -146,6 +152,7 @@ static int apply_constraint(struct dev_pm_qos_request *req,
 		ret = pm_qos_update_target(&qos->latency_tolerance,
 					   &req->data.pnode, action, value);
 		if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			value = pm_qos_read_value(&qos->latency_tolerance);
 			req->dev->power.set_latency_tolerance(req->dev, value);
 		}
@@ -176,15 +183,19 @@ static int dev_pm_qos_constraints_allocate(struct device *dev)
 
 	qos = kzalloc(sizeof(*qos), GFP_KERNEL);
 	if (!qos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	n = kzalloc(sizeof(*n), GFP_KERNEL);
 	if (!n) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(qos);
 		return -ENOMEM;
 	}
 	BLOCKING_INIT_NOTIFIER_HEAD(n);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	c = &qos->resume_latency;
 	plist_head_init(&c->list);
 	c->target_value = PM_QOS_RESUME_LATENCY_DEFAULT_VALUE;
@@ -245,6 +256,7 @@ void dev_pm_qos_constraints_destroy(struct device *dev)
 
 	/* Flush the constraints lists for the device. */
 	c = &qos->resume_latency;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	plist_for_each_entry_safe(req, tmp, &c->list, data.pnode) {
 		/*
 		 * Update constraints list and call the notification
@@ -253,17 +265,24 @@ void dev_pm_qos_constraints_destroy(struct device *dev)
 		apply_constraint(req, PM_QOS_REMOVE_REQ, PM_QOS_DEFAULT_VALUE);
 		memset(req, 0, sizeof(*req));
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	c = &qos->latency_tolerance;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	plist_for_each_entry_safe(req, tmp, &c->list, data.pnode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		apply_constraint(req, PM_QOS_REMOVE_REQ, PM_QOS_DEFAULT_VALUE);
 		memset(req, 0, sizeof(*req));
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	f = &qos->flags;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(req, tmp, &f->list, data.flr.node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		apply_constraint(req, PM_QOS_REMOVE_REQ, PM_QOS_DEFAULT_VALUE);
 		memset(req, 0, sizeof(*req));
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&dev->power.lock);
 	dev->power.qos = ERR_PTR(-ENODEV);
 	spin_unlock_irq(&dev->power.lock);
@@ -291,14 +310,18 @@ static int __dev_pm_qos_add_request(struct device *dev,
 	int ret = 0;
 
 	if (!dev || !req || dev_pm_qos_invalid_req_type(dev, type))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (WARN(dev_pm_qos_request_active(req),
 		 "%s() called for already added request\n", __func__))
 		return -EINVAL;
 
 	if (IS_ERR(dev->power.qos))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENODEV;
+}
 	else if (!dev->power.qos)
 		ret = dev_pm_qos_constraints_allocate(dev);
 
@@ -308,6 +331,7 @@ static int __dev_pm_qos_add_request(struct device *dev,
 		req->type = type;
 		ret = apply_constraint(req, PM_QOS_ADD_REQ, value);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -357,7 +381,9 @@ static int __dev_pm_qos_update_request(struct dev_pm_qos_request *req,
 	int ret = 0;
 
 	if (!req) /*guard against callers passing in null */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (WARN(!dev_pm_qos_request_active(req),
 		 "%s() called for unknown object\n", __func__))
@@ -420,7 +446,9 @@ static int __dev_pm_qos_remove_request(struct dev_pm_qos_request *req)
 	int ret;
 
 	if (!req) /*guard against callers passing in null */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (WARN(!dev_pm_qos_request_active(req),
 		 "%s() called for unknown object\n", __func__))
@@ -482,7 +510,9 @@ int dev_pm_qos_add_notifier(struct device *dev, struct notifier_block *notifier)
 	mutex_lock(&dev_pm_qos_mtx);
 
 	if (IS_ERR(dev->power.qos))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENODEV;
+}
 	else if (!dev->power.qos)
 		ret = dev_pm_qos_constraints_allocate(dev);
 
@@ -514,8 +544,10 @@ int dev_pm_qos_remove_notifier(struct device *dev,
 
 	/* Silently return if the constraints object is not present. */
 	if (!IS_ERR_OR_NULL(dev->power.qos))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = blocking_notifier_chain_unregister(dev->power.qos->resume_latency.notifiers,
 							    notifier);
+}
 
 	mutex_unlock(&dev_pm_qos_mtx);
 	return retval;
@@ -586,6 +618,7 @@ static void __dev_pm_qos_drop_user_request(struct device *dev,
 static void dev_pm_qos_drop_user_request(struct device *dev,
 					 enum dev_pm_qos_req_type type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&dev_pm_qos_mtx);
 	__dev_pm_qos_drop_user_request(dev, type);
 	mutex_unlock(&dev_pm_qos_mtx);
@@ -602,14 +635,19 @@ int dev_pm_qos_expose_latency_limit(struct device *dev, s32 value)
 	int ret;
 
 	if (!device_is_registered(dev) || value < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	req = kzalloc(sizeof(*req), GFP_KERNEL);
 	if (!req)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ret = dev_pm_qos_add_request(dev, req, DEV_PM_QOS_RESUME_LATENCY, value);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(req);
 		return ret;
 	}
@@ -619,11 +657,16 @@ int dev_pm_qos_expose_latency_limit(struct device *dev, s32 value)
 	mutex_lock(&dev_pm_qos_mtx);
 
 	if (IS_ERR_OR_NULL(dev->power.qos))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENODEV;
+}
 	else if (dev->power.qos->resume_latency_req)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EEXIST;
+}
 
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__dev_pm_qos_remove_request(req);
 		kfree(req);
 		mutex_unlock(&dev_pm_qos_mtx);
@@ -635,7 +678,9 @@ int dev_pm_qos_expose_latency_limit(struct device *dev, s32 value)
 
 	ret = pm_qos_sysfs_add_resume_latency(dev);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_pm_qos_drop_user_request(dev, DEV_PM_QOS_RESUME_LATENCY);
+}
 
  out:
 	mutex_unlock(&dev_pm_qos_sysfs_mtx);
@@ -646,8 +691,10 @@ EXPORT_SYMBOL_GPL(dev_pm_qos_expose_latency_limit);
 static void __dev_pm_qos_hide_latency_limit(struct device *dev)
 {
 	if (!IS_ERR_OR_NULL(dev->power.qos) && dev->power.qos->resume_latency_req)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__dev_pm_qos_drop_user_request(dev, DEV_PM_QOS_RESUME_LATENCY);
 }
+}
 
 /**
  * dev_pm_qos_hide_latency_limit - Hide PM QoS latency limit from user space.
@@ -655,6 +702,7 @@ static void __dev_pm_qos_hide_latency_limit(struct device *dev)
  */
 void dev_pm_qos_hide_latency_limit(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&dev_pm_qos_sysfs_mtx);
 
 	pm_qos_sysfs_remove_resume_latency(dev);
@@ -678,7 +726,9 @@ int dev_pm_qos_expose_flags(struct device *dev, s32 val)
 	int ret;
 
 	if (!device_is_registered(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	req = kzalloc(sizeof(*req), GFP_KERNEL);
 	if (!req)
@@ -724,8 +774,10 @@ EXPORT_SYMBOL_GPL(dev_pm_qos_expose_flags);
 static void __dev_pm_qos_hide_flags(struct device *dev)
 {
 	if (!IS_ERR_OR_NULL(dev->power.qos) && dev->power.qos->flags_req)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__dev_pm_qos_drop_user_request(dev, DEV_PM_QOS_FLAGS);
 }
+}
 
 /**
  * dev_pm_qos_hide_flags - Hide PM QoS flags of a device from user space.
@@ -733,6 +785,7 @@ static void __dev_pm_qos_hide_flags(struct device *dev)
  */
 void dev_pm_qos_hide_flags(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_runtime_get_sync(dev);
 	mutex_lock(&dev_pm_qos_sysfs_mtx);
 
@@ -761,6 +814,7 @@ int dev_pm_qos_update_flags(struct device *dev, s32 mask, bool set)
 	pm_runtime_get_sync(dev);
 	mutex_lock(&dev_pm_qos_mtx);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ERR_OR_NULL(dev->power.qos) || !dev->power.qos->flags_req) {
 		ret = -EINVAL;
 		goto out;
@@ -789,6 +843,7 @@ s32 dev_pm_qos_get_user_latency_tolerance(struct device *dev)
 	s32 ret;
 
 	mutex_lock(&dev_pm_qos_mtx);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = IS_ERR_OR_NULL(dev->power.qos)
 		|| !dev->power.qos->latency_tolerance_req ?
 			PM_QOS_LATENCY_TOLERANCE_NO_CONSTRAINT :
@@ -854,7 +909,9 @@ int dev_pm_qos_expose_latency_tolerance(struct device *dev)
 	int ret;
 
 	if (!dev->power.set_latency_tolerance)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&dev_pm_qos_sysfs_mtx);
 	ret = pm_qos_sysfs_add_latency_tolerance(dev);
@@ -870,6 +927,7 @@ EXPORT_SYMBOL_GPL(dev_pm_qos_expose_latency_tolerance);
  */
 void dev_pm_qos_hide_latency_tolerance(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&dev_pm_qos_sysfs_mtx);
 	pm_qos_sysfs_remove_latency_tolerance(dev);
 	mutex_unlock(&dev_pm_qos_sysfs_mtx);
diff --git a/drivers/base/power/runtime.c b/drivers/base/power/runtime.c
index b2b1eec..2e5024e 100644
--- a/drivers/base/power/runtime.c
+++ b/drivers/base/power/runtime.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/base/power/runtime.c - Helper functions for device runtime PM
  *
@@ -24,11 +26,17 @@ static pm_callback_t __rpm_get_callback(struct device *dev, size_t cb_offset)
 	const struct dev_pm_ops *ops;
 
 	if (dev->pm_domain)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ops = &dev->pm_domain->ops;
+}
 	else if (dev->type && dev->type->pm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ops = dev->type->pm;
+}
 	else if (dev->class && dev->class->pm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ops = dev->class->pm;
+}
 	else if (dev->bus && dev->bus->pm)
 		ops = dev->bus->pm;
 	else
@@ -40,7 +48,9 @@ static pm_callback_t __rpm_get_callback(struct device *dev, size_t cb_offset)
 		cb = NULL;
 
 	if (!cb && dev->driver && dev->driver->pm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cb = *(pm_callback_t *)((void *)dev->driver->pm + cb_offset);
+}
 
 	return cb;
 }
@@ -72,7 +82,9 @@ void update_pm_runtime_accounting(struct device *dev)
 	dev->power.accounting_timestamp = now;
 
 	if (dev->power.disable_depth > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (dev->power.runtime_status == RPM_SUSPENDED)
 		dev->power.suspended_jiffies += delta;
@@ -93,6 +105,7 @@ static void __update_runtime_status(struct device *dev, enum rpm_status status)
 static void pm_runtime_deactivate_timer(struct device *dev)
 {
 	if (dev->power.timer_expires > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		del_timer(&dev->power.suspend_timer);
 		dev->power.timer_expires = 0;
 	}
@@ -149,10 +162,15 @@ unsigned long pm_runtime_autosuspend_expiration(struct device *dev)
 	 */
 	expires = last_busy + msecs_to_jiffies(autosuspend_delay);
 	if (autosuspend_delay >= 1000)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		expires = round_jiffies(expires);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	expires += !expires;
 	if (elapsed >= expires - last_busy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		expires = 0;	/* Already expired. */
+}
 
  out:
 	return expires;
@@ -161,6 +179,7 @@ EXPORT_SYMBOL_GPL(pm_runtime_autosuspend_expiration);
 
 static int dev_memalloc_noio(struct device *dev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev->power.memalloc_noio;
 }
 
@@ -238,11 +257,17 @@ static int rpm_check_suspend_allowed(struct device *dev)
 	int retval = 0;
 
 	if (dev->power.runtime_error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EINVAL;
+}
 	else if (dev->power.disable_depth > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EACCES;
+}
 	else if (atomic_read(&dev->power.usage_count) > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EAGAIN;
+}
 	else if (!dev->power.ignore_children &&
 			atomic_read(&dev->power.child_count))
 		retval = -EBUSY;
@@ -254,9 +279,13 @@ static int rpm_check_suspend_allowed(struct device *dev)
 			&& dev->power.request == RPM_REQ_RESUME))
 		retval = -EAGAIN;
 	else if (__dev_pm_qos_read_value(dev) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EPERM;
+}
 	else if (dev->power.runtime_status == RPM_SUSPENDED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = 1;
+}
 
 	return retval;
 }
@@ -265,6 +294,7 @@ static int rpm_get_suppliers(struct device *dev)
 {
 	struct device_link *link;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(link, &dev->links.suppliers, c_node) {
 		int retval;
 
@@ -290,6 +320,7 @@ static void rpm_put_suppliers(struct device *dev)
 {
 	struct device_link *link;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(link, &dev->links.suppliers, c_node)
 		if (link->rpm_active &&
 		    READ_ONCE(link->status) != DL_STATE_SUPPLIER_UNBIND) {
@@ -310,8 +341,10 @@ static int __rpm_callback(int (*cb)(struct device *), struct device *dev)
 	bool use_links = dev->power.links_count > 0;
 
 	if (dev->power.irq_safe) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&dev->power.lock);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irq(&dev->power.lock);
 
 		/*
@@ -322,12 +355,14 @@ static int __rpm_callback(int (*cb)(struct device *), struct device *dev)
 		 * the lock.
 		 */
 		if (use_links && dev->power.runtime_status == RPM_RESUMING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			idx = device_links_read_lock();
 
 			retval = rpm_get_suppliers(dev);
 			if (retval)
 				goto fail;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			device_links_read_unlock(idx);
 		}
 	}
@@ -335,6 +370,7 @@ static int __rpm_callback(int (*cb)(struct device *), struct device *dev)
 	retval = cb(dev);
 
 	if (dev->power.irq_safe) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&dev->power.lock);
 	} else {
 		/*
@@ -347,6 +383,7 @@ static int __rpm_callback(int (*cb)(struct device *), struct device *dev)
 		if (use_links
 		    && ((dev->power.runtime_status == RPM_SUSPENDING && !retval)
 		    || (dev->power.runtime_status == RPM_RESUMING && retval))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			idx = device_links_read_lock();
 
  fail:
@@ -355,6 +392,7 @@ static int __rpm_callback(int (*cb)(struct device *), struct device *dev)
 			device_links_read_unlock(idx);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irq(&dev->power.lock);
 	}
 
@@ -386,7 +424,9 @@ static int rpm_idle(struct device *dev, int rpmflags)
 
 	/* Idle notifications are allowed only in the RPM_ACTIVE state. */
 	else if (dev->power.runtime_status != RPM_ACTIVE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EAGAIN;
+}
 
 	/*
 	 * Any pending request other than an idle notification takes
@@ -398,7 +438,9 @@ static int rpm_idle(struct device *dev, int rpmflags)
 
 	/* Act as though RPM_NOWAIT is always set. */
 	else if (dev->power.idle_notification)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EINPROGRESS;
+}
 	if (retval)
 		goto out;
 
@@ -410,11 +452,14 @@ static int rpm_idle(struct device *dev, int rpmflags)
 
 	/* Carry out an asynchronous or a synchronous idle notification. */
 	if (rpmflags & RPM_ASYNC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->power.request = RPM_REQ_IDLE;
 		if (!dev->power.request_pending) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->power.request_pending = true;
 			queue_work(pm_wq, &dev->power.work);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		trace_rpm_return_int_rcuidle(dev, _THIS_IP_, 0);
 		return 0;
 	}
@@ -444,7 +489,9 @@ static int rpm_callback(int (*cb)(struct device *), struct device *dev)
 	int retval;
 
 	if (!cb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSYS;
+}
 
 	if (dev->power.memalloc_noio) {
 		unsigned int noio_flag;
@@ -530,9 +577,11 @@ static int rpm_suspend(struct device *dev, int rpmflags)
 			 */
 			if (!(dev->power.timer_expires && time_before_eq(
 			    dev->power.timer_expires, expires))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev->power.timer_expires = expires;
 				mod_timer(&dev->power.suspend_timer, expires);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->power.timer_autosuspends = 1;
 			goto out;
 		}
@@ -542,14 +591,18 @@ static int rpm_suspend(struct device *dev, int rpmflags)
 	pm_runtime_cancel_pending(dev);
 
 	if (dev->power.runtime_status == RPM_SUSPENDING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DEFINE_WAIT(wait);
 
 		if (rpmflags & (RPM_ASYNC | RPM_NOWAIT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -EINPROGRESS;
 			goto out;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->power.irq_safe) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&dev->power.lock);
 
 			cpu_relax();
@@ -560,17 +613,20 @@ static int rpm_suspend(struct device *dev, int rpmflags)
 
 		/* Wait for the other suspend running in parallel with us. */
 		for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			prepare_to_wait(&dev->power.wait_queue, &wait,
 					TASK_UNINTERRUPTIBLE);
 			if (dev->power.runtime_status != RPM_SUSPENDING)
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irq(&dev->power.lock);
 
 			schedule();
 
 			spin_lock_irq(&dev->power.lock);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		finish_wait(&dev->power.wait_queue, &wait);
 		goto repeat;
 	}
@@ -580,15 +636,18 @@ static int rpm_suspend(struct device *dev, int rpmflags)
 
 	/* Carry out an asynchronous or a synchronous suspend. */
 	if (rpmflags & RPM_ASYNC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->power.request = (rpmflags & RPM_AUTO) ?
 		    RPM_REQ_AUTOSUSPEND : RPM_REQ_SUSPEND;
 		if (!dev->power.request_pending) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->power.request_pending = true;
 			queue_work(pm_wq, &dev->power.work);
 		}
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__update_runtime_status(dev, RPM_SUSPENDING);
 
 	callback = RPM_GET_CALLBACK(dev, runtime_suspend);
@@ -603,12 +662,14 @@ static int rpm_suspend(struct device *dev, int rpmflags)
 	pm_runtime_deactivate_timer(dev);
 
 	if (dev->parent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = dev->parent;
 		atomic_add_unless(&parent->power.child_count, -1, 0);
 	}
 	wake_up_all(&dev->power.wait_queue);
 
 	if (dev->power.deferred_resume) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->power.deferred_resume = false;
 		rpm_resume(dev, 0);
 		retval = -EAGAIN;
@@ -617,6 +678,7 @@ static int rpm_suspend(struct device *dev, int rpmflags)
 
 	/* Maybe the parent is now able to suspend. */
 	if (parent && !parent->power.ignore_children && !dev->power.irq_safe) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&dev->power.lock);
 
 		spin_lock(&parent->power.lock);
@@ -637,7 +699,9 @@ static int rpm_suspend(struct device *dev, int rpmflags)
 	dev->power.deferred_resume = false;
 	wake_up_all(&dev->power.wait_queue);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (retval == -EAGAIN || retval == -EBUSY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->power.runtime_error = 0;
 
 		/*
@@ -650,6 +714,7 @@ static int rpm_suspend(struct device *dev, int rpmflags)
 		    pm_runtime_autosuspend_expiration(dev) != 0)
 			goto repeat;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_runtime_cancel_pending(dev);
 	}
 	goto out;
@@ -683,12 +748,16 @@ static int rpm_resume(struct device *dev, int rpmflags)
 
  repeat:
 	if (dev->power.runtime_error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EINVAL;
+}
 	else if (dev->power.disable_depth == 1 && dev->power.is_suspended
 	    && dev->power.runtime_status == RPM_ACTIVE)
 		retval = 1;
 	else if (dev->power.disable_depth > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EACCES;
+}
 	if (retval)
 		goto out;
 
@@ -703,23 +772,30 @@ static int rpm_resume(struct device *dev, int rpmflags)
 		pm_runtime_deactivate_timer(dev);
 
 	if (dev->power.runtime_status == RPM_ACTIVE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = 1;
 		goto out;
 	}
 
 	if (dev->power.runtime_status == RPM_RESUMING
 	    || dev->power.runtime_status == RPM_SUSPENDING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DEFINE_WAIT(wait);
 
 		if (rpmflags & (RPM_ASYNC | RPM_NOWAIT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (dev->power.runtime_status == RPM_SUSPENDING)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev->power.deferred_resume = true;
+}
 			else
 				retval = -EINPROGRESS;
 			goto out;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->power.irq_safe) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&dev->power.lock);
 
 			cpu_relax();
@@ -730,18 +806,21 @@ static int rpm_resume(struct device *dev, int rpmflags)
 
 		/* Wait for the operation carried out in parallel with us. */
 		for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			prepare_to_wait(&dev->power.wait_queue, &wait,
 					TASK_UNINTERRUPTIBLE);
 			if (dev->power.runtime_status != RPM_RESUMING
 			    && dev->power.runtime_status != RPM_SUSPENDING)
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irq(&dev->power.lock);
 
 			schedule();
 
 			spin_lock_irq(&dev->power.lock);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		finish_wait(&dev->power.wait_queue, &wait);
 		goto repeat;
 	}
@@ -752,25 +831,32 @@ static int rpm_resume(struct device *dev, int rpmflags)
 	 * the resume will actually succeed.
 	 */
 	if (dev->power.no_callbacks && !parent && dev->parent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_nested(&dev->parent->power.lock, SINGLE_DEPTH_NESTING);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->parent->power.disable_depth > 0
 		    || dev->parent->power.ignore_children
 		    || dev->parent->power.runtime_status == RPM_ACTIVE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atomic_inc(&dev->parent->power.child_count);
 			spin_unlock(&dev->parent->power.lock);
 			retval = 1;
 			goto no_callback;	/* Assume success. */
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&dev->parent->power.lock);
 	}
 
 	/* Carry out an asynchronous or a synchronous resume. */
 	if (rpmflags & RPM_ASYNC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->power.request = RPM_REQ_RESUME;
 		if (!dev->power.request_pending) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->power.request_pending = true;
 			queue_work(pm_wq, &dev->power.work);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = 0;
 		goto out;
 	}
@@ -784,6 +870,7 @@ static int rpm_resume(struct device *dev, int rpmflags)
 		parent = dev->parent;
 		if (dev->power.irq_safe)
 			goto skip_parent;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&dev->power.lock);
 
 		pm_runtime_get_noresume(parent);
@@ -797,8 +884,11 @@ static int rpm_resume(struct device *dev, int rpmflags)
 		    && !parent->power.ignore_children) {
 			rpm_resume(parent, 0);
 			if (parent->power.runtime_status != RPM_ACTIVE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = -EBUSY;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&parent->power.lock);
 
 		spin_lock(&dev->power.lock);
@@ -811,6 +901,7 @@ static int rpm_resume(struct device *dev, int rpmflags)
 	if (dev->power.no_callbacks)
 		goto no_callback;	/* Assume success. */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__update_runtime_status(dev, RPM_RESUMING);
 
 	callback = RPM_GET_CALLBACK(dev, runtime_resume);
@@ -818,6 +909,7 @@ static int rpm_resume(struct device *dev, int rpmflags)
 	dev_pm_disable_wake_irq_check(dev);
 	retval = rpm_callback(callback, dev);
 	if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__update_runtime_status(dev, RPM_SUSPENDED);
 		pm_runtime_cancel_pending(dev);
 		dev_pm_enable_wake_irq_check(dev, false);
@@ -835,6 +927,7 @@ static int rpm_resume(struct device *dev, int rpmflags)
 
  out:
 	if (parent && !dev->power.irq_safe) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irq(&dev->power.lock);
 
 		pm_runtime_put(parent);
@@ -856,6 +949,7 @@ static int rpm_resume(struct device *dev, int rpmflags)
  */
 static void pm_runtime_work(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = container_of(work, struct device, power.work);
 	enum rpm_request req;
 
@@ -901,6 +995,7 @@ static void pm_suspend_timer_fn(unsigned long data)
 	unsigned long flags;
 	unsigned long expires;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dev->power.lock, flags);
 
 	expires = dev->power.timer_expires;
@@ -924,6 +1019,7 @@ int pm_schedule_suspend(struct device *dev, unsigned int delay)
 	unsigned long flags;
 	int retval;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dev->power.lock, flags);
 
 	if (!delay) {
@@ -969,7 +1065,9 @@ int __pm_runtime_idle(struct device *dev, int rpmflags)
 
 	if (rpmflags & RPM_GET_PUT) {
 		if (!atomic_dec_and_test(&dev->power.usage_count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	}
 
 	might_sleep_if(!(rpmflags & RPM_ASYNC) && !dev->power.irq_safe);
@@ -1000,6 +1098,7 @@ int __pm_runtime_suspend(struct device *dev, int rpmflags)
 	int retval;
 
 	if (rpmflags & RPM_GET_PUT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!atomic_dec_and_test(&dev->power.usage_count))
 			return 0;
 	}
@@ -1059,6 +1158,7 @@ int pm_runtime_get_if_in_use(struct device *dev)
 	unsigned long flags;
 	int retval;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dev->power.lock, flags);
 	retval = dev->power.disable_depth > 0 ? -EINVAL :
 		dev->power.runtime_status == RPM_ACTIVE
@@ -1093,11 +1193,14 @@ int __pm_runtime_set_status(struct device *dev, unsigned int status)
 	int error = 0;
 
 	if (status != RPM_ACTIVE && status != RPM_SUSPENDED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	spin_lock_irqsave(&dev->power.lock, flags);
 
 	if (!dev->power.runtime_error && !dev->power.disable_depth) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EAGAIN;
 		goto out;
 	}
@@ -1112,12 +1215,15 @@ int __pm_runtime_set_status(struct device *dev, unsigned int status)
 		 */
 		if (!dev->power.ignore_children &&
 			atomic_read(&dev->power.child_count)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(dev, "runtime PM trying to suspend device but active child\n");
 			error = -EBUSY;
 			goto out;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (parent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atomic_add_unless(&parent->power.child_count, -1, 0);
 			notify_parent = !parent->power.ignore_children;
 		}
@@ -1143,6 +1249,7 @@ int __pm_runtime_set_status(struct device *dev, unsigned int status)
 			atomic_inc(&parent->power.child_count);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&parent->power.lock);
 
 		if (error)
@@ -1156,8 +1263,11 @@ int __pm_runtime_set_status(struct device *dev, unsigned int status)
 	spin_unlock_irqrestore(&dev->power.lock, flags);
 
 	if (notify_parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_request_idle(parent);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 EXPORT_SYMBOL_GPL(__pm_runtime_set_status);
@@ -1176,6 +1286,7 @@ static void __pm_runtime_barrier(struct device *dev)
 	pm_runtime_deactivate_timer(dev);
 
 	if (dev->power.request_pending) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->power.request = RPM_REQ_NONE;
 		spin_unlock_irq(&dev->power.lock);
 
@@ -1188,22 +1299,26 @@ static void __pm_runtime_barrier(struct device *dev)
 	if (dev->power.runtime_status == RPM_SUSPENDING
 	    || dev->power.runtime_status == RPM_RESUMING
 	    || dev->power.idle_notification) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DEFINE_WAIT(wait);
 
 		/* Suspend, wake-up or idle notification in progress. */
 		for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			prepare_to_wait(&dev->power.wait_queue, &wait,
 					TASK_UNINTERRUPTIBLE);
 			if (dev->power.runtime_status != RPM_SUSPENDING
 			    && dev->power.runtime_status != RPM_RESUMING
 			    && !dev->power.idle_notification)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irq(&dev->power.lock);
 
 			schedule();
 
 			spin_lock_irq(&dev->power.lock);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		finish_wait(&dev->power.wait_queue, &wait);
 	}
 }
@@ -1231,6 +1346,7 @@ int pm_runtime_barrier(struct device *dev)
 
 	if (dev->power.request_pending
 	    && dev->power.request == RPM_REQ_RESUME) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rpm_resume(dev, 0);
 		retval = 1;
 	}
@@ -1260,6 +1376,7 @@ EXPORT_SYMBOL_GPL(pm_runtime_barrier);
  */
 void __pm_runtime_disable(struct device *dev, bool check_resume)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&dev->power.lock);
 
 	if (dev->power.disable_depth > 0) {
@@ -1285,8 +1402,11 @@ void __pm_runtime_disable(struct device *dev, bool check_resume)
 		pm_runtime_put_noidle(dev);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev->power.disable_depth++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__pm_runtime_barrier(dev);
+}
 
  out:
 	spin_unlock_irq(&dev->power.lock);
@@ -1308,6 +1428,7 @@ void pm_runtime_enable(struct device *dev)
 	else
 		dev_warn(dev, "Unbalanced %s!\n", __func__);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&dev->power.lock, flags);
 }
 EXPORT_SYMBOL_GPL(pm_runtime_enable);
@@ -1322,6 +1443,7 @@ EXPORT_SYMBOL_GPL(pm_runtime_enable);
  */
 void pm_runtime_forbid(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&dev->power.lock);
 	if (!dev->power.runtime_auto)
 		goto out;
@@ -1343,6 +1465,7 @@ EXPORT_SYMBOL_GPL(pm_runtime_forbid);
  */
 void pm_runtime_allow(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&dev->power.lock);
 	if (dev->power.runtime_auto)
 		goto out;
@@ -1366,6 +1489,7 @@ EXPORT_SYMBOL_GPL(pm_runtime_allow);
  */
 void pm_runtime_no_callbacks(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&dev->power.lock);
 	dev->power.no_callbacks = 1;
 	spin_unlock_irq(&dev->power.lock);
@@ -1387,6 +1511,7 @@ EXPORT_SYMBOL_GPL(pm_runtime_no_callbacks);
  */
 void pm_runtime_irq_safe(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->parent)
 		pm_runtime_get_sync(dev->parent);
 	spin_lock_irq(&dev->power.lock);
@@ -1425,7 +1550,9 @@ static void update_autosuspend(struct device *dev, int old_delay, int old_use)
 
 		/* If it used to be prevented then allow it. */
 		if (old_use && old_delay < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atomic_dec(&dev->power.usage_count);
+}
 
 		/* Maybe we can autosuspend now. */
 		rpm_idle(dev, RPM_AUTO);
@@ -1514,13 +1641,18 @@ void pm_runtime_reinit(struct device *dev)
 {
 	if (!pm_runtime_enabled(dev)) {
 		if (dev->power.runtime_status == RPM_ACTIVE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pm_runtime_set_suspended(dev);
+}
 		if (dev->power.irq_safe) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock_irq(&dev->power.lock);
 			dev->power.irq_safe = 0;
 			spin_unlock_irq(&dev->power.lock);
 			if (dev->parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pm_runtime_put(dev->parent);
+}
 		}
 	}
 }
@@ -1559,6 +1691,7 @@ void pm_runtime_clean_up_links(struct device *dev)
 
 	idx = device_links_read_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(link, &dev->links.consumers, s_node) {
 		if (link->flags & DL_FLAG_STATELESS)
 			continue;
@@ -1585,7 +1718,9 @@ void pm_runtime_get_suppliers(struct device *dev)
 
 	list_for_each_entry_rcu(link, &dev->links.suppliers, c_node)
 		if (link->flags & DL_FLAG_PM_RUNTIME)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pm_runtime_get_sync(link->supplier);
+}
 
 	device_links_read_unlock(idx);
 }
@@ -1603,13 +1738,16 @@ void pm_runtime_put_suppliers(struct device *dev)
 
 	list_for_each_entry_rcu(link, &dev->links.suppliers, c_node)
 		if (link->flags & DL_FLAG_PM_RUNTIME)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pm_runtime_put(link->supplier);
+}
 
 	device_links_read_unlock(idx);
 }
 
 void pm_runtime_new_link(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&dev->power.lock);
 	dev->power.links_count++;
 	spin_unlock_irq(&dev->power.lock);
@@ -1617,6 +1755,7 @@ void pm_runtime_new_link(struct device *dev)
 
 void pm_runtime_drop_link(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&dev->power.lock);
 	WARN_ON(dev->power.links_count == 0);
 	dev->power.links_count--;
@@ -1642,7 +1781,9 @@ int pm_runtime_force_suspend(struct device *dev)
 
 	pm_runtime_disable(dev);
 	if (pm_runtime_status_suspended(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	callback = RPM_GET_CALLBACK(dev, runtime_suspend);
 
@@ -1697,6 +1838,7 @@ int pm_runtime_force_resume(struct device *dev)
 	callback = RPM_GET_CALLBACK(dev, runtime_resume);
 
 	if (!callback) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOSYS;
 		goto out;
 	}
diff --git a/drivers/base/power/sysfs.c b/drivers/base/power/sysfs.c
index 156ab57..15459cd 100644
--- a/drivers/base/power/sysfs.c
+++ b/drivers/base/power/sysfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/base/power/sysfs.c - sysfs entries for device PM
  */
@@ -113,7 +115,9 @@ static ssize_t control_store(struct device * dev, struct device_attribute *attr,
 
 	cp = memchr(buf, '\n', n);
 	if (cp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = cp - buf;
+}
 	device_lock(dev);
 	if (len == sizeof ctrl_auto - 1 && strncmp(buf, ctrl_auto, len) == 0)
 		pm_runtime_allow(dev);
@@ -160,6 +164,7 @@ static ssize_t rtpm_status_show(struct device *dev,
 	const char *p;
 
 	if (dev->power.runtime_error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = "error\n";
 	} else if (dev->power.disable_depth) {
 		p = "unsupported\n";
@@ -189,6 +194,7 @@ static DEVICE_ATTR(runtime_status, 0444, rtpm_status_show, NULL);
 static ssize_t autosuspend_delay_ms_show(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev->power.use_autosuspend)
 		return -EIO;
 	return sprintf(buf, "%d\n", dev->power.autosuspend_delay);
@@ -200,7 +206,9 @@ static ssize_t autosuspend_delay_ms_store(struct device *dev,
 	long delay;
 
 	if (!dev->power.use_autosuspend)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	if (kstrtol(buf, 10, &delay) != 0 || delay != (int) delay)
 		return -EINVAL;
@@ -218,6 +226,7 @@ static ssize_t pm_qos_resume_latency_show(struct device *dev,
 					  struct device_attribute *attr,
 					  char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", dev_pm_qos_requested_resume_latency(dev));
 }
 
@@ -229,7 +238,9 @@ static ssize_t pm_qos_resume_latency_store(struct device *dev,
 	int ret;
 
 	if (kstrtos32(buf, 0, &value))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (value < 0)
 		return -EINVAL;
@@ -246,6 +257,7 @@ static ssize_t pm_qos_latency_tolerance_show(struct device *dev,
 					     struct device_attribute *attr,
 					     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	s32 value = dev_pm_qos_get_user_latency_tolerance(dev);
 
 	if (value < 0)
@@ -286,6 +298,7 @@ static ssize_t pm_qos_no_power_off_show(struct device *dev,
 					struct device_attribute *attr,
 					char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", !!(dev_pm_qos_requested_flags(dev)
 					& PM_QOS_FLAG_NO_POWER_OFF));
 }
@@ -297,7 +310,9 @@ static ssize_t pm_qos_no_power_off_store(struct device *dev,
 	int ret;
 
 	if (kstrtoint(buf, 0, &ret))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (ret != 0 && ret != 1)
 		return -EINVAL;
@@ -313,6 +328,7 @@ static ssize_t pm_qos_remote_wakeup_show(struct device *dev,
 					 struct device_attribute *attr,
 					 char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", !!(dev_pm_qos_requested_flags(dev)
 					& PM_QOS_FLAG_REMOTE_WAKEUP));
 }
@@ -324,7 +340,9 @@ static ssize_t pm_qos_remote_wakeup_store(struct device *dev,
 	int ret;
 
 	if (kstrtoint(buf, 0, &ret))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (ret != 0 && ret != 1)
 		return -EINVAL;
@@ -343,6 +361,7 @@ static const char _disabled[] = "disabled";
 static ssize_t
 wake_show(struct device * dev, struct device_attribute *attr, char * buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%s\n", device_can_wakeup(dev)
 		? (device_may_wakeup(dev) ? _enabled : _disabled)
 		: "");
@@ -356,7 +375,9 @@ wake_store(struct device * dev, struct device_attribute *attr,
 	int len = n;
 
 	if (!device_can_wakeup(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	cp = memchr(buf, '\n', n);
 	if (cp)
@@ -382,6 +403,7 @@ static ssize_t wakeup_count_show(struct device *dev,
 
 	spin_lock_irq(&dev->power.lock);
 	if (dev->power.wakeup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = dev->power.wakeup->event_count;
 		enabled = true;
 	}
@@ -399,6 +421,7 @@ static ssize_t wakeup_active_count_show(struct device *dev,
 
 	spin_lock_irq(&dev->power.lock);
 	if (dev->power.wakeup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = dev->power.wakeup->active_count;
 		enabled = true;
 	}
@@ -417,6 +440,7 @@ static ssize_t wakeup_abort_count_show(struct device *dev,
 
 	spin_lock_irq(&dev->power.lock);
 	if (dev->power.wakeup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = dev->power.wakeup->wakeup_count;
 		enabled = true;
 	}
@@ -435,6 +459,7 @@ static ssize_t wakeup_expire_count_show(struct device *dev,
 
 	spin_lock_irq(&dev->power.lock);
 	if (dev->power.wakeup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = dev->power.wakeup->expire_count;
 		enabled = true;
 	}
@@ -452,6 +477,7 @@ static ssize_t wakeup_active_show(struct device *dev,
 
 	spin_lock_irq(&dev->power.lock);
 	if (dev->power.wakeup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		active = dev->power.wakeup->active;
 		enabled = true;
 	}
@@ -469,6 +495,7 @@ static ssize_t wakeup_total_time_show(struct device *dev,
 
 	spin_lock_irq(&dev->power.lock);
 	if (dev->power.wakeup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msec = ktime_to_ms(dev->power.wakeup->total_time);
 		enabled = true;
 	}
@@ -486,6 +513,7 @@ static ssize_t wakeup_max_time_show(struct device *dev,
 
 	spin_lock_irq(&dev->power.lock);
 	if (dev->power.wakeup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msec = ktime_to_ms(dev->power.wakeup->max_time);
 		enabled = true;
 	}
@@ -503,6 +531,7 @@ static ssize_t wakeup_last_time_show(struct device *dev,
 
 	spin_lock_irq(&dev->power.lock);
 	if (dev->power.wakeup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msec = ktime_to_ms(dev->power.wakeup->last_time);
 		enabled = true;
 	}
@@ -685,7 +714,9 @@ int dpm_sysfs_add(struct device *dev)
 
 	rc = sysfs_create_group(&dev->kobj, &pm_attr_group);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	if (pm_runtime_callbacks_present(dev)) {
 		rc = sysfs_merge_group(&dev->kobj, &pm_runtime_attr_group);
@@ -698,11 +729,13 @@ int dpm_sysfs_add(struct device *dev)
 			goto err_runtime;
 	}
 	if (dev->power.set_latency_tolerance) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = sysfs_merge_group(&dev->kobj,
 				       &pm_qos_latency_tolerance_attr_group);
 		if (rc)
 			goto err_wakeup;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  err_wakeup:
@@ -721,6 +754,7 @@ int wakeup_sysfs_add(struct device *dev)
 
 void wakeup_sysfs_remove(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_unmerge_group(&dev->kobj, &pm_wakeup_attr_group);
 }
 
@@ -736,6 +770,7 @@ void pm_qos_sysfs_remove_resume_latency(struct device *dev)
 
 int pm_qos_sysfs_add_flags(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sysfs_merge_group(&dev->kobj, &pm_qos_flags_attr_group);
 }
 
@@ -746,12 +781,14 @@ void pm_qos_sysfs_remove_flags(struct device *dev)
 
 int pm_qos_sysfs_add_latency_tolerance(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sysfs_merge_group(&dev->kobj,
 				 &pm_qos_latency_tolerance_attr_group);
 }
 
 void pm_qos_sysfs_remove_latency_tolerance(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_unmerge_group(&dev->kobj, &pm_qos_latency_tolerance_attr_group);
 }
 
diff --git a/drivers/base/power/wakeirq.c b/drivers/base/power/wakeirq.c
index ae04298..47b8294 100644
--- a/drivers/base/power/wakeirq.c
+++ b/drivers/base/power/wakeirq.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * wakeirq.c - Device wakeirq helper functions
  *
@@ -35,6 +37,7 @@ static int dev_pm_attach_wake_irq(struct device *dev, int irq,
 	unsigned long flags;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev || !wirq)
 		return -EINVAL;
 
@@ -69,7 +72,9 @@ int dev_pm_set_wake_irq(struct device *dev, int irq)
 	int err;
 
 	if (irq < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	wirq = kzalloc(sizeof(*wirq), GFP_KERNEL);
 	if (!wirq)
@@ -103,7 +108,9 @@ void dev_pm_clear_wake_irq(struct device *dev)
 	unsigned long flags;
 
 	if (!wirq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_irqsave(&dev->power.lock, flags);
 	device_wakeup_detach_irq(dev);
@@ -143,6 +150,7 @@ static irqreturn_t handle_threaded_wake_irq(int irq, void *_wirq)
 
 	/* Maybe abort suspend? */
 	if (irqd_is_wakeup_set(irq_get_irq_data(irq))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_wakeup_event(wirq->dev, 0);
 
 		return IRQ_HANDLED;
@@ -180,7 +188,9 @@ int dev_pm_set_dedicated_wake_irq(struct device *dev, int irq)
 	int err;
 
 	if (irq < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	wirq = kzalloc(sizeof(*wirq), GFP_KERNEL);
 	if (!wirq)
@@ -235,6 +245,7 @@ void dev_pm_enable_wake_irq(struct device *dev)
 {
 	struct wake_irq *wirq = dev->power.wakeirq;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (wirq && (wirq->status & WAKE_IRQ_DEDICATED_ALLOCATED))
 		enable_irq(wirq->irq);
 }
@@ -252,6 +263,7 @@ void dev_pm_disable_wake_irq(struct device *dev)
 {
 	struct wake_irq *wirq = dev->power.wakeirq;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (wirq && (wirq->status & WAKE_IRQ_DEDICATED_ALLOCATED))
 		disable_irq_nosync(wirq->irq);
 }
@@ -277,15 +289,20 @@ void dev_pm_enable_wake_irq_check(struct device *dev,
 	struct wake_irq *wirq = dev->power.wakeirq;
 
 	if (!wirq || !((wirq->status & WAKE_IRQ_DEDICATED_MASK)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (likely(wirq->status & WAKE_IRQ_DEDICATED_MANAGED)) {
 		goto enable;
 	} else if (can_change_status) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wirq->status |= WAKE_IRQ_DEDICATED_MANAGED;
 		goto enable;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return;
 
 enable:
@@ -304,11 +321,16 @@ void dev_pm_disable_wake_irq_check(struct device *dev)
 	struct wake_irq *wirq = dev->power.wakeirq;
 
 	if (!wirq || !((wirq->status & WAKE_IRQ_DEDICATED_MASK)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (wirq->status & WAKE_IRQ_DEDICATED_MANAGED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		disable_irq_nosync(wirq->irq);
 }
+}
 
 /**
  * dev_pm_arm_wake_irq - Arm device wake-up
@@ -319,6 +341,7 @@ void dev_pm_disable_wake_irq_check(struct device *dev)
  */
 void dev_pm_arm_wake_irq(struct wake_irq *wirq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!wirq)
 		return;
 
@@ -339,6 +362,7 @@ void dev_pm_arm_wake_irq(struct wake_irq *wirq)
  */
 void dev_pm_disarm_wake_irq(struct wake_irq *wirq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!wirq)
 		return;
 
diff --git a/drivers/base/power/wakeup.c b/drivers/base/power/wakeup.c
index cdd6f25..897cf98 100644
--- a/drivers/base/power/wakeup.c
+++ b/drivers/base/power/wakeup.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/base/power/wakeup.c - System wakeup events framework
  *
@@ -43,6 +45,7 @@ static atomic_t combined_event_count = ATOMIC_INIT(0);
 
 static void split_counters(unsigned int *cnt, unsigned int *inpr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int comb = atomic_read(&combined_event_count);
 
 	*cnt = (comb >> IN_PROGRESS_BITS);
@@ -78,6 +81,7 @@ static struct wakeup_source deleted_ws = {
 void wakeup_source_prepare(struct wakeup_source *ws, const char *name)
 {
 	if (ws) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(ws, 0, sizeof(*ws));
 		ws->name = name;
 	}
@@ -94,7 +98,9 @@ struct wakeup_source *wakeup_source_create(const char *name)
 
 	ws = kmalloc(sizeof(*ws), GFP_KERNEL);
 	if (!ws)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	wakeup_source_prepare(ws, name ? kstrdup_const(name, GFP_KERNEL) : NULL);
 	return ws;
@@ -111,7 +117,9 @@ EXPORT_SYMBOL_GPL(wakeup_source_create);
 void wakeup_source_drop(struct wakeup_source *ws)
 {
 	if (!ws)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	del_timer_sync(&ws->timer);
 	__pm_relax(ws);
@@ -128,6 +136,7 @@ static void wakeup_source_record(struct wakeup_source *ws)
 	spin_lock_irqsave(&deleted_ws.lock, flags);
 
 	if (ws->event_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		deleted_ws.total_time =
 			ktime_add(deleted_ws.total_time, ws->total_time);
 		deleted_ws.prevent_sleep_time =
@@ -143,6 +152,7 @@ static void wakeup_source_record(struct wakeup_source *ws)
 		deleted_ws.wakeup_count += ws->wakeup_count;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&deleted_ws.lock, flags);
 }
 
@@ -155,7 +165,9 @@ static void wakeup_source_record(struct wakeup_source *ws)
 void wakeup_source_destroy(struct wakeup_source *ws)
 {
 	if (!ws)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	wakeup_source_drop(ws);
 	wakeup_source_record(ws);
@@ -173,7 +185,9 @@ void wakeup_source_add(struct wakeup_source *ws)
 	unsigned long flags;
 
 	if (WARN_ON(!ws))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_init(&ws->lock);
 	setup_timer(&ws->timer, pm_wakeup_timer_fn, (unsigned long)ws);
@@ -195,7 +209,9 @@ void wakeup_source_remove(struct wakeup_source *ws)
 	unsigned long flags;
 
 	if (WARN_ON(!ws))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_irqsave(&events_lock, flags);
 	list_del_rcu(&ws->entry);
@@ -242,14 +258,19 @@ EXPORT_SYMBOL_GPL(wakeup_source_unregister);
  */
 static int device_wakeup_attach(struct device *dev, struct wakeup_source *ws)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&dev->power.lock);
 	if (dev->power.wakeup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irq(&dev->power.lock);
 		return -EEXIST;
 	}
 	dev->power.wakeup = ws;
 	if (dev->power.wakeirq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_wakeup_attach_irq(dev, dev->power.wakeirq);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(&dev->power.lock);
 	return 0;
 }
@@ -266,16 +287,21 @@ int device_wakeup_enable(struct device *dev)
 	int ret;
 
 	if (!dev || !dev->power.can_wakeup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ws = wakeup_source_register(dev_name(dev));
 	if (!ws)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ret = device_wakeup_attach(dev, ws);
 	if (ret)
 		wakeup_source_unregister(ws);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(device_wakeup_enable);
@@ -298,6 +324,7 @@ int device_wakeup_attach_irq(struct device *dev,
 
 	ws = dev->power.wakeup;
 	if (!ws) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(dev, "forgot to call call device_init_wakeup?\n");
 		return -EINVAL;
 	}
@@ -323,8 +350,10 @@ void device_wakeup_detach_irq(struct device *dev)
 
 	ws = dev->power.wakeup;
 	if (ws)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ws->wakeirq = NULL;
 }
+}
 
 /**
  * device_wakeup_arm_wake_irqs(void)
@@ -337,6 +366,7 @@ void device_wakeup_arm_wake_irqs(void)
 	int srcuidx;
 
 	srcuidx = srcu_read_lock(&wakeup_srcu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(ws, &wakeup_sources, entry)
 		dev_pm_arm_wake_irq(ws->wakeirq);
 	srcu_read_unlock(&wakeup_srcu, srcuidx);
@@ -353,6 +383,7 @@ void device_wakeup_disarm_wake_irqs(void)
 	int srcuidx;
 
 	srcuidx = srcu_read_lock(&wakeup_srcu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(ws, &wakeup_sources, entry)
 		dev_pm_disarm_wake_irq(ws->wakeirq);
 	srcu_read_unlock(&wakeup_srcu, srcuidx);
@@ -387,8 +418,11 @@ int device_wakeup_disable(struct device *dev)
 	struct wakeup_source *ws;
 
 	if (!dev || !dev->power.can_wakeup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ws = device_wakeup_detach(dev);
 	wakeup_source_unregister(ws);
 	return 0;
@@ -410,7 +444,9 @@ EXPORT_SYMBOL_GPL(device_wakeup_disable);
 void device_set_wakeup_capable(struct device *dev, bool capable)
 {
 	if (!!dev->power.can_wakeup == !!capable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	dev->power.can_wakeup = capable;
 	if (device_is_registered(dev) && !list_empty(&dev->power.entry)) {
@@ -418,8 +454,11 @@ void device_set_wakeup_capable(struct device *dev, bool capable)
 			int ret = wakeup_sysfs_add(dev);
 
 			if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev_info(dev, "Wakeup sysfs attributes not added\n");
+}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			wakeup_sysfs_remove(dev);
 		}
 	}
@@ -442,18 +481,25 @@ int device_init_wakeup(struct device *dev, bool enable)
 	int ret = 0;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (enable) {
 		device_set_wakeup_capable(dev, true);
 		ret = device_wakeup_enable(dev);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->power.can_wakeup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			device_wakeup_disable(dev);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_set_wakeup_capable(dev, false);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(device_init_wakeup);
@@ -465,8 +511,11 @@ EXPORT_SYMBOL_GPL(device_init_wakeup);
 int device_set_wakeup_enable(struct device *dev, bool enable)
 {
 	if (!dev || !dev->power.can_wakeup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return enable ? device_wakeup_enable(dev) : device_wakeup_disable(dev);
 }
 EXPORT_SYMBOL_GPL(device_set_wakeup_enable);
@@ -533,7 +582,9 @@ static void wakeup_source_activate(struct wakeup_source *ws)
 	ws->active_count++;
 	ws->last_time = ktime_get();
 	if (ws->autosleep_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ws->start_prevent_time = ws->last_time;
+}
 
 	/* Increment the counter of events in progress. */
 	cec = atomic_inc_return(&combined_event_count);
@@ -551,14 +602,18 @@ static void wakeup_source_report_event(struct wakeup_source *ws, bool hard)
 	ws->event_count++;
 	/* This is racy, but the counter is approximate anyway. */
 	if (events_check_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ws->wakeup_count++;
+}
 
 	if (!ws->active)
 		wakeup_source_activate(ws);
 
 	if (hard)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_system_wakeup();
 }
+}
 
 /**
  * __pm_stay_awake - Notify the PM core of a wakeup event.
@@ -571,7 +626,9 @@ void __pm_stay_awake(struct wakeup_source *ws)
 	unsigned long flags;
 
 	if (!ws)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_irqsave(&ws->lock, flags);
 
@@ -599,7 +656,9 @@ void pm_stay_awake(struct device *dev)
 	unsigned long flags;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_irqsave(&dev->power.lock, flags);
 	__pm_stay_awake(dev->power.wakeup);
@@ -643,6 +702,7 @@ static void wakeup_source_deactivate(struct wakeup_source *ws)
 	 * case ws->relax_count will be different from ws->active_count.
 	 */
 	if (ws->relax_count != ws->active_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ws->relax_count--;
 		return;
 	}
@@ -660,7 +720,9 @@ static void wakeup_source_deactivate(struct wakeup_source *ws)
 	ws->timer_expires = 0;
 
 	if (ws->autosleep_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		update_prevent_sleep_time(ws, now);
+}
 
 	/*
 	 * Increment the counter of registered wakeup events and decrement the
@@ -671,8 +733,10 @@ static void wakeup_source_deactivate(struct wakeup_source *ws)
 
 	split_counters(&cnt, &inpr);
 	if (!inpr && waitqueue_active(&wakeup_count_wait_queue))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wake_up(&wakeup_count_wait_queue);
 }
+}
 
 /**
  * __pm_relax - Notify the PM core that processing of a wakeup event has ended.
@@ -688,11 +752,14 @@ void __pm_relax(struct wakeup_source *ws)
 	unsigned long flags;
 
 	if (!ws)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_irqsave(&ws->lock, flags);
 	if (ws->active)
 		wakeup_source_deactivate(ws);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&ws->lock, flags);
 }
 EXPORT_SYMBOL_GPL(__pm_relax);
@@ -708,7 +775,9 @@ void pm_relax(struct device *dev)
 	unsigned long flags;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_irqsave(&dev->power.lock, flags);
 	__pm_relax(dev->power.wakeup);
@@ -729,6 +798,7 @@ static void pm_wakeup_timer_fn(unsigned long data)
 	struct wakeup_source *ws = (struct wakeup_source *)data;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ws->lock, flags);
 
 	if (ws->active && ws->timer_expires
@@ -759,7 +829,9 @@ void pm_wakeup_ws_event(struct wakeup_source *ws, unsigned int msec, bool hard)
 	unsigned long expires;
 
 	if (!ws)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_irqsave(&ws->lock, flags);
 
@@ -797,7 +869,9 @@ void pm_wakeup_dev_event(struct device *dev, unsigned int msec, bool hard)
 	unsigned long flags;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_irqsave(&dev->power.lock, flags);
 	pm_wakeup_ws_event(dev->power.wakeup, msec, hard);
@@ -812,6 +886,7 @@ void pm_print_active_wakeup_sources(void)
 	struct wakeup_source *last_activity_ws = NULL;
 
 	srcuidx = srcu_read_lock(&wakeup_srcu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(ws, &wakeup_sources, entry) {
 		if (ws->active) {
 			pr_debug("active wakeup source: %s\n", ws->name);
@@ -844,6 +919,7 @@ bool pm_wakeup_pending(void)
 	unsigned long flags;
 	bool ret = false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&events_lock, flags);
 	if (events_check_enabled) {
 		unsigned int cnt, inpr;
@@ -864,6 +940,7 @@ bool pm_wakeup_pending(void)
 
 void pm_system_wakeup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_inc(&pm_abort_suspend);
 	s2idle_wake();
 }
@@ -871,11 +948,13 @@ EXPORT_SYMBOL_GPL(pm_system_wakeup);
 
 void pm_system_cancel_wakeup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_dec(&pm_abort_suspend);
 }
 
 void pm_wakeup_clear(bool reset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_wakeup_irq = 0;
 	if (reset)
 		atomic_set(&pm_abort_suspend, 0);
@@ -883,6 +962,7 @@ void pm_wakeup_clear(bool reset)
 
 void pm_system_irq_wakeup(unsigned int irq_number)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pm_wakeup_irq == 0) {
 		pm_wakeup_irq = irq_number;
 		pm_system_wakeup();
@@ -906,6 +986,7 @@ bool pm_get_wakeup_count(unsigned int *count, bool block)
 	unsigned int cnt, inpr;
 
 	if (block) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DEFINE_WAIT(wait);
 
 		for (;;) {
@@ -941,6 +1022,7 @@ bool pm_save_wakeup_count(unsigned int count)
 	unsigned long flags;
 
 	events_check_enabled = false;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&events_lock, flags);
 	split_counters(&cnt, &inpr);
 	if (cnt == count && inpr == 0) {
@@ -997,6 +1079,7 @@ static int print_wakeup_source_stats(struct seq_file *m,
 	ktime_t active_time;
 	ktime_t prevent_sleep_time;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ws->lock, flags);
 
 	total_time = ws->total_time;
@@ -1044,6 +1127,7 @@ static int wakeup_sources_stats_show(struct seq_file *m, void *unused)
 		"last_change\tprevent_suspend_time\n");
 
 	srcuidx = srcu_read_lock(&wakeup_srcu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(ws, &wakeup_sources, entry)
 		print_wakeup_source_stats(m, ws);
 	srcu_read_unlock(&wakeup_srcu, srcuidx);
@@ -1055,6 +1139,7 @@ static int wakeup_sources_stats_show(struct seq_file *m, void *unused)
 
 static int wakeup_sources_stats_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, wakeup_sources_stats_show, NULL);
 }
 
diff --git a/drivers/base/property.c b/drivers/base/property.c
index 7ed99c1..04d040e 100644
--- a/drivers/base/property.c
+++ b/drivers/base/property.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * property.c - Unified device property interface.
  *
@@ -30,6 +32,7 @@ static const struct fwnode_operations pset_fwnode_ops;
 
 static inline bool is_pset_node(const struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !IS_ERR_OR_NULL(fwnode) && fwnode->ops == &pset_fwnode_ops;
 }
 
@@ -48,6 +51,7 @@ pset_prop_get(const struct property_set *pset, const char *name)
 {
 	const struct property_entry *prop;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pset || !pset->properties)
 		return NULL;
 
@@ -66,7 +70,9 @@ static const void *pset_prop_find(const struct property_set *pset,
 
 	prop = pset_prop_get(pset, propname);
 	if (!prop)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 	if (prop->is_array)
 		pointer = prop->pointer.raw_data;
 	else
@@ -87,7 +93,9 @@ static int pset_prop_read_u8_array(const struct property_set *pset,
 
 	pointer = pset_prop_find(pset, propname, length);
 	if (IS_ERR(pointer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(pointer);
+}
 
 	memcpy(values, pointer, length);
 	return 0;
@@ -102,7 +110,9 @@ static int pset_prop_read_u16_array(const struct property_set *pset,
 
 	pointer = pset_prop_find(pset, propname, length);
 	if (IS_ERR(pointer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(pointer);
+}
 
 	memcpy(values, pointer, length);
 	return 0;
@@ -117,7 +127,9 @@ static int pset_prop_read_u32_array(const struct property_set *pset,
 
 	pointer = pset_prop_find(pset, propname, length);
 	if (IS_ERR(pointer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(pointer);
+}
 
 	memcpy(values, pointer, length);
 	return 0;
@@ -132,7 +144,9 @@ static int pset_prop_read_u64_array(const struct property_set *pset,
 
 	pointer = pset_prop_find(pset, propname, length);
 	if (IS_ERR(pointer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(pointer);
+}
 
 	memcpy(values, pointer, length);
 	return 0;
@@ -145,7 +159,9 @@ static int pset_prop_count_elems_of_size(const struct property_set *pset,
 
 	prop = pset_prop_get(pset, propname);
 	if (!prop)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	return prop->length / length;
 }
@@ -161,7 +177,9 @@ static int pset_prop_read_string_array(const struct property_set *pset,
 	/* Find out the array length. */
 	prop = pset_prop_get(pset, propname);
 	if (!prop)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!prop->is_array)
 		/* The array length for a non-array string property is 1. */
@@ -189,6 +207,7 @@ static int pset_prop_read_string_array(const struct property_set *pset,
 
 struct fwnode_handle *dev_fwnode(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return IS_ENABLED(CONFIG_OF) && dev->of_node ?
 		&dev->of_node->fwnode : dev->fwnode;
 }
@@ -197,6 +216,7 @@ EXPORT_SYMBOL_GPL(dev_fwnode);
 static bool pset_fwnode_property_present(const struct fwnode_handle *fwnode,
 					 const char *propname)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !!pset_prop_get(to_pset_node(fwnode), propname);
 }
 
@@ -205,6 +225,7 @@ static int pset_fwnode_read_int_array(const struct fwnode_handle *fwnode,
 				      unsigned int elem_size, void *val,
 				      size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct property_set *node = to_pset_node(fwnode);
 
 	if (!val)
@@ -229,6 +250,7 @@ pset_fwnode_property_read_string_array(const struct fwnode_handle *fwnode,
 				       const char *propname,
 				       const char **val, size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pset_prop_read_string_array(to_pset_node(fwnode), propname,
 					   val, nval);
 }
@@ -248,6 +270,7 @@ static const struct fwnode_operations pset_fwnode_ops = {
  */
 bool device_property_present(struct device *dev, const char *propname)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_property_present(dev_fwnode(dev), propname);
 }
 EXPORT_SYMBOL_GPL(device_property_present);
@@ -262,6 +285,7 @@ bool fwnode_property_present(const struct fwnode_handle *fwnode,
 {
 	bool ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = fwnode_call_bool_op(fwnode, property_present, propname);
 	if (ret == false && !IS_ERR_OR_NULL(fwnode) &&
 	    !IS_ERR_OR_NULL(fwnode->secondary))
@@ -292,6 +316,7 @@ EXPORT_SYMBOL_GPL(fwnode_property_present);
 int device_property_read_u8_array(struct device *dev, const char *propname,
 				  u8 *val, size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_property_read_u8_array(dev_fwnode(dev), propname, val, nval);
 }
 EXPORT_SYMBOL_GPL(device_property_read_u8_array);
@@ -317,6 +342,7 @@ EXPORT_SYMBOL_GPL(device_property_read_u8_array);
 int device_property_read_u16_array(struct device *dev, const char *propname,
 				   u16 *val, size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_property_read_u16_array(dev_fwnode(dev), propname, val, nval);
 }
 EXPORT_SYMBOL_GPL(device_property_read_u16_array);
@@ -342,6 +368,7 @@ EXPORT_SYMBOL_GPL(device_property_read_u16_array);
 int device_property_read_u32_array(struct device *dev, const char *propname,
 				   u32 *val, size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_property_read_u32_array(dev_fwnode(dev), propname, val, nval);
 }
 EXPORT_SYMBOL_GPL(device_property_read_u32_array);
@@ -367,6 +394,7 @@ EXPORT_SYMBOL_GPL(device_property_read_u32_array);
 int device_property_read_u64_array(struct device *dev, const char *propname,
 				   u64 *val, size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_property_read_u64_array(dev_fwnode(dev), propname, val, nval);
 }
 EXPORT_SYMBOL_GPL(device_property_read_u64_array);
@@ -392,6 +420,7 @@ EXPORT_SYMBOL_GPL(device_property_read_u64_array);
 int device_property_read_string_array(struct device *dev, const char *propname,
 				      const char **val, size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_property_read_string_array(dev_fwnode(dev), propname, val, nval);
 }
 EXPORT_SYMBOL_GPL(device_property_read_string_array);
@@ -414,6 +443,7 @@ EXPORT_SYMBOL_GPL(device_property_read_string_array);
 int device_property_read_string(struct device *dev, const char *propname,
 				const char **val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_property_read_string(dev_fwnode(dev), propname, val);
 }
 EXPORT_SYMBOL_GPL(device_property_read_string);
@@ -436,6 +466,7 @@ EXPORT_SYMBOL_GPL(device_property_read_string);
 int device_property_match_string(struct device *dev, const char *propname,
 				 const char *string)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_property_match_string(dev_fwnode(dev), propname, string);
 }
 EXPORT_SYMBOL_GPL(device_property_match_string);
@@ -447,6 +478,7 @@ static int fwnode_property_read_int_array(const struct fwnode_handle *fwnode,
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = fwnode_call_int_op(fwnode, property_read_int_array, propname,
 				 elem_size, val, nval);
 	if (ret == -EINVAL && !IS_ERR_OR_NULL(fwnode) &&
@@ -479,6 +511,7 @@ static int fwnode_property_read_int_array(const struct fwnode_handle *fwnode,
 int fwnode_property_read_u8_array(const struct fwnode_handle *fwnode,
 				  const char *propname, u8 *val, size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_property_read_int_array(fwnode, propname, sizeof(u8),
 					      val, nval);
 }
@@ -505,6 +538,7 @@ EXPORT_SYMBOL_GPL(fwnode_property_read_u8_array);
 int fwnode_property_read_u16_array(const struct fwnode_handle *fwnode,
 				   const char *propname, u16 *val, size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_property_read_int_array(fwnode, propname, sizeof(u16),
 					      val, nval);
 }
@@ -531,6 +565,7 @@ EXPORT_SYMBOL_GPL(fwnode_property_read_u16_array);
 int fwnode_property_read_u32_array(const struct fwnode_handle *fwnode,
 				   const char *propname, u32 *val, size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_property_read_int_array(fwnode, propname, sizeof(u32),
 					      val, nval);
 }
@@ -557,6 +592,7 @@ EXPORT_SYMBOL_GPL(fwnode_property_read_u32_array);
 int fwnode_property_read_u64_array(const struct fwnode_handle *fwnode,
 				   const char *propname, u64 *val, size_t nval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_property_read_int_array(fwnode, propname, sizeof(u64),
 					      val, nval);
 }
@@ -586,6 +622,7 @@ int fwnode_property_read_string_array(const struct fwnode_handle *fwnode,
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = fwnode_call_int_op(fwnode, property_read_string_array, propname,
 				 val, nval);
 	if (ret == -EINVAL && !IS_ERR_OR_NULL(fwnode) &&
@@ -615,6 +652,7 @@ EXPORT_SYMBOL_GPL(fwnode_property_read_string_array);
 int fwnode_property_read_string(const struct fwnode_handle *fwnode,
 				const char *propname, const char **val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = fwnode_property_read_string_array(fwnode, propname, val, 1);
 
 	return ret < 0 ? ret : 0;
@@ -644,7 +682,9 @@ int fwnode_property_match_string(const struct fwnode_handle *fwnode,
 
 	nval = fwnode_property_read_string_array(fwnode, propname, NULL, 0);
 	if (nval < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return nval;
+}
 
 	if (nval == 0)
 		return -ENODATA;
@@ -693,6 +733,7 @@ int fwnode_property_get_reference_args(const struct fwnode_handle *fwnode,
 				       unsigned int nargs, unsigned int index,
 				       struct fwnode_reference_args *args)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_call_int_op(fwnode, get_reference_args, prop, nargs_prop,
 				  nargs, index, args);
 }
@@ -707,7 +748,9 @@ static int property_copy_string_array(struct property_entry *dst,
 
 	d = kcalloc(nval, sizeof(*d), GFP_KERNEL);
 	if (!d)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	for (i = 0; i < nval; i++) {
 		d[i] = kstrdup(src->pointer.str[i], GFP_KERNEL);
@@ -730,7 +773,9 @@ static int property_entry_copy_data(struct property_entry *dst,
 
 	dst->name = kstrdup(src->name, GFP_KERNEL);
 	if (!dst->name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (src->is_array) {
 		if (!src->length) {
@@ -776,6 +821,7 @@ static void property_entry_free_data(const struct property_entry *p)
 	size_t i, nval;
 
 	if (p->is_array) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (p->is_string && p->pointer.str) {
 			nval = p->length / sizeof(const char *);
 			for (i = 0; i < nval; i++)
@@ -801,6 +847,7 @@ property_entries_dup(const struct property_entry *properties)
 	struct property_entry *p;
 	int i, n = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (properties[n].name)
 		n++;
 
@@ -833,6 +880,7 @@ void property_entries_free(const struct property_entry *properties)
 {
 	const struct property_entry *p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (p = properties; p->name; p++)
 		property_entry_free_data(p);
 
@@ -849,6 +897,7 @@ EXPORT_SYMBOL_GPL(property_entries_free);
  */
 static void pset_free_set(struct property_set *pset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pset)
 		return;
 
@@ -873,7 +922,9 @@ static struct property_set *pset_copy_set(const struct property_set *pset)
 
 	p = kzalloc(sizeof(*p), GFP_KERNEL);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	properties = property_entries_dup(pset->properties);
 	if (IS_ERR(properties)) {
@@ -900,7 +951,9 @@ void device_remove_properties(struct device *dev)
 
 	fwnode = dev_fwnode(dev);
 	if (!fwnode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	/*
 	 * Pick either primary or secondary node depending which one holds
 	 * the pset. If there is no real firmware node (ACPI/DT) primary
@@ -908,15 +961,23 @@ void device_remove_properties(struct device *dev)
 	 */
 	pset = to_pset_node(fwnode);
 	if (pset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_primary_fwnode(dev, NULL);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pset = to_pset_node(fwnode->secondary);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pset && dev == pset->dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_secondary_fwnode(dev, NULL);
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pset && dev == pset->dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pset_free_set(pset);
 }
+}
 EXPORT_SYMBOL_GPL(device_remove_properties);
 
 /**
@@ -934,7 +995,9 @@ int device_add_properties(struct device *dev,
 	struct property_set *p, pset;
 
 	if (!properties)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	pset.properties = properties;
 
@@ -962,6 +1025,7 @@ EXPORT_SYMBOL_GPL(device_add_properties);
  */
 struct fwnode_handle *fwnode_get_next_parent(struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fwnode_handle *parent = fwnode_get_parent(fwnode);
 
 	fwnode_handle_put(fwnode);
@@ -979,6 +1043,7 @@ EXPORT_SYMBOL_GPL(fwnode_get_next_parent);
  */
 struct fwnode_handle *fwnode_get_parent(const struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_call_ptr_op(fwnode, get_parent);
 }
 EXPORT_SYMBOL_GPL(fwnode_get_parent);
@@ -992,6 +1057,7 @@ struct fwnode_handle *
 fwnode_get_next_child_node(const struct fwnode_handle *fwnode,
 			   struct fwnode_handle *child)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_call_ptr_op(fwnode, get_next_child_node, child);
 }
 EXPORT_SYMBOL_GPL(fwnode_get_next_child_node);
@@ -1004,6 +1070,7 @@ EXPORT_SYMBOL_GPL(fwnode_get_next_child_node);
 struct fwnode_handle *device_get_next_child_node(struct device *dev,
 						 struct fwnode_handle *child)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(dev);
 	struct fwnode_handle *fwnode = NULL;
 
@@ -1025,6 +1092,7 @@ struct fwnode_handle *
 fwnode_get_named_child_node(const struct fwnode_handle *fwnode,
 			    const char *childname)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_call_ptr_op(fwnode, get_named_child_node, childname);
 }
 EXPORT_SYMBOL_GPL(fwnode_get_named_child_node);
@@ -1037,6 +1105,7 @@ EXPORT_SYMBOL_GPL(fwnode_get_named_child_node);
 struct fwnode_handle *device_get_named_child_node(struct device *dev,
 						  const char *childname)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_get_named_child_node(dev_fwnode(dev), childname);
 }
 EXPORT_SYMBOL_GPL(device_get_named_child_node);
@@ -1047,6 +1116,7 @@ EXPORT_SYMBOL_GPL(device_get_named_child_node);
  */
 void fwnode_handle_get(struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fwnode_call_void_op(fwnode, get);
 }
 EXPORT_SYMBOL_GPL(fwnode_handle_get);
@@ -1061,6 +1131,7 @@ EXPORT_SYMBOL_GPL(fwnode_handle_get);
  */
 void fwnode_handle_put(struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fwnode_call_void_op(fwnode, put);
 }
 EXPORT_SYMBOL_GPL(fwnode_handle_put);
@@ -1071,6 +1142,7 @@ EXPORT_SYMBOL_GPL(fwnode_handle_put);
  */
 bool fwnode_device_is_available(const struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_call_bool_op(fwnode, device_is_available);
 }
 EXPORT_SYMBOL_GPL(fwnode_device_is_available);
@@ -1084,6 +1156,7 @@ unsigned int device_get_child_node_count(struct device *dev)
 	struct fwnode_handle *child;
 	unsigned int count = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_for_each_child_node(dev, child)
 		count++;
 
@@ -1108,6 +1181,7 @@ enum dev_dma_attr device_get_dma_attr(struct device *dev)
 {
 	enum dev_dma_attr attr = DEV_DMA_NOT_SUPPORTED;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ENABLED(CONFIG_OF) && dev->of_node) {
 		if (of_dma_is_coherent(dev->of_node))
 			attr = DEV_DMA_COHERENT;
@@ -1135,8 +1209,10 @@ int device_get_phy_mode(struct device *dev)
 
 	err = device_property_read_string(dev, "phy-mode", &pm);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = device_property_read_string(dev,
 						  "phy-connection-type", &pm);
+}
 	if (err < 0)
 		return err;
 
@@ -1152,6 +1228,7 @@ static void *device_get_mac_addr(struct device *dev,
 				 const char *name, char *addr,
 				 int alen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = device_property_read_u8_array(dev, name, addr, alen);
 
 	if (ret == 0 && alen == ETH_ALEN && is_valid_ether_addr(addr))
@@ -1188,7 +1265,9 @@ void *device_get_mac_address(struct device *dev, char *addr, int alen)
 
 	res = device_get_mac_addr(dev, "mac-address", addr, alen);
 	if (res)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return res;
+}
 
 	res = device_get_mac_addr(dev, "local-mac-address", addr, alen);
 	if (res)
@@ -1210,6 +1289,7 @@ struct fwnode_handle *
 fwnode_graph_get_next_endpoint(const struct fwnode_handle *fwnode,
 			       struct fwnode_handle *prev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_call_ptr_op(fwnode, graph_get_next_endpoint, prev);
 }
 EXPORT_SYMBOL_GPL(fwnode_graph_get_next_endpoint);
@@ -1226,6 +1306,7 @@ fwnode_graph_get_port_parent(const struct fwnode_handle *endpoint)
 	struct fwnode_handle *port, *parent;
 
 	port = fwnode_get_parent(endpoint);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	parent = fwnode_call_ptr_op(port, graph_get_port_parent);
 
 	fwnode_handle_put(port);
@@ -1263,6 +1344,7 @@ EXPORT_SYMBOL_GPL(fwnode_graph_get_remote_port_parent);
 struct fwnode_handle *
 fwnode_graph_get_remote_port(const struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_get_next_parent(fwnode_graph_get_remote_endpoint(fwnode));
 }
 EXPORT_SYMBOL_GPL(fwnode_graph_get_remote_port);
@@ -1276,6 +1358,7 @@ EXPORT_SYMBOL_GPL(fwnode_graph_get_remote_port);
 struct fwnode_handle *
 fwnode_graph_get_remote_endpoint(const struct fwnode_handle *fwnode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fwnode_call_ptr_op(fwnode, graph_get_remote_endpoint);
 }
 EXPORT_SYMBOL_GPL(fwnode_graph_get_remote_endpoint);
@@ -1295,6 +1378,7 @@ fwnode_graph_get_remote_node(const struct fwnode_handle *fwnode, u32 port_id,
 {
 	struct fwnode_handle *endpoint = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((endpoint = fwnode_graph_get_next_endpoint(fwnode, endpoint))) {
 		struct fwnode_endpoint fwnode_ep;
 		struct fwnode_handle *remote;
@@ -1330,6 +1414,7 @@ EXPORT_SYMBOL_GPL(fwnode_graph_get_remote_node);
 int fwnode_graph_parse_endpoint(const struct fwnode_handle *fwnode,
 				struct fwnode_endpoint *endpoint)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(endpoint, 0, sizeof(*endpoint));
 
 	return fwnode_call_int_op(fwnode, graph_parse_endpoint, endpoint);
diff --git a/drivers/base/regmap/regmap-debugfs.c b/drivers/base/regmap/regmap-debugfs.c
index 36ce351..724f7b1 100644
--- a/drivers/base/regmap/regmap-debugfs.c
+++ b/drivers/base/regmap/regmap-debugfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Register map access API - debugfs
  *
@@ -32,6 +34,7 @@ static DEFINE_MUTEX(regmap_debugfs_early_lock);
 /* Calculate the length of a fixed format  */
 static size_t regmap_calc_reg_len(int max_val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return snprintf(NULL, 0, "%x", max_val);
 }
 
@@ -45,7 +48,9 @@ static ssize_t regmap_name_read_file(struct file *file,
 
 	buf = kmalloc(PAGE_SIZE, GFP_KERNEL);
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ret = snprintf(buf, PAGE_SIZE, "%s\n", map->dev->driver->name);
 	if (ret < 0) {
@@ -68,6 +73,7 @@ static void regmap_debugfs_free_dump_cache(struct regmap *map)
 {
 	struct regmap_debugfs_off_cache *c;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!list_empty(&map->debugfs_off_cache)) {
 		c = list_first_entry(&map->debugfs_off_cache,
 				     struct regmap_debugfs_off_cache,
@@ -79,6 +85,7 @@ static void regmap_debugfs_free_dump_cache(struct regmap *map)
 
 static bool regmap_printable(struct regmap *map, unsigned int reg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (regmap_precious(map, reg))
 		return false;
 
@@ -105,7 +112,9 @@ static unsigned int regmap_debugfs_get_dump_start(struct regmap *map,
 
 	/* Suppress the cache if we're using a subrange */
 	if (base)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return base;
+}
 
 	/*
 	 * If we don't have a cache build one so we don't have to do a
@@ -201,6 +210,7 @@ static ssize_t regmap_read_debugfs(struct regmap *map, unsigned int from,
 	char *buf;
 	unsigned int val, start_reg;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (*ppos < 0 || !count)
 		return -EINVAL;
 
@@ -349,6 +359,7 @@ static ssize_t regmap_reg_ranges_read_file(struct file *file,
 	int ret;
 	unsigned entry_len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (*ppos < 0 || !count)
 		return -EINVAL;
 
@@ -414,6 +425,7 @@ static int regmap_access_show(struct seq_file *s, void *ignored)
 
 	reg_len = regmap_calc_reg_len(map->max_register);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i <= map->max_register; i += map->reg_stride) {
 		/* Ignore registers which are neither readable nor writable */
 		if (!regmap_readable(map, i) && !regmap_writeable(map, i))
@@ -432,6 +444,7 @@ static int regmap_access_show(struct seq_file *s, void *ignored)
 
 static int access_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, regmap_access_show, inode->i_private);
 }
 
@@ -446,6 +459,7 @@ static ssize_t regmap_cache_only_write_file(struct file *file,
 					    const char __user *user_buf,
 					    size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct regmap *map = container_of(file->private_data,
 					  struct regmap, cache_only);
 	ssize_t result;
@@ -491,6 +505,7 @@ static ssize_t regmap_cache_bypass_write_file(struct file *file,
 					      const char __user *user_buf,
 					      size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct regmap *map = container_of(file->private_data,
 					  struct regmap, cache_bypass);
 	ssize_t result;
@@ -534,7 +549,9 @@ void regmap_debugfs_init(struct regmap *map, const char *name)
 		struct regmap_debugfs_node *node;
 		node = kzalloc(sizeof(*node), GFP_KERNEL);
 		if (!node)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 		node->map = map;
 		node->name = name;
 		mutex_lock(&regmap_debugfs_early_lock);
@@ -612,6 +629,7 @@ void regmap_debugfs_init(struct regmap *map, const char *name)
 
 void regmap_debugfs_exit(struct regmap *map)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (map->debugfs) {
 		debugfs_remove_recursive(map->debugfs);
 		mutex_lock(&map->cache_lock);
@@ -639,12 +657,14 @@ void regmap_debugfs_initcall(void)
 
 	regmap_debugfs_root = debugfs_create_dir("regmap", NULL);
 	if (!regmap_debugfs_root) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("regmap: Failed to create debugfs root\n");
 		return;
 	}
 
 	mutex_lock(&regmap_debugfs_early_lock);
 	list_for_each_entry_safe(node, tmp, &regmap_debugfs_early_list, link) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		regmap_debugfs_init(node->map, node->name);
 		list_del(&node->link);
 		kfree(node);
diff --git a/drivers/base/regmap/regmap.c b/drivers/base/regmap/regmap.c
index b9a779a..8521225 100644
--- a/drivers/base/regmap/regmap.c
+++ b/drivers/base/regmap/regmap.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Register map access API
  *
@@ -56,6 +58,7 @@ bool regmap_reg_in_ranges(unsigned int reg,
 	const struct regmap_range *r;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0, r = ranges; i < nranges; i++, r++)
 		if (regmap_reg_in_range(reg, r))
 			return true;
@@ -81,6 +84,7 @@ EXPORT_SYMBOL_GPL(regmap_check_range_table);
 
 bool regmap_writeable(struct regmap *map, unsigned int reg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (map->max_register && reg > map->max_register)
 		return false;
 
@@ -99,7 +103,9 @@ bool regmap_cached(struct regmap *map, unsigned int reg)
 	unsigned int val;
 
 	if (map->cache == REGCACHE_NONE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	if (!map->cache_ops)
 		return false;
@@ -118,6 +124,7 @@ bool regmap_cached(struct regmap *map, unsigned int reg)
 
 bool regmap_readable(struct regmap *map, unsigned int reg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!map->reg_read)
 		return false;
 
@@ -138,6 +145,7 @@ bool regmap_readable(struct regmap *map, unsigned int reg)
 
 bool regmap_volatile(struct regmap *map, unsigned int reg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!map->format.format_write && !regmap_readable(map, reg))
 		return false;
 
@@ -155,6 +163,7 @@ bool regmap_volatile(struct regmap *map, unsigned int reg)
 
 bool regmap_precious(struct regmap *map, unsigned int reg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!regmap_readable(map, reg))
 		return false;
 
@@ -172,6 +181,7 @@ static bool regmap_volatile_range(struct regmap *map, unsigned int reg,
 {
 	unsigned int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < num; i++)
 		if (!regmap_volatile(map, reg + i))
 			return false;
@@ -191,6 +201,7 @@ static void regmap_format_4_12_write(struct regmap *map,
 				     unsigned int reg, unsigned int val)
 {
 	__be16 *out = map->work_buf;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*out = cpu_to_be16((reg << 12) | val);
 }
 
@@ -198,6 +209,7 @@ static void regmap_format_7_9_write(struct regmap *map,
 				    unsigned int reg, unsigned int val)
 {
 	__be16 *out = map->work_buf;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*out = cpu_to_be16((reg << 9) | val);
 }
 
@@ -222,6 +234,7 @@ static void regmap_format_16_be(void *buf, unsigned int val, unsigned int shift)
 {
 	__be16 *b = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	b[0] = cpu_to_be16(val << shift);
 }
 
@@ -235,6 +248,7 @@ static void regmap_format_16_le(void *buf, unsigned int val, unsigned int shift)
 static void regmap_format_16_native(void *buf, unsigned int val,
 				    unsigned int shift)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*(u16 *)buf = val << shift;
 }
 
@@ -253,6 +267,7 @@ static void regmap_format_32_be(void *buf, unsigned int val, unsigned int shift)
 {
 	__be32 *b = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	b[0] = cpu_to_be32(val << shift);
 }
 
@@ -266,6 +281,7 @@ static void regmap_format_32_le(void *buf, unsigned int val, unsigned int shift)
 static void regmap_format_32_native(void *buf, unsigned int val,
 				    unsigned int shift)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*(u32 *)buf = val << shift;
 }
 
@@ -274,6 +290,7 @@ static void regmap_format_64_be(void *buf, unsigned int val, unsigned int shift)
 {
 	__be64 *b = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	b[0] = cpu_to_be64((u64)val << shift);
 }
 
@@ -287,6 +304,7 @@ static void regmap_format_64_le(void *buf, unsigned int val, unsigned int shift)
 static void regmap_format_64_native(void *buf, unsigned int val,
 				    unsigned int shift)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*(u64 *)buf = (u64)val << shift;
 }
 #endif
@@ -306,6 +324,7 @@ static unsigned int regmap_parse_16_be(const void *buf)
 {
 	const __be16 *b = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return be16_to_cpu(b[0]);
 }
 
@@ -320,6 +339,7 @@ static void regmap_parse_16_be_inplace(void *buf)
 {
 	__be16 *b = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	b[0] = be16_to_cpu(b[0]);
 }
 
@@ -332,6 +352,7 @@ static void regmap_parse_16_le_inplace(void *buf)
 
 static unsigned int regmap_parse_16_native(const void *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return *(u16 *)buf;
 }
 
@@ -349,6 +370,7 @@ static unsigned int regmap_parse_32_be(const void *buf)
 {
 	const __be32 *b = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return be32_to_cpu(b[0]);
 }
 
@@ -363,6 +385,7 @@ static void regmap_parse_32_be_inplace(void *buf)
 {
 	__be32 *b = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	b[0] = be32_to_cpu(b[0]);
 }
 
@@ -375,6 +398,7 @@ static void regmap_parse_32_le_inplace(void *buf)
 
 static unsigned int regmap_parse_32_native(const void *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return *(u32 *)buf;
 }
 
@@ -383,6 +407,7 @@ static unsigned int regmap_parse_64_be(const void *buf)
 {
 	const __be64 *b = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return be64_to_cpu(b[0]);
 }
 
@@ -397,6 +422,7 @@ static void regmap_parse_64_be_inplace(void *buf)
 {
 	__be64 *b = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	b[0] = be64_to_cpu(b[0]);
 }
 
@@ -409,6 +435,7 @@ static void regmap_parse_64_le_inplace(void *buf)
 
 static unsigned int regmap_parse_64_native(const void *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return *(u64 *)buf;
 }
 #endif
@@ -431,6 +458,7 @@ __acquires(&map->spinlock)
 	struct regmap *map = __map;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&map->spinlock, flags);
 	map->spinlock_flags = flags;
 }
@@ -457,6 +485,7 @@ static bool _regmap_range_add(struct regmap *map,
 	struct rb_root *root = &map->range_tree;
 	struct rb_node **new = &(root->rb_node), *parent = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (*new) {
 		struct regmap_range_node *this =
 			rb_entry(*new, struct regmap_range_node, node);
@@ -481,6 +510,7 @@ static struct regmap_range_node *_regmap_range_lookup(struct regmap *map,
 {
 	struct rb_node *node = map->range_tree.rb_node;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (node) {
 		struct regmap_range_node *this =
 			rb_entry(node, struct regmap_range_node, node);
@@ -502,6 +532,7 @@ static void regmap_range_exit(struct regmap *map)
 	struct regmap_range_node *range_node;
 
 	next = rb_first(&map->range_tree);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (next) {
 		range_node = rb_entry(next, struct regmap_range_node, node);
 		next = rb_next(&range_node->node);
@@ -524,6 +555,7 @@ int regmap_attach_dev(struct device *dev, struct regmap *map,
 	/* Add a devres resource for dev_get_regmap() */
 	m = devres_alloc(dev_get_regmap_release, sizeof(*m), GFP_KERNEL);
 	if (!m) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		regmap_debugfs_exit(map);
 		return -ENOMEM;
 	}
@@ -544,7 +576,9 @@ static enum regmap_endian regmap_get_reg_endian(const struct regmap_bus *bus,
 
 	/* If the regmap config specified a non-default value, use that */
 	if (endian != REGMAP_ENDIAN_DEFAULT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return endian;
+}
 
 	/* Retrieve the endianness specification from the bus config */
 	if (bus && bus->reg_format_endian_default)
@@ -570,7 +604,9 @@ enum regmap_endian regmap_get_val_endian(struct device *dev,
 
 	/* If the regmap config specified a non-default value, use that */
 	if (endian != REGMAP_ENDIAN_DEFAULT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return endian;
+}
 
 	/* If the dev and dev->of_node exist try to get endianness from DT */
 	if (dev && dev->of_node) {
@@ -617,6 +653,7 @@ struct regmap *__regmap_init(struct device *dev,
 	if (!config)
 		goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	map = kzalloc(sizeof(*map), GFP_KERNEL);
 	if (map == NULL) {
 		ret = -ENOMEM;
@@ -1050,6 +1087,7 @@ EXPORT_SYMBOL_GPL(__regmap_init);
 
 static void devm_regmap_release(struct device *dev, void *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	regmap_exit(*(struct regmap **)res);
 }
 
@@ -1064,7 +1102,9 @@ struct regmap *__devm_regmap_init(struct device *dev,
 
 	ptr = devres_alloc(devm_regmap_release, sizeof(*ptr), GFP_KERNEL);
 	if (!ptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	regmap = __regmap_init(dev, bus, bus_context, config,
 			       lock_key, lock_name);
@@ -1082,6 +1122,7 @@ EXPORT_SYMBOL_GPL(__devm_regmap_init);
 static void regmap_field_init(struct regmap_field *rm_field,
 	struct regmap *regmap, struct reg_field reg_field)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rm_field->regmap = regmap;
 	rm_field->reg = reg_field.reg;
 	rm_field->shift = reg_field.lsb;
@@ -1104,6 +1145,7 @@ static void regmap_field_init(struct regmap_field *rm_field,
 struct regmap_field *devm_regmap_field_alloc(struct device *dev,
 		struct regmap *regmap, struct reg_field reg_field)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct regmap_field *rm_field = devm_kzalloc(dev,
 					sizeof(*rm_field), GFP_KERNEL);
 	if (!rm_field)
@@ -1130,6 +1172,7 @@ EXPORT_SYMBOL_GPL(devm_regmap_field_alloc);
 void devm_regmap_field_free(struct device *dev,
 	struct regmap_field *field)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	devm_kfree(dev, field);
 }
 EXPORT_SYMBOL_GPL(devm_regmap_field_free);
@@ -1147,6 +1190,7 @@ EXPORT_SYMBOL_GPL(devm_regmap_field_free);
 struct regmap_field *regmap_field_alloc(struct regmap *regmap,
 		struct reg_field reg_field)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct regmap_field *rm_field = kzalloc(sizeof(*rm_field), GFP_KERNEL);
 
 	if (!rm_field)
@@ -1166,6 +1210,7 @@ EXPORT_SYMBOL_GPL(regmap_field_alloc);
  */
 void regmap_field_free(struct regmap_field *field)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(field);
 }
 EXPORT_SYMBOL_GPL(regmap_field_free);
@@ -1186,6 +1231,7 @@ EXPORT_SYMBOL_GPL(regmap_field_free);
  */
 int regmap_reinit_cache(struct regmap *map, const struct regmap_config *config)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	regcache_exit(map);
 	regmap_debugfs_exit(map);
 
@@ -1217,6 +1263,7 @@ void regmap_exit(struct regmap *map)
 	regcache_exit(map);
 	regmap_debugfs_exit(map);
 	regmap_range_exit(map);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (map->bus && map->bus->free_context)
 		map->bus->free_context(map->bus_context);
 	kfree(map->work_buf);
@@ -1235,6 +1282,7 @@ EXPORT_SYMBOL_GPL(regmap_exit);
 static int dev_get_regmap_match(struct device *dev, void *res, void *data)
 {
 	struct regmap **r = res;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!r || !*r) {
 		WARN_ON(!r || !*r);
 		return 0;
@@ -1261,6 +1309,7 @@ static int dev_get_regmap_match(struct device *dev, void *res, void *data)
  */
 struct regmap *dev_get_regmap(struct device *dev, const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct regmap **r = devres_find(dev, dev_get_regmap_release,
 					dev_get_regmap_match, (void *)name);
 
@@ -1279,6 +1328,7 @@ EXPORT_SYMBOL_GPL(dev_get_regmap);
  */
 struct device *regmap_get_device(struct regmap *map)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return map->dev;
 }
 EXPORT_SYMBOL_GPL(regmap_get_device);
@@ -1337,6 +1387,7 @@ static void regmap_set_work_buf_flag_mask(struct regmap *map, int max_bytes,
 	u8 *buf;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!mask || !map->work_buf)
 		return;
 
@@ -1358,6 +1409,7 @@ int _regmap_raw_write(struct regmap *map, unsigned int reg,
 	size_t len;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!map->bus);
 
 	/* Check for unwritable registers before we start */
@@ -1543,6 +1595,7 @@ int _regmap_raw_write(struct regmap *map, unsigned int reg,
  */
 bool regmap_can_raw_write(struct regmap *map)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return map->bus && map->bus->write && map->format.format_val &&
 		map->format.format_reg;
 }
@@ -1555,6 +1608,7 @@ EXPORT_SYMBOL_GPL(regmap_can_raw_write);
  */
 size_t regmap_get_raw_read_max(struct regmap *map)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return map->max_raw_read;
 }
 EXPORT_SYMBOL_GPL(regmap_get_raw_read_max);
@@ -1566,6 +1620,7 @@ EXPORT_SYMBOL_GPL(regmap_get_raw_read_max);
  */
 size_t regmap_get_raw_write_max(struct regmap *map)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return map->max_raw_write;
 }
 EXPORT_SYMBOL_GPL(regmap_get_raw_write_max);
@@ -1577,6 +1632,7 @@ static int _regmap_bus_formatted_write(void *context, unsigned int reg,
 	struct regmap_range_node *range;
 	struct regmap *map = context;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!map->bus || !map->format.format_write);
 
 	range = _regmap_range_lookup(map, reg);
@@ -1611,6 +1667,7 @@ static int _regmap_bus_raw_write(void *context, unsigned int reg,
 {
 	struct regmap *map = context;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!map->bus || !map->format.format_val);
 
 	map->format.format_val(map->work_buf + map->format.reg_bytes
@@ -1624,6 +1681,7 @@ static int _regmap_bus_raw_write(void *context, unsigned int reg,
 
 static inline void *_regmap_map_get_context(struct regmap *map)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (map->bus) ? map : map->bus_context;
 }
 
@@ -1634,7 +1692,9 @@ int _regmap_write(struct regmap *map, unsigned int reg,
 	void *context = _regmap_map_get_context(map);
 
 	if (!regmap_writeable(map, reg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	if (!map->cache_bypass && !map->defer_caching) {
 		ret = regcache_write(map, reg, val);
@@ -1671,7 +1731,9 @@ int regmap_write(struct regmap *map, unsigned int reg, unsigned int val)
 	int ret;
 
 	if (!IS_ALIGNED(reg, map->reg_stride))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	map->lock(map->lock_arg);
 
@@ -1698,7 +1760,9 @@ int regmap_write_async(struct regmap *map, unsigned int reg, unsigned int val)
 	int ret;
 
 	if (!IS_ALIGNED(reg, map->reg_stride))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	map->lock(map->lock_arg);
 
@@ -1736,7 +1800,9 @@ int regmap_raw_write(struct regmap *map, unsigned int reg,
 	int ret;
 
 	if (!regmap_can_raw_write(map))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (val_len % map->format.val_bytes)
 		return -EINVAL;
 	if (map->max_raw_write && map->max_raw_write > val_len)
@@ -1773,6 +1839,7 @@ int regmap_field_update_bits_base(struct regmap_field *field,
 				  unsigned int mask, unsigned int val,
 				  bool *change, bool async, bool force)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mask = (mask << field->shift) & field->mask;
 
 	return regmap_update_bits_base(field->regmap, field->reg,
@@ -1800,6 +1867,7 @@ int regmap_fields_update_bits_base(struct regmap_field *field,  unsigned int id,
 				   unsigned int mask, unsigned int val,
 				   bool *change, bool async, bool force)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (id >= field->id_size)
 		return -EINVAL;
 
@@ -1834,7 +1902,9 @@ int regmap_bulk_write(struct regmap *map, unsigned int reg, const void *val,
 	size_t total_size = val_bytes * val_count;
 
 	if (!IS_ALIGNED(reg, map->reg_stride))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/*
 	 * Some devices don't support bulk write, for
@@ -1984,7 +2054,9 @@ static int _regmap_raw_multi_reg_write(struct regmap *map,
 	size_t len = pair_size * num_regs;
 
 	if (!len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	buf = kzalloc(len, GFP_KERNEL);
 	if (!buf)
@@ -2042,6 +2114,7 @@ static int _regmap_range_multi_paged_reg_write(struct regmap *map,
 	 * if there is a delay required at any point in the sequence.
 	 */
 	base = regs;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0, n = 0; i < num_regs; i++, n++) {
 		unsigned int reg = regs[i].reg;
 		struct regmap_range_node *range;
@@ -2111,6 +2184,7 @@ static int _regmap_multi_reg_write(struct regmap *map,
 	int ret;
 
 	if (!map->can_multi_write) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < num_regs; i++) {
 			ret = _regmap_write(map, regs[i].reg, regs[i].def);
 			if (ret != 0)
@@ -2280,7 +2354,9 @@ int regmap_raw_write_async(struct regmap *map, unsigned int reg,
 	int ret;
 
 	if (val_len % map->format.val_bytes)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (!IS_ALIGNED(reg, map->reg_stride))
 		return -EINVAL;
 
@@ -2304,6 +2380,7 @@ static int _regmap_raw_read(struct regmap *map, unsigned int reg, void *val,
 	struct regmap_range_node *range;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!map->bus);
 
 	if (!map->bus || !map->bus->read)
@@ -2346,7 +2423,9 @@ static int _regmap_bus_read(void *context, unsigned int reg,
 	struct regmap *map = context;
 
 	if (!map->format.parse_val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ret = _regmap_raw_read(map, reg, map->work_buf, map->format.val_bytes);
 	if (ret == 0)
@@ -2362,6 +2441,7 @@ static int _regmap_read(struct regmap *map, unsigned int reg,
 	void *context = _regmap_map_get_context(map);
 
 	if (!map->cache_bypass) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = regcache_read(map, reg, val);
 		if (ret == 0)
 			return 0;
@@ -2404,7 +2484,9 @@ int regmap_read(struct regmap *map, unsigned int reg, unsigned int *val)
 	int ret;
 
 	if (!IS_ALIGNED(reg, map->reg_stride))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	map->lock(map->lock_arg);
 
@@ -2436,7 +2518,9 @@ int regmap_raw_read(struct regmap *map, unsigned int reg, void *val,
 	int ret, i;
 
 	if (!map->bus)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (val_len % map->format.val_bytes)
 		return -EINVAL;
 	if (!IS_ALIGNED(reg, map->reg_stride))
@@ -2496,7 +2580,9 @@ int regmap_field_read(struct regmap_field *field, unsigned int *val)
 	unsigned int reg_val;
 	ret = regmap_read(field->regmap, field->reg, &reg_val);
 	if (ret != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	reg_val &= field->mask;
 	reg_val >>= field->shift;
@@ -2523,7 +2609,9 @@ int regmap_fields_read(struct regmap_field *field, unsigned int id,
 	unsigned int reg_val;
 
 	if (id >= field->id_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ret = regmap_read(field->regmap,
 			  field->reg + (field->id_offset * id),
@@ -2558,7 +2646,9 @@ int regmap_bulk_read(struct regmap *map, unsigned int reg, void *val,
 	bool vol = regmap_volatile_range(map, reg, val_count);
 
 	if (!IS_ALIGNED(reg, map->reg_stride))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (map->bus && map->format.parse_inplace && (vol || map->cache_type == REGCACHE_NONE)) {
 		/*
@@ -2672,7 +2762,9 @@ static int _regmap_update_bits(struct regmap *map, unsigned int reg,
 	unsigned int tmp, orig;
 
 	if (change)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*change = false;
+}
 
 	if (regmap_volatile(map, reg) && map->reg_update_bits) {
 		ret = map->reg_update_bits(map->bus_context, reg, mask, val);
@@ -2750,7 +2842,9 @@ void regmap_async_complete_cb(struct regmap_async *async, int ret)
 	wake = list_empty(&map->async_list);
 
 	if (ret != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		map->async_ret = ret;
+}
 
 	spin_unlock(&map->async_lock);
 
@@ -2764,6 +2858,7 @@ static int regmap_async_is_done(struct regmap *map)
 	unsigned long flags;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&map->async_lock, flags);
 	ret = list_empty(&map->async_list);
 	spin_unlock_irqrestore(&map->async_lock, flags);
@@ -2827,6 +2922,7 @@ int regmap_register_patch(struct regmap *map, const struct reg_sequence *regs,
 	int ret;
 	bool bypass;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ONCE(num_regs <= 0, "invalid registers number (%d)\n",
 	    num_regs))
 		return 0;
@@ -2872,6 +2968,7 @@ EXPORT_SYMBOL_GPL(regmap_register_patch);
  */
 int regmap_get_val_bytes(struct regmap *map)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (map->format.format_write)
 		return -EINVAL;
 
@@ -2889,6 +2986,7 @@ EXPORT_SYMBOL_GPL(regmap_get_val_bytes);
  */
 int regmap_get_max_register(struct regmap *map)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return map->max_register ? map->max_register : -EINVAL;
 }
 EXPORT_SYMBOL_GPL(regmap_get_max_register);
@@ -2903,6 +3001,7 @@ EXPORT_SYMBOL_GPL(regmap_get_max_register);
  */
 int regmap_get_reg_stride(struct regmap *map)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return map->reg_stride;
 }
 EXPORT_SYMBOL_GPL(regmap_get_reg_stride);
@@ -2910,6 +3009,7 @@ EXPORT_SYMBOL_GPL(regmap_get_reg_stride);
 int regmap_parse_val(struct regmap *map, const void *buf,
 			unsigned int *val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!map->format.parse_val)
 		return -EINVAL;
 
diff --git a/drivers/base/regmap/trace.h b/drivers/base/regmap/trace.h
index d4066fa..4bc7ebb 100644
--- a/drivers/base/regmap/trace.h
+++ b/drivers/base/regmap/trace.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SPDX-License-Identifier: GPL-2.0 */
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM regmap
diff --git a/drivers/base/syscore.c b/drivers/base/syscore.c
index 8d98a32..39e6ffe 100644
--- a/drivers/base/syscore.c
+++ b/drivers/base/syscore.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  syscore.c - Execution of system core operations.
  *
@@ -33,6 +35,7 @@ EXPORT_SYMBOL_GPL(register_syscore_ops);
  */
 void unregister_syscore_ops(struct syscore_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&syscore_ops_lock);
 	list_del(&ops->node);
 	mutex_unlock(&syscore_ops_lock);
@@ -51,6 +54,7 @@ int syscore_suspend(void)
 	int ret = 0;
 
 	trace_suspend_resume(TPS("syscore_suspend"), 0, true);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("Checking wakeup interrupts\n");
 
 	/* Return error code if there are any wakeup interrupts pending. */
@@ -95,6 +99,7 @@ void syscore_resume(void)
 	struct syscore_ops *ops;
 
 	trace_suspend_resume(TPS("syscore_resume"), 0, true);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ONCE(!irqs_disabled(),
 		"Interrupts enabled before system core resume.\n");
 
@@ -120,6 +125,7 @@ void syscore_shutdown(void)
 
 	mutex_lock(&syscore_ops_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_reverse(ops, &syscore_ops_list, node)
 		if (ops->shutdown) {
 			if (initcall_debug)
diff --git a/drivers/base/topology.c b/drivers/base/topology.c
index d936fcf..e5a8c74 100644
--- a/drivers/base/topology.c
+++ b/drivers/base/topology.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * driver/base/topology.c - Populate sysfs with cpu topology information
  *
@@ -120,6 +122,7 @@ static int topology_add_dev(unsigned int cpu)
 
 static int topology_remove_dev(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = get_cpu_device(cpu);
 
 	sysfs_remove_group(&dev->kobj, &topology_attr_group);
diff --git a/drivers/base/transport_class.c b/drivers/base/transport_class.c
index f6c453c..3ce6f9c 100644
--- a/drivers/base/transport_class.c
+++ b/drivers/base/transport_class.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * transport_class.c - implementation of generic transport classes
  *                     using attribute_containers
@@ -61,6 +63,7 @@ EXPORT_SYMBOL_GPL(transport_class_register);
  */
 void transport_class_unregister(struct transport_class *tclass)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	class_unregister(&tclass->class);
 }
 EXPORT_SYMBOL_GPL(transport_class_unregister);
@@ -92,7 +95,9 @@ int anon_transport_class_register(struct anon_transport_class *atc)
 	attribute_container_set_no_classdevs(&atc->container);
 	error = attribute_container_register(&atc->container);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	atc->tclass.setup = anon_transport_dummy_function;
 	atc->tclass.remove = anon_transport_dummy_function;
 	return 0;
@@ -109,6 +114,7 @@ EXPORT_SYMBOL_GPL(anon_transport_class_register);
  */
 void anon_transport_class_unregister(struct anon_transport_class *atc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(attribute_container_unregister(&atc->container)))
 		BUG();
 }
@@ -119,10 +125,13 @@ static int transport_setup_classdev(struct attribute_container *cont,
 				    struct device *classdev)
 {
 	struct transport_class *tclass = class_to_transport_class(cont->class);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct transport_container *tcont = attribute_container_to_transport_container(cont);
 
 	if (tclass->setup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tclass->setup(tcont, dev, classdev);
+}
 
 	return 0;
 }
@@ -157,7 +166,9 @@ static int transport_add_class_device(struct attribute_container *cont,
 		attribute_container_to_transport_container(cont);
 
 	if (!error && tcont->statistics)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = sysfs_create_group(&classdev->kobj, tcont->statistics);
+}
 
 	return error;
 }
@@ -185,10 +196,13 @@ static int transport_configure(struct attribute_container *cont,
 			       struct device *cdev)
 {
 	struct transport_class *tclass = class_to_transport_class(cont->class);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct transport_container *tcont = attribute_container_to_transport_container(cont);
 
 	if (tclass->configure)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tclass->configure(tcont, dev, cdev);
+}
 
 	return 0;
 }
@@ -246,6 +260,7 @@ static int transport_remove_classdev(struct attribute_container *cont,
  */
 void transport_remove_device(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	attribute_container_device_trigger(dev, transport_remove_classdev);
 }
 EXPORT_SYMBOL_GPL(transport_remove_device);
@@ -254,6 +269,7 @@ static void transport_destroy_classdev(struct attribute_container *cont,
 				      struct device *dev,
 				      struct device *classdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct transport_class *tclass = class_to_transport_class(cont->class);
 
 	if (tclass->remove != anon_transport_dummy_function)
@@ -275,6 +291,7 @@ static void transport_destroy_classdev(struct attribute_container *cont,
  */
 void transport_destroy_device(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	attribute_container_remove_device(dev, transport_destroy_classdev);
 }
 EXPORT_SYMBOL_GPL(transport_destroy_device);
diff --git a/drivers/block/brd.c b/drivers/block/brd.c
index 2d7178f..ef1c2e7 100644
--- a/drivers/block/brd.c
+++ b/drivers/block/brd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Ram backed block device driver.
  *
diff --git a/drivers/block/cryptoloop.c b/drivers/block/cryptoloop.c
index 74e03aa..0459eaa 100644
--- a/drivers/block/cryptoloop.c
+++ b/drivers/block/cryptoloop.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
    Linux loop encryption enabling module
 
diff --git a/drivers/block/loop.c b/drivers/block/loop.c
index a2a0dce..0111122 100644
--- a/drivers/block/loop.c
+++ b/drivers/block/loop.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/drivers/block/loop.c
  *
@@ -91,6 +93,7 @@ static int transfer_xor(struct loop_device *lo, int cmd,
 			struct page *loop_page, unsigned loop_off,
 			int size, sector_t real_block)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	char *raw_buf = kmap_atomic(raw_page) + raw_off;
 	char *loop_buf = kmap_atomic(loop_page) + loop_off;
 	char *in, *out, *key;
@@ -117,6 +120,7 @@ static int transfer_xor(struct loop_device *lo, int cmd,
 
 static int xor_init(struct loop_device *lo, const struct loop_info64 *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(info->lo_encrypt_key_size <= 0))
 		return -EINVAL;
 	return 0;
@@ -145,7 +149,9 @@ static loff_t get_size(loff_t offset, loff_t sizelimit, struct file *file)
 	/* Compute loopsize in bytes */
 	loopsize = i_size_read(file->f_mapping->host);
 	if (offset > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		loopsize -= offset;
+}
 	/* offset is beyond i_size, weird but possible */
 	if (loopsize < 0)
 		return 0;
@@ -161,6 +167,7 @@ static loff_t get_size(loff_t offset, loff_t sizelimit, struct file *file)
 
 static loff_t get_loop_size(struct loop_device *lo, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return get_size(lo->lo_offset, lo->lo_sizelimit, file);
 }
 
@@ -174,6 +181,7 @@ static void __loop_update_dio(struct loop_device *lo, bool dio)
 	bool use_dio;
 
 	if (inode->i_sb->s_bdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sb_bsize = bdev_logical_block_size(inode->i_sb->s_bdev);
 		dio_align = sb_bsize - 1;
 	}
@@ -226,6 +234,7 @@ static void __loop_update_dio(struct loop_device *lo, bool dio)
 static int
 figure_loop_size(struct loop_device *lo, loff_t offset, loff_t sizelimit)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	loff_t size = get_size(offset, sizelimit, lo->lo_backing_file);
 	sector_t x = (sector_t)size;
 	struct block_device *bdev = lo->lo_device;
@@ -253,7 +262,9 @@ lo_do_transfer(struct loop_device *lo, int cmd,
 
 	ret = lo->transfer(lo, cmd, rpage, roffs, lpage, loffs, size, rblock);
 	if (likely(!ret))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	printk_ratelimited(KERN_ERR
 		"loop: Transfer error at byte offset %llu, length %i.\n",
@@ -273,7 +284,9 @@ static int lo_write_bvec(struct file *file, struct bio_vec *bvec, loff_t *ppos)
 	file_end_write(file);
 
 	if (likely(bw ==  bvec->bv_len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	printk_ratelimited(KERN_ERR
 		"loop: Write error at byte offset %llu, length %i.\n",
@@ -290,6 +303,7 @@ static int lo_write_simple(struct loop_device *lo, struct request *rq,
 	struct req_iterator iter;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rq_for_each_segment(bvec, rq, iter) {
 		ret = lo_write_bvec(lo->lo_backing_file, &bvec, &pos);
 		if (ret < 0)
@@ -315,7 +329,9 @@ static int lo_write_transfer(struct loop_device *lo, struct request *rq,
 
 	page = alloc_page(GFP_NOIO);
 	if (unlikely(!page))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	rq_for_each_segment(bvec, rq, iter) {
 		ret = lo_do_transfer(lo, WRITE, page, 0, bvec.bv_page,
@@ -343,6 +359,7 @@ static int lo_read_simple(struct loop_device *lo, struct request *rq,
 	struct iov_iter i;
 	ssize_t len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rq_for_each_segment(bvec, rq, iter) {
 		iov_iter_bvec(&i, ITER_BVEC, &bvec, 1, bvec.bv_len);
 		len = vfs_iter_read(lo->lo_backing_file, &i, &pos, 0);
@@ -376,7 +393,9 @@ static int lo_read_transfer(struct loop_device *lo, struct request *rq,
 
 	page = alloc_page(GFP_NOIO);
 	if (unlikely(!page))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	rq_for_each_segment(bvec, rq, iter) {
 		loff_t offset = pos;
@@ -426,6 +445,7 @@ static int lo_discard(struct loop_device *lo, struct request *rq, loff_t pos)
 	int mode = FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!file->f_op->fallocate) || lo->lo_encrypt_key_size) {
 		ret = -EOPNOTSUPP;
 		goto out;
@@ -442,6 +462,7 @@ static int lo_req_flush(struct loop_device *lo, struct request *rq)
 {
 	struct file *file = lo->lo_backing_file;
 	int ret = vfs_fsync(file, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(ret && ret != -EINVAL))
 		ret = -EIO;
 
@@ -450,6 +471,7 @@ static int lo_req_flush(struct loop_device *lo, struct request *rq)
 
 static void lo_complete_rq(struct request *rq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct loop_cmd *cmd = blk_mq_rq_to_pdu(rq);
 
 	if (unlikely(req_op(cmd->rq) == REQ_OP_READ && cmd->use_aio &&
@@ -465,6 +487,7 @@ static void lo_complete_rq(struct request *rq)
 
 static void lo_rw_aio_do_completion(struct loop_cmd *cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!atomic_dec_and_test(&cmd->ref))
 		return;
 	kfree(cmd->bvec);
@@ -474,6 +497,7 @@ static void lo_rw_aio_do_completion(struct loop_cmd *cmd)
 
 static void lo_rw_aio_complete(struct kiocb *iocb, long ret, long ret2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct loop_cmd *cmd = container_of(iocb, struct loop_cmd, iocb);
 
 	cmd->ret = ret;
@@ -496,6 +520,7 @@ static int lo_rw_aio(struct loop_device *lo, struct loop_cmd *cmd,
 		struct req_iterator iter;
 		struct bio_vec tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__rq_for_each_bio(bio, rq)
 			segments += bio_segments(bio);
 		bvec = kmalloc(sizeof(struct bio_vec) * segments, GFP_NOIO);
@@ -550,6 +575,7 @@ static int lo_rw_aio(struct loop_device *lo, struct loop_cmd *cmd,
 
 static int do_req_filebacked(struct loop_device *lo, struct request *rq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct loop_cmd *cmd = blk_mq_rq_to_pdu(rq);
 	loff_t pos = ((loff_t) blk_rq_pos(rq) << 9) + lo->lo_offset;
 
@@ -591,6 +617,7 @@ static int do_req_filebacked(struct loop_device *lo, struct request *rq)
 
 static inline void loop_update_dio(struct loop_device *lo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__loop_update_dio(lo, io_is_direct(lo->lo_backing_file) |
 			lo->use_dio);
 }
@@ -609,7 +636,9 @@ static void loop_reread_partitions(struct loop_device *lo,
 	 * current holder is released.
 	 */
 	if (!atomic_read(&lo->lo_refcnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = __blkdev_reread_part(bdev);
+}
 	else
 		rc = blkdev_reread_part(bdev);
 	if (rc)
@@ -683,6 +712,7 @@ static inline int is_loop_device(struct file *file)
 {
 	struct inode *i = file->f_mapping->host;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return i && S_ISBLK(i->i_mode) && MAJOR(i->i_rdev) == LOOP_MAJOR;
 }
 
@@ -691,6 +721,7 @@ static inline int is_loop_device(struct file *file)
 static ssize_t loop_attr_show(struct device *dev, char *page,
 			      ssize_t (*callback)(struct loop_device *, char *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct gendisk *disk = dev_to_disk(dev);
 	struct loop_device *lo = disk->private_data;
 
@@ -714,7 +745,9 @@ static ssize_t loop_attr_backing_file_show(struct loop_device *lo, char *buf)
 
 	spin_lock_irq(&lo->lo_lock);
 	if (lo->lo_backing_file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = file_path(lo->lo_backing_file, buf, PAGE_SIZE - 1);
+}
 	spin_unlock_irq(&lo->lo_lock);
 
 	if (IS_ERR_OR_NULL(p))
@@ -731,11 +764,13 @@ static ssize_t loop_attr_backing_file_show(struct loop_device *lo, char *buf)
 
 static ssize_t loop_attr_offset_show(struct loop_device *lo, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%llu\n", (unsigned long long)lo->lo_offset);
 }
 
 static ssize_t loop_attr_sizelimit_show(struct loop_device *lo, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%llu\n", (unsigned long long)lo->lo_sizelimit);
 }
 
@@ -743,6 +778,7 @@ static ssize_t loop_attr_autoclear_show(struct loop_device *lo, char *buf)
 {
 	int autoclear = (lo->lo_flags & LO_FLAGS_AUTOCLEAR);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%s\n", autoclear ? "1" : "0");
 }
 
@@ -750,6 +786,7 @@ static ssize_t loop_attr_partscan_show(struct loop_device *lo, char *buf)
 {
 	int partscan = (lo->lo_flags & LO_FLAGS_PARTSCAN);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%s\n", partscan ? "1" : "0");
 }
 
@@ -757,6 +794,7 @@ static ssize_t loop_attr_dio_show(struct loop_device *lo, char *buf)
 {
 	int dio = (lo->lo_flags & LO_FLAGS_DIRECT_IO);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%s\n", dio ? "1" : "0");
 }
 
@@ -784,12 +822,14 @@ static struct attribute_group loop_attribute_group = {
 
 static int loop_sysfs_init(struct loop_device *lo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sysfs_create_group(&disk_to_dev(lo->lo_disk)->kobj,
 				  &loop_attribute_group);
 }
 
 static void loop_sysfs_exit(struct loop_device *lo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_remove_group(&disk_to_dev(lo->lo_disk)->kobj,
 			   &loop_attribute_group);
 }
@@ -826,18 +866,21 @@ static void loop_config_discard(struct loop_device *lo)
 
 static void loop_unprepare_queue(struct loop_device *lo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kthread_flush_worker(&lo->worker);
 	kthread_stop(lo->worker_task);
 }
 
 static int loop_kthread_worker_fn(void *worker_ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	current->flags |= PF_LESS_THROTTLE;
 	return kthread_worker_fn(worker_ptr);
 }
 
 static int loop_prepare_queue(struct loop_device *lo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kthread_init_worker(&lo->worker);
 	lo->worker_task = kthread_run(loop_kthread_worker_fn,
 			&lo->worker, "loop%d", lo->lo_number);
@@ -865,6 +908,7 @@ static int loop_set_fd(struct loop_device *lo, fmode_t mode,
 	if (!file)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EBUSY;
 	if (lo->lo_state != Lo_unbound)
 		goto out_putf;
@@ -958,6 +1002,7 @@ loop_release_xfer(struct loop_device *lo)
 	struct loop_func_table *xfer = lo->lo_encryption;
 
 	if (xfer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (xfer->release)
 			err = xfer->release(lo);
 		lo->transfer = NULL;
@@ -977,7 +1022,9 @@ loop_init_xfer(struct loop_device *lo, struct loop_func_table *xfer,
 		struct module *owner = xfer->owner;
 
 		if (!try_module_get(owner))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 		if (xfer->init)
 			err = xfer->init(lo, i);
 		if (err)
@@ -995,7 +1042,9 @@ static int loop_clr_fd(struct loop_device *lo)
 	struct block_device *bdev = lo->lo_device;
 
 	if (lo->lo_state != Lo_bound)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	/*
 	 * If we've explicitly asked to tear down the loop device,
@@ -1077,6 +1126,7 @@ loop_set_status(struct loop_device *lo, const struct loop_info64 *info)
 {
 	int err;
 	struct loop_func_table *xfer;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kuid_t uid = current_uid();
 
 	if (lo->lo_encrypt_key_size &&
@@ -1167,7 +1217,9 @@ loop_get_status(struct loop_device *lo, struct loop_info64 *info)
 	int error;
 
 	if (lo->lo_state != Lo_bound)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 	error = vfs_getattr(&file->f_path, &stat,
 			    STATX_INO, AT_STATX_SYNC_AS_STAT);
 	if (error)
@@ -1195,6 +1247,7 @@ loop_get_status(struct loop_device *lo, struct loop_info64 *info)
 static void
 loop_info64_from_old(const struct loop_info *info, struct loop_info64 *info64)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(info64, 0, sizeof(*info64));
 	info64->lo_number = info->lo_number;
 	info64->lo_device = info->lo_device;
@@ -1217,6 +1270,7 @@ loop_info64_from_old(const struct loop_info *info, struct loop_info64 *info64)
 static int
 loop_info64_to_old(const struct loop_info64 *info64, struct loop_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(info, 0, sizeof(*info));
 	info->lo_number = info64->lo_number;
 	info->lo_device = info64->lo_device;
@@ -1251,7 +1305,9 @@ loop_set_status_old(struct loop_device *lo, const struct loop_info __user *arg)
 	struct loop_info64 info64;
 
 	if (copy_from_user(&info, arg, sizeof (struct loop_info)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	loop_info64_from_old(&info, &info64);
 	return loop_set_status(lo, &info64);
 }
@@ -1262,7 +1318,9 @@ loop_set_status64(struct loop_device *lo, const struct loop_info64 __user *arg)
 	struct loop_info64 info64;
 
 	if (copy_from_user(&info64, arg, sizeof (struct loop_info64)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	return loop_set_status(lo, &info64);
 }
 
@@ -1430,7 +1488,9 @@ loop_info64_from_compat(const struct compat_loop_info __user *arg,
 	struct compat_loop_info info;
 
 	if (copy_from_user(&info, arg, sizeof(info)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	memset(info64, 0, sizeof(*info64));
 	info64->lo_number = info.lo_number;
@@ -1474,7 +1534,9 @@ loop_info64_to_compat(const struct loop_info64 *info64,
 	info.lo_init[0] = info64->lo_init[0];
 	info.lo_init[1] = info64->lo_init[1];
 	if (info.lo_encrypt_type == LO_CRYPT_CRYPTOAPI)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(info.lo_name, info64->lo_crypt_name, LO_NAME_SIZE);
+}
 	else
 		memcpy(info.lo_name, info64->lo_file_name, LO_NAME_SIZE);
 	memcpy(info.lo_encrypt_key, info64->lo_encrypt_key, LO_KEY_SIZE);
@@ -1502,7 +1564,9 @@ loop_set_status_compat(struct loop_device *lo,
 
 	ret = loop_info64_from_compat(arg, &info64);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return loop_set_status(lo, &info64);
 }
 
@@ -1514,7 +1578,9 @@ loop_get_status_compat(struct loop_device *lo,
 	int err = 0;
 
 	if (!arg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
+}
 	if (!err)
 		err = loop_get_status(lo, &info64);
 	if (!err)
@@ -1566,6 +1632,7 @@ static int lo_open(struct block_device *bdev, fmode_t mode)
 	mutex_lock(&loop_index_mutex);
 	lo = bdev->bd_disk->private_data;
 	if (!lo) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENXIO;
 		goto out;
 	}
@@ -1581,7 +1648,9 @@ static void __lo_release(struct loop_device *lo)
 	int err;
 
 	if (atomic_dec_return(&lo->lo_refcnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	mutex_lock(&lo->lo_ctl_mutex);
 	if (lo->lo_flags & LO_FLAGS_AUTOCLEAR) {
@@ -1606,6 +1675,7 @@ static void __lo_release(struct loop_device *lo)
 
 static void lo_release(struct gendisk *disk, fmode_t mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&loop_index_mutex);
 	__lo_release(disk->private_data);
 	mutex_unlock(&loop_index_mutex);
@@ -1637,7 +1707,9 @@ int loop_register_transfer(struct loop_func_table *funcs)
 	unsigned int n = funcs->number;
 
 	if (n >= MAX_LO_CRYPT || xfer_funcs[n])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	xfer_funcs[n] = funcs;
 	return 0;
 }
@@ -1649,7 +1721,9 @@ static int unregister_transfer_cb(int id, void *ptr, void *data)
 
 	mutex_lock(&lo->lo_ctl_mutex);
 	if (lo->lo_encryption == xfer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		loop_release_xfer(lo);
+}
 	mutex_unlock(&lo->lo_ctl_mutex);
 	return 0;
 }
@@ -1659,6 +1733,7 @@ int loop_unregister_transfer(int number)
 	unsigned int n = number;
 	struct loop_func_table *xfer;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (n == 0 || n >= MAX_LO_CRYPT || (xfer = xfer_funcs[n]) == NULL)
 		return -EINVAL;
 
@@ -1673,6 +1748,7 @@ EXPORT_SYMBOL(loop_unregister_transfer);
 static blk_status_t loop_queue_rq(struct blk_mq_hw_ctx *hctx,
 		const struct blk_mq_queue_data *bd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct loop_cmd *cmd = blk_mq_rq_to_pdu(bd->rq);
 	struct loop_device *lo = cmd->rq->q->queuedata;
 
@@ -1699,6 +1775,7 @@ static blk_status_t loop_queue_rq(struct blk_mq_hw_ctx *hctx,
 
 static void loop_handle_cmd(struct loop_cmd *cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const bool write = op_is_write(req_op(cmd->rq));
 	struct loop_device *lo = cmd->rq->q->queuedata;
 	int ret = 0;
@@ -1728,6 +1805,7 @@ static void loop_queue_work(struct kthread_work *work)
 static int loop_init_request(struct blk_mq_tag_set *set, struct request *rq,
 		unsigned int hctx_idx, unsigned int numa_node)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct loop_cmd *cmd = blk_mq_rq_to_pdu(rq);
 
 	cmd->rq = rq;
@@ -1759,12 +1837,16 @@ static int loop_add(struct loop_device **l, int i)
 	if (i >= 0) {
 		err = idr_alloc(&loop_index_idr, lo, i, i + 1, GFP_KERNEL);
 		if (err == -ENOSPC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EEXIST;
+}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = idr_alloc(&loop_index_idr, lo, 0, 0, GFP_KERNEL);
 	}
 	if (err < 0)
 		goto out_free_dev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i = err;
 
 	err = -ENOMEM;
@@ -1782,6 +1864,7 @@ static int loop_add(struct loop_device **l, int i)
 
 	lo->lo_queue = blk_mq_init_queue(&lo->tag_set);
 	if (IS_ERR_OR_NULL(lo->lo_queue)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(lo->lo_queue);
 		goto out_cleanup_tags;
 	}
@@ -1824,6 +1907,7 @@ static int loop_add(struct loop_device **l, int i)
 		disk->flags |= GENHD_FL_NO_PART_SCAN;
 	disk->flags |= GENHD_FL_EXT_DEVT;
 	mutex_init(&lo->lo_ctl_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&lo->lo_refcnt, 0);
 	lo->lo_number		= i;
 	spin_lock_init(&lo->lo_lock);
@@ -1851,6 +1935,7 @@ static int loop_add(struct loop_device **l, int i)
 
 static void loop_remove(struct loop_device *lo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	blk_cleanup_queue(lo->lo_queue);
 	del_gendisk(lo->lo_disk);
 	blk_mq_free_tag_set(&lo->tag_set);
@@ -1864,6 +1949,7 @@ static int find_free_cb(int id, void *ptr, void *data)
 	struct loop_device **l = data;
 
 	if (lo->lo_state == Lo_unbound) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*l = lo;
 		return 1;
 	}
@@ -1880,6 +1966,7 @@ static int loop_lookup(struct loop_device **l, int i)
 
 		err = idr_for_each(&loop_index_idr, &find_free_cb, &lo);
 		if (err == 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*l = lo;
 			ret = lo->lo_number;
 		}
@@ -1905,7 +1992,9 @@ static struct kobject *loop_probe(dev_t dev, int *part, void *data)
 	mutex_lock(&loop_index_mutex);
 	err = loop_lookup(&lo, MINOR(dev) >> part_shift);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = loop_add(&lo, MINOR(dev) >> part_shift);
+}
 	if (err < 0)
 		kobj = NULL;
 	else
@@ -1989,6 +2078,7 @@ static int __init loop_init(void)
 
 	part_shift = 0;
 	if (max_part > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		part_shift = fls(max_part);
 
 		/*
@@ -2003,11 +2093,13 @@ static int __init loop_init(void)
 	}
 
 	if ((1UL << part_shift) > DISK_MAX_PARTS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		goto err_out;
 	}
 
 	if (max_loop > 1UL << (MINORBITS - part_shift)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		goto err_out;
 	}
@@ -2021,9 +2113,11 @@ static int __init loop_init(void)
 	 * a 'dead' device node.
 	 */
 	if (max_loop) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nr = max_loop;
 		range = max_loop << part_shift;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nr = CONFIG_BLK_DEV_LOOP_MIN_COUNT;
 		range = 1UL << MINORBITS;
 	}
@@ -2034,6 +2128,7 @@ static int __init loop_init(void)
 
 
 	if (register_blkdev(LOOP_MAJOR, "loop")) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EIO;
 		goto misc_out;
 	}
@@ -2068,6 +2163,7 @@ static void __exit loop_exit(void)
 {
 	unsigned long range;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	range = max_loop ? max_loop << part_shift : 1UL << MINORBITS;
 
 	idr_for_each(&loop_index_idr, &loop_exit_cb, NULL);
@@ -2085,6 +2181,7 @@ module_exit(loop_exit);
 #ifndef MODULE
 static int __init max_loop_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	max_loop = simple_strtol(str, NULL, 0);
 	return 1;
 }
diff --git a/drivers/block/nbd.c b/drivers/block/nbd.c
index 5f2a424..3c11887 100644
--- a/drivers/block/nbd.c
+++ b/drivers/block/nbd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Network block device - make block devices work over TCP
  *
diff --git a/drivers/block/virtio_blk.c b/drivers/block/virtio_blk.c
index 6884689..82f07ef 100644
--- a/drivers/block/virtio_blk.c
+++ b/drivers/block/virtio_blk.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 //#define DEBUG
 #include <linux/spinlock.h>
 #include <linux/slab.h>
diff --git a/drivers/block/xen-blkfront.c b/drivers/block/xen-blkfront.c
index 891265a..efe9c2b 100644
--- a/drivers/block/xen-blkfront.c
+++ b/drivers/block/xen-blkfront.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * blkfront.c
  *
diff --git a/drivers/cdrom/cdrom.c b/drivers/cdrom/cdrom.c
index e36d160..3ab35a7 100644
--- a/drivers/cdrom/cdrom.c
+++ b/drivers/cdrom/cdrom.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* linux/drivers/cdrom/cdrom.c
    Copyright (c) 1996, 1997 David A. van Leeuwen.
    Copyright (c) 1997, 1998 Erik Andersen <andersee@debian.org>
@@ -345,6 +347,7 @@ static LIST_HEAD(cdrom_list);
 int cdrom_dummy_generic_packet(struct cdrom_device_info *cdi,
 			       struct packet_command *cgc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cgc->sense) {
 		cgc->sense->sense_key = 0x05;
 		cgc->sense->asc = 0x20;
@@ -384,7 +387,9 @@ static int cdrom_get_disc_info(struct cdrom_device_info *cdi,
 
 	ret = cdo->generic_packet(cdi, &cgc);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	/* not all drives have the same disc_info length, so requeue
 	 * packet with the length the drive tells us it can supply
@@ -430,6 +435,7 @@ static int cdrom_mrw_probe_pc(struct cdrom_device_info *cdi)
 	cgc.quiet = 1;
 
 	if (!cdrom_mode_sense(cdi, &cgc, MRW_MODE_PC, 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cdi->mrw_mode_page = MRW_MODE_PC;
 		return 0;
 	} else if (!cdrom_mode_sense(cdi, &cgc, MRW_MODE_PC_PRE1, 0)) {
@@ -457,7 +463,9 @@ static int cdrom_is_mrw(struct cdrom_device_info *cdi, int *write)
 	cgc.quiet = 1;
 
 	if ((ret = cdi->ops->generic_packet(cdi, &cgc)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	mfd = (struct mrw_feature_desc *)&buffer[sizeof(struct feature_header)];
 	if (be16_to_cpu(mfd->feature_code) != CDF_MRW)
@@ -478,6 +486,7 @@ static int cdrom_mrw_bgformat(struct cdrom_device_info *cdi, int cont)
 	unsigned char buffer[12];
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_info("%sstarting format\n", cont ? "Re" : "");
 
 	/*
@@ -537,6 +546,7 @@ static int cdrom_mrw_exit(struct cdrom_device_info *cdi)
 	int ret;
 
 	ret = cdrom_get_disc_info(cdi, &di);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret < 0 || ret < (int)offsetof(typeof(di),disc_type))
 		return 1;
 
@@ -566,7 +576,9 @@ static int cdrom_mrw_set_lba_space(struct cdrom_device_info *cdi, int space)
 
 	ret = cdrom_mode_sense(cdi, &cgc, cdi->mrw_mode_page, 0);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	mph = (struct mode_page_header *)buffer;
 	offset = be16_to_cpu(mph->desc_length);
@@ -590,10 +602,13 @@ int register_cdrom(struct cdrom_device_info *cdi)
 	const struct cdrom_device_ops *cdo = cdi->ops;
 	int *change_capability = (int *)&cdo->capability; /* hack */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_OPEN, "entering register_cdrom\n");
 
 	if (cdo->open == NULL || cdo->release == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (!banner_printed) {
 		pr_info("Uniform CD-ROM driver " REVISION "\n");
 		banner_printed = 1;
@@ -602,7 +617,9 @@ int register_cdrom(struct cdrom_device_info *cdi)
 
 	ENSURE(drive_status, CDC_DRIVE_STATUS);
 	if (cdo->check_events == NULL && cdo->media_changed == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*change_capability = ~(CDC_MEDIA_CHANGED | CDC_SELECT_DISC);
+}
 	ENSURE(tray_move, CDC_CLOSE_TRAY | CDC_OPEN_TRAY);
 	ENSURE(lock_door, CDC_LOCK);
 	ENSURE(select_speed, CDC_SELECT_SPEED);
@@ -616,11 +633,15 @@ int register_cdrom(struct cdrom_device_info *cdi)
 	if (autoclose == 1 && CDROM_CAN(CDC_CLOSE_TRAY))
 		cdi->options |= (int) CDO_AUTO_CLOSE;
 	if (autoeject == 1 && CDROM_CAN(CDC_OPEN_TRAY))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cdi->options |= (int) CDO_AUTO_EJECT;
+}
 	if (lockdoor == 1)
 		cdi->options |= (int) CDO_LOCK;
 	if (check_media_type == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cdi->options |= (int) CDO_CHECK_TYPE;
+}
 
 	if (CDROM_CAN(CDC_MRW_W))
 		cdi->exit = cdrom_mrw_exit;
@@ -632,6 +653,7 @@ int register_cdrom(struct cdrom_device_info *cdi)
 
 	WARN_ON(!cdo->generic_packet);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_REG_UNREG, "drive \"/dev/%s\" registered\n", cdi->name);
 	mutex_lock(&cdrom_mutex);
 	list_add(&cdi->list, &cdrom_list);
@@ -642,6 +664,7 @@ int register_cdrom(struct cdrom_device_info *cdi)
 
 void unregister_cdrom(struct cdrom_device_info *cdi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_OPEN, "entering unregister_cdrom\n");
 
 	mutex_lock(&cdrom_mutex);
@@ -669,14 +692,21 @@ int cdrom_get_media_event(struct cdrom_device_info *cdi,
 	cgc.quiet = 1;
 
 	if (cdi->ops->generic_packet(cdi, &cgc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	if (be16_to_cpu(eh->data_len) < sizeof(*med))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	if (eh->nea || eh->notification_class != 0x4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(med, &buffer[sizeof(*eh)], sizeof(*med));
 	return 0;
 }
@@ -696,7 +726,9 @@ static int cdrom_get_random_writable(struct cdrom_device_info *cdi,
 	cgc.quiet = 1;
 
 	if ((ret = cdi->ops->generic_packet(cdi, &cgc)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	memcpy(rfd, &buffer[sizeof(struct feature_header)], sizeof (*rfd));
 	return 0;
@@ -717,7 +749,9 @@ static int cdrom_has_defect_mgt(struct cdrom_device_info *cdi)
 	cgc.quiet = 1;
 
 	if ((ret = cdi->ops->generic_packet(cdi, &cgc)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	feature_code = (__be16 *) &buffer[sizeof(struct feature_header)];
 	if (be16_to_cpu(*feature_code) == CDF_HWDM)
@@ -735,7 +769,9 @@ static int cdrom_is_random_writable(struct cdrom_device_info *cdi, int *write)
 	*write = 0;
 
 	if ((ret = cdrom_get_random_writable(cdi, &rfd)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (CDF_RWRT == be16_to_cpu(rfd.feature_code))
 		*write = 1;
@@ -749,6 +785,7 @@ static int cdrom_media_erasable(struct cdrom_device_info *cdi)
 	int ret;
 
 	ret = cdrom_get_disc_info(cdi, &di);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret < 0 || ret < offsetof(typeof(di), n_first_track))
 		return -1;
 
@@ -760,6 +797,7 @@ static int cdrom_media_erasable(struct cdrom_device_info *cdi)
  */
 static int cdrom_dvdram_open_write(struct cdrom_device_info *cdi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = cdrom_media_erasable(cdi);
 
 	/*
@@ -781,6 +819,7 @@ static int cdrom_mrw_open_write(struct cdrom_device_info *cdi)
 	 * always reset to DMA lba space on open
 	 */
 	if (cdrom_mrw_set_lba_space(cdi, MRW_LBA_DMA)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed setting lba address space\n");
 		return 1;
 	}
@@ -826,7 +865,9 @@ static int mo_open_write(struct cdrom_device_info *cdi)
 
 	ret = cdrom_mode_sense(cdi, &cgc, GPMODE_ALL_PAGES, 0);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = cdrom_mode_sense(cdi, &cgc, GPMODE_VENDOR_PAGE, 0);
+}
 	if (ret) {
 		cgc.buflen = 255;
 		ret = cdrom_mode_sense(cdi, &cgc, GPMODE_ALL_PAGES, 0);
@@ -845,7 +886,9 @@ static int cdrom_ram_open_write(struct cdrom_device_info *cdi)
 	int ret;
 
 	if ((ret = cdrom_has_defect_mgt(cdi)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if ((ret = cdrom_get_random_writable(cdi, &rfd)))
 		return ret;
@@ -871,7 +914,9 @@ static void cdrom_mmc3_profile(struct cdrom_device_info *cdi)
 	cgc.quiet = 1;
 
 	if ((ret = cdi->ops->generic_packet(cdi, &cgc)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mmc3_profile = 0xffff;
+}
 	else
 		mmc3_profile = (buffer[6] << 8) | buffer[7];
 
@@ -880,6 +925,7 @@ static void cdrom_mmc3_profile(struct cdrom_device_info *cdi)
 
 static int cdrom_is_dvd_rw(struct cdrom_device_info *cdi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (cdi->mmc3_profile) {
 	case 0x12:	/* DVD-RAM	*/
 	case 0x1A:	/* DVD+RW	*/
@@ -900,7 +946,9 @@ static int cdrom_open_write(struct cdrom_device_info *cdi)
 
 	mrw = 0;
 	if (!cdrom_is_mrw(cdi, &mrw_write))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mrw = 1;
+}
 
 	if (CDROM_CAN(CDC_MO_DRIVE))
 		ram_write = 1;
@@ -942,6 +990,7 @@ static void cdrom_dvd_rw_close_write(struct cdrom_device_info *cdi)
 	struct packet_command cgc;
 
 	if (cdi->mmc3_profile != 0x1a) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cd_dbg(CD_CLOSE, "%s: No DVD+RW\n", cdi->name);
 		return;
 	}
@@ -994,6 +1043,7 @@ static void cdrom_count_tracks(struct cdrom_device_info *cdi, tracktype *tracks)
 	tracks->cdi = 0;
 	tracks->xa = 0;
 	tracks->error = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_COUNT_TRACKS, "entering cdrom_count_tracks\n");
 	/* Grab the TOC header so we can see how many tracks there are */
 	ret = cdi->ops->audio_ioctl(cdi, CDROMREADTOCHDR, &header);
@@ -1036,20 +1086,26 @@ int open_for_data(struct cdrom_device_info *cdi)
 	int ret;
 	const struct cdrom_device_ops *cdo = cdi->ops;
 	tracktype tracks;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_OPEN, "entering open_for_data\n");
 	/* Check if the driver can report drive status.  If it can, we
 	   can do clever things.  If it can't, well, we at least tried! */
 	if (cdo->drive_status != NULL) {
 		ret = cdo->drive_status(cdi, CDSL_CURRENT);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cd_dbg(CD_OPEN, "drive_status=%d\n", ret);
 		if (ret == CDS_TRAY_OPEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cd_dbg(CD_OPEN, "the tray is open...\n");
 			/* can/may i close it? */
 			if (CDROM_CAN(CDC_CLOSE_TRAY) &&
 			    cdi->options & CDO_AUTO_CLOSE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cd_dbg(CD_OPEN, "trying to close the tray\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret=cdo->tray_move(cdi,0);
 				if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					cd_dbg(CD_OPEN, "bummer. tried to close the tray but failed.\n");
 					/* Ignore the error from the low
 					level driver.  We don't care why it
@@ -1060,67 +1116,90 @@ int open_for_data(struct cdrom_device_info *cdi)
 					goto clean_up_and_return;
 				}
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cd_dbg(CD_OPEN, "bummer. this drive can't close the tray.\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret=-ENOMEDIUM;
 				goto clean_up_and_return;
 			}
 			/* Ok, the door should be closed now.. Check again */
 			ret = cdo->drive_status(cdi, CDSL_CURRENT);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if ((ret == CDS_NO_DISC) || (ret==CDS_TRAY_OPEN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cd_dbg(CD_OPEN, "bummer. the tray is still not closed.\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cd_dbg(CD_OPEN, "tray might not contain a medium\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret=-ENOMEDIUM;
 				goto clean_up_and_return;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cd_dbg(CD_OPEN, "the tray is now closed\n");
 		}
 		/* the door should be closed now, check for the disc */
 		ret = cdo->drive_status(cdi, CDSL_CURRENT);
 		if (ret!=CDS_DISC_OK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ENOMEDIUM;
 			goto clean_up_and_return;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cdrom_count_tracks(cdi, &tracks);
 	if (tracks.error == CDS_NO_DISC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cd_dbg(CD_OPEN, "bummer. no disc.\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret=-ENOMEDIUM;
 		goto clean_up_and_return;
 	}
 	/* CD-Players which don't use O_NONBLOCK, workman
 	 * for example, need bit CDO_CHECK_TYPE cleared! */
 	if (tracks.data==0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cdi->options & CDO_CHECK_TYPE) {
 		    /* give people a warning shot, now that CDO_CHECK_TYPE
 		       is the default case! */
 		    cd_dbg(CD_OPEN, "bummer. wrong media type.\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		    cd_dbg(CD_WARNING, "pid %d must open device O_NONBLOCK!\n",
 			   (unsigned int)task_pid_nr(current));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		    ret=-EMEDIUMTYPE;
 		    goto clean_up_and_return;
 		}
 		else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		    cd_dbg(CD_OPEN, "wrong media type, but CDO_CHECK_TYPE not set\n");
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_OPEN, "all seems well, opening the devicen");
 
 	/* all seems well, we can open the device */
 	ret = cdo->open(cdi, 0); /* open for data */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_OPEN, "opening the device gave me %d\n", ret);
 	/* After all this careful checking, we shouldn't have problems
 	   opening the device, but we don't want the device locked if 
 	   this somehow fails... */
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cd_dbg(CD_OPEN, "open device failed\n");
 		goto clean_up_and_return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (CDROM_CAN(CDC_LOCK) && (cdi->options & CDO_LOCK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cdo->lock_door(cdi, 1);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cd_dbg(CD_OPEN, "door locked\n");
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_OPEN, "device opened successfully\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 
 	/* Something failed.  Try to unlock the drive, because some drivers
@@ -1132,8 +1211,10 @@ int open_for_data(struct cdrom_device_info *cdi)
 	cd_dbg(CD_OPEN, "open failed\n");
 	if (CDROM_CAN(CDC_LOCK) && cdi->options & CDO_LOCK) {
 			cdo->lock_door(cdi, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cd_dbg(CD_OPEN, "door unlocked\n");
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -1150,6 +1231,7 @@ int cdrom_open(struct cdrom_device_info *cdi, struct block_device *bdev,
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_OPEN, "entering cdrom_open\n");
 
 	/* open is event synchronization point, check events first */
@@ -1159,34 +1241,45 @@ int cdrom_open(struct cdrom_device_info *cdi, struct block_device *bdev,
 	 * do a quick open without drive/disc integrity checks. */
 	cdi->use_count++;
 	if ((mode & FMODE_NDELAY) && (cdi->options & CDO_USE_FFLAGS)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = cdi->ops->open(cdi, 1);
 	} else {
 		ret = open_for_data(cdi);
 		if (ret)
 			goto err;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cdrom_mmc3_profile(cdi);
 		if (mode & FMODE_WRITE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EROFS;
 			if (cdrom_open_write(cdi))
 				goto err_release;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!CDROM_CAN(CDC_RAM))
 				goto err_release;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = 0;
 			cdi->media_written = 0;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret)
 		goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_OPEN, "Use count for \"/dev/%s\" now %d\n",
 	       cdi->name, cdi->use_count);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 err_release:
 	if (CDROM_CAN(CDC_LOCK) && cdi->options & CDO_LOCK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cdi->ops->lock_door(cdi, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cd_dbg(CD_OPEN, "door unlocked\n");
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cdi->ops->release(cdi);
 err:
 	cdi->use_count--;
@@ -1201,6 +1294,7 @@ static int check_for_audio_disc(struct cdrom_device_info *cdi,
 {
         int ret;
 	tracktype tracks;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_OPEN, "entering check_for_audio_disc\n");
 	if (!(cdi->options & CDO_CHECK_TYPE))
 		return 0;
@@ -1255,6 +1349,7 @@ void cdrom_release(struct cdrom_device_info *cdi, fmode_t mode)
 	const struct cdrom_device_ops *cdo = cdi->ops;
 	int opened_for_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_CLOSE, "entering cdrom_release\n");
 
 	if (cdi->use_count > 0)
@@ -1301,6 +1396,7 @@ static int cdrom_read_mech_status(struct cdrom_device_info *cdi,
 	 * command below
 	 */
 	if (cdi->sanyo_slot) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		buf->hdr.nslots = 3;
 		buf->hdr.curslot = cdi->sanyo_slot == 3 ? 0 : cdi->sanyo_slot;
 		for (length = 0; length < 3; length++) {
@@ -1325,6 +1421,7 @@ static int cdrom_slot_status(struct cdrom_device_info *cdi, int slot)
 	struct cdrom_changer_info *info;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_CHANGER, "entering cdrom_slot_status()\n");
 	if (cdi->sanyo_slot)
 		return CDS_NO_INFO;
@@ -1355,6 +1452,7 @@ int cdrom_number_of_slots(struct cdrom_device_info *cdi)
 	int nslots = 1;
 	struct cdrom_changer_info *info;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_CHANGER, "entering cdrom_number_of_slots()\n");
 	/* cdrom_read_mech_status requires a valid value for capacity: */
 	cdi->capacity = 0; 
@@ -1376,6 +1474,7 @@ static int cdrom_load_unload(struct cdrom_device_info *cdi, int slot)
 {
 	struct packet_command cgc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_CHANGER, "entering cdrom_load_unload()\n");
 	if (cdi->sanyo_slot && slot < 0)
 		return 0;
@@ -1405,6 +1504,7 @@ static int cdrom_select_disc(struct cdrom_device_info *cdi, int slot)
 	int curslot;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_CHANGER, "entering cdrom_select_disc()\n");
 	if (!CDROM_CAN(CDC_SELECT_DISC))
 		return -EDRIVE_CANT_DO_THIS;
@@ -1506,7 +1606,9 @@ int media_changed(struct cdrom_device_info *cdi, int queue)
 	bool changed;
 
 	if (!CDROM_CAN(CDC_MEDIA_CHANGED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	/* changed since last call? */
 	if (cdi->ops->check_events) {
@@ -1559,6 +1661,7 @@ static
 void sanitize_format(union cdrom_addr *addr,
 		     u_char * curr, u_char requested)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (*curr == requested)
 		return;                 /* nothing to be done! */
 	if (requested == CDROM_LBA) {
@@ -1578,6 +1681,7 @@ void sanitize_format(union cdrom_addr *addr,
 void init_cdrom_command(struct packet_command *cgc, void *buf, int len,
 			int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(cgc, 0, sizeof(struct packet_command));
 	if (buf)
 		memset(buf, 0, len);
@@ -1594,6 +1698,7 @@ void init_cdrom_command(struct packet_command *cgc, void *buf, int len,
 
 static void setup_report_key(struct packet_command *cgc, unsigned agid, unsigned type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cgc->cmd[0] = GPCMD_REPORT_KEY;
 	cgc->cmd[10] = type | (agid << 6);
 	switch (type) {
@@ -1616,6 +1721,7 @@ static void setup_report_key(struct packet_command *cgc, unsigned agid, unsigned
 
 static void setup_send_key(struct packet_command *cgc, unsigned agid, unsigned type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cgc->cmd[0] = GPCMD_SEND_KEY;
 	cgc->cmd[10] = type | (agid << 6);
 	switch (type) {
@@ -1793,7 +1899,9 @@ static int dvd_read_physical(struct cdrom_device_info *cdi, dvd_struct *s,
 	int ret, layer_num = s->physical.layer_num;
 
 	if (layer_num >= DVD_LAYERS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	init_cdrom_command(cgc, buf, sizeof(buf), CGC_DATA_READ);
 	cgc->cmd[0] = GPCMD_READ_DVD_STRUCTURE;
@@ -1851,7 +1959,9 @@ static int dvd_read_copyright(struct cdrom_device_info *cdi, dvd_struct *s,
 
 	ret = cdo->generic_packet(cdi, cgc);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	s->copyright.cpst = buf[4];
 	s->copyright.rmi = buf[5];
@@ -1870,7 +1980,9 @@ static int dvd_read_disckey(struct cdrom_device_info *cdi, dvd_struct *s,
 
 	buf = kmalloc(size, GFP_KERNEL);
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	init_cdrom_command(cgc, buf, size, CGC_DATA_READ);
 	cgc->cmd[0] = GPCMD_READ_DVD_STRUCTURE;
@@ -1896,7 +2008,9 @@ static int dvd_read_bca(struct cdrom_device_info *cdi, dvd_struct *s,
 
 	buf = kmalloc(size, GFP_KERNEL);
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	init_cdrom_command(cgc, buf, size, CGC_DATA_READ);
 	cgc->cmd[0] = GPCMD_READ_DVD_STRUCTURE;
@@ -1932,7 +2046,9 @@ static int dvd_read_manufact(struct cdrom_device_info *cdi, dvd_struct *s,
 
 	buf = kmalloc(size, GFP_KERNEL);
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	init_cdrom_command(cgc, buf, size, CGC_DATA_READ);
 	cgc->cmd[0] = GPCMD_READ_DVD_STRUCTURE;
@@ -1966,6 +2082,7 @@ static int dvd_read_manufact(struct cdrom_device_info *cdi, dvd_struct *s,
 static int dvd_read_struct(struct cdrom_device_info *cdi, dvd_struct *s,
 				struct packet_command *cgc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (s->type) {
 	case DVD_STRUCT_PHYSICAL:
 		return dvd_read_physical(cdi, s, cgc);
@@ -2032,6 +2149,7 @@ static int cdrom_read_subchannel(struct cdrom_device_info *cdi,
 	cgc.cmd[0] = GPCMD_READ_SUBCHANNEL;
 	cgc.cmd[1] = subchnl->cdsc_format;/* MSF or LBA addressing */
 	cgc.cmd[2] = 0x40;  /* request subQ data */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cgc.cmd[3] = mcn ? 2 : 1;
 	cgc.cmd[8] = 16;
 
@@ -2110,6 +2228,7 @@ static int cdrom_read_block(struct cdrom_device_info *cdi,
 	
 	/* set the header info returned */
 	switch (blksize) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	case CD_FRAMESIZE_RAW0	: cgc->cmd[9] = 0x58; break;
 	case CD_FRAMESIZE_RAW1	: cgc->cmd[9] = 0x78; break;
 	case CD_FRAMESIZE_RAW	: cgc->cmd[9] = 0xf8; break;
@@ -2135,6 +2254,7 @@ static int cdrom_read_cdda_old(struct cdrom_device_info *cdi, __u8 __user *ubuf,
 	 */
 	nr = nframes;
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cgc.buffer = kmalloc(CD_FRAMESIZE_RAW * nr, GFP_KERNEL);
 		if (cgc.buffer)
 			break;
@@ -2176,7 +2296,9 @@ static int cdrom_read_cdda_bpc(struct cdrom_device_info *cdi, __u8 __user *ubuf,
 	int nr, ret = 0;
 
 	if (!q)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	if (!blk_queue_scsi_passthrough(q)) {
 		WARN_ONCE(true,
@@ -2251,7 +2373,9 @@ static int cdrom_read_cdda(struct cdrom_device_info *cdi, __u8 __user *ubuf,
 	int ret;
 
 	if (cdi->cdda_method == CDDA_OLD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return cdrom_read_cdda_old(cdi, ubuf, lba, nframes);
+}
 
 retry:
 	/*
@@ -2291,6 +2415,7 @@ static int cdrom_ioctl_multisession(struct cdrom_device_info *cdi,
 	u8 requested_format;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMMULTISESSION\n");
 
 	if (!(cdi->ops->capability & CDC_MULTI_SESSION))
@@ -2319,6 +2444,7 @@ static int cdrom_ioctl_multisession(struct cdrom_device_info *cdi,
 
 static int cdrom_ioctl_eject(struct cdrom_device_info *cdi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMEJECT\n");
 
 	if (!CDROM_CAN(CDC_OPEN_TRAY))
@@ -2336,6 +2462,7 @@ static int cdrom_ioctl_eject(struct cdrom_device_info *cdi)
 
 static int cdrom_ioctl_closetray(struct cdrom_device_info *cdi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMCLOSETRAY\n");
 
 	if (!CDROM_CAN(CDC_CLOSE_TRAY))
@@ -2346,6 +2473,7 @@ static int cdrom_ioctl_closetray(struct cdrom_device_info *cdi)
 static int cdrom_ioctl_eject_sw(struct cdrom_device_info *cdi,
 		unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMEJECT_SW\n");
 
 	if (!CDROM_CAN(CDC_OPEN_TRAY))
@@ -2365,6 +2493,7 @@ static int cdrom_ioctl_media_changed(struct cdrom_device_info *cdi,
 	struct cdrom_changer_info *info;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_MEDIA_CHANGED\n");
 
 	if (!CDROM_CAN(CDC_MEDIA_CHANGED))
@@ -2391,6 +2520,7 @@ static int cdrom_ioctl_media_changed(struct cdrom_device_info *cdi,
 static int cdrom_ioctl_set_options(struct cdrom_device_info *cdi,
 		unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_SET_OPTIONS\n");
 
 	/*
@@ -2419,6 +2549,7 @@ static int cdrom_ioctl_set_options(struct cdrom_device_info *cdi,
 static int cdrom_ioctl_clear_options(struct cdrom_device_info *cdi,
 		unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_CLEAR_OPTIONS\n");
 
 	cdi->options &= ~(int) arg;
@@ -2428,6 +2559,7 @@ static int cdrom_ioctl_clear_options(struct cdrom_device_info *cdi,
 static int cdrom_ioctl_select_speed(struct cdrom_device_info *cdi,
 		unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_SELECT_SPEED\n");
 
 	if (!CDROM_CAN(CDC_SELECT_SPEED))
@@ -2438,6 +2570,7 @@ static int cdrom_ioctl_select_speed(struct cdrom_device_info *cdi,
 static int cdrom_ioctl_select_disc(struct cdrom_device_info *cdi,
 		unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_SELECT_DISC\n");
 
 	if (!CDROM_CAN(CDC_SELECT_DISC))
@@ -2463,6 +2596,7 @@ static int cdrom_ioctl_select_disc(struct cdrom_device_info *cdi,
 static int cdrom_ioctl_reset(struct cdrom_device_info *cdi,
 		struct block_device *bdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_RESET\n");
 
 	if (!capable(CAP_SYS_ADMIN))
@@ -2476,6 +2610,7 @@ static int cdrom_ioctl_reset(struct cdrom_device_info *cdi,
 static int cdrom_ioctl_lock_door(struct cdrom_device_info *cdi,
 		unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "%socking door\n", arg ? "L" : "Unl");
 
 	if (!CDROM_CAN(CDC_LOCK))
@@ -2495,6 +2630,7 @@ static int cdrom_ioctl_lock_door(struct cdrom_device_info *cdi,
 static int cdrom_ioctl_debug(struct cdrom_device_info *cdi,
 		unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "%sabling debug\n", arg ? "En" : "Dis");
 
 	if (!capable(CAP_SYS_ADMIN))
@@ -2505,6 +2641,7 @@ static int cdrom_ioctl_debug(struct cdrom_device_info *cdi,
 
 static int cdrom_ioctl_get_capability(struct cdrom_device_info *cdi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_GET_CAPABILITY\n");
 	return (cdi->ops->capability & ~cdi->mask);
 }
@@ -2521,6 +2658,7 @@ static int cdrom_ioctl_get_mcn(struct cdrom_device_info *cdi,
 	struct cdrom_mcn mcn;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_GET_MCN\n");
 
 	if (!(cdi->ops->capability & CDC_MCN))
@@ -2538,6 +2676,7 @@ static int cdrom_ioctl_get_mcn(struct cdrom_device_info *cdi,
 static int cdrom_ioctl_drive_status(struct cdrom_device_info *cdi,
 		unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_DRIVE_STATUS\n");
 
 	if (!(cdi->ops->capability & CDC_DRIVE_STATUS))
@@ -2571,6 +2710,7 @@ static int cdrom_ioctl_disc_status(struct cdrom_device_info *cdi)
 {
 	tracktype tracks;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_DISC_STATUS\n");
 
 	cdrom_count_tracks(cdi, &tracks);
@@ -2599,6 +2739,7 @@ static int cdrom_ioctl_disc_status(struct cdrom_device_info *cdi)
 
 static int cdrom_ioctl_changer_nslots(struct cdrom_device_info *cdi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_CHANGER_NSLOTS\n");
 	return cdi->capacity;
 }
@@ -2613,7 +2754,9 @@ static int cdrom_ioctl_get_subchnl(struct cdrom_device_info *cdi,
 	/* cd_dbg(CD_DO_IOCTL,"entering CDROMSUBCHNL\n");*/
 
 	if (copy_from_user(&q, argp, sizeof(q)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	requested = q.cdsc_format;
 	if (requested != CDROM_MSF && requested != CDROM_LBA)
@@ -2643,7 +2786,9 @@ static int cdrom_ioctl_read_tochdr(struct cdrom_device_info *cdi,
 	/* cd_dbg(CD_DO_IOCTL, "entering CDROMREADTOCHDR\n"); */
 
 	if (copy_from_user(&header, argp, sizeof(header)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	ret = cdi->ops->audio_ioctl(cdi, CDROMREADTOCHDR, &header);
 	if (ret)
@@ -2665,7 +2810,9 @@ static int cdrom_ioctl_read_tocentry(struct cdrom_device_info *cdi,
 	/* cd_dbg(CD_DO_IOCTL, "entering CDROMREADTOCENTRY\n"); */
 
 	if (copy_from_user(&entry, argp, sizeof(entry)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	requested_format = entry.cdte_format;
 	if (requested_format != CDROM_MSF && requested_format != CDROM_LBA)
@@ -2688,6 +2835,7 @@ static int cdrom_ioctl_play_msf(struct cdrom_device_info *cdi,
 {
 	struct cdrom_msf msf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMPLAYMSF\n");
 
 	if (!CDROM_CAN(CDC_PLAY_AUDIO))
@@ -2703,6 +2851,7 @@ static int cdrom_ioctl_play_trkind(struct cdrom_device_info *cdi,
 	struct cdrom_ti ti;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMPLAYTRKIND\n");
 
 	if (!CDROM_CAN(CDC_PLAY_AUDIO))
@@ -2720,6 +2869,7 @@ static int cdrom_ioctl_volctrl(struct cdrom_device_info *cdi,
 {
 	struct cdrom_volctrl volume;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMVOLCTRL\n");
 
 	if (!CDROM_CAN(CDC_PLAY_AUDIO))
@@ -2735,6 +2885,7 @@ static int cdrom_ioctl_volread(struct cdrom_device_info *cdi,
 	struct cdrom_volctrl volume;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMVOLREAD\n");
 
 	if (!CDROM_CAN(CDC_PLAY_AUDIO))
@@ -2754,6 +2905,7 @@ static int cdrom_ioctl_audioctl(struct cdrom_device_info *cdi,
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "doing audio ioctl (start/stop/pause/resume)\n");
 
 	if (!CDROM_CAN(CDC_PLAY_AUDIO))
@@ -2810,7 +2962,9 @@ static int cdrom_get_track_info(struct cdrom_device_info *cdi,
 
 	ret = cdo->generic_packet(cdi, &cgc);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	buflen = be16_to_cpu(ti->track_information_length) +
 		sizeof(ti->track_information_length);
@@ -2840,6 +2994,7 @@ int cdrom_get_last_written(struct cdrom_device_info *cdi, long *last_written)
 	if (!CDROM_CAN(CDC_GENERIC_PACKET))
 		goto use_toc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = cdrom_get_disc_info(cdi, &di);
 	if (ret < (int)(offsetof(typeof(di), last_track_lsb)
 			+ sizeof(di.last_track_lsb)))
@@ -2902,6 +3057,7 @@ static int cdrom_get_next_writable(struct cdrom_device_info *cdi,
 	if (!CDROM_CAN(CDC_GENERIC_PACKET))
 		goto use_last_written;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = cdrom_get_disc_info(cdi, &di);
 	if (ret < 0 || ret < offsetof(typeof(di), last_track_lsb)
 				+ sizeof(di.last_track_lsb))
@@ -3033,7 +3189,9 @@ static noinline int mmc_ioctl_cdrom_subchannel(struct cdrom_device_info *cdi,
 	struct cdrom_subchnl q;
 	u_char requested, back;
 	if (copy_from_user(&q, (struct cdrom_subchnl __user *)arg, sizeof(q)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	requested = q.cdsc_format;
 	if (!((requested == CDROM_MSF) ||
 	      (requested == CDROM_LBA)))
@@ -3057,6 +3215,7 @@ static noinline int mmc_ioctl_cdrom_play_msf(struct cdrom_device_info *cdi,
 {
 	const struct cdrom_device_ops *cdo = cdi->ops;
 	struct cdrom_msf msf;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMPLAYMSF\n");
 	if (copy_from_user(&msf, (struct cdrom_msf __user *)arg, sizeof(msf)))
 		return -EFAULT;
@@ -3077,6 +3236,7 @@ static noinline int mmc_ioctl_cdrom_play_blk(struct cdrom_device_info *cdi,
 {
 	const struct cdrom_device_ops *cdo = cdi->ops;
 	struct cdrom_blk blk;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMPLAYBLK\n");
 	if (copy_from_user(&blk, (struct cdrom_blk __user *)arg, sizeof(blk)))
 		return -EFAULT;
@@ -3102,6 +3262,7 @@ static noinline int mmc_ioctl_cdrom_volume(struct cdrom_device_info *cdi,
 	unsigned short offset;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMVOLUME\n");
 
 	if (copy_from_user(&volctrl, (struct cdrom_volctrl __user *)arg,
@@ -3171,6 +3332,7 @@ static noinline int mmc_ioctl_cdrom_start_stop(struct cdrom_device_info *cdi,
 					       int cmd)
 {
 	const struct cdrom_device_ops *cdo = cdi->ops;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMSTART/CDROMSTOP\n");
 	cgc->cmd[0] = GPCMD_START_STOP_UNIT;
 	cgc->cmd[1] = 1;
@@ -3184,6 +3346,7 @@ static noinline int mmc_ioctl_cdrom_pause_resume(struct cdrom_device_info *cdi,
 						 int cmd)
 {
 	const struct cdrom_device_ops *cdo = cdi->ops;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROMPAUSE/CDROMRESUME\n");
 	cgc->cmd[0] = GPCMD_PAUSE_RESUME;
 	cgc->cmd[8] = (cmd == CDROMRESUME) ? 1 : 0;
@@ -3200,7 +3363,9 @@ static noinline int mmc_ioctl_dvd_read_struct(struct cdrom_device_info *cdi,
 	int size = sizeof(dvd_struct);
 
 	if (!CDROM_CAN(CDC_DVD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSYS;
+}
 
 	s = memdup_user(arg, size);
 	if (IS_ERR(s))
@@ -3225,7 +3390,9 @@ static noinline int mmc_ioctl_dvd_auth(struct cdrom_device_info *cdi,
 	int ret;
 	dvd_authinfo ai;
 	if (!CDROM_CAN(CDC_DVD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSYS;
+}
 	cd_dbg(CD_DO_IOCTL, "entering DVD_AUTH\n");
 	if (copy_from_user(&ai, (dvd_authinfo __user *)arg, sizeof(ai)))
 		return -EFAULT;
@@ -3242,6 +3409,7 @@ static noinline int mmc_ioctl_cdrom_next_writable(struct cdrom_device_info *cdi,
 {
 	int ret;
 	long next = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_NEXT_WRITABLE\n");
 	ret = cdrom_get_next_writable(cdi, &next);
 	if (ret)
@@ -3256,6 +3424,7 @@ static noinline int mmc_ioctl_cdrom_last_written(struct cdrom_device_info *cdi,
 {
 	int ret;
 	long last = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd_dbg(CD_DO_IOCTL, "entering CDROM_LAST_WRITTEN\n");
 	ret = cdrom_get_last_written(cdi, &last);
 	if (ret)
@@ -3326,7 +3495,9 @@ int cdrom_ioctl(struct cdrom_device_info *cdi, struct block_device *bdev,
 	 */
 	ret = scsi_cmd_blk_ioctl(bdev, mode, cmd, argp);
 	if (ret != -ENOTTY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	switch (cmd) {
 	case CDROMMULTISESSION:
@@ -3449,7 +3620,9 @@ static int cdrom_print_info(const char *header, int val, char *info,
 
 	ret = scnprintf(info + *pos, max_size - *pos, header);
 	if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	*pos += ret;
 
@@ -3575,6 +3748,7 @@ static void cdrom_update_settings(void)
 	struct cdrom_device_info *cdi;
 
 	mutex_lock(&cdrom_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(cdi, &cdrom_list, list) {
 		if (autoclose && CDROM_CAN(CDC_CLOSE_TRAY))
 			cdi->options |= CDO_AUTO_CLOSE;
@@ -3695,7 +3869,9 @@ static void cdrom_sysctl_register(void)
 	static int initialized;
 
 	if (initialized == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	cdrom_sysctl_header = register_sysctl_table(cdrom_root_table);
 
@@ -3711,6 +3887,7 @@ static void cdrom_sysctl_register(void)
 
 static void cdrom_sysctl_unregister(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cdrom_sysctl_header)
 		unregister_sysctl_table(cdrom_sysctl_header);
 }
@@ -3736,6 +3913,7 @@ static int __init cdrom_init(void)
 
 static void __exit cdrom_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_info("Uniform CD-ROM driver unloaded\n");
 	cdrom_sysctl_unregister();
 }
diff --git a/drivers/char/hangcheck-timer.c b/drivers/char/hangcheck-timer.c
index 5406b90..00c3155 100644
--- a/drivers/char/hangcheck-timer.c
+++ b/drivers/char/hangcheck-timer.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * hangcheck-timer.c
  *
diff --git a/drivers/char/hpet.c b/drivers/char/hpet.c
index b941e6d..9040d2b 100644
--- a/drivers/char/hpet.c
+++ b/drivers/char/hpet.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Intel & MS High Precision Event Timer Implementation.
  *
@@ -206,6 +208,7 @@ static void hpet_timer_set_irq(struct hpet_dev *devp)
 
 	spin_lock_irq(&hpet_lock);
 	if (devp->hd_hdwirq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irq(&hpet_lock);
 		return;
 	}
@@ -264,7 +267,9 @@ static int hpet_open(struct inode *inode, struct file *file)
 	int i;
 
 	if (file->f_mode & FMODE_WRITE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&hpet_mutex);
 	spin_lock_irq(&hpet_lock);
@@ -298,6 +303,7 @@ static int hpet_open(struct inode *inode, struct file *file)
 static ssize_t
 hpet_read(struct file *file, char __user *buf, size_t count, loff_t * ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DECLARE_WAITQUEUE(wait, current);
 	unsigned long data;
 	ssize_t retval;
@@ -350,7 +356,9 @@ static unsigned int hpet_poll(struct file *file, poll_table * wait)
 	devp = file->private_data;
 
 	if (!devp->hd_ireqfreq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	poll_wait(file, &devp->hd_waitqueue, wait);
 
@@ -399,6 +407,7 @@ static int hpet_mmap(struct file *file, struct vm_area_struct *vma)
 #else
 static int hpet_mmap(struct file *file, struct vm_area_struct *vma)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOSYS;
 }
 #endif
@@ -410,7 +419,9 @@ static int hpet_fasync(int fd, struct file *file, int on)
 	devp = file->private_data;
 
 	if (fasync_helper(fd, file, on, &devp->hd_async_queue) >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	else
 		return -EIO;
 }
@@ -467,7 +478,9 @@ static int hpet_ioctl_ieon(struct hpet_dev *devp)
 	hpetp = devp->hd_hpets;
 
 	if (!devp->hd_ireqfreq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	spin_lock_irq(&hpet_lock);
 
@@ -677,6 +690,7 @@ hpet_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	err = hpet_ioctl_common(file->private_data, cmd, arg, &info);
 	mutex_unlock(&hpet_mutex);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((cmd == HPET_INFO) && !err &&
 	    (copy_to_user((void __user *)arg, &info, sizeof(info))))
 		err = -EFAULT;
@@ -702,6 +716,7 @@ hpet_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	err = hpet_ioctl_common(file->private_data, cmd, arg, &info);
 	mutex_unlock(&hpet_mutex);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((cmd == HPET_INFO) && !err) {
 		struct compat_hpet_info __user *u = compat_ptr(arg);
 		if (put_user(info.hi_ireqfreq, &u->hi_ireqfreq) ||
@@ -736,8 +751,11 @@ static int hpet_is_known(struct hpet_data *hdp)
 
 	for (hpetp = hpets; hpetp; hpetp = hpetp->hp_next)
 		if (hpetp->hp_hpet_phys == hdp->hd_phys_address)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -796,7 +814,9 @@ static unsigned long __hpet_calibrate(struct hpets *hpetp)
 		}
 
 	if (!timer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	hpet = hpetp->hp_hpet;
 	t = read_counter(&timer->hpet_compare);
@@ -809,6 +829,7 @@ static unsigned long __hpet_calibrate(struct hpets *hpetp)
 	start = read_counter(&hpet->hpet_mc);
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		m = read_counter(&hpet->hpet_mc);
 		write_counter(t + m + hpetp->hp_delta, &timer->hpet_compare);
 	} while (i++, (m - start) < count);
@@ -832,6 +853,7 @@ static unsigned long hpet_calibrate(struct hpets *hpetp)
 		tmp = __hpet_calibrate(hpetp);
 		if (ret <= tmp)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = tmp;
 	}
 
@@ -857,6 +879,7 @@ int hpet_alloc(struct hpet_data *hdp)
 	 * ACPI has also reported, then we catch it here.
 	 */
 	if (hpet_is_known(hdp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_DEBUG "%s: duplicate HPET ignored\n",
 			__func__);
 		return 0;
@@ -868,7 +891,9 @@ int hpet_alloc(struct hpet_data *hdp)
 	hpetp = kzalloc(siz, GFP_KERNEL);
 
 	if (!hpetp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	hpetp->hp_which = hpet_nhpet++;
 	hpetp->hp_hpet = hdp->hd_address;
@@ -879,6 +904,7 @@ int hpet_alloc(struct hpet_data *hdp)
 	for (i = 0; i < hdp->hd_nirqs; i++)
 		hpetp->hp_dev[i].hd_hdwirq = hdp->hd_irq[i];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hpet = hpetp->hp_hpet;
 
 	cap = readq(&hpet->hpet_cap);
@@ -886,6 +912,7 @@ int hpet_alloc(struct hpet_data *hdp)
 	ntimer = ((cap & HPET_NUM_TIM_CAP_MASK) >> HPET_NUM_TIM_CAP_SHIFT) + 1;
 
 	if (hpetp->hp_ntimer != ntimer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_WARNING "hpet: number irqs doesn't agree"
 		       " with number of timers\n");
 		kfree(hpetp);
@@ -893,7 +920,9 @@ int hpet_alloc(struct hpet_data *hdp)
 	}
 
 	if (last)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		last->hp_next = hpetp;
+}
 	else
 		hpets = hpetp;
 
@@ -923,6 +952,7 @@ int hpet_alloc(struct hpet_data *hdp)
 
 	mcfg = readq(&hpet->hpet_config);
 	if ((mcfg & HPET_ENABLE_CNF_MASK) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_counter(0L, &hpet->hpet_mc);
 		mcfg |= HPET_ENABLE_CNF_MASK;
 		writeq(mcfg, &hpet->hpet_config);
@@ -976,10 +1006,12 @@ static acpi_status hpet_resources(struct acpi_resource *res, void *data)
 	status = acpi_resource_to_address64(res, &addr);
 
 	if (ACPI_SUCCESS(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hdp->hd_phys_address = addr.address.minimum;
 		hdp->hd_address = ioremap(addr.address.minimum, addr.address.address_length);
 
 		if (hpet_is_known(hdp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			iounmap(hdp->hd_address);
 			return AE_ALREADY_EXISTS;
 		}
@@ -1002,20 +1034,27 @@ static acpi_status hpet_resources(struct acpi_resource *res, void *data)
 
 		irqp = &res->data.extended_irq;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < irqp->interrupt_count; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (hdp->hd_nirqs >= HPET_MAX_TIMERS)
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			irq = acpi_register_gsi(NULL, irqp->interrupts[i],
 				      irqp->triggering, irqp->polarity);
 			if (irq < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return AE_ERROR;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hdp->hd_irq[hdp->hd_nirqs] = irq;
 			hdp->hd_nirqs++;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return AE_OK;
 }
 
@@ -1031,15 +1070,23 @@ static int hpet_acpi_add(struct acpi_device *device)
 				hpet_resources, &data);
 
 	if (ACPI_FAILURE(result))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!data.hd_address || !data.hd_nirqs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (data.hd_address)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			iounmap(data.hd_address);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk("%s: no address or irqs in _CRS\n", __func__);
 		return -ENODEV;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hpet_alloc(&data);
 }
 
@@ -1064,18 +1111,25 @@ static int __init hpet_init(void)
 
 	result = misc_register(&hpet_misc);
 	if (result < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	sysctl_header = register_sysctl_table(dev_root);
 
 	result = acpi_bus_register_driver(&hpet_acpi_driver);
 	if (result < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sysctl_header)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unregister_sysctl_table(sysctl_header);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		misc_deregister(&hpet_misc);
 		return result;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 device_initcall(hpet_init);
diff --git a/drivers/char/hw_random/amd-rng.c b/drivers/char/hw_random/amd-rng.c
index 9959c76..9f0986e 100644
--- a/drivers/char/hw_random/amd-rng.c
+++ b/drivers/char/hw_random/amd-rng.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * RNG driver for AMD RNGs
  *
diff --git a/drivers/char/hw_random/core.c b/drivers/char/hw_random/core.c
index 9701ac7..c895de1 100644
--- a/drivers/char/hw_random/core.c
+++ b/drivers/char/hw_random/core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * hw_random/core.c: HWRNG core API
  *
@@ -58,12 +60,14 @@ static inline int rng_get_data(struct hwrng *rng, u8 *buffer, size_t size,
 
 static size_t rng_buffer_size(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return SMP_CACHE_BYTES < 32 ? 32 : SMP_CACHE_BYTES;
 }
 
 static void add_early_randomness(struct hwrng *rng)
 {
 	int bytes_read;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size_t size = min_t(size_t, 16, rng_buffer_size());
 
 	mutex_lock(&reading_mutex);
@@ -75,6 +79,7 @@ static void add_early_randomness(struct hwrng *rng)
 
 static inline void cleanup_rng(struct kref *kref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hwrng *rng = container_of(kref, struct hwrng, ref);
 
 	if (rng->cleanup)
@@ -91,7 +96,9 @@ static int set_current_rng(struct hwrng *rng)
 
 	err = hwrng_init(rng);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	drop_current_rng();
 	current_rng = rng;
@@ -103,7 +110,9 @@ static void drop_current_rng(void)
 {
 	BUG_ON(!mutex_is_locked(&rng_mutex));
 	if (!current_rng)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* decrease last reference for triggering the cleanup */
 	kref_put(&current_rng->ref, cleanup_rng);
@@ -116,11 +125,15 @@ static struct hwrng *get_current_rng(void)
 	struct hwrng *rng;
 
 	if (mutex_lock_interruptible(&rng_mutex))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ERESTARTSYS);
+}
 
 	rng = current_rng;
 	if (rng)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kref_get(&rng->ref);
+}
 
 	mutex_unlock(&rng_mutex);
 	return rng;
@@ -148,9 +161,12 @@ static int hwrng_init(struct hwrng *rng)
 
 		ret =  rng->init(rng);
 		if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kref_init(&rng->ref);
 	reinit_completion(&rng->cleanup_done);
 
@@ -159,13 +175,18 @@ static int hwrng_init(struct hwrng *rng)
 
 	current_quality = rng->quality ? : default_quality;
 	if (current_quality > 1024)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		current_quality = 1024;
+}
 
 	if (current_quality == 0 && hwrng_fill)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kthread_stop(hwrng_fill);
+}
 	if (current_quality > 0 && !hwrng_fill)
 		start_khwrngd();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -187,14 +208,21 @@ static inline int rng_get_data(struct hwrng *rng, u8 *buffer, size_t size,
 	if (rng->read)
 		return rng->read(rng, (void *)buffer, size, wait);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rng->data_present)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		present = rng->data_present(rng, wait);
+}
 	else
 		present = 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (present)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rng->data_read(rng, (u32 *)buffer);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -206,6 +234,7 @@ static ssize_t rng_dev_read(struct file *filp, char __user *buf,
 	int bytes_read, len;
 	struct hwrng *rng;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (size) {
 		rng = get_current_rng();
 		if (IS_ERR(rng)) {
@@ -301,7 +330,9 @@ static ssize_t hwrng_attr_current_store(struct device *dev,
 
 	err = mutex_lock_interruptible(&rng_mutex);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ERESTARTSYS;
+}
 	err = -ENODEV;
 	list_for_each_entry(rng, &rng_list, list) {
 		if (sysfs_streq(rng->name, buf)) {
@@ -326,7 +357,9 @@ static ssize_t hwrng_attr_current_show(struct device *dev,
 
 	rng = get_current_rng();
 	if (IS_ERR(rng))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(rng);
+}
 
 	ret = snprintf(buf, PAGE_SIZE, "%s\n", rng ? rng->name : "none");
 	put_rng(rng);
@@ -343,7 +376,9 @@ static ssize_t hwrng_attr_available_show(struct device *dev,
 
 	err = mutex_lock_interruptible(&rng_mutex);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ERESTARTSYS;
+}
 	buf[0] = '\0';
 	list_for_each_entry(rng, &rng_list, list) {
 		strlcat(buf, rng->name, PAGE_SIZE);
@@ -359,6 +394,7 @@ static ssize_t hwrng_attr_selected_show(struct device *dev,
 					struct device_attribute *attr,
 					char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return snprintf(buf, PAGE_SIZE, "%d\n", cur_rng_set_by_user);
 }
 
@@ -383,6 +419,7 @@ ATTRIBUTE_GROUPS(rng_dev);
 
 static void __exit unregister_miscdev(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	misc_deregister(&rng_miscdev);
 }
 
@@ -407,6 +444,7 @@ static int hwrng_fillfn(void *unused)
 		mutex_unlock(&reading_mutex);
 		put_rng(rng);
 		if (rc <= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn("hwrng: no data available\n");
 			msleep_interruptible(10000);
 			continue;
@@ -415,6 +453,7 @@ static int hwrng_fillfn(void *unused)
 		add_hwgenerator_randomness((void *)rng_fillbuf, rc,
 					   rc * current_quality * 8 >> 10);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hwrng_fill = NULL;
 	return 0;
 }
@@ -423,6 +462,7 @@ static void start_khwrngd(void)
 {
 	hwrng_fill = kthread_run(hwrng_fillfn, NULL, "hwrng");
 	if (IS_ERR(hwrng_fill)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("hwrng_fill thread creation failed");
 		hwrng_fill = NULL;
 	}
@@ -441,6 +481,7 @@ int hwrng_register(struct hwrng *rng)
 	/* Must not register two RNGs with the same name. */
 	err = -EEXIST;
 	list_for_each_entry(tmp, &rng_list, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (strcmp(tmp->name, rng->name) == 0)
 			goto out_unlock;
 	}
@@ -450,6 +491,7 @@ int hwrng_register(struct hwrng *rng)
 
 	/* rng_list is sorted by decreasing quality */
 	list_for_each(rng_list_ptr, &rng_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tmp = list_entry(rng_list_ptr, struct hwrng, list);
 		if (tmp->quality < rng->quality)
 			break;
@@ -490,6 +532,7 @@ EXPORT_SYMBOL_GPL(hwrng_register);
 
 void hwrng_unregister(struct hwrng *rng)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&rng_mutex);
 
 	list_del(&rng->list);
@@ -518,6 +561,7 @@ EXPORT_SYMBOL_GPL(hwrng_unregister);
 
 static void devm_hwrng_release(struct device *dev, void *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hwrng_unregister(*(struct hwrng **)res);
 }
 
@@ -525,6 +569,7 @@ static int devm_hwrng_match(struct device *dev, void *res, void *data)
 {
 	struct hwrng **r = res;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(!r || !*r))
 		return 0;
 
@@ -538,7 +583,9 @@ int devm_hwrng_register(struct device *dev, struct hwrng *rng)
 
 	ptr = devres_alloc(devm_hwrng_release, sizeof(*ptr), GFP_KERNEL);
 	if (!ptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	error = hwrng_register(rng);
 	if (error) {
@@ -554,6 +601,7 @@ EXPORT_SYMBOL_GPL(devm_hwrng_register);
 
 void devm_hwrng_unregister(struct device *dev, struct hwrng *rng)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	devres_release(dev, devm_hwrng_release, devm_hwrng_match, rng);
 }
 EXPORT_SYMBOL_GPL(devm_hwrng_unregister);
@@ -565,25 +613,31 @@ static int __init hwrng_modinit(void)
 	/* kmalloc makes this safe for virt_to_page() in virtio_rng.c */
 	rng_buffer = kmalloc(rng_buffer_size(), GFP_KERNEL);
 	if (!rng_buffer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	rng_fillbuf = kmalloc(rng_buffer_size(), GFP_KERNEL);
 	if (!rng_fillbuf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(rng_buffer);
 		return -ENOMEM;
 	}
 
 	ret = register_miscdev();
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(rng_fillbuf);
 		kfree(rng_buffer);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 static void __exit hwrng_modexit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&rng_mutex);
 	BUG_ON(current_rng);
 	kfree(rng_buffer);
diff --git a/drivers/char/hw_random/intel-rng.c b/drivers/char/hw_random/intel-rng.c
index 290c880..18a1ff5 100644
--- a/drivers/char/hw_random/intel-rng.c
+++ b/drivers/char/hw_random/intel-rng.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * RNG driver for Intel RNGs
  *
diff --git a/drivers/char/hw_random/timeriomem-rng.c b/drivers/char/hw_random/timeriomem-rng.c
index 03ff548..3e0ea58 100644
--- a/drivers/char/hw_random/timeriomem-rng.c
+++ b/drivers/char/hw_random/timeriomem-rng.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/char/hw_random/timeriomem-rng.c
  *
diff --git a/drivers/char/hw_random/via-rng.c b/drivers/char/hw_random/via-rng.c
index 6e9df55..886fbe2 100644
--- a/drivers/char/hw_random/via-rng.c
+++ b/drivers/char/hw_random/via-rng.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * RNG driver for VIA RNGs
  *
@@ -105,6 +107,7 @@ static int via_rng_data_present(struct hwrng *rng, int wait)
 	 * completes.
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < 20; i++) {
 		*via_rng_datum = 0; /* paranoia, not really necessary */
 		bytes_out = xstore(via_rng_datum, VIA_RNG_CHUNK_1);
@@ -128,6 +131,7 @@ static int via_rng_data_read(struct hwrng *rng, u32 *data)
 
 static int via_rng_init(struct hwrng *rng)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpuinfo_x86 *c = &cpu_data(0);
 	u32 lo, hi, old_lo;
 
@@ -197,11 +201,15 @@ static int __init mod_init(void)
 	int err;
 
 	if (!boot_cpu_has(X86_FEATURE_XSTORE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_info("VIA RNG detected\n");
 	err = hwrng_register(&via_rng);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err(PFX "RNG registering failed (%d)\n",
 		       err);
 		goto out;
@@ -212,6 +220,7 @@ static int __init mod_init(void)
 
 static void __exit mod_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hwrng_unregister(&via_rng);
 }
 
diff --git a/drivers/char/hw_random/virtio-rng.c b/drivers/char/hw_random/virtio-rng.c
index 3fa2f8a..daa1d41 100644
--- a/drivers/char/hw_random/virtio-rng.c
+++ b/drivers/char/hw_random/virtio-rng.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Randomness driver for virtio
  *  Copyright (C) 2007, 2008 Rusty Russell IBM Corporation
diff --git a/drivers/char/mem.c b/drivers/char/mem.c
index 970e124..9fe8e35 100644
--- a/drivers/char/mem.c
+++ b/drivers/char/mem.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/drivers/char/mem.c
@@ -45,17 +47,20 @@ static inline unsigned long size_inside_page(unsigned long start,
 
 	sz = PAGE_SIZE - (start & (PAGE_SIZE - 1));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return min(sz, size);
 }
 
 #ifndef ARCH_HAS_VALID_PHYS_ADDR_RANGE
 static inline int valid_phys_addr_range(phys_addr_t addr, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return addr + count <= __pa(high_memory);
 }
 
 static inline int valid_mmap_phys_addr_range(unsigned long pfn, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 #endif
@@ -82,10 +87,12 @@ static inline int range_is_allowed(unsigned long pfn, unsigned long size)
 #else
 static inline int page_is_allowed(unsigned long pfn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 static inline int range_is_allowed(unsigned long pfn, unsigned long size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 #endif
@@ -109,7 +116,9 @@ static ssize_t read_mem(struct file *file, char __user *buf,
 	void *ptr;
 
 	if (p != *ppos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!valid_phys_addr_range(p, count))
 		return -EFAULT;
@@ -178,7 +187,9 @@ static ssize_t write_mem(struct file *file, const char __user *buf,
 	void *ptr;
 
 	if (p != *ppos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFBIG;
+}
 
 	if (!valid_phys_addr_range(p, count))
 		return -EFAULT;
@@ -243,6 +254,7 @@ static ssize_t write_mem(struct file *file, const char __user *buf,
 int __weak phys_mem_access_prot_allowed(struct file *file,
 	unsigned long pfn, unsigned long size, pgprot_t *vma_prot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -328,6 +340,7 @@ static inline int private_mapping_ok(struct vm_area_struct *vma)
 
 static inline int private_mapping_ok(struct vm_area_struct *vma)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 #endif
@@ -345,7 +358,9 @@ static int mmap_mem(struct file *file, struct vm_area_struct *vma)
 
 	/* It's illegal to wrap around the end of the physical address space. */
 	if (offset + (phys_addr_t)size - 1 < offset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!valid_mmap_phys_addr_range(vma->vm_pgoff, size))
 		return -EINVAL;
@@ -392,7 +407,9 @@ static int mmap_kmem(struct file *file, struct vm_area_struct *vma)
 	 * RED-PEN: vmalloc is not supported right now.
 	 */
 	if (!pfn_valid(pfn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	vma->vm_pgoff = pfn;
 	return mmap_mem(file, vma);
@@ -411,6 +428,7 @@ static ssize_t read_kmem(struct file *file, char __user *buf,
 
 	read = 0;
 	if (p < (unsigned long) high_memory) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		low_count = count;
 		if (count > (unsigned long)high_memory - p)
 			low_count = (unsigned long)high_memory - p;
@@ -498,6 +516,7 @@ static ssize_t do_write_kmem(unsigned long p, const char __user *buf,
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (count > 0) {
 		void *ptr;
 
@@ -542,6 +561,7 @@ static ssize_t write_kmem(struct file *file, const char __user *buf,
 	int err = 0;
 
 	if (p < (unsigned long) high_memory) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unsigned long to_write = min_t(unsigned long, count,
 					       (unsigned long)high_memory - p);
 		wrote = do_write_kmem(p, buf, to_write, ppos);
@@ -589,7 +609,9 @@ static ssize_t read_port(struct file *file, char __user *buf,
 	char __user *tmp = buf;
 
 	if (!access_ok(VERIFY_WRITE, buf, count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	while (count-- > 0 && i < 65536) {
 		if (__put_user(inb(i), tmp) < 0)
 			return -EFAULT;
@@ -607,7 +629,9 @@ static ssize_t write_port(struct file *file, const char __user *buf,
 	const char __user *tmp = buf;
 
 	if (!access_ok(VERIFY_READ, buf, count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	while (count-- > 0 && i < 65536) {
 		char c;
 
@@ -638,11 +662,13 @@ static ssize_t write_null(struct file *file, const char __user *buf,
 
 static ssize_t read_iter_null(struct kiocb *iocb, struct iov_iter *to)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static ssize_t write_iter_null(struct kiocb *iocb, struct iov_iter *from)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size_t count = iov_iter_count(from);
 	iov_iter_advance(from, count);
 	return count;
@@ -651,12 +677,14 @@ static ssize_t write_iter_null(struct kiocb *iocb, struct iov_iter *from)
 static int pipe_to_null(struct pipe_inode_info *info, struct pipe_buffer *buf,
 			struct splice_desc *sd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sd->len;
 }
 
 static ssize_t splice_write_null(struct pipe_inode_info *pipe, struct file *out,
 				 loff_t *ppos, size_t len, unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return splice_from_pipe(pipe, out, ppos, len, flags, pipe_to_null);
 }
 
@@ -664,6 +692,7 @@ static ssize_t read_iter_zero(struct kiocb *iocb, struct iov_iter *iter)
 {
 	size_t written = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (iov_iter_count(iter)) {
 		size_t chunk = iov_iter_count(iter), n;
 
@@ -715,6 +744,7 @@ static unsigned long get_unmapped_area_zero(struct file *file,
 static ssize_t write_full(struct file *file, const char __user *buf,
 			  size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOSPC;
 }
 
@@ -763,6 +793,7 @@ static loff_t memory_lseek(struct file *file, loff_t offset, int orig)
 
 static int open_port(struct inode *inode, struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return capable(CAP_SYS_RAWIO) ? 0 : -EPERM;
 }
 
@@ -863,11 +894,16 @@ static int memory_open(struct inode *inode, struct file *filp)
 
 	minor = iminor(inode);
 	if (minor >= ARRAY_SIZE(devlist))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev = &devlist[minor];
 	if (!dev->fops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	filp->f_op = dev->fops;
 	filp->f_mode |= dev->fmode;
@@ -875,6 +911,7 @@ static int memory_open(struct inode *inode, struct file *filp)
 	if (dev->fops->open)
 		return dev->fops->open(inode, filp);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -897,11 +934,15 @@ static int __init chr_dev_init(void)
 	int minor;
 
 	if (register_chrdev(MEM_MAJOR, "mem", &memory_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk("unable to get major %d for memory devs\n", MEM_MAJOR);
+}
 
 	mem_class = class_create(THIS_MODULE, "mem");
 	if (IS_ERR(mem_class))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(mem_class);
+}
 
 	mem_class->devnode = mem_devnode;
 	for (minor = 1; minor < ARRAY_SIZE(devlist); minor++) {
diff --git a/drivers/char/misc.c b/drivers/char/misc.c
index 1bb9e7c..5ee5b12 100644
--- a/drivers/char/misc.c
+++ b/drivers/char/misc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * linux/drivers/char/misc.c
@@ -66,22 +68,26 @@ static DECLARE_BITMAP(misc_minors, DYNAMIC_MINORS);
 #ifdef CONFIG_PROC_FS
 static void *misc_seq_start(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&misc_mtx);
 	return seq_list_start(&misc_list, *pos);
 }
 
 static void *misc_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_list_next(v, &misc_list, pos);
 }
 
 static void misc_seq_stop(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&misc_mtx);
 }
 
 static int misc_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct miscdevice *p = list_entry(v, struct miscdevice, list);
 
 	seq_printf(seq, "%3i %s\n", p->minor, p->name ? p->name : "");
@@ -98,6 +104,7 @@ static const struct seq_operations misc_seq_ops = {
 
 static int misc_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &misc_seq_ops);
 }
 
@@ -112,6 +119,7 @@ static const struct file_operations misc_proc_fops = {
 
 static int misc_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int minor = iminor(inode);
 	struct miscdevice *c;
 	int err = -ENODEV;
@@ -197,6 +205,7 @@ int misc_register(struct miscdevice *misc)
 		int i = find_first_zero_bit(misc_minors, DYNAMIC_MINORS);
 
 		if (i >= DYNAMIC_MINORS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EBUSY;
 			goto out;
 		}
@@ -207,6 +216,7 @@ int misc_register(struct miscdevice *misc)
 
 		list_for_each_entry(c, &misc_list, list) {
 			if (c->minor == misc->minor) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EBUSY;
 				goto out;
 			}
@@ -219,13 +229,19 @@ int misc_register(struct miscdevice *misc)
 		device_create_with_groups(misc_class, misc->parent, dev,
 					  misc, misc->groups, "%s", misc->name);
 	if (IS_ERR(misc->this_device)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (is_dynamic) {
 			int i = DYNAMIC_MINORS - misc->minor - 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (i < DYNAMIC_MINORS && i >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				clear_bit(i, misc_minors);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			misc->minor = MISC_DYNAMIC_MINOR;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(misc->this_device);
 		goto out;
 	}
@@ -252,6 +268,7 @@ void misc_deregister(struct miscdevice *misc)
 {
 	int i = DYNAMIC_MINORS - misc->minor - 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(list_empty(&misc->list)))
 		return;
 
@@ -268,12 +285,16 @@ EXPORT_SYMBOL(misc_deregister);
 
 static char *misc_devnode(struct device *dev, umode_t *mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct miscdevice *c = dev_get_drvdata(dev);
 
 	if (mode && c->mode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*mode = c->mode;
+}
 	if (c->nodename)
 		return kstrdup(c->nodename, GFP_KERNEL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -288,6 +309,7 @@ static int __init misc_init(void)
 	if (IS_ERR(misc_class))
 		goto fail_remove;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EIO;
 	if (register_chrdev(MISC_MAJOR, "misc", &misc_fops))
 		goto fail_printk;
@@ -299,7 +321,10 @@ static int __init misc_init(void)
 	class_destroy(misc_class);
 fail_remove:
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		remove_proc_entry("misc", NULL);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 subsys_initcall(misc_init);
diff --git a/drivers/char/nvram.c b/drivers/char/nvram.c
index 678fa97..ef22bce 100644
--- a/drivers/char/nvram.c
+++ b/drivers/char/nvram.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * CMOS/NV-RAM driver for Linux
  *
@@ -141,6 +143,7 @@ static void mach_proc_infos(unsigned char *contents, struct seq_file *seq,
 
 unsigned char __nvram_read_byte(int i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return CMOS_READ(NVRAM_FIRST_BYTE + i);
 }
 EXPORT_SYMBOL(__nvram_read_byte);
@@ -150,6 +153,7 @@ unsigned char nvram_read_byte(int i)
 	unsigned long flags;
 	unsigned char c;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&rtc_lock, flags);
 	c = __nvram_read_byte(i);
 	spin_unlock_irqrestore(&rtc_lock, flags);
@@ -160,6 +164,7 @@ EXPORT_SYMBOL(nvram_read_byte);
 /* This races nicely with trying to read with checksum checking (nvram_read) */
 void __nvram_write_byte(unsigned char c, int i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	CMOS_WRITE(c, NVRAM_FIRST_BYTE + i);
 }
 EXPORT_SYMBOL(__nvram_write_byte);
@@ -168,6 +173,7 @@ void nvram_write_byte(unsigned char c, int i)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&rtc_lock, flags);
 	__nvram_write_byte(c, i);
 	spin_unlock_irqrestore(&rtc_lock, flags);
@@ -176,6 +182,7 @@ EXPORT_SYMBOL(nvram_write_byte);
 
 int __nvram_check_checksum(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mach_check_checksum();
 }
 EXPORT_SYMBOL(__nvram_check_checksum);
@@ -185,6 +192,7 @@ int nvram_check_checksum(void)
 	unsigned long flags;
 	int rv;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&rtc_lock, flags);
 	rv = __nvram_check_checksum();
 	spin_unlock_irqrestore(&rtc_lock, flags);
@@ -194,6 +202,7 @@ EXPORT_SYMBOL(nvram_check_checksum);
 
 static void __nvram_set_checksum(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mach_set_checksum();
 }
 
@@ -214,6 +223,7 @@ void nvram_set_checksum(void)
 
 static loff_t nvram_llseek(struct file *file, loff_t offset, int origin)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return generic_file_llseek_size(file, offset, origin, MAX_LFS_FILESIZE,
 					NVRAM_BYTES);
 }
@@ -230,6 +240,7 @@ static ssize_t nvram_read(struct file *file, char __user *buf,
 	if (!__nvram_check_checksum())
 		goto checksum_err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (tmp = contents; count-- > 0 && i < NVRAM_BYTES; ++i, ++tmp)
 		*tmp = __nvram_read_byte(i);
 
@@ -255,7 +266,9 @@ static ssize_t nvram_write(struct file *file, const char __user *buf,
 	unsigned char *tmp;
 
 	if (i >= NVRAM_BYTES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;	/* Past EOF */
+}
 
 	if (count > NVRAM_BYTES - i)
 		count = NVRAM_BYTES - i;
@@ -329,6 +342,7 @@ static long nvram_ioctl(struct file *file, unsigned int cmd,
 
 static int nvram_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&nvram_state_lock);
 
 	if ((nvram_open_cnt && (file->f_flags & O_EXCL)) ||
@@ -351,6 +365,7 @@ static int nvram_open(struct inode *inode, struct file *file)
 
 static int nvram_release(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&nvram_state_lock);
 
 	nvram_open_cnt--;
@@ -380,6 +395,7 @@ static int nvram_proc_read(struct seq_file *seq, void *offset)
 	int i = 0;
 
 	spin_lock_irq(&rtc_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < NVRAM_BYTES; ++i)
 		contents[i] = __nvram_read_byte(i);
 	spin_unlock_irq(&rtc_lock);
@@ -391,6 +407,7 @@ static int nvram_proc_read(struct seq_file *seq, void *offset)
 
 static int nvram_proc_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, nvram_proc_read, NULL);
 }
 
@@ -405,7 +422,9 @@ static const struct file_operations nvram_proc_fops = {
 static int nvram_add_proc_fs(void)
 {
 	if (!proc_create("driver/nvram", 0, NULL, &nvram_proc_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
@@ -433,19 +452,24 @@ static int __init nvram_init(void)
 
 	/* First test whether the driver should init at all */
 	if (!CHECK_DRIVER_INIT())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	ret = misc_register(&nvram_dev);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "nvram: can't misc_register on minor=%d\n",
 		    NVRAM_MINOR);
 		goto out;
 	}
 	ret = nvram_add_proc_fs();
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "nvram: can't create /proc/driver/nvram\n");
 		goto outmisc;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = 0;
 	printk(KERN_INFO "Non-volatile memory driver v" NVRAM_VERSION "\n");
 out:
@@ -457,6 +481,7 @@ static int __init nvram_init(void)
 
 static void __exit nvram_cleanup_module(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	remove_proc_entry("driver/nvram", NULL);
 	misc_deregister(&nvram_dev);
 }
@@ -476,6 +501,7 @@ static int pc_check_checksum(void)
 	unsigned short sum = 0;
 	unsigned short expect;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = PC_CKS_RANGE_START; i <= PC_CKS_RANGE_END; ++i)
 		sum += __nvram_read_byte(i);
 	expect = __nvram_read_byte(PC_CKS_LOC)<<8 |
@@ -488,6 +514,7 @@ static void pc_set_checksum(void)
 	int i;
 	unsigned short sum = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = PC_CKS_RANGE_START; i <= PC_CKS_RANGE_END; ++i)
 		sum += __nvram_read_byte(i);
 	__nvram_write_byte(sum >> 8, PC_CKS_LOC);
@@ -518,6 +545,7 @@ static void pc_proc_infos(unsigned char *nvram, struct seq_file *seq,
 	checksum = __nvram_check_checksum();
 	spin_unlock_irq(&rtc_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_printf(seq, "Checksum status: %svalid\n", checksum ? "" : "not ");
 
 	seq_printf(seq, "# floppies     : %d\n",
diff --git a/drivers/char/random.c b/drivers/char/random.c
index ea0115c..59b8edb 100644
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * random.c -- A strong random number generator
  *
@@ -622,6 +624,7 @@ static void process_random_ready_list(void)
 		rdy->func(rdy);
 		module_put(owner);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&random_ready_list_lock, flags);
 }
 
@@ -637,7 +640,9 @@ static void credit_entropy_bits(struct entropy_store *r, int nbits)
 	int nfrac = nbits << ENTROPY_SHIFT;
 
 	if (!nbits)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 retry:
 	entropy_count = orig = ACCESS_ONCE(r->entropy_count);
@@ -681,12 +686,16 @@ static void credit_entropy_bits(struct entropy_store *r, int nbits)
 	}
 
 	if (unlikely(entropy_count < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("random: negative entropy/overflow: pool %s count %d\n",
 			r->name, entropy_count);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(1);
 		entropy_count = 0;
 	} else if (entropy_count > pool_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		entropy_count = pool_size;
+}
 	if (cmpxchg(&r->entropy_count, orig, entropy_count) != orig)
 		goto retry;
 
@@ -735,7 +744,9 @@ static int credit_entropy_bits_safe(struct entropy_store *r, int nbits)
 	const int nbits_max = (int)(~0U >> (ENTROPY_SHIFT + 1));
 
 	if (nbits < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* Cap the value to avoid overflows */
 	nbits = min(nbits,  nbits_max);
@@ -792,16 +803,21 @@ static int crng_fast_load(const char *cp, size_t len)
 	char *p;
 
 	if (!spin_trylock_irqsave(&primary_crng.lock, flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (crng_ready()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irqrestore(&primary_crng.lock, flags);
 		return 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	p = (unsigned char *) &primary_crng.state[4];
 	while (len > 0 && crng_init_cnt < CRNG_INIT_CNT_THRESH) {
 		p[crng_init_cnt % CHACHA20_KEY_SIZE] ^= *cp;
 		cp++; crng_init_cnt++; len--;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&primary_crng.lock, flags);
 	if (crng_init_cnt >= CRNG_INIT_CNT_THRESH) {
 		invalidate_batched_entropy();
@@ -809,6 +825,7 @@ static int crng_fast_load(const char *cp, size_t len)
 		wake_up_interruptible(&crng_init_wait);
 		pr_notice("random: fast init done\n");
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -824,8 +841,11 @@ static void crng_reseed(struct crng_state *crng, struct entropy_store *r)
 	if (r) {
 		num = extract_entropy(r, &buf, 32, 16, 0);
 		if (num == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		_extract_crng(&primary_crng, buf.block);
 		_crng_backtrack_protect(&primary_crng, buf.block,
 					CHACHA20_KEY_SIZE);
@@ -860,10 +880,15 @@ static void _extract_crng(struct crng_state *crng,
 		crng_reseed(crng, crng == &primary_crng ? &input_pool : NULL);
 	spin_lock_irqsave(&crng->lock, flags);
 	if (arch_get_random_long(&v))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crng->state[14] ^= v;
+}
 	chacha20_block(&crng->state[0], out);
 	if (crng->state[12] == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crng->state[13]++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&crng->lock, flags);
 }
 
@@ -873,7 +898,10 @@ static void extract_crng(__u8 out[CHACHA20_BLOCK_SIZE])
 
 #ifdef CONFIG_NUMA
 	if (crng_node_pool)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crng = crng_node_pool[numa_node_id()];
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (crng == NULL)
 #endif
 		crng = &primary_crng;
@@ -901,6 +929,7 @@ static void _crng_backtrack_protect(struct crng_state *crng,
 	d = &crng->state[4];
 	for (i=0; i < 8; i++)
 		*d++ ^= *s++;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&crng->lock, flags);
 }
 
@@ -910,7 +939,10 @@ static void crng_backtrack_protect(__u8 tmp[CHACHA20_BLOCK_SIZE], int used)
 
 #ifdef CONFIG_NUMA
 	if (crng_node_pool)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crng = crng_node_pool[numa_node_id()];
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (crng == NULL)
 #endif
 		crng = &primary_crng;
@@ -926,8 +958,11 @@ static ssize_t extract_crng_user(void __user *buf, size_t nbytes)
 	while (nbytes) {
 		if (large_request && need_resched()) {
 			if (signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (ret == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ret = -ERESTARTSYS;
+}
 				break;
 			}
 			schedule();
@@ -936,6 +971,7 @@ static ssize_t extract_crng_user(void __user *buf, size_t nbytes)
 		extract_crng(tmp);
 		i = min_t(int, nbytes, CHACHA20_BLOCK_SIZE);
 		if (copy_to_user(buf, tmp, i)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EFAULT;
 			break;
 		}
@@ -1910,20 +1946,32 @@ SYSCALL_DEFINE3(getrandom, char __user *, buf, size_t, count,
 	int ret;
 
 	if (flags & ~(GRND_NONBLOCK|GRND_RANDOM))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (count > INT_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = INT_MAX;
+}
 
 	if (flags & GRND_RANDOM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return _random_read(flags & GRND_NONBLOCK, buf, count);
+}
 
 	if (!crng_ready()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (flags & GRND_NONBLOCK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EAGAIN;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = wait_for_random_bytes();
 		if (unlikely(ret))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
+}
 	}
 	return urandom_read(NULL, buf, count, NULL);
 }
@@ -1961,6 +2009,7 @@ static int proc_do_uuid(struct ctl_table *table, int write,
 
 	uuid = table->data;
 	if (!uuid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uuid = tmp_uuid;
 		generate_random_uuid(uuid);
 	} else {
@@ -2100,7 +2149,9 @@ u64 get_random_u64(void)
 
 #if BITS_PER_LONG == 64
 	if (arch_get_random_long((unsigned long *)&ret))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 #else
 	if (arch_get_random_long((unsigned long *)&ret) &&
 	    arch_get_random_long((unsigned long *)&ret + 1))
@@ -2135,7 +2186,9 @@ u32 get_random_u32(void)
 	static void *previous;
 
 	if (arch_get_random_int(&ret))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	warn_unseeded_randomness(&previous);
 
@@ -2190,17 +2243,22 @@ unsigned long
 randomize_page(unsigned long start, unsigned long range)
 {
 	if (!PAGE_ALIGNED(start)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		range -= PAGE_ALIGN(start) - start;
 		start = PAGE_ALIGN(start);
 	}
 
 	if (start > ULONG_MAX - range)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		range = ULONG_MAX - start;
+}
 
 	range >>= PAGE_SHIFT;
 
 	if (range == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return start;
+}
 
 	return start + (get_random_long() % range << PAGE_SHIFT);
 }
@@ -2215,6 +2273,7 @@ void add_hwgenerator_randomness(const char *buffer, size_t count,
 	struct entropy_store *poolp = &input_pool;
 
 	if (!crng_ready()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crng_fast_load(buffer, count);
 		return;
 	}
diff --git a/drivers/char/virtio_console.c b/drivers/char/virtio_console.c
index d1aed25..13f8b8c4 100644
--- a/drivers/char/virtio_console.c
+++ b/drivers/char/virtio_console.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2006, 2007, 2009 Rusty Russell, IBM Corporation
  * Copyright (C) 2009, 2010, 2011 Red Hat, Inc.
diff --git a/drivers/clk/clk-gpio.c b/drivers/clk/clk-gpio.c
index 86b2457..dc3fb34 100644
--- a/drivers/clk/clk-gpio.c
+++ b/drivers/clk/clk-gpio.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2013 - 2014 Texas Instruments Incorporated - http://www.ti.com
  *
@@ -35,6 +37,7 @@
 
 static int clk_gpio_gate_enable(struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_gpio *clk = to_clk_gpio(hw);
 
 	gpiod_set_value(clk->gpiod, 1);
@@ -44,6 +47,7 @@ static int clk_gpio_gate_enable(struct clk_hw *hw)
 
 static void clk_gpio_gate_disable(struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_gpio *clk = to_clk_gpio(hw);
 
 	gpiod_set_value(clk->gpiod, 0);
@@ -51,6 +55,7 @@ static void clk_gpio_gate_disable(struct clk_hw *hw)
 
 static int clk_gpio_gate_is_enabled(struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_gpio *clk = to_clk_gpio(hw);
 
 	return gpiod_get_value(clk->gpiod);
@@ -73,6 +78,7 @@ EXPORT_SYMBOL_GPL(clk_gpio_gate_ops);
 
 static u8 clk_gpio_mux_get_parent(struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_gpio *clk = to_clk_gpio(hw);
 
 	return gpiod_get_value(clk->gpiod);
@@ -80,6 +86,7 @@ static u8 clk_gpio_mux_get_parent(struct clk_hw *hw)
 
 static int clk_gpio_mux_set_parent(struct clk_hw *hw, u8 index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_gpio *clk = to_clk_gpio(hw);
 
 	gpiod_set_value(clk->gpiod, index);
@@ -106,7 +113,9 @@ static struct clk_hw *clk_register_gpio(struct device *dev, const char *name,
 	int err;
 
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clk_gpio = devm_kzalloc(dev, sizeof(*clk_gpio),	GFP_KERNEL);
+}
 	else
 		clk_gpio = kzalloc(sizeof(*clk_gpio), GFP_KERNEL);
 
@@ -188,7 +197,9 @@ struct clk *clk_register_gpio_gate(struct device *dev, const char *name,
 	hw = clk_hw_register_gpio_gate(dev, name, parent_name, gpio, active_low,
 				       flags);
 	if (IS_ERR(hw))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(hw);
+}
 	return hw->clk;
 }
 EXPORT_SYMBOL_GPL(clk_register_gpio_gate);
@@ -207,6 +218,7 @@ struct clk_hw *clk_hw_register_gpio_mux(struct device *dev, const char *name,
 		const char * const *parent_names, u8 num_parents, unsigned gpio,
 		bool active_low, unsigned long flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (num_parents != 2) {
 		pr_err("mux-clock %s must have 2 parents\n", name);
 		return ERR_PTR(-EINVAL);
@@ -226,7 +238,9 @@ struct clk *clk_register_gpio_mux(struct device *dev, const char *name,
 	hw = clk_hw_register_gpio_mux(dev, name, parent_names, num_parents,
 			gpio, active_low, flags);
 	if (IS_ERR(hw))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(hw);
+}
 	return hw->clk;
 }
 EXPORT_SYMBOL_GPL(clk_register_gpio_mux);
@@ -243,6 +257,7 @@ static int gpio_clk_driver_probe(struct platform_device *pdev)
 
 	num_parents = of_clk_get_parent_count(node);
 	if (num_parents) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent_names = devm_kcalloc(&pdev->dev, num_parents,
 					    sizeof(char *), GFP_KERNEL);
 		if (!parent_names)
diff --git a/drivers/clk/clk.c b/drivers/clk/clk.c
index c8d83ac..9d82824 100644
--- a/drivers/clk/clk.c
+++ b/drivers/clk/clk.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2010-2011 Canonical Ltd <jeremy.kerr@canonical.com>
  * Copyright (C) 2011-2012 Linaro Ltd <mturquette@linaro.org>
@@ -91,10 +93,13 @@ struct clk {
 static void clk_prepare_lock(void)
 {
 	if (!mutex_trylock(&prepare_lock)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (prepare_owner == current) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			prepare_refcnt++;
 			return;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_lock(&prepare_lock);
 	}
 	WARN_ON_ONCE(prepare_owner != NULL);
@@ -109,7 +114,9 @@ static void clk_prepare_unlock(void)
 	WARN_ON_ONCE(prepare_refcnt == 0);
 
 	if (--prepare_refcnt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	prepare_owner = NULL;
 	mutex_unlock(&prepare_lock);
 }
@@ -119,6 +126,7 @@ static unsigned long clk_enable_lock(void)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!spin_trylock_irqsave(&enable_lock, flags)) {
 		if (enable_owner == current) {
 			enable_refcnt++;
@@ -137,6 +145,7 @@ static unsigned long clk_enable_lock(void)
 static void clk_enable_unlock(unsigned long flags)
 	__releases(enable_lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(enable_owner != current);
 	WARN_ON_ONCE(enable_refcnt == 0);
 
@@ -176,30 +185,35 @@ static bool clk_core_is_enabled(struct clk_core *core)
 
 const char *__clk_get_name(const struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !clk ? NULL : clk->core->name;
 }
 EXPORT_SYMBOL_GPL(__clk_get_name);
 
 const char *clk_hw_get_name(const struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hw->core->name;
 }
 EXPORT_SYMBOL_GPL(clk_hw_get_name);
 
 struct clk_hw *__clk_get_hw(struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !clk ? NULL : clk->core->hw;
 }
 EXPORT_SYMBOL_GPL(__clk_get_hw);
 
 unsigned int clk_hw_get_num_parents(const struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hw->core->num_parents;
 }
 EXPORT_SYMBOL_GPL(clk_hw_get_num_parents);
 
 struct clk_hw *clk_hw_get_parent(const struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hw->core->parent ? hw->core->parent->hw : NULL;
 }
 EXPORT_SYMBOL_GPL(clk_hw_get_parent);
@@ -211,7 +225,9 @@ static struct clk_core *__clk_lookup_subtree(const char *name,
 	struct clk_core *ret;
 
 	if (!strcmp(core->name, name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return core;
+}
 
 	hlist_for_each_entry(child, &core->children, child_node) {
 		ret = __clk_lookup_subtree(name, child);
@@ -228,7 +244,9 @@ static struct clk_core *clk_core_lookup(const char *name)
 	struct clk_core *ret;
 
 	if (!name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/* search the 'proper' clk tree first */
 	hlist_for_each_entry(root_clk, &clk_root_list, child_node) {
@@ -250,6 +268,7 @@ static struct clk_core *clk_core_lookup(const char *name)
 static struct clk_core *clk_core_get_parent_by_index(struct clk_core *core,
 							 u8 index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!core || index >= core->num_parents)
 		return NULL;
 
@@ -267,12 +286,14 @@ clk_hw_get_parent_by_index(const struct clk_hw *hw, unsigned int index)
 
 	parent = clk_core_get_parent_by_index(hw->core, index);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !parent ? NULL : parent->hw;
 }
 EXPORT_SYMBOL_GPL(clk_hw_get_parent_by_index);
 
 unsigned int __clk_get_enable_count(struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !clk ? 0 : clk->core->enable_count;
 }
 
@@ -281,6 +302,7 @@ static unsigned long clk_core_get_rate_nolock(struct clk_core *core)
 	unsigned long ret;
 
 	if (!core) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 0;
 		goto out;
 	}
@@ -299,12 +321,14 @@ static unsigned long clk_core_get_rate_nolock(struct clk_core *core)
 
 unsigned long clk_hw_get_rate(const struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return clk_core_get_rate_nolock(hw->core);
 }
 EXPORT_SYMBOL_GPL(clk_hw_get_rate);
 
 static unsigned long __clk_get_accuracy(struct clk_core *core)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!core)
 		return 0;
 
@@ -313,28 +337,33 @@ static unsigned long __clk_get_accuracy(struct clk_core *core)
 
 unsigned long __clk_get_flags(struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !clk ? 0 : clk->core->flags;
 }
 EXPORT_SYMBOL_GPL(__clk_get_flags);
 
 unsigned long clk_hw_get_flags(const struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hw->core->flags;
 }
 EXPORT_SYMBOL_GPL(clk_hw_get_flags);
 
 bool clk_hw_is_prepared(const struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return clk_core_is_prepared(hw->core);
 }
 
 bool clk_hw_is_enabled(const struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return clk_core_is_enabled(hw->core);
 }
 
 bool __clk_is_enabled(struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk)
 		return false;
 
@@ -345,6 +374,7 @@ EXPORT_SYMBOL_GPL(__clk_is_enabled);
 static bool mux_is_better_rate(unsigned long rate, unsigned long now,
 			   unsigned long best, unsigned long flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (flags & CLK_MUX_ROUND_CLOSEST)
 		return abs(now - rate) < abs(best - rate);
 
@@ -362,6 +392,7 @@ clk_mux_determine_rate_flags(struct clk_hw *hw, struct clk_rate_request *req,
 
 	/* if NO_REPARENT flag set, pass through to current parent */
 	if (core->flags & CLK_SET_RATE_NO_REPARENT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = core->parent;
 		if (core->flags & CLK_SET_RATE_PARENT) {
 			ret = __clk_determine_rate(parent ? parent->hw : NULL,
@@ -416,6 +447,7 @@ clk_mux_determine_rate_flags(struct clk_hw *hw, struct clk_rate_request *req,
 
 struct clk *__clk_lookup(const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_core *core = clk_core_lookup(name);
 
 	return !core ? NULL : core->hw->clk;
@@ -430,6 +462,7 @@ static void clk_core_get_boundaries(struct clk_core *core,
 	*min_rate = core->min_rate;
 	*max_rate = core->max_rate;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry(clk_user, &core->clks, clks_node)
 		*min_rate = max(*min_rate, clk_user->min_rate);
 
@@ -440,6 +473,7 @@ static void clk_core_get_boundaries(struct clk_core *core,
 void clk_hw_set_rate_range(struct clk_hw *hw, unsigned long min_rate,
 			   unsigned long max_rate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hw->core->min_rate = min_rate;
 	hw->core->max_rate = max_rate;
 }
@@ -453,6 +487,7 @@ EXPORT_SYMBOL_GPL(clk_hw_set_rate_range);
 int __clk_mux_determine_rate(struct clk_hw *hw,
 			     struct clk_rate_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return clk_mux_determine_rate_flags(hw, req, 0);
 }
 EXPORT_SYMBOL_GPL(__clk_mux_determine_rate);
@@ -460,6 +495,7 @@ EXPORT_SYMBOL_GPL(__clk_mux_determine_rate);
 int __clk_mux_determine_rate_closest(struct clk_hw *hw,
 				     struct clk_rate_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return clk_mux_determine_rate_flags(hw, req, CLK_MUX_ROUND_CLOSEST);
 }
 EXPORT_SYMBOL_GPL(__clk_mux_determine_rate_closest);
@@ -468,6 +504,7 @@ EXPORT_SYMBOL_GPL(__clk_mux_determine_rate_closest);
 
 static void clk_core_unprepare(struct clk_core *core)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&prepare_lock);
 
 	if (!core)
@@ -495,6 +532,7 @@ static void clk_core_unprepare(struct clk_core *core)
 
 static void clk_core_unprepare_lock(struct clk_core *core)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clk_prepare_lock();
 	clk_core_unprepare(core);
 	clk_prepare_unlock();
@@ -513,6 +551,7 @@ static void clk_core_unprepare_lock(struct clk_core *core)
  */
 void clk_unprepare(struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ERR_OR_NULL(clk))
 		return;
 
@@ -524,6 +563,7 @@ static int clk_core_prepare(struct clk_core *core)
 {
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&prepare_lock);
 
 	if (!core)
@@ -577,6 +617,7 @@ static int clk_core_prepare_lock(struct clk_core *core)
  */
 int clk_prepare(struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk)
 		return 0;
 
@@ -586,6 +627,7 @@ EXPORT_SYMBOL_GPL(clk_prepare);
 
 static void clk_core_disable(struct clk_core *core)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&enable_lock);
 
 	if (!core)
@@ -633,6 +675,7 @@ static void clk_core_disable_lock(struct clk_core *core)
  */
 void clk_disable(struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ERR_OR_NULL(clk))
 		return;
 
@@ -644,6 +687,7 @@ static int clk_core_enable(struct clk_core *core)
 {
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&enable_lock);
 
 	if (!core)
@@ -702,6 +746,7 @@ static int clk_core_enable_lock(struct clk_core *core)
  */
 int clk_enable(struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk)
 		return 0;
 
@@ -715,7 +760,9 @@ static int clk_core_prepare_enable(struct clk_core *core)
 
 	ret = clk_core_prepare_lock(core);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = clk_core_enable_lock(core);
 	if (ret)
@@ -726,6 +773,7 @@ static int clk_core_prepare_enable(struct clk_core *core)
 
 static void clk_core_disable_unprepare(struct clk_core *core)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clk_core_disable_lock(core);
 	clk_core_unprepare_lock(core);
 }
@@ -734,6 +782,7 @@ static void clk_unprepare_unused_subtree(struct clk_core *core)
 {
 	struct clk_core *child;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&prepare_lock);
 
 	hlist_for_each_entry(child, &core->children, child_node)
@@ -760,6 +809,7 @@ static void clk_disable_unused_subtree(struct clk_core *core)
 	struct clk_core *child;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&prepare_lock);
 
 	hlist_for_each_entry(child, &core->children, child_node)
@@ -799,6 +849,7 @@ static void clk_disable_unused_subtree(struct clk_core *core)
 static bool clk_ignore_unused;
 static int __init clk_ignore_unused_setup(char *__unused)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clk_ignore_unused = true;
 	return 1;
 }
@@ -809,6 +860,7 @@ static int clk_disable_unused(void)
 	struct clk_core *core;
 
 	if (clk_ignore_unused) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("clk: Not disabling unused clocks\n");
 		return 0;
 	}
@@ -839,6 +891,7 @@ static int clk_core_round_rate_nolock(struct clk_core *core,
 	struct clk_core *parent;
 	long rate;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&prepare_lock);
 
 	if (!core)
@@ -880,6 +933,7 @@ static int clk_core_round_rate_nolock(struct clk_core *core,
  */
 int __clk_determine_rate(struct clk_hw *hw, struct clk_rate_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!hw) {
 		req->rate = 0;
 		return 0;
@@ -899,7 +953,9 @@ unsigned long clk_hw_round_rate(struct clk_hw *hw, unsigned long rate)
 
 	ret = clk_core_round_rate_nolock(hw->core, &req);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return req.rate;
 }
@@ -920,7 +976,9 @@ long clk_round_rate(struct clk *clk, unsigned long rate)
 	int ret;
 
 	if (!clk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	clk_prepare_lock();
 
@@ -961,6 +1019,7 @@ static int __clk_notify(struct clk_core *core, unsigned long msg,
 	cnd.old_rate = old_rate;
 	cnd.new_rate = new_rate;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(cn, &clk_notifier_list, node) {
 		if (cn->clk->core == core) {
 			cnd.clk = cn->clk;
@@ -988,6 +1047,7 @@ static void __clk_recalc_accuracies(struct clk_core *core)
 	unsigned long parent_accuracy = 0;
 	struct clk_core *child;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&prepare_lock);
 
 	if (core->parent)
@@ -1008,6 +1068,7 @@ static long clk_core_get_accuracy(struct clk_core *core)
 	unsigned long accuracy;
 
 	clk_prepare_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (core && (core->flags & CLK_GET_ACCURACY_NOCACHE))
 		__clk_recalc_accuracies(core);
 
@@ -1028,6 +1089,7 @@ static long clk_core_get_accuracy(struct clk_core *core)
  */
 long clk_get_accuracy(struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk)
 		return 0;
 
@@ -1038,6 +1100,7 @@ EXPORT_SYMBOL_GPL(clk_get_accuracy);
 static unsigned long clk_recalc(struct clk_core *core,
 				unsigned long parent_rate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (core->ops->recalc_rate)
 		return core->ops->recalc_rate(core->hw, parent_rate);
 	return parent_rate;
@@ -1061,6 +1124,7 @@ static void __clk_recalc_rates(struct clk_core *core, unsigned long msg)
 	unsigned long parent_rate = 0;
 	struct clk_core *child;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&prepare_lock);
 
 	old_rate = core->rate;
@@ -1087,6 +1151,7 @@ static unsigned long clk_core_get_rate(struct clk_core *core)
 
 	clk_prepare_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (core && (core->flags & CLK_GET_RATE_NOCACHE))
 		__clk_recalc_rates(core, 0);
 
@@ -1106,6 +1171,7 @@ static unsigned long clk_core_get_rate(struct clk_core *core)
  */
 unsigned long clk_get_rate(struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk)
 		return 0;
 
@@ -1119,7 +1185,9 @@ static int clk_fetch_parent_index(struct clk_core *core,
 	int i;
 
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	for (i = 0; i < core->num_parents; i++)
 		if (clk_core_get_parent_by_index(core, i) == parent)
@@ -1137,6 +1205,7 @@ static void clk_core_update_orphan_status(struct clk_core *core, bool is_orphan)
 
 	core->orphan = is_orphan;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry(child, &core->children, child_node)
 		clk_core_update_orphan_status(child, is_orphan);
 }
@@ -1152,7 +1221,9 @@ static void clk_reparent(struct clk_core *core, struct clk_core *new_parent)
 
 		/* avoid duplicate POST_RATE_CHANGE notifications */
 		if (new_parent->new_child == core)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			new_parent->new_child = NULL;
+}
 
 		hlist_add_head(&core->child_node, &new_parent->children);
 
@@ -1195,6 +1266,7 @@ static struct clk_core *__clk_set_parent_before(struct clk_core *core,
 
 	/* enable old_parent & parent if CLK_OPS_PARENT_ENABLE is set */
 	if (core->flags & CLK_OPS_PARENT_ENABLE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clk_core_prepare_enable(old_parent);
 		clk_core_prepare_enable(parent);
 	}
@@ -1285,6 +1357,7 @@ static int __clk_speculate_rates(struct clk_core *core,
 	unsigned long new_rate;
 	int ret = NOTIFY_DONE;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&prepare_lock);
 
 	new_rate = clk_recalc(core, parent_rate);
@@ -1319,6 +1392,7 @@ static void clk_calc_subtree(struct clk_core *core, unsigned long new_rate,
 	core->new_parent_index = p_index;
 	/* include clk in new parent's PRE_RATE_CHANGE notifications */
 	core->new_child = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (new_parent && new_parent != core->parent)
 		new_parent->new_child = core;
 
@@ -1346,7 +1420,9 @@ static struct clk_core *clk_calc_new_rates(struct clk_core *core,
 
 	/* sanity */
 	if (IS_ERR_OR_NULL(core))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/* save parent rate, if it exists */
 	parent = old_parent = core->parent;
@@ -1437,7 +1513,9 @@ static struct clk_core *clk_propagate_rate_change(struct clk_core *core,
 	int ret = NOTIFY_DONE;
 
 	if (core->rate == core->new_rate)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (core->notifier_count) {
 		ret = __clk_notify(core, event, core->rate, core->new_rate);
@@ -1481,6 +1559,7 @@ static void clk_change_rate(struct clk_core *core)
 	old_rate = core->rate;
 
 	if (core->new_parent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = core->new_parent;
 		best_parent_rate = core->new_parent->rate;
 	} else if (core->parent) {
@@ -1567,7 +1646,9 @@ static int clk_core_set_rate_nolock(struct clk_core *core,
 	unsigned long rate = req_rate;
 
 	if (!core)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* bail early if nothing to do */
 	if (rate == clk_core_get_rate_nolock(core))
@@ -1624,7 +1705,9 @@ int clk_set_rate(struct clk *clk, unsigned long rate)
 	int ret;
 
 	if (!clk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* prevent racing with updates to the clock topology */
 	clk_prepare_lock();
@@ -1650,7 +1733,9 @@ int clk_set_rate_range(struct clk *clk, unsigned long min, unsigned long max)
 	int ret = 0;
 
 	if (!clk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (min > max) {
 		pr_err("%s: clk %s dev %s con %s: invalid range [%lu, %lu]\n",
@@ -1682,6 +1767,7 @@ EXPORT_SYMBOL_GPL(clk_set_rate_range);
  */
 int clk_set_min_rate(struct clk *clk, unsigned long rate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk)
 		return 0;
 
@@ -1698,6 +1784,7 @@ EXPORT_SYMBOL_GPL(clk_set_min_rate);
  */
 int clk_set_max_rate(struct clk *clk, unsigned long rate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk)
 		return 0;
 
@@ -1716,7 +1803,9 @@ struct clk *clk_get_parent(struct clk *clk)
 	struct clk *parent;
 
 	if (!clk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	clk_prepare_lock();
 	/* TODO: Create a per-user clk and change callers to call clk_put */
@@ -1731,6 +1820,7 @@ static struct clk_core *__clk_init_parent(struct clk_core *core)
 {
 	u8 index = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (core->num_parents > 1 && core->ops->get_parent)
 		index = core->ops->get_parent(core->hw);
 
@@ -1740,6 +1830,7 @@ static struct clk_core *__clk_init_parent(struct clk_core *core)
 static void clk_core_reparent(struct clk_core *core,
 				  struct clk_core *new_parent)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clk_reparent(core, new_parent);
 	__clk_recalc_accuracies(core);
 	__clk_recalc_rates(core, POST_RATE_CHANGE);
@@ -1747,6 +1838,7 @@ static void clk_core_reparent(struct clk_core *core,
 
 void clk_hw_reparent(struct clk_hw *hw, struct clk_hw *new_parent)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!hw)
 		return;
 
@@ -1794,7 +1886,9 @@ static int clk_core_set_parent(struct clk_core *core, struct clk_core *parent)
 	unsigned long p_rate = 0;
 
 	if (!core)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* prevent racing with updates to the clock topology */
 	clk_prepare_lock();
@@ -1869,6 +1963,7 @@ static int clk_core_set_parent(struct clk_core *core, struct clk_core *parent)
  */
 int clk_set_parent(struct clk *clk, struct clk *parent)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk)
 		return 0;
 
@@ -1901,7 +1996,9 @@ int clk_set_phase(struct clk *clk, int degrees)
 	int ret = -EINVAL;
 
 	if (!clk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* sanity check degrees */
 	degrees %= 360;
@@ -1946,6 +2043,7 @@ static int clk_core_get_phase(struct clk_core *core)
  */
 int clk_get_phase(struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk)
 		return 0;
 
@@ -2003,6 +2101,7 @@ static struct hlist_head *orphan_list[] = {
 static void clk_summary_show_one(struct seq_file *s, struct clk_core *c,
 				 int level)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!c)
 		return;
 
@@ -2019,7 +2118,9 @@ static void clk_summary_show_subtree(struct seq_file *s, struct clk_core *c,
 	struct clk_core *child;
 
 	if (!c)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	clk_summary_show_one(s, c, level);
 
@@ -2037,6 +2138,7 @@ static int clk_summary_show(struct seq_file *s, void *data)
 
 	clk_prepare_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (; *lists; lists++)
 		hlist_for_each_entry(c, *lists, child_node)
 			clk_summary_show_subtree(s, c, 0);
@@ -2049,6 +2151,7 @@ static int clk_summary_show(struct seq_file *s, void *data)
 
 static int clk_summary_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, clk_summary_show, inode->i_private);
 }
 
@@ -2061,6 +2164,7 @@ static const struct file_operations clk_summary_fops = {
 
 static void clk_dump_one(struct seq_file *s, struct clk_core *c, int level)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!c)
 		return;
 
@@ -2078,7 +2182,9 @@ static void clk_dump_subtree(struct seq_file *s, struct clk_core *c, int level)
 	struct clk_core *child;
 
 	if (!c)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	clk_dump_one(s, c, level);
 
@@ -2099,6 +2205,7 @@ static int clk_dump(struct seq_file *s, void *data)
 	seq_putc(s, '{');
 	clk_prepare_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (; *lists; lists++) {
 		hlist_for_each_entry(c, *lists, child_node) {
 			if (!first_node)
@@ -2117,6 +2224,7 @@ static int clk_dump(struct seq_file *s, void *data)
 
 static int clk_dump_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, clk_dump, inode->i_private);
 }
 
@@ -2132,6 +2240,7 @@ static int possible_parents_dump(struct seq_file *s, void *data)
 	struct clk_core *core = s->private;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < core->num_parents - 1; i++)
 		seq_printf(s, "%s ", core->parent_names[i]);
 
@@ -2142,6 +2251,7 @@ static int possible_parents_dump(struct seq_file *s, void *data)
 
 static int possible_parents_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, possible_parents_dump, inode->i_private);
 }
 
@@ -2157,6 +2267,7 @@ static int clk_debug_create_one(struct clk_core *core, struct dentry *pdentry)
 	struct dentry *d;
 	int ret = -ENOMEM;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!core || !pdentry) {
 		ret = -EINVAL;
 		goto out;
@@ -2244,6 +2355,7 @@ static int clk_debug_register(struct clk_core *core)
 	if (!inited)
 		goto unlock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = clk_debug_create_one(core, rootdir);
 unlock:
 	mutex_unlock(&clk_debug_lock);
@@ -2261,6 +2373,7 @@ static int clk_debug_register(struct clk_core *core)
  */
 static void clk_debug_unregister(struct clk_core *core)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&clk_debug_lock);
 	hlist_del_init(&core->debug_node);
 	debugfs_remove_recursive(core->dentry);
@@ -2274,8 +2387,10 @@ struct dentry *clk_debugfs_add_file(struct clk_hw *hw, char *name, umode_t mode,
 	struct dentry *d = NULL;
 
 	if (hw->core->dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		d = debugfs_create_file(name, mode, hw->core->dentry, data,
 					fops);
+}
 
 	return d;
 }
@@ -2298,27 +2413,37 @@ static int __init clk_debug_init(void)
 	rootdir = debugfs_create_dir("clk", NULL);
 
 	if (!rootdir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	d = debugfs_create_file("clk_summary", S_IRUGO, rootdir, &all_lists,
 				&clk_summary_fops);
 	if (!d)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	d = debugfs_create_file("clk_dump", S_IRUGO, rootdir, &all_lists,
 				&clk_dump_fops);
 	if (!d)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	d = debugfs_create_file("clk_orphan_summary", S_IRUGO, rootdir,
 				&orphan_list, &clk_summary_fops);
 	if (!d)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	d = debugfs_create_file("clk_orphan_dump", S_IRUGO, rootdir,
 				&orphan_list, &clk_dump_fops);
 	if (!d)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	mutex_lock(&clk_debug_lock);
 	hlist_for_each_entry(core, &clk_debug_list, debug_node)
@@ -2662,6 +2787,7 @@ EXPORT_SYMBOL_GPL(clk_register);
  */
 int clk_hw_register(struct device *dev, struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return PTR_ERR_OR_ZERO(clk_register(dev, hw));
 }
 EXPORT_SYMBOL_GPL(clk_hw_register);
@@ -2669,6 +2795,7 @@ EXPORT_SYMBOL_GPL(clk_hw_register);
 /* Free memory allocated for a clock. */
 static void __clk_release(struct kref *ref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_core *core = container_of(ref, struct clk_core, ref);
 	int i = core->num_parents;
 
@@ -2690,22 +2817,26 @@ static void __clk_release(struct kref *ref)
  */
 static int clk_nodrv_prepare_enable(struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENXIO;
 }
 
 static void clk_nodrv_disable_unprepare(struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(1);
 }
 
 static int clk_nodrv_set_rate(struct clk_hw *hw, unsigned long rate,
 					unsigned long parent_rate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENXIO;
 }
 
 static int clk_nodrv_set_parent(struct clk_hw *hw, u8 index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENXIO;
 }
 
@@ -2726,6 +2857,7 @@ void clk_unregister(struct clk *clk)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk || WARN_ON_ONCE(IS_ERR(clk)))
 		return;
 
@@ -2773,17 +2905,20 @@ EXPORT_SYMBOL_GPL(clk_unregister);
  */
 void clk_hw_unregister(struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clk_unregister(hw->clk);
 }
 EXPORT_SYMBOL_GPL(clk_hw_unregister);
 
 static void devm_clk_release(struct device *dev, void *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clk_unregister(*(struct clk **)res);
 }
 
 static void devm_clk_hw_release(struct device *dev, void *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clk_hw_unregister(*(struct clk_hw **)res);
 }
 
@@ -2803,7 +2938,9 @@ struct clk *devm_clk_register(struct device *dev, struct clk_hw *hw)
 
 	clkp = devres_alloc(devm_clk_release, sizeof(*clkp), GFP_KERNEL);
 	if (!clkp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	clk = clk_register(dev, hw);
 	if (!IS_ERR(clk)) {
@@ -2833,7 +2970,9 @@ int devm_clk_hw_register(struct device *dev, struct clk_hw *hw)
 
 	hwp = devres_alloc(devm_clk_hw_release, sizeof(*hwp), GFP_KERNEL);
 	if (!hwp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ret = clk_hw_register(dev, hw);
 	if (!ret) {
@@ -2850,6 +2989,7 @@ EXPORT_SYMBOL_GPL(devm_clk_hw_register);
 static int devm_clk_match(struct device *dev, void *res, void *data)
 {
 	struct clk *c = res;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(!c))
 		return 0;
 	return c == data;
@@ -2859,6 +2999,7 @@ static int devm_clk_hw_match(struct device *dev, void *res, void *data)
 {
 	struct clk_hw *hw = res;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(!hw))
 		return 0;
 	return hw == data;
@@ -2874,6 +3015,7 @@ static int devm_clk_hw_match(struct device *dev, void *res, void *data)
  */
 void devm_clk_unregister(struct device *dev, struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(devres_release(dev, devm_clk_release, devm_clk_match, clk));
 }
 EXPORT_SYMBOL_GPL(devm_clk_unregister);
@@ -2889,6 +3031,7 @@ EXPORT_SYMBOL_GPL(devm_clk_unregister);
  */
 void devm_clk_hw_unregister(struct device *dev, struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(devres_release(dev, devm_clk_hw_release, devm_clk_hw_match,
 				hw));
 }
@@ -2899,6 +3042,7 @@ EXPORT_SYMBOL_GPL(devm_clk_hw_unregister);
  */
 int __clk_get(struct clk *clk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_core *core = !clk ? NULL : clk->core;
 
 	if (core) {
@@ -2914,6 +3058,7 @@ void __clk_put(struct clk *clk)
 {
 	struct module *owner;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk || WARN_ON_ONCE(IS_ERR(clk)))
 		return;
 
@@ -2961,6 +3106,7 @@ int clk_notifier_register(struct clk *clk, struct notifier_block *nb)
 	struct clk_notifier *cn;
 	int ret = -ENOMEM;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk || !nb)
 		return -EINVAL;
 
@@ -3010,6 +3156,7 @@ int clk_notifier_unregister(struct clk *clk, struct notifier_block *nb)
 	struct clk_notifier *cn = NULL;
 	int ret = -EINVAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!clk || !nb)
 		return -EINVAL;
 
diff --git a/drivers/clk/x86/clk-pmc-atom.c b/drivers/clk/x86/clk-pmc-atom.c
index 08ef699..bcd5390 100644
--- a/drivers/clk/x86/clk-pmc-atom.c
+++ b/drivers/clk/x86/clk-pmc-atom.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Intel Atom platform clocks driver for BayTrail and CherryTrail SoCs
  *
@@ -60,6 +62,7 @@ struct clk_plt_data {
 /* Return an index in parent table */
 static inline int plt_reg_to_parent(int reg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (reg & PMC_MASK_CLK_FREQ) {
 	default:
 	case PMC_CLK_FREQ_XTAL:
@@ -72,6 +75,7 @@ static inline int plt_reg_to_parent(int reg)
 /* Return clk index of parent */
 static inline int plt_parent_to_reg(int index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (index) {
 	default:
 	case 0:
@@ -84,6 +88,7 @@ static inline int plt_parent_to_reg(int index)
 /* Abstract status in simpler enabled/disabled value */
 static inline int plt_reg_to_enabled(int reg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (reg & PMC_MASK_CLK_CTL) {
 	case PMC_CLK_CTL_GATED_ON_D3:
 	case PMC_CLK_CTL_FORCE_ON:
@@ -100,6 +105,7 @@ static void plt_clk_reg_update(struct clk_plt *clk, u32 mask, u32 val)
 	u32 tmp;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&clk->lock, flags);
 
 	tmp = readl(clk->reg);
@@ -111,6 +117,7 @@ static void plt_clk_reg_update(struct clk_plt *clk, u32 mask, u32 val)
 
 static int plt_clk_set_parent(struct clk_hw *hw, u8 index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_plt *clk = to_clk_plt(hw);
 
 	plt_clk_reg_update(clk, PMC_MASK_CLK_FREQ, plt_parent_to_reg(index));
@@ -120,6 +127,7 @@ static int plt_clk_set_parent(struct clk_hw *hw, u8 index)
 
 static u8 plt_clk_get_parent(struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_plt *clk = to_clk_plt(hw);
 	u32 value;
 
@@ -130,6 +138,7 @@ static u8 plt_clk_get_parent(struct clk_hw *hw)
 
 static int plt_clk_enable(struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_plt *clk = to_clk_plt(hw);
 
 	plt_clk_reg_update(clk, PMC_MASK_CLK_CTL, PMC_CLK_CTL_FORCE_ON);
@@ -139,6 +148,7 @@ static int plt_clk_enable(struct clk_hw *hw)
 
 static void plt_clk_disable(struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_plt *clk = to_clk_plt(hw);
 
 	plt_clk_reg_update(clk, PMC_MASK_CLK_CTL, PMC_CLK_CTL_FORCE_OFF);
@@ -146,6 +156,7 @@ static void plt_clk_disable(struct clk_hw *hw)
 
 static int plt_clk_is_enabled(struct clk_hw *hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct clk_plt *clk = to_clk_plt(hw);
 	u32 value;
 
@@ -174,7 +185,9 @@ static struct clk_plt *plt_clk_register(struct platform_device *pdev, int id,
 
 	pclk = devm_kzalloc(&pdev->dev, sizeof(*pclk), GFP_KERNEL);
 	if (!pclk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	init.name =  kasprintf(GFP_KERNEL, "%s_%d", PLT_CLK_NAME_BASE, id);
 	init.ops = &plt_clk_ops;
@@ -212,6 +225,7 @@ static struct clk_plt *plt_clk_register(struct platform_device *pdev, int id,
 
 static void plt_clk_unregister(struct clk_plt *pclk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clkdev_drop(pclk->lookup);
 }
 
@@ -224,7 +238,9 @@ static struct clk_plt_fixed *plt_clk_register_fixed_rate(struct platform_device
 
 	pclk = devm_kzalloc(&pdev->dev, sizeof(*pclk), GFP_KERNEL);
 	if (!pclk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	pclk->clk = clk_hw_register_fixed_rate(&pdev->dev, name, parent_name,
 					       0, fixed_rate);
@@ -242,6 +258,7 @@ static struct clk_plt_fixed *plt_clk_register_fixed_rate(struct platform_device
 
 static void plt_clk_unregister_fixed_rate(struct clk_plt_fixed *pclk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clkdev_drop(pclk->lookup);
 	clk_hw_unregister_fixed_rate(pclk->clk);
 }
@@ -249,6 +266,7 @@ static void plt_clk_unregister_fixed_rate(struct clk_plt_fixed *pclk)
 static void plt_clk_unregister_fixed_rate_loop(struct clk_plt_data *data,
 					       unsigned int i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (i--)
 		plt_clk_unregister_fixed_rate(data->parents[i]);
 }
@@ -256,6 +274,7 @@ static void plt_clk_unregister_fixed_rate_loop(struct clk_plt_data *data,
 static void plt_clk_free_parent_names_loop(const char **parent_names,
 					   unsigned int i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (i--)
 		kfree_const(parent_names[i]);
 	kfree(parent_names);
@@ -264,6 +283,7 @@ static void plt_clk_free_parent_names_loop(const char **parent_names,
 static void plt_clk_unregister_loop(struct clk_plt_data *data,
 				    unsigned int i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (i--)
 		plt_clk_unregister(data->clks[i]);
 }
@@ -278,6 +298,7 @@ static const char **plt_clk_register_parents(struct platform_device *pdev,
 	int nparents = 0;
 
 	data->nparents = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (clks[nparents].name)
 		nparents++;
 
@@ -314,6 +335,7 @@ static const char **plt_clk_register_parents(struct platform_device *pdev,
 
 static void plt_clk_unregister_parents(struct clk_plt_data *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	plt_clk_unregister_fixed_rate_loop(data, data->nparents);
 }
 
@@ -326,6 +348,7 @@ static int plt_clk_probe(struct platform_device *pdev)
 	int err;
 
 	pmc_data = dev_get_platdata(&pdev->dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pmc_data || !pmc_data->clks)
 		return -EINVAL;
 
diff --git a/drivers/clocksource/acpi_pm.c b/drivers/clocksource/acpi_pm.c
index 1961e35..aaef1bd 100644
--- a/drivers/clocksource/acpi_pm.c
+++ b/drivers/clocksource/acpi_pm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/drivers/clocksource/acpi_pm.c
  *
@@ -76,6 +78,7 @@ static struct clocksource clocksource_acpi_pm = {
 static int acpi_pm_good;
 static int __init acpi_pm_good_setup(char *__str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_pm_good = 1;
 	return 1;
 }
@@ -83,11 +86,13 @@ __setup("acpi_pm_good", acpi_pm_good_setup);
 
 static u64 acpi_pm_read_slow(struct clocksource *cs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (u64)acpi_pm_read_verified();
 }
 
 static inline void acpi_pm_need_workaround(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clocksource_acpi_pm.read = acpi_pm_read_slow;
 	clocksource_acpi_pm.rating = 120;
 }
@@ -104,6 +109,7 @@ static inline void acpi_pm_need_workaround(void)
  */
 static void acpi_pm_check_blacklist(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_pm_good)
 		return;
 
@@ -120,6 +126,7 @@ DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82371AB_3,
 
 static void acpi_pm_check_graylist(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_pm_good)
 		return;
 
@@ -179,7 +186,9 @@ static int __init init_acpi_pm_clocksource(void)
 	unsigned int i, j = 0;
 
 	if (!pmtmr_ioport)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* "verify" this timing source: */
 	for (j = 0; j < ACPI_PM_MONOTONICITY_CHECKS; j++) {
@@ -191,14 +200,17 @@ static int __init init_acpi_pm_clocksource(void)
 				continue;
 			if (value2 > value1)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if ((value2 < value1) && ((value2) < 0xFFF))
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_info("PM-Timer had inconsistent results: %#llx, %#llx - aborting.\n",
 				value1, value2);
 			pmtmr_ioport = 0;
 			return -EINVAL;
 		}
 		if (i == ACPI_PM_READ_CHECKS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_info("PM-Timer failed consistency check  (%#llx) - aborting.\n",
 				value1);
 			pmtmr_ioport = 0;
@@ -206,7 +218,9 @@ static int __init init_acpi_pm_clocksource(void)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (verify_pmtmr_rate() != 0){
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pmtmr_ioport = 0;
 		return -ENODEV;
 	}
@@ -231,7 +245,9 @@ static int __init parse_pmtmr(char *arg)
 
 	ret = kstrtouint(arg, 16, &base);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	pr_info("PMTMR IOPort override: 0x%04x -> 0x%04x\n", pmtmr_ioport,
 		base);
diff --git a/drivers/connector/cn_proc.c b/drivers/connector/cn_proc.c
index a782ce8..cf78ca3 100644
--- a/drivers/connector/cn_proc.c
+++ b/drivers/connector/cn_proc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * cn_proc.c - process events connector
  *
@@ -45,6 +47,7 @@
 /* See comment above; we test our assumption about sizeof struct cn_msg here. */
 static inline struct cn_msg *buffer_to_cn_msg(__u8 *buffer)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(sizeof(struct cn_msg) != 20);
 	return (struct cn_msg *)(buffer + 4);
 }
@@ -57,6 +60,7 @@ static DEFINE_PER_CPU(__u32, proc_event_counts) = { 0 };
 
 static inline void send_msg(struct cn_msg *msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	preempt_disable();
 
 	msg->seq = __this_cpu_inc_return(proc_event_counts) - 1;
@@ -83,12 +87,14 @@ void proc_fork_connector(struct task_struct *task)
 	if (atomic_read(&proc_event_num_listeners) < 1)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msg = buffer_to_cn_msg(buffer);
 	ev = (struct proc_event *)msg->data;
 	memset(&ev->event_data, 0, sizeof(ev->event_data));
 	ev->timestamp_ns = ktime_get_ns();
 	ev->what = PROC_EVENT_FORK;
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	parent = rcu_dereference(task->real_parent);
 	ev->event_data.fork.parent_pid = parent->pid;
 	ev->event_data.fork.parent_tgid = parent->tgid;
@@ -96,6 +102,7 @@ void proc_fork_connector(struct task_struct *task)
 	ev->event_data.fork.child_pid = task->pid;
 	ev->event_data.fork.child_tgid = task->tgid;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&msg->id, &cn_proc_event_id, sizeof(msg->id));
 	msg->ack = 0; /* not used */
 	msg->len = sizeof(*ev);
@@ -112,6 +119,7 @@ void proc_exec_connector(struct task_struct *task)
 	if (atomic_read(&proc_event_num_listeners) < 1)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msg = buffer_to_cn_msg(buffer);
 	ev = (struct proc_event *)msg->data;
 	memset(&ev->event_data, 0, sizeof(ev->event_data));
@@ -120,6 +128,7 @@ void proc_exec_connector(struct task_struct *task)
 	ev->event_data.exec.process_pid = task->pid;
 	ev->event_data.exec.process_tgid = task->tgid;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&msg->id, &cn_proc_event_id, sizeof(msg->id));
 	msg->ack = 0; /* not used */
 	msg->len = sizeof(*ev);
@@ -137,6 +146,7 @@ void proc_id_connector(struct task_struct *task, int which_id)
 	if (atomic_read(&proc_event_num_listeners) < 1)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msg = buffer_to_cn_msg(buffer);
 	ev = (struct proc_event *)msg->data;
 	memset(&ev->event_data, 0, sizeof(ev->event_data));
@@ -144,20 +154,26 @@ void proc_id_connector(struct task_struct *task, int which_id)
 	ev->event_data.id.process_pid = task->pid;
 	ev->event_data.id.process_tgid = task->tgid;
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cred = __task_cred(task);
 	if (which_id == PROC_EVENT_UID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ev->event_data.id.r.ruid = from_kuid_munged(&init_user_ns, cred->uid);
 		ev->event_data.id.e.euid = from_kuid_munged(&init_user_ns, cred->euid);
 	} else if (which_id == PROC_EVENT_GID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ev->event_data.id.r.rgid = from_kgid_munged(&init_user_ns, cred->gid);
 		ev->event_data.id.e.egid = from_kgid_munged(&init_user_ns, cred->egid);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	ev->timestamp_ns = ktime_get_ns();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&msg->id, &cn_proc_event_id, sizeof(msg->id));
 	msg->ack = 0; /* not used */
 	msg->len = sizeof(*ev);
@@ -174,6 +190,7 @@ void proc_sid_connector(struct task_struct *task)
 	if (atomic_read(&proc_event_num_listeners) < 1)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msg = buffer_to_cn_msg(buffer);
 	ev = (struct proc_event *)msg->data;
 	memset(&ev->event_data, 0, sizeof(ev->event_data));
@@ -182,6 +199,7 @@ void proc_sid_connector(struct task_struct *task)
 	ev->event_data.sid.process_pid = task->pid;
 	ev->event_data.sid.process_tgid = task->tgid;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&msg->id, &cn_proc_event_id, sizeof(msg->id));
 	msg->ack = 0; /* not used */
 	msg->len = sizeof(*ev);
@@ -198,6 +216,7 @@ void proc_ptrace_connector(struct task_struct *task, int ptrace_id)
 	if (atomic_read(&proc_event_num_listeners) < 1)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msg = buffer_to_cn_msg(buffer);
 	ev = (struct proc_event *)msg->data;
 	memset(&ev->event_data, 0, sizeof(ev->event_data));
@@ -206,14 +225,19 @@ void proc_ptrace_connector(struct task_struct *task, int ptrace_id)
 	ev->event_data.ptrace.process_pid  = task->pid;
 	ev->event_data.ptrace.process_tgid = task->tgid;
 	if (ptrace_id == PTRACE_ATTACH) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ev->event_data.ptrace.tracer_pid  = current->pid;
 		ev->event_data.ptrace.tracer_tgid = current->tgid;
 	} else if (ptrace_id == PTRACE_DETACH) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ev->event_data.ptrace.tracer_pid  = 0;
 		ev->event_data.ptrace.tracer_tgid = 0;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&msg->id, &cn_proc_event_id, sizeof(msg->id));
 	msg->ack = 0; /* not used */
 	msg->len = sizeof(*ev);
@@ -230,6 +254,7 @@ void proc_comm_connector(struct task_struct *task)
 	if (atomic_read(&proc_event_num_listeners) < 1)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msg = buffer_to_cn_msg(buffer);
 	ev = (struct proc_event *)msg->data;
 	memset(&ev->event_data, 0, sizeof(ev->event_data));
@@ -237,8 +262,10 @@ void proc_comm_connector(struct task_struct *task)
 	ev->what = PROC_EVENT_COMM;
 	ev->event_data.comm.process_pid  = task->pid;
 	ev->event_data.comm.process_tgid = task->tgid;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	get_task_comm(ev->event_data.comm.comm, task);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&msg->id, &cn_proc_event_id, sizeof(msg->id));
 	msg->ack = 0; /* not used */
 	msg->len = sizeof(*ev);
@@ -255,6 +282,7 @@ void proc_coredump_connector(struct task_struct *task)
 	if (atomic_read(&proc_event_num_listeners) < 1)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msg = buffer_to_cn_msg(buffer);
 	ev = (struct proc_event *)msg->data;
 	memset(&ev->event_data, 0, sizeof(ev->event_data));
@@ -263,6 +291,7 @@ void proc_coredump_connector(struct task_struct *task)
 	ev->event_data.coredump.process_pid = task->pid;
 	ev->event_data.coredump.process_tgid = task->tgid;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&msg->id, &cn_proc_event_id, sizeof(msg->id));
 	msg->ack = 0; /* not used */
 	msg->len = sizeof(*ev);
@@ -279,6 +308,7 @@ void proc_exit_connector(struct task_struct *task)
 	if (atomic_read(&proc_event_num_listeners) < 1)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msg = buffer_to_cn_msg(buffer);
 	ev = (struct proc_event *)msg->data;
 	memset(&ev->event_data, 0, sizeof(ev->event_data));
@@ -289,6 +319,7 @@ void proc_exit_connector(struct task_struct *task)
 	ev->event_data.exit.exit_code = task->exit_code;
 	ev->event_data.exit.exit_signal = task->exit_signal;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&msg->id, &cn_proc_event_id, sizeof(msg->id));
 	msg->ack = 0; /* not used */
 	msg->len = sizeof(*ev);
@@ -311,7 +342,9 @@ static void cn_proc_ack(int err, int rcvd_seq, int rcvd_ack)
 	__u8 buffer[CN_PROC_MSG_SIZE] __aligned(8);
 
 	if (atomic_read(&proc_event_num_listeners) < 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	msg = buffer_to_cn_msg(buffer);
 	ev = (struct proc_event *)msg->data;
@@ -339,7 +372,9 @@ static void cn_proc_mcast_ctl(struct cn_msg *msg,
 	int err = 0;
 
 	if (msg->len != sizeof(*mc_op))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* 
 	 * Events are reported with respect to the initial pid
@@ -384,9 +419,11 @@ static int __init cn_proc_init(void)
 				  "cn_proc",
 				  &cn_proc_mcast_ctl);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("cn_proc failed to register\n");
 		return err;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 device_initcall(cn_proc_init);
diff --git a/drivers/connector/cn_queue.c b/drivers/connector/cn_queue.c
index 1f8bf05..38fe15a 100644
--- a/drivers/connector/cn_queue.c
+++ b/drivers/connector/cn_queue.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	cn_queue.c
  *
@@ -41,10 +43,12 @@ cn_queue_alloc_callback_entry(struct cn_queue_dev *dev, const char *name,
 
 	cbq = kzalloc(sizeof(*cbq), GFP_KERNEL);
 	if (!cbq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Failed to create new callback queue.\n");
 		return NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&cbq->refcnt, 1);
 
 	atomic_inc(&dev->refcnt);
@@ -58,6 +62,7 @@ cn_queue_alloc_callback_entry(struct cn_queue_dev *dev, const char *name,
 
 void cn_queue_release_callback(struct cn_callback_entry *cbq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!atomic_dec_and_test(&cbq->refcnt))
 		return;
 
@@ -67,6 +72,7 @@ void cn_queue_release_callback(struct cn_callback_entry *cbq)
 
 int cn_cb_equal(struct cb_id *i1, struct cb_id *i2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ((i1->idx == i2->idx) && (i1->val == i2->val));
 }
 
@@ -80,20 +86,27 @@ int cn_queue_add_callback(struct cn_queue_dev *dev, const char *name,
 
 	cbq = cn_queue_alloc_callback_entry(dev, name, id, callback);
 	if (!cbq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&dev->queue_lock);
 	list_for_each_entry(__cbq, &dev->queue_list, callback_entry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cn_cb_equal(&__cbq->id.id, id)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			found = 1;
 			break;
 		}
 	}
 	if (!found)
 		list_add_tail(&cbq->callback_entry, &dev->queue_list);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&dev->queue_lock);
 
 	if (found) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cn_queue_release_callback(cbq);
 		return -EINVAL;
 	}
@@ -110,6 +123,7 @@ void cn_queue_del_callback(struct cn_queue_dev *dev, struct cb_id *id)
 	int found = 0;
 
 	spin_lock_bh(&dev->queue_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(cbq, n, &dev->queue_list, callback_entry) {
 		if (cn_cb_equal(&cbq->id.id, id)) {
 			list_del(&cbq->callback_entry);
@@ -129,7 +143,9 @@ struct cn_queue_dev *cn_queue_alloc_dev(const char *name, struct sock *nls)
 
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	snprintf(dev->name, sizeof(dev->name), "%s", name);
 	atomic_set(&dev->refcnt, 0);
@@ -146,6 +162,7 @@ void cn_queue_free_dev(struct cn_queue_dev *dev)
 	struct cn_callback_entry *cbq, *n;
 
 	spin_lock_bh(&dev->queue_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(cbq, n, &dev->queue_list, callback_entry)
 		list_del(&cbq->callback_entry);
 	spin_unlock_bh(&dev->queue_lock);
diff --git a/drivers/connector/connector.c b/drivers/connector/connector.c
index 25693b0..45fed0c 100644
--- a/drivers/connector/connector.c
+++ b/drivers/connector/connector.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	connector.c
  *
@@ -82,6 +84,7 @@ int cn_netlink_send_mult(struct cn_msg *msg, u16 len, u32 portid, u32 __group,
 	u32 group = 0;
 	int found = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (portid || __group) {
 		group = __group;
 	} else {
@@ -133,6 +136,7 @@ EXPORT_SYMBOL_GPL(cn_netlink_send_mult);
 int cn_netlink_send(struct cn_msg *msg, u32 portid, u32 __group,
 	gfp_t gfp_mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cn_netlink_send_mult(msg, msg->len, portid, __group, gfp_mask);
 }
 EXPORT_SYMBOL_GPL(cn_netlink_send);
@@ -152,7 +156,9 @@ static int cn_call_callback(struct sk_buff *skb)
 	/* verify msg->len is within skb */
 	nlh = nlmsg_hdr(skb);
 	if (nlh->nlmsg_len < NLMSG_HDRLEN + sizeof(struct cn_msg) + msg->len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	spin_lock_bh(&dev->cbdev->queue_lock);
 	list_for_each_entry(i, &dev->cbdev->queue_list, callback_entry) {
@@ -185,6 +191,7 @@ static void cn_rx_skb(struct sk_buff *skb)
 	int len, err;
 
 	if (skb->len >= NLMSG_HDRLEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nlh = nlmsg_hdr(skb);
 		len = nlmsg_len(nlh);
 
@@ -213,11 +220,15 @@ int cn_add_callback(struct cb_id *id, const char *name,
 	struct cn_dev *dev = &cdev;
 
 	if (!cn_already_initialized)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAGAIN;
+}
 
 	err = cn_queue_add_callback(dev->cbdev, name, id, callback);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return 0;
 }
@@ -248,6 +259,7 @@ static int cn_proc_show(struct seq_file *m, void *v)
 
 	spin_lock_bh(&dev->queue_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(cbq, &dev->queue_list, callback_entry) {
 		seq_printf(m, "%-15s %u:%u\n",
 			   cbq->id.name,
@@ -262,6 +274,7 @@ static int cn_proc_show(struct seq_file *m, void *v)
 
 static int cn_proc_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, cn_proc_show, NULL);
 }
 
@@ -287,10 +300,13 @@ static int cn_init(void)
 
 	dev->nls = netlink_kernel_create(&init_net, NETLINK_CONNECTOR, &cfg);
 	if (!dev->nls)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	dev->cbdev = cn_queue_alloc_dev("cqueue", dev->nls);
 	if (!dev->cbdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netlink_kernel_release(dev->nls);
 		return -EINVAL;
 	}
diff --git a/drivers/cpufreq/acpi-cpufreq.c b/drivers/cpufreq/acpi-cpufreq.c
index d0c34df..8892645 100644
--- a/drivers/cpufreq/acpi-cpufreq.c
+++ b/drivers/cpufreq/acpi-cpufreq.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * acpi-cpufreq.c - ACPI Processor P-States Driver
  *
@@ -78,6 +80,7 @@ static struct acpi_processor_performance __percpu *acpi_perf_data;
 
 static inline struct acpi_processor_performance *to_perf_data(struct acpi_cpufreq_data *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return per_cpu_ptr(acpi_perf_data, data->acpi_perf_cpu);
 }
 
@@ -141,6 +144,7 @@ static void boost_set_msr_each(void *p_en)
 
 static int set_boost(int val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	get_online_cpus();
 	on_each_cpu(boost_set_msr_each, (void *)(long)val, 1);
 	put_online_cpus();
@@ -154,7 +158,9 @@ static ssize_t show_freqdomain_cpus(struct cpufreq_policy *policy, char *buf)
 	struct acpi_cpufreq_data *data = policy->driver_data;
 
 	if (unlikely(!data))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	return cpufreq_show_cpus(data->freqdomain_cpus, buf);
 }
@@ -169,7 +175,9 @@ static ssize_t store_cpb(struct cpufreq_policy *policy, const char *buf,
 	unsigned int val = 0;
 
 	if (!acpi_cpufreq_driver.set_boost)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ret = kstrtouint(buf, 10, &val);
 	if (ret || val > 1)
@@ -182,6 +190,7 @@ static ssize_t store_cpb(struct cpufreq_policy *policy, const char *buf,
 
 static ssize_t show_cpb(struct cpufreq_policy *policy, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%u\n", acpi_cpufreq_driver.boost_enabled);
 }
 
@@ -190,6 +199,7 @@ cpufreq_freq_attr_rw(cpb);
 
 static int check_est_cpu(unsigned int cpuid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpuinfo_x86 *cpu = &cpu_data(cpuid);
 
 	return cpu_has(cpu, X86_FEATURE_EST);
@@ -210,6 +220,7 @@ static unsigned extract_io(struct cpufreq_policy *policy, u32 value)
 
 	perf = to_perf_data(data);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < perf->state_count; i++) {
 		if (value == perf->states[i].status)
 			return policy->freq_table[i].frequency;
@@ -224,7 +235,9 @@ static unsigned extract_msr(struct cpufreq_policy *policy, u32 msr)
 	struct acpi_processor_performance *perf;
 
 	if (boot_cpu_data.x86_vendor == X86_VENDOR_AMD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msr &= AMD_MSR_RANGE;
+}
 	else
 		msr &= INTEL_MSR_RANGE;
 
@@ -255,6 +268,7 @@ static u32 cpu_freq_read_intel(struct acpi_pct_register *not_used)
 {
 	u32 val, dummy;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rdmsr(MSR_IA32_PERF_CTL, val, dummy);
 	return val;
 }
@@ -263,6 +277,7 @@ static void cpu_freq_write_intel(struct acpi_pct_register *not_used, u32 val)
 {
 	u32 lo, hi;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rdmsr(MSR_IA32_PERF_CTL, lo, hi);
 	lo = (lo & ~INTEL_MSR_RANGE) | (val & INTEL_MSR_RANGE);
 	wrmsr(MSR_IA32_PERF_CTL, lo, hi);
@@ -272,12 +287,14 @@ static u32 cpu_freq_read_amd(struct acpi_pct_register *not_used)
 {
 	u32 val, dummy;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rdmsr(MSR_AMD_PERF_CTL, val, dummy);
 	return val;
 }
 
 static void cpu_freq_write_amd(struct acpi_pct_register *not_used, u32 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	wrmsr(MSR_AMD_PERF_CTL, val, 0);
 }
 
@@ -291,6 +308,7 @@ static u32 cpu_freq_read_io(struct acpi_pct_register *reg)
 
 static void cpu_freq_write_io(struct acpi_pct_register *reg, u32 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_os_write_port(reg->address, val, reg->bit_width);
 }
 
@@ -313,6 +331,7 @@ static void do_drv_read(void *_cmd)
 
 static u32 drv_read(struct acpi_cpufreq_data *data, const struct cpumask *mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_processor_performance *perf = to_perf_data(data);
 	struct drv_cmd cmd = {
 		.reg = &perf->control_register,
@@ -336,6 +355,7 @@ static void do_drv_write(void *_cmd)
 static void drv_write(struct acpi_cpufreq_data *data,
 		      const struct cpumask *mask, u32 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_processor_performance *perf = to_perf_data(data);
 	struct drv_cmd cmd = {
 		.reg = &perf->control_register,
@@ -357,7 +377,9 @@ static u32 get_cur_val(const struct cpumask *mask, struct acpi_cpufreq_data *dat
 	u32 val;
 
 	if (unlikely(cpumask_empty(mask)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	val = drv_read(data, mask);
 
@@ -373,6 +395,7 @@ static unsigned int get_cur_freq_on_cpu(unsigned int cpu)
 	unsigned int freq;
 	unsigned int cached_freq;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("get_cur_freq_on_cpu (%d)\n", cpu);
 
 	policy = cpufreq_cpu_get_raw(cpu);
@@ -405,6 +428,7 @@ static unsigned int check_freqs(struct cpufreq_policy *policy,
 	unsigned int cur_freq;
 	unsigned int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < 100; i++) {
 		cur_freq = extract_freq(policy, get_cur_val(mask, data));
 		if (cur_freq == freq)
@@ -424,6 +448,7 @@ static int acpi_cpufreq_target(struct cpufreq_policy *policy,
 	int result = 0;
 
 	if (unlikely(!data)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
 	}
 
@@ -477,7 +502,9 @@ unsigned int acpi_cpufreq_fast_switch(struct cpufreq_policy *policy,
 	 * Find the closest frequency above target_freq.
 	 */
 	if (policy->cached_target_freq == target_freq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		index = policy->cached_resolved_idx;
+}
 	else
 		index = cpufreq_table_find_index_dl(policy, target_freq);
 
@@ -511,6 +538,7 @@ acpi_cpufreq_guess_freq(struct acpi_cpufreq_data *data, unsigned int cpu)
 		unsigned long freq;
 		unsigned long freqn = perf->states[0].core_frequency * 1000;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < (perf->state_count-1); i++) {
 			freq = freqn;
 			freqn = perf->states[i+1].core_frequency * 1000;
@@ -568,10 +596,12 @@ static int cpufreq_boost_down_prep(unsigned int cpu)
 static int __init acpi_cpufreq_early_init(void)
 {
 	unsigned int i;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("acpi_cpufreq_early_init\n");
 
 	acpi_perf_data = alloc_percpu(struct acpi_processor_performance);
 	if (!acpi_perf_data) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("Memory allocation error for acpi_perf_data.\n");
 		return -ENOMEM;
 	}
@@ -602,6 +632,7 @@ static int bios_with_sw_any_bug;
 
 static int sw_any_bug_found(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bios_with_sw_any_bug = 1;
 	return 0;
 }
@@ -627,13 +658,16 @@ static int acpi_cpufreq_blacklist(struct cpuinfo_x86 *c)
 	 * Enhanced Intel SpeedStep Technology Ratio Change May Cause
 	 * Both Processor Cores to Lock Up. */
 	if (c->x86_vendor == X86_VENDOR_INTEL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((c->x86 == 15) &&
 		    (c->x86_model == 6) &&
 		    (c->x86_stepping == 8)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_info("Intel(R) Xeon(R) 7100 Errata AL30, processors may lock up on frequency changes: disabling acpi-cpufreq\n");
 			return -ENODEV;
 		    }
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 #endif
@@ -652,21 +686,29 @@ static int acpi_cpufreq_cpu_init(struct cpufreq_policy *policy)
 	static int blacklisted;
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("acpi_cpufreq_cpu_init\n");
 
 #ifdef CONFIG_SMP
 	if (blacklisted)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return blacklisted;
+}
 	blacklisted = acpi_cpufreq_blacklist(c);
 	if (blacklisted)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return blacklisted;
+}
 #endif
 
 	data = kzalloc(sizeof(*data), GFP_KERNEL);
 	if (!data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (!zalloc_cpumask_var(&data->freqdomain_cpus, GFP_KERNEL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = -ENOMEM;
 		goto err_free;
 	}
@@ -676,12 +718,15 @@ static int acpi_cpufreq_cpu_init(struct cpufreq_policy *policy)
 	policy->driver_data = data;
 
 	if (cpu_has(c, X86_FEATURE_CONSTANT_TSC))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpi_cpufreq_driver.flags |= CPUFREQ_CONST_LOOPS;
+}
 
 	result = acpi_processor_register_performance(perf, cpu);
 	if (result)
 		goto err_free_mask;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	policy->shared_type = perf->shared_type;
 
 	/*
@@ -690,47 +735,61 @@ static int acpi_cpufreq_cpu_init(struct cpufreq_policy *policy)
 	 */
 	if (policy->shared_type == CPUFREQ_SHARED_TYPE_ALL ||
 	    policy->shared_type == CPUFREQ_SHARED_TYPE_ANY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpumask_copy(policy->cpus, perf->shared_cpu_map);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpumask_copy(data->freqdomain_cpus, perf->shared_cpu_map);
 
 #ifdef CONFIG_SMP
 	dmi_check_system(sw_any_bug_dmi_table);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (bios_with_sw_any_bug && !policy_is_shared(policy)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		policy->shared_type = CPUFREQ_SHARED_TYPE_ALL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpumask_copy(policy->cpus, topology_core_cpumask(cpu));
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (check_amd_hwpstate_cpu(cpu) && !acpi_pstate_strict) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpumask_clear(policy->cpus);
 		cpumask_set_cpu(cpu, policy->cpus);
 		cpumask_copy(data->freqdomain_cpus,
 			     topology_sibling_cpumask(cpu));
 		policy->shared_type = CPUFREQ_SHARED_TYPE_HW;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info_once("overriding BIOS provided _PSD data\n");
 	}
 #endif
 
 	/* capability check */
 	if (perf->state_count <= 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("No P-States\n");
 		result = -ENODEV;
 		goto err_unreg;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (perf->control_register.space_id != perf->status_register.space_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = -ENODEV;
 		goto err_unreg;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (perf->control_register.space_id) {
 	case ACPI_ADR_SPACE_SYSTEM_IO:
 		if (boot_cpu_data.x86_vendor == X86_VENDOR_AMD &&
 		    boot_cpu_data.x86 == 0xf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("AMD K8 systems must use native drivers.\n");
 			result = -ENODEV;
 			goto err_unreg;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("SYSTEM IO addr space\n");
 		data->cpu_feature = SYSTEM_IO_CAPABLE;
 		data->cpu_freq_read = cpu_freq_read_io;
@@ -739,17 +798,21 @@ static int acpi_cpufreq_cpu_init(struct cpufreq_policy *policy)
 	case ACPI_ADR_SPACE_FIXED_HARDWARE:
 		pr_debug("HARDWARE addr space\n");
 		if (check_est_cpu(cpu)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			data->cpu_feature = SYSTEM_INTEL_MSR_CAPABLE;
 			data->cpu_freq_read = cpu_freq_read_intel;
 			data->cpu_freq_write = cpu_freq_write_intel;
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (check_amd_hwpstate_cpu(cpu)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			data->cpu_feature = SYSTEM_AMD_MSR_CAPABLE;
 			data->cpu_freq_read = cpu_freq_read_amd;
 			data->cpu_freq_write = cpu_freq_write_amd;
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = -ENODEV;
 		goto err_unreg;
 	default:
@@ -759,16 +822,20 @@ static int acpi_cpufreq_cpu_init(struct cpufreq_policy *policy)
 		goto err_unreg;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	freq_table = kzalloc(sizeof(*freq_table) *
 		    (perf->state_count+1), GFP_KERNEL);
 	if (!freq_table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = -ENOMEM;
 		goto err_unreg;
 	}
 
 	/* detect transition latency */
 	policy->cpuinfo.transition_latency = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < perf->state_count; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((perf->states[i].transition_latency * 1000) >
 		    policy->cpuinfo.transition_latency)
 			policy->cpuinfo.transition_latency =
@@ -778,21 +845,26 @@ static int acpi_cpufreq_cpu_init(struct cpufreq_policy *policy)
 	/* Check for high latency (>20uS) from buggy BIOSes, like on T42 */
 	if (perf->control_register.space_id == ACPI_ADR_SPACE_FIXED_HARDWARE &&
 	    policy->cpuinfo.transition_latency > 20 * 1000) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		policy->cpuinfo.transition_latency = 20 * 1000;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info_once("P-state transition latency capped at 20 uS\n");
 	}
 
 	/* table init */
 	for (i = 0; i < perf->state_count; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (i > 0 && perf->states[i].core_frequency >=
 		    freq_table[valid_states-1].frequency / 1000)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		freq_table[valid_states].driver_data = i;
 		freq_table[valid_states].frequency =
 		    perf->states[i].core_frequency * 1000;
 		valid_states++;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	freq_table[valid_states].frequency = CPUFREQ_TABLE_END;
 	perf->state = 0;
 
@@ -800,9 +872,13 @@ static int acpi_cpufreq_cpu_init(struct cpufreq_policy *policy)
 	if (result)
 		goto err_freqfree;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (perf->states[0].core_frequency * 1000 != policy->cpuinfo.max_freq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn(FW_WARN "P-state 0 is not max freq\n");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (perf->control_register.space_id) {
 	case ACPI_ADR_SPACE_SYSTEM_IO:
 		/*
@@ -823,13 +899,17 @@ static int acpi_cpufreq_cpu_init(struct cpufreq_policy *policy)
 	/* notify BIOS that we exist */
 	acpi_processor_notify_smm(THIS_MODULE);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("CPU%u - ACPI performance management activated.\n", cpu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < perf->state_count; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("     %cP%d: %d MHz, %d mW, %d uS\n",
 			(i == perf->state ? '*' : ' '), i,
 			(u32) perf->states[i].core_frequency,
 			(u32) perf->states[i].power,
 			(u32) perf->states[i].transition_latency);
+}
 
 	/*
 	 * the first call to ->target() should result in us actually
@@ -837,6 +917,7 @@ static int acpi_cpufreq_cpu_init(struct cpufreq_policy *policy)
 	 */
 	data->resume = 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	policy->fast_switch_possible = !acpi_pstate_strict &&
 		!(policy_is_shared(policy) && policy->shared_type != CPUFREQ_SHARED_TYPE_ANY);
 
@@ -859,6 +940,7 @@ static int acpi_cpufreq_cpu_exit(struct cpufreq_policy *policy)
 {
 	struct acpi_cpufreq_data *data = policy->driver_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("acpi_cpufreq_cpu_exit\n");
 
 	policy->fast_switch_possible = false;
@@ -875,6 +957,7 @@ static int acpi_cpufreq_resume(struct cpufreq_policy *policy)
 {
 	struct acpi_cpufreq_data *data = policy->driver_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("acpi_cpufreq_resume\n");
 
 	data->resume = 1;
@@ -910,8 +993,11 @@ static void __init acpi_cpufreq_boost_init(void)
 	int ret;
 
 	if (!(boot_cpu_has(X86_FEATURE_CPB) || boot_cpu_has(X86_FEATURE_IDA)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_cpufreq_driver.set_boost = set_boost;
 	acpi_cpufreq_driver.boost_enabled = boost_state(0);
 
@@ -922,34 +1008,45 @@ static void __init acpi_cpufreq_boost_init(void)
 	ret = cpuhp_setup_state(CPUHP_AP_ONLINE_DYN, "cpufreq/acpi:online",
 				cpufreq_boost_online, cpufreq_boost_down_prep);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("acpi_cpufreq: failed to register hotplug callbacks\n");
 		return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_cpufreq_online = ret;
 }
 
 static void acpi_cpufreq_boost_exit(void)
 {
 	if (acpi_cpufreq_online > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpuhp_remove_state_nocalls(acpi_cpufreq_online);
 }
+}
 
 static int __init acpi_cpufreq_init(void)
 {
 	int ret;
 
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* don't keep reloading if cpufreq_driver exists */
 	if (cpufreq_get_current_driver())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EEXIST;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("acpi_cpufreq_init\n");
 
 	ret = acpi_cpufreq_early_init();
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 #ifdef CONFIG_X86_ACPI_CPUFREQ_CPB
 	/* this is a sysfs file with a strange name and an even stranger
@@ -961,6 +1058,7 @@ static int __init acpi_cpufreq_init(void)
 	if (!check_amd_hwpstate_cpu(0)) {
 		struct freq_attr **attr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("CPB unsupported, do not expose it\n");
 
 		for (attr = acpi_cpufreq_attr; *attr; attr++)
@@ -977,11 +1075,13 @@ static int __init acpi_cpufreq_init(void)
 		free_acpi_perf_data();
 		acpi_cpufreq_boost_exit();
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 static void __exit acpi_cpufreq_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("acpi_cpufreq_exit\n");
 
 	acpi_cpufreq_boost_exit();
diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index ea43b14..2627b32 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/drivers/cpufreq/cpufreq.c
  *
@@ -35,6 +37,7 @@ static LIST_HEAD(cpufreq_policy_list);
 
 static inline bool policy_is_inactive(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cpumask_empty(policy->cpus);
 }
 
@@ -70,6 +73,7 @@ static bool cpufreq_suspended;
 
 static inline bool has_target(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cpufreq_driver->target_index || cpufreq_driver->target;
 }
 
@@ -107,18 +111,21 @@ static int cpufreq_disabled(void)
 }
 void disable_cpufreq(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	off = 1;
 }
 static DEFINE_MUTEX(cpufreq_governor_mutex);
 
 bool have_governor_per_policy(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !!(cpufreq_driver->flags & CPUFREQ_HAVE_GOVERNOR_PER_POLICY);
 }
 EXPORT_SYMBOL_GPL(have_governor_per_policy);
 
 struct kobject *get_governor_parent_kobj(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (have_governor_per_policy())
 		return &policy->kobj;
 	else
@@ -134,6 +141,7 @@ static inline u64 get_cpu_idle_time_jiffy(unsigned int cpu, u64 *wall)
 
 	cur_wall_time = jiffies64_to_nsecs(get_jiffies_64());
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	busy_time = kcpustat_cpu(cpu).cpustat[CPUTIME_USER];
 	busy_time += kcpustat_cpu(cpu).cpustat[CPUTIME_SYSTEM];
 	busy_time += kcpustat_cpu(cpu).cpustat[CPUTIME_IRQ];
@@ -150,6 +158,7 @@ static inline u64 get_cpu_idle_time_jiffy(unsigned int cpu, u64 *wall)
 
 u64 get_cpu_idle_time(unsigned int cpu, u64 *wall, int io_busy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u64 idle_time = get_cpu_idle_time_us(cpu, io_busy ? wall : NULL);
 
 	if (idle_time == -1ULL)
@@ -176,6 +185,7 @@ int cpufreq_generic_init(struct cpufreq_policy *policy,
 
 	ret = cpufreq_table_validate_and_show(policy, table);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s: invalid frequency table: %d\n", __func__, ret);
 		return ret;
 	}
@@ -194,6 +204,7 @@ EXPORT_SYMBOL_GPL(cpufreq_generic_init);
 
 struct cpufreq_policy *cpufreq_cpu_get_raw(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpufreq_policy *policy = per_cpu(cpufreq_cpu_data, cpu);
 
 	return policy && cpumask_test_cpu(cpu, policy->cpus) ? policy : NULL;
@@ -202,6 +213,7 @@ EXPORT_SYMBOL_GPL(cpufreq_cpu_get_raw);
 
 unsigned int cpufreq_generic_get(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpufreq_policy *policy = cpufreq_cpu_get_raw(cpu);
 
 	if (!policy || IS_ERR(policy->clk)) {
@@ -233,7 +245,9 @@ struct cpufreq_policy *cpufreq_cpu_get(unsigned int cpu)
 	unsigned long flags;
 
 	if (WARN_ON(cpu >= nr_cpu_ids))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/* get the cpufreq driver */
 	read_lock_irqsave(&cpufreq_driver_lock, flags);
@@ -242,7 +256,9 @@ struct cpufreq_policy *cpufreq_cpu_get(unsigned int cpu)
 		/* get the CPU */
 		policy = cpufreq_cpu_get_raw(cpu);
 		if (policy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kobject_get(&policy->kobj);
+}
 	}
 
 	read_unlock_irqrestore(&cpufreq_driver_lock, flags);
@@ -261,6 +277,7 @@ EXPORT_SYMBOL_GPL(cpufreq_cpu_get);
  */
 void cpufreq_cpu_put(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kobject_put(&policy->kobj);
 }
 EXPORT_SYMBOL_GPL(cpufreq_cpu_put);
@@ -304,6 +321,7 @@ static void adjust_jiffies(unsigned long val, struct cpufreq_freqs *ci)
 static void __cpufreq_notify_transition(struct cpufreq_policy *policy,
 		struct cpufreq_freqs *freqs, unsigned int state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(irqs_disabled());
 
 	if (cpufreq_disabled())
@@ -358,6 +376,7 @@ static void __cpufreq_notify_transition(struct cpufreq_policy *policy,
 static void cpufreq_notify_transition(struct cpufreq_policy *policy,
 		struct cpufreq_freqs *freqs, unsigned int state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_cpu(freqs->cpu, policy->cpus)
 		__cpufreq_notify_transition(policy, freqs, state);
 }
@@ -366,6 +385,7 @@ static void cpufreq_notify_transition(struct cpufreq_policy *policy,
 static void cpufreq_notify_post_transition(struct cpufreq_policy *policy,
 		struct cpufreq_freqs *freqs, int transition_failed)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpufreq_notify_transition(policy, freqs, CPUFREQ_POSTCHANGE);
 	if (!transition_failed)
 		return;
@@ -412,6 +432,7 @@ EXPORT_SYMBOL_GPL(cpufreq_freq_transition_begin);
 void cpufreq_freq_transition_end(struct cpufreq_policy *policy,
 		struct cpufreq_freqs *freqs, int transition_failed)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(WARN_ON(!policy->transition_ongoing)))
 		return;
 
@@ -439,6 +460,7 @@ static void cpufreq_list_transition_notifiers(void)
 
 	mutex_lock(&cpufreq_transition_notifier_list.mutex);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (nb = cpufreq_transition_notifier_list.head; nb; nb = nb->next)
 		pr_info("%pF\n", nb->notifier_call);
 
@@ -458,6 +480,7 @@ static void cpufreq_list_transition_notifiers(void)
  */
 void cpufreq_enable_fast_switch(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&policy->rwsem);
 
 	if (!policy->fast_switch_possible)
@@ -482,6 +505,7 @@ EXPORT_SYMBOL_GPL(cpufreq_enable_fast_switch);
  */
 void cpufreq_disable_fast_switch(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&cpufreq_fast_switch_lock);
 	if (policy->fast_switch_enabled) {
 		policy->fast_switch_enabled = false;
@@ -505,6 +529,7 @@ EXPORT_SYMBOL_GPL(cpufreq_disable_fast_switch);
 unsigned int cpufreq_driver_resolve_freq(struct cpufreq_policy *policy,
 					 unsigned int target_freq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	target_freq = clamp_val(target_freq, policy->min, policy->max);
 	policy->cached_target_freq = target_freq;
 
@@ -529,7 +554,9 @@ unsigned int cpufreq_policy_transition_delay_us(struct cpufreq_policy *policy)
 	unsigned int latency;
 
 	if (policy->transition_delay_us)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return policy->transition_delay_us;
+}
 
 	latency = policy->cpuinfo.transition_latency / NSEC_PER_USEC;
 	if (latency) {
@@ -556,6 +583,7 @@ EXPORT_SYMBOL_GPL(cpufreq_policy_transition_delay_us);
 static ssize_t show_boost(struct kobject *kobj,
 				 struct attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", cpufreq_driver->boost_enabled);
 }
 
@@ -565,6 +593,7 @@ static ssize_t store_boost(struct kobject *kobj, struct attribute *attr,
 	int ret, enable;
 
 	ret = sscanf(buf, "%d", &enable);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret != 1 || enable < 0 || enable > 1)
 		return -EINVAL;
 
@@ -587,8 +616,11 @@ static struct cpufreq_governor *find_governor(const char *str_governor)
 
 	for_each_governor(t)
 		if (!strncasecmp(str_governor, t->name, CPUFREQ_NAME_LEN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return t;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -601,6 +633,7 @@ static int cpufreq_parse_governor(char *str_governor, unsigned int *policy,
 	int err = -EINVAL;
 
 	if (cpufreq_driver->setpolicy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!strncasecmp(str_governor, "performance", CPUFREQ_NAME_LEN)) {
 			*policy = CPUFREQ_POLICY_PERFORMANCE;
 			err = 0;
@@ -660,6 +693,7 @@ show_one(scaling_max_freq, max);
 
 __weak unsigned int arch_freq_get_on_cpu(int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -670,7 +704,9 @@ static ssize_t show_scaling_cur_freq(struct cpufreq_policy *policy, char *buf)
 
 	freq = arch_freq_get_on_cpu(policy->cpu);
 	if (freq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = sprintf(buf, "%u\n", freq);
+}
 	else if (cpufreq_driver && cpufreq_driver->setpolicy &&
 			cpufreq_driver->get)
 		ret = sprintf(buf, "%u\n", cpufreq_driver->get(policy->cpu));
@@ -715,6 +751,7 @@ store_one(scaling_max_freq, max);
 static ssize_t show_cpuinfo_cur_freq(struct cpufreq_policy *policy,
 					char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int cur_freq = __cpufreq_get(policy);
 
 	if (cur_freq)
@@ -728,6 +765,7 @@ static ssize_t show_cpuinfo_cur_freq(struct cpufreq_policy *policy,
  */
 static ssize_t show_scaling_governor(struct cpufreq_policy *policy, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (policy->policy == CPUFREQ_POLICY_POWERSAVE)
 		return sprintf(buf, "powersave\n");
 	else if (policy->policy == CPUFREQ_POLICY_PERFORMANCE)
@@ -748,6 +786,7 @@ static ssize_t store_scaling_governor(struct cpufreq_policy *policy,
 	char	str_governor[16];
 	struct cpufreq_policy new_policy;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&new_policy, policy, sizeof(*policy));
 
 	ret = sscanf(buf, "%15s", str_governor);
@@ -767,6 +806,7 @@ static ssize_t store_scaling_governor(struct cpufreq_policy *policy,
  */
 static ssize_t show_scaling_driver(struct cpufreq_policy *policy, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scnprintf(buf, CPUFREQ_NAME_PLEN, "%s\n", cpufreq_driver->name);
 }
 
@@ -780,6 +820,7 @@ static ssize_t show_scaling_available_governors(struct cpufreq_policy *policy,
 	struct cpufreq_governor *t;
 
 	if (!has_target()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i += sprintf(buf, "performance powersave");
 		goto out;
 	}
@@ -800,6 +841,7 @@ ssize_t cpufreq_show_cpus(const struct cpumask *mask, char *buf)
 	ssize_t i = 0;
 	unsigned int cpu;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_cpu(cpu, mask) {
 		if (i)
 			i += scnprintf(&buf[i], (PAGE_SIZE - i - 2), " ");
@@ -818,6 +860,7 @@ EXPORT_SYMBOL_GPL(cpufreq_show_cpus);
  */
 static ssize_t show_related_cpus(struct cpufreq_policy *policy, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cpufreq_show_cpus(policy->related_cpus, buf);
 }
 
@@ -826,6 +869,7 @@ static ssize_t show_related_cpus(struct cpufreq_policy *policy, char *buf)
  */
 static ssize_t show_affected_cpus(struct cpufreq_policy *policy, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cpufreq_show_cpus(policy->cpus, buf);
 }
 
@@ -835,6 +879,7 @@ static ssize_t store_scaling_setspeed(struct cpufreq_policy *policy,
 	unsigned int freq = 0;
 	unsigned int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!policy->governor || !policy->governor->store_setspeed)
 		return -EINVAL;
 
@@ -849,6 +894,7 @@ static ssize_t store_scaling_setspeed(struct cpufreq_policy *policy,
 
 static ssize_t show_scaling_setspeed(struct cpufreq_policy *policy, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!policy->governor || !policy->governor->show_setspeed)
 		return sprintf(buf, "<unsupported>\n");
 
@@ -863,6 +909,7 @@ static ssize_t show_bios_limit(struct cpufreq_policy *policy, char *buf)
 	unsigned int limit;
 	int ret;
 	if (cpufreq_driver->bios_limit) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = cpufreq_driver->bios_limit(policy->cpu, &limit);
 		if (!ret)
 			return sprintf(buf, "%u\n", limit);
@@ -905,6 +952,7 @@ static struct attribute *default_attrs[] = {
 
 static ssize_t show(struct kobject *kobj, struct attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpufreq_policy *policy = to_policy(kobj);
 	struct freq_attr *fattr = to_attr(attr);
 	ssize_t ret;
@@ -919,6 +967,7 @@ static ssize_t show(struct kobject *kobj, struct attribute *attr, char *buf)
 static ssize_t store(struct kobject *kobj, struct attribute *attr,
 		     const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpufreq_policy *policy = to_policy(kobj);
 	struct freq_attr *fattr = to_attr(attr);
 	ssize_t ret = -EINVAL;
@@ -938,7 +987,9 @@ static ssize_t store(struct kobject *kobj, struct attribute *attr,
 
 static void cpufreq_sysfs_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpufreq_policy *policy = to_policy(kobj);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("last reference is dropped\n");
 	complete(&policy->kobj_unregister);
 }
@@ -956,6 +1007,7 @@ static struct kobj_type ktype_cpufreq = {
 
 static void add_cpu_dev_symlink(struct cpufreq_policy *policy, unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = get_cpu_device(cpu);
 
 	if (!dev)
@@ -972,6 +1024,7 @@ static void add_cpu_dev_symlink(struct cpufreq_policy *policy, unsigned int cpu)
 static void remove_cpu_dev_symlink(struct cpufreq_policy *policy,
 				   struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(dev, "%s: Removing symlink\n", __func__);
 	sysfs_remove_link(&dev->kobj, "cpufreq");
 }
@@ -983,6 +1036,7 @@ static int cpufreq_add_dev_interface(struct cpufreq_policy *policy)
 
 	/* set up files for this cpu device */
 	drv_attr = cpufreq_driver->attr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (drv_attr && *drv_attr) {
 		ret = sysfs_create_file(&policy->kobj, &((*drv_attr)->attr));
 		if (ret)
@@ -1010,6 +1064,7 @@ static int cpufreq_add_dev_interface(struct cpufreq_policy *policy)
 
 __weak struct cpufreq_governor *cpufreq_default_governor(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -1018,6 +1073,7 @@ static int cpufreq_init_policy(struct cpufreq_policy *policy)
 	struct cpufreq_governor *gov = NULL;
 	struct cpufreq_policy new_policy;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&new_policy, policy, sizeof(*policy));
 
 	/* Update governor of new_policy to the governor used before hotplug */
@@ -1051,7 +1107,9 @@ static int cpufreq_add_policy_cpu(struct cpufreq_policy *policy, unsigned int cp
 
 	/* Has this CPU been taken care of already? */
 	if (cpumask_test_cpu(cpu, policy->cpus))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	down_write(&policy->rwsem);
 	if (has_target())
@@ -1084,8 +1142,11 @@ static struct cpufreq_policy *cpufreq_policy_alloc(unsigned int cpu)
 
 	policy = kzalloc(sizeof(*policy), GFP_KERNEL);
 	if (!policy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!alloc_cpumask_var(&policy->cpus, GFP_KERNEL))
 		goto err_free_policy;
 
@@ -1098,6 +1159,7 @@ static struct cpufreq_policy *cpufreq_policy_alloc(unsigned int cpu)
 	ret = kobject_init_and_add(&policy->kobj, &ktype_cpufreq,
 				   cpufreq_global_kobject, "policy%u", cpu);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s: failed to init policy->kobj: %d\n", __func__, ret);
 		goto err_free_real_cpus;
 	}
@@ -1143,6 +1205,7 @@ static void cpufreq_policy_put_kobj(struct cpufreq_policy *policy)
 	 */
 	pr_debug("waiting for dropping of refcount\n");
 	wait_for_completion(cmp);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("wait complete\n");
 }
 
@@ -1174,14 +1237,18 @@ static int cpufreq_online(unsigned int cpu)
 	unsigned int j;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s: bringing CPU%u online\n", __func__, cpu);
 
 	/* Check if this CPU already has a policy to manage it */
 	policy = per_cpu(cpufreq_cpu_data, cpu);
 	if (policy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(!cpumask_test_cpu(cpu, policy->related_cpus));
 		if (!policy_is_inactive(policy))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return cpufreq_add_policy_cpu(policy, cpu);
+}
 
 		/* This is the only online CPU for the policy.  Start over. */
 		new_policy = false;
@@ -1190,10 +1257,13 @@ static int cpufreq_online(unsigned int cpu)
 		policy->governor = NULL;
 		up_write(&policy->rwsem);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new_policy = true;
 		policy = cpufreq_policy_alloc(cpu);
 		if (!policy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	}
 
 	cpumask_copy(policy->cpus, cpumask_of(cpu));
@@ -1203,10 +1273,12 @@ static int cpufreq_online(unsigned int cpu)
 	 */
 	ret = cpufreq_driver->init(policy);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("initialization failed\n");
 		goto out_free_policy;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	down_write(&policy->rwsem);
 
 	if (new_policy) {
@@ -1221,21 +1293,28 @@ static int cpufreq_online(unsigned int cpu)
 	cpumask_and(policy->cpus, policy->cpus, cpu_online_mask);
 
 	if (new_policy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		policy->user_policy.min = policy->min;
 		policy->user_policy.max = policy->max;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_cpu(j, policy->related_cpus) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			per_cpu(cpufreq_cpu_data, j) = policy;
 			add_cpu_dev_symlink(policy, j);
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		policy->min = policy->user_policy.min;
 		policy->max = policy->user_policy.max;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpufreq_driver->get && !cpufreq_driver->setpolicy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		policy->cur = cpufreq_driver->get(policy->cpu);
 		if (!policy->cur) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("%s: ->get() failed\n", __func__);
 			goto out_exit_policy;
 		}
@@ -1276,25 +1355,34 @@ static int cpufreq_online(unsigned int cpu)
 			 * frequency for longer duration. Hence, a BUG_ON().
 			 */
 			BUG_ON(ret);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn("%s: CPU%d: Unlisted initial frequency changed to: %u KHz\n",
 				__func__, policy->cpu, policy->cur);
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (new_policy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = cpufreq_add_dev_interface(policy);
 		if (ret)
 			goto out_exit_policy;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpufreq_stats_create_table(policy);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_lock_irqsave(&cpufreq_driver_lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_add(&policy->policy_list, &cpufreq_policy_list);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_unlock_irqrestore(&cpufreq_driver_lock, flags);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = cpufreq_init_policy(policy);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s: Failed to initialize policy for cpu: %d (%d)\n",
 		       __func__, cpu, ret);
 		/* cpufreq_policy_free() will notify based on this */
@@ -1302,14 +1390,18 @@ static int cpufreq_online(unsigned int cpu)
 		goto out_exit_policy;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	up_write(&policy->rwsem);
 
 	kobject_uevent(&policy->kobj, KOBJ_ADD);
 
 	/* Callback for handling stuff after policy is ready */
 	if (cpufreq_driver->ready)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpufreq_driver->ready(policy);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("initialization complete\n");
 
 	return 0;
@@ -1318,8 +1410,11 @@ static int cpufreq_online(unsigned int cpu)
 	up_write(&policy->rwsem);
 
 	if (cpufreq_driver->exit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpufreq_driver->exit(policy);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_cpu(j, policy->real_cpus)
 		remove_cpu_dev_symlink(policy, get_cpu_device(j));
 
@@ -1339,19 +1434,25 @@ static int cpufreq_add_dev(struct device *dev, struct subsys_interface *sif)
 	unsigned cpu = dev->id;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(dev, "%s: adding CPU%u\n", __func__, cpu);
 
 	if (cpu_online(cpu)) {
 		ret = cpufreq_online(cpu);
 		if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
+}
 	}
 
 	/* Create sysfs link on CPU registration */
 	policy = per_cpu(cpufreq_cpu_data, cpu);
 	if (policy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_cpu_dev_symlink(policy, cpu);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1360,6 +1461,7 @@ static int cpufreq_offline(unsigned int cpu)
 	struct cpufreq_policy *policy;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s: unregistering CPU %u\n", __func__, cpu);
 
 	policy = cpufreq_cpu_get_raw(cpu);
@@ -1428,17 +1530,25 @@ static void cpufreq_remove_dev(struct device *dev, struct subsys_interface *sif)
 	struct cpufreq_policy *policy = per_cpu(cpufreq_cpu_data, cpu);
 
 	if (!policy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpu_online(cpu))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpufreq_offline(cpu);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpumask_clear_cpu(cpu, policy->real_cpus);
 	remove_cpu_dev_symlink(policy, dev);
 
 	if (cpumask_empty(policy->real_cpus))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpufreq_policy_free(policy);
 }
+}
 
 /**
  *	cpufreq_out_of_sync - If actual and saved CPU frequency differs, we're
@@ -1454,6 +1564,7 @@ static void cpufreq_out_of_sync(struct cpufreq_policy *policy,
 {
 	struct cpufreq_freqs freqs;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("Warning: CPU frequency out of sync: cpufreq and timing core thinks of %u, is %u kHz\n",
 		 policy->cur, new_freq);
 
@@ -1480,8 +1591,11 @@ unsigned int cpufreq_quick_get(unsigned int cpu)
 	read_lock_irqsave(&cpufreq_driver_lock, flags);
 
 	if (cpufreq_driver && cpufreq_driver->setpolicy && cpufreq_driver->get) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_freq = cpufreq_driver->get(cpu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_unlock_irqrestore(&cpufreq_driver_lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret_freq;
 	}
 
@@ -1489,10 +1603,12 @@ unsigned int cpufreq_quick_get(unsigned int cpu)
 
 	policy = cpufreq_cpu_get(cpu);
 	if (policy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_freq = policy->cur;
 		cpufreq_cpu_put(policy);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret_freq;
 }
 EXPORT_SYMBOL(cpufreq_quick_get);
@@ -1505,6 +1621,7 @@ EXPORT_SYMBOL(cpufreq_quick_get);
  */
 unsigned int cpufreq_quick_get_max(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpufreq_policy *policy = cpufreq_cpu_get(cpu);
 	unsigned int ret_freq = 0;
 
@@ -1522,7 +1639,9 @@ static unsigned int __cpufreq_get(struct cpufreq_policy *policy)
 	unsigned int ret_freq = 0;
 
 	if (!cpufreq_driver->get)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret_freq;
+}
 
 	ret_freq = cpufreq_driver->get(policy->cpu);
 
@@ -1555,6 +1674,7 @@ static unsigned int __cpufreq_get(struct cpufreq_policy *policy)
  */
 unsigned int cpufreq_get(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpufreq_policy *policy = cpufreq_cpu_get(cpu);
 	unsigned int ret_freq = 0;
 
@@ -1579,7 +1699,9 @@ static unsigned int cpufreq_update_current_freq(struct cpufreq_policy *policy)
 
 	new_freq = cpufreq_driver->get(policy->cpu);
 	if (!new_freq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!policy->cur) {
 		pr_debug("cpufreq: Driver did not initialize current freq\n");
@@ -1607,6 +1729,7 @@ int cpufreq_generic_suspend(struct cpufreq_policy *policy)
 	int ret;
 
 	if (!policy->suspend_freq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("%s: suspend_freq not defined\n", __func__);
 		return 0;
 	}
@@ -1637,7 +1760,9 @@ void cpufreq_suspend(void)
 	struct cpufreq_policy *policy;
 
 	if (!cpufreq_driver)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!has_target() && !cpufreq_driver->suspend)
 		goto suspend;
@@ -1672,7 +1797,9 @@ void cpufreq_resume(void)
 	int ret;
 
 	if (!cpufreq_driver)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	cpufreq_suspended = false;
 
@@ -1706,8 +1833,11 @@ void cpufreq_resume(void)
 const char *cpufreq_get_current_driver(void)
 {
 	if (cpufreq_driver)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return cpufreq_driver->name;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL_GPL(cpufreq_get_current_driver);
@@ -1720,6 +1850,7 @@ EXPORT_SYMBOL_GPL(cpufreq_get_current_driver);
  */
 void *cpufreq_get_driver_data(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpufreq_driver)
 		return cpufreq_driver->driver_data;
 
@@ -1749,7 +1880,9 @@ int cpufreq_register_notifier(struct notifier_block *nb, unsigned int list)
 	int ret;
 
 	if (cpufreq_disabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	WARN_ON(!init_cpufreq_transition_notifier_list_called);
 
@@ -1758,6 +1891,7 @@ int cpufreq_register_notifier(struct notifier_block *nb, unsigned int list)
 		mutex_lock(&cpufreq_fast_switch_lock);
 
 		if (cpufreq_fast_switch_count > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mutex_unlock(&cpufreq_fast_switch_lock);
 			return -EBUSY;
 		}
@@ -1776,6 +1910,7 @@ int cpufreq_register_notifier(struct notifier_block *nb, unsigned int list)
 		ret = -EINVAL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL(cpufreq_register_notifier);
@@ -1795,7 +1930,9 @@ int cpufreq_unregister_notifier(struct notifier_block *nb, unsigned int list)
 	int ret;
 
 	if (cpufreq_disabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	switch (list) {
 	case CPUFREQ_TRANSITION_NOTIFIER:
@@ -1851,6 +1988,7 @@ EXPORT_SYMBOL(cpufreq_unregister_notifier);
 unsigned int cpufreq_driver_fast_switch(struct cpufreq_policy *policy,
 					unsigned int target_freq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	target_freq = clamp_val(target_freq, policy->min, policy->max);
 
 	return cpufreq_driver->fast_switch(policy, target_freq);
@@ -1867,7 +2005,9 @@ static int __target_intermediate(struct cpufreq_policy *policy,
 
 	/* We don't need to switch to intermediate freq */
 	if (!freqs->new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	pr_debug("%s: cpu: %d, switching to intermediate freq: oldfreq: %u, intermediate freq: %u\n",
 		 __func__, policy->cpu, freqs->old, freqs->new);
@@ -1892,7 +2032,9 @@ static int __target_index(struct cpufreq_policy *policy, int index)
 	bool notify;
 
 	if (newfreq == policy->cur)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	notify = !(cpufreq_driver->flags & CPUFREQ_ASYNC_NOTIFICATION);
 	if (notify) {
@@ -1948,7 +2090,9 @@ int __cpufreq_driver_target(struct cpufreq_policy *policy,
 	int index;
 
 	if (cpufreq_disabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* Make sure that target_freq is within supported range */
 	target_freq = clamp_val(target_freq, policy->min, policy->max);
@@ -1998,6 +2142,7 @@ EXPORT_SYMBOL_GPL(cpufreq_driver_target);
 
 __weak struct cpufreq_governor *cpufreq_fallback_governor(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -2007,7 +2152,9 @@ static int cpufreq_init_governor(struct cpufreq_policy *policy)
 
 	/* Don't start any governor operations if we are entering suspend */
 	if (cpufreq_suspended)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	/*
 	 * Governor might not be initiated here if ACPI _PPC changed
 	 * notification happened, so check it.
@@ -2047,6 +2194,7 @@ static int cpufreq_init_governor(struct cpufreq_policy *policy)
 
 static void cpufreq_exit_governor(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpufreq_suspended || !policy->governor)
 		return;
 
@@ -2063,7 +2211,9 @@ static int cpufreq_start_governor(struct cpufreq_policy *policy)
 	int ret;
 
 	if (cpufreq_suspended)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!policy->governor)
 		return -EINVAL;
@@ -2087,6 +2237,7 @@ static int cpufreq_start_governor(struct cpufreq_policy *policy)
 
 static void cpufreq_stop_governor(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpufreq_suspended || !policy->governor)
 		return;
 
@@ -2098,6 +2249,7 @@ static void cpufreq_stop_governor(struct cpufreq_policy *policy)
 
 static void cpufreq_governor_limits(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpufreq_suspended || !policy->governor)
 		return;
 
@@ -2112,15 +2264,20 @@ int cpufreq_register_governor(struct cpufreq_governor *governor)
 	int err;
 
 	if (!governor)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (cpufreq_disabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	mutex_lock(&cpufreq_governor_mutex);
 
 	err = -EBUSY;
 	if (!find_governor(governor->name)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		list_add(&governor->governor_list, &cpufreq_governor_list);
 	}
@@ -2136,7 +2293,9 @@ void cpufreq_unregister_governor(struct cpufreq_governor *governor)
 	unsigned long flags;
 
 	if (!governor)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (cpufreq_disabled())
 		return;
@@ -2174,7 +2333,9 @@ int cpufreq_get_policy(struct cpufreq_policy *policy, unsigned int cpu)
 {
 	struct cpufreq_policy *cpu_policy;
 	if (!policy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	cpu_policy = cpufreq_cpu_get(cpu);
 	if (!cpu_policy)
@@ -2197,6 +2358,7 @@ static int cpufreq_set_policy(struct cpufreq_policy *policy,
 	struct cpufreq_governor *old_gov;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("setting new policy for CPU %u: %u - %u kHz\n",
 		 new_policy->cpu, new_policy->min, new_policy->max);
 
@@ -2294,6 +2456,7 @@ static int cpufreq_set_policy(struct cpufreq_policy *policy,
  */
 void cpufreq_update_policy(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpufreq_policy *policy = cpufreq_cpu_get(cpu);
 	struct cpufreq_policy new_policy;
 
@@ -2340,6 +2503,7 @@ static int cpufreq_boost_set_sw(int state)
 	struct cpufreq_policy *policy;
 	int ret = -EINVAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_active_policy(policy) {
 		if (!policy->freq_table)
 			continue;
@@ -2367,7 +2531,9 @@ int cpufreq_boost_trigger_state(int state)
 	int ret = 0;
 
 	if (cpufreq_driver->boost_enabled == state)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	write_lock_irqsave(&cpufreq_driver_lock, flags);
 	cpufreq_driver->boost_enabled = state;
@@ -2397,8 +2563,10 @@ static int create_boost_sysfs_file(void)
 
 	ret = sysfs_create_file(cpufreq_global_kobject, &boost.attr);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s: cannot register global BOOST sysfs file\n",
 		       __func__);
+}
 
 	return ret;
 }
@@ -2406,11 +2574,14 @@ static int create_boost_sysfs_file(void)
 static void remove_boost_sysfs_file(void)
 {
 	if (cpufreq_boost_supported())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_remove_file(cpufreq_global_kobject, &boost.attr);
 }
+}
 
 int cpufreq_enable_boost_support(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!cpufreq_driver)
 		return -EINVAL;
 
@@ -2426,6 +2597,7 @@ EXPORT_SYMBOL_GPL(cpufreq_enable_boost_support);
 
 int cpufreq_boost_enabled(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cpufreq_driver->boost_enabled;
 }
 EXPORT_SYMBOL_GPL(cpufreq_boost_enabled);
@@ -2437,6 +2609,7 @@ static enum cpuhp_state hp_online;
 
 static int cpuhp_cpufreq_online(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpufreq_online(cpu);
 
 	return 0;
@@ -2444,6 +2617,7 @@ static int cpuhp_cpufreq_online(unsigned int cpu)
 
 static int cpuhp_cpufreq_offline(unsigned int cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpufreq_offline(cpu);
 
 	return 0;
@@ -2465,7 +2639,9 @@ int cpufreq_register_driver(struct cpufreq_driver *driver_data)
 	int ret;
 
 	if (cpufreq_disabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (!driver_data || !driver_data->verify || !driver_data->init ||
 	    !(driver_data->setpolicy || driver_data->target_index ||
@@ -2475,6 +2651,7 @@ int cpufreq_register_driver(struct cpufreq_driver *driver_data)
 	     (!!driver_data->get_intermediate != !!driver_data->target_intermediate))
 		return -EINVAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("trying to register driver %s\n", driver_data->name);
 
 	/* Protect against concurrent CPU online/offline. */
@@ -2482,7 +2659,9 @@ int cpufreq_register_driver(struct cpufreq_driver *driver_data)
 
 	write_lock_irqsave(&cpufreq_driver_lock, flags);
 	if (cpufreq_driver) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_unlock_irqrestore(&cpufreq_driver_lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EEXIST;
 		goto out;
 	}
@@ -2490,9 +2669,12 @@ int cpufreq_register_driver(struct cpufreq_driver *driver_data)
 	write_unlock_irqrestore(&cpufreq_driver_lock, flags);
 
 	if (driver_data->setpolicy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		driver_data->flags |= CPUFREQ_CONST_LOOPS;
+}
 
 	if (cpufreq_boost_supported()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = create_boost_sysfs_file();
 		if (ret)
 			goto err_null_driver;
@@ -2506,20 +2688,24 @@ int cpufreq_register_driver(struct cpufreq_driver *driver_data)
 	    list_empty(&cpufreq_policy_list)) {
 		/* if all ->init() calls failed, unregister */
 		ret = -ENODEV;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("%s: No CPU initialized for driver %s\n", __func__,
 			 driver_data->name);
 		goto err_if_unreg;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = cpuhp_setup_state_nocalls_cpuslocked(CPUHP_AP_ONLINE_DYN,
 						   "cpufreq:online",
 						   cpuhp_cpufreq_online,
 						   cpuhp_cpufreq_offline);
 	if (ret < 0)
 		goto err_if_unreg;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hp_online = ret;
 	ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("driver %s up and running\n", driver_data->name);
 	goto out;
 
@@ -2549,6 +2735,7 @@ int cpufreq_unregister_driver(struct cpufreq_driver *driver)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!cpufreq_driver || (driver != cpufreq_driver))
 		return -EINVAL;
 
@@ -2585,7 +2772,9 @@ EXPORT_SYMBOL(cpufreq_global_kobject);
 static int __init cpufreq_core_init(void)
 {
 	if (cpufreq_disabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	cpufreq_global_kobject = kobject_create_and_add("cpufreq", &cpu_subsys.dev_root->kobj);
 	BUG_ON(!cpufreq_global_kobject);
diff --git a/drivers/cpufreq/cpufreq_conservative.c b/drivers/cpufreq/cpufreq_conservative.c
index f20f20a..cc26162 100644
--- a/drivers/cpufreq/cpufreq_conservative.c
+++ b/drivers/cpufreq/cpufreq_conservative.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  drivers/cpufreq/cpufreq_conservative.c
  *
diff --git a/drivers/cpufreq/cpufreq_ondemand.c b/drivers/cpufreq/cpufreq_ondemand.c
index 6b423ee..74d572b 100644
--- a/drivers/cpufreq/cpufreq_ondemand.c
+++ b/drivers/cpufreq/cpufreq_ondemand.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  drivers/cpufreq/cpufreq_ondemand.c
  *
@@ -75,6 +77,7 @@ static unsigned int generic_powersave_bias_target(struct cpufreq_policy *policy,
 	struct cpufreq_frequency_table *freq_table = policy->freq_table;
 
 	if (!freq_table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dbs_info->freq_lo = 0;
 		dbs_info->freq_lo_delay_us = 0;
 		return freq_next;
@@ -108,6 +111,7 @@ static unsigned int generic_powersave_bias_target(struct cpufreq_policy *policy,
 
 static void ondemand_powersave_bias_init(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct od_policy_dbs_info *dbs_info = to_dbs_info(policy->governor_data);
 
 	dbs_info->freq_lo = 0;
@@ -120,8 +124,10 @@ static void dbs_freq_increase(struct cpufreq_policy *policy, unsigned int freq)
 	struct od_dbs_tuners *od_tuners = dbs_data->tuners;
 
 	if (od_tuners->powersave_bias)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		freq = od_ops.powersave_bias_target(policy, freq,
 				CPUFREQ_RELATION_H);
+}
 	else if (policy->cur == policy->max)
 		return;
 
@@ -206,6 +212,7 @@ static struct dbs_governor od_dbs_gov;
 static ssize_t store_io_is_busy(struct gov_attr_set *attr_set, const char *buf,
 				size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dbs_data *dbs_data = to_dbs_data(attr_set);
 	unsigned int input;
 	int ret;
@@ -224,6 +231,7 @@ static ssize_t store_io_is_busy(struct gov_attr_set *attr_set, const char *buf,
 static ssize_t store_up_threshold(struct gov_attr_set *attr_set,
 				  const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dbs_data *dbs_data = to_dbs_data(attr_set);
 	unsigned int input;
 	int ret;
@@ -241,6 +249,7 @@ static ssize_t store_up_threshold(struct gov_attr_set *attr_set,
 static ssize_t store_sampling_down_factor(struct gov_attr_set *attr_set,
 					  const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dbs_data *dbs_data = to_dbs_data(attr_set);
 	struct policy_dbs_info *policy_dbs;
 	unsigned int input;
@@ -269,6 +278,7 @@ static ssize_t store_sampling_down_factor(struct gov_attr_set *attr_set,
 static ssize_t store_ignore_nice_load(struct gov_attr_set *attr_set,
 				      const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dbs_data *dbs_data = to_dbs_data(attr_set);
 	unsigned int input;
 	int ret;
@@ -294,6 +304,7 @@ static ssize_t store_ignore_nice_load(struct gov_attr_set *attr_set,
 static ssize_t store_powersave_bias(struct gov_attr_set *attr_set,
 				    const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dbs_data *dbs_data = to_dbs_data(attr_set);
 	struct od_dbs_tuners *od_tuners = dbs_data->tuners;
 	struct policy_dbs_info *policy_dbs;
@@ -346,11 +357,13 @@ static struct policy_dbs_info *od_alloc(void)
 	struct od_policy_dbs_info *dbs_info;
 
 	dbs_info = kzalloc(sizeof(*dbs_info), GFP_KERNEL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dbs_info ? &dbs_info->policy_dbs : NULL;
 }
 
 static void od_free(struct policy_dbs_info *policy_dbs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(to_dbs_info(policy_dbs));
 }
 
@@ -362,7 +375,9 @@ static int od_init(struct dbs_data *dbs_data)
 
 	tuners = kzalloc(sizeof(*tuners), GFP_KERNEL);
 	if (!tuners)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	cpu = get_cpu();
 	idle_time = get_cpu_idle_time_us(cpu, NULL);
@@ -385,11 +400,13 @@ static int od_init(struct dbs_data *dbs_data)
 
 static void od_exit(struct dbs_data *dbs_data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(dbs_data->tuners);
 }
 
 static void od_start(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct od_policy_dbs_info *dbs_info = to_dbs_info(policy->governor_data);
 
 	dbs_info->sample_type = OD_NORMAL_SAMPLE;
@@ -422,6 +439,7 @@ static void od_set_powersave_bias(unsigned int powersave_bias)
 	cpumask_clear(&done);
 
 	get_online_cpus();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_online_cpu(cpu) {
 		struct cpufreq_policy *policy;
 		struct policy_dbs_info *policy_dbs;
@@ -452,6 +470,7 @@ void od_register_powersave_bias_handler(unsigned int (*f)
 		(struct cpufreq_policy *, unsigned int, unsigned int),
 		unsigned int powersave_bias)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	od_ops.powersave_bias_target = f;
 	od_set_powersave_bias(powersave_bias);
 }
@@ -459,6 +478,7 @@ EXPORT_SYMBOL_GPL(od_register_powersave_bias_handler);
 
 void od_unregister_powersave_bias_handler(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	od_ops.powersave_bias_target = generic_powersave_bias_target;
 	od_set_powersave_bias(0);
 }
@@ -471,6 +491,7 @@ static int __init cpufreq_gov_dbs_init(void)
 
 static void __exit cpufreq_gov_dbs_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpufreq_unregister_governor(CPU_FREQ_GOV_ONDEMAND);
 }
 
diff --git a/drivers/cpufreq/cpufreq_performance.c b/drivers/cpufreq/cpufreq_performance.c
index dafb679..f4ca71e 100644
--- a/drivers/cpufreq/cpufreq_performance.c
+++ b/drivers/cpufreq/cpufreq_performance.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/drivers/cpufreq/cpufreq_performance.c
  *
@@ -18,6 +20,7 @@
 
 static void cpufreq_gov_performance_limits(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("setting to %u kHz\n", policy->max);
 	__cpufreq_driver_target(policy, policy->max, CPUFREQ_RELATION_H);
 }
@@ -35,6 +38,7 @@ static int __init cpufreq_gov_performance_init(void)
 
 static void __exit cpufreq_gov_performance_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpufreq_unregister_governor(&cpufreq_gov_performance);
 }
 
@@ -47,6 +51,7 @@ struct cpufreq_governor *cpufreq_default_governor(void)
 #ifndef CONFIG_CPU_FREQ_GOV_PERFORMANCE_MODULE
 struct cpufreq_governor *cpufreq_fallback_governor(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &cpufreq_gov_performance;
 }
 #endif
diff --git a/drivers/cpufreq/cpufreq_powersave.c b/drivers/cpufreq/cpufreq_powersave.c
index 78a6510..14e0d01 100644
--- a/drivers/cpufreq/cpufreq_powersave.c
+++ b/drivers/cpufreq/cpufreq_powersave.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/drivers/cpufreq/cpufreq_powersave.c
  *
diff --git a/drivers/cpufreq/cpufreq_stats.c b/drivers/cpufreq/cpufreq_stats.c
index e75880e..1f9dce3 100644
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  drivers/cpufreq/cpufreq_stats.c
  *
diff --git a/drivers/cpufreq/cpufreq_userspace.c b/drivers/cpufreq/cpufreq_userspace.c
index bd897e3..595a584 100644
--- a/drivers/cpufreq/cpufreq_userspace.c
+++ b/drivers/cpufreq/cpufreq_userspace.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 
 /*
  *  linux/drivers/cpufreq/cpufreq_userspace.c
@@ -34,6 +36,7 @@ static int cpufreq_set(struct cpufreq_policy *policy, unsigned int freq)
 	int ret = -EINVAL;
 	unsigned int *setspeed = policy->governor_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("cpufreq_set for cpu %u, freq %u kHz\n", policy->cpu, freq);
 
 	mutex_lock(&userspace_mutex);
@@ -50,6 +53,7 @@ static int cpufreq_set(struct cpufreq_policy *policy, unsigned int freq)
 
 static ssize_t show_speed(struct cpufreq_policy *policy, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%u\n", policy->cur);
 }
 
@@ -59,7 +63,9 @@ static int cpufreq_userspace_policy_init(struct cpufreq_policy *policy)
 
 	setspeed = kzalloc(sizeof(*setspeed), GFP_KERNEL);
 	if (!setspeed)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	policy->governor_data = setspeed;
 	return 0;
@@ -67,6 +73,7 @@ static int cpufreq_userspace_policy_init(struct cpufreq_policy *policy)
 
 static void cpufreq_userspace_policy_exit(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&userspace_mutex);
 	kfree(policy->governor_data);
 	policy->governor_data = NULL;
@@ -77,6 +84,7 @@ static int cpufreq_userspace_policy_start(struct cpufreq_policy *policy)
 {
 	unsigned int *setspeed = policy->governor_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!policy->cur);
 	pr_debug("started managing cpu %u\n", policy->cpu);
 
@@ -91,6 +99,7 @@ static void cpufreq_userspace_policy_stop(struct cpufreq_policy *policy)
 {
 	unsigned int *setspeed = policy->governor_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("managing cpu %u stopped\n", policy->cpu);
 
 	mutex_lock(&userspace_mutex);
@@ -105,6 +114,7 @@ static void cpufreq_userspace_policy_limits(struct cpufreq_policy *policy)
 
 	mutex_lock(&userspace_mutex);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("limit event for cpu %u: %u - %u kHz, currently %u kHz, last set to %u kHz\n",
 		 policy->cpu, policy->min, policy->max, policy->cur, *setspeed);
 
@@ -137,6 +147,7 @@ static int __init cpufreq_gov_userspace_init(void)
 
 static void __exit cpufreq_gov_userspace_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpufreq_unregister_governor(&cpufreq_gov_userspace);
 }
 
@@ -148,6 +159,7 @@ MODULE_LICENSE("GPL");
 #ifdef CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
 struct cpufreq_governor *cpufreq_default_governor(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &cpufreq_gov_userspace;
 }
 
diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index 93a0e88..268bd54 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * intel_pstate.c: Native P state management for Intel processors
  *
@@ -58,11 +60,13 @@
 
 static inline int32_t mul_fp(int32_t x, int32_t y)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ((int64_t)x * (int64_t)y) >> FRAC_BITS;
 }
 
 static inline int32_t div_fp(s64 x, s64 y)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return div64_s64((int64_t)x << FRAC_BITS, y);
 }
 
@@ -73,27 +77,33 @@ static inline int ceiling_fp(int32_t x)
 	ret = fp_toint(x);
 	mask = (1 << FRAC_BITS) - 1;
 	if (x & mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret += 1;
+}
 	return ret;
 }
 
 static inline int32_t percent_fp(int percent)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return div_fp(percent, 100);
 }
 
 static inline u64 mul_ext_fp(u64 x, u64 y)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (x * y) >> EXT_FRAC_BITS;
 }
 
 static inline u64 div_ext_fp(u64 x, u64 y)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return div64_u64(x << EXT_FRAC_BITS, y);
 }
 
 static inline int32_t percent_ext_fp(int percent)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return div_ext_fp(percent, 100);
 }
 
@@ -302,6 +312,7 @@ static DEFINE_MUTEX(intel_pstate_limits_lock);
 
 static bool intel_pstate_get_ppc_enable_status(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_gbl_FADT.preferred_profile == PM_ENTERPRISE_SERVER ||
 	    acpi_gbl_FADT.preferred_profile == PM_PERFORMANCE_SERVER)
 		return true;
@@ -314,6 +325,7 @@ static bool intel_pstate_get_ppc_enable_status(void)
 /* The work item is needed to avoid CPU hotplug locking issues */
 static void intel_pstste_sched_itmt_work_fn(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sched_set_itmt_support();
 }
 
@@ -327,7 +339,9 @@ static void intel_pstate_set_itmt_prio(int cpu)
 
 	ret = cppc_get_perf_caps(cpu, &cppc_perf);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * The priorities can be set regardless of whether or not
@@ -367,6 +381,7 @@ static void intel_pstate_init_acpi_perf_limits(struct cpufreq_policy *policy)
 	int i;
 
 	if (hwp_active) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		intel_pstate_set_itmt_prio(policy->cpu);
 		return;
 	}
@@ -436,7 +451,9 @@ static void intel_pstate_exit_perf_limits(struct cpufreq_policy *policy)
 
 	cpu = all_cpu_data[policy->cpu];
 	if (!cpu->valid_pss_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	acpi_processor_unregister_performance(policy->cpu);
 }
@@ -467,6 +484,7 @@ static int min_perf_pct_min(void)
 	struct cpudata *cpu = all_cpu_data[0];
 	int turbo_pstate = cpu->pstate.turbo_pstate;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return turbo_pstate ?
 		(cpu->pstate.min_pstate * 100 / turbo_pstate) : 0;
 }
@@ -476,6 +494,7 @@ static s16 intel_pstate_get_epb(struct cpudata *cpu_data)
 	u64 epb;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!static_cpu_has(X86_FEATURE_EPB))
 		return -ENXIO;
 
@@ -490,6 +509,7 @@ static s16 intel_pstate_get_epp(struct cpudata *cpu_data, u64 hwp_req_data)
 {
 	s16 epp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (static_cpu_has(X86_FEATURE_HWP_EPP)) {
 		/*
 		 * When hwp_req_data is 0, means that caller didn't read
@@ -515,6 +535,7 @@ static int intel_pstate_set_epb(int cpu, s16 pref)
 	u64 epb;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!static_cpu_has(X86_FEATURE_EPB))
 		return -ENXIO;
 
@@ -561,7 +582,9 @@ static int intel_pstate_get_energy_pref_index(struct cpudata *cpu_data)
 
 	epp = intel_pstate_get_epp(cpu_data, 0);
 	if (epp < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return epp;
+}
 
 	if (static_cpu_has(X86_FEATURE_HWP_EPP)) {
 		if (epp == HWP_EPP_PERFORMANCE)
@@ -596,7 +619,9 @@ static int intel_pstate_set_energy_pref_index(struct cpudata *cpu_data,
 	int ret;
 
 	if (!pref_index)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		epp = cpu_data->epp_default;
+}
 
 	mutex_lock(&intel_pstate_limits_lock);
 
@@ -631,6 +656,7 @@ static ssize_t show_energy_performance_available_preferences(
 	int i = 0;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (energy_perf_strings[i] != NULL)
 		ret += sprintf(&buf[ret], "%s ", energy_perf_strings[i++]);
 
@@ -650,7 +676,9 @@ static ssize_t store_energy_performance_preference(
 
 	ret = sscanf(buf, "%20s", str_preference);
 	if (ret != 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	while (energy_perf_strings[i] != NULL) {
 		if (!strcmp(str_preference, energy_perf_strings[i])) {
@@ -671,7 +699,9 @@ static ssize_t show_energy_performance_preference(
 
 	preference = intel_pstate_get_energy_pref_index(cpu_data);
 	if (preference < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return preference;
+}
 
 	return  sprintf(buf, "%s\n", energy_perf_strings[preference]);
 }
@@ -691,7 +721,9 @@ static void intel_pstate_get_hwp_max(unsigned int cpu, int *phy_max,
 
 	rdmsrl_on_cpu(cpu, MSR_HWP_CAPABILITIES, &cap);
 	if (global.no_turbo)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*current_max = HWP_GUARANTEED_PERF(cap);
+}
 	else
 		*current_max = HWP_HIGHEST_PERF(cap);
 
@@ -709,7 +741,9 @@ static void intel_pstate_hwp_set(unsigned int cpu)
 	min = cpu_data->min_perf_ratio;
 
 	if (cpu_data->policy == CPUFREQ_POLICY_PERFORMANCE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		min = max;
+}
 
 	rdmsrl_on_cpu(cpu, MSR_HWP_REQUEST, &value);
 
@@ -772,7 +806,9 @@ static int intel_pstate_hwp_save_state(struct cpufreq_policy *policy)
 	struct cpudata *cpu_data = all_cpu_data[policy->cpu];
 
 	if (!hwp_active)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	cpu_data->epp_saved = intel_pstate_get_epp(cpu_data, 0);
 
@@ -781,6 +817,7 @@ static int intel_pstate_hwp_save_state(struct cpufreq_policy *policy)
 
 static int intel_pstate_resume(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!hwp_active)
 		return 0;
 
@@ -798,6 +835,7 @@ static void intel_pstate_update_policies(void)
 {
 	int cpu;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(cpu)
 		cpufreq_update_policy(cpu);
 }
@@ -828,6 +866,7 @@ static ssize_t show_status(struct kobject *kobj,
 static ssize_t store_status(struct kobject *a, struct attribute *b,
 			    const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	char *p = memchr(buf, '\n', count);
 	int ret;
 
@@ -848,6 +887,7 @@ static ssize_t show_turbo_pct(struct kobject *kobj,
 	mutex_lock(&intel_pstate_driver_lock);
 
 	if (!intel_pstate_driver) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&intel_pstate_driver_lock);
 		return -EAGAIN;
 	}
@@ -873,6 +913,7 @@ static ssize_t show_num_pstates(struct kobject *kobj,
 	mutex_lock(&intel_pstate_driver_lock);
 
 	if (!intel_pstate_driver) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&intel_pstate_driver_lock);
 		return -EAGAIN;
 	}
@@ -893,6 +934,7 @@ static ssize_t show_no_turbo(struct kobject *kobj,
 	mutex_lock(&intel_pstate_driver_lock);
 
 	if (!intel_pstate_driver) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&intel_pstate_driver_lock);
 		return -EAGAIN;
 	}
@@ -916,7 +958,9 @@ static ssize_t store_no_turbo(struct kobject *a, struct attribute *b,
 
 	ret = sscanf(buf, "%u", &input);
 	if (ret != 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&intel_pstate_driver_lock);
 
@@ -963,7 +1007,9 @@ static ssize_t store_max_perf_pct(struct kobject *a, struct attribute *b,
 
 	ret = sscanf(buf, "%u", &input);
 	if (ret != 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&intel_pstate_driver_lock);
 
@@ -993,7 +1039,9 @@ static ssize_t store_min_perf_pct(struct kobject *a, struct attribute *b,
 
 	ret = sscanf(buf, "%u", &input);
 	if (ret != 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&intel_pstate_driver_lock);
 
@@ -1045,6 +1093,7 @@ static void __init intel_pstate_sysfs_expose_params(void)
 
 	intel_pstate_kobject = kobject_create_and_add("intel_pstate",
 						&cpu_subsys.dev_root->kobj);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(!intel_pstate_kobject))
 		return;
 
@@ -1090,7 +1139,9 @@ static void intel_pstate_disable_ee(int cpu)
 
 	ret = rdmsrl_on_cpu(cpu, MSR_IA32_POWER_CTL, &power_ctl);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!(power_ctl & BIT(MSR_IA32_POWER_CTL_BIT_EE))) {
 		pr_info("Disabling energy efficiency optimization\n");
@@ -1130,6 +1181,7 @@ static u64 atom_get_val(struct cpudata *cpudata, int pstate)
 	u32 vid;
 
 	val = (u64)pstate << 8;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (global.no_turbo && !global.turbo_disabled)
 		val |= (u64)1 << 32;
 
@@ -1156,6 +1208,7 @@ static int silvermont_get_scaling(void)
 
 	rdmsrl(MSR_FSB_FREQ, value);
 	i = value & 0x7;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(i > 4);
 
 	return silvermont_freq_table[i];
@@ -1172,6 +1225,7 @@ static int airmont_get_scaling(void)
 
 	rdmsrl(MSR_FSB_FREQ, value);
 	i = value & 0xF;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(i > 8);
 
 	return airmont_freq_table[i];
@@ -1255,7 +1309,9 @@ static int core_get_max_pstate(void)
 
 	tdp_ratio = core_get_tdp_ratio(plat_info);
 	if (tdp_ratio <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return max_pstate;
+}
 
 	if (hwp_active) {
 		/* Turbo activation ratio is not used on HWP platforms */
@@ -1286,12 +1342,15 @@ static int core_get_turbo_pstate(void)
 	nont = core_get_max_pstate();
 	ret = (value) & 255;
 	if (ret <= nont)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = nont;
+}
 	return ret;
 }
 
 static inline int core_get_scaling(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 100000;
 }
 
@@ -1300,6 +1359,7 @@ static u64 core_get_val(struct cpudata *cpudata, int pstate)
 	u64 val;
 
 	val = (u64)pstate << 8;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (global.no_turbo && !global.turbo_disabled)
 		val |= (u64)1 << 32;
 
@@ -1308,6 +1368,7 @@ static u64 core_get_val(struct cpudata *cpudata, int pstate)
 
 static int knl_get_aperf_mperf_shift(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 10;
 }
 
@@ -1320,18 +1381,22 @@ static int knl_get_turbo_pstate(void)
 	nont = core_get_max_pstate();
 	ret = (((value) >> 8) & 0xFF);
 	if (ret <= nont)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = nont;
+}
 	return ret;
 }
 
 static int intel_pstate_get_base_pstate(struct cpudata *cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return global.no_turbo || global.turbo_disabled ?
 			cpu->pstate.max_pstate : cpu->pstate.turbo_pstate;
 }
 
 static void intel_pstate_set_pstate(struct cpudata *cpu, int pstate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	trace_cpu_frequency(pstate * cpu->pstate.scaling, cpu->cpu);
 	cpu->pstate.current_pstate = pstate;
 	/*
@@ -1345,6 +1410,7 @@ static void intel_pstate_set_pstate(struct cpudata *cpu, int pstate)
 
 static void intel_pstate_set_min_pstate(struct cpudata *cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	intel_pstate_set_pstate(cpu, cpu->pstate.min_pstate);
 }
 
@@ -1354,12 +1420,14 @@ static void intel_pstate_max_within_limits(struct cpudata *cpu)
 
 	update_turbo_state();
 	pstate = intel_pstate_get_base_pstate(cpu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pstate = max(cpu->pstate.min_pstate, cpu->max_perf_ratio);
 	intel_pstate_set_pstate(cpu, pstate);
 }
 
 static void intel_pstate_get_cpu_pstates(struct cpudata *cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpu->pstate.min_pstate = pstate_funcs.get_min();
 	cpu->pstate.max_pstate = pstate_funcs.get_max();
 	cpu->pstate.max_pstate_physical = pstate_funcs.get_max_physical();
@@ -1390,6 +1458,7 @@ static inline bool intel_pstate_sample(struct cpudata *cpu, u64 time)
 	unsigned long flags;
 	u64 tsc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_irq_save(flags);
 	rdmsrl(MSR_IA32_APERF, aperf);
 	rdmsrl(MSR_IA32_MPERF, mperf);
@@ -1428,11 +1497,13 @@ static inline bool intel_pstate_sample(struct cpudata *cpu, u64 time)
 
 static inline int32_t get_avg_frequency(struct cpudata *cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mul_ext_fp(cpu->sample.core_avg_perf, cpu_khz);
 }
 
 static inline int32_t get_avg_pstate(struct cpudata *cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mul_ext_fp(cpu->pstate.max_pstate_physical,
 			  cpu->sample.core_avg_perf);
 }
@@ -1450,7 +1521,9 @@ static inline int32_t get_target_pstate(struct cpudata *cpu)
 	cpu->iowait_boost >>= 1;
 
 	if (busy_frac < boost)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		busy_frac = boost;
+}
 
 	sample->busy_scaled = busy_frac * 100;
 
@@ -1477,6 +1550,7 @@ static inline int32_t get_target_pstate(struct cpudata *cpu)
 
 static int intel_pstate_prepare_request(struct cpudata *cpu, int pstate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int max_pstate = intel_pstate_get_base_pstate(cpu);
 	int min_pstate;
 
@@ -1487,6 +1561,7 @@ static int intel_pstate_prepare_request(struct cpudata *cpu, int pstate)
 
 static void intel_pstate_update_pstate(struct cpudata *cpu, int pstate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pstate == cpu->pstate.current_pstate)
 		return;
 
@@ -1522,6 +1597,7 @@ static void intel_pstate_adjust_pstate(struct cpudata *cpu)
 static void intel_pstate_update_util(struct update_util_data *data, u64 time,
 				     unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpudata *cpu = container_of(data, struct cpudata, update_util);
 	u64 delta_ns;
 
@@ -1652,6 +1728,7 @@ static int intel_pstate_init_cpu(unsigned int cpunum)
 	cpu = all_cpu_data[cpunum];
 
 	if (!cpu) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpu = kzalloc(sizeof(*cpu), GFP_KERNEL);
 		if (!cpu)
 			return -ENOMEM;
@@ -1689,7 +1766,9 @@ static void intel_pstate_set_update_util_hook(unsigned int cpu_num)
 	struct cpudata *cpu = all_cpu_data[cpu_num];
 
 	if (hwp_active)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (cpu->update_util_set)
 		return;
@@ -1706,7 +1785,9 @@ static void intel_pstate_clear_update_util_hook(unsigned int cpu)
 	struct cpudata *cpu_data = all_cpu_data[cpu];
 
 	if (!cpu_data->update_util_set)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	cpufreq_remove_update_util_hook(cpu);
 	cpu_data->update_util_set = false;
@@ -1715,6 +1796,7 @@ static void intel_pstate_clear_update_util_hook(unsigned int cpu)
 
 static int intel_pstate_get_max_freq(struct cpudata *cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return global.turbo_disabled || global.no_turbo ?
 			cpu->pstate.max_freq : cpu->pstate.turbo_freq;
 }
@@ -1722,6 +1804,7 @@ static int intel_pstate_get_max_freq(struct cpudata *cpu)
 static void intel_pstate_update_perf_limits(struct cpufreq_policy *policy,
 					    struct cpudata *cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int max_freq = intel_pstate_get_max_freq(cpu);
 	int32_t max_policy_perf, min_policy_perf;
 	int max_state, turbo_max;
@@ -1786,7 +1869,9 @@ static int intel_pstate_set_policy(struct cpufreq_policy *policy)
 	struct cpudata *cpu;
 
 	if (!policy->cpuinfo.max_freq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	pr_debug("set_policy cpuinfo.max %u policy->max %u\n",
 		 policy->cpuinfo.max_freq, policy->max);
@@ -1820,6 +1905,7 @@ static int intel_pstate_set_policy(struct cpufreq_policy *policy)
 static void intel_pstate_adjust_policy_max(struct cpufreq_policy *policy,
 					 struct cpudata *cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpu->pstate.max_pstate_physical > cpu->pstate.max_pstate &&
 	    policy->max < policy->cpuinfo.max_freq &&
 	    policy->max > cpu->pstate.max_freq) {
@@ -1847,11 +1933,13 @@ static int intel_pstate_verify_policy(struct cpufreq_policy *policy)
 
 static void intel_cpufreq_stop_cpu(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	intel_pstate_set_min_pstate(all_cpu_data[policy->cpu]);
 }
 
 static void intel_pstate_stop_cpu(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("CPU %d exiting\n", policy->cpu);
 
 	intel_pstate_clear_update_util_hook(policy->cpu);
@@ -1863,6 +1951,7 @@ static void intel_pstate_stop_cpu(struct cpufreq_policy *policy)
 
 static int intel_pstate_cpu_exit(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	intel_pstate_exit_perf_limits(policy);
 
 	policy->fast_switch_possible = false;
@@ -1877,7 +1966,9 @@ static int __intel_pstate_cpu_init(struct cpufreq_policy *policy)
 
 	rc = intel_pstate_init_cpu(policy->cpu);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	cpu = all_cpu_data[policy->cpu];
 
@@ -1903,6 +1994,7 @@ static int __intel_pstate_cpu_init(struct cpufreq_policy *policy)
 
 static int intel_pstate_cpu_init(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = __intel_pstate_cpu_init(policy);
 
 	if (ret)
@@ -1996,6 +2088,7 @@ static unsigned int intel_cpufreq_fast_switch(struct cpufreq_policy *policy,
 
 static int intel_cpufreq_cpu_init(struct cpufreq_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = __intel_pstate_cpu_init(policy);
 
 	if (ret)
@@ -2027,6 +2120,7 @@ static void intel_pstate_driver_cleanup(void)
 	unsigned int cpu;
 
 	get_online_cpus();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_online_cpu(cpu) {
 		if (all_cpu_data[cpu]) {
 			if (intel_pstate_driver == &intel_pstate)
@@ -2050,6 +2144,7 @@ static int intel_pstate_register_driver(struct cpufreq_driver *driver)
 	intel_pstate_driver = driver;
 	ret = cpufreq_register_driver(intel_pstate_driver);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		intel_pstate_driver_cleanup();
 		return ret;
 	}
@@ -2061,6 +2156,7 @@ static int intel_pstate_register_driver(struct cpufreq_driver *driver)
 
 static int intel_pstate_unregister_driver(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (hwp_active)
 		return -EBUSY;
 
@@ -2072,6 +2168,7 @@ static int intel_pstate_unregister_driver(void)
 
 static ssize_t intel_pstate_show_status(char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!intel_pstate_driver)
 		return sprintf(buf, "off\n");
 
@@ -2083,6 +2180,7 @@ static int intel_pstate_update_status(const char *buf, size_t size)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (size == 3 && !strncmp(buf, "off", size))
 		return intel_pstate_driver ?
 			intel_pstate_unregister_driver() : -EINVAL;
@@ -2123,6 +2221,7 @@ static unsigned int force_load __initdata;
 
 static int __init intel_pstate_msrs_not_valid(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pstate_funcs.get_max() ||
 	    !pstate_funcs.get_min() ||
 	    !pstate_funcs.get_turbo())
@@ -2133,6 +2232,7 @@ static int __init intel_pstate_msrs_not_valid(void)
 
 static void __init copy_cpu_funcs(struct pstate_funcs *funcs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pstate_funcs.get_max   = funcs->get_max;
 	pstate_funcs.get_max_physical = funcs->get_max_physical;
 	pstate_funcs.get_min   = funcs->get_min;
@@ -2149,6 +2249,7 @@ static bool __init intel_pstate_no_acpi_pss(void)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(i) {
 		acpi_status status;
 		union acpi_object *pss;
@@ -2178,6 +2279,7 @@ static bool __init intel_pstate_has_acpi_ppc(void)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(i) {
 		struct acpi_processor *pr = per_cpu(processors, i);
 
@@ -2222,6 +2324,7 @@ static bool __init intel_pstate_platform_pwr_mgmt_exists(void)
 
 	id = x86_match_cpu(intel_pstate_cpu_oob_ids);
 	if (id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rdmsrl(MSR_MISC_PWR_MGMT, misc_pwr);
 		if ( misc_pwr & (1 << 8))
 			return true;
@@ -2266,11 +2369,15 @@ static int __init intel_pstate_init(void)
 	int rc;
 
 	if (no_load)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (x86_match_cpu(hwp_support_ids)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		copy_cpu_funcs(&core_funcs);
 		if (!no_hwp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hwp_active++;
 			intel_pstate.attr = hwp_cpufreq_attrs;
 			goto hwp_cpu_matched;
@@ -2280,13 +2387,19 @@ static int __init intel_pstate_init(void)
 
 		id = x86_match_cpu(intel_pstate_cpu_ids);
 		if (!id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		copy_cpu_funcs((struct pstate_funcs *)id->driver_data);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (intel_pstate_msrs_not_valid())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 hwp_cpu_matched:
 	/*
@@ -2294,17 +2407,26 @@ static int __init intel_pstate_init(void)
 	 * firmware has its own power management modes.
 	 */
 	if (intel_pstate_platform_pwr_mgmt_exists())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!hwp_active && hwp_only)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTSUPP;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_info("Intel P-state driver initializing\n");
 
 	all_cpu_data = vzalloc(sizeof(void *) * num_possible_cpus());
 	if (!all_cpu_data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	intel_pstate_request_control_from_smm();
 
 	intel_pstate_sysfs_expose_params();
@@ -2313,17 +2435,24 @@ static int __init intel_pstate_init(void)
 	rc = intel_pstate_register_driver(default_driver);
 	mutex_unlock(&intel_pstate_driver_lock);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (hwp_active)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("HWP enabled\n");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 device_initcall(intel_pstate_init);
 
 static int __init intel_pstate_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!str)
 		return -EINVAL;
 
diff --git a/drivers/cpufreq/p4-clockmod.c b/drivers/cpufreq/p4-clockmod.c
index a25741b..26d5ea7 100644
--- a/drivers/cpufreq/p4-clockmod.c
+++ b/drivers/cpufreq/p4-clockmod.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Pentium 4/Xeon CPU on demand clock modulation/speed scaling
  *	(C) 2002 - 2003 Dominik Brodowski <linux@brodo.de>
diff --git a/drivers/cpufreq/pcc-cpufreq.c b/drivers/cpufreq/pcc-cpufreq.c
index 3f0ce2a..5b06bd2 100644
--- a/drivers/cpufreq/pcc-cpufreq.c
+++ b/drivers/cpufreq/pcc-cpufreq.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  pcc-cpufreq.c - Processor Clocking Control firmware cpufreq interface
  *
diff --git a/drivers/cpufreq/powernow-k8.c b/drivers/cpufreq/powernow-k8.c
index 062d714..3182197 100644
--- a/drivers/cpufreq/powernow-k8.c
+++ b/drivers/cpufreq/powernow-k8.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *   (c) 2003-2012 Advanced Micro Devices, Inc.
  *  Your use of this code is subject to the terms and conditions of the
diff --git a/drivers/cpuidle/cpuidle.c b/drivers/cpuidle/cpuidle.c
index ed4df58..84a1df6 100644
--- a/drivers/cpuidle/cpuidle.c
+++ b/drivers/cpuidle/cpuidle.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * cpuidle.c - core cpuidle infrastructure
  *
@@ -42,6 +44,7 @@ int cpuidle_disabled(void)
 }
 void disable_cpuidle(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	off = 1;
 }
 
@@ -58,6 +61,7 @@ bool cpuidle_not_available(struct cpuidle_driver *drv,
  */
 int cpuidle_play_dead(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpuidle_device *dev = __this_cpu_read(cpuidle_devices);
 	struct cpuidle_driver *drv = cpuidle_get_cpu_driver(dev);
 	int i;
@@ -82,6 +86,7 @@ static int find_deepest_state(struct cpuidle_driver *drv,
 	unsigned int latency_req = 0;
 	int i, ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 1; i < drv->state_count; i++) {
 		struct cpuidle_state *s = &drv->states[i];
 		struct cpuidle_state_usage *su = &dev->states_usage[i];
@@ -112,7 +117,9 @@ void cpuidle_use_deepest_state(bool enable)
 	preempt_disable();
 	dev = cpuidle_get_device();
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->use_deepest_state = enable;
+}
 	preempt_enable();
 }
 
@@ -124,6 +131,7 @@ void cpuidle_use_deepest_state(bool enable)
 int cpuidle_find_deepest_state(struct cpuidle_driver *drv,
 			       struct cpuidle_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return find_deepest_state(drv, dev, UINT_MAX, 0, false);
 }
 
@@ -173,7 +181,9 @@ int cpuidle_enter_s2idle(struct cpuidle_driver *drv, struct cpuidle_device *dev)
 	 */
 	index = find_deepest_state(drv, dev, UINT_MAX, 0, true);
 	if (index > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		enter_s2idle_proper(drv, dev, index);
+}
 
 	return index;
 }
@@ -268,6 +278,7 @@ int cpuidle_enter_state(struct cpuidle_device *dev, struct cpuidle_driver *drv,
  */
 int cpuidle_select(struct cpuidle_driver *drv, struct cpuidle_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cpuidle_curr_governor->select(drv, dev);
 }
 
@@ -284,6 +295,7 @@ int cpuidle_select(struct cpuidle_driver *drv, struct cpuidle_device *dev)
 int cpuidle_enter(struct cpuidle_driver *drv, struct cpuidle_device *dev,
 		  int index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpuidle_state_is_coupled(drv, index))
 		return cpuidle_enter_state_coupled(dev, drv, index);
 	return cpuidle_enter_state(dev, drv, index);
@@ -299,6 +311,7 @@ int cpuidle_enter(struct cpuidle_driver *drv, struct cpuidle_device *dev,
  */
 void cpuidle_reflect(struct cpuidle_device *dev, int index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpuidle_curr_governor->reflect && index >= 0)
 		cpuidle_curr_governor->reflect(dev, index);
 }
@@ -321,6 +334,7 @@ void cpuidle_install_idle_handler(void)
 void cpuidle_uninstall_idle_handler(void)
 {
 	if (enabled_devices) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		initialized = 0;
 		wake_up_all_idle_cpus();
 	}
@@ -337,6 +351,7 @@ void cpuidle_uninstall_idle_handler(void)
  */
 void cpuidle_pause_and_lock(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&cpuidle_lock);
 	cpuidle_uninstall_idle_handler();
 }
@@ -348,6 +363,7 @@ EXPORT_SYMBOL_GPL(cpuidle_pause_and_lock);
  */
 void cpuidle_resume_and_unlock(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpuidle_install_idle_handler();
 	mutex_unlock(&cpuidle_lock);
 }
@@ -357,6 +373,7 @@ EXPORT_SYMBOL_GPL(cpuidle_resume_and_unlock);
 /* Currently used in suspend/resume path to suspend cpuidle */
 void cpuidle_pause(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&cpuidle_lock);
 	cpuidle_uninstall_idle_handler();
 	mutex_unlock(&cpuidle_lock);
@@ -365,6 +382,7 @@ void cpuidle_pause(void)
 /* Currently used in suspend/resume path to resume cpuidle */
 void cpuidle_resume(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&cpuidle_lock);
 	cpuidle_install_idle_handler();
 	mutex_unlock(&cpuidle_lock);
@@ -383,7 +401,9 @@ int cpuidle_enable_device(struct cpuidle_device *dev)
 	struct cpuidle_driver *drv;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (dev->enabled)
 		return 0;
@@ -428,6 +448,7 @@ EXPORT_SYMBOL_GPL(cpuidle_enable_device);
  */
 void cpuidle_disable_device(struct cpuidle_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpuidle_driver *drv = cpuidle_get_cpu_driver(dev);
 
 	if (!dev || !dev->enabled)
@@ -449,6 +470,7 @@ EXPORT_SYMBOL_GPL(cpuidle_disable_device);
 
 static void __cpuidle_unregister_device(struct cpuidle_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpuidle_driver *drv = cpuidle_get_cpu_driver(dev);
 
 	list_del(&dev->device_list);
@@ -460,6 +482,7 @@ static void __cpuidle_unregister_device(struct cpuidle_device *dev)
 
 static void __cpuidle_device_init(struct cpuidle_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(dev->states_usage, 0, sizeof(dev->states_usage));
 	dev->last_residency = 0;
 }
@@ -477,7 +500,9 @@ static int __cpuidle_register_device(struct cpuidle_device *dev)
 	struct cpuidle_driver *drv = cpuidle_get_cpu_driver(dev);
 
 	if (!try_module_get(drv->owner))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	per_cpu(cpuidle_devices, dev->cpu) = dev;
 	list_add(&dev->device_list, &cpuidle_detected_devices);
@@ -500,7 +525,9 @@ int cpuidle_register_device(struct cpuidle_device *dev)
 	int ret = -EBUSY;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&cpuidle_lock);
 
@@ -543,6 +570,7 @@ EXPORT_SYMBOL_GPL(cpuidle_register_device);
  */
 void cpuidle_unregister_device(struct cpuidle_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev || dev->registered == 0)
 		return;
 
@@ -573,6 +601,7 @@ void cpuidle_unregister(struct cpuidle_driver *drv)
 	int cpu;
 	struct cpuidle_device *device;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_cpu(cpu, drv->cpumask) {
 		device = &per_cpu(cpuidle_dev, cpu);
 		cpuidle_unregister_device(device);
@@ -601,6 +630,7 @@ int cpuidle_register(struct cpuidle_driver *drv,
 
 	ret = cpuidle_register_driver(drv);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to register cpuidle driver\n");
 		return ret;
 	}
@@ -643,6 +673,7 @@ EXPORT_SYMBOL_GPL(cpuidle_register);
 static int cpuidle_latency_notify(struct notifier_block *b,
 		unsigned long l, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	wake_up_all_idle_cpus();
 	return NOTIFY_OK;
 }
@@ -670,11 +701,15 @@ static int __init cpuidle_init(void)
 	int ret;
 
 	if (cpuidle_disabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	ret = cpuidle_add_interface(cpu_subsys.dev_root);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	latency_notifier_init(&cpuidle_latency_notifier);
 
diff --git a/drivers/cpuidle/driver.c b/drivers/cpuidle/driver.c
index dc32f34..99e80ac 100644
--- a/drivers/cpuidle/driver.c
+++ b/drivers/cpuidle/driver.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * driver.c - driver support
  *
@@ -108,6 +110,7 @@ static inline struct cpuidle_driver *__cpuidle_get_cpu_driver(int cpu)
  */
 static inline int __cpuidle_set_driver(struct cpuidle_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpuidle_curr_driver)
 		return -EBUSY;
 
@@ -125,6 +128,7 @@ static inline int __cpuidle_set_driver(struct cpuidle_driver *drv)
  */
 static inline void __cpuidle_unset_driver(struct cpuidle_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (drv == cpuidle_curr_driver)
 		cpuidle_curr_driver = NULL;
 }
@@ -142,6 +146,7 @@ static inline void __cpuidle_unset_driver(struct cpuidle_driver *drv)
  */
 static void cpuidle_setup_broadcast_timer(void *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (arg)
 		tick_broadcast_enable();
 	else
@@ -164,7 +169,9 @@ static void __cpuidle_driver_init(struct cpuidle_driver *drv)
 	 * notifier has to know which driver to assign.
 	 */
 	if (!drv->cpumask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		drv->cpumask = (struct cpumask *)cpu_possible_mask;
+}
 
 	/*
 	 * Look for the timer stop flag in the different states, so that we know
@@ -196,6 +203,7 @@ static int __cpuidle_register_driver(struct cpuidle_driver *drv)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!drv || !drv->state_count)
 		return -EINVAL;
 
@@ -230,6 +238,7 @@ static int __cpuidle_register_driver(struct cpuidle_driver *drv)
  */
 static void __cpuidle_unregister_driver(struct cpuidle_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(drv->refcnt > 0))
 		return;
 
@@ -274,6 +283,7 @@ EXPORT_SYMBOL_GPL(cpuidle_register_driver);
  */
 void cpuidle_unregister_driver(struct cpuidle_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&cpuidle_driver_lock);
 	__cpuidle_unregister_driver(drv);
 	spin_unlock(&cpuidle_driver_lock);
@@ -308,8 +318,11 @@ EXPORT_SYMBOL_GPL(cpuidle_get_driver);
 struct cpuidle_driver *cpuidle_get_cpu_driver(struct cpuidle_device *dev)
 {
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __cpuidle_get_cpu_driver(dev->cpu);
 }
 EXPORT_SYMBOL_GPL(cpuidle_get_cpu_driver);
@@ -330,7 +343,9 @@ struct cpuidle_driver *cpuidle_driver_ref(void)
 
 	drv = cpuidle_get_driver();
 	if (drv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		drv->refcnt++;
+}
 
 	spin_unlock(&cpuidle_driver_lock);
 	return drv;
@@ -349,6 +364,7 @@ void cpuidle_driver_unref(void)
 	spin_lock(&cpuidle_driver_lock);
 
 	drv = cpuidle_get_driver();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (drv && !WARN_ON(drv->refcnt <= 0))
 		drv->refcnt--;
 
diff --git a/drivers/cpuidle/governor.c b/drivers/cpuidle/governor.c
index 4e78263..48c9e4e 100644
--- a/drivers/cpuidle/governor.c
+++ b/drivers/cpuidle/governor.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * governor.c - governor support
  *
@@ -28,8 +30,11 @@ static struct cpuidle_governor * __cpuidle_find_governor(const char *str)
 
 	list_for_each_entry(gov, &cpuidle_governors, governor_list)
 		if (!strncasecmp(str, gov->name, CPUIDLE_NAME_LEN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return gov;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -45,7 +50,9 @@ int cpuidle_switch_governor(struct cpuidle_governor *gov)
 	struct cpuidle_device *dev;
 
 	if (gov == cpuidle_curr_governor)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	cpuidle_uninstall_idle_handler();
 
@@ -63,6 +70,7 @@ int cpuidle_switch_governor(struct cpuidle_governor *gov)
 		printk(KERN_INFO "cpuidle: using governor %s\n", gov->name);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -75,13 +83,18 @@ int cpuidle_register_governor(struct cpuidle_governor *gov)
 	int ret = -EEXIST;
 
 	if (!gov || !gov->select)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (cpuidle_disabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	mutex_lock(&cpuidle_lock);
 	if (__cpuidle_find_governor(gov->name) == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 0;
 		list_add_tail(&gov->governor_list, &cpuidle_governors);
 		if (!cpuidle_curr_governor ||
diff --git a/drivers/cpuidle/governors/ladder.c b/drivers/cpuidle/governors/ladder.c
index ce1a2ff..c3f4f50 100644
--- a/drivers/cpuidle/governors/ladder.c
+++ b/drivers/cpuidle/governors/ladder.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ladder.c - the residency ladder algorithm
  *
diff --git a/drivers/cpuidle/governors/menu.c b/drivers/cpuidle/governors/menu.c
index 48eaf28..dc15476 100644
--- a/drivers/cpuidle/governors/menu.c
+++ b/drivers/cpuidle/governors/menu.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * menu.c - the menu idle governor
  *
@@ -138,6 +140,7 @@ struct menu_device {
 
 static inline int get_loadavg(unsigned long load)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return LOAD_INT(load) * 10 + LOAD_FRAC(load) / 10;
 }
 
@@ -152,7 +155,9 @@ static inline int which_bucket(unsigned int duration, unsigned long nr_iowaiters
 	 * E(duration)|iowait
 	 */
 	if (nr_iowaiters)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bucket = BUCKETS/2;
+}
 
 	if (duration < 10)
 		return bucket;
@@ -282,6 +287,7 @@ static unsigned int get_typical_interval(struct menu_device *data)
  */
 static int menu_select(struct cpuidle_driver *drv, struct cpuidle_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct menu_device *data = this_cpu_ptr(&menu_devices);
 	struct device *device = get_cpu_device(dev->cpu);
 	int latency_req = pm_qos_request(PM_QOS_CPU_DMA_LATENCY);
@@ -393,6 +399,7 @@ static int menu_select(struct cpuidle_driver *drv, struct cpuidle_device *dev)
  */
 static void menu_reflect(struct cpuidle_device *dev, int index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct menu_device *data = this_cpu_ptr(&menu_devices);
 
 	data->last_state_idx = index;
@@ -406,6 +413,7 @@ static void menu_reflect(struct cpuidle_device *dev, int index)
  */
 static void menu_update(struct cpuidle_driver *drv, struct cpuidle_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct menu_device *data = this_cpu_ptr(&menu_devices);
 	int last_idx = data->last_state_idx;
 	struct cpuidle_state *target = &drv->states[last_idx];
@@ -478,6 +486,7 @@ static void menu_update(struct cpuidle_driver *drv, struct cpuidle_device *dev)
 static int menu_enable_device(struct cpuidle_driver *drv,
 				struct cpuidle_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct menu_device *data = &per_cpu(menu_devices, dev->cpu);
 	int i;
 
diff --git a/drivers/cpuidle/sysfs.c b/drivers/cpuidle/sysfs.c
index ae948b1..9fe09ec 100644
--- a/drivers/cpuidle/sysfs.c
+++ b/drivers/cpuidle/sysfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * sysfs.c - sysfs support
  *
@@ -21,6 +23,7 @@
 static unsigned int sysfs_switch;
 static int __init cpuidle_sysfs_setup(char *unused)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_switch = 1;
 	return 1;
 }
@@ -34,6 +37,7 @@ static ssize_t show_available_governors(struct device *dev,
 	struct cpuidle_governor *tmp;
 
 	mutex_lock(&cpuidle_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(tmp, &cpuidle_governors, governor_list) {
 		if (i >= (ssize_t) ((PAGE_SIZE/sizeof(char)) -
 				    CPUIDLE_NAME_LEN - 2))
@@ -57,7 +61,9 @@ static ssize_t show_current_driver(struct device *dev,
 	spin_lock(&cpuidle_driver_lock);
 	drv = cpuidle_get_driver();
 	if (drv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = sprintf(buf, "%s\n", drv->name);
+}
 	else
 		ret = sprintf(buf, "none\n");
 	spin_unlock(&cpuidle_driver_lock);
@@ -73,7 +79,9 @@ static ssize_t show_current_governor(struct device *dev,
 
 	mutex_lock(&cpuidle_lock);
 	if (cpuidle_curr_governor)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = sprintf(buf, "%s\n", cpuidle_curr_governor->name);
+}
 	else
 		ret = sprintf(buf, "none\n");
 	mutex_unlock(&cpuidle_lock);
@@ -90,6 +98,7 @@ static ssize_t store_current_governor(struct device *dev,
 	size_t len = count;
 	struct cpuidle_governor *gov;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!len || len >= sizeof(gov_name))
 		return -EINVAL;
 
@@ -146,7 +155,9 @@ static struct attribute_group cpuidle_attr_group = {
 int cpuidle_add_interface(struct device *dev)
 {
 	if (sysfs_switch)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpuidle_attr_group.attrs = cpuidle_switch_attrs;
+}
 
 	return sysfs_create_group(&dev->kobj, &cpuidle_attr_group);
 }
@@ -156,6 +167,7 @@ int cpuidle_add_interface(struct device *dev)
  */
 void cpuidle_remove_interface(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_remove_group(&dev->kobj, &cpuidle_attr_group);
 }
 
@@ -191,6 +203,7 @@ static ssize_t cpuidle_show(struct kobject *kobj, struct attribute *attr,
 {
 	int ret = -EIO;
 	struct cpuidle_device *dev = to_cpuidle_device(kobj);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpuidle_attr *cattr = attr_to_cpuidleattr(attr);
 
 	if (cattr->show) {
@@ -206,6 +219,7 @@ static ssize_t cpuidle_store(struct kobject *kobj, struct attribute *attr,
 {
 	int ret = -EIO;
 	struct cpuidle_device *dev = to_cpuidle_device(kobj);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpuidle_attr *cattr = attr_to_cpuidleattr(attr);
 
 	if (cattr->store) {
@@ -339,6 +353,7 @@ static ssize_t cpuidle_state_show(struct kobject *kobj, struct attribute *attr,
 				  char * buf)
 {
 	int ret = -EIO;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpuidle_state *state = kobj_to_state(kobj);
 	struct cpuidle_state_usage *state_usage = kobj_to_state_usage(kobj);
 	struct cpuidle_state_attr * cattr = attr_to_stateattr(attr);
@@ -353,6 +368,7 @@ static ssize_t cpuidle_state_store(struct kobject *kobj, struct attribute *attr,
 				   const char *buf, size_t size)
 {
 	int ret = -EIO;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpuidle_state *state = kobj_to_state(kobj);
 	struct cpuidle_state_usage *state_usage = kobj_to_state_usage(kobj);
 	struct cpuidle_state_attr *cattr = attr_to_stateattr(attr);
@@ -370,6 +386,7 @@ static const struct sysfs_ops cpuidle_state_sysfs_ops = {
 
 static void cpuidle_state_sysfs_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpuidle_state_kobj *state_obj = kobj_to_state_obj(kobj);
 
 	complete(&state_obj->kobj_unregister);
@@ -383,6 +400,7 @@ static struct kobj_type ktype_state_cpuidle = {
 
 static inline void cpuidle_free_state_kobj(struct cpuidle_device *device, int i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kobject_put(&device->kobjs[i]->kobj);
 	wait_for_completion(&device->kobjs[i]->kobj_unregister);
 	kfree(device->kobjs[i]);
@@ -435,6 +453,7 @@ static int cpuidle_add_state_sysfs(struct cpuidle_device *device)
  */
 static void cpuidle_remove_state_sysfs(struct cpuidle_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cpuidle_driver *drv = cpuidle_get_cpu_driver(device);
 	int i;
 
@@ -568,6 +587,7 @@ static void cpuidle_remove_driver_sysfs(struct cpuidle_device *dev)
 #else
 static inline int cpuidle_add_driver_sysfs(struct cpuidle_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -587,7 +607,9 @@ int cpuidle_add_device_sysfs(struct cpuidle_device *device)
 
 	ret = cpuidle_add_state_sysfs(device);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = cpuidle_add_driver_sysfs(device);
 	if (ret)
@@ -601,6 +623,7 @@ int cpuidle_add_device_sysfs(struct cpuidle_device *device)
  */
 void cpuidle_remove_device_sysfs(struct cpuidle_device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpuidle_remove_driver_sysfs(device);
 	cpuidle_remove_state_sysfs(device);
 }
@@ -625,7 +648,9 @@ int cpuidle_add_sysfs(struct cpuidle_device *dev)
 	 * value for &cpu_dev->kobj in kobject_init_and_add()
 	 */
 	if (!cpu_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	kdev = kzalloc(sizeof(*kdev), GFP_KERNEL);
 	if (!kdev)
diff --git a/drivers/crypto/padlock-aes.c b/drivers/crypto/padlock-aes.c
index c939f18..204e286 100644
--- a/drivers/crypto/padlock-aes.c
+++ b/drivers/crypto/padlock-aes.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* 
  * Cryptographic API.
  *
diff --git a/drivers/crypto/padlock-sha.c b/drivers/crypto/padlock-sha.c
index bc72d20..d7d1baf 100644
--- a/drivers/crypto/padlock-sha.c
+++ b/drivers/crypto/padlock-sha.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/drivers/dax/device.c b/drivers/dax/device.c
index 7b0bf82..88a8d57 100644
--- a/drivers/dax/device.c
+++ b/drivers/dax/device.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright(c) 2016 - 2017 Intel Corporation. All rights reserved.
  *
diff --git a/drivers/dax/pmem.c b/drivers/dax/pmem.c
index 8d8c852..1876425 100644
--- a/drivers/dax/pmem.c
+++ b/drivers/dax/pmem.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright(c) 2016 Intel Corporation. All rights reserved.
  *
diff --git a/drivers/dax/super.c b/drivers/dax/super.c
index c4cd034..8e7552d 100644
--- a/drivers/dax/super.c
+++ b/drivers/dax/super.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright(c) 2017 Intel Corporation. All rights reserved.
  *
@@ -35,12 +37,14 @@ static DEFINE_SPINLOCK(dax_host_lock);
 
 int dax_read_lock(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return srcu_read_lock(&dax_srcu);
 }
 EXPORT_SYMBOL_GPL(dax_read_lock);
 
 void dax_read_unlock(int id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	srcu_read_unlock(&dax_srcu, id);
 }
 EXPORT_SYMBOL_GPL(dax_read_unlock);
@@ -51,6 +55,7 @@ EXPORT_SYMBOL_GPL(dax_read_unlock);
 int bdev_dax_pgoff(struct block_device *bdev, sector_t sector, size_t size,
 		pgoff_t *pgoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	phys_addr_t phys_off = (get_start_sect(bdev) + sector) * 512;
 
 	if (pgoff)
@@ -92,6 +97,7 @@ int __bdev_dax_supported(struct super_block *sb, int blocksize)
 	long len;
 
 	if (blocksize != PAGE_SIZE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("VFS (%s): error: unsupported blocksize for dax\n",
 				sb->s_id);
 		return -EINVAL;
@@ -156,6 +162,7 @@ struct dax_device {
 static ssize_t write_cache_show(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dax_device *dax_dev = dax_get_by_host(dev_name(dev));
 	ssize_t rc;
 
@@ -176,6 +183,7 @@ static ssize_t write_cache_store(struct device *dev,
 	int rc = strtobool(buf, &write_cache);
 	struct dax_device *dax_dev = dax_get_by_host(dev_name(dev));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(!dax_dev);
 	if (!dax_dev)
 		return -ENXIO;
@@ -194,6 +202,7 @@ static DEVICE_ATTR_RW(write_cache);
 
 static umode_t dax_visible(struct kobject *kobj, struct attribute *a, int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = container_of(kobj, typeof(*dev), kobj);
 	struct dax_device *dax_dev = dax_get_by_host(dev_name(dev));
 
@@ -262,6 +271,7 @@ EXPORT_SYMBOL_GPL(dax_direct_access);
 size_t dax_copy_from_iter(struct dax_device *dax_dev, pgoff_t pgoff, void *addr,
 		size_t bytes, struct iov_iter *i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dax_alive(dax_dev))
 		return 0;
 
@@ -273,6 +283,7 @@ EXPORT_SYMBOL_GPL(dax_copy_from_iter);
 void arch_wb_cache_pmem(void *addr, size_t size);
 void dax_flush(struct dax_device *dax_dev, void *addr, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(!dax_alive(dax_dev)))
 		return;
 
@@ -290,6 +301,7 @@ EXPORT_SYMBOL_GPL(dax_flush);
 
 void dax_write_cache(struct dax_device *dax_dev, bool wc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (wc)
 		set_bit(DAXDEV_WRITE_CACHE, &dax_dev->flags);
 	else
@@ -299,12 +311,14 @@ EXPORT_SYMBOL_GPL(dax_write_cache);
 
 bool dax_write_cache_enabled(struct dax_device *dax_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return test_bit(DAXDEV_WRITE_CACHE, &dax_dev->flags);
 }
 EXPORT_SYMBOL_GPL(dax_write_cache_enabled);
 
 bool dax_alive(struct dax_device *dax_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&dax_srcu);
 	return test_bit(DAXDEV_ALIVE, &dax_dev->flags);
 }
@@ -323,6 +337,7 @@ static int dax_host_hash(const char *host)
  */
 void kill_dax(struct dax_device *dax_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dax_dev)
 		return;
 
@@ -345,7 +360,9 @@ static struct inode *dax_alloc_inode(struct super_block *sb)
 
 	dax_dev = kmem_cache_alloc(dax_cache, GFP_KERNEL);
 	if (!dax_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	inode = &dax_dev->inode;
 	inode->i_rdev = 0;
@@ -359,6 +376,7 @@ static struct dax_device *to_dax_dev(struct inode *inode)
 
 static void dax_i_callback(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = container_of(head, struct inode, i_rcu);
 	struct dax_device *dax_dev = to_dax_dev(inode);
 
@@ -371,6 +389,7 @@ static void dax_i_callback(struct rcu_head *head)
 
 static void dax_destroy_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dax_device *dax_dev = to_dax_dev(inode);
 
 	WARN_ONCE(test_bit(DAXDEV_ALIVE, &dax_dev->flags),
@@ -421,8 +440,11 @@ static struct dax_device *dax_dev_get(dev_t devt)
 			dax_test, dax_set, &devt);
 
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dax_dev = to_dax_dev(inode);
 	if (inode->i_state & I_NEW) {
 		set_bit(DAXDEV_ALIVE, &dax_dev->flags);
@@ -433,6 +455,7 @@ static struct dax_device *dax_dev_get(dev_t devt)
 		unlock_new_inode(inode);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dax_dev;
 }
 
@@ -447,7 +470,9 @@ static void dax_add_host(struct dax_device *dax_dev, const char *host)
 	INIT_HLIST_NODE(&dax_dev->list);
 	dax_dev->host = host;
 	if (!host)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	hash = dax_host_hash(host);
 	spin_lock(&dax_host_lock);
@@ -465,7 +490,9 @@ struct dax_device *alloc_dax(void *private, const char *__host,
 
 	host = kstrdup(__host, GFP_KERNEL);
 	if (__host && !host)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	minor = ida_simple_get(&dax_minor_ida, 0, MINORMASK+1, GFP_KERNEL);
 	if (minor < 0)
@@ -491,6 +518,7 @@ EXPORT_SYMBOL_GPL(alloc_dax);
 
 void put_dax(struct dax_device *dax_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dax_dev)
 		return;
 	iput(&dax_dev->inode);
@@ -507,7 +535,9 @@ struct dax_device *dax_get_by_host(const char *host)
 	int hash, id;
 
 	if (!host)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	hash = dax_host_hash(host);
 
@@ -540,18 +570,21 @@ struct dax_device *inode_dax(struct inode *inode)
 {
 	struct cdev *cdev = inode->i_cdev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return container_of(cdev, struct dax_device, cdev);
 }
 EXPORT_SYMBOL_GPL(inode_dax);
 
 struct inode *dax_inode(struct dax_device *dax_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &dax_dev->inode;
 }
 EXPORT_SYMBOL_GPL(dax_inode);
 
 void *dax_get_private(struct dax_device *dax_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dax_dev->private;
 }
 EXPORT_SYMBOL_GPL(dax_get_private);
@@ -574,7 +607,9 @@ static int __dax_fs_init(void)
 			 SLAB_MEM_SPREAD|SLAB_ACCOUNT),
 			init_once);
 	if (!dax_cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	rc = register_filesystem(&dax_fs_type);
 	if (rc)
@@ -582,6 +617,7 @@ static int __dax_fs_init(void)
 
 	dax_mnt = kern_mount(&dax_fs_type);
 	if (IS_ERR(dax_mnt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = PTR_ERR(dax_mnt);
 		goto err_mount;
 	}
@@ -599,6 +635,7 @@ static int __dax_fs_init(void)
 
 static void __dax_fs_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kern_unmount(dax_mnt);
 	unregister_filesystem(&dax_fs_type);
 	kmem_cache_destroy(dax_cache);
@@ -610,16 +647,22 @@ static int __init dax_fs_init(void)
 
 	rc = __dax_fs_init();
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	rc = alloc_chrdev_region(&dax_devt, 0, MINORMASK+1, "dax");
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__dax_fs_exit();
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 }
 
 static void __exit dax_fs_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_chrdev_region(dax_devt, MINORMASK+1);
 	ida_destroy(&dax_minor_ida);
 	__dax_fs_exit();
diff --git a/drivers/devfreq/devfreq.c b/drivers/devfreq/devfreq.c
index 202476f..5ac4421 100644
--- a/drivers/devfreq/devfreq.c
+++ b/drivers/devfreq/devfreq.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * devfreq: Generic Dynamic Voltage and Frequency Scaling (DVFS) Framework
  *	    for Non-CPU Devices.
diff --git a/drivers/devfreq/governor_simpleondemand.c b/drivers/devfreq/governor_simpleondemand.c
index ae72ba5..d55abe4 100644
--- a/drivers/devfreq/governor_simpleondemand.c
+++ b/drivers/devfreq/governor_simpleondemand.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/drivers/devfreq/governor_simpleondemand.c
  *
diff --git a/drivers/firmware/dmi-id.c b/drivers/firmware/dmi-id.c
index 951b6c7..916277d 100644
--- a/drivers/firmware/dmi-id.c
+++ b/drivers/firmware/dmi-id.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Export SMBIOS/DMI info via sysfs to userspace
  *
@@ -24,6 +26,7 @@ static ssize_t sys_dmi_field_show(struct device *dev,
 				  struct device_attribute *attr,
 				  char *page)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int field = to_dmi_dev_attr(attr)->field;
 	ssize_t len;
 	len = scnprintf(page, PAGE_SIZE, "%s\n", dmi_get_system_info(field));
@@ -151,11 +154,15 @@ static int dmi_dev_uevent(struct device *dev, struct kobj_uevent_env *env)
 	ssize_t len;
 
 	if (add_uevent_var(env, "MODALIAS="))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	len = get_modalias(&env->buf[env->buflen - 1],
 			   sizeof(env->buf) - env->buflen);
 	if (len >= (sizeof(env->buf) - env->buflen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	env->buflen += len;
 	return 0;
 }
@@ -211,16 +218,21 @@ static int __init dmi_id_init(void)
 	int ret;
 
 	if (!dmi_available)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	dmi_id_init_attr_table();
 
 	ret = class_register(&dmi_class);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	dmi_dev = kzalloc(sizeof(*dmi_dev), GFP_KERNEL);
 	if (!dmi_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOMEM;
 		goto fail_class_unregister;
 	}
@@ -233,6 +245,7 @@ static int __init dmi_id_init(void)
 	if (ret)
 		goto fail_put_dmi_dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 fail_put_dmi_dev:
diff --git a/drivers/firmware/dmi-sysfs.c b/drivers/firmware/dmi-sysfs.c
index d5de6ee..0193cce 100644
--- a/drivers/firmware/dmi-sysfs.c
+++ b/drivers/firmware/dmi-sysfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * dmi-sysfs.c
  *
diff --git a/drivers/firmware/dmi_scan.c b/drivers/firmware/dmi_scan.c
index 7830419..de6486b 100644
--- a/drivers/firmware/dmi_scan.c
+++ b/drivers/firmware/dmi_scan.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/types.h>
 #include <linux/string.h>
 #include <linux/init.h>
@@ -903,8 +905,11 @@ int dmi_name_in_vendors(const char *str)
 	for (i = 0; fields[i] != DMI_NONE; i++) {
 		int f = fields[i];
 		if (dmi_ident[f] && strstr(dmi_ident[f], str))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(dmi_name_in_vendors);
@@ -931,11 +936,13 @@ const struct dmi_device *dmi_find_device(int type, const char *name,
 		const struct dmi_device *dev =
 			list_entry(d, struct dmi_device, list);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (((type == DMI_DEV_TYPE_ANY) || (dev->type == type)) &&
 		    ((name == NULL) || (strcmp(dev->name, name) == 0)))
 			return dev;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(dmi_find_device);
@@ -983,16 +990,22 @@ bool dmi_get_date(int field, int *yearp, int *monthp, int *dayp)
 	y++;
 	year = simple_strtoul(y, &e, 10);
 	if (y != e && year < 100) {	/* 2-digit year */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		year += 1900;
 		if (year < 1996)	/* no dates < spec 1.0 */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			year += 100;
+}
 	}
 	if (year > 9999)		/* year should fit in %04d */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		year = 0;
+}
 
 	/* parse the mm and dd */
 	month = simple_strtoul(s, &e, 10);
 	if (s == e || *e != '/' || !month || month > 12) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		month = 0;
 		goto out;
 	}
@@ -1000,14 +1013,20 @@ bool dmi_get_date(int field, int *yearp, int *monthp, int *dayp)
 	s = e + 1;
 	day = simple_strtoul(s, &e, 10);
 	if (s == y || s == e || *e != '/' || day > 31)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		day = 0;
+}
 out:
 	if (yearp)
 		*yearp = year;
 	if (monthp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*monthp = month;
+}
 	if (dayp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*dayp = day;
+}
 	return exists;
 }
 EXPORT_SYMBOL(dmi_get_date);
@@ -1026,11 +1045,15 @@ int dmi_walk(void (*decode)(const struct dmi_header *, void *),
 	u8 *buf;
 
 	if (!dmi_available)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	buf = dmi_remap(dmi_base, dmi_len);
 	if (buf == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	dmi_decode_table(buf, decode, private_data);
 
@@ -1051,7 +1074,9 @@ bool dmi_match(enum dmi_field f, const char *str)
 	const char *info = dmi_get_system_info(f);
 
 	if (info == NULL || str == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return info == str;
+}
 
 	return !strcmp(info, str);
 }
@@ -1062,7 +1087,9 @@ void dmi_memdev_name(u16 handle, const char **bank, const char **device)
 	int n;
 
 	if (dmi_memdev == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for (n = 0; n < dmi_memdev_nr; n++) {
 		if (handle == dmi_memdev[n].handle) {
diff --git a/drivers/firmware/efi/capsule.c b/drivers/firmware/efi/capsule.c
index 901b930..4ecd4c3 100644
--- a/drivers/firmware/efi/capsule.c
+++ b/drivers/firmware/efi/capsule.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * EFI capsule support.
  *
@@ -92,7 +94,9 @@ int efi_capsule_supported(efi_guid_t guid, u32 flags, size_t size, int *reset)
 	u64 max_size;
 
 	if (flags & ~EFI_CAPSULE_SUPPORTED_FLAG_MASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	capsule.headersize = capsule.imagesize = sizeof(capsule);
 	memcpy(&capsule.guid, &guid, sizeof(efi_guid_t));
@@ -122,6 +126,7 @@ EXPORT_SYMBOL_GPL(efi_capsule_supported);
  */
 static inline unsigned int sg_pages_num(unsigned int count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return DIV_ROUND_UP(count, SGLIST_PER_PAGE);
 }
 
@@ -147,6 +152,7 @@ efi_capsule_update_locked(efi_capsule_header_t *capsule,
 	efi_physical_addr_t sglist_phys;
 	efi_status_t status;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&capsule_mutex);
 
 	/*
@@ -226,7 +232,9 @@ int efi_capsule_update(efi_capsule_header_t *capsule, phys_addr_t *pages)
 
 	rv = efi_capsule_supported(guid, flags, imagesize, &reset_type);
 	if (rv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rv;
+}
 
 	count = DIV_ROUND_UP(imagesize, PAGE_SIZE);
 	sg_count = sg_pages_num(count);
@@ -287,6 +295,7 @@ EXPORT_SYMBOL_GPL(efi_capsule_update);
 
 static int capsule_reboot_notify(struct notifier_block *nb, unsigned long event, void *cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&capsule_mutex);
 	stop_capsules = true;
 	mutex_unlock(&capsule_mutex);
diff --git a/drivers/firmware/efi/efi-pstore.c b/drivers/firmware/efi/efi-pstore.c
index 5a0fa93..4a9e9cf 100644
--- a/drivers/firmware/efi/efi-pstore.c
+++ b/drivers/firmware/efi/efi-pstore.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/efi.h>
 #include <linux/module.h>
 #include <linux/pstore.h>
diff --git a/drivers/firmware/efi/efi.c b/drivers/firmware/efi/efi.c
index c3eefa1..7fc8c32 100644
--- a/drivers/firmware/efi/efi.c
+++ b/drivers/firmware/efi/efi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * efi.c - EFI subsystem
  *
@@ -77,6 +79,7 @@ static unsigned long *efi_tables[] = {
 static bool disable_runtime;
 static int __init setup_noefi(char *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	disable_runtime = true;
 	return 0;
 }
@@ -84,11 +87,13 @@ early_param("noefi", setup_noefi);
 
 bool efi_runtime_disabled(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return disable_runtime;
 }
 
 static int __init parse_efi_cmdline(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!str) {
 		pr_warn("need at least one option\n");
 		return -EINVAL;
@@ -115,6 +120,7 @@ static ssize_t systab_show(struct kobject *kobj,
 {
 	char *str = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!kobj || !buf)
 		return -EINVAL;
 
@@ -161,6 +167,7 @@ EFI_ATTR_SHOW(config_table);
 static ssize_t fw_platform_size_show(struct kobject *kobj,
 				     struct kobj_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", efi_enabled(EFI_64BIT) ? 64 : 32);
 }
 
@@ -182,6 +189,7 @@ static struct attribute *efi_subsys_attrs[] = {
 static umode_t efi_attr_is_visible(struct kobject *kobj,
 				   struct attribute *attr, int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (attr == &efi_attr_fw_vendor.attr) {
 		if (efi_enabled(EFI_PARAVIRT) ||
 				efi.fw_vendor == EFI_INVALID_TABLE_ADDR)
@@ -207,6 +215,7 @@ static struct efivar_operations generic_ops;
 
 static int generic_ops_register(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	generic_ops.get_variable = efi.get_variable;
 	generic_ops.set_variable = efi.set_variable;
 	generic_ops.set_variable_nonblocking = efi.set_variable_nonblocking;
@@ -218,6 +227,7 @@ static int generic_ops_register(void)
 
 static void generic_ops_unregister(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	efivars_unregister(&generic_efivars);
 }
 
@@ -226,6 +236,7 @@ static void generic_ops_unregister(void)
 static char efivar_ssdt[EFIVAR_SSDT_NAME_MAX] __initdata;
 static int __init efivar_ssdt_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (strlen(str) < sizeof(efivar_ssdt))
 		memcpy(efivar_ssdt, str, strlen(str));
 	else
@@ -240,6 +251,7 @@ static __init int efivar_ssdt_iter(efi_char16_t *name, efi_guid_t vendor,
 	struct efivar_entry *entry;
 	struct list_head *list = data;
 	char utf8_name[EFIVAR_SSDT_NAME_MAX];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int limit = min_t(unsigned long, EFIVAR_SSDT_NAME_MAX, name_size);
 
 	ucs2_as_utf8(utf8_name, name, limit - 1);
@@ -268,6 +280,7 @@ static __init int efivar_ssdt_load(void)
 
 	ret = efivar_init(efivar_ssdt_iter, &entries, true, &entries);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(entry, aux, &entries, list) {
 		pr_info("loading SSDT from variable %s-%pUl\n", efivar_ssdt,
 			&entry->var.VendorGuid);
@@ -323,29 +336,39 @@ static int __init efisubsys_init(void)
 	int error;
 
 	if (!efi_enabled(EFI_BOOT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* We register the efi directory at /sys/firmware/efi */
 	efi_kobj = kobject_create_and_add("efi", firmware_kobj);
 	if (!efi_kobj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("efi: Firmware registration failed.\n");
 		return -ENOMEM;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = generic_ops_register();
 	if (error)
 		goto err_put;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (efi_enabled(EFI_RUNTIME_SERVICES))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		efivar_ssdt_load();
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = sysfs_create_group(efi_kobj, &efi_subsys_attr_group);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("efi: Sysfs attribute export failed with error %d.\n",
 		       error);
 		goto err_unregister;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = efi_runtime_map_init(efi_kobj);
 	if (error)
 		goto err_remove_group;
@@ -353,10 +376,12 @@ static int __init efisubsys_init(void)
 	/* and the standard mountpoint for efivarfs */
 	error = sysfs_create_mount_point(efi_kobj, "efivars");
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("efivars: Subsystem registration failed.\n");
 		goto err_remove_group;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_remove_group:
@@ -381,6 +406,7 @@ int __init efi_mem_desc_lookup(u64 phys_addr, efi_memory_desc_t *out_md)
 	efi_memory_desc_t *md;
 
 	if (!efi_enabled(EFI_MEMMAP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err_once("EFI_MEMMAP is not enabled.\n");
 		return -EINVAL;
 	}
@@ -436,6 +462,7 @@ void __init __weak efi_arch_mem_reserve(phys_addr_t addr, u64 size) {}
  */
 void __init efi_mem_reserve(phys_addr_t addr, u64 size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!memblock_is_region_reserved(addr, size))
 		memblock_reserve(addr, size);
 
@@ -472,6 +499,7 @@ static __init int match_config_table(efi_guid_t *guid,
 	int i;
 
 	if (table_types) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; efi_guidcmp(table_types[i].guid, NULL_GUID); i++) {
 			if (!efi_guidcmp(*guid, table_types[i].guid)) {
 				*(table_types[i].ptr) = table;
@@ -494,6 +522,7 @@ int __init efi_config_parse_tables(void *config_tables, int count, int sz,
 
 	tablep = config_tables;
 	pr_info("");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < count; i++) {
 		efi_guid_t guid;
 		unsigned long table;
@@ -576,7 +605,9 @@ int __init efi_config_init(efi_config_table_type_t *arch_tables)
 	int sz, ret;
 
 	if (efi_enabled(EFI_64BIT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sz = sizeof(efi_config_table_64_t);
+}
 	else
 		sz = sizeof(efi_config_table_32_t);
 
@@ -772,7 +803,9 @@ char * __init efi_md_typeattr_format(char *buf, size_t size,
 
 	pos = buf;
 	if (md->type >= ARRAY_SIZE(memory_type_name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type_len = snprintf(pos, size, "[type=%u", md->type);
+}
 	else
 		type_len = snprintf(pos, size, "[%-*s",
 				    (int)(sizeof(memory_type_name[0]) - 1),
@@ -827,7 +860,9 @@ u64 efi_mem_attributes(unsigned long phys_addr)
 	efi_memory_desc_t *md;
 
 	if (!efi_enabled(EFI_MEMMAP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	for_each_efi_memory_desc(md) {
 		if ((md->phys_addr <= phys_addr) &&
@@ -851,7 +886,9 @@ int efi_mem_type(unsigned long phys_addr)
 	const efi_memory_desc_t *md;
 
 	if (!efi_enabled(EFI_MEMMAP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTSUPP;
+}
 
 	for_each_efi_memory_desc(md) {
 		if ((md->phys_addr <= phys_addr) &&
@@ -904,7 +941,9 @@ bool efi_is_table_address(unsigned long phys_addr)
 	unsigned int i;
 
 	if (phys_addr == EFI_INVALID_TABLE_ADDR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	for (i = 0; i < ARRAY_SIZE(efi_tables); i++)
 		if (*(efi_tables[i]) == phys_addr)
@@ -921,7 +960,9 @@ static int update_efi_random_seed(struct notifier_block *nb,
 	u32 size = 0;
 
 	if (!kexec_in_progress)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NOTIFY_DONE;
+}
 
 	seed = memremap(efi.rng_seed, sizeof(*seed), MEMREMAP_WB);
 	if (seed != NULL) {
@@ -950,6 +991,7 @@ static struct notifier_block efi_random_seed_nb = {
 
 static int register_update_efi_random_seed(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (efi.rng_seed == EFI_INVALID_TABLE_ADDR)
 		return 0;
 	return register_reboot_notifier(&efi_random_seed_nb);
diff --git a/drivers/firmware/efi/efivars.c b/drivers/firmware/efi/efivars.c
index 3e626fd..e03f177e 100644
--- a/drivers/firmware/efi/efivars.c
+++ b/drivers/firmware/efi/efivars.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Originally from efivars.c,
  *
@@ -125,6 +127,7 @@ efivar_guid_read(struct efivar_entry *entry, char *buf)
 	struct efi_variable *var = &entry->var;
 	char *str = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!entry || !buf)
 		return 0;
 
@@ -141,6 +144,7 @@ efivar_attr_read(struct efivar_entry *entry, char *buf)
 	struct efi_variable *var = &entry->var;
 	char *str = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!entry || !buf)
 		return -EINVAL;
 
@@ -174,6 +178,7 @@ efivar_size_read(struct efivar_entry *entry, char *buf)
 	struct efi_variable *var = &entry->var;
 	char *str = buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!entry || !buf)
 		return -EINVAL;
 
@@ -190,6 +195,7 @@ efivar_data_read(struct efivar_entry *entry, char *buf)
 {
 	struct efi_variable *var = &entry->var;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!entry || !buf)
 		return -EINVAL;
 
@@ -231,6 +237,7 @@ sanity_check(struct efi_variable *var, efi_char16_t *name, efi_guid_t vendor,
 
 static inline bool is_compat(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ENABLED(CONFIG_COMPAT) && in_compat_syscall())
 		return true;
 
@@ -240,6 +247,7 @@ static inline bool is_compat(void)
 static void
 copy_out_compat(struct efi_variable *dst, struct compat_efi_variable *src)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(dst->VariableName, src->VariableName, EFI_VAR_NAME_LEN);
 	memcpy(dst->Data, src->Data, sizeof(src->Data));
 
@@ -267,7 +275,9 @@ efivar_store_raw(struct efivar_entry *entry, const char *buf, size_t count)
 		struct compat_efi_variable *compat;
 
 		if (count != sizeof(*compat))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
 		compat = (struct compat_efi_variable *)buf;
 		attributes = compat->Attributes;
@@ -316,6 +326,7 @@ efivar_show_raw(struct efivar_entry *entry, char *buf)
 	struct compat_efi_variable *compat;
 	size_t size;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!entry || !buf)
 		return 0;
 
@@ -350,6 +361,7 @@ efivar_show_raw(struct efivar_entry *entry, char *buf)
 static ssize_t efivar_attr_show(struct kobject *kobj, struct attribute *attr,
 				char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct efivar_entry *var = to_efivar_entry(kobj);
 	struct efivar_attribute *efivar_attr = to_efivar_attr(attr);
 	ssize_t ret = -EIO;
@@ -366,6 +378,7 @@ static ssize_t efivar_attr_show(struct kobject *kobj, struct attribute *attr,
 static ssize_t efivar_attr_store(struct kobject *kobj, struct attribute *attr,
 				const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct efivar_entry *var = to_efivar_entry(kobj);
 	struct efivar_attribute *efivar_attr = to_efivar_attr(attr);
 	ssize_t ret = -EIO;
@@ -386,6 +399,7 @@ static const struct sysfs_ops efivar_attr_ops = {
 
 static void efivar_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct efivar_entry *var = to_efivar_entry(kobj);
 	kfree(var);
 }
@@ -426,7 +440,9 @@ static ssize_t efivar_create(struct file *filp, struct kobject *kobj,
 	int err;
 
 	if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;
+}
 
 	if (need_compat) {
 		if (count != sizeof(*compat))
@@ -493,7 +509,9 @@ static ssize_t efivar_delete(struct file *filp, struct kobject *kobj,
 	int err = 0;
 
 	if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;
+}
 
 	if (is_compat()) {
 		if (count != sizeof(*compat))
@@ -557,7 +575,9 @@ efivar_create_sysfs_entry(struct efivar_entry *new_var)
 
 	short_name = kmalloc(short_name_size, GFP_KERNEL);
 	if (!short_name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ucs2_as_utf8(short_name, variable_name, short_name_size);
 
@@ -593,7 +613,9 @@ create_efivars_bin_attributes(void)
 	/* new_var */
 	attr = kzalloc(sizeof(*attr), GFP_KERNEL);
 	if (!attr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	attr->attr.name = "new_var";
 	attr->attr.mode = 0200;
@@ -645,7 +667,9 @@ static int efivar_update_sysfs_entry(efi_char16_t *name, efi_guid_t vendor,
 	struct efivar_entry *entry = data;
 
 	if (efivar_entry_find(name, vendor, &efivar_sysfs_list, false))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	memcpy(entry->var.VariableName, name, name_size);
 	memcpy(&(entry->var.VendorGuid), &vendor, sizeof(efi_guid_t));
@@ -682,7 +706,9 @@ static int efivars_sysfs_callback(efi_char16_t *name, efi_guid_t vendor,
 
 	entry = kzalloc(sizeof(*entry), GFP_KERNEL);
 	if (!entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	memcpy(entry->var.VariableName, name, name_size);
 	memcpy(&(entry->var.VendorGuid), &vendor, sizeof(efi_guid_t));
@@ -694,6 +720,7 @@ static int efivars_sysfs_callback(efi_char16_t *name, efi_guid_t vendor,
 
 static int efivar_sysfs_destroy(struct efivar_entry *entry, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int err = efivar_entry_remove(entry);
 
 	if (err)
@@ -710,6 +737,7 @@ static void efivars_sysfs_exit(void)
 	err = __efivar_entry_iter(efivar_sysfs_destroy, &efivar_sysfs_list,
 				  NULL, NULL);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("efivars: Failed to destroy sysfs entries\n");
 		return;
 	}
@@ -729,31 +757,41 @@ int efivars_sysfs_init(void)
 	int error = 0;
 
 	if (!efi_enabled(EFI_RUNTIME_SERVICES))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* No efivars has been registered yet */
 	if (!parent_kobj)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	printk(KERN_INFO "EFI Variables Facility v%s %s\n", EFIVARS_VERSION,
 	       EFIVARS_DATE);
 
 	efivars_kset = kset_create_and_add("vars", NULL, parent_kobj);
 	if (!efivars_kset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "efivars: Subsystem registration failed.\n");
 		return -ENOMEM;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	efivar_init(efivars_sysfs_callback, NULL, true, &efivar_sysfs_list);
 
 	error = create_efivars_bin_attributes();
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		efivars_sysfs_exit();
 		return error;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_WORK(&efivar_work, efivar_update_sysfs_entries);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL_GPL(efivars_sysfs_init);
diff --git a/drivers/firmware/efi/esrt.c b/drivers/firmware/efi/esrt.c
index c47e0c6..5f7cd96 100644
--- a/drivers/firmware/efi/esrt.c
+++ b/drivers/firmware/efi/esrt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * esrt.c
  *
@@ -80,17 +82,20 @@ struct esre_attribute {
 
 static struct esre_entry *to_entry(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return container_of(kobj, struct esre_entry, kobj);
 }
 
 static struct esre_attribute *to_attr(struct attribute *attr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return container_of(attr, struct esre_attribute, attr);
 }
 
 static ssize_t esre_attr_show(struct kobject *kobj,
 			      struct attribute *_attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct esre_entry *entry = to_entry(kobj);
 	struct esre_attribute *attr = to_attr(_attr);
 
@@ -147,6 +152,7 @@ static struct attribute *esre1_attrs[] = {
 };
 static void esre_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct esre_entry *entry = to_entry(kobj);
 
 	list_del(&entry->list);
@@ -169,7 +175,9 @@ static int esre_create_sysfs_entry(void *esre, int entry_num)
 
 	entry = kzalloc(sizeof(*entry), GFP_KERNEL);
 	if (!entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	entry->kobj.kset = esrt_kset;
 
@@ -212,6 +220,7 @@ static struct attribute *esrt_attrs[] = {
 
 static inline int esrt_table_exists(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!efi_enabled(EFI_CONFIG_TABLES))
 		return 0;
 	if (efi.esrt == EFI_INVALID_TABLE_ADDR)
@@ -222,6 +231,7 @@ static inline int esrt_table_exists(void)
 static umode_t esrt_attr_is_visible(struct kobject *kobj,
 				    struct attribute *attr, int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!esrt_table_exists())
 		return 0;
 	return attr->mode;
@@ -245,6 +255,7 @@ void __init efi_esrt_init(void)
 	int rc;
 	phys_addr_t end;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("esrt-init: loading.\n");
 	if (!esrt_table_exists())
 		return;
@@ -346,7 +357,9 @@ static int __init register_entries(void)
 	int i, rc;
 
 	if (!esrt_table_exists())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	for (i = 0; i < le32_to_cpu(esrt->fw_resource_count); i++) {
 		void *esre = NULL;
@@ -372,6 +385,7 @@ static void cleanup_entry_list(void)
 {
 	struct esre_entry *entry, *next;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(entry, next, &entry_list, list) {
 		kobject_put(&entry->kobj);
 	}
@@ -381,42 +395,55 @@ static int __init esrt_sysfs_init(void)
 {
 	int error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("esrt-sysfs: loading.\n");
 	if (!esrt_data || !esrt_data_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSYS;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	esrt = memremap(esrt_data, esrt_data_size, MEMREMAP_WB);
 	if (!esrt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("memremap(%pa, %zu) failed.\n", &esrt_data,
 		       esrt_data_size);
 		return -ENOMEM;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	esrt_kobj = kobject_create_and_add("esrt", efi_kobj);
 	if (!esrt_kobj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Firmware table registration failed.\n");
 		error = -ENOMEM;
 		goto err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = sysfs_create_group(esrt_kobj, &esrt_attr_group);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Sysfs attribute export failed with error %d.\n",
 		       error);
 		goto err_remove_esrt;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	esrt_kset = kset_create_and_add("entries", NULL, esrt_kobj);
 	if (!esrt_kset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("kset creation failed.\n");
 		error = -ENOMEM;
 		goto err_remove_group;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = register_entries();
 	if (error)
 		goto err_cleanup_list;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("esrt-sysfs: loaded.\n");
 
 	return 0;
diff --git a/drivers/firmware/efi/reboot.c b/drivers/firmware/efi/reboot.c
index 7effff9..d3bcbc0 100644
--- a/drivers/firmware/efi/reboot.c
+++ b/drivers/firmware/efi/reboot.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * Copyright (C) 2014 Intel Corporation; author Matt Fleming
@@ -16,7 +18,9 @@ void efi_reboot(enum reboot_mode reboot_mode, const char *__unused)
 	int efi_mode, cap_reset_mode;
 
 	if (!efi_enabled(EFI_RUNTIME_SERVICES))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	switch (reboot_mode) {
 	case REBOOT_WARM:
@@ -48,11 +52,13 @@ void efi_reboot(enum reboot_mode reboot_mode, const char *__unused)
 
 bool __weak efi_poweroff_required(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
 static void efi_power_off(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	efi.reset_system(EFI_RESET_SHUTDOWN, EFI_SUCCESS, 0, NULL);
 	/*
 	 * The above call should not return, if it does fall back to
@@ -65,13 +71,18 @@ static void efi_power_off(void)
 static int __init efi_shutdown_init(void)
 {
 	if (!efi_enabled(EFI_RUNTIME_SERVICES))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (efi_poweroff_required()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		orig_pm_power_off = pm_power_off;
 		pm_power_off = efi_power_off;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 late_initcall(efi_shutdown_init);
diff --git a/drivers/firmware/efi/vars.c b/drivers/firmware/efi/vars.c
index 9336ffd..7b87495 100644
--- a/drivers/firmware/efi/vars.c
+++ b/drivers/firmware/efi/vars.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Originally from efivars.c
  *
@@ -59,7 +61,9 @@ validate_device_path(efi_char16_t *var_name, int match, u8 *buffer,
 	node = (struct efi_generic_dev_path *)buffer;
 
 	if (len < sizeof(*node))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	while (offset <= len - sizeof(*node) &&
 	       node->length >= sizeof(*node) &&
@@ -161,6 +165,7 @@ validate_ascii_string(efi_char16_t *var_name, int match, u8 *buffer,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < len; i++) {
 		if (buffer[i] > 127)
 			return false;
@@ -225,6 +230,7 @@ static bool
 variable_matches(const char *var_name, size_t len, const char *match_name,
 		 int *match)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (*match = 0; ; (*match)++) {
 		char c = match_name[*match];
 
@@ -261,7 +267,9 @@ efivar_validate(efi_guid_t vendor, efi_char16_t *var_name, u8 *data,
 	utf8_size = ucs2_utf8size(var_name);
 	utf8_name = kmalloc(utf8_size + 1, GFP_KERNEL);
 	if (!utf8_name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	ucs2_as_utf8(utf8_name, var_name, utf8_size);
 	utf8_name[utf8_size] = '\0';
@@ -321,7 +329,9 @@ check_var_size(u32 attributes, unsigned long size)
 	const struct efivar_operations *fops = __efivars->ops;
 
 	if (!fops->query_variable_store)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return EFI_UNSUPPORTED;
+}
 
 	return fops->query_variable_store(attributes, size, false);
 }
@@ -332,7 +342,9 @@ check_var_size_nonblocking(u32 attributes, unsigned long size)
 	const struct efivar_operations *fops = __efivars->ops;
 
 	if (!fops->query_variable_store)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return EFI_UNSUPPORTED;
+}
 
 	return fops->query_variable_store(attributes, size, true);
 }
@@ -345,6 +357,7 @@ static bool variable_is_present(efi_char16_t *variable_name, efi_guid_t *vendor,
 	bool found = false;
 
 	strsize1 = ucs2_strsize(variable_name, 1024);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(entry, n, head, list) {
 		strsize2 = ucs2_strsize(entry->var.VariableName, 1024);
 		if (strsize1 == strsize2 &&
@@ -403,7 +416,9 @@ static void dup_variable_bug(efi_char16_t *str16, efi_guid_t *vendor_guid,
 
 	str8 = kzalloc(len8, GFP_KERNEL);
 	if (!str8)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for (i = 0; i < len8; i++)
 		str8[i] = str16[i];
@@ -438,6 +453,7 @@ int efivar_init(int (*func)(efi_char16_t *, efi_guid_t, unsigned long, void *),
 
 	variable_name = kzalloc(variable_name_size, GFP_KERNEL);
 	if (!variable_name) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "efivars: Memory allocation failed.\n");
 		return -ENOMEM;
 	}
@@ -523,6 +539,7 @@ EXPORT_SYMBOL_GPL(efivar_init);
  */
 int efivar_entry_add(struct efivar_entry *entry, struct list_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (down_interruptible(&efivars_lock))
 		return -EINTR;
 	list_add(&entry->list, head);
@@ -540,6 +557,7 @@ EXPORT_SYMBOL_GPL(efivar_entry_add);
  */
 int efivar_entry_remove(struct efivar_entry *entry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (down_interruptible(&efivars_lock))
 		return -EINTR;
 	list_del(&entry->list);
@@ -562,6 +580,7 @@ EXPORT_SYMBOL_GPL(efivar_entry_remove);
  */
 static void efivar_entry_list_del_unlock(struct efivar_entry *entry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_del(&entry->list);
 	up(&efivars_lock);
 }
@@ -611,7 +630,9 @@ int efivar_entry_delete(struct efivar_entry *entry)
 	efi_status_t status;
 
 	if (down_interruptible(&efivars_lock))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINTR;
+}
 
 	status = ops->set_variable(entry->var.VariableName,
 				   &entry->var.VendorGuid,
@@ -656,7 +677,9 @@ int efivar_entry_set(struct efivar_entry *entry, u32 attributes,
 	efi_guid_t vendor = entry->var.VendorGuid;
 
 	if (down_interruptible(&efivars_lock))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINTR;
+}
 	if (head && efivar_entry_find(name, vendor, head, false)) {
 		up(&efivars_lock);
 		return -EEXIST;
@@ -691,7 +714,9 @@ efivar_entry_set_nonblocking(efi_char16_t *name, efi_guid_t vendor,
 	efi_status_t status;
 
 	if (down_trylock(&efivars_lock))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	status = check_var_size_nonblocking(attributes,
 					    size + ucs2_strsize(name, 1024));
@@ -731,7 +756,9 @@ int efivar_entry_set_safe(efi_char16_t *name, efi_guid_t vendor, u32 attributes,
 	efi_status_t status;
 
 	if (!ops->query_variable_store)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSYS;
+}
 
 	/*
 	 * If the EFI variable backend provides a non-blocking
@@ -793,6 +820,7 @@ struct efivar_entry *efivar_entry_find(efi_char16_t *name, efi_guid_t guid,
 	int strsize1, strsize2;
 	bool found = false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(entry, n, head, list) {
 		strsize1 = ucs2_strsize(name, 1024);
 		strsize2 = ucs2_strsize(entry->var.VariableName, 1024);
@@ -835,7 +863,9 @@ int efivar_entry_size(struct efivar_entry *entry, unsigned long *size)
 	*size = 0;
 
 	if (down_interruptible(&efivars_lock))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINTR;
+}
 	status = ops->get_variable(entry->var.VariableName,
 				   &entry->var.VendorGuid, NULL, size, NULL);
 	up(&efivars_lock);
@@ -886,7 +916,9 @@ int efivar_entry_get(struct efivar_entry *entry, u32 *attributes,
 	efi_status_t status;
 
 	if (down_interruptible(&efivars_lock))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINTR;
+}
 	status = ops->get_variable(entry->var.VariableName,
 				   &entry->var.VendorGuid,
 				   attributes, size, data);
@@ -930,7 +962,9 @@ int efivar_entry_set_get_size(struct efivar_entry *entry, u32 attributes,
 	*set = false;
 
 	if (efivar_validate(*vendor, name, data, *size) == false)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/*
 	 * The lock here protects the get_variable call, the conditional
@@ -1001,6 +1035,7 @@ EXPORT_SYMBOL_GPL(efivar_entry_set_get_size);
  */
 int efivar_entry_iter_begin(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return down_interruptible(&efivars_lock);
 }
 EXPORT_SYMBOL_GPL(efivar_entry_iter_begin);
@@ -1012,6 +1047,7 @@ EXPORT_SYMBOL_GPL(efivar_entry_iter_begin);
  */
 void efivar_entry_iter_end(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	up(&efivars_lock);
 }
 EXPORT_SYMBOL_GPL(efivar_entry_iter_end);
@@ -1045,6 +1081,7 @@ int __efivar_entry_iter(int (*func)(struct efivar_entry *, void *),
 	struct efivar_entry *entry, *n;
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!prev || !*prev) {
 		list_for_each_entry_safe(entry, n, head, list) {
 			err = func(entry, data);
@@ -1090,7 +1127,9 @@ int efivar_entry_iter(int (*func)(struct efivar_entry *, void *),
 
 	err = efivar_entry_iter_begin();
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	err = __efivar_entry_iter(func, head, data, NULL);
 	efivar_entry_iter_end();
 
@@ -1107,8 +1146,11 @@ EXPORT_SYMBOL_GPL(efivar_entry_iter);
 struct kobject *efivars_kobject(void)
 {
 	if (!__efivars)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __efivars->kobject;
 }
 EXPORT_SYMBOL_GPL(efivars_kobject);
@@ -1118,6 +1160,7 @@ EXPORT_SYMBOL_GPL(efivars_kobject);
  */
 void efivar_run_worker(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (efivar_wq_enabled)
 		schedule_work(&efivar_work);
 }
@@ -1135,6 +1178,7 @@ int efivars_register(struct efivars *efivars,
 		     const struct efivar_operations *ops,
 		     struct kobject *kobject)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (down_interruptible(&efivars_lock))
 		return -EINTR;
 
@@ -1163,7 +1207,9 @@ int efivars_unregister(struct efivars *efivars)
 	int rv;
 
 	if (down_interruptible(&efivars_lock))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINTR;
+}
 
 	if (!__efivars) {
 		printk(KERN_ERR "efivars not registered\n");
diff --git a/drivers/firmware/memmap.c b/drivers/firmware/memmap.c
index 5de3ed2..470344c 100644
--- a/drivers/firmware/memmap.c
+++ b/drivers/firmware/memmap.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/drivers/firmware/memmap.c
  *  Copyright (C) 2008 SUSE LINUX Products GmbH
@@ -100,11 +102,13 @@ static DEFINE_SPINLOCK(map_entries_bootmem_lock);
 static inline struct firmware_map_entry *
 to_memmap_entry(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return container_of(kobj, struct firmware_map_entry, kobj);
 }
 
 static void __meminit release_firmware_map_entry(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct firmware_map_entry *entry = to_memmap_entry(kobj);
 
 	if (PageReserved(virt_to_page(entry))) {
@@ -175,6 +179,7 @@ static int firmware_map_add_entry(u64 start, u64 end,
  */
 static inline void firmware_map_remove_entry(struct firmware_map_entry *entry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_del(&entry->list);
 }
 
@@ -187,18 +192,25 @@ static int add_sysfs_fw_map_entry(struct firmware_map_entry *entry)
 	static struct kset *mmap_kset;
 
 	if (entry->kobj.state_in_sysfs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EEXIST;
+}
 
 	if (!mmap_kset) {
 		mmap_kset = kset_create_and_add("memmap", NULL, firmware_kobj);
 		if (!mmap_kset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	}
 
 	entry->kobj.kset = mmap_kset;
 	if (kobject_add(&entry->kobj, NULL, "%d", map_entries_nr++))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kobject_put(&entry->kobj);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -207,6 +219,7 @@ static int add_sysfs_fw_map_entry(struct firmware_map_entry *entry)
  */
 static inline void remove_sysfs_fw_map_entry(struct firmware_map_entry *entry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kobject_put(&entry->kobj);
 }
 
@@ -229,6 +242,7 @@ firmware_map_find_entry_in_list(u64 start, u64 end, const char *type,
 {
 	struct firmware_map_entry *entry;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(entry, list, list)
 		if ((entry->start == start) && (entry->end == end) &&
 		    (!strcmp(entry->type, type))) {
@@ -253,6 +267,7 @@ firmware_map_find_entry_in_list(u64 start, u64 end, const char *type,
 static struct firmware_map_entry * __meminit
 firmware_map_find_entry(u64 start, u64 end, const char *type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return firmware_map_find_entry_in_list(start, end, type, &map_entries);
 }
 
@@ -270,6 +285,7 @@ firmware_map_find_entry(u64 start, u64 end, const char *type)
 static struct firmware_map_entry * __meminit
 firmware_map_find_entry_bootmem(u64 start, u64 end, const char *type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return firmware_map_find_entry_in_list(start, end, type,
 					       &map_entries_bootmem);
 }
@@ -293,7 +309,9 @@ int __meminit firmware_map_add_hotplug(u64 start, u64 end, const char *type)
 
 	entry = firmware_map_find_entry(start, end - 1, type);
 	if (entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	entry = firmware_map_find_entry_bootmem(start, end - 1, type);
 	if (!entry) {
@@ -335,7 +353,9 @@ int __init firmware_map_add_early(u64 start, u64 end, const char *type)
 
 	entry = memblock_virt_alloc(sizeof(struct firmware_map_entry), 0);
 	if (WARN_ON(!entry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return firmware_map_add_entry(start, end, type, entry);
 }
@@ -357,6 +377,7 @@ int __meminit firmware_map_remove(u64 start, u64 end, const char *type)
 	spin_lock(&map_entries_lock);
 	entry = firmware_map_find_entry(start, end - 1, type);
 	if (!entry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&map_entries_lock);
 		return -EINVAL;
 	}
@@ -376,29 +397,34 @@ int __meminit firmware_map_remove(u64 start, u64 end, const char *type)
 
 static ssize_t start_show(struct firmware_map_entry *entry, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return snprintf(buf, PAGE_SIZE, "0x%llx\n",
 		(unsigned long long)entry->start);
 }
 
 static ssize_t end_show(struct firmware_map_entry *entry, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return snprintf(buf, PAGE_SIZE, "0x%llx\n",
 		(unsigned long long)entry->end);
 }
 
 static ssize_t type_show(struct firmware_map_entry *entry, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return snprintf(buf, PAGE_SIZE, "%s\n", entry->type);
 }
 
 static inline struct memmap_attribute *to_memmap_attr(struct attribute *attr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return container_of(attr, struct memmap_attribute, attr);
 }
 
 static ssize_t memmap_attr_show(struct kobject *kobj,
 				struct attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct firmware_map_entry *entry = to_memmap_entry(kobj);
 	struct memmap_attribute *memmap_attr = to_memmap_attr(attr);
 
diff --git a/drivers/hid/hid-core.c b/drivers/hid/hid-core.c
index ca2fbe5..92df743 100644
--- a/drivers/hid/hid-core.c
+++ b/drivers/hid/hid-core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  HID support for Linux
  *
@@ -63,7 +65,9 @@ struct hid_report *hid_register_report(struct hid_device *device, unsigned type,
 	struct hid_report *report;
 
 	if (id >= HID_MAX_IDS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	if (report_enum->report_id_hash[id])
 		return report_enum->report_id_hash[id];
 
@@ -95,6 +99,7 @@ static struct hid_field *hid_register_field(struct hid_report *report, unsigned
 	struct hid_field *field;
 
 	if (report->maxfield == HID_MAX_FIELDS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hid_err(report->device, "too many fields in report\n");
 		return NULL;
 	}
@@ -126,6 +131,7 @@ static int open_collection(struct hid_parser *parser, unsigned type)
 	usage = parser->local.usage[0];
 
 	if (parser->collection_stack_ptr == HID_COLLECTION_STACK_SIZE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hid_err(parser->device, "collection stack overflow\n");
 		return -EINVAL;
 	}
@@ -169,6 +175,7 @@ static int open_collection(struct hid_parser *parser, unsigned type)
 
 static int close_collection(struct hid_parser *parser)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!parser->collection_stack_ptr) {
 		hid_err(parser->device, "collection stack underflow\n");
 		return -EINVAL;
@@ -187,6 +194,7 @@ static unsigned hid_lookup_collection(struct hid_parser *parser, unsigned type)
 	struct hid_collection *collection = parser->device->collection;
 	int n;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (n = parser->collection_stack_ptr - 1; n >= 0; n--) {
 		unsigned index = parser->collection_stack[n];
 		if (collection[index].type == type)
@@ -201,6 +209,7 @@ static unsigned hid_lookup_collection(struct hid_parser *parser, unsigned type)
 
 static int hid_add_usage(struct hid_parser *parser, unsigned usage)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (parser->local.usage_index >= HID_MAX_USAGES) {
 		hid_err(parser->device, "usage index exceeded\n");
 		return -1;
@@ -227,6 +236,7 @@ static int hid_add_field(struct hid_parser *parser, unsigned report_type, unsign
 
 	report = hid_register_report(parser->device, report_type, parser->global.report_id);
 	if (!report) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hid_err(parser->device, "hid_register_report failed\n");
 		return -1;
 	}
@@ -294,6 +304,7 @@ static int hid_add_field(struct hid_parser *parser, unsigned report_type, unsign
 
 static u32 item_udata(struct hid_item *item)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (item->size) {
 	case 1: return item->data.u8;
 	case 2: return item->data.u16;
@@ -304,6 +315,7 @@ static u32 item_udata(struct hid_item *item)
 
 static s32 item_sdata(struct hid_item *item)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (item->size) {
 	case 1: return item->data.s8;
 	case 2: return item->data.s16;
@@ -322,6 +334,7 @@ static int hid_parser_global(struct hid_parser *parser, struct hid_item *item)
 	switch (item->tag) {
 	case HID_GLOBAL_ITEM_TAG_PUSH:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (parser->global_stack_ptr == HID_GLOBAL_STACK_SIZE) {
 			hid_err(parser->device, "global environment stack overflow\n");
 			return -1;
@@ -433,6 +446,7 @@ static int hid_parser_local(struct hid_parser *parser, struct hid_item *item)
 	switch (item->tag) {
 	case HID_LOCAL_ITEM_TAG_DELIMITER:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (data) {
 			/*
 			 * We treat items before the first delimiter
@@ -566,6 +580,7 @@ static int hid_parser_main(struct hid_parser *parser, struct hid_item *item)
 
 static int hid_parser_reserved(struct hid_parser *parser, struct hid_item *item)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dbg_hid("reserved item type, tag 0x%x\n", item->tag);
 	return 0;
 }
@@ -580,6 +595,7 @@ static void hid_free_report(struct hid_report *report)
 {
 	unsigned n;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (n = 0; n < report->maxfield; n++)
 		kfree(report->field[n]);
 	kfree(report);
@@ -593,6 +609,7 @@ static void hid_close_report(struct hid_device *device)
 {
 	unsigned i, j;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < HID_REPORT_TYPES; i++) {
 		struct hid_report_enum *report_enum = device->report_enum + i;
 
@@ -624,6 +641,7 @@ static void hid_close_report(struct hid_device *device)
 
 static void hid_device_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_device *hid = to_hid_device(dev);
 
 	hid_close_report(hid);
@@ -641,7 +659,9 @@ static u8 *fetch_item(__u8 *start, __u8 *end, struct hid_item *item)
 	u8 b;
 
 	if ((end - start) <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	b = *start++;
 
@@ -703,11 +723,14 @@ static void hid_scan_input_usage(struct hid_parser *parser, u32 usage)
 	struct hid_device *hid = parser->device;
 
 	if (usage == HID_DG_CONTACTID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hid->group = HID_GROUP_MULTITOUCH;
 }
+}
 
 static void hid_scan_feature_usage(struct hid_parser *parser, u32 usage)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (usage == 0xff0000c5 && parser->global.report_count == 256 &&
 	    parser->global.report_size == 8)
 		parser->scan_flags |= HID_SCAN_FLAG_MT_WIN_8;
@@ -791,7 +814,9 @@ static int hid_scan_report(struct hid_device *hid)
 
 	parser = vzalloc(sizeof(struct hid_parser));
 	if (!parser)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	parser->device = hid;
 	hid->group = HID_GROUP_GENERIC;
@@ -871,6 +896,7 @@ static int hid_scan_report(struct hid_device *hid)
  */
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hid->dev_rdesc = kmemdup(start, size, GFP_KERNEL);
 	if (!hid->dev_rdesc)
 		return -ENOMEM;
@@ -904,6 +930,7 @@ struct hid_report *hid_validate_values(struct hid_device *hid,
 	struct hid_report *report;
 
 	if (type > HID_FEATURE_REPORT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hid_err(hid, "invalid HID report type %u\n", type);
 		return NULL;
 	}
@@ -976,6 +1003,7 @@ int hid_open_report(struct hid_device *device)
 		hid_parser_reserved
 	};
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(device->status & HID_STAT_PARSED))
 		return -EBUSY;
 
@@ -1065,6 +1093,7 @@ EXPORT_SYMBOL_GPL(hid_open_report);
 
 static s32 snto32(__u32 value, unsigned n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (n) {
 	case 8:  return ((__s8)value);
 	case 16: return ((__s16)value);
@@ -1075,6 +1104,7 @@ static s32 snto32(__u32 value, unsigned n)
 
 s32 hid_snto32(__u32 value, unsigned n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return snto32(value, n);
 }
 EXPORT_SYMBOL_GPL(hid_snto32);
@@ -1086,6 +1116,7 @@ EXPORT_SYMBOL_GPL(hid_snto32);
 static u32 s32ton(__s32 value, unsigned n)
 {
 	s32 a = value >> (n - 1);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (a && a != -1)
 		return value < 0 ? 1 << (n - 1) : (1 << (n - 1)) - 1;
 	return value & ((1 << n) - 1);
@@ -1110,6 +1141,7 @@ static u32 __extract(u8 *report, unsigned offset, int n)
 	unsigned int bit_shift = offset % 8;
 	int bits_to_copy = 8 - bit_shift;
 	u32 value = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 mask = n < 32 ? (1U << n) - 1 : ~0U;
 
 	while (n > 0) {
@@ -1127,6 +1159,7 @@ static u32 __extract(u8 *report, unsigned offset, int n)
 u32 hid_field_extract(const struct hid_device *hid, u8 *report,
 			unsigned offset, unsigned n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (n > 32) {
 		hid_warn(hid, "hid_field_extract() called with n (%d) > 32! (%s)\n",
 			 n, current->comm);
@@ -1152,6 +1185,7 @@ static void __implement(u8 *report, unsigned offset, int n, u32 value)
 	unsigned int bit_shift = offset % 8;
 	int bits_to_set = 8 - bit_shift;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (n - bits_to_set >= 0) {
 		report[idx] &= ~(0xff << bit_shift);
 		report[idx] |= value << bit_shift;
@@ -1173,6 +1207,7 @@ static void __implement(u8 *report, unsigned offset, int n, u32 value)
 static void implement(const struct hid_device *hid, u8 *report,
 		      unsigned offset, unsigned n, u32 value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(n > 32)) {
 		hid_warn(hid, "%s() called with n (%d) > 32! (%s)\n",
 			 __func__, n, current->comm);
@@ -1198,6 +1233,7 @@ static void implement(const struct hid_device *hid, u8 *report,
 
 static int search(__s32 *array, __s32 value, unsigned n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (n--) {
 		if (*array++ == value)
 			return 0;
@@ -1218,7 +1254,9 @@ static int hid_match_report(struct hid_device *hid, struct hid_report *report)
 	const struct hid_report_id *id = hid->driver->report_table;
 
 	if (!id) /* NULL means all */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	for (; id->report_type != HID_TERMINATOR; id++)
 		if (id->report_type == HID_ANY_ID ||
@@ -1241,7 +1279,9 @@ static int hid_match_usage(struct hid_device *hid, struct hid_usage *usage)
 	const struct hid_usage_id *id = hid->driver->usage_table;
 
 	if (!id) /* NULL means all */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	for (; id->usage_type != HID_ANY_ID - 1; id++)
 		if ((id->usage_hid == HID_ANY_ID ||
@@ -1261,7 +1301,9 @@ static void hid_process_event(struct hid_device *hid, struct hid_field *field,
 	int ret;
 
 	if (!list_empty(&hid->debug_list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hid_dump_input(hid, usage, value);
+}
 
 	if (hdrv && hdrv->event && hid_match_usage(hid, usage)) {
 		ret = hdrv->event(hid, field, usage, value);
@@ -1298,7 +1340,9 @@ static void hid_input_field(struct hid_device *hid, struct hid_field *field,
 
 	value = kmalloc(sizeof(__s32) * count, GFP_ATOMIC);
 	if (!value)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for (n = 0; n < count; n++) {
 
@@ -1352,6 +1396,7 @@ static void hid_output_field(const struct hid_device *hid,
 	unsigned size = field->report_size;
 	unsigned n;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (n = 0; n < count; n++) {
 		if (field->logical_minimum < 0)	/* signed values */
 			implement(hid, data, offset + n * size, size,
@@ -1372,7 +1417,9 @@ void hid_output_report(struct hid_report *report, __u8 *data)
 	unsigned n;
 
 	if (report->id > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*data++ = report->id;
+}
 
 	memset(data, 0, ((report->size - 1) >> 3) + 1);
 	for (n = 0; n < report->maxfield; n++)
@@ -1390,6 +1437,7 @@ u8 *hid_alloc_report_buf(struct hid_report *report, gfp_t flags)
 	 * of implement() working on 8 byte chunks
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int len = hid_report_len(report) + 7;
 
 	return kmalloc(len, flags);
@@ -1407,7 +1455,9 @@ int hid_set_field(struct hid_field *field, unsigned offset, __s32 value)
 	unsigned size;
 
 	if (!field)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	size = field->report_size;
 
@@ -1437,7 +1487,9 @@ static struct hid_report *hid_get_report(struct hid_report_enum *report_enum,
 
 	/* Device uses numbered reports, data[0] is report number */
 	if (report_enum->numbered)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		n = *data;
+}
 
 	report = report_enum->report_id_hash[n];
 	if (report == NULL)
@@ -1459,7 +1511,9 @@ void __hid_request(struct hid_device *hid, struct hid_report *report,
 
 	buf = hid_alloc_report_buf(report, GFP_KERNEL);
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	len = hid_report_len(report);
 
@@ -1496,6 +1550,7 @@ int hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
 	if (!report)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (report_enum->numbered) {
 		cdata++;
 		csize--;
@@ -1554,7 +1609,9 @@ int hid_input_report(struct hid_device *hid, int type, u8 *data, int size, int i
 	int ret = 0;
 
 	if (!hid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (down_trylock(&hid->driver_input_lock))
 		return -EBUSY;
@@ -1600,6 +1657,7 @@ EXPORT_SYMBOL_GPL(hid_input_report);
 static bool hid_match_one_id(struct hid_device *hdev,
 		const struct hid_device_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (id->bus == HID_BUS_ANY || id->bus == hdev->bus) &&
 		(id->group == HID_GROUP_ANY || id->group == hdev->group) &&
 		(id->vendor == HID_ANY_ID || id->vendor == hdev->vendor) &&
@@ -1609,6 +1667,7 @@ static bool hid_match_one_id(struct hid_device *hdev,
 const struct hid_device_id *hid_match_id(struct hid_device *hdev,
 		const struct hid_device_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (; id->bus; id++)
 		if (hid_match_one_id(hdev, id))
 			return id;
@@ -1624,6 +1683,7 @@ static const struct hid_device_id hid_hiddev_list[] = {
 
 static bool hid_hiddev(struct hid_device *hdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !!hid_match_id(hdev, hid_hiddev_list);
 }
 
@@ -1633,6 +1693,7 @@ read_report_descriptor(struct file *filp, struct kobject *kobj,
 		struct bin_attribute *attr,
 		char *buf, loff_t off, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = kobj_to_dev(kobj);
 	struct hid_device *hdev = to_hid_device(dev);
 
@@ -1651,6 +1712,7 @@ static ssize_t
 show_country(struct device *dev, struct device_attribute *attr,
 		char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_device *hdev = to_hid_device(dev);
 
 	return sprintf(buf, "%02x\n", hdev->country & 0xff);
@@ -1680,7 +1742,9 @@ int hid_connect(struct hid_device *hdev, unsigned int connect_mask)
 	int ret;
 
 	if (hdev->quirks & HID_QUIRK_HIDDEV_FORCE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		connect_mask |= (HID_CONNECT_HIDDEV_FORCE | HID_CONNECT_HIDDEV);
+}
 	if (hdev->quirks & HID_QUIRK_HIDINPUT_FORCE)
 		connect_mask |= HID_CONNECT_HIDINPUT_FORCE;
 	if (hdev->bus != BUS_USB)
@@ -1763,6 +1827,7 @@ EXPORT_SYMBOL_GPL(hid_connect);
 
 void hid_disconnect(struct hid_device *hdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_remove_file(&hdev->dev, &dev_attr_country);
 	if (hdev->claimed & HID_CLAIMED_INPUT)
 		hidinput_disconnect(hdev);
@@ -1789,7 +1854,9 @@ int hid_hw_start(struct hid_device *hdev, unsigned int connect_mask)
 
 	error = hdev->ll_driver->start(hdev);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	if (connect_mask) {
 		error = hid_connect(hdev, connect_mask);
@@ -1812,6 +1879,7 @@ EXPORT_SYMBOL_GPL(hid_hw_start);
  */
 void hid_hw_stop(struct hid_device *hdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hid_disconnect(hdev);
 	hdev->ll_driver->stop(hdev);
 }
@@ -1831,7 +1899,9 @@ int hid_hw_open(struct hid_device *hdev)
 
 	ret = mutex_lock_killable(&hdev->ll_open_lock);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (!hdev->ll_open_count++) {
 		ret = hdev->ll_driver->open(hdev);
@@ -1855,6 +1925,7 @@ EXPORT_SYMBOL_GPL(hid_hw_open);
  */
 void hid_hw_close(struct hid_device *hdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&hdev->ll_open_lock);
 	if (!--hdev->ll_open_count)
 		hdev->ll_driver->close(hdev);
@@ -2409,6 +2480,7 @@ struct hid_dynid {
 static ssize_t new_id_store(struct device_driver *drv, const char *buf,
 		size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_driver *hdrv = to_hid_driver(drv);
 	struct hid_dynid *dynid;
 	__u32 bus, vendor, product;
@@ -2451,6 +2523,7 @@ static void hid_free_dynids(struct hid_driver *hdrv)
 	struct hid_dynid *dynid, *n;
 
 	spin_lock(&hdrv->dyn_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(dynid, n, &hdrv->dyn_list, list) {
 		list_del(&dynid->list);
 		kfree(dynid);
@@ -2464,6 +2537,7 @@ static const struct hid_device_id *hid_match_device(struct hid_device *hdev,
 	struct hid_dynid *dynid;
 
 	spin_lock(&hdrv->dyn_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dynid, &hdrv->dyn_list, list) {
 		if (hid_match_one_id(hdev, &dynid->id)) {
 			spin_unlock(&hdrv->dyn_lock);
@@ -2477,6 +2551,7 @@ static const struct hid_device_id *hid_match_device(struct hid_device *hdev,
 
 static int hid_bus_match(struct device *dev, struct device_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_driver *hdrv = to_hid_driver(drv);
 	struct hid_device *hdev = to_hid_device(dev);
 
@@ -2485,6 +2560,7 @@ static int hid_bus_match(struct device *dev, struct device_driver *drv)
 
 static int hid_device_probe(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_driver *hdrv = to_hid_driver(dev->driver);
 	struct hid_device *hdev = to_hid_device(dev);
 	const struct hid_device_id *id;
@@ -2525,6 +2601,7 @@ static int hid_device_probe(struct device *dev)
 
 static int hid_device_remove(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_device *hdev = to_hid_device(dev);
 	struct hid_driver *hdrv;
 	int ret = 0;
@@ -2554,6 +2631,7 @@ static int hid_device_remove(struct device *dev)
 static ssize_t modalias_show(struct device *dev, struct device_attribute *a,
 			     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_device *hdev = container_of(dev, struct hid_device, dev);
 
 	return scnprintf(buf, PAGE_SIZE, "hid:b%04Xg%04Xv%08Xp%08X\n",
@@ -2577,6 +2655,7 @@ __ATTRIBUTE_GROUPS(hid_dev);
 
 static int hid_uevent(struct device *dev, struct kobj_uevent_env *env)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_device *hdev = to_hid_device(dev);
 
 	if (add_uevent_var(env, "HID_ID=%04X:%08X:%08X",
@@ -2848,6 +2927,7 @@ static const struct hid_device_id hid_mouse_ignore_list[] = {
 
 bool hid_ignore(struct hid_device *hdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (hdev->quirks & HID_QUIRK_NO_IGNORE)
 		return false;
 	if (hdev->quirks & HID_QUIRK_IGNORE)
@@ -2936,6 +3016,7 @@ int hid_add_device(struct hid_device *hdev)
 	static atomic_t id = ATOMIC_INIT(0);
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(hdev->status & HID_STAT_ADDED))
 		return -EBUSY;
 
@@ -3006,7 +3087,9 @@ struct hid_device *hid_allocate_device(void)
 
 	hdev = kzalloc(sizeof(*hdev), GFP_KERNEL);
 	if (hdev == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(ret);
+}
 
 	device_initialize(&hdev->dev);
 	hdev->dev.release = hid_device_release;
@@ -3027,6 +3110,7 @@ EXPORT_SYMBOL_GPL(hid_allocate_device);
 
 static void hid_remove_device(struct hid_device *hdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (hdev->status & HID_STAT_ADDED) {
 		device_del(&hdev->dev);
 		hid_debug_unregister(hdev);
@@ -3047,6 +3131,7 @@ static void hid_remove_device(struct hid_device *hdev)
  */
 void hid_destroy_device(struct hid_device *hdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hid_remove_device(hdev);
 	put_device(&hdev->dev);
 }
@@ -3069,6 +3154,7 @@ EXPORT_SYMBOL_GPL(__hid_register_driver);
 
 void hid_unregister_driver(struct hid_driver *hdrv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	driver_unregister(&hdrv->driver);
 	hid_free_dynids(hdrv);
 }
@@ -3080,7 +3166,9 @@ int hid_check_keys_pressed(struct hid_device *hid)
 	int i;
 
 	if (!(hid->claimed & HID_CLAIMED_INPUT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	list_for_each_entry(hidinput, &hid->inputs, list) {
 		for (i = 0; i < BITS_TO_LONGS(KEY_MAX); i++)
@@ -3098,15 +3186,19 @@ static int __init hid_init(void)
 	int ret;
 
 	if (hid_debug)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("hid_debug is now used solely for parser and driver debugging.\n"
 			"debugfs is now used for inspecting the device (report descriptor, reports)\n");
+}
 
 	ret = bus_register(&hid_bus_type);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("can't register hid bus\n");
 		goto err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = hidraw_init();
 	if (ret)
 		goto err_bus;
@@ -3122,6 +3214,7 @@ static int __init hid_init(void)
 
 static void __exit hid_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hid_debug_exit();
 	hidraw_exit();
 	bus_unregister(&hid_bus_type);
diff --git a/drivers/hid/hid-debug.c b/drivers/hid/hid-debug.c
index 5271db5..09b1ddd 100644
--- a/drivers/hid/hid-debug.c
+++ b/drivers/hid/hid-debug.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  (c) 1999 Andreas Gal		<gal@cs.uni-magdeburg.de>
  *  (c) 2000-2001 Vojtech Pavlik	<vojtech@ucw.cz>
@@ -636,6 +638,7 @@ void hid_dump_device(struct hid_device *device, struct seq_file *f)
 	unsigned i,k;
 	static const char *table[] = {"INPUT", "OUTPUT", "FEATURE"};
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < HID_REPORT_TYPES; i++) {
 		report_enum = device->report_enum + i;
 		list = report_enum->report_list.next;
@@ -665,6 +668,7 @@ void hid_debug_event(struct hid_device *hdev, char *buf)
 	struct hid_debug_list *list;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&hdev->debug_list_lock, flags);
 	list_for_each_entry(list, &hdev->debug_list, node) {
 		for (i = 0; buf[i]; i++)
@@ -688,7 +692,9 @@ void hid_dump_report(struct hid_device *hid, int type, u8 *data,
 	buf = kmalloc(sizeof(char) * HID_DEBUG_BUFSIZE, GFP_ATOMIC);
 
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	report_enum = hid->report_enum + type;
 
@@ -715,7 +721,9 @@ void hid_dump_input(struct hid_device *hdev, struct hid_usage *usage, __s32 valu
 
 	buf = hid_resolv_usage(usage->hid, NULL);
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	len = strlen(buf);
 	snprintf(buf + len, HID_DEBUG_BUFSIZE - len - 1, " = %d\n", value);
 
@@ -1021,6 +1029,7 @@ static const char **names[EV_MAX + 1] = {
 
 static void hid_resolv_event(__u8 type, __u16 code, struct seq_file *f)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_printf(f, "%s.%s", events[type] ? events[type] : "?",
 		names[type] ? (names[type][code] ? names[type][code] : "?") : "?");
 }
@@ -1031,6 +1040,7 @@ static void hid_dump_input_mapping(struct hid_device *hid, struct seq_file *f)
 	struct hid_report *report;
 	struct hid_usage *usage;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (k = HID_INPUT_REPORT; k <= HID_OUTPUT_REPORT; k++) {
 		list_for_each_entry(report, &hid->report_enum[k].report_list, list) {
 			for (i = 0; i < report->maxfield; i++) {
@@ -1055,6 +1065,7 @@ static int hid_debug_rdesc_show(struct seq_file *f, void *p)
 	int i;
 
 	if (!rdesc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rdesc = hdev->dev_rdesc;
 		rsize = hdev->dev_rsize;
 	}
@@ -1074,6 +1085,7 @@ static int hid_debug_rdesc_show(struct seq_file *f, void *p)
 
 static int hid_debug_rdesc_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, hid_debug_rdesc_show, inode->i_private);
 }
 
@@ -1224,6 +1236,7 @@ static const struct file_operations hid_debug_events_fops = {
 
 void hid_debug_register(struct hid_device *hdev, const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hdev->debug_dir = debugfs_create_dir(name, hid_debug_root);
 	hdev->debug_rdesc = debugfs_create_file("rdesc", 0400,
 			hdev->debug_dir, hdev, &hid_debug_rdesc_fops);
@@ -1234,6 +1247,7 @@ void hid_debug_register(struct hid_device *hdev, const char *name)
 
 void hid_debug_unregister(struct hid_device *hdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hdev->debug = 0;
 	wake_up_interruptible(&hdev->debug_wait);
 	debugfs_remove(hdev->debug_rdesc);
@@ -1248,6 +1262,7 @@ void hid_debug_init(void)
 
 void hid_debug_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	debugfs_remove_recursive(hid_debug_root);
 }
 
diff --git a/drivers/hid/hid-generic.c b/drivers/hid/hid-generic.c
index e288a4a..44e6f60 100644
--- a/drivers/hid/hid-generic.c
+++ b/drivers/hid/hid-generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  HID support for Linux
  *
diff --git a/drivers/hid/usbhid/hid-core.c b/drivers/hid/usbhid/hid-core.c
index 045b5da..23d6f7a 100644
--- a/drivers/hid/usbhid/hid-core.c
+++ b/drivers/hid/usbhid/hid-core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  USB HID support for Linux
  *
@@ -82,6 +84,7 @@ static int hid_start_in(struct hid_device *hid)
 	int rc = 0;
 	struct usbhid_device *usbhid = hid->driver_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&usbhid->lock, flags);
 	if (test_bit(HID_IN_POLLING, &usbhid->iofl) &&
 	    !test_bit(HID_DISCONNECTED, &usbhid->iofl) &&
@@ -106,6 +109,7 @@ static void hid_retry_timeout(unsigned long _hid)
 	struct hid_device *hid = (struct hid_device *) _hid;
 	struct usbhid_device *usbhid = hid->driver_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&usbhid->intf->dev, "retrying intr urb\n");
 	if (hid_start_in(hid))
 		hid_io_error(hid);
@@ -144,6 +148,7 @@ static void hid_io_error(struct hid_device *hid)
 	unsigned long flags;
 	struct usbhid_device *usbhid = hid->driver_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&usbhid->lock, flags);
 
 	/* Stop when disconnected */
@@ -188,6 +193,7 @@ static void usbhid_mark_busy(struct usbhid_device *usbhid)
 
 static int usbhid_restart_out_queue(struct usbhid_device *usbhid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_device *hid = usb_get_intfdata(usbhid->intf);
 	int kicked;
 	int r;
@@ -226,6 +232,7 @@ static int usbhid_restart_out_queue(struct usbhid_device *usbhid)
 
 static int usbhid_restart_ctrl_queue(struct usbhid_device *usbhid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_device *hid = usb_get_intfdata(usbhid->intf);
 	int kicked;
 	int r;
@@ -342,6 +349,7 @@ static int hid_submit_out(struct hid_device *hid)
 	raw_report = usbhid->out[usbhid->outtail].raw_report;
 
 	usbhid->urbout->transfer_buffer_length = hid_report_len(report);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	usbhid->urbout->dev = hid_to_usb_dev(hid);
 	if (raw_report) {
 		memcpy(usbhid->outbuf, raw_report,
@@ -375,6 +383,7 @@ static int hid_submit_ctrl(struct hid_device *hid)
 
 	len = ((report->size - 1) >> 3) + 1 + (report->id > 0);
 	if (dir == USB_DIR_OUT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		usbhid->urbctrl->pipe = usb_sndctrlpipe(hid_to_usb_dev(hid), 0);
 		usbhid->urbctrl->transfer_buffer_length = len;
 		if (raw_report) {
@@ -524,6 +533,7 @@ static void __usbhid_submit_report(struct hid_device *hid, struct hid_report *re
 	int head;
 	struct usbhid_device *usbhid = hid->driver_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (((hid->quirks & HID_QUIRK_NOGET) && dir == USB_DIR_IN) ||
 		test_bit(HID_DISCONNECTED, &usbhid->iofl))
 		return;
@@ -632,6 +642,7 @@ static void usbhid_submit_report(struct hid_device *hid, struct hid_report *repo
 	struct usbhid_device *usbhid = hid->driver_data;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&usbhid->lock, flags);
 	__usbhid_submit_report(hid, report, dir);
 	spin_unlock_irqrestore(&usbhid->lock, flags);
@@ -641,6 +652,7 @@ static int usbhid_wait_io(struct hid_device *hid)
 {
 	struct usbhid_device *usbhid = hid->driver_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!wait_event_timeout(usbhid->wait,
 				(!test_bit(HID_CTRL_RUNNING, &usbhid->iofl) &&
 				!test_bit(HID_OUT_RUNNING, &usbhid->iofl)),
@@ -654,6 +666,7 @@ static int usbhid_wait_io(struct hid_device *hid)
 
 static int hid_set_idle(struct usb_device *dev, int ifnum, int report, int idle)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return usb_control_msg(dev, usb_sndctrlpipe(dev, 0),
 		HID_REQ_SET_IDLE, USB_TYPE_CLASS | USB_RECIP_INTERFACE, (idle << 8) | report,
 		ifnum, NULL, 0, USB_CTRL_SET_TIMEOUT);
@@ -667,6 +680,7 @@ static int hid_get_class_descriptor(struct usb_device *dev, int ifnum,
 	memset(buf, 0, size);
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = usb_control_msg(dev, usb_rcvctrlpipe(dev, 0),
 				USB_REQ_GET_DESCRIPTOR, USB_RECIP_INTERFACE | USB_DIR_IN,
 				(type << 8), ifnum, buf, size, USB_CTRL_GET_TIMEOUT);
@@ -683,7 +697,9 @@ static int usbhid_open(struct hid_device *hid)
 	set_bit(HID_OPENED, &usbhid->iofl);
 
 	if (hid->quirks & HID_QUIRK_ALWAYS_POLL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	res = usb_autopm_get_interface(usbhid->intf);
 	/* the device must be awake to reliably request remote wakeup */
@@ -738,7 +754,9 @@ static void usbhid_close(struct hid_device *hid)
 	spin_lock_irq(&usbhid->lock);
 	clear_bit(HID_OPENED, &usbhid->iofl);
 	if (!(hid->quirks & HID_QUIRK_ALWAYS_POLL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clear_bit(HID_IN_POLLING, &usbhid->iofl);
+}
 	spin_unlock_irq(&usbhid->lock);
 
 	if (hid->quirks & HID_QUIRK_ALWAYS_POLL)
@@ -761,6 +779,7 @@ void usbhid_init_reports(struct hid_device *hid)
 	int err, ret;
 
 	report_enum = &hid->report_enum[HID_INPUT_REPORT];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(report, &report_enum->report_list, list)
 		usbhid_submit_report(hid, report, USB_DIR_IN);
 
@@ -794,6 +813,7 @@ static int hid_find_field_early(struct hid_device *hid, unsigned int page,
 	struct hid_usage *usage;
 	int i, j;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(report, &hid->report_enum[HID_OUTPUT_REPORT].report_list, list) {
 		for (i = 0; i < report->maxfield; i++) {
 			field = report->field[i];
@@ -816,6 +836,7 @@ static void usbhid_set_leds(struct hid_device *hid)
 	int offset;
 
 	if ((offset = hid_find_field_early(hid, HID_UP_LED, 0x01, &field)) != -1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hid_set_field(field, offset, 0);
 		usbhid_submit_report(hid, field->report, USB_DIR_OUT);
 	}
@@ -830,6 +851,7 @@ static void hid_find_max_report(struct hid_device *hid, unsigned int type,
 	struct hid_report *report;
 	unsigned int size;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(report, &hid->report_enum[type].report_list, list) {
 		size = ((report->size - 1) >> 3) + 1 + hid->report_enum[type].numbered;
 		if (*max < size)
@@ -848,6 +870,7 @@ static int hid_alloc_buffers(struct usb_device *dev, struct hid_device *hid)
 	usbhid->cr = kmalloc(sizeof(*usbhid->cr), GFP_KERNEL);
 	usbhid->ctrlbuf = usb_alloc_coherent(dev, usbhid->bufsize, GFP_KERNEL,
 			&usbhid->ctrlbuf_dma);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!usbhid->inbuf || !usbhid->outbuf || !usbhid->cr ||
 			!usbhid->ctrlbuf)
 		return -1;
@@ -860,6 +883,7 @@ static int usbhid_get_raw_report(struct hid_device *hid,
 		unsigned char report_type)
 {
 	struct usbhid_device *usbhid = hid->driver_data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device *dev = hid_to_usb_dev(hid);
 	struct usb_interface *intf = usbhid->intf;
 	struct usb_host_interface *interface = intf->cur_altsetting;
@@ -893,6 +917,7 @@ static int usbhid_set_raw_report(struct hid_device *hid, unsigned int reportnum,
 				 __u8 *buf, size_t count, unsigned char rtype)
 {
 	struct usbhid_device *usbhid = hid->driver_data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device *dev = hid_to_usb_dev(hid);
 	struct usb_interface *intf = usbhid->intf;
 	struct usb_host_interface *interface = intf->cur_altsetting;
@@ -928,6 +953,7 @@ static int usbhid_set_raw_report(struct hid_device *hid, unsigned int reportnum,
 static int usbhid_output_report(struct hid_device *hid, __u8 *buf, size_t count)
 {
 	struct usbhid_device *usbhid = hid->driver_data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device *dev = hid_to_usb_dev(hid);
 	int actual_length, skipped_report_id = 0, ret;
 
@@ -967,6 +993,7 @@ static void hid_free_buffers(struct usb_device *dev, struct hid_device *hid)
 
 static int usbhid_parse(struct hid_device *hid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_interface *intf = to_usb_interface(hid->dev.parent);
 	struct usb_host_interface *interface = intf->cur_altsetting;
 	struct usb_device *dev = interface_to_usbdev (intf);
@@ -1300,6 +1327,7 @@ static int usbhid_probe(struct usb_interface *intf, const struct usb_device_id *
 	size_t len;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dbg_hid("HID probe called for ifnum %d\n",
 			intf->altsetting->desc.bInterfaceNumber);
 
@@ -1393,6 +1421,7 @@ static int usbhid_probe(struct usb_interface *intf, const struct usb_device_id *
 
 static void usbhid_disconnect(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_device *hid = usb_get_intfdata(intf);
 	struct usbhid_device *usbhid;
 
@@ -1409,12 +1438,14 @@ static void usbhid_disconnect(struct usb_interface *intf)
 
 static void hid_cancel_delayed_stuff(struct usbhid_device *usbhid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	del_timer_sync(&usbhid->io_retry);
 	cancel_work_sync(&usbhid->reset_work);
 }
 
 static void hid_cease_io(struct usbhid_device *usbhid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	del_timer_sync(&usbhid->io_retry);
 	usb_kill_urb(usbhid->urbin);
 	usb_kill_urb(usbhid->urbctrl);
@@ -1424,6 +1455,7 @@ static void hid_cease_io(struct usbhid_device *usbhid)
 static void hid_restart_io(struct hid_device *hid)
 {
 	struct usbhid_device *usbhid = hid->driver_data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int clear_halt = test_bit(HID_CLEAR_HALT, &usbhid->iofl);
 	int reset_pending = test_bit(HID_RESET_PENDING, &usbhid->iofl);
 
@@ -1455,6 +1487,7 @@ static void hid_restart_io(struct hid_device *hid)
 /* Treat USB reset pretty much the same as suspend/resume */
 static int hid_pre_reset(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_device *hid = usb_get_intfdata(intf);
 	struct usbhid_device *usbhid = hid->driver_data;
 
@@ -1469,6 +1502,7 @@ static int hid_pre_reset(struct usb_interface *intf)
 /* Same routine used for post_reset and reset_resume */
 static int hid_post_reset(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device *dev = interface_to_usbdev (intf);
 	struct hid_device *hid = usb_get_intfdata(intf);
 	struct usbhid_device *usbhid = hid->driver_data;
@@ -1518,6 +1552,7 @@ static int hid_resume_common(struct hid_device *hid, bool driver_suspended)
 	int status = 0;
 
 	hid_restart_io(hid);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (driver_suspended && hid->driver && hid->driver->resume)
 		status = hid->driver->resume(hid);
 	return status;
@@ -1525,6 +1560,7 @@ static int hid_resume_common(struct hid_device *hid, bool driver_suspended)
 
 static int hid_suspend(struct usb_interface *intf, pm_message_t message)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_device *hid = usb_get_intfdata(intf);
 	struct usbhid_device *usbhid = hid->driver_data;
 	int status = 0;
@@ -1585,6 +1621,7 @@ static int hid_suspend(struct usb_interface *intf, pm_message_t message)
 
 static int hid_resume(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_device *hid = usb_get_intfdata (intf);
 	int status;
 
@@ -1595,6 +1632,7 @@ static int hid_resume(struct usb_interface *intf)
 
 static int hid_reset_resume(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hid_device *hid = usb_get_intfdata(intf);
 	int status;
 
@@ -1634,6 +1672,7 @@ static struct usb_driver hid_driver = {
 
 struct usb_interface *usbhid_find_interface(int minor)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return usb_find_interface(&hid_driver, minor);
 }
 
@@ -1658,6 +1697,7 @@ static int __init hid_init(void)
 
 static void __exit hid_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	usb_deregister(&hid_driver);
 	usbhid_quirks_exit();
 }
diff --git a/drivers/hid/usbhid/hid-quirks.c b/drivers/hid/usbhid/hid-quirks.c
index f489a5c..9a935ae 100644
--- a/drivers/hid/usbhid/hid-quirks.c
+++ b/drivers/hid/usbhid/hid-quirks.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  USB HID quirks support for Linux
  *
@@ -203,6 +205,7 @@ static struct hid_blacklist *usbhid_exists_dquirk(const u16 idVendor,
 	struct quirks_list_struct *q;
 	struct hid_blacklist *bl_entry = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(q, &dquirks_list, node) {
 		if (q->hid_bl_item.idVendor == idVendor &&
 				q->hid_bl_item.idProduct == idProduct) {
@@ -240,6 +243,7 @@ static int usbhid_modify_dquirk(const u16 idVendor, const u16 idProduct,
 	int list_edited = 0;
 
 	if (!idVendor) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dbg_hid("Cannot add a quirk with idVendor = 0\n");
 		return -EINVAL;
 	}
@@ -289,6 +293,7 @@ static void usbhid_remove_all_dquirks(void)
 	struct quirks_list_struct *q, *temp;
 
 	down_write(&dquirks_rwsem);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(q, temp, &dquirks_list, node) {
 		list_del(&q->node);
 		kfree(q);
@@ -308,11 +313,13 @@ int usbhid_quirks_init(char **quirks_param)
 
 	for (; n < MAX_USBHID_BOOT_QUIRKS && quirks_param[n]; n++) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		m = sscanf(quirks_param[n], "0x%hx:0x%hx:0x%x",
 				&idVendor, &idProduct, &quirks);
 
 		if (m != 3 ||
 		    usbhid_modify_dquirk(idVendor, idProduct, quirks) != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn("Could not parse HID quirk module param %s\n",
 				quirks_param[n]);
 		}
@@ -332,6 +339,7 @@ int usbhid_quirks_init(char **quirks_param)
  */
 void usbhid_quirks_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	usbhid_remove_all_dquirks();
 }
 
@@ -352,6 +360,7 @@ static const struct hid_blacklist *usbhid_exists_squirk(const u16 idVendor,
 	const struct hid_blacklist *bl_entry = NULL;
 	int n = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (; hid_blacklist[n].idVendor; n++)
 		if (hid_blacklist[n].idVendor == idVendor &&
 			(hid_blacklist[n].idProduct == (__u16) HID_ANY_ID ||
diff --git a/drivers/hv/hv_balloon.c b/drivers/hv/hv_balloon.c
index db0e665..9935b89 100644
--- a/drivers/hv/hv_balloon.c
+++ b/drivers/hv/hv_balloon.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2012, Microsoft Corporation.
  *
diff --git a/drivers/hv/hv_util.c b/drivers/hv/hv_util.c
index 14dce25..e196b42 100644
--- a/drivers/hv/hv_util.c
+++ b/drivers/hv/hv_util.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2010, Microsoft Corporation.
  *
diff --git a/drivers/hv/vmbus_drv.c b/drivers/hv/vmbus_drv.c
index 2cd134d..330d87a 100644
--- a/drivers/hv/vmbus_drv.c
+++ b/drivers/hv/vmbus_drv.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2009, Microsoft Corporation.
  *
diff --git a/drivers/hwmon/hwmon.c b/drivers/hwmon/hwmon.c
index c9790e2..9d83086 100644
--- a/drivers/hwmon/hwmon.c
+++ b/drivers/hwmon/hwmon.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * hwmon.c - part of lm_sensors, Linux kernel modules for hardware monitoring
  *
@@ -65,6 +67,7 @@ struct hwmon_thermal_data {
 static ssize_t
 name_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%s\n", to_hwmon_device(dev)->name);
 }
 static DEVICE_ATTR_RO(name);
@@ -77,6 +80,7 @@ static struct attribute *hwmon_dev_attrs[] = {
 static umode_t hwmon_dev_name_is_visible(struct kobject *kobj,
 					 struct attribute *attr, int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = container_of(kobj, struct device, kobj);
 
 	if (to_hwmon_device(dev)->name == NULL)
@@ -97,6 +101,7 @@ static const struct attribute_group *hwmon_dev_attr_groups[] = {
 
 static void hwmon_dev_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(to_hwmon_device(dev));
 }
 
@@ -160,6 +165,7 @@ static int hwmon_thermal_add_sensor(struct device *dev,
 static int hwmon_thermal_add_sensor(struct device *dev,
 				    struct hwmon_device *hwdev, int index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 #endif /* IS_REACHABLE(CONFIG_THERMAL) && ... */
@@ -169,6 +175,7 @@ static int hwmon_thermal_add_sensor(struct device *dev,
 static ssize_t hwmon_attr_show(struct device *dev,
 			       struct device_attribute *devattr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hwmon_device_attribute *hattr = to_hwmon_attr(devattr);
 	long val;
 	int ret;
@@ -185,6 +192,7 @@ static ssize_t hwmon_attr_show_string(struct device *dev,
 				      struct device_attribute *devattr,
 				      char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hwmon_device_attribute *hattr = to_hwmon_attr(devattr);
 	const char *s;
 	int ret;
@@ -201,6 +209,7 @@ static ssize_t hwmon_attr_store(struct device *dev,
 				struct device_attribute *devattr,
 				const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hwmon_device_attribute *hattr = to_hwmon_attr(devattr);
 	long val;
 	int ret;
@@ -219,6 +228,7 @@ static ssize_t hwmon_attr_store(struct device *dev,
 
 static int hwmon_attr_base(enum hwmon_sensor_types type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type == hwmon_in)
 		return 0;
 	return 1;
@@ -226,6 +236,7 @@ static int hwmon_attr_base(enum hwmon_sensor_types type)
 
 static bool is_string_attr(enum hwmon_sensor_types type, u32 attr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (type == hwmon_temp && attr == hwmon_temp_label) ||
 	       (type == hwmon_in && attr == hwmon_in_label) ||
 	       (type == hwmon_curr && attr == hwmon_curr_label) ||
@@ -252,7 +263,9 @@ static struct attribute *hwmon_genattr(struct device *dev,
 
 	/* The attribute is invisible if there is no template string */
 	if (!template)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 
 	mode = ops->is_visible(drvdata, type, attr, index);
 	if (!mode)
@@ -461,6 +474,7 @@ static int hwmon_num_channel_attrs(const struct hwmon_channel_info *info)
 {
 	int i, n;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = n = 0; info->config[i]; i++)
 		n += hweight32(info->config[i]);
 
@@ -478,7 +492,9 @@ static int hwmon_genattrs(struct device *dev,
 	int i, aindex = 0;
 
 	if (info->type >= ARRAY_SIZE(__templates))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	templates = __templates[info->type];
 	template_size = __templates_size[info->type];
@@ -514,6 +530,7 @@ __hwmon_create_attrs(struct device *dev, const void *drvdata,
 	int ret, i, aindex = 0, nattrs = 0;
 	struct attribute **attrs;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; chip->info[i]; i++)
 		nattrs += hwmon_num_channel_attrs(chip->info[i]);
 
@@ -653,6 +670,7 @@ hwmon_device_register_with_groups(struct device *dev, const char *name,
 				  void *drvdata,
 				  const struct attribute_group **groups)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!name)
 		return ERR_PTR(-EINVAL);
 
@@ -679,6 +697,7 @@ hwmon_device_register_with_info(struct device *dev, const char *name,
 				const struct hwmon_chip_info *chip,
 				const struct attribute_group **extra_groups)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!name)
 		return ERR_PTR(-EINVAL);
 
@@ -700,6 +719,7 @@ EXPORT_SYMBOL_GPL(hwmon_device_register_with_info);
  */
 struct device *hwmon_device_register(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_warn(dev,
 		 "hwmon_device_register() is deprecated. Please convert the driver to use hwmon_device_register_with_info().\n");
 
@@ -717,6 +737,7 @@ void hwmon_device_unregister(struct device *dev)
 	int id;
 
 	if (likely(sscanf(dev_name(dev), HWMON_ID_FORMAT, &id) == 1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_unregister(dev);
 		ida_simple_remove(&hwmon_ida, id);
 	} else
@@ -750,7 +771,9 @@ devm_hwmon_device_register_with_groups(struct device *dev, const char *name,
 	struct device **ptr, *hwdev;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	ptr = devres_alloc(devm_hwmon_release, sizeof(*ptr), GFP_KERNEL);
 	if (!ptr)
@@ -790,7 +813,9 @@ devm_hwmon_device_register_with_info(struct device *dev, const char *name,
 	struct device **ptr, *hwdev;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	ptr = devres_alloc(devm_hwmon_release, sizeof(*ptr), GFP_KERNEL);
 	if (!ptr)
@@ -826,6 +851,7 @@ static int devm_hwmon_match(struct device *dev, void *res, void *data)
  */
 void devm_hwmon_device_unregister(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(devres_release(dev, devm_hwmon_release, devm_hwmon_match, dev));
 }
 EXPORT_SYMBOL_GPL(devm_hwmon_device_unregister);
@@ -840,12 +866,16 @@ static void __init hwmon_pci_quirks(void)
 	/* Open access to 0x295-0x296 on MSI MS-7031 */
 	sb = pci_get_device(PCI_VENDOR_ID_ATI, 0x436c, NULL);
 	if (sb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sb->subsystem_vendor == 0x1462 &&	/* MSI */
 		    sb->subsystem_device == 0x0031) {	/* MS-7031 */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pci_read_config_byte(sb, 0x48, &enable);
 			pci_read_config_word(sb, 0x64, &base);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (base == 0 && !(enable & BIT(2))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev_info(&sb->dev,
 					 "Opening wide generic port at 0x295\n");
 				pci_write_config_word(sb, 0x64, 0x295);
@@ -853,6 +883,7 @@ static void __init hwmon_pci_quirks(void)
 						      enable | BIT(2));
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_dev_put(sb);
 	}
 #endif
@@ -866,14 +897,17 @@ static int __init hwmon_init(void)
 
 	err = class_register(&hwmon_class);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("couldn't register hwmon sysfs class\n");
 		return err;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void __exit hwmon_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	class_unregister(&hwmon_class);
 }
 
diff --git a/drivers/i2c/i2c-core-base.c b/drivers/i2c/i2c-core-base.c
index 56e4658..59ab7d9 100644
--- a/drivers/i2c/i2c-core-base.c
+++ b/drivers/i2c/i2c-core-base.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Linux I2C core
  *
@@ -71,18 +73,21 @@ static bool is_registered;
 
 int i2c_transfer_trace_reg(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	static_key_slow_inc(&i2c_trace_msg);
 	return 0;
 }
 
 void i2c_transfer_trace_unreg(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	static_key_slow_dec(&i2c_trace_msg);
 }
 
 const struct i2c_device_id *i2c_match_id(const struct i2c_device_id *id,
 						const struct i2c_client *client)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(id && client))
 		return NULL;
 
@@ -97,6 +102,7 @@ EXPORT_SYMBOL_GPL(i2c_match_id);
 
 static int i2c_device_match(struct device *dev, struct device_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_client	*client = i2c_verify_client(dev);
 	struct i2c_driver	*driver;
 
@@ -120,6 +126,7 @@ static int i2c_device_match(struct device *dev, struct device_driver *drv)
 
 static int i2c_device_uevent(struct device *dev, struct kobj_uevent_env *env)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_client *client = to_i2c_client(dev);
 	int rc;
 
@@ -133,16 +140,19 @@ static int i2c_device_uevent(struct device *dev, struct kobj_uevent_env *env)
 /* i2c bus recovery routines */
 static int get_scl_gpio_value(struct i2c_adapter *adap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return gpio_get_value(adap->bus_recovery_info->scl_gpio);
 }
 
 static void set_scl_gpio_value(struct i2c_adapter *adap, int val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	gpio_set_value(adap->bus_recovery_info->scl_gpio, val);
 }
 
 static int get_sda_gpio_value(struct i2c_adapter *adap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return gpio_get_value(adap->bus_recovery_info->sda_gpio);
 }
 
@@ -155,6 +165,7 @@ static int i2c_get_gpios_for_recovery(struct i2c_adapter *adap)
 	ret = gpio_request_one(bri->scl_gpio, GPIOF_OPEN_DRAIN |
 			GPIOF_OUT_INIT_HIGH, "i2c-scl");
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(dev, "Can't get SCL gpio: %d\n", bri->scl_gpio);
 		return ret;
 	}
@@ -176,7 +187,9 @@ static void i2c_put_gpios_for_recovery(struct i2c_adapter *adap)
 	struct i2c_bus_recovery_info *bri = adap->bus_recovery_info;
 
 	if (bri->get_sda)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gpio_free(bri->sda_gpio);
+}
 
 	gpio_free(bri->scl_gpio);
 }
@@ -195,7 +208,9 @@ static int i2c_generic_recovery(struct i2c_adapter *adap)
 	int i = 0, val = 1, ret = 0;
 
 	if (bri->prepare_recovery)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bri->prepare_recovery(adap);
+}
 
 	bri->set_scl(adap, val);
 	ndelay(RECOVERY_NDELAY);
@@ -230,6 +245,7 @@ static int i2c_generic_recovery(struct i2c_adapter *adap)
 
 int i2c_generic_scl_recovery(struct i2c_adapter *adap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return i2c_generic_recovery(adap);
 }
 EXPORT_SYMBOL_GPL(i2c_generic_scl_recovery);
@@ -240,7 +256,9 @@ int i2c_generic_gpio_recovery(struct i2c_adapter *adap)
 
 	ret = i2c_get_gpios_for_recovery(adap);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = i2c_generic_recovery(adap);
 	i2c_put_gpios_for_recovery(adap);
@@ -251,6 +269,7 @@ EXPORT_SYMBOL_GPL(i2c_generic_gpio_recovery);
 
 int i2c_recover_bus(struct i2c_adapter *adap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!adap->bus_recovery_info)
 		return -EOPNOTSUPP;
 
@@ -265,7 +284,9 @@ static void i2c_init_recovery(struct i2c_adapter *adap)
 	char *err_str;
 
 	if (!bri)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!bri->recover_bus) {
 		err_str = "no recover_bus() found";
@@ -306,7 +327,9 @@ static int i2c_smbus_host_notify_to_irq(const struct i2c_client *client)
 	unsigned int irq;
 
 	if (!adap->host_notify_domain)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	if (client->flags & I2C_CLIENT_TEN)
 		return -EINVAL;
@@ -321,6 +344,7 @@ static int i2c_smbus_host_notify_to_irq(const struct i2c_client *client)
 
 static int i2c_device_probe(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_client	*client = i2c_verify_client(dev);
 	struct i2c_driver	*driver;
 	int status;
@@ -420,6 +444,7 @@ static int i2c_device_probe(struct device *dev)
 
 static int i2c_device_remove(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_client	*client = i2c_verify_client(dev);
 	struct i2c_driver	*driver;
 	int status = 0;
@@ -443,6 +468,7 @@ static int i2c_device_remove(struct device *dev)
 
 static void i2c_device_shutdown(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_client *client = i2c_verify_client(dev);
 	struct i2c_driver *driver;
 
@@ -455,12 +481,14 @@ static void i2c_device_shutdown(struct device *dev)
 
 static void i2c_client_dev_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(to_i2c_client(dev));
 }
 
 static ssize_t
 show_name(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%s\n", dev->type == &i2c_client_type ?
 		       to_i2c_client(dev)->name : to_i2c_adapter(dev)->name);
 }
@@ -469,6 +497,7 @@ static DEVICE_ATTR(name, S_IRUGO, show_name, NULL);
 static ssize_t
 show_modalias(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_client *client = to_i2c_client(dev);
 	int len;
 
@@ -516,6 +545,7 @@ EXPORT_SYMBOL_GPL(i2c_client_type);
  */
 struct i2c_client *i2c_verify_client(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (dev->type == &i2c_client_type)
 			? to_i2c_client(dev)
 			: NULL;
@@ -530,7 +560,9 @@ static unsigned short i2c_encode_flags_to_addr(struct i2c_client *client)
 
 	/* For some client flags, add an arbitrary offset to avoid collisions */
 	if (client->flags & I2C_CLIENT_TEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		addr |= I2C_ADDR_OFFSET_TEN_BIT;
+}
 
 	if (client->flags & I2C_CLIENT_SLAVE)
 		addr |= I2C_ADDR_OFFSET_SLAVE;
@@ -542,6 +574,7 @@ static unsigned short i2c_encode_flags_to_addr(struct i2c_client *client)
  * are purposely not enforced, except for the general call address. */
 int i2c_check_addr_validity(unsigned addr, unsigned short flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (flags & I2C_CLIENT_TEN) {
 		/* 10-bit address, all values are valid */
 		if (addr > 0x3ff)
@@ -577,6 +610,7 @@ int i2c_check_7bit_addr_validity_strict(unsigned short addr)
 
 static int __i2c_check_addr_busy(struct device *dev, void *addrp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_client	*client = i2c_verify_client(dev);
 	int			addr = *(int *)addrp;
 
@@ -588,6 +622,7 @@ static int __i2c_check_addr_busy(struct device *dev, void *addrp)
 /* walk up mux tree */
 static int i2c_check_mux_parents(struct i2c_adapter *adapter, int addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_adapter *parent = i2c_parent_is_i2c_adapter(adapter);
 	int result;
 
@@ -606,8 +641,10 @@ static int i2c_check_mux_children(struct device *dev, void *addrp)
 	int result;
 
 	if (dev->type == &i2c_adapter_type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = device_for_each_child(dev, addrp,
 						i2c_check_mux_children);
+}
 	else
 		result = __i2c_check_addr_busy(dev, addrp);
 
@@ -616,6 +653,7 @@ static int i2c_check_mux_children(struct device *dev, void *addrp)
 
 static int i2c_check_addr_busy(struct i2c_adapter *adapter, int addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_adapter *parent = i2c_parent_is_i2c_adapter(adapter);
 	int result = 0;
 
@@ -638,6 +676,7 @@ static int i2c_check_addr_busy(struct i2c_adapter *adapter, int addr)
 static void i2c_adapter_lock_bus(struct i2c_adapter *adapter,
 				 unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rt_mutex_lock(&adapter->bus_lock);
 }
 
@@ -650,6 +689,7 @@ static void i2c_adapter_lock_bus(struct i2c_adapter *adapter,
 static int i2c_adapter_trylock_bus(struct i2c_adapter *adapter,
 				   unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rt_mutex_trylock(&adapter->bus_lock);
 }
 
@@ -662,12 +702,14 @@ static int i2c_adapter_trylock_bus(struct i2c_adapter *adapter,
 static void i2c_adapter_unlock_bus(struct i2c_adapter *adapter,
 				   unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rt_mutex_unlock(&adapter->bus_lock);
 }
 
 static void i2c_dev_set_name(struct i2c_adapter *adap,
 			     struct i2c_client *client)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(&client->dev);
 
 	if (adev) {
@@ -685,6 +727,7 @@ static int i2c_dev_irq_from_resources(const struct resource *resources,
 	struct irq_data *irqd;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < num_resources; i++) {
 		const struct resource *r = &resources[i];
 
@@ -729,7 +772,9 @@ i2c_new_device(struct i2c_adapter *adap, struct i2c_board_info const *info)
 
 	client = kzalloc(sizeof *client, GFP_KERNEL);
 	if (!client)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	client->adapter = adap;
 
@@ -808,6 +853,7 @@ EXPORT_SYMBOL_GPL(i2c_new_device);
  */
 void i2c_unregister_device(struct i2c_client *client)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (client->dev.of_node)
 		of_node_clear_flag(client->dev.of_node, OF_POPULATED);
 	if (ACPI_COMPANION(&client->dev))
@@ -825,11 +871,13 @@ static const struct i2c_device_id dummy_id[] = {
 static int dummy_probe(struct i2c_client *client,
 		       const struct i2c_device_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int dummy_remove(struct i2c_client *client)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -899,6 +947,7 @@ struct i2c_client *i2c_new_secondary_device(struct i2c_client *client,
 	int i;
 
 	if (np) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i = of_property_match_string(np, "reg-names", name);
 		if (i >= 0)
 			of_property_read_u32_index(np, "reg", i, &addr);
@@ -915,6 +964,7 @@ EXPORT_SYMBOL_GPL(i2c_new_secondary_device);
 
 static void i2c_adapter_dev_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_adapter *adap = to_i2c_adapter(dev);
 	complete(&adap->dev_released);
 }
@@ -923,6 +973,7 @@ unsigned int i2c_adapter_depth(struct i2c_adapter *adapter)
 {
 	unsigned int depth = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((adapter = i2c_parent_is_i2c_adapter(adapter)))
 		depth++;
 
@@ -947,6 +998,7 @@ static ssize_t
 i2c_sysfs_new_device(struct device *dev, struct device_attribute *attr,
 		     const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_adapter *adap = to_i2c_adapter(dev);
 	struct i2c_board_info info;
 	struct i2c_client *client;
@@ -1015,6 +1067,7 @@ static ssize_t
 i2c_sysfs_delete_device(struct device *dev, struct device_attribute *attr,
 			const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_adapter *adap = to_i2c_adapter(dev);
 	struct i2c_client *client, *next;
 	unsigned short addr;
@@ -1083,6 +1136,7 @@ EXPORT_SYMBOL_GPL(i2c_adapter_type);
  */
 struct i2c_adapter *i2c_verify_adapter(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (dev->type == &i2c_adapter_type)
 			? to_i2c_adapter(dev)
 			: NULL;
@@ -1098,6 +1152,7 @@ static void i2c_scan_static_board_info(struct i2c_adapter *adapter)
 	struct i2c_devinfo	*devinfo;
 
 	down_read(&__i2c_board_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(devinfo, &__i2c_board_list, list) {
 		if (devinfo->busnum == adapter->nr
 				&& !i2c_new_device(adapter,
@@ -1129,6 +1184,7 @@ static int i2c_do_add_adapter(struct i2c_driver *driver,
 
 static int __process_new_adapter(struct device_driver *d, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return i2c_do_add_adapter(to_i2c_driver(d), data);
 }
 
@@ -1144,7 +1200,9 @@ static void i2c_host_notify_irq_teardown(struct i2c_adapter *adap)
 	irq_hw_number_t hwirq;
 
 	if (!domain)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for (hwirq = 0 ; hwirq < I2C_ADDR_7BITS_COUNT ; hwirq++)
 		irq_dispose_mapping(irq_find_mapping(domain, hwirq));
@@ -1157,6 +1215,7 @@ static int i2c_host_notify_irq_map(struct irq_domain *h,
 					  unsigned int virq,
 					  irq_hw_number_t hw_irq_num)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	irq_set_chip_and_handler(virq, &dummy_irq_chip, handle_simple_irq);
 
 	return 0;
@@ -1171,7 +1230,9 @@ static int i2c_setup_host_notify_irq_domain(struct i2c_adapter *adap)
 	struct irq_domain *domain;
 
 	if (!i2c_check_functionality(adap, I2C_FUNC_SMBUS_HOST_NOTIFY))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	domain = irq_domain_create_linear(adap->dev.fwnode,
 					  I2C_ADDR_7BITS_COUNT,
@@ -1199,7 +1260,9 @@ int i2c_handle_smbus_host_notify(struct i2c_adapter *adap, unsigned short addr)
 	int irq;
 
 	if (!adap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	irq = irq_find_mapping(adap->host_notify_domain, addr);
 	if (irq <= 0)
@@ -1311,6 +1374,7 @@ static int __i2c_add_numbered_adapter(struct i2c_adapter *adap)
 	mutex_lock(&core_lock);
 	id = idr_alloc(&i2c_adapter_idr, adap, adap->nr, adap->nr + 1, GFP_KERNEL);
 	mutex_unlock(&core_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN(id < 0, "couldn't get idr"))
 		return id == -ENOSPC ? -EBUSY : id;
 
@@ -1337,6 +1401,7 @@ int i2c_add_adapter(struct i2c_adapter *adapter)
 	int id;
 
 	if (dev->of_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		id = of_alias_get_id(dev->of_node, "i2c");
 		if (id >= 0) {
 			adapter->nr = id;
@@ -1382,6 +1447,7 @@ EXPORT_SYMBOL(i2c_add_adapter);
  */
 int i2c_add_numbered_adapter(struct i2c_adapter *adap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (adap->nr == -1) /* -1 means dynamically assign bus id */
 		return i2c_add_adapter(adap);
 
@@ -1408,6 +1474,7 @@ static void i2c_do_del_adapter(struct i2c_driver *driver,
 
 static int __unregister_client(struct device *dev, void *dummy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_client *client = i2c_verify_client(dev);
 	if (client && strcmp(client->name, "dummy"))
 		i2c_unregister_device(client);
@@ -1416,6 +1483,7 @@ static int __unregister_client(struct device *dev, void *dummy)
 
 static int __unregister_dummy(struct device *dev, void *dummy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_client *client = i2c_verify_client(dev);
 	if (client)
 		i2c_unregister_device(client);
@@ -1424,6 +1492,7 @@ static int __unregister_dummy(struct device *dev, void *dummy)
 
 static int __process_removed_adapter(struct device_driver *d, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i2c_do_del_adapter(to_i2c_driver(d), data);
 	return 0;
 }
@@ -1446,6 +1515,7 @@ void i2c_del_adapter(struct i2c_adapter *adap)
 	found = idr_find(&i2c_adapter_idr, adap->nr);
 	mutex_unlock(&core_lock);
 	if (found != adap) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("attempting to delete unregistered adapter [%s]\n", adap->name);
 		return;
 	}
@@ -1534,6 +1604,7 @@ void i2c_parse_fw_timings(struct device *dev, struct i2c_timings *t, bool use_de
 	memset(t, 0, sizeof(*t));
 
 	ret = device_property_read_u32(dev, "clock-frequency", &t->bus_freq_hz);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret && use_defaults)
 		t->bus_freq_hz = 100000;
 
@@ -1579,6 +1650,7 @@ EXPORT_SYMBOL_GPL(i2c_for_each_dev);
 
 static int __process_new_driver(struct device *dev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->type != &i2c_adapter_type)
 		return 0;
 	return i2c_do_add_adapter(data, to_i2c_adapter(dev));
@@ -1595,7 +1667,9 @@ int i2c_register_driver(struct module *owner, struct i2c_driver *driver)
 
 	/* Can't register until after driver model init */
 	if (WARN_ON(!is_registered))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAGAIN;
+}
 
 	/* add the driver to the list of i2c drivers in the driver core */
 	driver->driver.owner = owner;
@@ -1607,8 +1681,11 @@ int i2c_register_driver(struct module *owner, struct i2c_driver *driver)
 	 */
 	res = driver_register(&driver->driver);
 	if (res)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return res;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("driver [%s] registered\n", driver->driver.name);
 
 	/* Walk the adapters that are already present */
@@ -1620,6 +1697,7 @@ EXPORT_SYMBOL(i2c_register_driver);
 
 static int __process_removed_driver(struct device *dev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->type == &i2c_adapter_type)
 		i2c_do_del_adapter(data, to_i2c_adapter(dev));
 	return 0;
@@ -1632,6 +1710,7 @@ static int __process_removed_driver(struct device *dev, void *data)
  */
 void i2c_del_driver(struct i2c_driver *driver)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i2c_for_each_dev(driver, __process_removed_driver);
 
 	driver_unregister(&driver->driver);
@@ -1654,6 +1733,7 @@ EXPORT_SYMBOL(i2c_del_driver);
  */
 struct i2c_client *i2c_use_client(struct i2c_client *client)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (client && get_device(&client->dev))
 		return client;
 	return NULL;
@@ -1668,6 +1748,7 @@ EXPORT_SYMBOL(i2c_use_client);
  */
 void i2c_release_client(struct i2c_client *client)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (client)
 		put_device(&client->dev);
 }
@@ -1680,6 +1761,7 @@ struct i2c_cmd_arg {
 
 static int i2c_cmd(struct device *dev, void *_arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct i2c_client	*client = i2c_verify_client(dev);
 	struct i2c_cmd_arg	*arg = _arg;
 	struct i2c_driver	*driver;
@@ -1711,18 +1793,23 @@ static int __init i2c_init(void)
 
 	down_write(&__i2c_board_lock);
 	if (retval >= __i2c_first_dynamic_bus_num)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__i2c_first_dynamic_bus_num = retval + 1;
+}
 	up_write(&__i2c_board_lock);
 
 	retval = bus_register(&i2c_bus_type);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	is_registered = true;
 
 #ifdef CONFIG_I2C_COMPAT
 	i2c_adapter_compat_class = class_compat_register("i2c-adapter");
 	if (!i2c_adapter_compat_class) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENOMEM;
 		goto bus_err;
 	}
@@ -1731,11 +1818,16 @@ static int __init i2c_init(void)
 	if (retval)
 		goto class_err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ENABLED(CONFIG_OF_DYNAMIC))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(of_reconfig_notifier_register(&i2c_of_notifier));
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ENABLED(CONFIG_ACPI))
 		WARN_ON(acpi_reconfig_notifier_register(&i2c_acpi_notifier));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 class_err:
@@ -1750,6 +1842,7 @@ static int __init i2c_init(void)
 
 static void __exit i2c_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ENABLED(CONFIG_ACPI))
 		WARN_ON(acpi_reconfig_notifier_unregister(&i2c_acpi_notifier));
 	if (IS_ENABLED(CONFIG_OF_DYNAMIC))
@@ -1778,6 +1871,7 @@ module_exit(i2c_exit);
 
 static int i2c_quirk_error(struct i2c_adapter *adap, struct i2c_msg *msg, char *err_msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_err_ratelimited(&adap->dev, "adapter quirk: %s (addr 0x%04x, size %u, %s)\n",
 			    err_msg, msg->addr, msg->len,
 			    msg->flags & I2C_M_RD ? "read" : "write");
@@ -1791,6 +1885,7 @@ static int i2c_check_for_quirks(struct i2c_adapter *adap, struct i2c_msg *msgs,
 	bool do_len_check = true;
 
 	if (q->flags & I2C_AQ_COMB) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		max_num = 2;
 
 		/* special checks for combined messages */
@@ -1849,6 +1944,7 @@ int __i2c_transfer(struct i2c_adapter *adap, struct i2c_msg *msgs, int num)
 	unsigned long orig_jiffies;
 	int ret, try;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (adap->quirks && i2c_check_for_quirks(adap, msgs, num))
 		return -EOPNOTSUPP;
 
@@ -1931,6 +2027,7 @@ int i2c_transfer(struct i2c_adapter *adap, struct i2c_msg *msgs, int num)
 		}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (in_atomic() || irqs_disabled()) {
 			ret = i2c_trylock_bus(adap, I2C_LOCK_SEGMENT);
 			if (!ret)
@@ -2067,6 +2164,7 @@ static int i2c_detect_address(struct i2c_client *temp_client,
 	/* Make sure the address is valid */
 	err = i2c_check_7bit_addr_validity_strict(addr);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(&adapter->dev, "Invalid probe address 0x%02x\n",
 			 addr);
 		return err;
@@ -2126,6 +2224,7 @@ static int i2c_detect(struct i2c_adapter *adapter, struct i2c_driver *driver)
 	int adap_id = i2c_adapter_id(adapter);
 
 	address_list = driver->address_list;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!driver->detect || !address_list)
 		return 0;
 
@@ -2164,6 +2263,7 @@ static int i2c_detect(struct i2c_adapter *adapter, struct i2c_driver *driver)
 
 int i2c_probe_func_quick_read(struct i2c_adapter *adap, unsigned short addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return i2c_smbus_xfer(adap, addr, 0, I2C_SMBUS_READ, 0,
 			      I2C_SMBUS_QUICK, NULL) >= 0;
 }
@@ -2178,7 +2278,9 @@ i2c_new_probed_device(struct i2c_adapter *adap,
 	int i;
 
 	if (!probe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		probe = i2c_default_probe;
+}
 
 	for (i = 0; addr_list[i] != I2C_CLIENT_END; i++) {
 		/* Check address validity */
@@ -2220,6 +2322,7 @@ struct i2c_adapter *i2c_get_adapter(int nr)
 	if (!adapter)
 		goto exit;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (try_module_get(adapter->owner))
 		get_device(&adapter->dev);
 	else
@@ -2233,6 +2336,7 @@ EXPORT_SYMBOL(i2c_get_adapter);
 
 void i2c_put_adapter(struct i2c_adapter *adap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!adap)
 		return;
 
diff --git a/drivers/i2c/i2c-dev.c b/drivers/i2c/i2c-dev.c
index 6f638bb..d870457 100644
--- a/drivers/i2c/i2c-dev.c
+++ b/drivers/i2c/i2c-dev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
     i2c-dev.c - i2c-bus driver, char device interface
 
diff --git a/drivers/idle/intel_idle.c b/drivers/idle/intel_idle.c
index f0b06b1..0d585d3 100644
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * intel_idle.c - native hardware idle loop for modern Intel processors
  *
diff --git a/drivers/input/evdev.c b/drivers/input/evdev.c
index 9255714..294d329 100644
--- a/drivers/input/evdev.c
+++ b/drivers/input/evdev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Event char devices, giving access to raw input device events.
  *
@@ -78,6 +80,7 @@ static size_t evdev_get_mask_cnt(unsigned int type)
 		[EV_FF]		= FF_CNT,
 	};
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (type < EV_CNT) ? counts[type] : 0;
 }
 
@@ -115,6 +118,7 @@ static void __evdev_flush_queue(struct evdev_client *client, unsigned int type)
 	bool is_report;
 	struct input_event *ev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(type == EV_SYN);
 
 	head = client->tail;
@@ -158,6 +162,7 @@ static void __evdev_queue_syn_dropped(struct evdev_client *client)
 	struct input_event ev;
 	ktime_t time;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	time = client->clk_type == EV_CLK_REAL ?
 			ktime_get_real() :
 			client->clk_type == EV_CLK_MONO ?
@@ -183,6 +188,7 @@ static void evdev_queue_syn_dropped(struct evdev_client *client)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&client->buffer_lock, flags);
 	__evdev_queue_syn_dropped(client);
 	spin_unlock_irqrestore(&client->buffer_lock, flags);
@@ -231,6 +237,7 @@ static int evdev_set_clk_type(struct evdev_client *client, unsigned int clkid)
 static void __pass_event(struct evdev_client *client,
 			 const struct input_event *event)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	client->buffer[client->head++] = *event;
 	client->head &= client->bufsize - 1;
 
@@ -265,7 +272,9 @@ static void evdev_pass_values(struct evdev_client *client,
 	bool wakeup = false;
 
 	if (client->revoked)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	event.time = ktime_to_timeval(ev_time[client->clk_type]);
 
@@ -313,6 +322,7 @@ static void evdev_events(struct input_handle *handle,
 
 	rcu_read_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	client = rcu_dereference(evdev->grab);
 
 	if (client)
@@ -349,6 +359,7 @@ static int evdev_flush(struct file *file, fl_owner_t id)
 
 	mutex_lock(&evdev->mutex);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (evdev->exist && !client->revoked)
 		input_flush_device(&evdev->handle, file);
 
@@ -358,6 +369,7 @@ static int evdev_flush(struct file *file, fl_owner_t id)
 
 static void evdev_free(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct evdev *evdev = container_of(dev, struct evdev, dev);
 
 	input_put_device(evdev->handle.dev);
@@ -373,7 +385,9 @@ static int evdev_grab(struct evdev *evdev, struct evdev_client *client)
 	int error;
 
 	if (evdev->grab)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	error = input_grab_device(&evdev->handle);
 	if (error)
@@ -386,6 +400,7 @@ static int evdev_grab(struct evdev *evdev, struct evdev_client *client)
 
 static int evdev_ungrab(struct evdev *evdev, struct evdev_client *client)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct evdev_client *grab = rcu_dereference_protected(evdev->grab,
 					lockdep_is_held(&evdev->mutex));
 
@@ -402,6 +417,7 @@ static int evdev_ungrab(struct evdev *evdev, struct evdev_client *client)
 static void evdev_attach_client(struct evdev *evdev,
 				struct evdev_client *client)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&evdev->client_lock);
 	list_add_tail_rcu(&client->node, &evdev->client_list);
 	spin_unlock(&evdev->client_lock);
@@ -410,6 +426,7 @@ static void evdev_attach_client(struct evdev *evdev,
 static void evdev_detach_client(struct evdev *evdev,
 				struct evdev_client *client)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&evdev->client_lock);
 	list_del_rcu(&client->node);
 	spin_unlock(&evdev->client_lock);
@@ -422,14 +439,20 @@ static int evdev_open_device(struct evdev *evdev)
 
 	retval = mutex_lock_interruptible(&evdev->mutex);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	if (!evdev->exist)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENODEV;
+}
 	else if (!evdev->open++) {
 		retval = input_open_device(&evdev->handle);
 		if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			evdev->open--;
+}
 	}
 
 	mutex_unlock(&evdev->mutex);
@@ -438,6 +461,7 @@ static int evdev_open_device(struct evdev *evdev)
 
 static void evdev_close_device(struct evdev *evdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&evdev->mutex);
 
 	if (evdev->exist && !--evdev->open)
@@ -455,6 +479,7 @@ static void evdev_hangup(struct evdev *evdev)
 	struct evdev_client *client;
 
 	spin_lock(&evdev->client_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(client, &evdev->client_list, node)
 		kill_fasync(&client->fasync, SIGIO, POLL_HUP);
 	spin_unlock(&evdev->client_lock);
@@ -474,6 +499,7 @@ static int evdev_release(struct inode *inode, struct file *file)
 
 	evdev_detach_client(evdev, client);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < EV_CNT; ++i)
 		kfree(client->evmasks[i]);
 
@@ -504,9 +530,13 @@ static int evdev_open(struct inode *inode, struct file *file)
 
 	client = kzalloc(size, GFP_KERNEL | __GFP_NOWARN);
 	if (!client)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		client = vzalloc(size);
+}
 	if (!client)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	client->bufsize = bufsize;
 	spin_lock_init(&client->buffer_lock);
@@ -536,6 +566,7 @@ static ssize_t evdev_write(struct file *file, const char __user *buffer,
 	struct input_event event;
 	int retval = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (count != 0 && count < input_event_size())
 		return -EINVAL;
 
@@ -574,6 +605,7 @@ static int evdev_fetch_next_event(struct evdev_client *client,
 
 	have_event = client->packet_head != client->tail;
 	if (have_event) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*event = client->buffer[client->tail++];
 		client->tail &= client->bufsize - 1;
 	}
@@ -592,6 +624,7 @@ static ssize_t evdev_read(struct file *file, char __user *buffer,
 	size_t read = 0;
 	int error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (count != 0 && count < input_event_size())
 		return -EINVAL;
 
@@ -644,12 +677,16 @@ static unsigned int evdev_poll(struct file *file, poll_table *wait)
 	poll_wait(file, &evdev->wait, wait);
 
 	if (evdev->exist && !client->revoked)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask = POLLOUT | POLLWRNORM;
+}
 	else
 		mask = POLLHUP | POLLERR;
 
 	if (client->packet_head != client->tail)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLIN | POLLRDNORM;
+}
 
 	return mask;
 }
@@ -730,6 +767,7 @@ static int bits_from_user(unsigned long *bits, unsigned int maxbit,
 static int bits_to_user(unsigned long *bits, unsigned int maxbit,
 			unsigned int maxlen, void __user *p, int compat)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int len = compat ?
 			BITS_TO_LONGS_COMPAT(maxbit) * sizeof(compat_long_t) :
 			BITS_TO_LONGS(maxbit) * sizeof(long);
@@ -743,6 +781,7 @@ static int bits_to_user(unsigned long *bits, unsigned int maxbit,
 static int bits_from_user(unsigned long *bits, unsigned int maxbit,
 			  unsigned int maxlen, const void __user *p, int compat)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size_t chunk_size = compat ? sizeof(compat_long_t) : sizeof(long);
 	int len;
 
@@ -794,7 +833,9 @@ static int str_to_user(const char *str, unsigned int maxlen, void __user *p)
 	int len;
 
 	if (!str)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	len = strlen(str) + 1;
 	if (len > maxlen)
@@ -812,6 +853,7 @@ static int handle_eviocgbit(struct input_dev *dev,
 
 	switch (type) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	case      0: bits = dev->evbit;  len = EV_MAX;  break;
 	case EV_KEY: bits = dev->keybit; len = KEY_MAX; break;
 	case EV_REL: bits = dev->relbit; len = REL_MAX; break;
@@ -838,7 +880,9 @@ static int evdev_handle_get_keycode(struct input_dev *dev, void __user *p)
 
 	/* legacy case */
 	if (copy_from_user(ke.scancode, p, sizeof(unsigned int)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	error = input_get_keycode(dev, &ke);
 	if (error)
@@ -856,7 +900,9 @@ static int evdev_handle_get_keycode_v2(struct input_dev *dev, void __user *p)
 	int error;
 
 	if (copy_from_user(&ke, p, sizeof(ke)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	error = input_get_keycode(dev, &ke);
 	if (error)
@@ -877,7 +923,9 @@ static int evdev_handle_set_keycode(struct input_dev *dev, void __user *p)
 	int __user *ip = (int __user *)p;
 
 	if (copy_from_user(ke.scancode, p, sizeof(unsigned int)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	if (get_user(ke.keycode, ip + 1))
 		return -EFAULT;
@@ -890,7 +938,9 @@ static int evdev_handle_set_keycode_v2(struct input_dev *dev, void __user *p)
 	struct input_keymap_entry ke;
 
 	if (copy_from_user(&ke, p, sizeof(ke)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	if (ke.len > sizeof(ke.scancode))
 		return -EINVAL;
@@ -924,7 +974,9 @@ static int evdev_handle_get_val(struct evdev_client *client,
 	len = BITS_TO_LONGS(maxbit) * sizeof(unsigned long);
 	mem = kmalloc(len, GFP_KERNEL);
 	if (!mem)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	spin_lock_irq(&dev->event_lock);
 	spin_lock(&client->buffer_lock);
@@ -956,7 +1008,9 @@ static int evdev_handle_mt_request(struct input_dev *dev,
 	int i;
 
 	if (get_user(code, &ip[0]))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	if (!mt || !input_is_mt_value(code))
 		return -EINVAL;
 
@@ -973,6 +1027,7 @@ static int evdev_handle_mt_request(struct input_dev *dev,
 static int evdev_revoke(struct evdev *evdev, struct evdev_client *client,
 			struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	client->revoked = true;
 	evdev_ungrab(evdev, client);
 	input_flush_device(&evdev->handle, file);
@@ -995,7 +1050,9 @@ static int evdev_set_mask(struct evdev_client *client,
 	/* we allow unknown types and 'codes_size > size' for forward-compat */
 	cnt = evdev_get_mask_cnt(type);
 	if (!cnt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	mask = kcalloc(sizeof(unsigned long), BITS_TO_LONGS(cnt), GFP_KERNEL);
 	if (!mask)
@@ -1032,6 +1089,7 @@ static int evdev_get_mask(struct evdev_client *client,
 	/* we allow unknown types and 'codes_size > size' for forward-compat */
 	cnt = evdev_get_mask_cnt(type);
 	size = sizeof(unsigned long) * BITS_TO_LONGS(cnt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xfer_size = min_t(size_t, codes_size, size);
 
 	if (cnt > 0) {
@@ -1292,7 +1350,9 @@ static long evdev_ioctl_handler(struct file *file, unsigned int cmd,
 
 	retval = mutex_lock_interruptible(&evdev->mutex);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	if (!evdev->exist || client->revoked) {
 		retval = -ENODEV;
@@ -1308,6 +1368,7 @@ static long evdev_ioctl_handler(struct file *file, unsigned int cmd,
 
 static long evdev_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);
 }
 
@@ -1315,6 +1376,7 @@ static long evdev_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 static long evdev_ioctl_compat(struct file *file,
 				unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return evdev_ioctl_handler(file, cmd, compat_ptr(arg), 1);
 }
 #endif
@@ -1342,6 +1404,7 @@ static const struct file_operations evdev_fops = {
  */
 static void evdev_mark_dead(struct evdev *evdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&evdev->mutex);
 	evdev->exist = false;
 	mutex_unlock(&evdev->mutex);
@@ -1356,6 +1419,7 @@ static void evdev_cleanup(struct evdev *evdev)
 
 	/* evdev is marked dead so no one else accesses evdev->open */
 	if (evdev->open) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		input_flush_device(handle, NULL);
 		input_close_device(handle);
 	}
@@ -1375,6 +1439,7 @@ static int evdev_connect(struct input_handler *handler, struct input_dev *dev,
 
 	minor = input_get_new_minor(EVDEV_MINOR_BASE, EVDEV_MINORS, true);
 	if (minor < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = minor;
 		pr_err("failed to reserve new minor: %d\n", error);
 		return error;
@@ -1382,6 +1447,7 @@ static int evdev_connect(struct input_handler *handler, struct input_dev *dev,
 
 	evdev = kzalloc(sizeof(struct evdev), GFP_KERNEL);
 	if (!evdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOMEM;
 		goto err_free_minor;
 	}
@@ -1419,6 +1485,7 @@ static int evdev_connect(struct input_handler *handler, struct input_dev *dev,
 	if (error)
 		goto err_cleanup_evdev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  err_cleanup_evdev:
@@ -1467,6 +1534,7 @@ static int __init evdev_init(void)
 
 static void __exit evdev_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	input_unregister_handler(&evdev_handler);
 }
 
diff --git a/drivers/input/ff-core.c b/drivers/input/ff-core.c
index 66a46c8..aee7e7d 100644
--- a/drivers/input/ff-core.c
+++ b/drivers/input/ff-core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Force feedback support for Linux input subsystem
  *
@@ -36,6 +38,7 @@
 static int check_effect_access(struct ff_device *ff, int effect_id,
 				struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (effect_id < 0 || effect_id >= ff->max_effects ||
 	    !ff->effect_owners[effect_id])
 		return -EINVAL;
@@ -52,6 +55,7 @@ static int check_effect_access(struct ff_device *ff, int effect_id,
 static inline int check_effects_compatible(struct ff_effect *e1,
 					   struct ff_effect *e2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return e1->type == e2->type &&
 	       (e1->type != FF_PERIODIC ||
 		e1->u.periodic.waveform == e2->u.periodic.waveform);
@@ -109,6 +113,7 @@ int input_ff_upload(struct input_dev *dev, struct ff_effect *effect,
 	int ret = 0;
 	int id;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_bit(EV_FF, dev->evbit))
 		return -ENOSYS;
 
@@ -189,7 +194,9 @@ static int erase_effect(struct input_dev *dev, int effect_id,
 
 	error = check_effect_access(ff, effect_id, file);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	spin_lock_irq(&dev->event_lock);
 	ff->playback(dev, effect_id, 0);
@@ -225,6 +232,7 @@ int input_ff_erase(struct input_dev *dev, int effect_id, struct file *file)
 	struct ff_device *ff = dev->ff;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_bit(EV_FF, dev->evbit))
 		return -ENOSYS;
 
@@ -250,6 +258,7 @@ int input_ff_flush(struct input_dev *dev, struct file *file)
 	struct ff_device *ff = dev->ff;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&dev->dev, "flushing now\n");
 
 	mutex_lock(&ff->mutex);
@@ -276,7 +285,9 @@ int input_ff_event(struct input_dev *dev, unsigned int type,
 	struct ff_device *ff = dev->ff;
 
 	if (type != EV_FF)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	switch (code) {
 	case FF_GAIN:
@@ -321,6 +332,7 @@ int input_ff_create(struct input_dev *dev, unsigned int max_effects)
 	int i;
 
 	if (!max_effects) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&dev->dev, "cannot allocate device without any effects\n");
 		return -EINVAL;
 	}
@@ -380,8 +392,12 @@ void input_ff_destroy(struct input_dev *dev)
 
 	__clear_bit(EV_FF, dev->evbit);
 	if (ff) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ff->destroy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ff->destroy(ff);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(ff->private);
 		kfree(ff->effects);
 		kfree(ff);
diff --git a/drivers/input/input-mt.c b/drivers/input/input-mt.c
index a1bbec9..328ce20 100644
--- a/drivers/input/input-mt.c
+++ b/drivers/input/input-mt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Input Multitouch Library
  *
@@ -16,6 +18,7 @@
 
 static void copy_abs(struct input_dev *dev, unsigned int dst, unsigned int src)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->absinfo && test_bit(src, dev->absbit)) {
 		dev->absinfo[dst] = dev->absinfo[src];
 		dev->absinfo[dst].fuzz = 0;
@@ -45,7 +48,9 @@ int input_mt_init_slots(struct input_dev *dev, unsigned int num_slots,
 	int i;
 
 	if (!num_slots)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (mt)
 		return mt->num_slots != num_slots ? -EINVAL : 0;
 
@@ -113,6 +118,7 @@ EXPORT_SYMBOL(input_mt_init_slots);
 void input_mt_destroy_slots(struct input_dev *dev)
 {
 	if (dev->mt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(dev->mt->red);
 		kfree(dev->mt);
 	}
@@ -140,7 +146,9 @@ void input_mt_report_slot_state(struct input_dev *dev,
 	int id;
 
 	if (!mt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	slot = &mt->slots[mt->slot];
 	slot->frame = mt->frame;
@@ -172,6 +180,7 @@ EXPORT_SYMBOL(input_mt_report_slot_state);
  */
 void input_mt_report_finger_count(struct input_dev *dev, int count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	input_event(dev, EV_KEY, BTN_TOOL_FINGER, count == 1);
 	input_event(dev, EV_KEY, BTN_TOOL_DOUBLETAP, count == 2);
 	input_event(dev, EV_KEY, BTN_TOOL_TRIPLETAP, count == 3);
@@ -198,7 +207,9 @@ void input_mt_report_pointer_emulation(struct input_dev *dev, bool use_count)
 	int oldid, count, i;
 
 	if (!mt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	oldest = NULL;
 	oldid = mt->trkid;
@@ -258,6 +269,7 @@ static void __input_mt_drop_unused(struct input_dev *dev, struct input_mt *mt)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < mt->num_slots; i++) {
 		if (!input_mt_is_used(mt, &mt->slots[i])) {
 			input_mt_slot(dev, i);
@@ -277,6 +289,7 @@ void input_mt_drop_unused(struct input_dev *dev)
 	struct input_mt *mt = dev->mt;
 
 	if (mt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__input_mt_drop_unused(dev, mt);
 		mt->frame++;
 	}
@@ -297,7 +310,9 @@ void input_mt_sync_frame(struct input_dev *dev)
 	bool use_count = false;
 
 	if (!mt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (mt->flags & INPUT_MT_DROP_UNUSED)
 		__input_mt_drop_unused(dev, mt);
@@ -316,7 +331,9 @@ static int adjust_dual(int *begin, int step, int *end, int eq, int mu)
 	int f, *p, s, c;
 
 	if (begin == end)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	f = *begin;
 	p = begin + step;
@@ -345,6 +362,7 @@ static void find_reduced_matrix(int *w, int nr, int nc, int nrc, int mu)
 {
 	int i, k, sum;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (k = 0; k < nrc; k++) {
 		for (i = 0; i < nr; i++)
 			adjust_dual(w + i, nr, w + i + nrc, nr <= nc, mu);
@@ -365,6 +383,7 @@ static int input_mt_set_matrix(struct input_mt *mt,
 	int *w = mt->red;
 	int x, y;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (s = mt->slots; s != mt->slots + mt->num_slots; s++) {
 		if (!input_mt_is_active(s))
 			continue;
@@ -385,6 +404,7 @@ static void input_mt_set_slots(struct input_mt *mt,
 	struct input_mt_slot *s;
 	int *w = mt->red, j;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (j = 0; j != num_pos; j++)
 		slots[j] = -1;
 
@@ -441,6 +461,7 @@ int input_mt_assign_slots(struct input_dev *dev, int *slots,
 	int mu = 2 * dmax * dmax;
 	int nrc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!mt || !mt->red)
 		return -ENXIO;
 	if (num_pos > mt->num_slots)
@@ -474,7 +495,9 @@ int input_mt_get_slot_by_key(struct input_dev *dev, int key)
 	struct input_mt_slot *s;
 
 	if (!mt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	for (s = mt->slots; s != mt->slots + mt->num_slots; s++)
 		if (input_mt_is_active(s) && s->key == key)
diff --git a/drivers/input/input.c b/drivers/input/input.c
index 762bfb9..c07ae43 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * The input core
  *
@@ -58,6 +60,7 @@ static inline int is_event_supported(unsigned int code,
 
 static int input_defuzz_abs_event(int value, int old_val, int fuzz)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (fuzz) {
 		if (value > old_val - fuzz / 2 && value < old_val + fuzz / 2)
 			return old_val;
@@ -74,6 +77,7 @@ static int input_defuzz_abs_event(int value, int old_val, int fuzz)
 
 static void input_start_autorepeat(struct input_dev *dev, int code)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(EV_REP, dev->evbit) &&
 	    dev->rep[REP_PERIOD] && dev->rep[REP_DELAY] &&
 	    dev->timer.data) {
@@ -85,6 +89,7 @@ static void input_start_autorepeat(struct input_dev *dev, int code)
 
 static void input_stop_autorepeat(struct input_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	del_timer(&dev->timer);
 }
 
@@ -101,6 +106,7 @@ static unsigned int input_to_handler(struct input_handle *handle,
 	struct input_value *v;
 
 	if (handler->filter) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (v = vals; v != vals + count; v++) {
 			if (handler->filter(handle, v->type, v->code, v->value))
 				continue;
@@ -135,7 +141,9 @@ static void input_pass_values(struct input_dev *dev,
 	struct input_value *v;
 
 	if (!count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	rcu_read_lock();
 
@@ -184,6 +192,7 @@ static void input_repeat_key(unsigned long data)
 	struct input_dev *dev = (void *) data;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dev->event_lock, flags);
 
 	if (test_bit(dev->repeat_key, dev->key) &&
@@ -288,12 +297,15 @@ static int input_get_disposition(struct input_dev *dev,
 
 			/* auto-repeat bypasses state updates */
 			if (value == 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				disposition = INPUT_PASS_TO_HANDLERS;
 				break;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!!test_bit(code, dev->key) != !!value) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__change_bit(code, dev->key);
 				disposition = INPUT_PASS_TO_HANDLERS;
 			}
@@ -304,6 +316,7 @@ static int input_get_disposition(struct input_dev *dev,
 		if (is_event_supported(code, dev->swbit, SW_MAX) &&
 		    !!test_bit(code, dev->sw) != !!value) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__change_bit(code, dev->sw);
 			disposition = INPUT_PASS_TO_HANDLERS;
 		}
@@ -311,19 +324,25 @@ static int input_get_disposition(struct input_dev *dev,
 
 	case EV_ABS:
 		if (is_event_supported(code, dev->absbit, ABS_MAX))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			disposition = input_handle_abs_event(dev, code, &value);
+}
 
 		break;
 
 	case EV_REL:
 		if (is_event_supported(code, dev->relbit, REL_MAX) && value)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			disposition = INPUT_PASS_TO_HANDLERS;
+}
 
 		break;
 
 	case EV_MSC:
 		if (is_event_supported(code, dev->mscbit, MSC_MAX))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			disposition = INPUT_PASS_TO_ALL;
+}
 
 		break;
 
@@ -331,6 +350,7 @@ static int input_get_disposition(struct input_dev *dev,
 		if (is_event_supported(code, dev->ledbit, LED_MAX) &&
 		    !!test_bit(code, dev->led) != !!value) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__change_bit(code, dev->led);
 			disposition = INPUT_PASS_TO_ALL;
 		}
@@ -339,14 +359,19 @@ static int input_get_disposition(struct input_dev *dev,
 	case EV_SND:
 		if (is_event_supported(code, dev->sndbit, SND_MAX)) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!!test_bit(code, dev->snd) != !!value)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__change_bit(code, dev->snd);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			disposition = INPUT_PASS_TO_ALL;
 		}
 		break;
 
 	case EV_REP:
 		if (code <= REP_MAX && value >= 0 && dev->rep[code] != value) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->rep[code] = value;
 			disposition = INPUT_PASS_TO_ALL;
 		}
@@ -354,7 +379,9 @@ static int input_get_disposition(struct input_dev *dev,
 
 	case EV_FF:
 		if (value >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			disposition = INPUT_PASS_TO_ALL;
+}
 		break;
 
 	case EV_PWR:
@@ -372,18 +399,25 @@ static void input_handle_event(struct input_dev *dev,
 	int disposition = input_get_disposition(dev, type, code, &value);
 
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_input_randomness(type, code, value);
+}
 
 	if ((disposition & INPUT_PASS_TO_DEVICE) && dev->event)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->event(dev, type, code, value);
+}
 
 	if (!dev->vals)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (disposition & INPUT_PASS_TO_HANDLERS) {
 		struct input_value *v;
 
 		if (disposition & INPUT_SLOT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			v = &dev->vals[dev->num_vals++];
 			v->type = EV_ABS;
 			v->code = ABS_MT_SLOT;
@@ -398,9 +432,12 @@ static void input_handle_event(struct input_dev *dev,
 
 	if (disposition & INPUT_FLUSH) {
 		if (dev->num_vals >= 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			input_pass_values(dev, dev->vals, dev->num_vals);
+}
 		dev->num_vals = 0;
 	} else if (dev->num_vals >= dev->max_vals - 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->vals[dev->num_vals++] = input_value_sync;
 		input_pass_values(dev, dev->vals, dev->num_vals);
 		dev->num_vals = 0;
@@ -432,6 +469,7 @@ void input_event(struct input_dev *dev,
 
 	if (is_event_supported(type, dev->evbit, EV_MAX)) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irqsave(&dev->event_lock, flags);
 		input_handle_event(dev, type, code, value);
 		spin_unlock_irqrestore(&dev->event_lock, flags);
@@ -460,10 +498,12 @@ void input_inject_event(struct input_handle *handle,
 	if (is_event_supported(type, dev->evbit, EV_MAX)) {
 		spin_lock_irqsave(&dev->event_lock, flags);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock();
 		grab = rcu_dereference(dev->grab);
 		if (!grab || grab == handle)
 			input_handle_event(dev, type, code, value);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 
 		spin_unlock_irqrestore(&dev->event_lock, flags);
@@ -480,6 +520,7 @@ EXPORT_SYMBOL(input_inject_event);
  */
 void input_alloc_absinfo(struct input_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev->absinfo)
 		dev->absinfo = kcalloc(ABS_CNT, sizeof(*dev->absinfo),
 					GFP_KERNEL);
@@ -495,7 +536,9 @@ void input_set_abs_params(struct input_dev *dev, unsigned int axis,
 
 	input_alloc_absinfo(dev);
 	if (!dev->absinfo)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	absinfo = &dev->absinfo[axis];
 	absinfo->minimum = min;
@@ -524,7 +567,9 @@ int input_grab_device(struct input_handle *handle)
 
 	retval = mutex_lock_interruptible(&dev->mutex);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	if (dev->grab) {
 		retval = -EBUSY;
@@ -544,6 +589,7 @@ static void __input_release_device(struct input_handle *handle)
 	struct input_dev *dev = handle->dev;
 	struct input_handle *grabber;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	grabber = rcu_dereference_protected(dev->grab,
 					    lockdep_is_held(&dev->mutex));
 	if (grabber == handle) {
@@ -590,9 +636,12 @@ int input_open_device(struct input_handle *handle)
 
 	retval = mutex_lock_interruptible(&dev->mutex);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	if (dev->going_away) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENODEV;
 		goto out;
 	}
@@ -600,9 +649,12 @@ int input_open_device(struct input_handle *handle)
 	handle->open++;
 
 	if (!dev->users++ && dev->open)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = dev->open(dev);
+}
 
 	if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->users--;
 		if (!--handle->open) {
 			/*
@@ -626,7 +678,9 @@ int input_flush_device(struct input_handle *handle, struct file *file)
 
 	retval = mutex_lock_interruptible(&dev->mutex);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	if (dev->flush)
 		retval = dev->flush(dev, file);
@@ -651,6 +705,7 @@ void input_close_device(struct input_handle *handle)
 
 	__input_release_device(handle);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!--dev->users && dev->close)
 		dev->close(dev);
 
@@ -677,6 +732,7 @@ static void input_dev_release_keys(struct input_dev *dev)
 	int code;
 
 	if (is_event_supported(EV_KEY, dev->evbit, EV_MAX)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_set_bit(code, dev->key, KEY_CNT) {
 			input_pass_event(dev, EV_KEY, code, 0);
 			need_sync = true;
@@ -715,6 +771,7 @@ static void input_disconnect_device(struct input_dev *dev)
 	 */
 	input_dev_release_keys(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(handle, &dev->h_list, d_node)
 		handle->open = 0;
 
@@ -734,6 +791,7 @@ static void input_disconnect_device(struct input_dev *dev)
 int input_scancode_to_scalar(const struct input_keymap_entry *ke,
 			     unsigned int *scancode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (ke->len) {
 	case 1:
 		*scancode = *((u8 *)ke->scancode);
@@ -763,6 +821,7 @@ EXPORT_SYMBOL(input_scancode_to_scalar);
 static unsigned int input_fetch_keycode(struct input_dev *dev,
 					unsigned int index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (dev->keycodesize) {
 	case 1:
 		return ((u8 *)dev->keycode)[index];
@@ -782,7 +841,9 @@ static int input_default_getkeycode(struct input_dev *dev,
 	int error;
 
 	if (!dev->keycodesize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (ke->flags & INPUT_KEYMAP_BY_INDEX)
 		index = ke->index;
@@ -812,7 +873,9 @@ static int input_default_setkeycode(struct input_dev *dev,
 	int i;
 
 	if (!dev->keycodesize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (ke->flags & INPUT_KEYMAP_BY_INDEX) {
 		index = ke->index;
@@ -876,6 +939,7 @@ int input_get_keycode(struct input_dev *dev, struct input_keymap_entry *ke)
 	unsigned long flags;
 	int retval;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dev->event_lock, flags);
 	retval = dev->getkeycode(dev, ke);
 	spin_unlock_irqrestore(&dev->event_lock, flags);
@@ -900,7 +964,9 @@ int input_set_keycode(struct input_dev *dev,
 	int retval;
 
 	if (ke->keycode > KEY_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	spin_lock_irqsave(&dev->event_lock, flags);
 
@@ -937,20 +1003,36 @@ bool input_match_device_id(const struct input_dev *dev,
 			   const struct input_device_id *id)
 {
 	if (id->flags & INPUT_DEVICE_ID_MATCH_BUS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (id->bustype != dev->id.bustype)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
+}
 
 	if (id->flags & INPUT_DEVICE_ID_MATCH_VENDOR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (id->vendor != dev->id.vendor)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
+}
 
 	if (id->flags & INPUT_DEVICE_ID_MATCH_PRODUCT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (id->product != dev->id.product)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
+}
 
 	if (id->flags & INPUT_DEVICE_ID_MATCH_VERSION)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (id->version != dev->id.version)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
+}
 
 	if (!bitmap_subset(id->evbit, dev->evbit, EV_MAX) ||
 	    !bitmap_subset(id->keybit, dev->keybit, KEY_MAX) ||
@@ -962,9 +1044,11 @@ bool input_match_device_id(const struct input_dev *dev,
 	    !bitmap_subset(id->ffbit, dev->ffbit, FF_MAX) ||
 	    !bitmap_subset(id->swbit, dev->swbit, SW_MAX) ||
 	    !bitmap_subset(id->propbit, dev->propbit, INPUT_PROP_MAX)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 EXPORT_SYMBOL(input_match_device_id);
@@ -977,10 +1061,12 @@ static const struct input_device_id *input_match_device(struct input_handler *ha
 	for (id = handler->id_table; id->flags || id->driver_info; id++) {
 		if (input_match_device_id(dev, id) &&
 		    (!handler->match || handler->match(handler, dev))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return id;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -991,13 +1077,18 @@ static int input_attach_handler(struct input_dev *dev, struct input_handler *han
 
 	id = input_match_device(handler, dev);
 	if (!id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	error = handler->connect(handler, dev, id);
 	if (error && error != -ENODEV)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to attach handler %s to device %s, error: %d\n",
 		       handler->name, kobject_name(&dev->dev.kobj), error);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -1010,13 +1101,20 @@ static int input_bits_to_string(char *buf, int buf_size,
 
 	if (in_compat_syscall()) {
 		u32 dword = bits >> 32;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dword || !skip_empty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			len += snprintf(buf, buf_size, "%x ", dword);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dword = bits & 0xffffffffUL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dword || !skip_empty || len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			len += snprintf(buf + len, max(buf_size - len, 0),
 					"%x", dword);
+}
 	} else {
 		if (bits || !skip_empty)
 			len += snprintf(buf, buf_size, "%lx", bits);
@@ -1050,6 +1148,7 @@ static inline void input_wakeup_procfs_readers(void)
 
 static unsigned int input_proc_devices_poll(struct file *file, poll_table *wait)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	poll_wait(file, &input_devices_poll_wait, wait);
 	if (file->f_version != input_devices_state) {
 		file->f_version = input_devices_state;
@@ -1088,6 +1187,7 @@ static void *input_devices_seq_start(struct seq_file *seq, loff_t *pos)
 
 static void *input_devices_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_list_next(v, &input_dev_list, pos);
 }
 
@@ -1096,8 +1196,10 @@ static void input_seq_stop(struct seq_file *seq, void *v)
 	union input_seq_state *state = (union input_seq_state *)&seq->private;
 
 	if (state->mutex_acquired)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&input_mutex);
 }
+}
 
 static void input_seq_print_bitmap(struct seq_file *seq, const char *name,
 				   unsigned long *bitmap, int max)
@@ -1108,6 +1210,7 @@ static void input_seq_print_bitmap(struct seq_file *seq, const char *name,
 
 	seq_printf(seq, "B: %s=", name);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = BITS_TO_LONGS(max) - 1; i >= 0; i--) {
 		if (input_bits_to_string(buf, sizeof(buf),
 					 bitmap[i], skip_empty)) {
@@ -1127,6 +1230,7 @@ static void input_seq_print_bitmap(struct seq_file *seq, const char *name,
 
 static int input_devices_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct input_dev *dev = container_of(v, struct input_dev, node);
 	const char *path = kobject_get_path(&dev->dev.kobj, GFP_KERNEL);
 	struct input_handle *handle;
@@ -1179,6 +1283,7 @@ static const struct seq_operations input_devices_seq_ops = {
 
 static int input_proc_devices_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &input_devices_seq_ops);
 }
 
@@ -1221,6 +1326,7 @@ static void *input_handlers_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 
 static int input_handlers_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct input_handler *handler = container_of(v, struct input_handler, node);
 	union input_seq_state *state = (union input_seq_state *)&seq->private;
 
@@ -1243,6 +1349,7 @@ static const struct seq_operations input_handlers_seq_ops = {
 
 static int input_proc_handlers_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &input_handlers_seq_ops);
 }
 
@@ -1260,7 +1367,9 @@ static int __init input_proc_init(void)
 
 	proc_bus_input_dir = proc_mkdir("bus/input", NULL);
 	if (!proc_bus_input_dir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	entry = proc_create("devices", 0, proc_bus_input_dir,
 			    &input_devices_fileops);
@@ -1272,15 +1381,19 @@ static int __init input_proc_init(void)
 	if (!entry)
 		goto fail2;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
  fail2:	remove_proc_entry("devices", proc_bus_input_dir);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
  fail1: remove_proc_entry("bus/input", NULL);
 	return -ENOMEM;
 }
 
 static void input_proc_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	remove_proc_entry("devices", proc_bus_input_dir);
 	remove_proc_entry("handlers", proc_bus_input_dir);
 	remove_proc_entry("bus/input", NULL);
@@ -1351,7 +1464,9 @@ static int input_print_modalias(char *buf, int size, struct input_dev *id,
 				'w', id->swbit, 0, SW_MAX);
 
 	if (add_cr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len += snprintf(buf + len, max(size - len, 0), "\n");
+}
 
 	return len;
 }
@@ -1360,6 +1475,7 @@ static ssize_t input_dev_show_modalias(struct device *dev,
 				       struct device_attribute *attr,
 				       char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct input_dev *id = to_input_dev(dev);
 	ssize_t len;
 
@@ -1376,6 +1492,7 @@ static ssize_t input_dev_show_properties(struct device *dev,
 					 struct device_attribute *attr,
 					 char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct input_dev *input_dev = to_input_dev(dev);
 	int len = input_print_bitmap(buf, PAGE_SIZE, input_dev->propbit,
 				     INPUT_PROP_MAX, true);
@@ -1435,6 +1552,7 @@ static int input_print_bitmap(char *buf, int buf_size, unsigned long *bitmap,
 		len += input_bits_to_string(buf + len, max(buf_size - len, 0),
 					    bitmap[i], skip_empty);
 		if (len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skip_empty = false;
 			if (i > 0)
 				len += snprintf(buf + len, max(buf_size - len, 0), " ");
@@ -1448,7 +1566,9 @@ static int input_print_bitmap(char *buf, int buf_size, unsigned long *bitmap,
 		len = snprintf(buf, buf_size, "%d", 0);
 
 	if (add_cr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len += snprintf(buf + len, max(buf_size - len, 0), "\n");
+}
 
 	return len;
 }
@@ -1524,13 +1644,17 @@ static int input_add_uevent_bm_var(struct kobj_uevent_env *env,
 	int len;
 
 	if (add_uevent_var(env, "%s", name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	len = input_print_bitmap(&env->buf[env->buflen - 1],
 				 sizeof(env->buf) - env->buflen,
 				 bitmap, max, false);
 	if (len >= (sizeof(env->buf) - env->buflen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	env->buflen += len;
 	return 0;
@@ -1542,13 +1666,17 @@ static int input_add_uevent_modalias_var(struct kobj_uevent_env *env,
 	int len;
 
 	if (add_uevent_var(env, "MODALIAS="))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	len = input_print_modalias(&env->buf[env->buflen - 1],
 				   sizeof(env->buf) - env->buflen,
 				   dev, 0);
 	if (len >= (sizeof(env->buf) - env->buflen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	env->buflen += len;
 	return 0;
@@ -1587,7 +1715,9 @@ static int input_dev_uevent(struct device *device, struct kobj_uevent_env *env)
 	if (dev->phys)
 		INPUT_ADD_HOTPLUG_VAR("PHYS=\"%s\"", dev->phys);
 	if (dev->uniq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INPUT_ADD_HOTPLUG_VAR("UNIQ=\"%s\"", dev->uniq);
+}
 
 	INPUT_ADD_HOTPLUG_BM_VAR("PROP=", dev->propbit, INPUT_PROP_MAX);
 
@@ -1595,9 +1725,13 @@ static int input_dev_uevent(struct device *device, struct kobj_uevent_env *env)
 	if (test_bit(EV_KEY, dev->evbit))
 		INPUT_ADD_HOTPLUG_BM_VAR("KEY=", dev->keybit, KEY_MAX);
 	if (test_bit(EV_REL, dev->evbit))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INPUT_ADD_HOTPLUG_BM_VAR("REL=", dev->relbit, REL_MAX);
+}
 	if (test_bit(EV_ABS, dev->evbit))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INPUT_ADD_HOTPLUG_BM_VAR("ABS=", dev->absbit, ABS_MAX);
+}
 	if (test_bit(EV_MSC, dev->evbit))
 		INPUT_ADD_HOTPLUG_BM_VAR("MSC=", dev->mscbit, MSC_MAX);
 	if (test_bit(EV_LED, dev->evbit))
@@ -1605,9 +1739,13 @@ static int input_dev_uevent(struct device *device, struct kobj_uevent_env *env)
 	if (test_bit(EV_SND, dev->evbit))
 		INPUT_ADD_HOTPLUG_BM_VAR("SND=", dev->sndbit, SND_MAX);
 	if (test_bit(EV_FF, dev->evbit))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INPUT_ADD_HOTPLUG_BM_VAR("FF=", dev->ffbit, FF_MAX);
+}
 	if (test_bit(EV_SW, dev->evbit))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INPUT_ADD_HOTPLUG_BM_VAR("SW=", dev->swbit, SW_MAX);
+}
 
 	INPUT_ADD_HOTPLUG_MODALIAS_VAR(dev);
 
@@ -1633,6 +1771,7 @@ static int input_dev_uevent(struct device *device, struct kobj_uevent_env *env)
 
 static void input_dev_toggle(struct input_dev *dev, bool activate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev->event)
 		return;
 
@@ -1658,6 +1797,7 @@ void input_reset_device(struct input_dev *dev)
 	unsigned long flags;
 
 	mutex_lock(&dev->mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dev->event_lock, flags);
 
 	input_dev_toggle(dev, true);
@@ -1671,6 +1811,7 @@ EXPORT_SYMBOL(input_reset_device);
 #ifdef CONFIG_PM_SLEEP
 static int input_dev_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct input_dev *input_dev = to_input_dev(dev);
 
 	spin_lock_irq(&input_dev->event_lock);
@@ -1691,6 +1832,7 @@ static int input_dev_suspend(struct device *dev)
 
 static int input_dev_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct input_dev *input_dev = to_input_dev(dev);
 
 	spin_lock_irq(&input_dev->event_lock);
@@ -1705,6 +1847,7 @@ static int input_dev_resume(struct device *dev)
 
 static int input_dev_freeze(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct input_dev *input_dev = to_input_dev(dev);
 
 	spin_lock_irq(&input_dev->event_lock);
@@ -1722,6 +1865,7 @@ static int input_dev_freeze(struct device *dev)
 
 static int input_dev_poweroff(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct input_dev *input_dev = to_input_dev(dev);
 
 	spin_lock_irq(&input_dev->event_lock);
@@ -1814,6 +1958,7 @@ static void devm_input_device_release(struct device *dev, void *res)
 	struct input_devres *devres = res;
 	struct input_dev *input = devres->input;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(dev, "%s: dropping reference to %s\n",
 		__func__, dev_name(&input->dev));
 	input_put_device(input);
@@ -1845,7 +1990,9 @@ struct input_dev *devm_input_allocate_device(struct device *dev)
 	devres = devres_alloc(devm_input_device_release,
 			      sizeof(*devres), GFP_KERNEL);
 	if (!devres)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	input = input_allocate_device();
 	if (!input) {
@@ -1881,10 +2028,12 @@ void input_free_device(struct input_dev *dev)
 {
 	if (dev) {
 		if (dev->devres_managed)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			WARN_ON(devres_destroy(dev->dev.parent,
 						devm_input_device_release,
 						devm_input_device_match,
 						dev));
+}
 		input_put_device(dev);
 	}
 }
@@ -1913,8 +2062,11 @@ void input_set_capability(struct input_dev *dev, unsigned int type, unsigned int
 	case EV_ABS:
 		input_alloc_absinfo(dev);
 		if (!dev->absinfo)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__set_bit(code, dev->absbit);
 		break;
 
@@ -1960,25 +2112,33 @@ static unsigned int input_estimate_events_per_packet(struct input_dev *dev)
 	unsigned int events;
 
 	if (dev->mt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mt_slots = dev->mt->num_slots;
 	} else if (test_bit(ABS_MT_TRACKING_ID, dev->absbit)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mt_slots = dev->absinfo[ABS_MT_TRACKING_ID].maximum -
 			   dev->absinfo[ABS_MT_TRACKING_ID].minimum + 1,
 		mt_slots = clamp(mt_slots, 2, 32);
 	} else if (test_bit(ABS_MT_POSITION_X, dev->absbit)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mt_slots = 2;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mt_slots = 0;
 	}
 
 	events = mt_slots + 1; /* count SYN_MT_REPORT and SYN_REPORT */
 
 	if (test_bit(EV_ABS, dev->evbit))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_set_bit(i, dev->absbit, ABS_CNT)
 			events += input_is_mt_axis(i) ? mt_slots : 1;
+}
 
 	if (test_bit(EV_REL, dev->evbit))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		events += bitmap_weight(dev->relbit, REL_CNT);
+}
 
 	/* Make room for KEY and MSC events */
 	events += 7;
@@ -2013,6 +2173,7 @@ static void __input_unregister_device(struct input_dev *dev)
 
 	mutex_lock(&input_mutex);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(handle, next, &dev->h_list, d_node)
 		handle->handler->disconnect(handle);
 	WARN_ON(!list_empty(&dev->h_list));
@@ -2032,6 +2193,7 @@ static void devm_input_device_unregister(struct device *dev, void *res)
 	struct input_devres *devres = res;
 	struct input_dev *input = devres->input;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(dev, "%s: unregistering device %s\n",
 		__func__, dev_name(&input->dev));
 	__input_unregister_device(input);
@@ -2086,17 +2248,22 @@ int input_register_device(struct input_dev *dev)
 	int error;
 
 	if (test_bit(EV_ABS, dev->evbit) && !dev->absinfo) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&dev->dev,
 			"Absolute device without dev->absinfo, refusing to register\n");
 		return -EINVAL;
 	}
 
 	if (dev->devres_managed) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		devres = devres_alloc(devm_input_device_unregister,
 				      sizeof(*devres), GFP_KERNEL);
 		if (!devres)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		devres->input = dev;
 	}
 
@@ -2116,6 +2283,7 @@ int input_register_device(struct input_dev *dev)
 	dev->max_vals = dev->hint_events_per_packet + 2;
 	dev->vals = kcalloc(dev->max_vals, sizeof(*dev->vals), GFP_KERNEL);
 	if (!dev->vals) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOMEM;
 		goto err_devres_free;
 	}
@@ -2125,7 +2293,9 @@ int input_register_device(struct input_dev *dev)
 	 * is handled by the driver itself and we don't do it in input.c.
 	 */
 	if (!dev->rep[REP_DELAY] && !dev->rep[REP_PERIOD])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		input_enable_softrepeat(dev, 250, 33);
+}
 
 	if (!dev->getkeycode)
 		dev->getkeycode = input_default_getkeycode;
@@ -2157,10 +2327,12 @@ int input_register_device(struct input_dev *dev)
 	mutex_unlock(&input_mutex);
 
 	if (dev->devres_managed) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(dev->dev.parent, "%s: registering %s with devres.\n",
 			__func__, dev_name(&dev->dev));
 		devres_add(dev->dev.parent, devres);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_device_del:
@@ -2183,6 +2355,7 @@ EXPORT_SYMBOL(input_register_device);
  */
 void input_unregister_device(struct input_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->devres_managed) {
 		WARN_ON(devres_destroy(dev->dev.parent,
 					devm_input_device_unregister,
@@ -2215,7 +2388,9 @@ int input_register_handler(struct input_handler *handler)
 
 	error = mutex_lock_interruptible(&input_mutex);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	INIT_LIST_HEAD(&handler->h_list);
 
@@ -2244,6 +2419,7 @@ void input_unregister_handler(struct input_handler *handler)
 
 	mutex_lock(&input_mutex);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(handle, next, &handler->h_list, h_node)
 		handler->disconnect(handle);
 	WARN_ON(!list_empty(&handler->h_list));
@@ -2277,11 +2453,13 @@ int input_handler_for_each_handle(struct input_handler *handler, void *data,
 	rcu_read_lock();
 
 	list_for_each_entry_rcu(handle, &handler->h_list, h_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = fn(handle, data);
 		if (retval)
 			break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	return retval;
@@ -2311,7 +2489,9 @@ int input_register_handle(struct input_handle *handle)
 	 */
 	error = mutex_lock_interruptible(&dev->mutex);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	/*
 	 * Filters go to the head of the list, normal handlers
@@ -2335,6 +2515,7 @@ int input_register_handle(struct input_handle *handle)
 	if (handler->start)
 		handler->start(handle);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(input_register_handle);
@@ -2391,9 +2572,12 @@ int input_get_new_minor(int legacy_base, unsigned int legacy_num,
 					   legacy_base + legacy_num,
 					   GFP_KERNEL);
 		if (minor >= 0 || !allow_dynamic)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return minor;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ida_simple_get(&input_ida,
 			      INPUT_FIRST_DYNAMIC_DEV, INPUT_MAX_CHAR_DEVICES,
 			      GFP_KERNEL);
@@ -2409,6 +2593,7 @@ EXPORT_SYMBOL(input_get_new_minor);
  */
 void input_free_minor(unsigned int minor)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ida_simple_remove(&input_ida, minor);
 }
 EXPORT_SYMBOL(input_free_minor);
@@ -2419,6 +2604,7 @@ static int __init input_init(void)
 
 	err = class_register(&input_class);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("unable to register input_dev class\n");
 		return err;
 	}
@@ -2430,19 +2616,24 @@ static int __init input_init(void)
 	err = register_chrdev_region(MKDEV(INPUT_MAJOR, 0),
 				     INPUT_MAX_CHAR_DEVICES, "input");
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("unable to register char major %d", INPUT_MAJOR);
 		goto fail2;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
  fail2:	input_proc_exit();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
  fail1:	class_unregister(&input_class);
 	return err;
 }
 
 static void __exit input_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	input_proc_exit();
 	unregister_chrdev_region(MKDEV(INPUT_MAJOR, 0),
 				 INPUT_MAX_CHAR_DEVICES);
diff --git a/drivers/input/joydev.c b/drivers/input/joydev.c
index 7b29a89..baef768 100644
--- a/drivers/input/joydev.c
+++ b/drivers/input/joydev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Joystick device driver for the input driver suite.
  *
diff --git a/drivers/input/keyboard/atkbd.c b/drivers/input/keyboard/atkbd.c
index 7e75835..012bfe3 100644
--- a/drivers/input/keyboard/atkbd.c
+++ b/drivers/input/keyboard/atkbd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * AT and PS/2 keyboard driver
  *
@@ -316,6 +318,7 @@ static bool atkbd_need_xlate(unsigned long xl_bit, unsigned char code)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (code == ATKBD_RET_EMUL0 || code == ATKBD_RET_EMUL1)
 		return false;
 
@@ -335,6 +338,7 @@ static void atkbd_calculate_xl_bit(struct atkbd *atkbd, unsigned char code)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(xl_table); i++) {
 		if (!((code ^ xl_table[i]) & 0x7f)) {
 			if (code & 0x80)
@@ -353,12 +357,17 @@ static void atkbd_calculate_xl_bit(struct atkbd *atkbd, unsigned char code)
 static unsigned int atkbd_compat_scancode(struct atkbd *atkbd, unsigned int code)
 {
 	if (atkbd->set == 3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (atkbd->emul == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			code |= 0x100;
+}
         } else {
 		code = (code & 0x7f) | ((code & 0x80) << 1);
 		if (atkbd->emul == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			code |= 0x80;
+}
 	}
 
 	return code;
@@ -372,6 +381,7 @@ static unsigned int atkbd_compat_scancode(struct atkbd *atkbd, unsigned int code
 static irqreturn_t atkbd_interrupt(struct serio *serio, unsigned char data,
 				   unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct atkbd *atkbd = serio_get_drvdata(serio);
 	struct input_dev *dev = atkbd->dev;
 	unsigned int code = data;
@@ -379,6 +389,7 @@ static irqreturn_t atkbd_interrupt(struct serio *serio, unsigned char data,
 	int value;
 	unsigned short keycode;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&serio->dev, "Received %02x flags %02x\n", data, flags);
 
 #if !defined(__i386__) && !defined (__x86_64__)
@@ -401,25 +412,36 @@ static irqreturn_t atkbd_interrupt(struct serio *serio, unsigned char data,
 		if  (ps2_handle_response(&atkbd->ps2dev, data))
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!atkbd->enabled)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	input_event(dev, EV_MSC, MSC_RAW, code);
 
 	if (atkbd_platform_scancode_fixup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		code = atkbd_platform_scancode_fixup(atkbd, code);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atkbd->translated) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (atkbd->emul || atkbd_need_xlate(atkbd->xl_bit, code)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atkbd->release = code >> 7;
 			code &= 0x7f;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!atkbd->emul)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atkbd_calculate_xl_bit(atkbd, data);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (code) {
 	case ATKBD_RET_BAT:
 		atkbd->enabled = false;
@@ -444,22 +466,32 @@ static irqreturn_t atkbd_interrupt(struct serio *serio, unsigned char data,
 		goto out;
 	case ATKBD_RET_ERR:
 		atkbd->err_count++;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(&serio->dev, "Keyboard on %s reports too many keys pressed.\n",
 			serio->phys);
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	code = atkbd_compat_scancode(atkbd, code);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atkbd->emul && --atkbd->emul)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	keycode = atkbd->keycode[code];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(atkbd->release && test_bit(code, atkbd->force_release_mask)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (keycode != ATKBD_KEY_NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			input_event(dev, EV_MSC, MSC_SCAN, code);
+}
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (keycode) {
 	case ATKBD_KEY_NULL:
 		break;
@@ -497,36 +529,46 @@ static irqreturn_t atkbd_interrupt(struct serio *serio, unsigned char data,
 		break;
 	default:
 		if (atkbd->release) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			value = 0;
 			atkbd->last = 0;
 		} else if (!atkbd->softrepeat && test_bit(keycode, dev->key)) {
 			/* Workaround Toshiba laptop multiple keypress */
 			value = time_before(jiffies, atkbd->time) && atkbd->last == code ? 1 : 2;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			value = 1;
 			atkbd->last = code;
 			atkbd->time = jiffies + msecs_to_jiffies(dev->rep[REP_DELAY]) / 2;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		input_event(dev, EV_KEY, keycode, value);
 		input_sync(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (value && test_bit(code, atkbd->force_release_mask)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			input_event(dev, EV_MSC, MSC_SCAN, code);
 			input_report_key(dev, keycode, 0);
 			input_sync(dev);
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atkbd->scroll) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (click != -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			input_report_key(dev, BTN_MIDDLE, click);
+}
 		input_report_rel(dev, REL_WHEEL,
 				 atkbd->release ? -scroll : scroll);
 		input_report_rel(dev, REL_HWHEEL, hscroll);
 		input_sync(dev);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atkbd->release = false;
 out:
 	return IRQ_HANDLED;
@@ -544,6 +586,7 @@ static int atkbd_set_repeat_rate(struct atkbd *atkbd)
 	unsigned char param;
 	int i = 0, j = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (i < ARRAY_SIZE(period) - 1 && period[i] < dev->rep[REP_PERIOD])
 		i++;
 	dev->rep[REP_PERIOD] = period[i];
@@ -561,6 +604,7 @@ static int atkbd_set_leds(struct atkbd *atkbd)
 	struct input_dev *dev = atkbd->dev;
 	unsigned char param[2];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	param[0] = (test_bit(LED_SCROLLL, dev->led) ? 1 : 0)
 		 | (test_bit(LED_NUML,    dev->led) ? 2 : 0)
 		 | (test_bit(LED_CAPSL,   dev->led) ? 4 : 0);
@@ -589,6 +633,7 @@ static int atkbd_set_leds(struct atkbd *atkbd)
 
 static void atkbd_event_work(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct atkbd *atkbd = container_of(work, struct atkbd, event_work.work);
 
 	mutex_lock(&atkbd->mutex);
@@ -619,6 +664,7 @@ static void atkbd_event_work(struct work_struct *work)
  */
 static void atkbd_schedule_event_work(struct atkbd *atkbd, int event_bit)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long delay = msecs_to_jiffies(50);
 
 	if (time_after(jiffies, atkbd->event_jiffies + delay))
@@ -639,6 +685,7 @@ static void atkbd_schedule_event_work(struct atkbd *atkbd, int event_bit)
 static int atkbd_event(struct input_dev *dev,
 			unsigned int type, unsigned int code, int value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct atkbd *atkbd = input_get_drvdata(dev);
 
 	if (!atkbd->write)
@@ -679,6 +726,7 @@ static inline void atkbd_enable(struct atkbd *atkbd)
 
 static inline void atkbd_disable(struct atkbd *atkbd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	serio_pause_rx(atkbd->ps2dev.serio);
 	atkbd->enabled = false;
 	serio_continue_rx(atkbd->ps2dev.serio);
@@ -693,12 +741,14 @@ static int atkbd_activate(struct atkbd *atkbd)
  */
 
 	if (ps2_command(ps2dev, NULL, ATKBD_CMD_ENABLE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&ps2dev->serio->dev,
 			"Failed to enable keyboard on %s\n",
 			ps2dev->serio->phys);
 		return -1;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -712,10 +762,12 @@ static void atkbd_deactivate(struct atkbd *atkbd)
 	struct ps2dev *ps2dev = &atkbd->ps2dev;
 
 	if (ps2_command(ps2dev, NULL, ATKBD_CMD_RESET_DIS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&ps2dev->serio->dev,
 			"Failed to deactivate keyboard on %s\n",
 			ps2dev->serio->phys);
 }
+}
 
 /*
  * atkbd_probe() probes for an AT keyboard on a serio port.
@@ -733,10 +785,13 @@ static int atkbd_probe(struct atkbd *atkbd)
  */
 
 	if (atkbd_reset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ps2_command(ps2dev, NULL, ATKBD_CMD_RESET_BAT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_warn(&ps2dev->serio->dev,
 				 "keyboard reset failed on %s\n",
 				 ps2dev->serio->phys);
+}
 
 /*
  * Then we check the keyboard ID. We should get 0xab83 under normal conditions.
@@ -746,6 +801,7 @@ static int atkbd_probe(struct atkbd *atkbd)
  */
 
 	param[0] = param[1] = 0xa5;	/* initialize with invalid values */
+}
 	if (ps2_command(ps2dev, param, ATKBD_CMD_GETID)) {
 
 /*
@@ -755,17 +811,23 @@ static int atkbd_probe(struct atkbd *atkbd)
  */
 		param[0] = 0;
 		if (ps2_command(ps2dev, param, ATKBD_CMD_SETLEDS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atkbd->id = 0xabba;
 		return 0;
 	}
 
 	if (!ps2_is_keyboard_id(param[0]))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	atkbd->id = (param[0] << 8) | param[1];
 
 	if (atkbd->id == 0xaca1 && atkbd->translated) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&ps2dev->serio->dev,
 			"NCD terminal keyboards are only supported on non-translating controllers. "
 			"Use i8042.direct=1 to disable translation.\n");
@@ -779,6 +841,7 @@ static int atkbd_probe(struct atkbd *atkbd)
 	if (!atkbd_skip_deactivate)
 		atkbd_deactivate(atkbd);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -801,49 +864,74 @@ static int atkbd_select_set(struct atkbd *atkbd, int target_set, int allow_extra
  */
 
 	if (atkbd->translated)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 2;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atkbd->id == 0xaca1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		param[0] = 3;
 		ps2_command(ps2dev, param, ATKBD_CMD_SSCANSET);
 		return 3;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (allow_extra) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		param[0] = 0x71;
 		if (!ps2_command(ps2dev, param, ATKBD_CMD_EX_ENABLE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atkbd->extra = true;
 			return 2;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atkbd_terminal) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ps2_command(ps2dev, param, ATKBD_CMD_SETALL_MB);
 		return 3;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (target_set != 3)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 2;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ps2_command(ps2dev, param, ATKBD_CMD_OK_GETID)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atkbd->id = param[0] << 8 | param[1];
 		return 2;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	param[0] = 3;
 	if (ps2_command(ps2dev, param, ATKBD_CMD_SSCANSET))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 2;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	param[0] = 0;
 	if (ps2_command(ps2dev, param, ATKBD_CMD_GSCANSET))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 2;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (param[0] != 3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		param[0] = 2;
 		if (ps2_command(ps2dev, param, ATKBD_CMD_SSCANSET))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 2;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ps2_command(ps2dev, param, ATKBD_CMD_SETALL_MBR);
 
 	return 3;
@@ -860,7 +948,9 @@ static int atkbd_reset_state(struct atkbd *atkbd)
 
 	param[0] = 0;
 	if (ps2_command(ps2dev, param, ATKBD_CMD_SETLEDS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 /*
  * Set autorepeat to fastest possible.
@@ -868,7 +958,9 @@ static int atkbd_reset_state(struct atkbd *atkbd)
 
 	param[0] = 0;
 	if (ps2_command(ps2dev, param, ATKBD_CMD_SETREP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	return 0;
 }
@@ -880,6 +972,7 @@ static int atkbd_reset_state(struct atkbd *atkbd)
 
 static void atkbd_cleanup(struct serio *serio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct atkbd *atkbd = serio_get_drvdata(serio);
 
 	atkbd_disable(atkbd);
@@ -893,6 +986,7 @@ static void atkbd_cleanup(struct serio *serio)
 
 static void atkbd_disconnect(struct serio *serio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct atkbd *atkbd = serio_get_drvdata(serio);
 
 	sysfs_remove_group(&serio->dev.kobj, &atkbd_attribute_group);
@@ -924,9 +1018,11 @@ static void atkbd_apply_forced_release_keylist(struct atkbd* atkbd,
 	unsigned int i;
 
 	if (atkbd->set == 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; keys[i] != -1U; i++)
 			__set_bit(keys[i], atkbd->force_release_mask);
 }
+}
 
 /*
  * Most special keys (Fn+F?) on Dell laptops do not generate release
@@ -987,6 +1083,7 @@ static unsigned int atkbd_volume_forced_release_keys[] = {
 static unsigned int atkbd_oqo_01plus_scancode_fixup(struct atkbd *atkbd,
 						    unsigned int code)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atkbd->translated && atkbd->emul == 1 &&
 	    (code == 0x64 || code == 0x65 || code == 0x66)) {
 		atkbd->emul = 0;
@@ -1015,17 +1112,28 @@ static void atkbd_set_keycode_table(struct atkbd *atkbd)
 			atkbd->keycode[i] = atkbd_set2_keycode[scancode];
 			atkbd->keycode[i | 0x80] = atkbd_set2_keycode[scancode | 0x80];
 			if (atkbd->scroll)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				for (j = 0; j < ARRAY_SIZE(atkbd_scroll_keys); j++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if ((scancode | 0x80) == atkbd_scroll_keys[j].set2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						atkbd->keycode[i | 0x80] = atkbd_scroll_keys[j].keycode;
+}
+}
+}
 		}
 	} else if (atkbd->set == 3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(atkbd->keycode, atkbd_set3_keycode, sizeof(atkbd->keycode));
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(atkbd->keycode, atkbd_set2_keycode, sizeof(atkbd->keycode));
 
 		if (atkbd->scroll)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			for (i = 0; i < ARRAY_SIZE(atkbd_scroll_keys); i++) {
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				scancode = atkbd_scroll_keys[i].set2;
 				atkbd->keycode[scancode] = atkbd_scroll_keys[i].keycode;
 		}
@@ -1047,8 +1155,10 @@ static void atkbd_set_keycode_table(struct atkbd *atkbd)
  * Perform additional fixups
  */
 	if (atkbd_platform_fixup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atkbd_platform_fixup(atkbd, atkbd_platform_fixup_data);
 }
+}
 
 /*
  * atkbd_set_device_attrs() sets up keyboard's input device structure
@@ -1060,8 +1170,10 @@ static void atkbd_set_device_attrs(struct atkbd *atkbd)
 	int i;
 
 	if (atkbd->extra)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		snprintf(atkbd->name, sizeof(atkbd->name),
 			 "AT Set 2 Extra keyboard");
+}
 	else
 		snprintf(atkbd->name, sizeof(atkbd->name),
 			 "AT %s Set %d keyboard",
@@ -1091,9 +1203,11 @@ static void atkbd_set_device_attrs(struct atkbd *atkbd)
 	}
 
 	if (atkbd->extra)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		input_dev->ledbit[0] |= BIT_MASK(LED_COMPOSE) |
 			BIT_MASK(LED_SUSPEND) | BIT_MASK(LED_SLEEP) |
 			BIT_MASK(LED_MUTE) | BIT_MASK(LED_MISC);
+}
 
 	if (!atkbd->softrepeat) {
 		input_dev->rep[REP_DELAY] = 250;
@@ -1104,6 +1218,7 @@ static void atkbd_set_device_attrs(struct atkbd *atkbd)
 		BIT_MASK(MSC_RAW) | BIT_MASK(MSC_SCAN);
 
 	if (atkbd->scroll) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		input_dev->evbit[0] |= BIT_MASK(EV_REL);
 		input_dev->relbit[0] = BIT_MASK(REL_WHEEL) |
 			BIT_MASK(REL_HWHEEL);
@@ -1163,8 +1278,11 @@ static int atkbd_connect(struct serio *serio, struct serio_driver *drv)
 	atkbd->scroll = atkbd_scroll;
 
 	if (atkbd->softrepeat)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atkbd->softraw = true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	serio_set_drvdata(serio, atkbd);
 
 	err = serio_open(serio, drv);
@@ -1174,6 +1292,7 @@ static int atkbd_connect(struct serio *serio, struct serio_driver *drv)
 	if (atkbd->write) {
 
 		if (atkbd_probe(atkbd)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENODEV;
 			goto fail3;
 		}
@@ -1182,6 +1301,7 @@ static int atkbd_connect(struct serio *serio, struct serio_driver *drv)
 		atkbd_reset_state(atkbd);
 
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atkbd->set = 2;
 		atkbd->id = 0xab00;
 	}
@@ -1201,10 +1321,13 @@ static int atkbd_connect(struct serio *serio, struct serio_driver *drv)
 	if (err)
 		goto fail4;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
  fail4: sysfs_remove_group(&serio->dev.kobj, &atkbd_attribute_group);
  fail3:	serio_close(serio);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
  fail2:	serio_set_drvdata(serio, NULL);
  fail1:	input_free_device(dev);
 	kfree(atkbd);
@@ -1218,6 +1341,7 @@ static int atkbd_connect(struct serio *serio, struct serio_driver *drv)
 
 static int atkbd_reconnect(struct serio *serio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct atkbd *atkbd = serio_get_drvdata(serio);
 	struct serio_driver *drv = serio->drv;
 	int retval = -1;
@@ -1310,6 +1434,7 @@ static struct serio_driver atkbd_drv = {
 static ssize_t atkbd_attr_show_helper(struct device *dev, char *buf,
 				ssize_t (*handler)(struct atkbd *, char *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 	struct atkbd *atkbd = serio_get_drvdata(serio);
 
@@ -1319,6 +1444,7 @@ static ssize_t atkbd_attr_show_helper(struct device *dev, char *buf,
 static ssize_t atkbd_attr_set_helper(struct device *dev, const char *buf, size_t count,
 				ssize_t (*handler)(struct atkbd *, const char *, size_t))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 	struct atkbd *atkbd = serio_get_drvdata(serio);
 	int retval;
@@ -1338,6 +1464,7 @@ static ssize_t atkbd_attr_set_helper(struct device *dev, const char *buf, size_t
 
 static ssize_t atkbd_show_extra(struct atkbd *atkbd, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", atkbd->extra ? 1 : 0);
 }
 
@@ -1350,7 +1477,9 @@ static ssize_t atkbd_set_extra(struct atkbd *atkbd, const char *buf, size_t coun
 	unsigned char old_set;
 
 	if (!atkbd->write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	err = kstrtouint(buf, 10, &value);
 	if (err)
@@ -1399,6 +1528,7 @@ static ssize_t atkbd_set_extra(struct atkbd *atkbd, const char *buf, size_t coun
 
 static ssize_t atkbd_show_force_release(struct atkbd *atkbd, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size_t len = scnprintf(buf, PAGE_SIZE - 1, "%*pbl",
 			       ATKBD_KEYMAP_SIZE, atkbd->force_release_mask);
 
@@ -1417,7 +1547,9 @@ static ssize_t atkbd_set_force_release(struct atkbd *atkbd,
 
 	err = bitmap_parselist(buf, new_mask, ATKBD_KEYMAP_SIZE);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	memcpy(atkbd->force_release_mask, new_mask, sizeof(atkbd->force_release_mask));
 	return count;
@@ -1426,6 +1558,7 @@ static ssize_t atkbd_set_force_release(struct atkbd *atkbd,
 
 static ssize_t atkbd_show_scroll(struct atkbd *atkbd, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", atkbd->scroll ? 1 : 0);
 }
 
@@ -1438,7 +1571,9 @@ static ssize_t atkbd_set_scroll(struct atkbd *atkbd, const char *buf, size_t cou
 
 	err = kstrtouint(buf, 10, &value);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (value > 1)
 		return -EINVAL;
@@ -1474,6 +1609,7 @@ static ssize_t atkbd_set_scroll(struct atkbd *atkbd, const char *buf, size_t cou
 
 static ssize_t atkbd_show_set(struct atkbd *atkbd, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", atkbd->set);
 }
 
@@ -1486,7 +1622,9 @@ static ssize_t atkbd_set_set(struct atkbd *atkbd, const char *buf, size_t count)
 	bool old_extra;
 
 	if (!atkbd->write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	err = kstrtouint(buf, 10, &value);
 	if (err)
@@ -1529,6 +1667,7 @@ static ssize_t atkbd_set_set(struct atkbd *atkbd, const char *buf, size_t count)
 
 static ssize_t atkbd_show_softrepeat(struct atkbd *atkbd, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", atkbd->softrepeat ? 1 : 0);
 }
 
@@ -1540,7 +1679,9 @@ static ssize_t atkbd_set_softrepeat(struct atkbd *atkbd, const char *buf, size_t
 	bool old_softrepeat, old_softraw;
 
 	if (!atkbd->write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	err = kstrtouint(buf, 10, &value);
 	if (err)
@@ -1583,6 +1724,7 @@ static ssize_t atkbd_set_softrepeat(struct atkbd *atkbd, const char *buf, size_t
 
 static ssize_t atkbd_show_softraw(struct atkbd *atkbd, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", atkbd->softraw ? 1 : 0);
 }
 
@@ -1595,7 +1737,9 @@ static ssize_t atkbd_set_softraw(struct atkbd *atkbd, const char *buf, size_t co
 
 	err = kstrtouint(buf, 10, &value);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (value > 1)
 		return -EINVAL;
@@ -1629,11 +1773,13 @@ static ssize_t atkbd_set_softraw(struct atkbd *atkbd, const char *buf, size_t co
 
 static ssize_t atkbd_show_err_count(struct atkbd *atkbd, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%lu\n", atkbd->err_count);
 }
 
 static int __init atkbd_setup_forced_release(const struct dmi_system_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atkbd_platform_fixup = atkbd_apply_forced_release_keylist;
 	atkbd_platform_fixup_data = id->driver_data;
 
@@ -1642,6 +1788,7 @@ static int __init atkbd_setup_forced_release(const struct dmi_system_id *id)
 
 static int __init atkbd_setup_scancode_fixup(const struct dmi_system_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atkbd_platform_scancode_fixup = id->driver_data;
 
 	return 1;
@@ -1649,6 +1796,7 @@ static int __init atkbd_setup_scancode_fixup(const struct dmi_system_id *id)
 
 static int __init atkbd_deactivate_fixup(const struct dmi_system_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atkbd_skip_deactivate = true;
 	return 1;
 }
@@ -1814,6 +1962,7 @@ static int __init atkbd_init(void)
 
 static void __exit atkbd_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	serio_unregister_driver(&atkbd_drv);
 }
 
diff --git a/drivers/input/misc/atlas_btns.c b/drivers/input/misc/atlas_btns.c
index 6423aac..56fb507 100644
--- a/drivers/input/misc/atlas_btns.c
+++ b/drivers/input/misc/atlas_btns.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  atlas_btns.c - Atlas Wallmount Touchscreen ACPI Extras
  *
diff --git a/drivers/input/misc/pcspkr.c b/drivers/input/misc/pcspkr.c
index 56ddba2..813dd3d 100644
--- a/drivers/input/misc/pcspkr.c
+++ b/drivers/input/misc/pcspkr.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  PC Speaker beeper driver for Linux
  *
diff --git a/drivers/input/misc/uinput.c b/drivers/input/misc/uinput.c
index 443151d..cd22d46 100644
--- a/drivers/input/misc/uinput.c
+++ b/drivers/input/misc/uinput.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  User level driver support for input subsystem
  *
diff --git a/drivers/input/misc/xen-kbdfront.c b/drivers/input/misc/xen-kbdfront.c
index d91f3b1..7f7a2e9 100644
--- a/drivers/input/misc/xen-kbdfront.c
+++ b/drivers/input/misc/xen-kbdfront.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Xen para-virtual input device
  *
diff --git a/drivers/input/mousedev.c b/drivers/input/mousedev.c
index 2d7f691..02fe6e8 100644
--- a/drivers/input/mousedev.c
+++ b/drivers/input/mousedev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Input driver to ExplorerPS/2 device driver module.
  *
diff --git a/drivers/input/serio/hyperv-keyboard.c b/drivers/input/serio/hyperv-keyboard.c
index 25151d9..430db3c 100644
--- a/drivers/input/serio/hyperv-keyboard.c
+++ b/drivers/input/serio/hyperv-keyboard.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Copyright (c) 2013, Microsoft Corporation.
  *
diff --git a/drivers/input/serio/i8042-x86ia64io.h b/drivers/input/serio/i8042-x86ia64io.h
index 6cbbdc6..7e5755ed 100644
--- a/drivers/input/serio/i8042-x86ia64io.h
+++ b/drivers/input/serio/i8042-x86ia64io.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #ifndef _I8042_X86IA64IO_H
 #define _I8042_X86IA64IO_H
 
diff --git a/drivers/input/serio/i8042.c b/drivers/input/serio/i8042.c
index 824f4c1..0097062 100644
--- a/drivers/input/serio/i8042.c
+++ b/drivers/input/serio/i8042.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  i8042 keyboard and mouse controller driver for Linux
  *
@@ -62,6 +64,7 @@ static int i8042_set_reset(const char *val, const struct kernel_param *kp)
 	bool reset;
 
 	if (val) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = kstrtobool(val, &reset);
 		if (error)
 			return error;
@@ -177,12 +180,14 @@ static bool (*i8042_platform_filter)(unsigned char data, unsigned char str,
 
 void i8042_lock_chip(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&i8042_mutex);
 }
 EXPORT_SYMBOL(i8042_lock_chip);
 
 void i8042_unlock_chip(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&i8042_mutex);
 }
 EXPORT_SYMBOL(i8042_unlock_chip);
@@ -193,6 +198,7 @@ int i8042_install_filter(bool (*filter)(unsigned char data, unsigned char str,
 	unsigned long flags;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&i8042_lock, flags);
 
 	if (i8042_platform_filter) {
@@ -214,6 +220,7 @@ int i8042_remove_filter(bool (*filter)(unsigned char data, unsigned char str,
 	unsigned long flags;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&i8042_lock, flags);
 
 	if (i8042_platform_filter != filter) {
@@ -240,6 +247,7 @@ static int i8042_wait_read(void)
 	int i = 0;
 
 	while ((~i8042_read_status() & I8042_STR_OBF) && (i < I8042_CTL_TIMEOUT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		udelay(50);
 		i++;
 	}
@@ -251,6 +259,7 @@ static int i8042_wait_write(void)
 	int i = 0;
 
 	while ((i8042_read_status() & I8042_STR_IBF) && (i < I8042_CTL_TIMEOUT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		udelay(50);
 		i++;
 	}
@@ -272,17 +281,22 @@ static int i8042_flush(void)
 	spin_lock_irqsave(&i8042_lock, flags);
 
 	while ((str = i8042_read_status()) & I8042_STR_OBF) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (count++ < I8042_BUFFER_SIZE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			udelay(50);
 			data = i8042_read_data();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dbg("%02x <- i8042 (flush, %s)\n",
 			    data, str & I8042_STR_AUXDATA ? "aux" : "kbd");
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -EIO;
 			break;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&i8042_lock, flags);
 
 	return retval;
@@ -301,19 +315,26 @@ static int __i8042_command(unsigned char *param, int command)
 	int i, error;
 
 	if (i8042_noloop && command == I8042_CMD_AUX_LOOP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	error = i8042_wait_write();
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	dbg("%02x -> i8042 (command)\n", command & 0xff);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i8042_write_command(command & 0xff);
 
 	for (i = 0; i < ((command >> 12) & 0xf); i++) {
 		error = i8042_wait_write();
 		if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dbg("     -- i8042 (wait write timeout)\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
 		}
 		dbg("%02x -> i8042 (parameter)\n", param[i]);
@@ -323,13 +344,17 @@ static int __i8042_command(unsigned char *param, int command)
 	for (i = 0; i < ((command >> 8) & 0xf); i++) {
 		error = i8042_wait_read();
 		if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dbg("     -- i8042 (wait read timeout)\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
 		}
 
 		if (command == I8042_CMD_AUX_LOOP &&
 		    !(i8042_read_status() & I8042_STR_AUXDATA)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dbg("     -- i8042 (auxerr)\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
 		}
 
@@ -337,6 +362,7 @@ static int __i8042_command(unsigned char *param, int command)
 		dbg("%02x <- i8042 (return)\n", param[i]);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -366,9 +392,11 @@ static int i8042_kbd_write(struct serio *port, unsigned char c)
 
 	if (!(retval = i8042_wait_write())) {
 		dbg("%02x -> i8042 (kbd-data)\n", c);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i8042_write_data(c);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&i8042_lock, flags);
 
 	return retval;
@@ -400,10 +428,12 @@ static void i8042_port_close(struct serio *serio)
 	const char *port_name;
 
 	if (serio == i8042_ports[I8042_AUX_PORT_NO].serio) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		irq_bit = I8042_CTR_AUXINT;
 		disable_bit = I8042_CTR_AUXDIS;
 		port_name = "AUX";
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		irq_bit = I8042_CTR_KBDINT;
 		disable_bit = I8042_CTR_KBDDIS;
 		port_name = "KBD";
@@ -411,14 +441,18 @@ static void i8042_port_close(struct serio *serio)
 
 	i8042_ctr &= ~irq_bit;
 	if (i8042_command(&i8042_ctr, I8042_CMD_CTL_WCTR))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("Can't write CTR while closing %s port\n", port_name);
+}
 
 	udelay(50);
 
 	i8042_ctr &= ~disable_bit;
 	i8042_ctr |= irq_bit;
 	if (i8042_command(&i8042_ctr, I8042_CMD_CTL_WCTR))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Can't reactivate %s port\n", port_name);
+}
 
 	/*
 	 * See if there is any data appeared while we were messing with
@@ -477,19 +511,26 @@ static bool i8042_filter(unsigned char data, unsigned char str,
 			 struct serio *serio)
 {
 	if (unlikely(i8042_suppress_kbd_ack)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((~str & I8042_STR_AUXDATA) &&
 		    (data == 0xfa || data == 0xfe)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			i8042_suppress_kbd_ack--;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dbg("Extra keyboard ACK - filtered out\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
 		}
 	}
 
 	if (i8042_platform_filter && i8042_platform_filter(data, str, serio)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dbg("Filtered out by platform filter\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -512,15 +553,19 @@ static irqreturn_t i8042_interrupt(int irq, void *dev_id)
 
 	spin_lock_irqsave(&i8042_lock, flags);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	str = i8042_read_status();
 	if (unlikely(~str & I8042_STR_OBF)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irqrestore(&i8042_lock, flags);
 		if (irq)
 			dbg("Interrupt %d, without any data\n", irq);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 0;
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	data = i8042_read_data();
 
 	if (i8042_mux_present && (str & I8042_STR_AUXDATA)) {
@@ -529,6 +574,7 @@ static irqreturn_t i8042_interrupt(int irq, void *dev_id)
 
 		dfl = 0;
 		if (str & I8042_STR_MUXERR) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dbg("MUX error, status is %02x, data is %02x\n",
 			    str, data);
 /*
@@ -544,9 +590,11 @@ static irqreturn_t i8042_interrupt(int irq, void *dev_id)
  * was transmitted (if transmission happened not too long ago).
  */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			switch (data) {
 				default:
 					if (time_before(jiffies, last_transmit + HZ/10)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						str = last_str;
 						break;
 					}
@@ -554,10 +602,12 @@ static irqreturn_t i8042_interrupt(int irq, void *dev_id)
 				case 0xfc:
 				case 0xfd:
 				case 0xfe: dfl = SERIO_TIMEOUT; data = 0xfe; break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				case 0xff: dfl = SERIO_PARITY;  data = 0xfe; break;
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port_no = I8042_MUX_PORT_NO + ((str >> 6) & 3);
 		last_str = str;
 		last_transmit = jiffies;
@@ -570,6 +620,7 @@ static irqreturn_t i8042_interrupt(int irq, void *dev_id)
 				I8042_AUX_PORT_NO : I8042_KBD_PORT_NO;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	port = &i8042_ports[port_no];
 	serio = port->exists ? port->serio : NULL;
 
@@ -599,12 +650,14 @@ static int i8042_enable_kbd_port(void)
 	i8042_ctr |= I8042_CTR_KBDINT;
 
 	if (i8042_command(&i8042_ctr, I8042_CMD_CTL_WCTR)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i8042_ctr &= ~I8042_CTR_KBDINT;
 		i8042_ctr |= I8042_CTR_KBDDIS;
 		pr_err("Failed to enable KBD port\n");
 		return -EIO;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -618,12 +671,14 @@ static int i8042_enable_aux_port(void)
 	i8042_ctr |= I8042_CTR_AUXINT;
 
 	if (i8042_command(&i8042_ctr, I8042_CMD_CTL_WCTR)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i8042_ctr &= ~I8042_CTR_AUXINT;
 		i8042_ctr |= I8042_CTR_AUXDIS;
 		pr_err("Failed to enable AUX port\n");
 		return -EIO;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -637,6 +692,7 @@ static int i8042_enable_mux_ports(void)
 	unsigned char param;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < I8042_NUM_MUX_PORTS; i++) {
 		i8042_command(&param, I8042_CMD_MUX_PFX + i);
 		i8042_command(&param, I8042_CMD_AUX_ENABLE);
@@ -668,24 +724,36 @@ static int i8042_set_mux_mode(bool multiplex, unsigned char *mux_version)
 
 	param = val = 0xf0;
 	if (i8042_command(&param, I8042_CMD_AUX_LOOP) || param != val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 	param = val = multiplex ? 0x56 : 0xf6;
 	if (i8042_command(&param, I8042_CMD_AUX_LOOP) || param != val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 	param = val = multiplex ? 0xa4 : 0xa5;
 	if (i8042_command(&param, I8042_CMD_AUX_LOOP) || param == val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 /*
  * Workaround for interference with USB Legacy emulation
  * that causes a v10.12 MUX to be found.
  */
 	if (param == 0xac)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mux_version)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*mux_version = param;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -700,8 +768,11 @@ static int __init i8042_check_mux(void)
 	unsigned char mux_version;
 
 	if (i8042_set_mux_mode(true, &mux_version))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_info("Detected active multiplexing controller, rev %d.%d\n",
 		(mux_version >> 4) & 0xf, mux_version & 0xf);
 
@@ -712,10 +783,12 @@ static int __init i8042_check_mux(void)
 	i8042_ctr &= ~I8042_CTR_AUXINT;
 
 	if (i8042_command(&i8042_ctr, I8042_CMD_CTL_WCTR)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Failed to disable AUX port, can't use MUX\n");
 		return -EIO;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i8042_mux_present = true;
 
 	return 0;
@@ -734,16 +807,20 @@ static irqreturn_t __init i8042_aux_test_irq(int irq, void *dev_id)
 	int ret = 0;
 
 	spin_lock_irqsave(&i8042_lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	str = i8042_read_status();
 	if (str & I8042_STR_OBF) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		data = i8042_read_data();
 		dbg("%02x <- i8042 (aux_test_irq, %s)\n",
 		    data, str & I8042_STR_AUXDATA ? "aux" : "kbd");
 		if (i8042_irq_being_tested &&
 		    data == 0xa5 && (str & I8042_STR_AUXDATA))
 			complete(&i8042_aux_irq_delivered);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&i8042_lock, flags);
 
 	return IRQ_RETVAL(ret);
@@ -768,12 +845,17 @@ static int __init i8042_toggle_aux(bool on)
 		udelay(50);
 
 		if (i8042_command(&param, I8042_CMD_CTL_RCTR))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
 
 		if (!(param & I8042_CTR_AUXDIS) == on)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -1;
 }
 
@@ -814,6 +896,7 @@ static int __init i8042_check_aux(void)
  * AUX ports, we test for this only when the LOOP command failed.
  */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (i8042_command(&param, I8042_CMD_AUX_TEST) ||
 		    (param && param != 0xfa && param != 0xff))
 			return -1;
@@ -823,7 +906,9 @@ static int __init i8042_check_aux(void)
  * mark it as broken
  */
 		if (!retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			aux_loop_broken = true;
+}
 	}
 
 /*
@@ -831,12 +916,15 @@ static int __init i8042_check_aux(void)
  */
 
 	if (i8042_toggle_aux(false)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("Failed to disable AUX port, but continuing anyway... Is this a SiS?\n");
 		pr_warn("If AUX port is really absent please use the 'i8042.noaux' option\n");
 	}
 
 	if (i8042_toggle_aux(true))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 /*
  * Reset keyboard (needed on some laptops to successfully detect
@@ -844,6 +932,7 @@ static int __init i8042_check_aux(void)
  * touchpads).
  */
 	if (i8042_kbdreset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("Attempting to reset device connected to KBD port\n");
 		i8042_kbd_write(NULL, (unsigned char) 0xff);
 	}
@@ -866,6 +955,7 @@ static int __init i8042_check_aux(void)
 			"i8042", i8042_platform_device))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	irq_registered = true;
 
 	if (i8042_enable_aux_port())
@@ -891,6 +981,7 @@ static int __init i8042_check_aux(void)
  * get rid of the byte we put there; otherwise keyboard may not work.
  */
 		dbg("     -- i8042 (aux irq test timeout)\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i8042_flush();
 		retval = -1;
 	}
@@ -905,21 +996,26 @@ static int __init i8042_check_aux(void)
 	i8042_ctr &= ~I8042_CTR_AUXINT;
 
 	if (i8042_command(&i8042_ctr, I8042_CMD_CTL_WCTR))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -1;
+}
 
 	if (irq_registered)
 		free_irq(I8042_AUX_IRQ, i8042_platform_device);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 
 static int i8042_controller_check(void)
 {
 	if (i8042_flush()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("No controller found\n");
 		return -ENODEV;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -934,6 +1030,7 @@ static int i8042_controller_selftest(void)
 	 */
 	do {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (i8042_command(&param, I8042_CMD_CTL_TEST)) {
 			pr_err("i8042 controller selftest timeout\n");
 			return -ENODEV;
@@ -980,6 +1077,7 @@ static int i8042_controller_init(void)
 
 	do {
 		if (n >= 10) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("Unable to get stable CTR read\n");
 			return -EIO;
 		}
@@ -988,6 +1086,7 @@ static int i8042_controller_init(void)
 			udelay(50);
 
 		if (i8042_command(&ctr[n++ % 2], I8042_CMD_CTL_RCTR)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("Can't read CTR while initializing i8042\n");
 			return -EIO;
 		}
@@ -1009,11 +1108,15 @@ static int i8042_controller_init(void)
 
 	spin_lock_irqsave(&i8042_lock, flags);
 	if (~i8042_read_status() & I8042_STR_KEYLOCK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (i8042_unlock)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			i8042_ctr |= I8042_CTR_IGNKEYLOCK;
+}
 		else
 			pr_warn("Warning: Keylock active\n");
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&i8042_lock, flags);
 
 /*
@@ -1022,7 +1125,9 @@ static int i8042_controller_init(void)
  */
 
 	if (~i8042_ctr & I8042_CTR_XLATE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i8042_direct = true;
+}
 
 /*
  * Set nontranslated mode for the kbd interface if requested by an option.
@@ -1032,13 +1137,16 @@ static int i8042_controller_init(void)
  */
 
 	if (i8042_direct)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i8042_ctr &= ~I8042_CTR_XLATE;
+}
 
 /*
  * Write CTR back.
  */
 
 	if (i8042_command(&i8042_ctr, I8042_CMD_CTL_WCTR)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Can't write CTR while initializing i8042\n");
 		return -EIO;
 	}
@@ -1059,6 +1167,7 @@ static int i8042_controller_init(void)
 
 static void i8042_controller_reset(bool s2r_wants_reset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i8042_flush();
 
 /*
@@ -1113,6 +1222,7 @@ static long i8042_panic_blink(int state)
 	long delay = 0;
 	char led;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	led = (state) ? 0x01 | 0x04 : 0;
 	while (i8042_read_status() & I8042_STR_IBF)
 		DELAY;
@@ -1139,8 +1249,10 @@ static void i8042_dritek_enable(void)
 
 	error = i8042_command(&param, 0x1059);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("Failed to enable DRITEK extension: %d\n", error);
 }
+}
 #endif
 
 #ifdef CONFIG_PM
@@ -1156,7 +1268,9 @@ static int i8042_controller_resume(bool s2r_wants_reset)
 
 	error = i8042_controller_check();
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	if (i8042_reset == I8042_RESET_ALWAYS ||
 	    (i8042_reset == I8042_RESET_ON_S2RAM && s2r_wants_reset)) {
@@ -1213,7 +1327,9 @@ static int i8042_pm_suspend(struct device *dev)
 	int i;
 
 	if (pm_suspend_via_firmware())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i8042_controller_reset(true);
+}
 
 	/* Set up serio interrupts for system wakeup. */
 	for (i = 0; i < I8042_NUM_PORTS; i++) {
@@ -1228,6 +1344,7 @@ static int i8042_pm_suspend(struct device *dev)
 
 static int i8042_pm_resume_noirq(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pm_resume_via_firmware())
 		i8042_interrupt(0, NULL);
 
@@ -1239,6 +1356,7 @@ static int i8042_pm_resume(struct device *dev)
 	bool want_reset;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < I8042_NUM_PORTS; i++) {
 		struct serio *serio = i8042_ports[i].serio;
 
@@ -1266,6 +1384,7 @@ static int i8042_pm_resume(struct device *dev)
 
 static int i8042_pm_thaw(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i8042_interrupt(0, NULL);
 
 	return 0;
@@ -1273,6 +1392,7 @@ static int i8042_pm_thaw(struct device *dev)
 
 static int i8042_pm_reset(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i8042_controller_reset(false);
 
 	return 0;
@@ -1280,6 +1400,7 @@ static int i8042_pm_reset(struct device *dev)
 
 static int i8042_pm_restore(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return i8042_controller_resume(false);
 }
 
@@ -1301,6 +1422,7 @@ static const struct dev_pm_ops i8042_pm_ops = {
 
 static void i8042_shutdown(struct platform_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i8042_controller_reset(false);
 }
 
@@ -1311,7 +1433,9 @@ static int __init i8042_create_kbd_port(void)
 
 	serio = kzalloc(sizeof(struct serio), GFP_KERNEL);
 	if (!serio)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	serio->id.type		= i8042_direct ? SERIO_8042 : SERIO_8042_XL;
 	serio->write		= i8042_dumbkbd ? NULL : i8042_kbd_write;
@@ -1340,7 +1464,9 @@ static int __init i8042_create_aux_port(int idx)
 
 	serio = kzalloc(sizeof(struct serio), GFP_KERNEL);
 	if (!serio)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	serio->id.type		= SERIO_8042;
 	serio->write		= i8042_aux_write;
@@ -1356,6 +1482,7 @@ static int __init i8042_create_aux_port(int idx)
 			sizeof(serio->firmware_id));
 		serio->close = i8042_port_close;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		snprintf(serio->name, sizeof(serio->name), "i8042 AUX%d port", idx);
 		snprintf(serio->phys, sizeof(serio->phys), I8042_MUX_PHYS_DESC, idx + 1);
 		strlcpy(serio->firmware_id, i8042_aux_firmware_id,
@@ -1371,6 +1498,7 @@ static int __init i8042_create_aux_port(int idx)
 
 static void __init i8042_free_kbd_port(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(i8042_ports[I8042_KBD_PORT_NO].serio);
 	i8042_ports[I8042_KBD_PORT_NO].serio = NULL;
 }
@@ -1379,6 +1507,7 @@ static void __init i8042_free_aux_ports(void)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = I8042_AUX_PORT_NO; i < I8042_NUM_PORTS; i++) {
 		kfree(i8042_ports[i].serio);
 		i8042_ports[i].serio = NULL;
@@ -1408,6 +1537,7 @@ static void i8042_unregister_ports(void)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < I8042_NUM_PORTS; i++) {
 		if (i8042_ports[i].serio) {
 			serio_unregister_port(i8042_ports[i].serio);
@@ -1418,6 +1548,7 @@ static void i8042_unregister_ports(void)
 
 static void i8042_free_irqs(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (i8042_aux_irq_registered)
 		free_irq(I8042_AUX_IRQ, i8042_platform_device);
 	if (i8042_kbd_irq_registered)
@@ -1433,19 +1564,25 @@ static int __init i8042_setup_aux(void)
 	int i;
 
 	if (i8042_check_aux())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (i8042_nomux || i8042_check_mux()) {
 		error = i8042_create_aux_port(-1);
 		if (error)
 			goto err_free_ports;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		aux_enable = i8042_enable_aux_port;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < I8042_NUM_MUX_PORTS; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = i8042_create_aux_port(i);
 			if (error)
 				goto err_free_ports;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		aux_enable = i8042_enable_mux_ports;
 	}
 
@@ -1473,7 +1610,9 @@ static int __init i8042_setup_kbd(void)
 
 	error = i8042_create_kbd_port();
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	error = request_irq(I8042_KBD_IRQ, i8042_interrupt, IRQF_SHARED,
 			    "i8042", i8042_platform_device);
@@ -1502,7 +1641,9 @@ static int i8042_kbd_bind_notifier(struct notifier_block *nb,
 	struct i8042_port *port = serio->port_data;
 
 	if (serio != i8042_ports[I8042_KBD_PORT_NO].serio)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	switch (action) {
 	case BUS_NOTIFY_BOUND_DRIVER:
@@ -1514,6 +1655,7 @@ static int i8042_kbd_bind_notifier(struct notifier_block *nb,
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1524,18 +1666,25 @@ static int __init i8042_probe(struct platform_device *dev)
 	i8042_platform_device = dev;
 
 	if (i8042_reset == I8042_RESET_ALWAYS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = i8042_controller_selftest();
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 	}
 
 	error = i8042_controller_init();
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 #ifdef CONFIG_X86
 	if (i8042_dritek)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i8042_dritek_enable();
+}
 #endif
 
 	if (!i8042_noaux) {
@@ -1567,6 +1716,7 @@ static int __init i8042_probe(struct platform_device *dev)
 
 static int i8042_remove(struct platform_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i8042_unregister_ports();
 	i8042_free_irqs();
 	i8042_controller_reset(false);
@@ -1599,7 +1749,9 @@ static int __init i8042_init(void)
 
 	err = i8042_platform_init();
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = i8042_controller_check();
 	if (err)
@@ -1607,6 +1759,7 @@ static int __init i8042_init(void)
 
 	pdev = platform_create_bundle(&i8042_driver, i8042_probe, NULL, 0, NULL, 0);
 	if (IS_ERR(pdev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(pdev);
 		goto err_platform_exit;
 	}
@@ -1623,6 +1776,7 @@ static int __init i8042_init(void)
 
 static void __exit i8042_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	platform_device_unregister(i8042_platform_device);
 	platform_driver_unregister(&i8042_driver);
 	i8042_platform_exit();
diff --git a/drivers/input/serio/libps2.c b/drivers/input/serio/libps2.c
index 83e9c66..22dc640 100644
--- a/drivers/input/serio/libps2.c
+++ b/drivers/input/serio/libps2.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * PS/2 driver library
  *
@@ -77,6 +79,7 @@ EXPORT_SYMBOL(ps2_end_command);
 
 void ps2_drain(struct ps2dev *ps2dev, int maxbytes, int timeout)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (maxbytes > sizeof(ps2dev->cmdbuf)) {
 		WARN_ON(1);
 		maxbytes = sizeof(ps2dev->cmdbuf);
@@ -135,7 +138,9 @@ static int ps2_adjust_timeout(struct ps2dev *ps2dev, int command, int timeout)
 			 * at all (mouse).
 			 */
 			if (timeout > msecs_to_jiffies(100))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				timeout = msecs_to_jiffies(100);
+}
 			break;
 
 		case PS2_CMD_GETID:
@@ -146,6 +151,7 @@ static int ps2_adjust_timeout(struct ps2dev *ps2dev, int command, int timeout)
 			 * use alternative probe to detect it.
 			 */
 			if (ps2dev->cmdbuf[1] == 0xaa) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				serio_pause_rx(ps2dev->serio);
 				ps2dev->flags = 0;
 				serio_continue_rx(ps2dev->serio);
@@ -187,11 +193,13 @@ int __ps2_command(struct ps2dev *ps2dev, unsigned char *param, int command)
 	int i;
 
 	if (receive > sizeof(ps2dev->cmdbuf)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(1);
 		return -1;
 	}
 
 	if (send && !param) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(1);
 		return -1;
 	}
@@ -211,12 +219,14 @@ int __ps2_command(struct ps2dev *ps2dev, unsigned char *param, int command)
 	 */
 	if (ps2_sendbyte(ps2dev, command & 0xff,
 			 command == PS2_CMD_RESET_BAT ? 1000 : 200)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serio_pause_rx(ps2dev->serio);
 		goto out_reset_flags;
 	}
 
 	for (i = 0; i < send; i++) {
 		if (ps2_sendbyte(ps2dev, param[i], 200)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			serio_pause_rx(ps2dev->serio);
 			goto out_reset_flags;
 		}
@@ -246,6 +256,7 @@ int __ps2_command(struct ps2dev *ps2dev, unsigned char *param, int command)
 	if (ps2dev->cmdcnt && (command != PS2_CMD_RESET_BAT || ps2dev->cmdcnt != 1))
 		goto out_reset_flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rc = 0;
 
  out_reset_flags:
@@ -275,6 +286,7 @@ EXPORT_SYMBOL(ps2_command);
 void ps2_init(struct ps2dev *ps2dev, struct serio *serio)
 {
 	mutex_init(&ps2dev->cmd_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_subclass(&ps2dev->cmd_mutex, serio->depth);
 	init_waitqueue_head(&ps2dev->wait);
 	ps2dev->serio = serio;
@@ -300,6 +312,7 @@ int ps2_handle_ack(struct ps2dev *ps2dev, unsigned char data)
 
 		case PS2_RET_ERR:
 			if (ps2dev->flags & PS2_FLAG_NAK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ps2dev->flags &= ~PS2_FLAG_NAK;
 				ps2dev->nak = PS2_RET_ERR;
 				break;
@@ -313,6 +326,7 @@ int ps2_handle_ack(struct ps2dev *ps2dev, unsigned char data)
 		case 0x03:
 		case 0x04:
 			if (ps2dev->flags & PS2_FLAG_WAITID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ps2dev->nak = 0;
 				break;
 			}
@@ -332,8 +346,11 @@ int ps2_handle_ack(struct ps2dev *ps2dev, unsigned char data)
 	wake_up(&ps2dev->wait);
 
 	if (data != PS2_RET_ACK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ps2_handle_response(ps2dev, data);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 EXPORT_SYMBOL(ps2_handle_ack);
@@ -366,6 +383,7 @@ EXPORT_SYMBOL(ps2_handle_response);
 
 void ps2_cmd_aborted(struct ps2dev *ps2dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ps2dev->flags & PS2_FLAG_ACK)
 		ps2dev->nak = 1;
 
diff --git a/drivers/input/serio/pcips2.c b/drivers/input/serio/pcips2.c
index e862c6e..1c409fb 100644
--- a/drivers/input/serio/pcips2.c
+++ b/drivers/input/serio/pcips2.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/drivers/input/serio/pcips2.c
  *
diff --git a/drivers/input/serio/serio.c b/drivers/input/serio/serio.c
index 24a90c8..2ca7d49 100644
--- a/drivers/input/serio/serio.c
+++ b/drivers/input/serio/serio.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  The Serio abstraction module
  *
@@ -71,6 +73,7 @@ static int serio_reconnect_driver(struct serio *serio)
 	int retval = -1;
 
 	mutex_lock(&serio->drv_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (serio->drv && serio->drv->reconnect)
 		retval = serio->drv->reconnect(serio);
 	mutex_unlock(&serio->drv_mutex);
@@ -80,6 +83,7 @@ static int serio_reconnect_driver(struct serio *serio)
 
 static void serio_disconnect_driver(struct serio *serio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&serio->drv_mutex);
 	if (serio->drv)
 		serio->drv->disconnect(serio);
@@ -96,6 +100,7 @@ static int serio_match_port(const struct serio_device_id *ids, struct serio *ser
 			return 1;
 		ids++;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -109,6 +114,7 @@ static int serio_bind_driver(struct serio *serio, struct serio_driver *drv)
 
 	if (serio_match_port(drv->id_table, serio)) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serio->dev.driver = &drv->driver;
 		if (serio_connect_driver(serio, drv)) {
 			serio->dev.driver = NULL;
@@ -134,6 +140,7 @@ static void serio_find_driver(struct serio *serio)
 	int error;
 
 	error = device_attach(&serio->dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (error < 0 && error != -EPROBE_DEFER)
 		dev_warn(&serio->dev,
 			 "device_attach() failed for %s (%s), error: %d\n",
@@ -176,6 +183,7 @@ static struct serio_event *serio_get_event(void)
 		list_del_init(&event->node);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&serio_event_lock, flags);
 	return event;
 }
@@ -204,11 +212,13 @@ static void serio_remove_duplicate_events(void *object,
 			if (type != e->type)
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			list_del_init(&e->node);
 			serio_free_event(e);
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&serio_event_lock, flags);
 }
 
@@ -270,21 +280,26 @@ static int serio_queue_event(void *object, struct module *owner,
 	 * we need to preseve sequence of distinct events.
 	 */
 	list_for_each_entry_reverse(event, &serio_event_list, node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (event->object == object) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (event->type == event_type)
 				goto out;
 			break;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	event = kmalloc(sizeof(struct serio_event), GFP_ATOMIC);
 	if (!event) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Not enough memory to queue event %d\n", event_type);
 		retval = -ENOMEM;
 		goto out;
 	}
 
 	if (!try_module_get(owner)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("Can't get module reference, dropping event %d\n",
 			event_type);
 		kfree(event);
@@ -313,6 +328,7 @@ static void serio_remove_pending_events(void *object)
 	struct serio_event *event, *next;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&serio_event_lock, flags);
 
 	list_for_each_entry_safe(event, next, &serio_event_list, node) {
@@ -337,6 +353,7 @@ static struct serio *serio_get_pending_child(struct serio *parent)
 	struct serio *serio, *child = NULL;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&serio_event_lock, flags);
 
 	list_for_each_entry(event, &serio_event_list, node) {
@@ -359,12 +376,14 @@ static struct serio *serio_get_pending_child(struct serio *parent)
 
 static ssize_t serio_show_description(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 	return sprintf(buf, "%s\n", serio->name);
 }
 
 static ssize_t modalias_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 
 	return sprintf(buf, "serio:ty%02Xpr%02Xid%02Xex%02X\n",
@@ -373,30 +392,35 @@ static ssize_t modalias_show(struct device *dev, struct device_attribute *attr,
 
 static ssize_t type_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 	return sprintf(buf, "%02x\n", serio->id.type);
 }
 
 static ssize_t proto_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 	return sprintf(buf, "%02x\n", serio->id.proto);
 }
 
 static ssize_t id_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 	return sprintf(buf, "%02x\n", serio->id.id);
 }
 
 static ssize_t extra_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 	return sprintf(buf, "%02x\n", serio->id.extra);
 }
 
 static ssize_t drvctl_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 	struct device_driver *drv;
 	int error;
@@ -428,12 +452,14 @@ static ssize_t drvctl_store(struct device *dev, struct device_attribute *attr, c
 
 static ssize_t serio_show_bind_mode(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 	return sprintf(buf, "%s\n", serio->manual_bind ? "manual" : "auto");
 }
 
 static ssize_t serio_set_bind_mode(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 	int retval;
 
@@ -451,6 +477,7 @@ static ssize_t serio_set_bind_mode(struct device *dev, struct device_attribute *
 
 static ssize_t firmware_id_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 
 	return sprintf(buf, "%s\n", serio->firmware_id);
@@ -501,6 +528,7 @@ static const struct attribute_group *serio_device_attr_groups[] = {
 
 static void serio_release_port(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 
 	kfree(serio);
@@ -528,10 +556,12 @@ static void serio_init_port(struct serio *serio)
 	serio->dev.release = serio_release_port;
 	serio->dev.groups = serio_device_attr_groups;
 	if (serio->parent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serio->dev.parent = &serio->parent->dev;
 		serio->depth = serio->parent->depth + 1;
 	} else
 		serio->depth = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_subclass(&serio->lock, serio->depth);
 }
 
@@ -545,6 +575,7 @@ static void serio_add_port(struct serio *serio)
 	int error;
 
 	if (parent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serio_pause_rx(parent);
 		list_add_tail(&serio->child_node, &parent->children);
 		serio_continue_rx(parent);
@@ -557,10 +588,12 @@ static void serio_add_port(struct serio *serio)
 
 	error = device_add(&serio->dev);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&serio->dev,
 			"device_add() failed for %s (%s), error: %d\n",
 			serio->phys, serio->name, error);
 }
+}
 
 /*
  * serio_destroy_port() completes unregistration process and removes
@@ -570,6 +603,7 @@ static void serio_destroy_port(struct serio *serio)
 {
 	struct serio *child;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((child = serio_get_pending_child(serio)) != NULL) {
 		serio_remove_pending_events(child);
 		put_device(&child->dev);
@@ -601,6 +635,7 @@ static void serio_destroy_port(struct serio *serio)
  */
 static int serio_reconnect_port(struct serio *serio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int error = serio_reconnect_driver(serio);
 
 	if (error) {
@@ -621,6 +656,7 @@ static void serio_reconnect_subtree(struct serio *root)
 	int error;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = serio_reconnect_port(s);
 		if (!error) {
 			/*
@@ -694,12 +730,14 @@ static void serio_disconnect_port(struct serio *serio)
 
 void serio_rescan(struct serio *serio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	serio_queue_event(serio, NULL, SERIO_RESCAN_PORT);
 }
 EXPORT_SYMBOL(serio_rescan);
 
 void serio_reconnect(struct serio *serio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	serio_queue_event(serio, NULL, SERIO_RECONNECT_SUBTREE);
 }
 EXPORT_SYMBOL(serio_reconnect);
@@ -720,6 +758,7 @@ EXPORT_SYMBOL(__serio_register_port);
  */
 void serio_unregister_port(struct serio *serio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&serio_mutex);
 	serio_disconnect_port(serio);
 	serio_destroy_port(serio);
@@ -735,6 +774,7 @@ void serio_unregister_child_port(struct serio *serio)
 	struct serio *s, *next;
 
 	mutex_lock(&serio_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(s, next, &serio->children, child_node) {
 		serio_disconnect_port(s);
 		serio_destroy_port(s);
@@ -750,6 +790,7 @@ EXPORT_SYMBOL(serio_unregister_child_port);
 
 static ssize_t description_show(struct device_driver *drv, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio_driver *driver = to_serio_driver(drv);
 	return sprintf(buf, "%s\n", driver->description ? driver->description : "(none)");
 }
@@ -757,12 +798,14 @@ static DRIVER_ATTR_RO(description);
 
 static ssize_t bind_mode_show(struct device_driver *drv, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio_driver *serio_drv = to_serio_driver(drv);
 	return sprintf(buf, "%s\n", serio_drv->manual_bind ? "manual" : "auto");
 }
 
 static ssize_t bind_mode_store(struct device_driver *drv, const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio_driver *serio_drv = to_serio_driver(drv);
 	int retval;
 
@@ -796,6 +839,7 @@ static int serio_driver_probe(struct device *dev)
 
 static int serio_driver_remove(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 
 	serio_disconnect_driver(serio);
@@ -804,6 +848,7 @@ static int serio_driver_remove(struct device *dev)
 
 static void serio_cleanup(struct serio *serio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&serio->drv_mutex);
 	if (serio->drv && serio->drv->cleanup)
 		serio->drv->cleanup(serio);
@@ -812,6 +857,7 @@ static void serio_cleanup(struct serio *serio)
 
 static void serio_shutdown(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 
 	serio_cleanup(serio);
@@ -823,9 +869,11 @@ static void serio_attach_driver(struct serio_driver *drv)
 
 	error = driver_attach(&drv->driver);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("driver_attach() failed for %s with error %d\n",
 			drv->driver.name, error);
 }
+}
 
 int __serio_register_driver(struct serio_driver *drv, struct module *owner, const char *mod_name)
 {
@@ -844,6 +892,7 @@ int __serio_register_driver(struct serio_driver *drv, struct module *owner, cons
 
 	error = driver_register(&drv->driver);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("driver_register() failed for %s, error: %d\n",
 			drv->driver.name, error);
 		return error;
@@ -857,11 +906,13 @@ int __serio_register_driver(struct serio_driver *drv, struct module *owner, cons
 		drv->manual_bind = false;
 		error = serio_queue_event(drv, NULL, SERIO_ATTACH_DRIVER);
 		if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			driver_unregister(&drv->driver);
 			return error;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(__serio_register_driver);
@@ -892,6 +943,7 @@ EXPORT_SYMBOL(serio_unregister_driver);
 
 static void serio_set_drv(struct serio *serio, struct serio_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	serio_pause_rx(serio);
 	serio->drv = drv;
 	serio_continue_rx(serio);
@@ -900,10 +952,13 @@ static void serio_set_drv(struct serio *serio, struct serio_driver *drv)
 static int serio_bus_match(struct device *dev, struct device_driver *drv)
 {
 	struct serio *serio = to_serio_port(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio_driver *serio_drv = to_serio_driver(drv);
 
 	if (serio->manual_bind || serio_drv->manual_bind)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return serio_match_port(serio_drv->id_table, serio);
 }
@@ -920,8 +975,11 @@ static int serio_uevent(struct device *dev, struct kobj_uevent_env *env)
 	struct serio *serio;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	serio = to_serio_port(dev);
 
 	SERIO_ADD_UEVENT_VAR("SERIO_TYPE=%02x", serio->id.type);
@@ -936,6 +994,7 @@ static int serio_uevent(struct device *dev, struct kobj_uevent_env *env)
 		SERIO_ADD_UEVENT_VAR("SERIO_FIRMWARE_ID=%s",
 				     serio->firmware_id);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 #undef SERIO_ADD_UEVENT_VAR
@@ -943,6 +1002,7 @@ static int serio_uevent(struct device *dev, struct kobj_uevent_env *env)
 #ifdef CONFIG_PM
 static int serio_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 
 	serio_cleanup(serio);
@@ -952,6 +1012,7 @@ static int serio_suspend(struct device *dev)
 
 static int serio_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serio *serio = to_serio_port(dev);
 	int error = -ENOENT;
 
@@ -989,9 +1050,11 @@ int serio_open(struct serio *serio, struct serio_driver *drv)
 	serio_set_drv(serio, drv);
 
 	if (serio->open && serio->open(serio)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serio_set_drv(serio, NULL);
 		return -1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(serio_open);
@@ -1017,10 +1080,12 @@ irqreturn_t serio_interrupt(struct serio *serio,
         if (likely(serio->drv)) {
                 ret = serio->drv->interrupt(serio, data, dfl);
 	} else if (!dfl && device_is_registered(&serio->dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serio_rescan(serio);
 		ret = IRQ_HANDLED;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&serio->lock, flags);
 
 	return ret;
@@ -1047,15 +1112,18 @@ static int __init serio_init(void)
 
 	error = bus_register(&serio_bus);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Failed to register serio bus, error: %d\n", error);
 		return error;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void __exit serio_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bus_unregister(&serio_bus);
 
 	/*
diff --git a/drivers/input/serio/serio_raw.c b/drivers/input/serio/serio_raw.c
index 516f9fe..41fdb45 100644
--- a/drivers/input/serio/serio_raw.c
+++ b/drivers/input/serio/serio_raw.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Raw serio device providing access to a raw byte stream from underlying
  * serio port. Closely emulates behavior of pre-2.6 /dev/psaux device
diff --git a/drivers/input/serio/serport.c b/drivers/input/serio/serport.c
index f8ead9f9..33ca41c 100644
--- a/drivers/input/serio/serport.c
+++ b/drivers/input/serio/serport.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Input device TTY line discipline
  *
@@ -56,6 +58,7 @@ static int serport_serio_open(struct serio *serio)
 	struct serport *serport = serio->port_data;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&serport->lock, flags);
 	set_bit(SERPORT_ACTIVE, &serport->flags);
 	spin_unlock_irqrestore(&serport->lock, flags);
@@ -69,6 +72,7 @@ static void serport_serio_close(struct serio *serio)
 	struct serport *serport = serio->port_data;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&serport->lock, flags);
 	clear_bit(SERPORT_ACTIVE, &serport->flags);
 	spin_unlock_irqrestore(&serport->lock, flags);
@@ -84,7 +88,9 @@ static int serport_ldisc_open(struct tty_struct *tty)
 	struct serport *serport;
 
 	if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	serport = kzalloc(sizeof(struct serport), GFP_KERNEL);
 	if (!serport)
@@ -125,6 +131,7 @@ static void serport_ldisc_receive(struct tty_struct *tty, const unsigned char *c
 	unsigned int ch_flags = 0;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&serport->lock, flags);
 
 	if (!test_bit(SERPORT_ACTIVE, &serport->flags))
@@ -166,7 +173,9 @@ static ssize_t serport_ldisc_read(struct tty_struct * tty, struct file * file, u
 	struct serio *serio;
 
 	if (test_and_set_bit(SERPORT_BUSY, &serport->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	serport->serio = serio = kzalloc(sizeof(struct serio), GFP_KERNEL);
 	if (!serio)
@@ -211,6 +220,7 @@ static void serport_set_type(struct tty_struct *tty, unsigned long type)
 static int serport_ldisc_ioctl(struct tty_struct *tty, struct file *file,
 			       unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cmd == SPIOCSTYPE) {
 		unsigned long type;
 
@@ -230,6 +240,7 @@ static long serport_ldisc_compat_ioctl(struct tty_struct *tty,
 				       struct file *file,
 				       unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cmd == COMPAT_SPIOCSTYPE) {
 		void __user *uarg = compat_ptr(arg);
 		compat_ulong_t compat_type;
@@ -250,6 +261,7 @@ static int serport_ldisc_hangup(struct tty_struct *tty)
 	struct serport *serport = (struct serport *) tty->disc_data;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&serport->lock, flags);
 	set_bit(SERPORT_DEAD, &serport->flags);
 	spin_unlock_irqrestore(&serport->lock, flags);
@@ -263,6 +275,7 @@ static void serport_ldisc_write_wakeup(struct tty_struct * tty)
 	struct serport *serport = (struct serport *) tty->disc_data;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&serport->lock, flags);
 	if (test_bit(SERPORT_ACTIVE, &serport->flags))
 		serio_drv_write_wakeup(serport->serio);
@@ -297,13 +310,16 @@ static int __init serport_init(void)
 	int retval;
 	retval = tty_register_ldisc(N_MOUSE, &serport_ldisc);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "serport.c: Error registering line discipline.\n");
+}
 
 	return  retval;
 }
 
 static void __exit serport_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_unregister_ldisc(N_MOUSE);
 }
 
diff --git a/drivers/mailbox/pcc.c b/drivers/mailbox/pcc.c
index 9b7005e..c276d60 100644
--- a/drivers/mailbox/pcc.c
+++ b/drivers/mailbox/pcc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Copyright (C) 2014 Linaro Ltd.
  *	Author:	Ashwin Chaugule <ashwin.chaugule@linaro.org>
@@ -92,6 +94,7 @@ static struct mbox_controller pcc_mbox_ctrl = {};
  */
 static struct mbox_chan *get_pcc_channel(int id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (id < 0 || id >= pcc_mbox_ctrl.num_chans)
 		return ERR_PTR(-ENOENT);
 
@@ -171,7 +174,9 @@ static int pcc_map_interrupt(u32 interrupt, u32 flags)
 	int trigger, polarity;
 
 	if (!interrupt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	trigger = (flags & ACPI_PCCT_INTERRUPT_MODE) ? ACPI_EDGE_SENSITIVE
 			: ACPI_LEVEL_SENSITIVE;
@@ -211,7 +216,9 @@ static irqreturn_t pcc_mbox_irq(int irq, void *p)
 				    &doorbell_ack_val,
 				    doorbell_ack->bit_width);
 		if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return IRQ_NONE;
+}
 
 		ret = write_register(pcc_doorbell_ack_vaddr[id],
 				     (doorbell_ack_val & doorbell_ack_preserve)
@@ -253,6 +260,7 @@ struct mbox_chan *pcc_mbox_request_channel(struct mbox_client *cl,
 	 */
 	chan = get_pcc_channel(subspace_id);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ERR(chan) || chan->cl) {
 		dev_err(dev, "Channel not found for idx: %d\n", subspace_id);
 		return ERR_PTR(-EBUSY);
@@ -298,6 +306,7 @@ void pcc_mbox_free_channel(struct mbox_chan *chan)
 	u32 id = chan - pcc_mbox_channels;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!chan || !chan->cl)
 		return;
 
@@ -342,6 +351,7 @@ static int pcc_send_data(struct mbox_chan *chan, void *data)
 	int ret = 0;
 
 	if (id >= pcc_mbox_ctrl.num_chans) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("pcc_send_data: Invalid mbox_chan passed\n");
 		return -ENOENT;
 	}
@@ -389,6 +399,7 @@ static int parse_pcc_subspace(struct acpi_subtable_header *header,
 	struct acpi_pcct_hw_reduced *pcct_ss;
 
 	if (pcc_mbox_ctrl.num_chans <= MAX_PCC_SUBSPACES) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcct_ss = (struct acpi_pcct_hw_reduced *) header;
 
 		if ((pcct_ss->header.type !=
@@ -416,6 +427,7 @@ static int parse_pcc_subspace(struct acpi_subtable_header *header,
 static int pcc_parse_subspace_irq(int id,
 				  struct acpi_pcct_hw_reduced *pcct_ss)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcc_doorbell_irq[id] = pcc_map_interrupt(pcct_ss->platform_interrupt,
 						 (u32)pcct_ss->flags);
 	if (pcc_doorbell_irq[id] <= 0) {
@@ -458,46 +470,61 @@ static int __init acpi_pcc_probe(void)
 	status = acpi_get_table(ACPI_SIG_PCCT, 0, &pcct_tbl);
 
 	if (ACPI_FAILURE(status) || !pcct_tbl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	count = acpi_table_parse_entries(ACPI_SIG_PCCT,
 			sizeof(struct acpi_table_pcct),
 			ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE,
 			parse_pcc_subspace, MAX_PCC_SUBSPACES);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sum += (count > 0) ? count : 0;
 
 	count = acpi_table_parse_entries(ACPI_SIG_PCCT,
 			sizeof(struct acpi_table_pcct),
 			ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE_TYPE2,
 			parse_pcc_subspace, MAX_PCC_SUBSPACES);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sum += (count > 0) ? count : 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sum == 0 || sum >= MAX_PCC_SUBSPACES) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Error parsing PCC subspaces from PCCT\n");
 		return -EINVAL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcc_mbox_channels = kzalloc(sizeof(struct mbox_chan) *
 			sum, GFP_KERNEL);
 	if (!pcc_mbox_channels) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Could not allocate space for PCC mbox channels\n");
 		return -ENOMEM;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcc_doorbell_vaddr = kcalloc(sum, sizeof(void *), GFP_KERNEL);
 	if (!pcc_doorbell_vaddr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = -ENOMEM;
 		goto err_free_mbox;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcc_doorbell_ack_vaddr = kcalloc(sum, sizeof(void *), GFP_KERNEL);
 	if (!pcc_doorbell_ack_vaddr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = -ENOMEM;
 		goto err_free_db_vaddr;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcc_doorbell_irq = kcalloc(sum, sizeof(int), GFP_KERNEL);
 	if (!pcc_doorbell_irq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = -ENOMEM;
 		goto err_free_db_ack_vaddr;
 	}
@@ -508,8 +535,11 @@ static int __init acpi_pcc_probe(void)
 
 	acpi_pcct_tbl = (struct acpi_table_pcct *) pcct_tbl;
 	if (acpi_pcct_tbl->flags & ACPI_PCCT_DOORBELL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcc_mbox_ctrl.txdone_irq = true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < sum; i++) {
 		struct acpi_generic_address *db_reg;
 		struct acpi_pcct_hw_reduced *pcct_ss;
@@ -518,6 +548,7 @@ static int __init acpi_pcc_probe(void)
 		pcct_ss = (struct acpi_pcct_hw_reduced *) pcct_entry;
 
 		if (pcc_mbox_ctrl.txdone_irq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rc = pcc_parse_subspace_irq(i, pcct_ss);
 			if (rc < 0)
 				goto err;
@@ -526,12 +557,15 @@ static int __init acpi_pcc_probe(void)
 		/* If doorbell is in system memory cache the virt address */
 		db_reg = &pcct_ss->doorbell_register;
 		if (db_reg->space_id == ACPI_ADR_SPACE_SYSTEM_MEMORY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pcc_doorbell_vaddr[i] = acpi_os_ioremap(db_reg->address,
 							db_reg->bit_width/8);
+}
 		pcct_entry = (struct acpi_subtable_header *)
 			((unsigned long) pcct_entry + pcct_entry->length);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcc_mbox_ctrl.num_chans = sum;
 
 	pr_info("Detected %d PCC Subspaces\n", pcc_mbox_ctrl.num_chans);
@@ -572,6 +606,7 @@ static int pcc_mbox_probe(struct platform_device *pdev)
 	ret = mbox_controller_register(&pcc_mbox_ctrl);
 
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Err registering PCC as Mailbox controller: %d\n", ret);
 		ret = -ENODEV;
 	}
@@ -593,24 +628,30 @@ static int __init pcc_init(void)
 	struct platform_device *pcc_pdev;
 
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* Check if PCC support is available. */
 	ret = acpi_pcc_probe();
 
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("ACPI PCC probe failed.\n");
 		return -ENODEV;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcc_pdev = platform_create_bundle(&pcc_mbox_driver,
 			pcc_mbox_probe, NULL, 0, NULL, 0);
 
 	if (IS_ERR(pcc_pdev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("Err creating PCC platform bundle\n");
 		return PTR_ERR(pcc_pdev);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
diff --git a/drivers/md/dm-bio-prison-v1.c b/drivers/md/dm-bio-prison-v1.c
index 874841f..825a49f 100644
--- a/drivers/md/dm-bio-prison-v1.c
+++ b/drivers/md/dm-bio-prison-v1.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2012 Red Hat, Inc.
  *
diff --git a/drivers/md/dm-bio-prison-v2.c b/drivers/md/dm-bio-prison-v2.c
index 8ce3a1a..e1ae4fc 100644
--- a/drivers/md/dm-bio-prison-v2.c
+++ b/drivers/md/dm-bio-prison-v2.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2012-2017 Red Hat, Inc.
  *
diff --git a/drivers/md/dm-bufio.c b/drivers/md/dm-bufio.c
index 6d416fd..26f23f1 100644
--- a/drivers/md/dm-bufio.c
+++ b/drivers/md/dm-bufio.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2009-2011 Red Hat, Inc.
  *
diff --git a/drivers/md/dm-crypt.c b/drivers/md/dm-crypt.c
index 554d603..3d56cdc 100644
--- a/drivers/md/dm-crypt.c
+++ b/drivers/md/dm-crypt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2003 Jana Saout <jana@saout.de>
  * Copyright (C) 2004 Clemens Fruhwirth <clemens@endorphin.org>
diff --git a/drivers/md/dm-exception-store.c b/drivers/md/dm-exception-store.c
index 3997f34..9266fc0 100644
--- a/drivers/md/dm-exception-store.c
+++ b/drivers/md/dm-exception-store.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2001-2002 Sistina Software (UK) Limited.
  * Copyright (C) 2006-2008 Red Hat GmbH
diff --git a/drivers/md/dm-io.c b/drivers/md/dm-io.c
index b4357ed4..9e5b77f 100644
--- a/drivers/md/dm-io.c
+++ b/drivers/md/dm-io.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2003 Sistina Software
  * Copyright (C) 2006 Red Hat GmbH
@@ -196,6 +198,7 @@ static void list_next_page(struct dpages *dp)
 
 static void list_dp_init(struct dpages *dp, struct page_list *pl, unsigned offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dp->get_page = list_get_page;
 	dp->next_page = list_next_page;
 	dp->context_u = offset;
@@ -208,6 +211,7 @@ static void list_dp_init(struct dpages *dp, struct page_list *pl, unsigned offse
 static void bio_get_page(struct dpages *dp, struct page **p,
 			 unsigned long *len, unsigned *offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bio_vec bvec = bvec_iter_bvec((struct bio_vec *)dp->context_ptr,
 					     dp->context_bi);
 
@@ -229,6 +233,7 @@ static void bio_next_page(struct dpages *dp)
 
 static void bio_dp_init(struct dpages *dp, struct bio *bio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dp->get_page = bio_get_page;
 	dp->next_page = bio_next_page;
 
@@ -246,6 +251,7 @@ static void bio_dp_init(struct dpages *dp, struct bio *bio)
 static void vm_get_page(struct dpages *dp,
 		 struct page **p, unsigned long *len, unsigned *offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*p = vmalloc_to_page(dp->context_ptr);
 	*offset = dp->context_u;
 	*len = PAGE_SIZE - dp->context_u;
@@ -253,12 +259,14 @@ static void vm_get_page(struct dpages *dp,
 
 static void vm_next_page(struct dpages *dp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dp->context_ptr += PAGE_SIZE - dp->context_u;
 	dp->context_u = 0;
 }
 
 static void vm_dp_init(struct dpages *dp, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dp->get_page = vm_get_page;
 	dp->next_page = vm_next_page;
 	dp->context_u = offset_in_page(data);
@@ -271,6 +279,7 @@ static void vm_dp_init(struct dpages *dp, void *data)
 static void km_get_page(struct dpages *dp, struct page **p, unsigned long *len,
 			unsigned *offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*p = virt_to_page(dp->context_ptr);
 	*offset = dp->context_u;
 	*len = PAGE_SIZE - dp->context_u;
@@ -278,12 +287,14 @@ static void km_get_page(struct dpages *dp, struct page **p, unsigned long *len,
 
 static void km_next_page(struct dpages *dp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dp->context_ptr += PAGE_SIZE - dp->context_u;
 	dp->context_u = 0;
 }
 
 static void km_dp_init(struct dpages *dp, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dp->get_page = km_get_page;
 	dp->next_page = km_next_page;
 	dp->context_u = offset_in_page(data);
@@ -312,7 +323,9 @@ static void do_region(int op, int op_flags, unsigned region,
 	 * Reject unsupported discard and write same requests.
 	 */
 	if (op == REQ_OP_DISCARD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		special_cmd_max_sectors = q->limits.max_discard_sectors;
+}
 	else if (op == REQ_OP_WRITE_ZEROES)
 		special_cmd_max_sectors = q->limits.max_write_zeroes_sectors;
 	else if (op == REQ_OP_WRITE_SAME)
@@ -394,6 +407,7 @@ static void dispatch_io(int op, int op_flags, unsigned int num_regions,
 	int i;
 	struct dpages old_pages = *dp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(num_regions > DM_IO_MAX_REGIONS);
 
 	if (sync)
@@ -436,6 +450,7 @@ static int sync_io(struct dm_io_client *client, unsigned int num_regions,
 	struct io *io;
 	struct sync_io sio;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (num_regions > 1 && !op_is_write(op)) {
 		WARN_ON(1);
 		return -EIO;
@@ -469,6 +484,7 @@ static int async_io(struct dm_io_client *client, unsigned int num_regions,
 {
 	struct io *io;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (num_regions > 1 && !op_is_write(op)) {
 		WARN_ON(1);
 		fn(1, context);
@@ -494,6 +510,7 @@ static int dp_init(struct dm_io_request *io_req, struct dpages *dp,
 {
 	/* Set up dpages based on memory type */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dp->vma_invalidate_address = NULL;
 	dp->vma_invalidate_size = 0;
 
@@ -542,7 +559,9 @@ int dm_io(struct dm_io_request *io_req, unsigned num_regions,
 
 	r = dp_init(io_req, &dp, (unsigned long)where->count << SECTOR_SHIFT);
 	if (r)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 
 	if (!io_req->notify.fn)
 		return sync_io(io_req->client, num_regions, where,
@@ -559,13 +578,16 @@ int __init dm_io_init(void)
 {
 	_dm_io_cache = KMEM_CACHE(io, 0);
 	if (!_dm_io_cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
 
 void dm_io_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_destroy(_dm_io_cache);
 	_dm_io_cache = NULL;
 }
diff --git a/drivers/md/dm-ioctl.c b/drivers/md/dm-ioctl.c
index e52676f..25d15f3 100644
--- a/drivers/md/dm-ioctl.c
+++ b/drivers/md/dm-ioctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2001, 2002 Sistina Software (UK) Limited.
  * Copyright (C) 2004 - 2006 Red Hat, Inc. All rights reserved.
@@ -87,6 +89,7 @@ static int dm_hash_init(void)
 
 static void dm_hash_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dm_hash_remove_all(false, false, false);
 }
 
@@ -100,6 +103,7 @@ static unsigned int hash_str(const char *str)
 	const unsigned int hash_mult = 2654435387U;
 	unsigned int h = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (*str)
 		h = (h + (unsigned int) *str++) * hash_mult;
 
@@ -114,6 +118,7 @@ static struct hash_cell *__get_name_cell(const char *str)
 	struct hash_cell *hc;
 	unsigned int h = hash_str(str);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry (hc, _name_buckets + h, name_list)
 		if (!strcmp(hc->name, str)) {
 			dm_get(hc->md);
@@ -128,6 +133,7 @@ static struct hash_cell *__get_uuid_cell(const char *str)
 	struct hash_cell *hc;
 	unsigned int h = hash_str(str);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry (hc, _uuid_buckets + h, uuid_list)
 		if (!strcmp(hc->uuid, str)) {
 			dm_get(hc->md);
@@ -144,7 +150,9 @@ static struct hash_cell *__get_dev_cell(uint64_t dev)
 
 	md = dm_get_md(huge_decode_dev(dev));
 	if (!md)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	hc = dm_get_mdptr(md);
 	if (!hc) {
@@ -165,7 +173,9 @@ static struct hash_cell *alloc_cell(const char *name, const char *uuid,
 
 	hc = kmalloc(sizeof(*hc), GFP_KERNEL);
 	if (!hc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	hc->name = kstrdup(name, GFP_KERNEL);
 	if (!hc->name) {
@@ -194,6 +204,7 @@ static struct hash_cell *alloc_cell(const char *name, const char *uuid,
 
 static void free_cell(struct hash_cell *hc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (hc) {
 		kfree(hc->name);
 		kfree(hc->uuid);
@@ -214,7 +225,9 @@ static int dm_hash_insert(const char *name, const char *uuid, struct mapped_devi
 	 */
 	cell = alloc_cell(name, uuid, md);
 	if (!cell)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/*
 	 * Insert the cell into both hash tables.
@@ -265,7 +278,9 @@ static struct dm_table *__hash_remove(struct hash_cell *hc)
 
 	table = dm_get_live_table(hc->md, &srcu_idx);
 	if (table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dm_table_event(table);
+}
 	dm_put_live_table(hc->md, srcu_idx);
 
 	table = NULL;
@@ -336,6 +351,7 @@ static void dm_hash_remove_all(bool keep_open_devices, bool mark_deferred, bool
  */
 static void __set_cell_uuid(struct hash_cell *hc, char *new_uuid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&dm_hash_cells_mutex);
 	hc->uuid = new_uuid;
 	mutex_unlock(&dm_hash_cells_mutex);
@@ -373,6 +389,7 @@ static struct mapped_device *dm_hash_rename(struct dm_ioctl *param,
 	struct hash_cell *hc;
 	struct dm_table *table;
 	struct mapped_device *md;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned change_uuid = (param->flags & DM_UUID_FLAG) ? 1 : 0;
 	int srcu_idx;
 
@@ -454,6 +471,7 @@ static struct mapped_device *dm_hash_rename(struct dm_ioctl *param,
 
 void dm_deferred_remove(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dm_hash_remove_all(true, false, true);
 }
 
@@ -468,6 +486,7 @@ typedef int (*ioctl_fn)(struct file *filp, struct dm_ioctl *param, size_t param_
 
 static int remove_all(struct file *filp, struct dm_ioctl *param, size_t param_size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dm_hash_remove_all(true, !!(param->flags & DM_DEFERRED_REMOVE), false);
 	param->data_size = 0;
 	return 0;
@@ -479,10 +498,12 @@ static int remove_all(struct file *filp, struct dm_ioctl *param, size_t param_si
 #define ALIGN_MASK 7
 static inline size_t align_val(size_t val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (val + ALIGN_MASK) & ~ALIGN_MASK;
 }
 static inline void *align_ptr(void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (void *)align_val((size_t)ptr);
 }
 
@@ -493,6 +514,7 @@ static inline void *align_ptr(void *ptr)
 static void *get_result_buffer(struct dm_ioctl *param, size_t param_size,
 			       size_t *len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	param->data_start = align_ptr(param + 1) - (void *) param;
 
 	if (param->data_start < param_size)
@@ -584,6 +606,7 @@ static void list_version_get_info(struct target_type *tt, void *param)
     if ((char *)info->vers + sizeof(tt->version) + strlen(tt->name) + 1 >
 	info->end) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	info->flags = DM_BUFFER_FULL_FLAG;
 	return;
     }
@@ -618,6 +641,7 @@ static int list_versions(struct file *filp, struct dm_ioctl *param, size_t param
 	 */
 	vers = get_result_buffer(param, param_size, &len);
 	if (len < needed) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		param->flags |= DM_BUFFER_FULL_FLAG;
 		goto out;
 	}
@@ -641,6 +665,7 @@ static int list_versions(struct file *filp, struct dm_ioctl *param, size_t param
 
 static int check_name(const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (strchr(name, '/')) {
 		DMWARN("invalid device name");
 		return -EINVAL;
@@ -664,6 +689,7 @@ static struct dm_table *dm_get_inactive_table(struct mapped_device *md, int *src
 
 	down_read(&_hash_lock);
 	hc = dm_get_mdptr(md);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!hc || hc->md != md) {
 		DMWARN("device has been removed from the dev hash table.");
 		goto out;
@@ -681,6 +707,7 @@ static struct dm_table *dm_get_live_or_inactive_table(struct mapped_device *md,
 						      struct dm_ioctl *param,
 						      int *srcu_idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (param->flags & DM_QUERY_INACTIVE_TABLE_FLAG) ?
 		dm_get_inactive_table(md, srcu_idx) : dm_get_live_table(md, srcu_idx);
 }
@@ -691,6 +718,7 @@ static struct dm_table *dm_get_live_or_inactive_table(struct mapped_device *md,
  */
 static void __dev_status(struct mapped_device *md, struct dm_ioctl *param)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct gendisk *disk = dm_disk(md);
 	struct dm_table *table;
 	int srcu_idx;
@@ -750,7 +778,9 @@ static int dev_create(struct file *filp, struct dm_ioctl *param, size_t param_si
 
 	r = check_name(param->name);
 	if (r)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 
 	if (param->flags & DM_PERSISTENT_DEV_FLAG)
 		m = MINOR(huge_decode_dev(param->dev));
@@ -783,6 +813,7 @@ static struct hash_cell *__find_device_hash_cell(struct dm_ioctl *param)
 	struct hash_cell *hc = NULL;
 
 	if (*param->uuid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (*param->name || param->dev)
 			return NULL;
 
@@ -829,7 +860,9 @@ static struct mapped_device *find_device(struct dm_ioctl *param)
 	down_read(&_hash_lock);
 	hc = __find_device_hash_cell(param);
 	if (hc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		md = hc->md;
+}
 	up_read(&_hash_lock);
 
 	return md;
@@ -846,6 +879,7 @@ static int dev_remove(struct file *filp, struct dm_ioctl *param, size_t param_si
 	hc = __find_device_hash_cell(param);
 
 	if (!hc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DMDEBUG_LIMIT("device doesn't appear to be in the dev hash table.");
 		up_write(&_hash_lock);
 		return -ENXIO;
@@ -893,6 +927,7 @@ static int dev_remove(struct file *filp, struct dm_ioctl *param, size_t param_si
  */
 static int invalid_str(char *str, void *end)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((void *) str < end)
 		if (!*str++)
 			return 0;
@@ -905,6 +940,7 @@ static int dev_rename(struct file *filp, struct dm_ioctl *param, size_t param_si
 	int r;
 	char *new_data = (char *) param + param->data_start;
 	struct mapped_device *md;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned change_uuid = (param->flags & DM_UUID_FLAG) ? 1 : 0;
 
 	if (new_data < param->data ||
@@ -941,7 +977,9 @@ static int dev_set_geometry(struct file *filp, struct dm_ioctl *param, size_t pa
 
 	md = find_device(param);
 	if (!md)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	if (geostr < param->data ||
 	    invalid_str(geostr, (void *) param + param_size)) {
@@ -985,7 +1023,9 @@ static int do_suspend(struct dm_ioctl *param)
 
 	md = find_device(param);
 	if (!md)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	if (param->flags & DM_SKIP_LOCKFS_FLAG)
 		suspend_flags &= ~DM_SUSPEND_LOCKFS_FLAG;
@@ -1018,6 +1058,7 @@ static int do_resume(struct dm_ioctl *param)
 
 	hc = __find_device_hash_cell(param);
 	if (!hc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DMDEBUG_LIMIT("device doesn't appear to be in the dev hash table.");
 		up_write(&_hash_lock);
 		return -ENXIO;
@@ -1081,6 +1122,7 @@ static int do_resume(struct dm_ioctl *param)
  */
 static int dev_suspend(struct file *filp, struct dm_ioctl *param, size_t param_size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (param->flags & DM_SUSPEND_FLAG)
 		return do_suspend(param);
 
@@ -1097,7 +1139,9 @@ static int dev_status(struct file *filp, struct dm_ioctl *param, size_t param_si
 
 	md = find_device(param);
 	if (!md)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	__dev_status(md, param);
 	dm_put(md);
@@ -1121,7 +1165,9 @@ static void retrieve_status(struct dm_table *table,
 	outptr = outbuf = get_result_buffer(param, param_size, &len);
 
 	if (param->flags & DM_STATUS_TABLE_FLAG)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type = STATUSTYPE_TABLE;
+}
 	else
 		type = STATUSTYPE_INFO;
 
@@ -1682,7 +1728,9 @@ static int check_version(unsigned int cmd, struct dm_ioctl __user *user)
 	int r = 0;
 
 	if (copy_from_user(version, user->version, sizeof(version)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	if ((DM_VERSION_MAJOR != version[0]) ||
 	    (DM_VERSION_MINOR < version[1])) {
@@ -1711,6 +1759,7 @@ static int check_version(unsigned int cmd, struct dm_ioctl __user *user)
 
 static void free_params(struct dm_ioctl *param, size_t param_size, int param_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (param_flags & DM_WIPE_BUFFER)
 		memset(param, 0, param_size);
 
@@ -1728,7 +1777,9 @@ static int copy_params(struct dm_ioctl __user *user, struct dm_ioctl *param_kern
 	unsigned noio_flag;
 
 	if (copy_from_user(param_kernel, user, minimum_data_size))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	if (param_kernel->data_size < minimum_data_size)
 		return -EINVAL;
@@ -1830,7 +1881,9 @@ static int ctl_ioctl(struct file *file, uint command, struct dm_ioctl __user *us
 
 	/* only root can play with this */
 	if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;
+}
 
 	if (_IOC_TYPE(command) != DM_IOCTL)
 		return -ENOTTY;
@@ -1893,12 +1946,14 @@ static int ctl_ioctl(struct file *file, uint command, struct dm_ioctl __user *us
 
 static long dm_ctl_ioctl(struct file *file, uint command, ulong u)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (long)ctl_ioctl(file, command, (struct dm_ioctl __user *)u);
 }
 
 #ifdef CONFIG_COMPAT
 static long dm_compat_ctl_ioctl(struct file *file, uint command, ulong u)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (long)dm_ctl_ioctl(file, command, (ulong) compat_ptr(u));
 }
 #else
@@ -1912,7 +1967,9 @@ static int dm_open(struct inode *inode, struct file *filp)
 
 	r = nonseekable_open(inode, filp);
 	if (unlikely(r))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 
 	priv = filp->private_data = kmalloc(sizeof(struct dm_file), GFP_KERNEL);
 	if (!priv)
@@ -1925,6 +1982,7 @@ static int dm_open(struct inode *inode, struct file *filp)
 
 static int dm_release(struct inode *inode, struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(filp->private_data);
 	return 0;
 }
@@ -1937,7 +1995,9 @@ static unsigned dm_poll(struct file *filp, poll_table *wait)
 	poll_wait(filp, &dm_global_eventq, wait);
 
 	if ((int)(atomic_read(&dm_global_event_nr) - priv->global_event_nr) > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLIN;
+}
 
 	return mask;
 }
@@ -1971,10 +2031,13 @@ int __init dm_interface_init(void)
 
 	r = dm_hash_init();
 	if (r)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 
 	r = misc_register(&_dm_misc);
 	if (r) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DMERR("misc_register failed for control device");
 		dm_hash_exit();
 		return r;
@@ -1988,6 +2051,7 @@ int __init dm_interface_init(void)
 
 void dm_interface_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	misc_deregister(&_dm_misc);
 	dm_hash_exit();
 }
@@ -2004,7 +2068,9 @@ int dm_copy_name_and_uuid(struct mapped_device *md, char *name, char *uuid)
 	struct hash_cell *hc;
 
 	if (!md)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	mutex_lock(&dm_hash_cells_mutex);
 	hc = dm_get_mdptr(md);
diff --git a/drivers/md/dm-kcopyd.c b/drivers/md/dm-kcopyd.c
index cf2c67e..a01a457 100644
--- a/drivers/md/dm-kcopyd.c
+++ b/drivers/md/dm-kcopyd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2002 Sistina Software (UK) Limited.
  * Copyright (C) 2006 Red Hat GmbH
@@ -102,7 +104,9 @@ static void io_job_start(struct dm_kcopyd_throttle *t)
 	int slept = 0, skew;
 
 	if (unlikely(!t))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 try_again:
 	spin_lock_irq(&throttle_spinlock);
@@ -151,7 +155,9 @@ static void io_job_finish(struct dm_kcopyd_throttle *t)
 	unsigned long flags;
 
 	if (unlikely(!t))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_irqsave(&throttle_spinlock, flags);
 
@@ -184,6 +190,7 @@ static void io_job_finish(struct dm_kcopyd_throttle *t)
 
 static void wake(struct dm_kcopyd_client *kc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	queue_work(kc->kcopyd_wq, &kc->kcopyd_work);
 }
 
@@ -196,7 +203,9 @@ static struct page_list *alloc_pl(gfp_t gfp)
 
 	pl = kmalloc(sizeof(*pl), gfp);
 	if (!pl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	pl->page = alloc_page(gfp);
 	if (!pl->page) {
@@ -209,6 +218,7 @@ static struct page_list *alloc_pl(gfp_t gfp)
 
 static void free_pl(struct page_list *pl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__free_page(pl->page);
 	kfree(pl);
 }
@@ -222,6 +232,7 @@ static void kcopyd_put_pages(struct dm_kcopyd_client *kc, struct page_list *pl)
 	struct page_list *next;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next = pl->next;
 
 		if (kc->nr_free_pages >= kc->nr_reserved_pages)
@@ -244,6 +255,7 @@ static int kcopyd_get_pages(struct dm_kcopyd_client *kc,
 	*pages = NULL;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pl = alloc_pl(__GFP_NOWARN | __GFP_NORETRY | __GFP_KSWAPD_RECLAIM);
 		if (unlikely(!pl)) {
 			/* Use reserved pages */
@@ -272,6 +284,7 @@ static void drop_pages(struct page_list *pl)
 {
 	struct page_list *next;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (pl) {
 		next = pl->next;
 		free_pl(pl);
@@ -287,6 +300,7 @@ static int client_reserve_pages(struct dm_kcopyd_client *kc, unsigned nr_pages)
 	unsigned i;
 	struct page_list *pl = NULL, *next;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nr_pages; i++) {
 		next = alloc_pl(GFP_KERNEL);
 		if (!next) {
@@ -306,6 +320,7 @@ static int client_reserve_pages(struct dm_kcopyd_client *kc, unsigned nr_pages)
 
 static void client_free_pages(struct dm_kcopyd_client *kc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(kc->nr_free_pages != kc->nr_reserved_pages);
 	drop_pages(kc->pages);
 	kc->pages = NULL;
@@ -369,7 +384,9 @@ int __init dm_kcopyd_init(void)
 				sizeof(struct kcopyd_job) * (SPLIT_COUNT + 1),
 				__alignof__(struct kcopyd_job), 0, NULL);
 	if (!_job_cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	zero_page_list.next = &zero_page_list;
 	zero_page_list.page = ZERO_PAGE(0);
@@ -379,6 +396,7 @@ int __init dm_kcopyd_init(void)
 
 void dm_kcopyd_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_destroy(_job_cache);
 	_job_cache = NULL;
 }
@@ -418,6 +436,7 @@ static struct kcopyd_job *pop(struct list_head *jobs,
 	struct kcopyd_job *job = NULL;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&kc->job_lock, flags);
 
 	if (!list_empty(jobs)) {
@@ -438,6 +457,7 @@ static void push(struct list_head *jobs, struct kcopyd_job *job)
 	unsigned long flags;
 	struct dm_kcopyd_client *kc = job->kc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&kc->job_lock, flags);
 	list_add_tail(&job->list, jobs);
 	spin_unlock_irqrestore(&kc->job_lock, flags);
@@ -449,6 +469,7 @@ static void push_head(struct list_head *jobs, struct kcopyd_job *job)
 	unsigned long flags;
 	struct dm_kcopyd_client *kc = job->kc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&kc->job_lock, flags);
 	list_add(&job->list, jobs);
 	spin_unlock_irqrestore(&kc->job_lock, flags);
@@ -471,6 +492,7 @@ static int run_complete_job(struct kcopyd_job *job)
 	dm_kcopyd_notify_fn fn = job->fn;
 	struct dm_kcopyd_client *kc = job->kc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (job->pages && job->pages != &zero_page_list)
 		kcopyd_put_pages(kc, job->pages);
 	/*
@@ -495,6 +517,7 @@ static void complete_io(unsigned long error, void *context)
 	io_job_finish(kc->throttle);
 
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (op_is_write(job->rw))
 			job->write_err |= error;
 		else
@@ -583,6 +606,7 @@ static int process_jobs(struct list_head *jobs, struct dm_kcopyd_client *kc,
 	struct kcopyd_job *job;
 	int r, count = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((job = pop(jobs, kc))) {
 
 		r = fn(job);
@@ -617,6 +641,7 @@ static int process_jobs(struct list_head *jobs, struct dm_kcopyd_client *kc,
  */
 static void do_work(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dm_kcopyd_client *kc = container_of(work,
 					struct dm_kcopyd_client, kcopyd_work);
 	struct blk_plug plug;
@@ -645,7 +670,9 @@ static void dispatch_job(struct kcopyd_job *job)
 	struct dm_kcopyd_client *kc = job->kc;
 	atomic_inc(&kc->nr_jobs);
 	if (unlikely(!job->source.count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		push(&kc->complete_jobs, job);
+}
 	else if (job->pages == &zero_page_list)
 		push(&kc->io_jobs, job);
 	else
@@ -667,7 +694,9 @@ static void segment_complete(int read_err, unsigned long write_err,
 
 	/* update the error */
 	if (read_err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		job->read_err = 1;
+}
 
 	if (write_err)
 		job->write_err |= write_err;
@@ -732,6 +761,7 @@ static void split_job(struct kcopyd_job *master_job)
 	atomic_inc(&master_job->kc->nr_jobs);
 
 	atomic_set(&master_job->sub_jobs, SPLIT_COUNT);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < SPLIT_COUNT; i++) {
 		master_job[i + 1].master_job = master_job;
 		segment_complete(0, 0u, &master_job[i + 1]);
@@ -760,6 +790,7 @@ int dm_kcopyd_copy(struct dm_kcopyd_client *kc, struct dm_io_region *from,
 	job->write_err = 0;
 
 	job->num_dests = num_dests;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&job->dests, dests, sizeof(*dests) * num_dests);
 
 	/*
@@ -824,6 +855,7 @@ int dm_kcopyd_zero(struct dm_kcopyd_client *kc,
 		   unsigned num_dests, struct dm_io_region *dests,
 		   unsigned flags, dm_kcopyd_notify_fn fn, void *context)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dm_kcopyd_copy(kc, NULL, num_dests, dests, flags, fn, context);
 }
 EXPORT_SYMBOL(dm_kcopyd_zero);
@@ -882,7 +914,9 @@ struct dm_kcopyd_client *dm_kcopyd_client_create(struct dm_kcopyd_throttle *thro
 
 	kc = kmalloc(sizeof(*kc), GFP_KERNEL);
 	if (!kc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	spin_lock_init(&kc->job_lock);
 	INIT_LIST_HEAD(&kc->complete_jobs);
diff --git a/drivers/md/dm-linear.c b/drivers/md/dm-linear.c
index d5f8eff..d0e78ce 100644
--- a/drivers/md/dm-linear.c
+++ b/drivers/md/dm-linear.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2001-2003 Sistina Software (UK) Limited.
  *
@@ -34,6 +36,7 @@ static int linear_ctr(struct dm_target *ti, unsigned int argc, char **argv)
 	int ret;
 
 	if (argc != 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ti->error = "Invalid argument count";
 		return -EINVAL;
 	}
@@ -88,6 +91,7 @@ static void linear_map_bio(struct dm_target *ti, struct bio *bio)
 {
 	struct linear_c *lc = ti->private;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bio_set_dev(bio, lc->dev->bdev);
 	if (bio_sectors(bio) || bio_op(bio) == REQ_OP_ZONE_RESET)
 		bio->bi_iter.bi_sector =
@@ -96,6 +100,7 @@ static void linear_map_bio(struct dm_target *ti, struct bio *bio)
 
 static int linear_map(struct dm_target *ti, struct bio *bio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	linear_map_bio(ti, bio);
 
 	return DM_MAPIO_REMAPPED;
@@ -106,6 +111,7 @@ static int linear_end_io(struct dm_target *ti, struct bio *bio,
 {
 	struct linear_c *lc = ti->private;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!*error && bio_op(bio) == REQ_OP_ZONE_REPORT)
 		dm_remap_zone_report(ti, bio, lc->start);
 
@@ -166,7 +172,9 @@ static long linear_dax_direct_access(struct dm_target *ti, pgoff_t pgoff,
 	dev_sector = linear_map_sector(ti, sector);
 	ret = bdev_dax_pgoff(bdev, dev_sector, nr_pages * PAGE_SIZE, &pgoff);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return dax_direct_access(dax_dev, pgoff, nr_pages, kaddr, pfn);
 }
 
@@ -180,7 +188,9 @@ static size_t linear_dax_copy_from_iter(struct dm_target *ti, pgoff_t pgoff,
 
 	dev_sector = linear_map_sector(ti, sector);
 	if (bdev_dax_pgoff(bdev, dev_sector, ALIGN(bytes, PAGE_SIZE), &pgoff))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return dax_copy_from_iter(dax_dev, pgoff, addr, bytes, i);
 }
 
@@ -205,12 +215,15 @@ int __init dm_linear_init(void)
 	int r = dm_register_target(&linear_target);
 
 	if (r < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DMERR("register failed %d", r);
+}
 
 	return r;
 }
 
 void dm_linear_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dm_unregister_target(&linear_target);
 }
diff --git a/drivers/md/dm-snap-persistent.c b/drivers/md/dm-snap-persistent.c
index c5534d2..487c853 100644
--- a/drivers/md/dm-snap-persistent.c
+++ b/drivers/md/dm-snap-persistent.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2001-2002 Sistina Software (UK) Limited.
  * Copyright (C) 2006-2008 Red Hat GmbH
diff --git a/drivers/md/dm-snap-transient.c b/drivers/md/dm-snap-transient.c
index 4d50a12..abbb209 100644
--- a/drivers/md/dm-snap-transient.c
+++ b/drivers/md/dm-snap-transient.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2001-2002 Sistina Software (UK) Limited.
  * Copyright (C) 2006-2008 Red Hat GmbH
diff --git a/drivers/md/dm-snap.c b/drivers/md/dm-snap.c
index a0613bd..49980d7 100644
--- a/drivers/md/dm-snap.c
+++ b/drivers/md/dm-snap.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * dm-snapshot.c
  *
diff --git a/drivers/md/dm-stats.c b/drivers/md/dm-stats.c
index a786850..4ef9010 100644
--- a/drivers/md/dm-stats.c
+++ b/drivers/md/dm-stats.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/errno.h>
 #include <linux/numa.h>
@@ -84,7 +86,9 @@ static bool __check_shared_memory(size_t alloc_size)
 
 	a = shared_memory_amount + alloc_size;
 	if (a < shared_memory_amount)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (a >> PAGE_SHIFT > totalram_pages / DM_STATS_MEMORY_FACTOR)
 		return false;
 #ifdef CONFIG_MMU
@@ -109,6 +113,7 @@ static bool check_shared_memory(size_t alloc_size)
 
 static bool claim_shared_memory(size_t alloc_size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&shared_memory_lock);
 
 	if (!__check_shared_memory(alloc_size)) {
@@ -127,6 +132,7 @@ static void free_shared_memory(size_t alloc_size)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&shared_memory_lock, flags);
 
 	if (WARN_ON_ONCE(shared_memory_amount < alloc_size)) {
@@ -145,7 +151,9 @@ static void *dm_kvzalloc(size_t alloc_size, int node)
 	void *p;
 
 	if (!claim_shared_memory(alloc_size))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	p = kvzalloc_node(alloc_size, GFP_KERNEL | __GFP_NOMEMALLOC, node);
 	if (p)
@@ -158,6 +166,7 @@ static void *dm_kvzalloc(size_t alloc_size, int node)
 
 static void dm_kvfree(void *ptr, size_t alloc_size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ptr)
 		return;
 
@@ -169,6 +178,7 @@ static void dm_kvfree(void *ptr, size_t alloc_size)
 static void dm_stat_free(struct rcu_head *head)
 {
 	int cpu;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dm_stat *s = container_of(head, struct dm_stat, rcu_head);
 
 	kfree(s->histogram_boundaries);
@@ -184,6 +194,7 @@ static void dm_stat_free(struct rcu_head *head)
 
 static int dm_stat_in_flight(struct dm_stat_shared *shared)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_read(&shared->in_flight[READ]) +
 	       atomic_read(&shared->in_flight[WRITE]);
 }
@@ -193,6 +204,7 @@ void dm_stats_init(struct dm_stats *stats)
 	int cpu;
 	struct dm_stats_last_position *last;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_init(&stats->mutex);
 	INIT_LIST_HEAD(&stats->list);
 	stats->last = alloc_percpu(struct dm_stats_last_position);
@@ -209,6 +221,7 @@ void dm_stats_cleanup(struct dm_stats *stats)
 	struct dm_stat *s;
 	struct dm_stat_shared *shared;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!list_empty(&stats->list)) {
 		s = container_of(stats->list.next, struct dm_stat, list_entry);
 		list_del(&s->list_entry);
@@ -251,6 +264,7 @@ static int dm_stats_create(struct dm_stats *stats, sector_t start, sector_t end,
 	int ret_id;
 	int r;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (end < start || !step)
 		return -EINVAL;
 
@@ -393,6 +407,7 @@ static struct dm_stat *__dm_stats_find(struct dm_stats *stats, int id)
 {
 	struct dm_stat *s;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(s, &stats->list, list_entry) {
 		if (s->id > id)
 			break;
@@ -412,6 +427,7 @@ static int dm_stats_delete(struct dm_stats *stats, int id)
 
 	s = __dm_stats_find(stats, id);
 	if (!s) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&stats->mutex);
 		return -ENOENT;
 	}
@@ -451,6 +467,7 @@ static int dm_stats_list(struct dm_stats *stats, const char *program,
 	 */
 
 	mutex_lock(&stats->mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(s, &stats->list, list_entry) {
 		if (!program || !strcmp(program, s->program_id)) {
 			len = s->end - s->start;
@@ -489,7 +506,9 @@ static void dm_stat_round(struct dm_stat *s, struct dm_stat_shared *shared,
 	unsigned in_flight_read, in_flight_write;
 
 	if (likely(!(s->stat_flags & STAT_PRECISE_TIMESTAMPS)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		now = jiffies;
+}
 	else
 		now = ktime_to_ns(ktime_get());
 
@@ -588,6 +607,7 @@ static void __dm_stat_bio(struct dm_stat *s, int bi_rw,
 	sector_t rel_sector, offset, todo, fragment_len;
 	size_t entry;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (end_sector <= s->start || bi_sector >= s->end)
 		return;
 	if (unlikely(bi_sector < s->start)) {
@@ -629,7 +649,9 @@ void dm_stats_account_io(struct dm_stats *stats, unsigned long bi_rw,
 	bool got_precise_time;
 
 	if (unlikely(!bi_sectors))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	end_sector = bi_sector + bi_sectors;
 
@@ -671,6 +693,7 @@ static void __dm_stat_init_temporary_percpu_totals(struct dm_stat_shared *shared
 	int cpu;
 	struct dm_stat_percpu *p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_irq_disable();
 	p = &s->stat_percpu[smp_processor_id()][x];
 	dm_stat_round(s, shared, p);
@@ -721,6 +744,7 @@ static void __dm_stat_clear(struct dm_stat *s, size_t idx_start, size_t idx_end,
 	struct dm_stat_shared *shared;
 	struct dm_stat_percpu *p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (x = idx_start; x < idx_end; x++) {
 		shared = &s->stat_shared[x];
 		if (init_tmp_percpu_totals)
@@ -760,6 +784,7 @@ static int dm_stats_clear(struct dm_stats *stats, int id)
 
 	s = __dm_stats_find(stats, id);
 	if (!s) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&stats->mutex);
 		return -ENOENT;
 	}
@@ -780,7 +805,9 @@ static unsigned long long dm_jiffies_to_msec64(struct dm_stat *s, unsigned long
 	unsigned mult;
 
 	if (s->stat_flags & STAT_PRECISE_TIMESTAMPS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return j;
+}
 
 	result = 0;
 	if (j)
@@ -815,6 +842,7 @@ static int dm_stats_print(struct dm_stats *stats, int id,
 
 	s = __dm_stats_find(stats, id);
 	if (!s) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&stats->mutex);
 		return -ENOENT;
 	}
@@ -884,6 +912,7 @@ static int dm_stats_set_aux(struct dm_stats *stats, int id, const char *aux_data
 
 	s = __dm_stats_find(stats, id);
 	if (!s) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&stats->mutex);
 		return -ENOENT;
 	}
@@ -910,6 +939,7 @@ static int parse_histogram(const char *h, unsigned *n_histogram_entries,
 	unsigned long long last;
 
 	*n_histogram_entries = 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (q = h; *q; q++)
 		if (*q == ',')
 			(*n_histogram_entries)++;
@@ -965,6 +995,7 @@ static int message_stats_create(struct mapped_device *md,
 	if (argc < 3)
 		goto ret_einval;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	as.argc = argc;
 	as.argv = argv;
 	dm_consume_args(&as, 1);
@@ -1070,7 +1101,9 @@ static int message_stats_delete(struct mapped_device *md,
 	char dummy;
 
 	if (argc != 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (sscanf(argv[1], "%d%c", &id, &dummy) != 1 || id < 0)
 		return -EINVAL;
@@ -1085,7 +1118,9 @@ static int message_stats_clear(struct mapped_device *md,
 	char dummy;
 
 	if (argc != 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (sscanf(argv[1], "%d%c", &id, &dummy) != 1 || id < 0)
 		return -EINVAL;
@@ -1100,6 +1135,7 @@ static int message_stats_list(struct mapped_device *md,
 	int r;
 	const char *program = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (argc < 1 || argc > 2)
 		return -EINVAL;
 
@@ -1124,6 +1160,7 @@ static int message_stats_print(struct mapped_device *md,
 	char dummy;
 	unsigned long idx_start = 0, idx_len = ULONG_MAX;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (argc != 2 && argc != 4)
 		return -EINVAL;
 
@@ -1150,7 +1187,9 @@ static int message_stats_set_aux(struct mapped_device *md,
 	char dummy;
 
 	if (argc != 3)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (sscanf(argv[1], "%d%c", &id, &dummy) != 1 || id < 0)
 		return -EINVAL;
@@ -1165,7 +1204,9 @@ int dm_stats_message(struct mapped_device *md, unsigned argc, char **argv,
 
 	/* All messages here must start with '@' */
 	if (!strcasecmp(argv[0], "@stats_create"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		r = message_stats_create(md, argc, argv, result, maxlen);
+}
 	else if (!strcasecmp(argv[0], "@stats_delete"))
 		r = message_stats_delete(md, argc, argv);
 	else if (!strcasecmp(argv[0], "@stats_clear"))
@@ -1196,6 +1237,7 @@ int __init dm_statistics_init(void)
 
 void dm_statistics_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dm_stat_need_rcu_barrier)
 		rcu_barrier();
 	if (WARN_ON(shared_memory_amount))
diff --git a/drivers/md/dm-stripe.c b/drivers/md/dm-stripe.c
index b5e8921..9f8c2ee 100644
--- a/drivers/md/dm-stripe.c
+++ b/drivers/md/dm-stripe.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2001-2003 Sistina Software (UK) Limited.
  *
@@ -50,6 +52,7 @@ struct stripe_c {
  */
 static void trigger_event(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct stripe_c *sc = container_of(work, struct stripe_c,
 					   trigger_event);
 	dm_table_event(sc->ti->table);
@@ -79,7 +82,9 @@ static int get_stripe(struct dm_target *ti, struct stripe_c *sc,
 	int ret;
 
 	if (sscanf(argv[1], "%llu%c", &start, &dummy) != 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ret = dm_get_device(ti, argv[0], dm_table_get_mode(ti->table),
 			    &sc->stripe[stripe].dev);
@@ -105,6 +110,7 @@ static int stripe_ctr(struct dm_target *ti, unsigned int argc, char **argv)
 	unsigned int i;
 
 	if (argc < 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ti->error = "Not enough arguments";
 		return -EINVAL;
 	}
@@ -205,6 +211,7 @@ static void stripe_dtr(struct dm_target *ti)
 	unsigned int i;
 	struct stripe_c *sc = (struct stripe_c *) ti->private;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < sc->stripes; i++)
 		dm_put_device(ti, sc->stripe[i].dev);
 
@@ -221,6 +228,7 @@ static void stripe_map_sector(struct stripe_c *sc, sector_t sector,
 	if (sc->chunk_size_shift < 0)
 		chunk_offset = sector_div(chunk, sc->chunk_size);
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		chunk_offset = chunk & (sc->chunk_size - 1);
 		chunk >>= sc->chunk_size_shift;
 	}
@@ -247,7 +255,9 @@ static void stripe_map_range_sector(struct stripe_c *sc, sector_t sector,
 
 	stripe_map_sector(sc, sector, &stripe, result);
 	if (stripe == target_stripe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* round down */
 	sector = *result;
@@ -270,6 +280,7 @@ static int stripe_map_range(struct stripe_c *sc, struct bio *bio,
 	stripe_map_range_sector(sc, bio_end_sector(bio),
 				target_stripe, &end);
 	if (begin < end) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bio_set_dev(bio, sc->stripe[target_stripe].dev->bdev);
 		bio->bi_iter.bi_sector = begin +
 			sc->stripe[target_stripe].physical_start;
@@ -289,6 +300,7 @@ static int stripe_map(struct dm_target *ti, struct bio *bio)
 	unsigned target_bio_nr;
 
 	if (bio->bi_opf & REQ_PREFLUSH) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		target_bio_nr = dm_bio_get_target_bio_nr(bio);
 		BUG_ON(target_bio_nr >= sc->stripes);
 		bio_set_dev(bio, sc->stripe[target_bio_nr].dev->bdev);
@@ -328,7 +340,9 @@ static long stripe_dax_direct_access(struct dm_target *ti, pgoff_t pgoff,
 
 	ret = bdev_dax_pgoff(bdev, dev_sector, nr_pages * PAGE_SIZE, &pgoff);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return dax_direct_access(dax_dev, pgoff, nr_pages, kaddr, pfn);
 }
 
@@ -347,7 +361,9 @@ static size_t stripe_dax_copy_from_iter(struct dm_target *ti, pgoff_t pgoff,
 	bdev = sc->stripe[stripe].dev->bdev;
 
 	if (bdev_dax_pgoff(bdev, dev_sector, ALIGN(bytes, PAGE_SIZE), &pgoff))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return dax_copy_from_iter(dax_dev, pgoff, addr, bytes, i);
 }
 
@@ -402,7 +418,9 @@ static int stripe_end_io(struct dm_target *ti, struct bio *bio,
 	struct stripe_c *sc = ti->private;
 
 	if (!*error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return DM_ENDIO_DONE; /* I/O complete */
+}
 
 	if (bio->bi_opf & REQ_RAHEAD)
 		return DM_ENDIO_DONE;
@@ -438,6 +456,7 @@ static int stripe_iterate_devices(struct dm_target *ti,
 	unsigned i = 0;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = fn(ti, sc->stripe[i].dev,
 			 sc->stripe[i].physical_start,
 			 sc->stripe_width, data);
@@ -478,12 +497,15 @@ int __init dm_stripe_init(void)
 
 	r = dm_register_target(&stripe_target);
 	if (r < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DMWARN("target registration failed");
+}
 
 	return r;
 }
 
 void dm_stripe_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dm_unregister_target(&stripe_target);
 }
diff --git a/drivers/md/dm-target.c b/drivers/md/dm-target.c
index c0d7e60..373350c 100644
--- a/drivers/md/dm-target.c
+++ b/drivers/md/dm-target.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2001 Sistina Software (UK) Limited
  *
@@ -24,8 +26,11 @@ static inline struct target_type *__find_target_type(const char *name)
 
 	list_for_each_entry(tt, &_targets, list)
 		if (!strcmp(name, tt->name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return tt;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -36,6 +41,7 @@ static struct target_type *get_target_type(const char *name)
 	down_read(&_lock);
 
 	tt = __find_target_type(name);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tt && !try_module_get(tt->module))
 		tt = NULL;
 
@@ -45,11 +51,13 @@ static struct target_type *get_target_type(const char *name)
 
 static void load_module(const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	request_module("dm-%s", name);
 }
 
 struct target_type *dm_get_target_type(const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct target_type *tt = get_target_type(name);
 
 	if (!tt) {
@@ -62,6 +70,7 @@ struct target_type *dm_get_target_type(const char *name)
 
 void dm_put_target_type(struct target_type *tt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	down_read(&_lock);
 	module_put(tt->module);
 	up_read(&_lock);
@@ -73,6 +82,7 @@ int dm_target_iterate(void (*iter_func)(struct target_type *tt,
 	struct target_type *tt;
 
 	down_read(&_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(tt, &_targets, list)
 		iter_func(tt, param);
 	up_read(&_lock);
@@ -86,7 +96,9 @@ int dm_register_target(struct target_type *tt)
 
 	down_write(&_lock);
 	if (__find_target_type(tt->name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rv = -EEXIST;
+}
 	else
 		list_add(&tt->list, &_targets);
 
@@ -96,6 +108,7 @@ int dm_register_target(struct target_type *tt)
 
 void dm_unregister_target(struct target_type *tt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	down_write(&_lock);
 	if (!__find_target_type(tt->name)) {
 		DMCRIT("Unregistering unrecognised target: %s", tt->name);
@@ -128,6 +141,7 @@ static void io_err_dtr(struct dm_target *tt)
 
 static int io_err_map(struct dm_target *tt, struct bio *bio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return DM_MAPIO_KILL;
 }
 
@@ -135,6 +149,7 @@ static int io_err_clone_and_map_rq(struct dm_target *ti, struct request *rq,
 				   union map_info *map_context,
 				   struct request **clone)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return DM_MAPIO_KILL;
 }
 
@@ -145,6 +160,7 @@ static void io_err_release_clone_rq(struct request *clone)
 static long io_err_dax_direct_access(struct dm_target *ti, pgoff_t pgoff,
 		long nr_pages, void **kaddr, pfn_t *pfn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
@@ -167,6 +183,7 @@ int __init dm_target_init(void)
 
 void dm_target_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dm_unregister_target(&error_target);
 }
 
diff --git a/drivers/md/dm-thin.c b/drivers/md/dm-thin.c
index 02e42ba..9659d7a 100644
--- a/drivers/md/dm-thin.c
+++ b/drivers/md/dm-thin.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2011-2012 Red Hat UK.
  *
diff --git a/drivers/md/dm.c b/drivers/md/dm.c
index 1dfc855..c588e89 100644
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2001, 2002 Sistina Software (UK) Limited.
  * Copyright (C) 2004-2008 Red Hat, Inc. All rights reserved.
@@ -54,6 +56,7 @@ DECLARE_WAIT_QUEUE_HEAD(dm_global_eventq);
 
 void dm_issue_global_event(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_inc(&dm_global_event_nr);
 	wake_up(&dm_global_eventq);
 }
@@ -119,7 +122,9 @@ static int __dm_get_module_param_int(int *module_param, int min, int max)
 	bool modified = true;
 
 	if (param < min)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		modified_param = min;
+}
 	else if (param > max)
 		modified_param = max;
 	else
@@ -140,7 +145,9 @@ unsigned __dm_get_module_param(unsigned *module_param,
 	unsigned modified_param = 0;
 
 	if (!param)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		modified_param = def;
+}
 	else if (param > max)
 		modified_param = max;
 
@@ -160,7 +167,7 @@ unsigned dm_get_reserved_bio_based_ios(void)
 EXPORT_SYMBOL_GPL(dm_get_reserved_bio_based_ios);
 
 static unsigned dm_get_numa_node(void)
-{
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __dm_get_module_param_int(&dm_numa_node,
 					 DM_NUMA_NODE, num_online_nodes() - 1);
 }
@@ -172,7 +179,9 @@ static int __init local_init(void)
 	/* allocate a slab for the dm_ios */
 	_io_cache = KMEM_CACHE(dm_io, 0);
 	if (!_io_cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 
 	_rq_tio_cache = KMEM_CACHE(dm_rq_target_io, 0);
 	if (!_rq_tio_cache)
@@ -183,12 +192,14 @@ static int __init local_init(void)
 	if (!_rq_cache)
 		goto out_free_rq_tio_cache;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	r = dm_uevent_init();
 	if (r)
 		goto out_free_rq_cache;
 
 	deferred_remove_workqueue = alloc_workqueue("kdmremove", WQ_UNBOUND, 1);
 	if (!deferred_remove_workqueue) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		r = -ENOMEM;
 		goto out_uevent_exit;
 	}
@@ -201,6 +212,7 @@ static int __init local_init(void)
 	if (!_major)
 		_major = r;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_free_workqueue:
@@ -219,6 +231,7 @@ static int __init local_init(void)
 
 static void local_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flush_scheduled_work();
 	destroy_workqueue(deferred_remove_workqueue);
 
@@ -267,12 +280,14 @@ static int __init dm_init(void)
 			goto bad;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
       bad:
 	while (i--)
 		_exits[i]();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return r;
 }
 
@@ -280,6 +295,7 @@ static void __exit dm_exit(void)
 {
 	int i = ARRAY_SIZE(_exits);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (i--)
 		_exits[i]();
 
@@ -294,6 +310,7 @@ static void __exit dm_exit(void)
  */
 int dm_deleting_md(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return test_bit(DMF_DELETING, &md->flags);
 }
 
@@ -307,6 +324,7 @@ static int dm_blk_open(struct block_device *bdev, fmode_t mode)
 	if (!md)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(DMF_FREEING, &md->flags) ||
 	    dm_deleting_md(md)) {
 		md = NULL;
@@ -328,6 +346,7 @@ static void dm_blk_close(struct gendisk *disk, fmode_t mode)
 	spin_lock(&_minor_lock);
 
 	md = disk->private_data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(!md))
 		goto out;
 
@@ -342,6 +361,7 @@ static void dm_blk_close(struct gendisk *disk, fmode_t mode)
 
 int dm_open_count(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_read(&md->open_count);
 }
 
@@ -355,6 +375,7 @@ int dm_lock_for_deletion(struct mapped_device *md, bool mark_deferred, bool only
 	spin_lock(&_minor_lock);
 
 	if (dm_open_count(md)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		r = -EBUSY;
 		if (mark_deferred)
 			set_bit(DMF_DEFERRED_REMOVE, &md->flags);
@@ -374,6 +395,7 @@ int dm_cancel_deferred_remove(struct mapped_device *md)
 
 	spin_lock(&_minor_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(DMF_DELETING, &md->flags))
 		r = -EBUSY;
 	else
@@ -386,21 +408,25 @@ int dm_cancel_deferred_remove(struct mapped_device *md)
 
 static void do_deferred_remove(struct work_struct *w)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dm_deferred_remove();
 }
 
 sector_t dm_get_size(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return get_capacity(md->disk);
 }
 
 struct request_queue *dm_get_md_queue(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return md->queue;
 }
 
 struct dm_stats *dm_get_stats(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &md->stats;
 }
 
@@ -463,7 +489,9 @@ static int dm_blk_ioctl(struct block_device *bdev, fmode_t mode,
 
 	r = dm_grab_bdev_for_ioctl(md, &bdev, &mode);
 	if (r < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 
 	if (r > 0) {
 		/*
@@ -487,21 +515,25 @@ static int dm_blk_ioctl(struct block_device *bdev, fmode_t mode,
 
 static struct dm_io *alloc_io(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mempool_alloc(md->io_pool, GFP_NOIO);
 }
 
 static void free_io(struct mapped_device *md, struct dm_io *io)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mempool_free(io, md->io_pool);
 }
 
 static void free_tio(struct dm_target_io *tio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bio_put(&tio->clone);
 }
 
 int md_in_flight(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_read(&md->pending[READ]) +
 	       atomic_read(&md->pending[WRITE]);
 }
@@ -511,6 +543,7 @@ static void start_io_acct(struct dm_io *io)
 	struct mapped_device *md = io->md;
 	struct bio *bio = io->bio;
 	int cpu;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int rw = bio_data_dir(bio);
 
 	io->start_time = jiffies;
@@ -533,6 +566,7 @@ static void end_io_acct(struct dm_io *io)
 	struct bio *bio = io->bio;
 	unsigned long duration = jiffies - io->start_time;
 	int pending;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int rw = bio_data_dir(bio);
 
 	generic_end_io_acct(md->queue, rw, &dm_disk(md)->part0, io->start_time);
@@ -562,6 +596,7 @@ static void queue_io(struct mapped_device *md, struct bio *bio)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&md->deferred_lock, flags);
 	bio_list_add(&md->deferred, bio);
 	spin_unlock_irqrestore(&md->deferred_lock, flags);
@@ -575,6 +610,7 @@ static void queue_io(struct mapped_device *md, struct bio *bio)
  */
 struct dm_table *dm_get_live_table(struct mapped_device *md, int *srcu_idx) __acquires(md->io_barrier)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*srcu_idx = srcu_read_lock(&md->io_barrier);
 
 	return srcu_dereference(md->map, &md->io_barrier);
@@ -582,11 +618,13 @@ struct dm_table *dm_get_live_table(struct mapped_device *md, int *srcu_idx) __ac
 
 void dm_put_live_table(struct mapped_device *md, int srcu_idx) __releases(md->io_barrier)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	srcu_read_unlock(&md->io_barrier, srcu_idx);
 }
 
 void dm_sync_table(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	synchronize_srcu(&md->io_barrier);
 	synchronize_rcu_expedited();
 }
@@ -597,12 +635,14 @@ void dm_sync_table(struct mapped_device *md)
  */
 static struct dm_table *dm_get_live_table_fast(struct mapped_device *md) __acquires(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	return rcu_dereference(md->map);
 }
 
 static void dm_put_live_table_fast(struct mapped_device *md) __releases(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -617,6 +657,7 @@ static int open_table_device(struct table_device *td, dev_t dev,
 
 	int r;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(td->dm_dev.bdev);
 
 	bdev = blkdev_get_by_dev(dev, td->dm_dev.mode | FMODE_EXCL, _claim_ptr);
@@ -639,6 +680,7 @@ static int open_table_device(struct table_device *td, dev_t dev,
  */
 static void close_table_device(struct table_device *td, struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!td->dm_dev.bdev)
 		return;
 
@@ -653,6 +695,7 @@ static struct table_device *find_table_device(struct list_head *l, dev_t dev,
 					      fmode_t mode) {
 	struct table_device *td;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(td, l, list)
 		if (td->dm_dev.bdev->bd_dev == dev && td->dm_dev.mode == mode)
 			return td;
@@ -1124,6 +1167,7 @@ struct dm_offload {
 
 static void flush_current_bio_list(struct blk_plug_cb *cb, bool from_schedule)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dm_offload *o = container_of(cb, struct dm_offload, cb);
 	struct bio_list list;
 	struct bio *bio;
@@ -1156,6 +1200,7 @@ static void flush_current_bio_list(struct blk_plug_cb *cb, bool from_schedule)
 
 static void dm_offload_start(struct dm_offload *o)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	blk_start_plug(&o->plug);
 	o->cb.callback = flush_current_bio_list;
 	list_add(&o->cb.list, &current->plug->cb_list);
@@ -1163,6 +1208,7 @@ static void dm_offload_start(struct dm_offload *o)
 
 static void dm_offload_end(struct dm_offload *o)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_del(&o->cb.list);
 	blk_finish_plug(&o->plug);
 }
@@ -1223,6 +1269,7 @@ struct clone_info {
 
 static void bio_setup_sector(struct bio *bio, sector_t sector, unsigned len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bio->bi_iter.bi_sector = sector;
 	bio->bi_iter.bi_size = to_bytes(len);
 }
@@ -1240,6 +1287,7 @@ static int clone_bio(struct dm_target_io *tio, struct bio *bio,
 	if (unlikely(bio_integrity(bio) != NULL)) {
 		int r;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unlikely(!dm_target_has_integrity(tio->ti->type) &&
 			     !dm_target_passes_integrity(tio->ti->type))) {
 			DMWARN("%s: the target %s doesn't support integrity data.",
@@ -1271,6 +1319,7 @@ static struct dm_target_io *alloc_tio(struct clone_info *ci,
 	struct bio *clone;
 
 	clone = bio_alloc_bioset(GFP_NOIO, 0, ci->md->bs);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tio = container_of(clone, struct dm_target_io, clone);
 
 	tio->io = ci->io;
@@ -1284,6 +1333,7 @@ static void __clone_and_map_simple_bio(struct clone_info *ci,
 				       struct dm_target *ti,
 				       unsigned target_bio_nr, unsigned *len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dm_target_io *tio = alloc_tio(ci, ti, target_bio_nr);
 	struct bio *clone = &tio->clone;
 
@@ -1301,6 +1351,7 @@ static void __send_duplicate_bios(struct clone_info *ci, struct dm_target *ti,
 {
 	unsigned target_bio_nr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (target_bio_nr = 0; target_bio_nr < num_bios; target_bio_nr++)
 		__clone_and_map_simple_bio(ci, ti, target_bio_nr, len);
 }
@@ -1310,6 +1361,7 @@ static int __send_empty_flush(struct clone_info *ci)
 	unsigned target_nr = 0;
 	struct dm_target *ti;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(bio_has_data(ci->bio));
 	while ((ti = dm_table_get_target(ci->map, target_nr++)))
 		__send_duplicate_bios(ci, ti, ti->num_flush_bios, NULL);
@@ -1350,16 +1402,19 @@ typedef unsigned (*get_num_bios_fn)(struct dm_target *ti);
 
 static unsigned get_num_discard_bios(struct dm_target *ti)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ti->num_discard_bios;
 }
 
 static unsigned get_num_write_same_bios(struct dm_target *ti)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ti->num_write_same_bios;
 }
 
 static unsigned get_num_write_zeroes_bios(struct dm_target *ti)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ti->num_write_zeroes_bios;
 }
 
@@ -1367,6 +1422,7 @@ typedef bool (*is_split_required_fn)(struct dm_target *ti);
 
 static bool is_split_required_for_discard(struct dm_target *ti)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ti->split_discard_bios;
 }
 
@@ -1379,6 +1435,7 @@ static int __send_changing_extent_only(struct clone_info *ci,
 	unsigned num_bios;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ti = dm_table_find_target(ci->map, ci->sector);
 		if (!dm_target_is_valid(ti))
 			return -EIO;
@@ -1408,17 +1465,20 @@ static int __send_changing_extent_only(struct clone_info *ci,
 
 static int __send_discard(struct clone_info *ci)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __send_changing_extent_only(ci, get_num_discard_bios,
 					   is_split_required_for_discard);
 }
 
 static int __send_write_same(struct clone_info *ci)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __send_changing_extent_only(ci, get_num_write_same_bios, NULL);
 }
 
 static int __send_write_zeroes(struct clone_info *ci)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __send_changing_extent_only(ci, get_num_write_zeroes_bios, NULL);
 }
 
@@ -1433,7 +1493,9 @@ static int __split_and_process_non_flush(struct clone_info *ci)
 	int r;
 
 	if (unlikely(bio_op(bio) == REQ_OP_DISCARD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return __send_discard(ci);
+}
 	else if (unlikely(bio_op(bio) == REQ_OP_WRITE_SAME))
 		return __send_write_same(ci);
 	else if (unlikely(bio_op(bio) == REQ_OP_WRITE_ZEROES))
@@ -1469,6 +1531,7 @@ static void __split_and_process_bio(struct mapped_device *md,
 	int error = 0;
 
 	if (unlikely(!map)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bio_io_error(bio);
 		return;
 	}
@@ -1514,6 +1577,7 @@ static void __split_and_process_bio(struct mapped_device *md,
  */
 static blk_qc_t dm_make_request(struct request_queue *q, struct bio *bio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int rw = bio_data_dir(bio);
 	struct mapped_device *md = q->queuedata;
 	int srcu_idx;
@@ -1545,6 +1609,7 @@ static int dm_any_congested(void *congested_data, int bdi_bits)
 	struct mapped_device *md = congested_data;
 	struct dm_table *map;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_bit(DMF_BLOCK_IO_FOR_SUSPEND, &md->flags)) {
 		if (dm_request_based(md)) {
 			/*
@@ -1568,6 +1633,7 @@ static int dm_any_congested(void *congested_data, int bdi_bits)
  *---------------------------------------------------------------*/
 static void free_minor(int minor)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&_minor_lock);
 	idr_remove(&_minor_idr, minor);
 	spin_unlock(&_minor_lock);
@@ -1581,7 +1647,9 @@ static int specific_minor(int minor)
 	int r;
 
 	if (minor >= (1 << MINORBITS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	idr_preload(GFP_KERNEL);
 	spin_lock(&_minor_lock);
@@ -1607,7 +1675,9 @@ static int next_free_minor(int *minor)
 	spin_unlock(&_minor_lock);
 	idr_preload_end();
 	if (r < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 	*minor = r;
 	return 0;
 }
@@ -1640,6 +1710,7 @@ void dm_init_md_queue(struct mapped_device *md)
 
 void dm_init_normal_md_queue(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	md->use_blk_mq = false;
 	dm_init_md_queue(md);
 
@@ -1651,6 +1722,7 @@ void dm_init_normal_md_queue(struct mapped_device *md)
 
 static void cleanup_mapped_device(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (md->wq)
 		destroy_workqueue(md->wq);
 	if (md->kworker_task)
@@ -1698,6 +1770,7 @@ static struct mapped_device *alloc_dev(int minor)
 
 	md = kvzalloc_node(sizeof(*md), GFP_KERNEL, numa_node_id);
 	if (!md) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DMWARN("unable to allocate device, out of memory.");
 		return NULL;
 	}
@@ -1804,6 +1877,7 @@ static void unlock_fs(struct mapped_device *md);
 
 static void free_dev(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int minor = MINOR(disk_devt(md->disk));
 
 	unlock_fs(md);
@@ -1820,6 +1894,7 @@ static void free_dev(struct mapped_device *md)
 
 static void __bind_mempools(struct mapped_device *md, struct dm_table *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dm_md_mempools *p = dm_table_get_md_mempools(t);
 
 	if (md->bs) {
@@ -1865,6 +1940,7 @@ static void event_callback(void *context)
 	LIST_HEAD(uevents);
 	struct mapped_device *md = (struct mapped_device *) context;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&md->uevent_lock, flags);
 	list_splice_init(&md->uevent_list, &uevents);
 	spin_unlock_irqrestore(&md->uevent_lock, flags);
@@ -1881,6 +1957,7 @@ static void event_callback(void *context)
  */
 static void __set_size(struct mapped_device *md, sector_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&md->suspend_lock);
 
 	set_capacity(md->disk, size);
@@ -1898,6 +1975,7 @@ static struct dm_table *__bind(struct mapped_device *md, struct dm_table *t,
 	struct request_queue *q = md->queue;
 	sector_t size;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&md->suspend_lock);
 
 	size = dm_table_get_size(t);
@@ -1947,6 +2025,7 @@ static struct dm_table *__bind(struct mapped_device *md, struct dm_table *t,
  */
 static struct dm_table *__unbind(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dm_table *map = rcu_dereference_protected(md->map, 1);
 
 	if (!map)
@@ -1968,7 +2047,9 @@ int dm_create(int minor, struct mapped_device **result)
 
 	md = alloc_dev(minor);
 	if (!md)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	dm_sysfs_init(md);
 
@@ -1982,27 +2063,32 @@ int dm_create(int minor, struct mapped_device **result)
  */
 void dm_lock_md_type(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&md->type_lock);
 }
 
 void dm_unlock_md_type(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&md->type_lock);
 }
 
 void dm_set_md_type(struct mapped_device *md, enum dm_queue_mode type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!mutex_is_locked(&md->type_lock));
 	md->type = type;
 }
 
 enum dm_queue_mode dm_get_md_type(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return md->type;
 }
 
 struct target_type *dm_get_immutable_target_type(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return md->immutable_target_type;
 }
 
@@ -2012,6 +2098,7 @@ struct target_type *dm_get_immutable_target_type(struct mapped_device *md)
  */
 struct queue_limits *dm_get_queue_limits(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!atomic_read(&md->holders));
 	return &md->queue->limits;
 }
@@ -2067,6 +2154,7 @@ struct mapped_device *dm_get_md(dev_t dev)
 	struct mapped_device *md;
 	unsigned minor = MINOR(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (MAJOR(dev) != _major || minor >= (1 << MINORBITS))
 		return NULL;
 
@@ -2093,22 +2181,26 @@ EXPORT_SYMBOL_GPL(dm_get_md);
 
 void *dm_get_mdptr(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return md->interface_ptr;
 }
 
 void dm_set_mdptr(struct mapped_device *md, void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	md->interface_ptr = ptr;
 }
 
 void dm_get(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_inc(&md->holders);
 	BUG_ON(test_bit(DMF_FREEING, &md->flags));
 }
 
 int dm_hold(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&_minor_lock);
 	if (test_bit(DMF_FREEING, &md->flags)) {
 		spin_unlock(&_minor_lock);
@@ -2122,12 +2214,14 @@ EXPORT_SYMBOL_GPL(dm_hold);
 
 const char *dm_device_name(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return md->name;
 }
 EXPORT_SYMBOL_GPL(dm_device_name);
 
 static void __dm_destroy(struct mapped_device *md, bool wait)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct request_queue *q = dm_get_md_queue(md);
 	struct dm_table *map;
 	int srcu_idx;
@@ -2178,16 +2272,19 @@ static void __dm_destroy(struct mapped_device *md, bool wait)
 
 void dm_destroy(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__dm_destroy(md, true);
 }
 
 void dm_destroy_immediate(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__dm_destroy(md, false);
 }
 
 void dm_put(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_dec(&md->holders);
 }
 EXPORT_SYMBOL_GPL(dm_put);
@@ -2197,6 +2294,7 @@ static int dm_wait_for_completion(struct mapped_device *md, long task_state)
 	int r = 0;
 	DEFINE_WAIT(wait);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		prepare_to_wait(&md->wait, &wait, task_state);
 
@@ -2220,6 +2318,7 @@ static int dm_wait_for_completion(struct mapped_device *md, long task_state)
  */
 static void dm_wq_work(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mapped_device *md = container_of(work, struct mapped_device,
 						work);
 	struct bio *c;
@@ -2247,6 +2346,7 @@ static void dm_wq_work(struct work_struct *work)
 
 static void dm_queue_flush(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clear_bit(DMF_BLOCK_IO_FOR_SUSPEND, &md->flags);
 	smp_mb__after_atomic();
 	queue_work(md->wq, &md->work);
@@ -2304,6 +2404,7 @@ static int lock_fs(struct mapped_device *md)
 {
 	int r;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(md->frozen_sb);
 
 	md->frozen_sb = freeze_bdev(md->bdev);
@@ -2320,6 +2421,7 @@ static int lock_fs(struct mapped_device *md)
 
 static void unlock_fs(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_bit(DMF_FROZEN, &md->flags))
 		return;
 
@@ -2345,6 +2447,7 @@ static int __dm_suspend(struct mapped_device *md, struct dm_table *map,
 	bool noflush = suspend_flags & DM_SUSPEND_NOFLUSH_FLAG;
 	int r;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&md->suspend_lock);
 
 	/*
@@ -2486,6 +2589,7 @@ int dm_suspend(struct mapped_device *md, unsigned suspend_flags)
 
 static int __dm_resume(struct mapped_device *md, struct dm_table *map)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (map) {
 		int r = dm_table_resume_targets(map);
 		if (r)
@@ -2553,6 +2657,7 @@ static void __dm_internal_suspend(struct mapped_device *md, unsigned suspend_fla
 {
 	struct dm_table *map = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&md->suspend_lock);
 
 	if (md->internal_suspend_count++)
@@ -2579,6 +2684,7 @@ static void __dm_internal_suspend(struct mapped_device *md, unsigned suspend_fla
 
 static void __dm_internal_resume(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!md->internal_suspend_count);
 
 	if (--md->internal_suspend_count)
@@ -2601,6 +2707,7 @@ static void __dm_internal_resume(struct mapped_device *md)
 
 void dm_internal_suspend_noflush(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&md->suspend_lock);
 	__dm_internal_suspend(md, DM_SUSPEND_NOFLUSH_FLAG);
 	mutex_unlock(&md->suspend_lock);
@@ -2609,6 +2716,7 @@ EXPORT_SYMBOL_GPL(dm_internal_suspend_noflush);
 
 void dm_internal_resume(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&md->suspend_lock);
 	__dm_internal_resume(md);
 	mutex_unlock(&md->suspend_lock);
@@ -2622,6 +2730,7 @@ EXPORT_SYMBOL_GPL(dm_internal_resume);
 
 void dm_internal_suspend_fast(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&md->suspend_lock);
 	if (dm_suspended_md(md) || dm_suspended_internally_md(md))
 		return;
@@ -2635,6 +2744,7 @@ EXPORT_SYMBOL_GPL(dm_internal_suspend_fast);
 
 void dm_internal_resume_fast(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dm_suspended_md(md) || dm_suspended_internally_md(md))
 		goto done;
 
@@ -2655,7 +2765,9 @@ int dm_kobject_uevent(struct mapped_device *md, enum kobject_action action,
 	char *envp[] = { udev_cookie, NULL };
 
 	if (!cookie)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return kobject_uevent(&disk_to_dev(md->disk)->kobj, action);
+}
 	else {
 		snprintf(udev_cookie, DM_COOKIE_LENGTH, "%s=%u",
 			 DM_COOKIE_ENV_VAR_NAME, cookie);
@@ -2666,16 +2778,19 @@ int dm_kobject_uevent(struct mapped_device *md, enum kobject_action action,
 
 uint32_t dm_next_uevent_seq(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_add_return(1, &md->uevent_seq);
 }
 
 uint32_t dm_get_event_nr(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_read(&md->event_nr);
 }
 
 int dm_wait_event(struct mapped_device *md, int event_nr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return wait_event_interruptible(md->eventq,
 			(event_nr != atomic_read(&md->event_nr)));
 }
@@ -2684,6 +2799,7 @@ void dm_uevent_add(struct mapped_device *md, struct list_head *elist)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&md->uevent_lock, flags);
 	list_add(elist, &md->uevent_list);
 	spin_unlock_irqrestore(&md->uevent_lock, flags);
@@ -2695,12 +2811,14 @@ void dm_uevent_add(struct mapped_device *md, struct list_head *elist)
  */
 struct gendisk *dm_disk(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return md->disk;
 }
 EXPORT_SYMBOL_GPL(dm_disk);
 
 struct kobject *dm_kobject(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &md->kobj_holder.kobj;
 }
 
@@ -2708,6 +2826,7 @@ struct mapped_device *dm_get_from_kobject(struct kobject *kobj)
 {
 	struct mapped_device *md;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	md = container_of(kobj, struct mapped_device, kobj_holder.kobj);
 
 	spin_lock(&_minor_lock);
@@ -2724,27 +2843,32 @@ struct mapped_device *dm_get_from_kobject(struct kobject *kobj)
 
 int dm_suspended_md(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return test_bit(DMF_SUSPENDED, &md->flags);
 }
 
 int dm_suspended_internally_md(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return test_bit(DMF_SUSPENDED_INTERNALLY, &md->flags);
 }
 
 int dm_test_deferred_remove_flag(struct mapped_device *md)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return test_bit(DMF_DEFERRED_REMOVE, &md->flags);
 }
 
 int dm_suspended(struct dm_target *ti)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dm_suspended_md(dm_table_get_md(ti->table));
 }
 EXPORT_SYMBOL_GPL(dm_suspended);
 
 int dm_noflush_suspending(struct dm_target *ti)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __noflush_suspending(dm_table_get_md(ti->table));
 }
 EXPORT_SYMBOL_GPL(dm_noflush_suspending);
@@ -2752,6 +2876,7 @@ EXPORT_SYMBOL_GPL(dm_noflush_suspending);
 struct dm_md_mempools *dm_alloc_md_mempools(struct mapped_device *md, enum dm_queue_mode type,
 					    unsigned integrity, unsigned per_io_data_size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dm_md_mempools *pools = kzalloc_node(sizeof(*pools), GFP_KERNEL, md->numa_node_id);
 	unsigned int pool_size = 0;
 	unsigned int front_pad;
@@ -2796,6 +2921,7 @@ struct dm_md_mempools *dm_alloc_md_mempools(struct mapped_device *md, enum dm_qu
 
 void dm_free_md_mempools(struct dm_md_mempools *pools)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pools)
 		return;
 
@@ -2823,6 +2949,7 @@ static int dm_call_pr(struct block_device *bdev, iterate_devices_callout_fn fn,
 	int ret = -ENOTTY, srcu_idx;
 
 	table = dm_get_live_table(md, &srcu_idx);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!table || !dm_table_get_size(table))
 		goto out;
 
@@ -2850,6 +2977,7 @@ static int __dm_pr_register(struct dm_target *ti, struct dm_dev *dev,
 	struct dm_pr *pr = data;
 	const struct pr_ops *ops = dev->bdev->bd_disk->fops->pr_ops;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ops || !ops->pr_register)
 		return -EOPNOTSUPP;
 	return ops->pr_register(dev->bdev, pr->old_key, pr->new_key, pr->flags);
@@ -2867,6 +2995,7 @@ static int dm_pr_register(struct block_device *bdev, u64 old_key, u64 new_key,
 	int ret;
 
 	ret = dm_call_pr(bdev, __dm_pr_register, &pr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret && new_key) {
 		/* unregister all paths if we failed to register any path */
 		pr.old_key = new_key;
@@ -2889,7 +3018,9 @@ static int dm_pr_reserve(struct block_device *bdev, u64 key, enum pr_type type,
 
 	r = dm_grab_bdev_for_ioctl(md, &bdev, &mode);
 	if (r < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 
 	ops = bdev->bd_disk->fops->pr_ops;
 	if (ops && ops->pr_reserve)
@@ -2910,7 +3041,9 @@ static int dm_pr_release(struct block_device *bdev, u64 key, enum pr_type type)
 
 	r = dm_grab_bdev_for_ioctl(md, &bdev, &mode);
 	if (r < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 
 	ops = bdev->bd_disk->fops->pr_ops;
 	if (ops && ops->pr_release)
@@ -2932,7 +3065,9 @@ static int dm_pr_preempt(struct block_device *bdev, u64 old_key, u64 new_key,
 
 	r = dm_grab_bdev_for_ioctl(md, &bdev, &mode);
 	if (r < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 
 	ops = bdev->bd_disk->fops->pr_ops;
 	if (ops && ops->pr_preempt)
@@ -2953,7 +3088,9 @@ static int dm_pr_clear(struct block_device *bdev, u64 key)
 
 	r = dm_grab_bdev_for_ioctl(md, &bdev, &mode);
 	if (r < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 
 	ops = bdev->bd_disk->fops->pr_ops;
 	if (ops && ops->pr_clear)
diff --git a/drivers/message/fusion/mptbase.c b/drivers/message/fusion/mptbase.c
index 84eab28..d91caa3 100644
--- a/drivers/message/fusion/mptbase.c
+++ b/drivers/message/fusion/mptbase.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/drivers/message/fusion/mptbase.c
  *      This is the Fusion MPT base driver which supports multiple
diff --git a/drivers/message/fusion/mptspi.c b/drivers/message/fusion/mptspi.c
index 9a336a1..42097dc 100644
--- a/drivers/message/fusion/mptspi.c
+++ b/drivers/message/fusion/mptspi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/drivers/message/fusion/mptspi.c
  *      For use with LSI PCI chip/adapter(s)
diff --git a/drivers/mfd/lpc_ich.c b/drivers/mfd/lpc_ich.c
index cf1120a..4a621e2 100644
--- a/drivers/mfd/lpc_ich.c
+++ b/drivers/mfd/lpc_ich.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  lpc_ich.c - LPC interface for Intel ICH
  *
diff --git a/drivers/mfd/lpc_sch.c b/drivers/mfd/lpc_sch.c
index a56e4ba..66f39e3 100644
--- a/drivers/mfd/lpc_sch.c
+++ b/drivers/mfd/lpc_sch.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  lpc_sch.c - LPC interface for Intel Poulsbo SCH
  *
diff --git a/drivers/mfd/sm501.c b/drivers/mfd/sm501.c
index 4053435..2127971 100644
--- a/drivers/mfd/sm501.c
+++ b/drivers/mfd/sm501.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* linux/drivers/mfd/sm501.c
  *
  * Copyright (C) 2006 Simtec Electronics
diff --git a/drivers/mfd/vx855.c b/drivers/mfd/vx855.c
index 84f01da..52d4b26 100644
--- a/drivers/mfd/vx855.c
+++ b/drivers/mfd/vx855.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Linux multi-function-device driver (MFD) for the integrated peripherals
  * of the VIA VX855 chipset
diff --git a/drivers/mfd/wl1273-core.c b/drivers/mfd/wl1273-core.c
index 7080465..21f8a7c 100644
--- a/drivers/mfd/wl1273-core.c
+++ b/drivers/mfd/wl1273-core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * MFD driver for wl1273 FM radio and audio codec submodules.
  *
diff --git a/drivers/net/Space.c b/drivers/net/Space.c
index 11fe712..6fa6c4e 100644
--- a/drivers/net/Space.c
+++ b/drivers/net/Space.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -48,14 +50,22 @@ static int __init probe_list2(int unit, struct devprobe2 *p, int autoprobe)
 	struct net_device *dev;
 
 	for (; p->probe; p++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (autoprobe && p->status)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev = p->probe(unit);
 		if (!IS_ERR(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (autoprobe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p->status = PTR_ERR(dev);
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 
@@ -132,7 +142,9 @@ static void __init ethif_probe2(int unit)
 	unsigned long base_addr = netdev_boot_base("eth", unit);
 
 	if (base_addr == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	(void)(probe_list2(unit, m68k_probes, base_addr == 0) &&
 		probe_list2(unit, isa_probes, base_addr == 0));
diff --git a/drivers/net/hyperv/netvsc_drv.c b/drivers/net/hyperv/netvsc_drv.c
index a32ae02..e33aae2 100644
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2009, Microsoft Corporation.
  *
diff --git a/drivers/net/ipvlan/ipvlan_core.c b/drivers/net/ipvlan/ipvlan_core.c
index c23dea48..7e10df3 100644
--- a/drivers/net/ipvlan/ipvlan_core.c
+++ b/drivers/net/ipvlan/ipvlan_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (c) 2014 Mahesh Bandewar <maheshb@google.com>
  *
  * This program is free software; you can redistribute it and/or
diff --git a/drivers/net/ipvlan/ipvlan_main.c b/drivers/net/ipvlan/ipvlan_main.c
index c74893c..5f487c2 100644
--- a/drivers/net/ipvlan/ipvlan_main.c
+++ b/drivers/net/ipvlan/ipvlan_main.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (c) 2014 Mahesh Bandewar <maheshb@google.com>
  *
  * This program is free software; you can redistribute it and/or
diff --git a/drivers/net/loopback.c b/drivers/net/loopback.c
index 3061249..783e98d 100644
--- a/drivers/net/loopback.c
+++ b/drivers/net/loopback.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -89,6 +91,7 @@ static netdev_tx_t loopback_xmit(struct sk_buff *skb,
 
 	len = skb->len;
 	if (likely(netif_rx(skb) == NET_RX_SUCCESS)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		u64_stats_update_begin(&lb_stats->syncp);
 		lb_stats->bytes += len;
 		lb_stats->packets++;
@@ -112,9 +115,11 @@ static void loopback_get_stats64(struct net_device *dev,
 
 		lb_stats = per_cpu_ptr(dev->lstats, i);
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			start = u64_stats_fetch_begin_irq(&lb_stats->syncp);
 			tbytes = lb_stats->bytes;
 			tpackets = lb_stats->packets;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (u64_stats_fetch_retry_irq(&lb_stats->syncp, start));
 		bytes   += tbytes;
 		packets += tpackets;
@@ -127,12 +132,14 @@ static void loopback_get_stats64(struct net_device *dev,
 
 static u32 always_on(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
 static int loopback_get_ts_info(struct net_device *netdev,
 				struct ethtool_ts_info *ts_info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ts_info->so_timestamping = SOF_TIMESTAMPING_TX_SOFTWARE |
 				   SOF_TIMESTAMPING_RX_SOFTWARE |
 				   SOF_TIMESTAMPING_SOFTWARE;
@@ -151,7 +158,9 @@ static int loopback_dev_init(struct net_device *dev)
 {
 	dev->lstats = netdev_alloc_pcpu_stats(struct pcpu_lstats);
 	if (!dev->lstats)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
@@ -210,6 +219,7 @@ static __net_init int loopback_net_init(struct net *net)
 	if (!dev)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_net_set(dev, net);
 	err = register_netdev(dev);
 	if (err)
@@ -223,7 +233,10 @@ static __net_init int loopback_net_init(struct net *net)
 	free_netdev(dev);
 out:
 	if (net_eq(net, &init_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("loopback: Failed to register netdevice: %d\n", err);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
diff --git a/drivers/net/macvlan.c b/drivers/net/macvlan.c
index 176fc09..778d793 100644
--- a/drivers/net/macvlan.c
+++ b/drivers/net/macvlan.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2007 Patrick McHardy <kaber@trash.net>
  *
diff --git a/drivers/net/macvtap.c b/drivers/net/macvtap.c
index cba5cb3..c4f6488 100644
--- a/drivers/net/macvtap.c
+++ b/drivers/net/macvtap.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/etherdevice.h>
 #include <linux/if_macvlan.h>
 #include <linux/if_tap.h>
diff --git a/drivers/net/nlmon.c b/drivers/net/nlmon.c
index 4b22955..cef89a2 100644
--- a/drivers/net/nlmon.c
+++ b/drivers/net/nlmon.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/netdevice.h>
diff --git a/drivers/net/phy/mdio_bus.c b/drivers/net/phy/mdio_bus.c
index 2df7b62c..1f435d7 100644
--- a/drivers/net/phy/mdio_bus.c
+++ b/drivers/net/phy/mdio_bus.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* MDIO Bus interface
  *
  * Author: Andy Fleming
@@ -48,6 +50,7 @@
 
 int mdiobus_register_device(struct mdio_device *mdiodev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mdiodev->bus->mdio_map[mdiodev->addr])
 		return -EBUSY;
 
@@ -59,6 +62,7 @@ EXPORT_SYMBOL(mdiobus_register_device);
 
 int mdiobus_unregister_device(struct mdio_device *mdiodev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mdiodev->bus->mdio_map[mdiodev->addr] != mdiodev)
 		return -EINVAL;
 
@@ -73,7 +77,9 @@ struct phy_device *mdiobus_get_phy(struct mii_bus *bus, int addr)
 	struct mdio_device *mdiodev = bus->mdio_map[addr];
 
 	if (!mdiodev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (!(mdiodev->flags & MDIO_DEVICE_FLAG_PHY))
 		return NULL;
@@ -84,6 +90,7 @@ EXPORT_SYMBOL(mdiobus_get_phy);
 
 bool mdiobus_is_registered_device(struct mii_bus *bus, int addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bus->mdio_map[addr];
 }
 EXPORT_SYMBOL(mdiobus_is_registered_device);
@@ -105,7 +112,9 @@ struct mii_bus *mdiobus_alloc_size(size_t size)
 
 	/* If we alloc extra space, it should be aligned */
 	if (size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alloc_size = aligned_size + size;
+}
 	else
 		alloc_size = sizeof(*bus);
 
@@ -127,6 +136,7 @@ EXPORT_SYMBOL(mdiobus_alloc_size);
 
 static void _devm_mdiobus_free(struct device *dev, void *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mdiobus_free(*(struct mii_bus **)res);
 }
 
@@ -134,6 +144,7 @@ static int devm_mdiobus_match(struct device *dev, void *res, void *data)
 {
 	struct mii_bus **r = res;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(!r || !*r))
 		return 0;
 
@@ -160,7 +171,9 @@ struct mii_bus *devm_mdiobus_alloc_size(struct device *dev, int sizeof_priv)
 
 	ptr = devres_alloc(_devm_mdiobus_free, sizeof(*ptr), GFP_KERNEL);
 	if (!ptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/* use raw alloc_dr for kmalloc caller tracing */
 	bus = mdiobus_alloc_size(sizeof_priv);
@@ -188,6 +201,7 @@ void devm_mdiobus_free(struct device *dev, struct mii_bus *bus)
 
 	rc = devres_release(dev, _devm_mdiobus_free,
 			    devm_mdiobus_match, bus);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(rc);
 }
 EXPORT_SYMBOL_GPL(devm_mdiobus_free);
@@ -201,6 +215,7 @@ EXPORT_SYMBOL_GPL(devm_mdiobus_free);
  */
 static void mdiobus_release(struct device *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mii_bus *bus = to_mii_bus(d);
 	BUG_ON(bus->state != MDIOBUS_RELEASED &&
 	       /* for compatibility with error handling in drivers */
@@ -297,7 +312,9 @@ static int mdiobus_create_device(struct mii_bus *bus,
 
 	mdiodev = mdio_device_create(bus, bi->mdio_addr);
 	if (IS_ERR(mdiodev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	strncpy(mdiodev->modalias, bi->modalias,
 		sizeof(mdiodev->modalias));
@@ -331,6 +348,7 @@ int __mdiobus_register(struct mii_bus *bus, struct module *owner)
 	int i, err;
 	struct gpio_desc *gpiod;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (NULL == bus || NULL == bus->name ||
 	    NULL == bus->read || NULL == bus->write)
 		return -EINVAL;
@@ -412,6 +430,7 @@ void mdiobus_unregister(struct mii_bus *bus)
 	struct mdio_device *mdiodev;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(bus->state != MDIOBUS_REGISTERED);
 	bus->state = MDIOBUS_UNREGISTERED;
 
@@ -474,7 +493,9 @@ struct phy_device *mdiobus_scan(struct mii_bus *bus, int addr)
 
 	phydev = get_phy_device(bus, addr, false);
 	if (IS_ERR(phydev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return phydev;
+}
 
 	/*
 	 * For DT, see if the auto-probed phy has a correspoding child
@@ -509,6 +530,7 @@ int mdiobus_read_nested(struct mii_bus *bus, int addr, u32 regnum)
 {
 	int retval;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(in_interrupt());
 
 	mutex_lock_nested(&bus->mdio_lock, MDIO_MUTEX_NESTED);
@@ -535,6 +557,7 @@ int mdiobus_read(struct mii_bus *bus, int addr, u32 regnum)
 {
 	int retval;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(in_interrupt());
 
 	mutex_lock(&bus->mdio_lock);
@@ -565,6 +588,7 @@ int mdiobus_write_nested(struct mii_bus *bus, int addr, u32 regnum, u16 val)
 {
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(in_interrupt());
 
 	mutex_lock_nested(&bus->mdio_lock, MDIO_MUTEX_NESTED);
@@ -592,6 +616,7 @@ int mdiobus_write(struct mii_bus *bus, int addr, u32 regnum, u16 val)
 {
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(in_interrupt());
 
 	mutex_lock(&bus->mdio_lock);
@@ -617,6 +642,7 @@ EXPORT_SYMBOL(mdiobus_write);
  */
 static int mdio_bus_match(struct device *dev, struct device_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mdio_device *mdio = to_mdio_device(dev);
 
 	if (of_driver_match_device(dev, drv))
@@ -635,7 +661,9 @@ static int mdio_uevent(struct device *dev, struct kobj_uevent_env *env)
 	/* Some devices have extra OF data and an OF-style MODALIAS */
 	rc = of_device_uevent_modalias(dev, env);
 	if (rc != -ENODEV)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	return 0;
 }
@@ -643,6 +671,7 @@ static int mdio_uevent(struct device *dev, struct kobj_uevent_env *env)
 #ifdef CONFIG_PM
 static int mdio_bus_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mdio_device *mdio = to_mdio_device(dev);
 
 	if (mdio->pm_ops && mdio->pm_ops->suspend)
@@ -653,6 +682,7 @@ static int mdio_bus_suspend(struct device *dev)
 
 static int mdio_bus_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mdio_device *mdio = to_mdio_device(dev);
 
 	if (mdio->pm_ops && mdio->pm_ops->resume)
@@ -663,6 +693,7 @@ static int mdio_bus_resume(struct device *dev)
 
 static int mdio_bus_restore(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mdio_device *mdio = to_mdio_device(dev);
 
 	if (mdio->pm_ops && mdio->pm_ops->restore)
@@ -703,7 +734,9 @@ int __init mdio_bus_init(void)
 	if (!ret) {
 		ret = bus_register(&mdio_bus_type);
 		if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			class_unregister(&mdio_bus_class);
+}
 	}
 
 	return ret;
@@ -713,6 +746,7 @@ EXPORT_SYMBOL_GPL(mdio_bus_init);
 #if IS_ENABLED(CONFIG_PHYLIB)
 void mdio_bus_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	class_unregister(&mdio_bus_class);
 	bus_unregister(&mdio_bus_type);
 }
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index 67f25ac..b41c9ab 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Framework for finding and configuring PHYs.
  * Also contains generic PHY driver
  *
@@ -44,6 +46,7 @@ MODULE_LICENSE("GPL");
 
 void phy_device_free(struct phy_device *phydev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	put_device(&phydev->mdio.dev);
 }
 EXPORT_SYMBOL(phy_device_free);
@@ -52,12 +55,14 @@ static void phy_mdio_device_free(struct mdio_device *mdiodev)
 {
 	struct phy_device *phydev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	phydev = container_of(mdiodev, struct phy_device, mdio);
 	phy_device_free(phydev);
 }
 
 static void phy_device_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(to_phy_device(dev));
 }
 
@@ -65,6 +70,7 @@ static void phy_mdio_device_remove(struct mdio_device *mdiodev)
 {
 	struct phy_device *phydev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	phydev = container_of(mdiodev, struct phy_device, mdio);
 	phy_device_remove(phydev);
 }
@@ -79,6 +85,7 @@ static DEFINE_MUTEX(phy_fixup_lock);
 static bool mdio_bus_phy_may_suspend(struct phy_device *phydev)
 {
 	struct device_driver *drv = phydev->mdio.dev.driver;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_driver *phydrv = to_phy_driver(drv);
 	struct net_device *netdev = phydev->attached_dev;
 
@@ -111,6 +118,7 @@ static bool mdio_bus_phy_may_suspend(struct phy_device *phydev)
 
 static int mdio_bus_phy_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_device *phydev = to_phy_device(dev);
 
 	/* We must stop the state machine manually, otherwise it stops out of
@@ -129,6 +137,7 @@ static int mdio_bus_phy_suspend(struct device *dev)
 
 static int mdio_bus_phy_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_device *phydev = to_phy_device(dev);
 	int ret;
 
@@ -148,6 +157,7 @@ static int mdio_bus_phy_resume(struct device *dev)
 
 static int mdio_bus_phy_restore(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_device *phydev = to_phy_device(dev);
 	struct net_device *netdev = phydev->attached_dev;
 	int ret;
@@ -196,6 +206,7 @@ static const struct dev_pm_ops mdio_bus_phy_pm_ops = {
 int phy_register_fixup(const char *bus_id, u32 phy_uid, u32 phy_uid_mask,
 		       int (*run)(struct phy_device *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_fixup *fixup = kzalloc(sizeof(*fixup), GFP_KERNEL);
 
 	if (!fixup)
@@ -218,6 +229,7 @@ EXPORT_SYMBOL(phy_register_fixup);
 int phy_register_fixup_for_uid(u32 phy_uid, u32 phy_uid_mask,
 			       int (*run)(struct phy_device *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return phy_register_fixup(PHY_ANY_ID, phy_uid, phy_uid_mask, run);
 }
 EXPORT_SYMBOL(phy_register_fixup_for_uid);
@@ -226,6 +238,7 @@ EXPORT_SYMBOL(phy_register_fixup_for_uid);
 int phy_register_fixup_for_id(const char *bus_id,
 			      int (*run)(struct phy_device *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return phy_register_fixup(bus_id, PHY_ANY_UID, 0xffffffff, run);
 }
 EXPORT_SYMBOL(phy_register_fixup_for_id);
@@ -245,6 +258,7 @@ int phy_unregister_fixup(const char *bus_id, u32 phy_uid, u32 phy_uid_mask)
 	ret = -ENODEV;
 
 	mutex_lock(&phy_fixup_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_safe(pos, n, &phy_fixup_list) {
 		fixup = list_entry(pos, struct phy_fixup, list);
 
@@ -266,6 +280,7 @@ EXPORT_SYMBOL(phy_unregister_fixup);
 /* Unregisters a fixup of any PHY with the UID in phy_uid */
 int phy_unregister_fixup_for_uid(u32 phy_uid, u32 phy_uid_mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return phy_unregister_fixup(PHY_ANY_ID, phy_uid, phy_uid_mask);
 }
 EXPORT_SYMBOL(phy_unregister_fixup_for_uid);
@@ -273,6 +288,7 @@ EXPORT_SYMBOL(phy_unregister_fixup_for_uid);
 /* Unregisters a fixup of the PHY with id string bus_id */
 int phy_unregister_fixup_for_id(const char *bus_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return phy_unregister_fixup(bus_id, PHY_ANY_UID, 0xffffffff);
 }
 EXPORT_SYMBOL(phy_unregister_fixup_for_id);
@@ -282,6 +298,7 @@ EXPORT_SYMBOL(phy_unregister_fixup_for_id);
  */
 static int phy_needs_fixup(struct phy_device *phydev, struct phy_fixup *fixup)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (strcmp(fixup->bus_id, phydev_name(phydev)) != 0)
 		if (strcmp(fixup->bus_id, PHY_ANY_ID) != 0)
 			return 0;
@@ -300,6 +317,7 @@ static int phy_scan_fixups(struct phy_device *phydev)
 	struct phy_fixup *fixup;
 
 	mutex_lock(&phy_fixup_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(fixup, &phy_fixup_list, list) {
 		if (phy_needs_fixup(phydev, fixup)) {
 			int err = fixup->run(phydev);
@@ -318,6 +336,7 @@ static int phy_scan_fixups(struct phy_device *phydev)
 
 static int phy_bus_match(struct device *dev, struct device_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_device *phydev = to_phy_device(dev);
 	struct phy_driver *phydrv = to_phy_driver(drv);
 	const int num_ids = ARRAY_SIZE(phydev->c45_ids.device_ids);
@@ -356,7 +375,9 @@ struct phy_device *phy_device_create(struct mii_bus *bus, int addr, int phy_id,
 	/* We allocate the device, and initialize the default values */
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	mdiodev = &dev->mdio;
 	mdiodev->dev.release = phy_device_release;
@@ -429,7 +450,9 @@ static int get_phy_c45_devs_in_pkg(struct mii_bus *bus, int addr, int dev_addr,
 	reg_addr = MII_ADDR_C45 | dev_addr << 16 | MDIO_DEVS2;
 	phy_reg = mdiobus_read(bus, addr, reg_addr);
 	if (phy_reg < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 	*devices_in_package = (phy_reg & 0xffff) << 16;
 
 	reg_addr = MII_ADDR_C45 | dev_addr << 16 | MDIO_DEVS1;
@@ -568,7 +591,9 @@ struct phy_device *get_phy_device(struct mii_bus *bus, int addr, bool is_c45)
 
 	r = get_phy_id(bus, addr, &phy_id, is_c45, &c45_ids);
 	if (r)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(r);
+}
 
 	/* If the phy_id is mostly Fs, there is no device there */
 	if ((phy_id & 0x1fffffff) == 0x1fffffff)
@@ -581,6 +606,7 @@ EXPORT_SYMBOL(get_phy_device);
 static ssize_t
 phy_id_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_device *phydev = to_phy_device(dev);
 
 	return sprintf(buf, "0x%.8lx\n", (unsigned long)phydev->phy_id);
@@ -590,6 +616,7 @@ static DEVICE_ATTR_RO(phy_id);
 static ssize_t
 phy_interface_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_device *phydev = to_phy_device(dev);
 	const char *mode = NULL;
 
@@ -606,6 +633,7 @@ static ssize_t
 phy_has_fixups_show(struct device *dev, struct device_attribute *attr,
 		    char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_device *phydev = to_phy_device(dev);
 
 	return sprintf(buf, "%d\n", phydev->has_fixups);
@@ -630,7 +658,9 @@ int phy_device_register(struct phy_device *phydev)
 
 	err = mdiobus_register_device(&phydev->mdio);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/* Run all of the fixups for this PHY */
 	err = phy_scan_fixups(phydev);
@@ -665,6 +695,7 @@ EXPORT_SYMBOL(phy_device_register);
  */
 void phy_device_remove(struct phy_device *phydev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_del(&phydev->mdio.dev);
 	mdiobus_unregister_device(&phydev->mdio);
 }
@@ -679,6 +710,7 @@ struct phy_device *phy_find_first(struct mii_bus *bus)
 	struct phy_device *phydev;
 	int addr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
 		phydev = mdiobus_get_phy(bus, addr);
 		if (phydev)
@@ -693,6 +725,7 @@ static void phy_link_change(struct phy_device *phydev, bool up, bool do_carrier)
 	struct net_device *netdev = phydev->attached_dev;
 
 	if (do_carrier) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (up)
 			netif_carrier_on(netdev);
 		else
@@ -716,6 +749,7 @@ static void phy_link_change(struct phy_device *phydev, bool up, bool do_carrier)
 static void phy_prepare_link(struct phy_device *phydev,
 			     void (*handler)(struct net_device *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	phydev->adjust_link = handler;
 }
 
@@ -734,7 +768,9 @@ int phy_connect_direct(struct net_device *dev, struct phy_device *phydev,
 
 	rc = phy_attach_direct(dev, phydev, phydev->dev_flags, interface);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	phy_prepare_link(phydev, handler);
 	phy_start_machine(phydev);
@@ -773,6 +809,7 @@ struct phy_device *phy_connect(struct net_device *dev, const char *bus_id,
 	 */
 	d = bus_find_device_by_name(&mdio_bus_type, NULL, bus_id);
 	if (!d) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("PHY %s not found\n", bus_id);
 		return ERR_PTR(-ENODEV);
 	}
@@ -794,6 +831,7 @@ EXPORT_SYMBOL(phy_connect);
  */
 void phy_disconnect(struct phy_device *phydev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (phydev->irq > 0)
 		phy_stop_interrupts(phydev);
 
@@ -830,6 +868,7 @@ static int phy_poll_reset(struct phy_device *phydev)
 	int ret;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msleep(50);
 		ret = phy_read(phydev, MII_BMCR);
 		if (ret < 0)
@@ -849,6 +888,7 @@ int phy_init_hw(struct phy_device *phydev)
 {
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!phydev->drv || !phydev->drv->config_init)
 		return 0;
 
@@ -870,6 +910,7 @@ EXPORT_SYMBOL(phy_init_hw);
 
 void phy_attached_info(struct phy_device *phydev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	phy_attached_print(phydev, NULL);
 }
 EXPORT_SYMBOL(phy_attached_info);
@@ -877,6 +918,7 @@ EXPORT_SYMBOL(phy_attached_info);
 #define ATTACHED_FMT "attached PHY driver [%s] (mii_bus:phy_addr=%s, irq=%s)"
 void phy_attached_print(struct phy_device *phydev, const char *fmt, ...)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const char *drv_name = phydev->drv ? phydev->drv->name : "unbound";
 	char *irq_str;
 	char irq_num[8];
@@ -1068,6 +1110,7 @@ struct phy_device *phy_attach(struct net_device *dev, const char *bus_id,
 	 */
 	d = bus_find_device_by_name(bus, NULL, bus_id);
 	if (!d) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("PHY %s not found\n", bus_id);
 		return ERR_PTR(-ENODEV);
 	}
@@ -1096,6 +1139,7 @@ void phy_detach(struct phy_device *phydev)
 	struct mii_bus *bus;
 
 	if (phydev->sysfs_links) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_remove_link(&dev->dev.kobj, "phydev");
 		sysfs_remove_link(&phydev->mdio.dev.kobj, "attached_dev");
 	}
@@ -1131,6 +1175,7 @@ EXPORT_SYMBOL(phy_detach);
 
 int phy_suspend(struct phy_device *phydev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_driver *phydrv = to_phy_driver(phydev->mdio.dev.driver);
 	struct ethtool_wolinfo wol = { .cmd = ETHTOOL_GWOL };
 	int ret = 0;
@@ -1154,6 +1199,7 @@ EXPORT_SYMBOL(phy_suspend);
 
 int phy_resume(struct phy_device *phydev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_driver *phydrv = to_phy_driver(phydev->mdio.dev.driver);
 	int ret = 0;
 
@@ -1171,6 +1217,7 @@ EXPORT_SYMBOL(phy_resume);
 
 int phy_loopback(struct phy_device *phydev, bool enable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_driver *phydrv = to_phy_driver(phydev->mdio.dev.driver);
 	int ret = 0;
 
@@ -1226,7 +1273,9 @@ static int genphy_config_advert(struct phy_device *phydev)
 	/* Setup standard advertisement */
 	adv = phy_read(phydev, MII_ADVERTISE);
 	if (adv < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return adv;
+}
 
 	oldadv = adv;
 	adv &= ~(ADVERTISE_ALL | ADVERTISE_100BASE4 | ADVERTISE_PAUSE_CAP |
@@ -1290,7 +1339,9 @@ static int genphy_config_eee_advert(struct phy_device *phydev)
 
 	/* Nothing to disable */
 	if (!broken)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* If the following call fails, we assume that EEE is not
 	 * supported by the phy. If we read 0, EEE is not advertised
@@ -1322,6 +1373,7 @@ static int genphy_config_eee_advert(struct phy_device *phydev)
  */
 int genphy_setup_forced(struct phy_device *phydev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ctl = phy_read(phydev, MII_BMCR);
 
 	ctl &= BMCR_LOOPBACK | BMCR_ISOLATE | BMCR_PDOWN;
@@ -1346,6 +1398,7 @@ EXPORT_SYMBOL(genphy_setup_forced);
  */
 int genphy_restart_aneg(struct phy_device *phydev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ctl = phy_read(phydev, MII_BMCR);
 
 	if (ctl < 0)
@@ -1375,7 +1428,9 @@ int genphy_config_aneg(struct phy_device *phydev)
 	changed = genphy_config_eee_advert(phydev);
 
 	if (AUTONEG_ENABLE != phydev->autoneg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return genphy_setup_forced(phydev);
+}
 
 	err = genphy_config_advert(phydev);
 	if (err < 0) /* error */
@@ -1416,6 +1471,7 @@ EXPORT_SYMBOL(genphy_config_aneg);
  */
 int genphy_aneg_done(struct phy_device *phydev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int retval = phy_read(phydev, MII_BMSR);
 
 	return (retval < 0) ? retval : (retval & BMSR_ANEGCOMPLETE);
@@ -1437,7 +1493,9 @@ int genphy_update_link(struct phy_device *phydev)
 	/* Do a fake read */
 	status = phy_read(phydev, MII_BMSR);
 	if (status < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return status;
+}
 
 	/* Read link and autonegotiation status */
 	status = phy_read(phydev, MII_BMSR);
@@ -1474,7 +1532,9 @@ int genphy_read_status(struct phy_device *phydev)
 	/* Update the link, but return if there was an error */
 	err = genphy_update_link(phydev);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	phydev->lp_advertising = 0;
 
@@ -1570,7 +1630,9 @@ int genphy_soft_reset(struct phy_device *phydev)
 
 	ret = phy_write(phydev, MII_BMCR, BMCR_RESET);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	return phy_poll_reset(phydev);
 }
@@ -1588,7 +1650,9 @@ int genphy_config_init(struct phy_device *phydev)
 	/* Do we support autonegotiation? */
 	val = phy_read(phydev, MII_BMSR);
 	if (val < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return val;
+}
 
 	if (val & BMSR_ANEGCAPABLE)
 		features |= SUPPORTED_Autoneg;
@@ -1656,7 +1720,9 @@ int genphy_loopback(struct phy_device *phydev, bool enable)
 
 	value = phy_read(phydev, MII_BMCR);
 	if (value < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return value;
+}
 
 	if (enable)
 		value |= BMCR_LOOPBACK;
@@ -1697,7 +1763,9 @@ int phy_set_max_speed(struct phy_device *phydev, u32 max_speed)
 
 	err = __set_phy_supported(phydev, max_speed);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	phydev->advertising = phydev->supported;
 
@@ -1711,7 +1779,9 @@ static void of_set_phy_supported(struct phy_device *phydev)
 	u32 max_speed;
 
 	if (!IS_ENABLED(CONFIG_OF_MDIO))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!node)
 		return;
@@ -1726,7 +1796,9 @@ static void of_set_phy_eee_broken(struct phy_device *phydev)
 	u32 broken = 0;
 
 	if (!IS_ENABLED(CONFIG_OF_MDIO))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!node)
 		return;
@@ -1757,6 +1829,7 @@ static void of_set_phy_eee_broken(struct phy_device *phydev)
  */
 static int phy_probe(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_device *phydev = to_phy_device(dev);
 	struct device_driver *drv = phydev->mdio.dev.driver;
 	struct phy_driver *phydrv = to_phy_driver(drv);
@@ -1821,6 +1894,7 @@ static int phy_probe(struct device *dev)
 
 static int phy_remove(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct phy_device *phydev = to_phy_device(dev);
 
 	cancel_delayed_work_sync(&phydev->state_queue);
@@ -1854,12 +1928,14 @@ int phy_driver_register(struct phy_driver *new_driver, struct module *owner)
 
 	retval = driver_register(&new_driver->mdiodrv.driver);
 	if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s: Error %d in registering driver\n",
 		       new_driver->name, retval);
 
 		return retval;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s: Registered new driver\n", new_driver->name);
 
 	return 0;
@@ -1871,6 +1947,7 @@ int phy_drivers_register(struct phy_driver *new_driver, int n,
 {
 	int i, ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < n; i++) {
 		ret = phy_driver_register(new_driver + i, owner);
 		if (ret) {
@@ -1885,6 +1962,7 @@ EXPORT_SYMBOL(phy_drivers_register);
 
 void phy_driver_unregister(struct phy_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	driver_unregister(&drv->mdiodrv.driver);
 }
 EXPORT_SYMBOL(phy_driver_unregister);
@@ -1893,6 +1971,7 @@ void phy_drivers_unregister(struct phy_driver *drv, int n)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < n; i++)
 		phy_driver_unregister(drv + i);
 }
@@ -1921,7 +2000,9 @@ static int __init phy_init(void)
 
 	rc = mdio_bus_init();
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	rc = phy_driver_register(&genphy_10g_driver, THIS_MODULE);
 	if (rc)
@@ -1929,16 +2010,19 @@ static int __init phy_init(void)
 
 	rc = phy_driver_register(&genphy_driver, THIS_MODULE);
 	if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		phy_driver_unregister(&genphy_10g_driver);
 err_10g:
 		mdio_bus_exit();
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 }
 
 static void __exit phy_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	phy_driver_unregister(&genphy_10g_driver);
 	phy_driver_unregister(&genphy_driver);
 	mdio_bus_exit();
diff --git a/drivers/net/tap.c b/drivers/net/tap.c
index bfd4ded..20ad1b5 100644
--- a/drivers/net/tap.c
+++ b/drivers/net/tap.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/etherdevice.h>
 #include <linux/if_tap.h>
 #include <linux/if_vlan.h>
diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index fa51b7b..92163df 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  TUN - Universal TUN/TAP device driver.
  *  Copyright (C) 1999-2002 Maxim Krasnyansky <maxk@qualcomm.com>
diff --git a/drivers/net/veth.c b/drivers/net/veth.c
index f5438d0..72517c8 100644
--- a/drivers/net/veth.c
+++ b/drivers/net/veth.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  drivers/net/veth.c
  *
diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 7927e28..8ee774e 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* A network driver using virtio.
  *
  * Copyright 2007 Rusty Russell <rusty@rustcorp.com.au> IBM Corporation
diff --git a/drivers/net/vmxnet3/vmxnet3_drv.c b/drivers/net/vmxnet3/vmxnet3_drv.c
index cf95290..913f76a 100644
--- a/drivers/net/vmxnet3/vmxnet3_drv.c
+++ b/drivers/net/vmxnet3/vmxnet3_drv.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Linux driver for VMware's vmxnet3 ethernet NIC.
  *
diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index bb44f0c..d533ad0 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * VXLAN: Virtual eXtensible Local Area Network
  *
diff --git a/drivers/net/xen-netfront.c b/drivers/net/xen-netfront.c
index c980cdb..6e0c29f 100644
--- a/drivers/net/xen-netfront.c
+++ b/drivers/net/xen-netfront.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Virtual network driver for conversing with remote driver backends.
  *
diff --git a/drivers/nvdimm/blk.c b/drivers/nvdimm/blk.c
index 345acca..d7a2a4f 100644
--- a/drivers/nvdimm/blk.c
+++ b/drivers/nvdimm/blk.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NVDIMM Block Window Driver
  * Copyright (c) 2014, Intel Corporation.
diff --git a/drivers/nvdimm/btt.c b/drivers/nvdimm/btt.c
index 09428eb..90d7bc1 100644
--- a/drivers/nvdimm/btt.c
+++ b/drivers/nvdimm/btt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Block Translation Table
  * Copyright (c) 2014-2015, Intel Corporation.
diff --git a/drivers/nvdimm/bus.c b/drivers/nvdimm/bus.c
index baf2839..07b85f2 100644
--- a/drivers/nvdimm/bus.c
+++ b/drivers/nvdimm/bus.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.
  *
diff --git a/drivers/nvdimm/core.c b/drivers/nvdimm/core.c
index bb71f0c..5e168c6 100644
--- a/drivers/nvdimm/core.c
+++ b/drivers/nvdimm/core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.
  *
diff --git a/drivers/nvdimm/dimm.c b/drivers/nvdimm/dimm.c
index 98466d7..3693c91 100644
--- a/drivers/nvdimm/dimm.c
+++ b/drivers/nvdimm/dimm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.
  *
diff --git a/drivers/nvdimm/label.c b/drivers/nvdimm/label.c
index de66c02..6fa57ad 100644
--- a/drivers/nvdimm/label.c
+++ b/drivers/nvdimm/label.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.
  *
diff --git a/drivers/nvdimm/pmem.c b/drivers/nvdimm/pmem.c
index 39dfd7a..116c09b 100644
--- a/drivers/nvdimm/pmem.c
+++ b/drivers/nvdimm/pmem.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Persistent Memory Driver
  *
diff --git a/drivers/nvdimm/region.c b/drivers/nvdimm/region.c
index 034f0a0..35f2727 100644
--- a/drivers/nvdimm/region.c
+++ b/drivers/nvdimm/region.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.
  *
diff --git a/drivers/nvme/host/core.c b/drivers/nvme/host/core.c
index dd95631..fa8a130 100644
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NVM Express device driver
  * Copyright (c) 2011-2014, Intel Corporation.
diff --git a/drivers/nvme/host/pci.c b/drivers/nvme/host/pci.c
index cdd2fd5..e2b3971 100644
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NVM Express device driver
  * Copyright (c) 2011-2014, Intel Corporation.
diff --git a/drivers/nvmem/core.c b/drivers/nvmem/core.c
index d12e5de..1f6c7ab 100644
--- a/drivers/nvmem/core.c
+++ b/drivers/nvmem/core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * nvmem framework core.
  *
@@ -70,6 +72,7 @@ static struct lock_class_key eeprom_lock_key;
 static int nvmem_reg_read(struct nvmem_device *nvmem, unsigned int offset,
 			  void *val, size_t bytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nvmem->reg_read)
 		return nvmem->reg_read(nvmem->priv, offset, val, bytes);
 
@@ -79,6 +82,7 @@ static int nvmem_reg_read(struct nvmem_device *nvmem, unsigned int offset,
 static int nvmem_reg_write(struct nvmem_device *nvmem, unsigned int offset,
 			   void *val, size_t bytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nvmem->reg_write)
 		return nvmem->reg_write(nvmem->priv, offset, val, bytes);
 
@@ -94,7 +98,9 @@ static ssize_t bin_attr_nvmem_read(struct file *filp, struct kobject *kobj,
 	int rc;
 
 	if (attr->private)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev = attr->private;
+}
 	else
 		dev = container_of(kobj, struct device, kobj);
 	nvmem = to_nvmem_device(dev);
@@ -128,7 +134,9 @@ static ssize_t bin_attr_nvmem_write(struct file *filp, struct kobject *kobj,
 	int rc;
 
 	if (attr->private)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev = attr->private;
+}
 	else
 		dev = container_of(kobj, struct device, kobj);
 	nvmem = to_nvmem_device(dev);
@@ -249,6 +257,7 @@ static const struct attribute_group *nvmem_ro_root_dev_groups[] = {
 
 static void nvmem_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nvmem_device *nvmem = to_nvmem_device(dev);
 
 	ida_simple_remove(&nvmem_ida, nvmem->id);
@@ -265,6 +274,7 @@ static struct bus_type nvmem_bus_type = {
 
 static int of_nvmem_match(struct device *dev, void *nvmem_np)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev->of_node == nvmem_np;
 }
 
@@ -273,7 +283,9 @@ static struct nvmem_device *of_nvmem_find(struct device_node *nvmem_np)
 	struct device *d;
 
 	if (!nvmem_np)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	d = bus_find_device(&nvmem_bus_type, NULL, nvmem_np, of_nvmem_match);
 
@@ -289,6 +301,7 @@ static struct nvmem_cell *nvmem_find_cell(const char *cell_id)
 
 	mutex_lock(&nvmem_cells_mutex);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(p, &nvmem_cells, node)
 		if (!strcmp(p->name, cell_id)) {
 			mutex_unlock(&nvmem_cells_mutex);
@@ -302,6 +315,7 @@ static struct nvmem_cell *nvmem_find_cell(const char *cell_id)
 
 static void nvmem_cell_drop(struct nvmem_cell *cell)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&nvmem_cells_mutex);
 	list_del(&cell->node);
 	mutex_unlock(&nvmem_cells_mutex);
@@ -313,6 +327,7 @@ static void nvmem_device_remove_all_cells(const struct nvmem_device *nvmem)
 	struct nvmem_cell *cell;
 	struct list_head *p, *n;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_safe(p, n, &nvmem_cells) {
 		cell = list_entry(p, struct nvmem_cell, node);
 		if (cell->nvmem == nvmem)
@@ -322,6 +337,7 @@ static void nvmem_device_remove_all_cells(const struct nvmem_device *nvmem)
 
 static void nvmem_cell_add(struct nvmem_cell *cell)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&nvmem_cells_mutex);
 	list_add_tail(&cell->node, &nvmem_cells);
 	mutex_unlock(&nvmem_cells_mutex);
@@ -331,6 +347,7 @@ static int nvmem_cell_info_to_nvmem_cell(struct nvmem_device *nvmem,
 				   const struct nvmem_cell_info *info,
 				   struct nvmem_cell *cell)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cell->nvmem = nvmem;
 	cell->offset = info->offset;
 	cell->bytes = info->bytes;
@@ -362,7 +379,9 @@ static int nvmem_add_cells(struct nvmem_device *nvmem,
 
 	cells = kcalloc(cfg->ncells, sizeof(*cells), GFP_KERNEL);
 	if (!cells)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	for (i = 0; i < cfg->ncells; i++) {
 		cells[i] = kzalloc(sizeof(**cells), GFP_KERNEL);
@@ -405,7 +424,9 @@ static int nvmem_setup_compat(struct nvmem_device *nvmem,
 	int rval;
 
 	if (!config->base_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (nvmem->read_only)
 		nvmem->eeprom = bin_attr_ro_root_nvmem;
@@ -448,7 +469,9 @@ struct nvmem_device *nvmem_register(const struct nvmem_config *config)
 	int rval;
 
 	if (!config->dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	nvmem = kzalloc(sizeof(*nvmem), GFP_KERNEL);
 	if (!nvmem)
@@ -526,6 +549,7 @@ EXPORT_SYMBOL_GPL(nvmem_register);
  */
 int nvmem_unregister(struct nvmem_device *nvmem)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&nvmem_mutex);
 	if (nvmem->users) {
 		mutex_unlock(&nvmem_mutex);
@@ -553,6 +577,7 @@ static struct nvmem_device *__nvmem_device_get(struct device_node *np,
 	mutex_lock(&nvmem_mutex);
 
 	if (np) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nvmem = of_nvmem_find(np);
 		if (!nvmem) {
 			mutex_unlock(&nvmem_mutex);
@@ -592,6 +617,7 @@ static struct nvmem_device *__nvmem_device_get(struct device_node *np,
 
 static void __nvmem_device_put(struct nvmem_device *nvmem)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	module_put(nvmem->owner);
 	mutex_lock(&nvmem_mutex);
 	nvmem->users--;
@@ -600,6 +626,7 @@ static void __nvmem_device_put(struct nvmem_device *nvmem)
 
 static int nvmem_match(struct device *dev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !strcmp(dev_name(dev), data);
 }
 
@@ -610,7 +637,9 @@ static struct nvmem_device *nvmem_find(const char *name)
 	d = bus_find_device(&nvmem_bus_type, NULL, (void *)name, nvmem_match);
 
 	if (!d)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	return to_nvmem_device(d);
 }
@@ -653,6 +682,7 @@ EXPORT_SYMBOL_GPL(of_nvmem_device_get);
  */
 struct nvmem_device *nvmem_device_get(struct device *dev, const char *dev_name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->of_node) { /* try dt first */
 		struct nvmem_device *nvmem;
 
@@ -671,6 +701,7 @@ static int devm_nvmem_device_match(struct device *dev, void *res, void *data)
 {
 	struct nvmem_device **nvmem = res;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(!nvmem || !*nvmem))
 		return 0;
 
@@ -679,6 +710,7 @@ static int devm_nvmem_device_match(struct device *dev, void *res, void *data)
 
 static void devm_nvmem_device_release(struct device *dev, void *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nvmem_device_put(*(struct nvmem_device **)res);
 }
 
@@ -696,6 +728,7 @@ void devm_nvmem_device_put(struct device *dev, struct nvmem_device *nvmem)
 	ret = devres_release(dev, devm_nvmem_device_release,
 			     devm_nvmem_device_match, nvmem);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(ret);
 }
 EXPORT_SYMBOL_GPL(devm_nvmem_device_put);
@@ -707,6 +740,7 @@ EXPORT_SYMBOL_GPL(devm_nvmem_device_put);
  */
 void nvmem_device_put(struct nvmem_device *nvmem)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__nvmem_device_put(nvmem);
 }
 EXPORT_SYMBOL_GPL(nvmem_device_put);
@@ -727,7 +761,9 @@ struct nvmem_device *devm_nvmem_device_get(struct device *dev, const char *id)
 
 	ptr = devres_alloc(devm_nvmem_device_release, sizeof(*ptr), GFP_KERNEL);
 	if (!ptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	nvmem = nvmem_device_get(dev, id);
 	if (!IS_ERR(nvmem)) {
@@ -748,7 +784,9 @@ static struct nvmem_cell *nvmem_cell_get_from_list(const char *cell_id)
 
 	nvmem = __nvmem_device_get(NULL, &cell, cell_id);
 	if (IS_ERR(nvmem))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(nvmem);
+}
 
 	return cell;
 }
@@ -860,6 +898,7 @@ struct nvmem_cell *nvmem_cell_get(struct device *dev, const char *cell_id)
 	struct nvmem_cell *cell;
 
 	if (dev->of_node) { /* try dt first */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cell = of_nvmem_cell_get(dev->of_node, cell_id);
 		if (!IS_ERR(cell) || PTR_ERR(cell) == -EPROBE_DEFER)
 			return cell;
@@ -871,6 +910,7 @@ EXPORT_SYMBOL_GPL(nvmem_cell_get);
 
 static void devm_nvmem_cell_release(struct device *dev, void *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nvmem_cell_put(*(struct nvmem_cell **)res);
 }
 
@@ -890,7 +930,9 @@ struct nvmem_cell *devm_nvmem_cell_get(struct device *dev, const char *id)
 
 	ptr = devres_alloc(devm_nvmem_cell_release, sizeof(*ptr), GFP_KERNEL);
 	if (!ptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	cell = nvmem_cell_get(dev, id);
 	if (!IS_ERR(cell)) {
@@ -908,6 +950,7 @@ static int devm_nvmem_cell_match(struct device *dev, void *res, void *data)
 {
 	struct nvmem_cell **c = res;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(!c || !*c))
 		return 0;
 
@@ -928,6 +971,7 @@ void devm_nvmem_cell_put(struct device *dev, struct nvmem_cell *cell)
 	ret = devres_release(dev, devm_nvmem_cell_release,
 				devm_nvmem_cell_match, cell);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(ret);
 }
 EXPORT_SYMBOL(devm_nvmem_cell_put);
@@ -983,7 +1027,9 @@ static int __nvmem_cell_read(struct nvmem_device *nvmem,
 	rc = nvmem_reg_read(nvmem, cell->offset, buf, cell->bytes);
 
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	/* shift bits in-place */
 	if (cell->bit_offset || cell->nbits)
@@ -1012,7 +1058,9 @@ void *nvmem_cell_read(struct nvmem_cell *cell, size_t *len)
 	int rc;
 
 	if (!nvmem)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	buf = kzalloc(cell->bytes, GFP_KERNEL);
 	if (!buf)
@@ -1038,7 +1086,9 @@ static inline void *nvmem_cell_prepare_write_buffer(struct nvmem_cell *cell,
 	nbits = cell->nbits;
 	buf = kzalloc(cell->bytes, GFP_KERNEL);
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	memcpy(buf, _buf, len);
 	p = b = buf;
@@ -1088,6 +1138,7 @@ int nvmem_cell_write(struct nvmem_cell *cell, void *buf, size_t len)
 	struct nvmem_device *nvmem = cell->nvmem;
 	int rc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!nvmem || nvmem->read_only ||
 	    (cell->bit_offset == 0 && len != cell->bytes))
 		return -EINVAL;
@@ -1128,7 +1179,9 @@ int nvmem_cell_read_u32(struct device *dev, const char *cell_id, u32 *val)
 
 	cell = nvmem_cell_get(dev, cell_id);
 	if (IS_ERR(cell))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(cell);
+}
 
 	buf = nvmem_cell_read(cell, &len);
 	if (IS_ERR(buf)) {
@@ -1166,7 +1219,9 @@ ssize_t nvmem_device_cell_read(struct nvmem_device *nvmem,
 	ssize_t len;
 
 	if (!nvmem)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	rc = nvmem_cell_info_to_nvmem_cell(nvmem, info, &cell);
 	if (rc)
@@ -1196,7 +1251,9 @@ int nvmem_device_cell_write(struct nvmem_device *nvmem,
 	int rc;
 
 	if (!nvmem)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	rc = nvmem_cell_info_to_nvmem_cell(nvmem, info, &cell);
 	if (rc)
@@ -1224,7 +1281,9 @@ int nvmem_device_read(struct nvmem_device *nvmem,
 	int rc;
 
 	if (!nvmem)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	rc = nvmem_reg_read(nvmem, offset, buf, bytes);
 
@@ -1252,7 +1311,9 @@ int nvmem_device_write(struct nvmem_device *nvmem,
 	int rc;
 
 	if (!nvmem)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	rc = nvmem_reg_write(nvmem, offset, buf, bytes);
 
@@ -1271,6 +1332,7 @@ static int __init nvmem_init(void)
 
 static void __exit nvmem_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bus_unregister(&nvmem_bus_type);
 }
 
diff --git a/drivers/oprofile/oprof.c b/drivers/oprofile/oprof.c
index ed2c3ec..b47b043 100644
--- a/drivers/oprofile/oprof.c
+++ b/drivers/oprofile/oprof.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /**
  * @file oprof.c
  *
diff --git a/drivers/oprofile/oprofilefs.c b/drivers/oprofile/oprofilefs.c
index d77ebbf..81c9440 100644
--- a/drivers/oprofile/oprofilefs.c
+++ b/drivers/oprofile/oprofilefs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /**
  * @file oprofilefs.c
  *
diff --git a/drivers/pci/access.c b/drivers/pci/access.c
index 913d672..2bb1970 100644
--- a/drivers/pci/access.c
+++ b/drivers/pci/access.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/delay.h>
 #include <linux/pci.h>
 #include <linux/module.h>
@@ -82,6 +84,7 @@ int pci_generic_config_read(struct pci_bus *bus, unsigned int devfn,
 
 	addr = bus->ops->map_bus(bus, devfn, where);
 	if (!addr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*val = ~0;
 		return PCIBIOS_DEVICE_NOT_FOUND;
 	}
@@ -104,7 +107,9 @@ int pci_generic_config_write(struct pci_bus *bus, unsigned int devfn,
 
 	addr = bus->ops->map_bus(bus, devfn, where);
 	if (!addr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PCIBIOS_DEVICE_NOT_FOUND;
+}
 
 	if (size == 1)
 		writeb(val, addr);
@@ -124,6 +129,7 @@ int pci_generic_config_read32(struct pci_bus *bus, unsigned int devfn,
 
 	addr = bus->ops->map_bus(bus, devfn, where & ~0x3);
 	if (!addr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*val = ~0;
 		return PCIBIOS_DEVICE_NOT_FOUND;
 	}
@@ -145,7 +151,9 @@ int pci_generic_config_write32(struct pci_bus *bus, unsigned int devfn,
 
 	addr = bus->ops->map_bus(bus, devfn, where & ~0x3);
 	if (!addr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PCIBIOS_DEVICE_NOT_FOUND;
+}
 
 	if (size == 4) {
 		writel(val, addr);
@@ -186,6 +194,7 @@ struct pci_ops *pci_bus_set_ops(struct pci_bus *bus, struct pci_ops *ops)
 	struct pci_ops *old_ops;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	raw_spin_lock_irqsave(&pci_lock, flags);
 	old_ops = bus->ops;
 	bus->ops = ops;
@@ -206,6 +215,7 @@ static DECLARE_WAIT_QUEUE_HEAD(pci_cfg_wait);
 
 static noinline void pci_wait_cfg(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DECLARE_WAITQUEUE(wait, current);
 
 	__add_wait_queue(&pci_cfg_wait, &wait);
@@ -274,6 +284,7 @@ PCI_USER_WRITE_CONFIG(dword, u32)
  */
 ssize_t pci_read_vpd(struct pci_dev *dev, loff_t pos, size_t count, void *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev->vpd || !dev->vpd->ops)
 		return -ENODEV;
 	return dev->vpd->ops->read(dev, pos, count, buf);
@@ -289,6 +300,7 @@ EXPORT_SYMBOL(pci_read_vpd);
  */
 ssize_t pci_write_vpd(struct pci_dev *dev, loff_t pos, size_t count, const void *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev->vpd || !dev->vpd->ops)
 		return -ENODEV;
 	return dev->vpd->ops->write(dev, pos, count, buf);
@@ -302,6 +314,7 @@ EXPORT_SYMBOL(pci_write_vpd);
  */
 int pci_set_vpd_size(struct pci_dev *dev, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev->vpd || !dev->vpd->ops)
 		return -ENODEV;
 	return dev->vpd->ops->set_size(dev, len);
@@ -320,6 +333,7 @@ static size_t pci_vpd_size(struct pci_dev *dev, size_t old_size)
 	size_t off = 0;
 	unsigned char header[1+2];	/* 1 byte tag, 2 bytes length */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (off < old_size &&
 	       pci_read_vpd(dev, off, 1, header) == 1) {
 		unsigned char tag;
@@ -381,7 +395,9 @@ static int pci_vpd_wait(struct pci_dev *dev)
 	int ret;
 
 	if (!vpd->busy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	while (time_before(jiffies, timeout)) {
 		ret = pci_user_read_config_word(dev, vpd->cap + PCI_VPD_ADDR,
@@ -415,7 +431,9 @@ static ssize_t pci_vpd_read(struct pci_dev *dev, loff_t pos, size_t count,
 	u8 *buf = arg;
 
 	if (pos < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!vpd->valid) {
 		vpd->valid = 1;
@@ -481,6 +499,7 @@ static ssize_t pci_vpd_write(struct pci_dev *dev, loff_t pos, size_t count,
 	loff_t end = pos + count;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pos < 0 || (pos & 3) || (count & 3))
 		return -EINVAL;
 
@@ -535,6 +554,7 @@ static int pci_vpd_set_size(struct pci_dev *dev, size_t len)
 {
 	struct pci_vpd *vpd = dev->vpd;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (len == 0 || len > PCI_VPD_MAX_SIZE)
 		return -EIO;
 
@@ -553,6 +573,7 @@ static const struct pci_vpd_ops pci_vpd_ops = {
 static ssize_t pci_vpd_f0_read(struct pci_dev *dev, loff_t pos, size_t count,
 			       void *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *tdev = pci_get_slot(dev->bus,
 					    PCI_DEVFN(PCI_SLOT(dev->devfn), 0));
 	ssize_t ret;
@@ -568,6 +589,7 @@ static ssize_t pci_vpd_f0_read(struct pci_dev *dev, loff_t pos, size_t count,
 static ssize_t pci_vpd_f0_write(struct pci_dev *dev, loff_t pos, size_t count,
 				const void *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *tdev = pci_get_slot(dev->bus,
 					    PCI_DEVFN(PCI_SLOT(dev->devfn), 0));
 	ssize_t ret;
@@ -582,6 +604,7 @@ static ssize_t pci_vpd_f0_write(struct pci_dev *dev, loff_t pos, size_t count,
 
 static int pci_vpd_f0_set_size(struct pci_dev *dev, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *tdev = pci_get_slot(dev->bus,
 					    PCI_DEVFN(PCI_SLOT(dev->devfn), 0));
 	int ret;
@@ -607,18 +630,28 @@ int pci_vpd_init(struct pci_dev *dev)
 
 	cap = pci_find_capability(dev, PCI_CAP_ID_VPD);
 	if (!cap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vpd = kzalloc(sizeof(*vpd), GFP_ATOMIC);
 	if (!vpd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vpd->len = PCI_VPD_MAX_SIZE;
 	if (dev->dev_flags & PCI_DEV_FLAGS_VPD_REF_F0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vpd->ops = &pci_vpd_f0_ops;
+}
 	else
 		vpd->ops = &pci_vpd_ops;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_init(&vpd->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vpd->cap = cap;
 	vpd->busy = 0;
 	vpd->valid = 0;
@@ -628,6 +661,7 @@ int pci_vpd_init(struct pci_dev *dev)
 
 void pci_vpd_release(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(dev->vpd);
 }
 
@@ -641,6 +675,7 @@ void pci_vpd_release(struct pci_dev *dev)
  */
 void pci_cfg_access_lock(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	raw_spin_lock_irq(&pci_lock);
@@ -664,6 +699,7 @@ bool pci_cfg_access_trylock(struct pci_dev *dev)
 	unsigned long flags;
 	bool locked = true;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	raw_spin_lock_irqsave(&pci_lock, flags);
 	if (dev->block_cfg_access)
 		locked = false;
@@ -685,6 +721,7 @@ void pci_cfg_access_unlock(struct pci_dev *dev)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	raw_spin_lock_irqsave(&pci_lock, flags);
 
 	/* This indicates a problem in the caller, but we don't need
@@ -700,11 +737,13 @@ EXPORT_SYMBOL_GPL(pci_cfg_access_unlock);
 
 static inline int pcie_cap_version(const struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pcie_caps_reg(dev) & PCI_EXP_FLAGS_VERS;
 }
 
 static bool pcie_downstream_port(const struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int type = pci_pcie_type(dev);
 
 	return type == PCI_EXP_TYPE_ROOT_PORT ||
@@ -714,6 +753,7 @@ static bool pcie_downstream_port(const struct pci_dev *dev)
 
 bool pcie_cap_has_lnkctl(const struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int type = pci_pcie_type(dev);
 
 	return type == PCI_EXP_TYPE_ENDPOINT ||
@@ -727,12 +767,14 @@ bool pcie_cap_has_lnkctl(const struct pci_dev *dev)
 
 static inline bool pcie_cap_has_sltctl(const struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pcie_downstream_port(dev) &&
 	       pcie_caps_reg(dev) & PCI_EXP_FLAGS_SLOT;
 }
 
 static inline bool pcie_cap_has_rtctl(const struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int type = pci_pcie_type(dev);
 
 	return type == PCI_EXP_TYPE_ROOT_PORT ||
@@ -742,8 +784,11 @@ static inline bool pcie_cap_has_rtctl(const struct pci_dev *dev)
 static bool pcie_capability_reg_implemented(struct pci_dev *dev, int pos)
 {
 	if (!pci_is_pcie(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (pos) {
 	case PCI_EXP_FLAGS:
 		return true;
@@ -785,9 +830,12 @@ int pcie_capability_read_word(struct pci_dev *dev, int pos, u16 *val)
 
 	*val = 0;
 	if (pos & 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (pcie_capability_reg_implemented(dev, pos)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = pci_read_config_word(dev, pci_pcie_cap(dev) + pos, val);
 		/*
 		 * Reset *val to 0 if pci_read_config_word() fails, it may
@@ -795,7 +843,10 @@ int pcie_capability_read_word(struct pci_dev *dev, int pos, u16 *val)
 		 * during pci_read_config_word().
 		 */
 		if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*val = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	}
 
@@ -810,6 +861,7 @@ int pcie_capability_read_word(struct pci_dev *dev, int pos, u16 *val)
 	    pos == PCI_EXP_SLTSTA)
 		*val = PCI_EXP_SLTSTA_PDS;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(pcie_capability_read_word);
@@ -820,9 +872,12 @@ int pcie_capability_read_dword(struct pci_dev *dev, int pos, u32 *val)
 
 	*val = 0;
 	if (pos & 3)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (pcie_capability_reg_implemented(dev, pos)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = pci_read_config_dword(dev, pci_pcie_cap(dev) + pos, val);
 		/*
 		 * Reset *val to 0 if pci_read_config_dword() fails, it may
@@ -830,7 +885,10 @@ int pcie_capability_read_dword(struct pci_dev *dev, int pos, u32 *val)
 		 * during pci_read_config_dword().
 		 */
 		if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*val = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	}
 
@@ -838,12 +896,14 @@ int pcie_capability_read_dword(struct pci_dev *dev, int pos, u32 *val)
 	    pos == PCI_EXP_SLTSTA)
 		*val = PCI_EXP_SLTSTA_PDS;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(pcie_capability_read_dword);
 
 int pcie_capability_write_word(struct pci_dev *dev, int pos, u16 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pos & 1)
 		return -EINVAL;
 
@@ -856,6 +916,7 @@ EXPORT_SYMBOL(pcie_capability_write_word);
 
 int pcie_capability_write_dword(struct pci_dev *dev, int pos, u32 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pos & 3)
 		return -EINVAL;
 
@@ -874,6 +935,7 @@ int pcie_capability_clear_and_set_word(struct pci_dev *dev, int pos,
 
 	ret = pcie_capability_read_word(dev, pos, &val);
 	if (!ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		val &= ~clear;
 		val |= set;
 		ret = pcie_capability_write_word(dev, pos, val);
@@ -891,6 +953,7 @@ int pcie_capability_clear_and_set_dword(struct pci_dev *dev, int pos,
 
 	ret = pcie_capability_read_dword(dev, pos, &val);
 	if (!ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		val &= ~clear;
 		val |= set;
 		ret = pcie_capability_write_dword(dev, pos, val);
@@ -903,6 +966,7 @@ EXPORT_SYMBOL(pcie_capability_clear_and_set_dword);
 int pci_read_config_byte(const struct pci_dev *dev, int where, u8 *val)
 {
 	if (pci_dev_is_disconnected(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*val = ~0;
 		return PCIBIOS_DEVICE_NOT_FOUND;
 	}
@@ -913,6 +977,7 @@ EXPORT_SYMBOL(pci_read_config_byte);
 int pci_read_config_word(const struct pci_dev *dev, int where, u16 *val)
 {
 	if (pci_dev_is_disconnected(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*val = ~0;
 		return PCIBIOS_DEVICE_NOT_FOUND;
 	}
@@ -924,6 +989,7 @@ int pci_read_config_dword(const struct pci_dev *dev, int where,
 					u32 *val)
 {
 	if (pci_dev_is_disconnected(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*val = ~0;
 		return PCIBIOS_DEVICE_NOT_FOUND;
 	}
@@ -934,7 +1000,9 @@ EXPORT_SYMBOL(pci_read_config_dword);
 int pci_write_config_byte(const struct pci_dev *dev, int where, u8 val)
 {
 	if (pci_dev_is_disconnected(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PCIBIOS_DEVICE_NOT_FOUND;
+}
 	return pci_bus_write_config_byte(dev->bus, dev->devfn, where, val);
 }
 EXPORT_SYMBOL(pci_write_config_byte);
@@ -942,7 +1010,9 @@ EXPORT_SYMBOL(pci_write_config_byte);
 int pci_write_config_word(const struct pci_dev *dev, int where, u16 val)
 {
 	if (pci_dev_is_disconnected(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PCIBIOS_DEVICE_NOT_FOUND;
+}
 	return pci_bus_write_config_word(dev->bus, dev->devfn, where, val);
 }
 EXPORT_SYMBOL(pci_write_config_word);
@@ -951,7 +1021,9 @@ int pci_write_config_dword(const struct pci_dev *dev, int where,
 					 u32 val)
 {
 	if (pci_dev_is_disconnected(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PCIBIOS_DEVICE_NOT_FOUND;
+}
 	return pci_bus_write_config_dword(dev->bus, dev->devfn, where, val);
 }
 EXPORT_SYMBOL(pci_write_config_dword);
diff --git a/drivers/pci/ats.c b/drivers/pci/ats.c
index ad8ddbb..73d3d9b 100644
--- a/drivers/pci/ats.c
+++ b/drivers/pci/ats.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/pci/ats.c
  *
@@ -23,8 +25,11 @@ void pci_ats_init(struct pci_dev *dev)
 
 	pos = pci_find_ext_capability(dev, PCI_EXT_CAP_ID_ATS);
 	if (!pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->ats_cap = pos;
 }
 
@@ -41,7 +46,9 @@ int pci_enable_ats(struct pci_dev *dev, int ps)
 	struct pci_dev *pdev;
 
 	if (!dev->ats_cap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (WARN_ON(dev->ats_enabled))
 		return -EBUSY;
@@ -80,6 +87,7 @@ void pci_disable_ats(struct pci_dev *dev)
 	struct pci_dev *pdev;
 	u16 ctrl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(!dev->ats_enabled))
 		return;
 
@@ -104,7 +112,9 @@ void pci_restore_ats_state(struct pci_dev *dev)
 	u16 ctrl;
 
 	if (!dev->ats_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	ctrl = PCI_ATS_CTRL_ENABLE;
 	if (!dev->is_virtfn)
@@ -130,7 +140,9 @@ int pci_ats_queue_depth(struct pci_dev *dev)
 	u16 cap;
 
 	if (!dev->ats_cap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (dev->is_virtfn)
 		return 0;
@@ -153,6 +165,7 @@ int pci_enable_pri(struct pci_dev *pdev, u32 reqs)
 	u32 max_requests;
 	int pos;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(pdev->pri_enabled))
 		return -EBUSY;
 
@@ -189,6 +202,7 @@ void pci_disable_pri(struct pci_dev *pdev)
 	u16 control;
 	int pos;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(!pdev->pri_enabled))
 		return;
 
@@ -215,7 +229,9 @@ void pci_restore_pri_state(struct pci_dev *pdev)
 	int pos;
 
 	if (!pdev->pri_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pos = pci_find_ext_capability(pdev, PCI_EXT_CAP_ID_PRI);
 	if (!pos)
@@ -238,6 +254,7 @@ int pci_reset_pri(struct pci_dev *pdev)
 	u16 control;
 	int pos;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(pdev->pri_enabled))
 		return -EBUSY;
 
@@ -268,6 +285,7 @@ int pci_enable_pasid(struct pci_dev *pdev, int features)
 	u16 control, supported;
 	int pos;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(pdev->pasid_enabled))
 		return -EBUSY;
 
@@ -302,6 +320,7 @@ void pci_disable_pasid(struct pci_dev *pdev)
 	u16 control = 0;
 	int pos;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(!pdev->pasid_enabled))
 		return;
 
@@ -325,7 +344,9 @@ void pci_restore_pasid_state(struct pci_dev *pdev)
 	int pos;
 
 	if (!pdev->pasid_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pos = pci_find_ext_capability(pdev, PCI_EXT_CAP_ID_PASID);
 	if (!pos)
@@ -353,7 +374,9 @@ int pci_pasid_features(struct pci_dev *pdev)
 
 	pos = pci_find_ext_capability(pdev, PCI_EXT_CAP_ID_PASID);
 	if (!pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	pci_read_config_word(pdev, pos + PCI_PASID_CAP, &supported);
 
@@ -379,7 +402,9 @@ int pci_max_pasids(struct pci_dev *pdev)
 
 	pos = pci_find_ext_capability(pdev, PCI_EXT_CAP_ID_PASID);
 	if (!pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	pci_read_config_word(pdev, pos + PCI_PASID_CAP, &supported);
 
diff --git a/drivers/pci/bus.c b/drivers/pci/bus.c
index bc56cf1..0ac9748 100644
--- a/drivers/pci/bus.c
+++ b/drivers/pci/bus.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	drivers/pci/bus.c
  *
@@ -24,6 +26,7 @@ void pci_add_resource_offset(struct list_head *resources, struct resource *res,
 
 	entry = resource_list_create_entry(res, 0);
 	if (!entry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "PCI: can't add host bridge window %pR\n", res);
 		return;
 	}
@@ -41,6 +44,7 @@ EXPORT_SYMBOL(pci_add_resource);
 
 void pci_free_resource_list(struct list_head *resources)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	resource_list_free(resources);
 }
 EXPORT_SYMBOL(pci_free_resource_list);
@@ -52,6 +56,7 @@ void pci_bus_add_resource(struct pci_bus *bus, struct resource *res,
 
 	bus_res = kzalloc(sizeof(struct pci_bus_resource), GFP_KERNEL);
 	if (!bus_res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&bus->dev, "can't add %pR resource\n", res);
 		return;
 	}
@@ -73,6 +78,7 @@ struct resource *pci_bus_resource_n(const struct pci_bus *bus, int n)
 		if (n-- == 0)
 			return bus_res->res;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL_GPL(pci_bus_resource_n);
@@ -82,6 +88,7 @@ void pci_bus_remove_resources(struct pci_bus *bus)
 	int i;
 	struct pci_bus_resource *bus_res, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < PCI_BRIDGE_RESOURCE_NUM; i++)
 		bus->resource[i] = NULL;
 
@@ -98,6 +105,7 @@ int devm_request_pci_bus_resources(struct device *dev,
 	struct resource *parent, *res;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	resource_list_for_each_entry(win, resources) {
 		res = win->res;
 		switch (resource_type(res)) {
@@ -142,7 +150,9 @@ static void pci_clip_resource_to_region(struct pci_bus *bus,
 
 	pcibios_resource_to_bus(bus, &r, res);
 	if (r.start < region->start)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		r.start = region->start;
+}
 	if (r.end > region->end)
 		r.end = region->end;
 
@@ -168,6 +178,7 @@ static int pci_bus_alloc_from_region(struct pci_bus *bus, struct resource *res,
 
 	type_mask |= IORESOURCE_TYPE_BITS;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_bus_for_each_resource(bus, r, i) {
 		resource_size_t min_used = min;
 
@@ -235,6 +246,7 @@ int pci_bus_alloc_resource(struct pci_bus *bus, struct resource *res,
 	int rc;
 
 	if (res->flags & IORESOURCE_MEM_64) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = pci_bus_alloc_from_region(bus, res, size, align, min,
 					       type_mask, alignf, alignf_data,
 					       &pci_high);
@@ -267,6 +279,7 @@ bool pci_bus_clip_resource(struct pci_dev *dev, int idx)
 	struct resource *r;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_bus_for_each_resource(bus, r, i) {
 		resource_size_t start, end;
 
diff --git a/drivers/pci/host-bridge.c b/drivers/pci/host-bridge.c
index add6623..616f87b 100644
--- a/drivers/pci/host-bridge.c
+++ b/drivers/pci/host-bridge.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * host bridge related code
  */
@@ -13,11 +15,13 @@ static struct pci_bus *find_pci_root_bus(struct pci_bus *bus)
 	while (bus->parent)
 		bus = bus->parent;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bus;
 }
 
 struct pci_host_bridge *pci_find_host_bridge(struct pci_bus *bus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_bus *root_bus = find_pci_root_bus(bus);
 
 	return to_pci_host_bridge(root_bus->bridge);
@@ -88,6 +92,7 @@ void pcibios_bus_to_resource(struct pci_bus *bus, struct resource *res,
 		bus_region.end = window->res->end - window->offset;
 
 		if (region_contains(&bus_region, region)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			offset = window->offset;
 			break;
 		}
diff --git a/drivers/pci/hotplug/pci_hotplug_core.c b/drivers/pci/hotplug/pci_hotplug_core.c
index 7b0e97b..9a74c44 100644
--- a/drivers/pci/hotplug/pci_hotplug_core.c
+++ b/drivers/pci/hotplug/pci_hotplug_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * PCI HotPlug Controller Core
  *
@@ -87,7 +89,9 @@ static ssize_t power_read_file(struct pci_slot *pci_slot, char *buf)
 
 	retval = get_power_status(pci_slot->hotplug, &value);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	return sprintf(buf, "%d\n", value);
 }
@@ -102,6 +106,7 @@ static ssize_t power_write_file(struct pci_slot *pci_slot, const char *buf,
 
 	lpower = simple_strtoul(buf, NULL, 10);
 	power = (u8)(lpower & 0xff);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dbg("power = %d\n", power);
 
 	if (!try_module_get(slot->ops->owner)) {
@@ -144,7 +149,9 @@ static ssize_t attention_read_file(struct pci_slot *pci_slot, char *buf)
 
 	retval = get_attention_status(pci_slot->hotplug, &value);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	return sprintf(buf, "%d\n", value);
 }
@@ -159,6 +166,7 @@ static ssize_t attention_write_file(struct pci_slot *pci_slot, const char *buf,
 
 	lattention = simple_strtoul(buf, NULL, 10);
 	attention = (u8)(lattention & 0xff);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dbg(" - attention = %d\n", attention);
 
 	if (!try_module_get(ops->owner)) {
@@ -188,7 +196,9 @@ static ssize_t latch_read_file(struct pci_slot *pci_slot, char *buf)
 
 	retval = get_latch_status(pci_slot->hotplug, &value);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	return sprintf(buf, "%d\n", value);
 }
@@ -205,7 +215,9 @@ static ssize_t presence_read_file(struct pci_slot *pci_slot, char *buf)
 
 	retval = get_adapter_status(pci_slot->hotplug, &value);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	return sprintf(buf, "%d\n", value);
 }
@@ -225,6 +237,7 @@ static ssize_t test_write_file(struct pci_slot *pci_slot, const char *buf,
 
 	ltest = simple_strtoul(buf, NULL, 10);
 	test = (u32)(ltest & 0xffffffff);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dbg("test = %d\n", test);
 
 	if (!try_module_get(slot->ops->owner)) {
@@ -250,6 +263,7 @@ static bool has_power_file(struct pci_slot *pci_slot)
 {
 	struct hotplug_slot *slot = pci_slot->hotplug;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!slot) || (!slot->ops))
 		return false;
 	if ((slot->ops->enable_slot) ||
@@ -263,6 +277,7 @@ static bool has_attention_file(struct pci_slot *pci_slot)
 {
 	struct hotplug_slot *slot = pci_slot->hotplug;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!slot) || (!slot->ops))
 		return false;
 	if ((slot->ops->set_attention_status) ||
@@ -275,6 +290,7 @@ static bool has_latch_file(struct pci_slot *pci_slot)
 {
 	struct hotplug_slot *slot = pci_slot->hotplug;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!slot) || (!slot->ops))
 		return false;
 	if (slot->ops->get_latch_status)
@@ -286,6 +302,7 @@ static bool has_adapter_file(struct pci_slot *pci_slot)
 {
 	struct hotplug_slot *slot = pci_slot->hotplug;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!slot) || (!slot->ops))
 		return false;
 	if (slot->ops->get_adapter_status)
@@ -297,6 +314,7 @@ static bool has_test_file(struct pci_slot *pci_slot)
 {
 	struct hotplug_slot *slot = pci_slot->hotplug;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!slot) || (!slot->ops))
 		return false;
 	if (slot->ops->hardware_test)
@@ -312,6 +330,7 @@ static int fs_add_slot(struct pci_slot *pci_slot)
 	pci_hp_create_module_link(pci_slot);
 
 	if (has_power_file(pci_slot)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = sysfs_create_file(&pci_slot->kobj,
 					   &hotplug_slot_attr_power.attr);
 		if (retval)
@@ -370,6 +389,7 @@ static int fs_add_slot(struct pci_slot *pci_slot)
 
 static void fs_remove_slot(struct pci_slot *pci_slot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (has_power_file(pci_slot))
 		sysfs_remove_file(&pci_slot->kobj, &hotplug_slot_attr_power.attr);
 
@@ -394,6 +414,7 @@ static struct hotplug_slot *get_slot_from_name(const char *name)
 {
 	struct hotplug_slot *slot;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(slot, &pci_hotplug_slot_list, slot_list) {
 		if (strcmp(hotplug_slot_name(slot), name) == 0)
 			return slot;
@@ -423,7 +444,9 @@ int __pci_hp_register(struct hotplug_slot *slot, struct pci_bus *bus,
 	struct pci_slot *pci_slot;
 
 	if (slot == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 	if ((slot->info == NULL) || (slot->ops == NULL))
 		return -EINVAL;
 	if (slot->release == NULL) {
@@ -475,7 +498,9 @@ int pci_hp_deregister(struct hotplug_slot *slot)
 	struct pci_slot *pci_slot;
 
 	if (!slot)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	mutex_lock(&pci_hp_mutex);
 	temp = get_slot_from_name(hotplug_slot_name(slot));
@@ -512,6 +537,7 @@ EXPORT_SYMBOL_GPL(pci_hp_deregister);
 int pci_hp_change_slot_info(struct hotplug_slot *slot,
 			    struct hotplug_slot_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!slot || !info)
 		return -ENODEV;
 
@@ -527,10 +553,12 @@ static int __init pci_hotplug_init(void)
 
 	result = cpci_hotplug_init(debug);
 	if (result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err("cpci_hotplug_init with error %d\n", result);
 		return result;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return result;
 }
 device_initcall(pci_hotplug_init);
diff --git a/drivers/pci/hotplug/pciehp_core.c b/drivers/pci/hotplug/pciehp_core.c
index 35d8484..d83a2ae 100644
--- a/drivers/pci/hotplug/pciehp_core.c
+++ b/drivers/pci/hotplug/pciehp_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * PCI Express Hot Plug Controller Driver
  *
diff --git a/drivers/pci/hotplug/shpchp_core.c b/drivers/pci/hotplug/shpchp_core.c
index 7bfb87b..ea0cbb7 100644
--- a/drivers/pci/hotplug/shpchp_core.c
+++ b/drivers/pci/hotplug/shpchp_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Standard Hot Plug Controller Driver
  *
diff --git a/drivers/pci/iov.c b/drivers/pci/iov.c
index 0fd8e16..06c21a2 100644
--- a/drivers/pci/iov.c
+++ b/drivers/pci/iov.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/pci/iov.c
  *
diff --git a/drivers/pci/msi.c b/drivers/pci/msi.c
index 496ed91..afa4d1a 100644
--- a/drivers/pci/msi.c
+++ b/drivers/pci/msi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * File:	msi.c
  * Purpose:	PCI Message Signaled Interrupt (MSI)
@@ -38,7 +40,9 @@ static int pci_msi_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 
 	domain = dev_get_msi_domain(&dev->dev);
 	if (domain && irq_domain_is_hierarchy(domain))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return msi_domain_alloc_irqs(domain, &dev->dev, nvec);
+}
 
 	return arch_setup_msi_irqs(dev, nvec, type);
 }
@@ -48,6 +52,7 @@ static void pci_msi_teardown_msi_irqs(struct pci_dev *dev)
 	struct irq_domain *domain;
 
 	domain = dev_get_msi_domain(&dev->dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (domain && irq_domain_is_hierarchy(domain))
 		msi_domain_free_irqs(domain, &dev->dev);
 	else
@@ -65,6 +70,7 @@ int __weak arch_setup_msi_irq(struct pci_dev *dev, struct msi_desc *desc)
 	struct msi_controller *chip = dev->bus->msi;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!chip || !chip->setup_irq)
 		return -EINVAL;
 
@@ -79,6 +85,7 @@ int __weak arch_setup_msi_irq(struct pci_dev *dev, struct msi_desc *desc)
 
 void __weak arch_teardown_msi_irq(unsigned int irq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msi_controller *chip = irq_get_chip_data(irq);
 
 	if (!chip || !chip->teardown_irq)
@@ -93,6 +100,7 @@ int __weak arch_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 	struct msi_desc *entry;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (chip && chip->setup_irqs)
 		return chip->setup_irqs(chip, dev, nvec, type);
 	/*
@@ -122,6 +130,7 @@ void default_teardown_msi_irqs(struct pci_dev *dev)
 	int i;
 	struct msi_desc *entry;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_pci_msi_entry(entry, dev)
 		if (entry->irq)
 			for (i = 0; i < entry->nvec_used; i++)
@@ -130,6 +139,7 @@ void default_teardown_msi_irqs(struct pci_dev *dev)
 
 void __weak arch_teardown_msi_irqs(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return default_teardown_msi_irqs(dev);
 }
 
@@ -139,6 +149,7 @@ static void default_restore_msi_irq(struct pci_dev *dev, int irq)
 
 	entry = NULL;
 	if (dev->msix_enabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_pci_msi_entry(entry, dev) {
 			if (irq == entry->irq)
 				break;
@@ -153,6 +164,7 @@ static void default_restore_msi_irq(struct pci_dev *dev, int irq)
 
 void __weak arch_restore_msi_irqs(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return default_restore_msi_irqs(dev);
 }
 
@@ -160,7 +172,9 @@ static inline __attribute_const__ u32 msi_mask(unsigned x)
 {
 	/* Don't shift by >= width of type */
 	if (x >= 5)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0xffffffff;
+}
 	return (1 << (1 << x)) - 1;
 }
 
@@ -175,8 +189,11 @@ u32 __pci_msi_desc_mask_irq(struct msi_desc *desc, u32 mask, u32 flag)
 	u32 mask_bits = desc->masked;
 
 	if (pci_msi_ignore_mask || !desc->msi_attrib.maskbit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mask_bits &= ~mask;
 	mask_bits |= flag;
 	pci_write_config_dword(msi_desc_to_pci_dev(desc), desc->mask_pos,
@@ -208,7 +225,9 @@ u32 __pci_msix_desc_mask_irq(struct msi_desc *desc, u32 flag)
 	u32 mask_bits = desc->masked;
 
 	if (pci_msi_ignore_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	mask_bits &= ~PCI_MSIX_ENTRY_CTRL_MASKBIT;
 	if (flag)
@@ -225,6 +244,7 @@ static void msix_mask_irq(struct msi_desc *desc, u32 flag)
 
 static void msi_set_mask_bit(struct irq_data *data, u32 flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msi_desc *desc = irq_data_get_msi_desc(data);
 
 	if (desc->msi_attrib.is_msix) {
@@ -242,6 +262,7 @@ static void msi_set_mask_bit(struct irq_data *data, u32 flag)
  */
 void pci_msi_mask_irq(struct irq_data *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msi_set_mask_bit(data, 1);
 }
 EXPORT_SYMBOL_GPL(pci_msi_mask_irq);
@@ -260,12 +281,14 @@ void default_restore_msi_irqs(struct pci_dev *dev)
 {
 	struct msi_desc *entry;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_pci_msi_entry(entry, dev)
 		default_restore_msi_irq(dev, entry->irq);
 }
 
 void __pci_read_msi_msg(struct msi_desc *entry, struct msi_msg *msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev = msi_desc_to_pci_dev(entry);
 
 	BUG_ON(dev->current_state != PCI_D0);
@@ -296,11 +319,13 @@ void __pci_read_msi_msg(struct msi_desc *entry, struct msi_msg *msg)
 
 void __pci_write_msi_msg(struct msi_desc *entry, struct msi_msg *msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev = msi_desc_to_pci_dev(entry);
 
 	if (dev->current_state != PCI_D0 || pci_dev_is_disconnected(dev)) {
 		/* Don't touch the hardware now */
 	} else if (entry->msi_attrib.is_msix) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		void __iomem *base = pci_msix_desc_addr(entry);
 
 		writel(msg->address_lo, base + PCI_MSIX_ENTRY_LOWER_ADDR);
@@ -323,6 +348,7 @@ void __pci_write_msi_msg(struct msi_desc *entry, struct msi_msg *msg)
 			pci_write_config_word(dev, pos + PCI_MSI_DATA_64,
 					      msg->data);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pci_write_config_word(dev, pos + PCI_MSI_DATA_32,
 					      msg->data);
 		}
@@ -332,6 +358,7 @@ void __pci_write_msi_msg(struct msi_desc *entry, struct msi_msg *msg)
 
 void pci_write_msi_msg(unsigned int irq, struct msi_msg *msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msi_desc *entry = irq_get_msi_desc(irq);
 
 	__pci_write_msi_msg(entry, msg);
@@ -346,6 +373,7 @@ static void free_msi_irqs(struct pci_dev *dev)
 	struct device_attribute *dev_attr;
 	int i, count = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_pci_msi_entry(entry, dev)
 		if (entry->irq)
 			for (i = 0; i < entry->nvec_used; i++)
@@ -392,7 +420,9 @@ static void __pci_restore_msi_state(struct pci_dev *dev)
 	struct msi_desc *entry;
 
 	if (!dev->msi_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	entry = irq_get_msi_desc(dev->irq);
 
@@ -413,7 +443,9 @@ static void __pci_restore_msix_state(struct pci_dev *dev)
 	struct msi_desc *entry;
 
 	if (!dev->msix_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	BUG_ON(list_empty(dev_to_msi_list(&dev->dev)));
 
 	/* route the table */
@@ -430,6 +462,7 @@ static void __pci_restore_msix_state(struct pci_dev *dev)
 
 void pci_restore_msi_state(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__pci_restore_msi_state(dev);
 	__pci_restore_msix_state(dev);
 }
@@ -444,7 +477,9 @@ static ssize_t msi_mode_show(struct device *dev, struct device_attribute *attr,
 
 	retval = kstrtoul(attr->attr.name, 10, &irq);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	entry = irq_get_msi_desc(irq);
 	if (entry)
@@ -471,12 +506,16 @@ static int populate_msi_sysfs(struct pci_dev *pdev)
 	for_each_pci_msi_entry(entry, pdev)
 		num_msi += entry->nvec_used;
 	if (!num_msi)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Dynamically create the MSI attributes for the PCI device */
 	msi_attrs = kzalloc(sizeof(void *) * (num_msi + 1), GFP_KERNEL);
 	if (!msi_attrs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	for_each_pci_msi_entry(entry, pdev) {
 		for (i = 0; i < entry->nvec_used; i++) {
 			msi_dev_attr = kzalloc(sizeof(*msi_dev_attr), GFP_KERNEL);
@@ -484,6 +523,7 @@ static int populate_msi_sysfs(struct pci_dev *pdev)
 				goto error_attrs;
 			msi_attrs[count] = &msi_dev_attr->attr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sysfs_attr_init(&msi_dev_attr->attr);
 			msi_dev_attr->attr.name = kasprintf(GFP_KERNEL, "%d",
 							    entry->irq + i);
@@ -520,13 +560,16 @@ static int populate_msi_sysfs(struct pci_dev *pdev)
 error_attrs:
 	count = 0;
 	msi_attr = msi_attrs[count];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (msi_attr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msi_dev_attr = container_of(msi_attr, struct device_attribute, attr);
 		kfree(msi_attr->name);
 		kfree(msi_dev_attr);
 		++count;
 		msi_attr = msi_attrs[count];
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(msi_attrs);
 	return ret;
 }
@@ -539,7 +582,9 @@ msi_setup_entry(struct pci_dev *dev, int nvec, const struct irq_affinity *affd)
 	u16 control;
 
 	if (affd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		masks = irq_create_affinity_masks(nvec, affd);
+}
 
 
 	/* MSI Entry Initialization */
@@ -564,7 +609,9 @@ msi_setup_entry(struct pci_dev *dev, int nvec, const struct irq_affinity *affd)
 
 	/* Save the initial mask status */
 	if (entry->msi_attrib.maskbit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_read_config_dword(dev, entry->mask_pos, &entry->masked);
+}
 
 out:
 	kfree(masks);
@@ -578,10 +625,12 @@ static int msi_verify_entries(struct pci_dev *dev)
 	for_each_pci_msi_entry(entry, dev) {
 		if (!dev->no_64bit_msi || !entry->msg.address_hi)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&dev->dev, "Device has broken 64-bit MSI but arch"
 			" tried to assign one above 4G\n");
 		return -EIO;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -608,7 +657,9 @@ static int msi_capability_init(struct pci_dev *dev, int nvec,
 
 	entry = msi_setup_entry(dev, nvec, affd);
 	if (!entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/* All MSIs are unmasked by default, Mask them all */
 	mask = msi_mask(entry->msi_attrib.multi_cap);
@@ -619,6 +670,7 @@ static int msi_capability_init(struct pci_dev *dev, int nvec,
 	/* Configure MSI capability structure */
 	ret = pci_msi_setup_msi_irqs(dev, nvec, PCI_CAP_ID_MSI);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msi_mask_irq(entry, mask, ~mask);
 		free_msi_irqs(dev);
 		return ret;
@@ -626,6 +678,7 @@ static int msi_capability_init(struct pci_dev *dev, int nvec,
 
 	ret = msi_verify_entries(dev);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msi_mask_irq(entry, mask, ~mask);
 		free_msi_irqs(dev);
 		return ret;
@@ -633,6 +686,7 @@ static int msi_capability_init(struct pci_dev *dev, int nvec,
 
 	ret = populate_msi_sysfs(dev);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msi_mask_irq(entry, mask, ~mask);
 		free_msi_irqs(dev);
 		return ret;
@@ -660,7 +714,9 @@ static void __iomem *msix_map_region(struct pci_dev *dev, unsigned nr_entries)
 	bir = (u8)(table_offset & PCI_MSIX_TABLE_BIR);
 	flags = pci_resource_flags(dev, bir);
 	if (!flags || (flags & IORESOURCE_UNSET))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	table_offset &= PCI_MSIX_TABLE_OFFSET;
 	phys_addr = pci_resource_start(dev, bir) + table_offset;
@@ -677,13 +733,18 @@ static int msix_setup_entries(struct pci_dev *dev, void __iomem *base,
 	int ret, i;
 
 	if (affd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		masks = irq_create_affinity_masks(nvec, affd);
+}
 
 	for (i = 0, curmsk = masks; i < nvec; i++) {
 		entry = alloc_msi_entry(&dev->dev, 1, curmsk);
 		if (!entry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!i)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				iounmap(base);
+}
 			else
 				free_msi_irqs(dev);
 			/* No enough memory. Don't try again */
@@ -694,7 +755,9 @@ static int msix_setup_entries(struct pci_dev *dev, void __iomem *base,
 		entry->msi_attrib.is_msix	= 1;
 		entry->msi_attrib.is_64		= 1;
 		if (entries)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			entry->msi_attrib.entry_nr = entries[i].entry;
+}
 		else
 			entry->msi_attrib.entry_nr = i;
 		entry->msi_attrib.default_irq	= dev->irq;
@@ -702,8 +765,11 @@ static int msix_setup_entries(struct pci_dev *dev, void __iomem *base,
 
 		list_add_tail(&entry->list, dev_to_msi_list(&dev->dev));
 		if (masks)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			curmsk++;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = 0;
 out:
 	kfree(masks);
@@ -718,7 +784,9 @@ static void msix_program_entries(struct pci_dev *dev,
 
 	for_each_pci_msi_entry(entry, dev) {
 		if (entries)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			entries[i++].vector = entry->irq;
+}
 		entry->masked = readl(pci_msix_desc_addr(entry) +
 				PCI_MSIX_ENTRY_VECTOR_CTRL);
 		msix_mask_irq(entry, 1);
@@ -750,11 +818,15 @@ static int msix_capability_init(struct pci_dev *dev, struct msix_entry *entries,
 	/* Request & Map MSI-X table region */
 	base = msix_map_region(dev, msix_table_size(control));
 	if (!base)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ret = msix_setup_entries(dev, base, entries, nvec, affd);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = pci_msi_setup_msi_irqs(dev, nvec, PCI_CAP_ID_MSIX);
 	if (ret)
@@ -796,12 +868,19 @@ static int msix_capability_init(struct pci_dev *dev, struct msix_entry *entries,
 		struct msi_desc *entry;
 		int avail = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_pci_msi_entry(entry, dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (entry->irq != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				avail++;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (avail != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = avail;
+}
 	}
 
 out_free:
@@ -825,10 +904,14 @@ static int pci_msi_supported(struct pci_dev *dev, int nvec)
 
 	/* MSI must be globally enabled and supported by the device */
 	if (!pci_msi_enable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!dev || dev->no_msi || dev->current_state != PCI_D0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * You can't ask to have 0 or less MSIs configured.
@@ -836,7 +919,9 @@ static int pci_msi_supported(struct pci_dev *dev, int nvec)
 	 *  b) the list manipulation code assumes nvec >= 1.
 	 */
 	if (nvec < 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * Any bridge which does NOT route MSI transactions from its
@@ -847,8 +932,11 @@ static int pci_msi_supported(struct pci_dev *dev, int nvec)
 	 */
 	for (bus = dev->bus; bus; bus = bus->parent)
 		if (bus->bus_flags & PCI_BUS_FLAGS_NO_MSI)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -868,7 +956,9 @@ int pci_msi_vec_count(struct pci_dev *dev)
 	u16 msgctl;
 
 	if (!dev->msi_cap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	pci_read_config_word(dev, dev->msi_cap + PCI_MSI_FLAGS, &msgctl);
 	ret = 1 << ((msgctl & PCI_MSI_FLAGS_QMASK) >> 1);
@@ -882,6 +972,7 @@ static void pci_msi_shutdown(struct pci_dev *dev)
 	struct msi_desc *desc;
 	u32 mask;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pci_msi_enable || !dev || !dev->msi_enabled)
 		return;
 
@@ -904,6 +995,7 @@ static void pci_msi_shutdown(struct pci_dev *dev)
 
 void pci_disable_msi(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pci_msi_enable || !dev || !dev->msi_enabled)
 		return;
 
@@ -925,7 +1017,9 @@ int pci_msix_vec_count(struct pci_dev *dev)
 	u16 control;
 
 	if (!dev->msix_cap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	pci_read_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, &control);
 	return msix_table_size(control);
@@ -939,22 +1033,35 @@ static int __pci_enable_msix(struct pci_dev *dev, struct msix_entry *entries,
 	int i, j;
 
 	if (!pci_msi_supported(dev, nvec))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	nr_entries = pci_msix_vec_count(dev);
 	if (nr_entries < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return nr_entries;
+}
 	if (nvec > nr_entries)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return nr_entries;
+}
 
 	if (entries) {
 		/* Check for any invalid entries */
 		for (i = 0; i < nvec; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (entries[i].entry >= nr_entries)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;		/* invalid entry */
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			for (j = i + 1; j < nvec; j++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (entries[i].entry == entries[j].entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -EINVAL;	/* duplicate entry */
+}
 			}
 		}
 	}
@@ -962,6 +1069,7 @@ static int __pci_enable_msix(struct pci_dev *dev, struct msix_entry *entries,
 
 	/* Check whether driver already requested for MSI irq */
 	if (dev->msi_enabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, "can't enable MSI-X (MSI IRQ already assigned)\n");
 		return -EINVAL;
 	}
@@ -972,6 +1080,7 @@ static void pci_msix_shutdown(struct pci_dev *dev)
 {
 	struct msi_desc *entry;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pci_msi_enable || !dev || !dev->msix_enabled)
 		return;
 
@@ -994,6 +1103,7 @@ static void pci_msix_shutdown(struct pci_dev *dev)
 
 void pci_disable_msix(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pci_msi_enable || !dev || !dev->msix_enabled)
 		return;
 
@@ -1004,6 +1114,7 @@ EXPORT_SYMBOL(pci_disable_msix);
 
 void pci_no_msi(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_msi_enable = 0;
 }
 
@@ -1026,45 +1137,68 @@ static int __pci_enable_msi_range(struct pci_dev *dev, int minvec, int maxvec,
 	int rc;
 
 	if (!pci_msi_supported(dev, minvec))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	WARN_ON(!!dev->msi_enabled);
 
 	/* Check whether driver already requested MSI-X irqs */
 	if (dev->msix_enabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev,
 			 "can't enable MSI (MSI-X already enabled)\n");
 		return -EINVAL;
 	}
 
 	if (maxvec < minvec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ERANGE;
+}
 
 	nvec = pci_msi_vec_count(dev);
 	if (nvec < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return nvec;
+}
 	if (nvec < minvec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSPC;
+}
 
 	if (nvec > maxvec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nvec = maxvec;
+}
 
 	for (;;) {
 		if (affd) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nvec = irq_calc_affinity_vectors(minvec, nvec, affd);
 			if (nvec < minvec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -ENOSPC;
+}
 		}
 
 		rc = msi_capability_init(dev, nvec, affd);
 		if (rc == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return nvec;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rc < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return rc;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rc < minvec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOSPC;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nvec = rc;
 	}
 }
@@ -1072,6 +1206,7 @@ static int __pci_enable_msi_range(struct pci_dev *dev, int minvec, int maxvec,
 /* deprecated, don't use */
 int pci_enable_msi(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int rc = __pci_enable_msi_range(dev, 1, 1, NULL);
 	if (rc < 0)
 		return rc;
@@ -1086,24 +1221,37 @@ static int __pci_enable_msix_range(struct pci_dev *dev,
 	int rc, nvec = maxvec;
 
 	if (maxvec < minvec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ERANGE;
+}
 
 	for (;;) {
 		if (affd) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nvec = irq_calc_affinity_vectors(minvec, nvec, affd);
 			if (nvec < minvec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -ENOSPC;
+}
 		}
 
 		rc = __pci_enable_msix(dev, entries, nvec, affd);
 		if (rc == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return nvec;
+}
 
 		if (rc < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return rc;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rc < minvec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOSPC;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nvec = rc;
 	}
 }
@@ -1126,6 +1274,7 @@ static int __pci_enable_msix_range(struct pci_dev *dev,
 int pci_enable_msix_range(struct pci_dev *dev, struct msix_entry *entries,
 		int minvec, int maxvec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __pci_enable_msix_range(dev, entries, minvec, maxvec, NULL);
 }
 EXPORT_SYMBOL(pci_enable_msix_range);
@@ -1156,34 +1305,46 @@ int pci_alloc_irq_vectors_affinity(struct pci_dev *dev, unsigned int min_vecs,
 	int vecs = -ENOSPC;
 
 	if (flags & PCI_IRQ_AFFINITY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!affd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			affd = &msi_default_affd;
+}
 	} else {
 		if (WARN_ON(affd))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			affd = NULL;
+}
 	}
 
 	if (flags & PCI_IRQ_MSIX) {
 		vecs = __pci_enable_msix_range(dev, NULL, min_vecs, max_vecs,
 				affd);
 		if (vecs > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return vecs;
+}
 	}
 
 	if (flags & PCI_IRQ_MSI) {
 		vecs = __pci_enable_msi_range(dev, min_vecs, max_vecs, affd);
 		if (vecs > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return vecs;
+}
 	}
 
 	/* use legacy irq if allowed */
 	if (flags & PCI_IRQ_LEGACY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (min_vecs == 1 && dev->irq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pci_intx(dev, 1);
 			return 1;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return vecs;
 }
 EXPORT_SYMBOL(pci_alloc_irq_vectors_affinity);
@@ -1196,6 +1357,7 @@ EXPORT_SYMBOL(pci_alloc_irq_vectors_affinity);
  */
 void pci_free_irq_vectors(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_disable_msix(dev);
 	pci_disable_msi(dev);
 }
@@ -1217,6 +1379,7 @@ int pci_irq_vector(struct pci_dev *dev, unsigned int nr)
 				return entry->irq;
 			i++;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON_ONCE(1);
 		return -EINVAL;
 	}
@@ -1225,10 +1388,15 @@ int pci_irq_vector(struct pci_dev *dev, unsigned int nr)
 		struct msi_desc *entry = first_pci_msi_entry(dev);
 
 		if (WARN_ON_ONCE(nr >= entry->nvec_used))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (WARN_ON_ONCE(nr > 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 	}
 
 	return dev->irq + nr;
@@ -1242,6 +1410,7 @@ EXPORT_SYMBOL(pci_irq_vector);
  */
 const struct cpumask *pci_irq_get_affinity(struct pci_dev *dev, int nr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->msix_enabled) {
 		struct msi_desc *entry;
 		int i = 0;
@@ -1278,7 +1447,9 @@ int pci_irq_get_node(struct pci_dev *pdev, int vec)
 
 	mask = pci_irq_get_affinity(pdev, vec);
 	if (mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return local_memory_node(cpu_to_node(cpumask_first(mask)));
+}
 	return dev_to_node(&pdev->dev);
 }
 EXPORT_SYMBOL(pci_irq_get_node);
@@ -1291,6 +1462,7 @@ EXPORT_SYMBOL(msi_desc_to_pci_dev);
 
 void *msi_desc_to_pci_sysdata(struct msi_desc *desc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev = msi_desc_to_pci_dev(desc);
 
 	return dev->bus->sysdata;
@@ -1305,6 +1477,7 @@ EXPORT_SYMBOL_GPL(msi_desc_to_pci_sysdata);
  */
 void pci_msi_domain_write_msg(struct irq_data *irq_data, struct msi_msg *msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msi_desc *desc = irq_data_get_msi_desc(irq_data);
 
 	/*
@@ -1356,7 +1529,9 @@ int pci_msi_domain_check_cap(struct irq_domain *domain,
 	    !(info->flags & MSI_FLAG_MULTI_PCI_MSI))
 		return 1;
 	else if (desc->msi_attrib.is_msix && !(info->flags & MSI_FLAG_PCI_MSIX))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTSUPP;
+}
 
 	return 0;
 }
@@ -1394,10 +1569,13 @@ static void pci_msi_domain_update_dom_ops(struct msi_domain_info *info)
 	struct msi_domain_ops *ops = info->ops;
 
 	if (ops == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->ops = &pci_msi_domain_ops_default;
 	} else {
 		if (ops->set_desc == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ops->set_desc = pci_msi_domain_set_desc;
+}
 		if (ops->msi_check == NULL)
 			ops->msi_check = pci_msi_domain_check_cap;
 		if (ops->handle_error == NULL)
@@ -1413,10 +1591,14 @@ static void pci_msi_domain_update_chip_ops(struct msi_domain_info *info)
 	if (!chip->irq_write_msi_msg)
 		chip->irq_write_msi_msg = pci_msi_domain_write_msg;
 	if (!chip->irq_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		chip->irq_mask = pci_msi_mask_irq;
+}
 	if (!chip->irq_unmask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		chip->irq_unmask = pci_msi_unmask_irq;
 }
+}
 
 /**
  * pci_msi_create_irq_domain - Create a MSI interrupt domain
@@ -1444,7 +1626,9 @@ struct irq_domain *pci_msi_create_irq_domain(struct fwnode_handle *fwnode,
 
 	domain = msi_create_irq_domain(fwnode, info, parent);
 	if (!domain)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	irq_domain_update_bus_token(domain, DOMAIN_BUS_PCI_MSI);
 	return domain;
@@ -1470,7 +1654,9 @@ static int get_msi_id_cb(struct pci_dev *pdev, u16 alias, void *data)
 	u8 bus = PCI_BUS_NUM(*pa);
 
 	if (pdev->bus->number != bus || PCI_BUS_NUM(alias) != bus)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*pa = alias;
+}
 
 	return 0;
 }
@@ -1493,6 +1679,7 @@ u32 pci_msi_domain_get_msi_rid(struct irq_domain *domain, struct pci_dev *pdev)
 	pci_for_each_dma_alias(pdev, get_msi_id_cb, &rid);
 
 	of_node = irq_domain_get_of_node(domain);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rid = of_node ? of_msi_map_rid(&pdev->dev, of_node, rid) :
 			iort_msi_map_rid(&pdev->dev, rid);
 
@@ -1516,7 +1703,9 @@ struct irq_domain *pci_msi_get_device_domain(struct pci_dev *pdev)
 	pci_for_each_dma_alias(pdev, get_msi_id_cb, &rid);
 	dom = of_msi_map_get_device_domain(&pdev->dev, rid);
 	if (!dom)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dom = iort_get_device_domain(&pdev->dev, rid);
+}
 	return dom;
 }
 #endif /* CONFIG_PCI_MSI_IRQ_DOMAIN */
diff --git a/drivers/pci/pci-acpi.c b/drivers/pci/pci-acpi.c
index a8da543..85d77a0 100644
--- a/drivers/pci/pci-acpi.c
+++ b/drivers/pci/pci-acpi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * File:	pci-acpi.c
  * Purpose:	Provide PCI support in ACPI
@@ -113,8 +115,11 @@ phys_addr_t acpi_pci_root_get_mcfg_addr(acpi_handle handle)
 		status = acpi_evaluate_integer(handle, METHOD_NAME__CBA,
 					       NULL, &mcfg_addr);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (phys_addr_t)mcfg_addr;
 }
 
@@ -232,28 +237,38 @@ static acpi_status acpi_run_hpx(acpi_handle handle, struct hotplug_params *hpx)
 
 	status = acpi_evaluate_object(handle, "_HPX", NULL, &buffer);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return status;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	package = (union acpi_object *)buffer.pointer;
 	if (package->type != ACPI_TYPE_PACKAGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_ERROR;
 		goto exit;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < package->package.count; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		record = &package->package.elements[i];
 		if (record->type != ACPI_TYPE_PACKAGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_ERROR;
 			goto exit;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fields = record->package.elements;
 		if (fields[0].type != ACPI_TYPE_INTEGER ||
 		    fields[1].type != ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_ERROR;
 			goto exit;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type = fields[0].integer.value;
 		switch (type) {
 		case 0:
@@ -294,23 +309,32 @@ static acpi_status acpi_run_hpp(acpi_handle handle, struct hotplug_params *hpp)
 
 	status = acpi_evaluate_object(handle, "_HPP", NULL, &buffer);
 	if (ACPI_FAILURE(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return status;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	package = (union acpi_object *) buffer.pointer;
 	if (package->type != ACPI_TYPE_PACKAGE ||
 	    package->package.count != 4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = AE_ERROR;
 		goto exit;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fields = package->package.elements;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < 4; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fields[i].type != ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = AE_ERROR;
 			goto exit;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hpp->t0 = &hpp->type0_data;
 	hpp->t0->revision        = 1;
 	hpp->t0->cache_line_size = fields[0].integer.value;
@@ -335,8 +359,11 @@ int pci_get_hp_params(struct pci_dev *dev, struct hotplug_params *hpp)
 	struct pci_bus *pbus;
 
 	if (acpi_pci_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	handle = NULL;
 	for (pbus = dev->bus; pbus; pbus = pbus->parent) {
 		handle = acpi_pci_get_bridge_handle(pbus);
@@ -353,17 +380,24 @@ int pci_get_hp_params(struct pci_dev *dev, struct hotplug_params *hpp)
 	while (handle) {
 		status = acpi_run_hpx(handle, hpp);
 		if (ACPI_SUCCESS(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 		status = acpi_run_hpp(handle, hpp);
 		if (ACPI_SUCCESS(status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 		if (acpi_is_root_bridge(handle))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = acpi_get_parent(handle, &phandle);
 		if (ACPI_FAILURE(status))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		handle = phandle;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 EXPORT_SYMBOL_GPL(pci_get_hp_params);
@@ -383,7 +417,9 @@ bool pciehp_is_native(struct pci_dev *pdev)
 
 	handle = acpi_find_root_bridge_handle(pdev);
 	if (!handle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	root = acpi_pci_find_root(handle);
 	if (!root)
@@ -401,6 +437,7 @@ static void pci_acpi_wake_bus(struct acpi_device_wakeup_context *context)
 	struct acpi_device *adev;
 	struct acpi_pci_root *root;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	adev = container_of(context, struct acpi_device, wakeup.context);
 	root = acpi_driver_data(adev);
 	pci_pme_wakeup_bus(root->bus);
@@ -414,6 +451,7 @@ static void pci_acpi_wake_dev(struct acpi_device_wakeup_context *context)
 {
 	struct pci_dev *pci_dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_dev = to_pci_dev(context->dev);
 
 	if (pci_dev->pme_poll)
@@ -483,7 +521,9 @@ static pci_power_t acpi_pci_choose_state(struct pci_dev *pdev)
 	int acpi_state, d_max;
 
 	if (pdev->no_d3cold)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		d_max = ACPI_STATE_D3_HOT;
+}
 	else
 		d_max = ACPI_STATE_D3_COLD;
 	acpi_state = acpi_pm_device_sleep_state(&pdev->dev, NULL, d_max);
@@ -513,6 +553,7 @@ static bool acpi_pci_power_manageable(struct pci_dev *dev)
 
 static int acpi_pci_set_power_state(struct pci_dev *dev, pci_power_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(&dev->dev);
 	static const u8 state_conv[] = {
 		[PCI_D0] = ACPI_STATE_D0,
@@ -550,6 +591,7 @@ static int acpi_pci_set_power_state(struct pci_dev *dev, pci_power_t state)
 
 static pci_power_t acpi_pci_get_power_state(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(&dev->dev);
 	static const pci_power_t state_conv[] = {
 		[ACPI_STATE_D0]      = PCI_D0,
@@ -571,6 +613,7 @@ static pci_power_t acpi_pci_get_power_state(struct pci_dev *dev)
 
 static int acpi_pci_propagate_wakeup(struct pci_bus *bus, bool enable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (bus->parent) {
 		if (acpi_pm_device_can_wakeup(&bus->self->dev))
 			return acpi_pm_set_bridge_wakeup(&bus->self->dev, enable);
@@ -588,6 +631,7 @@ static int acpi_pci_propagate_wakeup(struct pci_bus *bus, bool enable)
 
 static int acpi_pci_wakeup(struct pci_dev *dev, bool enable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_pm_device_can_wakeup(&dev->dev))
 		return acpi_pm_set_device_wakeup(&dev->dev, enable);
 
@@ -596,6 +640,7 @@ static int acpi_pci_wakeup(struct pci_dev *dev, bool enable)
 
 static bool acpi_pci_need_resume(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(&dev->dev);
 
 	if (!adev || !acpi_device_power_manageable(adev))
@@ -625,8 +670,11 @@ void acpi_pci_add_bus(struct pci_bus *bus)
 	struct pci_host_bridge *bridge;
 
 	if (acpi_pci_disabled || !bus->bridge)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_pci_slot_enumerate(bus);
 	acpiphp_enumerate_slots(bus);
 
@@ -635,22 +683,30 @@ void acpi_pci_add_bus(struct pci_bus *bus)
 	 * that is available, mark it in pci_host_bridge.
 	 */
 	if (!pci_is_root_bus(bus))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	obj = acpi_evaluate_dsm(ACPI_HANDLE(bus->bridge), &pci_acpi_dsm_guid, 3,
 				RESET_DELAY_DSM, NULL);
 	if (!obj)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (obj->type == ACPI_TYPE_INTEGER && obj->integer.value == 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bridge = pci_find_host_bridge(bus);
 		bridge->ignore_reset_delay = 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_FREE(obj);
 }
 
 void acpi_pci_remove_bus(struct pci_bus *bus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (acpi_pci_disabled || !bus->bridge)
 		return;
 
@@ -661,6 +717,7 @@ void acpi_pci_remove_bus(struct pci_bus *bus)
 /* ACPI bus type */
 static struct acpi_device *acpi_pci_find_companion(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	bool check_children;
 	u64 addr;
@@ -700,26 +757,40 @@ static void pci_acpi_optimize_delay(struct pci_dev *pdev,
 	union acpi_object *obj, *elements;
 
 	if (bridge->ignore_reset_delay)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pdev->d3cold_delay = 0;
+}
 
 	obj = acpi_evaluate_dsm(handle, &pci_acpi_dsm_guid, 3,
 				FUNCTION_DELAY_DSM, NULL);
 	if (!obj)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (obj->type == ACPI_TYPE_PACKAGE && obj->package.count == 5) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		elements = obj->package.elements;
 		if (elements[0].type == ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			value = (int)elements[0].integer.value / 1000;
 			if (value < PCI_PM_D3COLD_WAIT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pdev->d3cold_delay = value;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (elements[3].type == ACPI_TYPE_INTEGER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			value = (int)elements[3].integer.value / 1000;
 			if (value < PCI_PM_D3_WAIT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pdev->d3_delay = value;
+}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ACPI_FREE(obj);
 }
 
@@ -729,20 +800,26 @@ static void pci_acpi_setup(struct device *dev)
 	struct acpi_device *adev = ACPI_COMPANION(dev);
 
 	if (!adev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pci_acpi_optimize_delay(pci_dev, adev->handle);
 
 	pci_acpi_add_pm_notifier(adev, pci_dev);
 	if (!adev->wakeup.flags.valid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_set_wakeup_capable(dev, true);
 	acpi_pci_wakeup(pci_dev, false);
 }
 
 static void pci_acpi_cleanup(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *adev = ACPI_COMPANION(dev);
 
 	if (!adev)
@@ -780,6 +857,7 @@ static struct fwnode_handle *(*pci_msi_get_fwnode_cb)(struct device *dev);
 void
 pci_msi_register_fwnode_provider(struct fwnode_handle *(*fn)(struct device *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_msi_get_fwnode_cb = fn;
 }
 
@@ -797,12 +875,18 @@ struct irq_domain *pci_host_bridge_acpi_msi_domain(struct pci_bus *bus)
 	struct fwnode_handle *fwnode;
 
 	if (!pci_msi_get_fwnode_cb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fwnode = pci_msi_get_fwnode_cb(&bus->dev);
 	if (!fwnode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return irq_find_matching_fwnode(fwnode, DOMAIN_BUS_PCI_MSI);
 }
 
@@ -811,18 +895,22 @@ static int __init acpi_pci_init(void)
 	int ret;
 
 	if (acpi_gbl_FADT.boot_flags & ACPI_FADT_NO_MSI) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("ACPI FADT declares the system doesn't support MSI, so disable it\n");
 		pci_no_msi();
 	}
 
 	if (acpi_gbl_FADT.boot_flags & ACPI_FADT_NO_ASPM) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("ACPI FADT declares the system doesn't support PCIe ASPM, so disable it\n");
 		pcie_no_aspm();
 	}
 
 	ret = register_acpi_bus_type(&acpi_pci_bus);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	pci_set_platform_pm(&acpi_pci_platform_pm);
 	acpi_pci_slot_init();
diff --git a/drivers/pci/pci-driver.c b/drivers/pci/pci-driver.c
index bb0927d..beb0c20 100644
--- a/drivers/pci/pci-driver.c
+++ b/drivers/pci/pci-driver.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/pci/pci-driver.c
  *
@@ -58,7 +60,9 @@ int pci_add_dynid(struct pci_driver *drv,
 
 	dynid = kzalloc(sizeof(*dynid), GFP_KERNEL);
 	if (!dynid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	dynid->id.vendor = vendor;
 	dynid->id.device = device;
@@ -81,6 +85,7 @@ static void pci_free_dynids(struct pci_driver *drv)
 	struct pci_dynid *dynid, *n;
 
 	spin_lock(&drv->dynids.lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(dynid, n, &drv->dynids.list, node) {
 		list_del(&dynid->node);
 		kfree(dynid);
@@ -99,6 +104,7 @@ static void pci_free_dynids(struct pci_driver *drv)
 static ssize_t new_id_store(struct device_driver *driver, const char *buf,
 			    size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_driver *pdrv = to_pci_driver(driver);
 	const struct pci_device_id *ids = pdrv->id_table;
 	__u32 vendor, device, subvendor = PCI_ANY_ID,
@@ -168,6 +174,7 @@ static ssize_t remove_id_store(struct device_driver *driver, const char *buf,
 			       size_t count)
 {
 	struct pci_dynid *dynid, *n;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_driver *pdrv = to_pci_driver(driver);
 	__u32 vendor, device, subvendor = PCI_ANY_ID,
 		subdevice = PCI_ANY_ID, class = 0, class_mask = 0;
@@ -225,10 +232,13 @@ const struct pci_device_id *pci_match_id(const struct pci_device_id *ids,
 	if (ids) {
 		while (ids->vendor || ids->subvendor || ids->class_mask) {
 			if (pci_match_one_device(ids, dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ids;
+}
 			ids++;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(pci_match_id);
@@ -257,16 +267,21 @@ static const struct pci_device_id *pci_match_device(struct pci_driver *drv,
 
 	/* When driver_override is set, only bind to the matching driver */
 	if (dev->driver_override && strcmp(dev->driver_override, drv->name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/* Look at the dynamic ids first, before the static ones */
 	spin_lock(&drv->dynids.lock);
 	list_for_each_entry(dynid, &drv->dynids.list, node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pci_match_one_device(&dynid->id, dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			found_id = &dynid->id;
 			break;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&drv->dynids.lock);
 
 	if (!found_id)
@@ -274,8 +289,11 @@ static const struct pci_device_id *pci_match_device(struct pci_driver *drv,
 
 	/* driver_override will always match, send a dummy id */
 	if (!found_id && dev->driver_override)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		found_id = &pci_device_id_any;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return found_id;
 }
 
@@ -355,8 +373,11 @@ static int pci_call_probe(struct pci_driver *drv, struct pci_dev *dev,
 	else
 		cpu = cpumask_any_and(cpumask_of_node(node), cpu_online_mask);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cpu < nr_cpu_ids)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = work_on_cpu(cpu, local_pci_probe, &ddi);
+}
 	else
 		error = local_pci_probe(&ddi);
 
@@ -379,6 +400,7 @@ static int __pci_device_probe(struct pci_driver *drv, struct pci_dev *pci_dev)
 	int error = 0;
 
 	if (!pci_dev->driver && drv->probe) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENODEV;
 
 		id = pci_match_device(drv, pci_dev);
@@ -405,6 +427,7 @@ static inline bool pci_device_can_probe(struct pci_dev *pdev)
 #else
 static inline bool pci_device_can_probe(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 #endif
@@ -419,7 +442,9 @@ static int pci_device_probe(struct device *dev)
 
 	error = pcibios_alloc_irq(pci_dev);
 	if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	pci_dev_get(pci_dev);
 	if (pci_device_can_probe(pci_dev)) {
@@ -430,11 +455,13 @@ static int pci_device_probe(struct device *dev)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
 static int pci_device_remove(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	struct pci_driver *drv = pci_dev->driver;
 
@@ -473,6 +500,7 @@ static int pci_device_remove(struct device *dev)
 
 static void pci_device_shutdown(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	struct pci_driver *drv = pci_dev->driver;
 
@@ -502,6 +530,7 @@ static void pci_device_shutdown(struct device *dev)
  */
 static int pci_restore_standard_config(struct pci_dev *pci_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_update_current_state(pci_dev, PCI_UNKNOWN);
 
 	if (pci_dev->current_state != PCI_D0) {
@@ -521,6 +550,7 @@ static int pci_restore_standard_config(struct pci_dev *pci_dev)
 
 static void pci_pm_default_resume_early(struct pci_dev *pci_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_power_up(pci_dev);
 	pci_restore_state(pci_dev);
 	pci_pme_restore(pci_dev);
@@ -556,13 +586,16 @@ static int pci_pm_reenable_device(struct pci_dev *pci_dev)
 	 * again
 	 */
 	if (pci_dev->is_busmaster)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_set_master(pci_dev);
+}
 
 	return retval;
 }
 
 static int pci_legacy_suspend(struct device *dev, pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	struct pci_driver *drv = pci_dev->driver;
 
@@ -590,6 +623,7 @@ static int pci_legacy_suspend(struct device *dev, pm_message_t state)
 
 static int pci_legacy_suspend_late(struct device *dev, pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	struct pci_driver *drv = pci_dev->driver;
 
@@ -624,6 +658,7 @@ static int pci_legacy_suspend_late(struct device *dev, pm_message_t state)
 
 static int pci_legacy_resume_early(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	struct pci_driver *drv = pci_dev->driver;
 
@@ -633,6 +668,7 @@ static int pci_legacy_resume_early(struct device *dev)
 
 static int pci_legacy_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	struct pci_driver *drv = pci_dev->driver;
 
@@ -646,6 +682,7 @@ static int pci_legacy_resume(struct device *dev)
 
 static void pci_pm_default_resume(struct pci_dev *pci_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_fixup_device(pci_fixup_resume, pci_dev);
 	pci_enable_wake(pci_dev, PCI_D0, false);
 }
@@ -660,6 +697,7 @@ static void pci_pm_default_suspend(struct pci_dev *pci_dev)
 static bool pci_has_legacy_pm_support(struct pci_dev *pci_dev)
 {
 	struct pci_driver *drv = pci_dev->driver;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bool ret = drv && (drv->suspend || drv->suspend_late || drv->resume
 		|| drv->resume_early);
 
@@ -685,7 +723,9 @@ static int pci_pm_prepare(struct device *dev)
 	 * suspending their children in the next phase of device suspend.
 	 */
 	if (dev->power.ignore_children)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_runtime_resume(dev);
+}
 
 	if (drv && drv->pm && drv->pm->prepare) {
 		int error = drv->pm->prepare(dev);
@@ -697,6 +737,7 @@ static int pci_pm_prepare(struct device *dev)
 
 static void pci_pm_complete(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 
 	pci_dev_complete_resume(pci_dev);
@@ -723,6 +764,7 @@ static void pci_pm_complete(struct device *dev)
 
 static int pci_pm_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 
@@ -770,6 +812,7 @@ static int pci_pm_suspend(struct device *dev)
 
 static int pci_pm_suspend_noirq(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 
@@ -827,6 +870,7 @@ static int pci_pm_suspend_noirq(struct device *dev)
 
 static int pci_pm_resume_noirq(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	struct device_driver *drv = dev->driver;
 	int error = 0;
@@ -844,6 +888,7 @@ static int pci_pm_resume_noirq(struct device *dev)
 
 static int pci_pm_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 	int error = 0;
@@ -890,6 +935,7 @@ struct dev_pm_ops __weak pcibios_pm_ops;
 
 static int pci_pm_freeze(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 
@@ -927,6 +973,7 @@ static int pci_pm_freeze(struct device *dev)
 
 static int pci_pm_freeze_noirq(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	struct device_driver *drv = dev->driver;
 
@@ -955,6 +1002,7 @@ static int pci_pm_freeze_noirq(struct device *dev)
 
 static int pci_pm_thaw_noirq(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	struct device_driver *drv = dev->driver;
 	int error = 0;
@@ -984,6 +1032,7 @@ static int pci_pm_thaw_noirq(struct device *dev)
 
 static int pci_pm_thaw(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 	int error = 0;
@@ -1011,6 +1060,7 @@ static int pci_pm_thaw(struct device *dev)
 
 static int pci_pm_poweroff(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 
@@ -1046,6 +1096,7 @@ static int pci_pm_poweroff(struct device *dev)
 
 static int pci_pm_poweroff_noirq(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	struct device_driver *drv = dev->driver;
 
@@ -1086,6 +1137,7 @@ static int pci_pm_poweroff_noirq(struct device *dev)
 
 static int pci_pm_restore_noirq(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	struct device_driver *drv = dev->driver;
 	int error = 0;
@@ -1109,6 +1161,7 @@ static int pci_pm_restore_noirq(struct device *dev)
 
 static int pci_pm_restore(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 	int error = 0;
@@ -1158,6 +1211,7 @@ static int pci_pm_restore(struct device *dev)
 
 static int pci_pm_runtime_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 	pci_power_t prev = pci_dev->current_state;
@@ -1212,6 +1266,7 @@ static int pci_pm_runtime_suspend(struct device *dev)
 static int pci_pm_runtime_resume(struct device *dev)
 {
 	int rc;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 
@@ -1239,6 +1294,7 @@ static int pci_pm_runtime_resume(struct device *dev)
 
 static int pci_pm_runtime_idle(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 	int ret = 0;
@@ -1332,6 +1388,7 @@ EXPORT_SYMBOL(__pci_register_driver);
 
 void pci_unregister_driver(struct pci_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	driver_unregister(&drv->driver);
 	pci_free_dynids(drv);
 }
@@ -1350,6 +1407,7 @@ static struct pci_driver pci_compat_driver = {
  */
 struct pci_driver *pci_dev_driver(const struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->driver)
 		return dev->driver;
 	else {
@@ -1378,12 +1436,16 @@ static int pci_bus_match(struct device *dev, struct device_driver *drv)
 	const struct pci_device_id *found_id;
 
 	if (!pci_dev->match_driver)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	pci_drv = to_pci_driver(drv);
 	found_id = pci_match_device(pci_drv, pci_dev);
 	if (found_id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	return 0;
 }
@@ -1427,22 +1489,31 @@ static int pci_uevent(struct device *dev, struct kobj_uevent_env *env)
 	struct pci_dev *pdev;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pdev = to_pci_dev(dev);
 
 	if (add_uevent_var(env, "PCI_CLASS=%04X", pdev->class))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (add_uevent_var(env, "PCI_ID=%04X:%04X", pdev->vendor, pdev->device))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (add_uevent_var(env, "PCI_SUBSYS_ID=%04X:%04X", pdev->subsystem_vendor,
 			   pdev->subsystem_device))
 		return -ENOMEM;
 
 	if (add_uevent_var(env, "PCI_SLOT_NAME=%s", pci_name(pdev)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (add_uevent_var(env, "MODALIAS=pci:v%08Xd%08Xsv%08Xsd%08Xbc%02Xsc%02Xi%02X",
 			   pdev->vendor, pdev->device,
@@ -1456,6 +1527,7 @@ static int pci_uevent(struct device *dev, struct kobj_uevent_env *env)
 
 static int pci_bus_num_vf(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_num_vf(to_pci_dev(dev));
 }
 
diff --git a/drivers/pci/pci-label.c b/drivers/pci/pci-label.c
index a961a71..db00bb8 100644
--- a/drivers/pci/pci-label.c
+++ b/drivers/pci/pci-label.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * Purpose: Export the firmware instance and label associated with
@@ -55,23 +57,33 @@ static size_t find_smbios_instance_string(struct pci_dev *pdev, char *buf,
 	dmi = NULL;
 	while ((dmi = dmi_find_device(DMI_DEV_TYPE_DEV_ONBOARD,
 				      NULL, dmi)) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		donboard = dmi->device_data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (donboard && donboard->segment == domain_nr &&
 				donboard->bus == bus &&
 				donboard->devfn == devfn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (buf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (attribute == SMBIOS_ATTR_INSTANCE_SHOW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return scnprintf(buf, PAGE_SIZE,
 							 "%d\n",
 							 donboard->instance);
+}
 				else if (attribute == SMBIOS_ATTR_LABEL_SHOW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return scnprintf(buf, PAGE_SIZE,
 							 "%s\n",
 							 dmi->name);
+}
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return strlen(dmi->name);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -92,6 +104,7 @@ static ssize_t smbioslabel_show(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
 	struct pci_dev *pdev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pdev = to_pci_dev(dev);
 
 	return find_smbios_instance_string(pdev, buf,
@@ -102,6 +115,7 @@ static ssize_t smbiosinstance_show(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
 	struct pci_dev *pdev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pdev = to_pci_dev(dev);
 
 	return find_smbios_instance_string(pdev, buf,
@@ -136,6 +150,7 @@ static int pci_create_smbiosname_file(struct pci_dev *pdev)
 
 static void pci_remove_smbiosname_file(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_remove_group(&pdev->dev.kobj, &smbios_attr_group);
 }
 #else
@@ -172,6 +187,7 @@ static int dsm_get_label(struct device *dev, char *buf,
 	union acpi_object *obj, *tmp;
 	int len = -1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	handle = ACPI_HANDLE(dev);
 	if (!handle)
 		return -1;
@@ -214,7 +230,9 @@ static bool device_has_dsm(struct device *dev)
 
 	handle = ACPI_HANDLE(dev);
 	if (!handle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	return !!acpi_check_dsm(handle, &pci_acpi_dsm_guid, 0x2,
 				1 << DEVICE_LABEL_DSM);
@@ -228,7 +246,9 @@ static umode_t acpi_index_string_exist(struct kobject *kobj,
 	dev = kobj_to_dev(kobj);
 
 	if (device_has_dsm(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return S_IRUGO;
+}
 
 	return 0;
 }
@@ -236,12 +256,14 @@ static umode_t acpi_index_string_exist(struct kobject *kobj,
 static ssize_t acpilabel_show(struct device *dev,
 			      struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dsm_get_label(dev, buf, ACPI_ATTR_LABEL_SHOW);
 }
 
 static ssize_t acpiindex_show(struct device *dev,
 			      struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dsm_get_label(dev, buf, ACPI_ATTR_INDEX_SHOW);
 }
 
@@ -268,11 +290,13 @@ static const struct attribute_group acpi_attr_group = {
 
 static int pci_create_acpi_index_label_files(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sysfs_create_group(&pdev->dev.kobj, &acpi_attr_group);
 }
 
 static int pci_remove_acpi_index_label_files(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_remove_group(&pdev->dev.kobj, &acpi_attr_group);
 	return 0;
 }
@@ -296,13 +320,16 @@ static inline bool device_has_dsm(struct device *dev)
 void pci_create_firmware_label_files(struct pci_dev *pdev)
 {
 	if (device_has_dsm(&pdev->dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_create_acpi_index_label_files(pdev);
+}
 	else
 		pci_create_smbiosname_file(pdev);
 }
 
 void pci_remove_firmware_label_files(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (device_has_dsm(&pdev->dev))
 		pci_remove_acpi_index_label_files(pdev);
 	else
diff --git a/drivers/pci/pci-stub.c b/drivers/pci/pci-stub.c
index 886fb35..90a8baf 100644
--- a/drivers/pci/pci-stub.c
+++ b/drivers/pci/pci-stub.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* pci-stub - simple stub driver to reserve a pci device
  *
  * Copyright (C) 2008 Red Hat, Inc.
diff --git a/drivers/pci/pci-sysfs.c b/drivers/pci/pci-sysfs.c
index 00fa427..3483f50 100644
--- a/drivers/pci/pci-sysfs.c
+++ b/drivers/pci/pci-sysfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * drivers/pci/pci-sysfs.c
@@ -59,6 +61,7 @@ static ssize_t broken_parity_status_show(struct device *dev,
 					 struct device_attribute *attr,
 					 char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	return sprintf(buf, "%u\n", pdev->broken_parity_status);
 }
@@ -67,6 +70,7 @@ static ssize_t broken_parity_status_store(struct device *dev,
 					  struct device_attribute *attr,
 					  const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	unsigned long val;
 
@@ -96,6 +100,7 @@ static ssize_t pci_dev_show_local_cpu(struct device *dev, bool list,
 static ssize_t local_cpus_show(struct device *dev,
 			       struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_dev_show_local_cpu(dev, false, attr, buf);
 }
 static DEVICE_ATTR_RO(local_cpus);
@@ -103,6 +108,7 @@ static DEVICE_ATTR_RO(local_cpus);
 static ssize_t local_cpulist_show(struct device *dev,
 				  struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_dev_show_local_cpu(dev, true, attr, buf);
 }
 static DEVICE_ATTR_RO(local_cpulist);
@@ -113,6 +119,7 @@ static DEVICE_ATTR_RO(local_cpulist);
 static ssize_t cpuaffinity_show(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct cpumask *cpumask = cpumask_of_pcibus(to_pci_bus(dev));
 
 	return cpumap_print_to_pagebuf(false, buf, cpumask);
@@ -122,6 +129,7 @@ static DEVICE_ATTR_RO(cpuaffinity);
 static ssize_t cpulistaffinity_show(struct device *dev,
 				    struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct cpumask *cpumask = cpumask_of_pcibus(to_pci_bus(dev));
 
 	return cpumap_print_to_pagebuf(true, buf, cpumask);
@@ -132,6 +140,7 @@ static DEVICE_ATTR_RO(cpulistaffinity);
 static ssize_t resource_show(struct device *dev, struct device_attribute *attr,
 			     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	char *str = buf;
 	int i;
@@ -158,6 +167,7 @@ static DEVICE_ATTR_RO(resource);
 static ssize_t max_link_speed_show(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	u32 linkcap;
 	int err;
@@ -188,6 +198,7 @@ static DEVICE_ATTR_RO(max_link_speed);
 static ssize_t max_link_width_show(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	u32 linkcap;
 	int err;
@@ -203,6 +214,7 @@ static DEVICE_ATTR_RO(max_link_width);
 static ssize_t current_link_speed_show(struct device *dev,
 				       struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	u16 linkstat;
 	int err;
@@ -233,6 +245,7 @@ static DEVICE_ATTR_RO(current_link_speed);
 static ssize_t current_link_width_show(struct device *dev,
 				       struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	u16 linkstat;
 	int err;
@@ -250,6 +263,7 @@ static ssize_t secondary_bus_number_show(struct device *dev,
 					 struct device_attribute *attr,
 					 char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	u8 sec_bus;
 	int err;
@@ -266,6 +280,7 @@ static ssize_t subordinate_bus_number_show(struct device *dev,
 					   struct device_attribute *attr,
 					   char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 	u8 sub_bus;
 	int err;
@@ -281,6 +296,7 @@ static DEVICE_ATTR_RO(subordinate_bus_number);
 static ssize_t modalias_show(struct device *dev, struct device_attribute *attr,
 			     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(dev);
 
 	return sprintf(buf, "pci:v%08Xd%08Xsv%08Xsd%08Xbc%02Xsc%02Xi%02X\n",
@@ -294,6 +310,7 @@ static DEVICE_ATTR_RO(modalias);
 static ssize_t enable_store(struct device *dev, struct device_attribute *attr,
 			     const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	unsigned long val;
 	ssize_t result = kstrtoul(buf, 0, &val);
@@ -321,6 +338,7 @@ static ssize_t enable_show(struct device *dev, struct device_attribute *attr,
 {
 	struct pci_dev *pdev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pdev = to_pci_dev(dev);
 	return sprintf(buf, "%u\n", atomic_read(&pdev->enable_cnt));
 }
@@ -331,6 +349,7 @@ static ssize_t numa_node_store(struct device *dev,
 			       struct device_attribute *attr, const char *buf,
 			       size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	int node, ret;
 
@@ -358,6 +377,7 @@ static ssize_t numa_node_store(struct device *dev,
 static ssize_t numa_node_show(struct device *dev, struct device_attribute *attr,
 			      char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", dev->numa_node);
 }
 static DEVICE_ATTR_RW(numa_node);
@@ -366,6 +386,7 @@ static DEVICE_ATTR_RW(numa_node);
 static ssize_t dma_mask_bits_show(struct device *dev,
 				  struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 
 	return sprintf(buf, "%d\n", fls64(pdev->dma_mask));
@@ -376,6 +397,7 @@ static ssize_t consistent_dma_mask_bits_show(struct device *dev,
 					     struct device_attribute *attr,
 					     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", fls64(dev->coherent_dma_mask));
 }
 static DEVICE_ATTR_RO(consistent_dma_mask_bits);
@@ -383,6 +405,7 @@ static DEVICE_ATTR_RO(consistent_dma_mask_bits);
 static ssize_t msi_bus_show(struct device *dev, struct device_attribute *attr,
 			    char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	struct pci_bus *subordinate = pdev->subordinate;
 
@@ -394,6 +417,7 @@ static ssize_t msi_bus_show(struct device *dev, struct device_attribute *attr,
 static ssize_t msi_bus_store(struct device *dev, struct device_attribute *attr,
 			     const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	struct pci_bus *subordinate = pdev->subordinate;
 	unsigned long val;
@@ -434,7 +458,9 @@ static ssize_t bus_rescan_store(struct bus_type *bus, const char *buf,
 	struct pci_bus *b = NULL;
 
 	if (kstrtoul(buf, 0, &val) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (val) {
 		pci_lock_rescan_remove();
@@ -465,6 +491,7 @@ static ssize_t dev_rescan_store(struct device *dev,
 				size_t count)
 {
 	unsigned long val;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 
 	if (kstrtoul(buf, 0, &val) < 0)
@@ -487,7 +514,9 @@ static ssize_t remove_store(struct device *dev, struct device_attribute *attr,
 	unsigned long val;
 
 	if (kstrtoul(buf, 0, &val) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (val && device_remove_file_self(dev, attr))
 		pci_stop_and_remove_bus_device_locked(to_pci_dev(dev));
@@ -502,6 +531,7 @@ static ssize_t dev_bus_rescan_store(struct device *dev,
 				    const char *buf, size_t count)
 {
 	unsigned long val;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_bus *bus = to_pci_bus(dev);
 
 	if (kstrtoul(buf, 0, &val) < 0)
@@ -524,6 +554,7 @@ static ssize_t d3cold_allowed_store(struct device *dev,
 				    struct device_attribute *attr,
 				    const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	unsigned long val;
 
@@ -544,6 +575,7 @@ static ssize_t d3cold_allowed_store(struct device *dev,
 static ssize_t d3cold_allowed_show(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	return sprintf(buf, "%u\n", pdev->d3cold_allowed);
 }
@@ -686,6 +718,7 @@ static ssize_t driver_override_store(struct device *dev,
 				     struct device_attribute *attr,
 				     const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	char *driver_override, *old, *cp;
 
@@ -719,6 +752,7 @@ static ssize_t driver_override_store(struct device *dev,
 static ssize_t driver_override_show(struct device *dev,
 				    struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	ssize_t len;
 
@@ -792,6 +826,7 @@ const struct attribute_group *pcibus_groups[] = {
 static ssize_t boot_vga_show(struct device *dev, struct device_attribute *attr,
 			     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	struct pci_dev *vga_dev = vga_default_device();
 
@@ -808,6 +843,7 @@ static ssize_t pci_read_config(struct file *filp, struct kobject *kobj,
 			       struct bin_attribute *bin_attr, char *buf,
 			       loff_t off, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev = to_pci_dev(kobj_to_dev(kobj));
 	unsigned int size = 64;
 	loff_t init_off = off;
@@ -884,6 +920,7 @@ static ssize_t pci_write_config(struct file *filp, struct kobject *kobj,
 				struct bin_attribute *bin_attr, char *buf,
 				loff_t off, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev = to_pci_dev(kobj_to_dev(kobj));
 	unsigned int size = count;
 	loff_t init_off = off;
@@ -945,6 +982,7 @@ static ssize_t read_vpd_attr(struct file *filp, struct kobject *kobj,
 			     struct bin_attribute *bin_attr, char *buf,
 			     loff_t off, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev = to_pci_dev(kobj_to_dev(kobj));
 
 	if (bin_attr->size > 0) {
@@ -961,6 +999,7 @@ static ssize_t write_vpd_attr(struct file *filp, struct kobject *kobj,
 			      struct bin_attribute *bin_attr, char *buf,
 			      loff_t off, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev = to_pci_dev(kobj_to_dev(kobj));
 
 	if (bin_attr->size > 0) {
@@ -1150,6 +1189,7 @@ int pci_mmap_fits(struct pci_dev *pdev, int resno, struct vm_area_struct *vma,
 	unsigned long nr, start, size;
 	resource_size_t pci_start = 0, pci_end;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pci_resource_len(pdev, resno) == 0)
 		return 0;
 	nr = vma_pages(vma);
@@ -1178,6 +1218,7 @@ int pci_mmap_fits(struct pci_dev *pdev, int resno, struct vm_area_struct *vma,
 static int pci_mmap_resource(struct kobject *kobj, struct bin_attribute *attr,
 			     struct vm_area_struct *vma, int write_combine)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(kobj_to_dev(kobj));
 	int bar = (unsigned long)attr->private;
 	enum pci_mmap_state mmap_type;
@@ -1203,6 +1244,7 @@ static int pci_mmap_resource_uc(struct file *filp, struct kobject *kobj,
 				struct bin_attribute *attr,
 				struct vm_area_struct *vma)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_mmap_resource(kobj, attr, vma, 0);
 }
 
@@ -1210,6 +1252,7 @@ static int pci_mmap_resource_wc(struct file *filp, struct kobject *kobj,
 				struct bin_attribute *attr,
 				struct vm_area_struct *vma)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_mmap_resource(kobj, attr, vma, 1);
 }
 
@@ -1217,6 +1260,7 @@ static ssize_t pci_resource_io(struct file *filp, struct kobject *kobj,
 			       struct bin_attribute *attr, char *buf,
 			       loff_t off, size_t count, bool write)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(kobj_to_dev(kobj));
 	int bar = (unsigned long)attr->private;
 	unsigned long port = off;
@@ -1256,6 +1300,7 @@ static ssize_t pci_read_resource_io(struct file *filp, struct kobject *kobj,
 				    struct bin_attribute *attr, char *buf,
 				    loff_t off, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_resource_io(filp, kobj, attr, buf, off, count, false);
 }
 
@@ -1263,6 +1308,7 @@ static ssize_t pci_write_resource_io(struct file *filp, struct kobject *kobj,
 				     struct bin_attribute *attr, char *buf,
 				     loff_t off, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_resource_io(filp, kobj, attr, buf, off, count, true);
 }
 
@@ -1277,6 +1323,7 @@ static void pci_remove_resource_files(struct pci_dev *pdev)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < PCI_ROM_RESOURCE; i++) {
 		struct bin_attribute *res_attr;
 
@@ -1304,10 +1351,13 @@ static int pci_create_attr(struct pci_dev *pdev, int num, int write_combine)
 
 	res_attr = kzalloc(sizeof(*res_attr) + name_len, GFP_ATOMIC);
 	if (!res_attr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	res_attr_name = (char *)(res_attr + 1);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_bin_attr_init(res_attr);
 	if (write_combine) {
 		pdev->res_attr_wc[num] = res_attr;
@@ -1320,7 +1370,9 @@ static int pci_create_attr(struct pci_dev *pdev, int num, int write_combine)
 			res_attr->read = pci_read_resource_io;
 			res_attr->write = pci_write_resource_io;
 			if (arch_can_pci_mmap_io())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				res_attr->mmap = pci_mmap_resource_uc;
+}
 		} else {
 			res_attr->mmap = pci_mmap_resource_uc;
 		}
@@ -1331,8 +1383,11 @@ static int pci_create_attr(struct pci_dev *pdev, int num, int write_combine)
 	res_attr->private = (void *)(unsigned long)num;
 	retval = sysfs_create_bin_file(&pdev->dev.kobj, res_attr);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(res_attr);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 
@@ -1360,10 +1415,12 @@ static int pci_create_resource_files(struct pci_dev *pdev)
 		    pdev->resource[i].flags & IORESOURCE_PREFETCH)
 			retval = pci_create_attr(pdev, i, 1);
 		if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pci_remove_resource_files(pdev);
 			return retval;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 #else /* !HAVE_PCI_MMAP */
@@ -1459,6 +1516,7 @@ static const struct bin_attribute pcie_config_attr = {
 static ssize_t reset_store(struct device *dev, struct device_attribute *attr,
 			   const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	unsigned long val;
 	ssize_t result = kstrtoul(buf, 0, &val);
@@ -1485,11 +1543,16 @@ static int pci_create_capabilities_sysfs(struct pci_dev *dev)
 
 	/* If the device has VPD, try to expose it in sysfs. */
 	if (dev->vpd) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		attr = kzalloc(sizeof(*attr), GFP_ATOMIC);
 		if (!attr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_bin_attr_init(attr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		attr->size = 0;
 		attr->attr.name = "vpd";
 		attr->attr.mode = S_IRUSR | S_IWUSR;
@@ -1497,9 +1560,11 @@ static int pci_create_capabilities_sysfs(struct pci_dev *dev)
 		attr->write = write_vpd_attr;
 		retval = sysfs_create_bin_file(&dev->dev.kobj, attr);
 		if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(attr);
 			return retval;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->vpd->attr = attr;
 	}
 
@@ -1507,20 +1572,26 @@ static int pci_create_capabilities_sysfs(struct pci_dev *dev)
 	pcie_aspm_create_sysfs_dev_files(dev);
 
 	if (!pci_probe_reset_function(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = device_create_file(&dev->dev, &reset_attr);
 		if (retval)
 			goto error;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->reset_fn = 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 error:
 	pcie_aspm_remove_sysfs_dev_files(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->vpd && dev->vpd->attr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_remove_bin_file(&dev->dev.kobj, dev->vpd->attr);
 		kfree(dev->vpd->attr);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 
@@ -1531,10 +1602,14 @@ int __must_check pci_create_sysfs_dev_files(struct pci_dev *pdev)
 	struct bin_attribute *attr;
 
 	if (!sysfs_initialized)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;
+}
 
 	if (pdev->cfg_size > PCI_CFG_SPACE_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = sysfs_create_bin_file(&pdev->dev.kobj, &pcie_config_attr);
+}
 	else
 		retval = sysfs_create_bin_file(&pdev->dev.kobj, &pci_config_attr);
 	if (retval)
@@ -1549,9 +1624,11 @@ int __must_check pci_create_sysfs_dev_files(struct pci_dev *pdev)
 	if (rom_size) {
 		attr = kzalloc(sizeof(*attr), GFP_ATOMIC);
 		if (!attr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -ENOMEM;
 			goto err_resource_files;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_bin_attr_init(attr);
 		attr->size = rom_size;
 		attr->attr.name = "rom";
@@ -1560,6 +1637,7 @@ int __must_check pci_create_sysfs_dev_files(struct pci_dev *pdev)
 		attr->write = pci_write_rom;
 		retval = sysfs_create_bin_file(&pdev->dev.kobj, attr);
 		if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(attr);
 			goto err_resource_files;
 		}
@@ -1577,6 +1655,7 @@ int __must_check pci_create_sysfs_dev_files(struct pci_dev *pdev)
 
 err_rom_file:
 	if (pdev->rom_attr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_remove_bin_file(&pdev->dev.kobj, pdev->rom_attr);
 		kfree(pdev->rom_attr);
 		pdev->rom_attr = NULL;
@@ -1585,7 +1664,9 @@ int __must_check pci_create_sysfs_dev_files(struct pci_dev *pdev)
 	pci_remove_resource_files(pdev);
 err_config_file:
 	if (pdev->cfg_size > PCI_CFG_SPACE_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_remove_bin_file(&pdev->dev.kobj, &pcie_config_attr);
+}
 	else
 		sysfs_remove_bin_file(&pdev->dev.kobj, &pci_config_attr);
 err:
@@ -1594,6 +1675,7 @@ int __must_check pci_create_sysfs_dev_files(struct pci_dev *pdev)
 
 static void pci_remove_capabilities_sysfs(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->vpd && dev->vpd->attr) {
 		sysfs_remove_bin_file(&dev->dev.kobj, dev->vpd->attr);
 		kfree(dev->vpd->attr);
@@ -1614,6 +1696,7 @@ static void pci_remove_capabilities_sysfs(struct pci_dev *dev)
  */
 void pci_remove_sysfs_dev_files(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!sysfs_initialized)
 		return;
 
@@ -1644,11 +1727,13 @@ static int __init pci_sysfs_init(void)
 	for_each_pci_dev(pdev) {
 		retval = pci_create_sysfs_dev_files(pdev);
 		if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pci_dev_put(pdev);
 			return retval;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 late_initcall(pci_sysfs_init);
@@ -1661,12 +1746,16 @@ static struct attribute *pci_dev_dev_attrs[] = {
 static umode_t pci_dev_attrs_are_visible(struct kobject *kobj,
 					 struct attribute *a, int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = kobj_to_dev(kobj);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 
 	if (a == &vga_attr.attr)
 		if ((pdev->class >> 8) != PCI_CLASS_DISPLAY_VGA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
 	return a->mode;
 }
@@ -1680,11 +1769,15 @@ static struct attribute *pci_dev_hp_attrs[] = {
 static umode_t pci_dev_hp_attrs_are_visible(struct kobject *kobj,
 					    struct attribute *a, int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = kobj_to_dev(kobj);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 
 	if (pdev->is_virtfn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return a->mode;
 }
@@ -1692,24 +1785,34 @@ static umode_t pci_dev_hp_attrs_are_visible(struct kobject *kobj,
 static umode_t pci_bridge_attrs_are_visible(struct kobject *kobj,
 					    struct attribute *a, int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = kobj_to_dev(kobj);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 
 	if (pci_is_bridge(pdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return a->mode;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static umode_t pcie_dev_attrs_are_visible(struct kobject *kobj,
 					  struct attribute *a, int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = kobj_to_dev(kobj);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 
 	if (pci_is_pcie(pdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return a->mode;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index 74f1c57..8453aa8 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	PCI Bus Services, see include/linux/pci.h for further explanation.
  *
@@ -65,7 +67,9 @@ static void pci_dev_d3_sleep(struct pci_dev *dev)
 	unsigned int delay = dev->d3_delay;
 
 	if (delay < pci_pm_d3_delay)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		delay = pci_pm_d3_delay;
+}
 
 	if (delay)
 		msleep(delay);
@@ -117,6 +121,7 @@ static bool pci_bridge_d3_force;
 
 static int __init pcie_port_pm_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!strcmp(str, "off"))
 		pci_bridge_d3_disable = true;
 	else if (!strcmp(str, "force"))
@@ -138,6 +143,7 @@ unsigned char pci_bus_max_busnr(struct pci_bus *bus)
 	unsigned char max, n;
 
 	max = bus->busn_res.end;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(tmp, &bus->children, node) {
 		n = pci_bus_max_busnr(tmp);
 		if (n > max)
@@ -200,6 +206,7 @@ static int __pci_find_next_cap_ttl(struct pci_bus *bus, unsigned int devfn,
 			return pos;
 		pos = (ent >> 8);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -213,6 +220,7 @@ static int __pci_find_next_cap(struct pci_bus *bus, unsigned int devfn,
 
 int pci_find_next_capability(struct pci_dev *dev, u8 pos, int cap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __pci_find_next_cap(dev->bus, dev->devfn,
 				   pos + PCI_CAP_LIST_NEXT, cap);
 }
@@ -225,7 +233,9 @@ static int __pci_bus_find_cap_start(struct pci_bus *bus,
 
 	pci_bus_read_config_word(bus, devfn, PCI_STATUS, &status);
 	if (!(status & PCI_STATUS_CAP_LIST))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	switch (hdr_type) {
 	case PCI_HEADER_TYPE_NORMAL:
@@ -235,6 +245,7 @@ static int __pci_bus_find_cap_start(struct pci_bus *bus,
 		return PCI_CB_CAPABILITY_LIST;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -291,7 +302,9 @@ int pci_bus_find_capability(struct pci_bus *bus, unsigned int devfn, int cap)
 
 	pos = __pci_bus_find_cap_start(bus, devfn, hdr_type & 0x7f);
 	if (pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pos = __pci_find_next_cap(bus, devfn, pos, cap);
+}
 
 	return pos;
 }
@@ -318,33 +331,50 @@ int pci_find_next_ext_capability(struct pci_dev *dev, int start, int cap)
 	ttl = (PCI_CFG_SPACE_EXP_SIZE - PCI_CFG_SPACE_SIZE) / 8;
 
 	if (dev->cfg_size <= PCI_CFG_SPACE_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (start)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pos = start;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pci_read_config_dword(dev, pos, &header) != PCIBIOS_SUCCESSFUL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * If we have no capabilities, this is indicated by cap ID,
 	 * cap version and next pointer all being 0.
 	 */
 	if (header == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (ttl-- > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (PCI_EXT_CAP_ID(header) == cap && pos != start)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return pos;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pos = PCI_EXT_CAP_NEXT(header);
 		if (pos < PCI_CFG_SPACE_SIZE)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pci_read_config_dword(dev, pos, &header) != PCIBIOS_SUCCESSFUL)
 			break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL_GPL(pci_find_next_ext_capability);
@@ -374,6 +404,7 @@ static int __pci_find_next_ht_cap(struct pci_dev *dev, int pos, int ht_cap)
 	int rc, ttl = PCI_FIND_CAP_TTL;
 	u8 cap, mask;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ht_cap == HT_CAPTYPE_SLAVE || ht_cap == HT_CAPTYPE_HOST)
 		mask = HT_3BIT_CAP_MASK;
 	else
@@ -411,6 +442,7 @@ static int __pci_find_next_ht_cap(struct pci_dev *dev, int pos, int ht_cap)
  */
 int pci_find_next_ht_capability(struct pci_dev *dev, int pos, int ht_cap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __pci_find_next_ht_cap(dev, pos + PCI_CAP_LIST_NEXT, ht_cap);
 }
 EXPORT_SYMBOL_GPL(pci_find_next_ht_capability);
@@ -432,7 +464,9 @@ int pci_find_ht_capability(struct pci_dev *dev, int ht_cap)
 
 	pos = __pci_bus_find_cap_start(dev->bus, dev->devfn, dev->hdr_type);
 	if (pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pos = __pci_find_next_ht_cap(dev, pos, ht_cap);
+}
 
 	return pos;
 }
@@ -477,6 +511,7 @@ struct resource *pci_find_parent_resource(const struct pci_dev *dev,
 			return r;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(pci_find_parent_resource);
@@ -494,6 +529,7 @@ struct resource *pci_find_resource(struct pci_dev *dev, struct resource *res)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < PCI_ROM_RESOURCE; i++) {
 		struct resource *r = &dev->resource[i];
 
@@ -517,6 +553,7 @@ struct pci_dev *pci_find_pcie_root_port(struct pci_dev *dev)
 	struct pci_dev *bridge, *highest_pcie_bridge = dev;
 
 	bridge = pci_upstream_bridge(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (bridge && pci_is_pcie(bridge)) {
 		highest_pcie_bridge = bridge;
 		bridge = pci_upstream_bridge(bridge);
@@ -566,6 +603,7 @@ static void pci_restore_bars(struct pci_dev *dev)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < PCI_BRIDGE_RESOURCES; i++)
 		pci_update_resource(dev, i);
 }
@@ -589,28 +627,33 @@ static inline bool platform_pci_power_manageable(struct pci_dev *dev)
 static inline int platform_pci_set_power_state(struct pci_dev *dev,
 					       pci_power_t t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_platform_pm ? pci_platform_pm->set_state(dev, t) : -ENOSYS;
 }
 
 static inline pci_power_t platform_pci_get_power_state(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_platform_pm ? pci_platform_pm->get_state(dev) : PCI_UNKNOWN;
 }
 
 static inline pci_power_t platform_pci_choose_state(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_platform_pm ?
 			pci_platform_pm->choose_state(dev) : PCI_POWER_ERROR;
 }
 
 static inline int platform_pci_set_wakeup(struct pci_dev *dev, bool enable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_platform_pm ?
 			pci_platform_pm->set_wakeup(dev, enable) : -ENODEV;
 }
 
 static inline bool platform_pci_need_resume(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_platform_pm ? pci_platform_pm->need_resume(dev) : false;
 }
 
@@ -634,13 +677,21 @@ static int pci_raw_set_power_state(struct pci_dev *dev, pci_power_t state)
 
 	/* Check if we're already there */
 	if (dev->current_state == state)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev->pm_cap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (state < PCI_D0 || state > PCI_D3hot)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* Validate current state:
 	 * Can enter D0 from any state, but if we can only go deeper
@@ -648,6 +699,7 @@ static int pci_raw_set_power_state(struct pci_dev *dev, pci_power_t state)
 	 */
 	if (state != PCI_D0 && dev->current_state <= PCI_D3cold
 	    && dev->current_state > state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&dev->dev, "invalid power transition (from state %d to %d)\n",
 			dev->current_state, state);
 		return -EINVAL;
@@ -658,6 +710,7 @@ static int pci_raw_set_power_state(struct pci_dev *dev, pci_power_t state)
 	   || (state == PCI_D2 && !dev->d2_support))
 		return -EIO;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_read_config_word(dev, dev->pm_cap + PCI_PM_CTRL, &pmcsr);
 
 	/* If we're (effectively) in D3, force entire word to 0.
@@ -689,15 +742,24 @@ static int pci_raw_set_power_state(struct pci_dev *dev, pci_power_t state)
 	/* Mandatory power management transition delays */
 	/* see PCI PM 1.1 5.6.1 table 18 */
 	if (state == PCI_D3hot || dev->current_state == PCI_D3hot)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_dev_d3_sleep(dev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (state == PCI_D2 || dev->current_state == PCI_D2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		udelay(PCI_PM_D2_DELAY);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_read_config_word(dev, dev->pm_cap + PCI_PM_CTRL, &pmcsr);
 	dev->current_state = (pmcsr & PCI_PM_CTRL_STATE_MASK);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->current_state != state && printk_ratelimit())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, "Refused to change power state, currently in D%d\n",
 			 dev->current_state);
+}
 
 	/*
 	 * According to section 5.4.1 of the "PCI BUS POWER MANAGEMENT
@@ -713,11 +775,17 @@ static int pci_raw_set_power_state(struct pci_dev *dev, pci_power_t state)
 	 * accessible to its driver.
 	 */
 	if (need_restore)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_restore_bars(dev);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->bus->self)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcie_aspm_pm_state_change(dev->bus->self);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -735,6 +803,7 @@ static int pci_raw_set_power_state(struct pci_dev *dev, pci_power_t state)
  */
 void pci_update_current_state(struct pci_dev *dev, pci_power_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (platform_pci_get_power_state(dev) == PCI_D3cold ||
 	    !pci_device_is_present(dev)) {
 		dev->current_state = PCI_D3cold;
@@ -754,6 +823,7 @@ void pci_update_current_state(struct pci_dev *dev, pci_power_t state)
  */
 void pci_power_up(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (platform_pci_power_manageable(dev))
 		platform_pci_set_power_state(dev, PCI_D0);
 
@@ -771,11 +841,16 @@ static int pci_platform_power_transition(struct pci_dev *dev, pci_power_t state)
 	int error;
 
 	if (platform_pci_power_manageable(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = platform_pci_set_power_state(dev, state);
 		if (!error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pci_update_current_state(dev, state);
+}
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENODEV;
+}
 
 	if (error && !dev->pm_cap) /* Fall back to PCI_D0 */
 		dev->current_state = PCI_D0;
@@ -790,6 +865,7 @@ static int pci_platform_power_transition(struct pci_dev *dev, pci_power_t state)
  */
 static int pci_wakeup(struct pci_dev *pci_dev, void *ign)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_wakeup_event(pci_dev);
 	pm_request_resume(&pci_dev->dev);
 	return 0;
@@ -801,6 +877,7 @@ static int pci_wakeup(struct pci_dev *pci_dev, void *ign)
  */
 static void pci_wakeup_bus(struct pci_bus *bus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (bus)
 		pci_walk_bus(bus, pci_wakeup, NULL);
 }
@@ -822,8 +899,11 @@ static void __pci_start_power_transition(struct pci_dev *dev, pci_power_t state)
 		 * because have already delayed for the bridge.
 		 */
 		if (dev->runtime_d3cold) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (dev->d3cold_delay)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				msleep(dev->d3cold_delay);
+}
 			/*
 			 * When powering on a bridge from D3cold, the
 			 * whole hierarchy may be powered on into
@@ -855,6 +935,7 @@ static int __pci_dev_set_current_state(struct pci_dev *dev, void *data)
  */
 static void __pci_bus_set_current_state(struct pci_bus *bus, pci_power_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (bus)
 		pci_walk_bus(bus, __pci_dev_set_current_state, &state);
 }
@@ -871,11 +952,17 @@ int __pci_complete_power_transition(struct pci_dev *dev, pci_power_t state)
 	int ret;
 
 	if (state <= PCI_D0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = pci_platform_power_transition(dev, state);
 	/* Power off the bridge may power off the whole hierarchy */
 	if (!ret && state == PCI_D3cold)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__pci_bus_set_current_state(dev->subordinate, PCI_D3cold);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(__pci_complete_power_transition);
@@ -903,9 +990,13 @@ int pci_set_power_state(struct pci_dev *dev, pci_power_t state)
 
 	/* bound the state we're entering */
 	if (state > PCI_D3cold)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		state = PCI_D3cold;
+}
 	else if (state < PCI_D0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		state = PCI_D0;
+}
 	else if ((state == PCI_D1 || state == PCI_D2) && pci_no_d1d2(dev))
 		/*
 		 * If the device or the parent bridge do not support PCI PM,
@@ -916,14 +1007,18 @@ int pci_set_power_state(struct pci_dev *dev, pci_power_t state)
 
 	/* Check if we're already there */
 	if (dev->current_state == state)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	__pci_start_power_transition(dev, state);
 
 	/* This device is quirked not to be put into D3, so
 	   don't put it in D3 */
 	if (state >= PCI_D3hot && (dev->dev_flags & PCI_DEV_FLAGS_NO_D3))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * To put device in D3cold, we put device into D3hot in native
@@ -933,8 +1028,11 @@ int pci_set_power_state(struct pci_dev *dev, pci_power_t state)
 					PCI_D3hot : state);
 
 	if (!__pci_complete_power_transition(dev, state))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 EXPORT_SYMBOL(pci_set_power_state);
@@ -954,7 +1052,9 @@ pci_power_t pci_choose_state(struct pci_dev *dev, pm_message_t state)
 	pci_power_t ret;
 
 	if (!dev->pm_cap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PCI_D0;
+}
 
 	ret = platform_pci_choose_state(dev);
 	if (ret != PCI_POWER_ERROR)
@@ -985,6 +1085,7 @@ static struct pci_cap_saved_state *_pci_find_saved_cap(struct pci_dev *pci_dev,
 {
 	struct pci_cap_saved_state *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry(tmp, &pci_dev->saved_cap_space, next) {
 		if (tmp->cap.cap_extended == extended && tmp->cap.cap_nr == cap)
 			return tmp;
@@ -994,11 +1095,13 @@ static struct pci_cap_saved_state *_pci_find_saved_cap(struct pci_dev *pci_dev,
 
 struct pci_cap_saved_state *pci_find_saved_cap(struct pci_dev *dev, char cap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return _pci_find_saved_cap(dev, cap, false);
 }
 
 struct pci_cap_saved_state *pci_find_saved_ext_cap(struct pci_dev *dev, u16 cap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return _pci_find_saved_cap(dev, cap, true);
 }
 
@@ -1009,7 +1112,9 @@ static int pci_save_pcie_state(struct pci_dev *dev)
 	u16 *cap;
 
 	if (!pci_is_pcie(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	save_state = pci_find_saved_cap(dev, PCI_CAP_ID_EXP);
 	if (!save_state) {
@@ -1037,7 +1142,9 @@ static void pci_restore_pcie_state(struct pci_dev *dev)
 
 	save_state = pci_find_saved_cap(dev, PCI_CAP_ID_EXP);
 	if (!save_state)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	cap = (u16 *)&save_state->cap.data[0];
 	pcie_capability_write_word(dev, PCI_EXP_DEVCTL, cap[i++]);
@@ -1057,7 +1164,9 @@ static int pci_save_pcix_state(struct pci_dev *dev)
 
 	pos = pci_find_capability(dev, PCI_CAP_ID_PCIX);
 	if (!pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	save_state = pci_find_saved_cap(dev, PCI_CAP_ID_PCIX);
 	if (!save_state) {
@@ -1079,6 +1188,7 @@ static void pci_restore_pcix_state(struct pci_dev *dev)
 
 	save_state = pci_find_saved_cap(dev, PCI_CAP_ID_PCIX);
 	pos = pci_find_capability(dev, PCI_CAP_ID_PCIX);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!save_state || !pos)
 		return;
 	cap = (u16 *)&save_state->cap.data[0];
@@ -1118,7 +1228,9 @@ static void pci_restore_config_dword(struct pci_dev *pdev, int offset,
 
 	pci_read_config_dword(pdev, offset, &val);
 	if (val == saved_val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for (;;) {
 		dev_dbg(&pdev->dev, "restoring config space at offset %#x (was %#x, writing %#x)\n",
@@ -1140,6 +1252,7 @@ static void pci_restore_config_space_range(struct pci_dev *pdev,
 {
 	int index;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (index = end; index >= start; index--)
 		pci_restore_config_dword(pdev, 4 * index,
 					 pdev->saved_config_space[index],
@@ -1148,6 +1261,7 @@ static void pci_restore_config_space_range(struct pci_dev *pdev,
 
 static void pci_restore_config_space(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pdev->hdr_type == PCI_HEADER_TYPE_NORMAL) {
 		pci_restore_config_space_range(pdev, 10, 15, 0);
 		/* Restore BARs before the command register. */
@@ -1164,6 +1278,7 @@ static void pci_restore_config_space(struct pci_dev *pdev)
  */
 void pci_restore_state(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev->state_saved)
 		return;
 
@@ -1209,7 +1324,9 @@ struct pci_saved_state *pci_store_saved_state(struct pci_dev *dev)
 	size_t size;
 
 	if (!dev->state_saved)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	size = sizeof(*state) + sizeof(struct pci_cap_saved_data);
 
@@ -1248,7 +1365,9 @@ int pci_load_saved_state(struct pci_dev *dev,
 	dev->state_saved = false;
 
 	if (!state)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	memcpy(dev->saved_config_space, state->config_space,
 	       sizeof(state->config_space));
@@ -1280,6 +1399,7 @@ EXPORT_SYMBOL_GPL(pci_load_saved_state);
 int pci_load_and_free_saved_state(struct pci_dev *dev,
 				  struct pci_saved_state **state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = pci_load_saved_state(dev, *state);
 	kfree(*state);
 	*state = NULL;
@@ -1289,6 +1409,7 @@ EXPORT_SYMBOL_GPL(pci_load_and_free_saved_state);
 
 int __weak pcibios_enable_device(struct pci_dev *dev, int bars)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_enable_resources(dev, bars);
 }
 
@@ -1301,28 +1422,39 @@ static int do_pci_enable_device(struct pci_dev *dev, int bars)
 
 	err = pci_set_power_state(dev, PCI_D0);
 	if (err < 0 && err != -EIO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	bridge = pci_upstream_bridge(dev);
 	if (bridge)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcie_aspm_powersave_config_link(bridge);
+}
 
 	err = pcibios_enable_device(dev, bars);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	pci_fixup_device(pci_fixup_enable, dev);
 
 	if (dev->msi_enabled || dev->msix_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	pci_read_config_byte(dev, PCI_INTERRUPT_PIN, &pin);
 	if (pin) {
 		pci_read_config_word(dev, PCI_COMMAND, &cmd);
 		if (cmd & PCI_COMMAND_INTX_DISABLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pci_write_config_word(dev, PCI_COMMAND,
 					      cmd & ~PCI_COMMAND_INTX_DISABLE);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1335,6 +1467,7 @@ static int do_pci_enable_device(struct pci_dev *dev, int bars)
  */
 int pci_reenable_device(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pci_is_enabled(dev))
 		return do_pci_enable_device(dev, (1 << PCI_NUM_RESOURCES) - 1);
 	return 0;
@@ -1348,7 +1481,9 @@ static void pci_enable_bridge(struct pci_dev *dev)
 
 	bridge = pci_upstream_bridge(dev);
 	if (bridge)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_enable_bridge(bridge);
+}
 
 	if (pci_is_enabled(dev)) {
 		if (!dev->is_busmaster)
@@ -1382,11 +1517,15 @@ static int pci_enable_device_flags(struct pci_dev *dev, unsigned long flags)
 	}
 
 	if (atomic_inc_return(&dev->enable_cnt) > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;		/* already enabled */
+}
 
 	bridge = pci_upstream_bridge(dev);
 	if (bridge)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_enable_bridge(bridge);
+}
 
 	/* only skip sriov related */
 	for (i = 0; i <= PCI_ROM_RESOURCE; i++)
@@ -1394,11 +1533,16 @@ static int pci_enable_device_flags(struct pci_dev *dev, unsigned long flags)
 			bars |= (1 << i);
 	for (i = PCI_BRIDGE_RESOURCES; i < DEVICE_COUNT_RESOURCE; i++)
 		if (dev->resource[i].flags & flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bars |= (1 << i);
+}
 
 	err = do_pci_enable_device(dev, bars);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_dec(&dev->enable_cnt);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -1412,6 +1556,7 @@ static int pci_enable_device_flags(struct pci_dev *dev, unsigned long flags)
  */
 int pci_enable_device_io(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_enable_device_flags(dev, IORESOURCE_IO);
 }
 EXPORT_SYMBOL(pci_enable_device_io);
@@ -1426,6 +1571,7 @@ EXPORT_SYMBOL(pci_enable_device_io);
  */
 int pci_enable_device_mem(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_enable_device_flags(dev, IORESOURCE_MEM);
 }
 EXPORT_SYMBOL(pci_enable_device_mem);
@@ -1463,6 +1609,7 @@ struct pci_devres {
 
 static void pcim_release(struct device *gendev, void *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev = to_pci_dev(gendev);
 	struct pci_devres *this = res;
 	int i;
@@ -1489,11 +1636,15 @@ static struct pci_devres *get_pci_dr(struct pci_dev *pdev)
 
 	dr = devres_find(&pdev->dev, pcim_release, NULL, NULL);
 	if (dr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return dr;
+}
 
 	new_dr = devres_alloc(pcim_release, sizeof(*new_dr), GFP_KERNEL);
 	if (!new_dr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	return devres_get(&pdev->dev, new_dr, NULL, NULL);
 }
 
@@ -1501,6 +1652,7 @@ static struct pci_devres *find_pci_dr(struct pci_dev *pdev)
 {
 	if (pci_is_managed(pdev))
 		return devres_find(&pdev->dev, pcim_release, NULL, NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -1517,15 +1669,20 @@ int pcim_enable_device(struct pci_dev *pdev)
 
 	dr = get_pci_dr(pdev);
 	if (unlikely(!dr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	if (dr->enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	rc = pci_enable_device(pdev);
 	if (!rc) {
 		pdev->is_managed = 1;
 		dr->enabled = 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 }
 EXPORT_SYMBOL(pcim_enable_device);
@@ -1543,6 +1700,7 @@ void pcim_pin_device(struct pci_dev *pdev)
 	struct pci_devres *dr;
 
 	dr = find_pci_dr(pdev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!dr || !dr->enabled);
 	if (dr)
 		dr->pinned = 1;
@@ -1559,6 +1717,7 @@ EXPORT_SYMBOL(pcim_pin_device);
  */
 int __weak pcibios_add_device(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -3446,7 +3605,9 @@ void __iomem *devm_pci_remap_cfgspace(struct device *dev,
 
 	ptr = devres_alloc(devm_ioremap_release, sizeof(*ptr), GFP_KERNEL);
 	if (!ptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	addr = pci_remap_cfgspace(offset, size);
 	if (addr) {
@@ -3485,6 +3646,7 @@ void __iomem *devm_pci_remap_cfg_resource(struct device *dev,
 	const char *name;
 	void __iomem *dest_ptr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!dev);
 
 	if (!res || resource_type(res) != IORESOURCE_MEM) {
@@ -3521,6 +3683,7 @@ static void __pci_set_master(struct pci_dev *dev, bool enable)
 	else
 		cmd = old_cmd & ~PCI_COMMAND_MASTER;
 	if (cmd != old_cmd) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(&dev->dev, "%s bus mastering\n",
 			enable ? "enabling" : "disabling");
 		pci_write_config_word(dev, PCI_COMMAND, cmd);
@@ -3537,6 +3700,7 @@ static void __pci_set_master(struct pci_dev *dev, bool enable)
  */
 char * __weak __init pcibios_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return str;
 }
 
@@ -3554,13 +3718,18 @@ void __weak pcibios_set_master(struct pci_dev *dev)
 
 	/* The latency timer doesn't apply to PCIe (either Type 0 or Type 1) */
 	if (pci_is_pcie(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pci_read_config_byte(dev, PCI_LATENCY_TIMER, &lat);
 	if (lat < 16)
 		lat = (64 <= pcibios_max_latency) ? 64 : pcibios_max_latency;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (lat > pcibios_max_latency)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lat = pcibios_max_latency;
+}
 	else
 		return;
 
@@ -3587,6 +3756,7 @@ EXPORT_SYMBOL(pci_set_master);
  */
 void pci_clear_master(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__pci_set_master(dev, false);
 }
 EXPORT_SYMBOL(pci_clear_master);
@@ -3606,7 +3776,9 @@ int pci_set_cacheline_size(struct pci_dev *dev)
 	u8 cacheline_size;
 
 	if (!pci_cache_line_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* Validate current setting: the PCI_CACHE_LINE_SIZE must be
 	   equal to or multiple of the right value. */
@@ -3647,7 +3819,9 @@ int pci_set_mwi(struct pci_dev *dev)
 
 	rc = pci_set_cacheline_size(dev);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	pci_read_config_word(dev, PCI_COMMAND, &cmd);
 	if (!(cmd & PCI_COMMAND_INVALIDATE)) {
@@ -3692,6 +3866,7 @@ void pci_clear_mwi(struct pci_dev *dev)
 
 	pci_read_config_word(dev, PCI_COMMAND, &cmd);
 	if (cmd & PCI_COMMAND_INVALIDATE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd &= ~PCI_COMMAND_INVALIDATE;
 		pci_write_config_word(dev, PCI_COMMAND, cmd);
 	}
@@ -3713,7 +3888,9 @@ void pci_intx(struct pci_dev *pdev, int enable)
 	pci_read_config_word(pdev, PCI_COMMAND, &pci_command);
 
 	if (enable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new = pci_command & ~PCI_COMMAND_INTX_DISABLE;
+}
 	else
 		new = pci_command | PCI_COMMAND_INTX_DISABLE;
 
@@ -3786,6 +3963,7 @@ static bool pci_check_and_set_intx_mask(struct pci_dev *dev, bool mask)
  */
 bool pci_check_and_mask_intx(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_check_and_set_intx_mask(dev, true);
 }
 EXPORT_SYMBOL_GPL(pci_check_and_mask_intx);
@@ -3800,6 +3978,7 @@ EXPORT_SYMBOL_GPL(pci_check_and_mask_intx);
  */
 bool pci_check_and_unmask_intx(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_check_and_set_intx_mask(dev, false);
 }
 EXPORT_SYMBOL_GPL(pci_check_and_unmask_intx);
@@ -3812,6 +3991,7 @@ EXPORT_SYMBOL_GPL(pci_check_and_unmask_intx);
  */
 int pci_wait_for_pending_transaction(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pci_is_pcie(dev))
 		return 1;
 
@@ -3845,6 +4025,7 @@ static void pci_flr_wait(struct pci_dev *dev)
 	 * contend with the CRS SV value.
 	 */
 	pci_read_config_dword(dev, PCI_COMMAND, &id);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (id == ~0) {
 		if (delay > timeout) {
 			dev_warn(&dev->dev, "not ready %dms after FLR; giving up\n",
@@ -3877,7 +4058,9 @@ static bool pcie_has_flr(struct pci_dev *dev)
 	u32 cap;
 
 	if (dev->dev_flags & PCI_DEV_FLAGS_NO_FLR_RESET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	pcie_capability_read_dword(dev, PCI_EXP_DEVCAP, &cap);
 	return cap & PCI_EXP_DEVCAP_FLR;
@@ -3893,6 +4076,7 @@ static bool pcie_has_flr(struct pci_dev *dev)
  */
 void pcie_flr(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pci_wait_for_pending_transaction(dev))
 		dev_err(&dev->dev, "timed out waiting for pending transaction; performing function level reset anyway\n");
 
@@ -3908,17 +4092,29 @@ static int pci_af_flr(struct pci_dev *dev, int probe)
 
 	pos = pci_find_capability(dev, PCI_CAP_ID_AF);
 	if (!pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->dev_flags & PCI_DEV_FLAGS_NO_FLR_RESET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_read_config_byte(dev, pos + PCI_AF_CAP, &cap);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(cap & PCI_AF_CAP_TP) || !(cap & PCI_AF_CAP_FLR))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (probe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * Wait for Transaction Pending bit to clear.  A word-aligned test
@@ -3929,6 +4125,7 @@ static int pci_af_flr(struct pci_dev *dev, int probe)
 				 PCI_AF_STATUS_TP << 8))
 		dev_err(&dev->dev, "timed out waiting for pending transaction; performing AF function level reset anyway\n");
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_write_config_byte(dev, pos + PCI_AF_CTRL, PCI_AF_CTRL_FLR);
 	pci_flr_wait(dev);
 	return 0;
@@ -3954,18 +4151,30 @@ static int pci_pm_reset(struct pci_dev *dev, int probe)
 	u16 csr;
 
 	if (!dev->pm_cap || dev->dev_flags & PCI_DEV_FLAGS_NO_PM_RESET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_read_config_word(dev, dev->pm_cap + PCI_PM_CTRL, &csr);
 	if (csr & PCI_PM_CTRL_NO_SOFT_RESET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (probe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->current_state != PCI_D0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	csr &= ~PCI_PM_CTRL_STATE_MASK;
 	csr |= PCI_D3hot;
 	pci_write_config_word(dev, dev->pm_cap + PCI_PM_CTRL, csr);
@@ -4007,6 +4216,7 @@ void pci_reset_secondary_bus(struct pci_dev *dev)
 
 void __weak pcibios_reset_secondary_bus(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_reset_secondary_bus(dev);
 }
 
@@ -4019,6 +4229,7 @@ void __weak pcibios_reset_secondary_bus(struct pci_dev *dev)
  */
 void pci_reset_bridge_secondary_bus(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcibios_reset_secondary_bus(dev);
 }
 EXPORT_SYMBOL_GPL(pci_reset_bridge_secondary_bus);
@@ -4031,13 +4242,20 @@ static int pci_parent_bus_reset(struct pci_dev *dev, int probe)
 	    !dev->bus->self || dev->dev_flags & PCI_DEV_FLAGS_NO_BUS_RESET)
 		return -ENOTTY;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(pdev, &dev->bus->devices, bus_list)
 		if (pdev != dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOTTY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (probe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_reset_bridge_secondary_bus(dev->bus->self);
 
 	return 0;
@@ -4047,6 +4265,7 @@ static int pci_reset_hotplug_slot(struct hotplug_slot *hotplug, int probe)
 {
 	int rc = -ENOTTY;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!hotplug || !try_module_get(hotplug->ops->owner))
 		return rc;
 
@@ -4066,15 +4285,20 @@ static int pci_dev_reset_slot_function(struct pci_dev *dev, int probe)
 	    dev->dev_flags & PCI_DEV_FLAGS_NO_BUS_RESET)
 		return -ENOTTY;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(pdev, &dev->bus->devices, bus_list)
 		if (pdev != dev && pdev->slot == dev->slot)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOTTY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_reset_hotplug_slot(dev->slot->hotplug, probe);
 }
 
 static void pci_dev_lock(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_cfg_access_lock(dev);
 	/* block PM suspend, driver probe, etc. */
 	device_lock(&dev->dev);
@@ -4083,6 +4307,7 @@ static void pci_dev_lock(struct pci_dev *dev)
 /* Return 1 on successful lock, 0 on contention */
 static int pci_dev_trylock(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pci_cfg_access_trylock(dev)) {
 		if (device_trylock(&dev->dev))
 			return 1;
@@ -4094,6 +4319,7 @@ static int pci_dev_trylock(struct pci_dev *dev)
 
 static void pci_dev_unlock(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_unlock(&dev->dev);
 	pci_cfg_access_unlock(dev);
 }
@@ -4197,6 +4423,7 @@ int __pci_reset_function_locked(struct pci_dev *dev)
 {
 	int rc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	rc = pci_dev_specific_reset(dev, 0);
@@ -4238,18 +4465,28 @@ int pci_probe_reset_function(struct pci_dev *dev)
 
 	rc = pci_dev_specific_reset(dev, 1);
 	if (rc != -ENOTTY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 	if (pcie_has_flr(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	rc = pci_af_flr(dev, 1);
 	if (rc != -ENOTTY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 	rc = pci_pm_reset(dev, 1);
 	if (rc != -ENOTTY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 	rc = pci_dev_reset_slot_function(dev, 1);
 	if (rc != -ENOTTY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	return pci_parent_bus_reset(dev, 1);
 }
@@ -4276,7 +4513,9 @@ int pci_reset_function(struct pci_dev *dev)
 
 	rc = pci_probe_reset_function(dev);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	pci_dev_lock(dev);
 	pci_dev_save_and_disable(dev);
@@ -4313,7 +4552,9 @@ int pci_reset_function_locked(struct pci_dev *dev)
 
 	rc = pci_probe_reset_function(dev);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	pci_dev_save_and_disable(dev);
 
@@ -4337,7 +4578,9 @@ int pci_try_reset_function(struct pci_dev *dev)
 
 	rc = pci_probe_reset_function(dev);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	if (!pci_dev_trylock(dev))
 		return -EAGAIN;
@@ -4357,6 +4600,7 @@ static bool pci_bus_resetable(struct pci_bus *bus)
 	struct pci_dev *dev;
 
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (bus->self && (bus->self->dev_flags & PCI_DEV_FLAGS_NO_BUS_RESET))
 		return false;
 
@@ -4374,6 +4618,7 @@ static void pci_bus_lock(struct pci_bus *bus)
 {
 	struct pci_dev *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &bus->devices, bus_list) {
 		pci_dev_lock(dev);
 		if (dev->subordinate)
@@ -4386,6 +4631,7 @@ static void pci_bus_unlock(struct pci_bus *bus)
 {
 	struct pci_dev *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &bus->devices, bus_list) {
 		if (dev->subordinate)
 			pci_bus_unlock(dev->subordinate);
@@ -4398,6 +4644,7 @@ static int pci_bus_trylock(struct pci_bus *bus)
 {
 	struct pci_dev *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &bus->devices, bus_list) {
 		if (!pci_dev_trylock(dev))
 			goto unlock;
@@ -4424,6 +4671,7 @@ static bool pci_slot_resetable(struct pci_slot *slot)
 {
 	struct pci_dev *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &slot->bus->devices, bus_list) {
 		if (!dev->slot || dev->slot != slot)
 			continue;
@@ -4440,6 +4688,7 @@ static void pci_slot_lock(struct pci_slot *slot)
 {
 	struct pci_dev *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &slot->bus->devices, bus_list) {
 		if (!dev->slot || dev->slot != slot)
 			continue;
@@ -4454,6 +4703,7 @@ static void pci_slot_unlock(struct pci_slot *slot)
 {
 	struct pci_dev *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &slot->bus->devices, bus_list) {
 		if (!dev->slot || dev->slot != slot)
 			continue;
@@ -4468,6 +4718,7 @@ static int pci_slot_trylock(struct pci_slot *slot)
 {
 	struct pci_dev *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &slot->bus->devices, bus_list) {
 		if (!dev->slot || dev->slot != slot)
 			continue;
@@ -4499,6 +4750,7 @@ static void pci_bus_save_and_disable(struct pci_bus *bus)
 {
 	struct pci_dev *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &bus->devices, bus_list) {
 		pci_dev_lock(dev);
 		pci_dev_save_and_disable(dev);
@@ -4516,6 +4768,7 @@ static void pci_bus_restore(struct pci_bus *bus)
 {
 	struct pci_dev *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &bus->devices, bus_list) {
 		pci_dev_lock(dev);
 		pci_dev_restore(dev);
@@ -4530,6 +4783,7 @@ static void pci_slot_save_and_disable(struct pci_slot *slot)
 {
 	struct pci_dev *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &slot->bus->devices, bus_list) {
 		if (!dev->slot || dev->slot != slot)
 			continue;
@@ -4547,6 +4801,7 @@ static void pci_slot_restore(struct pci_slot *slot)
 {
 	struct pci_dev *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &slot->bus->devices, bus_list) {
 		if (!dev->slot || dev->slot != slot)
 			continue;
@@ -4560,6 +4815,7 @@ static int pci_slot_reset(struct pci_slot *slot, int probe)
 {
 	int rc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!slot || !pci_slot_resetable(slot))
 		return -ENOTTY;
 
@@ -4584,6 +4840,7 @@ static int pci_slot_reset(struct pci_slot *slot, int probe)
  */
 int pci_probe_reset_slot(struct pci_slot *slot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_slot_reset(slot, 1);
 }
 EXPORT_SYMBOL_GPL(pci_probe_reset_slot);
@@ -4609,7 +4866,9 @@ int pci_reset_slot(struct pci_slot *slot)
 
 	rc = pci_slot_reset(slot, 1);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	pci_slot_save_and_disable(slot);
 
@@ -4633,7 +4892,9 @@ int pci_try_reset_slot(struct pci_slot *slot)
 
 	rc = pci_slot_reset(slot, 1);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	pci_slot_save_and_disable(slot);
 
@@ -4652,6 +4913,7 @@ EXPORT_SYMBOL_GPL(pci_try_reset_slot);
 
 static int pci_bus_reset(struct pci_bus *bus, int probe)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!bus->self || !pci_bus_resetable(bus))
 		return -ENOTTY;
 
@@ -4677,6 +4939,7 @@ static int pci_bus_reset(struct pci_bus *bus, int probe)
  */
 int pci_probe_reset_bus(struct pci_bus *bus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_bus_reset(bus, 1);
 }
 EXPORT_SYMBOL_GPL(pci_probe_reset_bus);
@@ -4696,7 +4959,9 @@ int pci_reset_bus(struct pci_bus *bus)
 
 	rc = pci_bus_reset(bus, 1);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	pci_bus_save_and_disable(bus);
 
@@ -4720,7 +4985,9 @@ int pci_try_reset_bus(struct pci_bus *bus)
 
 	rc = pci_bus_reset(bus, 1);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 
 	pci_bus_save_and_disable(bus);
 
@@ -4751,7 +5018,9 @@ int pcix_get_max_mmrbc(struct pci_dev *dev)
 
 	cap = pci_find_capability(dev, PCI_CAP_ID_PCIX);
 	if (!cap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (pci_read_config_dword(dev, cap + PCI_X_STATUS, &stat))
 		return -EINVAL;
@@ -4774,7 +5043,9 @@ int pcix_get_mmrbc(struct pci_dev *dev)
 
 	cap = pci_find_capability(dev, PCI_CAP_ID_PCIX);
 	if (!cap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (pci_read_config_word(dev, cap + PCI_X_CMD, &cmd))
 		return -EINVAL;
@@ -4798,6 +5069,7 @@ int pcix_set_mmrbc(struct pci_dev *dev, int mmrbc)
 	u32 stat, v, o;
 	u16 cmd;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mmrbc < 512 || mmrbc > 4096 || !is_power_of_2(mmrbc))
 		return -EINVAL;
 
@@ -4859,6 +5131,7 @@ int pcie_set_readrq(struct pci_dev *dev, int rq)
 {
 	u16 v;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rq < 128 || rq > 4096 || !is_power_of_2(rq))
 		return -EINVAL;
 
@@ -4910,6 +5183,7 @@ int pcie_set_mps(struct pci_dev *dev, int mps)
 {
 	u16 v;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mps < 128 || mps > 4096 || !is_power_of_2(mps))
 		return -EINVAL;
 
@@ -4940,6 +5214,7 @@ int pcie_get_minimum_link(struct pci_dev *dev, enum pci_bus_speed *speed,
 	*speed = PCI_SPEED_UNKNOWN;
 	*width = PCIE_LNK_WIDTH_UNKNOWN;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (dev) {
 		u16 lnksta;
 		enum pci_bus_speed next_speed;
@@ -4976,6 +5251,7 @@ EXPORT_SYMBOL(pcie_get_minimum_link);
 int pci_select_bars(struct pci_dev *dev, unsigned long flags)
 {
 	int i, bars = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < PCI_NUM_RESOURCES; i++)
 		if (pci_resource_flags(dev, i) & flags)
 			bars |= (1 << i);
@@ -4988,12 +5264,14 @@ static arch_set_vga_state_t arch_set_vga_state;
 
 void __init pci_register_set_vga_state(arch_set_vga_state_t func)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	arch_set_vga_state = func;	/* NULL disables */
 }
 
 static int pci_set_vga_state_arch(struct pci_dev *dev, bool decode,
 				  unsigned int command_bits, u32 flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (arch_set_vga_state)
 		return arch_set_vga_state(dev, decode, command_bits,
 						flags);
@@ -5016,6 +5294,7 @@ int pci_set_vga_state(struct pci_dev *dev, bool decode,
 	u16 cmd;
 	int rc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON((flags & PCI_VGA_STATE_CHANGE_DECODES) && (command_bits & ~(PCI_COMMAND_IO|PCI_COMMAND_MEMORY)));
 
 	/* ARCH specific VGA enables */
@@ -5063,6 +5342,7 @@ int pci_set_vga_state(struct pci_dev *dev, bool decode,
  */
 void pci_add_dma_alias(struct pci_dev *dev, u8 devfn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev->dma_alias_mask)
 		dev->dma_alias_mask = kcalloc(BITS_TO_LONGS(U8_MAX),
 					      sizeof(long), GFP_KERNEL);
@@ -5078,6 +5358,7 @@ void pci_add_dma_alias(struct pci_dev *dev, u8 devfn)
 
 bool pci_devs_are_dma_aliases(struct pci_dev *dev1, struct pci_dev *dev2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (dev1->dma_alias_mask &&
 		test_bit(dev2->devfn, dev1->dma_alias_mask)) ||
 	       (dev2->dma_alias_mask &&
@@ -5089,7 +5370,9 @@ bool pci_device_is_present(struct pci_dev *pdev)
 	u32 v;
 
 	if (pci_dev_is_disconnected(pdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	return pci_bus_read_dev_vendor_id(pdev->bus, pdev->devfn, &v, 0);
 }
 EXPORT_SYMBOL_GPL(pci_device_is_present);
@@ -5101,8 +5384,10 @@ void pci_ignore_hotplug(struct pci_dev *dev)
 	dev->ignore_hotplug = 1;
 	/* Propagate the "ignore hotplug" setting to the parent bridge. */
 	if (bridge)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bridge->ignore_hotplug = 1;
 }
+}
 EXPORT_SYMBOL_GPL(pci_ignore_hotplug);
 
 resource_size_t __weak pcibios_default_alignment(void)
@@ -5134,40 +5419,56 @@ static resource_size_t pci_specified_resource_alignment(struct pci_dev *dev,
 	p = resource_alignment_param;
 	if (!*p && !align)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pci_has_flag(PCI_PROBE_ONLY)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		align = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info_once("PCI: Ignoring requested alignments (PCI_PROBE_ONLY)\n");
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (*p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = 0;
 		if (sscanf(p, "%d%n", &align_order, &count) == 1 &&
 							p[count] == '@') {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p += count + 1;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			align_order = -1;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (strncmp(p, "pci:", 4) == 0) {
 			/* PCI vendor/device (subvendor/subdevice) ids are specified */
 			p += 4;
 			if (sscanf(p, "%hx:%hx:%hx:%hx%n",
 				&vendor, &device, &subsystem_vendor, &subsystem_device, &count) != 4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (sscanf(p, "%hx:%hx%n", &vendor, &device, &count) != 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					printk(KERN_ERR "PCI: Can't parse resource_alignment parameter: pci:%s\n",
 						p);
 					break;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				subsystem_vendor = subsystem_device = 0;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p += count;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if ((!vendor || (vendor == dev->vendor)) &&
 				(!device || (device == dev->device)) &&
 				(!subsystem_vendor || (subsystem_vendor == dev->subsystem_vendor)) &&
 				(!subsystem_device || (subsystem_device == dev->subsystem_device))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*resize = true;
 				if (align_order == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					align = PAGE_SIZE;
+}
 				else
 					align = 1 << align_order;
 				/* Found */
@@ -5175,8 +5476,10 @@ static resource_size_t pci_specified_resource_alignment(struct pci_dev *dev,
 			}
 		}
 		else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sscanf(p, "%x:%x:%x.%x%n",
 				&seg, &bus, &slot, &func, &count) != 4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				seg = 0;
 				if (sscanf(p, "%x:%x.%x%n",
 						&bus, &slot, &func, &count) != 3) {
@@ -5186,24 +5489,30 @@ static resource_size_t pci_specified_resource_alignment(struct pci_dev *dev,
 					break;
 				}
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p += count;
 			if (seg == pci_domain_nr(dev->bus) &&
 				bus == dev->bus->number &&
 				slot == PCI_SLOT(dev->devfn) &&
 				func == PCI_FUNC(dev->devfn)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*resize = true;
 				if (align_order == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					align = PAGE_SIZE;
+}
 				else
 					align = 1 << align_order;
 				/* Found */
 				break;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (*p != ';' && *p != ',') {
 			/* End of param or invalid format */
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p++;
 	}
 out:
@@ -5218,7 +5527,9 @@ static void pci_request_resource_alignment(struct pci_dev *dev, int bar,
 	resource_size_t size;
 
 	if (!(r->flags & IORESOURCE_MEM))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (r->flags & IORESOURCE_PCI_FIXED) {
 		dev_info(&dev->dev, "BAR%d %pR: ignoring requested alignment %#llx\n",
@@ -5300,23 +5611,31 @@ void pci_reassigndev_resource_alignment(struct pci_dev *dev)
 	/* check if specified PCI is target device to reassign */
 	align = pci_specified_resource_alignment(dev, &resize);
 	if (!align)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->hdr_type == PCI_HEADER_TYPE_NORMAL &&
 	    (dev->class >> 8) == PCI_CLASS_BRIDGE_HOST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(&dev->dev,
 			"Can't reassign resources to host bridge.\n");
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_info(&dev->dev,
 		"Disabling memory decoding and releasing memory resources.\n");
 	pci_read_config_word(dev, PCI_COMMAND, &command);
 	command &= ~PCI_COMMAND_MEMORY;
 	pci_write_config_word(dev, PCI_COMMAND, command);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i <= PCI_ROM_RESOURCE; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_request_resource_alignment(dev, i, align, resize);
+}
 
 	/*
 	 * Need to disable bridge's resource window,
@@ -5325,20 +5644,25 @@ void pci_reassigndev_resource_alignment(struct pci_dev *dev)
 	 */
 	if (dev->hdr_type == PCI_HEADER_TYPE_BRIDGE &&
 	    (dev->class >> 8) == PCI_CLASS_BRIDGE_PCI) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = PCI_BRIDGE_RESOURCES; i < PCI_NUM_RESOURCES; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			r = &dev->resource[i];
 			if (!(r->flags & IORESOURCE_MEM))
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			r->flags |= IORESOURCE_UNSET;
 			r->end = resource_size(r) - 1;
 			r->start = 0;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_disable_bridge_window(dev);
 	}
 }
 
 static ssize_t pci_set_resource_alignment_param(const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (count > RESOURCE_ALIGNMENT_PARAM_SIZE - 1)
 		count = RESOURCE_ALIGNMENT_PARAM_SIZE - 1;
 	spin_lock(&resource_alignment_lock);
@@ -5359,12 +5683,14 @@ static ssize_t pci_get_resource_alignment_param(char *buf, size_t size)
 
 static ssize_t pci_resource_alignment_show(struct bus_type *bus, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_get_resource_alignment_param(buf, PAGE_SIZE);
 }
 
 static ssize_t pci_resource_alignment_store(struct bus_type *bus,
 					const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pci_set_resource_alignment_param(buf, count);
 }
 
@@ -5390,6 +5716,7 @@ static atomic_t __domain_nr = ATOMIC_INIT(-1);
 
 int pci_get_new_domain_nr(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_inc_return(&__domain_nr);
 }
 
@@ -5458,6 +5785,7 @@ int pci_bus_find_domain_nr(struct pci_bus *bus, struct device *parent)
  */
 int __weak pci_ext_cfg_avail(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -5468,6 +5796,7 @@ EXPORT_SYMBOL(pci_fixup_cardbus);
 
 static int __init pci_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (str) {
 		char *k = strchr(str, ',');
 		if (k)
diff --git a/drivers/pci/pci.h b/drivers/pci/pci.h
index fdb02c1..42a42b5 100644
--- a/drivers/pci/pci.h
+++ b/drivers/pci/pci.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SPDX-License-Identifier: GPL-2.0 */
 #ifndef DRIVERS_PCI_H
 #define DRIVERS_PCI_H
diff --git a/drivers/pci/pcie/aspm.c b/drivers/pci/pcie/aspm.c
index cae54f8..23805b7 100644
--- a/drivers/pci/pcie/aspm.c
+++ b/drivers/pci/pcie/aspm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * File:	drivers/pci/pcie/aspm.c
@@ -130,6 +132,7 @@ static const char *policy_str[] = {
 
 static int policy_to_aspm_state(struct pcie_link_state *link)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (aspm_policy) {
 	case POLICY_PERFORMANCE:
 		/* Disable ASPM and Clock PM */
@@ -148,6 +151,7 @@ static int policy_to_aspm_state(struct pcie_link_state *link)
 
 static int policy_to_clkpm_state(struct pcie_link_state *link)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (aspm_policy) {
 	case POLICY_PERFORMANCE:
 		/* Disable ASPM and Clock PM */
@@ -166,6 +170,7 @@ static void pcie_set_clkpm_nocheck(struct pcie_link_state *link, int enable)
 {
 	struct pci_dev *child;
 	struct pci_bus *linkbus = link->pdev->subordinate;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 val = enable ? PCI_EXP_LNKCTL_CLKREQ_EN : 0;
 
 	list_for_each_entry(child, &linkbus->devices, bus_list)
@@ -288,6 +293,7 @@ static void pcie_aspm_configure_common_clock(struct pcie_link_state *link)
 /* Convert L0s latency encoding to ns */
 static u32 calc_l0s_latency(u32 encoding)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (encoding == 0x7)
 		return (5 * 1000);	/* > 4us */
 	return (64 << encoding);
@@ -296,6 +302,7 @@ static u32 calc_l0s_latency(u32 encoding)
 /* Convert L0s acceptable latency encoding to ns */
 static u32 calc_l0s_acceptable(u32 encoding)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (encoding == 0x7)
 		return -1U;
 	return (64 << encoding);
@@ -304,6 +311,7 @@ static u32 calc_l0s_acceptable(u32 encoding)
 /* Convert L1 latency encoding to ns */
 static u32 calc_l1_latency(u32 encoding)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (encoding == 0x7)
 		return (65 * 1000);	/* > 64us */
 	return (1000 << encoding);
@@ -312,6 +320,7 @@ static u32 calc_l1_latency(u32 encoding)
 /* Convert L1 acceptable latency encoding to ns */
 static u32 calc_l1_acceptable(u32 encoding)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (encoding == 0x7)
 		return -1U;
 	return (1000 << encoding);
@@ -320,6 +329,7 @@ static u32 calc_l1_acceptable(u32 encoding)
 /* Convert L1SS T_pwr encoding to usec */
 static u32 calc_l1ss_pwron(struct pci_dev *pdev, u32 scale, u32 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (scale) {
 	case 0:
 		return val * 2;
@@ -363,7 +373,9 @@ static void pcie_get_aspm_reg(struct pci_dev *pdev,
 	info->l1ss_cap = info->l1ss_ctl1 = info->l1ss_ctl2 = 0;
 	info->l1ss_cap_ptr = pci_find_ext_capability(pdev, PCI_EXT_CAP_ID_L1SS);
 	if (!info->l1ss_cap_ptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	pci_read_config_dword(pdev, info->l1ss_cap_ptr + PCI_L1SS_CAP,
 			      &info->l1ss_cap);
 	if (!(info->l1ss_cap & PCI_L1SS_CAP_L1_PM_SS)) {
@@ -431,6 +443,7 @@ static struct pci_dev *pci_function_0(struct pci_bus *linkbus)
 {
 	struct pci_dev *child;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(child, &linkbus->devices, bus_list)
 		if (PCI_FUNC(child->devfn) == 0)
 			return child;
@@ -449,7 +462,9 @@ static void aspm_calc_l1ss_info(struct pcie_link_state *link,
 	link->l1ss.ctl1 = link->l1ss.ctl2 = 0;
 
 	if (!(link->aspm_support & ASPM_STATE_L1_2_MASK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Choose the greater of the two T_cmn_mode_rstr_time */
 	val1 = (upreg->l1ss_cap >> 8) & 0xFF;
@@ -639,6 +654,7 @@ static void pcie_config_aspm_l1ss(struct pcie_link_state *link, u32 state)
 	 * in pcie_config_aspm_link().
 	 */
 	if (enable_req & (ASPM_STATE_L1_1 | ASPM_STATE_L1_2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcie_capability_clear_and_set_word(child, PCI_EXP_LNKCTL,
 						   PCI_EXP_LNKCTL_ASPM_L1, 0);
 		pcie_capability_clear_and_set_word(parent, PCI_EXP_LNKCTL,
@@ -683,6 +699,7 @@ static void pcie_config_aspm_l1ss(struct pcie_link_state *link, u32 state)
 
 static void pcie_config_aspm_dev(struct pci_dev *pdev, u32 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcie_capability_clear_and_set_word(pdev, PCI_EXP_LNKCTL,
 					   PCI_EXP_LNKCTL_ASPMC, val);
 }
@@ -698,7 +715,9 @@ static void pcie_config_aspm_link(struct pcie_link_state *link, u32 state)
 
 	/* Can't enable any substates if L1 is not enabled */
 	if (!(state & ASPM_STATE_L1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		state &= ~ASPM_STATE_L1SS;
+}
 
 	/* Spec says both ports must be in D0 before enabling PCI PM substates*/
 	if (parent->current_state != PCI_D0 || child->current_state != PCI_D0) {
@@ -740,6 +759,7 @@ static void pcie_config_aspm_link(struct pcie_link_state *link, u32 state)
 
 static void pcie_config_aspm_path(struct pcie_link_state *link)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (link) {
 		pcie_config_aspm_link(link, policy_to_aspm_state(link));
 		link = link->parent;
@@ -748,6 +768,7 @@ static void pcie_config_aspm_path(struct pcie_link_state *link)
 
 static void free_link_state(struct pcie_link_state *link)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	link->pdev->link_state = NULL;
 	kfree(link);
 }
@@ -793,7 +814,9 @@ static struct pcie_link_state *alloc_pcie_link_state(struct pci_dev *pdev)
 
 	link = kzalloc(sizeof(*link), GFP_KERNEL);
 	if (!link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	INIT_LIST_HEAD(&link->sibling);
 	INIT_LIST_HEAD(&link->children);
@@ -838,7 +861,9 @@ void pcie_aspm_init_link_state(struct pci_dev *pdev)
 	int blacklist = !!pcie_aspm_sanity_check(pdev);
 
 	if (!aspm_support_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (pdev->link_state)
 		return;
@@ -898,6 +923,7 @@ void pcie_aspm_init_link_state(struct pci_dev *pdev)
 static void pcie_update_aspm_capable(struct pcie_link_state *root)
 {
 	struct pcie_link_state *link;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(root->parent);
 	list_for_each_entry(link, &link_list, sibling) {
 		if (link->root != root)
@@ -924,6 +950,7 @@ void pcie_aspm_exit_link_state(struct pci_dev *pdev)
 	struct pci_dev *parent = pdev->bus->self;
 	struct pcie_link_state *link, *root, *parent_link;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!parent || !parent->link_state)
 		return;
 
@@ -962,6 +989,7 @@ void pcie_aspm_pm_state_change(struct pci_dev *pdev)
 {
 	struct pcie_link_state *link = pdev->link_state;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (aspm_disabled || !link)
 		return;
 	/*
@@ -980,6 +1008,7 @@ void pcie_aspm_powersave_config_link(struct pci_dev *pdev)
 {
 	struct pcie_link_state *link = pdev->link_state;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (aspm_disabled || !link)
 		return;
 
@@ -1001,7 +1030,9 @@ static void __pci_disable_link_state(struct pci_dev *pdev, int state, bool sem)
 	struct pcie_link_state *link;
 
 	if (!pci_is_pcie(pdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (pdev->has_secondary_link)
 		parent = pdev;
@@ -1042,6 +1073,7 @@ static void __pci_disable_link_state(struct pci_dev *pdev, int state, bool sem)
 
 void pci_disable_link_state_locked(struct pci_dev *pdev, int state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__pci_disable_link_state(pdev, state, false);
 }
 EXPORT_SYMBOL(pci_disable_link_state_locked);
@@ -1057,6 +1089,7 @@ EXPORT_SYMBOL(pci_disable_link_state_locked);
  */
 void pci_disable_link_state(struct pci_dev *pdev, int state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__pci_disable_link_state(pdev, state, true);
 }
 EXPORT_SYMBOL(pci_disable_link_state);
@@ -1067,7 +1100,9 @@ static int pcie_aspm_set_policy(const char *val, struct kernel_param *kp)
 	struct pcie_link_state *link;
 
 	if (aspm_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 	for (i = 0; i < ARRAY_SIZE(policy_str); i++)
 		if (!strncmp(val, policy_str[i], strlen(policy_str[i])))
 			break;
@@ -1091,6 +1126,7 @@ static int pcie_aspm_set_policy(const char *val, struct kernel_param *kp)
 static int pcie_aspm_get_policy(char *buffer, struct kernel_param *kp)
 {
 	int i, cnt = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(policy_str); i++)
 		if (i == aspm_policy)
 			cnt += sprintf(buffer + cnt, "[%s] ", policy_str[i]);
@@ -1209,6 +1245,7 @@ void pcie_aspm_remove_sysfs_dev_files(struct pci_dev *pdev)
 
 static int __init pcie_aspm_disable(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!strcmp(str, "off")) {
 		aspm_policy = POLICY_DEFAULT;
 		aspm_disabled = 1;
diff --git a/drivers/pci/pcie/pme.c b/drivers/pci/pcie/pme.c
index df290aa..869a3ff4 100644
--- a/drivers/pci/pcie/pme.c
+++ b/drivers/pci/pcie/pme.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * PCIe Native PME support
  *
@@ -33,6 +35,7 @@ bool pcie_pme_msi_disabled;
 
 static int __init pcie_pme_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!strncmp(str, "nomsi", 5))
 		pcie_pme_msi_disabled = true;
 
@@ -54,6 +57,7 @@ struct pcie_pme_service_data {
  */
 void pcie_pme_interrupt_enable(struct pci_dev *dev, bool enable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (enable)
 		pcie_capability_set_word(dev, PCI_EXP_RTCTL,
 					 PCI_EXP_RTCTL_PMEIE);
@@ -73,6 +77,7 @@ static bool pcie_pme_walk_bus(struct pci_bus *bus)
 	struct pci_dev *dev;
 	bool ret = false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &bus->devices, bus_list) {
 		/* Skip PCIe devices in case we started from a root port. */
 		if (!pci_is_pcie(dev) && pci_check_pme_status(dev)) {
@@ -106,7 +111,9 @@ static bool pcie_pme_from_pci_bridge(struct pci_bus *bus, u8 devfn)
 	bool found = false;
 
 	if (devfn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	dev = pci_dev_get(bus->self);
 	if (!dev)
@@ -273,6 +280,7 @@ static irqreturn_t pcie_pme_irq(int irq, void *context)
 	port = ((struct pcie_device *)context)->port;
 	data = get_service_data((struct pcie_device *)context);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&data->lock, flags);
 	pcie_capability_read_dword(port, PCI_EXP_RTSTA, &rtsta);
 
@@ -297,6 +305,7 @@ static irqreturn_t pcie_pme_irq(int irq, void *context)
  */
 static int pcie_pme_can_wakeup(struct pci_dev *dev, void *ign)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_set_wakeup_capable(&dev->dev, true);
 	return 0;
 }
@@ -311,6 +320,7 @@ static int pcie_pme_can_wakeup(struct pci_dev *dev, void *ign)
  */
 static void pcie_pme_mark_devices(struct pci_dev *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcie_pme_can_wakeup(port, NULL);
 	if (port->subordinate)
 		pci_walk_bus(port->subordinate, pcie_pme_can_wakeup, NULL);
@@ -328,7 +338,9 @@ static int pcie_pme_probe(struct pcie_device *srv)
 
 	data = kzalloc(sizeof(*data), GFP_KERNEL);
 	if (!data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	spin_lock_init(&data->lock);
 	INIT_WORK(&data->work, pcie_pme_work_fn);
@@ -357,7 +369,9 @@ static bool pcie_pme_check_wakeup(struct pci_bus *bus)
 	struct pci_dev *dev;
 
 	if (!bus)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	list_for_each_entry(dev, &bus->devices, bus_list)
 		if (device_may_wakeup(&dev->dev)
@@ -373,6 +387,7 @@ static bool pcie_pme_check_wakeup(struct pci_bus *bus)
  */
 static int pcie_pme_suspend(struct pcie_device *srv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pcie_pme_service_data *data = get_service_data(srv);
 	struct pci_dev *port = srv->port;
 	bool wakeup;
@@ -408,6 +423,7 @@ static int pcie_pme_suspend(struct pcie_device *srv)
  */
 static int pcie_pme_resume(struct pcie_device *srv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pcie_pme_service_data *data = get_service_data(srv);
 
 	spin_lock_irq(&data->lock);
@@ -431,6 +447,7 @@ static int pcie_pme_resume(struct pcie_device *srv)
  */
 static void pcie_pme_remove(struct pcie_device *srv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcie_pme_suspend(srv);
 	free_irq(srv->irq, srv);
 	kfree(get_service_data(srv));
diff --git a/drivers/pci/pcie/portdrv_bus.c b/drivers/pci/pcie/portdrv_bus.c
index 87e79a6..c329381 100644
--- a/drivers/pci/pcie/portdrv_bus.c
+++ b/drivers/pci/pcie/portdrv_bus.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * File:	portdrv_bus.c
  * Purpose:	PCI Express Port Bus Driver's Bus Overloading Functions
@@ -28,6 +30,7 @@ static int pcie_port_bus_match(struct device *dev, struct device_driver *drv)
 	struct pcie_device *pciedev;
 	struct pcie_port_service_driver *driver;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (drv->bus != &pcie_port_bus_type || dev->bus != &pcie_port_bus_type)
 		return 0;
 
@@ -51,5 +54,6 @@ int pcie_port_bus_register(void)
 
 void pcie_port_bus_unregister(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bus_unregister(&pcie_port_bus_type);
 }
diff --git a/drivers/pci/pcie/portdrv_core.c b/drivers/pci/pcie/portdrv_core.c
index ebc9d45..21127ad 100644
--- a/drivers/pci/pcie/portdrv_core.c
+++ b/drivers/pci/pcie/portdrv_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * File:	portdrv_core.c
@@ -25,6 +27,7 @@ bool pciehp_msi_disabled;
 
 static int __init pciehp_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!strncmp(str, "nomsi", 5))
 		pciehp_msi_disabled = true;
 
@@ -41,6 +44,7 @@ __setup("pcie_hp=", pciehp_setup);
  */
 static void release_pcie_device(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(to_pcie_device(dev));
 }
 
@@ -66,7 +70,9 @@ static int pcie_port_enable_irq_vec(struct pci_dev *dev, int *irqs, int mask)
 	nr_entries = pci_alloc_irq_vectors(dev, 1, PCIE_PORT_MAX_MSI_ENTRIES,
 			PCI_IRQ_MSIX | PCI_IRQ_MSI);
 	if (nr_entries < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return nr_entries;
+}
 
 	if (mask & (PCIE_PORT_SERVICE_PME | PCIE_PORT_SERVICE_HP)) {
 		u16 reg16;
@@ -186,6 +192,7 @@ static int pcie_init_service_irqs(struct pci_dev *dev, int *irqs, int mask)
 {
 	int ret, i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < PCIE_PORT_DEVICE_MAXSERVICES; i++)
 		irqs[i] = -1;
 
@@ -234,7 +241,9 @@ static int get_port_device_capability(struct pci_dev *dev)
 	int cap_mask = 0;
 
 	if (pcie_ports_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	cap_mask = PCIE_PORT_SERVICE_PME | PCIE_PORT_SERVICE_HP
 			| PCIE_PORT_SERVICE_VC | PCIE_PORT_SERVICE_DPC;
@@ -298,7 +307,9 @@ static int pcie_device_init(struct pci_dev *pdev, int service, int irq)
 
 	pcie = kzalloc(sizeof(*pcie), GFP_KERNEL);
 	if (!pcie)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	pcie->port = pdev;
 	pcie->irq = irq;
 	pcie->service = service;
@@ -339,7 +350,9 @@ int pcie_port_device_register(struct pci_dev *dev)
 	/* Enable PCI Express port device */
 	status = pci_enable_device(dev);
 	if (status)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return status;
+}
 
 	/* Get and check PCI Express port services */
 	capabilities = get_port_device_capability(dev);
@@ -388,6 +401,7 @@ static int suspend_iter(struct device *dev, void *data)
 {
 	struct pcie_port_service_driver *service_driver;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((dev->bus == &pcie_port_bus_type) && dev->driver) {
 		service_driver = to_service_driver(dev->driver);
 		if (service_driver->suspend)
@@ -402,6 +416,7 @@ static int suspend_iter(struct device *dev, void *data)
  */
 int pcie_port_device_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return device_for_each_child(dev, NULL, suspend_iter);
 }
 
@@ -424,12 +439,14 @@ static int resume_iter(struct device *dev, void *data)
  */
 int pcie_port_device_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return device_for_each_child(dev, NULL, resume_iter);
 }
 #endif /* PM */
 
 static int remove_iter(struct device *dev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->bus == &pcie_port_bus_type)
 		device_unregister(dev);
 	return 0;
@@ -444,6 +461,7 @@ static int remove_iter(struct device *dev, void *data)
  */
 void pcie_port_device_remove(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_for_each_child(&dev->dev, NULL, remove_iter);
 	pci_free_irq_vectors(dev);
 	pci_disable_device(dev);
@@ -463,6 +481,7 @@ static int pcie_port_probe_service(struct device *dev)
 	struct pcie_port_service_driver *driver;
 	int status;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev || !dev->driver)
 		return -ENODEV;
 
@@ -493,6 +512,7 @@ static int pcie_port_remove_service(struct device *dev)
 	struct pcie_device *pciedev;
 	struct pcie_port_service_driver *driver;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev || !dev->driver)
 		return 0;
 
diff --git a/drivers/pci/pcie/portdrv_pci.c b/drivers/pci/pcie/portdrv_pci.c
index 68c389c..7c0ad3f 100644
--- a/drivers/pci/pcie/portdrv_pci.c
+++ b/drivers/pci/pcie/portdrv_pci.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * File:	portdrv_pci.c
@@ -34,6 +36,7 @@ bool pcie_ports_auto = true;
 
 static int __init pcie_port_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!strncmp(str, "compat", 6)) {
 		pcie_ports_disabled = true;
 	} else if (!strncmp(str, "native", 6)) {
@@ -56,6 +59,7 @@ __setup("pcie_ports=", pcie_port_setup);
  */
 void pcie_clear_root_pme_status(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcie_capability_set_dword(dev, PCI_EXP_RTSTA, PCI_EXP_RTSTA_PME);
 }
 
@@ -65,7 +69,9 @@ static int pcie_portdrv_restore_config(struct pci_dev *dev)
 
 	retval = pci_enable_device(dev);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 	pci_set_master(dev);
 	return 0;
 }
@@ -73,6 +79,7 @@ static int pcie_portdrv_restore_config(struct pci_dev *dev)
 #ifdef CONFIG_PM
 static int pcie_port_resume_noirq(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 
 	/*
@@ -87,11 +94,13 @@ static int pcie_port_resume_noirq(struct device *dev)
 
 static int pcie_port_runtime_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return to_pci_dev(dev)->bridge_d3 ? 0 : -EBUSY;
 }
 
 static int pcie_port_runtime_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -168,6 +177,7 @@ static int pcie_portdrv_probe(struct pci_dev *dev,
 
 static void pcie_portdrv_remove(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pci_bridge_d3_possible(dev)) {
 		pm_runtime_forbid(&dev->dev);
 		pm_runtime_get_noresume(&dev->dev);
@@ -186,6 +196,7 @@ static pci_ers_result_t pcie_portdrv_error_detected(struct pci_dev *dev,
 
 static pci_ers_result_t pcie_portdrv_mmio_enabled(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return PCI_ERS_RESULT_RECOVERED;
 }
 
@@ -207,6 +218,7 @@ static int resume_iter(struct device *device, void *data)
 	struct pcie_device *pcie_device;
 	struct pcie_port_service_driver *driver;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (device->bus == &pcie_port_bus_type && device->driver) {
 		driver = to_service_driver(device->driver);
 		if (driver && driver->error_resume) {
@@ -222,6 +234,7 @@ static int resume_iter(struct device *device, void *data)
 
 static void pcie_portdrv_err_resume(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_for_each_child(&dev->dev, NULL, resume_iter);
 }
 
@@ -255,6 +268,7 @@ static struct pci_driver pcie_portdriver = {
 
 static int __init dmi_pcie_pme_disable_msi(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_notice("%s detected: will not use MSI for PCIe PME signaling\n",
 		  d->ident);
 	pcie_pme_disable_msi();
@@ -282,18 +296,23 @@ static int __init pcie_portdrv_init(void)
 	int retval;
 
 	if (pcie_ports_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return pci_register_driver(&pcie_portdriver);
+}
 
 	dmi_check_system(pcie_portdrv_dmi_table);
 
 	retval = pcie_port_bus_register();
 	if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_WARNING "PCIE: bus_register error: %d\n", retval);
 		goto out;
 	}
 	retval = pci_register_driver(&pcie_portdriver);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcie_port_bus_unregister();
+}
  out:
 	return retval;
 }
diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index f285cd7..ee7ba60 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * probe.c - PCI detection and setup code
  */
@@ -47,11 +49,15 @@ static struct resource *get_pci_domain_busn_res(int domain_nr)
 
 	list_for_each_entry(r, &pci_domain_busn_res_list, list)
 		if (r->domain_nr == domain_nr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return &r->res;
+}
 
 	r = kzalloc(sizeof(*r), GFP_KERNEL);
 	if (!r)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	r->domain_nr = domain_nr;
 	r->res.start = 0;
@@ -65,6 +71,7 @@ static struct resource *get_pci_domain_busn_res(int domain_nr)
 
 static int find_anything(struct device *dev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -90,6 +97,7 @@ EXPORT_SYMBOL(no_pci_devices);
  */
 static void release_pcibus_dev(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_bus *pci_bus = to_pci_bus(dev);
 
 	put_device(pci_bus->bridge);
@@ -114,7 +122,9 @@ static u64 pci_size(u64 base, u64 maxbase, u64 mask)
 {
 	u64 size = mask & maxbase;	/* Find the significant bits */
 	if (!size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Get the lowest of them to find the decode size, and
 	   from that the extent.  */
@@ -123,7 +133,9 @@ static u64 pci_size(u64 base, u64 maxbase, u64 mask)
 	/* base == maxbase can be valid only if the BAR has
 	   already been programmed with all 1s.  */
 	if (base == maxbase && ((base | size) & mask) != mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return size;
 }
@@ -134,11 +146,13 @@ static inline unsigned long decode_bar(struct pci_dev *dev, u32 bar)
 	unsigned long flags;
 
 	if ((bar & PCI_BASE_ADDRESS_SPACE) == PCI_BASE_ADDRESS_SPACE_IO) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = bar & ~PCI_BASE_ADDRESS_IO_MASK;
 		flags |= IORESOURCE_IO;
 		return flags;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flags = bar & ~PCI_BASE_ADDRESS_MEM_MASK;
 	flags |= IORESOURCE_MEM;
 	if (flags & PCI_BASE_ADDRESS_MEM_PREFETCH)
@@ -158,6 +172,7 @@ static inline unsigned long decode_bar(struct pci_dev *dev, u32 bar)
 		/* mem unknown type treated as 32-bit BAR */
 		break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return flags;
 }
 
@@ -205,14 +220,18 @@ int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 	 * 1 must be clear.
 	 */
 	if (sz == 0xffffffff)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sz = 0;
+}
 
 	/*
 	 * I don't know how l can have all bits set.  Copied from old code.
 	 * Maybe it fixes a bug on some ancient platform.
 	 */
 	if (l == 0xffffffff)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		l = 0;
+}
 
 	if (type == pci_bar_unknown) {
 		res->flags = decode_bar(dev, l);
@@ -228,13 +247,16 @@ int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 		}
 	} else {
 		if (l & PCI_ROM_ADDRESS_ENABLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			res->flags |= IORESOURCE_ROM_ENABLE;
+}
 		l64 = l & PCI_ROM_ADDRESS_MASK;
 		sz64 = sz & PCI_ROM_ADDRESS_MASK;
 		mask64 = PCI_ROM_ADDRESS_MASK;
 	}
 
 	if (res->flags & IORESOURCE_MEM_64) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_read_config_dword(dev, pos + 4, &l);
 		pci_write_config_dword(dev, pos + 4, ~0);
 		pci_read_config_dword(dev, pos + 4, &sz);
@@ -253,14 +275,18 @@ int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 
 	sz64 = pci_size(l64, sz64, mask64);
 	if (!sz64) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, FW_BUG "reg 0x%x: invalid BAR (can't size)\n",
 			 pos);
 		goto fail;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (res->flags & IORESOURCE_MEM_64) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((sizeof(pci_bus_addr_t) < 8 || sizeof(resource_size_t) < 8)
 		    && sz64 > 0x100000000ULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			res->flags |= IORESOURCE_UNSET | IORESOURCE_DISABLED;
 			res->start = 0;
 			res->end = 0;
@@ -269,8 +295,10 @@ int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 			goto out;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((sizeof(pci_bus_addr_t) < 8) && l) {
 			/* Above 32-bit boundary; try to reallocate */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			res->flags |= IORESOURCE_UNSET;
 			res->start = 0;
 			res->end = sz64;
@@ -298,6 +326,7 @@ int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 	 * be claimed by the device.
 	 */
 	if (inverted_region.start != region.start) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res->flags |= IORESOURCE_UNSET;
 		res->start = 0;
 		res->end = region.end - region.start;
@@ -322,7 +351,9 @@ static void pci_read_bases(struct pci_dev *dev, unsigned int howmany, int rom)
 	unsigned int pos, reg;
 
 	if (dev->non_compliant_bars)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for (pos = 0; pos < howmany; pos++) {
 		struct resource *res = &dev->resource[pos];
@@ -393,6 +424,7 @@ static void pci_read_bridge_mmio(struct pci_bus *child)
 	base = ((unsigned long) mem_base_lo & PCI_MEMORY_RANGE_MASK) << 16;
 	limit = ((unsigned long) mem_limit_lo & PCI_MEMORY_RANGE_MASK) << 16;
 	if (base <= limit) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res->flags = (mem_base_lo & PCI_MEMORY_RANGE_TYPE_MASK) | IORESOURCE_MEM;
 		region.start = base;
 		region.end = limit + 0xfffff;
@@ -428,6 +460,7 @@ static void pci_read_bridge_mmio_pref(struct pci_bus *child)
 		 * this, just assume they are not being used.
 		 */
 		if (mem_base_hi <= mem_limit_hi) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			base64 |= (u64) mem_base_hi << 32;
 			limit64 |= (u64) mem_limit_hi << 32;
 		}
@@ -461,23 +494,33 @@ void pci_read_bridge_bases(struct pci_bus *child)
 	int i;
 
 	if (pci_is_root_bus(child))	/* It's a host bus, nothing to read */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_info(&dev->dev, "PCI bridge to %pR%s\n",
 		 &child->busn_res,
 		 dev->transparent ? " (subtractive decode)" : "");
 
 	pci_bus_remove_resources(child);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < PCI_BRIDGE_RESOURCE_NUM; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		child->resource[i] = &dev->resource[PCI_BRIDGE_RESOURCES+i];
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_read_bridge_io(child);
 	pci_read_bridge_mmio(child);
 	pci_read_bridge_mmio_pref(child);
 
 	if (dev->transparent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_bus_for_each_resource(child->parent, res, i) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (res && res->flags) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pci_bus_add_resource(child, res,
 						     PCI_SUBTRACTIVE_DECODE);
 				dev_printk(KERN_DEBUG, &dev->dev,
@@ -494,7 +537,9 @@ static struct pci_bus *pci_alloc_bus(struct pci_bus *parent)
 
 	b = kzalloc(sizeof(*b), GFP_KERNEL);
 	if (!b)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	INIT_LIST_HEAD(&b->node);
 	INIT_LIST_HEAD(&b->children);
@@ -512,6 +557,7 @@ static struct pci_bus *pci_alloc_bus(struct pci_bus *parent)
 
 static void devm_pci_release_host_bridge_dev(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_host_bridge *bridge = to_pci_host_bridge(dev);
 
 	if (bridge->release_fn)
@@ -520,6 +566,7 @@ static void devm_pci_release_host_bridge_dev(struct device *dev)
 
 static void pci_release_host_bridge_dev(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	devm_pci_release_host_bridge_dev(dev);
 	pci_free_host_bridge(to_pci_host_bridge(dev));
 }
@@ -530,7 +577,9 @@ struct pci_host_bridge *pci_alloc_host_bridge(size_t priv)
 
 	bridge = kzalloc(sizeof(*bridge) + priv, GFP_KERNEL);
 	if (!bridge)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	INIT_LIST_HEAD(&bridge->windows);
 	bridge->dev.release = pci_release_host_bridge_dev;
@@ -546,7 +595,9 @@ struct pci_host_bridge *devm_pci_alloc_host_bridge(struct device *dev,
 
 	bridge = devm_kzalloc(dev, sizeof(*bridge) + priv, GFP_KERNEL);
 	if (!bridge)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	INIT_LIST_HEAD(&bridge->windows);
 	bridge->dev.release = devm_pci_release_host_bridge_dev;
@@ -557,6 +608,7 @@ EXPORT_SYMBOL(devm_pci_alloc_host_bridge);
 
 void pci_free_host_bridge(struct pci_host_bridge *bridge)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_free_resource_list(&bridge->windows);
 
 	kfree(bridge);
@@ -603,6 +655,7 @@ const unsigned char pcie_link_speed[] = {
 
 void pcie_update_link_speed(struct pci_bus *bus, u16 linksta)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bus->cur_bus_speed = pcie_link_speed[linksta & PCI_EXP_LNKSTA_CLS];
 }
 EXPORT_SYMBOL_GPL(pcie_update_link_speed);
@@ -620,7 +673,9 @@ static enum pci_bus_speed agp_speed(int agp3, int agpstat)
 	int index = 0;
 
 	if (agpstat & 4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		index = 3;
+}
 	else if (agpstat & 2)
 		index = 2;
 	else if (agpstat & 1)
@@ -645,7 +700,9 @@ static void pci_set_bus_speed(struct pci_bus *bus)
 
 	pos = pci_find_capability(bridge, PCI_CAP_ID_AGP);
 	if (!pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pos = pci_find_capability(bridge, PCI_CAP_ID_AGP3);
+}
 	if (pos) {
 		u32 agpstat, agpcmd;
 
@@ -714,11 +771,14 @@ static struct irq_domain *pci_host_bridge_msi_domain(struct pci_bus *bus)
 	 * directly through the fwnode_handle.
 	 */
 	if (!d) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct fwnode_handle *fwnode = pci_root_bus_fwnode(bus);
 
 		if (fwnode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			d = irq_find_matching_fwnode(fwnode,
 						     DOMAIN_BUS_PCI_MSI);
+}
 	}
 #endif
 
@@ -736,13 +796,17 @@ static void pci_set_bus_msi_domain(struct pci_bus *bus)
 	 * found or derive the domain from the host bridge.
 	 */
 	for (b = bus, d = NULL; !d && !pci_is_root_bus(b); b = b->parent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (b->self)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			d = dev_get_msi_domain(&b->self->dev);
+}
 	}
 
 	if (!d)
 		d = pci_host_bridge_msi_domain(b);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_set_msi_domain(&bus->dev, d);
 }
 
@@ -760,7 +824,9 @@ static int pci_register_host_bridge(struct pci_host_bridge *bridge)
 
 	bus = pci_alloc_bus(NULL);
 	if (!bus)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	bridge->bus = bus;
 
@@ -791,7 +857,9 @@ static int pci_register_host_bridge(struct pci_host_bridge *bridge)
 
 	err = device_register(&bridge->dev);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_device(&bridge->dev);
+}
 
 	bus->bridge = get_device(&bridge->dev);
 	device_enable_async_suspend(bus->bridge);
@@ -799,7 +867,9 @@ static int pci_register_host_bridge(struct pci_host_bridge *bridge)
 	pci_set_bus_msi_domain(bus);
 
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_dev_node(bus->bridge, pcibus_to_node(bus));
+}
 
 	bus->dev.class = &pcibus_class;
 	bus->dev.parent = bus->bridge;
@@ -817,7 +887,9 @@ static int pci_register_host_bridge(struct pci_host_bridge *bridge)
 	pci_create_legacy_files(bus);
 
 	if (parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(parent, "PCI host bridge to bus %s\n", name);
+}
 	else
 		pr_info("PCI host bridge to bus %s\n", name);
 
@@ -833,11 +905,15 @@ static int pci_register_host_bridge(struct pci_host_bridge *bridge)
 			pci_bus_add_resource(bus, res, 0);
 
 		if (offset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (resource_type(res) == IORESOURCE_IO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fmt = " (bus address [%#06llx-%#06llx])";
+}
 			else
 				fmt = " (bus address [%#010llx-%#010llx])";
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			snprintf(addr, sizeof(addr), fmt,
 				 (unsigned long long)(res->start - offset),
 				 (unsigned long long)(res->end - offset));
@@ -874,7 +950,9 @@ static struct pci_bus *pci_alloc_child_bus(struct pci_bus *parent,
 	 */
 	child = pci_alloc_bus(parent);
 	if (!child)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	child->parent = parent;
 	child->ops = parent->ops;
@@ -940,6 +1018,7 @@ struct pci_bus *pci_add_new_bus(struct pci_bus *parent, struct pci_dev *dev,
 
 	child = pci_alloc_child_bus(parent, dev, busnr);
 	if (child) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		down_write(&pci_bus_sem);
 		list_add_tail(&child->node, &parent->children);
 		up_write(&pci_bus_sem);
@@ -955,9 +1034,11 @@ static void pci_enable_crs(struct pci_dev *pdev)
 	/* Enable CRS Software Visibility if supported */
 	pcie_capability_read_word(pdev, PCI_EXP_RTCAP, &root_cap);
 	if (root_cap & PCI_EXP_RTCAP_CRSVIS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcie_capability_set_word(pdev, PCI_EXP_RTCTL,
 					 PCI_EXP_RTCTL_CRSSVE);
 }
+}
 
 /*
  * If it's a bridge, configure it and scan the bus behind it.
@@ -989,6 +1070,7 @@ int pci_scan_bridge(struct pci_bus *bus, struct pci_dev *dev, int max, int pass)
 	secondary = (buses >> 8) & 0xFF;
 	subordinate = (buses >> 16) & 0xFF;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&dev->dev, "scanning [bus %02x-%02x] behind bridge, pass %d\n",
 		secondary, subordinate, pass);
 
@@ -1197,6 +1279,7 @@ void set_pcie_port_type(struct pci_dev *pdev)
 	if (!pos)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pdev->pcie_cap = pos;
 	pci_read_config_word(pdev, pos + PCI_EXP_FLAGS, &reg16);
 	pdev->pcie_flags_reg = reg16;
@@ -1213,8 +1296,10 @@ void set_pcie_port_type(struct pci_dev *pdev)
 	if (type == PCI_EXP_TYPE_ROOT_PORT ||
 	    type == PCI_EXP_TYPE_PCIE_BRIDGE)
 		pdev->has_secondary_link = 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (type == PCI_EXP_TYPE_UPSTREAM ||
 		 type == PCI_EXP_TYPE_DOWNSTREAM) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = pci_upstream_bridge(pdev);
 
 		/*
@@ -1222,7 +1307,9 @@ void set_pcie_port_type(struct pci_dev *pdev)
 		 * Downstream Port), but we can't assume one exists.
 		 */
 		if (parent && !parent->has_secondary_link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pdev->has_secondary_link = 1;
+}
 	}
 }
 
@@ -1232,8 +1319,10 @@ void set_pcie_hotplug_bridge(struct pci_dev *pdev)
 
 	pcie_capability_read_dword(pdev, PCI_EXP_SLTCAP, &reg32);
 	if (reg32 & PCI_EXP_SLTCAP_HPC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pdev->is_hotplug_bridge = 1;
 }
+}
 
 static void set_pcie_thunderbolt(struct pci_dev *dev)
 {
@@ -1242,11 +1331,13 @@ static void set_pcie_thunderbolt(struct pci_dev *dev)
 
 	while ((vsec = pci_find_next_ext_capability(dev, vsec,
 						    PCI_EXT_CAP_ID_VNDR))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_read_config_dword(dev, vsec + PCI_VNDR_HEADER, &header);
 
 		/* Is the device part of a Thunderbolt controller? */
 		if (dev->vendor == PCI_VENDOR_ID_INTEL &&
 		    PCI_VNDR_HEADER_ID(header) == PCI_VSEC_ID_INTEL_TBT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->is_thunderbolt = 1;
 			return;
 		}
@@ -1307,10 +1398,15 @@ static int pci_cfg_space_size_ext(struct pci_dev *dev)
 	int pos = PCI_CFG_SPACE_SIZE;
 
 	if (pci_read_config_dword(dev, pos, &status) != PCIBIOS_SUCCESSFUL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PCI_CFG_SPACE_SIZE;
+}
 	if (status == 0xffffffff || pci_ext_cfg_is_aliased(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PCI_CFG_SPACE_SIZE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return PCI_CFG_SPACE_EXP_SIZE;
 }
 
@@ -1325,16 +1421,24 @@ int pci_cfg_space_size(struct pci_dev *dev)
 		return pci_cfg_space_size_ext(dev);
 
 	if (pci_is_pcie(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return pci_cfg_space_size_ext(dev);
+}
 
 	pos = pci_find_capability(dev, PCI_CAP_ID_PCIX);
 	if (!pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PCI_CFG_SPACE_SIZE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_read_config_dword(dev, pos + PCI_X_STATUS, &status);
 	if (status & (PCI_X_STATUS_266MHZ | PCI_X_STATUS_533MHZ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return pci_cfg_space_size_ext(dev);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return PCI_CFG_SPACE_SIZE;
 }
 
@@ -1380,7 +1484,9 @@ static int pci_intx_mask_broken(struct pci_dev *dev)
 	 * writable.  But we'll live with the misnomer for now.
 	 */
 	if (new != toggle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	return 0;
 }
 
@@ -1404,7 +1510,9 @@ int pci_setup_device(struct pci_dev *dev)
 	struct resource *res;
 
 	if (pci_read_config_byte(dev, PCI_HEADER_TYPE, &hdr_type))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	dev->sysdata = dev->bus->sysdata;
 	dev->dev.parent = dev->bus->bridge;
@@ -1445,8 +1553,10 @@ int pci_setup_device(struct pci_dev *dev)
 	class = dev->class >> 8;
 
 	if (dev->non_compliant_bars) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_read_config_word(dev, PCI_COMMAND, &cmd);
 		if (cmd & (PCI_COMMAND_IO | PCI_COMMAND_MEMORY)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_info(&dev->dev, "device has non-compliant BARs; disabling IO/MEM decoding\n");
 			cmd &= ~PCI_COMMAND_IO;
 			cmd &= ~PCI_COMMAND_MEMORY;
@@ -1475,6 +1585,7 @@ int pci_setup_device(struct pci_dev *dev)
 			u8 progif;
 			pci_read_config_byte(dev, PCI_CLASS_PROG, &progif);
 			if ((progif & 1) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				region.start = 0x1F0;
 				region.end = 0x1F7;
 				res = &dev->resource[0];
@@ -1490,7 +1601,9 @@ int pci_setup_device(struct pci_dev *dev)
 				dev_info(&dev->dev, "legacy IDE quirk: reg 0x14: %pR\n",
 					 res);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if ((progif & 4) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				region.start = 0x170;
 				region.end = 0x177;
 				res = &dev->resource[2];
@@ -1521,6 +1634,7 @@ int pci_setup_device(struct pci_dev *dev)
 		set_pcie_hotplug_bridge(dev);
 		pos = pci_find_capability(dev, PCI_CAP_ID_SSVID);
 		if (pos) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pci_read_config_word(dev, pos + PCI_SSVID_VENDOR_ID, &dev->subsystem_vendor);
 			pci_read_config_word(dev, pos + PCI_SSVID_DEVICE_ID, &dev->subsystem_device);
 		}
@@ -1529,6 +1643,7 @@ int pci_setup_device(struct pci_dev *dev)
 	case PCI_HEADER_TYPE_CARDBUS:		    /* CardBus bridge header */
 		if (class != PCI_CLASS_BRIDGE_CARDBUS)
 			goto bad;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_read_irq(dev);
 		pci_read_bases(dev, 1, 0);
 		pci_read_config_word(dev, PCI_CB_SUBSYSTEM_VENDOR_ID, &dev->subsystem_vendor);
@@ -1556,14 +1671,20 @@ static void pci_configure_mps(struct pci_dev *dev)
 	int mps, p_mps, rc;
 
 	if (!pci_is_pcie(dev) || !bridge || !pci_is_pcie(bridge))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mps = pcie_get_mps(dev);
 	p_mps = pcie_get_mps(bridge);
 
 	if (mps == p_mps)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pcie_bus_config == PCIE_BUS_TUNE_OFF) {
 		dev_warn(&dev->dev, "Max Payload Size %d, but upstream %s set to %d; if necessary, use \"pci=pcie_bus_safe\" and report a bug\n",
 			 mps, pci_name(bridge), p_mps);
@@ -1575,15 +1696,20 @@ static void pci_configure_mps(struct pci_dev *dev)
 	 * pcie_bus_configure_settings()
 	 */
 	if (pcie_bus_config != PCIE_BUS_DEFAULT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rc = pcie_set_mps(dev, p_mps);
 	if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(&dev->dev, "can't set Max Payload Size to %d; if necessary, use \"pci=pcie_bus_safe\" and report a bug\n",
 			 p_mps);
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_info(&dev->dev, "Max Payload Size set to %d (was %d, max %d)\n",
 		 p_mps, mps, 128 << dev->pcie_mpss);
 }
@@ -1601,7 +1727,9 @@ static void program_hpp_type0(struct pci_dev *dev, struct hpp_type0 *hpp)
 	u16 pci_cmd, pci_bctl;
 
 	if (!hpp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hpp = &pci_default_type0;
+}
 
 	if (hpp->revision > 1) {
 		dev_warn(&dev->dev,
@@ -1637,7 +1765,9 @@ static void program_hpp_type1(struct pci_dev *dev, struct hpp_type1 *hpp)
 	int pos;
 
 	if (!hpp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pos = pci_find_capability(dev, PCI_CAP_ID_PCIX);
 	if (!pos)
@@ -1648,6 +1778,7 @@ static void program_hpp_type1(struct pci_dev *dev, struct hpp_type1 *hpp)
 
 static bool pcie_root_rcb_set(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *rp = pcie_find_root_port(dev);
 	u16 lnkctl;
 
@@ -1667,7 +1798,9 @@ static void program_hpp_type2(struct pci_dev *dev, struct hpp_type2 *hpp)
 	u32 reg32;
 
 	if (!hpp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!pci_is_pcie(dev))
 		return;
@@ -1754,41 +1887,61 @@ int pci_configure_extended_tags(struct pci_dev *dev, void *ign)
 	int ret;
 
 	if (!pci_is_pcie(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = pcie_capability_read_dword(dev, PCI_EXP_DEVCAP, &cap);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(cap & PCI_EXP_DEVCAP_EXT_TAG))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = pcie_capability_read_word(dev, PCI_EXP_DEVCTL, &ctl);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	host = pci_find_host_bridge(dev->bus);
 	if (!host)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * If some device in the hierarchy doesn't handle Extended Tags
 	 * correctly, make sure they're disabled.
 	 */
 	if (host->no_ext_tags) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ctl & PCI_EXP_DEVCTL_EXT_TAG) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_info(&dev->dev, "disabling Extended Tags\n");
 			pcie_capability_clear_word(dev, PCI_EXP_DEVCTL,
 						   PCI_EXP_DEVCTL_EXT_TAG);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(ctl & PCI_EXP_DEVCTL_EXT_TAG)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, "enabling Extended Tags\n");
 		pcie_capability_set_word(dev, PCI_EXP_DEVCTL,
 					 PCI_EXP_DEVCTL_EXT_TAG);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1814,10 +1967,14 @@ static void pci_configure_relaxed_ordering(struct pci_dev *dev)
 
 	/* PCI_EXP_DEVICE_RELAX_EN is RsvdP in VFs */
 	if (dev->is_virtfn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!pcie_relaxed_ordering_enabled(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * For now, we only deal with Relaxed Ordering issues with Root
@@ -1825,9 +1982,13 @@ static void pci_configure_relaxed_ordering(struct pci_dev *dev)
 	 */
 	root = pci_find_pcie_root_port(dev);
 	if (!root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (root->dev_flags & PCI_DEV_FLAGS_NO_RELAXED_ORDERING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcie_capability_clear_word(dev, PCI_EXP_DEVCTL,
 					   PCI_EXP_DEVCTL_RELAX_EN);
 		dev_info(&dev->dev, "Disable Relaxed Ordering because the Root Port didn't support it\n");
@@ -1848,6 +2009,7 @@ static void pci_configure_device(struct pci_dev *dev)
 	if (ret)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	program_hpp_type2(dev, hpp.t2);
 	program_hpp_type1(dev, hpp.t1);
 	program_hpp_type0(dev, hpp.t0);
@@ -1855,6 +2017,7 @@ static void pci_configure_device(struct pci_dev *dev)
 
 static void pci_release_capabilities(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_vpd_release(dev);
 	pci_iov_release(dev);
 	pci_free_cap_save_buffers(dev);
@@ -1871,6 +2034,7 @@ static void pci_release_dev(struct device *dev)
 {
 	struct pci_dev *pci_dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_dev = to_pci_dev(dev);
 	pci_release_capabilities(pci_dev);
 	pci_release_of_node(pci_dev);
@@ -1887,7 +2051,9 @@ struct pci_dev *pci_alloc_dev(struct pci_bus *bus)
 
 	dev = kzalloc(sizeof(struct pci_dev), GFP_KERNEL);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	INIT_LIST_HEAD(&dev->bus_list);
 	dev->dev.type = &pci_dev_type;
@@ -1908,7 +2074,9 @@ static bool pci_bus_wait_crs(struct pci_bus *bus, int devfn, u32 *l,
 	int delay = 1;
 
 	if (!pci_bus_crs_vendor_id(*l))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;	/* not a CRS completion */
+}
 
 	if (!timeout)
 		return false;	/* CRS, but caller doesn't want to wait */
@@ -1950,7 +2118,9 @@ bool pci_bus_read_dev_vendor_id(struct pci_bus *bus, int devfn, u32 *l,
 				int timeout)
 {
 	if (pci_bus_read_config_dword(bus, devfn, PCI_VENDOR_ID, l))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/* some broken boards return 0 or ~0 if a slot is empty: */
 	if (*l == 0xffffffff || *l == 0x00000000 ||
@@ -1958,8 +2128,11 @@ bool pci_bus_read_dev_vendor_id(struct pci_bus *bus, int devfn, u32 *l,
 		return false;
 
 	if (pci_bus_crs_vendor_id(*l))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return pci_bus_wait_crs(bus, devfn, l, timeout);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 EXPORT_SYMBOL(pci_bus_read_dev_vendor_id);
@@ -1974,11 +2147,15 @@ static struct pci_dev *pci_scan_device(struct pci_bus *bus, int devfn)
 	u32 l;
 
 	if (!pci_bus_read_dev_vendor_id(bus, devfn, &l, 60*1000))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	dev = pci_alloc_dev(bus);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	dev->devfn = devfn;
 	dev->vendor = l & 0xffff;
@@ -1987,11 +2164,13 @@ static struct pci_dev *pci_scan_device(struct pci_bus *bus, int devfn)
 	pci_set_of_node(dev);
 
 	if (pci_setup_device(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_bus_put(dev->bus);
 		kfree(dev);
 		return NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev;
 }
 
@@ -2046,7 +2225,9 @@ static struct irq_domain *pci_dev_msi_domain(struct pci_dev *dev)
 	 */
 	d = dev_get_msi_domain(&dev->dev);
 	if (d)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return d;
+}
 
 	/*
 	 * Let's see if we have a firmware interface able to provide
@@ -2054,7 +2235,9 @@ static struct irq_domain *pci_dev_msi_domain(struct pci_dev *dev)
 	 */
 	d = pci_msi_get_device_domain(dev);
 	if (d)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return d;
+}
 
 	return NULL;
 }
@@ -2072,6 +2255,7 @@ static void pci_set_msi_domain(struct pci_dev *dev)
 	if (!d)
 		d = dev_get_msi_domain(&dev->bus->dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_set_msi_domain(&dev->dev, d);
 }
 
@@ -2130,13 +2314,16 @@ struct pci_dev *pci_scan_single_device(struct pci_bus *bus, int devfn)
 
 	dev = pci_get_slot(bus, devfn);
 	if (dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_dev_put(dev);
 		return dev;
 	}
 
 	dev = pci_scan_device(bus, devfn);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	pci_device_add(dev, bus);
 
@@ -2151,17 +2338,27 @@ static unsigned next_fn(struct pci_bus *bus, struct pci_dev *dev, unsigned fn)
 	unsigned next_fn;
 
 	if (pci_ari_enabled(bus)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pos = pci_find_ext_capability(dev, PCI_EXT_CAP_ID_ARI);
 		if (!pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_read_config_word(dev, pos + PCI_ARI_CAP, &cap);
 		next_fn = PCI_ARI_CAP_NFN(cap);
 		if (next_fn <= fn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;	/* protect against malformed list */
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return next_fn;
 	}
 
@@ -2169,6 +2366,7 @@ static unsigned next_fn(struct pci_bus *bus, struct pci_dev *dev, unsigned fn)
 	if (!dev || dev->multifunction)
 		return (fn + 1) % 8;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -2177,9 +2375,14 @@ static int only_one_child(struct pci_bus *bus)
 	struct pci_dev *parent = bus->self;
 
 	if (!parent || !pci_is_pcie(parent))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pci_pcie_type(parent) == PCI_EXP_TYPE_ROOT_PORT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/*
 	 * PCIe downstream ports are bridges that normally lead to only a
@@ -2190,6 +2393,7 @@ static int only_one_child(struct pci_bus *bus)
 	if (parent->has_secondary_link &&
 	    !pci_has_flag(PCI_SCAN_ALL_PCIE_DEVS))
 		return 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -2210,13 +2414,19 @@ int pci_scan_slot(struct pci_bus *bus, int devfn)
 	struct pci_dev *dev;
 
 	if (only_one_child(bus) && (devfn > 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0; /* Already scanned the entire slot */
+}
 
 	dev = pci_scan_single_device(bus, devfn);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (!dev->is_added)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nr++;
+}
 
 	for (fn = next_fn(bus, dev, 0); fn > 0; fn = next_fn(bus, dev, fn)) {
 		dev = pci_scan_single_device(bus, devfn + fn);
@@ -2229,7 +2439,9 @@ int pci_scan_slot(struct pci_bus *bus, int devfn)
 
 	/* only one slot has pcie device */
 	if (bus->self && nr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcie_aspm_init_link_state(bus->self);
+}
 
 	return nr;
 }
@@ -2240,7 +2452,9 @@ static int pcie_find_smpss(struct pci_dev *dev, void *data)
 	u8 *smpss = data;
 
 	if (!pci_is_pcie(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * We don't have a way to change MPS settings on devices that have
@@ -2272,6 +2486,7 @@ static void pcie_write_mps(struct pci_dev *dev, int mps)
 	int rc;
 
 	if (pcie_bus_config == PCIE_BUS_PERFORMANCE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mps = 128 << dev->pcie_mpss;
 
 		if (pci_pcie_type(dev) != PCI_EXP_TYPE_ROOT_PORT &&
@@ -2304,7 +2519,9 @@ static void pcie_write_mrrs(struct pci_dev *dev)
 	 * issues with setting MRRS to 0 on a number of devices.
 	 */
 	if (pcie_bus_config != PCIE_BUS_PERFORMANCE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* For Max performance, the MRRS must be set to the largest supported
 	 * value.  However, it cannot be configured larger than the MPS the
@@ -2336,7 +2553,9 @@ static int pcie_bus_configure_set(struct pci_dev *dev, void *data)
 	int mps, orig_mps;
 
 	if (!pci_is_pcie(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (pcie_bus_config == PCIE_BUS_TUNE_OFF ||
 	    pcie_bus_config == PCIE_BUS_DEFAULT)
@@ -2364,7 +2583,9 @@ void pcie_bus_configure_settings(struct pci_bus *bus)
 	u8 smpss = 0;
 
 	if (!bus->self)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!pci_is_pcie(bus->self))
 		return;
@@ -2402,6 +2623,7 @@ unsigned int pci_scan_child_bus(struct pci_bus *bus)
 	unsigned int devfn, pass, max = bus->busn_res.start;
 	struct pci_dev *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&bus->dev, "scanning bus\n");
 
 	/* Go find them, Rover! */
@@ -2416,6 +2638,7 @@ unsigned int pci_scan_child_bus(struct pci_bus *bus)
 	 * all PCI-to-PCI bridges on this bus.
 	 */
 	if (!bus->is_added) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(&bus->dev, "fixups for bus\n");
 		pcibios_fixup_bus(bus);
 		bus->is_added = 1;
@@ -2424,7 +2647,9 @@ unsigned int pci_scan_child_bus(struct pci_bus *bus)
 	for (pass = 0; pass < 2; pass++)
 		list_for_each_entry(dev, &bus->devices, bus_list) {
 			if (pci_is_bridge(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				max = pci_scan_bridge(bus, dev, max, pass);
+}
 		}
 
 	/*
@@ -2432,12 +2657,17 @@ unsigned int pci_scan_child_bus(struct pci_bus *bus)
 	 * number of buses.
 	 */
 	if (bus->self && bus->self->is_hotplug_bridge && pci_hotplug_bus_size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (max - bus->busn_res.start < pci_hotplug_bus_size - 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			max = bus->busn_res.start + pci_hotplug_bus_size - 1;
+}
 
 		/* Do not allocate more buses than we have room left */
 		if (max > bus->busn_res.end)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			max = bus->busn_res.end;
+}
 	}
 
 	/*
@@ -2461,6 +2691,7 @@ EXPORT_SYMBOL_GPL(pci_scan_child_bus);
  */
 int __weak pcibios_root_bridge_prepare(struct pci_host_bridge *bridge)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -2480,7 +2711,9 @@ struct pci_bus *pci_create_root_bus(struct device *parent, int bus,
 
 	bridge = pci_alloc_host_bridge(0);
 	if (!bridge)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	bridge->dev.parent = parent;
 
@@ -2511,7 +2744,9 @@ int pci_bus_insert_busn_res(struct pci_bus *b, int bus, int bus_max)
 	res->flags = IORESOURCE_BUS;
 
 	if (!pci_is_root_bus(b))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent_res = &b->parent->busn_res;
+}
 	else {
 		parent_res = get_pci_domain_busn_res(pci_domain_nr(b));
 		res->flags |= IORESOURCE_PCI_FIXED;
@@ -2536,7 +2771,9 @@ int pci_bus_update_busn_res_end(struct pci_bus *b, int bus_max)
 	int ret;
 
 	if (res->start > bus_max)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	size = bus_max - res->start + 1;
 	ret = adjust_resource(res, res->start, size);
@@ -2555,6 +2792,7 @@ void pci_bus_release_busn_res(struct pci_bus *b)
 	struct resource *res = &b->busn_res;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!res->flags || !res->parent)
 		return;
 
@@ -2572,7 +2810,9 @@ int pci_scan_root_bus_bridge(struct pci_host_bridge *bridge)
 	int max, bus, ret;
 
 	if (!bridge)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	resource_list_for_each_entry(window, &bridge->windows)
 		if (window->res->flags & IORESOURCE_BUS) {
@@ -2611,6 +2851,7 @@ struct pci_bus *pci_scan_root_bus(struct device *parent, int bus,
 	struct pci_bus *b;
 	int max;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	resource_list_for_each_entry(window, resources)
 		if (window->res->flags & IORESOURCE_BUS) {
 			found = true;
@@ -2648,6 +2889,7 @@ struct pci_bus *pci_scan_bus(int bus, struct pci_ops *ops,
 	pci_add_resource(&resources, &busn_resource);
 	b = pci_create_root_bus(NULL, bus, ops, sysdata, &resources);
 	if (b) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_scan_child_bus(b);
 	} else {
 		pci_free_resource_list(&resources);
@@ -2723,6 +2965,7 @@ EXPORT_SYMBOL_GPL(pci_unlock_rescan_remove);
 static int __init pci_sort_bf_cmp(const struct device *d_a,
 				  const struct device *d_b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct pci_dev *a = to_pci_dev(d_a);
 	const struct pci_dev *b = to_pci_dev(d_b);
 
@@ -2740,5 +2983,6 @@ static int __init pci_sort_bf_cmp(const struct device *d_a,
 
 void __init pci_sort_breadthfirst(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bus_sort_breadthfirst(&pci_bus_type, &pci_sort_bf_cmp);
 }
diff --git a/drivers/pci/proc.c b/drivers/pci/proc.c
index 58a662e..9d5558c 100644
--- a/drivers/pci/proc.c
+++ b/drivers/pci/proc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *	Procfs interface for the PCI bus.
@@ -20,6 +22,7 @@ static int proc_initialized;	/* = 0 */
 
 static loff_t proc_bus_pci_lseek(struct file *file, loff_t off, int whence)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev = PDE_DATA(file_inode(file));
 	return fixed_size_llseek(file, off, whence, dev->cfg_size);
 }
@@ -27,6 +30,7 @@ static loff_t proc_bus_pci_lseek(struct file *file, loff_t off, int whence)
 static ssize_t proc_bus_pci_read(struct file *file, char __user *buf,
 				 size_t nbytes, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev = PDE_DATA(file_inode(file));
 	unsigned int pos = *ppos;
 	unsigned int cnt, size;
@@ -111,6 +115,7 @@ static ssize_t proc_bus_pci_read(struct file *file, char __user *buf,
 static ssize_t proc_bus_pci_write(struct file *file, const char __user *buf,
 				  size_t nbytes, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *ino = file_inode(file);
 	struct pci_dev *dev = PDE_DATA(ino);
 	int pos = *ppos;
@@ -190,6 +195,7 @@ struct pci_filp_private {
 static long proc_bus_pci_ioctl(struct file *file, unsigned int cmd,
 			       unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev = PDE_DATA(file_inode(file));
 #ifdef HAVE_PCI_MMAP
 	struct pci_filp_private *fpriv = file->private_data;
@@ -233,6 +239,7 @@ static long proc_bus_pci_ioctl(struct file *file, unsigned int cmd,
 #ifdef HAVE_PCI_MMAP
 static int proc_bus_pci_mmap(struct file *file, struct vm_area_struct *vma)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *dev = PDE_DATA(file_inode(file));
 	struct pci_filp_private *fpriv = file->private_data;
 	int i, ret, write_combine = 0, res_bit = IORESOURCE_MEM;
@@ -273,6 +280,7 @@ static int proc_bus_pci_mmap(struct file *file, struct vm_area_struct *vma)
 
 static int proc_bus_pci_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_filp_private *fpriv = kmalloc(sizeof(*fpriv), GFP_KERNEL);
 
 	if (!fpriv)
@@ -288,6 +296,7 @@ static int proc_bus_pci_open(struct inode *inode, struct file *file)
 
 static int proc_bus_pci_release(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(file->private_data);
 	file->private_data = NULL;
 
@@ -318,6 +327,7 @@ static void *pci_seq_start(struct seq_file *m, loff_t *pos)
 	struct pci_dev *dev = NULL;
 	loff_t n = *pos;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_pci_dev(dev) {
 		if (!n--)
 			break;
@@ -336,6 +346,7 @@ static void *pci_seq_next(struct seq_file *m, void *v, loff_t *pos)
 
 static void pci_seq_stop(struct seq_file *m, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (v) {
 		struct pci_dev *dev = v;
 		pci_dev_put(dev);
@@ -349,7 +360,9 @@ static int show_device(struct seq_file *m, void *v)
 	int i;
 
 	if (dev == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	drv = pci_dev_driver(dev);
 	seq_printf(m, "%02x%02x\t%04x%04x\t%x",
@@ -397,10 +410,13 @@ int pci_proc_attach_device(struct pci_dev *dev)
 	char name[16];
 
 	if (!proc_initialized)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;
+}
 
 	if (!bus->procdir) {
 		if (pci_proc_domain(bus)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sprintf(name, "%04x:%02x", pci_domain_nr(bus),
 					bus->number);
 		} else {
@@ -408,14 +424,18 @@ int pci_proc_attach_device(struct pci_dev *dev)
 		}
 		bus->procdir = proc_mkdir(name, proc_bus_pci_dir);
 		if (!bus->procdir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	}
 
 	sprintf(name, "%02x.%x", PCI_SLOT(dev->devfn), PCI_FUNC(dev->devfn));
 	e = proc_create_data(name, S_IFREG | S_IRUGO | S_IWUSR, bus->procdir,
 			     &proc_bus_pci_operations, dev);
 	if (!e)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	proc_set_size(e, dev->cfg_size);
 	dev->procent = e;
 
@@ -424,6 +444,7 @@ int pci_proc_attach_device(struct pci_dev *dev)
 
 int pci_proc_detach_device(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	proc_remove(dev->procent);
 	dev->procent = NULL;
 	return 0;
@@ -431,12 +452,14 @@ int pci_proc_detach_device(struct pci_dev *dev)
 
 int pci_proc_detach_bus(struct pci_bus *bus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	proc_remove(bus->procdir);
 	return 0;
 }
 
 static int proc_bus_pci_dev_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &proc_bus_pci_devices_op);
 }
 
diff --git a/drivers/pci/quirks.c b/drivers/pci/quirks.c
index d188247..d92b835 100644
--- a/drivers/pci/quirks.c
+++ b/drivers/pci/quirks.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  This file contains work-arounds for many known PCI hardware
@@ -49,6 +51,7 @@ DECLARE_PCI_FIXUP_CLASS_EARLY(PCI_ANY_ID, PCI_ANY_ID,
  */
 static void quirk_mellanox_tavor(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->broken_parity_status = 1;	/* This device gives false positives */
 }
 DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MELLANOX, PCI_DEVICE_ID_MELLANOX_TAVOR, quirk_mellanox_tavor);
@@ -84,6 +87,7 @@ DECLARE_PCI_FIXUP_RESUME(PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_82441,	quirk_p
 
 static void quirk_isa_dma_hangs(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!isa_dma_bridge_buggy) {
 		isa_dma_bridge_buggy = 1;
 		dev_info(&dev->dev, "Activating ISA DMA hang workarounds\n");
@@ -115,6 +119,7 @@ static void quirk_tigerpoint_bm_sts(struct pci_dev *dev)
 	pm1a = inw(pmbase);
 
 	if (pm1a & 0x10) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, FW_BUG "TigerPoint LPC.BM_STS cleared\n");
 		outw(0x10, pmbase);
 	}
@@ -126,6 +131,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_TGP_LPC, quirk
  */
 static void quirk_nopcipci(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((pci_pci_problems & PCIPCI_FAIL) == 0) {
 		dev_info(&dev->dev, "Disabling direct PCI/PCI transfers\n");
 		pci_pci_problems |= PCIPCI_FAIL;
@@ -151,6 +157,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_AMD,	PCI_DEVICE_ID_AMD_8151_0,	quirk_nopci
  */
 static void quirk_triton(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((pci_pci_problems&PCIPCI_TRITON) == 0) {
 		dev_info(&dev->dev, "Limiting direct PCI/PCI transfers\n");
 		pci_pci_problems |= PCIPCI_TRITON;
@@ -229,6 +236,7 @@ DECLARE_PCI_FIXUP_RESUME(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_8361,		quirk_viala
  */
 static void quirk_viaetbf(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((pci_pci_problems&PCIPCI_VIAETBF) == 0) {
 		dev_info(&dev->dev, "Limiting direct PCI/PCI transfers\n");
 		pci_pci_problems |= PCIPCI_VIAETBF;
@@ -238,6 +246,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_82C597_0,	quirk_via
 
 static void quirk_vsfx(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((pci_pci_problems&PCIPCI_VSFX) == 0) {
 		dev_info(&dev->dev, "Limiting direct PCI/PCI transfers\n");
 		pci_pci_problems |= PCIPCI_VSFX;
@@ -253,6 +262,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_82C576,	quirk_vsfx)
  */
 static void quirk_alimagik(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((pci_pci_problems&PCIPCI_ALIMAGIK) == 0) {
 		dev_info(&dev->dev, "Limiting direct PCI/PCI transfers\n");
 		pci_pci_problems |= PCIPCI_ALIMAGIK|PCIPCI_TRITON;
@@ -267,6 +277,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_AL,	PCI_DEVICE_ID_AL_M1651,		quirk_alimagi
  */
 static void quirk_natoma(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((pci_pci_problems&PCIPCI_NATOMA) == 0) {
 		dev_info(&dev->dev, "Limiting direct PCI/PCI transfers\n");
 		pci_pci_problems |= PCIPCI_NATOMA;
@@ -285,6 +296,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_82443BX_2,	quir
  */
 static void quirk_citrine(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->cfg_size = 0xA0;
 }
 DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_IBM,	PCI_DEVICE_ID_IBM_CITRINE,	quirk_citrine);
@@ -295,6 +307,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_IBM,	PCI_DEVICE_ID_IBM_CITRINE,	quirk_cit
  */
 static void quirk_nfp6000(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->cfg_size = 0x600;
 }
 DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_NETRONOME,	PCI_DEVICE_ID_NETRONOME_NFP4000,	quirk_nfp6000);
@@ -306,6 +319,7 @@ static void quirk_extend_bar_to_page(struct pci_dev *dev)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i <= PCI_STD_RESOURCE_END; i++) {
 		struct resource *r = &dev->resource[i];
 
@@ -328,6 +342,7 @@ static void quirk_s3_64M(struct pci_dev *dev)
 {
 	struct resource *r = &dev->resource[0];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((r->start & 0x3ffffff) || r->end != r->start + 0x3ffffff) {
 		r->flags |= IORESOURCE_UNSET;
 		r->start = 0;
@@ -347,7 +362,9 @@ static void quirk_io(struct pci_dev *dev, int pos, unsigned size,
 	pci_read_config_dword(dev, PCI_BASE_ADDRESS_0 + (pos << 2), &region);
 
 	if (!region)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	res->name = pci_name(dev);
 	res->flags = region & ~PCI_BASE_ADDRESS_IO_MASK;
@@ -377,6 +394,7 @@ static void quirk_cs5536_vsa(struct pci_dev *dev)
 {
 	static char *name = "CS5536 ISA bridge";
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pci_resource_len(dev, 0) != 8) {
 		quirk_io(dev, 0,   8, name);	/* SMB */
 		quirk_io(dev, 1, 256, name);	/* GPIO */
@@ -398,7 +416,9 @@ static void quirk_io_region(struct pci_dev *dev, int port,
 	region &= ~(size - 1);
 
 	if (!region)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	res->name = pci_name(dev);
 	res->flags = IORESOURCE_IO;
@@ -418,6 +438,7 @@ static void quirk_io_region(struct pci_dev *dev, int port,
  */
 static void quirk_ati_exploding_mce(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_info(&dev->dev, "ATI Northbridge, reserving I/O ports 0x3b0 to 0x3bb\n");
 	/* Mae rhaid i ni beidio ag edrych ar y lleoliadiau I/O hyn */
 	request_region(0x3b0, 0x0C, "RadeonIGP");
@@ -460,6 +481,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_NL_USB,
  */
 static void quirk_ali7101_acpi(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	quirk_io_region(dev, 0xE0, 64, PCI_BRIDGE_RESOURCES, "ali7101 ACPI");
 	quirk_io_region(dev, 0xE2, 32, PCI_BRIDGE_RESOURCES+1, "ali7101 SMB");
 }
@@ -472,7 +494,9 @@ static void piix4_io_quirk(struct pci_dev *dev, const char *name, unsigned int p
 
 	pci_read_config_dword(dev, port, &devres);
 	if ((devres & enable) != enable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	mask = (devres >> 16) & 15;
 	base = devres & 0xffff;
 	size = 16;
@@ -499,7 +523,9 @@ static void piix4_mem_quirk(struct pci_dev *dev, const char *name, unsigned int
 
 	pci_read_config_dword(dev, port, &devres);
 	if ((devres & enable) != enable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	base = devres & 0xffff0000;
 	mask = (devres & 0x3f) << 16;
 	size = 128 << 16;
@@ -541,6 +567,7 @@ static void quirk_piix4_acpi(struct pci_dev *dev)
 
 	/* Device 12 enabled? */
 	if (res_a & (1 << 29)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		piix4_io_quirk(dev, "PIIX4 devres E", 0x68, 1 << 20);
 		piix4_mem_quirk(dev, "PIIX4 devres F", 0x6c, 1 << 7);
 	}
@@ -585,8 +612,10 @@ static void quirk_ich4_lpc_acpi(struct pci_dev *dev)
 
 	pci_read_config_byte(dev, ICH_ACPI_CNTL, &enable);
 	if (enable & ICH4_ACPI_EN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		quirk_io_region(dev, ICH_PMBASE, 128, PCI_BRIDGE_RESOURCES,
 				 "ICH4 ACPI/GPIO/TCO");
+}
 
 	pci_read_config_byte(dev, ICH4_GPIO_CNTL, &enable);
 	if (enable & ICH4_GPIO_EN)
@@ -615,9 +644,11 @@ static void ich6_lpc_acpi_gpio(struct pci_dev *dev)
 
 	pci_read_config_byte(dev, ICH6_GPIO_CNTL, &enable);
 	if (enable & ICH6_GPIO_EN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		quirk_io_region(dev, ICH6_GPIOBASE, 64, PCI_BRIDGE_RESOURCES+1,
 				"ICH6 GPIO");
 }
+}
 
 static void ich6_lpc_generic_decode(struct pci_dev *dev, unsigned reg, const char *name, int dynsize)
 {
@@ -628,7 +659,9 @@ static void ich6_lpc_generic_decode(struct pci_dev *dev, unsigned reg, const cha
 
 	/* Enabled? */
 	if (!(val & 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	base = val & 0xfffc;
 	if (dynsize) {
 		/*
@@ -714,6 +747,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL,   PCI_DEVICE_ID_INTEL_ICH10_1, qui
  */
 static void quirk_vt82c586_acpi(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->revision & 0x10)
 		quirk_io_region(dev, 0x48, 256, PCI_BRIDGE_RESOURCES,
 				"vt82c586 ACPI");
@@ -728,6 +762,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_82C586_3,	quirk_vt
  */
 static void quirk_vt82c686_acpi(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	quirk_vt82c586_acpi(dev);
 
 	quirk_io_region(dev, 0x70, 128, PCI_BRIDGE_RESOURCES+1,
@@ -744,6 +779,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_82C686_4,	quirk_vt
  */
 static void quirk_vt8235_acpi(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	quirk_io_region(dev, 0x88, 128, PCI_BRIDGE_RESOURCES, "vt8235 PM");
 	quirk_io_region(dev, 0xd0, 16, PCI_BRIDGE_RESOURCES+1, "vt8235 SMB");
 }
@@ -759,6 +795,7 @@ static void quirk_xio2000a(struct pci_dev *dev)
 	u16 command;
 
 	dev_warn(&dev->dev, "TI XIO2000a quirk detected; secondary bus fast back-to-back transfers disabled\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(pdev, &dev->subordinate->devices, bus_list) {
 		pci_read_config_word(pdev, PCI_COMMAND, &command);
 		if (command & PCI_COMMAND_FAST_BACK)
@@ -784,7 +821,9 @@ static void quirk_via_ioapic(struct pci_dev *dev)
 	u8 tmp;
 
 	if (nr_ioapics < 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tmp = 0;    /* nothing routed to external APIC */
+}
 	else
 		tmp = 0x1f; /* all known bits (4-0) routed to external APIC */
 
@@ -810,6 +849,7 @@ static void quirk_via_vt8237_bypass_apic_deassert(struct pci_dev *dev)
 
 	pci_read_config_byte(dev, 0x5B, &misc_control2);
 	if (!(misc_control2 & BYPASS_APIC_DEASSERT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, "Bypassing VIA 8237 APIC De-Assert Message\n");
 		pci_write_config_byte(dev, 0x5B, misc_control2|BYPASS_APIC_DEASSERT);
 	}
@@ -828,6 +868,7 @@ DECLARE_PCI_FIXUP_RESUME_EARLY(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_8237,		quirk
  */
 static void quirk_amd_ioapic(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->revision >= 0x02) {
 		dev_warn(&dev->dev, "I/O APIC: AMD Erratum #22 may be present. In the event of instability try\n");
 		dev_warn(&dev->dev, "        : booting with the \"noapic\" option\n");
@@ -853,6 +894,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_CAVIUM, 0xa018, quirk_cavium_sriov_rnm_lin
  */
 static void quirk_amd_8131_mmrbc(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->subordinate && dev->revision <= 0x12) {
 		dev_info(&dev->dev, "AMD8131 rev %x detected; disabling PCI-X MMRBC\n",
 			 dev->revision);
@@ -877,6 +919,7 @@ static void quirk_via_acpi(struct pci_dev *d)
 	u8 irq;
 	pci_read_config_byte(d, 0x42, &irq);
 	irq &= 0xf;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (irq && (irq != 2))
 		d->irq = irq;
 }
@@ -944,7 +987,9 @@ static void quirk_via_vlink(struct pci_dev *dev)
 
 	/* Check if we have VLink at all */
 	if (via_vlink_dev_lo == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	new_irq = dev->irq;
 
@@ -978,6 +1023,7 @@ DECLARE_PCI_FIXUP_ENABLE(PCI_VENDOR_ID_VIA, PCI_ANY_ID, quirk_via_vlink);
  */
 static void quirk_vt82c598_id(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_write_config_byte(dev, 0xfc, 0);
 	pci_read_config_word(dev, PCI_DEVICE_ID, &dev->device);
 }
@@ -991,6 +1037,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_82C597_0,	quirk_vt
  */
 static void quirk_cardbus_legacy(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_write_config_dword(dev, PCI_CB_LEGACY_MODE_BASE, 0);
 }
 DECLARE_PCI_FIXUP_CLASS_FINAL(PCI_ANY_ID, PCI_ANY_ID,
@@ -1010,6 +1057,7 @@ static void quirk_amd_ordering(struct pci_dev *dev)
 	u32 pcic;
 	pci_read_config_dword(dev, 0x4C, &pcic);
 	if ((pcic & 6) != 6) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pcic |= 6;
 		dev_warn(&dev->dev, "BIOS failed to enable PCI standards compliance; fixing this error\n");
 		pci_write_config_dword(dev, 0x4C, pcic);
@@ -1046,6 +1094,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_DUNORD,	PCI_DEVICE_ID_DUNORD_I3000,	quirk
  */
 static void quirk_transparent_bridge(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->transparent = 1;
 }
 DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_82380FB,	quirk_transparent_bridge);
@@ -1063,6 +1112,7 @@ static void quirk_mediagx_master(struct pci_dev *dev)
 
 	pci_read_config_byte(dev, 0x41, &reg);
 	if (reg & 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		reg &= ~2;
 		dev_info(&dev->dev, "Fixup for MediaGX/Geode Slave Disconnect Boundary (0x41=0x%02x)\n",
 			 reg);
@@ -1082,7 +1132,9 @@ static void quirk_disable_pxb(struct pci_dev *pdev)
 	u16 config;
 
 	if (pdev->revision != 0x04)		/* Only C0 requires this */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	pci_read_config_word(pdev, 0x40, &config);
 	if (config & (1<<6)) {
 		config &= ~(1<<6);
@@ -1100,6 +1152,7 @@ static void quirk_amd_ide_mode(struct pci_dev *pdev)
 
 	pci_read_config_byte(pdev, PCI_CLASS_DEVICE, &tmp);
 	if (tmp == 0x01) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_read_config_byte(pdev, 0x40, &tmp);
 		pci_write_config_byte(pdev, 0x40, tmp|1);
 		pci_write_config_byte(pdev, 0x9, 1);
@@ -1127,6 +1180,7 @@ static void quirk_svwks_csb5ide(struct pci_dev *pdev)
 	u8 prog;
 	pci_read_config_byte(pdev, PCI_CLASS_PROG, &prog);
 	if (prog & 5) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prog &= ~5;
 		pdev->class &= ~5;
 		pci_write_config_byte(pdev, PCI_CLASS_PROG, prog);
@@ -1144,6 +1198,7 @@ static void quirk_ide_samemode(struct pci_dev *pdev)
 
 	pci_read_config_byte(pdev, PCI_CLASS_PROG, &prog);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (((prog & 1) && !(prog & 4)) || ((prog & 4) && !(prog & 1))) {
 		dev_info(&pdev->dev, "IDE mode mismatch; forcing legacy mode\n");
 		prog &= ~5;
@@ -1159,6 +1214,7 @@ DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82801CA_10, qui
 
 static void quirk_no_ata_d3(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pdev->dev_flags |= PCI_DEV_FLAGS_NO_D3;
 }
 /* Quirk the legacy ATA devices only. The AHCI ones are ok */
@@ -1179,6 +1235,7 @@ DECLARE_PCI_FIXUP_CLASS_EARLY(PCI_VENDOR_ID_VIA, PCI_ANY_ID,
  */
 static void quirk_eisa_bridge(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->class = PCI_CLASS_BRIDGE_EISA << 8;
 }
 DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_82375,	quirk_eisa_bridge);
@@ -1213,6 +1270,7 @@ static int asus_hides_smbus;
 
 static void asus_hides_smbus_hostbridge(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(dev->subsystem_vendor == PCI_VENDOR_ID_ASUSTEK)) {
 		if (dev->device == PCI_DEVICE_ID_INTEL_82845_HB)
 			switch (dev->subsystem_device) {
@@ -1349,7 +1407,9 @@ static void asus_hides_smbus_lpc(struct pci_dev *dev)
 	u16 val;
 
 	if (likely(!asus_hides_smbus))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pci_read_config_word(dev, 0xF2, &val);
 	if (val & 0x8) {
@@ -1384,7 +1444,9 @@ static void asus_hides_smbus_lpc_ich6_suspend(struct pci_dev *dev)
 	u32 rcba;
 
 	if (likely(!asus_hides_smbus))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	WARN_ON(asus_rcba_base);
 
 	pci_read_config_dword(dev, 0xF0, &rcba);
@@ -1398,6 +1460,7 @@ static void asus_hides_smbus_lpc_ich6_resume_early(struct pci_dev *dev)
 {
 	u32 val;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (likely(!asus_hides_smbus || !asus_rcba_base))
 		return;
 	/* read the Function Disable register, dword mode only */
@@ -1407,6 +1470,7 @@ static void asus_hides_smbus_lpc_ich6_resume_early(struct pci_dev *dev)
 
 static void asus_hides_smbus_lpc_ich6_resume(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (likely(!asus_hides_smbus || !asus_rcba_base))
 		return;
 	iounmap(asus_rcba_base);
@@ -1416,6 +1480,7 @@ static void asus_hides_smbus_lpc_ich6_resume(struct pci_dev *dev)
 
 static void asus_hides_smbus_lpc_ich6(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	asus_hides_smbus_lpc_ich6_suspend(dev);
 	asus_hides_smbus_lpc_ich6_resume_early(dev);
 	asus_hides_smbus_lpc_ich6_resume(dev);
@@ -1433,6 +1498,7 @@ static void quirk_sis_96x_smbus(struct pci_dev *dev)
 	u8 val = 0;
 	pci_read_config_byte(dev, 0x77, &val);
 	if (val & 0x10) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, "Enabling SiS 96x SMBus\n");
 		pci_write_config_byte(dev, 0x77, val & ~0x10);
 	}
@@ -1464,6 +1530,7 @@ static void quirk_sis_503(struct pci_dev *dev)
 	pci_read_config_byte(dev, SIS_DETECT_REGISTER, &reg);
 	pci_write_config_byte(dev, SIS_DETECT_REGISTER, reg | (1 << 6));
 	pci_read_config_word(dev, PCI_DEVICE_ID, &devid);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (((devid & 0xfff0) != 0x0960) && (devid != 0x0018)) {
 		pci_write_config_byte(dev, SIS_DETECT_REGISTER, reg);
 		return;
@@ -1493,6 +1560,7 @@ static void asus_hides_ac97_lpc(struct pci_dev *dev)
 	int asus_hides_ac97 = 0;
 
 	if (likely(dev->subsystem_vendor == PCI_VENDOR_ID_ASUSTEK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->device == PCI_DEVICE_ID_VIA_8237)
 			asus_hides_ac97 = 1;
 	}
@@ -1528,7 +1596,9 @@ static void quirk_jmicron_ata(struct pci_dev *pdev)
 
 	/* Only poke fn 0 */
 	if (PCI_FUNC(pdev->devfn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pci_read_config_dword(pdev, 0x40, &conf1);
 	pci_read_config_dword(pdev, 0x80, &conf5);
@@ -1597,6 +1667,7 @@ DECLARE_PCI_FIXUP_RESUME_EARLY(PCI_VENDOR_ID_JMICRON, PCI_DEVICE_ID_JMICRON_JMB3
 
 static void quirk_jmicron_async_suspend(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->multifunction) {
 		device_disable_async_suspend(&dev->dev);
 		dev_info(&dev->dev, "async suspend disabled to avoid multi-function power-on ordering issue\n");
@@ -1613,7 +1684,9 @@ static void quirk_alder_ioapic(struct pci_dev *pdev)
 	int i;
 
 	if ((pdev->class >> 8) != 0xff00)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* the first BAR is the location of the IO APIC...we must
 	 * not touch this (and it's already covered by the fixmap), so
@@ -1631,6 +1704,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_EESSC,	quirk_a
 
 static void quirk_pcie_mch(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pdev->no_msi = 1;
 }
 DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_E7520_MCH,	quirk_pcie_mch);
@@ -1645,6 +1719,7 @@ DECLARE_PCI_FIXUP_CLASS_FINAL(PCI_VENDOR_ID_HUAWEI, 0x1610, PCI_CLASS_BRIDGE_PCI
  */
 static void quirk_pcie_pxh(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->no_msi = 1;
 	dev_warn(&dev->dev, "PXH quirk detected; SHPC device MSI disabled\n");
 }
@@ -1660,6 +1735,7 @@ DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_PXHV,	quirk_pci
  */
 static void quirk_intel_pcie_pm(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_pm_d3_delay = 120;
 	dev->no_d1d2 = 1;
 }
@@ -1688,6 +1764,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_INTEL,	0x260b, quirk_intel_pcie_pm);
 
 static void quirk_radeon_pm(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->subsystem_vendor == PCI_VENDOR_ID_APPLE &&
 	    dev->subsystem_device == 0x00e2) {
 		if (dev->d3_delay < 20) {
@@ -1702,6 +1779,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_ATI, 0x6741, quirk_radeon_pm);
 #ifdef CONFIG_X86_IO_APIC
 static int dmi_disable_ioapicreroute(const struct dmi_system_id *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	noioapicreroute = 1;
 	pr_info("%s detected: disable boot interrupt reroute\n", d->ident);
 
@@ -1731,6 +1809,7 @@ static const struct dmi_system_id boot_interrupt_dmi_table[] = {
  */
 static void quirk_reroute_to_boot_interrupts_intel(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dmi_check_system(boot_interrupt_dmi_table);
 	if (noioapicquirk || noioapicreroute)
 		return;
@@ -1773,7 +1852,9 @@ static void quirk_disable_intel_boot_interrupt(struct pci_dev *dev)
 	u16 pci_config_word;
 
 	if (noioapicquirk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pci_read_config_word(dev, INTEL_6300_IOAPIC_ABAR, &pci_config_word);
 	pci_config_word |= INTEL_6300_DISABLE_BOOT_IRQ;
@@ -1799,7 +1880,9 @@ static void quirk_disable_broadcom_boot_interrupt(struct pci_dev *dev)
 	u8 irq;
 
 	if (noioapicquirk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pci_read_config_dword(dev, BC_HT1000_FEATURE_REG, &pci_config_dword);
 	pci_write_config_dword(dev, BC_HT1000_FEATURE_REG, pci_config_dword |
@@ -1836,7 +1919,9 @@ static void quirk_disable_amd_813x_boot_interrupt(struct pci_dev *dev)
 	u32 pci_config_dword;
 
 	if (noioapicquirk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if ((dev->revision == AMD_813X_REV_B1) ||
 	    (dev->revision == AMD_813X_REV_B2))
 		return;
@@ -1860,7 +1945,9 @@ static void quirk_disable_amd_8111_boot_interrupt(struct pci_dev *dev)
 	u16 pci_config_word;
 
 	if (noioapicquirk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pci_read_config_word(dev, AMD_8111_PCI_IRQ_ROUTING, &pci_config_word);
 	if (!pci_config_word) {
@@ -1886,6 +1973,7 @@ static void quirk_tc86c001_ide(struct pci_dev *dev)
 	struct resource *r = &dev->resource[0];
 
 	if (r->start & 0x8) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		r->flags |= IORESOURCE_UNSET;
 		r->start = 0;
 		r->end = 0xf;
@@ -1908,7 +1996,9 @@ static void quirk_plx_pci9050(struct pci_dev *dev)
 
 	/* Fixed in revision 2 (PCI 9052). */
 	if (dev->revision >= 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	for (bar = 0; bar <= 1; bar++)
 		if (pci_resource_len(dev, bar) == 0x80 &&
 		    (pci_resource_start(dev, bar) & 0x80)) {
@@ -1980,7 +2070,9 @@ static void quirk_f0_vpd_link(struct pci_dev *dev)
 	struct pci_dev *f0;
 
 	if (!PCI_FUNC(dev->devfn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	f0 = pci_get_slot(dev->bus, PCI_DEVFN(PCI_SLOT(dev->devfn), 0));
 	if (!f0)
@@ -2067,6 +2159,7 @@ DECLARE_PCI_FIXUP_CLASS_FINAL(PCI_VENDOR_ID_INTEL, PCI_ANY_ID,
  */
 static void quirk_disable_aspm_l0s(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_info(&dev->dev, "Disabling L0s\n");
 	pci_disable_link_state(dev, PCIE_LINK_STATE_L0S);
 }
@@ -2094,7 +2187,9 @@ static void fixup_rev1_53c810(struct pci_dev *dev)
 	 * they don't get their resources remapped. Fix that here.
 	 */
 	if (class)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	dev->class = PCI_CLASS_STORAGE_SCSI << 8;
 	dev_info(&dev->dev, "NCR 53c810 rev 1 PCI class overridden (%#08x -> %#08x)\n",
@@ -2110,6 +2205,7 @@ static void quirk_p64h2_1k_io(struct pci_dev *dev)
 	pci_read_config_word(dev, 0x40, &en1k);
 
 	if (en1k & 0x200) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, "Enable I/O Space to 1KB granularity\n");
 		dev->io_window_1k = 1;
 	}
@@ -2124,6 +2220,7 @@ static void quirk_nvidia_ck804_pcie_aer_ext_cap(struct pci_dev *dev)
 {
 	uint8_t b;
 	if (pci_read_config_byte(dev, 0xf41, &b) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(b & 0x20)) {
 			pci_write_config_byte(dev, 0xf41, b | 0x20);
 			dev_info(&dev->dev, "Linking AER extended capability\n");
@@ -2194,6 +2291,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_VIA, 0x324e, quirk_via_cx700_pci_parking_c
  */
 static void quirk_blacklist_vpd(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->vpd) {
 		dev->vpd->len = 0;
 		dev_warn(&dev->dev, FW_BUG "disabling VPD access (can't determine size of non-standard VPD format)\n");
@@ -2270,6 +2368,7 @@ static void quirk_brcm_5719_limit_mrrs(struct pci_dev *dev)
 
 	/* Only CAP the MRRS if the device is a 5719 A0 */
 	if (rev == 0x05719000) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int readrq = pcie_get_readrq(dev);
 		if (readrq > 2048)
 			pcie_set_readrq(dev, 2048);
@@ -2311,6 +2410,7 @@ static void quirk_unhide_mch_dev6(struct pci_dev *dev)
 {
 	u8 reg;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pci_read_config_byte(dev, 0xF4, &reg) == 0 && !(reg & 0x02)) {
 		dev_info(&dev->dev, "Enabling MCH 'Overflow' Device\n");
 		pci_write_config_byte(dev, 0xF4, reg | 0x02);
@@ -2350,6 +2450,7 @@ DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_PLX, 0x8624, quirk_tile_plx_gen1);
  */
 static void quirk_disable_all_msi(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_no_msi();
 	dev_warn(&dev->dev, "MSI quirk detected; MSI disabled\n");
 }
@@ -2365,6 +2466,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_SI, 0x0761, quirk_disable_all_msi);
 /* Disable MSI on chipsets that are known to not support it */
 static void quirk_disable_msi(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->subordinate) {
 		dev_warn(&dev->dev, "MSI quirk detected; subordinate MSI disabled\n");
 		dev->subordinate->bus_flags |= PCI_BUS_FLAGS_NO_MSI;
@@ -2386,6 +2488,7 @@ static void quirk_amd_780_apc_msi(struct pci_dev *host_bridge)
 
 	apc_bridge = pci_get_slot(host_bridge->bus, PCI_DEVFN(1, 0));
 	if (apc_bridge) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (apc_bridge->device == 0x9602)
 			quirk_disable_msi(apc_bridge);
 		pci_dev_put(apc_bridge);
@@ -2401,6 +2504,7 @@ static int msi_ht_cap_enabled(struct pci_dev *dev)
 	int pos, ttl = PCI_FIND_CAP_TTL;
 
 	pos = pci_find_ht_capability(dev, HT_CAPTYPE_MSI_MAPPING);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (pos && ttl--) {
 		u8 flags;
 
@@ -2421,6 +2525,7 @@ static int msi_ht_cap_enabled(struct pci_dev *dev)
 /* Check the hypertransport MSI mapping to know whether MSI is enabled or not */
 static void quirk_msi_ht_cap(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->subordinate && !msi_ht_cap_enabled(dev)) {
 		dev_warn(&dev->dev, "MSI quirk detected; subordinate MSI disabled\n");
 		dev->subordinate->bus_flags |= PCI_BUS_FLAGS_NO_MSI;
@@ -2437,7 +2542,9 @@ static void quirk_nvidia_ck804_msi_ht_cap(struct pci_dev *dev)
 	struct pci_dev *pdev;
 
 	if (!dev->subordinate)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* check HT MSI cap on this chipset and the root one.
 	 * a single one having MSI is enough to be sure that MSI are supported.
@@ -2460,6 +2567,7 @@ static void ht_enable_msi_mapping(struct pci_dev *dev)
 	int pos, ttl = PCI_FIND_CAP_TTL;
 
 	pos = pci_find_ht_capability(dev, HT_CAPTYPE_MSI_MAPPING);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (pos && ttl--) {
 		u8 flags;
 
@@ -2487,6 +2595,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_8132_BRIDGE,
  */
 static void nvenet_msi_disable(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const char *board_name = dmi_get_system_info(DMI_BOARD_NAME);
 
 	if (board_name &&
@@ -2515,7 +2624,9 @@ static void nvbridge_check_legacy_irq_routing(struct pci_dev *dev)
 	u32 cfg;
 
 	if (!pci_find_capability(dev, PCI_CAP_ID_HT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pci_read_config_dword(dev, 0x74, &cfg);
 
@@ -2541,6 +2652,7 @@ static int ht_check_msi_mapping(struct pci_dev *dev)
 
 	/* check if there is HT MSI cap or enabled on this device */
 	pos = pci_find_ht_capability(dev, HT_CAPTYPE_MSI_MAPPING);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (pos && ttl--) {
 		u8 flags;
 
@@ -2570,6 +2682,7 @@ static int host_bridge_with_leaf(struct pci_dev *host_bridge)
 	int found = 0;
 
 	dev_no = host_bridge->devfn >> 3;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = dev_no + 1; i < 0x20; i++) {
 		dev = pci_get_slot(host_bridge->bus, PCI_DEVFN(i, 0));
 		if (!dev)
@@ -2607,6 +2720,7 @@ static int is_end_of_ht_chain(struct pci_dev *dev)
 	if (!pos)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_read_config_word(dev, pos + PCI_CAP_FLAGS, &flags);
 
 	ctrl_off = ((flags >> 10) & 1) ?
@@ -2628,6 +2742,7 @@ static void nv_ht_enable_msi_mapping(struct pci_dev *dev)
 	int found = 0;
 
 	dev_no = dev->devfn >> 3;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = dev_no; i >= 0; i--) {
 		host_bridge = pci_get_slot(dev->bus, PCI_DEVFN(i, 0));
 		if (!host_bridge)
@@ -2664,6 +2779,7 @@ static void ht_disable_msi_mapping(struct pci_dev *dev)
 	int pos, ttl = PCI_FIND_CAP_TTL;
 
 	pos = pci_find_ht_capability(dev, HT_CAPTYPE_MSI_MAPPING);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (pos && ttl--) {
 		u8 flags;
 
@@ -2686,7 +2802,9 @@ static void __nv_msi_ht_cap_quirk(struct pci_dev *dev, int all)
 	int found;
 
 	if (!pci_msi_enabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* check if there is HT MSI cap or enabled on this device */
 	found = ht_check_msi_mapping(dev);
@@ -2731,11 +2849,13 @@ static void __nv_msi_ht_cap_quirk(struct pci_dev *dev, int all)
 
 static void nv_msi_ht_cap_quirk_all(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __nv_msi_ht_cap_quirk(dev, 1);
 }
 
 static void nv_msi_ht_cap_quirk_leaf(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __nv_msi_ht_cap_quirk(dev, 0);
 }
 
@@ -2747,6 +2867,7 @@ DECLARE_PCI_FIXUP_RESUME_EARLY(PCI_VENDOR_ID_AL, PCI_ANY_ID, nv_msi_ht_cap_quirk
 
 static void quirk_msi_intx_disable_bug(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->dev_flags |= PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG;
 }
 static void quirk_msi_intx_disable_ati_bug(struct pci_dev *dev)
@@ -2760,7 +2881,9 @@ static void quirk_msi_intx_disable_ati_bug(struct pci_dev *dev)
 	p = pci_get_device(PCI_VENDOR_ID_ATI, PCI_DEVICE_ID_ATI_SBX00_SMBUS,
 			   NULL);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if ((p->revision < 0x3B) && (p->revision >= 0x30))
 		dev->dev_flags |= PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG;
@@ -2843,6 +2966,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_ATTANSIC, 0xe091,
  */
 static void quirk_hotplug_bridge(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->is_hotplug_bridge = 1;
 }
 
@@ -3001,6 +3125,7 @@ DECLARE_PCI_FIXUP_CLASS_EARLY(PCI_VENDOR_ID_TI, 0xb800,
  */
 static void fixup_mpss_256(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->pcie_mpss = 1; /* 256 bytes */
 }
 DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_SOLARFLARE,
@@ -3090,7 +3215,9 @@ static void quirk_intel_ntb(struct pci_dev *dev)
 
 	rc = pci_read_config_byte(dev, 0x00D0, &val);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	dev->resource[2].end = dev->resource[2].start + ((u64) 1 << val) - 1;
 
@@ -3108,8 +3235,10 @@ static ktime_t fixup_debug_start(struct pci_dev *dev,
 {
 	ktime_t calltime = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&dev->dev, "calling %pF\n", fn);
 	if (initcall_debug) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("calling  %pF @ %i for %s\n",
 			 fn, task_pid_nr(current), dev_name(&dev->dev));
 		calltime = ktime_get();
@@ -3125,9 +3254,11 @@ static void fixup_debug_report(struct pci_dev *dev, ktime_t calltime,
 	unsigned long long duration;
 
 	if (initcall_debug) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rettime = ktime_get();
 		delta = ktime_sub(rettime, calltime);
 		duration = (unsigned long long) ktime_to_ns(delta) >> 10;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("pci fixup %pF returned after %lld usecs for %s\n",
 			 fn, duration, dev_name(&dev->dev));
 	}
@@ -3148,6 +3279,7 @@ static void fixup_debug_report(struct pci_dev *dev, ktime_t calltime,
 #define I915_DEIER_REG 0x4400c
 static void disable_igfx_irq(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	void __iomem *regs = pci_iomap(dev, 0, 0);
 	if (regs == NULL) {
 		dev_warn(&dev->dev, "igfx quirk: Can't iomap PCI device\n");
@@ -3173,6 +3305,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_INTEL, 0x0152, disable_igfx_irq);
  */
 static void quirk_remove_d3_delay(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->d3_delay = 0;
 }
 /* C600 Series devices do not need 10ms d3_delay */
@@ -3209,6 +3342,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_INTEL, 0x22dc, quirk_remove_d3_delay);
  */
 static void quirk_broken_intx_masking(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->broken_intx_masking = 1;
 }
 DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_CHELSIO, 0x0030,
@@ -3298,6 +3432,7 @@ static void mellanox_check_broken_intx_masking(struct pci_dev *pdev)
 	u32 fw_sub_min;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(mellanox_broken_intx_devs); i++) {
 		if (pdev->device == mellanox_broken_intx_devs[i]) {
 			pdev->broken_intx_masking = 1;
@@ -3351,6 +3486,7 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MELLANOX, PCI_ANY_ID,
 
 static void quirk_no_bus_reset(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->dev_flags |= PCI_DEV_FLAGS_NO_BUS_RESET;
 }
 
@@ -3394,6 +3530,7 @@ DECLARE_PCI_FIXUP_CLASS_HEADER(PCI_VENDOR_ID_ATI, PCI_ANY_ID,
  */
 static void quirk_thunderbolt_hotplug_msi(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pdev->is_hotplug_bridge &&
 	    (pdev->device != PCI_DEVICE_ID_INTEL_CACTUS_RIDGE_4C ||
 	     pdev->revision <= 1))
@@ -3457,7 +3594,9 @@ static void quirk_apple_poweroff_thunderbolt(struct pci_dev *dev)
 	acpi_handle bridge, SXIO, SXFP, SXLV;
 
 	if (!x86_apple_machine)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (pci_pcie_type(dev) != PCI_EXP_TYPE_UPSTREAM)
 		return;
 	bridge = ACPI_HANDLE(&dev->dev);
@@ -3502,7 +3641,9 @@ static void quirk_apple_wait_for_thunderbolt(struct pci_dev *dev)
 	struct pci_dev *nhi = NULL;
 
 	if (!x86_apple_machine)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (pci_pcie_type(dev) != PCI_EXP_TYPE_DOWNSTREAM)
 		return;
 	/*
@@ -3598,7 +3739,10 @@ void pci_fixup_device(enum pci_fixup_pass pass, struct pci_dev *dev)
 
 	case pci_fixup_final:
 		if (!pci_apply_fixup_final_quirks)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = __start_pci_fixups_final;
 		end = __end_pci_fixups_final;
 		break;
@@ -3644,8 +3788,10 @@ static int __init pci_apply_final_quirks(void)
 	u8 tmp;
 
 	if (pci_cache_line_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_DEBUG "PCI: CLS %u bytes\n",
 		       pci_cache_line_size << 2);
+}
 
 	pci_apply_fixup_final_quirks = true;
 	for_each_pci_dev(dev) {
@@ -3662,6 +3808,7 @@ static int __init pci_apply_final_quirks(void)
 			if (!tmp || cls == tmp)
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_DEBUG "PCI: CLS mismatch (%u != %u), using %u bytes\n",
 			       cls << 2, tmp << 2,
 			       pci_dfl_cache_line_size << 2);
@@ -3714,7 +3861,9 @@ static int reset_ivb_igd(struct pci_dev *dev, int probe)
 	u32 val;
 
 	if (probe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	mmio_base = pci_iomap(dev, 0, 0);
 	if (!mmio_base)
@@ -3762,7 +3911,9 @@ static int reset_chelsio_generic_dev(struct pci_dev *dev, int probe)
 	 * that we have no device-specific reset method.
 	 */
 	if ((dev->device & 0xf000) != 0x4000)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
+}
 
 	/*
 	 * If this is the "probe" phase, return 0 indicating that we can
@@ -3846,11 +3997,13 @@ int pci_dev_specific_reset(struct pci_dev *dev, int probe)
 			return i->reset(dev, probe);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOTTY;
 }
 
 static void quirk_dma_func0_alias(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (PCI_FUNC(dev->devfn) != 0)
 		pci_add_dma_alias(dev, PCI_DEVFN(PCI_SLOT(dev->devfn), 0));
 }
@@ -3865,6 +4018,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_RICOH, 0xe476, quirk_dma_func0_alias);
 
 static void quirk_dma_func1_alias(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (PCI_FUNC(dev->devfn) != 1)
 		pci_add_dma_alias(dev, PCI_DEVFN(PCI_SLOT(dev->devfn), 1));
 }
@@ -3939,8 +4093,10 @@ static void quirk_fixed_dma_alias(struct pci_dev *dev)
 
 	id = pci_match_id(fixed_dma_alias_tbl, dev);
 	if (id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_add_dma_alias(dev, id->driver_data);
 }
+}
 
 DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_ADAPTEC2, 0x0285, quirk_fixed_dma_alias);
 
@@ -3955,6 +4111,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_ADAPTEC2, 0x0285, quirk_fixed_dma_alias);
  */
 static void quirk_use_pcie_bridge_dma_alias(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pci_is_root_bus(pdev->bus) &&
 	    pdev->hdr_type == PCI_HEADER_TYPE_BRIDGE &&
 	    !pci_is_pcie(pdev) && pci_is_pcie(pdev->bus->self) &&
@@ -3981,6 +4138,7 @@ DECLARE_PCI_FIXUP_HEADER(0x8086, 0x244e, quirk_use_pcie_bridge_dma_alias);
  */
 static void quirk_mic_x200_dma_alias(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_add_dma_alias(pdev, PCI_DEVFN(0x10, 0x0));
 	pci_add_dma_alias(pdev, PCI_DEVFN(0x11, 0x0));
 	pci_add_dma_alias(pdev, PCI_DEVFN(0x12, 0x3));
@@ -3995,6 +4153,7 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL, 0x2264, quirk_mic_x200_dma_alias);
  */
 static void quirk_bridge_cavm_thrx2_pcie_root(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pdev->dev_flags |= PCI_DEV_FLAGS_BRIDGE_XLATE_ROOT;
 }
 DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_BROADCOM, 0x9000,
@@ -4031,6 +4190,7 @@ DECLARE_PCI_FIXUP_CLASS_EARLY(0x1797, 0x6869, PCI_CLASS_NOT_DEFINED, 8,
  */
 static void quirk_relaxedordering_disable(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->dev_flags |= PCI_DEV_FLAGS_NO_RELAXED_ORDERING;
 	dev_info(&dev->dev, "Disable Relaxed Ordering Attributes to avoid PCIe Completion erratum\n");
 }
@@ -4138,6 +4298,7 @@ DECLARE_PCI_FIXUP_CLASS_EARLY(PCI_VENDOR_ID_AMD, 0x1a02, PCI_CLASS_NOT_DEFINED,
  */
 static void quirk_disable_root_port_attributes(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *root_port = pci_find_pcie_root_port(pdev);
 
 	if (!root_port) {
@@ -4315,6 +4476,7 @@ static bool pci_quirk_intel_pch_acs_match(struct pci_dev *dev)
 
 static int pci_quirk_intel_pch_acs(struct pci_dev *dev, u16 acs_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u16 flags = dev->dev_flags & PCI_DEV_FLAGS_ACS_ENABLED_QUIRK ?
 		    INTEL_PCH_ACS_FLAGS : 0;
 
@@ -4337,6 +4499,7 @@ static int pci_quirk_intel_pch_acs(struct pci_dev *dev, u16 acs_flags)
 static int pci_quirk_qcom_rp_acs(struct pci_dev *dev, u16 acs_flags)
 {
 	u16 flags = (PCI_ACS_RR | PCI_ACS_CR | PCI_ACS_UF | PCI_ACS_SV);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = acs_flags & ~flags ? 0 : 1;
 
 	dev_info(&dev->dev, "Using QCOM ACS Quirk (%d)\n", ret);
@@ -4378,6 +4541,7 @@ static int pci_quirk_qcom_rp_acs(struct pci_dev *dev, u16 acs_flags)
  */
 static bool pci_quirk_intel_spt_pch_acs_match(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pci_is_pcie(dev) || pci_pcie_type(dev) != PCI_EXP_TYPE_ROOT_PORT)
 		return false;
 
@@ -4398,7 +4562,9 @@ static int pci_quirk_intel_spt_pch_acs(struct pci_dev *dev, u16 acs_flags)
 	u32 cap, ctrl;
 
 	if (!pci_quirk_intel_spt_pch_acs_match(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
+}
 
 	pos = pci_find_ext_capability(dev, PCI_EXT_CAP_ID_ACS);
 	if (!pos)
@@ -4572,7 +4738,9 @@ static int pci_quirk_enable_intel_lpc_acs(struct pci_dev *dev)
 	pci_bus_read_config_dword(dev->bus, PCI_DEVFN(31, 0),
 				  INTEL_LPC_RCBA_REG, &rcba);
 	if (!(rcba & INTEL_LPC_RCBA_ENABLE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	rcba_mem = ioremap_nocache(rcba & INTEL_LPC_RCBA_MASK,
 				   PAGE_ALIGN(INTEL_UPDCR_REG));
@@ -4618,6 +4786,7 @@ static void pci_quirk_enable_intel_rp_mpc_acs(struct pci_dev *dev)
 	 */
 	pci_read_config_dword(dev, INTEL_MPC_REG, &mpc);
 	if (!(mpc & INTEL_MPC_REG_IRBNCE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, "Enabling MPC IRBNCE\n");
 		mpc |= INTEL_MPC_REG_IRBNCE;
 		pci_write_config_word(dev, INTEL_MPC_REG, mpc);
@@ -4626,6 +4795,7 @@ static void pci_quirk_enable_intel_rp_mpc_acs(struct pci_dev *dev)
 
 static int pci_quirk_enable_intel_pch_acs(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pci_quirk_intel_pch_acs_match(dev))
 		return -ENOTTY;
 
@@ -4649,7 +4819,9 @@ static int pci_quirk_enable_intel_spt_pch_acs(struct pci_dev *dev)
 	u32 cap, ctrl;
 
 	if (!pci_quirk_intel_spt_pch_acs_match(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
+}
 
 	pos = pci_find_ext_capability(dev, PCI_EXT_CAP_ID_ACS);
 	if (!pos)
@@ -4685,6 +4857,7 @@ int pci_dev_specific_enable_acs(struct pci_dev *dev)
 	const struct pci_dev_enable_acs *i;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = pci_dev_enable_acs; i->enable_acs; i++) {
 		if ((i->vendor == dev->vendor ||
 		     i->vendor == (u16)PCI_ANY_ID) &&
@@ -4787,6 +4960,7 @@ DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_INTEL, 0x443, quirk_intel_qat_vf_cap);
 /* FLR may cause some 82579 devices to hang. */
 static void quirk_intel_no_flr(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->dev_flags |= PCI_DEV_FLAGS_NO_FLR_RESET;
 }
 DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_INTEL, 0x1502, quirk_intel_no_flr);
@@ -4794,6 +4968,7 @@ DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_INTEL, 0x1503, quirk_intel_no_flr);
 
 static void quirk_no_ext_tags(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_host_bridge *bridge = pci_find_host_bridge(pdev->bus);
 
 	if (!bridge)
@@ -4815,6 +4990,7 @@ DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_SERVERWORKS, 0x0144, quirk_no_ext_tags);
  */
 static void quirk_no_ats(struct pci_dev *pdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_info(&pdev->dev, "disabling ATS (broken on this device)\n");
 	pdev->ats_cap = 0;
 }
diff --git a/drivers/pci/rom.c b/drivers/pci/rom.c
index b6edb18..520d290 100644
--- a/drivers/pci/rom.c
+++ b/drivers/pci/rom.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/pci/rom.c
  *
@@ -29,7 +31,9 @@ int pci_enable_rom(struct pci_dev *pdev)
 	u32 rom_addr;
 
 	if (!res->flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	/* Nothing to enable if we're using a shadow copy in RAM */
 	if (res->flags & IORESOURCE_ROM_SHADOW)
@@ -62,7 +66,9 @@ void pci_disable_rom(struct pci_dev *pdev)
 	u32 rom_addr;
 
 	if (res->flags & IORESOURCE_ROM_SHADOW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pci_read_config_dword(pdev, pdev->rom_base_reg, &rom_addr);
 	rom_addr &= ~PCI_ROM_ADDRESS_ENABLE;
@@ -179,8 +185,10 @@ void pci_unmap_rom(struct pci_dev *pdev, void __iomem *rom)
 
 	/* Disable again before continuing */
 	if (!(res->flags & IORESOURCE_ROM_ENABLE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_disable_rom(pdev);
 }
+}
 EXPORT_SYMBOL(pci_unmap_rom);
 
 /**
@@ -191,6 +199,7 @@ EXPORT_SYMBOL(pci_unmap_rom);
  */
 void __iomem *pci_platform_rom(struct pci_dev *pdev, size_t *size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pdev->rom && pdev->romlen) {
 		*size = pdev->romlen;
 		return phys_to_virt((phys_addr_t)pdev->rom);
diff --git a/drivers/pci/search.c b/drivers/pci/search.c
index 4c6044a..43abe64 100644
--- a/drivers/pci/search.c
+++ b/drivers/pci/search.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	PCI searching functions.
  *
@@ -34,7 +36,9 @@ int pci_for_each_dma_alias(struct pci_dev *pdev,
 
 	ret = fn(pdev, PCI_DEVID(pdev->bus->number, pdev->devfn), data);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	/*
 	 * If the device is broken and uses an alias requester ID for
@@ -43,11 +47,15 @@ int pci_for_each_dma_alias(struct pci_dev *pdev,
 	if (unlikely(pdev->dma_alias_mask)) {
 		u8 devfn;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_set_bit(devfn, pdev->dma_alias_mask, U8_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = fn(pdev, PCI_DEVID(pdev->bus->number, devfn),
 				 data);
 			if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ret;
+}
 		}
 	}
 
@@ -58,11 +66,14 @@ int pci_for_each_dma_alias(struct pci_dev *pdev,
 		if (!bus->self)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tmp = bus->self;
 
 		/* stop at bridge where translation unit is associated */
 		if (tmp->dev_flags & PCI_DEV_FLAGS_BRIDGE_XLATE_ROOT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
+}
 
 		/*
 		 * PCIe-to-PCI/X bridges alias transactions from downstream
@@ -74,6 +85,7 @@ int pci_for_each_dma_alias(struct pci_dev *pdev,
 		 * when the secondary interface is PCI-X).
 		 */
 		if (pci_is_pcie(tmp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			switch (pci_pcie_type(tmp)) {
 			case PCI_EXP_TYPE_ROOT_PORT:
 			case PCI_EXP_TYPE_UPSTREAM:
@@ -84,30 +96,41 @@ int pci_for_each_dma_alias(struct pci_dev *pdev,
 					 PCI_DEVID(tmp->subordinate->number,
 						   PCI_DEVFN(0, 0)), data);
 				if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return ret;
+}
 				continue;
 			case PCI_EXP_TYPE_PCIE_BRIDGE:
 				ret = fn(tmp,
 					 PCI_DEVID(tmp->bus->number,
 						   tmp->devfn), data);
 				if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return ret;
+}
 				continue;
 			}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (tmp->dev_flags & PCI_DEV_FLAG_PCIE_BRIDGE_ALIAS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = fn(tmp,
 					 PCI_DEVID(tmp->subordinate->number,
 						   PCI_DEVFN(0, 0)), data);
+}
 			else
 				ret = fn(tmp,
 					 PCI_DEVID(tmp->bus->number,
 						   tmp->devfn), data);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ret;
+}
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -117,13 +140,19 @@ static struct pci_bus *pci_do_find_bus(struct pci_bus *bus, unsigned char busnr)
 	struct pci_bus *tmp;
 
 	if (bus->number == busnr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return bus;
+}
 
 	list_for_each_entry(tmp, &bus->children, node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		child = pci_do_find_bus(tmp, busnr);
 		if (child)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return child;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -146,8 +175,11 @@ struct pci_bus *pci_find_bus(int domain, int busnr)
 			continue;
 		tmp_bus = pci_do_find_bus(bus, busnr);
 		if (tmp_bus)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return tmp_bus;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(pci_find_bus);
@@ -170,7 +202,9 @@ struct pci_bus *pci_find_next_bus(const struct pci_bus *from)
 	down_read(&pci_bus_sem);
 	n = from ? from->node.next : pci_root_buses.next;
 	if (n != &pci_root_buses)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		b = list_entry(n, struct pci_bus, node);
+}
 	up_read(&pci_bus_sem);
 	return b;
 }
@@ -202,6 +236,7 @@ struct pci_dev *pci_get_slot(struct pci_bus *bus, unsigned int devfn)
 			goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev = NULL;
  out:
 	pci_dev_get(dev);
@@ -230,6 +265,7 @@ struct pci_dev *pci_get_domain_bus_and_slot(int domain, unsigned int bus,
 {
 	struct pci_dev *dev = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_pci_dev(dev) {
 		if (pci_domain_nr(dev->bus) == domain &&
 		    (dev->bus->number == bus && dev->devfn == devfn))
@@ -245,7 +281,9 @@ static int match_pci_dev_by_id(struct device *dev, void *data)
 	struct pci_device_id *id = data;
 
 	if (pci_match_one_device(id, pdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	return 0;
 }
 
@@ -379,6 +417,7 @@ int pci_dev_present(const struct pci_device_id *ids)
 {
 	struct pci_dev *found = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(in_interrupt());
 	while (ids->vendor || ids->subvendor || ids->class_mask) {
 		found = pci_get_dev_by_id(ids, NULL);
diff --git a/drivers/pci/setup-bus.c b/drivers/pci/setup-bus.c
index 958da7d..8043058 100644
--- a/drivers/pci/setup-bus.c
+++ b/drivers/pci/setup-bus.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	drivers/pci/setup-bus.c
  *
@@ -46,6 +48,7 @@ static void free_list(struct list_head *head)
 	struct pci_dev_resource *dev_res, *tmp;
 
 	list_for_each_entry_safe(dev_res, tmp, head, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del(&dev_res->list);
 		kfree(dev_res);
 	}
@@ -68,6 +71,7 @@ static int add_to_list(struct list_head *head,
 
 	tmp = kzalloc(sizeof(*tmp), GFP_KERNEL);
 	if (!tmp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("add_to_list: kmalloc() failed!\n");
 		return -ENOMEM;
 	}
@@ -90,6 +94,7 @@ static void remove_from_list(struct list_head *head,
 {
 	struct pci_dev_resource *dev_res, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(dev_res, tmp, head, list) {
 		if (dev_res->res == res) {
 			list_del(&dev_res->list);
@@ -104,6 +109,7 @@ static struct pci_dev_resource *res_to_dev_res(struct list_head *head,
 {
 	struct pci_dev_resource *dev_res;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev_res, head, list) {
 		if (dev_res->res == res)
 			return dev_res;
@@ -118,6 +124,7 @@ static resource_size_t get_res_add_size(struct list_head *head,
 	struct pci_dev_resource *dev_res;
 
 	dev_res = res_to_dev_res(head, res);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev_res ? dev_res->add_size : 0;
 }
 
@@ -127,6 +134,7 @@ static resource_size_t get_res_add_align(struct list_head *head,
 	struct pci_dev_resource *dev_res;
 
 	dev_res = res_to_dev_res(head, res);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev_res ? dev_res->min_align : 0;
 }
 
@@ -150,21 +158,28 @@ static void pdev_sort_resources(struct pci_dev *dev, struct list_head *head)
 		if (!(r->flags) || r->parent)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		r_align = pci_resource_alignment(dev, r);
 		if (!r_align) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_warn(&dev->dev, "BAR %d: %pR has bogus alignment\n",
 				 i, r);
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tmp = kzalloc(sizeof(*tmp), GFP_KERNEL);
 		if (!tmp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			panic("pdev_sort_resources(): kmalloc() failed!\n");
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tmp->res = r;
 		tmp->dev = dev;
 
 		/* fallback is smallest one or list is empty*/
 		n = head;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_for_each_entry(dev_res, head, list) {
 			resource_size_t align;
 
@@ -172,6 +187,7 @@ static void pdev_sort_resources(struct pci_dev *dev, struct list_head *head)
 							 dev_res->res);
 
 			if (r_align > align) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				n = &dev_res->list;
 				break;
 			}
@@ -188,14 +204,18 @@ static void __dev_sort_resources(struct pci_dev *dev,
 
 	/* Don't touch classless devices or host bridges or ioapics.  */
 	if (class == PCI_CLASS_NOT_DEFINED || class == PCI_CLASS_BRIDGE_HOST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Don't touch ioapic devices already enabled by firmware */
 	if (class == PCI_CLASS_SYSTEM_PIC) {
 		u16 command;
 		pci_read_config_word(dev, PCI_COMMAND, &command);
 		if (command & (PCI_COMMAND_IO | PCI_COMMAND_MEMORY))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 	}
 
 	pdev_sort_resources(dev, head);
@@ -203,6 +223,7 @@ static void __dev_sort_resources(struct pci_dev *dev,
 
 static inline void reset_resource(struct resource *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	res->start = 0;
 	res->end = 0;
 	res->flags = 0;
@@ -239,23 +260,31 @@ static void reassign_resources_sorted(struct list_head *realloc_head,
 
 		/* skip this resource if not found in head list */
 		list_for_each_entry(dev_res, head, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (dev_res->res == res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				found_match = true;
 				break;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!found_match)/* just skip */
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		idx = res - &add_res->dev->resource[0];
 		add_size = add_res->add_size;
 		align = add_res->min_align;
 		if (!resource_size(res)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			res->start = align;
 			res->end = res->start + add_size - 1;
 			if (pci_assign_resource(add_res->dev, idx))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				reset_resource(res);
+}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			res->flags |= add_res->flags &
 				 (IORESOURCE_STARTALIGN|IORESOURCE_SIZEALIGN);
 			if (pci_reassign_resource(add_res->dev, idx,
@@ -289,10 +318,12 @@ static void assign_requested_resources_sorted(struct list_head *head,
 	int idx;
 
 	list_for_each_entry(dev_res, head, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = dev_res->res;
 		idx = res - &dev_res->dev->resource[0];
 		if (resource_size(res) &&
 		    pci_assign_resource(dev_res->dev, idx)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (fail_head) {
 				/*
 				 * if the failed res is for ROM BAR, and it will
@@ -305,6 +336,7 @@ static void assign_requested_resources_sorted(struct list_head *head,
 						    0 /* don't care */,
 						    0 /* don't care */);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			reset_resource(res);
 		}
 	}
@@ -330,6 +362,7 @@ static unsigned long pci_fail_res_type_mask(struct list_head *fail_head)
 
 static bool pci_need_to_release(unsigned long mask, struct resource *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (res->flags & IORESOURCE_IO)
 		return !!(mask & IORESOURCE_IO);
 
@@ -389,7 +422,9 @@ static void __assign_resources_sorted(struct list_head *head,
 
 	/* Save original start, end, flags etc at first */
 	list_for_each_entry(dev_res, head, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (add_to_list(&save_head, dev_res->dev, dev_res->res, 0, 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			free_list(&save_head);
 			goto requested_and_reassign;
 		}
@@ -397,6 +432,7 @@ static void __assign_resources_sorted(struct list_head *head,
 
 	/* Update res in head list with add_size in realloc_head list */
 	list_for_each_entry_safe(dev_res, tmp_res, head, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_res->res->end += get_res_add_size(realloc_head,
 							dev_res->res);
 
@@ -409,6 +445,7 @@ static void __assign_resources_sorted(struct list_head *head,
 		if (!(dev_res->res->flags & IORESOURCE_STARTALIGN))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_align = get_res_add_align(realloc_head, dev_res->res);
 
 		/*
@@ -419,15 +456,19 @@ static void __assign_resources_sorted(struct list_head *head,
 		 * consistent.
 		 */
 		if (add_align > dev_res->res->start) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			resource_size_t r_size = resource_size(dev_res->res);
 
 			dev_res->res->start = add_align;
 			dev_res->res->end = add_align + r_size - 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			list_for_each_entry(dev_res2, head, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				align = pci_resource_alignment(dev_res2->dev,
 							       dev_res2->res);
 				if (add_align > align) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					list_move_tail(&dev_res->list,
 						       &dev_res2->list);
 					break;
@@ -445,6 +486,7 @@ static void __assign_resources_sorted(struct list_head *head,
 		/* Remove head list from realloc_head list */
 		list_for_each_entry(dev_res, head, list)
 			remove_from_list(realloc_head, dev_res->res);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		free_list(&save_head);
 		free_list(head);
 		return;
@@ -463,11 +505,14 @@ static void __assign_resources_sorted(struct list_head *head,
 			kfree(dev_res);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	free_list(&local_fail_head);
 	/* Release assigned resource */
 	list_for_each_entry(dev_res, head, list)
 		if (dev_res->res->parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			release_resource(dev_res->res);
+}
 	/* Restore start/end/flags from saved list */
 	list_for_each_entry(save_res, &save_head, list) {
 		struct resource *res = save_res->res;
@@ -476,6 +521,7 @@ static void __assign_resources_sorted(struct list_head *head,
 		res->end = save_res->end;
 		res->flags = save_res->flags;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	free_list(&save_head);
 
 requested_and_reassign:
@@ -590,7 +636,9 @@ static void pci_setup_bridge_io(struct pci_dev *bridge)
 
 	io_mask = PCI_IO_RANGE_MASK;
 	if (bridge->io_window_1k)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		io_mask = PCI_IO_1K_RANGE_MASK;
+}
 
 	/* Set up the top and bottom of the PCI I/O segment for this bus. */
 	res = &bridge->resource[PCI_BRIDGE_RESOURCES + 0];
@@ -626,6 +674,7 @@ static void pci_setup_bridge_mmio(struct pci_dev *bridge)
 	res = &bridge->resource[PCI_BRIDGE_RESOURCES + 1];
 	pcibios_resource_to_bus(bridge->bus, &region, res);
 	if (res->flags & IORESOURCE_MEM) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		l = (region.start >> 16) & 0xfff0;
 		l |= region.end & 0xfff00000;
 		dev_info(&bridge->dev, "  bridge window %pR\n", res);
@@ -651,6 +700,7 @@ static void pci_setup_bridge_mmio_pref(struct pci_dev *bridge)
 	res = &bridge->resource[PCI_BRIDGE_RESOURCES + 2];
 	pcibios_resource_to_bus(bridge->bus, &region, res);
 	if (res->flags & IORESOURCE_PREFETCH) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		l = (region.start >> 16) & 0xfff0;
 		l |= region.end & 0xfff00000;
 		if (res->flags & IORESOURCE_MEM_64) {
@@ -676,7 +726,9 @@ static void __pci_setup_bridge(struct pci_bus *bus, unsigned long type)
 		 &bus->busn_res);
 
 	if (type & IORESOURCE_IO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_setup_bridge_io(bridge);
+}
 
 	if (type & IORESOURCE_MEM)
 		pci_setup_bridge_mmio(bridge);
@@ -703,6 +755,7 @@ void pci_setup_bridge(struct pci_bus *bus)
 
 int pci_claim_bridge_resource(struct pci_dev *bridge, int i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (i < PCI_BRIDGE_RESOURCES || i > PCI_BRIDGE_RESOURCE_END)
 		return 0;
 
@@ -750,6 +803,7 @@ static void pci_bridge_check_ranges(struct pci_bus *bus)
 
 	pci_read_config_word(bridge, PCI_IO_BASE, &io);
 	if (!io) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_write_config_word(bridge, PCI_IO_BASE, 0xe0f0);
 		pci_read_config_word(bridge, PCI_IO_BASE, &io);
 		pci_write_config_word(bridge, PCI_IO_BASE, 0x0);
@@ -804,6 +858,7 @@ static struct resource *find_free_bus_resource(struct pci_bus *bus,
 	int i;
 	struct resource *r;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_bus_for_each_resource(bus, r, i) {
 		if (r == &ioport_resource || r == &iomem_resource)
 			continue;
@@ -819,6 +874,7 @@ static resource_size_t calculate_iosize(resource_size_t size,
 		resource_size_t old_size,
 		resource_size_t align)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (size < min_size)
 		size = min_size;
 	if (old_size == 1)
@@ -840,6 +896,7 @@ static resource_size_t calculate_memsize(resource_size_t size,
 		resource_size_t old_size,
 		resource_size_t align)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (size < min_size)
 		size = min_size;
 	if (old_size == 1)
@@ -853,6 +910,7 @@ static resource_size_t calculate_memsize(resource_size_t size,
 resource_size_t __weak pcibios_window_alignment(struct pci_bus *bus,
 						unsigned long type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -866,7 +924,9 @@ static resource_size_t window_alignment(struct pci_bus *bus,
 	resource_size_t align = 1, arch_align;
 
 	if (type & IORESOURCE_MEM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		align = PCI_P2P_DEFAULT_MEM_ALIGN;
+}
 	else if (type & IORESOURCE_IO) {
 		/*
 		 * Per spec, I/O windows are 4K-aligned, but some
@@ -906,7 +966,9 @@ static void pbus_size_io(struct pci_bus *bus, resource_size_t min_size,
 	resource_size_t min_align, align;
 
 	if (!b_res)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	min_align = window_alignment(bus, IORESOURCE_IO);
 	list_for_each_entry(dev, &bus->devices, bus_list) {
@@ -969,6 +1031,7 @@ static inline resource_size_t calculate_mem_align(resource_size_t *aligns,
 	resource_size_t min_align = 0;
 	int order;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (order = 0; order <= max_order; order++) {
 		resource_size_t align1 = 1;
 
@@ -1020,7 +1083,9 @@ static int pbus_size_mem(struct pci_bus *bus, unsigned long mask,
 	resource_size_t add_align = 0;
 
 	if (!b_res)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSPC;
+}
 
 	memset(aligns, 0, sizeof(aligns));
 	max_order = 0;
@@ -1113,6 +1178,7 @@ static int pbus_size_mem(struct pci_bus *bus, unsigned long mask,
 
 unsigned long pci_cardbus_resource_alignment(struct resource *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (res->flags & IORESOURCE_IO)
 		return pci_cardbus_io_size;
 	if (res->flags & IORESOURCE_MEM)
@@ -1226,6 +1292,7 @@ void __pci_bus_size_bridges(struct pci_bus *bus, struct list_head *realloc_head)
 		if (!b)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (dev->class >> 8) {
 		case PCI_CLASS_BRIDGE_CARDBUS:
 			pci_bus_size_cardbus(b, realloc_head);
@@ -1240,8 +1307,11 @@ void __pci_bus_size_bridges(struct pci_bus *bus, struct list_head *realloc_head)
 
 	/* The root bus? */
 	if (pci_is_root_bus(bus))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (bus->self->class >> 8) {
 	case PCI_CLASS_BRIDGE_CARDBUS:
 		/* don't size cardbuses yet. */
@@ -1250,6 +1320,7 @@ void __pci_bus_size_bridges(struct pci_bus *bus, struct list_head *realloc_head)
 	case PCI_CLASS_BRIDGE_PCI:
 		pci_bridge_check_ranges(bus);
 		if (bus->self->is_hotplug_bridge) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			additional_io_size  = pci_hotplug_io_size;
 			additional_mem_size = pci_hotplug_mem_size;
 		}
@@ -1267,6 +1338,7 @@ void __pci_bus_size_bridges(struct pci_bus *bus, struct list_head *realloc_head)
 		mask = IORESOURCE_MEM;
 		prefmask = IORESOURCE_MEM | IORESOURCE_PREFETCH;
 		if (b_res[2].flags & IORESOURCE_MEM_64) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			prefmask |= IORESOURCE_MEM_64;
 			ret = pbus_size_mem(bus, prefmask, prefmask,
 				  prefmask, prefmask,
@@ -1279,6 +1351,7 @@ void __pci_bus_size_bridges(struct pci_bus *bus, struct list_head *realloc_head)
 			 * the non-prefetchable window.
 			 */
 			if (ret == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				mask = prefmask;
 				type2 = prefmask & ~IORESOURCE_MEM_64;
 				type3 = prefmask & ~IORESOURCE_PREFETCH;
@@ -1291,6 +1364,7 @@ void __pci_bus_size_bridges(struct pci_bus *bus, struct list_head *realloc_head)
 		 * 32-bit prefetchable window (if there is one).
 		 */
 		if (!type2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			prefmask &= ~IORESOURCE_MEM_64;
 			ret = pbus_size_mem(bus, prefmask, prefmask,
 					 prefmask, prefmask,
@@ -1302,10 +1376,13 @@ void __pci_bus_size_bridges(struct pci_bus *bus, struct list_head *realloc_head)
 			 * will go in the non-prefetchable window.
 			 */
 			if (ret == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				mask = prefmask;
+}
 			else
 				additional_mem_size += additional_mem_size;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			type2 = type3 = IORESOURCE_MEM;
 		}
 
@@ -1333,6 +1410,7 @@ void __pci_bus_size_bridges(struct pci_bus *bus, struct list_head *realloc_head)
 
 void pci_bus_size_bridges(struct pci_bus *bus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__pci_bus_size_bridges(bus, NULL);
 }
 EXPORT_SYMBOL(pci_bus_size_bridges);
@@ -1344,6 +1422,7 @@ static void assign_fixed_resource_on_bus(struct pci_bus *b, struct resource *r)
 	unsigned long mask = IORESOURCE_IO | IORESOURCE_MEM |
 			     IORESOURCE_PREFETCH;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_bus_for_each_resource(b, parent_r, i) {
 		if (!parent_r)
 			continue;
@@ -1370,8 +1449,11 @@ static void pdev_assign_fixed_resources(struct pci_dev *dev)
 		    !(r->flags & (IORESOURCE_IO | IORESOURCE_MEM)))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		b = dev->bus;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (b && !r->parent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			assign_fixed_resource_on_bus(b, r);
 			b = b->parent;
 		}
@@ -1394,12 +1476,15 @@ void __pci_bus_assign_resources(const struct pci_bus *bus,
 		if (!b)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__pci_bus_assign_resources(b, realloc_head, fail_head);
 
 		switch (dev->class >> 8) {
 		case PCI_CLASS_BRIDGE_PCI:
 			if (!pci_is_enabled(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pci_setup_bridge(b);
+}
 			break;
 
 		case PCI_CLASS_BRIDGE_CARDBUS:
@@ -1416,6 +1501,7 @@ void __pci_bus_assign_resources(const struct pci_bus *bus,
 
 void pci_bus_assign_resources(const struct pci_bus *bus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__pci_bus_assign_resources(bus, NULL, NULL);
 }
 EXPORT_SYMBOL(pci_bus_assign_resources);
@@ -1424,6 +1510,7 @@ static void pci_claim_device_resources(struct pci_dev *dev)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < PCI_BRIDGE_RESOURCES; i++) {
 		struct resource *r = &dev->resource[i];
 
@@ -1438,6 +1525,7 @@ static void pci_claim_bridge_resources(struct pci_dev *dev)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = PCI_BRIDGE_RESOURCES; i < PCI_NUM_RESOURCES; i++) {
 		struct resource *r = &dev->resource[i];
 
@@ -1453,6 +1541,7 @@ static void pci_bus_allocate_dev_resources(struct pci_bus *b)
 	struct pci_dev *dev;
 	struct pci_bus *child;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &b->devices, bus_list) {
 		pci_claim_device_resources(dev);
 
@@ -1473,6 +1562,7 @@ static void pci_bus_allocate_resources(struct pci_bus *b)
 	 * the respective bridge resources.
 	 */
 	if (b->self) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_read_bridge_bases(b);
 		pci_claim_bridge_resources(b->self);
 	}
@@ -1483,6 +1573,7 @@ static void pci_bus_allocate_resources(struct pci_bus *b)
 
 void pci_bus_claim_resources(struct pci_bus *b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_bus_allocate_resources(b);
 	pci_bus_allocate_dev_resources(b);
 }
@@ -1499,7 +1590,9 @@ static void __pci_bridge_assign_resources(const struct pci_dev *bridge,
 
 	b = bridge->subordinate;
 	if (!b)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	__pci_bus_assign_resources(b, add_head, fail_head);
 
@@ -1544,7 +1637,9 @@ static void pci_bridge_release_resources(struct pci_bus *bus,
 	 *	  assigned, release bridge nonpref mmio.
 	 */
 	if (type & IORESOURCE_IO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		idx = 0;
+}
 	else if (!(type & IORESOURCE_PREFETCH))
 		idx = 1;
 	else if ((type & IORESOURCE_MEM_64) &&
@@ -1599,6 +1694,7 @@ static void pci_bus_release_bridge_resources(struct pci_bus *bus,
 	struct pci_dev *dev;
 	bool is_leaf_bridge = true;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &bus->devices, bus_list) {
 		struct pci_bus *b = dev->subordinate;
 		if (!b)
@@ -1650,6 +1746,7 @@ static void pci_bus_dump_resources(struct pci_bus *bus)
 		if (!b)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pci_bus_dump_resources(b);
 	}
 }
@@ -1659,6 +1756,7 @@ static int pci_bus_get_depth(struct pci_bus *bus)
 	int depth = 0;
 	struct pci_bus *child_bus;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(child_bus, &bus->children, node) {
 		int ret;
 
@@ -1688,6 +1786,7 @@ enum enable_type {
 static enum enable_type pci_realloc_enable = undefined;
 void __init pci_realloc_get_opt(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!strncmp(str, "off", 3))
 		pci_realloc_enable = user_disabled;
 	else if (!strncmp(str, "on", 2))
@@ -1695,6 +1794,7 @@ void __init pci_realloc_get_opt(char *str)
 }
 static bool pci_realloc_enabled(enum enable_type enable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return enable >= user_enabled;
 }
 
@@ -1740,6 +1840,7 @@ static enum enable_type pci_realloc_detect(struct pci_bus *bus,
 static enum enable_type pci_realloc_detect(struct pci_bus *bus,
 			 enum enable_type enable_local)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return enable_local;
 }
 #endif
@@ -1766,6 +1867,7 @@ void pci_assign_unassigned_root_bus_resources(struct pci_bus *bus)
 	/* don't realloc if asked to do so */
 	enable_local = pci_realloc_detect(bus, pci_realloc_enable);
 	if (pci_realloc_enabled(enable_local)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int max_depth = pci_bus_get_depth(bus);
 
 		pci_try_num = max_depth + 1;
@@ -1780,7 +1882,9 @@ void pci_assign_unassigned_root_bus_resources(struct pci_bus *bus)
 	 * must have, so can realloc parent bridge resource
 	 */
 	if (tried_times + 1 == pci_try_num)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_list = &realloc_head;
+}
 	/* Depth first, calculate sizes and alignments of all
 	   subordinate buses. */
 	__pci_bus_size_bridges(bus, add_list);
@@ -1789,28 +1893,40 @@ void pci_assign_unassigned_root_bus_resources(struct pci_bus *bus)
 	__pci_bus_assign_resources(bus, add_list, &fail_head);
 	if (add_list)
 		BUG_ON(!list_empty(add_list));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tried_times++;
 
 	/* any device complain? */
 	if (list_empty(&fail_head))
 		goto dump;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tried_times >= pci_try_num) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (enable_local == undefined)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_info(&bus->dev, "Some PCI device resources are unassigned, try booting with pci=realloc\n");
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (enable_local == auto_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_info(&bus->dev, "Automatically enabled pci realloc, if you have problem, try booting with pci=realloc=off\n");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		free_list(&fail_head);
 		goto dump;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_printk(KERN_DEBUG, &bus->dev,
 		   "No. %d try to assign unassigned res\n", tried_times + 1);
 
 	/* third times and later will not check if it is leaf */
 	if ((tried_times + 1) > 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rel_type = whole_subtree;
+}
 
 	/*
 	 * Try to release leaf bridge's resources that doesn't fit resource of
@@ -1829,8 +1945,11 @@ void pci_assign_unassigned_root_bus_resources(struct pci_bus *bus)
 		res->end = fail_res->end;
 		res->flags = fail_res->flags;
 		if (fail_res->dev->subordinate)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			res->flags = 0;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	free_list(&fail_head);
 
 	goto again;
@@ -1921,6 +2040,7 @@ void pci_assign_unassigned_bus_resources(struct pci_bus *bus)
 					want additional resources */
 
 	down_read(&pci_bus_sem);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dev, &bus->devices, bus_list)
 		if (pci_is_bridge(dev) && pci_has_subordinate(dev))
 				__pci_bus_size_bridges(dev->subordinate,
diff --git a/drivers/pci/setup-irq.c b/drivers/pci/setup-irq.c
index 86106c4..1dbb75c 100644
--- a/drivers/pci/setup-irq.c
+++ b/drivers/pci/setup-irq.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	drivers/pci/setup-irq.c
  *
@@ -25,6 +27,7 @@ void pci_assign_irq(struct pci_dev *dev)
 	struct pci_host_bridge *hbrg = pci_find_host_bridge(dev->bus);
 
 	if (!(hbrg->map_irq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(&dev->dev, "runtime IRQ mapping not provided by arch\n");
 		return;
 	}
@@ -35,15 +38,21 @@ void pci_assign_irq(struct pci_dev *dev)
 	   time the interrupt line passes through a PCI-PCI bridge we must
 	   apply the swizzle function.  */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pci_read_config_byte(dev, PCI_INTERRUPT_PIN, &pin);
 	/* Cope with illegal. */
 	if (pin > 4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pin = 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pin) {
 		/* Follow the chain of bridges, swizzling as we go.  */
 		if (hbrg->swizzle_irq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			slot = (*(hbrg->swizzle_irq))(dev, &pin);
+}
 
 		/*
 		 * If a swizzling function is not used map_irq must
@@ -51,10 +60,14 @@ void pci_assign_irq(struct pci_dev *dev)
 		 */
 		irq = (*(hbrg->map_irq))(dev, slot, pin);
 		if (irq == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			irq = 0;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->irq = irq;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&dev->dev, "assign IRQ: got %d\n", dev->irq);
 
 	/* Always tell the device, so the driver knows what is
diff --git a/drivers/pci/setup-res.c b/drivers/pci/setup-res.c
index c039149..bf5b87c 100644
--- a/drivers/pci/setup-res.c
+++ b/drivers/pci/setup-res.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *	drivers/pci/setup-res.c
@@ -37,7 +39,9 @@ static void pci_std_update_resource(struct pci_dev *dev, int resno)
 
 	/* Per SR-IOV spec 3.4.1.11, VF BARs are RO zero */
 	if (dev->is_virtfn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * Ignore resources for unimplemented BARs and unused resource slots
@@ -123,6 +127,7 @@ static void pci_std_update_resource(struct pci_dev *dev, int resno)
 
 void pci_update_resource(struct pci_dev *dev, int resno)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (resno <= PCI_ROM_RESOURCE)
 		pci_std_update_resource(dev, resno);
 #ifdef CONFIG_PCI_IOV
@@ -137,6 +142,7 @@ int pci_claim_resource(struct pci_dev *dev, int resource)
 	struct resource *root, *conflict;
 
 	if (res->flags & IORESOURCE_UNSET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, "can't claim BAR %d %pR: no address assigned\n",
 			 resource, res);
 		return -EINVAL;
@@ -148,10 +154,13 @@ int pci_claim_resource(struct pci_dev *dev, int resource)
 	 * bridges don't need to route the range to the device.
 	 */
 	if (res->flags & IORESOURCE_ROM_SHADOW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	root = pci_find_parent_resource(dev, res);
 	if (!root) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, "can't claim BAR %d %pR: no compatible bridge window\n",
 			 resource, res);
 		res->flags |= IORESOURCE_UNSET;
@@ -160,18 +169,21 @@ int pci_claim_resource(struct pci_dev *dev, int resource)
 
 	conflict = request_resource_conflict(root, res);
 	if (conflict) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, "can't claim BAR %d %pR: address conflict with %s %pR\n",
 			 resource, res, conflict->name, conflict);
 		res->flags |= IORESOURCE_UNSET;
 		return -EBUSY;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(pci_claim_resource);
 
 void pci_disable_bridge_window(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_info(&dev->dev, "disabling bridge mem windows\n");
 
 	/* MMIO Base/Limit */
@@ -194,6 +206,7 @@ void pci_disable_bridge_window(struct pci_dev *dev)
  */
 resource_size_t __weak pcibios_retrieve_fw_addr(struct pci_dev *dev, int idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -205,7 +218,9 @@ static int pci_revert_fw_address(struct resource *res, struct pci_dev *dev,
 
 	fw_addr = pcibios_retrieve_fw_addr(dev, resno);
 	if (!fw_addr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	start = res->start;
 	end = res->end;
@@ -245,6 +260,7 @@ resource_size_t __weak pcibios_align_resource(void *data,
 					      resource_size_t size,
 					      resource_size_t align)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
        return res->start;
 }
 
@@ -255,6 +271,7 @@ static int __pci_assign_resource(struct pci_bus *bus, struct pci_dev *dev,
 	resource_size_t min;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	min = (res->flags & IORESOURCE_IO) ? PCIBIOS_MIN_IO : PCIBIOS_MIN_MEM;
 
 	/*
@@ -303,6 +320,7 @@ static int _pci_assign_resource(struct pci_dev *dev, int resno,
 	int ret;
 
 	bus = dev->bus;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((ret = __pci_assign_resource(bus, dev, resno, size, min_align))) {
 		if (!bus->parent || !bus->self->transparent)
 			break;
@@ -319,7 +337,9 @@ int pci_assign_resource(struct pci_dev *dev, int resno)
 	int ret;
 
 	if (res->flags & IORESOURCE_PCI_FIXED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	res->flags |= IORESOURCE_UNSET;
 	align = pci_resource_alignment(dev, res);
@@ -367,7 +387,9 @@ int pci_reassign_resource(struct pci_dev *dev, int resno, resource_size_t addsiz
 	int ret;
 
 	if (res->flags & IORESOURCE_PCI_FIXED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	flags = res->flags;
 	res->flags |= IORESOURCE_UNSET;
@@ -419,12 +441,14 @@ int pci_enable_resources(struct pci_dev *dev, int mask)
 			continue;
 
 		if (r->flags & IORESOURCE_UNSET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(&dev->dev, "can't enable device: BAR %d %pR not assigned\n",
 				i, r);
 			return -EINVAL;
 		}
 
 		if (!r->parent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(&dev->dev, "can't enable device: BAR %d %pR not claimed\n",
 				i, r);
 			return -EINVAL;
@@ -437,9 +461,11 @@ int pci_enable_resources(struct pci_dev *dev, int mask)
 	}
 
 	if (cmd != old_cmd) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_info(&dev->dev, "enabling device (%04x -> %04x)\n",
 			 old_cmd, cmd);
 		pci_write_config_word(dev, PCI_COMMAND, cmd);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
diff --git a/drivers/pci/slot.c b/drivers/pci/slot.c
index e429095..f028e5d 100644
--- a/drivers/pci/slot.c
+++ b/drivers/pci/slot.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/pci/slot.c
  * Copyright (C) 2006 Matthew Wilcox <matthew@wil.cx>
@@ -19,6 +21,7 @@ static DEFINE_MUTEX(pci_slot_mutex);
 static ssize_t pci_slot_attr_show(struct kobject *kobj,
 					struct attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_slot *slot = to_pci_slot(kobj);
 	struct pci_slot_attribute *attribute = to_pci_slot_attr(attr);
 	return attribute->show ? attribute->show(slot, buf) : -EIO;
@@ -27,6 +30,7 @@ static ssize_t pci_slot_attr_show(struct kobject *kobj,
 static ssize_t pci_slot_attr_store(struct kobject *kobj,
 			struct attribute *attr, const char *buf, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_slot *slot = to_pci_slot(kobj);
 	struct pci_slot_attribute *attribute = to_pci_slot_attr(attr);
 	return attribute->store ? attribute->store(slot, buf, len) : -EIO;
@@ -39,6 +43,7 @@ static const struct sysfs_ops pci_slot_sysfs_ops = {
 
 static ssize_t address_read_file(struct pci_slot *slot, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (slot->number == 0xff)
 		return sprintf(buf, "%04x:%02x\n",
 				pci_domain_nr(slot->bus),
@@ -82,7 +87,9 @@ static ssize_t bus_speed_read(enum pci_bus_speed speed, char *buf)
 	const char *speed_string;
 
 	if (speed < ARRAY_SIZE(pci_bus_speed_strings))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		speed_string = pci_bus_speed_strings[speed];
+}
 	else
 		speed_string = "Unknown";
 
@@ -91,17 +98,20 @@ static ssize_t bus_speed_read(enum pci_bus_speed speed, char *buf)
 
 static ssize_t max_speed_read_file(struct pci_slot *slot, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bus_speed_read(slot->bus->max_bus_speed, buf);
 }
 
 static ssize_t cur_speed_read_file(struct pci_slot *slot, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bus_speed_read(slot->bus->cur_bus_speed, buf);
 }
 
 static void pci_slot_release(struct kobject *kobj)
 {
 	struct pci_dev *dev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_slot *slot = to_pci_slot(kobj);
 
 	dev_dbg(&slot->bus->dev, "dev %02x, released physical slot %s\n",
@@ -145,7 +155,9 @@ static char *make_slot_name(const char *name)
 
 	new_name = kstrdup(name, GFP_KERNEL);
 	if (!new_name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/*
 	 * Make sure we hit the realloc case the first time through the
@@ -182,7 +194,9 @@ static int rename_slot(struct pci_slot *slot, const char *name)
 	char *slot_name;
 
 	if (strcmp(pci_slot_name(slot), name) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
 	slot_name = make_slot_name(name);
 	if (!slot_name)
@@ -201,7 +215,9 @@ void pci_dev_assign_slot(struct pci_dev *dev)
 	mutex_lock(&pci_slot_mutex);
 	list_for_each_entry(slot, &dev->bus->slots, list)
 		if (PCI_SLOT(dev->devfn) == slot->number)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->slot = slot;
+}
 	mutex_unlock(&pci_slot_mutex);
 }
 
@@ -344,6 +360,7 @@ EXPORT_SYMBOL_GPL(pci_create_slot);
  */
 void pci_destroy_slot(struct pci_slot *slot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&slot->bus->dev, "dev %02x, dec refcount to %d\n",
 		slot->number, kref_read(&slot->kobj.kref) - 1);
 
@@ -368,6 +385,7 @@ void pci_hp_create_module_link(struct pci_slot *pci_slot)
 	struct kobject *kobj = NULL;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!slot || !slot->ops)
 		return;
 	kobj = kset_find_obj(module_kset, slot->ops->mod_name);
@@ -390,6 +408,7 @@ EXPORT_SYMBOL_GPL(pci_hp_create_module_link);
  */
 void pci_hp_remove_module_link(struct pci_slot *pci_slot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_remove_link(&pci_slot->kobj, "module");
 }
 EXPORT_SYMBOL_GPL(pci_hp_remove_module_link);
@@ -403,9 +422,11 @@ static int pci_slot_init(void)
 	pci_slots_kset = kset_create_and_add("slots", NULL,
 						&pci_bus_kset->kobj);
 	if (!pci_slots_kset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "PCI: Slot initialization failure\n");
 		return -ENOMEM;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
diff --git a/drivers/pci/vc.c b/drivers/pci/vc.c
index 1fa3a32..d445915 100644
--- a/drivers/pci/vc.c
+++ b/drivers/pci/vc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * PCI Virtual Channel support
  *
@@ -29,6 +31,7 @@ static void pci_vc_save_restore_dwords(struct pci_dev *dev, int pos,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < dwords; i++, buf++) {
 		if (save)
 			pci_read_config_dword(dev, pos + (i * 4), buf);
@@ -83,7 +86,9 @@ static void pci_vc_load_port_arb_table(struct pci_dev *dev, int pos, int res)
 			       ctrl | PCI_VC_RES_CTRL_LOAD_TABLE);
 
 	if (pci_wait_for_pending(dev, status_pos, PCI_VC_RES_STATUS_TABLE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	dev_err(&dev->dev, "VC%d port arbitration table failed to load\n", res);
 }
@@ -109,7 +114,9 @@ static void pci_vc_enable(struct pci_dev *dev, int pos, int res)
 
 	/* Enable VCs from the downstream device */
 	if (!dev->has_secondary_link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	ctrl_pos = pos + PCI_VC_RES_CTRL + (res * PCI_CAP_VC_PER_VC_SIZEOF);
 	status_pos = pos + PCI_VC_RES_STATUS + (res * PCI_CAP_VC_PER_VC_SIZEOF);
@@ -190,6 +197,7 @@ static int pci_vc_do_save_buffer(struct pci_dev *dev, int pos,
 	u32 cap1;
 	char evcc, lpevcc, parb_size;
 	int i, len = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u8 *buf = save_state ? (u8 *)save_state->cap.data : NULL;
 
 	/* Sanity check buffer size for save/restore */
@@ -356,6 +364,7 @@ int pci_save_vc_state(struct pci_dev *dev)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(vc_caps); i++) {
 		int pos, ret;
 		struct pci_cap_saved_state *save_state;
@@ -393,6 +402,7 @@ void pci_restore_vc_state(struct pci_dev *dev)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(vc_caps); i++) {
 		int pos;
 		struct pci_cap_saved_state *save_state;
@@ -424,10 +434,13 @@ void pci_allocate_vc_save_buffers(struct pci_dev *dev)
 		if (!pos)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = pci_vc_do_save_buffer(dev, pos, NULL, false);
 		if (pci_add_ext_cap_save_buffer(dev, vc_caps[i].id, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(&dev->dev,
 				"unable to preallocate %s save buffer\n",
 				vc_caps[i].name);
+}
 	}
 }
diff --git a/drivers/pci/xen-pcifront.c b/drivers/pci/xen-pcifront.c
index 8fc2e95..403fd38 100644
--- a/drivers/pci/xen-pcifront.c
+++ b/drivers/pci/xen-pcifront.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Xen PCI Frontend.
  *
diff --git a/drivers/phy/phy-core.c b/drivers/phy/phy-core.c
index 48a365e..c274ff8 100644
--- a/drivers/phy/phy-core.c
+++ b/drivers/phy/phy-core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * phy-core.c  --  Generic Phy framework.
  *
diff --git a/drivers/platform/x86/intel_ips.c b/drivers/platform/x86/intel_ips.c
index 58dcee5..67901d2 100644
--- a/drivers/platform/x86/intel_ips.c
+++ b/drivers/platform/x86/intel_ips.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2009-2010 Intel Corporation
  *
diff --git a/drivers/platform/x86/mxm-wmi.c b/drivers/platform/x86/mxm-wmi.c
index 35d8b9a..e8172fa 100644
--- a/drivers/platform/x86/mxm-wmi.c
+++ b/drivers/platform/x86/mxm-wmi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * MXM WMI driver
  *
diff --git a/drivers/platform/x86/pmc_atom.c b/drivers/platform/x86/pmc_atom.c
index 77bac85..268cd95 100644
--- a/drivers/platform/x86/pmc_atom.c
+++ b/drivers/platform/x86/pmc_atom.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Intel Atom SOC Power Management Controller Driver
  * Copyright (c) 2014, Intel Corporation.
@@ -210,11 +212,13 @@ static const struct pmc_data cht_data = {
 
 static inline u32 pmc_reg_read(struct pmc_dev *pmc, int reg_offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return readl(pmc->regmap + reg_offset);
 }
 
 static inline void pmc_reg_write(struct pmc_dev *pmc, int reg_offset, u32 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	writel(val, pmc->regmap + reg_offset);
 }
 
@@ -223,7 +227,9 @@ int pmc_atom_read(int offset, u32 *value)
 	struct pmc_dev *pmc = &pmc_device;
 
 	if (!pmc->init)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	*value = pmc_reg_read(pmc, offset);
 	return 0;
@@ -235,7 +241,9 @@ int pmc_atom_write(int offset, u32 value)
 	struct pmc_dev *pmc = &pmc_device;
 
 	if (!pmc->init)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	pmc_reg_write(pmc, offset, value);
 	return 0;
@@ -280,6 +288,7 @@ static void pmc_dev_state_print(struct seq_file *s, int reg_index,
 	int offset = PMC_REG_BIT_WIDTH * reg_index;
 	int index;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (index = 0; sts_map[index].name; index++) {
 		seq_printf(s, "Dev: %-2d - %-32s\tState: %s [%s]\n",
 			offset + index, sts_map[index].name,
@@ -311,6 +320,7 @@ static int pmc_dev_state_show(struct seq_file *s, void *unused)
 
 static int pmc_dev_state_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, pmc_dev_state_show, inode->i_private);
 }
 
@@ -328,6 +338,7 @@ static int pmc_pss_state_show(struct seq_file *s, void *unused)
 	u32 pss = pmc_reg_read(pmc, PMC_PSS);
 	int index;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (index = 0; map[index].name; index++) {
 		seq_printf(s, "Island: %-2d - %-32s\tState: %s\n",
 			index, map[index].name,
@@ -338,6 +349,7 @@ static int pmc_pss_state_show(struct seq_file *s, void *unused)
 
 static int pmc_pss_state_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, pmc_pss_state_show, inode->i_private);
 }
 
@@ -369,6 +381,7 @@ static int pmc_sleep_tmr_show(struct seq_file *s, void *unused)
 
 static int pmc_sleep_tmr_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, pmc_sleep_tmr_show, inode->i_private);
 }
 
@@ -381,6 +394,7 @@ static const struct file_operations pmc_sleep_tmr_ops = {
 
 static void pmc_dbgfs_unregister(struct pmc_dev *pmc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	debugfs_remove_recursive(pmc->dbgfs_dir);
 }
 
@@ -390,7 +404,9 @@ static int pmc_dbgfs_register(struct pmc_dev *pmc)
 
 	dir = debugfs_create_dir("pmc_atom", NULL);
 	if (!dir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	pmc->dbgfs_dir = dir;
 
@@ -429,7 +445,9 @@ static int pmc_setup_clks(struct pci_dev *pdev, void __iomem *pmc_regmap,
 
 	clk_data = kzalloc(sizeof(*clk_data), GFP_KERNEL);
 	if (!clk_data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	clk_data->base = pmc_regmap; /* offset is added by client */
 	clk_data->clks = pmc_data->clks;
@@ -517,7 +535,9 @@ static int __init pmc_atom_init(void)
 	for_each_pci_dev(pdev) {
 		ent = pci_match_id(pmc_pci_ids, pdev);
 		if (ent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return pmc_setup_dev(pdev, ent);
+}
 	}
 	/* Device not found. */
 	return -ENODEV;
diff --git a/drivers/platform/x86/wmi-bmof.c b/drivers/platform/x86/wmi-bmof.c
index c4530ba..71ccef6 100644
--- a/drivers/platform/x86/wmi-bmof.c
+++ b/drivers/platform/x86/wmi-bmof.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * WMI embedded Binary MOF driver
  *
diff --git a/drivers/platform/x86/wmi.c b/drivers/platform/x86/wmi.c
index 7f8fa42..6a47b54 100644
--- a/drivers/platform/x86/wmi.c
+++ b/drivers/platform/x86/wmi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ACPI-WMI mapping driver
  *
diff --git a/drivers/pnp/core.c b/drivers/pnp/core.c
index 3bf18d7..864f094 100644
--- a/drivers/pnp/core.c
+++ b/drivers/pnp/core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * core.c - contains all core device and protocol registration functions
@@ -37,6 +39,7 @@ void *pnp_alloc(long size)
 
 	result = kzalloc(size, GFP_KERNEL);
 	if (!result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "pnp: Out of Memory\n");
 		return NULL;
 	}
@@ -45,6 +48,7 @@ void *pnp_alloc(long size)
 
 static void pnp_remove_protocol(struct pnp_protocol *protocol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&pnp_lock);
 	list_del(&protocol->protocol_list);
 	mutex_unlock(&pnp_lock);
@@ -69,8 +73,10 @@ int pnp_register_protocol(struct pnp_protocol *protocol)
 
 	/* assign the lowest unused number */
 	list_for_each(pos, &pnp_protocols) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct pnp_protocol *cur = to_pnp_protocol(pos);
 		if (cur->number == nodenum) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pos = &pnp_protocols;
 			nodenum++;
 		}
@@ -85,7 +91,9 @@ int pnp_register_protocol(struct pnp_protocol *protocol)
 
 	ret = device_register(&protocol->dev);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_remove_protocol(protocol);
+}
 
 	return ret;
 }
@@ -96,6 +104,7 @@ int pnp_register_protocol(struct pnp_protocol *protocol)
  */
 void pnp_unregister_protocol(struct pnp_protocol *protocol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pnp_remove_protocol(protocol);
 	device_unregister(&protocol->dev);
 }
@@ -106,6 +115,7 @@ static void pnp_free_ids(struct pnp_dev *dev)
 	struct pnp_id *next;
 
 	id = dev->id;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (id) {
 		next = id->next;
 		kfree(id);
@@ -115,6 +125,7 @@ static void pnp_free_ids(struct pnp_dev *dev)
 
 void pnp_free_resource(struct pnp_resource *pnp_res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_del(&pnp_res->list);
 	kfree(pnp_res);
 }
@@ -124,12 +135,14 @@ void pnp_free_resources(struct pnp_dev *dev)
 	struct pnp_resource *pnp_res, *tmp;
 
 	list_for_each_entry_safe(pnp_res, tmp, &dev->resources, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_free_resource(pnp_res);
 	}
 }
 
 static void pnp_release_device(struct device *dmdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pnp_dev *dev = to_pnp_dev(dmdev);
 
 	pnp_free_ids(dev);
@@ -146,7 +159,9 @@ struct pnp_dev *pnp_alloc_dev(struct pnp_protocol *protocol, int id,
 
 	dev = kzalloc(sizeof(struct pnp_dev), GFP_KERNEL);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	INIT_LIST_HEAD(&dev->resources);
 	INIT_LIST_HEAD(&dev->options);
@@ -164,15 +179,18 @@ struct pnp_dev *pnp_alloc_dev(struct pnp_protocol *protocol, int id,
 
 	dev_id = pnp_add_id(dev, pnpid);
 	if (!dev_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(dev);
 		return NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev;
 }
 
 static void pnp_delist_device(struct pnp_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&pnp_lock);
 	list_del(&dev->global_list);
 	list_del(&dev->protocol_list);
@@ -195,7 +213,9 @@ int __pnp_add_device(struct pnp_dev *dev)
 
 	ret = device_register(&dev->dev);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_delist_device(dev);
+}
 	else if (dev->protocol->can_wakeup)
 		device_set_wakeup_capable(&dev->dev,
 				dev->protocol->can_wakeup(dev));
@@ -217,11 +237,15 @@ int pnp_add_device(struct pnp_dev *dev)
 	struct pnp_id *id;
 
 	if (dev->card)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ret = __pnp_add_device(dev);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	buf[0] = '\0';
 	for (id = dev->id; id; id = id->next)
@@ -235,6 +259,7 @@ int pnp_add_device(struct pnp_dev *dev)
 
 void __pnp_remove_device(struct pnp_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pnp_delist_device(dev);
 	device_unregister(&dev->dev);
 }
diff --git a/drivers/pnp/driver.c b/drivers/pnp/driver.c
index 93a30a8..7c4ae2c 100644
--- a/drivers/pnp/driver.c
+++ b/drivers/pnp/driver.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * driver.c - device id matching, driver model, etc.
@@ -23,21 +25,29 @@ static int compare_func(const char *ida, const char *idb)
 		    idb[i] != 'X' && toupper(ida[i]) != toupper(idb[i]))
 			return 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
 int compare_pnp_id(struct pnp_id *pos, const char *id)
 {
 	if (!pos || !id || (strlen(id) != 7))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (memcmp(id, "ANYDEVS", 7) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	while (pos) {
 		if (memcmp(pos->id, id, 3) == 0)
 			if (compare_func(pos->id, id) == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 1;
+}
 		pos = pos->next;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -47,13 +57,18 @@ static const struct pnp_device_id *match_device(struct pnp_driver *drv,
 	const struct pnp_device_id *drv_id = drv->id_table;
 
 	if (!drv_id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	while (*drv_id->id) {
 		if (compare_pnp_id(dev->id, drv_id->id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return drv_id;
+}
 		drv_id++;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -61,6 +76,7 @@ int pnp_device_attach(struct pnp_dev *pnp_dev)
 {
 	mutex_lock(&pnp_lock);
 	if (pnp_dev->status != PNP_READY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&pnp_lock);
 		return -EBUSY;
 	}
@@ -71,6 +87,7 @@ int pnp_device_attach(struct pnp_dev *pnp_dev)
 
 void pnp_device_detach(struct pnp_dev *pnp_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&pnp_lock);
 	if (pnp_dev->status == PNP_ATTACHED)
 		pnp_dev->status = PNP_READY;
@@ -83,25 +100,36 @@ static int pnp_device_probe(struct device *dev)
 	struct pnp_driver *pnp_drv;
 	struct pnp_dev *pnp_dev;
 	const struct pnp_device_id *dev_id = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pnp_dev = to_pnp_dev(dev);
 	pnp_drv = to_pnp_driver(dev->driver);
 
 	error = pnp_device_attach(pnp_dev);
 	if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	if (pnp_dev->active == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(pnp_drv->flags & PNP_DRIVER_RES_DO_NOT_CHANGE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = pnp_activate_dev(pnp_dev);
 			if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return error;
+}
 		}
 	} else if ((pnp_drv->flags & PNP_DRIVER_RES_DISABLE)
 		   == PNP_DRIVER_RES_DISABLE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = pnp_disable_dev(pnp_dev);
 		if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = 0;
 	if (pnp_drv->probe) {
 		dev_id = match_device(pnp_drv, pnp_dev);
@@ -123,6 +151,7 @@ static int pnp_device_probe(struct device *dev)
 
 static int pnp_device_remove(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pnp_dev *pnp_dev = to_pnp_dev(dev);
 	struct pnp_driver *drv = pnp_dev->driver;
 
@@ -142,6 +171,7 @@ static int pnp_device_remove(struct device *dev)
 
 static void pnp_device_shutdown(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pnp_dev *pnp_dev = to_pnp_dev(dev);
 	struct pnp_driver *drv = pnp_dev->driver;
 
@@ -151,16 +181,21 @@ static void pnp_device_shutdown(struct device *dev)
 
 static int pnp_bus_match(struct device *dev, struct device_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pnp_dev *pnp_dev = to_pnp_dev(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pnp_driver *pnp_drv = to_pnp_driver(drv);
 
 	if (match_device(pnp_drv, pnp_dev) == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return 1;
 }
 
 static int __pnp_bus_suspend(struct device *dev, pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pnp_dev *pnp_dev = to_pnp_dev(dev);
 	struct pnp_driver *pnp_drv = pnp_dev->driver;
 	int error;
@@ -194,21 +229,25 @@ static int __pnp_bus_suspend(struct device *dev, pm_message_t state)
 
 static int pnp_bus_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __pnp_bus_suspend(dev, PMSG_SUSPEND);
 }
 
 static int pnp_bus_freeze(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __pnp_bus_suspend(dev, PMSG_FREEZE);
 }
 
 static int pnp_bus_poweroff(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __pnp_bus_suspend(dev, PMSG_HIBERNATE);
 }
 
 static int pnp_bus_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pnp_dev *pnp_dev = to_pnp_dev(dev);
 	struct pnp_driver *pnp_drv = pnp_dev->driver;
 	int error;
@@ -274,6 +313,7 @@ int pnp_register_driver(struct pnp_driver *drv)
 
 void pnp_unregister_driver(struct pnp_driver *drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	driver_unregister(&drv->driver);
 }
 
@@ -288,7 +328,9 @@ struct pnp_id *pnp_add_id(struct pnp_dev *dev, const char *id)
 
 	dev_id = kzalloc(sizeof(struct pnp_id), GFP_KERNEL);
 	if (!dev_id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	dev_id->id[0] = id[0];
 	dev_id->id[1] = id[1];
@@ -304,10 +346,13 @@ struct pnp_id *pnp_add_id(struct pnp_dev *dev, const char *id)
 	while (ptr && ptr->next)
 		ptr = ptr->next;
 	if (ptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ptr->next = dev_id;
+}
 	else
 		dev->id = dev_id;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev_id;
 }
 
diff --git a/drivers/pnp/manager.c b/drivers/pnp/manager.c
index 1440555..bc3ae78 100644
--- a/drivers/pnp/manager.c
+++ b/drivers/pnp/manager.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * manager.c - Resource Management, Conflict Resolution, Activation and Disabling of Devices
@@ -24,6 +26,7 @@ static struct resource *pnp_find_resource(struct pnp_dev *dev,
 					  unsigned long type,
 					  unsigned int bar)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct resource *res = pnp_get_resource(dev, type, bar);
 
 	/* when the resource already exists, set its resource bits from rule */
@@ -41,6 +44,7 @@ static int pnp_assign_port(struct pnp_dev *dev, struct pnp_port *rule, int idx)
 
 	res = pnp_find_resource(dev, rule->flags, IORESOURCE_IO, idx);
 	if (res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_dbg(&dev->dev, "  io %d already set to %#llx-%#llx "
 			"flags %#lx\n", idx, (unsigned long long) res->start,
 			(unsigned long long) res->end, res->flags);
@@ -84,6 +88,7 @@ static int pnp_assign_mem(struct pnp_dev *dev, struct pnp_mem *rule, int idx)
 
 	res = pnp_find_resource(dev, rule->flags, IORESOURCE_MEM, idx);
 	if (res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_dbg(&dev->dev, "  mem %d already set to %#llx-%#llx "
 			"flags %#lx\n", idx, (unsigned long long) res->start,
 			(unsigned long long) res->end, res->flags);
@@ -141,6 +146,7 @@ static int pnp_assign_irq(struct pnp_dev *dev, struct pnp_irq *rule, int idx)
 
 	res = pnp_find_resource(dev, rule->flags, IORESOURCE_IRQ, idx);
 	if (res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_dbg(&dev->dev, "  irq %d already set to %d flags %#lx\n",
 			idx, (int) res->start, res->flags);
 		return 0;
@@ -200,6 +206,7 @@ static int pnp_assign_dma(struct pnp_dev *dev, struct pnp_dma *rule, int idx)
 
 	res = pnp_find_resource(dev, rule->flags, IORESOURCE_DMA, idx);
 	if (res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_dbg(&dev->dev, "  dma %d already set to %d flags %#lx\n",
 			idx, (int) res->start, res->flags);
 		return 0;
@@ -242,6 +249,7 @@ static void pnp_clean_resource_table(struct pnp_dev *dev)
 {
 	struct pnp_resource *pnp_res, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(pnp_res, tmp, &dev->resources, list) {
 		if (pnp_res->res.flags & IORESOURCE_AUTO)
 			pnp_free_resource(pnp_res);
@@ -260,6 +268,7 @@ static int pnp_assign_resources(struct pnp_dev *dev, int set)
 	int ndma __maybe_unused = 0;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pnp_dbg(&dev->dev, "pnp_assign_resources, try dependent set %d\n", set);
 	mutex_lock(&pnp_res_mutex);
 	pnp_clean_resource_table(dev);
@@ -309,6 +318,7 @@ int pnp_auto_config_dev(struct pnp_dev *dev)
 {
 	int i, ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pnp_can_configure(dev)) {
 		pnp_dbg(&dev->dev, "configuration not supported\n");
 		return -ENODEV;
@@ -336,6 +346,7 @@ int pnp_auto_config_dev(struct pnp_dev *dev)
  */
 int pnp_start_dev(struct pnp_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pnp_can_write(dev)) {
 		pnp_dbg(&dev->dev, "activation not supported\n");
 		return -EINVAL;
@@ -359,6 +370,7 @@ int pnp_start_dev(struct pnp_dev *dev)
  */
 int pnp_stop_dev(struct pnp_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pnp_can_disable(dev)) {
 		pnp_dbg(&dev->dev, "disabling not supported\n");
 		return -EINVAL;
@@ -383,7 +395,9 @@ int pnp_activate_dev(struct pnp_dev *dev)
 	int error;
 
 	if (dev->active)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* ensure resources are allocated */
 	if (pnp_auto_config_dev(dev))
@@ -408,7 +422,9 @@ int pnp_disable_dev(struct pnp_dev *dev)
 	int error;
 
 	if (!dev->active)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	error = pnp_stop_dev(dev);
 	if (error)
diff --git a/drivers/pnp/pnpacpi/core.c b/drivers/pnp/pnpacpi/core.c
index 3a4c1aa..ca766af 100644
--- a/drivers/pnp/pnpacpi/core.c
+++ b/drivers/pnp/pnpacpi/core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * pnpacpi -- PnP ACPI driver
  *
@@ -49,12 +51,15 @@ static int __init ispnpidacpi(const char *id)
 	TEST_HEX(id[5]);
 	TEST_HEX(id[6]);
 	if (id[7] != '\0')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return 1;
 }
 
 static int pnpacpi_get_resources(struct pnp_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pnp_dbg(&dev->dev, "get resources\n");
 	return pnpacpi_parse_allocated_resource(dev);
 }
@@ -65,6 +70,7 @@ static int pnpacpi_set_resources(struct pnp_dev *dev)
 	acpi_handle handle;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pnp_dbg(&dev->dev, "set resources\n");
 
 	acpi_dev = ACPI_COMPANION(&dev->dev);
@@ -105,6 +111,7 @@ static int pnpacpi_disable_resources(struct pnp_dev *dev)
 	struct acpi_device *acpi_dev;
 	acpi_status status;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&dev->dev, "disable resources\n");
 
 	acpi_dev = ACPI_COMPANION(&dev->dev);
@@ -128,6 +135,7 @@ static int pnpacpi_disable_resources(struct pnp_dev *dev)
 #ifdef CONFIG_ACPI_SLEEP
 static bool pnpacpi_can_wakeup(struct pnp_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = ACPI_COMPANION(&dev->dev);
 
 	if (!acpi_dev) {
@@ -140,6 +148,7 @@ static bool pnpacpi_can_wakeup(struct pnp_dev *dev)
 
 static int pnpacpi_suspend(struct pnp_dev *dev, pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = ACPI_COMPANION(&dev->dev);
 	int error = 0;
 
@@ -176,6 +185,7 @@ static int pnpacpi_suspend(struct pnp_dev *dev, pm_message_t state)
 
 static int pnpacpi_resume(struct pnp_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct acpi_device *acpi_dev = ACPI_COMPANION(&dev->dev);
 	int error = 0;
 
@@ -213,9 +223,12 @@ static const char *__init pnpacpi_get_id(struct acpi_device *device)
 
 	list_for_each_entry(id, &device->pnp.ids, list) {
 		if (ispnpidacpi(id->id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return id->id;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -228,42 +241,62 @@ static int __init pnpacpi_add_device(struct acpi_device *device)
 
 	/* Skip devices that are already bound */
 	if (device->physical_node_count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * If a PnPacpi device is not present , the device
 	 * driver should not be loaded.
 	 */
 	if (!acpi_has_method(device->handle, "_CRS"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	pnpid = pnpacpi_get_id(device);
 	if (!pnpid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!device->status.present)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	dev = pnp_alloc_dev(&pnpacpi_protocol, num, pnpid);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ACPI_COMPANION_SET(&dev->dev, device);
 	dev->data = device;
 	/* .enabled means the device can decode the resources */
 	dev->active = device->status.enabled;
 	if (acpi_has_method(device->handle, "_SRS"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->capabilities |= PNP_CONFIGURABLE;
+}
 	dev->capabilities |= PNP_READ;
 	if (device->flags.dynamic_status && (dev->capabilities & PNP_CONFIGURABLE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->capabilities |= PNP_WRITE;
+}
 	if (device->flags.removable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->capabilities |= PNP_REMOVABLE;
+}
 	if (acpi_has_method(device->handle, "_DIS"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->capabilities |= PNP_DISABLE;
+}
 
 	if (strlen(acpi_device_name(device)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		strncpy(dev->name, acpi_device_name(device), sizeof(dev->name));
+}
 	else
 		strncpy(dev->name, acpi_device_bid(device), sizeof(dev->name));
 
@@ -271,22 +304,29 @@ static int __init pnpacpi_add_device(struct acpi_device *device)
 		pnpacpi_parse_allocated_resource(dev);
 
 	if (dev->capabilities & PNP_CONFIGURABLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnpacpi_parse_resource_option_data(dev);
+}
 
 	list_for_each_entry(id, &device->pnp.ids, list) {
 		if (!strcmp(id->id, pnpid))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ispnpidacpi(id->id))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_add_id(dev, id->id);
 	}
 
 	/* clear out the damaged flags */
 	if (!dev->active)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_init_resources(dev);
+}
 
 	error = pnp_add_device(dev);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_device(&dev->dev);
 		return error;
 	}
@@ -303,9 +343,12 @@ static acpi_status __init pnpacpi_add_device_handler(acpi_handle handle,
 	struct acpi_device *device;
 
 	if (acpi_bus_get_device(handle, &device))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_CTRL_DEPTH;
+}
 	if (acpi_is_pnp_device(device))
 		pnpacpi_add_device(device);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return AE_OK;
 }
 
@@ -313,6 +356,7 @@ int pnpacpi_disabled __initdata;
 static int __init pnpacpi_init(void)
 {
 	if (acpi_disabled || pnpacpi_disabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_INFO "pnp: PnP ACPI: disabled\n");
 		return 0;
 	}
@@ -328,6 +372,7 @@ fs_initcall(pnpacpi_init);
 
 static int __init pnpacpi_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (str == NULL)
 		return 1;
 	if (!strncmp(str, "off", 3))
diff --git a/drivers/pnp/pnpacpi/rsparser.c b/drivers/pnp/pnpacpi/rsparser.c
index 43d8ed57..277a3a9 100644
--- a/drivers/pnp/pnpacpi/rsparser.c
+++ b/drivers/pnp/pnpacpi/rsparser.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * pnpacpi -- PnP ACPI driver
  *
@@ -27,6 +29,7 @@
 static void decode_irq_flags(struct pnp_dev *dev, int flags, u8 *triggering,
 			     u8 *polarity, u8 *shareable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (flags & (IORESOURCE_IRQ_LOWLEVEL | IORESOURCE_IRQ_HIGHLEVEL |
 			 IORESOURCE_IRQ_LOWEDGE  | IORESOURCE_IRQ_HIGHEDGE)) {
 	case IORESOURCE_IRQ_LOWLEVEL:
@@ -65,7 +68,9 @@ static int dma_flags(struct pnp_dev *dev, int type, int bus_master,
 	int flags = 0;
 
 	if (bus_master)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= IORESOURCE_DMA_MASTER;
+}
 	switch (type) {
 	case ACPI_COMPATIBILITY:
 		flags |= IORESOURCE_DMA_COMPATIBLE;
@@ -160,6 +165,7 @@ static int vendor_resource_matches(struct pnp_dev *dev,
 static void pnpacpi_parse_allocated_vendor(struct pnp_dev *dev,
 				    struct acpi_resource_vendor_typed *vendor)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (vendor_resource_matches(dev, vendor, &hp_ccsr_uuid, 16)) {
 		u64 start, length;
 
@@ -183,6 +189,7 @@ static acpi_status pnpacpi_allocated_resource(struct acpi_resource *res,
 
 	if (acpi_dev_resource_address_space(res, &win)
 	    || acpi_dev_resource_ext_address_space(res, &win)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_add_resource(dev, &win.res);
 		return AE_OK;
 	}
@@ -191,7 +198,9 @@ static acpi_status pnpacpi_allocated_resource(struct acpi_resource *res,
 	if (acpi_dev_resource_interrupt(res, 0, r)) {
 		pnpacpi_add_irqresource(dev, r);
 		for (i = 1; acpi_dev_resource_interrupt(res, i, r); i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pnpacpi_add_irqresource(dev, r);
+}
 
 		if (i > 1) {
 			/*
@@ -200,11 +209,13 @@ static acpi_status pnpacpi_allocated_resource(struct acpi_resource *res,
 			 * one interrupt, we won't be able to re-encode it.
 			 */
 			if (pnp_can_write(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev_warn(&dev->dev,
 					 "multiple interrupts in _CRS descriptor; configuration can't be changed\n");
 				dev->capabilities &= ~PNP_WRITE;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return AE_OK;
 	} else if (acpi_gpio_get_irq_resource(res, &gpio)) {
 		/*
@@ -213,15 +224,19 @@ static acpi_status pnpacpi_allocated_resource(struct acpi_resource *res,
 		 */
 		i = acpi_dev_gpio_irq_get(dev->data, 0);
 		if (i >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flags = acpi_dev_irq_flags(gpio->triggering,
 						   gpio->polarity,
 						   gpio->sharable);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flags = IORESOURCE_DISABLED;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_add_irq_resource(dev, i, flags);
 		return AE_OK;
 	} else if (r->flags & IORESOURCE_DISABLED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_add_irq_resource(dev, 0, IORESOURCE_DISABLED);
 		return AE_OK;
 	}
@@ -231,7 +246,9 @@ static acpi_status pnpacpi_allocated_resource(struct acpi_resource *res,
 	case ACPI_RESOURCE_TYPE_MEMORY32:
 	case ACPI_RESOURCE_TYPE_FIXED_MEMORY32:
 		if (acpi_dev_resource_memory(res, r))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pnp_add_resource(dev, r);
+}
 		break;
 	case ACPI_RESOURCE_TYPE_IO:
 	case ACPI_RESOURCE_TYPE_FIXED_IO:
@@ -240,11 +257,15 @@ static acpi_status pnpacpi_allocated_resource(struct acpi_resource *res,
 		break;
 	case ACPI_RESOURCE_TYPE_DMA:
 		dma = &res->data.dma;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dma->channel_count > 0 && dma->channels[0] != (u8) -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flags = dma_flags(dev, dma->type, dma->bus_master,
 					  dma->transfer);
+}
 		else
 			flags = IORESOURCE_DISABLED;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_add_dma_resource(dev, dma->channels[0], flags);
 		break;
 
@@ -273,6 +294,7 @@ static acpi_status pnpacpi_allocated_resource(struct acpi_resource *res,
 		return AE_ERROR;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return AE_OK;
 }
 
@@ -282,6 +304,7 @@ int pnpacpi_parse_allocated_resource(struct pnp_dev *dev)
 	acpi_handle handle = acpi_dev->handle;
 	acpi_status status;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pnp_dbg(&dev->dev, "parse allocated resources\n");
 
 	pnp_init_resources(dev);
@@ -290,10 +313,15 @@ int pnpacpi_parse_allocated_resource(struct pnp_dev *dev)
 				     pnpacpi_allocated_resource, dev);
 
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status != AE_NOT_FOUND)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(&dev->dev, "can't evaluate _CRS: %d", status);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -304,6 +332,7 @@ static __init void pnpacpi_parse_dma_option(struct pnp_dev *dev,
 	int i;
 	unsigned char map = 0, flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < p->channel_count; i++)
 		map |= 1 << p->channels[i];
 
@@ -320,6 +349,7 @@ static __init void pnpacpi_parse_irq_option(struct pnp_dev *dev,
 	unsigned char flags;
 
 	bitmap_zero(map.bits, PNP_IRQ_NR);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < p->interrupt_count; i++)
 		if (p->interrupts[i])
 			__set_bit(p->interrupts[i], map.bits);
@@ -337,6 +367,7 @@ static __init void pnpacpi_parse_ext_irq_option(struct pnp_dev *dev,
 	unsigned char flags;
 
 	bitmap_zero(map.bits, PNP_IRQ_NR);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < p->interrupt_count; i++) {
 		if (p->interrupts[i]) {
 			if (p->interrupts[i] < PNP_IRQ_NR)
@@ -359,7 +390,9 @@ static __init void pnpacpi_parse_port_option(struct pnp_dev *dev,
 	unsigned char flags = 0;
 
 	if (io->io_decode == ACPI_DECODE_16)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = IORESOURCE_IO_16BIT_ADDR;
+}
 	pnp_register_port_resource(dev, option_flags, io->minimum, io->maximum,
 				   io->alignment, io->address_length, flags);
 }
@@ -368,6 +401,7 @@ static __init void pnpacpi_parse_fixed_port_option(struct pnp_dev *dev,
 					unsigned int option_flags,
 					struct acpi_resource_fixed_io *io)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pnp_register_port_resource(dev, option_flags, io->address, io->address,
 				   0, io->address_length, IORESOURCE_IO_FIXED);
 }
@@ -379,7 +413,9 @@ static __init void pnpacpi_parse_mem24_option(struct pnp_dev *dev,
 	unsigned char flags = 0;
 
 	if (p->write_protect == ACPI_READ_WRITE_MEMORY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = IORESOURCE_MEM_WRITEABLE;
+}
 	pnp_register_mem_resource(dev, option_flags, p->minimum, p->maximum,
 				  p->alignment, p->address_length, flags);
 }
@@ -391,7 +427,9 @@ static __init void pnpacpi_parse_mem32_option(struct pnp_dev *dev,
 	unsigned char flags = 0;
 
 	if (p->write_protect == ACPI_READ_WRITE_MEMORY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = IORESOURCE_MEM_WRITEABLE;
+}
 	pnp_register_mem_resource(dev, option_flags, p->minimum, p->maximum,
 				  p->alignment, p->address_length, flags);
 }
@@ -403,7 +441,9 @@ static __init void pnpacpi_parse_fixed_mem32_option(struct pnp_dev *dev,
 	unsigned char flags = 0;
 
 	if (p->write_protect == ACPI_READ_WRITE_MEMORY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = IORESOURCE_MEM_WRITEABLE;
+}
 	pnp_register_mem_resource(dev, option_flags, p->address, p->address,
 				  0, p->address_length, flags);
 }
@@ -418,6 +458,7 @@ static __init void pnpacpi_parse_address_option(struct pnp_dev *dev,
 
 	status = acpi_resource_to_address64(r, p);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(&dev->dev, "can't convert resource type %d\n",
 			 r->type);
 		return;
@@ -443,6 +484,7 @@ static __init void pnpacpi_parse_ext_address_option(struct pnp_dev *dev,
 	unsigned char flags = 0;
 
 	if (p->resource_type == ACPI_MEMORY_RANGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (p->info.mem.write_protect == ACPI_READ_WRITE_MEMORY)
 			flags = IORESOURCE_MEM_WRITEABLE;
 		pnp_register_mem_resource(dev, option_flags, p->address.minimum,
@@ -562,6 +604,7 @@ int __init pnpacpi_parse_resource_option_data(struct pnp_dev *dev)
 	acpi_status status;
 	struct acpipnp_parse_option_s parse_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pnp_dbg(&dev->dev, "parse resource options\n");
 
 	parse_data.dev = dev;
@@ -580,6 +623,7 @@ int __init pnpacpi_parse_resource_option_data(struct pnp_dev *dev)
 
 static int pnpacpi_supported_resource(struct acpi_resource *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (res->type) {
 	case ACPI_RESOURCE_TYPE_IRQ:
 	case ACPI_RESOURCE_TYPE_DMA:
@@ -607,7 +651,9 @@ static acpi_status pnpacpi_count_resources(struct acpi_resource *res,
 	int *res_cnt = data;
 
 	if (pnpacpi_supported_resource(res))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		(*res_cnt)++;
+}
 	return AE_OK;
 }
 
@@ -616,6 +662,7 @@ static acpi_status pnpacpi_type_resources(struct acpi_resource *res, void *data)
 	struct acpi_resource **resource = data;
 
 	if (pnpacpi_supported_resource(res)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		(*resource)->type = res->type;
 		(*resource)->length = sizeof(struct acpi_resource);
 		if (res->type == ACPI_RESOURCE_TYPE_IRQ)
@@ -639,6 +686,7 @@ int pnpacpi_build_resource_template(struct pnp_dev *dev,
 	status = acpi_walk_resources(handle, METHOD_NAME__CRS,
 				     pnpacpi_count_resources, &res_cnt);
 	if (ACPI_FAILURE(status)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&dev->dev, "can't evaluate _CRS: %d\n", status);
 		return -EINVAL;
 	}
@@ -672,6 +720,7 @@ static void pnpacpi_encode_irq(struct pnp_dev *dev,
 	u8 triggering, polarity, shareable;
 
 	if (!pnp_resource_enabled(p)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		irq->interrupt_count = 0;
 		pnp_dbg(&dev->dev, "  encode irq (%s)\n",
 			p ? "disabled" : "missing");
@@ -701,6 +750,7 @@ static void pnpacpi_encode_ext_irq(struct pnp_dev *dev,
 	u8 triggering, polarity, shareable;
 
 	if (!pnp_resource_enabled(p)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		extended_irq->interrupt_count = 0;
 		pnp_dbg(&dev->dev, "  encode extended irq (%s)\n",
 			p ? "disabled" : "missing");
@@ -728,6 +778,7 @@ static void pnpacpi_encode_dma(struct pnp_dev *dev,
 	struct acpi_resource_dma *dma = &resource->data.dma;
 
 	if (!pnp_resource_enabled(p)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dma->channel_count = 0;
 		pnp_dbg(&dev->dev, "  encode dma (%s)\n",
 			p ? "disabled" : "missing");
@@ -799,6 +850,7 @@ static void pnpacpi_encode_fixed_io(struct pnp_dev *dev,
 	struct acpi_resource_fixed_io *fixed_io = &resource->data.fixed_io;
 
 	if (pnp_resource_enabled(p)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fixed_io->address = p->start;
 		fixed_io->address_length = resource_size(p);
 	} else {
@@ -842,6 +894,7 @@ static void pnpacpi_encode_mem32(struct pnp_dev *dev,
 	struct acpi_resource_memory32 *memory32 = &resource->data.memory32;
 
 	if (pnp_resource_enabled(p)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memory32->write_protect = p->flags & IORESOURCE_MEM_WRITEABLE ?
 		    ACPI_READ_WRITE_MEMORY : ACPI_READ_ONLY_MEMORY;
 		memory32->minimum = p->start;
@@ -890,6 +943,7 @@ int pnpacpi_encode_resources(struct pnp_dev *dev, struct acpi_buffer *buffer)
 	struct acpi_resource *resource = buffer->pointer;
 	unsigned int port = 0, irq = 0, dma = 0, mem = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pnp_dbg(&dev->dev, "encode %d resources\n", res_cnt);
 	while (i < res_cnt) {
 		switch (resource->type) {
diff --git a/drivers/pnp/quirks.c b/drivers/pnp/quirks.c
index f054cdd..5830abd 100644
--- a/drivers/pnp/quirks.c
+++ b/drivers/pnp/quirks.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  This file contains quirk handling code for PnP devices
@@ -73,6 +75,7 @@ static void quirk_cmi8330_resources(struct pnp_dev *dev)
 	struct pnp_irq *irq;
 	struct pnp_dma *dma;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(option, &dev->options, list) {
 		if (!pnp_option_is_dependent(option))
 			continue;
@@ -143,6 +146,7 @@ static struct pnp_option *pnp_clone_dependent_set(struct pnp_dev *dev,
 	struct pnp_option *option, *new_option;
 	unsigned int flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(option, &dev->options, list) {
 		if (pnp_option_is_dependent(option))
 			tail = option;
@@ -185,6 +189,7 @@ static void quirk_add_irq_optional_dependent_sets(struct pnp_dev *dev)
 	struct pnp_irq *irq;
 
 	num_sets = dev->num_dependent_sets;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < num_sets; i++) {
 		new_option = pnp_clone_dependent_set(dev, i);
 		if (!new_option)
@@ -212,6 +217,7 @@ static void quirk_ad1815_mpu_resources(struct pnp_dev *dev)
 	struct pnp_irq *irq = NULL;
 	unsigned int independent_irqs = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(option, &dev->options, list) {
 		if (option->type == IORESOURCE_IRQ &&
 		    !pnp_option_is_dependent(option)) {
@@ -313,7 +319,9 @@ static void quirk_amd_mmconfig_area(struct pnp_dev *dev)
 
 	mmconfig = amd_get_mmconfig_range(&mmconfig_res);
 	if (!mmconfig)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	list_for_each_entry(pnp_res, &dev->resources, list) {
 		res = &pnp_res->res;
@@ -353,6 +361,7 @@ static struct pci_dev *get_intel_host(void)
 	int i;
 	struct pci_dev *host;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(mch_quirk_devices); i++) {
 		host = pci_get_device(PCI_VENDOR_ID_INTEL, mch_quirk_devices[i],
 				      NULL);
@@ -373,7 +382,9 @@ static void quirk_intel_mch(struct pnp_dev *dev)
 
 	host = get_intel_host();
 	if (!host)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * MCHBAR is not an architected PCI BAR, so MCH space is usually
@@ -459,6 +470,7 @@ void pnp_fixup_device(struct pnp_dev *dev)
 	for (f = pnp_fixups; *f->id; f++) {
 		if (!compare_pnp_id(dev->id, f->id))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_dbg(&dev->dev, "%s: calling %pF\n", f->id,
 			f->quirk_function);
 		f->quirk_function(dev);
diff --git a/drivers/pnp/resource.c b/drivers/pnp/resource.c
index 70d4ba9..a23dda4 100644
--- a/drivers/pnp/resource.c
+++ b/drivers/pnp/resource.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * resource.c - Contains functions for registering and analyzing resource information
@@ -39,7 +41,9 @@ static struct pnp_option *pnp_build_option(struct pnp_dev *dev, unsigned long ty
 
 	option = kzalloc(sizeof(struct pnp_option), GFP_KERNEL);
 	if (!option)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	option->flags = option_flags;
 	option->type = type;
@@ -56,7 +60,9 @@ int pnp_register_irq_resource(struct pnp_dev *dev, unsigned int option_flags,
 
 	option = pnp_build_option(dev, IORESOURCE_IRQ, option_flags);
 	if (!option)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	irq = &option->u.irq;
 	irq->map = *map;
@@ -84,7 +90,9 @@ int pnp_register_dma_resource(struct pnp_dev *dev, unsigned int option_flags,
 
 	option = pnp_build_option(dev, IORESOURCE_DMA, option_flags);
 	if (!option)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	dma = &option->u.dma;
 	dma->map = map;
@@ -104,7 +112,9 @@ int pnp_register_port_resource(struct pnp_dev *dev, unsigned int option_flags,
 
 	option = pnp_build_option(dev, IORESOURCE_IO, option_flags);
 	if (!option)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	port = &option->u.port;
 	port->min = min;
@@ -127,7 +137,9 @@ int pnp_register_mem_resource(struct pnp_dev *dev, unsigned int option_flags,
 
 	option = pnp_build_option(dev, IORESOURCE_MEM, option_flags);
 	if (!option)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	mem = &option->u.mem;
 	mem->min = min;
@@ -144,6 +156,7 @@ void pnp_free_options(struct pnp_dev *dev)
 {
 	struct pnp_option *option, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(option, tmp, &dev->options, list) {
 		list_del(&option->list);
 		kfree(option);
@@ -175,7 +188,9 @@ int pnp_check_port(struct pnp_dev *dev, struct resource *res)
 
 	/* if the resource doesn't exist, don't complain about it */
 	if (cannot_compare(res->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/* check if the resource is already in use, skip if the
 	 * device is active because it itself may be in use */
@@ -238,7 +253,9 @@ int pnp_check_mem(struct pnp_dev *dev, struct resource *res)
 
 	/* if the resource doesn't exist, don't complain about it */
 	if (cannot_compare(res->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/* check if the resource is already in use, skip if the
 	 * device is active because it itself may be in use */
@@ -291,6 +308,7 @@ int pnp_check_mem(struct pnp_dev *dev, struct resource *res)
 
 static irqreturn_t pnp_test_handler(int irq, void *dev_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return IRQ_HANDLED;
 }
 
@@ -302,6 +320,7 @@ static int pci_dev_uses_irq(struct pnp_dev *pnp, struct pci_dev *pci,
 	u8 progif;
 
 	if (pci->irq == irq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_dbg(&pnp->dev, "  device %s using irq %d\n",
 			pci_name(pci), irq);
 		return 1;
@@ -339,6 +358,7 @@ static int pci_uses_irq(struct pnp_dev *pnp, unsigned int irq)
 #ifdef CONFIG_PCI
 	struct pci_dev *pci = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_pci_dev(pci) {
 		if (pci_dev_uses_irq(pnp, pci, irq)) {
 			pci_dev_put(pci);
@@ -360,7 +380,9 @@ int pnp_check_irq(struct pnp_dev *dev, struct resource *res)
 
 	/* if the resource doesn't exist, don't complain about it */
 	if (cannot_compare(res->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/* check if the resource is valid */
 	if (*irq > 15)
@@ -424,7 +446,9 @@ int pnp_check_dma(struct pnp_dev *dev, struct resource *res)
 
 	/* if the resource doesn't exist, don't complain about it */
 	if (cannot_compare(res->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/* check if the resource is valid */
 	if (*dma == 4 || *dma > 7)
@@ -488,8 +512,11 @@ struct resource *pnp_get_resource(struct pnp_dev *dev,
 	list_for_each_entry(pnp_res, &dev->resources, list) {
 		res = &pnp_res->res;
 		if (pnp_resource_type(res) == type && num-- == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return res;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(pnp_get_resource);
@@ -500,7 +527,9 @@ static struct pnp_resource *pnp_new_resource(struct pnp_dev *dev)
 
 	pnp_res = kzalloc(sizeof(struct pnp_resource), GFP_KERNEL);
 	if (!pnp_res)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	list_add_tail(&pnp_res->list, &dev->resources);
 	return pnp_res;
@@ -513,12 +542,14 @@ struct pnp_resource *pnp_add_resource(struct pnp_dev *dev,
 
 	pnp_res = pnp_new_resource(dev);
 	if (!pnp_res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&dev->dev, "can't add resource %pR\n", res);
 		return NULL;
 	}
 
 	pnp_res->res = *res;
 	pnp_res->res.name = dev->name;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&dev->dev, "%pR\n", res);
 	return pnp_res;
 }
@@ -531,6 +562,7 @@ struct pnp_resource *pnp_add_irq_resource(struct pnp_dev *dev, int irq,
 
 	pnp_res = pnp_new_resource(dev);
 	if (!pnp_res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&dev->dev, "can't add resource for IRQ %d\n", irq);
 		return NULL;
 	}
@@ -552,6 +584,7 @@ struct pnp_resource *pnp_add_dma_resource(struct pnp_dev *dev, int dma,
 
 	pnp_res = pnp_new_resource(dev);
 	if (!pnp_res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&dev->dev, "can't add resource for DMA %d\n", dma);
 		return NULL;
 	}
@@ -574,6 +607,7 @@ struct pnp_resource *pnp_add_io_resource(struct pnp_dev *dev,
 
 	pnp_res = pnp_new_resource(dev);
 	if (!pnp_res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&dev->dev, "can't add resource for IO %#llx-%#llx\n",
 			(unsigned long long) start,
 			(unsigned long long) end);
@@ -598,6 +632,7 @@ struct pnp_resource *pnp_add_mem_resource(struct pnp_dev *dev,
 
 	pnp_res = pnp_new_resource(dev);
 	if (!pnp_res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&dev->dev, "can't add resource for MEM %#llx-%#llx\n",
 			(unsigned long long) start,
 			(unsigned long long) end);
@@ -622,6 +657,7 @@ struct pnp_resource *pnp_add_bus_resource(struct pnp_dev *dev,
 
 	pnp_res = pnp_new_resource(dev);
 	if (!pnp_res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&dev->dev, "can't add resource for BUS %#llx-%#llx\n",
 			(unsigned long long) start,
 			(unsigned long long) end);
@@ -650,6 +686,7 @@ int pnp_possible_config(struct pnp_dev *dev, int type, resource_size_t start,
 	struct pnp_irq *irq;
 	struct pnp_dma *dma;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(option, &dev->options, list) {
 		if (option->type != type)
 			continue;
@@ -689,6 +726,7 @@ int pnp_range_reserved(resource_size_t start, resource_size_t end)
 	struct pnp_resource *pnp_res;
 	resource_size_t *dev_start, *dev_end;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pnp_for_each_dev(dev) {
 		list_for_each_entry(pnp_res, &dev->resources, list) {
 			dev_start = &pnp_res->res.start;
@@ -706,6 +744,7 @@ static int __init pnp_setup_reserve_irq(char *str)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < 16; i++)
 		if (get_option(&str, &pnp_reserve_irq[i]) != 2)
 			break;
@@ -719,6 +758,7 @@ static int __init pnp_setup_reserve_dma(char *str)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < 8; i++)
 		if (get_option(&str, &pnp_reserve_dma[i]) != 2)
 			break;
@@ -732,6 +772,7 @@ static int __init pnp_setup_reserve_io(char *str)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < 16; i++)
 		if (get_option(&str, &pnp_reserve_io[i]) != 2)
 			break;
@@ -745,6 +786,7 @@ static int __init pnp_setup_reserve_mem(char *str)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < 16; i++)
 		if (get_option(&str, &pnp_reserve_mem[i]) != 2)
 			break;
diff --git a/drivers/pnp/system.c b/drivers/pnp/system.c
index 6950503..a36aaae 100644
--- a/drivers/pnp/system.c
+++ b/drivers/pnp/system.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * system.c - a driver for reserving pnp system resources
@@ -32,7 +34,9 @@ static void reserve_range(struct pnp_dev *dev, struct resource *r, int port)
 
 	regionid = kmalloc(16, GFP_KERNEL);
 	if (!regionid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	snprintf(regionid, 16, "pnp %s", pnpid);
 	if (port)
@@ -58,6 +62,7 @@ static void reserve_resources_of_dev(struct pnp_dev *dev)
 	struct resource *res;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; (res = pnp_get_resource(dev, IORESOURCE_IO, i)); i++) {
 		if (res->flags & IORESOURCE_DISABLED)
 			continue;
@@ -90,6 +95,7 @@ static void reserve_resources_of_dev(struct pnp_dev *dev)
 static int system_pnp_probe(struct pnp_dev *dev,
 			    const struct pnp_device_id *dev_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	reserve_resources_of_dev(dev);
 	return 0;
 }
diff --git a/drivers/power/supply/power_supply_core.c b/drivers/power/supply/power_supply_core.c
index 02c6340..716a488 100644
--- a/drivers/power/supply/power_supply_core.c
+++ b/drivers/power/supply/power_supply_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Universal power supply monitor class
  *
@@ -38,6 +40,7 @@ static bool __power_supply_is_supplied_by(struct power_supply *supplier,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!supply->supplied_from && !supplier->supplied_to)
 		return false;
 
@@ -65,6 +68,7 @@ static int __power_supply_changed_work(struct device *dev, void *data)
 	struct power_supply *pst = dev_get_drvdata(dev);
 
 	if (__power_supply_is_supplied_by(psy, pst)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pst->desc->external_power_changed)
 			pst->desc->external_power_changed(pst);
 	}
@@ -75,6 +79,7 @@ static int __power_supply_changed_work(struct device *dev, void *data)
 static void power_supply_changed_work(struct work_struct *work)
 {
 	unsigned long flags;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct power_supply *psy = container_of(work, struct power_supply,
 						changed_work);
 
@@ -114,6 +119,7 @@ void power_supply_changed(struct power_supply *psy)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&psy->dev, "%s\n", __func__);
 
 	spin_lock_irqsave(&psy->changed_lock, flags);
@@ -136,6 +142,7 @@ EXPORT_SYMBOL_GPL(power_supply_changed);
  */
 static void power_supply_deferred_register_work(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct power_supply *psy = container_of(work, struct power_supply,
 						deferred_register_work.work);
 
@@ -276,7 +283,9 @@ static int power_supply_check_supplies(struct power_supply *psy)
 	int nval, ret;
 
 	if (!psy->dev.parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	nval = device_property_read_string_array(psy->dev.parent,
 						 "supplied-from", NULL, 0);
@@ -311,6 +320,7 @@ static int __power_supply_am_i_supplied(struct device *dev, void *_data)
 	struct psy_am_i_supplied_data *data = _data;
 
 	if (__power_supply_is_supplied_by(epsy, data->psy)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		data->count++;
 		if (!epsy->desc->get_property(epsy, POWER_SUPPLY_PROP_ONLINE,
 					&ret))
@@ -328,6 +338,7 @@ int power_supply_am_i_supplied(struct power_supply *psy)
 	error = class_for_each_device(power_supply_class, NULL, &data,
 				      __power_supply_am_i_supplied);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&psy->dev, "%s count %u err %d\n", __func__, data.count, error);
 
 	if (data.count == 0)
@@ -345,9 +356,11 @@ static int __power_supply_is_system_supplied(struct device *dev, void *data)
 
 	(*count)++;
 	if (psy->desc->type != POWER_SUPPLY_TYPE_BATTERY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!psy->desc->get_property(psy, POWER_SUPPLY_PROP_ONLINE,
 					&ret))
 			return ret.intval;
+}
 
 	return 0;
 }
@@ -365,7 +378,9 @@ int power_supply_is_system_supplied(void)
 	 * running on a desktop system, so assume we are on mains power.
 	 */
 	if (count == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	return error;
 }
@@ -379,10 +394,12 @@ static int __power_supply_get_supplier_max_current(struct device *dev,
 	struct power_supply *psy = data;
 
 	if (__power_supply_is_supplied_by(epsy, psy))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!epsy->desc->get_property(epsy,
 					      POWER_SUPPLY_PROP_CURRENT_MAX,
 					      &ret))
 			return ret.intval;
+}
 
 	return 0;
 }
@@ -393,7 +410,9 @@ int power_supply_set_input_current_limit_from_supplier(struct power_supply *psy)
 	int curr;
 
 	if (!psy->desc->set_property)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/*
 	 * This function is not intended for use with a supply with multiple
@@ -414,6 +433,7 @@ EXPORT_SYMBOL_GPL(power_supply_set_input_current_limit_from_supplier);
 
 int power_supply_set_battery_charged(struct power_supply *psy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atomic_read(&psy->use_cnt) >= 0 &&
 			psy->desc->type == POWER_SUPPLY_TYPE_BATTERY &&
 			psy->desc->set_charged) {
@@ -451,6 +471,7 @@ struct power_supply *power_supply_get_by_name(const char *name)
 					power_supply_match_device_by_name);
 
 	if (dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		psy = dev_get_drvdata(dev);
 		atomic_inc(&psy->use_cnt);
 	}
@@ -468,6 +489,7 @@ EXPORT_SYMBOL_GPL(power_supply_get_by_name);
  */
 void power_supply_put(struct power_supply *psy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	atomic_dec(&psy->use_cnt);
@@ -574,6 +596,7 @@ int power_supply_get_battery_info(struct power_supply *psy,
 	info->constant_charge_voltage_max_uv = -EINVAL;
 
 	if (!psy->of_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(&psy->dev, "%s currently only supports devicetree\n",
 			 __func__);
 		return -ENXIO;
@@ -618,6 +641,7 @@ int power_supply_get_property(struct power_supply *psy,
 			    enum power_supply_property psp,
 			    union power_supply_propval *val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atomic_read(&psy->use_cnt) <= 0) {
 		if (!psy->initialized)
 			return -EAGAIN;
@@ -632,6 +656,7 @@ int power_supply_set_property(struct power_supply *psy,
 			    enum power_supply_property psp,
 			    const union power_supply_propval *val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atomic_read(&psy->use_cnt) <= 0 || !psy->desc->set_property)
 		return -ENODEV;
 
@@ -642,6 +667,7 @@ EXPORT_SYMBOL_GPL(power_supply_set_property);
 int power_supply_property_is_writeable(struct power_supply *psy,
 					enum power_supply_property psp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atomic_read(&psy->use_cnt) <= 0 ||
 			!psy->desc->property_is_writeable)
 		return -ENODEV;
@@ -652,6 +678,7 @@ EXPORT_SYMBOL_GPL(power_supply_property_is_writeable);
 
 void power_supply_external_power_changed(struct power_supply *psy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atomic_read(&psy->use_cnt) <= 0 ||
 			!psy->desc->external_power_changed)
 		return;
@@ -662,12 +689,14 @@ EXPORT_SYMBOL_GPL(power_supply_external_power_changed);
 
 int power_supply_powers(struct power_supply *psy, struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sysfs_create_link(&psy->dev.kobj, &dev->kobj, "powers");
 }
 EXPORT_SYMBOL_GPL(power_supply_powers);
 
 static void power_supply_dev_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct power_supply *psy = container_of(dev, struct power_supply, dev);
 	pr_debug("device: '%s': %s\n", dev_name(dev), __func__);
 	kfree(psy);
@@ -675,12 +704,14 @@ static void power_supply_dev_release(struct device *dev)
 
 int power_supply_reg_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_chain_register(&power_supply_notifier, nb);
 }
 EXPORT_SYMBOL_GPL(power_supply_reg_notifier);
 
 void power_supply_unreg_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_notifier_chain_unregister(&power_supply_notifier, nb);
 }
 EXPORT_SYMBOL_GPL(power_supply_unreg_notifier);
@@ -693,6 +724,7 @@ static int power_supply_read_temp(struct thermal_zone_device *tzd,
 	union power_supply_propval val;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(tzd == NULL);
 	psy = tzd->devdata;
 	ret = power_supply_get_property(psy, POWER_SUPPLY_PROP_TEMP, &val);
@@ -714,7 +746,9 @@ static int psy_register_thermal(struct power_supply *psy)
 	int i;
 
 	if (psy->desc->no_thermal)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Register battery zone device psy reports temperature */
 	for (i = 0; i < psy->desc->num_properties; i++) {
@@ -729,6 +763,7 @@ static int psy_register_thermal(struct power_supply *psy)
 
 static void psy_unregister_thermal(struct power_supply *psy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ERR_OR_NULL(psy->tzd))
 		return;
 	thermal_zone_device_unregister(psy->tzd);
@@ -746,7 +781,9 @@ static int ps_get_max_charge_cntl_limit(struct thermal_cooling_device *tcd,
 	ret = power_supply_get_property(psy,
 			POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT_MAX, &val);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	*state = val.intval;
 
@@ -764,7 +801,9 @@ static int ps_get_cur_chrage_cntl_limit(struct thermal_cooling_device *tcd,
 	ret = power_supply_get_property(psy,
 			POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT, &val);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	*state = val.intval;
 
@@ -811,6 +850,7 @@ static int psy_register_cooler(struct power_supply *psy)
 
 static void psy_unregister_cooler(struct power_supply *psy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ERR_OR_NULL(psy->tcd))
 		return;
 	thermal_cooling_device_unregister(psy->tcd);
@@ -846,8 +886,10 @@ __power_supply_register(struct device *parent,
 	int rc;
 
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("%s: Expected proper parent device for '%s'\n",
 			__func__, desc->name);
+}
 
 	psy = kzalloc(sizeof(*psy), GFP_KERNEL);
 	if (!psy)
@@ -955,6 +997,7 @@ struct power_supply *__must_check power_supply_register(struct device *parent,
 		const struct power_supply_desc *desc,
 		const struct power_supply_config *cfg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __power_supply_register(parent, desc, cfg, true);
 }
 EXPORT_SYMBOL_GPL(power_supply_register);
@@ -978,6 +1021,7 @@ power_supply_register_no_ws(struct device *parent,
 		const struct power_supply_desc *desc,
 		const struct power_supply_config *cfg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __power_supply_register(parent, desc, cfg, false);
 }
 EXPORT_SYMBOL_GPL(power_supply_register_no_ws);
@@ -1013,7 +1057,9 @@ devm_power_supply_register(struct device *parent,
 	ptr = devres_alloc(devm_power_supply_release, sizeof(*ptr), GFP_KERNEL);
 
 	if (!ptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 	psy = __power_supply_register(parent, desc, cfg, true);
 	if (IS_ERR(psy)) {
 		devres_free(ptr);
@@ -1049,7 +1095,9 @@ devm_power_supply_register_no_ws(struct device *parent,
 	ptr = devres_alloc(devm_power_supply_release, sizeof(*ptr), GFP_KERNEL);
 
 	if (!ptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 	psy = __power_supply_register(parent, desc, cfg, false);
 	if (IS_ERR(psy)) {
 		devres_free(ptr);
@@ -1070,6 +1118,7 @@ EXPORT_SYMBOL_GPL(devm_power_supply_register_no_ws);
  */
 void power_supply_unregister(struct power_supply *psy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(atomic_dec_return(&psy->use_cnt));
 	cancel_work_sync(&psy->changed_work);
 	cancel_delayed_work_sync(&psy->deferred_register_work);
@@ -1084,6 +1133,7 @@ EXPORT_SYMBOL_GPL(power_supply_unregister);
 
 void *power_supply_get_drvdata(struct power_supply *psy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return psy->drv_data;
 }
 EXPORT_SYMBOL_GPL(power_supply_get_drvdata);
@@ -1093,7 +1143,9 @@ static int __init power_supply_class_init(void)
 	power_supply_class = class_create(THIS_MODULE, "power_supply");
 
 	if (IS_ERR(power_supply_class))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(power_supply_class);
+}
 
 	power_supply_class->dev_uevent = power_supply_uevent;
 	power_supply_init_attrs(&power_supply_dev_type);
@@ -1103,6 +1155,7 @@ static int __init power_supply_class_init(void)
 
 static void __exit power_supply_class_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	class_destroy(power_supply_class);
 }
 
diff --git a/drivers/power/supply/power_supply_sysfs.c b/drivers/power/supply/power_supply_sysfs.c
index 5204f11..c4d3436 100644
--- a/drivers/power/supply/power_supply_sysfs.c
+++ b/drivers/power/supply/power_supply_sysfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Sysfs interface for the universal power supply monitor class
  *
@@ -82,6 +84,7 @@ static ssize_t power_supply_show_property(struct device *dev,
 	union power_supply_propval value;
 
 	if (off == POWER_SUPPLY_PROP_TYPE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		value.intval = psy->desc->type;
 	} else {
 		ret = power_supply_get_property(psy, off, &value);
@@ -258,6 +261,7 @@ static umode_t power_supply_attr_is_visible(struct kobject *kobj,
 					   struct attribute *attr,
 					   int attrno)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = container_of(kobj, struct device, kobj);
 	struct power_supply *psy = dev_get_drvdata(dev);
 	umode_t mode = S_IRUSR | S_IRGRP | S_IROTH;
@@ -308,7 +312,9 @@ static char *kstruprdup(const char *str, gfp_t gfp)
 	ustr = ret = kmalloc(strlen(str) + 1, gfp);
 
 	if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	while (*str)
 		*ustr++ = toupper(*str++);
@@ -320,6 +326,7 @@ static char *kstruprdup(const char *str, gfp_t gfp)
 
 int power_supply_uevent(struct device *dev, struct kobj_uevent_env *env)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct power_supply *psy = dev_get_drvdata(dev);
 	int ret = 0, j;
 	char *prop_buf;
diff --git a/drivers/pps/pps.c b/drivers/pps/pps.c
index 6eb0db3..3767e88 100644
--- a/drivers/pps/pps.c
+++ b/drivers/pps/pps.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * PPS core file
  *
@@ -71,8 +73,10 @@ static int pps_cdev_pps_fetch(struct pps_device *pps, struct pps_fdata *fdata)
 
 	/* Manage the timeout */
 	if (fdata->timeout.flags & PPS_TIME_INVALID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = wait_event_interruptible(pps->queue,
 				ev != pps->last_ev);
+}
 	else {
 		unsigned long ticks;
 
@@ -260,6 +264,7 @@ static long pps_cdev_compat_ioctl(struct file *file,
 
 	cmd = _IOC(_IOC_DIR(cmd), _IOC_TYPE(cmd), _IOC_NR(cmd), sizeof(void *));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cmd == PPS_FETCH) {
 		struct pps_fdata_compat compat;
 		struct pps_fdata fdata;
@@ -304,6 +309,7 @@ static long pps_cdev_compat_ioctl(struct file *file,
 
 static int pps_cdev_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pps_device *pps = container_of(inode->i_cdev,
 						struct pps_device, cdev);
 	file->private_data = pps;
@@ -313,6 +319,7 @@ static int pps_cdev_open(struct inode *inode, struct file *file)
 
 static int pps_cdev_release(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pps_device *pps = container_of(inode->i_cdev,
 						struct pps_device, cdev);
 	kobject_put(&pps->dev->kobj);
@@ -336,6 +343,7 @@ static const struct file_operations pps_cdev_fops = {
 
 static void pps_device_destruct(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pps_device *pps = dev_get_drvdata(dev);
 
 	cdev_del(&pps->cdev);
@@ -362,6 +370,7 @@ int pps_register_cdev(struct pps_device *pps)
 	 */
 	err = idr_alloc(&pps_idr, pps, 0, PPS_MAX_SOURCES, GFP_KERNEL);
 	if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err == -ENOSPC) {
 			pr_err("%s: too many PPS sources in the system\n",
 			       pps->info.name);
@@ -411,6 +420,7 @@ int pps_register_cdev(struct pps_device *pps)
 
 void pps_unregister_cdev(struct pps_device *pps)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("unregistering pps%d\n", pps->id);
 	pps->lookup_cookie = NULL;
 	device_destroy(pps_class, pps->dev->devt);
@@ -440,6 +450,7 @@ struct pps_device *pps_lookup_dev(void const *cookie)
 	unsigned id;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	idr_for_each_entry(&pps_idr, pps, id)
 		if (cookie == pps->lookup_cookie)
 			break;
@@ -454,6 +465,7 @@ EXPORT_SYMBOL(pps_lookup_dev);
 
 static void __exit pps_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	class_destroy(pps_class);
 	unregister_chrdev_region(pps_devt, PPS_MAX_SOURCES);
 }
@@ -464,6 +476,7 @@ static int __init pps_init(void)
 
 	pps_class = class_create(THIS_MODULE, "pps");
 	if (IS_ERR(pps_class)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to allocate class\n");
 		return PTR_ERR(pps_class);
 	}
@@ -471,6 +484,7 @@ static int __init pps_init(void)
 
 	err = alloc_chrdev_region(&pps_devt, 0, PPS_MAX_SOURCES, "pps");
 	if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to allocate char device region\n");
 		goto remove_class;
 	}
diff --git a/drivers/ptp/ptp_clock.c b/drivers/ptp/ptp_clock.c
index 7eacc1c..0387ba2 100644
--- a/drivers/ptp/ptp_clock.c
+++ b/drivers/ptp/ptp_clock.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * PTP 1588 clock support
  *
@@ -48,6 +50,7 @@ static DEFINE_IDA(ptp_clocks_map);
 
 static inline int queue_free(struct timestamp_event_queue *q)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return PTP_MAX_TIMESTAMPS - queue_cnt(q) - 1;
 }
 
@@ -61,6 +64,7 @@ static void enqueue_external_timestamp(struct timestamp_event_queue *queue,
 
 	seconds = div_u64_rem(src->timestamp, 1000000000, &remainder);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&queue->lock, flags);
 
 	dst = &queue->buf[queue->tail];
@@ -100,6 +104,7 @@ static s32 scaled_ppm_to_ppb(long ppm)
 
 static int ptp_clock_getres(struct posix_clock *pc, struct timespec64 *tp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tp->tv_sec = 0;
 	tp->tv_nsec = 1;
 	return 0;
@@ -107,6 +112,7 @@ static int ptp_clock_getres(struct posix_clock *pc, struct timespec64 *tp)
 
 static int ptp_clock_settime(struct posix_clock *pc, const struct timespec64 *tp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ptp_clock *ptp = container_of(pc, struct ptp_clock, clock);
 
 	return  ptp->info->settime64(ptp->info, tp);
@@ -114,6 +120,7 @@ static int ptp_clock_settime(struct posix_clock *pc, const struct timespec64 *tp
 
 static int ptp_clock_gettime(struct posix_clock *pc, struct timespec64 *tp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ptp_clock *ptp = container_of(pc, struct ptp_clock, clock);
 	int err;
 
@@ -123,6 +130,7 @@ static int ptp_clock_gettime(struct posix_clock *pc, struct timespec64 *tp)
 
 static int ptp_clock_adjtime(struct posix_clock *pc, struct timex *tx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ptp_clock *ptp = container_of(pc, struct ptp_clock, clock);
 	struct ptp_clock_info *ops;
 	int err = -EOPNOTSUPP;
@@ -177,6 +185,7 @@ static struct posix_clock_operations ptp_clock_ops = {
 
 static void delete_ptp_clock(struct posix_clock *pc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ptp_clock *ptp = container_of(pc, struct ptp_clock, clock);
 
 	mutex_destroy(&ptp->tsevq_mux);
@@ -187,6 +196,7 @@ static void delete_ptp_clock(struct posix_clock *pc)
 
 static void ptp_aux_kworker(struct kthread_work *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ptp_clock *ptp = container_of(work, struct ptp_clock,
 					     aux_work.work);
 	struct ptp_clock_info *info = ptp->info;
@@ -207,7 +217,9 @@ struct ptp_clock *ptp_clock_register(struct ptp_clock_info *info,
 	int err = 0, index, major = MAJOR(ptp_devt);
 
 	if (info->n_alarm > PTP_MAX_ALARMS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	/* Initialize a clock structure. */
 	err = -ENOMEM;
@@ -302,6 +314,7 @@ EXPORT_SYMBOL(ptp_clock_register);
 
 int ptp_clock_unregister(struct ptp_clock *ptp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ptp->defunct = 1;
 	wake_up_interruptible(&ptp->tsev_wq);
 
@@ -351,6 +364,7 @@ EXPORT_SYMBOL(ptp_clock_event);
 
 int ptp_clock_index(struct ptp_clock *ptp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ptp->index;
 }
 EXPORT_SYMBOL(ptp_clock_index);
@@ -362,6 +376,7 @@ int ptp_find_pin(struct ptp_clock *ptp,
 	int i;
 
 	mutex_lock(&ptp->pincfg_mux);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ptp->info->n_pins; i++) {
 		if (ptp->info->pin_config[i].func == func &&
 		    ptp->info->pin_config[i].chan == chan) {
@@ -377,6 +392,7 @@ EXPORT_SYMBOL(ptp_find_pin);
 
 int ptp_schedule_worker(struct ptp_clock *ptp, unsigned long delay)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return kthread_mod_delayed_work(ptp->kworker, &ptp->aux_work, delay);
 }
 EXPORT_SYMBOL(ptp_schedule_worker);
@@ -385,6 +401,7 @@ EXPORT_SYMBOL(ptp_schedule_worker);
 
 static void __exit ptp_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	class_destroy(ptp_class);
 	unregister_chrdev_region(ptp_devt, MINORMASK + 1);
 	ida_destroy(&ptp_clocks_map);
@@ -396,12 +413,14 @@ static int __init ptp_init(void)
 
 	ptp_class = class_create(THIS_MODULE, "ptp");
 	if (IS_ERR(ptp_class)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("ptp: failed to allocate class\n");
 		return PTR_ERR(ptp_class);
 	}
 
 	err = alloc_chrdev_region(&ptp_devt, 0, MINORMASK + 1, "ptp");
 	if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("ptp: failed to allocate device region\n");
 		goto no_region;
 	}
diff --git a/drivers/ptp/ptp_kvm.c b/drivers/ptp/ptp_kvm.c
index 2b1b212..eeb2651 100644
--- a/drivers/ptp/ptp_kvm.c
+++ b/drivers/ptp/ptp_kvm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Virtual PTP 1588 clock for use with KVM guests
  *
diff --git a/drivers/rtc/class.c b/drivers/rtc/class.c
index 2ed970d..07fe7e1 100644
--- a/drivers/rtc/class.c
+++ b/drivers/rtc/class.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * RTC subsystem, base class
  *
@@ -29,6 +31,7 @@ struct class *rtc_class;
 
 static void rtc_device_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rtc_device *rtc = to_rtc_device(dev);
 	ida_simple_remove(&rtc_ida, rtc->id);
 	kfree(rtc);
@@ -157,7 +160,9 @@ static struct rtc_device *rtc_allocate_device(void)
 
 	rtc = kzalloc(sizeof(*rtc), GFP_KERNEL);
 	if (!rtc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	device_initialize(&rtc->dev);
 
@@ -192,16 +197,26 @@ static int rtc_device_get_id(struct device *dev)
 	int of_id = -1, id = -1;
 
 	if (dev->of_node)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		of_id = of_alias_get_id(dev->of_node, "rtc");
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (dev->parent && dev->parent->of_node)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		of_id = of_alias_get_id(dev->parent->of_node, "rtc");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (of_id >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		id = ida_simple_get(&rtc_ida, of_id, of_id + 1, GFP_KERNEL);
 		if (id < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_warn(dev, "/aliases ID %d not available\n", of_id);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (id < 0)
 		id = ida_simple_get(&rtc_ida, 0, 0, GFP_KERNEL);
 
@@ -227,12 +242,14 @@ struct rtc_device *rtc_device_register(const char *name, struct device *dev,
 
 	id = rtc_device_get_id(dev);
 	if (id < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = id;
 		goto exit;
 	}
 
 	rtc = rtc_allocate_device();
 	if (!rtc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOMEM;
 		goto exit_ida;
 	}
@@ -254,6 +271,7 @@ struct rtc_device *rtc_device_register(const char *name, struct device *dev,
 
 	err = cdev_device_add(&rtc->char_dev, &rtc->dev);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(&rtc->dev, "%s: failed to add char device %d:%d\n",
 			 name, MAJOR(rtc->dev.devt), rtc->id);
 
@@ -261,6 +279,7 @@ struct rtc_device *rtc_device_register(const char *name, struct device *dev,
 		put_device(&rtc->dev);
 		goto exit;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(&rtc->dev, "%s: dev (%d:%d)\n", name,
 			MAJOR(rtc->dev.devt), rtc->id);
 	}
@@ -290,6 +309,7 @@ EXPORT_SYMBOL_GPL(rtc_device_register);
  */
 void rtc_device_unregister(struct rtc_device *rtc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtc_nvmem_unregister(rtc);
 
 	mutex_lock(&rtc->ops_lock);
@@ -342,7 +362,9 @@ struct rtc_device *devm_rtc_device_register(struct device *dev,
 
 	ptr = devres_alloc(devm_rtc_device_release, sizeof(*ptr), GFP_KERNEL);
 	if (!ptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	rtc = rtc_device_register(name, dev, ops, owner);
 	if (!IS_ERR(rtc)) {
@@ -371,6 +393,7 @@ void devm_rtc_device_unregister(struct device *dev, struct rtc_device *rtc)
 
 	rc = devres_release(dev, devm_rtc_device_release,
 				devm_rtc_device_match, rtc);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(rc);
 }
 EXPORT_SYMBOL_GPL(devm_rtc_device_unregister);
@@ -380,7 +403,9 @@ static void devm_rtc_release_device(struct device *dev, void *res)
 	struct rtc_device *rtc = *(struct rtc_device **)res;
 
 	if (rtc->registered)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtc_device_unregister(rtc);
+}
 	else
 		put_device(&rtc->dev);
 }
@@ -392,7 +417,9 @@ struct rtc_device *devm_rtc_allocate_device(struct device *dev)
 
 	id = rtc_device_get_id(dev);
 	if (id < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(id);
+}
 
 	ptr = devres_alloc(devm_rtc_release_device, sizeof(*ptr), GFP_KERNEL);
 	if (!ptr) {
@@ -429,7 +456,9 @@ int __rtc_register_device(struct module *owner, struct rtc_device *rtc)
 	int err;
 
 	if (!rtc->ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	rtc->owner = owner;
 
@@ -464,6 +493,7 @@ static int __init rtc_init(void)
 {
 	rtc_class = class_create(THIS_MODULE, "rtc");
 	if (IS_ERR(rtc_class)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("couldn't create class\n");
 		return PTR_ERR(rtc_class);
 	}
diff --git a/drivers/rtc/hctosys.c b/drivers/rtc/hctosys.c
index e1cfa06..283b223 100644
--- a/drivers/rtc/hctosys.c
+++ b/drivers/rtc/hctosys.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * RTC subsystem, initialize system time on startup
  *
diff --git a/drivers/rtc/interface.c b/drivers/rtc/interface.c
index 9eb32ea..94ca260 100644
--- a/drivers/rtc/interface.c
+++ b/drivers/rtc/interface.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * RTC subsystem, interface functions
  *
@@ -24,13 +26,19 @@ static int __rtc_read_time(struct rtc_device *rtc, struct rtc_time *tm)
 {
 	int err;
 	if (!rtc->ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENODEV;
+}
 	else if (!rtc->ops->read_time)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
+}
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(tm, 0, sizeof(struct rtc_time));
 		err = rtc->ops->read_time(rtc->dev.parent, tm);
 		if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_dbg(&rtc->dev, "read_time: fail to read: %d\n",
 				err);
 			return err;
@@ -38,8 +46,11 @@ static int __rtc_read_time(struct rtc_device *rtc, struct rtc_time *tm)
 
 		err = rtc_valid_tm(tm);
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_dbg(&rtc->dev, "read_time: rtc_time isn't valid\n");
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -49,7 +60,9 @@ int rtc_read_time(struct rtc_device *rtc, struct rtc_time *tm)
 
 	err = mutex_lock_interruptible(&rtc->ops_lock);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = __rtc_read_time(rtc, tm);
 	mutex_unlock(&rtc->ops_lock);
@@ -63,7 +76,9 @@ int rtc_set_time(struct rtc_device *rtc, struct rtc_time *tm)
 
 	err = rtc_valid_tm(tm);
 	if (err != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = mutex_lock_interruptible(&rtc->ops_lock);
 	if (err)
@@ -97,12 +112,18 @@ static int rtc_read_alarm_internal(struct rtc_device *rtc, struct rtc_wkalrm *al
 
 	err = mutex_lock_interruptible(&rtc->ops_lock);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (rtc->ops == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENODEV;
+}
 	else if (!rtc->ops->read_alarm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
+}
 	else {
 		alarm->enabled = 0;
 		alarm->pending = 0;
@@ -175,25 +196,36 @@ int __rtc_read_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 	/* Get the "before" timestamp */
 	err = rtc_read_time(rtc, &before);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	do {
 		if (!first_time)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(&before, &now, sizeof(struct rtc_time));
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		first_time = 0;
 
 		/* get the RTC alarm values, which may be incomplete */
 		err = rtc_read_alarm_internal(rtc, alarm);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 
 		/* full-function RTCs won't have such missing fields */
 		if (rtc_valid_tm(&alarm->time) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
 		/* get the "after" timestamp, to detect wrapped fields */
 		err = rtc_read_time(rtc, &now);
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 
 		/* note that tm_sec is a "don't care" value here: */
 	} while (   before.tm_min   != now.tm_min
@@ -205,11 +237,17 @@ int __rtc_read_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 	 * know there's at least one since alarm->time is invalid.
 	 */
 	if (alarm->time.tm_sec == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alarm->time.tm_sec = now.tm_sec;
+}
 	if (alarm->time.tm_min == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alarm->time.tm_min = now.tm_min;
+}
 	if (alarm->time.tm_hour == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alarm->time.tm_hour = now.tm_hour;
+}
 
 	/* For simplicity, only support date rollover for now */
 	if (alarm->time.tm_mday < 1 || alarm->time.tm_mday > 31) {
@@ -219,12 +257,16 @@ int __rtc_read_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 	if ((unsigned)alarm->time.tm_mon >= 12) {
 		alarm->time.tm_mon = now.tm_mon;
 		if (missing == none)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			missing = month;
+}
 	}
 	if (alarm->time.tm_year == -1) {
 		alarm->time.tm_year = now.tm_year;
 		if (missing == none)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			missing = year;
+}
 	}
 
 	/* Can't proceed if alarm is still invalid after replacing
@@ -261,14 +303,20 @@ int __rtc_read_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 	case month:
 		dev_dbg(&rtc->dev, "alarm rollover: %s\n", "month");
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (alarm->time.tm_mon < 11)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				alarm->time.tm_mon++;
+}
 			else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				alarm->time.tm_mon = 0;
 				alarm->time.tm_year++;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			days = rtc_month_days(alarm->time.tm_mon,
 					alarm->time.tm_year);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (days < alarm->time.tm_mday);
 		break;
 
@@ -276,7 +324,9 @@ int __rtc_read_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 	case year:
 		dev_dbg(&rtc->dev, "alarm rollover: %s\n", "year");
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			alarm->time.tm_year++;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (!is_leap_year(alarm->time.tm_year + 1900)
 			&& rtc_valid_tm(&alarm->time) != 0);
 		break;
@@ -289,12 +339,14 @@ int __rtc_read_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 
 done:
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(&rtc->dev, "invalid alarm value: %d-%d-%d %d:%d:%d\n",
 			alarm->time.tm_year + 1900, alarm->time.tm_mon + 1,
 			alarm->time.tm_mday, alarm->time.tm_hour, alarm->time.tm_min,
 			alarm->time.tm_sec);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -304,7 +356,9 @@ int rtc_read_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 
 	err = mutex_lock_interruptible(&rtc->ops_lock);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	if (rtc->ops == NULL)
 		err = -ENODEV;
 	else if (!rtc->ops->read_alarm)
@@ -328,16 +382,22 @@ static int __rtc_set_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 
 	err = rtc_valid_tm(&alarm->time);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	scheduled = rtc_tm_to_time64(&alarm->time);
 
 	/* Make sure we're not setting alarms in the past */
 	err = __rtc_read_time(rtc, &tm);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	now = rtc_tm_to_time64(&tm);
 	if (scheduled <= now)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ETIME;
+}
 	/*
 	 * XXX - We just checked to make sure the alarm time is not
 	 * in the past, but there is still a race window where if
@@ -346,12 +406,17 @@ static int __rtc_set_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 	 */
 
 	if (!rtc->ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENODEV;
+}
 	else if (!rtc->ops->set_alarm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
+}
 	else
 		err = rtc->ops->set_alarm(rtc->dev.parent, alarm);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -361,7 +426,9 @@ int rtc_set_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 
 	err = rtc_valid_tm(&alarm->time);
 	if (err != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = mutex_lock_interruptible(&rtc->ops_lock);
 	if (err)
@@ -387,15 +454,21 @@ int rtc_initialize_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 
 	err = rtc_valid_tm(&alarm->time);
 	if (err != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = rtc_read_time(rtc, &now);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = mutex_lock_interruptible(&rtc->ops_lock);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	rtc->aie_timer.node.expires = rtc_tm_to_ktime(alarm->time);
 	rtc->aie_timer.period = 0;
@@ -404,6 +477,7 @@ int rtc_initialize_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 	if (alarm->enabled && (rtc_tm_to_ktime(now) <
 			 rtc->aie_timer.node.expires)) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtc->aie_timer.enabled = 1;
 		timerqueue_add(&rtc->timerqueue, &rtc->aie_timer.node);
 	}
@@ -414,6 +488,7 @@ EXPORT_SYMBOL_GPL(rtc_initialize_alarm);
 
 int rtc_alarm_irq_enable(struct rtc_device *rtc, unsigned int enabled)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int err = mutex_lock_interruptible(&rtc->ops_lock);
 	if (err)
 		return err;
@@ -443,7 +518,9 @@ int rtc_update_irq_enable(struct rtc_device *rtc, unsigned int enabled)
 {
 	int err = mutex_lock_interruptible(&rtc->ops_lock);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 #ifdef CONFIG_RTC_INTF_DEV_UIE_EMUL
 	if (enabled == 0 && rtc->uie_irq_active) {
@@ -456,6 +533,7 @@ int rtc_update_irq_enable(struct rtc_device *rtc, unsigned int enabled)
 		goto out;
 
 	if (rtc->uie_unsupported) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		goto out;
 	}
@@ -512,7 +590,10 @@ void rtc_handle_legacy_irq(struct rtc_device *rtc, int num, int mode)
 	/* call the task func */
 	spin_lock_irqsave(&rtc->irq_task_lock, flags);
 	if (rtc->irq_task)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtc->irq_task->func(rtc->irq_task->private_data);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&rtc->irq_task_lock, flags);
 
 	wake_up_interruptible(&rtc->irq_queue);
@@ -559,6 +640,7 @@ enum hrtimer_restart rtc_pie_update_irq(struct hrtimer *timer)
 	struct rtc_device *rtc;
 	ktime_t period;
 	int count;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtc = container_of(timer, struct rtc_device, pie_timer);
 
 	period = NSEC_PER_SEC / rtc->irq_freq;
@@ -580,7 +662,9 @@ void rtc_update_irq(struct rtc_device *rtc,
 		unsigned long num, unsigned long events)
 {
 	if (IS_ERR_OR_NULL(rtc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pm_stay_awake(rtc->dev.parent);
 	schedule_work(&rtc->irqwork);
@@ -592,7 +676,10 @@ static int __rtc_match(struct device *dev, const void *data)
 	const char *name = data;
 
 	if (strcmp(dev_name(dev), name) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -603,10 +690,13 @@ struct rtc_device *rtc_class_open(const char *name)
 
 	dev = class_find_device(rtc_class, NULL, name, __rtc_match);
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtc = to_rtc_device(dev);
+}
 
 	if (rtc) {
 		if (!try_module_get(rtc->owner)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_device(dev);
 			rtc = NULL;
 		}
@@ -627,6 +717,7 @@ int rtc_irq_register(struct rtc_device *rtc, struct rtc_task *task)
 {
 	int retval = -EBUSY;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (task == NULL || task->func == NULL)
 		return -EINVAL;
 
@@ -649,6 +740,7 @@ EXPORT_SYMBOL_GPL(rtc_irq_register);
 
 void rtc_irq_unregister(struct rtc_device *rtc, struct rtc_task *task)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&rtc->irq_task_lock);
 	if (rtc->irq_task == task)
 		rtc->irq_task = NULL;
@@ -669,13 +761,16 @@ static int rtc_update_hrtimer(struct rtc_device *rtc, int enabled)
 	 * would spin forever.
 	 */
 	if (hrtimer_try_to_cancel(&rtc->pie_timer) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	if (enabled) {
 		ktime_t period = NSEC_PER_SEC / rtc->irq_freq;
 
 		hrtimer_start(&rtc->pie_timer, period, HRTIMER_MODE_REL);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -697,17 +792,23 @@ int rtc_irq_set_state(struct rtc_device *rtc, struct rtc_task *task, int enabled
 retry:
 	spin_lock_irqsave(&rtc->irq_task_lock, flags);
 	if (rtc->irq_task != NULL && task == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EBUSY;
+}
 	else if (rtc->irq_task != task)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EACCES;
+}
 	else {
 		if (rtc_update_hrtimer(rtc, enabled) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irqrestore(&rtc->irq_task_lock, flags);
 			cpu_relax();
 			goto retry;
 		}
 		rtc->pie_enabled = enabled;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&rtc->irq_task_lock, flags);
 	return err;
 }
@@ -728,6 +829,7 @@ int rtc_irq_set_freq(struct rtc_device *rtc, struct rtc_task *task, int freq)
 	int err = 0;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (freq <= 0 || freq > RTC_MAX_FREQ)
 		return -EINVAL;
 retry:
@@ -763,6 +865,7 @@ EXPORT_SYMBOL_GPL(rtc_irq_set_freq);
  */
 static int rtc_timer_enqueue(struct rtc_device *rtc, struct rtc_timer *timer)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct timerqueue_node *next = timerqueue_getnext(&rtc->timerqueue);
 	struct rtc_time tm;
 	ktime_t now;
@@ -773,8 +876,10 @@ static int rtc_timer_enqueue(struct rtc_device *rtc, struct rtc_timer *timer)
 
 	/* Skip over expired timers */
 	while (next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (next->expires >= now)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next = timerqueue_iterate_next(next);
 	}
 
@@ -786,21 +891,26 @@ static int rtc_timer_enqueue(struct rtc_device *rtc, struct rtc_timer *timer)
 		alarm.enabled = 1;
 		err = __rtc_set_alarm(rtc, &alarm);
 		if (err == -ETIME) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pm_stay_awake(rtc->dev.parent);
 			schedule_work(&rtc->irqwork);
 		} else if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			timerqueue_del(&rtc->timerqueue, &timer->node);
 			timer->enabled = 0;
 			return err;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void rtc_alarm_disable(struct rtc_device *rtc)
 {
 	if (!rtc->ops || !rtc->ops->alarm_irq_enable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	rtc->ops->alarm_irq_enable(rtc->dev.parent, false);
 }
@@ -819,6 +929,7 @@ static void rtc_alarm_disable(struct rtc_device *rtc)
  */
 static void rtc_timer_remove(struct rtc_device *rtc, struct rtc_timer *timer)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct timerqueue_node *next = timerqueue_getnext(&rtc->timerqueue);
 	timerqueue_del(&rtc->timerqueue, &timer->node);
 	timer->enabled = 0;
@@ -830,10 +941,12 @@ static void rtc_timer_remove(struct rtc_device *rtc, struct rtc_timer *timer)
 			rtc_alarm_disable(rtc);
 			return;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alarm.time = rtc_ktime_to_tm(next->expires);
 		alarm.enabled = 1;
 		err = __rtc_set_alarm(rtc, &alarm);
 		if (err == -ETIME) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pm_stay_awake(rtc->dev.parent);
 			schedule_work(&rtc->irqwork);
 		}
@@ -897,9 +1010,11 @@ void rtc_timer_do_work(struct work_struct *work)
 		if (err == -ETIME)
 			goto again;
 		else if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (retry-- > 0)
 				goto reprogram;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			timer = container_of(next, struct rtc_timer, node);
 			timerqueue_del(&rtc->timerqueue, &timer->node);
 			timer->enabled = 0;
@@ -907,7 +1022,9 @@ void rtc_timer_do_work(struct work_struct *work)
 			goto again;
 		}
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtc_alarm_disable(rtc);
+}
 
 	pm_relax(rtc->dev.parent);
 	mutex_unlock(&rtc->ops_lock);
@@ -923,6 +1040,7 @@ void rtc_timer_do_work(struct work_struct *work)
  */
 void rtc_timer_init(struct rtc_timer *timer, void (*f)(void *p), void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	timerqueue_init(&timer->node);
 	timer->enabled = 0;
 	timer->task.func = f;
@@ -943,7 +1061,9 @@ int rtc_timer_start(struct rtc_device *rtc, struct rtc_timer *timer,
 	int ret = 0;
 	mutex_lock(&rtc->ops_lock);
 	if (timer->enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtc_timer_remove(rtc, timer);
+}
 
 	timer->node.expires = expires;
 	timer->period = period;
@@ -962,6 +1082,7 @@ int rtc_timer_start(struct rtc_device *rtc, struct rtc_timer *timer,
  */
 void rtc_timer_cancel(struct rtc_device *rtc, struct rtc_timer *timer)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&rtc->ops_lock);
 	if (timer->enabled)
 		rtc_timer_remove(rtc, timer);
@@ -984,7 +1105,9 @@ int rtc_read_offset(struct rtc_device *rtc, long *offset)
 	int ret;
 
 	if (!rtc->ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (!rtc->ops->read_offset)
 		return -EINVAL;
@@ -1013,7 +1136,9 @@ int rtc_set_offset(struct rtc_device *rtc, long offset)
 	int ret;
 
 	if (!rtc->ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (!rtc->ops->set_offset)
 		return -EINVAL;
diff --git a/drivers/rtc/rtc-cmos.c b/drivers/rtc/rtc-cmos.c
index 9dca53d..393da43 100644
--- a/drivers/rtc/rtc-cmos.c
+++ b/drivers/rtc/rtc-cmos.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * RTC class driver for "CMOS RTC":  PCs, ACPI, etc
  *
@@ -83,7 +85,9 @@ static const char driver_name[] = "rtc_cmos";
 static inline int is_intr(u8 rtc_intr)
 {
 	if (!(rtc_intr & RTC_IRQF))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return rtc_intr & RTC_IRQMASK;
 }
 
@@ -165,12 +169,14 @@ static inline int hpet_unregister_irq_handler(irq_handler_t handler)
 
 static inline unsigned char cmos_read_bank2(unsigned char addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	outb(addr, RTC_PORT(2));
 	return inb(RTC_PORT(3));
 }
 
 static inline void cmos_write_bank2(unsigned char val, unsigned char addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	outb(addr, RTC_PORT(2));
 	outb(val, RTC_PORT(3));
 }
@@ -199,7 +205,9 @@ static int cmos_read_time(struct device *dev, struct rtc_time *t)
 	 * which tells the caller that this RTC value is unusable.
 	 */
 	if (!pm_trace_rtc_valid())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	/* REVISIT:  if the clock has a "century" register, use
 	 * that instead of the heuristic in mc146818_get_time().
@@ -222,17 +230,21 @@ static int cmos_set_time(struct device *dev, struct rtc_time *t)
 
 static int cmos_read_alarm(struct device *dev, struct rtc_wkalrm *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmos_rtc	*cmos = dev_get_drvdata(dev);
 	unsigned char	rtc_control;
 
 	if (!is_valid_irq(cmos->irq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	/* Basic alarms only support hour, minute, and seconds fields.
 	 * Some also support day and month, for alarms up to a year in
 	 * the future.
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&rtc_lock);
 	t->time.tm_sec = CMOS_READ(RTC_SECONDS_ALARM);
 	t->time.tm_min = CMOS_READ(RTC_MINUTES_ALARM);
@@ -242,18 +254,25 @@ static int cmos_read_alarm(struct device *dev, struct rtc_wkalrm *t)
 		/* ignore upper bits on readback per ACPI spec */
 		t->time.tm_mday = CMOS_READ(cmos->day_alrm) & 0x3f;
 		if (!t->time.tm_mday)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			t->time.tm_mday = -1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cmos->mon_alrm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			t->time.tm_mon = CMOS_READ(cmos->mon_alrm);
 			if (!t->time.tm_mon)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				t->time.tm_mon = -1;
+}
 		}
 	}
 
 	rtc_control = CMOS_READ(RTC_CONTROL);
 	spin_unlock_irq(&rtc_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(rtc_control & RTC_DM_BINARY) || RTC_ALWAYS_BCD) {
 		if (((unsigned)t->time.tm_sec) < 0x60)
 			t->time.tm_sec = bcd2bin(t->time.tm_sec);
@@ -269,14 +288,21 @@ static int cmos_read_alarm(struct device *dev, struct rtc_wkalrm *t)
 			t->time.tm_hour = -1;
 
 		if (cmos->day_alrm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (((unsigned)t->time.tm_mday) <= 0x31)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				t->time.tm_mday = bcd2bin(t->time.tm_mday);
+}
 			else
 				t->time.tm_mday = -1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (cmos->mon_alrm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (((unsigned)t->time.tm_mon) <= 0x12)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					t->time.tm_mon = bcd2bin(t->time.tm_mon)-1;
+}
 				else
 					t->time.tm_mon = -1;
 			}
@@ -299,12 +325,17 @@ static void cmos_checkintr(struct cmos_rtc *cmos, unsigned char rtc_control)
 	rtc_intr = CMOS_READ(RTC_INTR_FLAGS);
 
 	if (is_hpet_enabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtc_intr &= (rtc_control & RTC_IRQMASK) | RTC_IRQF;
 	if (is_intr(rtc_intr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtc_update_irq(cmos->rtc, 1, rtc_intr);
 }
+}
 
 static void cmos_irq_enable(struct cmos_rtc *cmos, unsigned char mask)
 {
@@ -337,6 +368,7 @@ static void cmos_irq_disable(struct cmos_rtc *cmos, unsigned char mask)
 
 static int cmos_validate_alarm(struct device *dev, struct rtc_wkalrm *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmos_rtc *cmos = dev_get_drvdata(dev);
 	struct rtc_time now;
 
@@ -350,6 +382,7 @@ static int cmos_validate_alarm(struct device *dev, struct rtc_wkalrm *t)
 		t_max_date += 24 * 60 * 60 - 1;
 		t_alrm = rtc_tm_to_time64(&t->time);
 		if (t_alrm > t_max_date) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(dev,
 				"Alarms can be up to one day in the future\n");
 			return -EINVAL;
@@ -361,19 +394,26 @@ static int cmos_validate_alarm(struct device *dev, struct rtc_wkalrm *t)
 		int max_mday;
 
 		if (max_date.tm_mon == 11) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			max_date.tm_mon = 0;
 			max_date.tm_year += 1;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			max_date.tm_mon += 1;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		max_mday = rtc_month_days(max_date.tm_mon, max_date.tm_year);
 		if (max_date.tm_mday > max_mday)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			max_date.tm_mday = max_mday;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		t_max_date = rtc_tm_to_time64(&max_date);
 		t_max_date -= 1;
 		t_alrm = rtc_tm_to_time64(&t->time);
 		if (t_alrm > t_max_date) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(dev,
 				"Alarms can be up to one month in the future\n");
 			return -EINVAL;
@@ -387,33 +427,43 @@ static int cmos_validate_alarm(struct device *dev, struct rtc_wkalrm *t)
 		max_date.tm_year += 1;
 		max_mday = rtc_month_days(max_date.tm_mon, max_date.tm_year);
 		if (max_date.tm_mday > max_mday)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			max_date.tm_mday = max_mday;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		t_max_date = rtc_tm_to_time64(&max_date);
 		t_max_date -= 1;
 		t_alrm = rtc_tm_to_time64(&t->time);
 		if (t_alrm > t_max_date) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(dev,
 				"Alarms can be up to one year in the future\n");
 			return -EINVAL;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int cmos_set_alarm(struct device *dev, struct rtc_wkalrm *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmos_rtc	*cmos = dev_get_drvdata(dev);
 	unsigned char mon, mday, hrs, min, sec, rtc_control;
 	int ret;
 
 	if (!is_valid_irq(cmos->irq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	ret = cmos_validate_alarm(dev, t);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	mon = t->time.tm_mon + 1;
 	mday = t->time.tm_mday;
@@ -422,6 +472,7 @@ static int cmos_set_alarm(struct device *dev, struct rtc_wkalrm *t)
 	sec = t->time.tm_sec;
 
 	rtc_control = CMOS_READ(RTC_CONTROL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(rtc_control & RTC_DM_BINARY) || RTC_ALWAYS_BCD) {
 		/* Writing 0xff means "don't care" or "match all".  */
 		mon = (mon <= 12) ? bin2bcd(mon) : 0xff;
@@ -431,6 +482,7 @@ static int cmos_set_alarm(struct device *dev, struct rtc_wkalrm *t)
 		sec = (sec < 60) ? bin2bcd(sec) : 0xff;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&rtc_lock);
 
 	/* next rtc irq must not be from previous alarm setting */
@@ -443,9 +495,12 @@ static int cmos_set_alarm(struct device *dev, struct rtc_wkalrm *t)
 
 	/* the system may support an "enhanced" alarm */
 	if (cmos->day_alrm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		CMOS_WRITE(mday, cmos->day_alrm);
 		if (cmos->mon_alrm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			CMOS_WRITE(mon, cmos->mon_alrm);
+}
 	}
 
 	/* FIXME the HPET alarm glue currently ignores day_alrm
@@ -456,6 +511,7 @@ static int cmos_set_alarm(struct device *dev, struct rtc_wkalrm *t)
 	if (t->enabled)
 		cmos_irq_enable(cmos, RTC_AIE);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(&rtc_lock);
 
 	cmos->alarm_expires = rtc_tm_to_time64(&t->time);
@@ -465,19 +521,25 @@ static int cmos_set_alarm(struct device *dev, struct rtc_wkalrm *t)
 
 static int cmos_alarm_irq_enable(struct device *dev, unsigned int enabled)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmos_rtc	*cmos = dev_get_drvdata(dev);
 	unsigned long	flags;
 
 	if (!is_valid_irq(cmos->irq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	spin_lock_irqsave(&rtc_lock, flags);
 
 	if (enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmos_irq_enable(cmos, RTC_AIE);
+}
 	else
 		cmos_irq_disable(cmos, RTC_AIE);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&rtc_lock, flags);
 	return 0;
 }
@@ -486,6 +548,7 @@ static int cmos_alarm_irq_enable(struct device *dev, unsigned int enabled)
 
 static int cmos_procfs(struct device *dev, struct seq_file *seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmos_rtc	*cmos = dev_get_drvdata(dev);
 	unsigned char	rtc_control, valid;
 
@@ -550,6 +613,7 @@ cmos_nvram_read(struct file *filp, struct kobject *kobj,
 
 	off += NVRAM_OFFSET;
 	spin_lock_irq(&rtc_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (retval = 0; count; count--, off++, retval++) {
 		if (off < 128)
 			*buf++ = CMOS_READ(off);
@@ -571,6 +635,7 @@ cmos_nvram_write(struct file *filp, struct kobject *kobj,
 	struct cmos_rtc	*cmos;
 	int		retval;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cmos = dev_get_drvdata(container_of(kobj, struct device, kobj));
 
 	/* NOTE:  on at least PCs and Ataris, the boot firmware uses a
@@ -651,14 +716,17 @@ static irqreturn_t cmos_interrupt(int irq, void *p)
 		hpet_mask_rtc_irq_bit(RTC_AIE);
 		CMOS_READ(RTC_INTR_FLAGS);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&rtc_lock);
 
 	if (is_intr(irqstat)) {
 		rtc_update_irq(p, 1, irqstat);
 		return IRQ_HANDLED;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return IRQ_NONE;
 }
+}
 
 #ifdef	CONFIG_PNP
 #define	INITSECTION
@@ -670,6 +738,7 @@ static irqreturn_t cmos_interrupt(int irq, void *p)
 static int INITSECTION
 cmos_do_probe(struct device *dev, struct resource *ports, int rtc_irq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmos_rtc_board_info	*info = dev_get_platdata(dev);
 	int				retval = 0;
 	unsigned char			rtc_control;
@@ -678,10 +747,14 @@ cmos_do_probe(struct device *dev, struct resource *ports, int rtc_irq)
 
 	/* there can be only one ... */
 	if (cmos_rtc.dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	if (!ports)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* Claim I/O ports ASAP, minimizing conflict with legacy driver.
 	 *
@@ -695,6 +768,7 @@ cmos_do_probe(struct device *dev, struct resource *ports, int rtc_irq)
 		ports = request_mem_region(ports->start, resource_size(ports),
 					   driver_name);
 	if (!ports) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(dev, "i/o registers already in use\n");
 		return -EBUSY;
 	}
@@ -718,7 +792,9 @@ cmos_do_probe(struct device *dev, struct resource *ports, int rtc_irq)
 	address_space = 128;
 #endif
 	if (can_bank2 && ports->end > (ports->start + 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		address_space = 256;
+}
 
 	/* For ACPI systems extension info comes from the FADT.  On others,
 	 * board specific setup provides it as appropriate.  Systems where
@@ -731,16 +807,26 @@ cmos_do_probe(struct device *dev, struct resource *ports, int rtc_irq)
 	 */
 	if (info) {
 		if (info->flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flags = info->flags;
+}
 		if (info->address_space)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			address_space = info->address_space;
+}
 
 		if (info->rtc_day_alarm && info->rtc_day_alarm < 128)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cmos_rtc.day_alrm = info->rtc_day_alarm;
+}
 		if (info->rtc_mon_alarm && info->rtc_mon_alarm < 128)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cmos_rtc.mon_alrm = info->rtc_mon_alarm;
+}
 		if (info->rtc_century && info->rtc_century < 128)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cmos_rtc.century = info->rtc_century;
+}
 
 		if (info->wake_on && info->wake_off) {
 			cmos_rtc.wake_on = info->wake_on;
@@ -754,12 +840,14 @@ cmos_do_probe(struct device *dev, struct resource *ports, int rtc_irq)
 	cmos_rtc.rtc = rtc_device_register(driver_name, dev,
 				&cmos_rtc_ops, THIS_MODULE);
 	if (IS_ERR(cmos_rtc.rtc)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = PTR_ERR(cmos_rtc.rtc);
 		goto cleanup0;
 	}
 
 	rename_region(ports, dev_name(&cmos_rtc.rtc->dev));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&rtc_lock);
 
 	if (!(flags & CMOS_RTC_FLAGS_NOFREQ)) {
@@ -783,6 +871,7 @@ cmos_do_probe(struct device *dev, struct resource *ports, int rtc_irq)
 	spin_unlock_irq(&rtc_lock);
 
 	if (is_valid_irq(rtc_irq) && !(rtc_control & RTC_24H)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_warn(dev, "only 24-hr supported\n");
 		retval = -ENXIO;
 		goto cleanup1;
@@ -794,21 +883,26 @@ cmos_do_probe(struct device *dev, struct resource *ports, int rtc_irq)
 		irq_handler_t rtc_cmos_int_handler;
 
 		if (is_hpet_enabled()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rtc_cmos_int_handler = hpet_rtc_interrupt;
 			retval = hpet_register_irq_handler(cmos_interrupt);
 			if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				hpet_mask_rtc_irq_bit(RTC_IRQMASK);
 				dev_warn(dev, "hpet_register_irq_handler "
 						" failed in rtc_init().");
 				goto cleanup1;
 			}
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rtc_cmos_int_handler = cmos_interrupt;
+}
 
 		retval = request_irq(rtc_irq, rtc_cmos_int_handler,
 				IRQF_SHARED, dev_name(&cmos_rtc.rtc->dev),
 				cmos_rtc.rtc);
 		if (retval < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_dbg(dev, "IRQ %d is already in use\n", rtc_irq);
 			goto cleanup1;
 		}
@@ -818,6 +912,7 @@ cmos_do_probe(struct device *dev, struct resource *ports, int rtc_irq)
 	nvram.size = address_space - NVRAM_OFFSET;
 	retval = sysfs_create_bin_file(&dev->kobj, &nvram);
 	if (retval < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(dev, "can't create nvram file? %d\n", retval);
 		goto cleanup2;
 	}
@@ -835,20 +930,26 @@ cmos_do_probe(struct device *dev, struct resource *ports, int rtc_irq)
 
 cleanup2:
 	if (is_valid_irq(rtc_irq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		free_irq(rtc_irq, cmos_rtc.rtc);
+}
 cleanup1:
 	cmos_rtc.dev = NULL;
 	rtc_device_unregister(cmos_rtc.rtc);
 cleanup0:
 	if (RTC_IOMAPPED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		release_region(ports->start, resource_size(ports));
+}
 	else
 		release_mem_region(ports->start, resource_size(ports));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 
 static void cmos_do_shutdown(int rtc_irq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&rtc_lock);
 	if (is_valid_irq(rtc_irq))
 		cmos_irq_disable(&cmos_rtc, RTC_IRQMASK);
@@ -857,6 +958,7 @@ static void cmos_do_shutdown(int rtc_irq)
 
 static void cmos_do_remove(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmos_rtc	*cmos = dev_get_drvdata(dev);
 	struct resource *ports;
 
@@ -884,6 +986,7 @@ static void cmos_do_remove(struct device *dev)
 
 static int cmos_aie_poweroff(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmos_rtc	*cmos = dev_get_drvdata(dev);
 	struct rtc_time now;
 	time64_t t_now;
@@ -929,6 +1032,7 @@ static int cmos_aie_poweroff(struct device *dev)
 
 static int cmos_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmos_rtc	*cmos = dev_get_drvdata(dev);
 	unsigned char	tmp;
 
@@ -975,6 +1079,7 @@ static int cmos_suspend(struct device *dev)
  */
 static inline int cmos_poweroff(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!IS_ENABLED(CONFIG_PM))
 		return -ENOSYS;
 
@@ -983,6 +1088,7 @@ static inline int cmos_poweroff(struct device *dev)
 
 static void cmos_check_wkalrm(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmos_rtc *cmos = dev_get_drvdata(dev);
 	struct rtc_wkalrm current_alarm;
 	time64_t t_current_expires;
@@ -1002,6 +1108,7 @@ static void cmos_check_acpi_rtc_status(struct device *dev,
 
 static int __maybe_unused cmos_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmos_rtc	*cmos = dev_get_drvdata(dev);
 	unsigned char tmp;
 
@@ -1077,6 +1184,7 @@ static u32 rtc_handler(void *context)
 	unsigned char rtc_intr;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&rtc_lock, flags);
 	if (cmos_rtc.suspend_ctrl)
 		rtc_control = CMOS_READ(RTC_CONTROL);
@@ -1107,12 +1215,14 @@ static inline void rtc_wake_setup(struct device *dev)
 
 static void rtc_wake_on(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_clear_event(ACPI_EVENT_RTC);
 	acpi_enable_event(ACPI_EVENT_RTC, 0);
 }
 
 static void rtc_wake_off(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acpi_disable_event(ACPI_EVENT_RTC, 0);
 }
 
@@ -1126,7 +1236,9 @@ static struct cmos_rtc_board_info acpi_rtc_info;
 static void cmos_wake_setup(struct device *dev)
 {
 	if (acpi_disabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	rtc_wake_setup(dev);
 	acpi_rtc_info.wake_on = rtc_wake_on;
@@ -1134,6 +1246,7 @@ static void cmos_wake_setup(struct device *dev)
 
 	/* workaround bug in some ACPI tables */
 	if (acpi_gbl_FADT.month_alarm && !acpi_gbl_FADT.day_alarm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(dev, "bogus FADT month_alarm (%d)\n",
 			acpi_gbl_FADT.month_alarm);
 		acpi_gbl_FADT.month_alarm = 0;
@@ -1156,6 +1269,7 @@ static void cmos_wake_setup(struct device *dev)
 static void cmos_check_acpi_rtc_status(struct device *dev,
 				       unsigned char *rtc_control)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmos_rtc *cmos = dev_get_drvdata(dev);
 	acpi_event_status rtc_status;
 	acpi_status status;
@@ -1204,7 +1318,9 @@ static int cmos_pnp_probe(struct pnp_dev *pnp, const struct pnp_device_id *id)
 		 * hardcode it on systems with a legacy PIC.
 		 */
 		if (nr_legacy_irqs())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			irq = 8;
+}
 #endif
 		return cmos_do_probe(&pnp->dev,
 				pnp_get_resource(pnp, IORESOURCE_IO, 0), irq);
@@ -1217,6 +1333,7 @@ static int cmos_pnp_probe(struct pnp_dev *pnp, const struct pnp_device_id *id)
 
 static void cmos_pnp_remove(struct pnp_dev *pnp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cmos_do_remove(&pnp->dev);
 }
 
@@ -1226,6 +1343,7 @@ static void cmos_pnp_shutdown(struct pnp_dev *pnp)
 	struct cmos_rtc	*cmos = dev_get_drvdata(dev);
 
 	if (system_state == SYSTEM_POWER_OFF) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int retval = cmos_poweroff(dev);
 
 		if (cmos_aie_poweroff(dev) < 0 && !retval)
@@ -1374,18 +1492,25 @@ static int __init cmos_init(void)
 #endif
 
 	if (!cmos_rtc.dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = platform_driver_probe(&cmos_platform_driver,
 					       cmos_platform_probe);
 		if (retval == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			platform_driver_registered = true;
+}
 	}
 
 	if (retval == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 #ifdef	CONFIG_PNP
 	if (pnp_driver_registered)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pnp_unregister_driver(&cmos_pnp_driver);
+}
 #endif
 	return retval;
 }
diff --git a/drivers/rtc/rtc-dev.c b/drivers/rtc/rtc-dev.c
index 00efe24..818dbaf 100644
--- a/drivers/rtc/rtc-dev.c
+++ b/drivers/rtc/rtc-dev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * RTC subsystem, dev interface
  *
@@ -28,7 +30,9 @@ static int rtc_dev_open(struct inode *inode, struct file *file)
 					struct rtc_device, char_dev);
 
 	if (test_and_set_bit_lock(RTC_DEV_BUSY, &rtc->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	file->private_data = rtc;
 
@@ -148,6 +152,7 @@ rtc_dev_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
 	unsigned long data;
 	ssize_t ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (count != sizeof(unsigned int) && count < sizeof(unsigned long))
 		return -EINVAL;
 
@@ -218,7 +223,9 @@ static long rtc_dev_ioctl(struct file *file,
 
 	err = mutex_lock_interruptible(&rtc->ops_lock);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/* check that the calling task has appropriate permissions
 	 * for certain ioctls. doing this check here is useful
@@ -228,12 +235,16 @@ static long rtc_dev_ioctl(struct file *file,
 	case RTC_EPOCH_SET:
 	case RTC_SET_TIME:
 		if (!capable(CAP_SYS_TIME))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EACCES;
+}
 		break;
 
 	case RTC_IRQP_SET:
 		if (arg > rtc->max_user_freq && !capable(CAP_SYS_RESOURCE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EACCES;
+}
 		break;
 
 	case RTC_PIE_ON:
@@ -263,18 +274,27 @@ static long rtc_dev_ioctl(struct file *file,
 
 		err = rtc_read_alarm(rtc, &alarm);
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_to_user(uarg, &alarm.time, sizeof(tm)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
 
 	case RTC_ALM_SET:
 		mutex_unlock(&rtc->ops_lock);
 
 		if (copy_from_user(&alarm.time, uarg, sizeof(tm)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alarm.enabled = 0;
 		alarm.pending = 0;
 		alarm.time.tm_wday = -1;
@@ -299,7 +319,10 @@ static long rtc_dev_ioctl(struct file *file,
 
 			err = rtc_read_time(rtc, &tm);
 			if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return err;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			now = rtc_tm_to_time64(&tm);
 
 			alarm.time.tm_mday = tm.tm_mday;
@@ -307,11 +330,15 @@ static long rtc_dev_ioctl(struct file *file,
 			alarm.time.tm_year = tm.tm_year;
 			err  = rtc_valid_tm(&alarm.time);
 			if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return err;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			then = rtc_tm_to_time64(&alarm.time);
 
 			/* alarm may need to wrap into tomorrow */
 			if (then < now) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rtc_time64_to_tm(now + 24 * 60 * 60, &tm);
 				alarm.time.tm_mday = tm.tm_mday;
 				alarm.time.tm_mon = tm.tm_mon;
@@ -319,6 +346,7 @@ static long rtc_dev_ioctl(struct file *file,
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rtc_set_alarm(rtc, &alarm);
 
 	case RTC_RD_TIME:
@@ -326,18 +354,25 @@ static long rtc_dev_ioctl(struct file *file,
 
 		err = rtc_read_time(rtc, &tm);
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 
 		if (copy_to_user(uarg, &tm, sizeof(tm)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EFAULT;
+}
 		return err;
 
 	case RTC_SET_TIME:
 		mutex_unlock(&rtc->ops_lock);
 
 		if (copy_from_user(&tm, uarg, sizeof(tm)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rtc_set_time(rtc, &tm);
 
 	case RTC_PIE_ON:
@@ -375,28 +410,42 @@ static long rtc_dev_ioctl(struct file *file,
 	case RTC_WKALM_SET:
 		mutex_unlock(&rtc->ops_lock);
 		if (copy_from_user(&alarm, uarg, sizeof(alarm)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rtc_set_alarm(rtc, &alarm);
 
 	case RTC_WKALM_RD:
 		mutex_unlock(&rtc->ops_lock);
 		err = rtc_read_alarm(rtc, &alarm);
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_to_user(uarg, &alarm, sizeof(alarm)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
 
 	default:
 		/* Finally try the driver's ioctl interface */
 		if (ops->ioctl) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = ops->ioctl(rtc->dev.parent, cmd, arg);
 			if (err == -ENOIOCTLCMD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -ENOTTY;
+}
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENOTTY;
+}
 		break;
 	}
 
@@ -449,9 +498,12 @@ static const struct file_operations rtc_dev_fops = {
 void rtc_dev_prepare(struct rtc_device *rtc)
 {
 	if (!rtc_devt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (rtc->id >= RTC_DEV_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(&rtc->dev, "too many RTC devices\n");
 		return;
 	}
@@ -473,11 +525,14 @@ void __init rtc_dev_init(void)
 
 	err = alloc_chrdev_region(&rtc_devt, 0, RTC_DEV_MAX, "rtc");
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to allocate char dev region\n");
 }
+}
 
 void __exit rtc_dev_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rtc_devt)
 		unregister_chrdev_region(rtc_devt, RTC_DEV_MAX);
 }
diff --git a/drivers/rtc/rtc-lib.c b/drivers/rtc/rtc-lib.c
index 1ae7da5..a3e9d03 100644
--- a/drivers/rtc/rtc-lib.c
+++ b/drivers/rtc/rtc-lib.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * rtc and date/time utility functions
  *
@@ -41,6 +43,7 @@ EXPORT_SYMBOL(rtc_month_days);
  */
 int rtc_year_days(unsigned int day, unsigned int month, unsigned int year)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rtc_ydays[is_leap_year(year)][month] + day-1;
 }
 EXPORT_SYMBOL(rtc_year_days);
@@ -68,6 +71,7 @@ void rtc_time64_to_tm(time64_t time, struct rtc_time *tm)
 		+ LEAPS_THRU_END_OF(year - 1)
 		- LEAPS_THRU_END_OF(1970 - 1);
 	if (days < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		year -= 1;
 		days += 365 + is_leap_year(year);
 	}
@@ -80,6 +84,7 @@ void rtc_time64_to_tm(time64_t time, struct rtc_time *tm)
 		newdays = days - rtc_month_days(month, year);
 		if (newdays < 0)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		days = newdays;
 	}
 	tm->tm_mon = month;
@@ -108,6 +113,7 @@ int rtc_valid_tm(struct rtc_time *tm)
 		|| ((unsigned)tm->tm_sec) >= 60)
 		return -EINVAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(rtc_valid_tm);
@@ -143,7 +149,9 @@ struct rtc_time rtc_ktime_to_tm(ktime_t kt)
 	ts = ktime_to_timespec64(kt);
 	/* Round up any ns */
 	if (ts.tv_nsec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ts.tv_sec++;
+}
 	rtc_time64_to_tm(ts.tv_sec, &ret);
 	return ret;
 }
diff --git a/drivers/rtc/rtc-mc146818-lib.c b/drivers/rtc/rtc-mc146818-lib.c
index 2f1772a..e2b445e 100644
--- a/drivers/rtc/rtc-mc146818-lib.c
+++ b/drivers/rtc/rtc-mc146818-lib.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/bcd.h>
 #include <linux/delay.h>
 #include <linux/export.h>
@@ -67,6 +69,7 @@ unsigned int mc146818_get_time(struct rtc_time *time)
 	ctrl = CMOS_READ(RTC_CONTROL);
 	spin_unlock_irqrestore(&rtc_lock, flags);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(ctrl & RTC_DM_BINARY) || RTC_ALWAYS_BCD)
 	{
 		time->tm_sec = bcd2bin(time->tm_sec);
@@ -83,7 +86,9 @@ unsigned int mc146818_get_time(struct rtc_time *time)
 #endif
 
 	if (century)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		time->tm_year += (century - 19) * 100;
+}
 
 	/*
 	 * Account for differences between how the RTC uses the values
@@ -118,7 +123,9 @@ int mc146818_set_time(struct rtc_time *time)
 	sec = time->tm_sec;
 
 	if (yrs > 255)	/* They are unsigned */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	spin_lock_irqsave(&rtc_lock, flags);
 #ifdef CONFIG_MACH_DECSTATION
diff --git a/drivers/rtc/rtc-proc.c b/drivers/rtc/rtc-proc.c
index 31e7e23..b551a2e 100644
--- a/drivers/rtc/rtc-proc.c
+++ b/drivers/rtc/rtc-proc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * RTC subsystem, proc interface
  *
@@ -35,6 +37,7 @@ static bool is_rtc_hctosys(struct rtc_device *rtc)
 #else
 static bool is_rtc_hctosys(struct rtc_device *rtc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (rtc->id == 0);
 }
 #endif
@@ -49,6 +52,7 @@ static int rtc_proc_show(struct seq_file *seq, void *offset)
 
 	err = rtc_read_time(rtc, &tm);
 	if (err == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_printf(seq,
 			"rtc_time\t: %02d:%02d:%02d\n"
 			"rtc_date\t: %04d-%02d-%02d\n",
@@ -113,7 +117,9 @@ static int rtc_proc_open(struct inode *inode, struct file *file)
 	struct rtc_device *rtc = PDE_DATA(inode);
 
 	if (!try_module_get(rtc->owner))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	ret = single_open(file, rtc_proc_show, rtc);
 	if (ret)
@@ -123,6 +129,7 @@ static int rtc_proc_open(struct inode *inode, struct file *file)
 
 static int rtc_proc_release(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int res = single_release(inode, file);
 	struct rtc_device *rtc = PDE_DATA(inode);
 
@@ -145,6 +152,7 @@ void rtc_proc_add_device(struct rtc_device *rtc)
 
 void rtc_proc_del_device(struct rtc_device *rtc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (is_rtc_hctosys(rtc))
 		remove_proc_entry("driver/rtc", NULL);
 }
diff --git a/drivers/rtc/rtc-sysfs.c b/drivers/rtc/rtc-sysfs.c
index e364550..2005a01 100644
--- a/drivers/rtc/rtc-sysfs.c
+++ b/drivers/rtc/rtc-sysfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * RTC subsystem, sysfs interface
  *
@@ -27,6 +29,7 @@
 static ssize_t
 name_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%s %s\n", dev_driver_string(dev->parent),
 		       dev_name(dev->parent));
 }
@@ -38,6 +41,7 @@ date_show(struct device *dev, struct device_attribute *attr, char *buf)
 	ssize_t retval;
 	struct rtc_time tm;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = rtc_read_time(to_rtc_device(dev), &tm);
 	if (retval == 0) {
 		retval = sprintf(buf, "%04d-%02d-%02d\n",
@@ -54,6 +58,7 @@ time_show(struct device *dev, struct device_attribute *attr, char *buf)
 	ssize_t retval;
 	struct rtc_time tm;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = rtc_read_time(to_rtc_device(dev), &tm);
 	if (retval == 0) {
 		retval = sprintf(buf, "%02d:%02d:%02d\n",
@@ -70,6 +75,7 @@ since_epoch_show(struct device *dev, struct device_attribute *attr, char *buf)
 	ssize_t retval;
 	struct rtc_time tm;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = rtc_read_time(to_rtc_device(dev), &tm);
 	if (retval == 0) {
 		unsigned long time;
@@ -84,6 +90,7 @@ static DEVICE_ATTR_RO(since_epoch);
 static ssize_t
 max_user_freq_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%d\n", to_rtc_device(dev)->max_user_freq);
 }
 
@@ -91,6 +98,7 @@ static ssize_t
 max_user_freq_store(struct device *dev, struct device_attribute *attr,
 		const char *buf, size_t n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rtc_device *rtc = to_rtc_device(dev);
 	unsigned long val;
 	int err;
@@ -160,6 +168,7 @@ wakealarm_store(struct device *dev, struct device_attribute *attr,
 	unsigned long now, alarm;
 	unsigned long push = 0;
 	struct rtc_wkalrm alm;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rtc_device *rtc = to_rtc_device(dev);
 	const char *buf_ptr;
 	int adjust = 0;
@@ -225,6 +234,7 @@ offset_show(struct device *dev, struct device_attribute *attr, char *buf)
 	ssize_t retval;
 	long offset;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = rtc_read_offset(to_rtc_device(dev), &offset);
 	if (retval == 0)
 		retval = sprintf(buf, "%ld\n", offset);
@@ -241,7 +251,9 @@ offset_store(struct device *dev, struct device_attribute *attr,
 
 	retval = kstrtol(buf, 10, &offset);
 	if (retval == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = rtc_set_offset(to_rtc_device(dev), offset);
+}
 
 	return (retval < 0) ? retval : n;
 }
@@ -267,7 +279,9 @@ static struct attribute *rtc_attrs[] = {
 static bool rtc_does_wakealarm(struct rtc_device *rtc)
 {
 	if (!device_can_wakeup(rtc->dev.parent))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	return rtc->ops->set_alarm != NULL;
 }
@@ -276,15 +290,20 @@ static umode_t rtc_attr_is_visible(struct kobject *kobj,
 				   struct attribute *attr, int n)
 {
 	struct device *dev = container_of(kobj, struct device, kobj);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rtc_device *rtc = to_rtc_device(dev);
 	umode_t mode = attr->mode;
 
 	if (attr == &dev_attr_wakealarm.attr) {
 		if (!rtc_does_wakealarm(rtc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mode = 0;
+}
 	} else if (attr == &dev_attr_offset.attr) {
 		if (!rtc->ops->set_offset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mode = 0;
+}
 	}
 
 	return mode;
diff --git a/drivers/scsi/hosts.c b/drivers/scsi/hosts.c
index 57bf43e..8a216e5 100644
--- a/drivers/scsi/hosts.c
+++ b/drivers/scsi/hosts.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  hosts.c Copyright (C) 1992 Drew Eckhardt
  *          Copyright (C) 1993, 1994, 1995 Eric Youngdale
@@ -47,6 +49,7 @@ static DEFINE_IDA(host_index_ida);
 
 static void scsi_host_cls_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	put_device(&class_to_shost(dev)->shost_gendev);
 }
 
@@ -68,7 +71,9 @@ int scsi_host_set_state(struct Scsi_Host *shost, enum scsi_host_state state)
 	enum scsi_host_state oldstate = shost->shost_state;
 
 	if (state == oldstate)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	switch (state) {
 	case SHOST_CREATED:
@@ -146,6 +151,7 @@ int scsi_host_set_state(struct Scsi_Host *shost, enum scsi_host_state state)
 					     "%s->%s\n",
 					     scsi_host_state_name(oldstate),
 					     scsi_host_state_name(state)));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EINVAL;
 }
 EXPORT_SYMBOL(scsi_host_set_state);
@@ -159,6 +165,7 @@ void scsi_remove_host(struct Scsi_Host *shost)
 	unsigned long flags;
 
 	mutex_lock(&shost->scan_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(shost->host_lock, flags);
 	if (scsi_host_set_state(shost, SHOST_CANCEL))
 		if (scsi_host_set_state(shost, SHOST_CANCEL_RECOVERY)) {
@@ -208,6 +215,7 @@ int scsi_add_host_with_dma(struct Scsi_Host *shost, struct device *dev,
 			sht->info ? sht->info(shost) : sht->name);
 
 	if (!shost->can_queue) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shost_printk(KERN_ERR, shost,
 			     "can_queue = 0 no longer supported\n");
 		goto fail;
@@ -218,6 +226,7 @@ int scsi_add_host_with_dma(struct Scsi_Host *shost, struct device *dev,
 		goto fail;
 
 	if (shost_use_blk_mq(shost)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = scsi_mq_setup_tags(shost);
 		if (error)
 			goto fail;
@@ -225,6 +234,7 @@ int scsi_add_host_with_dma(struct Scsi_Host *shost, struct device *dev,
 		shost->bqt = blk_init_tags(shost->can_queue,
 				shost->hostt->tag_alloc_policy);
 		if (!shost->bqt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -ENOMEM;
 			goto fail;
 		}
@@ -233,7 +243,9 @@ int scsi_add_host_with_dma(struct Scsi_Host *shost, struct device *dev,
 	if (!shost->shost_gendev.parent)
 		shost->shost_gendev.parent = dev ? dev : &platform_bus;
 	if (!dma_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dma_dev = shost->shost_gendev.parent;
+}
 
 	shost->dma_dev = dma_dev;
 
@@ -263,20 +275,24 @@ int scsi_add_host_with_dma(struct Scsi_Host *shost, struct device *dev,
 	get_device(&shost->shost_gendev);
 
 	if (shost->transportt->host_size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shost->shost_data = kzalloc(shost->transportt->host_size,
 					 GFP_KERNEL);
 		if (shost->shost_data == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -ENOMEM;
 			goto out_del_dev;
 		}
 	}
 
 	if (shost->transportt->create_work_queue) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		snprintf(shost->work_q_name, sizeof(shost->work_q_name),
 			 "scsi_wq_%d", shost->host_no);
 		shost->work_q = create_singlethread_workqueue(
 					shost->work_q_name);
 		if (!shost->work_q) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -EINVAL;
 			goto out_free_shost_data;
 		}
@@ -286,13 +302,16 @@ int scsi_add_host_with_dma(struct Scsi_Host *shost, struct device *dev,
 	if (error)
 		goto out_destroy_host;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_proc_host_add(shost);
 	scsi_autopm_put_host(shost);
 	return error;
 
  out_destroy_host:
 	if (shost->work_q)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		destroy_workqueue(shost->work_q);
+}
  out_free_shost_data:
 	kfree(shost->shost_data);
  out_del_dev:
@@ -305,7 +324,9 @@ int scsi_add_host_with_dma(struct Scsi_Host *shost, struct device *dev,
 	pm_runtime_set_suspended(&shost->shost_gendev);
 	pm_runtime_put_noidle(&shost->shost_gendev);
 	if (shost_use_blk_mq(shost))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scsi_mq_destroy_tags(shost);
+}
  fail:
 	return error;
 }
@@ -313,6 +334,7 @@ EXPORT_SYMBOL(scsi_add_host_with_dma);
 
 static void scsi_host_dev_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = dev_to_shost(dev);
 	struct device *parent = dev->parent;
 
@@ -389,11 +411,15 @@ struct Scsi_Host *scsi_host_alloc(struct scsi_host_template *sht, int privsize)
 	int index;
 
 	if (sht->unchecked_isa_dma && privsize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gfp_mask |= __GFP_DMA;
+}
 
 	shost = kzalloc(sizeof(struct Scsi_Host) + privsize, gfp_mask);
 	if (!shost)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	shost->host_lock = &shost->default_lock;
 	spin_lock_init(shost->host_lock);
@@ -404,6 +430,7 @@ struct Scsi_Host *scsi_host_alloc(struct scsi_host_template *sht, int privsize)
 	INIT_LIST_HEAD(&shost->starved_list);
 	init_waitqueue_head(&shost->host_wait);
 	mutex_init(&shost->scan_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	init_rcu_head(&shost->rcu);
 
 	index = ida_simple_get(&host_index_ida, 0, 0, GFP_KERNEL);
@@ -440,13 +467,17 @@ struct Scsi_Host *scsi_host_alloc(struct scsi_host_template *sht, int privsize)
 
 	if (shost_eh_deadline == -1 || !sht->eh_host_reset_handler)
 		shost->eh_deadline = -1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if ((ulong) shost_eh_deadline * HZ > INT_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shost_printk(KERN_WARNING, shost,
 			     "eh_deadline %u too large, setting to %u\n",
 			     shost_eh_deadline, INT_MAX / HZ);
 		shost->eh_deadline = INT_MAX;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shost->eh_deadline = shost_eh_deadline * HZ;
+}
 
 	if (sht->supported_mode == MODE_UNKNOWN)
 		/* means we didn't set it ... default to INITIATOR */
@@ -455,7 +486,9 @@ struct Scsi_Host *scsi_host_alloc(struct scsi_host_template *sht, int privsize)
 		shost->active_mode = sht->supported_mode;
 
 	if (sht->max_host_blocked)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shost->max_host_blocked = sht->max_host_blocked;
+}
 	else
 		shost->max_host_blocked = SCSI_DEFAULT_HOST_BLOCKED;
 
@@ -464,7 +497,9 @@ struct Scsi_Host *scsi_host_alloc(struct scsi_host_template *sht, int privsize)
 	 * machine infinity initially.
 	 */
 	if (sht->max_sectors)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shost->max_sectors = sht->max_sectors;
+}
 	else
 		shost->max_sectors = SCSI_DEFAULT_MAX_SECTORS;
 
@@ -492,6 +527,7 @@ struct Scsi_Host *scsi_host_alloc(struct scsi_host_template *sht, int privsize)
 	shost->ehandler = kthread_run(scsi_error_handler, shost,
 			"scsi_eh_%d", shost->host_no);
 	if (IS_ERR(shost->ehandler)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shost_printk(KERN_WARNING, shost,
 			"error handler thread failed to spawn, error = %ld\n",
 			PTR_ERR(shost->ehandler));
@@ -502,10 +538,12 @@ struct Scsi_Host *scsi_host_alloc(struct scsi_host_template *sht, int privsize)
 					    WQ_UNBOUND | WQ_MEM_RECLAIM,
 					   1, shost->host_no);
 	if (!shost->tmf_work_q) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shost_printk(KERN_WARNING, shost,
 			     "failed to create tmf workq\n");
 		goto fail_kthread;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_proc_hostdir_add(shost->hostt);
 	return shost;
 
@@ -521,6 +559,7 @@ EXPORT_SYMBOL(scsi_host_alloc);
 
 struct Scsi_Host *scsi_register(struct scsi_host_template *sht, int privsize)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = scsi_host_alloc(sht, privsize);
 
 	if (!sht->detect) {
@@ -537,6 +576,7 @@ EXPORT_SYMBOL(scsi_register);
 
 void scsi_unregister(struct Scsi_Host *shost)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_del(&shost->sht_legacy_list);
 	scsi_host_put(shost);
 }
@@ -547,6 +587,7 @@ static int __scsi_host_match(struct device *dev, const void *data)
 	struct Scsi_Host *p;
 	const unsigned short *hostnum = data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	p = class_to_shost(dev);
 	return p->host_no == *hostnum;
 }
@@ -570,6 +611,7 @@ struct Scsi_Host *scsi_host_lookup(unsigned short hostnum)
 	cdev = class_find_device(&shost_class, NULL, &hostnum,
 				 __scsi_host_match);
 	if (cdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shost = scsi_host_get(class_to_shost(cdev));
 		put_device(cdev);
 	}
@@ -583,6 +625,7 @@ EXPORT_SYMBOL(scsi_host_lookup);
  **/
 struct Scsi_Host *scsi_host_get(struct Scsi_Host *shost)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((shost->shost_state == SHOST_DEL) ||
 		!get_device(&shost->shost_gendev))
 		return NULL;
@@ -596,6 +639,7 @@ EXPORT_SYMBOL(scsi_host_get);
  **/
 void scsi_host_put(struct Scsi_Host *shost)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	put_device(&shost->shost_gendev);
 }
 EXPORT_SYMBOL(scsi_host_put);
@@ -607,6 +651,7 @@ int scsi_init_hosts(void)
 
 void scsi_exit_hosts(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	class_unregister(&shost_class);
 	ida_destroy(&host_index_ida);
 }
@@ -629,6 +674,7 @@ EXPORT_SYMBOL(scsi_is_host_device);
  **/
 int scsi_queue_work(struct Scsi_Host *shost, struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(!shost->work_q)) {
 		shost_printk(KERN_ERR, shost,
 			"ERROR: Scsi host '%s' attempted to queue scsi-work, "
@@ -648,6 +694,7 @@ EXPORT_SYMBOL_GPL(scsi_queue_work);
  **/
 void scsi_flush_work(struct Scsi_Host *shost)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!shost->work_q) {
 		shost_printk(KERN_ERR, shost,
 			"ERROR: Scsi host '%s' attempted to flush scsi-work, "
diff --git a/drivers/scsi/scsi.c b/drivers/scsi/scsi.c
index a7e4fba..305f4e9 100644
--- a/drivers/scsi/scsi.c
+++ b/drivers/scsi/scsi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  scsi.c Copyright (C) 1992 Drew Eckhardt
  *         Copyright (C) 1993, 1994, 1995, 1999 Eric Youngdale
@@ -184,6 +186,7 @@ void scsi_log_completion(struct scsi_cmnd *cmd, int disposition)
  */
 void scsi_cmd_get_serial(struct Scsi_Host *host, struct scsi_cmnd *cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cmd->serial_number = host->cmd_serial_number++;
 	if (cmd->serial_number == 0) 
 		cmd->serial_number = host->cmd_serial_number++;
@@ -213,11 +216,17 @@ void scsi_finish_command(struct scsi_cmnd *cmd)
 	 * capable of accepting new commands.
 	 */
 	if (atomic_read(&shost->host_blocked))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_set(&shost->host_blocked, 0);
+}
 	if (atomic_read(&starget->target_blocked))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_set(&starget->target_blocked, 0);
+}
 	if (atomic_read(&sdev->device_blocked))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_set(&sdev->device_blocked, 0);
+}
 
 	/*
 	 * If we have valid sense information, then some kind of recovery
@@ -230,12 +239,15 @@ void scsi_finish_command(struct scsi_cmnd *cmd)
 				"Notifying upper driver of completion "
 				"(result %x)\n", cmd->result));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	good_bytes = scsi_bufflen(cmd);
         if (!blk_rq_is_passthrough(cmd->request)) {
 		int old_good_bytes = good_bytes;
 		drv = scsi_cmd_to_driver(cmd);
 		if (drv->done)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			good_bytes = drv->done(cmd);
+}
 		/*
 		 * USB may not give sense identifying bad sector and
 		 * simply return a residue instead, so subtract off the
@@ -243,7 +255,9 @@ void scsi_finish_command(struct scsi_cmnd *cmd)
 		 * change to the completion length.
 		 */
 		if (good_bytes == old_good_bytes)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			good_bytes -= scsi_get_resid(cmd);
+}
 	}
 	scsi_io_completion(cmd, good_bytes);
 }
@@ -333,7 +347,9 @@ static int scsi_vpd_inquiry(struct scsi_device *sdev, unsigned char *buffer,
 	unsigned char cmd[16];
 
 	if (len < 4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	cmd[0] = INQUIRY;
 	cmd[1] = 1;		/* EVPD */
@@ -349,11 +365,15 @@ static int scsi_vpd_inquiry(struct scsi_device *sdev, unsigned char *buffer,
 	result = scsi_execute_req(sdev, cmd, DMA_FROM_DEVICE, buffer,
 				  len, NULL, 30 * HZ, 3, NULL);
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	/* Sanity check that we got the page back that we asked for */
 	if (buffer[1] != page)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	return get_unaligned_be16(&buffer[2]) + 4;
 }
@@ -426,14 +446,18 @@ static struct scsi_vpd *scsi_get_vpd_buf(struct scsi_device *sdev, u8 page)
 retry_pg:
 	vpd_buf = kmalloc(sizeof(*vpd_buf) + vpd_len, GFP_KERNEL);
 	if (!vpd_buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	result = scsi_vpd_inquiry(sdev, vpd_buf->data, page, vpd_len);
 	if (result < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(vpd_buf);
 		return NULL;
 	}
 	if (result > vpd_len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vpd_len = result;
 		kfree(vpd_buf);
 		goto retry_pg;
@@ -451,7 +475,9 @@ static void scsi_update_vpd_page(struct scsi_device *sdev, u8 page,
 
 	vpd_buf = scsi_get_vpd_buf(sdev, page);
 	if (!vpd_buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	mutex_lock(&sdev->inquiry_mutex);
 	rcu_swap_protected(*sdev_vpd_buf, vpd_buf,
@@ -459,8 +485,10 @@ static void scsi_update_vpd_page(struct scsi_device *sdev, u8 page,
 	mutex_unlock(&sdev->inquiry_mutex);
 
 	if (vpd_buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_rcu(vpd_buf, rcu);
 }
+}
 
 /**
  * scsi_attach_vpd - Attach Vital Product Data to a SCSI device structure
@@ -477,16 +505,22 @@ void scsi_attach_vpd(struct scsi_device *sdev)
 	struct scsi_vpd *vpd_buf;
 
 	if (!scsi_device_supports_vpd(sdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Ask for all the pages supported by this device */
 	vpd_buf = scsi_get_vpd_buf(sdev, 0);
 	if (!vpd_buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for (i = 4; i < vpd_buf->len; i++) {
 		if (vpd_buf->data[i] == 0x80)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			scsi_update_vpd_page(sdev, 0x80, &sdev->vpd_pg80);
+}
 		if (vpd_buf->data[i] == 0x83)
 			scsi_update_vpd_page(sdev, 0x83, &sdev->vpd_pg83);
 	}
@@ -511,6 +545,7 @@ int scsi_report_opcode(struct scsi_device *sdev, unsigned char *buffer,
 	struct scsi_sense_hdr sshdr;
 	int result;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sdev->no_report_opcodes || sdev->scsi_level < SCSI_SPC_3)
 		return -EINVAL;
 
@@ -556,6 +591,7 @@ int scsi_device_get(struct scsi_device *sdev)
 		goto fail;
 	if (!try_module_get(sdev->host->hostt->module))
 		goto fail_put_device;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 fail_put_device:
@@ -594,6 +630,7 @@ struct scsi_device *__scsi_iterate_devices(struct Scsi_Host *shost,
 		/* skip devices that we can't get a reference to */
 		if (!scsi_device_get(next))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next = NULL;
 		list = list->next;
 	}
@@ -618,6 +655,7 @@ EXPORT_SYMBOL(__scsi_iterate_devices);
 void starget_for_each_device(struct scsi_target *starget, void *data,
 		     void (*fn)(struct scsi_device *, void *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = dev_to_shost(starget->dev.parent);
 	struct scsi_device *sdev;
 
@@ -646,6 +684,7 @@ EXPORT_SYMBOL(starget_for_each_device);
 void __starget_for_each_device(struct scsi_target *starget, void *data,
 			       void (*fn)(struct scsi_device *, void *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = dev_to_shost(starget->dev.parent);
 	struct scsi_device *sdev;
 
@@ -678,12 +717,17 @@ struct scsi_device *__scsi_device_lookup_by_target(struct scsi_target *starget,
 	struct scsi_device *sdev;
 
 	list_for_each_entry(sdev, &starget->devices, same_target_siblings) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sdev->sdev_state == SDEV_DEL)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sdev->lun ==lun)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return sdev;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(__scsi_device_lookup_by_target);
@@ -707,7 +751,9 @@ struct scsi_device *scsi_device_lookup_by_target(struct scsi_target *starget,
 	spin_lock_irqsave(shost->host_lock, flags);
 	sdev = __scsi_device_lookup_by_target(starget, lun);
 	if (sdev && scsi_device_get(sdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev = NULL;
+}
 	spin_unlock_irqrestore(shost->host_lock, flags);
 
 	return sdev;
@@ -735,6 +781,7 @@ struct scsi_device *__scsi_device_lookup(struct Scsi_Host *shost,
 {
 	struct scsi_device *sdev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(sdev, &shost->__devices, siblings) {
 		if (sdev->sdev_state == SDEV_DEL)
 			continue;
@@ -764,6 +811,7 @@ struct scsi_device *scsi_device_lookup(struct Scsi_Host *shost,
 	struct scsi_device *sdev;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(shost->host_lock, flags);
 	sdev = __scsi_device_lookup(shost, channel, id, lun);
 	if (sdev && scsi_device_get(sdev))
@@ -793,7 +841,10 @@ static int __init init_scsi(void)
 
 	error = scsi_init_queue();
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = scsi_init_procfs();
 	if (error)
 		goto cleanup_queue;
@@ -810,6 +861,7 @@ static int __init init_scsi(void)
 	if (error)
 		goto cleanup_sysctl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_netlink_init();
 
 	printk(KERN_NOTICE "SCSI subsystem initialized\n");
@@ -832,6 +884,7 @@ static int __init init_scsi(void)
 
 static void __exit exit_scsi(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_netlink_exit();
 	scsi_sysfs_unregister();
 	scsi_exit_sysctl();
diff --git a/drivers/scsi/scsi_common.c b/drivers/scsi/scsi_common.c
index 40bc616..cf36318 100644
--- a/drivers/scsi/scsi_common.c
+++ b/drivers/scsi/scsi_common.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * SCSI functions used by both the initiator and the target code.
@@ -45,11 +47,17 @@ static const char *const scsi_device_types[] = {
 const char *scsi_device_type(unsigned type)
 {
 	if (type == 0x1e)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return "Well-known LUN   ";
+}
 	if (type == 0x1f)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return "No Device        ";
+}
 	if (type >= ARRAY_SIZE(scsi_device_types))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return "Unknown          ";
+}
 	return scsi_device_types[type];
 }
 EXPORT_SYMBOL(scsi_device_type);
@@ -80,6 +88,7 @@ u64 scsilun_to_int(struct scsi_lun *scsilun)
 	u64 lun;
 
 	lun = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < sizeof(lun); i += 2)
 		lun = lun | (((u64)scsilun->scsi_lun[i] << ((i + 1) * 8)) |
 			     ((u64)scsilun->scsi_lun[i + 1] << (i * 8)));
@@ -108,6 +117,7 @@ void int_to_scsilun(u64 lun, struct scsi_lun *scsilun)
 
 	memset(scsilun->scsi_lun, 0, sizeof(scsilun->scsi_lun));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < sizeof(lun); i += 2) {
 		scsilun->scsi_lun[i] = (lun >> 8) & 0xFF;
 		scsilun->scsi_lun[i+1] = lun & 0xFF;
@@ -138,28 +148,44 @@ EXPORT_SYMBOL(int_to_scsilun);
 bool scsi_normalize_sense(const u8 *sense_buffer, int sb_len,
 			  struct scsi_sense_hdr *sshdr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(sshdr, 0, sizeof(struct scsi_sense_hdr));
 
 	if (!sense_buffer || !sb_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	sshdr->response_code = (sense_buffer[0] & 0x7f);
 
 	if (!scsi_sense_valid(sshdr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	if (sshdr->response_code >= 0x72) {
 		/*
 		 * descriptor format
 		 */
 		if (sb_len > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sshdr->sense_key = (sense_buffer[1] & 0xf);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sb_len > 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sshdr->asc = sense_buffer[2];
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sb_len > 3)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sshdr->ascq = sense_buffer[3];
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sb_len > 7)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sshdr->additional_length = sense_buffer[7];
+}
 	} else {
 		/*
 		 * fixed format
@@ -176,6 +202,7 @@ bool scsi_normalize_sense(const u8 *sense_buffer, int sb_len,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 EXPORT_SYMBOL(scsi_normalize_sense);
@@ -199,6 +226,7 @@ const u8 * scsi_sense_desc_find(const u8 * sense_buffer, int sb_len,
 	int add_sen_len, add_len, desc_len, k;
 	const u8 * descp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((sb_len < 8) || (0 == (add_sen_len = sense_buffer[7])))
 		return NULL;
 	if ((sense_buffer[0] < 0x72) || (sense_buffer[0] > 0x73))
@@ -231,6 +259,7 @@ EXPORT_SYMBOL(scsi_sense_desc_find);
  **/
 void scsi_build_sense_buffer(int desc, u8 *buf, u8 key, u8 asc, u8 ascq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (desc) {
 		buf[0] = 0x72;	/* descriptor, current */
 		buf[1] = key;
@@ -259,6 +288,7 @@ EXPORT_SYMBOL(scsi_build_sense_buffer);
  **/
 int scsi_set_sense_information(u8 *buf, int buf_len, u64 info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((buf[0] & 0x7f) == 0x72) {
 		u8 *ucp, len;
 
@@ -312,6 +342,7 @@ int scsi_set_sense_field_pointer(u8 *buf, int buf_len, u16 fp, u8 bp, bool cd)
 	u8 *ucp, len;
 
 	if ((buf[0] & 0x7f) == 0x72) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = buf[7];
 		ucp = (char *)scsi_sense_desc_find(buf, len + 8, 2);
 		if (!ucp) {
diff --git a/drivers/scsi/scsi_devinfo.c b/drivers/scsi/scsi_devinfo.c
index b19b00a..ca05fad 100644
--- a/drivers/scsi/scsi_devinfo.c
+++ b/drivers/scsi/scsi_devinfo.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 
 #include <linux/blkdev.h>
@@ -278,11 +280,14 @@ static struct scsi_dev_info_list_table *scsi_devinfo_lookup_by_key(int key)
 
 	list_for_each_entry(devinfo_table, &scsi_dev_info_list, node)
 		if (devinfo_table->key == key) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			found = 1;
 			break;
 		}
 	if (!found)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	return devinfo_table;
 }
@@ -313,9 +318,11 @@ static void scsi_strcpy_devinfo(char *name, char *to, size_t to_length,
 		}
 	}
 	if (from_length > to_length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		 printk(KERN_WARNING "%s: %s string '%s' is too long\n",
 			__func__, name, from);
 }
+}
 
 /**
  * scsi_dev_info_list_add - add one dev_info list entry.
@@ -367,10 +374,14 @@ int scsi_dev_info_list_add_keyed(int compatible, char *vendor, char *model,
 		scsi_devinfo_lookup_by_key(key);
 
 	if (IS_ERR(devinfo_table))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(devinfo_table);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	devinfo = kmalloc(sizeof(*devinfo), GFP_KERNEL);
 	if (!devinfo) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "%s: no memory\n", __func__);
 		return -ENOMEM;
 	}
@@ -381,7 +392,9 @@ int scsi_dev_info_list_add_keyed(int compatible, char *vendor, char *model,
 			    model, compatible);
 
 	if (strflags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		devinfo->flags = simple_strtoul(strflags, NULL, 0);
+}
 	else
 		devinfo->flags = flags;
 
@@ -394,6 +407,7 @@ int scsi_dev_info_list_add_keyed(int compatible, char *vendor, char *model,
 		list_add(&devinfo->dev_info_list,
 			 &devinfo_table->scsi_dev_info_list);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(scsi_dev_info_list_add_keyed);
@@ -420,7 +434,9 @@ static struct scsi_dev_info_list *scsi_dev_info_list_find(const char *vendor,
 	const char *vskip, *mskip;
 
 	if (IS_ERR(devinfo_table))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (struct scsi_dev_info_list *) devinfo_table;
+}
 
 	/* Prepare for "compatible" matches */
 
@@ -435,6 +451,7 @@ static struct scsi_dev_info_list *scsi_dev_info_list_find(const char *vendor,
 	vmax = sizeof(devinfo->vendor);
 	vskip = vendor;
 	while (vmax > 0 && *vskip == ' ') {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vmax--;
 		vskip++;
 	}
@@ -442,9 +459,11 @@ static struct scsi_dev_info_list *scsi_dev_info_list_find(const char *vendor,
 	while (vmax > 0 && vskip[vmax - 1] == ' ')
 		--vmax;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mmax = sizeof(devinfo->model);
 	mskip = model;
 	while (mmax > 0 && *mskip == ' ') {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mmax--;
 		mskip++;
 	}
@@ -465,8 +484,10 @@ static struct scsi_dev_info_list *scsi_dev_info_list_find(const char *vendor,
 					(mmax < sizeof(devinfo->model) &&
 						devinfo->model[mmax]))
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return devinfo;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!memcmp(devinfo->vendor, vendor,
 				     sizeof(devinfo->vendor)) &&
 			     !memcmp(devinfo->model, model,
@@ -475,6 +496,7 @@ static struct scsi_dev_info_list *scsi_dev_info_list_find(const char *vendor,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(-ENOENT);
 }
 
@@ -496,7 +518,9 @@ int scsi_dev_info_list_del_keyed(char *vendor, char *model, int key)
 
 	found = scsi_dev_info_list_find(vendor, model, key);
 	if (IS_ERR(found))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(found);
+}
 
 	list_del(&found->dev_info_list);
 	kfree(found);
@@ -530,6 +554,7 @@ static int scsi_dev_info_list_add_str(char *dev_list)
 		next++;
 		next_check = ",\"";
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next_check = ",";
 	}
 
@@ -539,18 +564,25 @@ static int scsi_dev_info_list_add_str(char *dev_list)
 	 */
 	for (vendor = strsep(&next, ":"); vendor && (vendor[0] != '\0')
 	     && (res == 0); vendor = strsep(&next, ":")) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		strflags = NULL;
 		model = strsep(&next, ":");
 		if (model)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			strflags = strsep(&next, next_check);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!model || !strflags) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_ERR "%s: bad dev info string '%s' '%s'"
 			       " '%s'\n", __func__, vendor, model,
 			       strflags);
 			res = -EINVAL;
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			res = scsi_dev_info_list_add(0 /* compatible */, vendor,
 						     model, strflags, 0);
+}
 	}
 	return res;
 }
@@ -599,19 +631,27 @@ int scsi_get_device_flags_keyed(struct scsi_device *sdev,
 
 	devinfo = scsi_dev_info_list_find(vendor, model, key);
 	if (!IS_ERR(devinfo))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return devinfo->flags;
+}
 
 	err = PTR_ERR(devinfo);
 	if (err != -ENOENT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/* nothing found, return nothing */
 	if (key != SCSI_DEVINFO_GLOBAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* except for the global list, where we have an exception */
 	if (sdev->sdev_bflags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sdev->sdev_bflags;
+}
 
 	return scsi_default_dev_flags;
 }
@@ -643,6 +683,7 @@ static int devinfo_seq_show(struct seq_file *m, void *v)
 
 static void *devinfo_seq_start(struct seq_file *m, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct double_list *dl = kmalloc(sizeof(*dl), GFP_KERNEL);
 	loff_t pos = *ppos;
 
@@ -687,6 +728,7 @@ static void *devinfo_seq_next(struct seq_file *m, void *v, loff_t *ppos)
 
 static void devinfo_seq_stop(struct seq_file *m, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(v);
 }
 
@@ -699,6 +741,7 @@ static const struct seq_operations scsi_devinfo_seq_ops = {
 
 static int proc_scsi_devinfo_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &scsi_devinfo_seq_ops);
 }
 
@@ -716,6 +759,7 @@ static ssize_t proc_scsi_devinfo_write(struct file *file,
 	char *buffer;
 	ssize_t err = length;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!buf || length>PAGE_SIZE)
 		return -EINVAL;
 	if (!(buffer = (char *) __get_free_page(GFP_KERNEL)))
@@ -788,10 +832,13 @@ int scsi_dev_info_add_list(int key, const char *name)
 		/* list already exists */
 		return -EEXIST;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	devinfo_table = kmalloc(sizeof(*devinfo_table), GFP_KERNEL);
 
 	if (!devinfo_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	INIT_LIST_HEAD(&devinfo_table->node);
 	INIT_LIST_HEAD(&devinfo_table->scsi_dev_info_list);
@@ -853,7 +900,9 @@ int __init scsi_init_devinfo(void)
 
 	error = scsi_dev_info_add_list(SCSI_DEVINFO_GLOBAL, NULL);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	error = scsi_dev_info_list_add_str(scsi_dev_flags);
 	if (error)
@@ -872,6 +921,7 @@ int __init scsi_init_devinfo(void)
 #ifdef CONFIG_SCSI_PROC_FS
 	p = proc_create("scsi/device_info", 0, NULL, &scsi_devinfo_proc_fops);
 	if (!p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOMEM;
 		goto out;
 	}
@@ -879,6 +929,9 @@ int __init scsi_init_devinfo(void)
 
  out:
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scsi_exit_devinfo();
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
diff --git a/drivers/scsi/scsi_error.c b/drivers/scsi/scsi_error.c
index fa504ba..9b60e04 100644
--- a/drivers/scsi/scsi_error.c
+++ b/drivers/scsi/scsi_error.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  scsi_error.c Copyright (C) 1997 Eric Youngdale
  *
@@ -97,7 +99,9 @@ EXPORT_SYMBOL_GPL(scsi_schedule_eh);
 static int scsi_host_eh_past_deadline(struct Scsi_Host *shost)
 {
 	if (!shost->last_reset || shost->eh_deadline == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * 32bit accesses are guaranteed to be atomic
@@ -110,6 +114,7 @@ static int scsi_host_eh_past_deadline(struct Scsi_Host *shost)
 	    shost->eh_deadline > -1)
 		return 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -135,6 +140,7 @@ scmd_eh_abort_handler(struct work_struct *work)
 				    "aborting command\n"));
 		rtn = scsi_try_to_abort_cmd(sdev->host->hostt, scmd);
 		if (rtn == SUCCESS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_host_byte(scmd, DID_TIME_OUT);
 			if (scsi_host_eh_past_deadline(sdev->host)) {
 				SCSI_LOG_ERROR_RECOVERY(3,
@@ -146,12 +152,14 @@ scmd_eh_abort_handler(struct work_struct *work)
 				SCSI_LOG_ERROR_RECOVERY(3,
 					scmd_printk(KERN_WARNING, scmd,
 						    "retry aborted command\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				scsi_queue_insert(scmd, SCSI_MLQUEUE_EH_RETRY);
 				return;
 			} else {
 				SCSI_LOG_ERROR_RECOVERY(3,
 					scmd_printk(KERN_WARNING, scmd,
 						    "finish aborted command\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				scsi_finish_command(scmd);
 				return;
 			}
@@ -187,13 +195,17 @@ scsi_abort_command(struct scsi_cmnd *scmd)
 		SCSI_LOG_ERROR_RECOVERY(3,
 			scmd_printk(KERN_INFO, scmd,
 				    "previous abort failed\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(delayed_work_pending(&scmd->abort_work));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return FAILED;
 	}
 
 	spin_lock_irqsave(shost->host_lock, flags);
 	if (shost->eh_deadline != -1 && !shost->last_reset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shost->last_reset = jiffies;
+}
 	spin_unlock_irqrestore(shost->host_lock, flags);
 
 	scmd->eh_eflags |= SCSI_EH_ABORT_SCHEDULED;
@@ -214,9 +226,12 @@ scsi_abort_command(struct scsi_cmnd *scmd)
 static void scsi_eh_reset(struct scsi_cmnd *scmd)
 {
 	if (!blk_rq_is_passthrough(scmd->request)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct scsi_driver *sdrv = scsi_cmd_to_driver(scmd);
 		if (sdrv->eh_reset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sdrv->eh_reset(scmd);
+}
 	}
 }
 
@@ -245,11 +260,15 @@ void scsi_eh_scmd_add(struct scsi_cmnd *scmd)
 
 	spin_lock_irqsave(shost->host_lock, flags);
 	if (scsi_host_set_state(shost, SHOST_RECOVERY)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = scsi_host_set_state(shost, SHOST_CANCEL_RECOVERY);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON_ONCE(ret);
 	}
 	if (shost->eh_deadline != -1 && !shost->last_reset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shost->last_reset = jiffies;
+}
 
 	scsi_eh_reset(scmd);
 	list_add_tail(&scmd->eh_entry, &shost->eh_cmd_q);
@@ -273,6 +292,7 @@ void scsi_eh_scmd_add(struct scsi_cmnd *scmd)
  */
 enum blk_eh_timer_return scsi_times_out(struct request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cmnd *scmd = blk_mq_rq_to_pdu(req);
 	enum blk_eh_timer_return rtn = BLK_EH_NOT_HANDLED;
 	struct Scsi_Host *host = scmd->device->host;
@@ -281,13 +301,16 @@ enum blk_eh_timer_return scsi_times_out(struct request *req)
 	scsi_log_completion(scmd, TIMEOUT_ERROR);
 
 	if (host->eh_deadline != -1 && !host->last_reset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		host->last_reset = jiffies;
+}
 
 	if (host->hostt->eh_timed_out)
 		rtn = host->hostt->eh_timed_out(scmd);
 
 	if (rtn == BLK_EH_NOT_HANDLED) {
 		if (scsi_abort_command(scmd) != SUCCESS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_host_byte(scmd, DID_TIME_OUT);
 			scsi_eh_scmd_add(scmd);
 		}
@@ -375,6 +398,7 @@ static inline void scsi_eh_prt_fail_stats(struct Scsi_Host *shost,
  */
 static void scsi_report_lun_change(struct scsi_device *sdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev->sdev_target->expecting_lun_change = 1;
 }
 
@@ -390,11 +414,14 @@ static void scsi_report_sense(struct scsi_device *sdev,
 	enum scsi_device_event evt_type = SDEV_EVT_MAXBITS;	/* i.e. none */
 
 	if (sshdr->sense_key == UNIT_ATTENTION) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sshdr->asc == 0x3f && sshdr->ascq == 0x03) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			evt_type = SDEV_EVT_INQUIRY_CHANGE_REPORTED;
 			sdev_printk(KERN_WARNING, sdev,
 				    "Inquiry data has changed");
 		} else if (sshdr->asc == 0x3f && sshdr->ascq == 0x0e) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			evt_type = SDEV_EVT_LUN_CHANGE_REPORTED;
 			scsi_report_lun_change(sdev);
 			sdev_printk(KERN_WARNING, sdev,
@@ -403,13 +430,17 @@ static void scsi_report_sense(struct scsi_device *sdev,
 				    "changed. The Linux SCSI layer does not "
 				    "automatically remap LUN assignments.\n");
 		} else if (sshdr->asc == 0x3f)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sdev_printk(KERN_WARNING, sdev,
 				    "Warning! Received an indication that the "
 				    "operating parameters on this target have "
 				    "changed. The Linux SCSI layer does not "
 				    "automatically adjust these parameters.\n");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sshdr->asc == 0x38 && sshdr->ascq == 0x07) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			evt_type = SDEV_EVT_SOFT_THRESHOLD_REACHED_REPORTED;
 			sdev_printk(KERN_WARNING, sdev,
 				    "Warning! Received an indication that the "
@@ -417,24 +448,31 @@ static void scsi_report_sense(struct scsi_device *sdev,
 				    "threshold.\n");
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sshdr->asc == 0x2a && sshdr->ascq == 0x01) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			evt_type = SDEV_EVT_MODE_PARAMETER_CHANGE_REPORTED;
 			sdev_printk(KERN_WARNING, sdev,
 				    "Mode parameters changed");
 		} else if (sshdr->asc == 0x2a && sshdr->ascq == 0x06) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			evt_type = SDEV_EVT_ALUA_STATE_CHANGE_REPORTED;
 			sdev_printk(KERN_WARNING, sdev,
 				    "Asymmetric access state changed");
 		} else if (sshdr->asc == 0x2a && sshdr->ascq == 0x09) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			evt_type = SDEV_EVT_CAPACITY_CHANGE_REPORTED;
 			sdev_printk(KERN_WARNING, sdev,
 				    "Capacity data has changed");
 		} else if (sshdr->asc == 0x2a)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sdev_printk(KERN_WARNING, sdev,
 				    "Parameters changed");
+}
 	}
 
 	if (evt_type != SDEV_EVT_MAXBITS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_bit(evt_type, sdev->pending_events);
 		schedule_work(&sdev->event_work);
 	}
@@ -457,19 +495,25 @@ int scsi_check_sense(struct scsi_cmnd *scmd)
 	struct scsi_sense_hdr sshdr;
 
 	if (! scsi_command_normalize_sense(scmd, &sshdr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return FAILED;	/* no valid sense data */
+}
 
 	scsi_report_sense(sdev, &sshdr);
 
 	if (scsi_sense_is_deferred(&sshdr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NEEDS_RETRY;
+}
 
 	if (sdev->handler && sdev->handler->check_sense) {
 		int rc;
 
 		rc = sdev->handler->check_sense(sdev, &sshdr);
 		if (rc != SCSI_RETURN_NOT_HANDLED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return rc;
+}
 		/* handler does not care. Drop down to default handling */
 	}
 
@@ -488,7 +532,9 @@ int scsi_check_sense(struct scsi_cmnd *scmd)
 	if (sshdr.response_code == 0x70) {
 		/* fixed format */
 		if (scmd->sense_buffer[2] & 0xe0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return SUCCESS;
+}
 	} else {
 		/*
 		 * descriptor format: look for "stream commands sense data
@@ -501,6 +547,7 @@ int scsi_check_sense(struct scsi_cmnd *scmd)
 			return SUCCESS;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (sshdr.sense_key) {
 	case NO_SENSE:
 		return SUCCESS;
@@ -509,8 +556,11 @@ int scsi_check_sense(struct scsi_cmnd *scmd)
 
 	case ABORTED_COMMAND:
 		if (sshdr.asc == 0x10) /* DIF */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return SUCCESS;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NEEDS_RETRY;
 	case NOT_READY:
 	case UNIT_ATTENTION:
@@ -528,6 +578,7 @@ int scsi_check_sense(struct scsi_cmnd *scmd)
 			 * not to squash media change unit attention.
 			 */
 			if (sshdr.asc != 0x28 || sshdr.ascq != 0x00) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				scmd->device->expecting_cc_ua = 0;
 				return NEEDS_RETRY;
 			}
@@ -545,7 +596,9 @@ int scsi_check_sense(struct scsi_cmnd *scmd)
 		 * should retry.
 		 */
 		if ((sshdr.asc == 0x04) && (sshdr.ascq == 0x01))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NEEDS_RETRY;
+}
 		/*
 		 * if the device is not started, we need to wake
 		 * the error handler to start the motor
@@ -578,14 +631,18 @@ int scsi_check_sense(struct scsi_cmnd *scmd)
 		if (sshdr.asc == 0x11 || /* UNRECOVERED READ ERR */
 		    sshdr.asc == 0x13 || /* AMNF DATA FIELD */
 		    sshdr.asc == 0x14) { /* RECORD NOT FOUND */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_host_byte(scmd, DID_MEDIUM_ERROR);
 			return SUCCESS;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NEEDS_RETRY;
 
 	case HARDWARE_ERROR:
 		if (scmd->device->retry_hwerror)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ADD_TO_MLQUEUE;
+}
 		else
 			set_host_byte(scmd, DID_TARGET_FAILURE);
 		/* FALLTHROUGH */
@@ -596,8 +653,10 @@ int scsi_check_sense(struct scsi_cmnd *scmd)
 		    sshdr.asc == 0x24 || /* Invalid field in cdb */
 		    sshdr.asc == 0x26 || /* Parameter value invalid */
 		    sshdr.asc == 0x27) { /* Write protected */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_host_byte(scmd, DID_TARGET_FAILURE);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return SUCCESS;
 
 	default:
@@ -615,10 +674,12 @@ static void scsi_handle_queue_ramp_up(struct scsi_device *sdev)
 	    sdev->queue_depth >= sdev->max_queue_depth)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (time_before(jiffies,
 	    sdev->last_queue_ramp_up + sdev->queue_ramp_up_period))
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (time_before(jiffies,
 	    sdev->last_queue_full_time + sdev->queue_ramp_up_period))
 		return;
@@ -628,11 +689,13 @@ static void scsi_handle_queue_ramp_up(struct scsi_device *sdev)
 	 * ramp up on them.
 	 */
 	shost_for_each_device(tmp_sdev, sdev->host) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tmp_sdev->channel != sdev->channel ||
 		    tmp_sdev->id != sdev->id ||
 		    tmp_sdev->queue_depth == sdev->max_queue_depth)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scsi_change_queue_depth(tmp_sdev, tmp_sdev->queue_depth + 1);
 		sdev->last_queue_ramp_up = jiffies;
 	}
@@ -644,7 +707,9 @@ static void scsi_handle_queue_full(struct scsi_device *sdev)
 	struct scsi_device *tmp_sdev;
 
 	if (!sht->track_queue_depth)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	shost_for_each_device(tmp_sdev, sdev->host) {
 		if (tmp_sdev->channel != sdev->channel ||
@@ -743,8 +808,10 @@ static void scsi_eh_done(struct scsi_cmnd *scmd)
 
 	eh_action = scmd->device->host->eh_action;
 	if (eh_action)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		complete(eh_action);
 }
+}
 
 /**
  * scsi_try_host_reset - ask host adapter to reset itself
@@ -761,7 +828,9 @@ static int scsi_try_host_reset(struct scsi_cmnd *scmd)
 		shost_printk(KERN_INFO, host, "Snd Host RST\n"));
 
 	if (!hostt->eh_host_reset_handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return FAILED;
+}
 
 	rtn = hostt->eh_host_reset_handler(scmd);
 
@@ -791,7 +860,9 @@ static int scsi_try_bus_reset(struct scsi_cmnd *scmd)
 		"%s: Snd Bus RST\n", __func__));
 
 	if (!hostt->eh_bus_reset_handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return FAILED;
+}
 
 	rtn = hostt->eh_bus_reset_handler(scmd);
 
@@ -808,6 +879,7 @@ static int scsi_try_bus_reset(struct scsi_cmnd *scmd)
 
 static void __scsi_report_device_reset(struct scsi_device *sdev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev->was_reset = 1;
 	sdev->expecting_cc_ua = 1;
 }
@@ -830,7 +902,9 @@ static int scsi_try_target_reset(struct scsi_cmnd *scmd)
 	struct scsi_host_template *hostt = host->hostt;
 
 	if (!hostt->eh_target_reset_handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return FAILED;
+}
 
 	rtn = hostt->eh_target_reset_handler(scmd);
 	if (rtn == SUCCESS) {
@@ -859,7 +933,9 @@ static int scsi_try_bus_device_reset(struct scsi_cmnd *scmd)
 	struct scsi_host_template *hostt = scmd->device->host->hostt;
 
 	if (!hostt->eh_device_reset_handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return FAILED;
+}
 
 	rtn = hostt->eh_device_reset_handler(scmd);
 	if (rtn == SUCCESS)
@@ -888,13 +964,17 @@ static int scsi_try_to_abort_cmd(struct scsi_host_template *hostt,
 				 struct scsi_cmnd *scmd)
 {
 	if (!hostt->eh_abort_handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return FAILED;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hostt->eh_abort_handler(scmd);
 }
 
 static void scsi_abort_eh_cmnd(struct scsi_cmnd *scmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (scsi_try_to_abort_cmd(scmd->device->host->hostt, scmd) != SUCCESS)
 		if (scsi_try_bus_device_reset(scmd) != SUCCESS)
 			if (scsi_try_target_reset(scmd) != SUCCESS)
@@ -947,6 +1027,7 @@ void scsi_eh_prep_cmnd(struct scsi_cmnd *scmd, struct scsi_eh_save *ses,
 	scmd->result = 0;
 
 	if (sense_bytes) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scmd->sdb.length = min_t(unsigned, SCSI_SENSE_BUFFERSIZE,
 					 sense_bytes);
 		sg_init_one(&ses->sense_sgl, scmd->sense_buffer,
@@ -1106,11 +1187,13 @@ static int scsi_send_eh_cmnd(struct scsi_cmnd *scmd, unsigned char *cmnd,
  */
 static int scsi_request_sense(struct scsi_cmnd *scmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scsi_send_eh_cmnd(scmd, NULL, 0, scmd->device->eh_timeout, ~0);
 }
 
 static int scsi_eh_action(struct scsi_cmnd *scmd, int rtn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!blk_rq_is_passthrough(scmd->request)) {
 		struct scsi_driver *sdrv = scsi_cmd_to_driver(scmd);
 		if (sdrv->eh_action)
@@ -1275,6 +1358,7 @@ static int scsi_eh_test_devices(struct list_head *cmd_list,
 	struct scsi_device *sdev;
 	int finish_cmds;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!list_empty(cmd_list)) {
 		scmd = list_entry(cmd_list->next, struct scsi_cmnd, eh_entry);
 		sdev = scmd->device;
@@ -1323,6 +1407,7 @@ static int scsi_eh_try_stu(struct scsi_cmnd *scmd)
 	if (scmd->device->allow_restart) {
 		int i, rtn = NEEDS_RETRY;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; rtn == NEEDS_RETRY && i < 2; i++)
 			rtn = scsi_send_eh_cmnd(scmd, stu_command, 6, scmd->device->request_queue->rq_timeout, 0);
 
@@ -1350,6 +1435,7 @@ static int scsi_eh_stu(struct Scsi_Host *shost,
 	struct scsi_cmnd *scmd, *stu_scmd, *next;
 	struct scsi_device *sdev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	shost_for_each_device(sdev, shost) {
 		if (scsi_host_eh_past_deadline(shost)) {
 			SCSI_LOG_ERROR_RECOVERY(3,
@@ -1416,6 +1502,7 @@ static int scsi_eh_bus_device_reset(struct Scsi_Host *shost,
 	struct scsi_device *sdev;
 	int rtn;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	shost_for_each_device(sdev, shost) {
 		if (scsi_host_eh_past_deadline(shost)) {
 			SCSI_LOG_ERROR_RECOVERY(3,
@@ -1478,6 +1565,7 @@ static int scsi_eh_target_reset(struct Scsi_Host *shost,
 
 	list_splice_init(work_q, &tmp_list);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!list_empty(&tmp_list)) {
 		struct scsi_cmnd *next, *scmd;
 		int rtn;
@@ -1547,6 +1635,7 @@ static int scsi_eh_bus_reset(struct Scsi_Host *shost,
 	 * the reset.
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (channel = 0; channel <= shost->max_channel; channel++) {
 		if (scsi_host_eh_past_deadline(shost)) {
 			list_splice_init(&check_list, work_q);
@@ -1612,6 +1701,7 @@ static int scsi_eh_host_reset(struct Scsi_Host *shost,
 	int rtn;
 
 	if (!list_empty(work_q)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scmd = list_entry(work_q->next,
 				  struct scsi_cmnd, eh_entry);
 
@@ -1648,6 +1738,7 @@ static void scsi_eh_offline_sdevs(struct list_head *work_q,
 	struct scsi_cmnd *scmd, *next;
 	struct scsi_device *sdev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(scmd, next, work_q, eh_entry) {
 		sdev_printk(KERN_INFO, scmd->device, "Device offlined - "
 			    "not ready after error recovery\n");
@@ -1687,7 +1778,9 @@ int scsi_noretry_cmd(struct scsi_cmnd *scmd)
 	}
 
 	if (status_byte(scmd->result) != CHECK_CONDITION)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 check_type:
 	/*
@@ -1726,6 +1819,7 @@ int scsi_decide_disposition(struct scsi_cmnd *scmd)
 	if (!scsi_device_online(scmd->device)) {
 		SCSI_LOG_ERROR_RECOVERY(5, scmd_printk(KERN_INFO, scmd,
 			"%s: device offline - report as SUCCESS\n", __func__));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return SUCCESS;
 	}
 
@@ -1749,6 +1843,7 @@ int scsi_decide_disposition(struct scsi_cmnd *scmd)
 		break;
 	case DID_ABORT:
 		if (scmd->eh_eflags & SCSI_EH_ABORT_SCHEDULED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_host_byte(scmd, DID_TIME_OUT);
 			return SUCCESS;
 		}
@@ -1812,8 +1907,10 @@ int scsi_decide_disposition(struct scsi_cmnd *scmd)
 		 */
 		if ((scmd->cmnd[0] == TEST_UNIT_READY ||
 		     scmd->cmnd[0] == INQUIRY)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return SUCCESS;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return FAILED;
 		}
 	case DID_RESET:
@@ -1826,7 +1923,9 @@ int scsi_decide_disposition(struct scsi_cmnd *scmd)
 	 * next, check the message byte.
 	 */
 	if (msg_byte(scmd->result) != COMMAND_COMPLETE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return FAILED;
+}
 
 	/*
 	 * check the status byte to see if this indicates anything special.
@@ -1849,7 +1948,9 @@ int scsi_decide_disposition(struct scsi_cmnd *scmd)
 		return ADD_TO_MLQUEUE;
 	case GOOD:
 		if (scmd->cmnd[0] == REPORT_LUNS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			scmd->device->sdev_target->expecting_lun_change = 0;
+}
 		scsi_handle_queue_ramp_up(scmd->device);
 		/* FALLTHROUGH */
 	case COMMAND_TERMINATED:
@@ -1882,6 +1983,7 @@ int scsi_decide_disposition(struct scsi_cmnd *scmd)
 	default:
 		return FAILED;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return FAILED;
 
       maybe_retry:
@@ -1892,6 +1994,7 @@ int scsi_decide_disposition(struct scsi_cmnd *scmd)
 	 * for queue congestion conditions (QUEUE_FULL or BUSY) */
 	if ((++scmd->retries) <= scmd->allowed
 	    && !scsi_noretry_cmd(scmd)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NEEDS_RETRY;
 	} else {
 		/*
@@ -1903,6 +2006,7 @@ int scsi_decide_disposition(struct scsi_cmnd *scmd)
 
 static void eh_lock_door_done(struct request *req, blk_status_t status)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__blk_put_request(req->q, req);
 }
 
@@ -1928,7 +2032,9 @@ static void scsi_eh_lock_door(struct scsi_device *sdev)
 	 */
 	req = blk_get_request(sdev->request_queue, REQ_OP_SCSI_IN, GFP_KERNEL);
 	if (IS_ERR(req))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	rq = scsi_req(req);
 
 	rq->cmd[0] = ALLOW_MEDIUM_REMOVAL;
@@ -1966,6 +2072,7 @@ static void scsi_restart_operations(struct Scsi_Host *shost)
 	 */
 	shost_for_each_device(sdev, shost) {
 		if (scsi_device_online(sdev) && sdev->was_reset && sdev->locked) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			scsi_eh_lock_door(sdev);
 			sdev->was_reset = 0;
 		}
@@ -1981,8 +2088,12 @@ static void scsi_restart_operations(struct Scsi_Host *shost)
 
 	spin_lock_irqsave(shost->host_lock, flags);
 	if (scsi_host_set_state(shost, SHOST_RUNNING))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (scsi_host_set_state(shost, SHOST_CANCEL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BUG_ON(scsi_host_set_state(shost, SHOST_DEL));
+}
+}
 	spin_unlock_irqrestore(shost->host_lock, flags);
 
 	wake_up(&shost->host_wait);
@@ -2005,8 +2116,12 @@ static void scsi_restart_operations(struct Scsi_Host *shost)
 	 */
 	spin_lock_irqsave(shost->host_lock, flags);
 	if (shost->host_eh_scheduled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (scsi_host_set_state(shost, SHOST_RECOVERY))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			WARN_ON(scsi_host_set_state(shost, SHOST_CANCEL_RECOVERY));
+}
+}
 	spin_unlock_irqrestore(shost->host_lock, flags);
 }
 
@@ -2020,6 +2135,7 @@ void scsi_eh_ready_devs(struct Scsi_Host *shost,
 			struct list_head *work_q,
 			struct list_head *done_q)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!scsi_eh_stu(shost, work_q, done_q))
 		if (!scsi_eh_bus_device_reset(shost, work_q, done_q))
 			if (!scsi_eh_target_reset(shost, work_q, done_q))
@@ -2047,6 +2163,7 @@ void scsi_eh_flush_done_q(struct list_head *done_q)
 				scmd_printk(KERN_INFO, scmd,
 					     "%s: flush retry cmd\n",
 					     current->comm));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				scsi_queue_insert(scmd, SCSI_MLQUEUE_EH_RETRY);
 		} else {
 			/*
@@ -2055,7 +2172,9 @@ void scsi_eh_flush_done_q(struct list_head *done_q)
 			 * set, do not set DRIVER_TIMEOUT.
 			 */
 			if (!scmd->result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				scmd->result |= (DRIVER_TIMEOUT << 24);
+}
 			SCSI_LOG_ERROR_RECOVERY(3,
 				scmd_printk(KERN_INFO, scmd,
 					     "%s: flush finish cmd\n",
@@ -2095,6 +2214,7 @@ static void scsi_unjam_host(struct Scsi_Host *shost)
 	LIST_HEAD(eh_work_q);
 	LIST_HEAD(eh_done_q);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(shost->host_lock, flags);
 	list_splice_init(&shost->eh_cmd_q, &eh_work_q);
 	spin_unlock_irqrestore(shost->host_lock, flags);
@@ -2188,14 +2308,18 @@ int scsi_error_handler(void *data)
 		 */
 		scsi_restart_operations(shost);
 		if (!shost->eh_noresume)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			scsi_autopm_put_host(shost);
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__set_current_state(TASK_RUNNING);
 
 	SCSI_LOG_ERROR_RECOVERY(1,
 		shost_printk(KERN_INFO, shost,
 			     "Error handler scsi_eh_%d exiting\n",
 			     shost->host_no));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	shost->ehandler = NULL;
 	return 0;
 }
@@ -2225,6 +2349,7 @@ void scsi_report_bus_reset(struct Scsi_Host *shost, int channel)
 {
 	struct scsi_device *sdev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__shost_for_each_device(sdev, shost) {
 		if (channel == sdev_channel(sdev))
 			__scsi_report_device_reset(sdev, NULL);
@@ -2258,6 +2383,7 @@ void scsi_report_device_reset(struct Scsi_Host *shost, int channel, int target)
 {
 	struct scsi_device *sdev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__shost_for_each_device(sdev, shost) {
 		if (channel == sdev_channel(sdev) &&
 		    target == sdev_id(sdev))
@@ -2285,6 +2411,7 @@ scsi_ioctl_reset(struct scsi_device *dev, int __user *arg)
 	unsigned long flags;
 	int error = 0, rtn, val;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!capable(CAP_SYS_ADMIN) || !capable(CAP_SYS_RAWIO))
 		return -EACCES;
 
@@ -2397,7 +2524,9 @@ bool scsi_get_sense_info_fld(const u8 *sense_buffer, int sb_len,
 	const u8 * ucp;
 
 	if (sb_len < 7)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	switch (sense_buffer[0] & 0x7f) {
 	case 0x70:
 	case 0x71:
diff --git a/drivers/scsi/scsi_ioctl.c b/drivers/scsi/scsi_ioctl.c
index 0a87549..4b7d6f8 100644
--- a/drivers/scsi/scsi_ioctl.c
+++ b/drivers/scsi/scsi_ioctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Changes:
  * Arnaldo Carvalho de Melo <acme@conectiva.com.br> 08/23/2000
@@ -45,7 +47,9 @@ static int ioctl_probe(struct Scsi_Host *host, void __user *buffer)
 
 	if (buffer) {
 		if (get_user(len, (unsigned int __user *) buffer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
 		if (host->hostt->info)
 			string = host->hostt->info(host);
@@ -102,10 +106,13 @@ static int ioctl_internal_command(struct scsi_device *sdev, char *cmd,
 
 	if ((driver_byte(result) & DRIVER_SENSE) &&
 	    (scsi_sense_valid(&sshdr))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (sshdr.sense_key) {
 		case ILLEGAL_REQUEST:
 			if (cmd[0] == ALLOW_MEDIUM_REMOVAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sdev->lockable = 0;
+}
 			else
 				sdev_printk(KERN_INFO, sdev,
 					    "ioctl_internal_command: "
@@ -119,6 +126,7 @@ static int ioctl_internal_command(struct scsi_device *sdev, char *cmd,
 			/* FALLTHROUGH */
 		case UNIT_ATTENTION:
 			if (sdev->removable) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sdev->changed = 1;
 				result = 0;	/* This is no longer considered an error */
 				break;
@@ -144,7 +152,9 @@ int scsi_set_medium_removal(struct scsi_device *sdev, char state)
 	int ret;
 
 	if (!sdev->removable || !sdev->lockable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	       return 0;
+}
 
 	scsi_cmd[0] = ALLOW_MEDIUM_REMOVAL;
 	scsi_cmd[1] = 0;
@@ -157,6 +167,7 @@ int scsi_set_medium_removal(struct scsi_device *sdev, char state)
 			IOCTL_NORMAL_TIMEOUT, NORMAL_RETRIES);
 	if (ret == 0)
 		sdev->locked = (state == SCSI_REMOVAL_PREVENT);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL(scsi_set_medium_removal);
@@ -173,6 +184,7 @@ EXPORT_SYMBOL(scsi_set_medium_removal);
  */
 static int scsi_ioctl_get_pci(struct scsi_device *sdev, void __user *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = scsi_get_device(sdev->host);
 	const char *name;
 
@@ -279,6 +291,7 @@ EXPORT_SYMBOL(scsi_ioctl);
 int scsi_ioctl_block_when_processing_errors(struct scsi_device *sdev, int cmd,
 		bool ndelay)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cmd == SG_SCSI_RESET && ndelay) {
 		if (scsi_host_in_recovery(sdev->host))
 			return -EAGAIN;
diff --git a/drivers/scsi/scsi_lib.c b/drivers/scsi/scsi_lib.c
index 0d3696e..957312f 100644
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 1999 Eric Youngdale
  * Copyright (C) 2014 Christoph Hellwig
@@ -73,7 +75,9 @@ int scsi_init_sense_cache(struct Scsi_Host *shost)
 
 	cache = scsi_select_sense_cache(shost->unchecked_isa_dma);
 	if (cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	mutex_lock(&scsi_sense_cache_mutex);
 	if (shost->unchecked_isa_dma) {
@@ -82,13 +86,17 @@ int scsi_init_sense_cache(struct Scsi_Host *shost)
 			SCSI_SENSE_BUFFERSIZE, 0,
 			SLAB_HWCACHE_ALIGN | SLAB_CACHE_DMA, NULL);
 		if (!scsi_sense_isadma_cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ENOMEM;
+}
 	} else {
 		scsi_sense_cache =
 			kmem_cache_create("scsi_sense_cache",
 			SCSI_SENSE_BUFFERSIZE, 0, SLAB_HWCACHE_ALIGN, NULL);
 		if (!scsi_sense_cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ENOMEM;
+}
 	}
 
 	mutex_unlock(&scsi_sense_cache_mutex);
@@ -143,6 +151,7 @@ static void scsi_mq_requeue_cmd(struct scsi_cmnd *cmd)
 	struct scsi_device *sdev = cmd->device;
 
 	if (cmd->request->rq_flags & RQF_DONTPREP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->request->rq_flags &= ~RQF_DONTPREP;
 		scsi_mq_uninit_cmd(cmd);
 	} else {
@@ -180,7 +189,9 @@ static void __scsi_queue_insert(struct scsi_cmnd *cmd, int reason, int unbusy)
 	 * active on the host/device.
 	 */
 	if (unbusy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scsi_device_unbusy(device);
+}
 
 	/*
 	 * Requeue this command.  It will go before all other commands
@@ -220,6 +231,7 @@ static void __scsi_queue_insert(struct scsi_cmnd *cmd, int reason, int unbusy)
  */
 void scsi_queue_insert(struct scsi_cmnd *cmd, int reason)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__scsi_queue_insert(cmd, reason, 1);
 }
 
@@ -256,7 +268,10 @@ int scsi_execute(struct scsi_device *sdev, const unsigned char *cmd,
 			data_direction == DMA_TO_DEVICE ?
 			REQ_OP_SCSI_OUT : REQ_OP_SCSI_IN, __GFP_RECLAIM);
 	if (IS_ERR(req))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rq = scsi_req(req);
 
 	if (bufflen &&	blk_rq_map_kern(sdev->request_queue, req,
@@ -282,12 +297,16 @@ int scsi_execute(struct scsi_device *sdev, const unsigned char *cmd,
 	 * and prevent security leaks by zeroing out the excess data.
 	 */
 	if (unlikely(rq->resid_len > 0 && rq->resid_len <= bufflen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(buffer + (bufflen - rq->resid_len), 0, rq->resid_len);
+}
 
 	if (resid)
 		*resid = rq->resid_len;
 	if (sense && rq->sense_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(sense, rq->sense, SCSI_SENSE_BUFFERSIZE);
+}
 	if (sshdr)
 		scsi_normalize_sense(rq->sense, rq->sense_len, sshdr);
 	ret = rq->result;
@@ -315,8 +334,10 @@ static void scsi_init_cmd_errh(struct scsi_cmnd *cmd)
 	scsi_set_resid(cmd, 0);
 	memset(cmd->sense_buffer, 0, SCSI_SENSE_BUFFERSIZE);
 	if (cmd->cmd_len == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->cmd_len = scsi_command_size(cmd->cmnd);
 }
+}
 
 /*
  * Decrement the host_busy counter and wake up the error handler if necessary.
@@ -339,6 +360,7 @@ static void scsi_dec_host_busy(struct Scsi_Host *shost)
 			scsi_eh_wakeup(shost);
 		spin_unlock_irqrestore(shost->host_lock, flags);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -350,13 +372,16 @@ void scsi_device_unbusy(struct scsi_device *sdev)
 	scsi_dec_host_busy(shost);
 
 	if (starget->can_queue > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_dec(&starget->target_busy);
+}
 
 	atomic_dec(&sdev->device_busy);
 }
 
 static void scsi_kick_queue(struct request_queue *q)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (q->mq_ops)
 		blk_mq_start_hw_queues(q);
 	else
@@ -377,6 +402,7 @@ static void scsi_single_lun_run(struct scsi_device *current_sdev)
 	struct scsi_target *starget = scsi_target(current_sdev);
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(shost->host_lock, flags);
 	starget->starget_sdev_user = NULL;
 	spin_unlock_irqrestore(shost->host_lock, flags);
@@ -411,6 +437,7 @@ static void scsi_single_lun_run(struct scsi_device *current_sdev)
 
 static inline bool scsi_device_is_busy(struct scsi_device *sdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atomic_read(&sdev->device_busy) >= sdev->queue_depth)
 		return true;
 	if (atomic_read(&sdev->device_blocked) > 0)
@@ -420,6 +447,7 @@ static inline bool scsi_device_is_busy(struct scsi_device *sdev)
 
 static inline bool scsi_target_is_busy(struct scsi_target *starget)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (starget->can_queue > 0) {
 		if (atomic_read(&starget->target_busy) >= starget->can_queue)
 			return true;
@@ -431,6 +459,7 @@ static inline bool scsi_target_is_busy(struct scsi_target *starget)
 
 static inline bool scsi_host_is_busy(struct Scsi_Host *shost)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (shost->can_queue > 0 &&
 	    atomic_read(&shost->host_busy) >= shost->can_queue)
 		return true;
@@ -447,6 +476,7 @@ static void scsi_starved_list_run(struct Scsi_Host *shost)
 	struct scsi_device *sdev;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(shost->host_lock, flags);
 	list_splice_init(&shost->starved_list, &starved_list);
 
@@ -517,12 +547,18 @@ static void scsi_run_queue(struct request_queue *q)
 	struct scsi_device *sdev = q->queuedata;
 
 	if (scsi_target(sdev)->single_lun)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scsi_single_lun_run(sdev);
+}
 	if (!list_empty(&sdev->host->starved_list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scsi_starved_list_run(sdev->host);
+}
 
 	if (q->mq_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		blk_mq_run_hw_queues(q, false);
+}
 	else
 		blk_run_queue(q);
 }
@@ -532,6 +568,7 @@ void scsi_requeue_run_queue(struct work_struct *work)
 	struct scsi_device *sdev;
 	struct request_queue *q;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev = container_of(work, struct scsi_device, requeue_work);
 	q = sdev->request_queue;
 	scsi_run_queue(q);
@@ -561,6 +598,7 @@ static void scsi_requeue_command(struct request_queue *q, struct scsi_cmnd *cmd)
 	struct request *req = cmd->request;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(q->queue_lock, flags);
 	blk_unprep_request(req);
 	req->special = NULL;
@@ -584,10 +622,13 @@ void scsi_run_host_queues(struct Scsi_Host *shost)
 static void scsi_uninit_cmd(struct scsi_cmnd *cmd)
 {
 	if (!blk_rq_is_passthrough(cmd->request)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct scsi_driver *drv = scsi_cmd_to_driver(cmd);
 
 		if (drv->uninit_command)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			drv->uninit_command(cmd);
+}
 	}
 }
 
@@ -596,7 +637,9 @@ static void scsi_mq_free_sgtables(struct scsi_cmnd *cmd)
 	struct scsi_data_buffer *sdb;
 
 	if (cmd->sdb.table.nents)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sg_free_table_chained(&cmd->sdb.table, true);
+}
 	if (cmd->request->next_rq) {
 		sdb = cmd->request->next_rq->special;
 		if (sdb)
@@ -608,6 +651,7 @@ static void scsi_mq_free_sgtables(struct scsi_cmnd *cmd)
 
 static void scsi_mq_uninit_cmd(struct scsi_cmnd *cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_mq_free_sgtables(cmd);
 	scsi_uninit_cmd(cmd);
 	scsi_del_cmd_from_list(cmd);
@@ -637,8 +681,10 @@ static void scsi_release_buffers(struct scsi_cmnd *cmd)
 	memset(&cmd->sdb, 0, sizeof(cmd->sdb));
 
 	if (scsi_prot_sg_count(cmd))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sg_free_table_chained(&cmd->prot_sdb->table, false);
 }
+}
 
 static void scsi_release_bidi_buffers(struct scsi_cmnd *cmd)
 {
@@ -652,12 +698,15 @@ static void scsi_release_bidi_buffers(struct scsi_cmnd *cmd)
 static bool scsi_end_request(struct request *req, blk_status_t error,
 		unsigned int bytes, unsigned int bidi_bytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cmnd *cmd = blk_mq_rq_to_pdu(req);
 	struct scsi_device *sdev = cmd->device;
 	struct request_queue *q = sdev->request_queue;
 
 	if (blk_update_request(req, error, bytes))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	/* Bidi request must be completed as a whole */
 	if (unlikely(bidi_bytes) &&
@@ -668,6 +717,7 @@ static bool scsi_end_request(struct request *req, blk_status_t error,
 		add_disk_randomness(req->rq_disk);
 
 	if (!blk_rq_is_scsi(req)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON_ONCE(!(cmd->flags & SCMD_INITIALIZED));
 		cmd->flags &= ~SCMD_INITIALIZED;
 	}
@@ -693,7 +743,9 @@ static bool scsi_end_request(struct request *req, blk_status_t error,
 		unsigned long flags;
 
 		if (bidi_bytes)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			scsi_release_bidi_buffers(cmd);
+}
 		scsi_release_buffers(cmd);
 		scsi_put_command(cmd);
 
@@ -848,8 +900,12 @@ void scsi_io_completion(struct scsi_cmnd *cmd, unsigned int good_bytes)
 		 */
 		if ((sshdr.asc == 0x0) && (sshdr.ascq == 0x1d))
 			;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (!(req->rq_flags & RQF_QUIET))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			scsi_print_sense(cmd);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = 0;
 		/* for passthrough error may be set */
 		error = BLK_STS_OK;
@@ -869,7 +925,10 @@ void scsi_io_completion(struct scsi_cmnd *cmd, unsigned int good_bytes)
 	 */
 	if (error && scsi_noretry_cmd(cmd)) {
 		if (scsi_end_request(req, error, blk_rq_bytes(req), 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BUG();
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -880,6 +939,7 @@ void scsi_io_completion(struct scsi_cmnd *cmd, unsigned int good_bytes)
 	if (result == 0)
 		goto requeue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = __scsi_error_from_host_byte(cmd, result);
 
 	if (host_byte(result) == DID_RESET) {
@@ -889,6 +949,7 @@ void scsi_io_completion(struct scsi_cmnd *cmd, unsigned int good_bytes)
 		 */
 		action = ACTION_RETRY;
 	} else if (sense_valid && !sense_deferred) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (sshdr.sense_key) {
 		case UNIT_ATTENTION:
 			if (cmd->device->removable) {
@@ -923,25 +984,32 @@ void scsi_io_completion(struct scsi_cmnd *cmd, unsigned int good_bytes)
 				cmd->device->use_10_for_rw = 0;
 				action = ACTION_REPREP;
 			} else if (sshdr.asc == 0x10) /* DIX */ {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				action = ACTION_FAIL;
 				error = BLK_STS_PROTECTION;
 			/* INVALID COMMAND OPCODE or INVALID FIELD IN CDB */
 			} else if (sshdr.asc == 0x20 || sshdr.asc == 0x24) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				action = ACTION_FAIL;
 				error = BLK_STS_TARGET;
 			} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				action = ACTION_FAIL;
+}
 			break;
 		case ABORTED_COMMAND:
 			action = ACTION_FAIL;
 			if (sshdr.asc == 0x10) /* DIF */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				error = BLK_STS_PROTECTION;
+}
 			break;
 		case NOT_READY:
 			/* If the device is in the process of becoming
 			 * ready, or has a temporary blockage, retry.
 			 */
 			if (sshdr.asc == 0x04) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				switch (sshdr.ascq) {
 				case 0x01: /* becoming ready */
 				case 0x04: /* format in progress */
@@ -958,7 +1026,9 @@ void scsi_io_completion(struct scsi_cmnd *cmd, unsigned int good_bytes)
 					break;
 				}
 			} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				action = ACTION_FAIL;
+}
 			break;
 		case VOLUME_OVERFLOW:
 			/* See SSC3rXX or current. */
@@ -969,12 +1039,16 @@ void scsi_io_completion(struct scsi_cmnd *cmd, unsigned int good_bytes)
 			break;
 		}
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		action = ACTION_FAIL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (action != ACTION_FAIL &&
 	    time_before(cmd->jiffies_at_alloc + wait_for, jiffies))
 		action = ACTION_FAIL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (action) {
 	case ACTION_FAIL:
 		/* Give up and fail the remainder of the request */
@@ -984,22 +1058,31 @@ void scsi_io_completion(struct scsi_cmnd *cmd, unsigned int good_bytes)
 					DEFAULT_RATELIMIT_BURST);
 
 			if (unlikely(scsi_logging_level))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				level = SCSI_LOG_LEVEL(SCSI_LOG_MLCOMPLETE_SHIFT,
 						       SCSI_LOG_MLCOMPLETE_BITS);
+}
 
 			/*
 			 * if logging is enabled the failure will be printed
 			 * in scsi_log_completion(), so avoid duplicate messages
 			 */
 			if (!level && __ratelimit(&_rs)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				scsi_print_result(cmd, NULL, FAILED);
 				if (driver_byte(result) & DRIVER_SENSE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					scsi_print_sense(cmd);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				scsi_print_command(cmd);
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!scsi_end_request(req, error, blk_rq_err_bytes(req), 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 		/*FALLTHRU*/
 	case ACTION_REPREP:
 	requeue:
@@ -1007,8 +1090,10 @@ void scsi_io_completion(struct scsi_cmnd *cmd, unsigned int good_bytes)
 		 * A new command will be prepared and issued.
 		 */
 		if (q->mq_ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			scsi_mq_requeue_cmd(cmd);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			scsi_release_buffers(cmd);
 			scsi_requeue_command(q, cmd);
 		}
@@ -1072,17 +1157,21 @@ int scsi_init_io(struct scsi_cmnd *cmd)
 		goto err_exit;
 
 	if (blk_bidi_rq(rq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!rq->q->mq_ops) {
 			struct scsi_data_buffer *bidi_sdb =
 				kmem_cache_zalloc(scsi_sdb_cache, GFP_ATOMIC);
 			if (!bidi_sdb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				error = BLKPREP_DEFER;
 				goto err_exit;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rq->next_rq->special = bidi_sdb;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = scsi_init_sgtable(rq->next_rq, rq->next_rq->special);
 		if (error)
 			goto err_exit;
@@ -1103,33 +1192,43 @@ int scsi_init_io(struct scsi_cmnd *cmd)
 			goto err_exit;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ivecs = blk_rq_count_integrity_sg(rq->q, rq->bio);
 
 		if (sg_alloc_table_chained(&prot_sdb->table, ivecs,
 				prot_sdb->table.sgl)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = BLKPREP_DEFER;
 			goto err_exit;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = blk_rq_map_integrity_sg(rq->q, rq->bio,
 						prot_sdb->table.sgl);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(unlikely(count > ivecs));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(unlikely(count > queue_max_integrity_segments(rq->q)));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->prot_sdb = prot_sdb;
 		cmd->prot_sdb->table.nents = count;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return BLKPREP_OK;
 err_exit:
 	if (is_mq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scsi_mq_free_sgtables(cmd);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scsi_release_buffers(cmd);
 		cmd->request->special = NULL;
 		scsi_put_command(cmd);
 		put_device(&sdev->sdev_gendev);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 EXPORT_SYMBOL(scsi_init_io);
@@ -1147,6 +1246,7 @@ EXPORT_SYMBOL(scsi_init_io);
  */
 void scsi_initialize_rq(struct request *rq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cmnd *cmd = blk_mq_rq_to_pdu(rq);
 
 	scsi_req_init(&cmd->req);
@@ -1163,7 +1263,9 @@ void scsi_add_cmd_to_list(struct scsi_cmnd *cmd)
 	unsigned long flags;
 
 	if (shost->use_cmd_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irqsave(&sdev->list_lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_add_tail(&cmd->list, &sdev->cmd_list);
 		spin_unlock_irqrestore(&sdev->list_lock, flags);
 	}
@@ -1177,8 +1279,11 @@ void scsi_del_cmd_from_list(struct scsi_cmnd *cmd)
 	unsigned long flags;
 
 	if (shost->use_cmd_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irqsave(&sdev->list_lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(list_empty(&cmd->list));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del_init(&cmd->list);
 		spin_unlock_irqrestore(&sdev->list_lock, flags);
 	}
@@ -1195,6 +1300,7 @@ void scsi_init_command(struct scsi_device *dev, struct scsi_cmnd *cmd)
 	int retries;
 
 	if (!blk_rq_is_scsi(rq) && !(flags & SCMD_INITIALIZED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= SCMD_INITIALIZED;
 		scsi_initialize_rq(rq);
 	}
@@ -1218,6 +1324,7 @@ void scsi_init_command(struct scsi_device *dev, struct scsi_cmnd *cmd)
 
 static int scsi_setup_scsi_cmnd(struct scsi_device *sdev, struct request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cmnd *cmd = blk_mq_rq_to_pdu(req);
 
 	/*
@@ -1229,7 +1336,9 @@ static int scsi_setup_scsi_cmnd(struct scsi_device *sdev, struct request *req)
 	if (req->bio) {
 		int ret = scsi_init_io(cmd);
 		if (unlikely(ret))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
+}
 	} else {
 		BUG_ON(blk_rq_bytes(req));
 
@@ -1249,6 +1358,7 @@ static int scsi_setup_scsi_cmnd(struct scsi_device *sdev, struct request *req)
  */
 static int scsi_setup_fs_cmnd(struct scsi_device *sdev, struct request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cmnd *cmd = blk_mq_rq_to_pdu(req);
 
 	if (unlikely(sdev->handler && sdev->handler->prep_fn)) {
@@ -1264,12 +1374,15 @@ static int scsi_setup_fs_cmnd(struct scsi_device *sdev, struct request *req)
 
 static int scsi_setup_cmnd(struct scsi_device *sdev, struct request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cmnd *cmd = blk_mq_rq_to_pdu(req);
 
 	if (!blk_rq_bytes(req))
 		cmd->sc_data_direction = DMA_NONE;
 	else if (rq_data_dir(req) == WRITE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->sc_data_direction = DMA_TO_DEVICE;
+}
 	else
 		cmd->sc_data_direction = DMA_FROM_DEVICE;
 
@@ -1319,7 +1432,9 @@ scsi_prep_state_check(struct scsi_device *sdev, struct request *req)
 			 * If the devices is blocked we defer normal commands.
 			 */
 			if (!(req->rq_flags & RQF_PREEMPT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = BLKPREP_DEFER;
+}
 			break;
 		default:
 			/*
@@ -1328,7 +1443,9 @@ scsi_prep_state_check(struct scsi_device *sdev, struct request *req)
 			 * command is not allowed.
 			 */
 			if (!(req->rq_flags & RQF_PREEMPT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = BLKPREP_KILL;
+}
 			break;
 		}
 	}
@@ -1360,7 +1477,9 @@ scsi_prep_return(struct request_queue *q, struct request *req, int ret)
 		 * shortly.
 		 */
 		if (atomic_read(&sdev->device_busy) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			blk_delay_queue(q, SCSI_QUEUE_DELAY);
+}
 		break;
 	default:
 		req->rq_flags |= RQF_DONTPREP;
@@ -1382,6 +1501,7 @@ static int scsi_prep_fn(struct request_queue *q, struct request *req)
 	if (!req->special) {
 		/* Bail if we can't get a reference to the device */
 		if (unlikely(!get_device(&sdev->sdev_gendev))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = BLKPREP_DEFER;
 			goto out;
 		}
@@ -1417,6 +1537,7 @@ static inline int scsi_dev_queue_ready(struct request_queue *q,
 
 	busy = atomic_inc_return(&sdev->device_busy) - 1;
 	if (atomic_read(&sdev->device_blocked)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (busy)
 			goto out_dec;
 
@@ -1428,7 +1549,9 @@ static inline int scsi_dev_queue_ready(struct request_queue *q,
 			 * For the MQ case we take care of this in the caller.
 			 */
 			if (!q->mq_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				blk_delay_queue(q, SCSI_QUEUE_DELAY);
+}
 			goto out_dec;
 		}
 		SCSI_LOG_MLQUEUE(3, sdev_printk(KERN_INFO, sdev,
@@ -1438,6 +1561,7 @@ static inline int scsi_dev_queue_ready(struct request_queue *q,
 	if (busy >= sdev->queue_depth)
 		goto out_dec;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 out_dec:
 	atomic_dec(&sdev->device_busy);
@@ -1451,25 +1575,33 @@ static inline int scsi_dev_queue_ready(struct request_queue *q,
 static inline int scsi_target_queue_ready(struct Scsi_Host *shost,
 					   struct scsi_device *sdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_target *starget = scsi_target(sdev);
 	unsigned int busy;
 
 	if (starget->single_lun) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irq(shost->host_lock);
 		if (starget->starget_sdev_user &&
 		    starget->starget_sdev_user != sdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irq(shost->host_lock);
 			return 0;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		starget->starget_sdev_user = sdev;
 		spin_unlock_irq(shost->host_lock);
 	}
 
 	if (starget->can_queue <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	busy = atomic_inc_return(&starget->target_busy) - 1;
 	if (atomic_read(&starget->target_blocked) > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (busy)
 			goto starved;
 
@@ -1483,9 +1615,11 @@ static inline int scsi_target_queue_ready(struct Scsi_Host *shost,
 				 "unblocking target at zero depth\n"));
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (busy >= starget->can_queue)
 		goto starved;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 
 starved:
@@ -1494,7 +1628,10 @@ static inline int scsi_target_queue_ready(struct Scsi_Host *shost,
 	spin_unlock_irq(shost->host_lock);
 out_dec:
 	if (starget->can_queue > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_dec(&starget->target_busy);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1510,10 +1647,13 @@ static inline int scsi_host_queue_ready(struct request_queue *q,
 	unsigned int busy;
 
 	if (scsi_host_in_recovery(shost))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	busy = atomic_inc_return(&shost->host_busy) - 1;
 	if (atomic_read(&shost->host_blocked) > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (busy)
 			goto starved;
 
@@ -1535,18 +1675,26 @@ static inline int scsi_host_queue_ready(struct request_queue *q,
 
 	/* We're OK to process the command, so we can't be starved */
 	if (!list_empty(&sdev->starved_entry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irq(shost->host_lock);
 		if (!list_empty(&sdev->starved_entry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			list_del_init(&sdev->starved_entry);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irq(shost->host_lock);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 
 starved:
 	spin_lock_irq(shost->host_lock);
 	if (list_empty(&sdev->starved_entry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_add_tail(&sdev->starved_entry, &shost->starved_list);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(shost->host_lock);
 out_dec:
 	scsi_dec_host_busy(shost);
@@ -1570,6 +1718,7 @@ static int scsi_lld_busy(struct request_queue *q)
 	struct scsi_device *sdev = q->queuedata;
 	struct Scsi_Host *shost;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (blk_queue_dying(q))
 		return 0;
 
@@ -1592,6 +1741,7 @@ static int scsi_lld_busy(struct request_queue *q)
  */
 static void scsi_kill_request(struct request *req, struct request_queue *q)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cmnd *cmd = blk_mq_rq_to_pdu(req);
 	struct scsi_device *sdev;
 	struct scsi_target *starget;
@@ -1623,6 +1773,7 @@ static void scsi_kill_request(struct request *req, struct request_queue *q)
 
 static void scsi_softirq_done(struct request *rq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cmnd *cmd = blk_mq_rq_to_pdu(rq);
 	unsigned long wait_for = (cmd->allowed + 1) * rq->timeout;
 	int disposition;
@@ -1631,17 +1782,21 @@ static void scsi_softirq_done(struct request *rq)
 
 	atomic_inc(&cmd->device->iodone_cnt);
 	if (cmd->result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_inc(&cmd->device->ioerr_cnt);
+}
 
 	disposition = scsi_decide_disposition(cmd);
 	if (disposition != SUCCESS &&
 	    time_before(cmd->jiffies_at_alloc + wait_for, jiffies)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev_printk(KERN_ERR, cmd->device,
 			    "timing out command, waited %lus\n",
 			    wait_for/HZ);
 		disposition = SUCCESS;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_log_completion(cmd, disposition);
 
 	switch (disposition) {
@@ -1694,6 +1849,7 @@ static int scsi_dispatch_cmd(struct scsi_cmnd *cmd)
 		 */
 		SCSI_LOG_MLQUEUE(3, scmd_printk(KERN_INFO, cmd,
 			"queuecommand : device blocked\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return SCSI_MLQUEUE_DEVICE_BUSY;
 	}
 
@@ -1702,6 +1858,7 @@ static int scsi_dispatch_cmd(struct scsi_cmnd *cmd)
 		cmd->cmnd[1] = (cmd->cmnd[1] & 0x1f) |
 			       (cmd->device->lun << 5 & 0xe0);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_log_send(cmd);
 
 	/*
@@ -1713,11 +1870,13 @@ static int scsi_dispatch_cmd(struct scsi_cmnd *cmd)
 			       "queuecommand : command too long. "
 			       "cdb_size=%d host->max_cmd_len=%d\n",
 			       cmd->cmd_len, cmd->device->host->max_cmd_len));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->result = (DID_ABORT << 16);
 		goto done;
 	}
 
 	if (unlikely(host->shost_state == SHOST_DEL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->result = (DID_NO_CONNECT << 16);
 		goto done;
 
@@ -1726,6 +1885,7 @@ static int scsi_dispatch_cmd(struct scsi_cmnd *cmd)
 	trace_scsi_dispatch_cmd_start(cmd);
 	rtn = host->hostt->queuecommand(host, cmd);
 	if (rtn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		trace_scsi_dispatch_cmd_error(cmd, rtn);
 		if (rtn != SCSI_MLQUEUE_DEVICE_BUSY &&
 		    rtn != SCSI_MLQUEUE_TARGET_BUSY)
@@ -1735,6 +1895,7 @@ static int scsi_dispatch_cmd(struct scsi_cmnd *cmd)
 			"queuecommand : request rejected\n"));
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rtn;
  done:
 	cmd->scsi_done(cmd);
@@ -1795,6 +1956,7 @@ static void scsi_request_fn(struct request_queue *q)
 			break;
 
 		if (unlikely(!scsi_device_online(sdev))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sdev_printk(KERN_ERR, sdev,
 				    "rejecting I/O to offline device\n");
 			scsi_kill_request(req, q);
@@ -1808,16 +1970,20 @@ static void scsi_request_fn(struct request_queue *q)
 		 * Remove the request from the request list.
 		 */
 		if (!(blk_queue_tagged(q) && !blk_queue_start_tag(q, req)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			blk_start_request(req);
+}
 
 		spin_unlock_irq(q->queue_lock);
 		cmd = blk_mq_rq_to_pdu(req);
 		if (cmd != req->special) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_CRIT "impossible request in %s.\n"
 					 "please mail a stack trace to "
 					 "linux-scsi@vger.kernel.org\n",
 					 __func__);
 			blk_dump_rq_flags(req, "foo");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BUG();
 		}
 
@@ -1830,10 +1996,13 @@ static void scsi_request_fn(struct request_queue *q)
 		 * a run when a tag is freed.
 		 */
 		if (blk_queue_tagged(q) && !(req->rq_flags & RQF_QUEUED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock_irq(shost->host_lock);
 			if (list_empty(&sdev->starved_entry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				list_add_tail(&sdev->starved_entry,
 					      &shost->starved_list);
+}
 			spin_unlock_irq(shost->host_lock);
 			goto not_ready;
 		}
@@ -1845,7 +2014,9 @@ static void scsi_request_fn(struct request_queue *q)
 			goto host_not_ready;
 	
 		if (sdev->simple_tags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cmd->flags |= SCMD_TAGGED;
+}
 		else
 			cmd->flags &= ~SCMD_TAGGED;
 
@@ -1861,6 +2032,7 @@ static void scsi_request_fn(struct request_queue *q)
 		cmd->scsi_done = scsi_done;
 		rtn = scsi_dispatch_cmd(cmd);
 		if (rtn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			scsi_queue_insert(cmd, rtn);
 			spin_lock_irq(q->queue_lock);
 			goto out_delay;
@@ -1868,11 +2040,14 @@ static void scsi_request_fn(struct request_queue *q)
 		spin_lock_irq(q->queue_lock);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return;
 
  host_not_ready:
 	if (scsi_target(sdev)->can_queue > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_dec(&scsi_target(sdev)->target_busy);
+}
  not_ready:
 	/*
 	 * lock q, handle tag, requeue req, and decrement device_busy. We
@@ -1887,11 +2062,14 @@ static void scsi_request_fn(struct request_queue *q)
 	atomic_dec(&sdev->device_busy);
 out_delay:
 	if (!atomic_read(&sdev->device_busy) && !scsi_device_blocked(sdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		blk_delay_queue(q, SCSI_QUEUE_DELAY);
 }
+}
 
 static inline blk_status_t prep_to_mq(int ret)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (ret) {
 	case BLKPREP_OK:
 		return BLK_STS_OK;
@@ -1905,12 +2083,14 @@ static inline blk_status_t prep_to_mq(int ret)
 /* Size in bytes of the sg-list stored in the scsi-mq command-private data. */
 static unsigned int scsi_mq_sgl_size(struct Scsi_Host *shost)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return min_t(unsigned int, shost->sg_tablesize, SG_CHUNK_SIZE) *
 		sizeof(struct scatterlist);
 }
 
 static int scsi_mq_prep_fn(struct request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cmnd *cmd = blk_mq_rq_to_pdu(req);
 	struct scsi_device *sdev = req->q->queuedata;
 	struct Scsi_Host *shost = sdev->host;
@@ -1953,6 +2133,7 @@ static int scsi_mq_prep_fn(struct request *req)
 
 static void scsi_mq_done(struct scsi_cmnd *cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	trace_scsi_dispatch_cmd_done(cmd);
 	blk_mq_complete_request(cmd->request);
 }
@@ -1972,6 +2153,7 @@ static blk_status_t scsi_queue_rq(struct blk_mq_hw_ctx *hctx,
 	if (ret != BLK_STS_OK)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = BLK_STS_RESOURCE;
 	if (!get_device(&sdev->sdev_gendev))
 		goto out;
@@ -2043,6 +2225,7 @@ static blk_status_t scsi_queue_rq(struct blk_mq_hw_ctx *hctx,
 static enum blk_eh_timer_return scsi_timeout(struct request *req,
 		bool reserved)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (reserved)
 		return BLK_EH_RESET_TIMER;
 	return scsi_times_out(req);
@@ -2057,7 +2240,9 @@ static int scsi_mq_init_request(struct blk_mq_tag_set *set, struct request *rq,
 	struct scatterlist *sg;
 
 	if (unchecked_isa_dma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->flags |= SCMD_UNCHECKED_ISA_DMA;
+}
 	cmd->sense_buffer = scsi_alloc_sense_buffer(unchecked_isa_dma,
 						    GFP_KERNEL, numa_node);
 	if (!cmd->sense_buffer)
@@ -2076,6 +2261,7 @@ static int scsi_mq_init_request(struct blk_mq_tag_set *set, struct request *rq,
 static void scsi_mq_exit_request(struct blk_mq_tag_set *set, struct request *rq,
 				 unsigned int hctx_idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cmnd *cmd = blk_mq_rq_to_pdu(rq);
 
 	scsi_free_sense_buffer(cmd->flags & SCMD_UNCHECKED_ISA_DMA,
@@ -2084,6 +2270,7 @@ static void scsi_mq_exit_request(struct blk_mq_tag_set *set, struct request *rq,
 
 static int scsi_map_queues(struct blk_mq_tag_set *set)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = container_of(set, struct Scsi_Host, tag_set);
 
 	if (shost->hostt->map_queues)
@@ -2097,18 +2284,26 @@ static u64 scsi_calculate_bounce_limit(struct Scsi_Host *shost)
 	u64 bounce_limit = 0xffffffff;
 
 	if (shost->unchecked_isa_dma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return BLK_BOUNCE_ISA;
+}
 	/*
 	 * Platforms with virtual-DMA translation
 	 * hardware have no practical limit.
 	 */
 	if (!PCI_DMA_BUS_IS_PHYS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return BLK_BOUNCE_ANY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	host_dev = scsi_get_device(shost);
 	if (host_dev && host_dev->dma_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bounce_limit = (u64)dma_max_pfn(host_dev) << PAGE_SHIFT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bounce_limit;
 }
 
@@ -2128,7 +2323,9 @@ void __scsi_init_queue(struct Scsi_Host *shost, struct request_queue *q)
 		shost->sg_prot_tablesize =
 			min_not_zero(shost->sg_prot_tablesize,
 				     (unsigned short)SCSI_MAX_PROT_SG_SEGMENTS);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(shost->sg_prot_tablesize < shost->sg_tablesize);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		blk_queue_max_integrity_segments(q, shost->sg_prot_tablesize);
 	}
 
@@ -2140,7 +2337,9 @@ void __scsi_init_queue(struct Scsi_Host *shost, struct request_queue *q)
 	blk_queue_max_segment_size(q, dma_get_max_seg_size(dev));
 
 	if (!shost->use_clustering)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		q->limits.cluster = 0;
+}
 
 	/*
 	 * Set a reasonable default alignment:  The larger of 32-byte (dword),
@@ -2163,7 +2362,9 @@ static int scsi_old_init_rq(struct request_queue *q, struct request *rq,
 	memset(cmd, 0, sizeof(*cmd));
 
 	if (unchecked_isa_dma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->flags |= SCMD_UNCHECKED_ISA_DMA;
+}
 	cmd->sense_buffer = scsi_alloc_sense_buffer(unchecked_isa_dma, gfp,
 						    NUMA_NO_NODE);
 	if (!cmd->sense_buffer)
@@ -2171,11 +2372,13 @@ static int scsi_old_init_rq(struct request_queue *q, struct request *rq,
 	cmd->req.sense = cmd->sense_buffer;
 
 	if (scsi_host_get_prot(shost) >= SHOST_DIX_TYPE0_PROTECTION) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd->prot_sdb = kmem_cache_zalloc(scsi_sdb_cache, gfp);
 		if (!cmd->prot_sdb)
 			goto fail_free_sense;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 fail_free_sense:
@@ -2186,10 +2389,13 @@ static int scsi_old_init_rq(struct request_queue *q, struct request *rq,
 
 static void scsi_old_exit_rq(struct request_queue *q, struct request *rq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cmnd *cmd = blk_mq_rq_to_pdu(rq);
 
 	if (cmd->prot_sdb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kmem_cache_free(scsi_sdb_cache, cmd->prot_sdb);
+}
 	scsi_free_sense_buffer(cmd->flags & SCMD_UNCHECKED_ISA_DMA,
 			       cmd->sense_buffer);
 }
@@ -2201,7 +2407,9 @@ struct request_queue *scsi_old_alloc_queue(struct scsi_device *sdev)
 
 	q = blk_alloc_queue_node(GFP_KERNEL, NUMA_NO_NODE);
 	if (!q)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	q->cmd_size = sizeof(struct scsi_cmnd) + shost->hostt->cmd_size;
 	q->rq_alloc_data = shost;
 	q->request_fn = scsi_request_fn;
@@ -2210,6 +2418,7 @@ struct request_queue *scsi_old_alloc_queue(struct scsi_device *sdev)
 	q->initialize_rq_fn = scsi_initialize_rq;
 
 	if (blk_init_allocated_queue(q) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		blk_cleanup_queue(q);
 		return NULL;
 	}
@@ -2238,6 +2447,7 @@ static const struct blk_mq_ops scsi_mq_ops = {
 
 struct request_queue *scsi_mq_alloc_queue(struct scsi_device *sdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev->request_queue = blk_mq_init_queue(&sdev->host->tag_set);
 	if (IS_ERR(sdev->request_queue))
 		return NULL;
@@ -2254,7 +2464,9 @@ int scsi_mq_setup_tags(struct Scsi_Host *shost)
 	sgl_size = scsi_mq_sgl_size(shost);
 	cmd_size = sizeof(struct scsi_cmnd) + shost->hostt->cmd_size + sgl_size;
 	if (scsi_host_get_prot(shost))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd_size += sizeof(struct scsi_data_buffer) + sgl_size;
+}
 
 	memset(&shost->tag_set, 0, sizeof(shost->tag_set));
 	shost->tag_set.ops = &scsi_mq_ops;
@@ -2272,6 +2484,7 @@ int scsi_mq_setup_tags(struct Scsi_Host *shost)
 
 void scsi_mq_destroy_tags(struct Scsi_Host *shost)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	blk_mq_free_tag_set(&shost->tag_set);
 }
 
@@ -2287,6 +2500,7 @@ struct scsi_device *scsi_device_from_queue(struct request_queue *q)
 	struct scsi_device *sdev = NULL;
 
 	if (q->mq_ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (q->mq_ops == &scsi_mq_ops)
 			sdev = q->queuedata;
 	} else if (q->request_fn == scsi_request_fn)
@@ -2316,6 +2530,7 @@ EXPORT_SYMBOL_GPL(scsi_device_from_queue);
  */
 void scsi_block_requests(struct Scsi_Host *shost)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	shost->host_self_blocked = 1;
 }
 EXPORT_SYMBOL(scsi_block_requests);
@@ -2342,6 +2557,7 @@ EXPORT_SYMBOL(scsi_block_requests);
  */
 void scsi_unblock_requests(struct Scsi_Host *shost)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	shost->host_self_blocked = 0;
 	scsi_run_host_queues(shost);
 }
@@ -2353,15 +2569,18 @@ int __init scsi_init_queue(void)
 					   sizeof(struct scsi_data_buffer),
 					   0, 0, NULL);
 	if (!scsi_sdb_cache) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "SCSI: can't init scsi sdb cache\n");
 		return -ENOMEM;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 void scsi_exit_queue(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_destroy(scsi_sense_cache);
 	kmem_cache_destroy(scsi_sense_isadma_cache);
 	kmem_cache_destroy(scsi_sdb_cache);
@@ -2395,6 +2614,7 @@ scsi_mode_select(struct scsi_device *sdev, int pf, int sp, int modepage,
 	int ret;
 
 	memset(cmd, 0, sizeof(cmd));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cmd[1] = (pf ? 0x10 : 0) | (sp ? 0x01 : 0);
 
 	if (sdev->use_10_for_ms) {
@@ -2479,22 +2699,30 @@ scsi_mode_sense(struct scsi_device *sdev, int dbd, int modepage,
 
 	/* caller might not be interested in sense, but we need it */
 	if (!sshdr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sshdr = &my_sshdr;
+}
 
  retry:
 	use_10_for_ms = sdev->use_10_for_ms;
 
 	if (use_10_for_ms) {
 		if (len < 8)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			len = 8;
+}
 
 		cmd[0] = MODE_SENSE_10;
 		cmd[8] = len;
 		header_length = 8;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (len < 4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			len = 4;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd[0] = MODE_SENSE;
 		cmd[4] = len;
 		header_length = 4;
@@ -2512,7 +2740,9 @@ scsi_mode_sense(struct scsi_device *sdev, int dbd, int modepage,
 
 	if (use_10_for_ms && !scsi_status_is_good(result) &&
 	    (driver_byte(result) & DRIVER_SENSE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (scsi_sense_valid(sshdr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if ((sshdr->sense_key == ILLEGAL_REQUEST) &&
 			    (sshdr->asc == 0x20) && (sshdr->ascq == 0)) {
 				/* 
@@ -2542,6 +2772,7 @@ scsi_mode_sense(struct scsi_device *sdev, int dbd, int modepage,
 			data->block_descriptor_length = buffer[6]*256
 				+ buffer[7];
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			data->length = buffer[0] + 1;
 			data->medium_type = buffer[1];
 			data->device_specific = buffer[2];
@@ -2551,6 +2782,7 @@ scsi_mode_sense(struct scsi_device *sdev, int dbd, int modepage,
 	} else if ((status_byte(result) == CHECK_CONDITION) &&
 		   scsi_sense_valid(sshdr) &&
 		   sshdr->sense_key == UNIT_ATTENTION && retry_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retry_count--;
 		goto retry;
 	}
@@ -2606,7 +2838,9 @@ scsi_device_set_state(struct scsi_device *sdev, enum scsi_device_state state)
 	enum scsi_device_state oldstate = sdev->sdev_state;
 
 	if (state == oldstate)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	switch (state) {
 	case SDEV_CREATED:
@@ -2713,6 +2947,7 @@ scsi_device_set_state(struct scsi_device *sdev, enum scsi_device_state state)
 					    scsi_device_state_name(oldstate),
 					    scsi_device_state_name(state))
 				);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EINVAL;
 }
 EXPORT_SYMBOL(scsi_device_set_state);
@@ -2775,6 +3010,7 @@ void scsi_evt_thread(struct work_struct *work)
 	enum scsi_device_event evt_type;
 	LIST_HEAD(event_list);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev = container_of(work, struct scsi_device, event_work);
 
 	for (evt_type = SDEV_EVT_FIRST; evt_type <= SDEV_EVT_LAST; evt_type++)
@@ -2823,6 +3059,7 @@ void sdev_evt_send(struct scsi_device *sdev, struct scsi_event *evt)
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&sdev->list_lock, flags);
 	list_add_tail(&evt->node, &sdev->event_list);
 	schedule_work(&sdev->event_work);
@@ -2840,6 +3077,7 @@ EXPORT_SYMBOL_GPL(sdev_evt_send);
 struct scsi_event *sdev_evt_alloc(enum scsi_device_event evt_type,
 				  gfp_t gfpflags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_event *evt = kzalloc(sizeof(struct scsi_event), gfpflags);
 	if (!evt)
 		return NULL;
@@ -2876,6 +3114,7 @@ EXPORT_SYMBOL_GPL(sdev_evt_alloc);
 void sdev_evt_send_simple(struct scsi_device *sdev,
 			  enum scsi_device_event evt_type, gfp_t gfpflags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_event *evt = sdev_evt_alloc(evt_type, gfpflags);
 	if (!evt) {
 		sdev_printk(KERN_ERR, sdev, "event %d eaten due to OOM\n",
@@ -2896,6 +3135,7 @@ static int scsi_request_fn_active(struct scsi_device *sdev)
 	struct request_queue *q = sdev->request_queue;
 	int request_fn_active;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(sdev->host->use_blk_mq);
 
 	spin_lock_irq(q->queue_lock);
@@ -2914,6 +3154,7 @@ static int scsi_request_fn_active(struct scsi_device *sdev)
  */
 static void scsi_wait_for_queuecommand(struct scsi_device *sdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(sdev->host->use_blk_mq);
 
 	while (scsi_request_fn_active(sdev))
@@ -2945,7 +3186,9 @@ scsi_device_quiesce(struct scsi_device *sdev)
 	mutex_unlock(&sdev->state_mutex);
 
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	scsi_run_queue(sdev->request_queue);
 	while (atomic_read(&sdev->device_busy)) {
@@ -2982,12 +3225,14 @@ EXPORT_SYMBOL(scsi_device_resume);
 static void
 device_quiesce_fn(struct scsi_device *sdev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_device_quiesce(sdev);
 }
 
 void
 scsi_target_quiesce(struct scsi_target *starget)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	starget_for_each_device(starget, NULL, device_quiesce_fn);
 }
 EXPORT_SYMBOL(scsi_target_quiesce);
@@ -2995,12 +3240,14 @@ EXPORT_SYMBOL(scsi_target_quiesce);
 static void
 device_resume_fn(struct scsi_device *sdev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_device_resume(sdev);
 }
 
 void
 scsi_target_resume(struct scsi_target *starget)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	starget_for_each_device(starget, NULL, device_resume_fn);
 }
 EXPORT_SYMBOL(scsi_target_resume);
@@ -3027,6 +3274,7 @@ int scsi_internal_device_block_nowait(struct scsi_device *sdev)
 
 	err = scsi_device_set_state(sdev, SDEV_BLOCK);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = scsi_device_set_state(sdev, SDEV_CREATED_BLOCK);
 
 		if (err)
@@ -3077,6 +3325,7 @@ static int scsi_internal_device_block(struct scsi_device *sdev)
 	mutex_lock(&sdev->state_mutex);
 	err = scsi_internal_device_block_nowait(sdev);
 	if (err == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (q->mq_ops)
 			blk_mq_quiesce_queue(q);
 		else
@@ -3093,6 +3342,7 @@ void scsi_start_queue(struct scsi_device *sdev)
 	unsigned long flags;
 
 	if (q->mq_ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		blk_mq_unquiesce_queue(q);
 	} else {
 		spin_lock_irqsave(q->queue_lock, flags);
@@ -3176,12 +3426,14 @@ static int scsi_internal_device_unblock(struct scsi_device *sdev,
 static void
 device_block(struct scsi_device *sdev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_internal_device_block(sdev);
 }
 
 static int
 target_block(struct device *dev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (scsi_is_target_device(dev))
 		starget_for_each_device(to_scsi_target(dev), NULL,
 					device_block);
@@ -3191,6 +3443,7 @@ target_block(struct device *dev, void *data)
 void
 scsi_target_block(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (scsi_is_target_device(dev))
 		starget_for_each_device(to_scsi_target(dev), NULL,
 					device_block);
@@ -3202,12 +3455,14 @@ EXPORT_SYMBOL_GPL(scsi_target_block);
 static void
 device_unblock(struct scsi_device *sdev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_internal_device_unblock(sdev, *(enum scsi_device_state *)data);
 }
 
 static int
 target_unblock(struct device *dev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (scsi_is_target_device(dev))
 		starget_for_each_device(to_scsi_target(dev), data,
 					device_unblock);
@@ -3217,6 +3472,7 @@ target_unblock(struct device *dev, void *data)
 void
 scsi_target_unblock(struct device *dev, enum scsi_device_state new_state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (scsi_is_target_device(dev))
 		starget_for_each_device(to_scsi_target(dev), &new_state,
 					device_unblock);
@@ -3242,6 +3498,7 @@ void *scsi_kmap_atomic_sg(struct scatterlist *sgl, int sg_count,
 	struct scatterlist *sg;
 	struct page *page;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!irqs_disabled());
 
 	for_each_sg(sgl, sg, sg_count, i) {
@@ -3281,18 +3538,21 @@ EXPORT_SYMBOL(scsi_kmap_atomic_sg);
  */
 void scsi_kunmap_atomic_sg(void *virt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kunmap_atomic(virt);
 }
 EXPORT_SYMBOL(scsi_kunmap_atomic_sg);
 
 void sdev_disable_disk_events(struct scsi_device *sdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_inc(&sdev->disk_events_disable_depth);
 }
 EXPORT_SYMBOL(sdev_disable_disk_events);
 
 void sdev_enable_disk_events(struct scsi_device *sdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON_ONCE(atomic_read(&sdev->disk_events_disable_depth) <= 0))
 		return;
 	atomic_dec(&sdev->disk_events_disable_depth);
@@ -3322,6 +3582,7 @@ int scsi_vpd_lun_id(struct scsi_device *sdev, char *id, size_t id_len)
 	int id_size = -EINVAL;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vpd_pg83 = rcu_dereference(sdev->vpd_pg83);
 	if (!vpd_pg83) {
 		rcu_read_unlock();
@@ -3471,6 +3732,7 @@ int scsi_vpd_tpg_id(struct scsi_device *sdev, int *rel_id)
 	int group_id = -EAGAIN, rel_port = -1;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vpd_pg83 = rcu_dereference(sdev->vpd_pg83);
 	if (!vpd_pg83) {
 		rcu_read_unlock();
diff --git a/drivers/scsi/scsi_logging.c b/drivers/scsi/scsi_logging.c
index bd70339..a434aac 100644
--- a/drivers/scsi/scsi_logging.c
+++ b/drivers/scsi/scsi_logging.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * scsi_logging.c
  *
@@ -40,12 +42,14 @@ static char *scsi_log_reserve_buffer(size_t *len)
 	idx = find_first_zero_bit(&buf->map, map_bits);
 	if (likely(idx < map_bits)) {
 		while (test_and_set_bit(idx, &buf->map)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			idx = find_next_zero_bit(&buf->map, map_bits, idx);
 			if (idx >= map_bits)
 				break;
 		}
 	}
 	if (WARN_ON(idx >= map_bits)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		preempt_enable();
 		return NULL;
 	}
@@ -71,6 +75,7 @@ static void scsi_log_release_buffer(char *bufptr)
 
 static inline const char *scmd_name(const struct scsi_cmnd *scmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scmd->request->rq_disk ?
 		scmd->request->rq_disk->disk_name : NULL;
 }
@@ -81,8 +86,10 @@ static size_t sdev_format_header(char *logbuf, size_t logbuf_len,
 	size_t off = 0;
 
 	if (name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		off += scnprintf(logbuf + off, logbuf_len - off,
 				 "[%s] ", name);
+}
 
 	if (WARN_ON(off >= logbuf_len))
 		return off;
@@ -101,11 +108,15 @@ void sdev_prefix_printk(const char *level, const struct scsi_device *sdev,
 	size_t off = 0, logbuf_len;
 
 	if (!sdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	logbuf = scsi_log_reserve_buffer(&logbuf_len);
 	if (!logbuf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (name)
 		off += scnprintf(logbuf + off, logbuf_len - off,
@@ -127,6 +138,7 @@ void scmd_printk(const char *level, const struct scsi_cmnd *scmd,
 	char *logbuf;
 	size_t off = 0, logbuf_len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!scmd || !scmd->cmnd)
 		return;
 
@@ -154,6 +166,7 @@ static size_t scsi_format_opcode_name(char *buffer, size_t buf_len,
 
 	cdb0 = cdbp[0];
 	if (cdb0 == VARIABLE_LENGTH_CMD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int len = scsi_varlen_cdb_length(cdbp);
 
 		if (len < 10) {
@@ -202,7 +215,9 @@ size_t __scsi_format_command(char *logbuf, size_t logbuf_len,
 
 	off = scsi_format_opcode_name(logbuf, logbuf_len, cdb);
 	if (off >= logbuf_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return off;
+}
 	len = scsi_command_size(cdb);
 	if (cdb_len < len)
 		len = cdb_len;
@@ -224,7 +239,9 @@ void scsi_print_command(struct scsi_cmnd *cmd)
 	size_t off, logbuf_len;
 
 	if (!cmd->cmnd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	logbuf = scsi_log_reserve_buffer(&logbuf_len);
 	if (!logbuf)
@@ -293,6 +310,7 @@ scsi_format_extd_sense(char *buffer, size_t buf_len,
 							    &extd_sense_fmt);
 
 	if (extd_sense_str) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		off = scnprintf(buffer, buf_len, "Add. Sense: %s",
 				extd_sense_str);
 		if (extd_sense_fmt)
@@ -322,8 +340,10 @@ scsi_format_sense_hdr(char *buffer, size_t buf_len,
 	off = scnprintf(buffer, buf_len, "Sense Key : ");
 	sense_txt = scsi_sense_key_string(sshdr->sense_key);
 	if (sense_txt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		off += scnprintf(buffer + off, buf_len - off,
 				 "%s ", sense_txt);
+}
 	else
 		off += scnprintf(buffer + off, buf_len - off,
 				 "0x%x ", sshdr->sense_key);
@@ -345,7 +365,9 @@ scsi_log_dump_sense(const struct scsi_device *sdev, const char *name, int tag,
 
 	logbuf = scsi_log_reserve_buffer(&logbuf_len);
 	if (!logbuf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for (i = 0; i < sense_len; i += 16) {
 		int len = min(sense_len - i, 16);
@@ -370,7 +392,9 @@ scsi_log_print_sense_hdr(const struct scsi_device *sdev, const char *name,
 
 	logbuf = scsi_log_reserve_buffer(&logbuf_len);
 	if (!logbuf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	off = sdev_format_header(logbuf, logbuf_len, name, tag);
 	off += scsi_format_sense_hdr(logbuf + off, logbuf_len - off, sshdr);
 	dev_printk(KERN_INFO, &sdev->sdev_gendev, "%s", logbuf);
@@ -393,7 +417,9 @@ scsi_log_print_sense(const struct scsi_device *sdev, const char *name, int tag,
 	struct scsi_sense_hdr sshdr;
 
 	if (scsi_normalize_sense(sense_buffer, sense_len, &sshdr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scsi_log_print_sense_hdr(sdev, name, tag, &sshdr);
+}
 	else
 		scsi_log_dump_sense(sdev, name, tag, sense_buffer, sense_len);
 }
@@ -405,6 +431,7 @@ void
 scsi_print_sense_hdr(const struct scsi_device *sdev, const char *name,
 		     const struct scsi_sense_hdr *sshdr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_log_print_sense_hdr(sdev, name, -1, sshdr);
 }
 EXPORT_SYMBOL(scsi_print_sense_hdr);
@@ -413,6 +440,7 @@ EXPORT_SYMBOL(scsi_print_sense_hdr);
 void __scsi_print_sense(const struct scsi_device *sdev, const char *name,
 			const unsigned char *sense_buffer, int sense_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_log_print_sense(sdev, name, -1, sense_buffer, sense_len);
 }
 EXPORT_SYMBOL(__scsi_print_sense);
@@ -420,6 +448,7 @@ EXPORT_SYMBOL(__scsi_print_sense);
 /* Normalize and print sense buffer in SCSI command */
 void scsi_print_sense(const struct scsi_cmnd *cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_log_print_sense(cmd->device, scmd_name(cmd), cmd->request->tag,
 			     cmd->sense_buffer, SCSI_SENSE_BUFFERSIZE);
 }
@@ -436,7 +465,9 @@ void scsi_print_result(const struct scsi_cmnd *cmd, const char *msg,
 
 	logbuf = scsi_log_reserve_buffer(&logbuf_len);
 	if (!logbuf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	off = sdev_format_header(logbuf, logbuf_len,
 				 scmd_name(cmd), cmd->request->tag);
diff --git a/drivers/scsi/scsi_pm.c b/drivers/scsi/scsi_pm.c
index b44c1bb..8375407 100644
--- a/drivers/scsi/scsi_pm.c
+++ b/drivers/scsi/scsi_pm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	scsi_pm.c	Copyright (C) 2010 Alan Stern
  *
@@ -20,37 +22,44 @@
 
 static int do_scsi_suspend(struct device *dev, const struct dev_pm_ops *pm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pm && pm->suspend ? pm->suspend(dev) : 0;
 }
 
 static int do_scsi_freeze(struct device *dev, const struct dev_pm_ops *pm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pm && pm->freeze ? pm->freeze(dev) : 0;
 }
 
 static int do_scsi_poweroff(struct device *dev, const struct dev_pm_ops *pm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pm && pm->poweroff ? pm->poweroff(dev) : 0;
 }
 
 static int do_scsi_resume(struct device *dev, const struct dev_pm_ops *pm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pm && pm->resume ? pm->resume(dev) : 0;
 }
 
 static int do_scsi_thaw(struct device *dev, const struct dev_pm_ops *pm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pm && pm->thaw ? pm->thaw(dev) : 0;
 }
 
 static int do_scsi_restore(struct device *dev, const struct dev_pm_ops *pm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pm && pm->restore ? pm->restore(dev) : 0;
 }
 
 static int scsi_dev_type_suspend(struct device *dev,
 		int (*cb)(struct device *, const struct dev_pm_ops *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 	int err;
 
@@ -70,6 +79,7 @@ static int scsi_dev_type_suspend(struct device *dev,
 static int scsi_dev_type_resume(struct device *dev,
 		int (*cb)(struct device *, const struct dev_pm_ops *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 	int err = 0;
 
@@ -110,16 +120,19 @@ scsi_bus_suspend_common(struct device *dev,
 
 static void async_sdev_resume(void *dev, async_cookie_t cookie)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_dev_type_resume(dev, do_scsi_resume);
 }
 
 static void async_sdev_thaw(void *dev, async_cookie_t cookie)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_dev_type_resume(dev, do_scsi_thaw);
 }
 
 static void async_sdev_restore(void *dev, async_cookie_t cookie)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_dev_type_resume(dev, do_scsi_restore);
 }
 
@@ -129,7 +142,9 @@ static int scsi_bus_resume_common(struct device *dev,
 	async_func_t fn;
 
 	if (!scsi_is_sdev_device(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fn = NULL;
+}
 	else if (cb == do_scsi_resume)
 		fn = async_sdev_resume;
 	else if (cb == do_scsi_thaw)
@@ -170,6 +185,7 @@ static int scsi_bus_resume_common(struct device *dev,
 
 static int scsi_bus_prepare(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (scsi_is_sdev_device(dev)) {
 		/* sd probing uses async_schedule.  Wait until it finishes. */
 		async_synchronize_full_domain(&scsi_sd_probe_domain);
@@ -183,31 +199,37 @@ static int scsi_bus_prepare(struct device *dev)
 
 static int scsi_bus_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scsi_bus_suspend_common(dev, do_scsi_suspend);
 }
 
 static int scsi_bus_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scsi_bus_resume_common(dev, do_scsi_resume);
 }
 
 static int scsi_bus_freeze(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scsi_bus_suspend_common(dev, do_scsi_freeze);
 }
 
 static int scsi_bus_thaw(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scsi_bus_resume_common(dev, do_scsi_thaw);
 }
 
 static int scsi_bus_poweroff(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scsi_bus_suspend_common(dev, do_scsi_poweroff);
 }
 
 static int scsi_bus_restore(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scsi_bus_resume_common(dev, do_scsi_restore);
 }
 
@@ -225,6 +247,7 @@ static int scsi_bus_restore(struct device *dev)
 
 static int sdev_runtime_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 	struct scsi_device *sdev = to_scsi_device(dev);
 	int err = 0;
@@ -243,9 +266,12 @@ static int scsi_runtime_suspend(struct device *dev)
 {
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(dev, "scsi_runtime_suspend\n");
 	if (scsi_is_sdev_device(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sdev_runtime_suspend(dev);
+}
 
 	/* Insert hooks here for targets, hosts, and transport classes */
 
@@ -254,6 +280,7 @@ static int scsi_runtime_suspend(struct device *dev)
 
 static int sdev_runtime_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 	const struct dev_pm_ops *pm = dev->driver ? dev->driver->pm : NULL;
 	int err = 0;
@@ -270,9 +297,12 @@ static int scsi_runtime_resume(struct device *dev)
 {
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(dev, "scsi_runtime_resume\n");
 	if (scsi_is_sdev_device(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sdev_runtime_resume(dev);
+}
 
 	/* Insert hooks here for targets, hosts, and transport classes */
 
@@ -281,16 +311,19 @@ static int scsi_runtime_resume(struct device *dev)
 
 static int scsi_runtime_idle(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(dev, "scsi_runtime_idle\n");
 
 	/* Insert hooks here for targets, hosts, and transport classes */
 
 	if (scsi_is_sdev_device(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_runtime_mark_last_busy(dev);
 		pm_runtime_autosuspend(dev);
 		return -EBUSY;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -300,7 +333,9 @@ int scsi_autopm_get_device(struct scsi_device *sdev)
 
 	err = pm_runtime_get_sync(&sdev->sdev_gendev);
 	if (err < 0 && err !=-EACCES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_runtime_put_sync(&sdev->sdev_gendev);
+}
 	else
 		err = 0;
 	return err;
@@ -329,7 +364,9 @@ int scsi_autopm_get_host(struct Scsi_Host *shost)
 
 	err = pm_runtime_get_sync(&shost->shost_gendev);
 	if (err < 0 && err !=-EACCES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_runtime_put_sync(&shost->shost_gendev);
+}
 	else
 		err = 0;
 	return err;
diff --git a/drivers/scsi/scsi_scan.c b/drivers/scsi/scsi_scan.c
index 4012464..f411bf4 100644
--- a/drivers/scsi/scsi_scan.c
+++ b/drivers/scsi/scsi_scan.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * scsi_scan.c
@@ -136,16 +138,22 @@ int scsi_complete_async_scans(void)
 
 	do {
 		if (list_empty(&scanning_hosts))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 		/* If we can't get memory immediately, that's OK.  Just
 		 * sleep a little.  Even if we never get memory, the async
 		 * scans will finish eventually.
 		 */
 		data = kmalloc(sizeof(*data), GFP_KERNEL);
 		if (!data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			msleep(1);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while (!data);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	data->shost = NULL;
 	init_completion(&data->prev_finished);
 
@@ -153,6 +161,7 @@ int scsi_complete_async_scans(void)
 	/* Check that there's still somebody else on the list */
 	if (list_empty(&scanning_hosts))
 		goto done;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_add_tail(&data->list, &scanning_hosts);
 	spin_unlock(&async_scan_lock);
 
@@ -162,6 +171,7 @@ int scsi_complete_async_scans(void)
 	spin_lock(&async_scan_lock);
 	list_del(&data->list);
 	if (!list_empty(&scanning_hosts)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct async_scan_data *next = list_entry(scanning_hosts.next,
 				struct async_scan_data, list);
 		complete(&next->prev_finished);
@@ -267,7 +277,9 @@ static struct scsi_device *scsi_alloc_sdev(struct scsi_target *starget,
 	sdev->borken = 1;
 
 	if (shost_use_blk_mq(shost))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->request_queue = scsi_mq_alloc_queue(sdev);
+}
 	else
 		sdev->request_queue = scsi_old_alloc_queue(sdev);
 	if (!sdev->request_queue) {
@@ -291,6 +303,7 @@ static struct scsi_device *scsi_alloc_sdev(struct scsi_target *starget,
 	scsi_sysfs_device_initialize(sdev);
 
 	if (shost->hostt->slave_alloc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = shost->hostt->slave_alloc(sdev);
 		if (ret) {
 			/*
@@ -298,18 +311,24 @@ static struct scsi_device *scsi_alloc_sdev(struct scsi_target *starget,
 			 * console with alloc failure messages
 			 */
 			if (ret == -ENXIO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				display_failure_msg = 0;
+}
 			goto out_device_destroy;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sdev;
 
 out_device_destroy:
 	__scsi_remove_device(sdev);
 out:
 	if (display_failure_msg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(ALLOC_FAILURE_MSG, __func__);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -319,6 +338,7 @@ static void scsi_target_destroy(struct scsi_target *starget)
 	struct Scsi_Host *shost = dev_to_shost(dev->parent);
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(starget->state == STARGET_DEL);
 	starget->state = STARGET_DEL;
 	transport_destroy_device(dev);
@@ -333,6 +353,7 @@ static void scsi_target_destroy(struct scsi_target *starget)
 static void scsi_target_dev_release(struct device *dev)
 {
 	struct device *parent = dev->parent;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_target *starget = to_scsi_target(dev);
 
 	kfree(starget);
@@ -359,14 +380,18 @@ static struct scsi_target *__scsi_find_target(struct device *parent,
 	 * Search for an existing target for this sdev.
 	 */
 	list_for_each_entry(starget, &shost->__targets, siblings) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (starget->id == id &&
 		    starget->channel == channel) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			found_starget = starget;
 			break;
 		}
 	}
 	if (found_starget)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		get_device(&found_starget->dev);
+}
 
 	return found_starget;
 }
@@ -429,6 +454,7 @@ static struct scsi_target *scsi_alloc_target(struct device *parent,
 
 	starget = kzalloc(size, GFP_KERNEL);
 	if (!starget) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "%s: allocation failure\n", __func__);
 		return NULL;
 	}
@@ -459,9 +485,11 @@ static struct scsi_target *scsi_alloc_target(struct device *parent,
 	/* allocate and add */
 	transport_setup_device(dev);
 	if (shost->hostt->target_alloc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = shost->hostt->target_alloc(starget);
 
 		if(error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_printk(KERN_ERR, dev, "target allocation failed, error %d\n", error);
 			/* don't want scsi_target_reap to do the final
 			 * put because it will be under the host lock */
@@ -483,6 +511,7 @@ static struct scsi_target *scsi_alloc_target(struct device *parent,
 
 	spin_unlock_irqrestore(shost->host_lock, flags);
 	if (ref_got) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_device(dev);
 		return found_target;
 	}
@@ -544,9 +573,13 @@ void scsi_sanitize_inquiry_string(unsigned char *s, int len)
 
 	for (; len > 0; (--len, ++s)) {
 		if (*s == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			terminated = 1;
+}
 		if (terminated || *s < 0x20 || *s > 0x7e)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*s = ' ';
+}
 	}
 }
 EXPORT_SYMBOL(scsi_sanitize_inquiry_string);
@@ -616,6 +649,7 @@ static int scsi_probe_lun(struct scsi_device *sdev, unsigned char *inq_result,
 			 */
 			if ((driver_byte(result) & DRIVER_SENSE) &&
 			    scsi_sense_valid(&sshdr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if ((sshdr.sense_key == UNIT_ATTENTION) &&
 				    ((sshdr.asc == 0x28) ||
 				     (sshdr.asc == 0x29)) &&
@@ -641,7 +675,9 @@ static int scsi_probe_lun(struct scsi_device *sdev, unsigned char *inq_result,
 
 		response_len = inq_result[4] + 5;
 		if (response_len > 255)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			response_len = first_inquiry_len;	/* sanity */
+}
 
 		/*
 		 * Get any flags for this device.
@@ -657,14 +693,19 @@ static int scsi_probe_lun(struct scsi_device *sdev, unsigned char *inq_result,
 		 * what larger transfer lengths might work. */
 		if (pass == 1) {
 			if (BLIST_INQUIRY_36 & *bflags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				next_inquiry_len = 36;
+}
 			else if (sdev->inquiry_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				next_inquiry_len = sdev->inquiry_len;
+}
 			else
 				next_inquiry_len = response_len;
 
 			/* If more data is available perform the second pass */
 			if (next_inquiry_len > try_inquiry_len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				try_inquiry_len = next_inquiry_len;
 				pass = 2;
 				goto next_pass;
@@ -672,6 +713,7 @@ static int scsi_probe_lun(struct scsi_device *sdev, unsigned char *inq_result,
 		}
 
 	} else if (pass == 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev_printk(KERN_INFO, sdev,
 			    "scsi scan: %d byte inquiry failed.  "
 			    "Consider BLIST_INQUIRY_36 for this device\n",
@@ -687,7 +729,9 @@ static int scsi_probe_lun(struct scsi_device *sdev, unsigned char *inq_result,
 	/* If the last transfer attempt got an error, assume the
 	 * peripheral doesn't exist or is dead. */
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	/* Don't report any more data than the device says is valid */
 	sdev->inquiry_len = min(try_inquiry_len, response_len);
@@ -708,12 +752,15 @@ static int scsi_probe_lun(struct scsi_device *sdev, unsigned char *inq_result,
 	 * strings.
 	 */
 	if (sdev->inquiry_len < 36) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!sdev->host->short_inquiry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			shost_printk(KERN_INFO, sdev->host,
 				    "scsi scan: INQUIRY result too short (%d),"
 				    " using 36\n", sdev->inquiry_len);
 			sdev->host->short_inquiry = 1;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->inquiry_len = 36;
 	}
 
@@ -751,6 +798,7 @@ static int scsi_probe_lun(struct scsi_device *sdev, unsigned char *inq_result,
 	    !sdev->host->no_scsi2_lun_in_cdb)
 		sdev->lun_in_cdb = 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -798,7 +846,9 @@ static int scsi_add_lun(struct scsi_device *sdev, unsigned char *inq_result,
 				max_t(size_t, sdev->inquiry_len, 36),
 				GFP_ATOMIC);
 	if (sdev->inquiry == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return SCSI_SCAN_NO_RESPONSE;
+}
 
 	sdev->vendor = (char *) (sdev->inquiry + 8);
 	sdev->model = (char *) (sdev->inquiry + 16);
@@ -815,6 +865,7 @@ static int scsi_add_lun(struct scsi_device *sdev, unsigned char *inq_result,
 	}
 
 	if (*bflags & BLIST_ISROM) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->type = TYPE_ROM;
 		sdev->removable = 1;
 	} else {
@@ -827,6 +878,7 @@ static int scsi_add_lun(struct scsi_device *sdev, unsigned char *inq_result,
 		 * to enumerate them correctly.
 		 */
 		if (scsi_is_wlun(sdev->lun) && sdev->type != TYPE_WLUN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sdev_printk(KERN_WARNING, sdev,
 				"%s: correcting incorrect peripheral device type 0x%x for W-LUN 0x%16xhN\n",
 				__func__, sdev->type, (unsigned int)sdev->lun);
@@ -868,9 +920,13 @@ static int scsi_add_lun(struct scsi_device *sdev, unsigned char *inq_result,
 			(sdev->inquiry_len > 56 && inq_result[56] & 0x04))
 		sdev->ppr = 1;
 	if (inq_result[7] & 0x60)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->wdtr = 1;
+}
 	if (inq_result[7] & 0x10)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->sdtr = 1;
+}
 
 	sdev_printk(KERN_NOTICE, sdev, "%s %.8s %.16s %.4s PQ: %d "
 			"ANSI: %d%s\n", scsi_device_type(sdev->type),
@@ -880,6 +936,7 @@ static int scsi_add_lun(struct scsi_device *sdev, unsigned char *inq_result,
 
 	if ((sdev->scsi_level >= SCSI_2) && (inq_result[7] & 2) &&
 	    !(*bflags & BLIST_NOTQ)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->tagged_supported = 1;
 		sdev->simple_tags = 1;
 	}
@@ -893,37 +950,49 @@ static int scsi_add_lun(struct scsi_device *sdev, unsigned char *inq_result,
 		sdev->borken = 0;
 
 	if (*bflags & BLIST_NO_ULD_ATTACH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->no_uld_attach = 1;
+}
 
 	/*
 	 * Apparently some really broken devices (contrary to the SCSI
 	 * standards) need to be selected without asserting ATN
 	 */
 	if (*bflags & BLIST_SELECT_NO_ATN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->select_no_atn = 1;
+}
 
 	/*
 	 * Maximum 512 sector transfer length
 	 * broken RA4x00 Compaq Disk Array
 	 */
 	if (*bflags & BLIST_MAX_512)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		blk_queue_max_hw_sectors(sdev->request_queue, 512);
+}
 	/*
 	 * Max 1024 sector transfer length for targets that report incorrect
 	 * max/optimal lengths and relied on the old block layer safe default
 	 */
 	else if (*bflags & BLIST_MAX_1024)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		blk_queue_max_hw_sectors(sdev->request_queue, 1024);
+}
 
 	/*
 	 * Some devices may not want to have a start command automatically
 	 * issued when a device is added.
 	 */
 	if (*bflags & BLIST_NOSTARTONADD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->no_start_on_add = 1;
+}
 
 	if (*bflags & BLIST_SINGLELUN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scsi_target(sdev)->single_lun = 1;
+}
 
 	sdev->use_10_for_rw = 1;
 
@@ -931,17 +1000,22 @@ static int scsi_add_lun(struct scsi_device *sdev, unsigned char *inq_result,
 	 * and will simply timeout causing sd_mod init to take a very
 	 * very long time */
 	if (*bflags & BLIST_NO_RSOC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->no_report_opcodes = 1;
+}
 
 	/* set the device running here so that slave configure
 	 * may do I/O */
 	mutex_lock(&sdev->state_mutex);
 	ret = scsi_device_set_state(sdev, SDEV_RUNNING);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = scsi_device_set_state(sdev, SDEV_BLOCK);
+}
 	mutex_unlock(&sdev->state_mutex);
 
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev_printk(KERN_ERR, sdev,
 			    "in wrong state %s to complete scan\n",
 			    scsi_device_state_name(sdev->sdev_state));
@@ -949,23 +1023,35 @@ static int scsi_add_lun(struct scsi_device *sdev, unsigned char *inq_result,
 	}
 
 	if (*bflags & BLIST_NOT_LOCKABLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->lockable = 0;
+}
 
 	if (*bflags & BLIST_RETRY_HWERROR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->retry_hwerror = 1;
+}
 
 	if (*bflags & BLIST_NO_DIF)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->no_dif = 1;
+}
 
 	if (*bflags & BLIST_UNMAP_LIMIT_WS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->unmap_limit_for_ws = 1;
+}
 
 	sdev->eh_timeout = SCSI_DEFAULT_EH_TIMEOUT;
 
 	if (*bflags & BLIST_TRY_VPD_PAGES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->try_vpd_pages = 1;
+}
 	else if (*bflags & BLIST_SKIP_VPD_PAGES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->skip_vpd_pages = 1;
+}
 
 	transport_configure_device(&sdev->sdev_gendev);
 
@@ -977,9 +1063,11 @@ static int scsi_add_lun(struct scsi_device *sdev, unsigned char *inq_result,
 			 * console with alloc failure messages
 			 */
 			if (ret != -ENXIO) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sdev_printk(KERN_ERR, sdev,
 					"failed to configure device\n");
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return SCSI_SCAN_NO_RESPONSE;
 		}
 	}
@@ -995,8 +1083,11 @@ static int scsi_add_lun(struct scsi_device *sdev, unsigned char *inq_result,
 	 * about it.
 	 */
 	if (!async && scsi_sysfs_add_sdev(sdev) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return SCSI_SCAN_NO_RESPONSE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return SCSI_SCAN_LUN_PRESENT;
 }
 
@@ -1064,21 +1155,29 @@ static int scsi_probe_and_add_lun(struct scsi_target *starget,
 	 */
 	sdev = scsi_device_lookup_by_target(starget, lun);
 	if (sdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rescan != SCSI_SCAN_INITIAL || !scsi_device_created(sdev)) {
 			SCSI_LOG_SCAN_BUS(3, sdev_printk(KERN_INFO, sdev,
 				"scsi scan: device exists on %s\n",
 				dev_name(&sdev->sdev_gendev)));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sdevp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*sdevp = sdev;
+}
 			else
 				scsi_device_put(sdev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (bflagsp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*bflagsp = scsi_get_device_flags(sdev,
 								 sdev->vendor,
 								 sdev->model);
+}
 			return SCSI_SCAN_LUN_PRESENT;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scsi_device_put(sdev);
 	} else
 		sdev = scsi_alloc_sdev(starget, lun, hostdata);
@@ -1094,7 +1193,9 @@ static int scsi_probe_and_add_lun(struct scsi_target *starget,
 		goto out_free_result;
 
 	if (bflagsp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*bflagsp = bflags;
+}
 	/*
 	 * result contains valid SCSI INQUIRY data.
 	 */
@@ -1126,6 +1227,7 @@ static int scsi_probe_and_add_lun(struct scsi_target *starget,
 
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = SCSI_SCAN_TARGET_PRESENT;
 		goto out_free_result;
 	}
@@ -1155,6 +1257,7 @@ static int scsi_probe_and_add_lun(struct scsi_target *starget,
 		SCSI_LOG_SCAN_BUS(3, sdev_printk(KERN_INFO, sdev,
 					"scsi scan: peripheral device type"
 					" of 31, no device added\n"));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = SCSI_SCAN_TARGET_PRESENT;
 		goto out_free_result;
 	}
@@ -1162,6 +1265,7 @@ static int scsi_probe_and_add_lun(struct scsi_target *starget,
 	res = scsi_add_lun(sdev, result, &bflags, shost->async_scan);
 	if (res == SCSI_SCAN_LUN_PRESENT) {
 		if (bflags & BLIST_KEY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sdev->lockable = 0;
 			scsi_unlock_floptical(sdev, result);
 		}
@@ -1175,12 +1279,15 @@ static int scsi_probe_and_add_lun(struct scsi_target *starget,
 			if (scsi_device_get(sdev) == 0) {
 				*sdevp = sdev;
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__scsi_remove_device(sdev);
 				res = SCSI_SCAN_NO_RESPONSE;
 			}
 		}
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__scsi_remove_device(sdev);
+}
  out:
 	return res;
 }
@@ -1210,6 +1317,7 @@ static void scsi_sequential_lun_scan(struct scsi_target *starget,
 	SCSI_LOG_SCAN_BUS(3, starget_printk(KERN_INFO, starget,
 		"scsi scan: Sequential scan\n"));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	max_dev_lun = min(max_scsi_luns, shost->max_lun);
 	/*
 	 * If this device is known to support sparse multiple units,
@@ -1313,7 +1421,9 @@ static int scsi_report_lun_scan(struct scsi_target *starget, int bflags,
 	 * Don't attempt if the target doesn't support REPORT LUNS.
 	 */
 	if (bflags & BLIST_NOREPORTLUN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	if (starget->scsi_level < SCSI_2 &&
 	    starget->scsi_level != SCSI_UNKNOWN)
 		return 1;
diff --git a/drivers/scsi/scsi_sysctl.c b/drivers/scsi/scsi_sysctl.c
index 546f162..92db8ac 100644
--- a/drivers/scsi/scsi_sysctl.c
+++ b/drivers/scsi/scsi_sysctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2003 Christoph Hellwig.
  *	Released under GPL v2.
@@ -41,11 +43,14 @@ int __init scsi_init_sysctl(void)
 {
 	scsi_table_header = register_sysctl_table(scsi_root_table);
 	if (!scsi_table_header)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
 void scsi_exit_sysctl(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_sysctl_table(scsi_table_header);
 }
diff --git a/drivers/scsi/scsi_sysfs.c b/drivers/scsi/scsi_sysfs.c
index 40406c1..25b1618 100644
--- a/drivers/scsi/scsi_sysfs.c
+++ b/drivers/scsi/scsi_sysfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * scsi_sysfs.c
  *
@@ -46,6 +48,7 @@ const char *scsi_device_state_name(enum scsi_device_state state)
 	int i;
 	char *name = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(sdev_states); i++) {
 		if (sdev_states[i].value == state) {
 			name = sdev_states[i].name;
@@ -72,6 +75,7 @@ const char *scsi_host_state_name(enum scsi_host_state state)
 	int i;
 	char *name = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(shost_states); i++) {
 		if (shost_states[i].value == state) {
 			name = shost_states[i].name;
@@ -115,6 +119,7 @@ static int check_set(unsigned long long *val, char *src)
 	char *last;
 
 	if (strcmp(src, "-") == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*val = SCAN_WILD_CARD;
 	} else {
 		/*
@@ -135,7 +140,9 @@ static int scsi_scan(struct Scsi_Host *shost, const char *str)
 
 	res = sscanf(str, "%10s %10s %16s %c", s1, s2, s3, &junk);
 	if (res != 3)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (check_set(&channel, s1))
 		return -EINVAL;
 	if (check_set(&id, s2))
@@ -182,6 +189,7 @@ static ssize_t
 store_scan(struct device *dev, struct device_attribute *attr,
 	   const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	int res;
 
@@ -197,6 +205,7 @@ store_shost_state(struct device *dev, struct device_attribute *attr,
 		  const char *buf, size_t count)
 {
 	int i;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	enum scsi_host_state state = 0;
 
@@ -219,6 +228,7 @@ store_shost_state(struct device *dev, struct device_attribute *attr,
 static ssize_t
 show_shost_state(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	const char *name = scsi_host_state_name(shost->shost_state);
 
@@ -238,7 +248,9 @@ show_shost_mode(unsigned int mode, char *buf)
 	ssize_t len = 0;
 
 	if (mode & MODE_INITIATOR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = sprintf(buf, "%s", "Initiator");
+}
 
 	if (mode & MODE_TARGET)
 		len += sprintf(buf + len, "%s%s", len ? ", " : "", "Target");
@@ -252,6 +264,7 @@ static ssize_t
 show_shost_supported_mode(struct device *dev, struct device_attribute *attr,
 			  char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	unsigned int supported_mode = shost->hostt->supported_mode;
 
@@ -268,6 +281,7 @@ static ssize_t
 show_shost_active_mode(struct device *dev,
 		       struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 
 	if (shost->active_mode == MODE_UNKNOWN)
@@ -280,6 +294,7 @@ static DEVICE_ATTR(active_mode, S_IRUGO | S_IWUSR, show_shost_active_mode, NULL)
 
 static int check_reset_type(const char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sysfs_streq(str, "adapter"))
 		return SCSI_ADAPTER_RESET;
 	else if (sysfs_streq(str, "firmware"))
@@ -292,6 +307,7 @@ static ssize_t
 store_host_reset(struct device *dev, struct device_attribute *attr,
 		const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct scsi_host_template *sht = shost->hostt;
 	int ret = -EINVAL;
@@ -318,6 +334,7 @@ static ssize_t
 show_shost_eh_deadline(struct device *dev,
 		      struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 
 	if (shost->eh_deadline == -1)
@@ -329,6 +346,7 @@ static ssize_t
 store_shost_eh_deadline(struct device *dev, struct device_attribute *attr,
 		const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	int ret = -EINVAL;
 	unsigned long deadline, flags;
@@ -380,6 +398,7 @@ shost_rd_attr2(proc_name, hostt->proc_name, "%s\n");
 static ssize_t
 show_host_busy(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = class_to_shost(dev);
 	return snprintf(buf, 20, "%d\n", atomic_read(&shost->host_busy));
 }
@@ -419,6 +438,7 @@ static void scsi_device_cls_release(struct device *class_dev)
 {
 	struct scsi_device *sdev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev = class_to_sdev(class_dev);
 	put_device(&sdev->sdev_gendev);
 }
@@ -431,6 +451,7 @@ static void scsi_device_dev_release_usercontext(struct work_struct *work)
 	struct scsi_vpd *vpd_pg80 = NULL, *vpd_pg83 = NULL;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev = container_of(work, struct scsi_device, ew.work);
 
 	scsi_dh_release_device(sdev);
@@ -477,6 +498,7 @@ static void scsi_device_dev_release_usercontext(struct work_struct *work)
 
 static void scsi_device_dev_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdp = to_scsi_device(dev);
 	execute_in_process_context(scsi_device_dev_release_usercontext,
 				   &sdp->ew);
@@ -493,11 +515,16 @@ static int scsi_bus_match(struct device *dev, struct device_driver *gendrv)
 	struct scsi_device *sdp;
 
 	if (dev->type != &scsi_dev_type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdp = to_scsi_device(dev);
 	if (sdp->no_uld_attach)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return (sdp->inq_periph_qual == SCSI_INQ_PQ_CON)? 1: 0;
 }
 
@@ -506,8 +533,11 @@ static int scsi_bus_uevent(struct device *dev, struct kobj_uevent_env *env)
 	struct scsi_device *sdev;
 
 	if (dev->type != &scsi_dev_type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev = to_scsi_device(dev);
 
 	add_uevent_var(env, "MODALIAS=" SCSI_DEVICE_MODALIAS_FMT, sdev->type);
@@ -532,7 +562,9 @@ int scsi_sysfs_register(void)
 	if (!error) {
 		error = class_register(&sdev_class);
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bus_unregister(&scsi_bus_type);
+}
 	}
 
 	return error;
@@ -540,6 +572,7 @@ int scsi_sysfs_register(void)
 
 void scsi_sysfs_unregister(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	class_unregister(&sdev_class);
 	bus_unregister(&scsi_bus_type);
 }
@@ -641,6 +674,7 @@ static ssize_t
 sdev_show_device_busy(struct device *dev, struct device_attribute *attr,
 		char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 	return snprintf(buf, 20, "%d\n", atomic_read(&sdev->device_busy));
 }
@@ -650,6 +684,7 @@ static ssize_t
 sdev_show_device_blocked(struct device *dev, struct device_attribute *attr,
 		char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 	return snprintf(buf, 20, "%d\n", atomic_read(&sdev->device_blocked));
 }
@@ -662,6 +697,7 @@ static ssize_t
 sdev_show_timeout (struct device *dev, struct device_attribute *attr, char *buf)
 {
 	struct scsi_device *sdev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev = to_scsi_device(dev);
 	return snprintf(buf, 20, "%d\n", sdev->request_queue->rq_timeout / HZ);
 }
@@ -672,6 +708,7 @@ sdev_store_timeout (struct device *dev, struct device_attribute *attr,
 {
 	struct scsi_device *sdev;
 	int timeout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev = to_scsi_device(dev);
 	sscanf (buf, "%d\n", &timeout);
 	blk_queue_rq_timeout(sdev->request_queue, timeout * HZ);
@@ -683,6 +720,7 @@ static ssize_t
 sdev_show_eh_timeout(struct device *dev, struct device_attribute *attr, char *buf)
 {
 	struct scsi_device *sdev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev = to_scsi_device(dev);
 	return snprintf(buf, 20, "%u\n", sdev->eh_timeout / HZ);
 }
@@ -696,7 +734,9 @@ sdev_store_eh_timeout(struct device *dev, struct device_attribute *attr,
 	int err;
 
 	if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;
+}
 
 	sdev = to_scsi_device(dev);
 	err = kstrtouint(buf, 10, &eh_timeout);
@@ -712,6 +752,7 @@ static ssize_t
 store_rescan_field (struct device *dev, struct device_attribute *attr,
 		    const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_rescan_device(dev);
 	return count;
 }
@@ -721,6 +762,7 @@ static ssize_t
 sdev_store_delete(struct device *dev, struct device_attribute *attr,
 		  const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (device_remove_file_self(dev, attr))
 		scsi_remove_device(to_scsi_device(dev));
 	return count;
@@ -732,6 +774,7 @@ store_state_field(struct device *dev, struct device_attribute *attr,
 		  const char *buf, size_t count)
 {
 	int i, ret;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 	enum scsi_device_state state = 0;
 
@@ -756,6 +799,7 @@ store_state_field(struct device *dev, struct device_attribute *attr,
 static ssize_t
 show_state_field(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 	const char *name = scsi_device_state_name(sdev->sdev_state);
 
@@ -771,6 +815,7 @@ static ssize_t
 show_queue_type_field(struct device *dev, struct device_attribute *attr,
 		      char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 	const char *name = "none";
 
@@ -784,6 +829,7 @@ static ssize_t
 store_queue_type_field(struct device *dev, struct device_attribute *attr,
 		       const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 
 	if (!sdev->tagged_supported)
@@ -829,6 +875,7 @@ static ssize_t show_inquiry(struct file *filep, struct kobject *kobj,
 			    struct bin_attribute *bin_attr,
 			    char *buf, loff_t off, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = container_of(kobj, struct device, kobj);
 	struct scsi_device *sdev = to_scsi_device(dev);
 
@@ -852,6 +899,7 @@ static ssize_t
 show_iostat_counterbits(struct device *dev, struct device_attribute *attr,
 			char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return snprintf(buf, 20, "%d\n", (int)sizeof(atomic_t) * 8);
 }
 
@@ -876,6 +924,7 @@ static ssize_t
 sdev_show_modalias(struct device *dev, struct device_attribute *attr, char *buf)
 {
 	struct scsi_device *sdev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev = to_scsi_device(dev);
 	return snprintf (buf, 20, SCSI_DEVICE_MODALIAS_FMT "\n", sdev->type);
 }
@@ -926,6 +975,7 @@ sdev_store_queue_depth(struct device *dev, struct device_attribute *attr,
 		       const char *buf, size_t count)
 {
 	int depth, retval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 	struct scsi_host_template *sht = sdev->host->hostt;
 
@@ -954,6 +1004,7 @@ static ssize_t
 sdev_show_wwid(struct device *dev, struct device_attribute *attr,
 		    char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 	ssize_t count;
 
@@ -1063,6 +1114,7 @@ sdev_show_queue_ramp_up_period(struct device *dev,
 			       char *buf)
 {
 	struct scsi_device *sdev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev = to_scsi_device(dev);
 	return snprintf(buf, 20, "%u\n",
 			jiffies_to_msecs(sdev->queue_ramp_up_period));
@@ -1073,6 +1125,7 @@ sdev_store_queue_ramp_up_period(struct device *dev,
 				struct device_attribute *attr,
 				const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 	unsigned int period;
 
@@ -1090,7 +1143,9 @@ static DEVICE_ATTR(queue_ramp_up_period, S_IRUGO | S_IWUSR,
 static umode_t scsi_sdev_attr_is_visible(struct kobject *kobj,
 					 struct attribute *attr, int i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = container_of(kobj, struct device, kobj);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 
 
@@ -1116,15 +1171,21 @@ static umode_t scsi_sdev_attr_is_visible(struct kobject *kobj,
 static umode_t scsi_sdev_bin_attr_is_visible(struct kobject *kobj,
 					     struct bin_attribute *attr, int i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = container_of(kobj, struct device, kobj);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 
 
 	if (attr == &dev_attr_vpd_pg80 && !sdev->vpd_pg80)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (attr == &dev_attr_vpd_pg83 && !sdev->vpd_pg83)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return S_IRUGO;
 }
@@ -1189,10 +1250,13 @@ static int scsi_target_add(struct scsi_target *starget)
 	int error;
 
 	if (starget->state != STARGET_CREATED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	error = device_add(&starget->dev);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&starget->dev, "target device_add failed, error %d\n", error);
 		return error;
 	}
@@ -1221,7 +1285,9 @@ int scsi_sysfs_add_sdev(struct scsi_device *sdev)
 
 	error = scsi_target_add(starget);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	transport_configure_device(&starget->dev);
 
@@ -1244,6 +1310,7 @@ int scsi_sysfs_add_sdev(struct scsi_device *sdev)
 
 	error = device_add(&sdev->sdev_gendev);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev_printk(KERN_INFO, sdev,
 				"failed to add device: %d\n", error);
 		scsi_dh_remove_device(sdev);
@@ -1253,6 +1320,7 @@ int scsi_sysfs_add_sdev(struct scsi_device *sdev)
 	device_enable_async_suspend(&sdev->sdev_dev);
 	error = device_add(&sdev->sdev_dev);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev_printk(KERN_INFO, sdev,
 				"failed to add class device: %d\n", error);
 		scsi_dh_remove_device(sdev);
@@ -1276,7 +1344,9 @@ int scsi_sysfs_add_sdev(struct scsi_device *sdev)
 			error = device_create_file(&sdev->sdev_gendev,
 					sdev->host->hostt->sdev_attrs[i]);
 			if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return error;
+}
 		}
 	}
 
@@ -1295,7 +1365,9 @@ void __scsi_remove_device(struct scsi_device *sdev)
 	 * hold a previously acquired one.
 	 */
 	if (sdev->sdev_state == SDEV_DEL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (sdev->is_visible) {
 		/*
@@ -1369,6 +1441,7 @@ EXPORT_SYMBOL(scsi_remove_device);
 
 static void __scsi_remove_target(struct scsi_target *starget)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = dev_to_shost(starget->dev.parent);
 	unsigned long flags;
 	struct scsi_device *sdev;
@@ -1408,6 +1481,7 @@ static void __scsi_remove_target(struct scsi_target *starget)
  */
 void scsi_remove_target(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = dev_to_shost(dev->parent);
 	struct scsi_target *starget;
 	unsigned long flags;
@@ -1465,7 +1539,9 @@ int scsi_sysfs_add_host(struct Scsi_Host *shost)
 			error = device_create_file(&shost->shost_dev,
 					shost->hostt->shost_attrs[i]);
 			if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return error;
+}
 		}
 	}
 
diff --git a/drivers/scsi/scsi_transport_spi.c b/drivers/scsi/scsi_transport_spi.c
index d0219e3..2d312eb 100644
--- a/drivers/scsi/scsi_transport_spi.c
+++ b/drivers/scsi/scsi_transport_spi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* 
  *  Parallel SCSI (SPI) transport specific attributes exported to sysfs.
  *
@@ -102,7 +104,9 @@ static int sprint_frac(char *dest, int value, int denom)
 	int result = sprintf(dest, "%d", value / denom);
 
 	if (frac == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 	dest[result++] = '.';
 
 	do {
@@ -126,7 +130,9 @@ static int spi_execute(struct scsi_device *sdev, const void *cmd,
 	struct scsi_sense_hdr sshdr_tmp;
 
 	if (!sshdr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sshdr = &sshdr_tmp;
+}
 
 	for(i = 0; i < DV_RETRIES; i++) {
 		result = scsi_execute(sdev, cmd, dir, buffer, bufflen, sense,
@@ -156,6 +162,7 @@ static inline const char *spi_signal_to_string(enum spi_signal_type type)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(signal_types); i++) {
 		if (type == signal_types[i].value)
 			return signal_types[i].name;
@@ -166,6 +173,7 @@ static inline enum spi_signal_type spi_signal_to_value(const char *name)
 {
 	int i, len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(signal_types); i++) {
 		len =  strlen(signal_types[i].name);
 		if (strncmp(name, signal_types[i].name, len) == 0 &&
@@ -178,6 +186,7 @@ static inline enum spi_signal_type spi_signal_to_value(const char *name)
 static int spi_host_setup(struct transport_container *tc, struct device *dev,
 			  struct device *cdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = dev_to_shost(dev);
 
 	spi_signalling(shost) = SPI_SIGNAL_UNKNOWN;
@@ -201,13 +210,18 @@ static int spi_host_match(struct attribute_container *cont,
 	struct Scsi_Host *shost;
 
 	if (!scsi_is_host_device(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	shost = dev_to_shost(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!shost->transportt  || shost->transportt->host_attrs.ac.class
 	    != &spi_host_class.class)
 		return 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &shost->transportt->host_attrs.ac == cont;
 }
 
@@ -219,6 +233,7 @@ static int spi_device_configure(struct transport_container *tc,
 				struct device *dev,
 				struct device *cdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = to_scsi_device(dev);
 	struct scsi_target *starget = sdev->sdev_target;
 	unsigned bflags = scsi_get_device_flags_keyed(sdev, &sdev->inquiry[8],
@@ -246,6 +261,7 @@ static int spi_setup_transport_attrs(struct transport_container *tc,
 				     struct device *dev,
 				     struct device *cdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_target *starget = to_scsi_target(dev);
 
 	spi_period(starget) = -1;	/* illegal value */
@@ -396,6 +412,7 @@ spi_transport_rd_attr(hold_mcs, "%d\n");
  * so we return 1 to terminate the iteration when we find it */
 static int child_iter(struct device *dev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!scsi_is_sdev_device(dev))
 		return 0;
 
@@ -407,6 +424,7 @@ static ssize_t
 store_spi_revalidate(struct device *dev, struct device_attribute *attr,
 		     const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_target *starget = transport_class_to_starget(dev);
 
 	device_for_each_child(&starget->dev, NULL, child_iter);
@@ -420,6 +438,7 @@ static int period_to_str(char *buf, int period)
 {
 	int len, picosec;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (period < 0 || period > 0xff) {
 		picosec = -1;
 	} else if (period <= SPI_STATIC_PPR) {
@@ -440,6 +459,7 @@ static int period_to_str(char *buf, int period)
 static ssize_t
 show_spi_transport_period_helper(char *buf, int period)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int len = period_to_str(buf, period);
 	buf[len++] = '\n';
 	buf[len] = '\0';
@@ -457,6 +477,7 @@ store_spi_transport_period_helper(struct device *dev, const char *buf,
 	if (*endp == '.') {
 		int mult = 100;
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			endp++;
 			if (!isdigit(*endp))
 				break;
@@ -487,6 +508,7 @@ static ssize_t
 show_spi_transport_period(struct device *dev,
 			  struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_target *starget = transport_class_to_starget(dev);
 	struct Scsi_Host *shost = dev_to_shost(starget->dev.parent);
 	struct spi_internal *i = to_spi_internal(shost->transportt);
@@ -503,6 +525,7 @@ static ssize_t
 store_spi_transport_period(struct device *cdev, struct device_attribute *attr,
 			   const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_target *starget = transport_class_to_starget(cdev);
 	struct Scsi_Host *shost = dev_to_shost(starget->dev.parent);
 	struct spi_internal *i = to_spi_internal(shost->transportt);
@@ -531,6 +554,7 @@ static ssize_t
 show_spi_transport_min_period(struct device *cdev,
 			      struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_target *starget = transport_class_to_starget(cdev);
 	struct Scsi_Host *shost = dev_to_shost(starget->dev.parent);
 	struct spi_internal *i = to_spi_internal(shost->transportt);
@@ -548,6 +572,7 @@ store_spi_transport_min_period(struct device *cdev,
 			       struct device_attribute *attr,
 			       const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_target *starget = transport_class_to_starget(cdev);
 	struct spi_transport_attrs *tp =
 		(struct spi_transport_attrs *)&starget->starget_data;
@@ -566,6 +591,7 @@ static ssize_t show_spi_host_signalling(struct device *cdev,
 					struct device_attribute *attr,
 					char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = transport_class_to_shost(cdev);
 	struct spi_internal *i = to_spi_internal(shost->transportt);
 
@@ -578,6 +604,7 @@ static ssize_t store_spi_host_signalling(struct device *dev,
 					 struct device_attribute *attr,
 					 const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = transport_class_to_shost(dev);
 	struct spi_internal *i = to_spi_internal(shost->transportt);
 	enum spi_signal_type type = spi_signal_to_value(buf);
@@ -598,6 +625,7 @@ static ssize_t show_spi_host_width(struct device *cdev,
 				      struct device_attribute *attr,
 				      char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = transport_class_to_shost(cdev);
 
 	return sprintf(buf, "%s\n", shost->max_id == 16 ? "wide" : "narrow");
@@ -609,6 +637,7 @@ static ssize_t show_spi_host_hba_id(struct device *cdev,
 				    struct device_attribute *attr,
 				    char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Scsi_Host *shost = transport_class_to_shost(cdev);
 
 	return sprintf(buf, "%d\n", shost->this_id);
@@ -725,6 +754,7 @@ spi_dv_device_compare_inquiry(struct scsi_device *sdev, u8 *buffer,
 		INQUIRY, 0, 0, 0, len, 0
 	};
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (r = 0; r < retries; r++) {
 		memset(ptr, 0, len);
 
@@ -756,6 +786,7 @@ spi_dv_retrain(struct scsi_device *sdev, u8 *buffer, u8 *ptr,
 	       enum spi_compare_returns 
 	       (*compare_fn)(struct scsi_device *, u8 *, u8 *, int))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct spi_internal *i = to_spi_internal(sdev->host->transportt);
 	struct scsi_target *starget = sdev->sdev_target;
 	int period = 0, prevperiod = 0; 
@@ -859,6 +890,7 @@ spi_dv_device_get_echo_buffer(struct scsi_device *sdev, u8 *buffer)
 static void
 spi_dv_device_internal(struct scsi_device *sdev, u8 *buffer)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct spi_internal *i = to_spi_internal(sdev->host->transportt);
 	struct scsi_target *starget = sdev->sdev_target;
 	struct Scsi_Host *shost = sdev->host;
@@ -1008,7 +1040,9 @@ spi_dv_device(struct scsi_device *sdev)
 	const int len = SPI_MAX_ECHO_BUFFER_SIZE*2;
 
 	if (unlikely(spi_dv_in_progress(starget)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (unlikely(scsi_device_get(sdev)))
 		return;
@@ -1119,6 +1153,7 @@ void spi_display_xfer_agreement(struct scsi_target *starget)
 	struct spi_transport_attrs *tp;
 	tp = (struct spi_transport_attrs *)&starget->starget_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tp->offset > 0 && tp->period > 0) {
 		unsigned int picosec, kb100;
 		char *scsi = "FAST-?";
@@ -1170,6 +1205,7 @@ EXPORT_SYMBOL(spi_display_xfer_agreement);
 
 int spi_populate_width_msg(unsigned char *msg, int width)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msg[0] = EXTENDED_MESSAGE;
 	msg[1] = 2;
 	msg[2] = EXTENDED_WDTR;
@@ -1180,6 +1216,7 @@ EXPORT_SYMBOL_GPL(spi_populate_width_msg);
 
 int spi_populate_sync_msg(unsigned char *msg, int period, int offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msg[0] = EXTENDED_MESSAGE;
 	msg[1] = 3;
 	msg[2] = EXTENDED_SDTR;
@@ -1192,6 +1229,7 @@ EXPORT_SYMBOL_GPL(spi_populate_sync_msg);
 int spi_populate_ppr_msg(unsigned char *msg, int period, int offset,
 		int width, int options)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msg[0] = EXTENDED_MESSAGE;
 	msg[1] = 6;
 	msg[2] = EXTENDED_PPR;
@@ -1216,6 +1254,7 @@ EXPORT_SYMBOL_GPL(spi_populate_ppr_msg);
  **/
 int spi_populate_tag_msg(unsigned char *msg, struct scsi_cmnd *cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
         if (cmd->flags & SCMD_TAGGED) {
 		*msg++ = SIMPLE_QUEUE_TAG;
         	*msg++ = cmd->request->tag;
@@ -1251,6 +1290,7 @@ static const char * const extended_msgs[] = {
 
 static void print_nego(const unsigned char *msg, int per, int off, int width)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (per) {
 		char buf[20];
 		period_to_str(buf, msg[per]);
@@ -1274,6 +1314,7 @@ int spi_print_msg(const unsigned char *msg)
 {
 	int len = 1, i;
 	if (msg[0] == EXTENDED_MESSAGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = 2 + msg[1];
 		if (len == 2)
 			len += 256;
@@ -1369,8 +1410,11 @@ static int spi_device_match(struct attribute_container *cont,
 	struct spi_internal *i;
 
 	if (!scsi_is_sdev_device(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdev = to_scsi_device(dev);
 	shost = sdev->host;
 	if (!shost->transportt  || shost->transportt->host_attrs.ac.class
@@ -1380,8 +1424,12 @@ static int spi_device_match(struct attribute_container *cont,
 	 * no per-HBA allocation and thus we don't need to distinguish
 	 * the attribute containers for the device */
 	i = to_spi_internal(shost->transportt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (i->f->deny_binding && i->f->deny_binding(sdev->sdev_target))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -1393,19 +1441,27 @@ static int spi_target_match(struct attribute_container *cont,
 	struct spi_internal *i;
 
 	if (!scsi_is_target_device(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	shost = dev_to_shost(dev->parent);
 	if (!shost->transportt  || shost->transportt->host_attrs.ac.class
 	    != &spi_host_class.class)
 		return 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i = to_spi_internal(shost->transportt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	starget = to_scsi_target(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (i->f->deny_binding && i->f->deny_binding(starget))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &i->t.target_attrs.ac == cont;
 }
 
@@ -1436,6 +1492,7 @@ static int spi_host_configure(struct transport_container *tc,
 {
 	struct kobject *kobj = &cdev->kobj;
 	struct Scsi_Host *shost = transport_class_to_shost(cdev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct spi_internal *si = to_spi_internal(shost->transportt);
 	struct attribute *attr = &dev_attr_signalling.attr;
 	int rc = 0;
@@ -1456,6 +1513,7 @@ static int spi_host_configure(struct transport_container *tc,
 static umode_t target_attribute_is_visible(struct kobject *kobj,
 					  struct attribute *attr, int i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *cdev = container_of(kobj, struct device, kobj);
 	struct scsi_target *starget = transport_class_to_starget(cdev);
 	struct Scsi_Host *shost = transport_class_to_shost(cdev);
@@ -1560,7 +1618,9 @@ spi_attach_transport(struct spi_function_template *ft)
 					 GFP_KERNEL);
 
 	if (unlikely(!i))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	i->t.target_attrs.ac.class = &spi_transport_class.class;
 	i->t.target_attrs.ac.grp = &target_attribute_group;
@@ -1580,6 +1640,7 @@ EXPORT_SYMBOL(spi_attach_transport);
 
 void spi_release_transport(struct scsi_transport_template *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct spi_internal *i = to_spi_internal(t);
 
 	transport_container_unregister(&i->t.target_attrs);
@@ -1607,13 +1668,16 @@ static __init int spi_transport_init(void)
 
 	error = transport_class_register(&spi_transport_class);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	error = anon_transport_class_register(&spi_device_class);
 	return transport_class_register(&spi_host_class);
 }
 
 static void __exit spi_transport_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	transport_class_unregister(&spi_transport_class);
 	anon_transport_class_unregister(&spi_device_class);
 	transport_class_unregister(&spi_host_class);
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 72db0f7..cd1ca84 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *      sd.c Copyright (C) 1992 Drew Eckhardt
  *           Copyright (C) 1993, 1994, 1995, 1999 Eric Youngdale
@@ -144,6 +146,7 @@ static void sd_set_flush_flag(struct scsi_disk *sdkp)
 	bool wc = false, fua = false;
 
 	if (sdkp->WCE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wc = true;
 		if (sdkp->DPOFUA)
 			fua = true;
@@ -157,6 +160,7 @@ cache_type_store(struct device *dev, struct device_attribute *attr,
 		 const char *buf, size_t count)
 {
 	int ct, rcd, wce, sp;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	struct scsi_device *sdp = sdkp->device;
 	char buffer[64];
@@ -219,6 +223,7 @@ static ssize_t
 manage_start_stop_show(struct device *dev, struct device_attribute *attr,
 		       char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	struct scsi_device *sdp = sdkp->device;
 
@@ -229,6 +234,7 @@ static ssize_t
 manage_start_stop_store(struct device *dev, struct device_attribute *attr,
 			const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	struct scsi_device *sdp = sdkp->device;
 	bool v;
@@ -248,6 +254,7 @@ static DEVICE_ATTR_RW(manage_start_stop);
 static ssize_t
 allow_restart_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 
 	return sprintf(buf, "%u\n", sdkp->device->allow_restart);
@@ -258,6 +265,7 @@ allow_restart_store(struct device *dev, struct device_attribute *attr,
 		    const char *buf, size_t count)
 {
 	bool v;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	struct scsi_device *sdp = sdkp->device;
 
@@ -279,6 +287,7 @@ static DEVICE_ATTR_RW(allow_restart);
 static ssize_t
 cache_type_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	int ct = sdkp->RCD + 2*sdkp->WCE;
 
@@ -289,6 +298,7 @@ static DEVICE_ATTR_RW(cache_type);
 static ssize_t
 FUA_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 
 	return sprintf(buf, "%u\n", sdkp->DPOFUA);
@@ -299,6 +309,7 @@ static ssize_t
 protection_type_show(struct device *dev, struct device_attribute *attr,
 		     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 
 	return sprintf(buf, "%u\n", sdkp->protection_type);
@@ -308,6 +319,7 @@ static ssize_t
 protection_type_store(struct device *dev, struct device_attribute *attr,
 		      const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	unsigned int val;
 	int err;
@@ -331,6 +343,7 @@ static ssize_t
 protection_mode_show(struct device *dev, struct device_attribute *attr,
 		     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	struct scsi_device *sdp = sdkp->device;
 	unsigned int dif, dix;
@@ -353,6 +366,7 @@ static DEVICE_ATTR_RO(protection_mode);
 static ssize_t
 app_tag_own_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 
 	return sprintf(buf, "%u\n", sdkp->ATO);
@@ -363,6 +377,7 @@ static ssize_t
 thin_provisioning_show(struct device *dev, struct device_attribute *attr,
 		       char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 
 	return sprintf(buf, "%u\n", sdkp->lbpme);
@@ -383,6 +398,7 @@ static ssize_t
 provisioning_mode_show(struct device *dev, struct device_attribute *attr,
 		       char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 
 	return sprintf(buf, "%s\n", lbp_mode[sdkp->provisioning_mode]);
@@ -392,6 +408,7 @@ static ssize_t
 provisioning_mode_store(struct device *dev, struct device_attribute *attr,
 			const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	struct scsi_device *sdp = sdkp->device;
 	int mode;
@@ -429,6 +446,7 @@ static ssize_t
 zeroing_mode_show(struct device *dev, struct device_attribute *attr,
 		  char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 
 	return sprintf(buf, "%s\n", zeroing_mode[sdkp->zeroing_mode]);
@@ -438,6 +456,7 @@ static ssize_t
 zeroing_mode_store(struct device *dev, struct device_attribute *attr,
 		   const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	int mode;
 
@@ -458,6 +477,7 @@ static ssize_t
 max_medium_access_timeouts_show(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 
 	return sprintf(buf, "%u\n", sdkp->max_medium_access_timeouts);
@@ -468,6 +488,7 @@ max_medium_access_timeouts_store(struct device *dev,
 				 struct device_attribute *attr, const char *buf,
 				 size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	int err;
 
@@ -484,6 +505,7 @@ static ssize_t
 max_write_same_blocks_show(struct device *dev, struct device_attribute *attr,
 			   char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 
 	return sprintf(buf, "%u\n", sdkp->max_ws_blocks);
@@ -493,6 +515,7 @@ static ssize_t
 max_write_same_blocks_store(struct device *dev, struct device_attribute *attr,
 			    const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	struct scsi_device *sdp = sdkp->device;
 	unsigned long max;
@@ -579,6 +602,7 @@ static struct scsi_driver sd_template = {
  */
 static struct kobject *sd_default_probe(dev_t devt, int *partno, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -607,6 +631,7 @@ static int sd_major(int major_idx)
 		return SCSI_DISK8_MAJOR + major_idx - 8;
 	default:
 		BUG();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;	/* shut up gcc */
 	}
 }
@@ -618,6 +643,7 @@ static struct scsi_disk *scsi_disk_get(struct gendisk *disk)
 	mutex_lock(&sd_ref_mutex);
 
 	if (disk->private_data) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdkp = scsi_disk(disk);
 		if (scsi_device_get(sdkp->device) == 0)
 			get_device(&sdkp->dev);
@@ -662,6 +688,7 @@ static unsigned char sd_setup_protect_cmnd(struct scsi_cmnd *scmd,
 					   unsigned int dix, unsigned int dif)
 {
 	struct bio *bio = scmd->request->bio;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int prot_op = sd_prot_op(rq_data_dir(scmd->request), dix, dif);
 	unsigned int protect = 0;
 
@@ -754,6 +781,7 @@ static int sd_setup_unmap_cmnd(struct scsi_cmnd *cmd)
 {
 	struct scsi_device *sdp = cmd->device;
 	struct request *rq = cmd->request;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u64 sector = blk_rq_pos(rq) >> (ilog2(sdp->sector_size) - 9);
 	u32 nr_sectors = blk_rq_sectors(rq) >> (ilog2(sdp->sector_size) - 9);
 	unsigned int data_len = 24;
@@ -788,6 +816,7 @@ static int sd_setup_write_same16_cmnd(struct scsi_cmnd *cmd, bool unmap)
 {
 	struct scsi_device *sdp = cmd->device;
 	struct request *rq = cmd->request;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u64 sector = blk_rq_pos(rq) >> (ilog2(sdp->sector_size) - 9);
 	u32 nr_sectors = blk_rq_sectors(rq) >> (ilog2(sdp->sector_size) - 9);
 	u32 data_len = sdp->sector_size;
@@ -818,6 +847,7 @@ static int sd_setup_write_same10_cmnd(struct scsi_cmnd *cmd, bool unmap)
 {
 	struct scsi_device *sdp = cmd->device;
 	struct request *rq = cmd->request;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u64 sector = blk_rq_pos(rq) >> (ilog2(sdp->sector_size) - 9);
 	u32 nr_sectors = blk_rq_sectors(rq) >> (ilog2(sdp->sector_size) - 9);
 	u32 data_len = sdp->sector_size;
@@ -849,6 +879,7 @@ static int sd_setup_write_zeroes_cmnd(struct scsi_cmnd *cmd)
 	struct request *rq = cmd->request;
 	struct scsi_device *sdp = cmd->device;
 	struct scsi_disk *sdkp = scsi_disk(rq->rq_disk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u64 sector = blk_rq_pos(rq) >> (ilog2(sdp->sector_size) - 9);
 	u32 nr_sectors = blk_rq_sectors(rq) >> (ilog2(sdp->sector_size) - 9);
 	int ret;
@@ -885,6 +916,7 @@ static void sd_config_write_same(struct scsi_disk *sdkp)
 	unsigned int logical_block_size = sdkp->device->sector_size;
 
 	if (sdkp->device->no_write_same) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdkp->max_ws_blocks = 0;
 		goto out;
 	}
@@ -940,7 +972,9 @@ static int sd_setup_write_same_cmnd(struct scsi_cmnd *cmd)
 	int ret;
 
 	if (sdkp->device->no_write_same)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return BLKPREP_INVALID;
+}
 
 	BUG_ON(bio_offset(bio) || bio_iovec(bio).bv_len != sdp->sector_size);
 
@@ -1016,6 +1050,7 @@ static int sd_setup_read_write_cmnd(struct scsi_cmnd *SCpnt)
 	sector_t threshold;
 	unsigned int this_count = blk_rq_sectors(rq);
 	unsigned int dif, dix;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bool zoned_write = sd_is_zoned(sdkp) && rq_data_dir(rq) == WRITE;
 	int ret;
 	unsigned char protect;
@@ -1295,7 +1330,9 @@ static void sd_uninit_command(struct scsi_cmnd *SCpnt)
 	u8 *cmnd;
 
 	if (SCpnt->flags & SCMD_ZONE_WRITE_LOCK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sd_zbc_write_unlock_zone(SCpnt);
+}
 
 	if (rq->rq_flags & RQF_SPECIAL_PAYLOAD)
 		__free_page(rq->special_vec.bv_page);
@@ -1325,6 +1362,7 @@ static void sd_uninit_command(struct scsi_cmnd *SCpnt)
  **/
 static int sd_open(struct block_device *bdev, fmode_t mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = scsi_disk_get(bdev->bd_disk);
 	struct scsi_device *sdev;
 	int retval;
@@ -1399,6 +1437,7 @@ static int sd_open(struct block_device *bdev, fmode_t mode)
  **/
 static void sd_release(struct gendisk *disk, fmode_t mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = scsi_disk(disk);
 	struct scsi_device *sdev = sdkp->device;
 
@@ -1419,6 +1458,7 @@ static void sd_release(struct gendisk *disk, fmode_t mode)
 
 static int sd_getgeo(struct block_device *bdev, struct hd_geometry *geo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = scsi_disk(bdev->bd_disk);
 	struct scsi_device *sdp = sdkp->device;
 	struct Scsi_Host *host = sdp->host;
@@ -1470,7 +1510,9 @@ static int sd_ioctl(struct block_device *bdev, fmode_t mode,
 
 	error = scsi_verify_blk_ioctl(bdev, cmd);
 	if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	/*
 	 * If we are in the middle of error recovery, don't let anyone
@@ -1509,6 +1551,7 @@ static int sd_ioctl(struct block_device *bdev, fmode_t mode,
 
 static void set_media_not_present(struct scsi_disk *sdkp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sdkp->media_present)
 		sdkp->device->changed = 1;
 
@@ -1521,6 +1564,7 @@ static void set_media_not_present(struct scsi_disk *sdkp)
 static int media_not_present(struct scsi_disk *sdkp,
 			     struct scsi_sense_hdr *sshdr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!scsi_sense_valid(sshdr))
 		return 0;
 
@@ -1548,6 +1592,7 @@ static int media_not_present(struct scsi_disk *sdkp,
  **/
 static unsigned int sd_check_events(struct gendisk *disk, unsigned int clearing)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = scsi_disk_get(disk);
 	struct scsi_device *sdp;
 	int retval;
@@ -1623,7 +1668,9 @@ static int sd_sync_cache(struct scsi_disk *sdkp, struct scsi_sense_hdr *sshdr)
 	struct scsi_sense_hdr my_sshdr;
 
 	if (!scsi_device_online(sdp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* caller might not be interested in sense, but we need it */
 	if (!sshdr)
@@ -1676,6 +1723,7 @@ static int sd_sync_cache(struct scsi_disk *sdkp, struct scsi_sense_hdr *sshdr)
 
 static void sd_rescan(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = dev_get_drvdata(dev);
 
 	revalidate_disk(sdkp->disk);
@@ -1690,6 +1738,7 @@ static void sd_rescan(struct device *dev)
 static int sd_compat_ioctl(struct block_device *bdev, fmode_t mode,
 			   unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = scsi_disk(bdev->bd_disk)->device;
 	int error;
 
@@ -1709,6 +1758,7 @@ static int sd_compat_ioctl(struct block_device *bdev, fmode_t mode,
 
 static char sd_pr_type(enum pr_type type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (type) {
 	case PR_WRITE_EXCLUSIVE:
 		return 0x01;
@@ -1730,6 +1780,7 @@ static char sd_pr_type(enum pr_type type)
 static int sd_pr_command(struct block_device *bdev, u8 sa,
 		u64 key, u64 sa_key, u8 type, u8 flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = scsi_disk(bdev->bd_disk)->device;
 	struct scsi_sense_hdr sshdr;
 	int result;
@@ -1760,6 +1811,7 @@ static int sd_pr_command(struct block_device *bdev, u8 sa,
 static int sd_pr_register(struct block_device *bdev, u64 old_key, u64 new_key,
 		u32 flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (flags & ~PR_FL_IGNORE_KEY)
 		return -EOPNOTSUPP;
 	return sd_pr_command(bdev, (flags & PR_FL_IGNORE_KEY) ? 0x06 : 0x00,
@@ -1770,6 +1822,7 @@ static int sd_pr_register(struct block_device *bdev, u64 old_key, u64 new_key,
 static int sd_pr_reserve(struct block_device *bdev, u64 key, enum pr_type type,
 		u32 flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (flags)
 		return -EOPNOTSUPP;
 	return sd_pr_command(bdev, 0x01, key, 0, sd_pr_type(type), 0);
@@ -1777,18 +1830,21 @@ static int sd_pr_reserve(struct block_device *bdev, u64 key, enum pr_type type,
 
 static int sd_pr_release(struct block_device *bdev, u64 key, enum pr_type type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sd_pr_command(bdev, 0x02, key, 0, sd_pr_type(type), 0);
 }
 
 static int sd_pr_preempt(struct block_device *bdev, u64 old_key, u64 new_key,
 		enum pr_type type, bool abort)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sd_pr_command(bdev, abort ? 0x05 : 0x04, old_key, new_key,
 			     sd_pr_type(type), 0);
 }
 
 static int sd_pr_clear(struct block_device *bdev, u64 key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sd_pr_command(bdev, 0x03, key, 0, 0, 0);
 }
 
@@ -1829,6 +1885,7 @@ static const struct block_device_operations sd_fops = {
  **/
 static void sd_eh_reset(struct scsi_cmnd *scmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = scsi_disk(scmd->request->rq_disk);
 
 	/* New SCSI EH run, reset gate variable */
@@ -1849,6 +1906,7 @@ static void sd_eh_reset(struct scsi_cmnd *scmd)
  **/
 static int sd_eh_action(struct scsi_cmnd *scmd, int eh_disp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = scsi_disk(scmd->request->rq_disk);
 	struct scsi_device *sdev = scmd->device;
 
@@ -1900,7 +1958,9 @@ static unsigned int sd_completed_bytes(struct scsi_cmnd *scmd)
 	 * block size (e.g. INQUIRY on a 4K disk).
 	 */
 	if (scsi_bufflen(scmd) <= sdev->sector_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Check if we have a 'bad_lba' information */
 	if (!scsi_get_sense_info_fld(scmd->sense_buffer,
@@ -1941,6 +2001,7 @@ static unsigned int sd_completed_bytes(struct scsi_cmnd *scmd)
 static int sd_done(struct scsi_cmnd *SCpnt)
 {
 	int result = SCpnt->result;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int good_bytes = result ? 0 : scsi_bufflen(SCpnt);
 	unsigned int sector_size = SCpnt->device->sector_size;
 	unsigned int resid;
@@ -2082,6 +2143,7 @@ sd_spinup_disk(struct scsi_disk *sdkp)
 	/* Spin up drives, as required.  Only do this at boot time */
 	/* Spinup needs to be done for module loads too. */
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retries = 0;
 
 		do {
@@ -2197,6 +2259,7 @@ static int sd_read_protection_type(struct scsi_disk *sdkp, unsigned char *buffer
 	u8 type;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (scsi_device_protection(sdp) == 0 || (buffer[12] & 1) == 0)
 		return ret;
 
@@ -2233,6 +2296,7 @@ static void read_capacity_error(struct scsi_disk *sdkp, struct scsi_device *sdp,
 			struct scsi_sense_hdr *sshdr, int sense_valid,
 			int the_result)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (driver_byte(the_result) & DRIVER_SENSE)
 		sd_print_sense_hdr(sdkp, sshdr);
 	else
@@ -2269,6 +2333,7 @@ static void read_capacity_error(struct scsi_disk *sdkp, struct scsi_device *sdp,
  */
 static bool sd_addressable_capacity(u64 lba, unsigned int sector_size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u64 last_sector = (lba + 1ULL) << (ilog2(sector_size) - 9);
 
 	if (sizeof(sector_t) == 4 && last_sector > U32_MAX)
@@ -2290,7 +2355,9 @@ static int read_capacity_16(struct scsi_disk *sdkp, struct scsi_device *sdp,
 	unsigned sector_size;
 
 	if (sdp->no_read_capacity_16)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	do {
 		memset(cmd, 0, 16);
@@ -2388,6 +2455,7 @@ static int read_capacity_10(struct scsi_disk *sdkp, struct scsi_device *sdp,
 	unsigned sector_size;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd[0] = READ_CAPACITY;
 		memset(&cmd[1], 0, 9);
 		memset(buffer, 0, 8);
@@ -2446,6 +2514,7 @@ static int read_capacity_10(struct scsi_disk *sdkp, struct scsi_device *sdp,
 
 static int sd_try_rc16_first(struct scsi_device *sdp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sdp->host->max_cmd_len < 16)
 		return 0;
 	if (sdp->try_rc_10_first)
@@ -2467,6 +2536,7 @@ sd_read_capacity(struct scsi_disk *sdkp, unsigned char *buffer)
 	struct scsi_device *sdp = sdkp->device;
 
 	if (sd_try_rc16_first(sdp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sector_size = read_capacity_16(sdkp, sdp, buffer);
 		if (sector_size == -EOVERFLOW)
 			goto got_data;
@@ -2570,6 +2640,7 @@ sd_print_capacity(struct scsi_disk *sdkp,
 			STRING_UNITS_10, cap_str_10,
 			sizeof(cap_str_10));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sdkp->first_scan || old_capacity != sdkp->capacity) {
 		sd_printk(KERN_NOTICE, sdkp,
 			  "%llu %d-byte logical blocks: (%s/%s)\n",
@@ -2591,6 +2662,7 @@ sd_do_mode_sense(struct scsi_device *sdp, int dbd, int modepage,
 		 unsigned char *buffer, int len, struct scsi_mode_data *data,
 		 struct scsi_sense_hdr *sshdr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scsi_mode_sense(sdp, dbd, modepage, buffer, len,
 			       SD_TIMEOUT, SD_MAX_RETRIES, data,
 			       sshdr);
@@ -2610,6 +2682,7 @@ sd_read_write_protect_flag(struct scsi_disk *sdkp, unsigned char *buffer)
 
 	set_disk_ro(sdkp->disk, 0);
 	if (sdp->skip_ms_page_3f) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sd_first_printk(KERN_NOTICE, sdkp, "Assuming Write Enabled\n");
 		return;
 	}
@@ -2676,7 +2749,9 @@ sd_read_cache_type(struct scsi_disk *sdkp, unsigned char *buffer)
 
 
 	if (sdkp->cache_override)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	first_len = 4;
 	if (sdp->skip_ms_page_8) {
@@ -2843,6 +2918,7 @@ static void sd_read_app_tag_own(struct scsi_disk *sdkp, unsigned char *buffer)
 	struct scsi_mode_data data;
 	struct scsi_sense_hdr sshdr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sdp->type != TYPE_DISK && sdp->type != TYPE_ZBC)
 		return;
 
@@ -3000,7 +3076,9 @@ static void sd_read_block_provisioning(struct scsi_disk *sdkp)
 	const int vpd_len = 8;
 
 	if (sdkp->lbpme == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	buffer = kmalloc(vpd_len, GFP_KERNEL);
 
@@ -3021,6 +3099,7 @@ static void sd_read_write_same(struct scsi_disk *sdkp, unsigned char *buffer)
 	struct scsi_device *sdev = sdkp->device;
 
 	if (sdev->host->no_write_same) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev->no_write_same = 1;
 
 		return;
@@ -3052,7 +3131,9 @@ static void sd_read_security(struct scsi_disk *sdkp, unsigned char *buffer)
 	struct scsi_device *sdev = sdkp->device;
 
 	if (!sdev->security_supported)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (scsi_report_opcode(sdev, buffer, SD_BUF_SIZE,
 			SECURITY_PROTOCOL_IN) == 1 &&
@@ -3068,6 +3149,7 @@ static void sd_read_security(struct scsi_disk *sdkp, unsigned char *buffer)
  **/
 static int sd_revalidate_disk(struct gendisk *disk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = scsi_disk(disk);
 	struct scsi_device *sdp = sdkp->device;
 	struct request_queue *q = sdkp->disk->queue;
@@ -3181,6 +3263,7 @@ static int sd_revalidate_disk(struct gendisk *disk)
  */
 static void sd_unlock_native_capacity(struct gendisk *disk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *sdev = scsi_disk(disk)->device;
 
 	if (sdev->host->hostt->unlock_native_capacity)
@@ -3221,6 +3304,7 @@ static int sd_format_disk_name(char *prefix, int index, char *buf, int buflen)
 	*p = '\0';
 	unit = base;
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (p == begin)
 			return -EINVAL;
 		*--p = 'a' + (index % unit);
@@ -3272,6 +3356,7 @@ static void sd_probe_async(void *data, async_cookie_t cookie)
 
 	gd->flags = GENHD_FL_EXT_DEVT;
 	if (sdp->removable) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gd->flags |= GENHD_FL_REMOVABLE;
 		gd->events |= DISK_EVENT_MEDIA_CHANGE;
 	}
@@ -3336,35 +3421,45 @@ static int sd_probe(struct device *dev)
 	SCSI_LOG_HLQUEUE(3, sdev_printk(KERN_INFO, sdp,
 					"sd_probe\n"));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -ENOMEM;
 	sdkp = kzalloc(sizeof(*sdkp), GFP_KERNEL);
 	if (!sdkp)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	gd = alloc_disk(SD_MINORS);
 	if (!gd)
 		goto out_free;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ida_pre_get(&sd_index_ida, GFP_KERNEL))
 			goto out_put;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&sd_index_lock);
 		error = ida_get_new(&sd_index_ida, &index);
 		spin_unlock(&sd_index_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while (error == -EAGAIN);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev_printk(KERN_WARNING, sdp, "sd_probe: memory exhausted.\n");
 		goto out_put;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = sd_format_disk_name("sd", index, gd->disk_name, DISK_NAME_LEN);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev_printk(KERN_WARNING, sdp, "SCSI disk (sd) name length exceeded.\n");
 		goto out_free_index;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sdkp->device = sdp;
 	sdkp->driver = &sd_template;
 	sdkp->disk = gd;
@@ -3373,13 +3468,17 @@ static int sd_probe(struct device *dev)
 	atomic_set(&sdkp->device->ioerr_cnt, 0);
 
 	if (!sdp->request_queue->rq_timeout) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sdp->type != TYPE_MOD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			blk_queue_rq_timeout(sdp->request_queue, SD_TIMEOUT);
+}
 		else
 			blk_queue_rq_timeout(sdp->request_queue,
 					     SD_MOD_TIMEOUT);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_initialize(&sdkp->dev);
 	sdkp->dev.parent = dev;
 	sdkp->dev.class = &sd_disk_class;
@@ -3389,6 +3488,7 @@ static int sd_probe(struct device *dev)
 	if (error)
 		goto out_free_index;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	get_device(dev);
 	dev_set_drvdata(dev, sdkp);
 
@@ -3462,6 +3562,7 @@ static int sd_remove(struct device *dev)
  **/
 static void scsi_disk_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	struct gendisk *disk = sdkp->disk;
 	
@@ -3484,7 +3585,9 @@ static int sd_start_stop_device(struct scsi_disk *sdkp, int start)
 	int res;
 
 	if (start)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd[4] |= 1;	/* START */
+}
 
 	if (sdp->start_stop_pwr_cond)
 		cmd[4] |= start ? 1 << 4 : 3 << 4;	/* Active or Standby */
@@ -3518,6 +3621,7 @@ static int sd_start_stop_device(struct scsi_disk *sdkp, int start)
  */
 static void sd_shutdown(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = dev_get_drvdata(dev);
 
 	if (!sdkp)
@@ -3539,6 +3643,7 @@ static void sd_shutdown(struct device *dev)
 
 static int sd_suspend_common(struct device *dev, bool ignore_stop_errors)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = dev_get_drvdata(dev);
 	struct scsi_sense_hdr sshdr;
 	int ret = 0;
@@ -3581,16 +3686,19 @@ static int sd_suspend_common(struct device *dev, bool ignore_stop_errors)
 
 static int sd_suspend_system(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sd_suspend_common(dev, true);
 }
 
 static int sd_suspend_runtime(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sd_suspend_common(dev, false);
 }
 
 static int sd_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_disk *sdkp = dev_get_drvdata(dev);
 	int ret;
 
@@ -3628,7 +3736,9 @@ static int __init init_sd(void)
 	}
 
 	if (!majors)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	err = class_register(&sd_disk_class);
 	if (err)
@@ -3637,6 +3747,7 @@ static int __init init_sd(void)
 	sd_cdb_cache = kmem_cache_create("sd_ext_cdb", SD_EXT_CDB_SIZE,
 					 0, 0, NULL);
 	if (!sd_cdb_cache) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "sd: can't init extended cdb cache\n");
 		err = -ENOMEM;
 		goto err_out_class;
@@ -3644,6 +3755,7 @@ static int __init init_sd(void)
 
 	sd_cdb_pool = mempool_create_slab_pool(SD_MEMPOOL_SIZE, sd_cdb_cache);
 	if (!sd_cdb_pool) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "sd: can't init extended cdb pool\n");
 		err = -ENOMEM;
 		goto err_out_cache;
@@ -3653,6 +3765,7 @@ static int __init init_sd(void)
 	if (err)
 		goto err_out_driver;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_out_driver:
@@ -3665,7 +3778,10 @@ static int __init init_sd(void)
 	class_unregister(&sd_disk_class);
 err_out:
 	for (i = 0; i < SD_MAJORS; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unregister_blkdev(sd_major(i), "sd");
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -3686,6 +3802,7 @@ static void __exit exit_sd(void)
 
 	class_unregister(&sd_disk_class);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < SD_MAJORS; i++) {
 		blk_unregister_region(sd_major(i), SD_MINORS);
 		unregister_blkdev(sd_major(i), "sd");
@@ -3705,6 +3822,7 @@ static void sd_print_sense_hdr(struct scsi_disk *sdkp,
 static void sd_print_result(const struct scsi_disk *sdkp, const char *msg,
 			    int result)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const char *hb_string = scsi_hostbyte_string(result);
 	const char *db_string = scsi_driverbyte_string(result);
 
diff --git a/drivers/scsi/sg.c b/drivers/scsi/sg.c
index aa28874..cf9106a 100644
--- a/drivers/scsi/sg.c
+++ b/drivers/scsi/sg.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  History:
  *  Started: Aug 9 by Lawrence Foard (entropy@world.std.com),
@@ -1242,6 +1244,7 @@ sg_mmap(struct file *filp, struct vm_area_struct *vma)
 	int k, length;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!filp) || (!vma) || (!(sfp = (Sg_fd *) filp->private_data)))
 		return -ENXIO;
 	req_sz = vma->vm_end - vma->vm_start;
@@ -1277,6 +1280,7 @@ sg_mmap(struct file *filp, struct vm_area_struct *vma)
 static void
 sg_rq_end_io_usercontext(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sg_request *srp = container_of(work, struct sg_request, ew.work);
 	struct sg_fd *sfp = srp->parentfp;
 
@@ -1301,6 +1305,7 @@ sg_rq_end_io(struct request *rq, blk_status_t status)
 	char *sense;
 	int result, resid, done = 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(srp->done != 0))
 		return;
 
@@ -1418,6 +1423,7 @@ sg_alloc(struct gendisk *disk, struct scsi_device *scsidp)
 
 	sdp = kzalloc(sizeof(Sg_device), GFP_KERNEL);
 	if (!sdp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sdev_printk(KERN_WARNING, scsidp, "%s: kmalloc Sg_device "
 			    "failure\n", __func__);
 		return ERR_PTR(-ENOMEM);
@@ -1428,12 +1434,15 @@ sg_alloc(struct gendisk *disk, struct scsi_device *scsidp)
 
 	error = idr_alloc(&sg_index_idr, sdp, 0, SG_MAX_DEVS, GFP_NOWAIT);
 	if (error < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (error == -ENOSPC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sdev_printk(KERN_WARNING, scsidp,
 				    "Unable to attach sg device type=%d, minor number exceeds %d\n",
 				    scsidp->type, SG_MAX_DEVS - 1);
 			error = -ENODEV;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sdev_printk(KERN_WARNING, scsidp, "%s: idr "
 				    "allocation Sg_device failure: %d\n",
 				    __func__, error);
@@ -1451,6 +1460,7 @@ sg_alloc(struct gendisk *disk, struct scsi_device *scsidp)
 	mutex_init(&sdp->open_rel_lock);
 	INIT_LIST_HEAD(&sdp->sfds);
 	init_waitqueue_head(&sdp->open_wait);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&sdp->detaching, 0);
 	rwlock_init(&sdp->sfd_lock);
 	sdp->sg_tablesize = queue_max_segments(q);
@@ -1460,12 +1470,15 @@ sg_alloc(struct gendisk *disk, struct scsi_device *scsidp)
 
 out_unlock:
 	write_unlock_irqrestore(&sg_index_lock, iflags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	idr_preload_end();
 
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(sdp);
 		return ERR_PTR(error);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sdp;
 }
 
@@ -1481,6 +1494,7 @@ sg_add_device(struct device *cl_dev, struct class_interface *cl_intf)
 
 	disk = alloc_disk(1);
 	if (!disk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("%s: alloc_disk failed\n", __func__);
 		return -ENOMEM;
 	}
@@ -1489,6 +1503,7 @@ sg_add_device(struct device *cl_dev, struct class_interface *cl_intf)
 	error = -ENOMEM;
 	cdev = cdev_alloc();
 	if (!cdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("%s: cdev_alloc failed\n", __func__);
 		goto out;
 	}
@@ -1497,6 +1512,7 @@ sg_add_device(struct device *cl_dev, struct class_interface *cl_intf)
 
 	sdp = sg_alloc(disk, scsidp);
 	if (IS_ERR(sdp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("%s: sg_alloc failed\n", __func__);
 		error = PTR_ERR(sdp);
 		goto out;
@@ -1515,6 +1531,7 @@ sg_add_device(struct device *cl_dev, struct class_interface *cl_intf)
 						      sdp->index),
 						sdp, "%s", disk->disk_name);
 		if (IS_ERR(sg_class_member)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("%s: device_create failed\n", __func__);
 			error = PTR_ERR(sg_class_member);
 			goto cdev_add_err;
@@ -1522,10 +1539,14 @@ sg_add_device(struct device *cl_dev, struct class_interface *cl_intf)
 		error = sysfs_create_link(&scsidp->sdev_gendev.kobj,
 					  &sg_class_member->kobj, "generic");
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("%s: unable to make symlink 'generic' back "
 			       "to sg%d\n", __func__, sdp->index);
+}
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("%s: sg_sys Invalid\n", __func__);
+}
 
 	sdev_printk(KERN_NOTICE, scsidp, "Attached scsi generic sg%d "
 		    "type %d\n", sdp->index, scsidp->type);
@@ -1536,20 +1557,27 @@ sg_add_device(struct device *cl_dev, struct class_interface *cl_intf)
 
 cdev_add_err:
 	write_lock_irqsave(&sg_index_lock, iflags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	idr_remove(&sg_index_idr, sdp->index);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_unlock_irqrestore(&sg_index_lock, iflags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(sdp);
 
 out:
 	put_disk(disk);
 	if (cdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cdev_del(cdev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
 static void
 sg_device_destroy(struct kref *kref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sg_device *sdp = container_of(kref, struct sg_device, d_ref);
 	unsigned long flags;
 
@@ -1572,6 +1600,7 @@ sg_device_destroy(struct kref *kref)
 static void
 sg_remove_device(struct device *cl_dev, struct class_interface *cl_intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_device *scsidp = to_scsi_device(cl_dev->parent);
 	Sg_device *sdp = dev_get_drvdata(cl_dev);
 	unsigned long iflags;
@@ -1626,20 +1655,26 @@ init_sg(void)
 	int rc;
 
 	if (scatter_elem_sz < PAGE_SIZE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scatter_elem_sz = PAGE_SIZE;
 		scatter_elem_sz_prev = scatter_elem_sz;
 	}
 	if (def_reserved_size >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sg_big_buff = def_reserved_size;
+}
 	else
 		def_reserved_size = sg_big_buff;
 
 	rc = register_chrdev_region(MKDEV(SCSI_GENERIC_MAJOR, 0), 
 				    SG_MAX_DEVS, "sg");
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
         sg_sysfs_class = class_create(THIS_MODULE, "scsi_generic");
         if ( IS_ERR(sg_sysfs_class) ) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = PTR_ERR(sg_sysfs_class);
 		goto err_out;
         }
@@ -1651,6 +1686,7 @@ init_sg(void)
 #endif				/* CONFIG_SCSI_PROC_FS */
 		return 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	class_destroy(sg_sysfs_class);
 err_out:
 	unregister_chrdev_region(MKDEV(SCSI_GENERIC_MAJOR, 0), SG_MAX_DEVS);
@@ -1686,6 +1722,7 @@ sg_start_req(Sg_request *srp, unsigned char *cmd)
 	Sg_scatter_hold *rsv_schp = &sfp->reserve;
 	struct request_queue *q = sfp->parentdp->device->request_queue;
 	struct rq_map_data *md, map_data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int rw = hp->dxfer_direction == SG_DXFER_TO_DEV ? WRITE : READ;
 	unsigned char *long_cmdp = NULL;
 
@@ -1817,7 +1854,9 @@ sg_finish_rem_req(Sg_request *srp)
 				      "sg_finish_rem_req: res_used=%d\n",
 				      (int) srp->res_used));
 	if (srp->bio)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = blk_rq_unmap_user(srp->bio);
+}
 
 	if (srp->rq) {
 		scsi_req_free_cmd(scsi_req(srp->rq));
@@ -1840,7 +1879,9 @@ sg_build_sgat(Sg_scatter_hold * schp, const Sg_fd * sfp, int tablesize)
 
 	schp->pages = kzalloc(sg_bufflen, gfp_flags);
 	if (!schp->pages)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	schp->sglist_len = sg_bufflen;
 	return tablesize;	/* number of scat_gath elements allocated */
 }
@@ -1855,7 +1896,9 @@ sg_build_indirect(Sg_scatter_hold * schp, Sg_fd * sfp, int buff_size)
 	struct sg_device *sdp = sfp->parentdp;
 
 	if (blk_size < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	if (0 == blk_size)
 		++blk_size;	/* don't know why */
 	/* round request up to next highest SG_SECTOR_SZ byte boundary */
@@ -1935,6 +1978,7 @@ sg_remove_scat(Sg_fd * sfp, Sg_scatter_hold * schp)
 {
 	SCSI_LOG_TIMEOUT(4, sg_printk(KERN_INFO, sfp->parentdp,
 			 "sg_remove_scat: k_use_sg=%d\n", schp->k_use_sg));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (schp->pages && schp->sglist_len > 0) {
 		if (!schp->dio_in_use) {
 			int k;
@@ -1962,6 +2006,7 @@ sg_read_oxfer(Sg_request * srp, char __user *outp, int num_read_xfer)
 	SCSI_LOG_TIMEOUT(4, sg_printk(KERN_INFO, srp->parentfp->parentdp,
 			 "sg_read_oxfer: num_read_xfer=%d\n",
 			 num_read_xfer));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!outp) || (num_read_xfer <= 0))
 		return 0;
 
@@ -1994,6 +2039,7 @@ sg_build_reserve(Sg_fd * sfp, int req_size)
 	SCSI_LOG_TIMEOUT(4, sg_printk(KERN_INFO, sfp->parentdp,
 			 "sg_build_reserve: req_size=%d\n", req_size));
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (req_size < PAGE_SIZE)
 			req_size = PAGE_SIZE;
 		if (0 == sg_build_indirect(schp, sfp, req_size))
@@ -2017,6 +2063,7 @@ sg_link_reserve(Sg_fd * sfp, Sg_request * srp, int size)
 	rem = size;
 
 	num = 1 << (PAGE_SHIFT + rsv_schp->page_order);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (k = 0; k < rsv_schp->k_use_sg; k++) {
 		if (rem <= num) {
 			req_schp->k_use_sg = k + 1;
@@ -2059,6 +2106,7 @@ sg_get_rq_mark(Sg_fd * sfp, int pack_id)
 	Sg_request *resp;
 	unsigned long iflags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_lock_irqsave(&sfp->rq_list_lock, iflags);
 	list_for_each_entry(resp, &sfp->rq_list, entry) {
 		/* look for requests that are ready + not SG_IO owned */
@@ -2081,6 +2129,7 @@ sg_add_request(Sg_fd * sfp)
 	unsigned long iflags;
 	Sg_request *rp = sfp->req_arr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_lock_irqsave(&sfp->rq_list_lock, iflags);
 	if (!list_empty(&sfp->rq_list)) {
 		if (!sfp->cmd_q)
@@ -2111,6 +2160,7 @@ sg_remove_request(Sg_fd * sfp, Sg_request * srp)
 	unsigned long iflags;
 	int res = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!sfp || !srp || list_empty(&sfp->rq_list))
 		return res;
 	write_lock_irqsave(&sfp->rq_list_lock, iflags);
@@ -2132,7 +2182,9 @@ sg_add_sfp(Sg_device * sdp)
 
 	sfp = kzalloc(sizeof(*sfp), GFP_ATOMIC | __GFP_NOWARN);
 	if (!sfp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	init_waitqueue_head(&sfp->read_wait);
 	rwlock_init(&sfp->rq_list_lock);
@@ -2173,6 +2225,7 @@ sg_add_sfp(Sg_device * sdp)
 static void
 sg_remove_sfp_usercontext(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sg_fd *sfp = container_of(work, struct sg_fd, ew.work);
 	struct sg_device *sdp = sfp->parentdp;
 	Sg_request *srp;
@@ -2208,6 +2261,7 @@ sg_remove_sfp_usercontext(struct work_struct *work)
 static void
 sg_remove_sfp(struct kref *kref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sg_fd *sfp = container_of(kref, struct sg_fd, f_ref);
 	struct sg_device *sdp = sfp->parentdp;
 	unsigned long iflags;
@@ -2227,7 +2281,9 @@ sg_idr_max_id(int id, void *p, void *data)
 	int *k = data;
 
 	if (*k < id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*k = id;
+}
 
 	return 0;
 }
@@ -2238,6 +2294,7 @@ sg_last_dev(void)
 	int k = -1;
 	unsigned long iflags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_lock_irqsave(&sg_index_lock, iflags);
 	idr_for_each(&sg_index_idr, sg_idr_max_id, &k);
 	read_unlock_irqrestore(&sg_index_lock, iflags);
@@ -2248,6 +2305,7 @@ sg_last_dev(void)
 /* must be called with sg_index_lock held */
 static Sg_device *sg_lookup_dev(int dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return idr_find(&sg_index_idr, dev);
 }
 
@@ -2257,6 +2315,7 @@ sg_get_dev(int dev)
 	struct sg_device *sdp;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_lock_irqsave(&sg_index_lock, flags);
 	sdp = sg_lookup_dev(dev);
 	if (!sdp)
@@ -2400,7 +2459,9 @@ sg_proc_init(void)
 
 	sg_proc_sgp = proc_mkdir(sg_proc_sg_dirname, NULL);
 	if (!sg_proc_sgp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	for (k = 0; k < num_leaves; ++k) {
 		const struct sg_proc_leaf *leaf = &sg_proc_leaf_arr[k];
 		umode_t mask = leaf->fops->write ? S_IRUGO | S_IWUSR : S_IRUGO;
@@ -2416,7 +2477,9 @@ sg_proc_cleanup(void)
 	int num_leaves = ARRAY_SIZE(sg_proc_leaf_arr);
 
 	if (!sg_proc_sgp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	for (k = 0; k < num_leaves; ++k)
 		remove_proc_entry(sg_proc_leaf_arr[k].name, sg_proc_sgp);
 	remove_proc_entry(sg_proc_sg_dirname, NULL);
@@ -2425,12 +2488,14 @@ sg_proc_cleanup(void)
 
 static int sg_proc_seq_show_int(struct seq_file *s, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_printf(s, "%d\n", *((int *)s->private));
 	return 0;
 }
 
 static int sg_proc_single_open_adio(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, sg_proc_seq_show_int, &sg_allow_dio);
 }
 
@@ -2441,6 +2506,7 @@ sg_proc_write_adio(struct file *filp, const char __user *buffer,
 	int err;
 	unsigned long num;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!capable(CAP_SYS_ADMIN) || !capable(CAP_SYS_RAWIO))
 		return -EACCES;
 	err = kstrtoul_from_user(buffer, count, 0, &num);
@@ -2452,6 +2518,7 @@ sg_proc_write_adio(struct file *filp, const char __user *buffer,
 
 static int sg_proc_single_open_dressz(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, sg_proc_seq_show_int, &sg_big_buff);
 }
 
@@ -2462,6 +2529,7 @@ sg_proc_write_dressz(struct file *filp, const char __user *buffer,
 	int err;
 	unsigned long k = ULONG_MAX;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!capable(CAP_SYS_ADMIN) || !capable(CAP_SYS_RAWIO))
 		return -EACCES;
 
@@ -2477,6 +2545,7 @@ sg_proc_write_dressz(struct file *filp, const char __user *buffer,
 
 static int sg_proc_seq_show_version(struct seq_file *s, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_printf(s, "%d\t%s [%s]\n", sg_version_num, SG_VERSION_STR,
 		   sg_version_date);
 	return 0;
@@ -2484,17 +2553,20 @@ static int sg_proc_seq_show_version(struct seq_file *s, void *v)
 
 static int sg_proc_single_open_version(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, sg_proc_seq_show_version, NULL);
 }
 
 static int sg_proc_seq_show_devhdr(struct seq_file *s, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_puts(s, "host\tchan\tid\tlun\ttype\topens\tqdepth\tbusy\tonline\n");
 	return 0;
 }
 
 static int sg_proc_single_open_devhdr(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, sg_proc_seq_show_devhdr, NULL);
 }
 
@@ -2505,6 +2577,7 @@ struct sg_proc_deviter {
 
 static void * dev_seq_start(struct seq_file *s, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sg_proc_deviter * it = kmalloc(sizeof(*it), GFP_KERNEL);
 
 	s->private = it;
@@ -2523,16 +2596,19 @@ static void * dev_seq_next(struct seq_file *s, void *v, loff_t *pos)
 	struct sg_proc_deviter * it = s->private;
 
 	*pos = ++it->index;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (it->index < it->max) ? it : NULL;
 }
 
 static void dev_seq_stop(struct seq_file *s, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(s->private);
 }
 
 static int sg_proc_open_dev(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
         return seq_open(file, &dev_seq_ops);
 }
 
@@ -2543,6 +2619,7 @@ static int sg_proc_seq_show_dev(struct seq_file *s, void *v)
 	struct scsi_device *scsidp;
 	unsigned long iflags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_lock_irqsave(&sg_index_lock, iflags);
 	sdp = it ? sg_lookup_dev(it->index) : NULL;
 	if ((NULL == sdp) || (NULL == sdp->device) ||
@@ -2564,6 +2641,7 @@ static int sg_proc_seq_show_dev(struct seq_file *s, void *v)
 
 static int sg_proc_open_devstrs(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
         return seq_open(file, &devstrs_seq_ops);
 }
 
@@ -2574,6 +2652,7 @@ static int sg_proc_seq_show_devstrs(struct seq_file *s, void *v)
 	struct scsi_device *scsidp;
 	unsigned long iflags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_lock_irqsave(&sg_index_lock, iflags);
 	sdp = it ? sg_lookup_dev(it->index) : NULL;
 	scsidp = sdp ? sdp->device : NULL;
@@ -2597,6 +2676,7 @@ static void sg_proc_debug_helper(struct seq_file *s, Sg_device * sdp)
 	unsigned int ms;
 
 	k = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(fp, &sdp->sfds, sfd_siblings) {
 		k++;
 		read_lock(&fp->rq_list_lock); /* irqs already disabled */
@@ -2652,6 +2732,7 @@ static void sg_proc_debug_helper(struct seq_file *s, Sg_device * sdp)
 
 static int sg_proc_open_debug(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
         return seq_open(file, &debug_seq_ops);
 }
 
@@ -2661,6 +2742,7 @@ static int sg_proc_seq_show_debug(struct seq_file *s, void *v)
 	Sg_device *sdp;
 	unsigned long iflags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (it && (0 == it->index))
 		seq_printf(s, "max_active_device=%d  def_reserved_size=%d\n",
 			   (int)it->max, sg_big_buff);
diff --git a/drivers/scsi/sr.c b/drivers/scsi/sr.c
index 9be34d3..ba0541b 100644
--- a/drivers/scsi/sr.c
+++ b/drivers/scsi/sr.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  sr.c Copyright (C) 1992 David Giller
  *           Copyright (C) 1993, 1994, 1995, 1999 Eric Youngdale
@@ -137,11 +139,13 @@ static void sr_kref_release(struct kref *kref);
 
 static inline struct scsi_cd *scsi_cd(struct gendisk *disk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return container_of(disk->private_data, struct scsi_cd, driver);
 }
 
 static int sr_runtime_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cd *cd = dev_get_drvdata(dev);
 
 	if (!cd)	/* E.g.: runtime suspend following sr_remove() */
@@ -164,9 +168,11 @@ static inline struct scsi_cd *scsi_cd_get(struct gendisk *disk)
 	mutex_lock(&sr_ref_mutex);
 	if (disk->private_data == NULL)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cd = scsi_cd(disk);
 	kref_get(&cd->kref);
 	if (scsi_device_get(cd->device)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kref_put(&cd->kref, sr_kref_release);
 		cd = NULL;
 	}
@@ -204,18 +210,28 @@ static unsigned int sr_get_events(struct scsi_device *sdev)
 	result = scsi_execute_req(sdev, cmd, DMA_FROM_DEVICE, buf, sizeof(buf),
 				  &sshdr, SR_TIMEOUT, MAX_RETRIES, NULL);
 	if (scsi_sense_valid(&sshdr) && sshdr.sense_key == UNIT_ATTENTION)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return DISK_EVENT_MEDIA_CHANGE;
+}
 
 	if (result || be16_to_cpu(eh->data_len) < sizeof(*med))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (eh->nea || eh->notification_class != 0x4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (med->media_event_code == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return DISK_EVENT_EJECT_REQUEST;
+}
 	else if (med->media_event_code == 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return DISK_EVENT_MEDIA_CHANGE;
+}
 	return 0;
 }
 
@@ -237,7 +253,9 @@ static unsigned int sr_check_events(struct cdrom_device_info *cdi,
 
 	/* no changer support */
 	if (CDSL_CURRENT != slot)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	events = sr_get_events(cd->device);
 	cd->get_event_changed |= events & DISK_EVENT_MEDIA_CHANGE;
@@ -249,6 +267,7 @@ static unsigned int sr_check_events(struct cdrom_device_info *cdi,
 	 * events for every open().
 	 */
 	if (cd->ignore_get_event) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		events &= ~DISK_EVENT_MEDIA_CHANGE;
 		goto do_tur;
 	}
@@ -265,7 +284,9 @@ static unsigned int sr_check_events(struct cdrom_device_info *cdi,
 	}
 
 	if (!(clearing & DISK_EVENT_MEDIA_CHANGE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return events;
+}
 do_tur:
 	/* let's see whether the media is there with TUR */
 	last_present = cd->media_present;
@@ -289,12 +310,16 @@ static unsigned int sr_check_events(struct cdrom_device_info *cdi,
 	}
 
 	if (cd->ignore_get_event)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return events;
+}
 
 	/* check whether GET_EVENT is reporting spurious MEDIA_CHANGE */
 	if (!cd->tur_changed) {
 		if (cd->get_event_changed) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (cd->tur_mismatch++ > 8) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sr_printk(KERN_WARNING, cd,
 					  "GET_EVENT and TUR disagree continuously, suppress GET_EVENT events\n");
 				cd->ignore_get_event = true;
@@ -319,6 +344,7 @@ static int sr_done(struct scsi_cmnd *SCpnt)
 {
 	int result = SCpnt->result;
 	int this_count = scsi_bufflen(SCpnt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int good_bytes = (result == 0 ? this_count : 0);
 	int block_sectors = 0;
 	long error_sector;
@@ -393,6 +419,7 @@ static int sr_init_command(struct scsi_cmnd *SCpnt)
 	ret = scsi_init_io(SCpnt);
 	if (ret != BLKPREP_OK)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(SCpnt != rq->special);
 	cd = scsi_cd(rq->rq_disk);
 
@@ -538,6 +565,7 @@ static int sr_block_open(struct block_device *bdev, fmode_t mode)
 
 static void sr_block_release(struct gendisk *disk, fmode_t mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cd *cd = scsi_cd(disk);
 	mutex_lock(&sr_mutex);
 	cdrom_release(&cd->cdi, mode);
@@ -548,6 +576,7 @@ static void sr_block_release(struct gendisk *disk, fmode_t mode)
 static int sr_block_ioctl(struct block_device *bdev, fmode_t mode, unsigned cmd,
 			  unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cd *cd = scsi_cd(bdev->bd_disk);
 	struct scsi_device *sdev = cd->device;
 	void __user *argp = (void __user *)arg;
@@ -585,16 +614,20 @@ static int sr_block_ioctl(struct block_device *bdev, fmode_t mode, unsigned cmd,
 static unsigned int sr_block_check_events(struct gendisk *disk,
 					  unsigned int clearing)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cd *cd = scsi_cd(disk);
 
 	if (atomic_read(&cd->device->disk_events_disable_depth))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return cdrom_check_events(&cd->cdi, clearing);
 }
 
 static int sr_block_revalidate_disk(struct gendisk *disk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cd *cd = scsi_cd(disk);
 	struct scsi_sense_hdr sshdr;
 
@@ -602,6 +635,7 @@ static int sr_block_revalidate_disk(struct gendisk *disk)
 	if (scsi_test_unit_ready(cd->device, SR_TIMEOUT, MAX_RETRIES, &sshdr))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sr_cd_check(&cd->cdi);
 	get_sectorsize(cd);
 out:
@@ -636,6 +670,7 @@ static int sr_open(struct cdrom_device_info *cdi, int purpose)
 	if (!scsi_block_when_processing_errors(sdev))
 		goto error_out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 error_out:
@@ -647,7 +682,9 @@ static void sr_release(struct cdrom_device_info *cdi)
 	struct scsi_cd *cd = cdi->handle;
 
 	if (cd->device->sector_size > 2048)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sr_set_blocklength(cd, 2048);
+}
 
 }
 
@@ -663,20 +700,24 @@ static int sr_probe(struct device *dev)
 	if (sdev->type != TYPE_ROM && sdev->type != TYPE_WORM)
 		goto fail;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -ENOMEM;
 	cd = kzalloc(sizeof(*cd), GFP_KERNEL);
 	if (!cd)
 		goto fail;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kref_init(&cd->kref);
 
 	disk = alloc_disk(1);
 	if (!disk)
 		goto fail_free;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&sr_index_lock);
 	minor = find_first_zero_bit(sr_index_bits, SR_DISKS);
 	if (minor == SR_DISKS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&sr_index_lock);
 		error = -EBUSY;
 		goto fail_put;
@@ -759,6 +800,7 @@ static void get_sectorsize(struct scsi_cd *cd)
 	struct request_queue *queue;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd[0] = READ_CAPACITY;
 		memset((void *) &cmd[1], 0, 9);
 		memset(buffer, 0, sizeof(buffer));
@@ -855,6 +897,7 @@ static void get_capabilities(struct scsi_cd *cd)
 	/* allocate transfer buffer */
 	buffer = kmalloc(512, GFP_KERNEL | GFP_DMA);
 	if (!buffer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sr_printk(KERN_ERR, cd, "out of memory.\n");
 		return;
 	}
@@ -879,6 +922,7 @@ static void get_capabilities(struct scsi_cd *cd)
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	n = data.header_length + data.block_descriptor_length;
 	cd->cdi.speed = ((buffer[n + 8] << 8) + buffer[n + 9]) / 176;
 	cd->readcd_known = 1;
@@ -948,10 +992,14 @@ static int sr_packet(struct cdrom_device_info *cdi,
 	struct scsi_device *sdev = cd->device;
 
 	if (cgc->cmd[0] == GPCMD_READ_DISC_INFO && sdev->no_read_disc_info)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EDRIVE_CANT_DO_THIS;
+}
 
 	if (cgc->timeout <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cgc->timeout = IOCTL_TIMEOUT;
+}
 
 	sr_do_ioctl(cd, cgc);
 
@@ -969,6 +1017,7 @@ static int sr_packet(struct cdrom_device_info *cdi,
  **/
 static void sr_kref_release(struct kref *kref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cd *cd = container_of(kref, struct scsi_cd, kref);
 	struct gendisk *disk = cd->disk;
 
@@ -987,6 +1036,7 @@ static void sr_kref_release(struct kref *kref)
 
 static int sr_remove(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct scsi_cd *cd = dev_get_drvdata(dev);
 
 	scsi_autopm_get_device(cd->device);
@@ -1007,16 +1057,22 @@ static int __init init_sr(void)
 
 	rc = register_blkdev(SCSI_CDROM_MAJOR, "sr");
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 	rc = scsi_register_driver(&sr_template.gendrv);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unregister_blkdev(SCSI_CDROM_MAJOR, "sr");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 }
 
 static void __exit exit_sr(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scsi_unregister_driver(&sr_template.gendrv);
 	unregister_blkdev(SCSI_CDROM_MAJOR, "sr");
 }
diff --git a/drivers/scsi/sr_ioctl.c b/drivers/scsi/sr_ioctl.c
index 2a21f2d..3cfc6f4 100644
--- a/drivers/scsi/sr_ioctl.c
+++ b/drivers/scsi/sr_ioctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/kernel.h>
 #include <linux/mm.h>
@@ -45,6 +47,7 @@ static int sr_read_tochdr(struct cdrom_device_info *cdi,
 	int result;
 	unsigned char *buffer;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	buffer = kmalloc(32, GFP_KERNEL | SR_GFP_DMA(cd));
 	if (!buffer)
 		return -ENOMEM;
@@ -75,6 +78,7 @@ static int sr_read_tocentry(struct cdrom_device_info *cdi,
 	int result;
 	unsigned char *buffer;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	buffer = kmalloc(32, GFP_KERNEL | SR_GFP_DMA(cd));
 	if (!buffer)
 		return -ENOMEM;
@@ -121,7 +125,9 @@ static int sr_fake_playtrkind(struct cdrom_device_info *cdi, struct cdrom_ti *ti
 
 	ret = sr_read_tochdr(cdi, &tochdr);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ntracks = tochdr.cdth_trk1 - tochdr.cdth_trk0 + 1;
 	
@@ -174,7 +180,9 @@ static int sr_play_trkind(struct cdrom_device_info *cdi,
 
 	result = sr_do_ioctl(cd, &cgc);
 	if (result == -EDRIVE_CANT_DO_THIS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = sr_fake_playtrkind(cdi, ti);
+}
 
 	return result;
 }
@@ -193,6 +201,7 @@ int sr_do_ioctl(Scsi_CD *cd, struct packet_command *cgc)
 
       retry:
 	if (!scsi_block_when_processing_errors(SDev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENODEV;
 		goto out;
 	}
@@ -204,14 +213,18 @@ int sr_do_ioctl(Scsi_CD *cd, struct packet_command *cgc)
 
 	/* Minimal error checking.  Ignore cases we know about, and report the rest. */
 	if (driver_byte(result) != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (sshdr.sense_key) {
 		case UNIT_ATTENTION:
 			SDev->changed = 1;
 			if (!cgc->quiet)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sr_printk(KERN_INFO, cd,
 					  "disc change detected.\n");
+}
 			if (retries++ < 10)
 				goto retry;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENOMEDIUM;
 			break;
 		case NOT_READY:	/* This happens if there is no disc in drive */
@@ -219,8 +232,10 @@ int sr_do_ioctl(Scsi_CD *cd, struct packet_command *cgc)
 			    sshdr.ascq == 0x01) {
 				/* sense: Logical unit is in process of becoming ready */
 				if (!cgc->quiet)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					sr_printk(KERN_INFO, cd,
 						  "CDROM not ready yet.\n");
+}
 				if (retries++ < 10) {
 					/* sleep 2 sec and try again */
 					ssleep(2);
@@ -231,10 +246,13 @@ int sr_do_ioctl(Scsi_CD *cd, struct packet_command *cgc)
 					break;
 				}
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!cgc->quiet)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sr_printk(KERN_INFO, cd,
 					  "CDROM not ready.  Make sure there "
 					  "is a disc in the drive.\n");
+}
 			err = -ENOMEDIUM;
 			break;
 		case ILLEGAL_REQUEST:
@@ -265,6 +283,7 @@ int sr_tray_move(struct cdrom_device_info *cdi, int pos)
 
 	memset(&cgc, 0, sizeof(struct packet_command));
 	cgc.cmd[0] = GPCMD_START_STOP_UNIT;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cgc.cmd[4] = (pos == 0) ? 0x03 /* close */ : 0x02 /* eject */ ;
 	cgc.data_direction = DMA_NONE;
 	cgc.timeout = IOCTL_TIMEOUT;
@@ -290,7 +309,9 @@ int sr_drive_status(struct cdrom_device_info *cdi, int slot)
 		return -EINVAL;
 	}
 	if (!scsi_test_unit_ready(cd->device, SR_TIMEOUT, MAX_RETRIES, &sshdr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return CDS_DISC_OK;
+}
 
 	/* SK/ASC/ASCQ of 2/4/1 means "unit is becoming ready" */
 	if (scsi_sense_valid(&sshdr) && sshdr.sense_key == NOT_READY
@@ -299,9 +320,13 @@ int sr_drive_status(struct cdrom_device_info *cdi, int slot)
 
 	if (!cdrom_get_media_event(cdi, &med)) {
 		if (med.media_present)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return CDS_DISC_OK;
+}
 		else if (med.door_open)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return CDS_TRAY_OPEN;
+}
 		else
 			return CDS_NO_DISC;
 	}
@@ -319,7 +344,9 @@ int sr_drive_status(struct cdrom_device_info *cdi, int slot)
 	 * 0x04 is format in progress .. but there must be a disc present!
 	 */
 	if (sshdr.sense_key == NOT_READY && sshdr.asc == 0x04)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return CDS_DISC_OK;
+}
 
 	/*
 	 * If not using Mt Fuji extended media tray reports,
@@ -333,6 +360,7 @@ int sr_drive_status(struct cdrom_device_info *cdi, int slot)
 	else
 		return CDS_TRAY_OPEN;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return CDS_DRIVE_NOT_READY;
 }
 
@@ -346,7 +374,9 @@ int sr_disk_status(struct cdrom_device_info *cdi)
 	/* look for data tracks */
 	rc = sr_read_tochdr(cdi, &toc_h);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (rc == -ENOMEDIUM) ? CDS_NO_DISC : CDS_NO_INFO;
+}
 
 	for (i = toc_h.cdth_trk0; i <= toc_h.cdth_trk1; i++) {
 		toc_e.cdte_track = i;
@@ -373,6 +403,7 @@ int sr_get_last_session(struct cdrom_device_info *cdi,
 	Scsi_CD *cd = cdi->handle;
 
 	ms_info->addr.lba = cd->ms_offset;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ms_info->xa_flag = cd->xa_flag || cd->ms_offset > 0;
 
 	return 0;
@@ -382,6 +413,7 @@ int sr_get_mcn(struct cdrom_device_info *cdi, struct cdrom_mcn *mcn)
 {
 	Scsi_CD *cd = cdi->handle;
 	struct packet_command cgc;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	char *buffer = kmalloc(32, GFP_KERNEL | SR_GFP_DMA(cd));
 	int result;
 
@@ -408,6 +440,7 @@ int sr_get_mcn(struct cdrom_device_info *cdi, struct cdrom_mcn *mcn)
 
 int sr_reset(struct cdrom_device_info *cdi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -417,7 +450,9 @@ int sr_select_speed(struct cdrom_device_info *cdi, int speed)
 	struct packet_command cgc;
 
 	if (speed == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		speed = 0xffff;	/* set to max */
+}
 	else
 		speed *= 177;	/* Nx to kbyte/s */
 
@@ -441,6 +476,7 @@ int sr_select_speed(struct cdrom_device_info *cdi, int speed)
 
 int sr_audio_ioctl(struct cdrom_device_info *cdi, unsigned int cmd, void *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (cmd) {
 	case CDROMREADTOCHDR:
 		return sr_read_tochdr(cdi, arg);
@@ -516,6 +552,7 @@ static int sr_read_sector(Scsi_CD *cd, int lba, int blksize, unsigned char *dest
 
 	/* we try the READ CD command first... */
 	if (cd->readcd_known) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = sr_read_cd(cd, dest, lba, 0, blksize);
 		if (-EDRIVE_CANT_DO_THIS != rc)
 			return rc;
@@ -561,7 +598,9 @@ int sr_is_xa(Scsi_CD *cd)
 	int is_xa;
 
 	if (!xa_test)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	raw_sector = kmalloc(2048, GFP_KERNEL | SR_GFP_DMA(cd));
 	if (!raw_sector)
diff --git a/drivers/scsi/sr_vendor.c b/drivers/scsi/sr_vendor.c
index e3b0ce2..d7f3ecf9 100644
--- a/drivers/scsi/sr_vendor.c
+++ b/drivers/scsi/sr_vendor.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /* -*-linux-c-*-
 
@@ -78,10 +80,13 @@ void sr_vendor_init(Scsi_CD *cd)
 		/* this is true for scsi3/mmc drives - no more checks */
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cd->device->type == TYPE_WORM) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cd->vendor = VENDOR_WRITER;
 
 	} else if (!strncmp(vendor, "NEC", 3)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cd->vendor = VENDOR_NEC;
 		if (!strncmp(model, "CD-ROM DRIVE:25", 15) ||
 		    !strncmp(model, "CD-ROM DRIVE:36", 15) ||
@@ -97,6 +102,7 @@ void sr_vendor_init(Scsi_CD *cd)
 			cd->cdi.mask |= CDC_MULTI_SESSION;
 
 	} else if (!strncmp(vendor, "TOSHIBA", 7)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cd->vendor = VENDOR_TOSHIBA;
 
 	}
@@ -116,7 +122,9 @@ int sr_set_blocklength(Scsi_CD *cd, int blocklength)
 
 #ifdef CONFIG_BLK_DEV_SR_VENDOR
 	if (cd->vendor == VENDOR_TOSHIBA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		density = (blocklength > 2048) ? 0x81 : 0x83;
+}
 #endif
 
 	buffer = kmalloc(512, GFP_KERNEL | GFP_DMA);
@@ -165,7 +173,9 @@ int sr_cd_check(struct cdrom_device_info *cdi)
 	int rc, no_multi;
 
 	if (cd->cdi.mask & CDC_MULTI_SESSION)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	buffer = kmalloc(512, GFP_KERNEL | GFP_DMA);
 	if (!buffer)
diff --git a/drivers/scsi/storvsc_drv.c b/drivers/scsi/storvsc_drv.c
index a3e480e..9922caf 100644
--- a/drivers/scsi/storvsc_drv.c
+++ b/drivers/scsi/storvsc_drv.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2009, Microsoft Corporation.
  *
diff --git a/drivers/scsi/virtio_scsi.c b/drivers/scsi/virtio_scsi.c
index 7c28e8d..b0e9701 100644
--- a/drivers/scsi/virtio_scsi.c
+++ b/drivers/scsi/virtio_scsi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Virtio SCSI HBA driver
  *
diff --git a/drivers/scsi/vmw_pvscsi.c b/drivers/scsi/vmw_pvscsi.c
index c374e3b..6fc31db 100644
--- a/drivers/scsi/vmw_pvscsi.c
+++ b/drivers/scsi/vmw_pvscsi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Linux driver for VMware's para-virtualized SCSI HBA.
  *
diff --git a/drivers/scsi/xen-scsifront.c b/drivers/scsi/xen-scsifront.c
index 36f59a1..d6270bd 100644
--- a/drivers/scsi/xen-scsifront.c
+++ b/drivers/scsi/xen-scsifront.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Xen SCSI frontend driver
  *
diff --git a/drivers/thermal/step_wise.c b/drivers/thermal/step_wise.c
index ee047ca..0b0ec22 100644
--- a/drivers/thermal/step_wise.c
+++ b/drivers/thermal/step_wise.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  step_wise.c - A step-by-step Thermal throttling governor
  *
@@ -60,6 +62,7 @@ static unsigned long get_target_state(struct thermal_instance *instance,
 	 */
 	cdev->ops->get_cur_state(cdev, &cur_state);
 	next_target = instance->target;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&cdev->device, "cur_state=%ld\n", cur_state);
 
 	if (!instance->initialized) {
@@ -135,6 +138,7 @@ static void thermal_zone_trip_update(struct thermal_zone_device *tz, int trip)
 	int old_target;
 
 	if (trip == THERMAL_TRIPS_NONE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		trip_temp = tz->forced_passive;
 		trip_type = THERMAL_TRIPS_NONE;
 	} else {
@@ -202,7 +206,9 @@ static int step_wise_throttle(struct thermal_zone_device *tz, int trip)
 	thermal_zone_trip_update(tz, trip);
 
 	if (tz->forced_passive)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		thermal_zone_trip_update(tz, THERMAL_TRIPS_NONE);
+}
 
 	mutex_lock(&tz->lock);
 
@@ -226,5 +232,6 @@ int thermal_gov_step_wise_register(void)
 
 void thermal_gov_step_wise_unregister(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	thermal_unregister_governor(&thermal_gov_step_wise);
 }
diff --git a/drivers/thermal/thermal_core.c b/drivers/thermal/thermal_core.c
index 2b1b0ba..85268e6 100644
--- a/drivers/thermal/thermal_core.c
+++ b/drivers/thermal/thermal_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  thermal.c - Generic Thermal Management Sysfs support.
  *
@@ -64,12 +66,17 @@ static struct thermal_governor *__find_governor(const char *name)
 	struct thermal_governor *pos;
 
 	if (!name || !name[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return def_governor;
+}
 
 	list_for_each_entry(pos, &thermal_governor_list, governor_list)
 		if (!strncasecmp(name, pos->name, THERMAL_NAME_LENGTH))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return pos;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -84,6 +91,7 @@ static struct thermal_governor *__find_governor(const char *name)
 static void bind_previous_governor(struct thermal_zone_device *tz,
 				   const char *failed_gov_name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tz->governor && tz->governor->bind_to_tz) {
 		if (tz->governor->bind_to_tz(tz)) {
 			dev_err(&tz->device,
@@ -108,6 +116,7 @@ static int thermal_set_governor(struct thermal_zone_device *tz,
 {
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tz->governor && tz->governor->unbind_from_tz)
 		tz->governor->unbind_from_tz(tz);
 
@@ -132,7 +141,9 @@ int thermal_register_governor(struct thermal_governor *governor)
 	struct thermal_zone_device *pos;
 
 	if (!governor)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&thermal_governor_lock);
 
@@ -160,6 +171,7 @@ int thermal_register_governor(struct thermal_governor *governor)
 		if (pos->governor)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		name = pos->tzp->governor_name;
 
 		if (!strncasecmp(name, governor->name, THERMAL_NAME_LENGTH)) {
@@ -167,9 +179,11 @@ int thermal_register_governor(struct thermal_governor *governor)
 
 			ret = thermal_set_governor(pos, governor);
 			if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev_err(&pos->device,
 					"Failed to set governor %s for thermal zone %s: %d\n",
 					governor->name, pos->type, ret);
+}
 		}
 	}
 
@@ -184,7 +198,9 @@ void thermal_unregister_governor(struct thermal_governor *governor)
 	struct thermal_zone_device *pos;
 
 	if (!governor)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	mutex_lock(&thermal_governor_lock);
 
@@ -218,6 +234,7 @@ int thermal_zone_device_set_policy(struct thermal_zone_device *tz,
 	if (!gov)
 		goto exit;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = thermal_set_governor(tz, gov);
 
 exit:
@@ -235,6 +252,7 @@ int thermal_build_list_of_policies(char *buf)
 
 	mutex_lock(&thermal_governor_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(pos, &thermal_governor_list, governor_list) {
 		size = PAGE_SIZE - count;
 		count += scnprintf(buf + count, size, "%s ", pos->name);
@@ -252,25 +270,37 @@ static int __init thermal_register_governors(void)
 
 	result = thermal_gov_step_wise_register();
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	result = thermal_gov_fair_share_register();
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	result = thermal_gov_bang_bang_register();
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	result = thermal_gov_user_space_register();
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
 	return thermal_gov_power_allocator_register();
 }
 
 static void thermal_unregister_governors(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	thermal_gov_step_wise_unregister();
 	thermal_gov_fair_share_unregister();
 	thermal_gov_bang_bang_unregister();
@@ -292,6 +322,7 @@ static void thermal_unregister_governors(void)
 static void thermal_zone_device_set_polling(struct thermal_zone_device *tz,
 					    int delay)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (delay > 1000)
 		mod_delayed_work(system_freezable_wq, &tz->poll_queue,
 				 round_jiffies(msecs_to_jiffies(delay)));
@@ -304,6 +335,7 @@ static void thermal_zone_device_set_polling(struct thermal_zone_device *tz,
 
 static void monitor_thermal_zone(struct thermal_zone_device *tz)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&tz->lock);
 
 	if (tz->passive)
@@ -320,6 +352,7 @@ static void handle_non_critical_trips(struct thermal_zone_device *tz,
 				      int trip,
 				      enum thermal_trip_type trip_type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tz->governor ? tz->governor->throttle(tz, trip) :
 		       def_governor->throttle(tz, trip);
 }
@@ -367,7 +400,9 @@ static void thermal_emergency_poweroff(void)
 	 * Its a must for thermal_emergency_poweroff_work to be scheduled
 	 */
 	if (poweroff_delay_ms <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	schedule_delayed_work(&thermal_emergency_poweroff_work,
 			      msecs_to_jiffies(poweroff_delay_ms));
 }
@@ -433,6 +468,7 @@ static void update_temperature(struct thermal_zone_device *tz)
 
 	ret = thermal_zone_get_temp(tz, &temp);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ret != -EAGAIN)
 			dev_warn(&tz->device,
 				 "failed to read out thermal zone (%d)\n",
@@ -460,6 +496,7 @@ static void thermal_zone_device_reset(struct thermal_zone_device *tz)
 
 	tz->temperature = THERMAL_TEMP_INVALID;
 	tz->passive = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(pos, &tz->thermal_instances, tz_node)
 		pos->initialized = false;
 }
@@ -470,7 +507,9 @@ void thermal_zone_device_update(struct thermal_zone_device *tz,
 	int count;
 
 	if (atomic_read(&in_suspend))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!tz->ops->get_temp)
 		return;
@@ -500,12 +539,14 @@ EXPORT_SYMBOL_GPL(thermal_zone_device_update);
  */
 void thermal_notify_framework(struct thermal_zone_device *tz, int trip)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	handle_thermal_trip(tz, trip);
 }
 EXPORT_SYMBOL_GPL(thermal_notify_framework);
 
 static void thermal_zone_device_check(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = container_of(work, struct
 						      thermal_zone_device,
 						      poll_queue.work);
@@ -534,6 +575,7 @@ static void thermal_zone_device_check(struct work_struct *work)
 int power_actor_get_max_power(struct thermal_cooling_device *cdev,
 			      struct thermal_zone_device *tz, u32 *max_power)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!cdev_is_power_actor(cdev))
 		return -EINVAL;
 
@@ -559,7 +601,9 @@ int power_actor_get_min_power(struct thermal_cooling_device *cdev,
 	int ret;
 
 	if (!cdev_is_power_actor(cdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ret = cdev->ops->get_max_state(cdev, &max_state);
 	if (ret)
@@ -587,7 +631,9 @@ int power_actor_set_power(struct thermal_cooling_device *cdev,
 	int ret;
 
 	if (!cdev_is_power_actor(cdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ret = cdev->ops->power2state(cdev, instance->tz, power, &state);
 	if (ret)
@@ -608,6 +654,7 @@ void thermal_zone_device_rebind_exception(struct thermal_zone_device *tz,
 	struct thermal_cooling_device *cdev = NULL;
 
 	mutex_lock(&thermal_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(cdev, &thermal_cdev_list, node) {
 		/* skip non matching cdevs */
 		if (strncmp(cdev_type, cdev->type, size))
@@ -628,6 +675,7 @@ void thermal_zone_device_unbind_exception(struct thermal_zone_device *tz,
 	struct thermal_cooling_device *cdev = NULL;
 
 	mutex_lock(&thermal_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(cdev, &thermal_cdev_list, node) {
 		/* skip non matching cdevs */
 		if (strncmp(cdev_type, cdev->type, size))
@@ -684,6 +732,7 @@ int thermal_zone_bind_cooling_device(struct thermal_zone_device *tz,
 	unsigned long max_state;
 	int result, ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (trip >= tz->trips || (trip < 0 && trip != THERMAL_TRIPS_NONE))
 		return -EINVAL;
 
@@ -804,6 +853,7 @@ int thermal_zone_unbind_cooling_device(struct thermal_zone_device *tz,
 
 	mutex_lock(&tz->lock);
 	mutex_lock(&cdev->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(pos, next, &tz->thermal_instances, tz_node) {
 		if (pos->tz == tz && pos->trip == trip && pos->cdev == cdev) {
 			list_del(&pos->tz_node);
@@ -835,6 +885,7 @@ static void thermal_release(struct device *dev)
 
 	if (!strncmp(dev_name(dev), "thermal_zone",
 		     sizeof("thermal_zone") - 1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tz = to_thermal_zone(dev);
 		thermal_zone_destroy_device_groups(tz);
 		kfree(tz);
@@ -854,6 +905,7 @@ static inline
 void print_bind_err_msg(struct thermal_zone_device *tz,
 			struct thermal_cooling_device *cdev, int ret)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_err(&tz->device, "binding zone %s with cdev %s failed:%d\n",
 		tz->type, cdev->type, ret);
 }
@@ -865,6 +917,7 @@ static void __bind(struct thermal_zone_device *tz, int mask,
 {
 	int i, ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < tz->trips; i++) {
 		if (mask & (1 << i)) {
 			unsigned long upper, lower;
@@ -893,25 +946,36 @@ static void bind_cdev(struct thermal_cooling_device *cdev)
 	mutex_lock(&thermal_list_lock);
 
 	list_for_each_entry(pos, &thermal_tz_list, node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!pos->tzp && !pos->ops->bind)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pos->ops->bind) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = pos->ops->bind(pos, cdev);
 			if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				print_bind_err_msg(pos, cdev, ret);
+}
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tzp = pos->tzp;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!tzp || !tzp->tbp)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < tzp->num_tbps; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (tzp->tbp[i].cdev || !tzp->tbp[i].match)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (tzp->tbp[i].match(pos, cdev))
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tzp->tbp[i].cdev = cdev;
 			__bind(pos, tzp->tbp[i].trip_mask, cdev,
 			       tzp->tbp[i].binding_limits,
@@ -948,7 +1012,9 @@ __thermal_cooling_device_register(struct device_node *np,
 	int result;
 
 	if (type && strlen(type) >= THERMAL_NAME_LENGTH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	if (!ops || !ops->get_max_state || !ops->get_cur_state ||
 	    !ops->set_cur_state)
@@ -956,10 +1022,13 @@ __thermal_cooling_device_register(struct device_node *np,
 
 	cdev = kzalloc(sizeof(*cdev), GFP_KERNEL);
 	if (!cdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	result = ida_simple_get(&thermal_cdev_ida, 0, 0, GFP_KERNEL);
 	if (result < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(cdev);
 		return ERR_PTR(result);
 	}
@@ -977,6 +1046,7 @@ __thermal_cooling_device_register(struct device_node *np,
 	dev_set_name(&cdev->device, "cooling_device%d", cdev->id);
 	result = device_register(&cdev->device);
 	if (result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ida_simple_remove(&thermal_cdev_ida, cdev->id);
 		kfree(cdev);
 		return ERR_PTR(result);
@@ -993,8 +1063,10 @@ __thermal_cooling_device_register(struct device_node *np,
 	mutex_lock(&thermal_list_lock);
 	list_for_each_entry(pos, &thermal_tz_list, node)
 		if (atomic_cmpxchg(&pos->need_update, 1, 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			thermal_zone_device_update(pos,
 						   THERMAL_EVENT_UNSPECIFIED);
+}
 	mutex_unlock(&thermal_list_lock);
 
 	return cdev;
@@ -1041,6 +1113,7 @@ thermal_of_cooling_device_register(struct device_node *np,
 				   char *type, void *devdata,
 				   const struct thermal_cooling_device_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __thermal_cooling_device_register(np, type, devdata, ops);
 }
 EXPORT_SYMBOL_GPL(thermal_of_cooling_device_register);
@@ -1050,6 +1123,7 @@ static void __unbind(struct thermal_zone_device *tz, int mask,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < tz->trips; i++)
 		if (mask & (1 << i))
 			thermal_zone_unbind_cooling_device(tz, i, cdev);
@@ -1070,7 +1144,9 @@ void thermal_cooling_device_unregister(struct thermal_cooling_device *cdev)
 	struct thermal_cooling_device *pos = NULL;
 
 	if (!cdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	mutex_lock(&thermal_list_lock);
 	list_for_each_entry(pos, &thermal_cdev_list, node)
@@ -1115,6 +1191,7 @@ static void bind_tz(struct thermal_zone_device *tz)
 	struct thermal_cooling_device *pos = NULL;
 	const struct thermal_zone_params *tzp = tz->tzp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tzp && !tz->ops->bind)
 		return;
 
@@ -1186,6 +1263,7 @@ thermal_zone_device_register(const char *type, int trips, int mask,
 	int count;
 	struct thermal_governor *governor;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!type || strlen(type) == 0)
 		return ERR_PTR(-EINVAL);
 
@@ -1311,7 +1389,9 @@ void thermal_zone_device_unregister(struct thermal_zone_device *tz)
 	struct thermal_zone_device *pos = NULL;
 
 	if (!tz)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	tzp = tz->tzp;
 
@@ -1376,6 +1456,7 @@ struct thermal_zone_device *thermal_zone_get_zone_by_name(const char *name)
 	if (!name)
 		goto exit;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&thermal_list_lock);
 	list_for_each_entry(pos, &thermal_tz_list, node)
 		if (!strncasecmp(name, pos->type, THERMAL_NAME_LENGTH)) {
@@ -1422,7 +1503,9 @@ int thermal_generate_netlink_event(struct thermal_zone_device *tz,
 	static unsigned int thermal_event_seqnum;
 
 	if (!tz)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* allocate memory */
 	size = nla_total_size(sizeof(struct thermal_genl_event)) +
@@ -1480,6 +1563,7 @@ static int __init genetlink_init(void)
 
 static void genetlink_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	genl_unregister_family(&thermal_event_genl_family);
 }
 #else /* !CONFIG_NET */
@@ -1535,15 +1619,19 @@ static int __init thermal_init(void)
 	if (result)
 		goto unregister_class;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	result = of_parse_thermal_zones();
 	if (result)
 		goto exit_netlink;
 
 	result = register_pm_notifier(&thermal_pm_nb);
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("Thermal: Can not register suspend notifier, return %d\n",
 			result);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 exit_netlink:
@@ -1563,6 +1651,7 @@ static int __init thermal_init(void)
 
 static void __exit thermal_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pm_notifier(&thermal_pm_nb);
 	of_thermal_destroy_zones();
 	genetlink_exit();
diff --git a/drivers/thermal/thermal_sysfs.c b/drivers/thermal/thermal_sysfs.c
index fb80c96..9ef7924 100644
--- a/drivers/thermal/thermal_sysfs.c
+++ b/drivers/thermal/thermal_sysfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  thermal.c - sysfs interface of thermal devices
  *
@@ -28,6 +30,7 @@
 static ssize_t
 type_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 
 	return sprintf(buf, "%s\n", tz->type);
@@ -36,6 +39,7 @@ type_show(struct device *dev, struct device_attribute *attr, char *buf)
 static ssize_t
 temp_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 	int temperature, ret;
 
@@ -50,6 +54,7 @@ temp_show(struct device *dev, struct device_attribute *attr, char *buf)
 static ssize_t
 mode_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 	enum thermal_device_mode mode;
 	int result;
@@ -69,6 +74,7 @@ static ssize_t
 mode_store(struct device *dev, struct device_attribute *attr,
 	   const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 	int result;
 
@@ -92,6 +98,7 @@ static ssize_t
 trip_point_type_show(struct device *dev, struct device_attribute *attr,
 		     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 	enum thermal_trip_type type;
 	int trip, result;
@@ -124,6 +131,7 @@ static ssize_t
 trip_point_temp_store(struct device *dev, struct device_attribute *attr,
 		      const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 	int trip, ret;
 	int temperature;
@@ -150,6 +158,7 @@ static ssize_t
 trip_point_temp_show(struct device *dev, struct device_attribute *attr,
 		     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 	int trip, ret;
 	int temperature;
@@ -172,6 +181,7 @@ static ssize_t
 trip_point_hyst_store(struct device *dev, struct device_attribute *attr,
 		      const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 	int trip, ret;
 	int temperature;
@@ -202,6 +212,7 @@ static ssize_t
 trip_point_hyst_show(struct device *dev, struct device_attribute *attr,
 		     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 	int trip, ret;
 	int temperature;
@@ -221,6 +232,7 @@ static ssize_t
 passive_store(struct device *dev, struct device_attribute *attr,
 	      const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 	int state;
 
@@ -255,6 +267,7 @@ static ssize_t
 passive_show(struct device *dev, struct device_attribute *attr,
 	     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 
 	return sprintf(buf, "%d\n", tz->forced_passive);
@@ -264,6 +277,7 @@ static ssize_t
 policy_store(struct device *dev, struct device_attribute *attr,
 	     const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 	char name[THERMAL_NAME_LENGTH];
 	int ret;
@@ -280,6 +294,7 @@ policy_store(struct device *dev, struct device_attribute *attr,
 static ssize_t
 policy_show(struct device *dev, struct device_attribute *devattr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 
 	return sprintf(buf, "%s\n", tz->governor->name);
@@ -289,6 +304,7 @@ static ssize_t
 available_policies_show(struct device *dev, struct device_attribute *devattr,
 			char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return thermal_build_list_of_policies(buf);
 }
 
@@ -324,6 +340,7 @@ static ssize_t
 sustainable_power_show(struct device *dev, struct device_attribute *devattr,
 		       char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 
 	if (tz->tzp)
@@ -336,6 +353,7 @@ static ssize_t
 sustainable_power_store(struct device *dev, struct device_attribute *devattr,
 			const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_zone_device *tz = to_thermal_zone(dev);
 	u32 sustainable_power;
 
@@ -441,6 +459,7 @@ static umode_t thermal_zone_mode_is_visible(struct kobject *kobj,
 					    struct attribute *attr,
 					    int attrno)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = container_of(kobj, struct device, kobj);
 	struct thermal_zone_device *tz;
 
@@ -467,6 +486,7 @@ static umode_t thermal_zone_passive_is_visible(struct kobject *kobj,
 					       struct attribute *attr,
 					       int attrno)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct device *dev = container_of(kobj, struct device, kobj);
 	struct thermal_zone_device *tz;
 	enum thermal_trip_type trip_type;
@@ -516,7 +536,9 @@ static int create_trip_attrs(struct thermal_zone_device *tz, int mask)
 
 	/* This function works only for zones with at least one trip */
 	if (tz->trips <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	tz->trip_type_attrs = kcalloc(tz->trips, sizeof(*tz->trip_type_attrs),
 				      GFP_KERNEL);
@@ -613,6 +635,7 @@ static int create_trip_attrs(struct thermal_zone_device *tz, int mask)
  */
 static void destroy_trip_attrs(struct thermal_zone_device *tz)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tz)
 		return;
 
@@ -634,7 +657,9 @@ int thermal_zone_create_device_groups(struct thermal_zone_device *tz,
 	/* This also takes care of API requirement to be NULL terminated */
 	groups = kcalloc(size, sizeof(*groups), GFP_KERNEL);
 	if (!groups)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	for (i = 0; i < size - 2; i++)
 		groups[i] = thermal_zone_attribute_groups[i];
@@ -657,6 +682,7 @@ int thermal_zone_create_device_groups(struct thermal_zone_device *tz,
 
 void thermal_zone_destroy_device_groups(struct thermal_zone_device *tz)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tz)
 		return;
 
@@ -671,6 +697,7 @@ static ssize_t
 thermal_cooling_device_type_show(struct device *dev,
 				 struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_cooling_device *cdev = to_cooling_device(dev);
 
 	return sprintf(buf, "%s\n", cdev->type);
@@ -680,6 +707,7 @@ static ssize_t
 thermal_cooling_device_max_state_show(struct device *dev,
 				      struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_cooling_device *cdev = to_cooling_device(dev);
 	unsigned long state;
 	int ret;
@@ -694,6 +722,7 @@ static ssize_t
 thermal_cooling_device_cur_state_show(struct device *dev,
 				      struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_cooling_device *cdev = to_cooling_device(dev);
 	unsigned long state;
 	int ret;
@@ -709,6 +738,7 @@ thermal_cooling_device_cur_state_store(struct device *dev,
 				       struct device_attribute *attr,
 				       const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct thermal_cooling_device *cdev = to_cooling_device(dev);
 	unsigned long state;
 	int result;
@@ -776,6 +806,7 @@ thermal_cooling_device_weight_show(struct device *dev,
 {
 	struct thermal_instance *instance;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	instance = container_of(attr, struct thermal_instance, weight_attr);
 
 	return sprintf(buf, "%d\n", instance->weight);
@@ -791,7 +822,9 @@ thermal_cooling_device_weight_store(struct device *dev,
 
 	ret = kstrtoint(buf, 0, &weight);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	instance = container_of(attr, struct thermal_instance, weight_attr);
 	instance->weight = weight;
diff --git a/drivers/tty/hvc/hvc_console.c b/drivers/tty/hvc/hvc_console.c
index a8d3991..05c748e 100644
--- a/drivers/tty/hvc/hvc_console.c
+++ b/drivers/tty/hvc/hvc_console.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2001 Anton Blanchard <anton@au.ibm.com>, IBM
  * Copyright (C) 2001 Paul Mackerras <paulus@au.ibm.com>, IBM
diff --git a/drivers/tty/hvc/hvc_xen.c b/drivers/tty/hvc/hvc_xen.c
index 5e87e48..65b273e 100644
--- a/drivers/tty/hvc/hvc_xen.c
+++ b/drivers/tty/hvc/hvc_xen.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * xen console driver interface to hvc_console.c
  *
diff --git a/drivers/tty/n_null.c b/drivers/tty/n_null.c
index d63261c..05d9be7 100644
--- a/drivers/tty/n_null.c
+++ b/drivers/tty/n_null.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/types.h>
 #include <linux/errno.h>
 #include <linux/tty.h>
@@ -24,6 +26,7 @@
 
 static int n_null_open(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -34,12 +37,14 @@ static void n_null_close(struct tty_struct *tty)
 static ssize_t n_null_read(struct tty_struct *tty, struct file *file,
 			   unsigned char __user * buf, size_t nr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EOPNOTSUPP;
 }
 
 static ssize_t n_null_write(struct tty_struct *tty, struct file *file,
 			    const unsigned char *buf, size_t nr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EOPNOTSUPP;
 }
 
@@ -68,6 +73,7 @@ static int __init n_null_init(void)
 
 static void __exit n_null_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_unregister_ldisc(N_NULL);
 }
 
diff --git a/drivers/tty/n_tty.c b/drivers/tty/n_tty.c
index faf50df..9d1a81d 100644
--- a/drivers/tty/n_tty.c
+++ b/drivers/tty/n_tty.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * n_tty.c --- implements the N_TTY line discipline.
  *
@@ -133,6 +135,7 @@ static inline size_t read_cnt(struct n_tty_data *ldata)
 
 static inline unsigned char read_buf(struct n_tty_data *ldata, size_t i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ldata->read_buf[i & (N_TTY_BUF_SIZE - 1)];
 }
 
@@ -143,11 +146,13 @@ static inline unsigned char *read_buf_addr(struct n_tty_data *ldata, size_t i)
 
 static inline unsigned char echo_buf(struct n_tty_data *ldata, size_t i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ldata->echo_buf[i & (N_TTY_BUF_SIZE - 1)];
 }
 
 static inline unsigned char *echo_buf_addr(struct n_tty_data *ldata, size_t i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &ldata->echo_buf[i & (N_TTY_BUF_SIZE - 1)];
 }
 
@@ -160,6 +165,7 @@ static int tty_copy_to_user(struct tty_struct *tty, void __user *to,
 	int uncopied;
 
 	if (n > size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_audit_add_data(tty, from, size);
 		uncopied = copy_to_user(to, from, size);
 		if (uncopied)
@@ -191,8 +197,10 @@ static void n_tty_kick_worker(struct tty_struct *tty)
 
 	/* Did the input worker stop? Restart it */
 	if (unlikely(ldata->no_room)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ldata->no_room = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_RATELIMIT(tty->port->itty == NULL,
 				"scheduling with invalid itty\n");
 		/* see if ldisc has been killed - if so, this means that
@@ -228,6 +236,7 @@ static ssize_t chars_in_buffer(struct tty_struct *tty)
 
 static void n_tty_write_wakeup(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clear_bit(TTY_DO_WRITE_WAKEUP, &tty->flags);
 	kill_fasync(&tty->fasync, SIGIO, POLL_OUT);
 }
@@ -242,17 +251,22 @@ static void n_tty_check_throttle(struct tty_struct *tty)
 	 * canonical mode and don't have a newline yet!
 	 */
 	if (ldata->icanon && ldata->canon_head == ldata->read_tail)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		int throttled;
 		tty_set_flow_change(tty, TTY_THROTTLE_SAFE);
 		if (N_TTY_BUF_SIZE - read_cnt(ldata) >= TTY_THRESHOLD_THROTTLE)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		throttled = tty_throttle_safe(tty);
 		if (!throttled)
 			break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__tty_set_flow_change(tty, 0);
 }
 
@@ -260,7 +274,9 @@ static void n_tty_check_unthrottle(struct tty_struct *tty)
 {
 	if (tty->driver->type == TTY_DRIVER_TYPE_PTY) {
 		if (chars_in_buffer(tty) > TTY_THRESHOLD_UNTHROTTLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 		n_tty_kick_worker(tty);
 		tty_wakeup(tty->link);
 		return;
@@ -274,6 +290,7 @@ static void n_tty_check_unthrottle(struct tty_struct *tty)
 	 * we won't get any more characters.
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		int unthrottled;
 		tty_set_flow_change(tty, TTY_UNTHROTTLE_SAFE);
@@ -284,6 +301,7 @@ static void n_tty_check_unthrottle(struct tty_struct *tty)
 		if (!unthrottled)
 			break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__tty_set_flow_change(tty, 0);
 }
 
@@ -333,7 +351,9 @@ static void n_tty_packet_mode_flush(struct tty_struct *tty)
 	unsigned long flags;
 
 	if (tty->link->packet) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irqsave(&tty->ctrl_lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty->ctrl_status |= TIOCPKT_FLUSHREAD;
 		spin_unlock_irqrestore(&tty->ctrl_lock, flags);
 		wake_up_interruptible(&tty->link->read_wait);
@@ -376,6 +396,7 @@ static void n_tty_flush_buffer(struct tty_struct *tty)
 
 static inline int is_utf8_continuation(unsigned char c)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (c & 0xc0) == 0x80;
 }
 
@@ -420,57 +441,85 @@ static int do_output_char(unsigned char c, struct tty_struct *tty, int space)
 	int	spaces;
 
 	if (!space)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	switch (c) {
 	case '\n':
 		if (O_ONLRET(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ldata->column = 0;
+}
 		if (O_ONLCR(tty)) {
 			if (space < 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -1;
+}
 			ldata->canon_column = ldata->column = 0;
 			tty->ops->write(tty, "\r\n", 2);
 			return 2;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ldata->canon_column = ldata->column;
 		break;
 	case '\r':
 		if (O_ONOCR(tty) && ldata->column == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (O_OCRNL(tty)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			c = '\n';
 			if (O_ONLRET(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ldata->canon_column = ldata->column = 0;
+}
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ldata->canon_column = ldata->column = 0;
 		break;
 	case '\t':
 		spaces = 8 - (ldata->column & 7);
 		if (O_TABDLY(tty) == XTABS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (space < spaces)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ldata->column += spaces;
 			tty->ops->write(tty, "        ", spaces);
 			return spaces;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ldata->column += spaces;
 		break;
 	case '\b':
 		if (ldata->column > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ldata->column--;
+}
 		break;
 	default:
 		if (!iscntrl(c)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (O_OLCUC(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				c = toupper(c);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!is_continuation(c, tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ldata->column++;
+}
 		}
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_put_char(tty, c);
 	return 1;
 }
@@ -501,7 +550,9 @@ static int process_output(unsigned char c, struct tty_struct *tty)
 
 	mutex_unlock(&ldata->output_lock);
 	if (retval < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 	else
 		return 0;
 }
@@ -537,11 +588,14 @@ static ssize_t process_output_block(struct tty_struct *tty,
 
 	space = tty_write_room(tty);
 	if (!space) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&ldata->output_lock);
 		return 0;
 	}
 	if (nr > space)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nr = space;
+}
 
 	for (i = 0, cp = buf; i < nr; i++, cp++) {
 		unsigned char c = *cp;
@@ -549,7 +603,9 @@ static ssize_t process_output_block(struct tty_struct *tty,
 		switch (c) {
 		case '\n':
 			if (O_ONLRET(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ldata->column = 0;
+}
 			if (O_ONLCR(tty))
 				goto break_out;
 			ldata->canon_column = ldata->column;
@@ -565,7 +621,9 @@ static ssize_t process_output_block(struct tty_struct *tty,
 			goto break_out;
 		case '\b':
 			if (ldata->column > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ldata->column--;
+}
 			break;
 		default:
 			if (!iscntrl(c)) {
@@ -619,6 +677,7 @@ static size_t __process_echoes(struct tty_struct *tty)
 	old_space = space = tty_write_room(tty);
 
 	tail = ldata->echo_tail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (ldata->echo_commit != tail) {
 		c = echo_buf(ldata, tail);
 		if (c == ECHO_OP_START) {
@@ -758,6 +817,7 @@ static void commit_echoes(struct tty_struct *tty)
 	 * is over the threshold (and try again each time another
 	 * block is accumulated) */
 	nr = head - ldata->echo_tail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nr < ECHO_COMMIT_WATERMARK || (nr % ECHO_BLOCK > old % ECHO_BLOCK))
 		return;
 
@@ -776,16 +836,22 @@ static void process_echoes(struct tty_struct *tty)
 	size_t echoed;
 
 	if (ldata->echo_mark == ldata->echo_tail)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&ldata->output_lock);
 	ldata->echo_commit = ldata->echo_mark;
 	echoed = __process_echoes(tty);
 	mutex_unlock(&ldata->output_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (echoed && tty->ops->flush_chars)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty->ops->flush_chars(tty);
 }
+}
 
 /* NB: echo_mark and echo_head should be equivalent here */
 static void flush_echoes(struct tty_struct *tty)
@@ -796,6 +862,7 @@ static void flush_echoes(struct tty_struct *tty)
 	    ldata->echo_commit == ldata->echo_head)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&ldata->output_lock);
 	ldata->echo_commit = ldata->echo_head;
 	__process_echoes(tty);
@@ -812,6 +879,7 @@ static void flush_echoes(struct tty_struct *tty)
 
 static inline void add_echo_byte(unsigned char c, struct n_tty_data *ldata)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*echo_buf_addr(ldata, ldata->echo_head++) = c;
 }
 
@@ -824,6 +892,7 @@ static inline void add_echo_byte(unsigned char c, struct n_tty_data *ldata)
 
 static void echo_move_back_col(struct n_tty_data *ldata)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	add_echo_byte(ECHO_OP_START, ldata);
 	add_echo_byte(ECHO_OP_MOVE_BACK_COL, ldata);
 }
@@ -838,6 +907,7 @@ static void echo_move_back_col(struct n_tty_data *ldata)
 
 static void echo_set_canon_col(struct n_tty_data *ldata)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	add_echo_byte(ECHO_OP_START, ldata);
 	add_echo_byte(ECHO_OP_SET_CANON_COL, ldata);
 }
@@ -860,6 +930,7 @@ static void echo_set_canon_col(struct n_tty_data *ldata)
 static void echo_erase_tab(unsigned int num_chars, int after_tab,
 			   struct n_tty_data *ldata)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	add_echo_byte(ECHO_OP_START, ldata);
 	add_echo_byte(ECHO_OP_ERASE_TAB, ldata);
 
@@ -886,6 +957,7 @@ static void echo_erase_tab(unsigned int num_chars, int after_tab,
 
 static void echo_char_raw(unsigned char c, struct n_tty_data *ldata)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (c == ECHO_OP_START) {
 		add_echo_byte(ECHO_OP_START, ldata);
 		add_echo_byte(ECHO_OP_START, ldata);
@@ -911,6 +983,7 @@ static void echo_char(unsigned char c, struct tty_struct *tty)
 	struct n_tty_data *ldata = tty->disc_data;
 
 	if (c == ECHO_OP_START) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_echo_byte(ECHO_OP_START, ldata);
 		add_echo_byte(ECHO_OP_START, ldata);
 	} else {
@@ -927,6 +1000,7 @@ static void echo_char(unsigned char c, struct tty_struct *tty)
 
 static inline void finish_erasing(struct n_tty_data *ldata)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ldata->erasing) {
 		echo_char_raw('/', ldata);
 		ldata->erasing = 0;
@@ -956,6 +1030,7 @@ static void eraser(unsigned char c, struct tty_struct *tty)
 
 	if (ldata->read_head == ldata->canon_head) {
 		/* process_output('\a', tty); */ /* what do you think? */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 	if (c == ERASE_CHAR(tty))
@@ -1080,6 +1155,7 @@ static void eraser(unsigned char c, struct tty_struct *tty)
 
 static void __isig(int sig, struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pid *tty_pgrp = tty_get_pgrp(tty);
 	if (tty_pgrp) {
 		kill_pgrp(tty_pgrp, sig, 1);
@@ -1140,7 +1216,9 @@ static void n_tty_receive_break(struct tty_struct *tty)
 	struct n_tty_data *ldata = tty->disc_data;
 
 	if (I_IGNBRK(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (I_BRKINT(tty)) {
 		isig(SIGINT, tty);
 		return;
@@ -1170,6 +1248,7 @@ static void n_tty_receive_overrun(struct tty_struct *tty)
 	struct n_tty_data *ldata = tty->disc_data;
 
 	ldata->num_overrun++;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (time_after(jiffies, ldata->overrun_time + HZ) ||
 			time_after(ldata->overrun_time, jiffies)) {
 		tty_warn(tty, "%d input overrun(s)\n", ldata->num_overrun);
@@ -1194,6 +1273,7 @@ static void n_tty_receive_parity_error(struct tty_struct *tty, unsigned char c)
 	struct n_tty_data *ldata = tty->disc_data;
 
 	if (I_INPCK(tty)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (I_IGNPAR(tty))
 			return;
 		if (I_PARMRK(tty)) {
@@ -1209,6 +1289,7 @@ static void n_tty_receive_parity_error(struct tty_struct *tty, unsigned char c)
 static void
 n_tty_receive_signal_char(struct tty_struct *tty, int signal, unsigned char c)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	isig(signal, tty);
 	if (I_IXON(tty))
 		start_tty(tty);
@@ -1242,6 +1323,7 @@ n_tty_receive_char_special(struct tty_struct *tty, unsigned char c)
 	struct n_tty_data *ldata = tty->disc_data;
 
 	if (I_IXON(tty)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (c == START_CHAR(tty)) {
 			start_tty(tty);
 			process_echoes(tty);
@@ -1377,6 +1459,7 @@ n_tty_receive_char_inline(struct tty_struct *tty, unsigned char c)
 {
 	struct n_tty_data *ldata = tty->disc_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tty->stopped && !tty->flow_stopped && I_IXON(tty) && I_IXANY(tty)) {
 		start_tty(tty);
 		process_echoes(tty);
@@ -1397,6 +1480,7 @@ n_tty_receive_char_inline(struct tty_struct *tty, unsigned char c)
 
 static void n_tty_receive_char(struct tty_struct *tty, unsigned char c)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	n_tty_receive_char_inline(tty, c);
 }
 
@@ -1406,14 +1490,19 @@ n_tty_receive_char_fast(struct tty_struct *tty, unsigned char c)
 	struct n_tty_data *ldata = tty->disc_data;
 
 	if (tty->stopped && !tty->flow_stopped && I_IXON(tty) && I_IXANY(tty)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start_tty(tty);
 		process_echoes(tty);
 	}
 	if (L_ECHO(tty)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		finish_erasing(ldata);
 		/* Record the column of first canon char. */
 		if (ldata->canon_head == ldata->read_head)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			echo_set_canon_col(ldata);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		echo_char(c, tty);
 		commit_echoes(tty);
 	}
@@ -1422,6 +1511,7 @@ n_tty_receive_char_fast(struct tty_struct *tty, unsigned char c)
 
 static void n_tty_receive_char_closing(struct tty_struct *tty, unsigned char c)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (I_ISTRIP(tty))
 		c &= 0x7f;
 	if (I_IUCLC(tty) && L_IEXTEN(tty))
@@ -1443,6 +1533,7 @@ static void n_tty_receive_char_closing(struct tty_struct *tty, unsigned char c)
 static void
 n_tty_receive_char_flagged(struct tty_struct *tty, unsigned char c, char flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (flag) {
 	case TTY_BREAK:
 		n_tty_receive_break(tty);
@@ -1467,6 +1558,7 @@ n_tty_receive_char_lnext(struct tty_struct *tty, unsigned char c, char flag)
 
 	ldata->lnext = 0;
 	if (likely(flag == TTY_NORMAL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (I_ISTRIP(tty))
 			c &= 0x7f;
 		if (I_IUCLC(tty) && L_IEXTEN(tty))
@@ -1485,6 +1577,7 @@ n_tty_receive_buf_real_raw(struct tty_struct *tty, const unsigned char *cp,
 
 	head = ldata->read_head & (N_TTY_BUF_SIZE - 1);
 	n = min_t(size_t, count, N_TTY_BUF_SIZE - head);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(read_buf_addr(ldata, head), cp, n);
 	ldata->read_head += n;
 	cp += n;
@@ -1492,6 +1585,7 @@ n_tty_receive_buf_real_raw(struct tty_struct *tty, const unsigned char *cp,
 
 	head = ldata->read_head & (N_TTY_BUF_SIZE - 1);
 	n = min_t(size_t, count, N_TTY_BUF_SIZE - head);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(read_buf_addr(ldata, head), cp, n);
 	ldata->read_head += n;
 }
@@ -1503,6 +1597,7 @@ n_tty_receive_buf_raw(struct tty_struct *tty, const unsigned char *cp,
 	struct n_tty_data *ldata = tty->disc_data;
 	char flag = TTY_NORMAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (count--) {
 		if (fp)
 			flag = *fp++;
@@ -1519,6 +1614,7 @@ n_tty_receive_buf_closing(struct tty_struct *tty, const unsigned char *cp,
 {
 	char flag = TTY_NORMAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (count--) {
 		if (fp)
 			flag = *fp++;
@@ -1534,6 +1630,7 @@ n_tty_receive_buf_standard(struct tty_struct *tty, const unsigned char *cp,
 	struct n_tty_data *ldata = tty->disc_data;
 	char flag = TTY_NORMAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (count--) {
 		if (fp)
 			flag = *fp++;
@@ -1570,20 +1667,29 @@ n_tty_receive_buf_fast(struct tty_struct *tty, const unsigned char *cp,
 
 	while (count--) {
 		if (fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flag = *fp++;
+}
 		if (likely(flag == TTY_NORMAL)) {
 			unsigned char c = *cp++;
 
 			if (!test_bit(c, ldata->char_map))
 				n_tty_receive_char_fast(tty, c);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			else if (n_tty_receive_char_special(tty, c) && count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					flag = *fp++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				n_tty_receive_char_lnext(tty, *cp++, flag);
 				count--;
 			}
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			n_tty_receive_char_flagged(tty, *cp++, flag);
+}
 	}
 }
 
@@ -1596,15 +1702,22 @@ static void __receive_buf(struct tty_struct *tty, const unsigned char *cp,
 	if (ldata->real_raw)
 		n_tty_receive_buf_real_raw(tty, cp, fp, count);
 	else if (ldata->raw || (L_EXTPROC(tty) && !preops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		n_tty_receive_buf_raw(tty, cp, fp, count);
+}
 	else if (tty->closing && !L_EXTPROC(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		n_tty_receive_buf_closing(tty, cp, fp, count);
+}
 	else {
 		if (ldata->lnext) {
 			char flag = TTY_NORMAL;
 
 			if (fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				flag = *fp++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			n_tty_receive_char_lnext(tty, *cp++, flag);
 			count--;
 		}
@@ -1620,7 +1733,9 @@ static void __receive_buf(struct tty_struct *tty, const unsigned char *cp,
 	}
 
 	if (ldata->icanon && !L_EXTPROC(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* publish read_head to consumer */
 	smp_store_release(&ldata->commit_head, ldata->read_head);
@@ -1691,16 +1806,26 @@ n_tty_receive_buf_common(struct tty_struct *tty, const unsigned char *cp,
 
 		room = N_TTY_BUF_SIZE - (ldata->read_head - tail);
 		if (I_PARMRK(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			room = (room + 2) / 3;
+}
 		room--;
 		if (room <= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			overflow = ldata->icanon && ldata->canon_head == tail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (overflow && room < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ldata->read_head--;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			room = overflow;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ldata->no_room = flow && !room;
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			overflow = 0;
+}
 
 		n = min(count, room);
 		if (!n)
@@ -1712,7 +1837,9 @@ n_tty_receive_buf_common(struct tty_struct *tty, const unsigned char *cp,
 
 		cp += n;
 		if (fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fp += n;
+}
 		count -= n;
 		rcvd += n;
 	}
@@ -1722,6 +1849,7 @@ n_tty_receive_buf_common(struct tty_struct *tty, const unsigned char *cp,
 	/* Unthrottle if handling overflow on pty */
 	if (tty->driver->type == TTY_DRIVER_TYPE_PTY) {
 		if (overflow) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_set_flow_change(tty, TTY_UNTHROTTLE_SAFE);
 			tty_unthrottle_safe(tty);
 			__tty_set_flow_change(tty, 0);
@@ -1737,6 +1865,7 @@ n_tty_receive_buf_common(struct tty_struct *tty, const unsigned char *cp,
 static void n_tty_receive_buf(struct tty_struct *tty, const unsigned char *cp,
 			      char *fp, int count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	n_tty_receive_buf_common(tty, cp, fp, count, 0);
 }
 
@@ -1771,6 +1900,7 @@ static void n_tty_set_termios(struct tty_struct *tty, struct ktermios *old)
 			ldata->canon_head = ldata->read_tail;
 			ldata->push = 0;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_bit((ldata->read_head - 1) & (N_TTY_BUF_SIZE - 1),
 				ldata->read_flags);
 			ldata->canon_head = ldata->read_head;
@@ -1790,9 +1920,13 @@ static void n_tty_set_termios(struct tty_struct *tty, struct ktermios *old)
 		bitmap_zero(ldata->char_map, 256);
 
 		if (I_IGNCR(tty) || I_ICRNL(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_bit('\r', ldata->char_map);
+}
 		if (I_INLCR(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_bit('\n', ldata->char_map);
+}
 
 		if (L_ICANON(tty)) {
 			set_bit(ERASE_CHAR(tty), ldata->char_map);
@@ -1818,6 +1952,7 @@ static void n_tty_set_termios(struct tty_struct *tty, struct ktermios *old)
 			set_bit(QUIT_CHAR(tty), ldata->char_map);
 			set_bit(SUSP_CHAR(tty), ldata->char_map);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clear_bit(__DISABLED_CHAR, ldata->char_map);
 		ldata->raw = 0;
 		ldata->real_raw = 0;
@@ -1953,6 +2088,7 @@ static int copy_from_read_buf(struct tty_struct *tty,
 	n = min(head - ldata->read_tail, N_TTY_BUF_SIZE - tail);
 	n = min(*nr, n);
 	if (n) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const unsigned char *from = read_buf_addr(ldata, tail);
 		retval = copy_to_user(*b, from, n);
 		n -= retval;
@@ -2004,7 +2140,9 @@ static int canon_copy_from_read_buf(struct tty_struct *tty,
 
 	/* N.B. avoid overrun if nr == 0 */
 	if (!*nr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	n = min(*nr + 1, smp_load_acquire(&ldata->canon_head) - ldata->read_tail);
 
@@ -2081,7 +2219,9 @@ static int job_control(struct tty_struct *tty, struct file *file)
 	   check of the logic of this change. -- jlc */
 	/* don't stop on /dev/console */
 	if (file->f_op->write == redirected_tty_write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return __tty_check_change(tty, SIGTTIN);
 }
@@ -2121,17 +2261,23 @@ static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,
 
 	c = job_control(tty, file);
 	if (c < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return c;
+}
 
 	/*
 	 *	Internal serialization of reads.
 	 */
 	if (file->f_flags & O_NONBLOCK) {
 		if (!mutex_trylock(&ldata->atomic_read_lock))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EAGAIN;
+}
 	} else {
 		if (mutex_lock_interruptible(&ldata->atomic_read_lock))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ERESTARTSYS;
+}
 	}
 
 	down_read(&tty->termios_rwsem);
@@ -2143,6 +2289,7 @@ static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,
 		if (minimum) {
 			time = (HZ / 10) * TIME_CHAR(tty);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			timeout = (HZ / 10) * TIME_CHAR(tty);
 			minimum = 1;
 		}
@@ -2158,14 +2305,18 @@ static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,
 			unsigned char cs;
 			if (b != buf)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock_irq(&tty->link->ctrl_lock);
 			cs = tty->link->ctrl_status;
 			tty->link->ctrl_status = 0;
 			spin_unlock_irq(&tty->link->ctrl_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (put_user(cs, b)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = -EFAULT;
 				break;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			b++;
 			nr--;
 			break;
@@ -2177,6 +2328,7 @@ static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,
 			down_read(&tty->termios_rwsem);
 			if (!input_available_p(tty, 0)) {
 				if (test_bit(TTY_OTHER_CLOSED, &tty->flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					retval = -EIO;
 					break;
 				}
@@ -2185,10 +2337,12 @@ static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,
 				if (!timeout)
 					break;
 				if (file->f_flags & O_NONBLOCK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					retval = -EAGAIN;
 					break;
 				}
 				if (signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					retval = -ERESTARTSYS;
 					break;
 				}
@@ -2203,6 +2357,7 @@ static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,
 		}
 
 		if (ldata->icanon && !L_EXTPROC(tty)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = canon_copy_from_read_buf(tty, &b, &nr);
 			if (retval)
 				break;
@@ -2211,10 +2366,13 @@ static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,
 
 			/* Deal with packet mode. */
 			if (packet && b == buf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (put_user(TIOCPKT_DATA, b)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					retval = -EFAULT;
 					break;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				b++;
 				nr--;
 			}
@@ -2222,6 +2380,7 @@ static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,
 			uncopied = copy_from_read_buf(tty, &b, &nr);
 			uncopied += copy_from_read_buf(tty, &b, &nr);
 			if (uncopied) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = -EFAULT;
 				break;
 			}
@@ -2231,8 +2390,11 @@ static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,
 
 		if (b - buf >= minimum)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (time)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			timeout = time;
+}
 	}
 	if (tail != ldata->read_tail)
 		n_tty_kick_worker(tty);
@@ -2244,6 +2406,7 @@ static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,
 	if (b - buf)
 		retval = b - buf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 
@@ -2279,9 +2442,12 @@ static ssize_t n_tty_write(struct tty_struct *tty, struct file *file,
 
 	/* Job control check -- must be done at start (POSIX.1 7.1.1.4). */
 	if (L_TOSTOP(tty) && file->f_op->write != redirected_tty_write) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = tty_check_change(tty);
 		if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
 	}
 
 	down_read(&tty->termios_rwsem);
@@ -2290,12 +2456,15 @@ static ssize_t n_tty_write(struct tty_struct *tty, struct file *file,
 	process_echoes(tty);
 
 	add_wait_queue(&tty->write_wait, &wait);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		if (signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -ERESTARTSYS;
 			break;
 		}
 		if (tty_hung_up_p(file) || (tty->link && !tty->link->count)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -EIO;
 			break;
 		}
@@ -2303,8 +2472,10 @@ static ssize_t n_tty_write(struct tty_struct *tty, struct file *file,
 			while (nr > 0) {
 				ssize_t num = process_output_block(tty, b, nr);
 				if (num < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (num == -EAGAIN)
 						break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					retval = num;
 					goto break_out;
 				}
@@ -2322,26 +2493,34 @@ static ssize_t n_tty_write(struct tty_struct *tty, struct file *file,
 		} else {
 			struct n_tty_data *ldata = tty->disc_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			while (nr > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				mutex_lock(&ldata->output_lock);
 				c = tty->ops->write(tty, b, nr);
 				mutex_unlock(&ldata->output_lock);
 				if (c < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					retval = c;
 					goto break_out;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!c)
 					break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				b += c;
 				nr -= c;
 			}
 		}
 		if (!nr)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (file->f_flags & O_NONBLOCK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -EAGAIN;
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up_read(&tty->termios_rwsem);
 
 		wait_woken(&wait, TASK_INTERRUPTIBLE, MAX_SCHEDULE_TIMEOUT);
@@ -2351,7 +2530,9 @@ static ssize_t n_tty_write(struct tty_struct *tty, struct file *file,
 break_out:
 	remove_wait_queue(&tty->write_wait, &wait);
 	if (nr && tty->fasync)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_bit(TTY_DO_WRITE_WAKEUP, &tty->flags);
+}
 	up_read(&tty->termios_rwsem);
 	return (b - buf) ? b - buf : retval;
 }
@@ -2378,18 +2559,26 @@ static unsigned int n_tty_poll(struct tty_struct *tty, struct file *file,
 	poll_wait(file, &tty->read_wait, wait);
 	poll_wait(file, &tty->write_wait, wait);
 	if (input_available_p(tty, 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLIN | POLLRDNORM;
+}
 	else {
 		tty_buffer_flush_work(tty->port);
 		if (input_available_p(tty, 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mask |= POLLIN | POLLRDNORM;
+}
 	}
 	if (tty->packet && tty->link->ctrl_status)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLPRI | POLLIN | POLLRDNORM;
+}
 	if (test_bit(TTY_OTHER_CLOSED, &tty->flags))
 		mask |= POLLHUP;
 	if (tty_hung_up_p(file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLHUP;
+}
 	if (tty->ops->write && !tty_is_writelocked(tty) &&
 			tty_chars_in_buffer(tty) < WAKEUP_CHARS &&
 			tty_write_room(tty) > 0)
@@ -2402,7 +2591,9 @@ static unsigned long inq_canon(struct n_tty_data *ldata)
 	size_t nr, head, tail;
 
 	if (ldata->canon_head == ldata->read_tail)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	head = ldata->canon_head;
 	tail = ldata->read_tail;
 	nr = head - tail;
@@ -2427,11 +2618,16 @@ static int n_tty_ioctl(struct tty_struct *tty, struct file *file,
 		return put_user(tty_chars_in_buffer(tty), (int __user *) arg);
 	case TIOCINQ:
 		down_write(&tty->termios_rwsem);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (L_ICANON(tty) && !L_EXTPROC(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = inq_canon(ldata);
+}
 		else
 			retval = read_cnt(ldata);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up_write(&tty->termios_rwsem);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return put_user(retval, (unsigned int __user *) arg);
 	default:
 		return n_tty_ioctl_helper(tty, file, cmd, arg);
@@ -2463,6 +2659,7 @@ static struct tty_ldisc_ops n_tty_ops = {
 
 void n_tty_inherit_ops(struct tty_ldisc_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*ops = n_tty_ops;
 	ops->owner = NULL;
 	ops->refcount = ops->flags = 0;
diff --git a/drivers/tty/pty.c b/drivers/tty/pty.c
index 6433844..ad2a5eb 100644
--- a/drivers/tty/pty.c
+++ b/drivers/tty/pty.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  Copyright (C) 1991, 1992  Linus Torvalds
@@ -49,9 +51,13 @@ static void pty_close(struct tty_struct *tty, struct file *filp)
 		WARN_ON(tty->count > 1);
 	else {
 		if (tty_io_error(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 		if (tty->count > 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 	}
 	set_bit(TTY_IO_ERROR, &tty->flags);
 	wake_up_interruptible(&tty->read_wait);
@@ -61,11 +67,14 @@ static void pty_close(struct tty_struct *tty, struct file *filp)
 	spin_unlock_irq(&tty->ctrl_lock);
 	/* Review - krefs on tty_link ?? */
 	if (!tty->link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	set_bit(TTY_OTHER_CLOSED, &tty->link->flags);
 	wake_up_interruptible(&tty->link->read_wait);
 	wake_up_interruptible(&tty->link->write_wait);
 	if (tty->driver->subtype == PTY_TYPE_MASTER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_bit(TTY_OTHER_CLOSED, &tty->flags);
 #ifdef CONFIG_UNIX98_PTYS
 		if (tty->driver == ptm_driver) {
@@ -91,6 +100,7 @@ static void pty_close(struct tty_struct *tty, struct file *filp)
  */
 static void pty_unthrottle(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_wakeup(tty->link);
 	set_bit(TTY_THROTTLED, &tty->flags);
 }
@@ -112,7 +122,9 @@ static int pty_write(struct tty_struct *tty, const unsigned char *buf, int c)
 	struct tty_struct *to = tty->link;
 
 	if (tty->stopped)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (c > 0) {
 		/* Stuff the data into the input queue of the other end */
@@ -121,6 +133,7 @@ static int pty_write(struct tty_struct *tty, const unsigned char *buf, int c)
 		if (c)
 			tty_flip_buffer_push(to->port);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return c;
 }
 
@@ -135,7 +148,9 @@ static int pty_write(struct tty_struct *tty, const unsigned char *buf, int c)
 static int pty_write_room(struct tty_struct *tty)
 {
 	if (tty->stopped)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return tty_buffer_space_avail(tty->link->port);
 }
 
@@ -157,16 +172,22 @@ static int pty_set_lock(struct tty_struct *tty, int __user *arg)
 {
 	int val;
 	if (get_user(val, arg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	if (val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_bit(TTY_PTY_LOCK, &tty->flags);
+}
 	else
 		clear_bit(TTY_PTY_LOCK, &tty->flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int pty_get_lock(struct tty_struct *tty, int __user *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int locked = test_bit(TTY_PTY_LOCK, &tty->flags);
 	return put_user(locked, arg);
 }
@@ -177,7 +198,9 @@ static int pty_set_pktmode(struct tty_struct *tty, int __user *arg)
 	int pktmode;
 
 	if (get_user(pktmode, arg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	spin_lock_irq(&tty->ctrl_lock);
 	if (pktmode) {
@@ -197,6 +220,7 @@ static int pty_set_pktmode(struct tty_struct *tty, int __user *arg)
 static int pty_get_pktmode(struct tty_struct *tty, int __user *arg)
 {
 	int pktmode = tty->packet;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return put_user(pktmode, arg);
 }
 
@@ -205,6 +229,7 @@ static int pty_signal(struct tty_struct *tty, int sig)
 {
 	struct pid *pgrp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sig != SIGINT && sig != SIGQUIT && sig != SIGTSTP)
 		return -EINVAL;
 
@@ -222,10 +247,13 @@ static void pty_flush_buffer(struct tty_struct *tty)
 	struct tty_struct *to = tty->link;
 
 	if (!to)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	tty_buffer_flush(to, NULL);
 	if (to->packet) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irq(&tty->ctrl_lock);
 		tty->ctrl_status |= TIOCPKT_FLUSHWRITE;
 		wake_up_interruptible(&to->read_wait);
@@ -236,7 +264,9 @@ static void pty_flush_buffer(struct tty_struct *tty)
 static int pty_open(struct tty_struct *tty, struct file *filp)
 {
 	if (!tty || !tty->link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (test_bit(TTY_OTHER_CLOSED, &tty->flags))
 		goto out;
@@ -261,23 +291,34 @@ static void pty_set_termios(struct tty_struct *tty,
 	/* See if packet mode change of state. */
 	if (tty->link && tty->link->packet) {
 		int extproc = (old_termios->c_lflag & EXTPROC) | L_EXTPROC(tty);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int old_flow = ((old_termios->c_iflag & IXON) &&
 				(old_termios->c_cc[VSTOP] == '\023') &&
 				(old_termios->c_cc[VSTART] == '\021'));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int new_flow = (I_IXON(tty) &&
 				STOP_CHAR(tty) == '\023' &&
 				START_CHAR(tty) == '\021');
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((old_flow != new_flow) || extproc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock_irq(&tty->ctrl_lock);
 			if (old_flow != new_flow) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tty->ctrl_status &= ~(TIOCPKT_DOSTOP | TIOCPKT_NOSTOP);
 				if (new_flow)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					tty->ctrl_status |= TIOCPKT_DOSTOP;
+}
 				else
 					tty->ctrl_status |= TIOCPKT_NOSTOP;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (extproc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tty->ctrl_status |= TIOCPKT_IOCTL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irq(&tty->ctrl_lock);
 			wake_up_interruptible(&tty->link->read_wait);
 		}
@@ -339,6 +380,7 @@ static void pty_start(struct tty_struct *tty)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tty->link && tty->link->packet) {
 		spin_lock_irqsave(&tty->ctrl_lock, flags);
 		tty->ctrl_status &= ~TIOCPKT_STOP;
@@ -352,6 +394,7 @@ static void pty_stop(struct tty_struct *tty)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tty->link && tty->link->packet) {
 		spin_lock_irqsave(&tty->ctrl_lock, flags);
 		tty->ctrl_status &= ~TIOCPKT_START;
@@ -382,8 +425,11 @@ static int pty_common_install(struct tty_driver *driver, struct tty_struct *tty,
 
 	/* Opening the slave first has always returned -EIO */
 	if (driver->subtype != PTY_TYPE_MASTER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ports[0] = kmalloc(sizeof **ports, GFP_KERNEL);
 	ports[1] = kmalloc(sizeof **ports, GFP_KERNEL);
 	if (!ports[0] || !ports[1])
@@ -397,6 +443,7 @@ static int pty_common_install(struct tty_driver *driver, struct tty_struct *tty,
 		goto err_put_module;
 
 	tty_set_lock_subclass(o_tty);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_subclass(&o_tty->termios_rwsem, TTY_LOCK_SLAVE);
 
 	if (legacy) {
@@ -620,7 +667,9 @@ int ptm_open_peer(struct file *master, struct tty_struct *tty, int flags)
 	struct path path;
 
 	if (tty->driver != ptm_driver)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	fd = get_unused_fd_flags(0);
 	if (fd < 0) {
@@ -670,6 +719,7 @@ static int pty_unix98_ioctl(struct tty_struct *tty,
 		return pty_signal(tty, (int) arg);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOIOCTLCMD;
 }
 
@@ -718,7 +768,9 @@ static struct tty_struct *pts_unix98_lookup(struct tty_driver *driver,
 	mutex_unlock(&devpts_mutex);
 	/* Master must be open before slave */
 	if (!tty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EIO);
+}
 	return tty;
 }
 
@@ -745,6 +797,7 @@ static void pty_unix98_remove(struct tty_driver *driver, struct tty_struct *tty)
 
 static void pty_show_fdinfo(struct tty_struct *tty, struct seq_file *m)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_printf(m, "tty-index:\t%d\n", tty->index);
 }
 
@@ -810,7 +863,9 @@ static int ptmx_open(struct inode *inode, struct file *filp)
 
 	retval = tty_alloc_file(filp);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	fsi = devpts_acquire(filp);
 	if (IS_ERR(fsi)) {
@@ -849,6 +904,7 @@ static int ptmx_open(struct inode *inode, struct file *filp)
 
 	dentry = devpts_pty_new(fsi, index, tty->link);
 	if (IS_ERR(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = PTR_ERR(dentry);
 		goto err_release;
 	}
@@ -858,6 +914,7 @@ static int ptmx_open(struct inode *inode, struct file *filp)
 	if (retval)
 		goto err_release;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_debug_hangup(tty, "opening (count=%d)\n", tty->count);
 
 	tty_unlock(tty);
@@ -887,7 +944,9 @@ static void __init unix98_pty_init(void)
 			TTY_DRIVER_DEVPTS_MEM |
 			TTY_DRIVER_DYNAMIC_ALLOC);
 	if (IS_ERR(ptm_driver))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Couldn't allocate Unix98 ptm driver");
+}
 	pts_driver = tty_alloc_driver(NR_UNIX98_PTY_MAX,
 			TTY_DRIVER_RESET_TERMIOS |
 			TTY_DRIVER_REAL_RAW |
@@ -895,7 +954,9 @@ static void __init unix98_pty_init(void)
 			TTY_DRIVER_DEVPTS_MEM |
 			TTY_DRIVER_DYNAMIC_ALLOC);
 	if (IS_ERR(pts_driver))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Couldn't allocate Unix98 pts driver");
+}
 
 	ptm_driver->driver_name = "pty_master";
 	ptm_driver->name = "ptm";
@@ -927,9 +988,13 @@ static void __init unix98_pty_init(void)
 	tty_set_operations(pts_driver, &pty_unix98_ops);
 
 	if (tty_register_driver(ptm_driver))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Couldn't register Unix98 ptm driver");
+}
 	if (tty_register_driver(pts_driver))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Couldn't register Unix98 pts driver");
+}
 
 	/* Now create the /dev/ptmx special device */
 	tty_default_fops(&ptmx_fops);
@@ -948,6 +1013,7 @@ static inline void unix98_pty_init(void) { }
 
 static int __init pty_init(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	legacy_pty_init();
 	unix98_pty_init();
 	return 0;
diff --git a/drivers/tty/serial/8250/8250.h b/drivers/tty/serial/8250/8250.h
index b2bdc35..d94452b 100644
--- a/drivers/tty/serial/8250/8250.h
+++ b/drivers/tty/serial/8250/8250.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Driver for 8250/16550-type serial ports
  *
diff --git a/drivers/tty/serial/8250/8250_core.c b/drivers/tty/serial/8250/8250_core.c
index d29b512a..56b0dea 100644
--- a/drivers/tty/serial/8250/8250_core.c
+++ b/drivers/tty/serial/8250/8250_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Universal/legacy driver for 8250/16550-type serial ports
  *
@@ -114,6 +116,7 @@ static irqreturn_t serial8250_interrupt(int irq, void *dev_id)
 	struct list_head *l, *end = NULL;
 	int pass_counter = 0, handled = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s(%d): start\n", __func__, irq);
 
 	spin_lock(&i->lock);
@@ -123,14 +126,18 @@ static irqreturn_t serial8250_interrupt(int irq, void *dev_id)
 		struct uart_8250_port *up;
 		struct uart_port *port;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up = list_entry(l, struct uart_8250_port, list);
 		port = &up->port;
 
 		if (port->handle_irq(port)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			handled = 1;
 			end = NULL;
 		} else if (end == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			end = l;
+}
 
 		l = l->next;
 
@@ -142,8 +149,10 @@ static irqreturn_t serial8250_interrupt(int irq, void *dev_id)
 		}
 	} while (l != end);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&i->lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s(%d): end\n", __func__, irq);
 
 	return IRQ_RETVAL(handled);
@@ -158,6 +167,7 @@ static irqreturn_t serial8250_interrupt(int irq, void *dev_id)
  */
 static void serial_do_unlink(struct irq_info *i, struct uart_8250_port *up)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&i->lock);
 
 	if (!list_empty(i->head)) {
@@ -188,6 +198,7 @@ static int serial_link_irq_chain(struct uart_8250_port *up)
 	h = &irq_lists[up->port.irq % NR_IRQ_HASH];
 
 	hlist_for_each(n, h) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i = hlist_entry(n, struct irq_info, node);
 		if (i->irq == up->port.irq)
 			break;
@@ -196,6 +207,7 @@ static int serial_link_irq_chain(struct uart_8250_port *up)
 	if (n == NULL) {
 		i = kzalloc(sizeof(struct irq_info), GFP_KERNEL);
 		if (i == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mutex_unlock(&hash_mutex);
 			return -ENOMEM;
 		}
@@ -208,6 +220,7 @@ static int serial_link_irq_chain(struct uart_8250_port *up)
 	spin_lock_irq(&i->lock);
 
 	if (i->head) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_add(&up->list, i->head);
 		spin_unlock_irq(&i->lock);
 
@@ -220,9 +233,12 @@ static int serial_link_irq_chain(struct uart_8250_port *up)
 		ret = request_irq(up->port.irq, serial8250_interrupt,
 				  irq_flags, up->port.name, i);
 		if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			serial_do_unlink(i, up);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -240,6 +256,7 @@ static void serial_unlink_irq_chain(struct uart_8250_port *up)
 
 	h = &irq_lists[up->port.irq % NR_IRQ_HASH];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each(n, h) {
 		i = hlist_entry(n, struct irq_info, node);
 		if (i->irq == up->port.irq)
@@ -276,6 +293,7 @@ static void serial8250_backup_timeout(unsigned long data)
 	unsigned int iir, ier = 0, lsr;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&up->port.lock, flags);
 
 	/*
@@ -327,6 +345,7 @@ static int univ8250_setup_irq(struct uart_8250_port *up)
 	 * the port is opened so this value needs to be preserved.
 	 */
 	if (up->bugs & UART_BUG_THRE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("ttyS%d - using backup timer\n", serial_index(port));
 
 		up->timer.function = serial8250_backup_timeout;
@@ -341,6 +360,7 @@ static int univ8250_setup_irq(struct uart_8250_port *up)
 	 * driver used to do this with IRQ0.
 	 */
 	if (!port->irq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->timer.data = (unsigned long)up;
 		mod_timer(&up->timer, jiffies + uart_poll_timeout(port));
 	} else
@@ -356,8 +376,10 @@ static void univ8250_release_irq(struct uart_8250_port *up)
 	del_timer_sync(&up->timer);
 	up->timer.function = serial8250_timeout;
 	if (port->irq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_unlink_irq_chain(up);
 }
+}
 
 #ifdef CONFIG_SERIAL_8250_RSA
 static int serial8250_request_rsa_resource(struct uart_8250_port *up)
@@ -430,6 +452,7 @@ static void (*serial8250_isa_config)(int port, struct uart_port *up,
 void serial8250_set_isa_configurator(
 	void (*v)(int port, struct uart_port *up, u32 *capabilities))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	serial8250_isa_config = v;
 }
 EXPORT_SYMBOL(serial8250_set_isa_configurator);
@@ -438,6 +461,7 @@ EXPORT_SYMBOL(serial8250_set_isa_configurator);
 
 static void univ8250_config_port(struct uart_port *port, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	up->probe &= ~UART_PROBE_RSA;
@@ -464,6 +488,7 @@ static void univ8250_config_port(struct uart_port *port, int flags)
 
 static int univ8250_request_port(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 	int ret;
 
@@ -479,6 +504,7 @@ static int univ8250_request_port(struct uart_port *port)
 
 static void univ8250_release_port(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	if (port->type == PORT_RSA)
@@ -488,6 +514,7 @@ static void univ8250_release_port(struct uart_port *port)
 
 static void univ8250_rsa_support(struct uart_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ops->config_port  = univ8250_config_port;
 	ops->request_port = univ8250_request_port;
 	ops->release_port = univ8250_release_port;
@@ -509,11 +536,15 @@ static void __init serial8250_isa_init_ports(void)
 	int i, irqflag = 0;
 
 	if (!first)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	first = 0;
 
 	if (nr_uarts > UART_NR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nr_uarts = UART_NR;
+}
 
 	for (i = 0; i < nr_uarts; i++) {
 		struct uart_8250_port *up = &serial8250_ports[i];
@@ -542,7 +573,9 @@ static void __init serial8250_isa_init_ports(void)
 	univ8250_rsa_support(&univ8250_port_ops);
 
 	if (share_irqs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		irqflag = IRQF_SHARED;
+}
 
 	for (i = 0, up = serial8250_ports;
 	     i < ARRAY_SIZE(old_serial_port) && i < nr_uarts;
@@ -562,7 +595,9 @@ static void __init serial8250_isa_init_ports(void)
 
 		port->irqflags |= irqflag;
 		if (serial8250_isa_config != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			serial8250_isa_config(i, &up->port, &up->capabilities);
+}
 	}
 }
 
@@ -608,14 +643,18 @@ static int univ8250_console_setup(struct console *co, char *options)
 	 * console support.
 	 */
 	if (co->index >= nr_uarts)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		co->index = 0;
+}
 	port = &serial8250_ports[co->index].port;
 	/* link port to console */
 	port->cons = co;
 
 	retval = serial8250_console_setup(port, options, false);
 	if (retval != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port->cons = NULL;
+}
 	return retval;
 }
 
@@ -646,10 +685,15 @@ static int univ8250_console_match(struct console *co, char *name, int idx,
 	int i;
 
 	if (strncmp(name, match, 4) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (uart_parse_earlycon(options, &iotype, &addr, &options))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* try to match the port specified on the command line */
 	for (i = 0; i < nr_uarts; i++) {
@@ -657,18 +701,22 @@ static int univ8250_console_match(struct console *co, char *name, int idx,
 
 		if (port->iotype != iotype)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((iotype == UPIO_MEM || iotype == UPIO_MEM16 ||
 		     iotype == UPIO_MEM32 || iotype == UPIO_MEM32BE)
 		    && (port->mapbase != addr))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (iotype == UPIO_PORT && port->iobase != addr)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		co->index = i;
 		port->cons = co;
 		return serial8250_console_setup(port, options, true);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 
@@ -686,7 +734,9 @@ static struct console univ8250_console = {
 static int __init univ8250_console_init(void)
 {
 	if (nr_uarts == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	serial8250_isa_init_ports();
 	register_console(&univ8250_console);
@@ -718,6 +768,7 @@ int __init early_serial_setup(struct uart_port *port)
 {
 	struct uart_port *p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (port->line >= ARRAY_SIZE(serial8250_ports) || nr_uarts == 0)
 		return -ENODEV;
 
@@ -761,6 +812,7 @@ void serial8250_suspend_port(int line)
 	struct uart_8250_port *up = &serial8250_ports[line];
 	struct uart_port *port = &up->port;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!console_suspend_enabled && uart_console(port) &&
 	    port->type != PORT_8250) {
 		unsigned char canary = 0xa5;
@@ -806,6 +858,7 @@ EXPORT_SYMBOL(serial8250_resume_port);
  */
 static int serial8250_probe(struct platform_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct plat_serial8250_port *p = dev_get_platdata(&dev->dev);
 	struct uart_8250_port uart;
 	int ret, i, irqflag = 0;
@@ -813,9 +866,12 @@ static int serial8250_probe(struct platform_device *dev)
 	memset(&uart, 0, sizeof(uart));
 
 	if (share_irqs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		irqflag = IRQF_SHARED;
+}
 
 	for (i = 0; p && p->flags != 0; p++, i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uart.port.iobase	= p->iobase;
 		uart.port.membase	= p->membase;
 		uart.port.irq		= p->irq;
@@ -840,6 +896,7 @@ static int serial8250_probe(struct platform_device *dev)
 		uart.port.irqflags	|= irqflag;
 		ret = serial8250_register_8250_port(&uart);
 		if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_err(&dev->dev, "unable to register port at index %d "
 				"(IO%lx MEM%llx IRQ%d): %d\n", i,
 				p->iobase, (unsigned long long)p->mapbase,
@@ -856,6 +913,7 @@ static int serial8250_remove(struct platform_device *dev)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nr_uarts; i++) {
 		struct uart_8250_port *up = &serial8250_ports[i];
 
@@ -869,6 +927,7 @@ static int serial8250_suspend(struct platform_device *dev, pm_message_t state)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < UART_NR; i++) {
 		struct uart_8250_port *up = &serial8250_ports[i];
 
@@ -883,6 +942,7 @@ static int serial8250_resume(struct platform_device *dev)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < UART_NR; i++) {
 		struct uart_8250_port *up = &serial8250_ports[i];
 
@@ -929,6 +989,7 @@ static struct uart_8250_port *serial8250_find_match_or_unused(struct uart_port *
 
 	/* try line number first if still available */
 	i = port->line;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (i < nr_uarts && serial8250_ports[i].port.type == PORT_UNKNOWN &&
 			serial8250_ports[i].port.iobase == 0)
 		return &serial8250_ports[i];
@@ -938,18 +999,25 @@ static struct uart_8250_port *serial8250_find_match_or_unused(struct uart_port *
 	 * used (indicated by zero iobase).
 	 */
 	for (i = 0; i < nr_uarts; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (serial8250_ports[i].port.type == PORT_UNKNOWN &&
 		    serial8250_ports[i].port.iobase == 0)
 			return &serial8250_ports[i];
+}
 
 	/*
 	 * That also failed.  Last resort is to find any entry which
 	 * doesn't have a real port associated with it.
 	 */
 	for (i = 0; i < nr_uarts; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (serial8250_ports[i].port.type == PORT_UNKNOWN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return &serial8250_ports[i];
+}
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -972,14 +1040,18 @@ int serial8250_register_8250_port(struct uart_8250_port *up)
 	int ret = -ENOSPC;
 
 	if (up->port.uartclk == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&serial_mutex);
 
 	uart = serial8250_find_match_or_unused(&up->port);
 	if (uart && uart->port.type != PORT_8250_CIR) {
 		if (uart->port.dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart_remove_one_port(&serial8250_reg, &uart->port);
+}
 
 		uart->port.iobase       = up->port.iobase;
 		uart->port.membase      = up->port.membase;
@@ -1004,49 +1076,81 @@ int serial8250_register_8250_port(struct uart_8250_port *up)
 
 		/* Take tx_loadsz from fifosize if it wasn't set separately */
 		if (uart->port.fifosize && !uart->tx_loadsz)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->tx_loadsz = uart->port.fifosize;
+}
 
 		if (up->port.dev)
 			uart->port.dev = up->port.dev;
 
 		if (up->port.flags & UPF_FIXED_TYPE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->port.type = up->port.type;
+}
 
 		serial8250_set_defaults(uart);
 
 		/* Possibly override default I/O functions.  */
 		if (up->port.serial_in)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->port.serial_in = up->port.serial_in;
+}
 		if (up->port.serial_out)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->port.serial_out = up->port.serial_out;
+}
 		if (up->port.handle_irq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->port.handle_irq = up->port.handle_irq;
+}
 		/*  Possibly override set_termios call */
 		if (up->port.set_termios)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->port.set_termios = up->port.set_termios;
+}
 		if (up->port.set_ldisc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->port.set_ldisc = up->port.set_ldisc;
+}
 		if (up->port.get_mctrl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->port.get_mctrl = up->port.get_mctrl;
+}
 		if (up->port.set_mctrl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->port.set_mctrl = up->port.set_mctrl;
+}
 		if (up->port.startup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->port.startup = up->port.startup;
+}
 		if (up->port.shutdown)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->port.shutdown = up->port.shutdown;
+}
 		if (up->port.pm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->port.pm = up->port.pm;
+}
 		if (up->port.handle_break)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->port.handle_break = up->port.handle_break;
+}
 		if (up->dl_read)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->dl_read = up->dl_read;
+}
 		if (up->dl_write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart->dl_write = up->dl_write;
+}
 
 		if (uart->port.type != PORT_8250_CIR) {
 			if (serial8250_isa_config != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				serial8250_isa_config(0, &uart->port,
 						&uart->capabilities);
+}
 
 			serial8250_apply_quirks(uart);
 			ret = uart_add_one_port(&serial8250_reg,
@@ -1054,6 +1158,7 @@ int serial8250_register_8250_port(struct uart_8250_port *up)
 			if (ret == 0)
 				ret = uart->port.line;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_info(uart->port.dev,
 				"skipping CIR port at 0x%lx / 0x%llx, IRQ %d\n",
 				uart->port.iobase,
@@ -1085,6 +1190,7 @@ void serial8250_unregister_port(int line)
 	if (uart->em485) {
 		unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irqsave(&uart->port.lock, flags);
 		serial8250_em485_destroy(uart);
 		spin_unlock_irqrestore(&uart->port.lock, flags);
@@ -1110,7 +1216,9 @@ static int __init serial8250_init(void)
 	int ret;
 
 	if (nr_uarts == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	serial8250_isa_init_ports();
 
@@ -1133,6 +1241,7 @@ static int __init serial8250_init(void)
 	serial8250_isa_devs = platform_device_alloc("serial8250",
 						    PLAT8250_DEV_LEGACY);
 	if (!serial8250_isa_devs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOMEM;
 		goto unreg_pnp;
 	}
@@ -1147,6 +1256,7 @@ static int __init serial8250_init(void)
 	if (ret == 0)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	platform_device_del(serial8250_isa_devs);
 put_dev:
 	platform_device_put(serial8250_isa_devs);
diff --git a/drivers/tty/serial/8250/8250_exar.c b/drivers/tty/serial/8250/8250_exar.c
index c556247..5a2d6a3 100644
--- a/drivers/tty/serial/8250/8250_exar.c
+++ b/drivers/tty/serial/8250/8250_exar.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Probe module for 8250/16550-type Exar chips PCI serial ports.
  *
@@ -134,6 +136,7 @@ static int default_setup(struct exar8250 *priv, struct pci_dev *pcidev,
 	const struct exar8250_board *board = priv->board;
 	unsigned int bar = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pcim_iomap_table(pcidev)[bar] && !pcim_iomap(pcidev, bar, 0))
 		return -ENOMEM;
 
@@ -158,7 +161,9 @@ pci_fastcom335_setup(struct exar8250 *priv, struct pci_dev *pcidev,
 
 	err = default_setup(priv, pcidev, idx, offset, port);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	p = port->port.membase;
 
@@ -246,7 +251,9 @@ __xr17v35x_register_gpio(struct pci_dev *pcidev,
 
 	pdev = platform_device_alloc("gpio_exar", PLATFORM_DEVID_AUTO);
 	if (!pdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	pdev->dev.parent = &pcidev->dev;
 	ACPI_COMPANION_SET(&pdev->dev, ACPI_COMPANION(&pcidev->dev));
@@ -269,6 +276,7 @@ static const struct property_entry exar_gpio_properties[] = {
 static int xr17v35x_register_gpio(struct pci_dev *pcidev,
 				  struct uart_8250_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pcidev->vendor == PCI_VENDOR_ID_EXAR)
 		port->port.private_data =
 			__xr17v35x_register_gpio(pcidev, exar_gpio_properties);
@@ -289,6 +297,7 @@ static int iot2040_rs485_config(struct uart_port *port,
 	u8 mode, value;
 
 	if (is_rs485) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rs485->flags & SER_RS485_RX_DURING_TX)
 			mode = IOT2040_UART_MODE_RS422;
 		else
@@ -378,7 +387,9 @@ pci_xr17v35x_setup(struct exar8250 *priv, struct pci_dev *pcidev,
 
 	dmi_match = dmi_first_match(exar_platforms);
 	if (dmi_match)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		platform = dmi_match->driver_data;
+}
 	else
 		platform = &exar8250_default_platform;
 
@@ -415,6 +426,7 @@ pci_xr17v35x_setup(struct exar8250 *priv, struct pci_dev *pcidev,
 
 static void pci_xr17v35x_exit(struct pci_dev *pcidev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct exar8250 *priv = pci_get_drvdata(pcidev);
 	struct uart_8250_port *port = serial8250_get_port(priv->line[0]);
 	struct platform_device *pdev = port->port.private_data;
@@ -434,7 +446,9 @@ exar_pci_probe(struct pci_dev *pcidev, const struct pci_device_id *ent)
 
 	board = (struct exar8250_board *)ent->driver_data;
 	if (!board)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	rc = pcim_enable_device(pcidev);
 	if (rc)
@@ -490,6 +504,7 @@ exar_pci_probe(struct pci_dev *pcidev, const struct pci_device_id *ent)
 
 static void exar_pci_remove(struct pci_dev *pcidev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct exar8250 *priv = pci_get_drvdata(pcidev);
 	unsigned int i;
 
@@ -502,6 +517,7 @@ static void exar_pci_remove(struct pci_dev *pcidev)
 
 static int __maybe_unused exar_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pcidev = to_pci_dev(dev);
 	struct exar8250 *priv = pci_get_drvdata(pcidev);
 	unsigned int i;
@@ -519,6 +535,7 @@ static int __maybe_unused exar_suspend(struct device *dev)
 
 static int __maybe_unused exar_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pcidev = to_pci_dev(dev);
 	struct exar8250 *priv = pci_get_drvdata(pcidev);
 	unsigned int i;
diff --git a/drivers/tty/serial/8250/8250_lpss.c b/drivers/tty/serial/8250/8250_lpss.c
index 7dddd7e..45c4e9b 100644
--- a/drivers/tty/serial/8250/8250_lpss.c
+++ b/drivers/tty/serial/8250/8250_lpss.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * 8250_lpss.c - Driver for UART on Intel Braswell and various other Intel SoCs
  *
@@ -64,6 +66,7 @@ struct lpss8250 {
 static void byt_set_termios(struct uart_port *p, struct ktermios *termios,
 			    struct ktermios *old)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int baud = tty_termios_baud_rate(termios);
 	struct lpss8250 *lpss = p->private_data;
 	unsigned long fref = lpss->board->freq, fuart = baud * 16;
@@ -101,6 +104,7 @@ static void byt_set_termios(struct uart_port *p, struct ktermios *termios,
 
 static unsigned int byt_get_mctrl(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int ret = serial8250_do_get_mctrl(port);
 
 	/* Force DCD and DSR signals to permanently be reported as active */
@@ -113,6 +117,7 @@ static int byt_serial_setup(struct lpss8250 *lpss, struct uart_port *port)
 {
 	struct dw_dma_slave *param = &lpss->dma_param;
 	struct uart_8250_port *up = up_to_u8250p(port);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(port->dev);
 	unsigned int dma_devfn = PCI_DEVFN(PCI_SLOT(pdev->devfn), 0);
 	struct pci_dev *dma_dev = pci_get_slot(pdev->bus, dma_devfn);
@@ -170,6 +175,7 @@ static void qrk_serial_setup_dma(struct lpss8250 *lpss, struct uart_port *port)
 	struct uart_8250_dma *dma = &lpss->dma;
 	struct dw_dma_chip *chip = &lpss->dma_chip;
 	struct dw_dma_slave *param = &lpss->dma_param;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(port->dev);
 	int ret;
 
@@ -202,7 +208,9 @@ static void qrk_serial_exit_dma(struct lpss8250 *lpss)
 	struct dw_dma_slave *param = &lpss->dma_param;
 
 	if (!param->dma_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	dw_dma_remove(&lpss->dma_chip);
 }
 #else	/* CONFIG_SERIAL_8250_DMA */
diff --git a/drivers/tty/serial/8250/8250_pci.c b/drivers/tty/serial/8250/8250_pci.c
index d4e7be8..f4c971a 100644
--- a/drivers/tty/serial/8250/8250_pci.c
+++ b/drivers/tty/serial/8250/8250_pci.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Probe module for 8250/16550-type PCI serial ports.
  *
@@ -78,7 +80,9 @@ setup_port(struct serial_private *priv, struct uart_8250_port *port,
 	struct pci_dev *dev = priv->dev;
 
 	if (bar >= PCI_NUM_BAR_RESOURCES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (pci_resource_flags(dev, bar) & IORESOURCE_MEM) {
 		if (!pcim_iomap(dev, bar, 0) && !pcim_iomap_table(dev))
@@ -110,6 +114,7 @@ static int addidata_apci7800_setup(struct serial_private *priv,
 	bar = FL_GET_BASE(board->flags);
 
 	if (idx < 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		offset += idx * board->uart_offset;
 	} else if ((idx >= 2) && (idx < 4)) {
 		bar += 1;
@@ -137,7 +142,9 @@ afavlab_setup(struct serial_private *priv, const struct pciserial_board *board,
 
 	bar = FL_GET_BASE(board->flags);
 	if (idx < 4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bar += idx;
+}
 	else {
 		bar = 4;
 		offset += (idx - 4) * board->uart_offset;
@@ -219,7 +226,9 @@ static int pci_inteli960ni_init(struct pci_dev *dev)
 	u32 oldval;
 
 	if (!(dev->subsystem_device & 0x1000))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* is firmware started? */
 	pci_read_config_dword(dev, 0x44, &oldval);
@@ -242,6 +251,7 @@ static int pci_plx9050_init(struct pci_dev *dev)
 	void __iomem *p;
 
 	if ((pci_resource_flags(dev, 0) & IORESOURCE_MEM) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		moan_device("no memory in bar 0", dev);
 		return 0;
 	}
@@ -284,7 +294,9 @@ static void pci_plx9050_exit(struct pci_dev *dev)
 	u8 __iomem *p;
 
 	if ((pci_resource_flags(dev, 0) & IORESOURCE_MEM) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * disable interrupts
@@ -310,6 +322,7 @@ static void pci_ni8420_exit(struct pci_dev *dev)
 	unsigned int bar = 0;
 
 	if ((pci_resource_flags(dev, bar) & IORESOURCE_MEM) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		moan_device("no memory in bar", dev);
 		return;
 	}
@@ -339,6 +352,7 @@ static void pci_ni8430_exit(struct pci_dev *dev)
 	unsigned int bar = 0;
 
 	if ((pci_resource_flags(dev, bar) & IORESOURCE_MEM) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		moan_device("no memory in bar", dev);
 		return;
 	}
@@ -390,7 +404,9 @@ static int sbs_init(struct pci_dev *dev)
 	p = pci_ioremap_bar(dev, 0);
 
 	if (p == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	/* Set bit-4 Control Register (UART RESET) in to reset the uarts */
 	writeb(0x10, p + OCT_REG_CR_OFF);
 	udelay(50);
@@ -414,7 +430,9 @@ static void sbs_exit(struct pci_dev *dev)
 	p = pci_ioremap_bar(dev, 0);
 	/* FIXME: What if resource_len < OCT_REG_CR_OFF */
 	if (p != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		writeb(0, p + OCT_REG_CR_OFF);
+}
 	iounmap(p);
 }
 
@@ -500,7 +518,9 @@ static int pci_siig_init(struct pci_dev *dev)
 	unsigned int type = dev->device & 0xff00;
 
 	if (type == 0x1000)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return pci_siig10x_init(dev);
+}
 	else if (type == 0x2000)
 		return pci_siig20x_init(dev);
 
@@ -515,6 +535,7 @@ static int pci_siig_setup(struct serial_private *priv,
 	unsigned int bar = FL_GET_BASE(board->flags) + idx, offset = 0;
 
 	if (idx > 3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bar = 4;
 		offset = (idx - 4) * 8;
 	}
@@ -588,6 +609,7 @@ static int pci_timedia_init(struct pci_dev *dev)
 	const unsigned short *ids;
 	int i, j;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(timedia_data); i++) {
 		ids = timedia_data[i].ids;
 		for (j = 0; ids[j]; j++)
@@ -659,6 +681,7 @@ titan_400l_800l_setup(struct serial_private *priv,
 
 static int pci_xircom_init(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msleep(100);
 	return 0;
 }
@@ -669,6 +692,7 @@ static int pci_ni8420_init(struct pci_dev *dev)
 	unsigned int bar = 0;
 
 	if ((pci_resource_flags(dev, bar) & IORESOURCE_MEM) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		moan_device("no memory in bar", dev);
 		return 0;
 	}
@@ -700,6 +724,7 @@ static int pci_ni8430_init(struct pci_dev *dev)
 	unsigned int bar = 0;
 
 	if ((pci_resource_flags(dev, bar) & IORESOURCE_MEM) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		moan_device("no memory in bar", dev);
 		return 0;
 	}
@@ -746,7 +771,9 @@ pci_ni8430_setup(struct serial_private *priv,
 	unsigned int bar, offset = board->first_offset;
 
 	if (idx >= board->num_ports)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	bar = FL_GET_BASE(board->flags);
 	offset += idx * board->uart_offset;
@@ -800,7 +827,9 @@ static int pci_netmos_9900_numports(struct pci_dev *dev)
 	pi = c & 0xff;
 
 	if (pi == 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	if ((pi == 0) && (dev->device == PCI_DEVICE_ID_NETMOS_9900)) {
 		/* two possibilities: 0x30ps encodes number of parallel and
@@ -894,6 +923,7 @@ static int pci_ite887x_init(struct pci_dev *dev)
 
 	/* search for the base-ioport */
 	i = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (inta_addr[i] && iobase == NULL) {
 		iobase = request_region(inta_addr[i], ITE_887x_IOSIZE,
 								"ite887x");
@@ -1056,6 +1086,7 @@ static int pci_asix_setup(struct serial_private *priv,
 		  const struct pciserial_board *board,
 		  struct uart_8250_port *port, int idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	port->bugs |= UART_BUG_PARITY;
 	return pci_default_setup(priv, board, port, idx);
 }
@@ -1109,6 +1140,7 @@ static struct quatech_feature quatech_cards[] = {
 static int pci_quatech_amcc(u16 devid)
 {
 	struct quatech_feature *qf = &quatech_cards[0];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (qf->devid) {
 		if (qf->devid == devid)
 			return qf->amcc;
@@ -1181,6 +1213,7 @@ static int pci_quatech_has_qmcr(struct uart_8250_port *port)
 	outb(0xBF, base + UART_LCR);
 	val = inb(base + UART_SCR);
 	if (val & 0x20) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		outb(0x80, UART_LCR);
 		if (!(inb(UART_SCR) & 0x20)) {
 			outb(LCR, base + UART_LCR);
@@ -1198,7 +1231,9 @@ static int pci_quatech_test(struct uart_8250_port *port)
 	pci_quatech_wqopr(port, qopr & QPCR_TEST_FOR1);
 	reg = pci_quatech_rqopr(port) & 0xC0;
 	if (reg != QPCR_TEST_GET1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	pci_quatech_wqopr(port, (qopr & QPCR_TEST_FOR1)|QPCR_TEST_FOR2);
 	reg = pci_quatech_rqopr(port) & 0xC0;
 	if (reg != QPCR_TEST_GET2)
@@ -1222,7 +1257,9 @@ static int pci_quatech_clock(struct uart_8250_port *port)
 	unsigned long clock;
 
 	if (pci_quatech_test(port) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1843200;
+}
 
 	qopr = pci_quatech_rqopr(port);
 
@@ -1266,7 +1303,9 @@ static int pci_quatech_rs422(struct uart_8250_port *port)
 	int rs422 = 0;
 
 	if (!pci_quatech_has_qmcr(port))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	qmcr = pci_quatech_rqmcr(port);
 	pci_quatech_wqmcr(port, 0xFF);
 	if (pci_quatech_rqmcr(port))
@@ -1277,6 +1316,7 @@ static int pci_quatech_rs422(struct uart_8250_port *port)
 
 static int pci_quatech_init(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pci_quatech_amcc(dev->device)) {
 		unsigned long base = pci_resource_start(dev, 0);
 		if (base) {
@@ -1317,7 +1357,9 @@ static int pci_default_setup(struct serial_private *priv,
 
 	bar = FL_GET_BASE(board->flags);
 	if (board->flags & FL_BASE_BARS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bar += idx;
+}
 	else
 		offset += idx * board->uart_offset;
 
@@ -1338,7 +1380,9 @@ static int pci_pericom_setup(struct serial_private *priv,
 
 	bar = FL_GET_BASE(board->flags);
 	if (board->flags & FL_BASE_BARS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bar += idx;
+}
 	else
 		offset += idx * board->uart_offset;
 
@@ -1375,6 +1419,7 @@ pci_omegapci_setup(struct serial_private *priv,
 		      const struct pciserial_board *board,
 		      struct uart_8250_port *port, int idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return setup_port(priv, port, 2, idx * 8, 0);
 }
 
@@ -1383,6 +1428,7 @@ pci_brcm_trumanage_setup(struct serial_private *priv,
 			 const struct pciserial_board *board,
 			 struct uart_8250_port *port, int idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = pci_default_setup(priv, board, port, idx);
 
 	port->port.type = PORT_BRCM_TRUMANAGE;
@@ -1399,6 +1445,7 @@ pci_brcm_trumanage_setup(struct serial_private *priv,
 static int pci_fintek_rs485_config(struct uart_port *port,
 			       struct serial_rs485 *rs485)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pci_dev = to_pci_dev(port->dev);
 	u8 setting;
 	u8 *index = (u8 *) port->private_data;
@@ -1456,6 +1503,7 @@ static int pci_fintek_setup(struct serial_private *priv,
 	/* Get the io address from configuration space */
 	pci_read_config_word(pdev, config_base + 4, &iobase);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&pdev->dev, "%s: idx=%d iobase=0x%x", __func__, idx, iobase);
 
 	port->port.iotype = UPIO_PORT;
@@ -1548,6 +1596,7 @@ static int skip_tx_en_setup(struct serial_private *priv,
 			const struct pciserial_board *board,
 			struct uart_8250_port *port, int idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	port->port.quirks |= UPQ_NO_TXEN_TEST;
 	dev_dbg(&priv->dev->dev,
 		"serial8250: skipping TxEn test for device [%04x:%04x] subsystem [%04x:%04x]\n",
@@ -1559,6 +1608,7 @@ static int skip_tx_en_setup(struct serial_private *priv,
 
 static void kt_handle_break(struct uart_port *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(p);
 	/*
 	 * On receipt of a BI, serial device in Intel ME (Intel
@@ -1570,6 +1620,7 @@ static void kt_handle_break(struct uart_port *p)
 
 static unsigned int kt_serial_in(struct uart_port *p, int offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(p);
 	unsigned int val;
 
@@ -1595,6 +1646,7 @@ static int kt_serial_setup(struct serial_private *priv,
 			   const struct pciserial_board *board,
 			   struct uart_8250_port *port, int idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	port->port.flags |= UPF_BUG_THRE;
 	port->port.serial_in = kt_serial_in;
 	port->port.handle_break = kt_handle_break;
@@ -1615,6 +1667,7 @@ pci_wch_ch353_setup(struct serial_private *priv,
 		    const struct pciserial_board *board,
 		    struct uart_8250_port *port, int idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	port->port.flags |= UPF_FIXED_TYPE;
 	port->port.type = PORT_16550A;
 	return pci_default_setup(priv, board, port, idx);
@@ -1625,6 +1678,7 @@ pci_wch_ch355_setup(struct serial_private *priv,
 		const struct pciserial_board *board,
 		struct uart_8250_port *port, int idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	port->port.flags |= UPF_FIXED_TYPE;
 	port->port.type = PORT_16550A;
 	return pci_default_setup(priv, board, port, idx);
@@ -1635,6 +1689,7 @@ pci_wch_ch38x_setup(struct serial_private *priv,
 		    const struct pciserial_board *board,
 		    struct uart_8250_port *port, int idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	port->port.flags |= UPF_FIXED_TYPE;
 	port->port.type = PORT_16850;
 	return pci_default_setup(priv, board, port, idx);
@@ -2418,6 +2473,7 @@ static struct pci_serial_quirk pci_serial_quirks[] __refdata = {
 
 static inline int quirk_id_matches(u32 quirk_id, u32 dev_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return quirk_id == PCI_ANY_ID || quirk_id == dev_id;
 }
 
@@ -2425,6 +2481,7 @@ static struct pci_serial_quirk *find_quirk(struct pci_dev *dev)
 {
 	struct pci_serial_quirk *quirk;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (quirk = pci_serial_quirks; ; quirk++)
 		if (quirk_id_matches(quirk->vendor, dev->vendor) &&
 		    quirk_id_matches(quirk->device, dev->device) &&
@@ -2437,6 +2494,7 @@ static struct pci_serial_quirk *find_quirk(struct pci_dev *dev)
 static inline int get_pci_irq(struct pci_dev *dev,
 				const struct pciserial_board *board)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (board->flags & FL_NOIRQ)
 		return 0;
 	else
@@ -3431,6 +3489,7 @@ serial_pci_guess_board(struct pci_dev *dev, struct pciserial_board *board)
 	int num_iomem, num_port, first_port = -1, i;
 
 	num_iomem = num_port = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < PCI_NUM_BAR_RESOURCES; i++) {
 		if (pci_resource_flags(dev, i) & IORESOURCE_IO) {
 			num_port++;
@@ -3513,6 +3572,7 @@ pciserial_init_ports(struct pci_dev *dev, const struct pciserial_board *board)
 	 *  >0  - number of ports
 	 */
 	if (quirk->init) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = quirk->init(dev);
 		if (rc < 0) {
 			priv = ERR_PTR(rc);
@@ -3572,6 +3632,7 @@ static void pciserial_detach_ports(struct serial_private *priv)
 	struct pci_serial_quirk *quirk;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < priv->nr; i++)
 		serial8250_unregister_port(priv->line[i]);
 
@@ -3585,6 +3646,7 @@ static void pciserial_detach_ports(struct serial_private *priv)
 
 void pciserial_remove_ports(struct serial_private *priv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pciserial_detach_ports(priv);
 	kfree(priv);
 }
@@ -3594,6 +3656,7 @@ void pciserial_suspend_ports(struct serial_private *priv)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < priv->nr; i++)
 		if (priv->line[i] >= 0)
 			serial8250_suspend_port(priv->line[i]);
@@ -3614,7 +3677,9 @@ void pciserial_resume_ports(struct serial_private *priv)
 	 * Ensure that the board is correctly configured.
 	 */
 	if (priv->quirk->init)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		priv->quirk->init(priv->dev);
+}
 
 	for (i = 0; i < priv->nr; i++)
 		if (priv->line[i] >= 0)
@@ -3637,6 +3702,7 @@ pciserial_init_one(struct pci_dev *dev, const struct pci_device_id *ent)
 
 	quirk = find_quirk(dev);
 	if (quirk->probe) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = quirk->probe(dev);
 		if (rc)
 			return rc;
@@ -3702,6 +3768,7 @@ pciserial_init_one(struct pci_dev *dev, const struct pci_device_id *ent)
 
 static void pciserial_remove_one(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serial_private *priv = pci_get_drvdata(dev);
 
 	pciserial_remove_ports(priv);
@@ -3710,6 +3777,7 @@ static void pciserial_remove_one(struct pci_dev *dev)
 #ifdef CONFIG_PM_SLEEP
 static int pciserial_suspend_one(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	struct serial_private *priv = pci_get_drvdata(pdev);
 
@@ -3721,6 +3789,7 @@ static int pciserial_suspend_one(struct device *dev)
 
 static int pciserial_resume_one(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pci_dev *pdev = to_pci_dev(dev);
 	struct serial_private *priv = pci_get_drvdata(pdev);
 	int err;
@@ -5162,6 +5231,7 @@ static const struct pci_device_id serial_pci_tbl[] = {
 static pci_ers_result_t serial8250_io_error_detected(struct pci_dev *dev,
 						pci_channel_state_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serial_private *priv = pci_get_drvdata(dev);
 
 	if (state == pci_channel_io_perm_failure)
@@ -5182,7 +5252,9 @@ static pci_ers_result_t serial8250_io_slot_reset(struct pci_dev *dev)
 	rc = pci_enable_device(dev);
 
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PCI_ERS_RESULT_DISCONNECT;
+}
 
 	pci_restore_state(dev);
 	pci_save_state(dev);
@@ -5192,6 +5264,7 @@ static pci_ers_result_t serial8250_io_slot_reset(struct pci_dev *dev)
 
 static void serial8250_io_resume(struct pci_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct serial_private *priv = pci_get_drvdata(dev);
 	struct serial_private *new;
 
diff --git a/drivers/tty/serial/8250/8250_pnp.c b/drivers/tty/serial/8250/8250_pnp.c
index 34f05ed..351a2c3 100644
--- a/drivers/tty/serial/8250/8250_pnp.c
+++ b/drivers/tty/serial/8250/8250_pnp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Probe for 8250/16550-type ISAPNP serial ports.
  *
@@ -393,6 +395,7 @@ static bool check_name(const char *name)
 {
 	const char **tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (tmp = modem_names; *tmp; tmp++)
 		if (strstr(name, *tmp))
 			return true;
@@ -405,6 +408,7 @@ static bool check_resources(struct pnp_dev *dev)
 	static const resource_size_t base[] = {0x2f8, 0x3f8, 0x2e8, 0x3e8};
 	unsigned int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(base); i++) {
 		if (pnp_possible_config(dev, IORESOURCE_IO, base[i], 8))
 			return true;
@@ -426,6 +430,7 @@ static bool check_resources(struct pnp_dev *dev)
  */
 static int serial_pnp_guess_board(struct pnp_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(check_name(pnp_dev_name(dev)) ||
 	    (dev->card && check_name(dev->card->name))))
 		return -ENODEV;
@@ -443,46 +448,60 @@ serial_pnp_probe(struct pnp_dev *dev, const struct pnp_device_id *dev_id)
 	int ret, line, flags = dev_id->driver_data;
 
 	if (flags & UNKNOWN_DEV) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = serial_pnp_guess_board(dev);
 		if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(&uart, 0, sizeof(uart));
 	if (pnp_irq_valid(dev, 0))
 		uart.port.irq = pnp_irq(dev, 0);
 	if ((flags & CIR_PORT) && pnp_port_valid(dev, 2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uart.port.iobase = pnp_port_start(dev, 2);
 		uart.port.iotype = UPIO_PORT;
 	} else if (pnp_port_valid(dev, 0)) {
 		uart.port.iobase = pnp_port_start(dev, 0);
 		uart.port.iotype = UPIO_PORT;
 	} else if (pnp_mem_valid(dev, 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uart.port.mapbase = pnp_mem_start(dev, 0);
 		uart.port.iotype = UPIO_MEM;
 		uart.port.flags = UPF_IOREMAP;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&dev->dev,
 		 "Setup PNP port: port %lx, mem %pa, irq %d, type %d\n",
 		 uart.port.iobase, &uart.port.mapbase,
 		 uart.port.irq, uart.port.iotype);
 
 	if (flags & CIR_PORT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uart.port.flags |= UPF_FIXED_PORT | UPF_FIXED_TYPE;
 		uart.port.type = PORT_8250_CIR;
 	}
 
 	uart.port.flags |= UPF_SKIP_TEST | UPF_BOOT_AUTOCONF;
 	if (pnp_irq_flags(dev, 0) & IORESOURCE_IRQ_SHAREABLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uart.port.flags |= UPF_SHARE_IRQ;
+}
 	uart.port.uartclk = 1843200;
 	uart.port.dev = &dev->dev;
 
 	line = serial8250_register_8250_port(&uart);
 	if (line < 0 || (flags & CIR_PORT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	port = serial8250_get_port(line);
 	if (uart_console(&port->port))
@@ -494,6 +513,7 @@ serial_pnp_probe(struct pnp_dev *dev, const struct pnp_device_id *dev_id)
 
 static void serial_pnp_remove(struct pnp_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	long line = (long)pnp_get_drvdata(dev);
 
 	dev->capabilities &= ~PNP_CONSOLE;
@@ -504,6 +524,7 @@ static void serial_pnp_remove(struct pnp_dev *dev)
 #ifdef CONFIG_PM
 static int serial_pnp_suspend(struct pnp_dev *dev, pm_message_t state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	long line = (long)pnp_get_drvdata(dev);
 
 	if (!line)
@@ -514,6 +535,7 @@ static int serial_pnp_suspend(struct pnp_dev *dev, pm_message_t state)
 
 static int serial_pnp_resume(struct pnp_dev *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	long line = (long)pnp_get_drvdata(dev);
 
 	if (!line)
@@ -542,6 +564,7 @@ int serial8250_pnp_init(void)
 
 void serial8250_pnp_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pnp_unregister_driver(&serial_pnp_driver);
 }
 
diff --git a/drivers/tty/serial/8250/8250_port.c b/drivers/tty/serial/8250/8250_port.c
index 8dcfd49..b01a15b 100644
--- a/drivers/tty/serial/8250/8250_port.c
+++ b/drivers/tty/serial/8250/8250_port.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Base port operations for 8250/16550-type serial ports
  *
@@ -372,6 +374,7 @@ static void au_serial_dl_write(struct uart_8250_port *up, int value)
 
 static unsigned int hub6_serial_in(struct uart_port *p, int offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset = offset << p->regshift;
 	outb(p->hub6 - 1 + offset, p->iobase);
 	return inb(p->iobase + 1);
@@ -379,6 +382,7 @@ static unsigned int hub6_serial_in(struct uart_port *p, int offset)
 
 static void hub6_serial_out(struct uart_port *p, int offset, int value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset = offset << p->regshift;
 	outb(p->hub6 - 1 + offset, p->iobase);
 	outb(value, p->iobase + 1);
@@ -386,48 +390,56 @@ static void hub6_serial_out(struct uart_port *p, int offset, int value)
 
 static unsigned int mem_serial_in(struct uart_port *p, int offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset = offset << p->regshift;
 	return readb(p->membase + offset);
 }
 
 static void mem_serial_out(struct uart_port *p, int offset, int value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset = offset << p->regshift;
 	writeb(value, p->membase + offset);
 }
 
 static void mem16_serial_out(struct uart_port *p, int offset, int value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset = offset << p->regshift;
 	writew(value, p->membase + offset);
 }
 
 static unsigned int mem16_serial_in(struct uart_port *p, int offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset = offset << p->regshift;
 	return readw(p->membase + offset);
 }
 
 static void mem32_serial_out(struct uart_port *p, int offset, int value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset = offset << p->regshift;
 	writel(value, p->membase + offset);
 }
 
 static unsigned int mem32_serial_in(struct uart_port *p, int offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset = offset << p->regshift;
 	return readl(p->membase + offset);
 }
 
 static void mem32be_serial_out(struct uart_port *p, int offset, int value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset = offset << p->regshift;
 	iowrite32be(value, p->membase + offset);
 }
 
 static unsigned int mem32be_serial_in(struct uart_port *p, int offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset = offset << p->regshift;
 	return ioread32be(p->membase + offset);
 }
@@ -449,6 +461,7 @@ static int exar_handle_irq(struct uart_port *port);
 
 static void set_io_from_upio(struct uart_port *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(p);
 
 	up->dl_read = default_serial_dl_read;
@@ -521,6 +534,7 @@ serial_port_out_sync(struct uart_port *p, int offset, int value)
  */
 static void serial_icr_write(struct uart_8250_port *up, int offset, int value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	serial_out(up, UART_SCR, offset);
 	serial_out(up, UART_ICR, value);
 }
@@ -552,6 +566,7 @@ static void serial8250_clear_fifos(struct uart_8250_port *p)
 
 static inline void serial8250_em485_rts_after_send(struct uart_8250_port *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned char mcr = serial8250_in_MCR(p);
 
 	if (p->port.rs485.flags & SER_RS485_RTS_AFTER_SEND)
@@ -566,6 +581,7 @@ static enum hrtimer_restart serial8250_em485_handle_stop_tx(struct hrtimer *t);
 
 void serial8250_clear_and_reinit_fifos(struct uart_8250_port *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	serial8250_clear_fifos(p);
 	serial_out(p, UART_FCR, p->fcr);
 }
@@ -574,7 +590,10 @@ EXPORT_SYMBOL_GPL(serial8250_clear_and_reinit_fifos);
 void serial8250_rpm_get(struct uart_8250_port *p)
 {
 	if (!(p->capabilities & UART_CAP_RPM))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_runtime_get_sync(p->port.dev);
 }
 EXPORT_SYMBOL_GPL(serial8250_rpm_get);
@@ -582,7 +601,10 @@ EXPORT_SYMBOL_GPL(serial8250_rpm_get);
 void serial8250_rpm_put(struct uart_8250_port *p)
 {
 	if (!(p->capabilities & UART_CAP_RPM))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_runtime_mark_last_busy(p->port.dev);
 	pm_runtime_put_autosuspend(p->port.dev);
 }
@@ -610,6 +632,7 @@ EXPORT_SYMBOL_GPL(serial8250_rpm_put);
  */
 int serial8250_em485_init(struct uart_8250_port *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (p->em485)
 		return 0;
 
@@ -646,6 +669,7 @@ EXPORT_SYMBOL_GPL(serial8250_em485_init);
  */
 void serial8250_em485_destroy(struct uart_8250_port *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!p->em485)
 		return;
 
@@ -667,11 +691,17 @@ void serial8250_rpm_get_tx(struct uart_8250_port *p)
 	unsigned char rpm_active;
 
 	if (!(p->capabilities & UART_CAP_RPM))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rpm_active = xchg(&p->rpm_tx_active, 1);
 	if (rpm_active)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_runtime_get_sync(p->port.dev);
 }
 EXPORT_SYMBOL_GPL(serial8250_rpm_get_tx);
@@ -681,11 +711,17 @@ void serial8250_rpm_put_tx(struct uart_8250_port *p)
 	unsigned char rpm_active;
 
 	if (!(p->capabilities & UART_CAP_RPM))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rpm_active = xchg(&p->rpm_tx_active, 0);
 	if (!rpm_active)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_runtime_mark_last_busy(p->port.dev);
 	pm_runtime_put_autosuspend(p->port.dev);
 }
@@ -709,20 +745,25 @@ static void serial8250_set_sleep(struct uart_8250_port *p, int sleep)
 	serial8250_rpm_get(p);
 	if ((p->port.type == PORT_XR17V35X) ||
 	   (p->port.type == PORT_XR17D15X)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_out(p, UART_EXAR_SLEEP, sleep ? 0xff : 0);
 		goto out;
 	}
 
 	if (p->capabilities & UART_CAP_SLEEP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (p->capabilities & UART_CAP_EFR) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lcr = serial_in(p, UART_LCR);
 			efr = serial_in(p, UART_EFR);
 			serial_out(p, UART_LCR, UART_LCR_CONF_MODE_B);
 			serial_out(p, UART_EFR, UART_EFR_ECB);
 			serial_out(p, UART_LCR, 0);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_out(p, UART_IER, sleep ? UART_IERX_SLEEP : 0);
 		if (p->capabilities & UART_CAP_EFR) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			serial_out(p, UART_LCR, UART_LCR_CONF_MODE_B);
 			serial_out(p, UART_EFR, efr);
 			serial_out(p, UART_LCR, lcr);
@@ -746,6 +787,7 @@ static int __enable_rsa(struct uart_8250_port *up)
 	result = mode & UART_RSA_MSR_FIFO;
 
 	if (!result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_out(up, UART_RSA_MSR, mode | UART_RSA_MSR_FIFO);
 		mode = serial_in(up, UART_RSA_MSR);
 		result = mode & UART_RSA_MSR_FIFO;
@@ -759,6 +801,7 @@ static int __enable_rsa(struct uart_8250_port *up)
 
 static void enable_rsa(struct uart_8250_port *up)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (up->port.type == PORT_RSA) {
 		if (up->port.uartclk != SERIAL_RSA_BAUD_BASE * 16) {
 			spin_lock_irq(&up->port.lock);
@@ -904,6 +947,7 @@ static void autoconfig_has_efr(struct uart_8250_port *up)
 	id3 = serial_icr_read(up, UART_ID3);
 	rev = serial_icr_read(up, UART_REV);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DEBUG_AUTOCONF("950id=%02x:%02x:%02x:%02x ", id1, id2, id3, rev);
 
 	if (id1 == 0x16 && id2 == 0xC9 &&
@@ -970,6 +1014,7 @@ static void autoconfig_8250(struct uart_8250_port *up)
 	status2 = serial_in(up, UART_SCR);
 	serial_out(up, UART_SCR, scratch);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (status1 == 0xa5 && status2 == 0x5a)
 		up->port.type = PORT_16450;
 }
@@ -1010,9 +1055,13 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 	 * register for a 2, 4 or 8 port UART.
 	 */
 	if (up->port.flags & UPF_EXAR_EFR) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status1 = serial_in(up, UART_EXAR_DVID);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status1 == 0x82 || status1 == 0x84 || status1 == 0x88) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			DEBUG_AUTOCONF("Exar XR17V35x ");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->port.type = PORT_XR17V35X;
 			up->capabilities |= UART_CAP_AFE | UART_CAP_EFR |
 						UART_CAP_SLEEP;
@@ -1028,12 +1077,16 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 	 */
 	serial_out(up, UART_LCR, UART_LCR_CONF_MODE_A);
 	if (serial_in(up, UART_EFR) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_out(up, UART_EFR, 0xA8);
 		if (serial_in(up, UART_EFR) != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			DEBUG_AUTOCONF("EFRv1 ");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->port.type = PORT_16650;
 			up->capabilities |= UART_CAP_EFR | UART_CAP_SLEEP;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			serial_out(up, UART_LCR, 0);
 			serial_out(up, UART_FCR, UART_FCR_ENABLE_FIFO |
 				   UART_FCR7_64BYTE);
@@ -1042,10 +1095,13 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 			serial_out(up, UART_LCR, 0);
 
 			if (status1 == 7)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				up->port.type = PORT_16550A_FSL64;
+}
 			else
 				DEBUG_AUTOCONF("Motorola 8xxx DUART ");
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_out(up, UART_EFR, 0);
 		return;
 	}
@@ -1056,7 +1112,9 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 	 */
 	serial_out(up, UART_LCR, UART_LCR_CONF_MODE_B);
 	if (serial_in(up, UART_EFR) == 0 && !broken_efr(up)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DEBUG_AUTOCONF("EFRv2 ");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		autoconfig_has_efr(up);
 		return;
 	}
@@ -1090,8 +1148,11 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 			quot <<= 3;
 
 			if (ns16550a_goto_highspeed(up))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				serial_dl_write(up, quot);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			serial_out(up, UART_LCR, 0);
 
 			up->port.uartclk = 921600*16;
@@ -1117,9 +1178,11 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 	serial_out(up, UART_FCR, UART_FCR_ENABLE_FIFO);
 	serial_out(up, UART_LCR, 0);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DEBUG_AUTOCONF("iir1=%d iir2=%d ", status1, status2);
 
 	if (status1 == 6 && status2 == 7) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->port.type = PORT_16750;
 		up->capabilities |= UART_CAP_AFE | UART_CAP_SLEEP;
 		return;
@@ -1147,6 +1210,7 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 			 * We'll leave the UART_IER_UUE bit set to 1 (enabled).
 			 */
 			DEBUG_AUTOCONF("Xscale ");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->port.type = PORT_XSCALE;
 			up->capabilities |= UART_CAP_UUE | UART_CAP_RTOIE;
 			return;
@@ -1164,7 +1228,9 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 	 * Exar uarts have EFR in a weird location
 	 */
 	if (up->port.flags & UPF_EXAR_EFR) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DEBUG_AUTOCONF("Exar XR17D15x ");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->port.type = PORT_XR17D15X;
 		up->capabilities |= UART_CAP_AFE | UART_CAP_EFR |
 				    UART_CAP_SLEEP;
@@ -1177,6 +1243,7 @@ static void autoconfig_16550a(struct uart_8250_port *up)
 	 * how many bytes are in the FIFO.
 	 */
 	if (up->port.type == PORT_16550A && size_fifo(up) == 64) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->port.type = PORT_U6_16550A;
 		up->capabilities |= UART_CAP_AFE;
 	}
@@ -1198,8 +1265,11 @@ static void autoconfig(struct uart_8250_port *up)
 	unsigned int old_capabilities;
 
 	if (!port->iobase && !port->mapbase && !port->membase)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DEBUG_AUTOCONF("ttyS%d: autoconf (0x%04lx, 0x%p): ",
 		       serial_index(port), port->iobase, port->membase);
 
@@ -1247,6 +1317,7 @@ static void autoconfig(struct uart_8250_port *up)
 			 * We failed; there's nothing here
 			 */
 			spin_unlock_irqrestore(&port->lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			DEBUG_AUTOCONF("IER test failed (%02x, %02x) ",
 				       scratch2, scratch3);
 			goto out;
@@ -1266,11 +1337,14 @@ static void autoconfig(struct uart_8250_port *up)
 	 * that conflicts with COM 1-4 --- we hope!
 	 */
 	if (!(port->flags & UPF_SKIP_TEST)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial8250_out_MCR(up, UART_MCR_LOOP | 0x0A);
 		status1 = serial_in(up, UART_MSR) & 0xF0;
 		serial8250_out_MCR(up, save_mcr);
 		if (status1 != 0x90) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irqrestore(&port->lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			DEBUG_AUTOCONF("LOOP test failed (%02x) ",
 				       status1);
 			goto out;
@@ -1332,13 +1406,17 @@ static void autoconfig(struct uart_8250_port *up)
 	 */
 #ifdef CONFIG_SERIAL_8250_RSA
 	if (port->type == PORT_RSA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_out(up, UART_RSA_FRR, 0);
+}
 #endif
 	serial8250_out_MCR(up, save_mcr);
 	serial8250_clear_fifos(up);
 	serial_in(up, UART_RX);
 	if (up->capabilities & UART_CAP_UUE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_out(up, UART_IER, UART_IER_UUE);
+}
 	else
 		serial_out(up, UART_IER, 0);
 
@@ -1349,15 +1427,19 @@ static void autoconfig(struct uart_8250_port *up)
 	 * Check if the device is a Fintek F81216A
 	 */
 	if (port->type == PORT_16550A && port->iotype == UPIO_PORT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fintek_8250_probe(up);
+}
 
 	if (up->capabilities != old_capabilities) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("ttyS%d: detected caps %08x should be %08x\n",
 		       serial_index(port), old_capabilities,
 		       up->capabilities);
 	}
 out:
 	DEBUG_AUTOCONF("iir=%d ", scratch);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DEBUG_AUTOCONF("type=%s\n", uart_config[port->type].name);
 }
 
@@ -1371,6 +1453,7 @@ static void autoconfig_irq(struct uart_8250_port *up)
 	int irq;
 
 	if (port->flags & UPF_FOURPORT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ICP = (port->iobase & 0xfe0) | 0x1f;
 		save_ICP = inb_p(ICP);
 		outb_p(0x80, ICP);
@@ -1418,6 +1501,7 @@ static void autoconfig_irq(struct uart_8250_port *up)
 
 static void serial8250_stop_rx(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	serial8250_rpm_get(up);
@@ -1431,6 +1515,7 @@ static void serial8250_stop_rx(struct uart_port *port)
 
 static void __do_stop_tx_rs485(struct uart_8250_port *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	serial8250_em485_rts_after_send(p);
 
 	/*
@@ -1451,6 +1536,7 @@ static enum hrtimer_restart serial8250_em485_handle_stop_tx(struct hrtimer *t)
 	struct uart_8250_port *p;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	em485 = container_of(t, struct uart_8250_em485, stop_tx_timer);
 	p = em485->port;
 
@@ -1483,6 +1569,7 @@ static void __stop_tx_rs485(struct uart_8250_port *p)
 	 * AND flush RX FIFO if required.
 	 */
 	if (p->port.rs485.delay_rts_after_send > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		em485->active_timer = &em485->stop_tx_timer;
 		start_hrtimer_ms(&em485->stop_tx_timer,
 				   p->port.rs485.delay_rts_after_send);
@@ -1505,6 +1592,7 @@ static inline void __stop_tx(struct uart_8250_port *p)
 	struct uart_8250_em485 *em485 = p->em485;
 
 	if (em485) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unsigned char lsr = serial_in(p, UART_LSR);
 		/*
 		 * To provide required timeing and allow FIFO transfer,
@@ -1513,8 +1601,11 @@ static inline void __stop_tx(struct uart_8250_port *p)
 		 * interrupt on TEMT.
 		 */
 		if ((lsr & BOTH_EMPTY) != BOTH_EMPTY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		em485->active_timer = NULL;
 		hrtimer_cancel(&em485->start_tx_timer);
 
@@ -1525,6 +1616,7 @@ static inline void __stop_tx(struct uart_8250_port *p)
 
 static void serial8250_stop_tx(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	serial8250_rpm_get(up);
@@ -1542,10 +1634,13 @@ static void serial8250_stop_tx(struct uart_port *port)
 
 static inline void __start_tx(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	if (up->dma && !up->dma->tx_dma(up))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!(up->ier & UART_IER_THRI)) {
 		up->ier |= UART_IER_THRI;
@@ -1557,7 +1652,9 @@ static inline void __start_tx(struct uart_port *port)
 			lsr = serial_in(up, UART_LSR);
 			up->lsr_saved_flags |= lsr & LSR_SAVE_FLAGS;
 			if (lsr & UART_LSR_THRE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				serial8250_tx_chars(up);
+}
 		}
 	}
 
@@ -1565,6 +1662,7 @@ static inline void __start_tx(struct uart_port *port)
 	 * Re-enable the transmitter if we disabled it.
 	 */
 	if (port->type == PORT_16C950 && up->acr & UART_ACR_TXDIS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->acr &= ~UART_ACR_TXDIS;
 		serial_icr_write(up, UART_ACR, up->acr);
 	}
@@ -1572,6 +1670,7 @@ static inline void __start_tx(struct uart_port *port)
 
 static inline void start_tx_rs485(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 	struct uart_8250_em485 *em485 = up->em485;
 	unsigned char mcr;
@@ -1609,6 +1708,7 @@ static enum hrtimer_restart serial8250_em485_handle_start_tx(struct hrtimer *t)
 	struct uart_8250_port *p;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	em485 = container_of(t, struct uart_8250_em485, start_tx_timer);
 	p = em485->port;
 
@@ -1623,6 +1723,7 @@ static enum hrtimer_restart serial8250_em485_handle_start_tx(struct hrtimer *t)
 
 static void serial8250_start_tx(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 	struct uart_8250_em485 *em485 = up->em485;
 
@@ -1633,23 +1734,28 @@ static void serial8250_start_tx(struct uart_port *port)
 		return;
 
 	if (em485)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start_tx_rs485(port);
+}
 	else
 		__start_tx(port);
 }
 
 static void serial8250_throttle(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	port->throttle(port);
 }
 
 static void serial8250_unthrottle(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	port->unthrottle(port);
 }
 
 static void serial8250_disable_ms(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	/* no MSR capabilities */
@@ -1662,6 +1768,7 @@ static void serial8250_disable_ms(struct uart_port *port)
 
 static void serial8250_enable_ms(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	/* no MSR capabilities */
@@ -1682,7 +1789,9 @@ static void serial8250_read_char(struct uart_8250_port *up, unsigned char lsr)
 	char flag = TTY_NORMAL;
 
 	if (likely(lsr & UART_LSR_DR))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ch = serial_in(up, UART_RX);
+}
 	else
 		/*
 		 * Intel 82571 has a Serial Over Lan device that will
@@ -1747,6 +1856,7 @@ unsigned char serial8250_rx_chars(struct uart_8250_port *up, unsigned char lsr)
 	int max_count = 256;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial8250_read_char(up, lsr);
 		if (--max_count == 0)
 			break;
@@ -1765,12 +1875,14 @@ void serial8250_tx_chars(struct uart_8250_port *up)
 	int count;
 
 	if (port->x_char) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_out(up, UART_TX, port->x_char);
 		port->icount.tx++;
 		port->x_char = 0;
 		return;
 	}
 	if (uart_tx_stopped(port)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial8250_stop_tx(port);
 		return;
 	}
@@ -1818,15 +1930,28 @@ unsigned int serial8250_modem_status(struct uart_8250_port *up)
 	up->msr_saved_flags = 0;
 	if (status & UART_MSR_ANY_DELTA && up->ier & UART_IER_MSI &&
 	    port->state != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status & UART_MSR_TERI)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			port->icount.rng++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status & UART_MSR_DDSR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			port->icount.dsr++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status & UART_MSR_DDCD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart_handle_dcd_change(port, status & UART_MSR_DCD);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (status & UART_MSR_DCTS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart_handle_cts_change(port, status & UART_MSR_CTS);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wake_up_interruptible(&port->state->port.delta_msr_wait);
 	}
 
@@ -1836,6 +1961,7 @@ EXPORT_SYMBOL_GPL(serial8250_modem_status);
 
 static bool handle_rx_dma(struct uart_8250_port *up, unsigned int iir)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (iir & 0x3f) {
 	case UART_IIR_RX_TIMEOUT:
 		serial8250_rx_dma_flush(up);
@@ -1856,20 +1982,26 @@ int serial8250_handle_irq(struct uart_port *port, unsigned int iir)
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	if (iir & UART_IIR_NO_INT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	spin_lock_irqsave(&port->lock, flags);
 
 	status = serial_port_in(port, UART_LSR);
 
 	if (status & (UART_LSR_DR | UART_LSR_BI)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!up->dma || handle_rx_dma(up, iir))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status = serial8250_rx_chars(up, status);
+}
 	}
 	serial8250_modem_status(up);
 	if ((!up->dma || up->dma->tx_err) && (status & UART_LSR_THRE))
 		serial8250_tx_chars(up);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&port->lock, flags);
 	return 1;
 }
@@ -1877,6 +2009,7 @@ EXPORT_SYMBOL_GPL(serial8250_handle_irq);
 
 static int serial8250_default_handle_irq(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 	unsigned int iir;
 	int ret;
@@ -1898,6 +2031,7 @@ static int serial8250_default_handle_irq(struct uart_port *port)
  */
 static int exar_handle_irq(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int iir = serial_port_in(port, UART_IIR);
 	int ret = 0;
 
@@ -1923,6 +2057,7 @@ static int serial8250_tx_threshold_handle_irq(struct uart_port *port)
 
 	/* TX Threshold IRQ triggered so load up FIFO */
 	if ((iir & UART_IIR_ID) == UART_IIR_THRI) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct uart_8250_port *up = up_to_u8250p(port);
 
 		spin_lock_irqsave(&port->lock, flags);
@@ -1936,6 +2071,7 @@ static int serial8250_tx_threshold_handle_irq(struct uart_port *port)
 
 static unsigned int serial8250_tx_empty(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 	unsigned long flags;
 	unsigned int lsr;
@@ -1954,6 +2090,7 @@ static unsigned int serial8250_tx_empty(struct uart_port *port)
 
 unsigned int serial8250_do_get_mctrl(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 	unsigned int status;
 	unsigned int ret;
@@ -1977,6 +2114,7 @@ EXPORT_SYMBOL_GPL(serial8250_do_get_mctrl);
 
 static unsigned int serial8250_get_mctrl(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (port->get_mctrl)
 		return port->get_mctrl(port);
 	return serial8250_do_get_mctrl(port);
@@ -1984,19 +2122,26 @@ static unsigned int serial8250_get_mctrl(struct uart_port *port)
 
 void serial8250_do_set_mctrl(struct uart_port *port, unsigned int mctrl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 	unsigned char mcr = 0;
 
 	if (mctrl & TIOCM_RTS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mcr |= UART_MCR_RTS;
+}
 	if (mctrl & TIOCM_DTR)
 		mcr |= UART_MCR_DTR;
 	if (mctrl & TIOCM_OUT1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mcr |= UART_MCR_OUT1;
+}
 	if (mctrl & TIOCM_OUT2)
 		mcr |= UART_MCR_OUT2;
 	if (mctrl & TIOCM_LOOP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mcr |= UART_MCR_LOOP;
+}
 
 	mcr = (mcr & up->mcr_mask) | up->mcr_force | up->mcr;
 
@@ -2007,13 +2152,16 @@ EXPORT_SYMBOL_GPL(serial8250_do_set_mctrl);
 static void serial8250_set_mctrl(struct uart_port *port, unsigned int mctrl)
 {
 	if (port->set_mctrl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port->set_mctrl(port, mctrl);
+}
 	else
 		serial8250_do_set_mctrl(port, mctrl);
 }
 
 static void serial8250_break_ctl(struct uart_port *port, int break_state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 	unsigned long flags;
 
@@ -2043,19 +2191,24 @@ static void wait_for_xmitr(struct uart_8250_port *up, int bits)
 
 		if ((status & bits) == bits)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (--tmout == 0)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		udelay(1);
 		touch_nmi_watchdog();
 	}
 
 	/* Wait up to 1s for flow control if necessary */
 	if (up->port.flags & UPF_CONS_FLOW) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (tmout = 1000000; tmout; tmout--) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unsigned int msr = serial_in(up, UART_MSR);
 			up->msr_saved_flags |= msr & MSR_SAVE_FLAGS;
 			if (msr & UART_MSR_CTS)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			udelay(1);
 			touch_nmi_watchdog();
 		}
@@ -2125,21 +2278,30 @@ static void serial8250_put_poll_char(struct uart_port *port,
 
 int serial8250_do_startup(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 	unsigned long flags;
 	unsigned char lsr, iir;
 	int retval;
 
 	if (!port->fifosize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port->fifosize = uart_config[port->type].fifo_size;
+}
 	if (!up->tx_loadsz)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->tx_loadsz = uart_config[port->type].tx_loadsz;
+}
 	if (!up->capabilities)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->capabilities = uart_config[port->type].flags;
+}
 	up->mcr = 0;
 
 	if (port->iotype != up->cur_iotype)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_io_from_upio(port);
+}
 
 	serial8250_rpm_get(up);
 	if (port->type == PORT_16C950) {
@@ -2159,6 +2321,7 @@ int serial8250_do_startup(struct uart_port *port)
 		/* Reset the port */
 		serial_port_out(port, UART_IER, 0);
 		serial_port_out(port, UART_DA830_PWREMU_MGMT, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mdelay(10);
 
 		/* Enable Tx, Rx and free run mode */
@@ -2204,7 +2367,9 @@ int serial8250_do_startup(struct uart_port *port)
 	serial_port_in(port, UART_IIR);
 	serial_port_in(port, UART_MSR);
 	if ((port->type == PORT_XR17V35X) || (port->type == PORT_XR17D15X))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_port_in(port, UART_EXAR_INT0);
+}
 
 	/*
 	 * At this point, there's no way the LSR could still be 0xff;
@@ -2213,6 +2378,7 @@ int serial8250_do_startup(struct uart_port *port)
 	 */
 	if (!(port->flags & UPF_BUGGY_UART) &&
 	    (serial_port_in(port, UART_LSR) == 0xff)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk_ratelimited(KERN_INFO "ttyS%d: LSR safety check engaged!\n",
 				   serial_index(port));
 		retval = -ENODEV;
@@ -2246,9 +2412,11 @@ int serial8250_do_startup(struct uart_port *port)
 	     (port->type == PORT_ALTR_16550_F128)) && (port->fifosize > 1)) {
 		/* Bounds checking of TX threshold (valid 0 to fifosize-2) */
 		if ((up->tx_loadsz < 2) || (up->tx_loadsz > port->fifosize)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("ttyS%d TX FIFO Threshold errors, skipping\n",
 			       serial_index(port));
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			serial_port_out(port, UART_ALTR_AFR,
 					UART_ALTR_EN_TXFIFO_LW);
 			serial_port_out(port, UART_ALTR_TX_LOW,
@@ -2269,7 +2437,9 @@ int serial8250_do_startup(struct uart_port *port)
 		 */
 		spin_lock_irqsave(&port->lock, flags);
 		if (up->port.irqflags & IRQF_SHARED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			disable_irq_nosync(port->irq);
+}
 
 		wait_for_xmitr(up, UART_LSR_THRE);
 		serial_port_out_sync(port, UART_IER, UART_IER_THRI);
@@ -2282,7 +2452,10 @@ int serial8250_do_startup(struct uart_port *port)
 		serial_port_out(port, UART_IER, 0);
 
 		if (port->irqflags & IRQF_SHARED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			enable_irq(port->irq);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irqrestore(&port->lock, flags);
 
 		/*
@@ -2292,6 +2465,7 @@ int serial8250_do_startup(struct uart_port *port)
 		 */
 		if ((!(iir1 & UART_IIR_NO_INT) && (iir & UART_IIR_NO_INT)) ||
 		    up->port.flags & UPF_BUG_THRE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->bugs |= UART_BUG_THRE;
 		}
 	}
@@ -2307,8 +2481,11 @@ int serial8250_do_startup(struct uart_port *port)
 
 	spin_lock_irqsave(&port->lock, flags);
 	if (up->port.flags & UPF_FOURPORT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!up->port.irq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->port.mctrl |= TIOCM_OUT1;
+}
 	} else
 		/*
 		 * Most PC uarts need OUT2 raised to enable interrupts.
@@ -2342,8 +2519,11 @@ int serial8250_do_startup(struct uart_port *port)
 	serial_port_out(port, UART_IER, 0);
 
 	if (lsr & UART_LSR_TEMT && iir & UART_IIR_NO_INT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(up->bugs & UART_BUG_TXEN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->bugs |= UART_BUG_TXEN;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("ttyS%d - enabling bad tx status workarounds\n",
 				 serial_index(port));
 		}
@@ -2364,7 +2544,9 @@ int serial8250_do_startup(struct uart_port *port)
 	serial_port_in(port, UART_IIR);
 	serial_port_in(port, UART_MSR);
 	if ((port->type == PORT_XR17V35X) || (port->type == PORT_XR17D15X))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_port_in(port, UART_EXAR_INT0);
+}
 	up->lsr_saved_flags = 0;
 	up->msr_saved_flags = 0;
 
@@ -2372,8 +2554,10 @@ int serial8250_do_startup(struct uart_port *port)
 	 * Request DMA channels for both RX and TX.
 	 */
 	if (up->dma) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = serial8250_request_dma(up);
 		if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn_ratelimited("ttyS%d - failed to request DMA\n",
 					    serial_index(port));
 			up->dma = NULL;
@@ -2396,6 +2580,7 @@ int serial8250_do_startup(struct uart_port *port)
 		outb_p(0x80, icp);
 		inb_p(icp);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = 0;
 out:
 	serial8250_rpm_put(up);
@@ -2406,12 +2591,15 @@ EXPORT_SYMBOL_GPL(serial8250_do_startup);
 static int serial8250_startup(struct uart_port *port)
 {
 	if (port->startup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return port->startup(port);
+}
 	return serial8250_do_startup(port);
 }
 
 void serial8250_do_shutdown(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 	unsigned long flags;
 
@@ -2467,6 +2655,7 @@ EXPORT_SYMBOL_GPL(serial8250_do_shutdown);
 
 static void serial8250_shutdown(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (port->shutdown)
 		port->shutdown(port);
 	else
@@ -2484,6 +2673,7 @@ static unsigned int xr17v35x_get_divisor(struct uart_8250_port *up,
 	struct uart_port *port = &up->port;
 	unsigned int quot_16;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	quot_16 = DIV_ROUND_CLOSEST(port->uartclk, baud);
 	*frac = quot_16 & 0x0f;
 
@@ -2509,7 +2699,9 @@ static unsigned int serial8250_get_divisor(struct uart_8250_port *up,
 		 baud == (port->uartclk/8))
 		quot = 0x8002;
 	else if (up->port.type == PORT_XR17V35X)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		quot = xr17v35x_get_divisor(up, baud, frac);
+}
 	else
 		quot = uart_get_divisor(port, baud);
 
@@ -2517,7 +2709,9 @@ static unsigned int serial8250_get_divisor(struct uart_8250_port *up,
 	 * Oxford Semi 952 rev B workaround
 	 */
 	if (up->bugs & UART_BUG_QUOT && (quot & 0xff) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		quot++;
+}
 
 	return quot;
 }
@@ -2544,17 +2738,24 @@ static unsigned char serial8250_compute_lcr(struct uart_8250_port *up,
 	}
 
 	if (c_cflag & CSTOPB)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cval |= UART_LCR_STOP;
+}
 	if (c_cflag & PARENB) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cval |= UART_LCR_PARITY;
 		if (up->bugs & UART_BUG_PARITY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->fifo_bug = true;
+}
 	}
 	if (!(c_cflag & PARODD))
 		cval |= UART_LCR_EPAR;
 #ifdef CMSPAR
 	if (c_cflag & CMSPAR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cval |= UART_LCR_SPAR;
+}
 #endif
 
 	return cval;
@@ -2563,15 +2764,20 @@ static unsigned char serial8250_compute_lcr(struct uart_8250_port *up,
 static void serial8250_set_divisor(struct uart_port *port, unsigned int baud,
 			    unsigned int quot, unsigned int quot_frac)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	/* Workaround to enable 115200 baud on OMAP1510 internal ports */
 	if (is_omap1510_8250(up)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (baud == 115200) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			quot = 1;
 			serial_port_out(port, UART_OMAP_OSC_12M_SEL, 1);
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			serial_port_out(port, UART_OMAP_OSC_12M_SEL, 0);
+}
 	}
 
 	/*
@@ -2579,7 +2785,9 @@ static void serial8250_set_divisor(struct uart_port *port, unsigned int baud,
 	 * otherwise just set DLAB
 	 */
 	if (up->capabilities & UART_NATSEMI)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_port_out(port, UART_LCR, 0xe0);
+}
 	else
 		serial_port_out(port, UART_LCR, up->lcr | UART_LCR_DLAB);
 
@@ -2588,6 +2796,7 @@ static void serial8250_set_divisor(struct uart_port *port, unsigned int baud,
 	/* XR17V35x UARTs have an extra fractional divisor register (DLD) */
 	if (up->port.type == PORT_XR17V35X) {
 		/* Preserve bits not related to baudrate; DLD[7:4]. */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		quot_frac |= serial_port_in(port, 0x2) & 0xf0;
 		serial_port_out(port, 0x2, quot_frac);
 	}
@@ -2612,12 +2821,14 @@ void
 serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 			  struct ktermios *old)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 	unsigned char cval;
 	unsigned long flags;
 	unsigned int baud, quot, frac = 0;
 
 	if (up->capabilities & UART_CAP_MINI) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		termios->c_cflag &= ~(CSTOPB | PARENB | PARODD | CMSPAR);
 		if ((termios->c_cflag & CSIZE) == CS5 ||
 		    (termios->c_cflag & CSIZE) == CS6)
@@ -2640,6 +2851,7 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	if (up->capabilities & UART_CAP_FIFO && port->fifosize > 1) {
 		/* NOTE: If fifo_bug is not set, a user can set RX_trigger. */
 		if ((baud < 2400 && !up->dma) || up->fifo_bug) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->fcr &= ~UART_FCR_TRIGGER_MASK;
 			up->fcr |= UART_FCR_TRIGGER_1;
 		}
@@ -2651,9 +2863,12 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	 * the trigger, or the MCR RTS bit is cleared.
 	 */
 	if (up->capabilities & UART_CAP_AFE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->mcr &= ~UART_MCR_AFE;
 		if (termios->c_cflag & CRTSCTS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->mcr |= UART_MCR_AFE;
+}
 	}
 
 	/*
@@ -2663,31 +2878,42 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 
 	port->read_status_mask = UART_LSR_OE | UART_LSR_THRE | UART_LSR_DR;
 	if (termios->c_iflag & INPCK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port->read_status_mask |= UART_LSR_FE | UART_LSR_PE;
+}
 	if (termios->c_iflag & (IGNBRK | BRKINT | PARMRK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port->read_status_mask |= UART_LSR_BI;
+}
 
 	/*
 	 * Characteres to ignore
 	 */
 	port->ignore_status_mask = 0;
 	if (termios->c_iflag & IGNPAR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port->ignore_status_mask |= UART_LSR_PE | UART_LSR_FE;
+}
 	if (termios->c_iflag & IGNBRK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port->ignore_status_mask |= UART_LSR_BI;
 		/*
 		 * If we're ignoring parity and break indicators,
 		 * ignore overruns too (for real raw support).
 		 */
 		if (termios->c_iflag & IGNPAR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			port->ignore_status_mask |= UART_LSR_OE;
+}
 	}
 
 	/*
 	 * ignore all characters if CREAD is not set
 	 */
 	if ((termios->c_cflag & CREAD) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port->ignore_status_mask |= UART_LSR_DR;
+}
 
 	/*
 	 * CTS flow control flag and modem status interrupts
@@ -2697,9 +2923,13 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 			UART_ENABLE_MS(&up->port, termios->c_cflag))
 		up->ier |= UART_IER_MSI;
 	if (up->capabilities & UART_CAP_UUE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->ier |= UART_IER_UUE;
+}
 	if (up->capabilities & UART_CAP_RTOIE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->ier |= UART_IER_RTOIE;
+}
 
 	serial_port_out(port, UART_IER, up->ier);
 
@@ -2711,11 +2941,16 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 		 * - UART_MCR_RTS is ineffective if auto-RTS mode is enabled.
 		 */
 		if (termios->c_cflag & CRTSCTS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			efr |= UART_EFR_CTS;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_port_out(port, UART_LCR, UART_LCR_CONF_MODE_B);
 		if (port->flags & UPF_EXAR_EFR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			serial_port_out(port, UART_XR_EFR, efr);
+}
 		else
 			serial_port_out(port, UART_EFR, efr);
 	}
@@ -2727,7 +2962,9 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	 * is written without DLAB set, this mode will be disabled.
 	 */
 	if (port->type == PORT_16750)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_port_out(port, UART_FCR, up->fcr);
+}
 
 	serial_port_out(port, UART_LCR, up->lcr);	/* reset DLAB */
 	if (port->type != PORT_16750) {
@@ -2751,13 +2988,16 @@ serial8250_set_termios(struct uart_port *port, struct ktermios *termios,
 		       struct ktermios *old)
 {
 	if (port->set_termios)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port->set_termios(port, termios, old);
+}
 	else
 		serial8250_do_set_termios(port, termios, old);
 }
 
 void serial8250_do_set_ldisc(struct uart_port *port, struct ktermios *termios)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (termios->c_line == N_PPS) {
 		port->flags |= UPF_HARDPPS_CD;
 		spin_lock_irq(&port->lock);
@@ -2777,6 +3017,7 @@ EXPORT_SYMBOL_GPL(serial8250_do_set_ldisc);
 static void
 serial8250_set_ldisc(struct uart_port *port, struct ktermios *termios)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (port->set_ldisc)
 		port->set_ldisc(port, termios);
 	else
@@ -2786,6 +3027,7 @@ serial8250_set_ldisc(struct uart_port *port, struct ktermios *termios)
 void serial8250_do_pm(struct uart_port *port, unsigned int state,
 		      unsigned int oldstate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *p = up_to_u8250p(port);
 
 	serial8250_set_sleep(p, state != 0);
@@ -2797,7 +3039,9 @@ serial8250_pm(struct uart_port *port, unsigned int state,
 	      unsigned int oldstate)
 {
 	if (port->pm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port->pm(port, state, oldstate);
+}
 	else
 		serial8250_do_pm(port, state, oldstate);
 }
@@ -2805,14 +3049,23 @@ serial8250_pm(struct uart_port *port, unsigned int state,
 static unsigned int serial8250_port_size(struct uart_8250_port *pt)
 {
 	if (pt->port.mapsize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return pt->port.mapsize;
+}
 	if (pt->port.iotype == UPIO_AU) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pt->port.type == PORT_RT2880)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0x100;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0x1000;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (is_omap1_8250(pt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0x16 << pt->port.regshift;
+}
 
 	return 8 << pt->port.regshift;
 }
@@ -2836,14 +3089,19 @@ static int serial8250_request_std_resource(struct uart_8250_port *up)
 		if (!port->mapbase)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!request_mem_region(port->mapbase, size, "serial")) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EBUSY;
 			break;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (port->flags & UPF_IOREMAP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			port->membase = ioremap_nocache(port->mapbase, size);
 			if (!port->membase) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				release_mem_region(port->mapbase, size);
 				ret = -ENOMEM;
 			}
@@ -2853,7 +3111,9 @@ static int serial8250_request_std_resource(struct uart_8250_port *up)
 	case UPIO_HUB6:
 	case UPIO_PORT:
 		if (!request_region(port->iobase, size, "serial"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EBUSY;
+}
 		break;
 	}
 	return ret;
@@ -2874,11 +3134,14 @@ static void serial8250_release_std_resource(struct uart_8250_port *up)
 		if (!port->mapbase)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (port->flags & UPF_IOREMAP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			iounmap(port->membase);
 			port->membase = NULL;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		release_mem_region(port->mapbase, size);
 		break;
 
@@ -2891,6 +3154,7 @@ static void serial8250_release_std_resource(struct uart_8250_port *up)
 
 static void serial8250_release_port(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	serial8250_release_std_resource(up);
@@ -2898,6 +3162,7 @@ static void serial8250_release_port(struct uart_port *port)
 
 static int serial8250_request_port(struct uart_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	return serial8250_request_std_resource(up);
@@ -2910,6 +3175,7 @@ static int fcr_get_rxtrig_bytes(struct uart_8250_port *up)
 
 	bytes = conf_type->rxtrig_bytes[UART_FCR_R_TRIG_BITS(up->fcr)];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bytes ? bytes : -EOPNOTSUPP;
 }
 
@@ -2919,7 +3185,9 @@ static int bytes_to_fcr_rxtrig(struct uart_8250_port *up, unsigned char bytes)
 	int i;
 
 	if (!conf_type->rxtrig_bytes[UART_FCR_R_TRIG_BITS(UART_FCR_R_TRIG_00)])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	for (i = 1; i < UART_FCR_R_TRIG_MAX_STATE; i++) {
 		if (bytes < conf_type->rxtrig_bytes[i])
@@ -2932,6 +3200,7 @@ static int bytes_to_fcr_rxtrig(struct uart_8250_port *up, unsigned char bytes)
 
 static int do_get_rxtrig(struct tty_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_state *state = container_of(port, struct uart_state, port);
 	struct uart_port *uport = state->uart_port;
 	struct uart_8250_port *up = up_to_u8250p(uport);
@@ -2956,6 +3225,7 @@ static int do_serial8250_get_rxtrig(struct tty_port *port)
 static ssize_t serial8250_get_attr_rx_trig_bytes(struct device *dev,
 	struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_port *port = dev_get_drvdata(dev);
 	int rxtrig_bytes;
 
@@ -2968,6 +3238,7 @@ static ssize_t serial8250_get_attr_rx_trig_bytes(struct device *dev,
 
 static int do_set_rxtrig(struct tty_port *port, unsigned char bytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_state *state = container_of(port, struct uart_state, port);
 	struct uart_port *uport = state->uart_port;
 	struct uart_8250_port *up = up_to_u8250p(uport);
@@ -3002,6 +3273,7 @@ static int do_serial8250_set_rxtrig(struct tty_port *port, unsigned char bytes)
 static ssize_t serial8250_set_attr_rx_trig_bytes(struct device *dev,
 	struct device_attribute *attr, const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_port *port = dev_get_drvdata(dev);
 	unsigned char bytes;
 	int ret;
@@ -3043,6 +3315,7 @@ static void register_dev_spec_attr_grp(struct uart_8250_port *up)
 
 static void serial8250_config_port(struct uart_port *port, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 	int ret;
 
@@ -3052,24 +3325,34 @@ static void serial8250_config_port(struct uart_port *port, int flags)
 	 */
 	ret = serial8250_request_std_resource(up);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (port->iotype != up->cur_iotype)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_io_from_upio(port);
+}
 
 	if (flags & UART_CONFIG_TYPE)
 		autoconfig(up);
 
 	/* if access method is AU, it is a 16550 with a quirk */
 	if (port->type == PORT_16550A && port->iotype == UPIO_AU)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->bugs |= UART_BUG_NOMSR;
+}
 
 	/* HW bugs may trigger IRQ while IIR == NO_INT */
 	if (port->type == PORT_TEGRA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->bugs |= UART_BUG_NOMSR;
+}
 
 	if (port->type != PORT_UNKNOWN && flags & UART_CONFIG_IRQ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		autoconfig_irq(up);
+}
 
 	if (port->type == PORT_UNKNOWN)
 		serial8250_release_std_resource(up);
@@ -3086,6 +3369,7 @@ static void serial8250_config_port(struct uart_port *port, int flags)
 static int
 serial8250_verify_port(struct uart_port *port, struct serial_struct *ser)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ser->irq >= nr_irqs || ser->irq < 0 ||
 	    ser->baud_base < 9600 || ser->type < PORT_UNKNOWN ||
 	    ser->type >= ARRAY_SIZE(uart_config) || ser->type == PORT_CIRRUS ||
@@ -3099,7 +3383,9 @@ static const char *serial8250_type(struct uart_port *port)
 	int type = port->type;
 
 	if (type >= ARRAY_SIZE(uart_config))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type = 0;
+}
 	return uart_config[type].name;
 }
 
@@ -3149,21 +3435,35 @@ void serial8250_set_defaults(struct uart_8250_port *up)
 		unsigned int type = up->port.type;
 
 		if (!up->port.fifosize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->port.fifosize = uart_config[type].fifo_size;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!up->tx_loadsz)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->tx_loadsz = uart_config[type].tx_loadsz;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!up->capabilities)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->capabilities = uart_config[type].flags;
+}
 	}
 
 	set_io_from_upio(port);
 
 	/* default dma handlers */
 	if (up->dma) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!up->dma->tx_dma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->dma->tx_dma = serial8250_tx_dma;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!up->dma->rx_dma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up->dma->rx_dma = serial8250_rx_dma;
+}
 	}
 }
 EXPORT_SYMBOL_GPL(serial8250_set_defaults);
@@ -3172,6 +3472,7 @@ EXPORT_SYMBOL_GPL(serial8250_set_defaults);
 
 static void serial8250_console_putchar(struct uart_port *port, int ch)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	wait_for_xmitr(up, UART_LSR_THRE);
@@ -3188,6 +3489,7 @@ static void serial8250_console_restore(struct uart_8250_port *up)
 	unsigned int baud, quot, frac = 0;
 
 	termios.c_cflag = port->cons->cflag;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (port->state->port.tty && termios.c_cflag == 0)
 		termios.c_cflag = port->state->port.tty->termios.c_cflag;
 
@@ -3218,9 +3520,13 @@ void serial8250_console_write(struct uart_8250_port *up, const char *s,
 	serial8250_rpm_get(up);
 
 	if (port->sysrq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		locked = 0;
+}
 	else if (oops_in_progress)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		locked = spin_trylock_irqsave(&port->lock, flags);
+}
 	else
 		spin_lock_irqsave(&port->lock, flags);
 
@@ -3230,12 +3536,15 @@ void serial8250_console_write(struct uart_8250_port *up, const char *s,
 	ier = serial_port_in(port, UART_IER);
 
 	if (up->capabilities & UART_CAP_UUE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial_port_out(port, UART_IER, UART_IER_UUE);
+}
 	else
 		serial_port_out(port, UART_IER, 0);
 
 	/* check scratch reg to see if port powered off during system sleep */
 	if (up->canary && (up->canary != serial_port_in(port, UART_SCR))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial8250_console_restore(up);
 		up->canary = 0;
 	}
@@ -3257,10 +3566,14 @@ void serial8250_console_write(struct uart_8250_port *up, const char *s,
 	 *	while processing with interrupts off.
 	 */
 	if (up->msr_saved_flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial8250_modem_status(up);
+}
 
 	if (locked)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irqrestore(&port->lock, flags);
+}
 	serial8250_rpm_put(up);
 }
 
@@ -3287,12 +3600,18 @@ int serial8250_console_setup(struct uart_port *port, char *options, bool probe)
 	int flow = 'n';
 
 	if (!port->iobase && !port->membase)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (options)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uart_parse_options(options, &baud, &parity, &bits, &flow);
+}
 	else if (probe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		baud = probe_baud(port);
+}
 
 	return uart_set_options(port, port->cons, baud, parity, bits, flow);
 }
diff --git a/drivers/tty/serial/earlycon.c b/drivers/tty/serial/earlycon.c
index 98928f0..961332e 100644
--- a/drivers/tty/serial/earlycon.c
+++ b/drivers/tty/serial/earlycon.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2014 Linaro Ltd.
  * Author: Rob Herring <robh@kernel.org>
@@ -50,7 +52,9 @@ static void __iomem * __init earlycon_map(resource_size_t paddr, size_t size)
 	base = ioremap(paddr, size);
 #endif
 	if (!base)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s: Couldn't map %pa\n", __func__, &paddr);
+}
 
 	return base;
 }
@@ -95,7 +99,9 @@ static int __init parse_options(struct earlycon_device *device, char *options)
 	resource_size_t addr;
 
 	if (uart_parse_earlycon(options, &port->iotype, &addr, &options))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	switch (port->iotype) {
 	case UPIO_MEM:
@@ -175,10 +181,14 @@ int __init setup_earlycon(char *buf)
 	const struct earlycon_id *match;
 
 	if (!buf || !buf[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (early_con.flags & CON_ENABLED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EALREADY;
+}
 
 	for (match = __earlycon_table; match < __earlycon_table_end; match++) {
 		size_t len = strlen(match->name);
@@ -186,16 +196,23 @@ int __init setup_earlycon(char *buf)
 		if (strncmp(buf, match->name, len))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (buf[len]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (buf[len] != ',')
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			buf += len + 1;
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			buf = NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return register_earlycon(buf, match);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOENT;
 }
 
@@ -217,17 +234,23 @@ static int __init param_setup_earlycon(char *buf)
 	 * don't generate a warning from parse_early_params() in that case
 	 */
 	if (!buf || !buf[0]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (IS_ENABLED(CONFIG_ACPI_SPCR_TABLE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			earlycon_init_is_deferred = true;
 			return 0;
 		} else if (!buf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return early_init_dt_scan_chosen_stdout();
 		}
 	}
 
 	err = setup_earlycon(buf);
 	if (err == -ENOENT || err == -EALREADY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 early_param("earlycon", param_setup_earlycon);
diff --git a/drivers/tty/serial/serial_core.c b/drivers/tty/serial/serial_core.c
index 7948acf..3e13e74 100644
--- a/drivers/tty/serial/serial_core.c
+++ b/drivers/tty/serial/serial_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Driver core for serial ports
  *
@@ -62,6 +64,7 @@ static void uart_port_shutdown(struct tty_port *port);
 
 static int uart_dcd_enabled(struct uart_port *uport)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !!(uport->status & UPSTAT_DCD_ENABLE);
 }
 
@@ -69,14 +72,17 @@ static inline struct uart_port *uart_port_ref(struct uart_state *state)
 {
 	if (atomic_add_unless(&state->refcount, 1, 0))
 		return state->uart_port;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
 static inline void uart_port_deref(struct uart_port *uport)
 {
 	if (atomic_dec_and_test(&uport->state->refcount))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wake_up(&uport->state->remove_wait);
 }
+}
 
 #define uart_port_lock(state, flags)					\
 	({								\
@@ -97,6 +103,7 @@ static inline void uart_port_deref(struct uart_port *uport)
 
 static inline struct uart_port *uart_port_check(struct uart_state *state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&state->port.mutex);
 	return state->uart_port;
 }
@@ -122,6 +129,7 @@ static void uart_stop(struct tty_struct *tty)
 	struct uart_port *port;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	port = uart_port_lock(state, flags);
 	if (port)
 		port->ops->stop_tx(port);
@@ -159,6 +167,7 @@ uart_update_mctrl(struct uart_port *port, unsigned int set, unsigned int clear)
 	port->mctrl = (old & ~clear) | set;
 	if (old != port->mctrl)
 		port->ops->set_mctrl(port, port->mctrl);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&port->lock, flags);
 }
 
@@ -173,6 +182,7 @@ static void uart_port_dtr_rts(struct uart_port *uport, int raise)
 
 	if (raise) {
 		if (rs485_on && !RTS_after_send) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart_set_mctrl(uport, TIOCM_DTR);
 			uart_clear_mctrl(uport, TIOCM_RTS);
 		} else {
@@ -181,6 +191,7 @@ static void uart_port_dtr_rts(struct uart_port *uport, int raise)
 	} else {
 		unsigned int clear = TIOCM_DTR;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clear |= (!rs485_on || !RTS_after_send) ? TIOCM_RTS : 0;
 		uart_clear_mctrl(uport, clear);
 	}
@@ -193,12 +204,15 @@ static void uart_port_dtr_rts(struct uart_port *uport, int raise)
 static int uart_port_startup(struct tty_struct *tty, struct uart_state *state,
 		int init_hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_port *uport = uart_port_check(state);
 	unsigned long page;
 	int retval = 0;
 
 	if (uport->type == PORT_UNKNOWN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/*
 	 * Make sure the device is in D0 state.
@@ -213,7 +227,9 @@ static int uart_port_startup(struct tty_struct *tty, struct uart_state *state,
 		/* This is protected by the per port mutex */
 		page = get_zeroed_page(GFP_KERNEL);
 		if (!page)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
 		state->xmit.buf = (unsigned char *) page;
 		uart_circ_clear(&state->xmit);
@@ -235,7 +251,9 @@ static int uart_port_startup(struct tty_struct *tty, struct uart_state *state,
 		 * port is open and ready to respond.
 		 */
 		if (init_hw && C_BAUD(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart_port_dtr_rts(uport, 1);
+}
 	}
 
 	/*
@@ -244,8 +262,11 @@ static int uart_port_startup(struct tty_struct *tty, struct uart_state *state,
 	 * now.
 	 */
 	if (retval && capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 
@@ -256,12 +277,17 @@ static int uart_startup(struct tty_struct *tty, struct uart_state *state,
 	int retval;
 
 	if (tty_port_initialized(port))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	retval = uart_port_startup(tty, state, init_hw);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_bit(TTY_IO_ERROR, &tty->flags);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 
@@ -274,6 +300,7 @@ static int uart_startup(struct tty_struct *tty, struct uart_state *state,
  */
 static void uart_shutdown(struct tty_struct *tty, struct uart_state *state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_port *uport = uart_port_check(state);
 	struct tty_port *port = &state->port;
 
@@ -346,9 +373,13 @@ uart_update_timeout(struct uart_port *port, unsigned int cflag,
 	}
 
 	if (cflag & CSTOPB)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bits++;
+}
 	if (cflag & PARENB)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bits++;
+}
 
 	/*
 	 * The total number of bits to be transmitted in the fifo.
@@ -419,18 +450,23 @@ uart_get_baud_rate(struct uart_port *port, struct ktermios *termios,
 		 * Die! Die! Die!
 		 */
 		if (try == 0 && baud == 38400)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			baud = altbaud;
+}
 
 		/*
 		 * Special case: B0 rate.
 		 */
 		if (baud == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hung_up = 1;
 			baud = 9600;
 		}
 
 		if (baud >= min && baud <= max)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return baud;
+}
 
 		/*
 		 * Oops, the quotient was zero.  Try again with
@@ -438,10 +474,13 @@ uart_get_baud_rate(struct uart_port *port, struct ktermios *termios,
 		 */
 		termios->c_cflag &= ~CBAUD;
 		if (old) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			baud = tty_termios_baud_rate(old);
 			if (!hung_up)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tty_termios_encode_baud_rate(termios,
 								baud, baud);
+}
 			old = NULL;
 			continue;
 		}
@@ -451,9 +490,12 @@ uart_get_baud_rate(struct uart_port *port, struct ktermios *termios,
 		 * the nearest chip supported rate.
 		 */
 		if (!hung_up) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (baud <= min)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tty_termios_encode_baud_rate(termios,
 							min + 1, min + 1);
+}
 			else
 				tty_termios_encode_baud_rate(termios,
 							max - 1, max - 1);
@@ -482,7 +524,9 @@ uart_get_divisor(struct uart_port *port, unsigned int baud)
 	 * Old custom speed handling.
 	 */
 	if (baud == 38400 && (port->flags & UPF_SPD_MASK) == UPF_SPD_CUST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		quot = port->custom_divisor;
+}
 	else
 		quot = DIV_ROUND_CLOSEST(port->uartclk, 16 * baud);
 
@@ -495,6 +539,7 @@ EXPORT_SYMBOL(uart_get_divisor);
 static void uart_change_speed(struct tty_struct *tty, struct uart_state *state,
 					struct ktermios *old_termios)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_port *uport = uart_port_check(state);
 	struct ktermios *termios;
 	int hw_stopped;
@@ -504,7 +549,9 @@ static void uart_change_speed(struct tty_struct *tty, struct uart_state *state,
 	 * then we can't set the parameters for this port.
 	 */
 	if (!tty || uport->type == PORT_UNKNOWN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	termios = &tty->termios;
 	uport->ops->set_termios(uport, termios, old_termios);
@@ -514,7 +561,9 @@ static void uart_change_speed(struct tty_struct *tty, struct uart_state *state,
 	 */
 	spin_lock_irq(&uport->lock);
 	if (termios->c_cflag & CRTSCTS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uport->status |= UPSTAT_CTS_ENABLE;
+}
 	else
 		uport->status &= ~UPSTAT_CTS_ENABLE;
 
@@ -528,12 +577,18 @@ static void uart_change_speed(struct tty_struct *tty, struct uart_state *state,
 	uport->hw_stopped = uart_softcts_mode(uport) &&
 				!(uport->ops->get_mctrl(uport) & TIOCM_CTS);
 	if (uport->hw_stopped) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!hw_stopped)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uport->ops->stop_tx(uport);
+}
 	} else {
 		if (hw_stopped)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__uart_start(tty);
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(&uport->lock);
 }
 
@@ -547,7 +602,9 @@ static int uart_put_char(struct tty_struct *tty, unsigned char c)
 
 	circ = &state->xmit;
 	if (!circ->buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	port = uart_port_lock(state, flags);
 	if (port && uart_circ_chars_free(circ) != 0) {
@@ -578,19 +635,25 @@ static int uart_write(struct tty_struct *tty,
 	 * closed.  No cookie for you.
 	 */
 	if (!state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(1);
 		return -EL3HLT;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	circ = &state->xmit;
 	if (!circ->buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	port = uart_port_lock(state, flags);
 	while (port) {
 		c = CIRC_SPACE_TO_END(circ->head, circ->tail, UART_XMIT_SIZE);
 		if (count < c)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			c = count;
+}
 		if (c <= 0)
 			break;
 		memcpy(circ->buf + circ->head, buf, c);
@@ -642,18 +705,24 @@ static void uart_flush_buffer(struct tty_struct *tty)
 	 * closed.  No cookie for you.
 	 */
 	if (!state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(1);
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("uart_flush_buffer(%d) called\n", tty->index);
 
 	port = uart_port_lock(state, flags);
 	if (!port)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	uart_circ_clear(&state->xmit);
 	if (port->ops->flush_buffer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port->ops->flush_buffer(port);
+}
 	uart_port_unlock(port, flags);
 	tty_port_tty_wakeup(&state->port);
 }
@@ -670,7 +739,9 @@ static void uart_send_xchar(struct tty_struct *tty, char ch)
 
 	port = uart_port_ref(state);
 	if (!port)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (port->ops->send_xchar)
 		port->ops->send_xchar(port, ch);
@@ -692,7 +763,9 @@ static void uart_throttle(struct tty_struct *tty)
 
 	port = uart_port_ref(state);
 	if (!port)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (I_IXOFF(tty))
 		mask |= UPSTAT_AUTOXOFF;
@@ -721,7 +794,9 @@ static void uart_unthrottle(struct tty_struct *tty)
 
 	port = uart_port_ref(state);
 	if (!port)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (I_IXOFF(tty))
 		mask |= UPSTAT_AUTOXOFF;
@@ -744,6 +819,7 @@ static void uart_unthrottle(struct tty_struct *tty)
 
 static int uart_get_info(struct tty_port *port, struct serial_struct *retinfo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_state *state = container_of(port, struct uart_state, port);
 	struct uart_port *uport;
 	int ret = -ENODEV;
@@ -790,7 +866,9 @@ static int uart_get_info_user(struct tty_port *port,
 	struct serial_struct tmp;
 
 	if (uart_get_info(port, &tmp) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	if (copy_to_user(retinfo, &tmp, sizeof(*retinfo)))
 		return -EFAULT;
@@ -801,6 +879,7 @@ static int uart_set_info(struct tty_struct *tty, struct tty_port *port,
 			 struct uart_state *state,
 			 struct serial_struct *new_info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_port *uport = uart_port_check(state);
 	unsigned long new_port;
 	unsigned int change_irq, change_port, closing_wait;
@@ -1004,7 +1083,9 @@ static int uart_set_info_user(struct tty_struct *tty, struct uart_state *state,
 	int retval;
 
 	if (copy_from_user(&new_serial, newinfo, sizeof(new_serial)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	/*
 	 * This semaphore protects port->count.  It is also
@@ -1028,6 +1109,7 @@ static int uart_set_info_user(struct tty_struct *tty, struct uart_state *state,
 static int uart_get_lsr_info(struct tty_struct *tty,
 			struct uart_state *state, unsigned int __user *value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_port *uport = uart_port_check(state);
 	unsigned int result;
 
@@ -1059,6 +1141,7 @@ static int uart_tiocmget(struct tty_struct *tty)
 	if (!uport)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tty_io_error(tty)) {
 		result = uport->mctrl;
 		spin_lock_irq(&uport->lock);
@@ -1083,6 +1166,7 @@ uart_tiocmset(struct tty_struct *tty, unsigned int set, unsigned int clear)
 	if (!uport)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tty_io_error(tty)) {
 		uart_update_mctrl(uport, set, clear);
 		ret = 0;
@@ -1104,6 +1188,7 @@ static int uart_break_ctl(struct tty_struct *tty, int break_state)
 	if (!uport)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (uport->type != PORT_UNKNOWN)
 		uport->ops->break_ctl(uport, break_state);
 	ret = 0;
@@ -1119,7 +1204,9 @@ static int uart_do_autoconfig(struct tty_struct *tty,struct uart_state *state)
 	int flags, ret;
 
 	if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	/*
 	 * Take the per-port semaphore.  This prevents count from
@@ -1196,7 +1283,9 @@ static int uart_wait_modem_status(struct uart_state *state, unsigned long arg)
 	 */
 	uport = uart_port_ref(state);
 	if (!uport)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 	spin_lock_irq(&uport->lock);
 	memcpy(&cprev, &uport->icount, sizeof(struct uart_icount));
 	uart_enable_ms(uport);
@@ -1250,7 +1339,9 @@ static int uart_get_icount(struct tty_struct *tty,
 
 	uport = uart_port_ref(state);
 	if (!uport)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 	spin_lock_irq(&uport->lock);
 	memcpy(&cnow, &uport->icount, sizeof(struct uart_icount));
 	spin_unlock_irq(&uport->lock);
@@ -1277,6 +1368,7 @@ static int uart_get_rs485_config(struct uart_port *port,
 	unsigned long flags;
 	struct serial_rs485 aux;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&port->lock, flags);
 	aux = port->rs485;
 	spin_unlock_irqrestore(&port->lock, flags);
@@ -1295,7 +1387,9 @@ static int uart_set_rs485_config(struct uart_port *port,
 	unsigned long flags;
 
 	if (!port->rs485_config)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOIOCTLCMD;
+}
 
 	if (copy_from_user(&rs485, rs485_user, sizeof(*rs485_user)))
 		return -EFAULT;
@@ -1355,6 +1449,7 @@ uart_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg)
 		goto out;
 
 	if (tty_io_error(tty)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EIO;
 		goto out;
 	}
@@ -1375,6 +1470,7 @@ uart_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg)
 	uport = uart_port_check(state);
 
 	if (!uport || tty_io_error(tty)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EIO;
 		goto out_up;
 	}
@@ -1398,7 +1494,9 @@ uart_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg)
 		break;
 	default:
 		if (uport->ops->ioctl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = uport->ops->ioctl(uport, cmd, arg);
+}
 		break;
 	}
 out_up:
@@ -1414,6 +1512,7 @@ static void uart_set_ldisc(struct tty_struct *tty)
 
 	mutex_lock(&state->port.mutex);
 	uport = uart_port_check(state);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (uport && uport->ops->set_ldisc)
 		uport->ops->set_ldisc(uport, &tty->termios);
 	mutex_unlock(&state->port.mutex);
@@ -1438,6 +1537,7 @@ static void uart_set_termios(struct tty_struct *tty,
 	 * about changes to these input settings.
 	 */
 	if (uport->flags & UPF_SOFT_FLOW) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iflag_mask |= IXANY|IXON|IXOFF;
 		sw_changed =
 		   tty->termios.c_cc[VSTART] != old_termios->c_cc[VSTART] ||
@@ -1464,12 +1564,18 @@ static void uart_set_termios(struct tty_struct *tty,
 
 	/* Handle transition to B0 status */
 	if ((old_termios->c_cflag & CBAUD) && !(cflag & CBAUD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uart_clear_mctrl(uport, TIOCM_RTS | TIOCM_DTR);
+}
 	/* Handle transition away from B0 status */
 	else if (!(old_termios->c_cflag & CBAUD) && (cflag & CBAUD)) {
 		unsigned int mask = TIOCM_DTR;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(cflag & CRTSCTS) || !tty_throttled(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mask |= TIOCM_RTS;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uart_set_mctrl(uport, mask);
 	}
 out:
@@ -1497,7 +1603,9 @@ static void uart_close(struct tty_struct *tty, struct file *filp)
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	port = &state->port;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("uart_close(%d) called\n", tty->index);
 
 	tty_port_close(tty->port, tty, filp);
@@ -1505,6 +1613,7 @@ static void uart_close(struct tty_struct *tty, struct file *filp)
 
 static void uart_tty_port_shutdown(struct tty_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_state *state = container_of(port, struct uart_state, port);
 	struct uart_port *uport = uart_port_check(state);
 
@@ -1540,9 +1649,12 @@ static void uart_wait_until_sent(struct tty_struct *tty, int timeout)
 
 	port = uart_port_ref(state);
 	if (!port)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (port->type == PORT_UNKNOWN || port->fifosize == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uart_port_deref(port);
 		return;
 	}
@@ -1558,9 +1670,13 @@ static void uart_wait_until_sent(struct tty_struct *tty, int timeout)
 	char_time = (port->timeout - HZ/50) / port->fifosize;
 	char_time = char_time / 5;
 	if (char_time == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		char_time = 1;
+}
 	if (timeout && timeout < char_time)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		char_time = timeout;
+}
 
 	/*
 	 * If the transmitter hasn't cleared in twice the approximate
@@ -1576,6 +1692,7 @@ static void uart_wait_until_sent(struct tty_struct *tty, int timeout)
 
 	expire = jiffies + timeout;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("uart_wait_until_sent(%d), jiffies=%lu, expire=%lu...\n",
 		port->line, jiffies, expire);
 
@@ -1585,9 +1702,11 @@ static void uart_wait_until_sent(struct tty_struct *tty, int timeout)
 	 * we wait.
 	 */
 	while (!port->ops->tx_empty(port)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msleep_interruptible(jiffies_to_msecs(char_time));
 		if (signal_pending(current))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (time_after(jiffies, expire))
 			break;
 	}
@@ -1606,6 +1725,7 @@ static void uart_hangup(struct tty_struct *tty)
 	struct uart_port *uport;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("uart_hangup(%d)\n", tty->index);
 
 	mutex_lock(&port->mutex);
@@ -1631,6 +1751,7 @@ static void uart_hangup(struct tty_struct *tty)
 /* uport == NULL if uart_port has already been removed */
 static void uart_port_shutdown(struct tty_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_state *state = container_of(port, struct uart_state, port);
 	struct uart_port *uport = uart_port_check(state);
 
@@ -1658,6 +1779,7 @@ static void uart_port_shutdown(struct tty_port *port)
 
 static int uart_carrier_raised(struct tty_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_state *state = container_of(port, struct uart_state, port);
 	struct uart_port *uport;
 	int mctrl;
@@ -1683,12 +1805,15 @@ static int uart_carrier_raised(struct tty_port *port)
 
 static void uart_dtr_rts(struct tty_port *port, int raise)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_state *state = container_of(port, struct uart_state, port);
 	struct uart_port *uport;
 
 	uport = uart_port_ref(state);
 	if (!uport)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	uart_port_dtr_rts(uport, raise);
 	uart_port_deref(uport);
 }
@@ -1713,19 +1838,24 @@ static int uart_open(struct tty_struct *tty, struct file *filp)
 
 	retval = tty_port_open(&state->port, tty, filp);
 	if (retval > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = 0;
+}
 
 	return retval;
 }
 
 static int uart_port_activate(struct tty_port *port, struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_state *state = container_of(port, struct uart_state, port);
 	struct uart_port *uport;
 
 	uport = uart_port_check(state);
 	if (!uport || uport->flags & UPF_DEAD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	port->low_latency = (uport->flags & UPF_LOW_LATENCY) ? 1 : 0;
 
@@ -1743,7 +1873,9 @@ static const char *uart_type(struct uart_port *port)
 		str = port->ops->type(port);
 
 	if (!str)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		str = "unknown";
+}
 
 	return str;
 }
@@ -1765,6 +1897,7 @@ static void uart_line_info(struct seq_file *m, struct uart_driver *drv, int i)
 	if (!uport)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mmio = uport->iotype >= UPIO_MEM;
 	seq_printf(m, "%d: uart:%s %s%08llX irq:%d",
 			uport->line, uart_type(uport),
@@ -1835,6 +1968,7 @@ static int uart_proc_show(struct seq_file *m, void *v)
 	int i;
 
 	seq_printf(m, "serinfo:1.0 driver%s%s revision:%s\n", "", "", "");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < drv->nr; i++)
 		uart_line_info(m, drv, i);
 	return 0;
@@ -1842,6 +1976,7 @@ static int uart_proc_show(struct seq_file *m, void *v)
 
 static int uart_proc_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, uart_proc_show, PDE_DATA(inode));
 }
 
@@ -1886,6 +2021,7 @@ uart_get_console(struct uart_port *ports, int nr, struct console *co)
 {
 	int idx = co->index;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (idx < 0 || idx >= nr || (ports[idx].iobase == 0 &&
 				     ports[idx].membase == NULL))
 		for (idx = 0; idx < nr; idx++)
@@ -1919,6 +2055,7 @@ uart_get_console(struct uart_port *ports, int nr, struct console *co)
 int uart_parse_earlycon(char *p, unsigned char *iotype, resource_size_t *addr,
 			char **options)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (strncmp(p, "mmio,", 5) == 0) {
 		*iotype = UPIO_MEM;
 		p += 5;
@@ -1976,6 +2113,7 @@ uart_parse_options(char *options, int *baud, int *parity, int *bits, int *flow)
 	char *s = options;
 
 	*baud = simple_strtoul(s, NULL, 10);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (*s >= '0' && *s <= '9')
 		s++;
 	if (*s)
@@ -2011,16 +2149,20 @@ uart_set_options(struct uart_port *port, struct console *co,
 	 */
 	if (!(uart_console(port) && (port->cons->flags & CON_ENABLED))) {
 		spin_lock_init(&port->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lockdep_set_class(&port->lock, &port_lock_key);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(&termios, 0, sizeof(struct ktermios));
 
 	termios.c_cflag |= CREAD | HUPCL | CLOCAL;
 	tty_termios_encode_baud_rate(&termios, baud, baud);
 
 	if (bits == 7)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		termios.c_cflag |= CS7;
+}
 	else
 		termios.c_cflag |= CS8;
 
@@ -2034,7 +2176,9 @@ uart_set_options(struct uart_port *port, struct console *co,
 	}
 
 	if (flow == 'r')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		termios.c_cflag |= CRTSCTS;
+}
 
 	/*
 	 * some uarts on other side don't support no flow control.
@@ -2066,6 +2210,7 @@ EXPORT_SYMBOL_GPL(uart_set_options);
 static void uart_change_pm(struct uart_state *state,
 			   enum uart_pm_state pm_state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct uart_port *port = uart_port_check(state);
 
 	if (state->pm_state != pm_state) {
@@ -2100,6 +2245,7 @@ int uart_suspend_port(struct uart_driver *drv, struct uart_port *uport)
 	mutex_lock(&port->mutex);
 
 	tty_dev = device_find_child(uport->dev, &match, serial_match_port);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tty_dev && device_may_wakeup(tty_dev)) {
 		enable_irq_wake(uport->irq);
 		put_device(tty_dev);
@@ -2163,6 +2309,7 @@ int uart_resume_port(struct uart_driver *drv, struct uart_port *uport)
 	mutex_lock(&port->mutex);
 
 	tty_dev = device_find_child(uport->dev, &match, serial_match_port);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!uport->suspended && device_may_wakeup(tty_dev)) {
 		if (irqd_is_wakeup_set(irq_get_irq_data((uport->irq))))
 			disable_irq_wake(uport->irq);
@@ -2278,7 +2425,9 @@ uart_configure_port(struct uart_driver *drv, struct uart_state *state,
 	 * If there isn't a port here, don't do anything further.
 	 */
 	if (!port->iobase && !port->mapbase && !port->membase)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * Now do the auto configuration stuff.  Note that config_port
@@ -2286,7 +2435,9 @@ uart_configure_port(struct uart_driver *drv, struct uart_state *state,
 	 */
 	flags = 0;
 	if (port->flags & UPF_AUTO_IRQ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= UART_CONFIG_IRQ;
+}
 	if (port->flags & UPF_BOOT_AUTOCONF) {
 		if (!(port->flags & UPF_FIXED_TYPE)) {
 			port->type = PORT_UNKNOWN;
@@ -2318,14 +2469,18 @@ uart_configure_port(struct uart_driver *drv, struct uart_state *state,
 		 * It may be that the port was not available.
 		 */
 		if (port->cons && !(port->cons->flags & CON_ENABLED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			register_console(port->cons);
+}
 
 		/*
 		 * Power down all ports by default, except the
 		 * console if we have one.
 		 */
 		if (!uart_console(port))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uart_change_pm(state, UART_PM_STATE_OFF);
+}
 	}
 }
 
@@ -2503,10 +2658,16 @@ int uart_register_driver(struct uart_driver *drv)
 
 	retval = tty_register_driver(normal);
 	if (retval >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < drv->nr; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_port_destroy(&drv->state[i].port);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	put_tty_driver(normal);
 out_kfree:
 	kfree(drv->state);
@@ -2530,6 +2691,7 @@ void uart_unregister_driver(struct uart_driver *drv)
 
 	tty_unregister_driver(p);
 	put_tty_driver(p);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < drv->nr; i++)
 		tty_port_destroy(&drv->state[i].port);
 	kfree(drv->state);
@@ -2583,7 +2745,9 @@ static ssize_t uart_get_attr_port(struct device *dev,
 	uart_get_info(port, &tmp);
 	ioaddr = tmp.port;
 	if (HIGH_BITS_OFFSET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ioaddr |= (unsigned long)tmp.port_high << HIGH_BITS_OFFSET;
+}
 	return snprintf(buf, PAGE_SIZE, "0x%lX\n", ioaddr);
 }
 
@@ -2735,7 +2899,9 @@ int uart_add_one_port(struct uart_driver *drv, struct uart_port *uport)
 	BUG_ON(in_interrupt());
 
 	if (uport->line >= drv->nr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	state = drv->state + uport->line;
 	port = &state->port;
@@ -2743,6 +2909,7 @@ int uart_add_one_port(struct uart_driver *drv, struct uart_port *uport)
 	mutex_lock(&port_mutex);
 	mutex_lock(&port->mutex);
 	if (state->uart_port) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EINVAL;
 		goto out;
 	}
@@ -2759,6 +2926,7 @@ int uart_add_one_port(struct uart_driver *drv, struct uart_port *uport)
 	uport->name = kasprintf(GFP_KERNEL, "%s%d", drv->dev_name,
 				drv->tty_driver->name_base + uport->line);
 	if (!uport->name) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOMEM;
 		goto out;
 	}
@@ -2769,10 +2937,14 @@ int uart_add_one_port(struct uart_driver *drv, struct uart_port *uport)
 	 */
 	if (!(uart_console(uport) && (uport->cons->flags & CON_ENABLED))) {
 		spin_lock_init(&uport->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lockdep_set_class(&uport->lock, &port_lock_key);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (uport->cons && uport->dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		of_console_check(uport->dev->of_node, uport->cons->name, uport->line);
+}
 
 	uart_configure_port(drv, state, uport);
 
@@ -2780,11 +2952,14 @@ int uart_add_one_port(struct uart_driver *drv, struct uart_port *uport)
 
 	num_groups = 2;
 	if (uport->attr_group)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		num_groups++;
+}
 
 	uport->tty_groups = kcalloc(num_groups, sizeof(*uport->tty_groups),
 				    GFP_KERNEL);
 	if (!uport->tty_groups) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOMEM;
 		goto out;
 	}
@@ -2801,6 +2976,7 @@ int uart_add_one_port(struct uart_driver *drv, struct uart_port *uport)
 	if (likely(!IS_ERR(tty_dev))) {
 		device_set_wakeup_capable(tty_dev, 1);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(uport->dev, "Cannot register tty device on line %d\n",
 		       uport->line);
 	}
@@ -2834,6 +3010,7 @@ int uart_remove_one_port(struct uart_driver *drv, struct uart_port *uport)
 	struct tty_struct *tty;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(in_interrupt());
 
 	mutex_lock(&port_mutex);
@@ -2903,7 +3080,9 @@ int uart_remove_one_port(struct uart_driver *drv, struct uart_port *uport)
 int uart_match_port(struct uart_port *port1, struct uart_port *port2)
 {
 	if (port1->iotype != port2->iotype)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	switch (port1->iotype) {
 	case UPIO_PORT:
@@ -2919,6 +3098,7 @@ int uart_match_port(struct uart_port *port1, struct uart_port *port2)
 	case UPIO_TSI:
 		return (port1->mapbase == port2->mapbase);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(uart_match_port);
@@ -2936,6 +3116,7 @@ void uart_handle_dcd_change(struct uart_port *uport, unsigned int status)
 	struct tty_struct *tty = port->tty;
 	struct tty_ldisc *ld;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held_once(&uport->lock);
 
 	if (tty) {
@@ -2967,6 +3148,7 @@ EXPORT_SYMBOL_GPL(uart_handle_dcd_change);
  */
 void uart_handle_cts_change(struct uart_port *uport, unsigned int status)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held_once(&uport->lock);
 
 	uport->icount.cts++;
@@ -3007,8 +3189,10 @@ void uart_insert_char(struct uart_port *port, unsigned int status,
 	struct tty_port *tport = &port->state->port;
 
 	if ((status & port->ignore_status_mask & ~overrun) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tty_insert_flip_char(tport, ch, flag) == 0)
 			++port->icount.buf_overrun;
+}
 
 	/*
 	 * Overrun is special.  Since it's reported immediately,
diff --git a/drivers/tty/sysrq.c b/drivers/tty/sysrq.c
index 377b359..8f3e832 100644
--- a/drivers/tty/sysrq.c
+++ b/drivers/tty/sysrq.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *	Linux Magic System Request Key Hacks
@@ -68,6 +70,7 @@ static bool sysrq_on(void)
  */
 static bool sysrq_on_mask(int mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sysrq_always_enabled ||
 	       sysrq_enabled == 1 ||
 	       (sysrq_enabled & mask);
@@ -75,6 +78,7 @@ static bool sysrq_on_mask(int mask)
 
 static int __init sysrq_always_enabled_setup(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysrq_always_enabled = true;
 	pr_info("sysrq always enabled.\n");
 
@@ -119,6 +123,7 @@ static struct sysrq_key_op sysrq_SAK_op = {
 #ifdef CONFIG_VT
 static void sysrq_handle_unraw(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vt_reset_unicode(fg_console);
 }
 
@@ -155,6 +160,7 @@ static struct sysrq_key_op sysrq_crash_op = {
 
 static void sysrq_handle_reboot(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_off();
 	local_irq_enable();
 	emergency_restart();
@@ -168,6 +174,7 @@ static struct sysrq_key_op sysrq_reboot_op = {
 
 static void sysrq_handle_sync(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	emergency_sync();
 }
 static struct sysrq_key_op sysrq_sync_op = {
@@ -179,6 +186,7 @@ static struct sysrq_key_op sysrq_sync_op = {
 
 static void sysrq_handle_show_timers(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysrq_timer_list_show();
 }
 
@@ -190,6 +198,7 @@ static struct sysrq_key_op sysrq_show_timers_op = {
 
 static void sysrq_handle_mountro(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	emergency_remount();
 }
 static struct sysrq_key_op sysrq_mountro_op = {
@@ -233,6 +242,7 @@ static void showacpu(void *dummy)
 
 static void sysrq_showregs_othercpus(struct work_struct *dummy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	smp_call_function(showacpu, NULL, 0);
 }
 
@@ -271,7 +281,9 @@ static void sysrq_handle_showregs(int key)
 	struct pt_regs *regs = NULL;
 
 	if (in_irq())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		regs = get_irq_regs();
+}
 	if (regs)
 		show_regs(regs);
 	perf_event_print_debug();
@@ -285,6 +297,7 @@ static struct sysrq_key_op sysrq_showregs_op = {
 
 static void sysrq_handle_showstate(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	show_state();
 	show_workqueue_state();
 }
@@ -297,6 +310,7 @@ static struct sysrq_key_op sysrq_showstate_op = {
 
 static void sysrq_handle_showstate_blocked(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	show_state_filter(TASK_UNINTERRUPTIBLE);
 }
 static struct sysrq_key_op sysrq_showstate_blocked_op = {
@@ -311,6 +325,7 @@ static struct sysrq_key_op sysrq_showstate_blocked_op = {
 
 static void sysrq_ftrace_dump(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ftrace_dump(DUMP_ALL);
 }
 static struct sysrq_key_op sysrq_ftrace_dump_op = {
@@ -325,6 +340,7 @@ static struct sysrq_key_op sysrq_ftrace_dump_op = {
 
 static void sysrq_handle_showmem(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	show_mem(0, NULL);
 }
 static struct sysrq_key_op sysrq_showmem_op = {
@@ -342,6 +358,7 @@ static void send_sig_all(int sig)
 	struct task_struct *p;
 
 	read_lock(&tasklist_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_process(p) {
 		if (p->flags & PF_KTHREAD)
 			continue;
@@ -355,6 +372,7 @@ static void send_sig_all(int sig)
 
 static void sysrq_handle_term(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	send_sig_all(SIGTERM);
 	console_loglevel = CONSOLE_LOGLEVEL_DEBUG;
 }
@@ -378,7 +396,9 @@ static void moom_callback(struct work_struct *ignored)
 
 	mutex_lock(&oom_lock);
 	if (!out_of_memory(&oc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("OOM request ignored. No task eligible\n");
+}
 	mutex_unlock(&oom_lock);
 }
 
@@ -386,6 +406,7 @@ static DECLARE_WORK(moom_work, moom_callback);
 
 static void sysrq_handle_moom(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	schedule_work(&moom_work);
 }
 static struct sysrq_key_op sysrq_moom_op = {
@@ -398,6 +419,7 @@ static struct sysrq_key_op sysrq_moom_op = {
 #ifdef CONFIG_BLOCK
 static void sysrq_handle_thaw(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	emergency_thaw_all();
 }
 static struct sysrq_key_op sysrq_thaw_op = {
@@ -410,6 +432,7 @@ static struct sysrq_key_op sysrq_thaw_op = {
 
 static void sysrq_handle_kill(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	send_sig_all(SIGKILL);
 	console_loglevel = CONSOLE_LOGLEVEL_DEBUG;
 }
@@ -422,6 +445,7 @@ static struct sysrq_key_op sysrq_kill_op = {
 
 static void sysrq_handle_unrt(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	normalize_rt_tasks();
 }
 static struct sysrq_key_op sysrq_unrt_op = {
@@ -499,7 +523,9 @@ static int sysrq_key_table_key2index(int key)
 	int retval;
 
 	if ((key >= '0') && (key <= '9'))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = key - '0';
+}
 	else if ((key >= 'a') && (key <= 'z'))
 		retval = key + 10 - 'a';
 	else
@@ -585,6 +611,7 @@ void __handle_sysrq(int key, bool check_mask)
 
 void handle_sysrq(int key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sysrq_on())
 		__handle_sysrq(key, true);
 }
@@ -635,6 +662,7 @@ static void sysrq_parse_reset_sequence(struct sysrq_state *state)
 
 	state->reset_seq_cnt = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < sysrq_reset_seq_len; i++) {
 		key = sysrq_reset_seq[i];
 
@@ -666,6 +694,7 @@ static void sysrq_do_reset(unsigned long _state)
 
 static void sysrq_handle_reset_request(struct sysrq_state *state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (state->reset_requested)
 		__handle_sysrq(sysrq_xlate[KEY_B], false);
 
@@ -679,6 +708,7 @@ static void sysrq_handle_reset_request(struct sysrq_state *state)
 static void sysrq_detect_reset_sequence(struct sysrq_state *state,
 					unsigned int code, int value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_bit(code, state->reset_keybit)) {
 		/*
 		 * Pressing any key _not_ in reset sequence cancels
@@ -872,7 +902,9 @@ static bool sysrq_filter(struct input_handle *handle,
 	 * Alt+SysRq combination.
 	 */
 	if (sysrq->reinjecting)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	switch (type) {
 
@@ -901,7 +933,9 @@ static int sysrq_connect(struct input_handler *handler,
 
 	sysrq = kzalloc(sizeof(struct sysrq_state), GFP_KERNEL);
 	if (!sysrq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	INIT_WORK(&sysrq->reinject_work, sysrq_reinject_alt_sysrq);
 
@@ -914,6 +948,7 @@ static int sysrq_connect(struct input_handler *handler,
 
 	error = input_register_handle(&sysrq->handle);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Failed to register input sysrq handler, error %d\n",
 			error);
 		goto err_free;
@@ -921,10 +956,12 @@ static int sysrq_connect(struct input_handler *handler,
 
 	error = input_open_device(&sysrq->handle);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Failed to open input device, error %d\n", error);
 		goto err_unregister;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  err_unregister:
@@ -978,13 +1015,16 @@ static inline void sysrq_register_handler(void)
 
 	error = input_register_handler(&sysrq_handler);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Failed to register input handler, error %d", error);
+}
 	else
 		sysrq_handler_registered = true;
 }
 
 static inline void sysrq_unregister_handler(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sysrq_handler_registered) {
 		input_unregister_handler(&sysrq_handler);
 		sysrq_handler_registered = false;
@@ -999,7 +1039,9 @@ static int sysrq_reset_seq_param_set(const char *buffer,
 
 	error = kstrtoul(buffer, 0, &val);
 	if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	if (val > KEY_MAX)
 		return -EINVAL;
@@ -1046,8 +1088,11 @@ int sysrq_toggle_support(int enable_mask)
 	sysrq_enabled = enable_mask;
 
 	if (was_enabled != sysrq_on()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sysrq_on())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sysrq_register_handler();
+}
 		else
 			sysrq_unregister_handler();
 	}
@@ -1065,8 +1110,10 @@ static int __sysrq_swap_key_ops(int key, struct sysrq_key_op *insert_op_p,
 		__sysrq_put_key_op(key, insert_op_p);
 		retval = 0;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sysrq_key_table_lock);
 
 	/*
@@ -1087,6 +1134,7 @@ EXPORT_SYMBOL(register_sysrq_key);
 
 int unregister_sysrq_key(int key, struct sysrq_key_op *op_p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __sysrq_swap_key_ops(key, NULL, op_p);
 }
 EXPORT_SYMBOL(unregister_sysrq_key);
@@ -1098,6 +1146,7 @@ EXPORT_SYMBOL(unregister_sysrq_key);
 static ssize_t write_sysrq_trigger(struct file *file, const char __user *buf,
 				   size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (count) {
 		char c;
 
diff --git a/drivers/tty/tty_audit.c b/drivers/tty/tty_audit.c
index df2d735..e9363e0 100644
--- a/drivers/tty/tty_audit.c
+++ b/drivers/tty/tty_audit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Creating audit events from TTY input.
  *
@@ -26,6 +28,7 @@ static struct tty_audit_buf *tty_audit_buf_ref(void)
 	struct tty_audit_buf *buf;
 
 	buf = current->signal->tty_audit_buf;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(buf == ERR_PTR(-ESRCH));
 	return buf;
 }
@@ -37,6 +40,7 @@ static struct tty_audit_buf *tty_audit_buf_alloc(void)
 	buf = kmalloc(sizeof(*buf), GFP_KERNEL);
 	if (!buf)
 		goto err;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	buf->data = kmalloc(N_TTY_BUF_SIZE, GFP_KERNEL);
 	if (!buf->data)
 		goto err_buf;
@@ -54,6 +58,7 @@ static struct tty_audit_buf *tty_audit_buf_alloc(void)
 
 static void tty_audit_buf_free(struct tty_audit_buf *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(buf->valid != 0);
 	kfree(buf->data);
 	kfree(buf);
@@ -65,6 +70,7 @@ static void tty_audit_log(const char *description, dev_t dev,
 	struct audit_buffer *ab;
 	struct task_struct *tsk = current;
 	pid_t pid = task_pid_nr(tsk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	uid_t uid = from_kuid(&init_user_ns, task_uid(tsk));
 	uid_t loginuid = from_kuid(&init_user_ns, audit_get_loginuid(tsk));
 	unsigned int sessionid = audit_get_sessionid(tsk);
@@ -92,6 +98,7 @@ static void tty_audit_log(const char *description, dev_t dev,
  */
 static void tty_audit_buf_push(struct tty_audit_buf *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (buf->valid == 0)
 		return;
 	if (audit_enabled == 0) {
@@ -117,8 +124,11 @@ void tty_audit_exit(void)
 
 	buf = xchg(&current->signal->tty_audit_buf, ERR_PTR(-ESRCH));
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_audit_buf_push(buf);
 	tty_audit_buf_free(buf);
 }
@@ -142,7 +152,9 @@ void tty_audit_tiocsti(struct tty_struct *tty, char ch)
 
 	dev = MKDEV(tty->driver->major, tty->driver->minor_start) + tty->index;
 	if (tty_audit_push())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (audit_enabled)
 		tty_audit_log("ioctl=TIOCSTI", dev, &ch, 1);
@@ -158,7 +170,9 @@ int tty_audit_push(void)
 	struct tty_audit_buf *buf;
 
 	if (~current->signal->audit_tty & AUDIT_TTY_ENABLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	buf = tty_audit_buf_ref();
 	if (!IS_ERR_OR_NULL(buf)) {
@@ -182,7 +196,9 @@ static struct tty_audit_buf *tty_audit_buf_get(void)
 
 	buf = tty_audit_buf_ref();
 	if (buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return buf;
+}
 
 	buf = tty_audit_buf_alloc();
 	if (buf == NULL) {
@@ -210,25 +226,40 @@ void tty_audit_add_data(struct tty_struct *tty, const void *data, size_t size)
 
 	audit_tty = READ_ONCE(current->signal->audit_tty);
 	if (~audit_tty & AUDIT_TTY_ENABLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(size == 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tty->driver->type == TTY_DRIVER_TYPE_PTY
 	    && tty->driver->subtype == PTY_TYPE_MASTER)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((~audit_tty & AUDIT_TTY_LOG_PASSWD) && icanon && !L_ECHO(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	buf = tty_audit_buf_get();
 	if (IS_ERR_OR_NULL(buf))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&buf->mutex);
 	dev = MKDEV(tty->driver->major, tty->driver->minor_start) + tty->index;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (buf->dev != dev || buf->icanon != icanon) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_audit_buf_push(buf);
 		buf->dev = dev;
 		buf->icanon = icanon;
@@ -238,13 +269,20 @@ void tty_audit_add_data(struct tty_struct *tty, const void *data, size_t size)
 
 		run = N_TTY_BUF_SIZE - buf->valid;
 		if (run > size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			run = size;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(buf->data + buf->valid, data, run);
 		buf->valid += run;
 		data += run;
 		size -= run;
 		if (buf->valid == N_TTY_BUF_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_audit_buf_push(buf);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while (size != 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&buf->mutex);
 }
diff --git a/drivers/tty/tty_baudrate.c b/drivers/tty/tty_baudrate.c
index 5c33fd2..457d144 100644
--- a/drivers/tty/tty_baudrate.c
+++ b/drivers/tty/tty_baudrate.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Copyright (C) 1991, 1992, 1993, 1994  Linus Torvalds
  */
@@ -66,13 +68,17 @@ speed_t tty_termios_baud_rate(struct ktermios *termios)
 #ifdef BOTHER
 	/* Magic token for arbitrary speed via c_ispeed/c_ospeed */
 	if (cbaud == BOTHER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return termios->c_ospeed;
+}
 #endif
 	if (cbaud & CBAUDEX) {
 		cbaud &= ~CBAUDEX;
 
 		if (cbaud < 1 || cbaud + 15 > n_baud_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			termios->c_cflag &= ~CBAUDEX;
+}
 		else
 			cbaud += 15;
 	}
@@ -102,16 +108,24 @@ speed_t tty_termios_input_baud_rate(struct ktermios *termios)
 
 	/* Magic token for arbitrary speed via c_ispeed*/
 	if (cbaud == BOTHER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return termios->c_ispeed;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cbaud & CBAUDEX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cbaud &= ~CBAUDEX;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cbaud < 1 || cbaud + 15 > n_baud_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			termios->c_cflag &= ~(CBAUDEX << IBSHIFT);
+}
 		else
 			cbaud += 15;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return baud_table[cbaud];
 #else
 	return tty_termios_baud_rate(termios);
@@ -150,7 +164,9 @@ void tty_termios_encode_baud_rate(struct ktermios *termios,
 	int ibinput = 0;
 
 	if (obaud == 0)			/* CD dropped 		  */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ibaud = 0;		/* Clear ibaud to be sure */
+}
 
 	termios->c_ispeed = ibaud;
 	termios->c_ospeed = obaud;
@@ -161,11 +177,17 @@ void tty_termios_encode_baud_rate(struct ktermios *termios,
 	   digesting non-exact replies so fuzz a bit */
 
 	if ((termios->c_cflag & CBAUD) == BOTHER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		oclose = 0;
+}
 	if (((termios->c_cflag >> IBSHIFT) & CBAUD) == BOTHER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iclose = 0;
+}
 	if ((termios->c_cflag >> IBSHIFT) & CBAUD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ibinput = 1;	/* An input speed was specified */
+}
 #endif
 	termios->c_cflag &= ~CBAUD;
 
@@ -187,9 +209,12 @@ void tty_termios_encode_baud_rate(struct ktermios *termios,
 			/* For the case input == output don't set IBAUD bits
 			   if the user didn't do so */
 			if (ofound == i && !ibinput)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ifound  = i;
+}
 #ifdef IBSHIFT
 			else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ifound = i;
 				termios->c_cflag |= (baud_bits[i] << IBSHIFT);
 			}
@@ -203,11 +228,15 @@ void tty_termios_encode_baud_rate(struct ktermios *termios,
 	 */
 #ifdef BOTHER
 	if (ofound == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		termios->c_cflag |= BOTHER;
+}
 	/* Set exact input bits only if the input and output differ or the
 	   user already did */
 	if (ifound == -1 && (ibaud != obaud || ibinput))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		termios->c_cflag |= (BOTHER << IBSHIFT);
+}
 #else
 	if (ifound == -1 || ofound == -1)
 		pr_warn_once("tty: Unable to return correct speed data as your architecture needs updating.\n");
@@ -227,6 +256,7 @@ EXPORT_SYMBOL_GPL(tty_termios_encode_baud_rate);
 
 void tty_encode_baud_rate(struct tty_struct *tty, speed_t ibaud, speed_t obaud)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_termios_encode_baud_rate(&tty->termios, ibaud, obaud);
 }
 EXPORT_SYMBOL_GPL(tty_encode_baud_rate);
diff --git a/drivers/tty/tty_buffer.c b/drivers/tty/tty_buffer.c
index 677fa99..97f449a 100644
--- a/drivers/tty/tty_buffer.c
+++ b/drivers/tty/tty_buffer.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Tty buffer allocation management
  */
@@ -71,8 +73,10 @@ void tty_buffer_unlock_exclusive(struct tty_port *port)
 	atomic_dec(&buf->priority);
 	mutex_unlock(&buf->lock);
 	if (restart)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		queue_work(system_unbound_wq, &buf->work);
 }
+}
 EXPORT_SYMBOL_GPL(tty_buffer_unlock_exclusive);
 
 /**
@@ -157,6 +161,7 @@ static struct tty_buffer *tty_buffer_alloc(struct tty_port *port, size_t size)
 	if (size <= MIN_TTYB_SIZE) {
 		free = llist_del_first(&port->buf.free);
 		if (free) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p = llist_entry(free, struct tty_buffer, free);
 			goto found;
 		}
@@ -165,10 +170,14 @@ static struct tty_buffer *tty_buffer_alloc(struct tty_port *port, size_t size)
 	/* Should possibly check if this fails for the largest buffer we
 	   have queued and recycle that ? */
 	if (atomic_read(&port->buf.mem_used) > port->buf.mem_limit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	p = kmalloc(sizeof(struct tty_buffer) + 2 * size, GFP_ATOMIC);
 	if (p == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 found:
 	tty_buffer_reset(p, size);
@@ -223,6 +232,7 @@ void tty_buffer_flush(struct tty_struct *tty, struct tty_ldisc *ld)
 	 * no pending memory accesses to the freed buffer
 	 */
 	while ((next = smp_load_acquire(&buf->head->next)) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_buffer_free(port, buf->head);
 		buf->head = next;
 	}
@@ -231,6 +241,7 @@ void tty_buffer_flush(struct tty_struct *tty, struct tty_ldisc *ld)
 	if (ld && ld->ops->flush_buffer)
 		ld->ops->flush_buffer(tty);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_dec(&buf->priority);
 	mutex_unlock(&buf->lock);
 }
@@ -278,7 +289,9 @@ static int __tty_buffer_request_room(struct tty_port *port, size_t size,
 			 */
 			smp_store_release(&b->next, n);
 		} else if (change)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			size = 0;
+}
 		else
 			size = left;
 	}
@@ -287,6 +300,7 @@ static int __tty_buffer_request_room(struct tty_port *port, size_t size,
 
 int tty_buffer_request_room(struct tty_port *port, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __tty_buffer_request_room(port, size, 0);
 }
 EXPORT_SYMBOL_GPL(tty_buffer_request_room);
@@ -315,7 +329,9 @@ int tty_insert_flip_string_fixed_flag(struct tty_port *port,
 			break;
 		memcpy(char_buf_ptr(tb, tb->used), chars, space);
 		if (~tb->flags & TTYB_NORMAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memset(flag_buf_ptr(tb, tb->used), flag, space);
+}
 		tb->used += space;
 		copied += space;
 		chars += space;
@@ -343,6 +359,7 @@ int tty_insert_flip_string_flags(struct tty_port *port,
 {
 	int copied = 0;
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int goal = min_t(size_t, size - copied, TTY_BUFFER_PAGE);
 		int space = tty_buffer_request_room(port, goal);
 		struct tty_buffer *tb = port->buf.tail;
@@ -376,11 +393,15 @@ int __tty_insert_flip_char(struct tty_port *port, unsigned char ch, char flag)
 	int flags = (flag == TTY_NORMAL) ? TTYB_NORMAL : 0;
 
 	if (!__tty_buffer_request_room(port, 1, flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	tb = port->buf.tail;
 	if (~tb->flags & TTYB_NORMAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*flag_buf_ptr(tb, tb->used) = flag;
+}
 	*char_buf_ptr(tb, tb->used++) = ch;
 
 	return 1;
@@ -424,6 +445,7 @@ EXPORT_SYMBOL(tty_schedule_flip);
 int tty_prepare_flip_string(struct tty_port *port, unsigned char **chars,
 		size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int space = __tty_buffer_request_room(port, size, TTYB_NORMAL);
 	if (likely(space)) {
 		struct tty_buffer *tb = port->buf.tail;
@@ -454,9 +476,13 @@ int tty_ldisc_receive_buf(struct tty_ldisc *ld, const unsigned char *p,
 	if (ld->ops->receive_buf2)
 		count = ld->ops->receive_buf2(ld->tty, p, f, count);
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = min_t(int, count, ld->tty->receive_room);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (count && ld->ops->receive_buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ld->ops->receive_buf(ld->tty, p, f, count);
+}
 	}
 	return count;
 }
@@ -469,7 +495,9 @@ receive_buf(struct tty_port *port, struct tty_buffer *head, int count)
 	char	      *f = NULL;
 
 	if (~head->flags & TTYB_NORMAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		f = flag_buf_ptr(head, head->read);
+}
 
 	return port->client_ops->receive_buf(port, p, f, count);
 }
@@ -494,6 +522,7 @@ static void flush_to_ldisc(struct work_struct *work)
 
 	mutex_lock(&buf->lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		struct tty_buffer *head = buf->head;
 		struct tty_buffer *next;
@@ -581,7 +610,9 @@ void tty_buffer_init(struct tty_port *port)
 int tty_buffer_set_limit(struct tty_port *port, int limit)
 {
 	if (limit < MIN_TTYB_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	port->buf.mem_limit = limit;
 	return 0;
 }
@@ -590,11 +621,13 @@ EXPORT_SYMBOL_GPL(tty_buffer_set_limit);
 /* slave ptys can claim nested buffer lock when handling BRK and INTR */
 void tty_buffer_set_lock_subclass(struct tty_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_subclass(&port->buf.lock, TTY_LOCK_SLAVE);
 }
 
 bool tty_buffer_restart_work(struct tty_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return queue_work(system_unbound_wq, &port->buf.work);
 }
 
diff --git a/drivers/tty/tty_io.c b/drivers/tty/tty_io.c
index 7892d0b..8f8753b 100644
--- a/drivers/tty/tty_io.c
+++ b/drivers/tty/tty_io.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Copyright (C) 1991, 1992  Linus Torvalds
  */
@@ -185,7 +187,9 @@ int tty_alloc_file(struct file *file)
 
 	priv = kmalloc(sizeof(*priv), GFP_KERNEL);
 	if (!priv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	file->private_data = priv;
 
@@ -243,6 +247,7 @@ static void tty_del_file(struct file *file)
 
 const char *tty_name(const struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tty) /* Hmm.  NULL pointer.  That's fun. */
 		return "NULL tty";
 	return tty->name;
@@ -252,6 +257,7 @@ EXPORT_SYMBOL(tty_name);
 
 const char *tty_driver_name(const struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tty || !tty->driver)
 		return "";
 	return tty->driver->name;
@@ -262,11 +268,13 @@ static int tty_paranoia_check(struct tty_struct *tty, struct inode *inode,
 {
 #ifdef TTY_PARANOIA_CHECK
 	if (!tty) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("(%d:%d): %s: NULL tty\n",
 			imajor(inode), iminor(inode), routine);
 		return 1;
 	}
 	if (tty->magic != TTY_MAGIC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("(%d:%d): %s: bad magic number\n",
 			imajor(inode), iminor(inode), routine);
 		return 1;
@@ -286,14 +294,18 @@ static int check_tty_count(struct tty_struct *tty, const char *routine)
 	list_for_each(p, &tty->tty_files) {
 		count++;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&tty->files_lock);
 	if (tty->driver->type == TTY_DRIVER_TYPE_PTY &&
 	    tty->driver->subtype == PTY_TYPE_SLAVE &&
 	    tty->link && tty->link->count)
 		count++;
 	if (tty_port_kopened(tty->port))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kopen_count++;
+}
 	if (tty->count != (count + kopen_count)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_warn(tty, "%s: tty->count(%d) != (#fd's(%d) + #kopen's(%d))\n",
 			 routine, tty->count, count, kopen_count);
 		return (count + kopen_count);
@@ -324,6 +336,7 @@ static struct tty_driver *get_tty_driver(dev_t device, int *index)
 		*index = device - base;
 		return tty_driver_kref_get(p);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -347,6 +360,7 @@ int tty_dev_name_to_number(const char *name, dev_t *number)
 	int index, prefix_length = 0;
 	const char *str;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (str = name; *str && !isdigit(*str); str++)
 		;
 
@@ -432,40 +446,47 @@ EXPORT_SYMBOL_GPL(tty_find_polling_driver);
 static ssize_t hung_up_tty_read(struct file *file, char __user *buf,
 				size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static ssize_t hung_up_tty_write(struct file *file, const char __user *buf,
 				 size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 /* No kernel lock held - none needed ;) */
 static unsigned int hung_up_tty_poll(struct file *filp, poll_table *wait)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return POLLIN | POLLOUT | POLLERR | POLLHUP | POLLRDNORM | POLLWRNORM;
 }
 
 static long hung_up_tty_ioctl(struct file *file, unsigned int cmd,
 		unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cmd == TIOCSPGRP ? -ENOTTY : -EIO;
 }
 
 static long hung_up_tty_compat_ioctl(struct file *file,
 				     unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cmd == TIOCSPGRP ? -ENOTTY : -EIO;
 }
 
 static int hung_up_tty_fasync(int fd, struct file *file, int on)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOTTY;
 }
 
 static void tty_show_fdinfo(struct seq_file *m, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_struct *tty = file_tty(file);
 
 	if (tty && tty->ops && tty->ops->show_fdinfo)
@@ -525,10 +546,15 @@ void tty_wakeup(struct tty_struct *tty)
 	struct tty_ldisc *ld;
 
 	if (test_bit(TTY_DO_WRITE_WAKEUP, &tty->flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ld = tty_ldisc_ref(tty);
 		if (ld) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ld->ops->write_wakeup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ld->ops->write_wakeup(tty);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_ldisc_deref(ld);
 		}
 	}
@@ -568,19 +594,25 @@ static void __tty_hangup(struct tty_struct *tty, int exit_session)
 	int refs;
 
 	if (!tty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&redirect_lock);
 	if (redirect && file_tty(redirect) == tty) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		f = redirect;
 		redirect = NULL;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&redirect_lock);
 
 	tty_lock(tty);
 
 	if (test_bit(TTY_HUPPED, &tty->flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_unlock(tty);
 		return;
 	}
@@ -595,13 +627,16 @@ static void __tty_hangup(struct tty_struct *tty, int exit_session)
 	list_for_each_entry(priv, &tty->tty_files, list) {
 		filp = priv->file;
 		if (filp->f_op->write == redirected_tty_write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cons_filp = filp;
+}
 		if (filp->f_op->write != tty_write)
 			continue;
 		closecount++;
 		__tty_fasync(-1, filp, 0);	/* can't block */
 		filp->f_op = &hung_up_tty_fops;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&tty->files_lock);
 
 	refs = tty_signal_session_leader(tty, exit_session);
@@ -628,11 +663,18 @@ static void __tty_hangup(struct tty_struct *tty, int exit_session)
 	 * So we just call close() the right number of times.
 	 */
 	if (cons_filp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tty->ops->close)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			for (n = 0; n < closecount; n++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tty->ops->close(tty, cons_filp);
+}
+}
 	} else if (tty->ops->hangup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty->ops->hangup(tty);
+}
 	/*
 	 * We don't want to have driver/ldisc interactions beyond the ones
 	 * we did here. The driver layer expects no calls after ->hangup()
@@ -642,8 +684,10 @@ static void __tty_hangup(struct tty_struct *tty, int exit_session)
 	tty_unlock(tty);
 
 	if (f)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fput(f);
 }
+}
 
 static void do_tty_hangup(struct work_struct *work)
 {
@@ -663,6 +707,7 @@ static void do_tty_hangup(struct work_struct *work)
 
 void tty_hangup(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_debug_hangup(tty, "hangup\n");
 	schedule_work(&tty->hangup_work);
 }
@@ -680,6 +725,7 @@ EXPORT_SYMBOL(tty_hangup);
 
 void tty_vhangup(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_debug_hangup(tty, "vhangup\n");
 	__tty_hangup(tty, 0);
 }
@@ -699,6 +745,7 @@ void tty_vhangup_self(void)
 
 	tty = get_current_tty();
 	if (tty) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_vhangup(tty);
 		tty_kref_put(tty);
 	}
@@ -717,6 +764,7 @@ void tty_vhangup_self(void)
 
 void tty_vhangup_session(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_debug_hangup(tty, "session hangup\n");
 	__tty_hangup(tty, 1);
 }
@@ -755,6 +803,7 @@ EXPORT_SYMBOL(tty_hung_up_p);
 
 void __stop_tty(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tty->stopped)
 		return;
 	tty->stopped = 1;
@@ -766,6 +815,7 @@ void stop_tty(struct tty_struct *tty)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&tty->flow_lock, flags);
 	__stop_tty(tty);
 	spin_unlock_irqrestore(&tty->flow_lock, flags);
@@ -787,10 +837,16 @@ EXPORT_SYMBOL(stop_tty);
 void __start_tty(struct tty_struct *tty)
 {
 	if (!tty->stopped || tty->flow_stopped)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty->stopped = 0;
 	if (tty->ops->start)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty->ops->start(tty);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_wakeup(tty);
 }
 
@@ -842,15 +898,21 @@ static ssize_t tty_read(struct file *file, char __user *buf, size_t count,
 	struct tty_ldisc *ld;
 
 	if (tty_paranoia_check(tty, inode, "tty_read"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 	if (!tty || tty_io_error(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	/* We want to wait for the line discipline to sort out in this
 	   situation */
 	ld = tty_ldisc_ref_wait(tty);
 	if (!ld)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return hung_up_tty_read(file, buf, count, ppos);
+}
 	if (ld->ops->read)
 		i = ld->ops->read(tty, file, buf, count);
 	else
@@ -873,10 +935,15 @@ static int tty_write_lock(struct tty_struct *tty, int ndelay)
 {
 	if (!mutex_trylock(&tty->atomic_write_lock)) {
 		if (ndelay)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EAGAIN;
+}
 		if (mutex_lock_interruptible(&tty->atomic_write_lock))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ERESTARTSYS;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -896,7 +963,9 @@ static inline ssize_t do_tty_write(
 
 	ret = tty_write_lock(tty, file->f_flags & O_NDELAY);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	/*
 	 * We chunk up writes into a temporary buffer. This
@@ -916,7 +985,9 @@ static inline ssize_t do_tty_write(
 	 */
 	chunk = 2048;
 	if (test_bit(TTY_NO_WRITE_SPLIT, &tty->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		chunk = 65536;
+}
 	if (count < chunk)
 		chunk = count;
 
@@ -925,10 +996,13 @@ static inline ssize_t do_tty_write(
 		unsigned char *buf_chunk;
 
 		if (chunk < 1024)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			chunk = 1024;
+}
 
 		buf_chunk = kmalloc(chunk, GFP_KERNEL);
 		if (!buf_chunk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ENOMEM;
 			goto out;
 		}
@@ -941,7 +1015,10 @@ static inline ssize_t do_tty_write(
 	for (;;) {
 		size_t size = count;
 		if (size > chunk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			size = chunk;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EFAULT;
 		if (copy_from_user(tty->write_buf, buf, size))
 			break;
@@ -953,9 +1030,11 @@ static inline ssize_t do_tty_write(
 		count -= ret;
 		if (!count)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ERESTARTSYS;
 		if (signal_pending(current))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cond_resched();
 	}
 	if (written) {
@@ -981,6 +1060,7 @@ static inline ssize_t do_tty_write(
 
 void tty_write_message(struct tty_struct *tty, char *msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tty) {
 		mutex_lock(&tty->atomic_write_lock);
 		tty_lock(tty);
@@ -1012,22 +1092,33 @@ void tty_write_message(struct tty_struct *tty, char *msg)
 static ssize_t tty_write(struct file *file, const char __user *buf,
 						size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_struct *tty = file_tty(file);
  	struct tty_ldisc *ld;
 	ssize_t ret;
 
 	if (tty_paranoia_check(tty, file_inode(file), "tty_write"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 	if (!tty || !tty->ops->write ||	tty_io_error(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EIO;
+}
 	/* Short term debug to catch buggy drivers */
 	if (tty->ops->write_room == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_err(tty, "missing write_room method\n");
+}
 	ld = tty_ldisc_ref_wait(tty);
 	if (!ld)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return hung_up_tty_write(file, buf, count, ppos);
+}
 	if (!ld->ops->write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EIO;
+}
 	else
 		ret = do_tty_write(ld->ops->write, tty, file, buf, count);
 	tty_ldisc_deref(ld);
@@ -1041,7 +1132,10 @@ ssize_t redirected_tty_write(struct file *file, const char __user *buf,
 
 	spin_lock(&redirect_lock);
 	if (redirect)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = get_file(redirect);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&redirect_lock);
 
 	if (p) {
@@ -1066,6 +1160,7 @@ int tty_send_xchar(struct tty_struct *tty, char ch)
 	int	was_stopped = tty->stopped;
 
 	if (tty->ops->send_xchar) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		down_read(&tty->termios_rwsem);
 		tty->ops->send_xchar(tty, ch);
 		up_read(&tty->termios_rwsem);
@@ -1122,7 +1217,9 @@ static void pty_line_name(struct tty_driver *driver, int index, char *p)
 static ssize_t tty_line_name(struct tty_driver *driver, int index, char *p)
 {
 	if (driver->flags & TTY_DRIVER_UNNUMBERED_NODE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sprintf(p, "%s", driver->name);
+}
 	else
 		return sprintf(p, "%s%d", driver->name,
 			       index + driver->name_base);
@@ -1145,7 +1242,9 @@ static struct tty_struct *tty_driver_lookup_tty(struct tty_driver *driver,
 
 	if (driver->ops->lookup)
 		if (!file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty = ERR_PTR(-EIO);
+}
 		else
 			tty = driver->ops->lookup(driver, file, idx);
 	else
@@ -1251,16 +1350,23 @@ static int tty_reopen(struct tty_struct *tty)
 		return -EIO;
 
 	if (!tty->count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAGAIN;
+}
 
 	if (test_bit(TTY_EXCLUSIVE, &tty->flags) && !capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	tty->count++;
 
 	if (!tty->ldisc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return tty_ldisc_reinit(tty, tty->termios.c_line);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1302,10 +1408,13 @@ struct tty_struct *tty_init_dev(struct tty_driver *driver, int idx)
 	 */
 
 	if (!try_module_get(driver->owner))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENODEV);
+}
 
 	tty = alloc_tty_struct(driver, idx);
 	if (!tty) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENOMEM;
 		goto err_module_put;
 	}
@@ -1349,6 +1458,7 @@ struct tty_struct *tty_init_dev(struct tty_driver *driver, int idx)
 	/* call the tty release_tty routine to clean out this slot */
 err_release_tty:
 	tty_ldisc_unlock(tty);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_info_ratelimited(tty, "ldisc open failed (%d), clearing slot %d\n",
 			     retval, idx);
 err_release_lock:
@@ -1364,14 +1474,19 @@ static void tty_free_termios(struct tty_struct *tty)
 
 	/* If the port is going to reset then it has no termios to save */
 	if (tty->driver->flags & TTY_DRIVER_RESET_TERMIOS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Stash the termios data */
 	tp = tty->driver->termios[idx];
 	if (tp == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp = kmalloc(sizeof(struct ktermios), GFP_KERNEL);
 		if (tp == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 		tty->driver->termios[idx] = tp;
 	}
 	*tp = tty->termios;
@@ -1433,6 +1548,7 @@ static void release_one_tty(struct work_struct *work)
 
 static void queue_release_one_tty(struct kref *kref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_struct *tty = container_of(kref, struct tty_struct, kref);
 
 	/* The hangup queue is now free so we can reuse it rather than
@@ -1474,7 +1590,9 @@ static void release_tty(struct tty_struct *tty, int idx)
 	WARN_ON(tty->index != idx);
 	WARN_ON(!mutex_is_locked(&tty_mutex));
 	if (tty->ops->shutdown)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty->ops->shutdown(tty);
+}
 	tty_free_termios(tty);
 	tty_driver_remove_tty(tty->driver, tty);
 	tty->port->itty = NULL;
@@ -1499,15 +1617,19 @@ static int tty_release_checks(struct tty_struct *tty, int idx)
 {
 #ifdef TTY_PARANOIA_CHECK
 	if (idx < 0 || idx >= tty->driver->num) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_debug(tty, "bad idx %d\n", idx);
 		return -1;
 	}
 
 	/* not much to check for devpts */
 	if (tty->driver->flags & TTY_DRIVER_DEVPTS_MEM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (tty != tty->driver->ttys[idx]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_debug(tty, "bad driver table[%d] = %p\n",
 			  idx, tty->driver->ttys[idx]);
 		return -1;
@@ -1516,11 +1638,14 @@ static int tty_release_checks(struct tty_struct *tty, int idx)
 		struct tty_struct *o_tty = tty->link;
 
 		if (o_tty != tty->driver->other->ttys[idx]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_debug(tty, "bad other table[%d] = %p\n",
 				  idx, tty->driver->other->ttys[idx]);
 			return -1;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (o_tty->link != tty) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_debug(tty, "bad link = %p\n", o_tty->link);
 			return -1;
 		}
@@ -1579,6 +1704,7 @@ void tty_release_struct(struct tty_struct *tty, int idx)
 	/* Wait for pending work before tty destruction commmences */
 	tty_flush_works(tty);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_debug_hangup(tty, "freeing structure\n");
 	/*
 	 * The release_tty function takes care of the details of clearing
@@ -1613,6 +1739,7 @@ EXPORT_SYMBOL_GPL(tty_release_struct);
 
 int tty_release(struct inode *inode, struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_struct *tty = file_tty(filp);
 	struct tty_struct *o_tty = NULL;
 	int	do_sleep, final;
@@ -1621,7 +1748,9 @@ int tty_release(struct inode *inode, struct file *filp)
 	int	once = 1;
 
 	if (tty_paranoia_check(tty, inode, __func__))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	tty_lock(tty);
 	check_tty_count(tty, __func__);
@@ -1634,10 +1763,12 @@ int tty_release(struct inode *inode, struct file *filp)
 		o_tty = tty->link;
 
 	if (tty_release_checks(tty, idx)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_unlock(tty);
 		return 0;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_debug_hangup(tty, "releasing (count=%d)\n", tty->count);
 
 	if (tty->ops->close)
@@ -1660,24 +1791,29 @@ int tty_release(struct inode *inode, struct file *filp)
 	 * so we do it now.
 	 */
 	while (1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		do_sleep = 0;
 
 		if (tty->count <= 1) {
 			if (waitqueue_active(&tty->read_wait)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				wake_up_poll(&tty->read_wait, POLLIN);
 				do_sleep++;
 			}
 			if (waitqueue_active(&tty->write_wait)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				wake_up_poll(&tty->write_wait, POLLOUT);
 				do_sleep++;
 			}
 		}
 		if (o_tty && o_tty->count <= 1) {
 			if (waitqueue_active(&o_tty->read_wait)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				wake_up_poll(&o_tty->read_wait, POLLIN);
 				do_sleep++;
 			}
 			if (waitqueue_active(&o_tty->write_wait)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				wake_up_poll(&o_tty->write_wait, POLLOUT);
 				do_sleep++;
 			}
@@ -1685,24 +1821,31 @@ int tty_release(struct inode *inode, struct file *filp)
 		if (!do_sleep)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (once) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			once = 0;
 			tty_warn(tty, "read/write wait queue active!\n");
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		schedule_timeout_killable(timeout);
 		if (timeout < 120 * HZ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			timeout = 2 * timeout + 1;
+}
 		else
 			timeout = MAX_SCHEDULE_TIMEOUT;
 	}
 
 	if (o_tty) {
 		if (--o_tty->count < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_warn(tty, "bad slave count (%d)\n", o_tty->count);
 			o_tty->count = 0;
 		}
 	}
 	if (--tty->count < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_warn(tty, "bad tty->count (%d)\n", tty->count);
 		tty->count = 0;
 	}
@@ -1730,6 +1873,7 @@ int tty_release(struct inode *inode, struct file *filp)
 		session_clear_tty(tty->session);
 		if (o_tty)
 			session_clear_tty(o_tty->session);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_unlock(&tasklist_lock);
 	}
 
@@ -1743,8 +1887,11 @@ int tty_release(struct inode *inode, struct file *filp)
 	   cannot be re-opened by a racing opener */
 
 	if (!final)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_debug_hangup(tty, "final close\n");
 
 	tty_release_struct(tty, idx);
@@ -1768,11 +1915,15 @@ static struct tty_struct *tty_open_current_tty(dev_t device, struct file *filp)
 	int retval;
 
 	if (device != MKDEV(TTYAUX_MAJOR, 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	tty = get_current_tty();
 	if (!tty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENXIO);
+}
 
 	filp->f_flags |= O_NONBLOCK; /* Don't let /dev/tty block */
 	/* noctty = 1; */
@@ -1781,9 +1932,11 @@ static struct tty_struct *tty_open_current_tty(dev_t device, struct file *filp)
 
 	retval = tty_reopen(tty);
 	if (retval < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_unlock(tty);
 		tty = ERR_PTR(retval);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return tty;
 }
 
@@ -1816,6 +1969,7 @@ static struct tty_driver *tty_lookup_driver(dev_t device, struct file *filp,
 	case MKDEV(TTYAUX_MAJOR, 1): {
 		struct tty_driver *console_driver = console_device(index);
 		if (console_driver) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			driver = tty_driver_kref_get(console_driver);
 			if (driver && filp) {
 				/* Don't let /dev/console block */
@@ -1823,14 +1977,18 @@ static struct tty_driver *tty_lookup_driver(dev_t device, struct file *filp,
 				break;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENODEV);
 	}
 	default:
 		driver = get_tty_driver(device, index);
 		if (!driver)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-ENODEV);
+}
 		break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return driver;
 }
 
@@ -1858,6 +2016,7 @@ struct tty_struct *tty_kopen(dev_t device)
 	mutex_lock(&tty_mutex);
 	driver = tty_lookup_driver(device, NULL, &index);
 	if (IS_ERR(driver)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&tty_mutex);
 		return ERR_CAST(driver);
 	}
@@ -1911,6 +2070,7 @@ static struct tty_struct *tty_open_by_driver(dev_t device, struct inode *inode,
 	mutex_lock(&tty_mutex);
 	driver = tty_lookup_driver(device, filp, &index);
 	if (IS_ERR(driver)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&tty_mutex);
 		return ERR_CAST(driver);
 	}
@@ -1918,12 +2078,14 @@ static struct tty_struct *tty_open_by_driver(dev_t device, struct inode *inode,
 	/* check whether we're reopening an existing tty */
 	tty = tty_driver_lookup_tty(driver, filp, index);
 	if (IS_ERR(tty)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&tty_mutex);
 		goto out;
 	}
 
 	if (tty) {
 		if (tty_port_kopened(tty->port)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_kref_put(tty);
 			mutex_unlock(&tty_mutex);
 			tty = ERR_PTR(-EBUSY);
@@ -1933,13 +2095,18 @@ static struct tty_struct *tty_open_by_driver(dev_t device, struct inode *inode,
 		retval = tty_lock_interruptible(tty);
 		tty_kref_put(tty);  /* drop kref from tty_driver_lookup_tty() */
 		if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (retval == -EINTR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = -ERESTARTSYS;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty = ERR_PTR(retval);
 			goto out;
 		}
 		retval = tty_reopen(tty);
 		if (retval < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_unlock(tty);
 			tty = ERR_PTR(retval);
 		}
@@ -1988,7 +2155,9 @@ static int tty_open(struct inode *inode, struct file *filp)
 retry_open:
 	retval = tty_alloc_file(filp);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	tty = tty_open_current_tty(device, filp);
 	if (!tty)
@@ -1998,7 +2167,10 @@ static int tty_open(struct inode *inode, struct file *filp)
 		tty_free_file(filp);
 		retval = PTR_ERR(tty);
 		if (retval != -EAGAIN || signal_pending(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		schedule();
 		goto retry_open;
 	}
@@ -2006,6 +2178,7 @@ static int tty_open(struct inode *inode, struct file *filp)
 	tty_add_file(tty, filp);
 
 	check_tty_count(tty, __func__);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_debug_hangup(tty, "opening (count=%d)\n", tty->count);
 
 	if (tty->ops->open)
@@ -2015,24 +2188,35 @@ static int tty_open(struct inode *inode, struct file *filp)
 	filp->f_flags = saved_flags;
 
 	if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_debug_hangup(tty, "open error %d, releasing\n", retval);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_unlock(tty); /* need to call tty_release without BTM */
 		tty_release(inode, filp);
 		if (retval != -ERESTARTSYS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (signal_pending(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		schedule();
 		/*
 		 * Need to reset f_op in case a hangup happened.
 		 */
 		if (tty_hung_up_p(filp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			filp->f_op = &tty_fops;
+}
 		goto retry_open;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clear_bit(TTY_HUPPED, &tty->flags);
 
 	noctty = (filp->f_flags & O_NOCTTY) ||
@@ -2062,16 +2246,21 @@ static int tty_open(struct inode *inode, struct file *filp)
 
 static unsigned int tty_poll(struct file *filp, poll_table *wait)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_struct *tty = file_tty(filp);
 	struct tty_ldisc *ld;
 	int ret = 0;
 
 	if (tty_paranoia_check(tty, file_inode(filp), "tty_poll"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ld = tty_ldisc_ref_wait(tty);
 	if (!ld)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return hung_up_tty_poll(filp, wait);
+}
 	if (ld->ops->poll)
 		ret = ld->ops->poll(tty, filp, wait);
 	tty_ldisc_deref(ld);
@@ -2080,6 +2269,7 @@ static unsigned int tty_poll(struct file *filp, poll_table *wait)
 
 static int __tty_fasync(int fd, struct file *filp, int on)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_struct *tty = file_tty(filp);
 	unsigned long flags;
 	int retval = 0;
@@ -2091,18 +2281,24 @@ static int __tty_fasync(int fd, struct file *filp, int on)
 	if (retval <= 0)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (on) {
 		enum pid_type type;
 		struct pid *pid;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irqsave(&tty->ctrl_lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tty->pgrp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pid = tty->pgrp;
 			type = PIDTYPE_PGID;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pid = task_pid(current);
 			type = PIDTYPE_PID;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		get_pid(pid);
 		spin_unlock_irqrestore(&tty->ctrl_lock, flags);
 		__f_setown(filp, pid, type, 0);
@@ -2115,6 +2311,7 @@ static int __tty_fasync(int fd, struct file *filp, int on)
 
 static int tty_fasync(int fd, struct file *filp, int on)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_struct *tty = file_tty(filp);
 	int retval = -ENOTTY;
 
@@ -2148,6 +2345,7 @@ static int tiocsti(struct tty_struct *tty, char __user *p)
 	char ch, mbz = 0;
 	struct tty_ldisc *ld;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((current->signal->tty != tty) && !capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	if (get_user(ch, p))
@@ -2234,10 +2432,14 @@ static int tiocswinsz(struct tty_struct *tty, struct winsize __user *arg)
 {
 	struct winsize tmp_ws;
 	if (copy_from_user(&tmp_ws, arg, sizeof(*arg)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	if (tty->ops->resize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return tty->ops->resize(tty, &tmp_ws);
+}
 	else
 		return tty_do_resize(tty, &tmp_ws);
 }
@@ -2253,6 +2455,7 @@ static int tiocswinsz(struct tty_struct *tty, struct winsize __user *arg)
 
 static int tioccons(struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	if (file->f_op->write == redirected_tty_write) {
@@ -2292,7 +2495,9 @@ static int fionbio(struct file *file, int __user *p)
 	int nonblock;
 
 	if (get_user(nonblock, p))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	spin_lock(&file->f_lock);
 	if (nonblock)
@@ -2319,7 +2524,9 @@ static int tiocsetd(struct tty_struct *tty, int __user *p)
 	int ret;
 
 	if (get_user(disc, p))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	ret = tty_set_ldisc(tty, disc);
 
@@ -2344,7 +2551,9 @@ static int tiocgetd(struct tty_struct *tty, int __user *p)
 
 	ld = tty_ldisc_ref_wait(tty);
 	if (!ld)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 	ret = put_user(ld->ops->num, p);
 	tty_ldisc_deref(ld);
 	return ret;
@@ -2368,7 +2577,9 @@ static int send_break(struct tty_struct *tty, unsigned int duration)
 	int retval;
 
 	if (tty->ops->break_ctl == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (tty->driver->flags & TTY_DRIVER_HARDWARE_BREAK)
 		retval = tty->ops->break_ctl(tty, duration);
@@ -2407,6 +2618,7 @@ static int tty_tiocmget(struct tty_struct *tty, int __user *p)
 	int retval = -EINVAL;
 
 	if (tty->ops->tiocmget) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = tty->ops->tiocmget(tty);
 
 		if (retval >= 0)
@@ -2434,7 +2646,9 @@ static int tty_tiocmset(struct tty_struct *tty, unsigned int cmd,
 	unsigned int set, clear, val;
 
 	if (tty->ops->tiocmset == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	retval = get_user(val, p);
 	if (retval)
@@ -2463,7 +2677,9 @@ static int tty_tiocgicount(struct tty_struct *tty, void __user *arg)
 	struct serial_icounter_struct icount;
 	memset(&icount, 0, sizeof(icount));
 	if (tty->ops->get_icount)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = tty->ops->get_icount(tty, &icount);
+}
 	if (retval != 0)
 		return retval;
 	if (copy_to_user(arg, &icount, sizeof(icount)))
@@ -2480,7 +2696,9 @@ static void tty_warn_deprecated_flags(struct serial_struct __user *ss)
 	int flags;
 
 	if (get_user(flags, &ss->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	flags &= ASYNC_DEPRECATED;
 
@@ -2506,6 +2724,7 @@ static struct tty_struct *tty_pair_get_tty(struct tty_struct *tty)
  */
 long tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_struct *tty = file_tty(file);
 	struct tty_struct *real_tty;
 	void __user *p = (void __user *)arg;
@@ -2513,7 +2732,9 @@ long tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	struct tty_ldisc *ld;
 
 	if (tty_paranoia_check(tty, file_inode(file), "tty_ioctl"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	real_tty = tty_pair_get_tty(tty);
 
@@ -2528,11 +2749,17 @@ long tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case TCSBRKP:
 		retval = tty_check_change(tty);
 		if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cmd != TIOCCBRK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_wait_until_sent(tty, 0);
 			if (signal_pending(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINTR;
+}
 		}
 		break;
 	}
@@ -2559,7 +2786,9 @@ long tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		return 0;
 	case TIOCGEXCL:
 	{
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int excl = test_bit(TTY_EXCLUSIVE, &tty->flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return put_user(excl, (int __user *)p);
 	}
 	case TIOCGETD:
@@ -2568,12 +2797,17 @@ long tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		return tiocsetd(tty, p);
 	case TIOCVHANGUP:
 		if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_vhangup(tty);
 		return 0;
 	case TIOCGDEV:
 	{
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unsigned int ret = new_encode_dev(tty_devnum(real_tty));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return put_user(ret, (unsigned int __user *)p);
 	}
 	/*
@@ -2581,11 +2815,17 @@ long tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	 */
 	case TIOCSBRK:	/* Turn break on, unconditionally */
 		if (tty->ops->break_ctl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return tty->ops->break_ctl(tty, -1);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	case TIOCCBRK:	/* Turn break off, unconditionally */
 		if (tty->ops->break_ctl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return tty->ops->break_ctl(tty, 0);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	case TCSBRK:   /* SVID version: non-zero arg --> no break */
 		/* non-zero arg means wait for all output data
@@ -2593,7 +2833,10 @@ long tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		 * This is used by the tcdrain() termios function.
 		 */
 		if (!arg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return send_break(tty, 250);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	case TCSBRKP:	/* support for POSIX tcsendbreak() */
 		return send_break(tty, arg ? arg*100 : 250);
@@ -2608,7 +2851,9 @@ long tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		retval = tty_tiocgicount(tty, p);
 		/* For the moment allow fall through to the old method */
         	if (retval != -EINVAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
 		break;
 	case TCFLSH:
 		switch (arg) {
@@ -2637,12 +2882,17 @@ long tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	}
 	ld = tty_ldisc_ref_wait(tty);
 	if (!ld)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return hung_up_tty_ioctl(file, cmd, arg);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = -EINVAL;
 	if (ld->ops->ioctl) {
 		retval = ld->ops->ioctl(tty, file, cmd, arg);
 		if (retval == -ENOIOCTLCMD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -ENOTTY;
+}
 	}
 	tty_ldisc_deref(ld);
 	return retval;
@@ -2652,6 +2902,7 @@ long tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 static long tty_compat_ioctl(struct file *file, unsigned int cmd,
 				unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_struct *tty = file_tty(file);
 	struct tty_ldisc *ld;
 	int retval = -ENOIOCTLCMD;
@@ -2680,6 +2931,7 @@ static long tty_compat_ioctl(struct file *file, unsigned int cmd,
 
 static int this_tty(const void *t, struct file *file, unsigned fd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (likely(file->f_op->read != tty_read))
 		return 0;
 	return file_tty(file) != t ? 0 : fd + 1;
@@ -2714,7 +2966,9 @@ void __do_SAK(struct tty_struct *tty)
 	int		i;
 
 	if (!tty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	session = tty->session;
 
 	tty_ldisc_flush(tty);
@@ -2765,6 +3019,7 @@ static void do_SAK_work(struct work_struct *work)
  */
 void do_SAK(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tty)
 		return;
 	schedule_work(&tty->SAK_work);
@@ -2800,8 +3055,11 @@ struct tty_struct *alloc_tty_struct(struct tty_driver *driver, int idx)
 
 	tty = kzalloc(sizeof(*tty), GFP_KERNEL);
 	if (!tty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kref_init(&tty->kref);
 	tty->magic = TTY_MAGIC;
 	tty_ldisc_init(tty);
@@ -2845,6 +3103,7 @@ struct tty_struct *alloc_tty_struct(struct tty_driver *driver, int idx)
 
 int tty_put_char(struct tty_struct *tty, unsigned char ch)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tty->ops->put_char)
 		return tty->ops->put_char(tty, ch);
 	return tty->ops->write(tty, &ch, 1);
@@ -2861,12 +3120,17 @@ static int tty_cdev_add(struct tty_driver *driver, dev_t dev,
 	/* init here, since reused cdevs cause crashes */
 	driver->cdevs[index] = cdev_alloc();
 	if (!driver->cdevs[index])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	driver->cdevs[index]->ops = &tty_fops;
 	driver->cdevs[index]->owner = driver->owner;
 	err = cdev_add(driver->cdevs[index], dev, count);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kobject_put(&driver->cdevs[index]->kobj);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -2898,6 +3162,7 @@ EXPORT_SYMBOL(tty_register_device);
 
 static void tty_device_create_release(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(dev, "releasing...\n");
 	kfree(dev);
 }
@@ -2934,19 +3199,24 @@ struct device *tty_register_device_attr(struct tty_driver *driver,
 	int retval;
 
 	if (index >= driver->num) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s: Attempt to register invalid tty line number (%d)\n",
 		       driver->name, index);
 		return ERR_PTR(-EINVAL);
 	}
 
 	if (driver->type == TTY_DRIVER_TYPE_PTY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pty_line_name(driver, index, name);
+}
 	else
 		tty_line_name(driver, index, name);
 
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	dev->devt = devt;
 	dev->class = tty_class;
@@ -2969,6 +3239,7 @@ struct device *tty_register_device_attr(struct tty_driver *driver,
 		 */
 		tp = driver->termios[index];
 		if (tp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			driver->termios[index] = NULL;
 			kfree(tp);
 		}
@@ -2978,6 +3249,7 @@ struct device *tty_register_device_attr(struct tty_driver *driver,
 			goto err_del;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_set_uevent_suppress(dev, 0);
 	kobject_uevent(&dev->kobj, KOBJ_ADD);
 
@@ -3005,6 +3277,7 @@ EXPORT_SYMBOL_GPL(tty_register_device_attr);
 
 void tty_unregister_device(struct tty_driver *driver, unsigned index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_destroy(tty_class,
 		MKDEV(driver->major, driver->minor_start) + index);
 	if (!(driver->flags & TTY_DRIVER_DYNAMIC_ALLOC)) {
@@ -3031,12 +3304,17 @@ struct tty_driver *__tty_alloc_driver(unsigned int lines, struct module *owner,
 	int err;
 
 	if (!lines || (flags & TTY_DRIVER_UNNUMBERED_NODE && lines > 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	driver = kzalloc(sizeof(struct tty_driver), GFP_KERNEL);
 	if (!driver)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kref_init(&driver->kref);
 	driver->magic = TTY_DRIVER_MAGIC;
 	driver->num = lines;
@@ -3049,6 +3327,7 @@ struct tty_driver *__tty_alloc_driver(unsigned int lines, struct module *owner,
 		driver->termios = kcalloc(lines, sizeof(*driver->termios),
 				GFP_KERNEL);
 		if (!driver->ttys || !driver->termios) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENOMEM;
 			goto err_free_all;
 		}
@@ -3058,18 +3337,22 @@ struct tty_driver *__tty_alloc_driver(unsigned int lines, struct module *owner,
 		driver->ports = kcalloc(lines, sizeof(*driver->ports),
 				GFP_KERNEL);
 		if (!driver->ports) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENOMEM;
 			goto err_free_all;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cdevs = lines;
 	}
 
 	driver->cdevs = kcalloc(cdevs, sizeof(*driver->cdevs), GFP_KERNEL);
 	if (!driver->cdevs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOMEM;
 		goto err_free_all;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return driver;
 err_free_all:
 	kfree(driver->ports);
@@ -3083,6 +3366,7 @@ EXPORT_SYMBOL(__tty_alloc_driver);
 
 static void destruct_tty_driver(struct kref *kref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_driver *driver = container_of(kref, struct tty_driver, kref);
 	int i;
 	struct ktermios *tp;
@@ -3123,6 +3407,7 @@ EXPORT_SYMBOL(tty_set_operations);
 
 void put_tty_driver(struct tty_driver *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_driver_kref_put(d);
 }
 EXPORT_SYMBOL(put_tty_driver);
@@ -3138,9 +3423,11 @@ int tty_register_driver(struct tty_driver *driver)
 	struct device *d;
 
 	if (!driver->major) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = alloc_chrdev_region(&dev, driver->minor_start,
 						driver->num, driver->name);
 		if (!error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			driver->major = MAJOR(dev);
 			driver->minor_start = MINOR(dev);
 		}
@@ -3165,6 +3452,7 @@ int tty_register_driver(struct tty_driver *driver)
 		for (i = 0; i < driver->num; i++) {
 			d = tty_register_device(driver, i, NULL);
 			if (IS_ERR(d)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				error = PTR_ERR(d);
 				goto err_unreg_devs;
 			}
@@ -3176,8 +3464,11 @@ int tty_register_driver(struct tty_driver *driver)
 
 err_unreg_devs:
 	for (i--; i >= 0; i--)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_unregister_device(driver, i);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&tty_mutex);
 	list_del(&driver->tty_drivers);
 	mutex_unlock(&tty_mutex);
@@ -3223,10 +3514,13 @@ void tty_default_fops(struct file_operations *fops)
 static char *tty_devnode(struct device *dev, umode_t *mode)
 {
 	if (!mode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	if (dev->devt == MKDEV(TTYAUX_MAJOR, 0) ||
 	    dev->devt == MKDEV(TTYAUX_MAJOR, 2))
 		*mode = 0666;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -3234,7 +3528,9 @@ static int __init tty_class_init(void)
 {
 	tty_class = class_create(THIS_MODULE, "tty");
 	if (IS_ERR(tty_class))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(tty_class);
+}
 	tty_class->devnode = tty_devnode;
 	return 0;
 }
@@ -3253,6 +3549,7 @@ static ssize_t show_cons_active(struct device *dev,
 	ssize_t count = 0;
 
 	console_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_console(c) {
 		if (!c->device)
 			continue;
@@ -3295,8 +3592,10 @@ static struct device *consdev;
 void console_sysfs_notify(void)
 {
 	if (consdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_notify(&consdev->kobj, NULL, "active");
 }
+}
 
 /*
  * Ok, now we can initialize the rest of the tty devices and can count
@@ -3318,7 +3617,9 @@ int __init tty_init(void)
 					    MKDEV(TTYAUX_MAJOR, 1), NULL,
 					    cons_dev_groups, "console");
 	if (IS_ERR(consdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		consdev = NULL;
+}
 
 #ifdef CONFIG_VT
 	vty_init(&console_fops);
diff --git a/drivers/tty/tty_ioctl.c b/drivers/tty/tty_ioctl.c
index efa96e6..e718f3d 100644
--- a/drivers/tty/tty_ioctl.c
+++ b/drivers/tty/tty_ioctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Copyright (C) 1991, 1992, 1993, 1994  Linus Torvalds
  *
@@ -76,6 +78,7 @@ int tty_write_room(struct tty_struct *tty)
 {
 	if (tty->ops->write_room)
 		return tty->ops->write_room(tty);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 2048;
 }
 EXPORT_SYMBOL(tty_write_room);
@@ -107,6 +110,7 @@ EXPORT_SYMBOL(tty_driver_flush_buffer);
 
 void tty_throttle(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	down_write(&tty->termios_rwsem);
 	/* check TTY_THROTTLED first so it indicates our state */
 	if (!test_and_set_bit(TTY_THROTTLED, &tty->flags) &&
@@ -159,6 +163,7 @@ int tty_throttle_safe(struct tty_struct *tty)
 
 	mutex_lock(&tty->throttle_mutex);
 	if (!tty_throttled(tty)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tty->flow_change != TTY_THROTTLE_SAFE)
 			ret = 1;
 		else {
@@ -190,12 +195,18 @@ int tty_unthrottle_safe(struct tty_struct *tty)
 
 	mutex_lock(&tty->throttle_mutex);
 	if (tty_throttled(tty)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tty->flow_change != TTY_UNTHROTTLE_SAFE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = 1;
+}
 		else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			clear_bit(TTY_THROTTLED, &tty->flags);
 			if (tty->ops->unthrottle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tty->ops->unthrottle(tty);
+}
 		}
 	}
 	mutex_unlock(&tty->throttle_mutex);
@@ -216,18 +227,25 @@ int tty_unthrottle_safe(struct tty_struct *tty)
 
 void tty_wait_until_sent(struct tty_struct *tty, long timeout)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_debug_wait_until_sent(tty, "wait until sent, timeout=%ld\n", timeout);
 
 	if (!timeout)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		timeout = MAX_SCHEDULE_TIMEOUT;
+}
 
 	timeout = wait_event_interruptible_timeout(tty->write_wait,
 			!tty_chars_in_buffer(tty), timeout);
 	if (timeout <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (timeout == MAX_SCHEDULE_TIMEOUT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		timeout = 0;
+}
 
 	if (tty->ops->wait_until_sent)
 		tty->ops->wait_until_sent(tty, timeout);
@@ -291,6 +309,7 @@ EXPORT_SYMBOL(tty_termios_copy_hw);
 
 int tty_termios_hw_change(struct ktermios *a, struct ktermios *b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (a->c_ispeed != b->c_ispeed || a->c_ospeed != b->c_ospeed)
 		return 1;
 	if ((a->c_cflag ^ b->c_cflag) & ~(HUPCL | CREAD | CLOCAL))
@@ -365,13 +384,16 @@ static int set_termios(struct tty_struct *tty, void __user *arg, int opt)
 	int retval = tty_check_change(tty);
 
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	down_read(&tty->termios_rwsem);
 	tmp_termios = tty->termios;
 	up_read(&tty->termios_rwsem);
 
 	if (opt & TERMIOS_TERMIO) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (user_termio_to_kernel_termios(&tmp_termios,
 						(struct termio __user *)arg))
 			return -EFAULT;
@@ -381,6 +403,7 @@ static int set_termios(struct tty_struct *tty, void __user *arg, int opt)
 						(struct termios __user *)arg))
 			return -EFAULT;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (user_termios_to_kernel_termios(&tmp_termios,
 						(struct termios2 __user *)arg))
 			return -EFAULT;
@@ -400,14 +423,18 @@ static int set_termios(struct tty_struct *tty, void __user *arg, int opt)
 
 	if (ld != NULL) {
 		if ((opt & TERMIOS_FLUSH) && ld->ops->flush_buffer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ld->ops->flush_buffer(tty);
+}
 		tty_ldisc_deref(ld);
 	}
 
 	if (opt & TERMIOS_WAIT) {
 		tty_wait_until_sent(tty, 0);
 		if (signal_pending(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ERESTARTSYS;
+}
 	}
 
 	tty_set_termios(tty, &tmp_termios);
@@ -438,7 +465,9 @@ static int get_termio(struct tty_struct *tty, struct termio __user *termio)
 	struct ktermios kterm;
 	copy_termios(tty, &kterm);
 	if (kernel_termios_to_user_termio(termio, &kterm))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	return 0;
 }
 
@@ -461,7 +490,9 @@ static int set_termiox(struct tty_struct *tty, void __user *arg, int opt)
 	struct tty_ldisc *ld;
 
 	if (tty->termiox == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (copy_from_user(&tnew, arg, sizeof(struct termiox)))
 		return -EFAULT;
 
@@ -677,6 +708,7 @@ static int set_ltchars(struct tty_struct *tty, struct ltchars __user *ltchars)
 static int tty_change_softcar(struct tty_struct *tty, int arg)
 {
 	int ret = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int bit = arg ? CLOCAL : 0;
 	struct ktermios old;
 
@@ -756,12 +788,18 @@ int tty_mode_ioctl(struct tty_struct *tty, struct file *file,
 	case TCGETS:
 		copy_termios(real_tty, &kterm);
 		if (kernel_termios_to_user_termios_1((struct termios __user *)arg, &kterm))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	case TCGETS2:
 		copy_termios(real_tty, &kterm);
 		if (kernel_termios_to_user_termios((struct termios2 __user *)arg, &kterm))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	case TCSETSF2:
 		return set_termios(real_tty, p,  TERMIOS_FLUSH | TERMIOS_WAIT);
@@ -799,11 +837,16 @@ int tty_mode_ioctl(struct tty_struct *tty, struct file *file,
 	case TIOCGLCKTRMIOS:
 		copy_termios_locked(real_tty, &kterm);
 		if (kernel_termios_to_user_termios_1((struct termios __user *)arg, &kterm))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	case TIOCSLCKTRMIOS:
 		if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 		copy_termios_locked(real_tty, &kterm);
 		if (user_termios_to_kernel_termios_1(&kterm,
 					       (struct termios __user *) arg))
@@ -817,12 +860,19 @@ int tty_mode_ioctl(struct tty_struct *tty, struct file *file,
 	case TCGETX: {
 		struct termiox ktermx;
 		if (real_tty->termiox == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		down_read(&real_tty->termios_rwsem);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(&ktermx, real_tty->termiox, sizeof(struct termiox));
 		up_read(&real_tty->termios_rwsem);
 		if (copy_to_user(p, &ktermx, sizeof(struct termiox)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	}
 	case TCSETX:
@@ -834,12 +884,16 @@ int tty_mode_ioctl(struct tty_struct *tty, struct file *file,
 #endif		
 	case TIOCGSOFTCAR:
 		copy_termios(real_tty, &kterm);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = put_user((kterm.c_cflag & CLOCAL) ? 1 : 0,
 						(int __user *)arg);
 		return ret;
 	case TIOCSSOFTCAR:
 		if (get_user(arg, (unsigned int __user *) arg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return tty_change_softcar(real_tty, arg);
 	default:
 		return -ENOIOCTLCMD;
@@ -872,6 +926,7 @@ static int __tty_perform_flush(struct tty_struct *tty, unsigned long arg)
 	default:
 		return -EINVAL;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -880,7 +935,9 @@ int tty_perform_flush(struct tty_struct *tty, unsigned long arg)
 	struct tty_ldisc *ld;
 	int retval = tty_check_change(tty);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	ld = tty_ldisc_ref_wait(tty);
 	retval = __tty_perform_flush(tty, arg);
@@ -899,40 +956,54 @@ int n_tty_ioctl_helper(struct tty_struct *tty, struct file *file,
 	case TCXONC:
 		retval = tty_check_change(tty);
 		if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (arg) {
 		case TCOOFF:
 			spin_lock_irq(&tty->flow_lock);
 			if (!tty->flow_stopped) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tty->flow_stopped = 1;
 				__stop_tty(tty);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irq(&tty->flow_lock);
 			break;
 		case TCOON:
 			spin_lock_irq(&tty->flow_lock);
 			if (tty->flow_stopped) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tty->flow_stopped = 0;
 				__start_tty(tty);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irq(&tty->flow_lock);
 			break;
 		case TCIOFF:
 			if (STOP_CHAR(tty) != __DISABLED_CHAR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = tty_send_xchar(tty, STOP_CHAR(tty));
+}
 			break;
 		case TCION:
 			if (START_CHAR(tty) != __DISABLED_CHAR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = tty_send_xchar(tty, START_CHAR(tty));
+}
 			break;
 		default:
 			return -EINVAL;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
 	case TCFLSH:
 		retval = tty_check_change(tty);
 		if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
 		return __tty_perform_flush(tty, arg);
 	default:
 		/* Try the mode commands */
@@ -945,6 +1016,7 @@ EXPORT_SYMBOL(n_tty_ioctl_helper);
 long n_tty_compat_ioctl_helper(struct tty_struct *tty, struct file *file,
 					unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (cmd) {
 	case TIOCGLCKTRMIOS:
 	case TIOCSLCKTRMIOS:
diff --git a/drivers/tty/tty_jobctrl.c b/drivers/tty/tty_jobctrl.c
index e703230..410a203 100644
--- a/drivers/tty/tty_jobctrl.c
+++ b/drivers/tty/tty_jobctrl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Copyright (C) 1991, 1992  Linus Torvalds
  */
@@ -34,8 +36,11 @@ int __tty_check_change(struct tty_struct *tty, int sig)
 	int ret = 0;
 
 	if (current->signal->tty != tty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	pgrp = task_pgrp(current);
 
@@ -46,20 +51,29 @@ int __tty_check_change(struct tty_struct *tty, int sig)
 	if (tty_pgrp && pgrp != tty->pgrp) {
 		if (is_ignored(sig)) {
 			if (sig == SIGTTIN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EIO;
+}
 		} else if (is_current_pgrp_orphaned())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EIO;
+}
 		else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kill_pgrp(pgrp, sig, 1);
 			set_thread_flag(TIF_SIGPENDING);
 			ret = -ERESTARTSYS;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	if (!tty_pgrp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_warn(tty, "sig=%d, tty->pgrp == NULL!\n", sig);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -105,6 +119,7 @@ static void __proc_set_tty(struct tty_struct *tty)
 	spin_unlock_irqrestore(&tty->ctrl_lock, flags);
 	tty->session = get_pid(task_session(current));
 	if (current->signal->tty) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_debug(tty, "current tty %s not NULL!!\n",
 			  current->signal->tty->name);
 		tty_kref_put(current->signal->tty);
@@ -172,6 +187,7 @@ void session_clear_tty(struct pid *session)
 	struct task_struct *p;
 	do_each_pid_task(session, PIDTYPE_SID, p) {
 		proc_clear_tty(p);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while_each_pid_task(session, PIDTYPE_SID, p);
 }
 
@@ -195,34 +211,49 @@ int tty_signal_session_leader(struct tty_struct *tty, int exit_session)
 
 	read_lock(&tasklist_lock);
 	if (tty->session) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		do_each_pid_task(tty->session, PIDTYPE_SID, p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock_irq(&p->sighand->siglock);
 			if (p->signal->tty == tty) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				p->signal->tty = NULL;
 				/* We defer the dereferences outside fo
 				   the tasklist lock */
 				refs++;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!p->signal->leader) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock_irq(&p->sighand->siglock);
 				continue;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__group_send_sig_info(SIGHUP, SEND_SIG_PRIV, p);
 			__group_send_sig_info(SIGCONT, SEND_SIG_PRIV, p);
 			put_pid(p->signal->tty_old_pgrp);  /* A noop */
 			spin_lock(&tty->ctrl_lock);
 			tty_pgrp = get_pid(tty->pgrp);
 			if (tty->pgrp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				p->signal->tty_old_pgrp = get_pid(tty->pgrp);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&tty->ctrl_lock);
 			spin_unlock_irq(&p->sighand->siglock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while_each_pid_task(tty->session, PIDTYPE_SID, p);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock(&tasklist_lock);
 
 	if (tty_pgrp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (exit_session)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kill_pgrp(tty_pgrp, SIGHUP, exit_session);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_pid(tty_pgrp);
 	}
 
@@ -258,18 +289,23 @@ void disassociate_ctty(int on_exit)
 	struct tty_struct *tty;
 
 	if (!current->signal->leader)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	tty = get_current_tty();
 	if (tty) {
 		if (on_exit && tty->driver->type != TTY_DRIVER_TYPE_PTY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_vhangup_session(tty);
 		} else {
 			struct pid *tty_pgrp = tty_get_pgrp(tty);
 			if (tty_pgrp) {
 				kill_pgrp(tty_pgrp, SIGHUP, on_exit);
 				if (!on_exit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					kill_pgrp(tty_pgrp, SIGCONT, on_exit);
+}
 				put_pid(tty_pgrp);
 			}
 		}
@@ -282,10 +318,12 @@ void disassociate_ctty(int on_exit)
 		current->signal->tty_old_pgrp = NULL;
 		spin_unlock_irq(&current->sighand->siglock);
 		if (old_pgrp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kill_pgrp(old_pgrp, SIGHUP, on_exit);
 			kill_pgrp(old_pgrp, SIGCONT, on_exit);
 			put_pid(old_pgrp);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -354,6 +392,7 @@ static int tiocsctty(struct tty_struct *tty, struct file *file, int arg)
 	 * not have a controlling tty already.
 	 */
 	if (!current->signal->leader || current->signal->tty) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EPERM;
 		goto unlock;
 	}
@@ -369,6 +408,7 @@ static int tiocsctty(struct tty_struct *tty, struct file *file, int arg)
 			 */
 			session_clear_tty(tty->session);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EPERM;
 			goto unlock;
 		}
@@ -376,6 +416,7 @@ static int tiocsctty(struct tty_struct *tty, struct file *file, int arg)
 
 	/* See the comment in tty_open_proc_set_tty(). */
 	if ((file->f_mode & FMODE_READ) == 0 && !capable(CAP_SYS_ADMIN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EPERM;
 		goto unlock;
 	}
@@ -421,9 +462,13 @@ static struct pid *session_of_pgrp(struct pid *pgrp)
 
 	p = pid_task(pgrp, PIDTYPE_PGID);
 	if (p == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = pid_task(pgrp, PIDTYPE_PID);
+}
 	if (p != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sid = task_session(p);
+}
 
 	return sid;
 }
@@ -448,7 +493,9 @@ static int tiocgpgrp(struct tty_struct *tty, struct tty_struct *real_tty, pid_t
 	 * testing if the tty is NOT a master pty.
 	 */
 	if (tty == real_tty && current->signal->tty != real_tty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
+}
 	pid = tty_get_pgrp(real_tty);
 	ret =  put_user(pid_vnr(pid), p);
 	put_pid(pid);
@@ -473,25 +520,36 @@ static int tiocspgrp(struct tty_struct *tty, struct tty_struct *real_tty, pid_t
 	int retval = tty_check_change(real_tty);
 
 	if (retval == -EIO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
+}
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 	if (!current->signal->tty ||
 	    (current->signal->tty != real_tty) ||
 	    (real_tty->session != task_session(current)))
 		return -ENOTTY;
 	if (get_user(pgrp_nr, p))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	if (pgrp_nr < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	pgrp = find_vpid(pgrp_nr);
 	retval = -ESRCH;
 	if (!pgrp)
 		goto out_unlock;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = -EPERM;
 	if (session_of_pgrp(pgrp) != task_session(current))
 		goto out_unlock;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = 0;
 	spin_lock_irq(&tty->ctrl_lock);
 	put_pid(real_tty->pgrp);
@@ -520,9 +578,13 @@ static int tiocgsid(struct tty_struct *tty, struct tty_struct *real_tty, pid_t _
 	 * testing if the tty is NOT a master pty.
 	*/
 	if (tty == real_tty && current->signal->tty != real_tty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
+}
 	if (!real_tty->session)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
+}
 	return put_user(pid_vnr(real_tty->session), p);
 }
 
@@ -538,7 +600,10 @@ long tty_jobctrl_ioctl(struct tty_struct *tty, struct tty_struct *real_tty,
 	switch (cmd) {
 	case TIOCNOTTY:
 		if (current->signal->tty != tty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOTTY;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		no_tty();
 		return 0;
 	case TIOCSCTTY:
@@ -550,5 +615,6 @@ long tty_jobctrl_ioctl(struct tty_struct *tty, struct tty_struct *real_tty,
 	case TIOCGSID:
 		return tiocgsid(tty, real_tty, p);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOIOCTLCMD;
 }
diff --git a/drivers/tty/tty_ldisc.c b/drivers/tty/tty_ldisc.c
index 7c89568..7456bf5 100644
--- a/drivers/tty/tty_ldisc.c
+++ b/drivers/tty/tty_ldisc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/types.h>
 #include <linux/errno.h>
 #include <linux/kmod.h>
@@ -63,7 +65,9 @@ int tty_register_ldisc(int disc, struct tty_ldisc_ops *new_ldisc)
 	int ret = 0;
 
 	if (disc < N_TTY || disc >= NR_LDISCS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	raw_spin_lock_irqsave(&tty_ldiscs_lock, flags);
 	tty_ldiscs[disc] = new_ldisc;
@@ -92,6 +96,7 @@ int tty_unregister_ldisc(int disc)
 	unsigned long flags;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (disc < N_TTY || disc >= NR_LDISCS)
 		return -EINVAL;
 
@@ -112,9 +117,11 @@ static struct tty_ldisc_ops *get_ldops(int disc)
 	struct tty_ldisc_ops *ldops, *ret;
 
 	raw_spin_lock_irqsave(&tty_ldiscs_lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = ERR_PTR(-EINVAL);
 	ldops = tty_ldiscs[disc];
 	if (ldops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = ERR_PTR(-EAGAIN);
 		if (try_module_get(ldops->owner)) {
 			ldops->refcount++;
@@ -161,7 +168,9 @@ static struct tty_ldisc *tty_ldisc_get(struct tty_struct *tty, int disc)
 	struct tty_ldisc_ops *ldops;
 
 	if (disc < N_TTY || disc >= NR_LDISCS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	/*
 	 * Get the ldisc ops - we may need to request them to be loaded
@@ -169,14 +178,19 @@ static struct tty_ldisc *tty_ldisc_get(struct tty_struct *tty, int disc)
 	 */
 	ldops = get_ldops(disc);
 	if (IS_ERR(ldops)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		request_module("tty-ldisc-%d", disc);
 		ldops = get_ldops(disc);
 		if (IS_ERR(ldops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_CAST(ldops);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ld = kmalloc(sizeof(struct tty_ldisc), GFP_KERNEL);
 	if (ld == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_ldops(ldops);
 		return ERR_PTR(-ENOMEM);
 	}
@@ -195,7 +209,9 @@ static struct tty_ldisc *tty_ldisc_get(struct tty_struct *tty, int disc)
 static void tty_ldisc_put(struct tty_ldisc *ld)
 {
 	if (WARN_ON_ONCE(!ld))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	put_ldops(ld->ops);
 	kfree(ld);
@@ -203,11 +219,13 @@ static void tty_ldisc_put(struct tty_ldisc *ld)
 
 static void *tty_ldiscs_seq_start(struct seq_file *m, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (*pos < NR_LDISCS) ? pos : NULL;
 }
 
 static void *tty_ldiscs_seq_next(struct seq_file *m, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	(*pos)++;
 	return (*pos < NR_LDISCS) ? pos : NULL;
 }
@@ -223,7 +241,9 @@ static int tty_ldiscs_seq_show(struct seq_file *m, void *v)
 
 	ldops = get_ldops(i);
 	if (IS_ERR(ldops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	seq_printf(m, "%-10s %2d\n", ldops->name ? ldops->name : "???", i);
 	put_ldops(ldops);
 	return 0;
@@ -238,6 +258,7 @@ static const struct seq_operations tty_ldiscs_seq_ops = {
 
 static int proc_tty_ldiscs_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &tty_ldiscs_seq_ops);
 }
 
@@ -276,7 +297,9 @@ struct tty_ldisc *tty_ldisc_ref_wait(struct tty_struct *tty)
 	ldsem_down_read(&tty->ldisc_sem, MAX_SCHEDULE_TIMEOUT);
 	ld = tty->ldisc;
 	if (!ld)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ldsem_up_read(&tty->ldisc_sem);
+}
 	return ld;
 }
 EXPORT_SYMBOL_GPL(tty_ldisc_ref_wait);
@@ -297,7 +320,9 @@ struct tty_ldisc *tty_ldisc_ref(struct tty_struct *tty)
 	if (ldsem_down_read_trylock(&tty->ldisc_sem)) {
 		ld = tty->ldisc;
 		if (!ld)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ldsem_up_read(&tty->ldisc_sem);
+}
 	}
 	return ld;
 }
@@ -342,13 +367,17 @@ int tty_ldisc_lock(struct tty_struct *tty, unsigned long timeout)
 
 	ret = __tty_ldisc_lock(tty, timeout);
 	if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	set_bit(TTY_LDISC_HALTED, &tty->flags);
 	return 0;
 }
 
 void tty_ldisc_unlock(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clear_bit(TTY_LDISC_HALTED, &tty->flags);
 	__tty_ldisc_unlock(tty);
 }
@@ -360,32 +389,48 @@ tty_ldisc_lock_pair_timeout(struct tty_struct *tty, struct tty_struct *tty2,
 	int ret;
 
 	if (tty < tty2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = __tty_ldisc_lock(tty, timeout);
 		if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = __tty_ldisc_lock_nested(tty2, timeout);
 			if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__tty_ldisc_unlock(tty);
+}
 		}
 	} else {
 		/* if this is possible, it has lots of implications */
 		WARN_ON_ONCE(tty == tty2);
 		if (tty2 && tty != tty2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = __tty_ldisc_lock(tty2, timeout);
 			if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = __tty_ldisc_lock_nested(tty, timeout);
 				if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					__tty_ldisc_unlock(tty2);
+}
 			}
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = __tty_ldisc_lock(tty, timeout);
+}
 	}
 
 	if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	set_bit(TTY_LDISC_HALTED, &tty->flags);
 	if (tty2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_bit(TTY_LDISC_HALTED, &tty2->flags);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -397,10 +442,13 @@ static void tty_ldisc_lock_pair(struct tty_struct *tty, struct tty_struct *tty2)
 static void tty_ldisc_unlock_pair(struct tty_struct *tty,
 				  struct tty_struct *tty2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__tty_ldisc_unlock(tty);
 	if (tty2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__tty_ldisc_unlock(tty2);
 }
+}
 
 /**
  *	tty_ldisc_flush	-	flush line discipline queue
@@ -438,6 +486,7 @@ EXPORT_SYMBOL_GPL(tty_ldisc_flush);
 
 static void tty_set_termios_ldisc(struct tty_struct *tty, int disc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	down_write(&tty->termios_rwsem);
 	tty->termios.c_line = disc;
 	up_write(&tty->termios_rwsem);
@@ -465,11 +514,15 @@ static int tty_ldisc_open(struct tty_struct *tty, struct tty_ldisc *ld)
                 /* BTM here locks versus a hangup event */
 		ret = ld->ops->open(tty);
 		if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			clear_bit(TTY_LDISC_OPEN, &tty->flags);
+}
 
 		tty_ldisc_debug(tty, "%p: opened\n", ld);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -502,6 +555,7 @@ static void tty_ldisc_close(struct tty_struct *tty, struct tty_ldisc *ld)
 
 static int tty_ldisc_failto(struct tty_struct *tty, int ld)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_ldisc *disc = tty_ldisc_get(tty, ld);
 	int r;
 
@@ -560,7 +614,9 @@ int tty_set_ldisc(struct tty_struct *tty, int disc)
 
 	new_ldisc = tty_ldisc_get(tty, disc);
 	if (IS_ERR(new_ldisc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(new_ldisc);
+}
 
 	tty_lock(tty);
 	retval = tty_ldisc_lock(tty, 5 * HZ);
@@ -632,7 +688,9 @@ EXPORT_SYMBOL_GPL(tty_set_ldisc);
 static void tty_ldisc_kill(struct tty_struct *tty)
 {
 	if (!tty->ldisc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	/*
 	 * Now kill off the ldisc
 	 */
@@ -680,6 +738,7 @@ int tty_ldisc_reinit(struct tty_struct *tty, int disc)
 
 	ld = tty_ldisc_get(tty, disc);
 	if (IS_ERR(ld)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(disc == N_TTY);
 		return PTR_ERR(ld);
 	}
@@ -730,7 +789,9 @@ void tty_ldisc_hangup(struct tty_struct *tty, bool reinit)
 		    ld->ops->write_wakeup)
 			ld->ops->write_wakeup(tty);
 		if (ld->ops->hangup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ld->ops->hangup(tty);
+}
 		tty_ldisc_deref(ld);
 	}
 
@@ -750,6 +811,7 @@ void tty_ldisc_hangup(struct tty_struct *tty, bool reinit)
 
 	if (tty->ldisc) {
 		if (reinit) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (tty_ldisc_reinit(tty, tty->termios.c_line) < 0 &&
 			    tty_ldisc_reinit(tty, N_TTY) < 0)
 				WARN_ON(tty_ldisc_reinit(tty, N_NULL) < 0);
@@ -773,15 +835,19 @@ int tty_ldisc_setup(struct tty_struct *tty, struct tty_struct *o_tty)
 {
 	int retval = tty_ldisc_open(tty, tty->ldisc);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	if (o_tty) {
 		retval = tty_ldisc_open(o_tty, o_tty->ldisc);
 		if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_ldisc_close(tty, tty->ldisc);
 			return retval;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -827,7 +893,9 @@ void tty_ldisc_init(struct tty_struct *tty)
 {
 	struct tty_ldisc *ld = tty_ldisc_get(tty, N_TTY);
 	if (IS_ERR(ld))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("n_tty: init_tty");
+}
 	tty->ldisc = ld;
 }
 
@@ -841,6 +909,8 @@ void tty_ldisc_init(struct tty_struct *tty)
 void tty_ldisc_deinit(struct tty_struct *tty)
 {
 	if (tty->ldisc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_ldisc_put(tty->ldisc);
+}
 	tty->ldisc = NULL;
 }
diff --git a/drivers/tty/tty_ldsem.c b/drivers/tty/tty_ldsem.c
index 52b7bae..e7a49d2 100644
--- a/drivers/tty/tty_ldsem.c
+++ b/drivers/tty/tty_ldsem.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Ldisc rw semaphore
  *
@@ -93,6 +95,7 @@ static inline int ldsem_cmpxchg(long *old, long new, struct ld_semaphore *sem)
 		*old = new;
 		return 1;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*old = tmp;
 		return 0;
 	}
@@ -131,6 +134,7 @@ static void __ldsem_wake_readers(struct ld_semaphore *sem)
 	adjust = sem->wait_readers * (LDSEM_ACTIVE_BIAS - LDSEM_WAIT_BIAS);
 	count = ldsem_atomic_update(adjust, sem);
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (count > 0)
 			break;
 		if (ldsem_cmpxchg(&count, count - adjust, sem))
@@ -166,6 +170,7 @@ static void __ldsem_wake_writer(struct ld_semaphore *sem)
 {
 	struct ldsem_waiter *waiter;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	waiter = list_entry(sem->write_wait.next, struct ldsem_waiter, list);
 	wake_up_process(waiter->task);
 }
@@ -180,6 +185,7 @@ static void __ldsem_wake_writer(struct ld_semaphore *sem)
  */
 static void __ldsem_wake(struct ld_semaphore *sem)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!list_empty(&sem->write_wait))
 		__ldsem_wake_writer(sem);
 	else if (!list_empty(&sem->read_wait))
@@ -190,6 +196,7 @@ static void ldsem_wake(struct ld_semaphore *sem)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	raw_spin_lock_irqsave(&sem->wait_lock, flags);
 	__ldsem_wake(sem);
 	raw_spin_unlock_irqrestore(&sem->wait_lock, flags);
@@ -211,6 +218,7 @@ down_read_failed(struct ld_semaphore *sem, long count, long timeout)
 	 * so that reversing fails, check if there are are no waiters,
 	 * and early-out if not */
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ldsem_cmpxchg(&count, count + adjust, sem))
 			break;
 		if (count > 0) {
@@ -279,6 +287,7 @@ down_write_failed(struct ld_semaphore *sem, long count, long timeout)
 	 * so that reversing fails, check if the lock is now owned,
 	 * and early-out if so */
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ldsem_cmpxchg(&count, count + adjust, sem))
 			break;
 		if ((count & LDSEM_ACTIVE_MASK) == LDSEM_ACTIVE_BIAS) {
@@ -324,17 +333,25 @@ static int __ldsem_down_read_nested(struct ld_semaphore *sem,
 {
 	long count;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_acquire_read(sem, subclass, 0, _RET_IP_);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	count = ldsem_atomic_update(LDSEM_READ_BIAS, sem);
 	if (count <= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lock_stat(sem, contended);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!down_read_failed(sem, count, timeout)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lockdep_release(sem, 1, _RET_IP_);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lock_stat(sem, acquired);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -343,17 +360,25 @@ static int __ldsem_down_write_nested(struct ld_semaphore *sem,
 {
 	long count;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_acquire(sem, subclass, 0, _RET_IP_);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	count = ldsem_atomic_update(LDSEM_WRITE_BIAS, sem);
 	if ((count & LDSEM_ACTIVE_MASK) != LDSEM_ACTIVE_BIAS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lock_stat(sem, contended);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!down_write_failed(sem, count, timeout)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lockdep_release(sem, 1, _RET_IP_);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lock_stat(sem, acquired);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -376,11 +401,15 @@ int ldsem_down_read_trylock(struct ld_semaphore *sem)
 
 	while (count >= 0) {
 		if (ldsem_cmpxchg(&count, count + LDSEM_READ_BIAS, sem)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lockdep_acquire_read(sem, 0, 1, _RET_IP_);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lock_stat(sem, acquired);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -400,6 +429,7 @@ int ldsem_down_write_trylock(struct ld_semaphore *sem)
 {
 	long count = sem->count;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((count & LDSEM_ACTIVE_MASK) == 0) {
 		if (ldsem_cmpxchg(&count, count + LDSEM_WRITE_BIAS, sem)) {
 			lockdep_acquire(sem, 0, 1, _RET_IP_);
@@ -417,12 +447,16 @@ void ldsem_up_read(struct ld_semaphore *sem)
 {
 	long count;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_release(sem, 1, _RET_IP_);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	count = ldsem_atomic_update(-LDSEM_READ_BIAS, sem);
 	if (count < 0 && (count & LDSEM_ACTIVE_MASK) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ldsem_wake(sem);
 }
+}
 
 /*
  * release a write lock
@@ -431,12 +465,16 @@ void ldsem_up_write(struct ld_semaphore *sem)
 {
 	long count;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_release(sem, 1, _RET_IP_);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	count = ldsem_atomic_update(-LDSEM_WRITE_BIAS, sem);
 	if (count < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ldsem_wake(sem);
 }
+}
 
 
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
diff --git a/drivers/tty/tty_mutex.c b/drivers/tty/tty_mutex.c
index 2640635..b75cc14 100644
--- a/drivers/tty/tty_mutex.c
+++ b/drivers/tty/tty_mutex.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/tty.h>
 #include <linux/module.h>
@@ -14,7 +16,9 @@
 void tty_lock(struct tty_struct *tty)
 {
 	if (WARN(tty->magic != TTY_MAGIC, "L Bad %p\n", tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	tty_kref_get(tty);
 	mutex_lock(&tty->legacy_mutex);
 }
@@ -25,18 +29,25 @@ int tty_lock_interruptible(struct tty_struct *tty)
 	int ret;
 
 	if (WARN(tty->magic != TTY_MAGIC, "L Bad %p\n", tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 	tty_kref_get(tty);
 	ret = mutex_lock_interruptible(&tty->legacy_mutex);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_kref_put(tty);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 void tty_unlock(struct tty_struct *tty)
 {
 	if (WARN(tty->magic != TTY_MAGIC, "U Bad %p\n", tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	mutex_unlock(&tty->legacy_mutex);
 	tty_kref_put(tty);
 }
@@ -56,5 +67,6 @@ void tty_unlock_slave(struct tty_struct *tty)
 
 void tty_set_lock_subclass(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_subclass(&tty->legacy_mutex, TTY_LOCK_SLAVE);
 }
diff --git a/drivers/tty/tty_port.c b/drivers/tty/tty_port.c
index 6b13719..ad8a4dc 100644
--- a/drivers/tty/tty_port.c
+++ b/drivers/tty/tty_port.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Tty port functions
  */
@@ -28,11 +30,15 @@ static int tty_port_default_receive_buf(struct tty_port *port,
 
 	tty = READ_ONCE(port->itty);
 	if (!tty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	disc = tty_ldisc_ref(tty);
 	if (!disc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = tty_ldisc_receive_buf(disc, p, (char *)f, count);
 
@@ -58,6 +64,7 @@ static const struct tty_port_client_operations default_client_ops = {
 
 void tty_port_init(struct tty_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(port, 0, sizeof(*port));
 	tty_buffer_init(port);
 	init_waitqueue_head(&port->open_wait);
@@ -87,7 +94,9 @@ void tty_port_link_device(struct tty_port *port,
 		struct tty_driver *driver, unsigned index)
 {
 	if (WARN_ON(index >= driver->num))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	driver->ports[index] = port;
 }
 EXPORT_SYMBOL_GPL(tty_port_link_device);
@@ -107,6 +116,7 @@ struct device *tty_port_register_device(struct tty_port *port,
 		struct tty_driver *driver, unsigned index,
 		struct device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return tty_port_register_device_attr(port, driver, index, device, NULL, NULL);
 }
 EXPORT_SYMBOL_GPL(tty_port_register_device);
@@ -129,6 +139,7 @@ struct device *tty_port_register_device_attr(struct tty_port *port,
 		struct device *device, void *drvdata,
 		const struct attribute_group **attr_grp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_port_link_device(port, driver, index);
 	return tty_register_device_attr(driver, index, device, drvdata,
 			attr_grp);
@@ -181,6 +192,7 @@ struct device *tty_port_register_device_serdev(struct tty_port *port,
 		struct tty_driver *driver, unsigned index,
 		struct device *device)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return tty_port_register_device_attr_serdev(port, driver, index,
 			device, NULL, NULL);
 }
@@ -203,7 +215,9 @@ void tty_port_unregister_device(struct tty_port *port,
 
 	ret = serdev_tty_port_unregister(port);
 	if (ret == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	tty_unregister_device(driver, index);
 }
@@ -224,6 +238,7 @@ EXPORT_SYMBOL(tty_port_alloc_xmit_buf);
 
 void tty_port_free_xmit_buf(struct tty_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&port->buf_mutex);
 	if (port->xmit_buf != NULL) {
 		free_page((unsigned long)port->xmit_buf);
@@ -254,12 +269,18 @@ static void tty_port_destructor(struct kref *kref)
 
 	/* check if last port ref was dropped before tty release */
 	if (WARN_ON(port->itty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (port->xmit_buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		free_page((unsigned long)port->xmit_buf);
+}
 	tty_port_destroy(port);
 	if (port->ops && port->ops->destruct)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		port->ops->destruct(port);
+}
 	else
 		kfree(port);
 }
@@ -317,17 +338,24 @@ static void tty_port_shutdown(struct tty_port *port, struct tty_struct *tty)
 	if (port->console)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tty_port_initialized(port)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_port_set_initialized(port, 0);
 		/*
 		 * Drop DTR/RTS if HUPCL is set. This causes any attached
 		 * modem to hang up the line.
 		 */
 		if (tty && C_HUPCL(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_port_lower_dtr_rts(port);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (port->ops->shutdown)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			port->ops->shutdown(port);
+}
 	}
 out:
 	mutex_unlock(&port->mutex);
@@ -348,6 +376,7 @@ void tty_port_hangup(struct tty_port *port)
 	struct tty_struct *tty;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&port->lock, flags);
 	port->count = 0;
 	tty = port->tty;
@@ -371,6 +400,7 @@ EXPORT_SYMBOL(tty_port_hangup);
  */
 void tty_port_tty_hangup(struct tty_port *port, bool check_clocal)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tty_struct *tty = tty_port_tty_get(port);
 
 	if (tty && (!check_clocal || !C_CLOCAL(tty)))
@@ -401,6 +431,7 @@ EXPORT_SYMBOL_GPL(tty_port_tty_wakeup);
 
 int tty_port_carrier_raised(struct tty_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (port->ops->carrier_raised == NULL)
 		return 1;
 	return port->ops->carrier_raised(port);
@@ -434,6 +465,7 @@ EXPORT_SYMBOL(tty_port_raise_dtr_rts);
 
 void tty_port_lower_dtr_rts(struct tty_port *port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (port->ops->dtr_rts)
 		port->ops->dtr_rts(port, 0);
 }
@@ -474,6 +506,7 @@ int tty_port_block_til_ready(struct tty_port *port,
 	/* if non-blocking mode is set we can pass directly to open unless
 	   the port has just hung up or is in another error state */
 	if (tty_io_error(tty)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_port_set_active(port, 1);
 		return 0;
 	}
@@ -486,12 +519,15 @@ int tty_port_block_til_ready(struct tty_port *port,
 	}
 
 	if (C_CLOCAL(tty))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		do_clocal = 1;
+}
 
 	/* Block waiting until we can proceed. We may need to wait for the
 	   carrier, but we must also wait for any close that is in progress
 	   before the next open may complete */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = 0;
 
 	/* The port lock protects the port counts */
@@ -500,6 +536,7 @@ int tty_port_block_til_ready(struct tty_port *port,
 	port->blocked_open++;
 	spin_unlock_irqrestore(&port->lock, flags);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		/* Indicate we are open */
 		if (C_BAUD(tty) && tty_port_initialized(port))
@@ -509,8 +546,11 @@ int tty_port_block_til_ready(struct tty_port *port,
 		/* Check for a hangup or uninitialised port.
 							Return accordingly */
 		if (tty_hung_up_p(filp) || !tty_port_initialized(port)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (port->flags & ASYNC_HUP_NOTIFY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = -EAGAIN;
+}
 			else
 				retval = -ERESTARTSYS;
 			break;
@@ -523,10 +563,13 @@ int tty_port_block_til_ready(struct tty_port *port,
 		 */
 		if (do_clocal || tty_port_carrier_raised(port))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -ERESTARTSYS;
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_unlock(tty);
 		schedule();
 		tty_lock(tty);
@@ -542,12 +585,14 @@ int tty_port_block_til_ready(struct tty_port *port,
 	spin_unlock_irqrestore(&port->lock, flags);
 	if (retval == 0)
 		tty_port_set_active(port, 1);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 EXPORT_SYMBOL(tty_port_block_til_ready);
 
 static void tty_port_drain_delay(struct tty_port *port, struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int bps = tty_get_baud_rate(tty);
 	long timeout;
 
@@ -567,24 +612,30 @@ int tty_port_close_start(struct tty_port *port,
 	unsigned long flags;
 
 	if (tty_hung_up_p(filp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	spin_lock_irqsave(&port->lock, flags);
 	if (tty->count == 1 && port->count != 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_warn(tty, "%s: tty->count = 1 port count = %d\n", __func__,
 			 port->count);
 		port->count = 1;
 	}
 	if (--port->count < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty_warn(tty, "%s: bad port count (%d)\n", __func__,
 			 port->count);
 		port->count = 0;
 	}
 
 	if (port->count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irqrestore(&port->lock, flags);
 		return 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&port->lock, flags);
 
 	tty->closing = 1;
@@ -592,11 +643,15 @@ int tty_port_close_start(struct tty_port *port,
 	if (tty_port_initialized(port)) {
 		/* Don't block on a stalled port, just pull the chain */
 		if (tty->flow_stopped)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_driver_flush_buffer(tty);
+}
 		if (port->closing_wait != ASYNC_CLOSING_WAIT_NONE)
 			tty_wait_until_sent(tty, port->closing_wait);
 		if (port->drain_delay)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tty_port_drain_delay(port, tty);
+}
 	}
 	/* Flush the ldisc buffering */
 	tty_ldisc_flush(tty);
@@ -617,12 +672,18 @@ void tty_port_close_end(struct tty_port *port, struct tty_struct *tty)
 	spin_lock_irqsave(&port->lock, flags);
 
 	if (port->blocked_open) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irqrestore(&port->lock, flags);
 		if (port->close_delay)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			msleep_interruptible(jiffies_to_msecs(port->close_delay));
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irqsave(&port->lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wake_up_interruptible(&port->open_wait);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&port->lock, flags);
 	tty_port_set_active(port, 0);
 }
@@ -637,7 +698,9 @@ void tty_port_close(struct tty_port *port, struct tty_struct *tty,
 							struct file *filp)
 {
 	if (tty_port_close_start(port, tty, filp) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	tty_port_shutdown(port, tty);
 	set_bit(TTY_IO_ERROR, &tty->flags);
 	tty_port_close_end(port, tty);
@@ -674,6 +737,7 @@ EXPORT_SYMBOL_GPL(tty_port_install);
 int tty_port_open(struct tty_port *port, struct tty_struct *tty,
 							struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&port->lock);
 	++port->count;
 	spin_unlock_irq(&port->lock);
@@ -692,6 +756,7 @@ int tty_port_open(struct tty_port *port, struct tty_struct *tty,
 		if (port->ops->activate) {
 			int retval = port->ops->activate(port, tty);
 			if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				mutex_unlock(&port->mutex);
 				return retval;
 			}
diff --git a/drivers/tty/vt/consolemap.c b/drivers/tty/vt/consolemap.c
index a5f88cf..419c02c 100644
--- a/drivers/tty/vt/consolemap.c
+++ b/drivers/tty/vt/consolemap.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * consolemap.c
  *
@@ -208,6 +210,7 @@ static void set_inverse_transl(struct vc_data *conp, struct uni_pagedir *p, int
 		q = p->inverse_translations[i] = kmalloc(MAX_GLYPH, GFP_KERNEL);
 		if (!q) return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(q, 0, MAX_GLYPH);
 
 	for (j = 0; j < E_TABSZ; j++) {
@@ -232,8 +235,11 @@ static void set_inverse_trans_unicode(struct vc_data *conp,
 		q = p->inverse_trans_unicode =
 			kmalloc(MAX_GLYPH * sizeof(u16), GFP_KERNEL);
 		if (!q)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(q, 0, MAX_GLYPH * sizeof(u16));
 
 	for (i = 0; i < 32; i++) {
@@ -271,6 +277,7 @@ u16 inverse_translate(struct vc_data *conp, int glyph, int use_unicode)
 {
 	struct uni_pagedir *p;
 	int m;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (glyph < 0 || glyph >= MAX_GLYPH)
 		return 0;
 	else {
@@ -325,7 +332,9 @@ int con_set_trans_old(unsigned char __user * arg)
 	unsigned char ubuf[E_TABSZ];
 
 	if (copy_from_user(ubuf, arg, E_TABSZ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	for (i = 0; i < E_TABSZ ; i++)
 		inbuf[i] = UNI_DIRECT_BASE | ubuf[i];
@@ -344,6 +353,7 @@ int con_get_trans_old(unsigned char __user * arg)
 	unsigned char outbuf[E_TABSZ];
 
 	console_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < E_TABSZ ; i++)
 	{
 		ch = conv_uni_to_pc(vc_cons[fg_console].d, p[i]);
@@ -359,7 +369,9 @@ int con_set_trans_new(ushort __user * arg)
 	unsigned short inbuf[E_TABSZ];
 
 	if (copy_from_user(inbuf, arg, sizeof(inbuf)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	console_lock();
 	memcpy(translations[USER_MAP], inbuf, sizeof(inbuf));
@@ -373,6 +385,7 @@ int con_get_trans_new(ushort __user * arg)
 	unsigned short outbuf[E_TABSZ];
 
 	console_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(outbuf, translations[USER_MAP], sizeof(outbuf));
 	console_unlock();
 
@@ -397,6 +410,7 @@ static void con_release_unimap(struct uni_pagedir *p)
 	u16 **p1;
 	int i, j;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (p == dflt) dflt = NULL;  
 	for (i = 0; i < 32; i++) {
 		p1 = p->uni_pgdir[i];
@@ -422,10 +436,16 @@ void con_free_unimap(struct vc_data *vc)
 
 	p = *vc->vc_uni_pagedir_loc;
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*vc->vc_uni_pagedir_loc = NULL;
 	if (--p->refcount)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	con_release_unimap(p);
 	kfree(p);
 }
@@ -441,25 +461,35 @@ static int con_unify_unimap(struct vc_data *conp, struct uni_pagedir *p)
 		q = *vc_cons[i].d->vc_uni_pagedir_loc;
 		if (!q || q == p || q->sum != p->sum)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (j = 0; j < 32; j++) {
 			u16 **p1, **q1;
 			p1 = p->uni_pgdir[j]; q1 = q->uni_pgdir[j];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!p1 && !q1)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!p1 || !q1)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			for (k = 0; k < 32; k++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!p1[k] && !q1[k])
 					continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!p1[k] || !q1[k])
 					break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (memcmp(p1[k], q1[k], 64*sizeof(u16)))
 					break;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (k < 32)
 				break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (j == 32) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			q->refcount++;
 			*conp->vc_uni_pagedir_loc = q;
 			con_release_unimap(p);
@@ -467,6 +497,7 @@ static int con_unify_unimap(struct vc_data *conp, struct uni_pagedir *p)
 			return 1;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -488,7 +519,9 @@ con_insert_unipair(struct uni_pagedir *p, u_short unicode, u_short fontpos)
 	if (!p2) {
 		p2 = p1[n] = kmalloc(64*sizeof(u16), GFP_KERNEL);
 		if (!p2) return -ENOMEM;
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(p2, 0xff, 64*sizeof(u16)); /* No glyphs for the characters (yet) */
+}
 	}
 
 	p2[unicode & 0x3f] = fontpos;
@@ -507,18 +540,26 @@ static int con_do_clear_unimap(struct vc_data *vc)
 	if (!p || --p->refcount) {
 		q = kzalloc(sizeof(*p), GFP_KERNEL);
 		if (!q) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				p->refcount++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
 		}
 		q->refcount=1;
 		*vc->vc_uni_pagedir_loc = q;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (p == dflt) dflt = NULL;
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p->refcount++;
+}
 		p->sum = 0;
 		con_release_unimap(p);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -538,7 +579,9 @@ int con_set_unimap(struct vc_data *vc, ushort ct, struct unipair __user *list)
 	struct unipair *unilist, *plist;
 
 	if (!ct)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	unilist = memdup_user(list, ct * sizeof(struct unipair));
 	if (IS_ERR(unilist))
@@ -661,16 +704,23 @@ int con_set_default_unimap(struct vc_data *vc)
 	struct uni_pagedir *p;
 
 	if (dflt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = *vc->vc_uni_pagedir_loc;
 		if (p == dflt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dflt->refcount++;
 		*vc->vc_uni_pagedir_loc = dflt;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (p && !--p->refcount) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			con_release_unimap(p);
 			kfree(p);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 	
@@ -678,7 +728,9 @@ int con_set_default_unimap(struct vc_data *vc)
 
 	err = con_do_clear_unimap(vc);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
     
 	p = *vc->vc_uni_pagedir_loc;
 	q = dfont_unitable;
@@ -687,10 +739,13 @@ int con_set_default_unimap(struct vc_data *vc)
 		for (j = dfont_unicount[i]; j; j--) {
 			err1 = con_insert_unipair(p, *(q++), i);
 			if (err1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = err1;
+}
 		}
 			
 	if (con_unify_unimap(vc, p)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dflt = *vc->vc_uni_pagedir_loc;
 		return err;
 	}
@@ -715,7 +770,9 @@ int con_copy_unimap(struct vc_data *dst_vc, struct vc_data *src_vc)
 	struct uni_pagedir *q;
 
 	if (!*src_vc->vc_uni_pagedir_loc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (*dst_vc->vc_uni_pagedir_loc == *src_vc->vc_uni_pagedir_loc)
 		return 0;
 	con_free_unimap(dst_vc);
@@ -743,7 +800,9 @@ int con_get_unimap(struct vc_data *vc, ushort ct, ushort __user *uct, struct uni
 
 	unilist = kmalloc_array(ct, sizeof(struct unipair), GFP_KERNEL);
 	if (!unilist)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	console_lock();
 
@@ -791,12 +850,14 @@ int con_get_unimap(struct vc_data *vc, ushort ct, ushort __user *uct, struct uni
 u32 conv_8bit_to_uni(unsigned char c)
 {
 	unsigned short uni = translations[USER_MAP][c];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return uni == (0xf000 | c) ? c : uni;
 }
 
 int conv_uni_to_8bit(u32 uni)
 {
 	int c;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (c = 0; c < 0x100; c++)
 		if (translations[USER_MAP][c] == uni ||
 		   (translations[USER_MAP][c] == (c | 0xf000) && uni == c))
@@ -813,11 +874,17 @@ conv_uni_to_pc(struct vc_data *conp, long ucs)
   
 	/* Only 16-bit codes supported at this time */
 	if (ucs > 0xffff)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -4;		/* Not found */
+}
 	else if (ucs < 0x20)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;		/* Not a printable character */
+}
 	else if (ucs == 0xfeff || (ucs >= 0x200b && ucs <= 0x200f))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -2;			/* Zero-width space */
+}
 	/*
 	 * UNI_DIRECT_BASE indicates the start of the region in the User Zone
 	 * which always has a 1:1 mapping to the currently loaded font.  The
@@ -827,14 +894,18 @@ conv_uni_to_pc(struct vc_data *conp, long ucs)
 		return ucs & UNI_DIRECT_MASK;
   
 	if (!*conp->vc_uni_pagedir_loc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -3;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	p = *conp->vc_uni_pagedir_loc;
 	if ((p1 = p->uni_pgdir[ucs >> 11]) &&
 	    (p2 = p1[(ucs >> 6) & 0x1f]) &&
 	    (h = p2[ucs & 0x3f]) < MAX_GLYPH)
 		return h;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -4;		/* not found */
 }
 
diff --git a/drivers/tty/vt/keyboard.c b/drivers/tty/vt/keyboard.c
index f416626..5d7398e 100644
--- a/drivers/tty/vt/keyboard.c
+++ b/drivers/tty/vt/keyboard.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Written for linux by Johan Myreen as a translation from
  * the assembly version by Linus (with diacriticals added)
@@ -141,12 +143,14 @@ static ATOMIC_NOTIFIER_HEAD(keyboard_notifier_list);
 
 int register_keyboard_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_chain_register(&keyboard_notifier_list, nb);
 }
 EXPORT_SYMBOL_GPL(register_keyboard_notifier);
 
 int unregister_keyboard_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_chain_unregister(&keyboard_notifier_list, nb);
 }
 EXPORT_SYMBOL_GPL(unregister_keyboard_notifier);
@@ -186,6 +190,7 @@ static int getkeycode(unsigned int scancode)
 		.error	= -ENODEV,
 	};
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(d.ke.scancode, &scancode, sizeof(scancode));
 
 	input_handler_for_each_handle(&kbd_handler, &d, getkeycode_helper);
@@ -213,6 +218,7 @@ static int setkeycode(unsigned int scancode, unsigned int keycode)
 		.error	= -ENODEV,
 	};
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(d.ke.scancode, &scancode, sizeof(scancode));
 
 	input_handler_for_each_handle(&kbd_handler, &d, setkeycode_helper);
@@ -230,6 +236,7 @@ static int kd_sound_helper(struct input_handle *handle, void *data)
 	unsigned int *hz = data;
 	struct input_dev *dev = handle->dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(EV_SND, dev->evbit)) {
 		if (test_bit(SND_TONE, dev->sndbit)) {
 			input_inject_event(handle, EV_SND, SND_TONE, *hz);
@@ -254,6 +261,7 @@ static DEFINE_TIMER(kd_mksound_timer, kd_nosound, 0, 0);
 
 void kd_mksound(unsigned int hz, unsigned int ticks)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	del_timer_sync(&kd_mksound_timer);
 
 	input_handler_for_each_handle(&kbd_handler, &hz, kd_sound_helper);
@@ -272,6 +280,7 @@ static int kbd_rate_helper(struct input_handle *handle, void *data)
 	struct input_dev *dev = handle->dev;
 	struct kbd_repeat *rpt = data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(EV_REP, dev->evbit)) {
 
 		if (rpt[0].delay > 0)
@@ -303,12 +312,14 @@ int kbd_rate(struct kbd_repeat *rpt)
  */
 static void put_queue(struct vc_data *vc, int ch)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_insert_flip_char(&vc->port, ch, 0);
 	tty_schedule_flip(&vc->port);
 }
 
 static void puts_queue(struct vc_data *vc, char *cp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (*cp) {
 		tty_insert_flip_char(&vc->port, *cp, 0);
 		cp++;
@@ -320,6 +331,7 @@ static void applkey(struct vc_data *vc, int key, char mode)
 {
 	static char buf[] = { 0x1b, 'O', 0x00, 0x00 };
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	buf[1] = (mode ? 'O' : '[');
 	buf[2] = key;
 	puts_queue(vc, buf);
@@ -333,6 +345,7 @@ static void applkey(struct vc_data *vc, int key, char mode)
  */
 static void to_utf8(struct vc_data *vc, uint c)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (c < 0x80)
 		/*  0******* */
 		put_queue(vc, c);
@@ -373,14 +386,20 @@ static void do_compute_shiftstate(void)
 	memset(shift_down, 0, sizeof(shift_down));
 
 	for_each_set_bit(k, key_down, min(NR_KEYS, KEY_CNT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sym = U(key_maps[0][k]);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (KTYP(sym) != KT_SHIFT && KTYP(sym) != KT_SLOCK)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		val = KVAL(sym);
 		if (val == KVAL(K_CAPSSHIFT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = KVAL(K_SHIFT);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shift_down[val]++;
 		shift_state |= BIT(val);
 	}
@@ -390,6 +409,7 @@ static void do_compute_shiftstate(void)
 void compute_shiftstate(void)
 {
 	unsigned long flags;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&kbd_event_lock, flags);
 	do_compute_shiftstate();
 	spin_unlock_irqrestore(&kbd_event_lock, flags);
@@ -410,6 +430,7 @@ static unsigned int handle_diacr(struct vc_data *vc, unsigned int ch)
 	diacr = 0;
 
 	if ((d & ~0xff) == BRL_UC_ROW) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((ch & ~0xff) == BRL_UC_ROW)
 			return d | ch;
 	} else {
@@ -437,6 +458,7 @@ static unsigned int handle_diacr(struct vc_data *vc, unsigned int ch)
  */
 static void fn_enter(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (diacr) {
 		if (kbd->kbdmode == VC_UNICODE)
 			to_utf8(vc, diacr);
@@ -455,6 +477,7 @@ static void fn_enter(struct vc_data *vc)
 
 static void fn_caps_toggle(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rep)
 		return;
 
@@ -463,6 +486,7 @@ static void fn_caps_toggle(struct vc_data *vc)
 
 static void fn_caps_on(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rep)
 		return;
 
@@ -471,6 +495,7 @@ static void fn_caps_on(struct vc_data *vc)
 
 static void fn_show_ptregs(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pt_regs *regs = get_irq_regs();
 
 	if (regs)
@@ -481,6 +506,7 @@ static void fn_hold(struct vc_data *vc)
 {
 	struct tty_struct *tty = vc->port.tty;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rep || !tty)
 		return;
 
@@ -497,6 +523,7 @@ static void fn_hold(struct vc_data *vc)
 
 static void fn_num(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (vc_kbd_mode(kbd, VC_APPLIC))
 		applkey(vc, 'P', 1);
 	else
@@ -511,6 +538,7 @@ static void fn_num(struct vc_data *vc)
  */
 static void fn_bare_num(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!rep)
 		chg_vc_kbd_led(kbd, VC_NUMLOCK);
 }
@@ -527,7 +555,9 @@ static void fn_dec_console(struct vc_data *vc)
 
 	/* Currently switching?  Queue this next switch relative to that. */
 	if (want_console != -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cur = want_console;
+}
 
 	for (i = cur - 1; i != cur; i--) {
 		if (i == -1)
@@ -544,7 +574,9 @@ static void fn_inc_console(struct vc_data *vc)
 
 	/* Currently switching?  Queue this next switch relative to that. */
 	if (want_console != -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cur = want_console;
+}
 
 	for (i = cur+1; i != cur; i++) {
 		if (i == MAX_NR_CONSOLES)
@@ -557,42 +589,50 @@ static void fn_inc_console(struct vc_data *vc)
 
 static void fn_send_intr(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tty_insert_flip_char(&vc->port, 0, TTY_BREAK);
 	tty_schedule_flip(&vc->port);
 }
 
 static void fn_scroll_forw(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scrollfront(vc, 0);
 }
 
 static void fn_scroll_back(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scrollback(vc);
 }
 
 static void fn_show_mem(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	show_mem(0, NULL);
 }
 
 static void fn_show_state(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	show_state();
 }
 
 static void fn_boot_it(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ctrl_alt_del();
 }
 
 static void fn_compose(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dead_key_next = true;
 }
 
 static void fn_spawn_con(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&vt_spawn_con.lock);
 	if (vt_spawn_con.pid)
 		if (kill_pid(vt_spawn_con.pid, vt_spawn_con.sig, 1)) {
@@ -610,6 +650,7 @@ static void fn_SAK(struct vc_data *vc)
 
 static void fn_null(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	do_compute_shiftstate();
 }
 
@@ -622,6 +663,7 @@ static void k_ignore(struct vc_data *vc, unsigned char value, char up_flag)
 
 static void k_spec(struct vc_data *vc, unsigned char value, char up_flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (up_flag)
 		return;
 	if (value >= ARRAY_SIZE(fn_handler))
@@ -636,11 +678,13 @@ static void k_spec(struct vc_data *vc, unsigned char value, char up_flag)
 
 static void k_lowercase(struct vc_data *vc, unsigned char value, char up_flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_err("k_lowercase was called - impossible\n");
 }
 
 static void k_unicode(struct vc_data *vc, unsigned int value, char up_flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (up_flag)
 		return;		/* no action, if this is a key release */
 
@@ -668,6 +712,7 @@ static void k_unicode(struct vc_data *vc, unsigned int value, char up_flag)
  */
 static void k_deadunicode(struct vc_data *vc, unsigned int value, char up_flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (up_flag)
 		return;
 
@@ -676,11 +721,13 @@ static void k_deadunicode(struct vc_data *vc, unsigned int value, char up_flag)
 
 static void k_self(struct vc_data *vc, unsigned char value, char up_flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	k_unicode(vc, conv_8bit_to_uni(value), up_flag);
 }
 
 static void k_dead2(struct vc_data *vc, unsigned char value, char up_flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	k_deadunicode(vc, value, up_flag);
 }
 
@@ -696,6 +743,7 @@ static void k_dead(struct vc_data *vc, unsigned char value, char up_flag)
 
 static void k_cons(struct vc_data *vc, unsigned char value, char up_flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (up_flag)
 		return;
 
@@ -704,6 +752,7 @@ static void k_cons(struct vc_data *vc, unsigned char value, char up_flag)
 
 static void k_fn(struct vc_data *vc, unsigned char value, char up_flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (up_flag)
 		return;
 
@@ -719,7 +768,9 @@ static void k_cur(struct vc_data *vc, unsigned char value, char up_flag)
 	static const char cur_chars[] = "BDCA";
 
 	if (up_flag)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	applkey(vc, cur_chars[value], vc_kbd_mode(kbd, VC_CKMODE));
 }
@@ -730,7 +781,9 @@ static void k_pad(struct vc_data *vc, unsigned char value, char up_flag)
 	static const char app_map[] = "pqrstuvwxylSRQMnnmPQS";
 
 	if (up_flag)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;		/* no action, if this is a key release */
+}
 
 	/* kludge... shift forces cursor/number keys */
 	if (vc_kbd_mode(kbd, VC_APPLIC) && !shift_down[KG_SHIFT]) {
@@ -788,7 +841,9 @@ static void k_shift(struct vc_data *vc, unsigned char value, char up_flag)
 	int old_state = shift_state;
 
 	if (rep)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	/*
 	 * Mimic typewriter:
 	 * a CapsShift key acts like Shift but undoes CapsLock
@@ -826,6 +881,7 @@ static void k_shift(struct vc_data *vc, unsigned char value, char up_flag)
 
 static void k_meta(struct vc_data *vc, unsigned char value, char up_flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (up_flag)
 		return;
 
@@ -841,7 +897,9 @@ static void k_ascii(struct vc_data *vc, unsigned char value, char up_flag)
 	int base;
 
 	if (up_flag)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (value < 10) {
 		/* decimal input of code, while Alt depressed */
@@ -860,6 +918,7 @@ static void k_ascii(struct vc_data *vc, unsigned char value, char up_flag)
 
 static void k_lock(struct vc_data *vc, unsigned char value, char up_flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (up_flag || rep)
 		return;
 
@@ -868,6 +927,7 @@ static void k_lock(struct vc_data *vc, unsigned char value, char up_flag)
 
 static void k_slock(struct vc_data *vc, unsigned char value, char up_flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	k_shift(vc, value, up_flag);
 	if (up_flag || rep)
 		return;
@@ -895,7 +955,9 @@ static void k_brlcommit(struct vc_data *vc, unsigned int pattern, char up_flag)
 	static unsigned committed;
 
 	if (!brl_nbchords)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		k_deadunicode(vc, BRL_UC_ROW | pattern, up_flag);
+}
 	else {
 		committed |= pattern;
 		chords++;
@@ -913,6 +975,7 @@ static void k_brl(struct vc_data *vc, unsigned char value, char up_flag)
 	static unsigned long releasestart;
 
 	if (kbd->kbdmode != VC_UNICODE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!up_flag)
 			pr_warn("keyboard mode must be unicode for braille patterns\n");
 		return;
@@ -1005,6 +1068,7 @@ static void kbd_propagate_led_state(unsigned int old_state,
 	unsigned int changed = old_state ^ new_state;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(kbd_led_triggers); i++) {
 		trigger = &kbd_led_triggers[i];
 
@@ -1019,6 +1083,7 @@ static int kbd_update_leds_helper(struct input_handle *handle, void *data)
 {
 	unsigned int led_state = *(unsigned int *)data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(EV_LED, handle->dev->evbit))
 		kbd_propagate_led_state(~led_state, led_state);
 
@@ -1030,6 +1095,7 @@ static void kbd_init_leds(void)
 	int error;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(kbd_led_triggers); i++) {
 		error = led_trigger_register(&kbd_led_triggers[i].trigger);
 		if (error)
@@ -1074,12 +1140,14 @@ static void kbd_init_leds(void)
  */
 static unsigned char getledstate(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ledstate & 0xff;
 }
 
 void setledstate(struct kbd_struct *kb, unsigned int led)
 {
         unsigned long flags;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
         spin_lock_irqsave(&led_lock, flags);
 	if (!(led & ~7)) {
 		ledioctl = led;
@@ -1096,7 +1164,9 @@ static inline unsigned char getleds(void)
 	struct kbd_struct *kb = kbd_table + fg_console;
 
 	if (kb->ledmode == LED_SHOW_IOCTL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ledioctl;
+}
 
 	return kb->ledflagstate;
 }
@@ -1114,6 +1184,7 @@ int vt_get_leds(int console, int flag)
 	int ret;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&led_lock, flags);
 	ret = vc_kbd_led(kb, flag);
 	spin_unlock_irqrestore(&led_lock, flags);
@@ -1153,6 +1224,7 @@ void vt_kbd_con_start(int console)
 {
 	struct kbd_struct *kb = kbd_table + console;
 	unsigned long flags;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&led_lock, flags);
 	clr_vc_kbd_led(kb, VC_SCROLLOCK);
 	set_leds();
@@ -1170,6 +1242,7 @@ void vt_kbd_con_stop(int console)
 {
 	struct kbd_struct *kb = kbd_table + console;
 	unsigned long flags;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&led_lock, flags);
 	set_vc_kbd_led(kb, VC_SCROLLOCK);
 	set_leds();
@@ -1309,8 +1382,10 @@ static void kbd_rawcode(unsigned char data)
 
 	kbd = kbd_table + vc->vc_num;
 	if (kbd->kbdmode == VC_RAW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_queue(vc, data);
 }
+}
 
 static void kbd_keycode(unsigned int keycode, int down, int hw_raw)
 {
@@ -1325,6 +1400,7 @@ static void kbd_keycode(unsigned int keycode, int down, int hw_raw)
 
 	tty = vc->port.tty;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tty && (!tty->driver_data)) {
 		/* No driver data? Strange. Okay we fix it then. */
 		tty->driver_data = vc;
@@ -1474,17 +1550,27 @@ static bool kbd_match(struct input_handler *handler, struct input_dev *dev)
 	int i;
 
 	if (test_bit(EV_SND, dev->evbit))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	if (test_bit(EV_KEY, dev->evbit)) {
 		for (i = KEY_RESERVED; i < BTN_MISC; i++)
 			if (test_bit(i, dev->keybit))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return true;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = KEY_BRL_DOT1; i <= KEY_BRL_DOT10; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (test_bit(i, dev->keybit))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return true;
+}
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1502,7 +1588,9 @@ static int kbd_connect(struct input_handler *handler, struct input_dev *dev,
 
 	handle = kzalloc(sizeof(struct input_handle), GFP_KERNEL);
 	if (!handle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	handle->dev = dev;
 	handle->handler = handler;
@@ -1516,6 +1604,7 @@ static int kbd_connect(struct input_handler *handler, struct input_dev *dev,
 	if (error)
 		goto err_unregister_handle;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  err_unregister_handle:
@@ -1527,6 +1616,7 @@ static int kbd_connect(struct input_handler *handler, struct input_dev *dev,
 
 static void kbd_disconnect(struct input_handle *handle)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	input_close_device(handle);
 	input_unregister_handle(handle);
 	kfree(handle);
@@ -1587,11 +1677,14 @@ int __init kbd_init(void)
 		kbd_table[i].kbdmode = default_utf8 ? VC_UNICODE : VC_XLATE;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kbd_init_leds();
 
 	error = input_register_handler(&kbd_handler);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	tasklet_enable(&keyboard_tasklet);
 	tasklet_schedule(&keyboard_tasklet);
@@ -1626,7 +1719,9 @@ int vt_do_diacrit(unsigned int cmd, void __user *udp, int perm)
 		dia = kmalloc(MAX_DIACR * sizeof(struct kbdiacr),
 								GFP_KERNEL);
 		if (!dia)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
 		/* Lock the diacriticals table, make a copy and then
 		   copy it after we unlock */
@@ -1765,6 +1860,7 @@ int vt_do_kdskbmode(int console, unsigned int arg)
 	int ret = 0;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&kbd_event_lock, flags);
 	switch(arg) {
 	case K_RAW:
@@ -1805,6 +1901,7 @@ int vt_do_kdskbmeta(int console, unsigned int arg)
 	int ret = 0;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&kbd_event_lock, flags);
 	switch(arg) {
 	case K_METABIT:
@@ -1827,7 +1924,9 @@ int vt_do_kbkeycode_ioctl(int cmd, struct kbkeycode __user *user_kbkc,
 	int kc = 0;
 
 	if (copy_from_user(&tmp, user_kbkc, sizeof(struct kbkeycode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	switch (cmd) {
 	case KDGETKEYCODE:
 		kc = getkeycode(tmp.scancode);
@@ -1856,48 +1955,70 @@ int vt_do_kdsk_ioctl(int cmd, struct kbentry __user *user_kbe, int perm,
 	unsigned long flags;
 
 	if (copy_from_user(&tmp, user_kbe, sizeof(struct kbentry)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	if (!capable(CAP_SYS_TTY_CONFIG))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		perm = 0;
+}
 
 	switch (cmd) {
 	case KDGKBENT:
 		/* Ensure another thread doesn't free it under us */
 		spin_lock_irqsave(&kbd_event_lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key_map = key_maps[s];
 		if (key_map) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		    val = U(key_map[i]);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		    if (kb->kbdmode != VC_UNICODE && KTYP(val) >= NR_TYPES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = K_HOLE;
+}
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		    val = (i ? K_HOLE : K_NOSUCHMAP);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irqrestore(&kbd_event_lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return put_user(val, &user_kbe->kb_value);
 	case KDSKBENT:
 		if (!perm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 		if (!i && v == K_NOSUCHMAP) {
 			spin_lock_irqsave(&kbd_event_lock, flags);
 			/* deallocate map */
 			key_map = key_maps[s];
 			if (s && key_map) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			    key_maps[s] = NULL;
 			    if (key_map[0] == U(K_ALLOCATED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					kfree(key_map);
 					keymap_count--;
 			    }
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irqrestore(&kbd_event_lock, flags);
 			break;
 		}
 
 		if (KTYP(v) < NR_TYPES) {
 		    if (KVAL(v) > max_vals[KTYP(v)])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 		} else
 		    if (kb->kbdmode != VC_UNICODE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 
 		/* ++Geert: non-PC keyboards may generate keycode zero */
 #if !defined(__mc68000__) && !defined(__powerpc__)
@@ -1906,9 +2027,12 @@ int vt_do_kdsk_ioctl(int cmd, struct kbentry __user *user_kbe, int perm,
 			break;
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new_map = kmalloc(sizeof(plain_map), GFP_KERNEL);
 		if (!new_map)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 		spin_lock_irqsave(&kbd_event_lock, flags);
 		key_map = key_maps[s];
 		if (key_map == NULL) {
@@ -1916,6 +2040,7 @@ int vt_do_kdsk_ioctl(int cmd, struct kbentry __user *user_kbe, int perm,
 
 			if (keymap_count >= MAX_NR_OF_USER_KEYMAPS &&
 			    !capable(CAP_SYS_RESOURCE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock_irqrestore(&kbd_event_lock, flags);
 				kfree(new_map);
 				return -EPERM;
@@ -1936,6 +2061,7 @@ int vt_do_kdsk_ioctl(int cmd, struct kbentry __user *user_kbe, int perm,
 		 * Attention Key.
 		 */
 		if (((ov == K_SAK) || (v == K_SAK)) && !capable(CAP_SYS_ADMIN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irqrestore(&kbd_event_lock, flags);
 			return -EPERM;
 		}
@@ -1946,6 +2072,7 @@ int vt_do_kdsk_ioctl(int cmd, struct kbentry __user *user_kbe, int perm,
 		spin_unlock_irqrestore(&kbd_event_lock, flags);
 		break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 #undef i
@@ -1966,10 +2093,14 @@ int vt_do_kdgkb_ioctl(int cmd, struct kbsentry __user *user_kdgkb, int perm)
 	int ret;
 
 	if (!capable(CAP_SYS_TTY_CONFIG))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		perm = 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kbs = kmalloc(sizeof(*kbs), GFP_KERNEL);
 	if (!kbs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOMEM;
 		goto reterr;
 	}
diff --git a/drivers/tty/vt/vc_screen.c b/drivers/tty/vt/vc_screen.c
index 85b6634..492c87e 100644
--- a/drivers/tty/vt/vc_screen.c
+++ b/drivers/tty/vt/vc_screen.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * Provide access to virtual console memory.
@@ -87,6 +89,7 @@ vcs_notifier(struct notifier_block *nb, unsigned long code, void *_param)
 static void
 vcs_poll_data_free(struct vcs_poll_data *poll)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_vt_notifier(&poll->notifier);
 	kfree(poll);
 }
@@ -97,7 +100,9 @@ vcs_poll_data_get(struct file *file)
 	struct vcs_poll_data *poll = file->private_data, *kill = NULL;
 
 	if (poll)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return poll;
+}
 
 	poll = kzalloc(sizeof(*poll), GFP_KERNEL);
 	if (!poll)
@@ -140,6 +145,7 @@ vcs_poll_data_get(struct file *file)
 static struct vc_data*
 vcs_vc(struct inode *inode, int *viewed)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int currcons = iminor(inode) & 127;
 
 	WARN_CONSOLE_UNLOCKED();
@@ -167,6 +173,7 @@ vcs_size(struct inode *inode)
 	int minor = iminor(inode);
 	struct vc_data *vc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_CONSOLE_UNLOCKED();
 
 	vc = vcs_vc(inode, NULL);
@@ -188,7 +195,9 @@ static loff_t vcs_lseek(struct file *file, loff_t offset, int orig)
 	size = vcs_size(file_inode(file));
 	console_unlock();
 	if (size < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return size;
+}
 	return fixed_size_llseek(file, offset, orig, size);
 }
 
@@ -196,6 +205,7 @@ static loff_t vcs_lseek(struct file *file, loff_t offset, int orig)
 static ssize_t
 vcs_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	unsigned int currcons = iminor(inode);
 	struct vc_data *vc;
@@ -374,6 +384,7 @@ vcs_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
 static ssize_t
 vcs_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	unsigned int currcons = iminor(inode);
 	struct vc_data *vc;
@@ -562,6 +573,7 @@ vcs_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
 static unsigned int
 vcs_poll(struct file *file, poll_table *wait)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct vcs_poll_data *poll = vcs_poll_data_get(file);
 	int ret = DEFAULT_POLLMASK|POLLERR|POLLPRI;
 
@@ -593,6 +605,7 @@ vcs_fasync(int fd, struct file *file, int on)
 static int
 vcs_open(struct inode *inode, struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int currcons = iminor(inode) & 127;
 	int ret = 0;
 	
@@ -608,7 +621,9 @@ static int vcs_release(struct inode *inode, struct file *file)
 	struct vcs_poll_data *poll = file->private_data;
 
 	if (poll)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vcs_poll_data_free(poll);
+}
 	return 0;
 }
 
@@ -634,6 +649,7 @@ void vcs_make_sysfs(int index)
 
 void vcs_remove_sysfs(int index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_destroy(vc_class, MKDEV(VCS_MAJOR, index + 1));
 	device_destroy(vc_class, MKDEV(VCS_MAJOR, index + 129));
 }
@@ -643,7 +659,9 @@ int __init vcs_init(void)
 	unsigned int i;
 
 	if (register_chrdev(VCS_MAJOR, "vcs", &vcs_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("unable to get major %d for vcs device", VCS_MAJOR);
+}
 	vc_class = class_create(THIS_MODULE, "vc");
 
 	device_create(vc_class, NULL, MKDEV(VCS_MAJOR, 0), NULL, "vcs");
diff --git a/drivers/tty/vt/vt.c b/drivers/tty/vt/vt.c
index 2ebaba1..2151cc0 100644
--- a/drivers/tty/vt/vt.c
+++ b/drivers/tty/vt/vt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Copyright (C) 1991, 1992  Linus Torvalds
  */
@@ -252,12 +254,14 @@ static ATOMIC_NOTIFIER_HEAD(vt_notifier_list);
 
 int register_vt_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_chain_register(&vt_notifier_list, nb);
 }
 EXPORT_SYMBOL_GPL(register_vt_notifier);
 
 int unregister_vt_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_chain_unregister(&vt_notifier_list, nb);
 }
 EXPORT_SYMBOL_GPL(unregister_vt_notifier);
@@ -292,7 +296,9 @@ static inline unsigned short *screenpos(struct vc_data *vc, int offset, int view
 	unsigned short *p;
 	
 	if (!viewed)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = (unsigned short *)(vc->vc_origin + offset);
+}
 	else if (!vc->vc_sw->con_screen_pos)
 		p = (unsigned short *)(vc->vc_visible_origin + offset);
 	else
@@ -312,6 +318,7 @@ static inline void scrolldelta(int lines)
 
 void schedule_console_callback(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	schedule_work(&console_work);
 }
 
@@ -321,19 +328,29 @@ static void con_scroll(struct vc_data *vc, unsigned int t, unsigned int b,
 	u16 *clear, *d, *s;
 
 	if (t + nr >= b)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nr = b - t - 1;
+}
 	if (b > vc->vc_rows || t >= b || nr < 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (con_is_visible(vc) && vc->vc_sw->con_scroll(vc, t, b, dir, nr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	s = clear = (u16 *)(vc->vc_origin + vc->vc_size_row * t);
 	d = (u16 *)(vc->vc_origin + vc->vc_size_row * (t + nr));
 
 	if (dir == SM_UP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clear = s + (b - t - nr) * vc->vc_cols;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		swap(s, d);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scr_memmovew(d, s, (b - t - nr) * vc->vc_size_row);
 	scr_memsetw(clear, vc->vc_video_erase_char, vc->vc_size_row * nr);
 }
@@ -359,8 +376,12 @@ static void do_update_region(struct vc_data *vc, unsigned long start, int count)
 		u16 *q = p;
 		while (xx < vc->vc_cols && count) {
 			if (attrib != (scr_readw(p) & 0xff00)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (p > q)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					vc->vc_sw->con_putcs(vc, q, p-q, yy, startx);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				startx = xx;
 				q = p;
 				attrib = scr_readw(p) & 0xff00;
@@ -373,9 +394,11 @@ static void do_update_region(struct vc_data *vc, unsigned long start, int count)
 			vc->vc_sw->con_putcs(vc, q, p-q, yy, startx);
 		if (!count)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xx = 0;
 		yy++;
 		if (vc->vc_sw->con_getxy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p = (u16 *)start;
 			start = vc->vc_sw->con_getxy(vc, start, NULL, NULL);
 		}
@@ -384,6 +407,7 @@ static void do_update_region(struct vc_data *vc, unsigned long start, int count)
 
 void update_region(struct vc_data *vc, unsigned long start, int count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_CONSOLE_UNLOCKED();
 
 	if (con_should_update(vc)) {
@@ -420,20 +444,42 @@ static u8 build_attr(struct vc_data *vc, u8 _color, u8 _intensity, u8 _blink,
 		       (_underline ? 4 : 0) |
 		       (_reverse ? 8 : 0) |
 		       (_blink ? 0x80 : 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (_italic)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		a = (a & 0xF0) | vc->vc_itcolor;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (_underline)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		a = (a & 0xf0) | vc->vc_ulcolor;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (_intensity == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		a = (a & 0xf0) | vc->vc_halfcolor;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (_reverse)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		a = ((a) & 0x88) | ((((a) >> 4) | ((a) << 4)) & 0x77);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (_blink)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		a ^= 0x80;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (_intensity == 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		a ^= 0x08;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (vc->vc_hi_font_mask == 0x100)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		a <<= 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return a;
 	}
 }
@@ -451,6 +497,7 @@ void invert_screen(struct vc_data *vc, int offset, int count, int viewed)
 {
 	unsigned short *p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_CONSOLE_UNLOCKED();
 
 	count /= 2;
@@ -498,6 +545,7 @@ void complement_pos(struct vc_data *vc, int offset)
 	static unsigned short old;
 	static unsigned short oldx, oldy;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_CONSOLE_UNLOCKED();
 
 	if (old_offset != -1 && old_offset >= 0 &&
@@ -535,9 +583,11 @@ static void insert_char(struct vc_data *vc, unsigned int nr)
 	scr_memsetw(p, vc->vc_video_erase_char, nr * 2);
 	vc->vc_need_wrap = 0;
 	if (con_should_update(vc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		do_update_region(vc, (unsigned long) p,
 			vc->vc_cols - vc->vc_x);
 }
+}
 
 static void delete_char(struct vc_data *vc, unsigned int nr)
 {
@@ -548,9 +598,11 @@ static void delete_char(struct vc_data *vc, unsigned int nr)
 			nr * 2);
 	vc->vc_need_wrap = 0;
 	if (con_should_update(vc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		do_update_region(vc, (unsigned long) p,
 			vc->vc_cols - vc->vc_x);
 }
+}
 
 static int softcursor_original = -1;
 
@@ -560,24 +612,38 @@ static void add_softcursor(struct vc_data *vc)
 	u32 type = vc->vc_cursor_type;
 
 	if (! (type & 0x10)) return;
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (softcursor_original != -1) return;
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	softcursor_original = i;
+}
+}
 	i |= ((type >> 8) & 0xff00 );
 	i ^= ((type) & 0xff00 );
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((type & 0x20) && ((softcursor_original & 0x7000) == (i & 0x7000))) i ^= 0x7000;
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((type & 0x40) && ((i & 0x700) == ((i & 0x7000) >> 4))) i ^= 0x0700;
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scr_writew(i, (u16 *) vc->vc_pos);
+}
+}
 	if (con_should_update(vc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vc->vc_sw->con_putc(vc, i, vc->vc_y, vc->vc_x);
 }
+}
 
 static void hide_softcursor(struct vc_data *vc)
 {
 	if (softcursor_original != -1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scr_writew(softcursor_original, (u16 *)vc->vc_pos);
 		if (con_should_update(vc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_sw->con_putc(vc, softcursor_original,
 					vc->vc_y, vc->vc_x);
+}
 		softcursor_original = -1;
 	}
 }
@@ -585,7 +651,9 @@ static void hide_softcursor(struct vc_data *vc)
 static void hide_cursor(struct vc_data *vc)
 {
 	if (vc == sel_cons)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clear_selection();
+}
 	vc->vc_sw->con_cursor(vc, CM_ERASE);
 	hide_softcursor(vc);
 }
@@ -593,16 +661,22 @@ static void hide_cursor(struct vc_data *vc)
 static void set_cursor(struct vc_data *vc)
 {
 	if (!con_is_fg(vc) || console_blanked || vc->vc_mode == KD_GRAPHICS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (vc->vc_deccm) {
 		if (vc == sel_cons)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			clear_selection();
+}
 		add_softcursor(vc);
 		if ((vc->vc_cursor_type & 0x0f) != 1)
 			vc->vc_sw->con_cursor(vc, CM_DRAW);
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hide_cursor(vc);
 }
+}
 
 static void set_origin(struct vc_data *vc)
 {
@@ -627,6 +701,7 @@ static void save_screen(struct vc_data *vc)
 
 static void flush_scrollback(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_CONSOLE_UNLOCKED();
 
 	if (vc->vc_sw->con_flush_scrollback)
@@ -643,6 +718,7 @@ void clear_buffer_attributes(struct vc_data *vc)
 	int count = vc->vc_screenbuf_size / 2;
 	int mask = vc->vc_hi_font_mask | 0xff;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (; count > 0; count--, p++) {
 		scr_writew((scr_readw(p)&mask) | (vc->vc_video_erase_char & ~mask), p);
 	}
@@ -657,24 +733,35 @@ void redraw_screen(struct vc_data *vc, int is_switch)
 	if (!vc) {
 		/* strange ... */
 		/* printk("redraw_screen: tty %d not allocated ??\n", new_console+1); */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
 	if (is_switch) {
 		struct vc_data *old_vc = vc_cons[fg_console].d;
 		if (old_vc == vc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!con_is_visible(vc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			redraw = 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*vc->vc_display_fg = vc;
 		fg_console = vc->vc_num;
 		hide_cursor(old_vc);
 		if (!con_is_visible(old_vc)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			save_screen(old_vc);
 			set_origin(old_vc);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tty0dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sysfs_notify(&tty0dev->kobj, NULL, "active");
+}
 	} else {
 		hide_cursor(vc);
 		redraw = 1;
@@ -694,6 +781,7 @@ void redraw_screen(struct vc_data *vc, int is_switch)
 		 * without overly complex code.
 		 */
 		if (old_was_color != vc->vc_can_do_color) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			update_attr(vc);
 			clear_buffer_attributes(vc);
 		}
@@ -705,6 +793,7 @@ void redraw_screen(struct vc_data *vc, int is_switch)
 	}
 	set_cursor(vc);
 	if (is_switch) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_leds();
 		compute_shiftstate();
 		notify_update(vc);
@@ -724,7 +813,9 @@ static void visual_init(struct vc_data *vc, int num, int init)
 {
 	/* ++Geert: vc->vc_sw->con_init determines console size */
 	if (vc->vc_sw)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		module_put(vc->vc_sw->owner);
+}
 	vc->vc_sw = conswitchp;
 #ifndef VT_SINGLE_DRIVER
 	if (con_driver_map[num])
@@ -734,7 +825,9 @@ static void visual_init(struct vc_data *vc, int num, int init)
 	vc->vc_num = num;
 	vc->vc_display_fg = &master_display_fg;
 	if (vc->vc_uni_pagedir_loc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		con_free_unimap(vc);
+}
 	vc->vc_uni_pagedir_loc = &vc->vc_uni_pagedir;
 	vc->vc_uni_pagedir = NULL;
 	vc->vc_hi_font_mask = 0;
@@ -744,7 +837,9 @@ static void visual_init(struct vc_data *vc, int num, int init)
 	vc->vc_cur_blink_ms = DEFAULT_CURSOR_BLINK_MS;
 	vc->vc_sw->con_init(vc, init);
 	if (!vc->vc_complement_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vc->vc_complement_mask = vc->vc_can_do_color ? 0x7700 : 0x0800;
+}
 	vc->vc_s_complement_mask = vc->vc_complement_mask;
 	vc->vc_size_row = vc->vc_cols << 1;
 	vc->vc_screenbuf_size = vc->vc_rows * vc->vc_size_row;
@@ -758,10 +853,14 @@ int vc_allocate(unsigned int currcons)	/* return 0 on success */
 	WARN_CONSOLE_UNLOCKED();
 
 	if (currcons >= MAX_NR_CONSOLES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	if (vc_cons[currcons].d)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* due to the granularity of kmalloc, we waste some memory here */
 	/* the alloc is done in two steps, to optimize the common situation
@@ -771,17 +870,25 @@ int vc_allocate(unsigned int currcons)	/* return 0 on success */
 	   even if only as a historical artifact.  --mj, July 1998 */
 	param.vc = vc = kzalloc(sizeof(struct vc_data), GFP_KERNEL);
 	if (!vc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vc_cons[currcons].d = vc;
 	tty_port_init(&vc->port);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_WORK(&vc_cons[currcons].SAK_work, vc_SAK);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	visual_init(vc, currcons, 1);
 
 	if (!*vc->vc_uni_pagedir_loc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		con_set_default_unimap(vc);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vc->vc_screenbuf = kmalloc(vc->vc_screenbuf_size, GFP_KERNEL);
 	if (!vc->vc_screenbuf)
 		goto err_free;
@@ -789,8 +896,11 @@ int vc_allocate(unsigned int currcons)	/* return 0 on success */
 	/* If no drivers have overridden us and the user didn't pass a
 	   boot option, default to displaying the cursor */
 	if (global_cursor_default == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		global_cursor_default = 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vc_init(vc, vc->vc_rows, vc->vc_cols, 1);
 	vcs_make_sysfs(currcons);
 	atomic_notifier_call_chain(&vt_notifier_list, VT_ALLOCATE, &param);
@@ -808,6 +918,7 @@ static inline int resize_screen(struct vc_data *vc, int width, int height,
 	/* Resizes the resolution of the display adapater */
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (vc->vc_mode != KD_GRAPHICS && vc->vc_sw->con_resize)
 		err = vc->vc_sw->con_resize(vc, width, height, user);
 
@@ -848,6 +959,7 @@ static int vc_do_resize(struct tty_struct *tty, struct vc_data *vc,
 	unsigned int user;
 	unsigned short *newscreen;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_CONSOLE_UNLOCKED();
 
 	if (!vc)
@@ -970,6 +1082,7 @@ static int vc_do_resize(struct tty_struct *tty, struct vc_data *vc,
 
 int vc_resize(struct vc_data *vc, unsigned int cols, unsigned int rows)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return vc_do_resize(vc->port.tty, vc, cols, rows);
 }
 
@@ -1000,6 +1113,7 @@ struct vc_data *vc_deallocate(unsigned int currcons)
 {
 	struct vc_data *vc = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_CONSOLE_UNLOCKED();
 
 	if (vc_cons_allocated(currcons)) {
@@ -1068,25 +1182,35 @@ static void gotoxy(struct vc_data *vc, int new_x, int new_y)
 	int min_y, max_y;
 
 	if (new_x < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vc->vc_x = 0;
+}
 	else {
 		if (new_x >= vc->vc_cols)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_x = vc->vc_cols - 1;
+}
 		else
 			vc->vc_x = new_x;
 	}
 
  	if (vc->vc_decom) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		min_y = vc->vc_top;
 		max_y = vc->vc_bottom;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		min_y = 0;
 		max_y = vc->vc_rows;
 	}
 	if (new_y < min_y)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vc->vc_y = min_y;
+}
 	else if (new_y >= max_y)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vc->vc_y = max_y - 1;
+}
 	else
 		vc->vc_y = new_y;
 	vc->vc_pos = vc->vc_origin + vc->vc_y * vc->vc_size_row + (vc->vc_x<<1);
@@ -1101,11 +1225,13 @@ static void gotoxay(struct vc_data *vc, int new_x, int new_y)
 
 void scrollback(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scrolldelta(-(vc->vc_rows / 2));
 }
 
 void scrollfront(struct vc_data *vc, int lines)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!lines)
 		lines = vc->vc_rows / 2;
 	scrolldelta(lines);
@@ -1149,6 +1275,7 @@ static inline void cr(struct vc_data *vc)
 
 static inline void bs(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (vc->vc_x) {
 		vc->vc_pos -= 2;
 		vc->vc_x--;
@@ -1182,7 +1309,9 @@ static void csi_J(struct vc_data *vc, int vpar)
 			flush_scrollback(vc);
 			set_origin(vc);
 			if (con_is_visible(vc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				update_screen(vc);
+}
 			/* fall through */
 		case 2: /* erase whole display */
 			count = vc->vc_cols * vc->vc_rows;
@@ -1229,7 +1358,9 @@ static void csi_X(struct vc_data *vc, int vpar) /* erase the following vpar posi
 	int count;
 
 	if (!vpar)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vpar++;
+}
 	count = (vpar > vc->vc_cols - vc->vc_x) ? (vc->vc_cols - vc->vc_x) : vpar;
 
 	scr_memsetw((unsigned short *)vc->vc_pos, vc->vc_video_erase_char, 2 * count);
@@ -1252,6 +1383,7 @@ struct rgb { u8 r; u8 g; u8 b; };
 
 static void rgb_from_256(int i, struct rgb *c)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (i < 8) {            /* Standard colours. */
 		c->r = i&1 ? 0xaa : 0x00;
 		c->g = i&2 ? 0xaa : 0x00;
@@ -1270,6 +1402,7 @@ static void rgb_from_256(int i, struct rgb *c)
 
 static void rgb_foreground(struct vc_data *vc, const struct rgb *c)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u8 hue = 0, max = max3(c->r, c->g, c->b);
 
 	if (c->r > max / 2)
@@ -1313,7 +1446,9 @@ static int vc_t416_color(struct vc_data *vc, int i,
 
 	i++;
 	if (i > vc->vc_npar)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return i;
+}
 
 	if (vc->vc_par[i] == 5 && i + 1 <= vc->vc_npar) {
 		/* 256 colours */
@@ -1419,16 +1554,23 @@ static void csi_m(struct vc_data *vc)
 			break;
 		default:
 			if (vc->vc_par[i] >= 90 && vc->vc_par[i] <= 107) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (vc->vc_par[i] < 100)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					vc->vc_intensity = 2;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_par[i] -= 60;
 			}
 			if (vc->vc_par[i] >= 30 && vc->vc_par[i] <= 37)
 				vc->vc_color = color_table[vc->vc_par[i] - 30]
 					| (vc->vc_color & 0xf0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			else if (vc->vc_par[i] >= 40 && vc->vc_par[i] <= 47)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_color = (color_table[vc->vc_par[i] - 40] << 4)
 					| (vc->vc_color & 0x0f);
+}
 			break;
 		}
 	update_attr(vc);
@@ -1453,11 +1595,13 @@ static void cursor_report(struct vc_data *vc, struct tty_struct *tty)
 
 static inline void status_report(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	respond_string("\033[0n", tty->port);	/* Terminal ok */
 }
 
 static inline void respond_ID(struct tty_struct *tty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	respond_string(VT102ID, tty->port);
 }
 
@@ -1473,6 +1617,7 @@ void mouse_report(struct tty_struct *tty, int butt, int mrx, int mry)
 /* invoked via ioctl(TIOCLINUX) and through set_selection */
 int mouse_reporting(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return vc_cons[fg_console].d->vc_report_mouse;
 }
 
@@ -1481,6 +1626,7 @@ static void set_mode(struct vc_data *vc, int on_off)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i <= vc->vc_npar; i++)
 		if (vc->vc_ques) {
 			switch(vc->vc_par[i]) {	/* DEC private modes set/reset */
@@ -1548,6 +1694,7 @@ static void set_mode(struct vc_data *vc, int on_off)
 /* console_lock is held */
 static void setterm_command(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch(vc->vc_par[0]) {
 		case 1:	/* set color for underline mode */
 			if (vc->vc_can_do_color &&
@@ -1615,6 +1762,7 @@ static void setterm_command(struct vc_data *vc)
 /* console_lock is held */
 static void csi_at(struct vc_data *vc, unsigned int nr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nr > vc->vc_cols - vc->vc_x)
 		nr = vc->vc_cols - vc->vc_x;
 	else if (!nr)
@@ -1625,6 +1773,7 @@ static void csi_at(struct vc_data *vc, unsigned int nr)
 /* console_lock is held */
 static void csi_L(struct vc_data *vc, unsigned int nr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nr > vc->vc_rows - vc->vc_y)
 		nr = vc->vc_rows - vc->vc_y;
 	else if (!nr)
@@ -1636,6 +1785,7 @@ static void csi_L(struct vc_data *vc, unsigned int nr)
 /* console_lock is held */
 static void csi_P(struct vc_data *vc, unsigned int nr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nr > vc->vc_cols - vc->vc_x)
 		nr = vc->vc_cols - vc->vc_x;
 	else if (!nr)
@@ -1646,6 +1796,7 @@ static void csi_P(struct vc_data *vc, unsigned int nr)
 /* console_lock is held */
 static void csi_M(struct vc_data *vc, unsigned int nr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nr > vc->vc_rows - vc->vc_y)
 		nr = vc->vc_rows - vc->vc_y;
 	else if (!nr)
@@ -1673,6 +1824,7 @@ static void save_cur(struct vc_data *vc)
 /* console_lock is held */
 static void restore_cur(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	gotoxy(vc, vc->vc_saved_x, vc->vc_saved_y);
 	vc->vc_intensity	= vc->vc_s_intensity;
 	vc->vc_italic		= vc->vc_s_italic;
@@ -1741,8 +1893,10 @@ static void reset_terminal(struct vc_data *vc, int do_clear)
 	gotoxy(vc, 0, 0);
 	save_cur(vc);
 	if (do_clear)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	    csi_J(vc, 2);
 }
+}
 
 /* console_lock is held */
 static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
@@ -1752,33 +1906,46 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
 	 *  of an escape sequence.
 	 */
 	if (vc->vc_state == ESosc && c>=8 && c<=13) /* ... except for OSC */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	switch (c) {
 	case 0:
 		return;
 	case 7:
 		if (vc->vc_state == ESosc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_state = ESnormal;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (vc->vc_bell_duration)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kd_mksound(vc->vc_bell_pitch, vc->vc_bell_duration);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	case 8:
 		bs(vc);
 		return;
 	case 9:
 		vc->vc_pos -= (vc->vc_x << 1);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (vc->vc_x < vc->vc_cols - 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_x++;
 			if (vc->vc_tab_stop[vc->vc_x >> 5] & (1 << (vc->vc_x & 31)))
 				break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vc->vc_pos += (vc->vc_x << 1);
 		notify_write(vc, '\t');
 		return;
 	case 10: case 11: case 12:
 		lf(vc);
 		if (!is_kbd(vc, lnm))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 	case 13:
 		cr(vc);
 		return;
@@ -1859,24 +2026,34 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
 			set_kbd(vc, kbdapplic);
 			return;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	case ESnonstd:
 		if (c=='P') {   /* palette escape sequence */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			for (vc->vc_npar = 0; vc->vc_npar < NPAR; vc->vc_npar++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_par[vc->vc_npar] = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_npar = 0;
 			vc->vc_state = ESpalette;
 			return;
 		} else if (c=='R') {   /* reset palette */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			reset_palette(vc);
 			vc->vc_state = ESnormal;
 		} else if (c>='0' && c<='9')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_state = ESosc;
+}
 		else
 			vc->vc_state = ESnormal;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	case ESpalette:
 		if (isxdigit(c)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_par[vc->vc_npar++] = hex_to_bin(c);
 			if (vc->vc_npar == 7) {
 				int i = vc->vc_par[0] * 3, j = 1;
@@ -1890,7 +2067,10 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
 				vc->vc_state = ESnormal;
 			}
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_state = ESnormal;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	case ESsquare:
 		for (vc->vc_npar = 0; vc->vc_npar < NPAR; vc->vc_npar++)
@@ -1898,14 +2078,18 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
 		vc->vc_npar = 0;
 		vc->vc_state = ESgetpars;
 		if (c == '[') { /* Function key */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_state=ESfunckey;
 			return;
 		}
 		vc->vc_ques = (c == '?');
 		if (vc->vc_ques)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 	case ESgetpars:
 		if (c == ';' && vc->vc_npar < NPAR - 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_npar++;
 			return;
 		} else if (c>='0' && c<='9') {
@@ -1923,82 +2107,122 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
 			return;
 		case 'c':
 			if (vc->vc_ques) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					vc->vc_cursor_type = vc->vc_par[0] | (vc->vc_par[1] << 8) | (vc->vc_par[2] << 16);
+}
 				else
 					vc->vc_cursor_type = cur_default;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return;
 			}
 			break;
 		case 'm':
 			if (vc->vc_ques) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				clear_selection();
 				if (vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					vc->vc_complement_mask = vc->vc_par[0] << 8 | vc->vc_par[1];
+}
 				else
 					vc->vc_complement_mask = vc->vc_s_complement_mask;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return;
 			}
 			break;
 		case 'n':
 			if (!vc->vc_ques) {
 				if (vc->vc_par[0] == 5)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					status_report(tty);
+}
 				else if (vc->vc_par[0] == 6)
 					cursor_report(vc, tty);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
 		}
 		if (vc->vc_ques) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_ques = 0;
 			return;
 		}
 		switch(c) {
 		case 'G': case '`':
 			if (vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_par[0]--;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gotoxy(vc, vc->vc_par[0], vc->vc_y);
 			return;
 		case 'A':
 			if (!vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_par[0]++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gotoxy(vc, vc->vc_x, vc->vc_y - vc->vc_par[0]);
 			return;
 		case 'B': case 'e':
 			if (!vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_par[0]++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gotoxy(vc, vc->vc_x, vc->vc_y + vc->vc_par[0]);
 			return;
 		case 'C': case 'a':
 			if (!vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_par[0]++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gotoxy(vc, vc->vc_x + vc->vc_par[0], vc->vc_y);
 			return;
 		case 'D':
 			if (!vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_par[0]++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gotoxy(vc, vc->vc_x - vc->vc_par[0], vc->vc_y);
 			return;
 		case 'E':
 			if (!vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_par[0]++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gotoxy(vc, 0, vc->vc_y + vc->vc_par[0]);
 			return;
 		case 'F':
 			if (!vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_par[0]++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gotoxy(vc, 0, vc->vc_y - vc->vc_par[0]);
 			return;
 		case 'd':
 			if (vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_par[0]--;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gotoxay(vc, vc->vc_x ,vc->vc_par[0]);
 			return;
 		case 'H': case 'f':
 			if (vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_par[0]--;
+}
 			if (vc->vc_par[1])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_par[1]--;
+}
 			gotoxay(vc, vc->vc_par[1], vc->vc_par[0]);
 			return;
 		case 'J':
@@ -2018,12 +2242,19 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
 			return;
 		case 'c':
 			if (!vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				respond_ID(tty);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
 		case 'g':
 			if (!vc->vc_par[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_tab_stop[vc->vc_x >> 5] &= ~(1 << (vc->vc_x & 31));
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			else if (vc->vc_par[0] == 3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_tab_stop[0] =
 					vc->vc_tab_stop[1] =
 					vc->vc_tab_stop[2] =
@@ -2033,6 +2264,7 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
 					vc->vc_tab_stop[6] =
 					vc->vc_tab_stop[7] = 0;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
 		case 'm':
 			csi_m(vc);
@@ -2042,6 +2274,7 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
 			if (vc->vc_par[0] < 4)
 				vt_set_led_state(vc->vc_num,
 					    (vc->vc_par[0] < 3) ? vc->vc_par[0] : 4);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
 		case 'r':
 			if (!vc->vc_par[0])
@@ -2055,6 +2288,7 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
 				vc->vc_bottom = vc->vc_par[1];
 				gotoxay(vc, 0, 0);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
 		case 's':
 			save_cur(vc);
@@ -2072,6 +2306,7 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
 			setterm_command(vc);
 			return;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	case ESpercent:
 		vc->vc_state = ESnormal;
@@ -2084,6 +2319,7 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
 			vc->vc_utf = 1;
 			return;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	case ESfunckey:
 		vc->vc_state = ESnormal;
@@ -2099,31 +2335,62 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
 				(vc->vc_video_erase_char & 0xff00) | ' ';
 			do_update_region(vc, vc->vc_origin, vc->vc_screenbuf_size / 2);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	case ESsetG0:
 		if (c == '0')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_G0_charset = GRAF_MAP;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (c == 'B')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_G0_charset = LAT1_MAP;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (c == 'U')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_G0_charset = IBMPC_MAP;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (c == 'K')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_G0_charset = USER_MAP;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (vc->vc_charset == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_translate = set_translate(vc->vc_G0_charset, vc);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vc->vc_state = ESnormal;
 		return;
 	case ESsetG1:
 		if (c == '0')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_G1_charset = GRAF_MAP;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (c == 'B')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_G1_charset = LAT1_MAP;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (c == 'U')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_G1_charset = IBMPC_MAP;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (c == 'K')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_G1_charset = USER_MAP;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (vc->vc_charset == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_translate = set_translate(vc->vc_G1_charset, vc);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vc->vc_state = ESnormal;
 		return;
 	case ESosc:
@@ -2148,16 +2415,26 @@ static int bisearch(uint32_t ucs, const struct interval *table, int max)
 	int mid;
 
 	if (ucs < table[0].first || ucs > table[max].last)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (max >= min) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mid = (min + max) / 2;
 		if (ucs > table[mid].last)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			min = mid + 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (ucs < table[mid].first)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			max = mid - 1;
+}
 		else
 			return 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -2176,7 +2453,9 @@ static void con_flush(struct vc_data *vc, unsigned long draw_from,
 		unsigned long draw_to, int *draw_x)
 {
 	if (*draw_x < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	vc->vc_sw->con_putcs(vc, (u16 *)draw_from,
 			(u16 *)draw_to - (u16 *)draw_from, vc->vc_y, *draw_x);
@@ -2198,13 +2477,16 @@ static int do_con_write(struct tty_struct *tty, const unsigned char *buf, int co
 	u16 himask, charmask;
 
 	if (in_interrupt())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return count;
+}
 
 	might_sleep();
 
 	console_lock();
 	vc = tty->driver_data;
 	if (vc == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "vt: argh, driver_data is NULL !\n");
 		console_unlock();
 		return 0;
@@ -2239,6 +2521,7 @@ static int do_con_write(struct tty_struct *tty, const unsigned char *buf, int co
 
 		/* Do no translation at all in control states */
 		if (vc->vc_state != ESnormal) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tc = c;
 		} else if (vc->vc_utf && !vc->vc_disp_ctrl) {
 		    /* Combine UTF-8 into Unicode in vc_utf_char.
@@ -2252,6 +2535,7 @@ static int do_con_write(struct tty_struct *tty, const unsigned char *buf, int co
 			/* Continuation byte received */
 			static const uint32_t utf8_length_changes[] = { 0x0000007f, 0x000007ff, 0x0000ffff, 0x001fffff, 0x03ffffff, 0x7fffffff };
 			if (vc->vc_utf_count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			    vc->vc_utf_char = (vc->vc_utf_char << 6) | (c & 0x3f);
 			    vc->vc_npar++;
 			    if (--vc->vc_utf_count) {
@@ -2280,24 +2564,30 @@ static int do_con_write(struct tty_struct *tty, const unsigned char *buf, int co
 			    /* First byte of a multibyte sequence received */
 			    vc->vc_npar = 0;
 			    if ((c & 0xe0) == 0xc0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_utf_count = 1;
 				vc->vc_utf_char = (c & 0x1f);
 			    } else if ((c & 0xf0) == 0xe0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_utf_count = 2;
 				vc->vc_utf_char = (c & 0x0f);
 			    } else if ((c & 0xf8) == 0xf0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_utf_count = 3;
 				vc->vc_utf_char = (c & 0x07);
 			    } else if ((c & 0xfc) == 0xf8) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_utf_count = 4;
 				vc->vc_utf_char = (c & 0x03);
 			    } else if ((c & 0xfe) == 0xfc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vc->vc_utf_count = 5;
 				vc->vc_utf_char = (c & 0x01);
 			    } else {
 				/* 254 and 255 are invalid */
 				c = 0xfffd;
 			    }
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			    if (vc->vc_utf_count) {
 				/* Still need some bytes */
 				continue;
@@ -2309,9 +2599,13 @@ static int do_con_write(struct tty_struct *tty, const unsigned char *buf, int co
 		    /* c is the received character, or U+FFFD for invalid sequences. */
 		    /* Replace invalid Unicode code points with U+FFFD too */
 		    if ((c >= 0xd800 && c <= 0xdfff) || c == 0xfffe || c == 0xffff)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			c = 0xfffd;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		    tc = c;
 		} else {	/* no utf or alternate charset mode */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		    tc = vc_translate(vc, c);
 		}
 
@@ -2339,11 +2633,14 @@ static int do_con_write(struct tty_struct *tty, const unsigned char *buf, int co
 		if (vc->vc_state == ESnormal && ok) {
 			if (vc->vc_utf && !vc->vc_disp_ctrl) {
 				if (is_double_width(c))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					width = 2;
+}
 			}
 			/* Now try to find out how to display it */
 			tc = conv_uni_to_pc(vc, tc);
 			if (tc & ~charmask) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (tc == -1 || tc == -2) {
 				    continue; /* nothing to display */
 				}
@@ -2359,8 +2656,10 @@ static int do_con_write(struct tty_struct *tty, const unsigned char *buf, int co
 				    /* Display U+FFFD. If it's not found, display an inverse question mark. */
 				    tc = conv_uni_to_pc(vc, 0xfffd);
 				    if (tc < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					inverse = 1;
 					tc = conv_uni_to_pc(vc, '?');
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (tc < 0) tc = '?';
 				    }
 				}
@@ -2371,15 +2670,20 @@ static int do_con_write(struct tty_struct *tty, const unsigned char *buf, int co
 			} else {
 				/* invert vc_attr */
 				if (!vc->vc_can_do_color) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					vc_attr = (vc->vc_attr) ^ 0x08;
 				} else if (vc->vc_hi_font_mask == 0x100) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					vc_attr = ((vc->vc_attr) & 0x11) | (((vc->vc_attr) & 0xe0) >> 4) | (((vc->vc_attr) & 0x0e) << 4);
 				} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					vc_attr = ((vc->vc_attr) & 0x88) | (((vc->vc_attr) & 0x70) >> 4) | (((vc->vc_attr) & 0x07) << 4);
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				con_flush(vc, draw_from, draw_to, &draw_x);
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			while (1) {
 				if (vc->vc_need_wrap || vc->vc_decim)
 					con_flush(vc, draw_from, draw_to,
@@ -2389,7 +2693,9 @@ static int do_con_write(struct tty_struct *tty, const unsigned char *buf, int co
 					lf(vc);
 				}
 				if (vc->vc_decim)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					insert_char(vc, 1);
+}
 				scr_writew(himask ?
 					     ((vc_attr << 8) & ~himask) + ((tc & 0x100) ? himask : 0) + (tc & 0xff) :
 					     (vc_attr << 8) + tc,
@@ -2408,15 +2714,20 @@ static int do_con_write(struct tty_struct *tty, const unsigned char *buf, int co
 
 				if (!--width) break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tc = conv_uni_to_pc(vc, ' '); /* A space is printed in the second column */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (tc < 0) tc = ' ';
 			}
 			notify_write(vc, c);
 
 			if (inverse)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				con_flush(vc, draw_from, draw_to, &draw_x);
+}
 
 			if (rescan) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rescan = 0;
 				inverse = 0;
 				width = 1;
@@ -2446,6 +2757,7 @@ static int do_con_write(struct tty_struct *tty, const unsigned char *buf, int co
  */
 static void console_callback(struct work_struct *ignored)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	console_lock();
 
 	if (want_console >= 0) {
@@ -2483,6 +2795,7 @@ int set_console(int nr)
 {
 	struct vc_data *vc = vc_cons[fg_console].d;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!vc_cons_allocated(nr) || vt_dont_switch ||
 		(vc->vt_mode.mode == VT_AUTO && vc->vc_mode == KD_GRAPHICS)) {
 
@@ -2533,7 +2846,9 @@ int vt_kmsg_redirect(int new)
 	static int kmsg_con;
 
 	if (new != -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return xchg(&kmsg_con, new);
+}
 	else
 		return kmsg_con;
 }
@@ -2556,13 +2871,20 @@ static void vt_console_print(struct console *co, const char *b, unsigned count)
 
 	/* console busy or not yet initialized */
 	if (!printable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (!spin_trylock(&printing_lock))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmsg_console = vt_get_kmsg_redirect();
 	if (kmsg_console && vc_cons_allocated(kmsg_console - 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vc = vc_cons[kmsg_console - 1].d;
+}
 
 	/* read `x' only after setting currcons properly (otherwise
 	   the `x' macro will read the x of the foreground console). */
@@ -2594,9 +2916,11 @@ static void vt_console_print(struct console *co, const char *b, unsigned count)
 				vc->vc_x += cnt;
 				if (vc->vc_need_wrap)
 					vc->vc_x--;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cnt = 0;
 			}
 			if (c == 8) {		/* backspace */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				bs(vc);
 				start = (ushort *)vc->vc_pos;
 				myx = vc->vc_x;
@@ -2621,10 +2945,15 @@ static void vt_console_print(struct console *co, const char *b, unsigned count)
 		myx++;
 	}
 	if (cnt > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (con_is_visible(vc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_sw->con_putcs(vc, start, cnt, vc->vc_y, vc->vc_x);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vc->vc_x += cnt;
 		if (vc->vc_x == vc->vc_cols) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vc->vc_x--;
 			vc->vc_need_wrap = 1;
 		}
@@ -2674,6 +3003,7 @@ int tioclinux(struct tty_struct *tty, unsigned long arg)
 	int lines;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (current->signal->tty != tty && !capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	if (get_user(type, p))
@@ -2787,6 +3117,7 @@ static int con_write(struct tty_struct *tty, const unsigned char *buf, int count
 
 static int con_put_char(struct tty_struct *tty, unsigned char ch)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (in_interrupt())
 		return 0;	/* n_r3964 calls put_char() from interrupt context */
 	return do_con_write(tty, &ch, 1);
@@ -2795,7 +3126,9 @@ static int con_put_char(struct tty_struct *tty, unsigned char ch)
 static int con_write_room(struct tty_struct *tty)
 {
 	if (tty->stopped)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return 32768;		/* No limit, really; we're not buffering */
 }
 
@@ -2827,7 +3160,9 @@ static void con_stop(struct tty_struct *tty)
 {
 	int console_num;
 	if (!tty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	console_num = tty->index;
 	if (!vc_cons_allocated(console_num))
 		return;
@@ -2841,7 +3176,9 @@ static void con_start(struct tty_struct *tty)
 {
 	int console_num;
 	if (!tty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	console_num = tty->index;
 	if (!vc_cons_allocated(console_num))
 		return;
@@ -2853,7 +3190,9 @@ static void con_flush_chars(struct tty_struct *tty)
 	struct vc_data *vc;
 
 	if (in_interrupt())	/* from flush_to_ldisc */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* if we race with con_close(), vt may be null */
 	console_lock();
@@ -2881,6 +3220,7 @@ static int con_install(struct tty_driver *driver, struct tty_struct *tty)
 
 	/* Still being freed */
 	if (vc->port.tty) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ERESTARTSYS;
 		goto unlock;
 	}
@@ -2920,6 +3260,7 @@ static void con_close(struct tty_struct *tty, struct file *filp)
 static void con_shutdown(struct tty_struct *tty)
 {
 	struct vc_data *vc = tty->driver_data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(vc == NULL);
 	console_lock();
 	vc->port.tty = NULL;
@@ -2976,11 +3317,13 @@ static int __init con_init(void)
 	if (conswitchp)
 		display_desc = conswitchp->con_startup();
 	if (!display_desc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fg_console = 0;
 		console_unlock();
 		return 0;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < MAX_NR_CON_DRIVER; i++) {
 		struct con_driver *con_driver = &registered_con_driver[i];
 
@@ -2998,6 +3341,7 @@ static int __init con_init(void)
 		con_driver_map[i] = conswitchp;
 
 	if (blankinterval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		blank_state = blank_normal_wait;
 		mod_timer(&console_timer, jiffies + (blankinterval * HZ));
 	}
@@ -3058,6 +3402,7 @@ static struct cdev vc0_cdev;
 static ssize_t show_tty_active(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "tty%d\n", fg_console + 1);
 }
 static DEVICE_ATTR(active, S_IRUGO, show_tty_active, NULL);
@@ -3079,13 +3424,17 @@ int __init vty_init(const struct file_operations *console_fops)
 					    MKDEV(TTY_MAJOR, 0), NULL,
 					    vt_dev_groups, "tty0");
 	if (IS_ERR(tty0dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tty0dev = NULL;
+}
 
 	vcs_init();
 
 	console_driver = alloc_tty_driver(MAX_NR_CONSOLES);
 	if (!console_driver)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Couldn't allocate console driver\n");
+}
 
 	console_driver->name = "tty";
 	console_driver->name_base = 1;
@@ -3098,7 +3447,9 @@ int __init vty_init(const struct file_operations *console_fops)
 	console_driver->flags = TTY_DRIVER_REAL_RAW | TTY_DRIVER_RESET_TERMIOS;
 	tty_set_operations(console_driver, &con_ops);
 	if (tty_register_driver(console_driver))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Couldn't register console driver\n");
+}
 	kbd_init();
 	console_map_init();
 #ifdef CONFIG_MDA_CONSOLE
@@ -3120,7 +3471,9 @@ static int do_bind_con_driver(const struct consw *csw, int first, int last,
 	int i, j = -1, k = -1, retval = -ENODEV;
 
 	if (!try_module_get(owner))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	WARN_CONSOLE_UNLOCKED();
 
@@ -3222,7 +3575,9 @@ int do_unbind_con_driver(const struct consw *csw, int first, int last, int deflt
 	int i, retval = -ENODEV;
 
 	if (!try_module_get(owner))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	WARN_CONSOLE_UNLOCKED();
 
@@ -3298,6 +3653,7 @@ static int vt_bind(struct con_driver *con)
 	const struct consw *defcsw = NULL, *csw = NULL;
 	int i, more = 1, first = -1, last = -1, deflt = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
  	if (!con->con || !(con->flag & CON_DRIVER_FLAG_MODULE))
 		goto err;
 
@@ -3349,6 +3705,7 @@ static int vt_unbind(struct con_driver *con)
 	int i, more = 1, first = -1, last = -1, deflt = 0;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
  	if (!con->con || !(con->flag & CON_DRIVER_FLAG_MODULE))
 		goto err;
 
@@ -3398,6 +3755,7 @@ static inline int vt_unbind(struct con_driver *con)
 static ssize_t store_bind(struct device *dev, struct device_attribute *attr,
 			  const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct con_driver *con = dev_get_drvdata(dev);
 	int bind = simple_strtoul(buf, NULL, 0);
 
@@ -3416,6 +3774,7 @@ static ssize_t store_bind(struct device *dev, struct device_attribute *attr,
 static ssize_t show_bind(struct device *dev, struct device_attribute *attr,
 			 char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct con_driver *con = dev_get_drvdata(dev);
 	int bind = con_is_bound(con->con);
 
@@ -3425,6 +3784,7 @@ static ssize_t show_bind(struct device *dev, struct device_attribute *attr,
 static ssize_t show_name(struct device *dev, struct device_attribute *attr,
 			 char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct con_driver *con = dev_get_drvdata(dev);
 
 	return snprintf(buf, PAGE_SIZE, "%s %s\n",
@@ -3452,6 +3812,7 @@ static int vtconsole_init_device(struct con_driver *con)
 
 static void vtconsole_deinit_device(struct con_driver *con)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	con->flag &= ~CON_DRIVER_FLAG_ATTR;
 }
 
@@ -3468,6 +3829,7 @@ int con_is_bound(const struct consw *csw)
 {
 	int i, bound = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < MAX_NR_CONSOLES; i++) {
 		if (con_driver_map[i] == csw) {
 			bound = 1;
@@ -3503,7 +3865,9 @@ int con_debug_enter(struct vc_data *vc)
 	vc->vc_mode = KD_TEXT;
 	console_blanked = 0;
 	if (vc->vc_sw->con_debug_enter)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = vc->vc_sw->con_debug_enter(vc);
+}
 #ifdef CONFIG_KGDB_KDB
 	/* Set the initial LINES variable if it is not already set */
 	if (vc->vc_rows < 999) {
@@ -3561,7 +3925,9 @@ int con_debug_leave(void)
 
 	vc = vc_cons[fg_console].d;
 	if (vc->vc_sw->con_debug_leave)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = vc->vc_sw->con_debug_leave(vc);
+}
 	return ret;
 }
 EXPORT_SYMBOL_GPL(con_debug_leave);
@@ -3573,6 +3939,7 @@ static int do_register_con_driver(const struct consw *csw, int first, int last)
 	const char *desc;
 	int i, retval;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_CONSOLE_UNLOCKED();
 
 	if (!try_module_get(owner))
@@ -3653,7 +4020,9 @@ int do_unregister_con_driver(const struct consw *csw)
 
 	/* cannot unregister a bound driver */
 	if (con_is_bound(csw))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	if (csw == conswitchp)
 		return -EINVAL;
@@ -3690,6 +4059,7 @@ static void con_driver_unregister_callback(struct work_struct *ignored)
 
 	console_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < MAX_NR_CON_DRIVER; i++) {
 		struct con_driver *con_driver = &registered_con_driver[i];
 
@@ -3735,7 +4105,9 @@ int do_take_over_console(const struct consw *csw, int first, int last, int deflt
 	 * but not unregistered it.
 	 */
 	if (err == -EBUSY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
+}
 	if (!err)
 		do_bind_con_driver(csw, first, last, deflt);
 
@@ -3750,6 +4122,7 @@ EXPORT_SYMBOL_GPL(do_take_over_console);
  */
 void give_up_console(const struct consw *csw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	console_lock();
 	do_unregister_con_driver(csw);
 	console_unlock();
@@ -3783,6 +4156,7 @@ static int __init vtconsole_class_init(void)
 				       con->desc, PTR_ERR(con->dev));
 				con->dev = NULL;
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vtconsole_init_device(con);
 			}
 		}
@@ -3803,7 +4177,9 @@ static int set_vesa_blanking(char __user *p)
 	unsigned int mode;
 
 	if (get_user(mode, p + 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	vesa_blank_mode = (mode < 4) ? mode : 0;
 	return 0;
@@ -3814,6 +4190,7 @@ void do_blank_screen(int entering_gfx)
 	struct vc_data *vc = vc_cons[fg_console].d;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_CONSOLE_UNLOCKED();
 
 	if (console_blanked) {
@@ -3879,7 +4256,9 @@ void do_unblank_screen(int leaving_gfx)
 	 * case of oops_in_progress
 	 */
 	if (!oops_in_progress)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		might_sleep();
+}
 
 	WARN_CONSOLE_UNLOCKED();
 
@@ -3922,6 +4301,7 @@ EXPORT_SYMBOL(do_unblank_screen);
  */
 void unblank_screen(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	do_unblank_screen(0);
 }
 
@@ -3932,12 +4312,14 @@ void unblank_screen(void)
  */
 static void blank_screen_t(unsigned long dummy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	blank_timer_expired = 1;
 	schedule_work(&console_work);
 }
 
 void poke_blanked_console(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_CONSOLE_UNLOCKED();
 
 	/* Add this so we quickly catch whoever might call us in a non
@@ -3987,7 +4369,9 @@ int con_set_cmap(unsigned char __user *arg)
 	unsigned char colormap[3*16];
 
 	if (copy_from_user(colormap, arg, sizeof(colormap)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	console_lock();
 	for (i = k = 0; i < 16; i++) {
@@ -4016,6 +4400,7 @@ int con_get_cmap(unsigned char __user *arg)
 	unsigned char colormap[3*16];
 
 	console_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = k = 0; i < 16; i++) {
 		colormap[k++] = default_red[i];
 		colormap[k++] = default_grn[i];
@@ -4062,6 +4447,7 @@ static int con_font_get(struct vc_data *vc, struct console_font_op *op)
 	int c;
 
 	if (op->data) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		font.data = kmalloc(max_font_size, GFP_KERNEL);
 		if (!font.data)
 			return -ENOMEM;
@@ -4116,7 +4502,9 @@ static int con_font_set(struct vc_data *vc, struct console_font_op *op)
 	int size;
 
 	if (vc->vc_mode != KD_TEXT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (!op->data)
 		return -EINVAL;
 	if (op->charcount > 512)
@@ -4173,7 +4561,9 @@ static int con_font_default(struct vc_data *vc, struct console_font_op *op)
 
 
 	if (!op->data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		s = NULL;
+}
 	else if (strncpy_from_user(name, op->data, MAX_FONT_NAME - 1) < 0)
 		return -EFAULT;
 	else
@@ -4204,7 +4594,9 @@ static int con_font_copy(struct vc_data *vc, struct console_font_op *op)
 
 	console_lock();
 	if (vc->vc_mode != KD_TEXT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = -EINVAL;
+}
 	else if (!vc->vc_sw->con_font_copy)
 		rc = -ENOSYS;
 	else if (con < 0 || !vc_cons_allocated(con))
@@ -4219,6 +4611,7 @@ static int con_font_copy(struct vc_data *vc, struct console_font_op *op)
 
 int con_font_op(struct vc_data *vc, struct console_font_op *op)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (op->op) {
 	case KD_FONT_OP_SET:
 		return con_font_set(vc, op);
@@ -4239,6 +4632,7 @@ int con_font_op(struct vc_data *vc, struct console_font_op *op)
 /* used by selection */
 u16 screen_glyph(struct vc_data *vc, int offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u16 w = scr_readw(screenpos(vc, offset, 1));
 	u16 c = w & 0xff;
 
@@ -4251,18 +4645,21 @@ EXPORT_SYMBOL_GPL(screen_glyph);
 /* used by vcs - note the word offset */
 unsigned short *screen_pos(struct vc_data *vc, int w_offset, int viewed)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return screenpos(vc, 2 * w_offset, viewed);
 }
 EXPORT_SYMBOL_GPL(screen_pos);
 
 void getconsxy(struct vc_data *vc, unsigned char *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	p[0] = vc->vc_x;
 	p[1] = vc->vc_y;
 }
 
 void putconsxy(struct vc_data *vc, unsigned char *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hide_cursor(vc);
 	gotoxy(vc, p[0], p[1]);
 	set_cursor(vc);
@@ -4270,6 +4667,7 @@ void putconsxy(struct vc_data *vc, unsigned char *p)
 
 u16 vcs_scr_readw(struct vc_data *vc, const u16 *org)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((unsigned long)org == vc->vc_pos && softcursor_original != -1)
 		return softcursor_original;
 	return scr_readw(org);
@@ -4277,6 +4675,7 @@ u16 vcs_scr_readw(struct vc_data *vc, const u16 *org)
 
 void vcs_scr_writew(struct vc_data *vc, u16 val, u16 *org)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scr_writew(val, org);
 	if ((unsigned long)org == vc->vc_pos) {
 		softcursor_original = -1;
@@ -4286,6 +4685,7 @@ void vcs_scr_writew(struct vc_data *vc, u16 val, u16 *org)
 
 void vcs_scr_updated(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	notify_update(vc);
 }
 
@@ -4301,6 +4701,7 @@ void vc_scrolldelta_helper(struct vc_data *c, int lines,
 
 	/* Turn scrollback off */
 	if (!lines) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		c->vc_visible_origin = c->vc_origin;
 		return;
 	}
diff --git a/drivers/tty/vt/vt_ioctl.c b/drivers/tty/vt/vt_ioctl.c
index 2d2b420..7a8ba8e 100644
--- a/drivers/tty/vt/vt_ioctl.c
+++ b/drivers/tty/vt/vt_ioctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  Copyright (C) 1992 obz under the linux copyright
@@ -91,6 +93,7 @@ void vt_event_post(unsigned int event, unsigned int old, unsigned int new)
 	unsigned long flags;
 	int wake = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&vt_event_lock, flags);
 	head = &vt_events;
 
@@ -151,6 +154,7 @@ static void __vt_event_dequeue(struct vt_event_wait *vw)
 
 static void vt_event_wait(struct vt_event_wait *vw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__vt_event_queue(vw);
 	__vt_event_wait(vw);
 	__vt_event_dequeue(vw);
@@ -168,7 +172,9 @@ static int vt_event_wait_ioctl(struct vt_event __user *event)
 	struct vt_event_wait vw;
 
 	if (copy_from_user(&vw.event, event, sizeof(struct vt_event)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	/* Highest supported event for now */
 	if (vw.event.event & ~VT_MAX_EVENT)
 		return -EINVAL;
@@ -196,6 +202,7 @@ int vt_waitactive(int n)
 {
 	struct vt_event_wait vw;
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vw.event.event = VT_EVENT_SWITCH;
 		__vt_event_queue(&vw);
 		if (n == fg_console + 1) {
@@ -227,7 +234,9 @@ do_fontx_ioctl(int cmd, struct consolefontdesc __user *user_cfd, int perm, struc
 	int i;
 
 	if (copy_from_user(&cfdarg, user_cfd, sizeof(struct consolefontdesc))) 
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
  	
 	switch (cmd) {
 	case PIO_FONTX:
@@ -266,7 +275,9 @@ do_unimap_ioctl(int cmd, struct unimapdesc __user *user_ud, int perm, struct vc_
 	struct unimapdesc tmp;
 
 	if (copy_from_user(&tmp, user_ud, sizeof tmp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	switch (cmd) {
 	case PIO_UNIMAP:
 		if (!perm)
@@ -287,6 +298,7 @@ static int vt_disallocate(unsigned int vc_num)
 	int ret = 0;
 
 	console_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (VT_BUSY(vc_num))
 		ret = -EBUSY;
 	else if (vc_num)
@@ -308,6 +320,7 @@ static void vt_disallocate_all(void)
 	int i;
 
 	console_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 1; i < MAX_NR_CONSOLES; i++)
 		if (!VT_BUSY(i))
 			vc[i] = vc_deallocate(i);
@@ -344,6 +357,7 @@ int vt_ioctl(struct tty_struct *tty,
 
 
 	if (!vc_cons_allocated(console)) { 	/* impossible? */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOIOCTLCMD;
 		goto out;
 	}
@@ -1092,7 +1106,9 @@ compat_fontx_ioctl(int cmd, struct compat_consolefontdesc __user *user_cfd,
 	int i;
 
 	if (copy_from_user(&cfdarg, user_cfd, sizeof(struct compat_consolefontdesc)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	switch (cmd) {
 	case PIO_FONTX:
@@ -1139,7 +1155,9 @@ compat_kdfontop_ioctl(struct compat_console_font_op __user *fontop,
 	int i;
 
 	if (copy_from_user(op, fontop, sizeof(struct compat_console_font_op)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	if (!perm && op->op != KD_FONT_OP_GET)
 		return -EPERM;
 	op->data = compat_ptr(((struct compat_console_font_op *)op)->data);
@@ -1165,7 +1183,9 @@ compat_unimap_ioctl(unsigned int cmd, struct compat_unimapdesc __user *user_ud,
 	struct unipair __user *tmp_entries;
 
 	if (copy_from_user(&tmp, user_ud, sizeof tmp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	tmp_entries = compat_ptr(tmp.entries);
 	switch (cmd) {
 	case PIO_UNIMAP:
@@ -1193,6 +1213,7 @@ long vt_compat_ioctl(struct tty_struct *tty,
 	console = vc->vc_num;
 
 	if (!vc_cons_allocated(console)) { 	/* impossible? */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOIOCTLCMD;
 		goto out;
 	}
@@ -1297,6 +1318,7 @@ static void complete_change_console(struct vc_data *vc)
 	 * controlling process is gone and we've called reset_vc.
 	 */
 	if (old_vc_mode != vc->vc_mode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (vc->vc_mode == KD_TEXT)
 			do_unblank_screen(1);
 		else
@@ -1349,6 +1371,7 @@ void change_console(struct vc_data *new_vc)
 {
 	struct vc_data *vc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!new_vc || new_vc->vc_num == fg_console || vt_dont_switch)
 		return;
 
@@ -1423,6 +1446,7 @@ int vt_move_to_console(unsigned int vt, int alloc)
 	console_lock();
 	/* Graphics mode - up to X */
 	if (disable_vt_switch) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		console_unlock();
 		return 0;
 	}
@@ -1461,6 +1485,7 @@ int vt_move_to_console(unsigned int vt, int alloc)
  */
 void pm_set_vt_switch(int do_switch)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	console_lock();
 	disable_vt_switch = !do_switch;
 	console_unlock();
diff --git a/drivers/usb/core/buffer.c b/drivers/usb/core/buffer.c
index b64568c..ec8c3d6 100644
--- a/drivers/usb/core/buffer.c
+++ b/drivers/usb/core/buffer.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * DMA memory management for framework level HCD code (hc_driver)
  *
@@ -37,10 +39,16 @@ void __init usb_init_pool_max(void)
 	 */
 	if (ARCH_KMALLOC_MINALIGN <= 32)
 		;			/* Original value is okay */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (ARCH_KMALLOC_MINALIGN <= 64)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pool_max[0] = 64;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (ARCH_KMALLOC_MINALIGN <= 128)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pool_max[0] = 0;	/* Don't use this pool */
+}
 	else
 		BUILD_BUG();		/* We don't allow this */
 }
@@ -98,7 +106,9 @@ void hcd_buffer_destroy(struct usb_hcd *hcd)
 	int i;
 
 	if (!IS_ENABLED(CONFIG_HAS_DMA))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for (i = 0; i < HCD_BUFFER_POOLS; i++) {
 		struct dma_pool *pool = hcd->pool[i];
@@ -122,6 +132,7 @@ void *hcd_buffer_alloc(
 	dma_addr_t		*dma
 )
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hcd		*hcd = bus_to_hcd(bus);
 	int			i;
 
@@ -150,6 +161,7 @@ void hcd_buffer_free(
 	dma_addr_t		dma
 )
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hcd		*hcd = bus_to_hcd(bus);
 	int			i;
 
diff --git a/drivers/usb/core/devio.c b/drivers/usb/core/devio.c
index ab24535..f30b674 100644
--- a/drivers/usb/core/devio.c
+++ b/drivers/usb/core/devio.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*****************************************************************************/
 
 /*
@@ -155,6 +157,7 @@ static int usbfs_increase_memory_usage(u64 amount)
 
 	atomic64_add(amount, &usbfs_memory_usage);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (lim > 0 && atomic64_read(&usbfs_memory_usage) > lim) {
 		atomic64_sub(amount, &usbfs_memory_usage);
 		return -ENOMEM;
@@ -166,11 +169,13 @@ static int usbfs_increase_memory_usage(u64 amount)
 /* Memory for a transfer is being deallocated */
 static void usbfs_decrease_memory_usage(u64 amount)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic64_sub(amount, &usbfs_memory_usage);
 }
 
 static int connected(struct usb_dev_state *ps)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (!list_empty(&ps->list) &&
 			ps->dev->state != USB_STATE_NOTATTACHED);
 }
@@ -180,6 +185,7 @@ static void dec_usb_memory_use_count(struct usb_memory *usbm, int *count)
 	struct usb_dev_state *ps = usbm->ps;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ps->lock, flags);
 	--*count;
 	if (usbm->urb_use_count == 0 && usbm->vma_use_count == 0) {
@@ -201,6 +207,7 @@ static void usbdev_vm_open(struct vm_area_struct *vma)
 	struct usb_memory *usbm = vma->vm_private_data;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&usbm->ps->lock, flags);
 	++usbm->vma_use_count;
 	spin_unlock_irqrestore(&usbm->ps->lock, flags);
@@ -232,6 +239,7 @@ static int usbdev_mmap(struct file *file, struct vm_area_struct *vma)
 	if (ret)
 		goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	usbm = kzalloc(sizeof(struct usb_memory), GFP_KERNEL);
 	if (!usbm) {
 		ret = -ENOMEM;
@@ -294,6 +302,7 @@ static ssize_t usbdev_read(struct file *file, char __user *buf, size_t nbytes,
 	pos = *ppos;
 	usb_lock_device(dev);
 	if (!connected(ps)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENODEV;
 		goto err;
 	} else if (pos < 0) {
@@ -470,7 +479,9 @@ static void snoop_urb(struct usb_device *udev,
 	const char *t, *d;
 
 	if (!usbfs_snoop)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	ep = usb_pipeendpoint(pipe);
 	t = types[usb_pipetype(pipe)];
@@ -508,6 +519,7 @@ static void snoop_urb_data(struct urb *urb, unsigned len)
 {
 	int i, size;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	len = min(len, usbfs_snoop_max);
 	if (!usbfs_snoop || len == 0)
 		return;
@@ -531,7 +543,9 @@ static int copy_urb_data_to_user(u8 __user *userbuffer, struct urb *urb)
 	unsigned i, len, size;
 
 	if (urb->number_of_packets > 0)		/* Isochronous */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = urb->transfer_buffer_length;
+}
 	else					/* Non-Isoc */
 		len = urb->actual_length;
 
@@ -608,6 +622,7 @@ static void async_completed(struct urb *urb)
 	as->status = urb->status;
 	signr = as->signr;
 	if (signr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(&sinfo, 0, sizeof(sinfo));
 		sinfo.si_signo = as->signr;
 		sinfo.si_errno = as->status;
@@ -643,6 +658,7 @@ static void destroy_async(struct usb_dev_state *ps, struct list_head *list)
 	struct async *as;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ps->lock, flags);
 	while (!list_empty(list)) {
 		as = list_entry(list->next, struct async, asynclist);
@@ -666,6 +682,7 @@ static void destroy_async_on_interface(struct usb_dev_state *ps,
 	unsigned long flags;
 
 	INIT_LIST_HEAD(&hitlist);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ps->lock, flags);
 	list_for_each_safe(p, q, &ps->async_pending)
 		if (ifnum == list_entry(p, struct async, asynclist)->ifnum)
@@ -676,6 +693,7 @@ static void destroy_async_on_interface(struct usb_dev_state *ps,
 
 static void destroy_all_async(struct usb_dev_state *ps)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	destroy_async(ps, &ps->async_pending);
 }
 
@@ -688,11 +706,13 @@ static void destroy_all_async(struct usb_dev_state *ps)
 static int driver_probe(struct usb_interface *intf,
 			const struct usb_device_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENODEV;
 }
 
 static void driver_disconnect(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_dev_state *ps = usb_get_intfdata(intf);
 	unsigned int ifnum = intf->altsetting->desc.bInterfaceNumber;
 
@@ -720,11 +740,13 @@ static void driver_disconnect(struct usb_interface *intf)
  */
 static int driver_suspend(struct usb_interface *intf, pm_message_t msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int driver_resume(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -743,7 +765,9 @@ static int claimintf(struct usb_dev_state *ps, unsigned int ifnum)
 	int err;
 
 	if (ifnum >= 8*sizeof(ps->ifclaimed))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	/* already claimed */
 	if (test_bit(ifnum, &ps->ifclaimed))
 		return 0;
@@ -770,7 +794,9 @@ static int releaseintf(struct usb_dev_state *ps, unsigned int ifnum)
 
 	err = -EINVAL;
 	if (ifnum >= 8*sizeof(ps->ifclaimed))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	dev = ps->dev;
 	intf = usb_ifnum_to_if(dev, ifnum);
 	if (!intf)
@@ -784,6 +810,7 @@ static int releaseintf(struct usb_dev_state *ps, unsigned int ifnum)
 
 static int checkintf(struct usb_dev_state *ps, unsigned int ifnum)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ps->dev->state != USB_STATE_CONFIGURED)
 		return -EHOSTUNREACH;
 	if (ifnum >= 8*sizeof(ps->ifclaimed))
@@ -805,7 +832,9 @@ static int findintfep(struct usb_device *dev, unsigned int ep)
 	struct usb_endpoint_descriptor *endpt;
 
 	if (ep & ~(USB_DIR_IN|0xf))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (!dev->actconfig)
 		return -ESRCH;
 	for (i = 0; i < dev->actconfig->desc.bNumInterfaces; i++) {
@@ -884,6 +913,7 @@ static int check_ctrlrecip(struct usb_dev_state *ps, unsigned int requesttype,
 static struct usb_host_endpoint *ep_to_host_endpoint(struct usb_device *dev,
 						     unsigned char ep)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ep & USB_ENDPOINT_DIR_MASK)
 		return dev->ep_in[ep & USB_ENDPOINT_NUMBER_MASK];
 	else
@@ -965,6 +995,7 @@ static int parse_usbdevfs_streams(struct usb_dev_state *ps,
 
 static int match_devt(struct device *dev, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev->devt == (dev_t) (unsigned long) data;
 }
 
@@ -975,7 +1006,9 @@ static struct usb_device *usbdev_lookup_by_devt(dev_t devt)
 	dev = bus_find_device(&usb_bus_type, NULL,
 			      (void *) (unsigned long) devt, match_devt);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	return to_usb_device(dev);
 }
 
@@ -993,6 +1026,7 @@ static int usbdev_open(struct inode *inode, struct file *file)
 	if (!ps)
 		goto out_free_ps;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -ENODEV;
 
 	/* Protect against simultaneous removal or release */
@@ -1055,6 +1089,7 @@ static int usbdev_release(struct inode *inode, struct file *file)
 
 	list_del_init(&ps->list);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (ifnum = 0; ps->ifclaimed && ifnum < 8*sizeof(ps->ifclaimed);
 			ifnum++) {
 		if (test_bit(ifnum, &ps->ifclaimed))
@@ -1087,7 +1122,9 @@ static int proc_control(struct usb_dev_state *ps, void __user *arg)
 	int i, pipe, ret;
 
 	if (copy_from_user(&ctrl, arg, sizeof(ctrl)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	ret = check_ctrlrecip(ps, ctrl.bRequestType, ctrl.bRequest,
 			      ctrl.wIndex);
 	if (ret)
@@ -1174,7 +1211,9 @@ static int proc_bulk(struct usb_dev_state *ps, void __user *arg)
 	int i, ret;
 
 	if (copy_from_user(&bulk, arg, sizeof(bulk)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	ret = findintfep(ps->dev, bulk.ep);
 	if (ret < 0)
 		return ret;
@@ -1244,6 +1283,7 @@ static void check_reset_of_active_ep(struct usb_device *udev,
 	struct usb_host_endpoint **eps;
 	struct usb_host_endpoint *ep;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	eps = (epnum & USB_DIR_IN) ? udev->ep_in : udev->ep_out;
 	ep = eps[epnum & 0x0f];
 	if (ep && !list_empty(&ep->urb_list))
@@ -1258,7 +1298,9 @@ static int proc_resetep(struct usb_dev_state *ps, void __user *arg)
 	int ret;
 
 	if (get_user(ep, (unsigned int __user *)arg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	ret = findintfep(ps->dev, ep);
 	if (ret < 0)
 		return ret;
@@ -1277,7 +1319,9 @@ static int proc_clearhalt(struct usb_dev_state *ps, void __user *arg)
 	int ret;
 
 	if (get_user(ep, (unsigned int __user *)arg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	ret = findintfep(ps->dev, ep);
 	if (ret < 0)
 		return ret;
@@ -1300,7 +1344,9 @@ static int proc_getdriver(struct usb_dev_state *ps, void __user *arg)
 	int ret;
 
 	if (copy_from_user(&gd, arg, sizeof(gd)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	intf = usb_ifnum_to_if(ps->dev, gd.interface);
 	if (!intf || !intf->dev.driver)
 		ret = -ENODATA;
@@ -1321,7 +1367,9 @@ static int proc_connectinfo(struct usb_dev_state *ps, void __user *arg)
 	ci.slow = ps->dev->speed == USB_SPEED_LOW;
 
 	if (copy_to_user(arg, &ci, sizeof(ci)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	return 0;
 }
 
@@ -1358,7 +1406,9 @@ static int proc_setintf(struct usb_dev_state *ps, void __user *arg)
 	int ret;
 
 	if (copy_from_user(&setintf, arg, sizeof(setintf)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	ret = checkintf(ps, setintf.interface);
 	if (ret)
 		return ret;
@@ -1376,7 +1426,9 @@ static int proc_setconfig(struct usb_dev_state *ps, void __user *arg)
 	struct usb_host_config *actconfig;
 
 	if (get_user(u, (int __user *)arg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	actconfig = ps->dev->actconfig;
 
@@ -1424,6 +1476,7 @@ find_memory_area(struct usb_dev_state *ps, const struct usbdevfs_urb *uurb)
 	unsigned long flags;
 	unsigned long uurb_start = (unsigned long)uurb->buffer;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ps->lock, flags);
 	list_for_each_entry(iter, &ps->memory_list, memlist) {
 		if (uurb_start >= iter->vm_start &&
@@ -1462,7 +1515,9 @@ static int proc_do_submiturb(struct usb_dev_state *ps, struct usbdevfs_urb *uurb
 				USBDEVFS_URB_NO_INTERRUPT;
 	/* USBDEVFS_URB_ISO_ASAP is a special case */
 	if (uurb->type == USBDEVFS_URB_TYPE_ISO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= USBDEVFS_URB_ISO_ASAP;
+}
 
 	if (uurb->flags & ~mask)
 			return -EINVAL;
@@ -1807,7 +1862,9 @@ static int proc_submiturb(struct usb_dev_state *ps, void __user *arg)
 	struct usbdevfs_urb uurb;
 
 	if (copy_from_user(&uurb, arg, sizeof(uurb)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	return proc_do_submiturb(ps, &uurb,
 			(((struct usbdevfs_urb __user *)arg)->iso_frame_desc),
@@ -1820,6 +1877,7 @@ static int proc_unlinkurb(struct usb_dev_state *ps, void __user *arg)
 	struct async *as;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ps->lock, flags);
 	as = async_getpending(ps, arg);
 	if (!as) {
@@ -1842,6 +1900,7 @@ static void compute_isochronous_actual_length(struct urb *urb)
 	unsigned int i;
 
 	if (urb->number_of_packets > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		urb->actual_length = 0;
 		for (i = 0; i < urb->number_of_packets; i++)
 			urb->actual_length +=
@@ -1857,6 +1916,7 @@ static int processcompl(struct async *as, void __user * __user *arg)
 	unsigned int i;
 
 	compute_isochronous_actual_length(urb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (as->userbuffer && urb->actual_length) {
 		if (copy_urb_data_to_user(as->userbuffer, urb))
 			goto err_out;
@@ -1889,6 +1949,7 @@ static int processcompl(struct async *as, void __user * __user *arg)
 
 static struct async *reap_as(struct usb_dev_state *ps)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DECLARE_WAITQUEUE(wait, current);
 	struct async *as = NULL;
 	struct usb_device *dev = ps->dev;
@@ -1912,6 +1973,7 @@ static struct async *reap_as(struct usb_dev_state *ps)
 
 static int proc_reapurb(struct usb_dev_state *ps, void __user *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct async *as = reap_as(ps);
 
 	if (as) {
@@ -1934,6 +1996,7 @@ static int proc_reapurbnonblock(struct usb_dev_state *ps, void __user *arg)
 
 	as = async_getcompleted(ps);
 	if (as) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		snoop(&ps->dev->dev, "reap %pK\n", as->userurb);
 		retval = processcompl(as, (void __user * __user *)arg);
 		free_async(as);
@@ -1966,6 +2029,7 @@ static int proc_bulk_compat(struct usb_dev_state *ps,
 
 	p = compat_alloc_user_space(sizeof(*p));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (get_user(n, &p32->ep) || put_user(n, &p->ep) ||
 	    get_user(n, &p32->len) || put_user(n, &p->len) ||
 	    get_user(n, &p32->timeout) || put_user(n, &p->timeout) ||
@@ -1979,7 +2043,9 @@ static int proc_disconnectsignal_compat(struct usb_dev_state *ps, void __user *a
 	struct usbdevfs_disconnectsignal32 ds;
 
 	if (copy_from_user(&ds, arg, sizeof(ds)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	ps->discsignr = ds.signr;
 	ps->disccontext = compat_ptr(ds.context);
 	return 0;
@@ -1990,7 +2056,9 @@ static int get_urb32(struct usbdevfs_urb *kurb,
 {
 	struct usbdevfs_urb32 urb32;
 	if (copy_from_user(&urb32, uurb, sizeof(*uurb)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	kurb->type = urb32.type;
 	kurb->endpoint = urb32.endpoint;
 	kurb->status = urb32.status;
@@ -2011,7 +2079,9 @@ static int proc_submiturb_compat(struct usb_dev_state *ps, void __user *arg)
 	struct usbdevfs_urb uurb;
 
 	if (get_urb32(&uurb, (struct usbdevfs_urb32 __user *)arg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	return proc_do_submiturb(ps, &uurb,
 			((struct usbdevfs_urb32 __user *)arg)->iso_frame_desc,
@@ -2026,6 +2096,7 @@ static int processcompl_compat(struct async *as, void __user * __user *arg)
 	unsigned int i;
 
 	compute_isochronous_actual_length(urb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (as->userbuffer && urb->actual_length) {
 		if (copy_urb_data_to_user(as->userbuffer, urb))
 			return -EFAULT;
@@ -2055,6 +2126,7 @@ static int processcompl_compat(struct async *as, void __user * __user *arg)
 
 static int proc_reapurb_compat(struct usb_dev_state *ps, void __user *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct async *as = reap_as(ps);
 
 	if (as) {
@@ -2077,6 +2149,7 @@ static int proc_reapurbnonblock_compat(struct usb_dev_state *ps, void __user *ar
 
 	as = async_getcompleted(ps);
 	if (as) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		snoop(&ps->dev->dev, "reap %pK\n", as->userurb);
 		retval = processcompl_compat(as, (void __user * __user *)arg);
 		free_async(as);
@@ -2094,7 +2167,9 @@ static int proc_disconnectsignal(struct usb_dev_state *ps, void __user *arg)
 	struct usbdevfs_disconnectsignal ds;
 
 	if (copy_from_user(&ds, arg, sizeof(ds)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	ps->discsignr = ds.signr;
 	ps->disccontext = ds.context;
 	return 0;
@@ -2105,7 +2180,9 @@ static int proc_claiminterface(struct usb_dev_state *ps, void __user *arg)
 	unsigned int ifnum;
 
 	if (get_user(ifnum, (unsigned int __user *)arg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	return claimintf(ps, ifnum);
 }
 
@@ -2115,7 +2192,9 @@ static int proc_releaseinterface(struct usb_dev_state *ps, void __user *arg)
 	int ret;
 
 	if (get_user(ifnum, (unsigned int __user *)arg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	ret = releaseintf(ps, ifnum);
 	if (ret < 0)
 		return ret;
@@ -2132,7 +2211,9 @@ static int proc_ioctl(struct usb_dev_state *ps, struct usbdevfs_ioctl *ctl)
 	struct usb_driver       *driver = NULL;
 
 	if (ps->privileges_dropped)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;
+}
 
 	/* alloc buffer */
 	size = _IOC_SIZE(ctl->ioctl_code);
@@ -2208,7 +2289,9 @@ static int proc_ioctl_default(struct usb_dev_state *ps, void __user *arg)
 	struct usbdevfs_ioctl	ctrl;
 
 	if (copy_from_user(&ctrl, arg, sizeof(ctrl)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	return proc_ioctl(ps, &ctrl);
 }
 
@@ -2219,7 +2302,9 @@ static int proc_ioctl_compat(struct usb_dev_state *ps, compat_uptr_t arg)
 	struct usbdevfs_ioctl ctrl;
 
 	if (copy_from_user(&ioc32, compat_ptr(arg), sizeof(ioc32)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	ctrl.ifno = ioc32.ifno;
 	ctrl.ioctl_code = ioc32.ioctl_code;
 	ctrl.data = compat_ptr(ioc32.data);
@@ -2233,7 +2318,9 @@ static int proc_claim_port(struct usb_dev_state *ps, void __user *arg)
 	int rc;
 
 	if (get_user(portnum, (unsigned __user *) arg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	rc = usb_hub_claim_port(ps->dev, portnum, ps);
 	if (rc == 0)
 		snoop(&ps->dev->dev, "port %d claimed by process %d: %s\n",
@@ -2246,7 +2333,9 @@ static int proc_release_port(struct usb_dev_state *ps, void __user *arg)
 	unsigned portnum;
 
 	if (get_user(portnum, (unsigned __user *) arg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	return usb_hub_release_port(ps->dev, portnum, ps);
 }
 
@@ -2258,7 +2347,9 @@ static int proc_get_capabilities(struct usb_dev_state *ps, void __user *arg)
 			USBDEVFS_CAP_REAP_AFTER_DISCONNECT | USBDEVFS_CAP_MMAP |
 			USBDEVFS_CAP_DROP_PRIVILEGES;
 	if (!ps->dev->bus->no_stop_on_short)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		caps |= USBDEVFS_CAP_BULK_CONTINUATION;
+}
 	if (ps->dev->bus->sg_tablesize)
 		caps |= USBDEVFS_CAP_BULK_SCATTER_GATHER;
 
@@ -2274,7 +2365,9 @@ static int proc_disconnect_claim(struct usb_dev_state *ps, void __user *arg)
 	struct usb_interface *intf;
 
 	if (copy_from_user(&dc, arg, sizeof(dc)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	intf = usb_ifnum_to_if(ps->dev, dc.interface);
 	if (!intf)
@@ -2313,7 +2406,9 @@ static int proc_alloc_streams(struct usb_dev_state *ps, void __user *arg)
 	r = parse_usbdevfs_streams(ps, arg, &num_streams, &num_eps,
 				   &eps, &intf);
 	if (r)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 
 	destroy_async_on_interface(ps,
 				   intf->altsetting[0].desc.bInterfaceNumber);
@@ -2332,7 +2427,9 @@ static int proc_free_streams(struct usb_dev_state *ps, void __user *arg)
 
 	r = parse_usbdevfs_streams(ps, arg, NULL, &num_eps, &eps, &intf);
 	if (r)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return r;
+}
 
 	destroy_async_on_interface(ps,
 				   intf->altsetting[0].desc.bInterfaceNumber);
@@ -2347,7 +2444,9 @@ static int proc_drop_privileges(struct usb_dev_state *ps, void __user *arg)
 	u32 data;
 
 	if (copy_from_user(&data, arg, sizeof(data)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	/* This is a one way operation. Once privileges are
 	 * dropped, you cannot regain them. You may however reissue
@@ -2373,7 +2472,9 @@ static long usbdev_do_ioctl(struct file *file, unsigned int cmd,
 	int ret = -ENOTTY;
 
 	if (!(file->f_mode & FMODE_WRITE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	usb_lock_device(dev);
 
@@ -2592,6 +2693,7 @@ static unsigned int usbdev_poll(struct file *file,
 	unsigned int mask = 0;
 
 	poll_wait(file, &ps->wait, wait);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (file->f_mode & FMODE_WRITE && !list_empty(&ps->async_completed))
 		mask |= POLLOUT | POLLWRNORM;
 	if (!connected(ps))
@@ -2620,6 +2722,7 @@ static void usbdev_remove(struct usb_device *udev)
 	struct usb_dev_state *ps;
 	struct siginfo sinfo;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!list_empty(&udev->filelist)) {
 		ps = list_entry(udev->filelist.next, struct usb_dev_state, list);
 		destroy_all_async(ps);
@@ -2640,6 +2743,7 @@ static void usbdev_remove(struct usb_device *udev)
 static int usbdev_notify(struct notifier_block *self,
 			       unsigned long action, void *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (action) {
 	case USB_DEVICE_ADD:
 		break;
@@ -2663,12 +2767,14 @@ int __init usb_devio_init(void)
 	retval = register_chrdev_region(USB_DEVICE_DEV, USB_DEVICE_MAX,
 					"usb_device");
 	if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "Unable to register minors for usb_device\n");
 		goto out;
 	}
 	cdev_init(&usb_device_cdev, &usbdev_file_operations);
 	retval = cdev_add(&usb_device_cdev, USB_DEVICE_DEV, USB_DEVICE_MAX);
 	if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "Unable to get usb_device major %d\n",
 		       USB_DEVICE_MAJOR);
 		goto error_cdev;
@@ -2684,6 +2790,7 @@ int __init usb_devio_init(void)
 
 void usb_devio_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	usb_unregister_notify(&usbdev_nb);
 	cdev_del(&usb_device_cdev);
 	unregister_chrdev_region(USB_DEVICE_DEV, USB_DEVICE_MAX);
diff --git a/drivers/usb/core/driver.c b/drivers/usb/core/driver.c
index eb87a25..dd91629 100644
--- a/drivers/usb/core/driver.c
+++ b/drivers/usb/core/driver.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/usb/driver.c - most of the driver model stuff for usb
  *
@@ -55,7 +57,9 @@ ssize_t usb_store_new_id(struct usb_dynids *dynids,
 	fields = sscanf(buf, "%x %x %x %x %x", &idVendor, &idProduct,
 			&bInterfaceClass, &refVendor, &refProduct);
 	if (fields < 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	dynid = kzalloc(sizeof(*dynid), GFP_KERNEL);
 	if (!dynid)
@@ -116,6 +120,7 @@ ssize_t usb_show_dynids(struct usb_dynids *dynids, char *buf)
 	struct usb_dynid *dynid;
 	size_t count = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dynid, &dynids->list, node)
 		if (dynid->id.bInterfaceClass != 0)
 			count += scnprintf(&buf[count], PAGE_SIZE - count, "%04x %04x %02x\n",
@@ -130,6 +135,7 @@ EXPORT_SYMBOL_GPL(usb_show_dynids);
 
 static ssize_t new_id_show(struct device_driver *driver, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_driver *usb_drv = to_usb_driver(driver);
 
 	return usb_show_dynids(&usb_drv->dynids, buf);
@@ -138,6 +144,7 @@ static ssize_t new_id_show(struct device_driver *driver, char *buf)
 static ssize_t new_id_store(struct device_driver *driver,
 			    const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_driver *usb_drv = to_usb_driver(driver);
 
 	return usb_store_new_id(&usb_drv->dynids, usb_drv->id_table, driver, buf, count);
@@ -151,6 +158,7 @@ static ssize_t remove_id_store(struct device_driver *driver, const char *buf,
 			       size_t count)
 {
 	struct usb_dynid *dynid, *n;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_driver *usb_driver = to_usb_driver(driver);
 	u32 idVendor;
 	u32 idProduct;
@@ -177,6 +185,7 @@ static ssize_t remove_id_store(struct device_driver *driver, const char *buf,
 
 static ssize_t remove_id_show(struct device_driver *driver, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return new_id_show(driver, buf);
 }
 static DRIVER_ATTR_RW(remove_id);
@@ -195,8 +204,10 @@ static int usb_create_newid_files(struct usb_driver *usb_drv)
 			error = driver_create_file(&usb_drv->drvwrap.driver,
 					&driver_attr_remove_id);
 			if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				driver_remove_file(&usb_drv->drvwrap.driver,
 						&driver_attr_new_id);
+}
 		}
 	}
 exit:
@@ -205,6 +216,7 @@ static int usb_create_newid_files(struct usb_driver *usb_drv)
 
 static void usb_remove_newid_files(struct usb_driver *usb_drv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (usb_drv->no_dynamic_id)
 		return;
 
@@ -221,6 +233,7 @@ static void usb_free_dynids(struct usb_driver *usb_drv)
 	struct usb_dynid *dynid, *n;
 
 	spin_lock(&usb_drv->dynids.lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(dynid, n, &usb_drv->dynids.list, node) {
 		list_del(&dynid->node);
 		kfree(dynid);
@@ -234,6 +247,7 @@ static const struct usb_device_id *usb_match_dynamic_id(struct usb_interface *in
 	struct usb_dynid *dynid;
 
 	spin_lock(&drv->dynids.lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(dynid, &drv->dynids.list, node) {
 		if (usb_match_one_id(intf, &dynid->id)) {
 			spin_unlock(&drv->dynids.lock);
@@ -248,6 +262,7 @@ static const struct usb_device_id *usb_match_dynamic_id(struct usb_interface *in
 /* called from driver core with dev locked */
 static int usb_probe_device(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device_driver *udriver = to_usb_device_driver(dev->driver);
 	struct usb_device *udev = to_usb_device(dev);
 	int error = 0;
@@ -270,6 +285,7 @@ static int usb_probe_device(struct device *dev)
 /* called from driver core with dev locked */
 static int usb_unbind_device(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device *udev = to_usb_device(dev);
 	struct usb_device_driver *udriver = to_usb_device_driver(dev->driver);
 
@@ -282,6 +298,7 @@ static int usb_unbind_device(struct device *dev)
 /* called from driver core with dev locked */
 static int usb_probe_interface(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_driver *driver = to_usb_driver(dev->driver);
 	struct usb_interface *intf = to_usb_interface(dev);
 	struct usb_device *udev = interface_to_usbdev(intf);
@@ -392,6 +409,7 @@ static int usb_probe_interface(struct device *dev)
 /* called from driver core with dev locked */
 static int usb_unbind_interface(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_driver *driver = to_usb_driver(dev->driver);
 	struct usb_interface *intf = to_usb_interface(dev);
 	struct usb_host_endpoint *ep, **eps = NULL;
@@ -515,7 +533,9 @@ int usb_driver_claim_interface(struct usb_driver *driver,
 	int lpm_disable_error = -ENODEV;
 
 	if (!iface)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	dev = &iface->dev;
 	if (dev->driver)
@@ -614,6 +634,7 @@ EXPORT_SYMBOL_GPL(usb_driver_release_interface);
 /* returns 0 if no match, 1 if match */
 int usb_match_device(struct usb_device *dev, const struct usb_device_id *id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((id->match_flags & USB_DEVICE_ID_MATCH_VENDOR) &&
 	    id->idVendor != le16_to_cpu(dev->descriptor.idVendor))
 		return 0;
@@ -691,7 +712,9 @@ int usb_match_one_id(struct usb_interface *interface,
 
 	/* proc_connectinfo in devio.c may call us with id == NULL. */
 	if (id == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	intf = interface->cur_altsetting;
 	dev = interface_to_usbdev(interface);
@@ -839,6 +862,7 @@ static int usb_uevent(struct device *dev, struct kobj_uevent_env *env)
 	struct usb_device *usb_dev;
 
 	if (is_usb_device(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		usb_dev = to_usb_device(dev);
 	} else if (is_usb_interface(dev)) {
 		struct usb_interface *intf = to_usb_interface(dev);
@@ -892,7 +916,9 @@ int usb_register_device_driver(struct usb_device_driver *new_udriver,
 	int retval = 0;
 
 	if (usb_disabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	new_udriver->drvwrap.for_devices = 1;
 	new_udriver->drvwrap.driver.name = new_udriver->name;
@@ -911,6 +937,7 @@ int usb_register_device_driver(struct usb_device_driver *new_udriver,
 			"	driver %s\n",
 			usbcore_name, retval, new_udriver->name);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 EXPORT_SYMBOL_GPL(usb_register_device_driver);
@@ -924,6 +951,7 @@ EXPORT_SYMBOL_GPL(usb_register_device_driver);
  */
 void usb_deregister_device_driver(struct usb_device_driver *udriver)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_info("%s: deregistering device driver %s\n",
 			usbcore_name, udriver->name);
 
@@ -953,7 +981,9 @@ int usb_register_driver(struct usb_driver *new_driver, struct module *owner,
 	int retval = 0;
 
 	if (usb_disabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	new_driver->drvwrap.for_devices = 0;
 	new_driver->drvwrap.driver.name = new_driver->name;
@@ -1002,6 +1032,7 @@ EXPORT_SYMBOL_GPL(usb_register_driver);
  */
 void usb_deregister(struct usb_driver *driver)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_info("%s: deregistering interface driver %s\n",
 			usbcore_name, driver->name);
 
@@ -1019,6 +1050,7 @@ EXPORT_SYMBOL_GPL(usb_deregister);
  */
 void usb_forced_unbind_intf(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_driver *driver = to_usb_driver(intf->dev.driver);
 
 	dev_dbg(&intf->dev, "forced unbind\n");
@@ -1042,6 +1074,7 @@ static void unbind_marked_interfaces(struct usb_device *udev)
 
 	config = udev->actconfig;
 	if (config) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < config->desc.bNumInterfaces; ++i) {
 			intf = config->interface[i];
 			if (intf->dev.driver && intf->needs_binding)
@@ -1064,7 +1097,9 @@ static void usb_rebind_intf(struct usb_interface *intf)
 
 	/* Delayed unbind of an existing driver */
 	if (intf->dev.driver)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		usb_forced_unbind_intf(intf);
+}
 
 	/* Try to rebind the interface */
 	if (!intf->dev.power.is_prepared) {
@@ -1089,6 +1124,7 @@ static void rebind_marked_interfaces(struct usb_device *udev)
 
 	config = udev->actconfig;
 	if (config) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < config->desc.bNumInterfaces; ++i) {
 			intf = config->interface[i];
 			if (intf->needs_binding)
@@ -1106,6 +1142,7 @@ static void rebind_marked_interfaces(struct usb_device *udev)
  */
 void usb_unbind_and_rebind_marked_interfaces(struct usb_device *udev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unbind_marked_interfaces(udev);
 	rebind_marked_interfaces(udev);
 }
@@ -1127,6 +1164,7 @@ static void unbind_no_pm_drivers_interfaces(struct usb_device *udev)
 
 	config = udev->actconfig;
 	if (config) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < config->desc.bNumInterfaces; ++i) {
 			intf = config->interface[i];
 
@@ -1404,6 +1442,7 @@ static int usb_resume_both(struct usb_device *udev, pm_message_t msg)
 	struct usb_interface	*intf;
 
 	if (udev->state == USB_STATE_NOTATTACHED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = -ENODEV;
 		goto done;
 	}
@@ -1460,6 +1499,7 @@ static void choose_wakeup(struct usb_device *udev, pm_message_t msg)
 /* The device lock is held by the PM core */
 int usb_suspend(struct device *dev, pm_message_t msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device	*udev = to_usb_device(dev);
 
 	unbind_no_pm_drivers_interfaces(udev);
@@ -1475,6 +1515,7 @@ int usb_suspend(struct device *dev, pm_message_t msg)
 /* The device lock is held by the PM core */
 int usb_resume_complete(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device *udev = to_usb_device(dev);
 
 	/* For PM complete calls, all we do is rebind interfaces
@@ -1488,6 +1529,7 @@ int usb_resume_complete(struct device *dev)
 /* The device lock is held by the PM core */
 int usb_resume(struct device *dev, pm_message_t msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device	*udev = to_usb_device(dev);
 	int			status;
 
@@ -1526,6 +1568,7 @@ int usb_resume(struct device *dev, pm_message_t msg)
  */
 void usb_enable_autosuspend(struct usb_device *udev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_runtime_allow(&udev->dev);
 }
 EXPORT_SYMBOL_GPL(usb_enable_autosuspend);
@@ -1541,6 +1584,7 @@ EXPORT_SYMBOL_GPL(usb_enable_autosuspend);
  */
 void usb_disable_autosuspend(struct usb_device *udev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm_runtime_forbid(&udev->dev);
 }
 EXPORT_SYMBOL_GPL(usb_disable_autosuspend);
@@ -1567,6 +1611,7 @@ void usb_autosuspend_device(struct usb_device *udev)
 
 	usb_mark_last_busy(udev);
 	status = pm_runtime_put_sync_autosuspend(&udev->dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_vdbg(&udev->dev, "%s: cnt %d -> %d\n",
 			__func__, atomic_read(&udev->dev.power.usage_count),
 			status);
@@ -1598,7 +1643,9 @@ int usb_autoresume_device(struct usb_device *udev)
 
 	status = pm_runtime_get_sync(&udev->dev);
 	if (status < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_runtime_put_sync(&udev->dev);
+}
 	dev_vdbg(&udev->dev, "%s: cnt %d -> %d\n",
 			__func__, atomic_read(&udev->dev.power.usage_count),
 			status);
@@ -1624,6 +1671,7 @@ int usb_autoresume_device(struct usb_device *udev)
  */
 void usb_autopm_put_interface(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device	*udev = interface_to_usbdev(intf);
 	int			status;
 
@@ -1653,6 +1701,7 @@ EXPORT_SYMBOL_GPL(usb_autopm_put_interface);
  */
 void usb_autopm_put_interface_async(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device	*udev = interface_to_usbdev(intf);
 	int			status;
 
@@ -1676,6 +1725,7 @@ EXPORT_SYMBOL_GPL(usb_autopm_put_interface_async);
  */
 void usb_autopm_put_interface_no_suspend(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device	*udev = interface_to_usbdev(intf);
 
 	usb_mark_last_busy(udev);
@@ -1709,7 +1759,9 @@ int usb_autopm_get_interface(struct usb_interface *intf)
 
 	status = pm_runtime_get_sync(&intf->dev);
 	if (status < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_runtime_put_sync(&intf->dev);
+}
 	else
 		atomic_inc(&intf->pm_usage_cnt);
 	dev_vdbg(&intf->dev, "%s: cnt %d -> %d\n",
@@ -1743,6 +1795,7 @@ int usb_autopm_get_interface_async(struct usb_interface *intf)
 	int	status;
 
 	status = pm_runtime_get(&intf->dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (status < 0 && status != -EINPROGRESS)
 		pm_runtime_put_noidle(&intf->dev);
 	else
@@ -1767,6 +1820,7 @@ EXPORT_SYMBOL_GPL(usb_autopm_get_interface_async);
  */
 void usb_autopm_get_interface_no_resume(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device	*udev = interface_to_usbdev(intf);
 
 	usb_mark_last_busy(udev);
@@ -1782,7 +1836,9 @@ static int autosuspend_check(struct usb_device *udev)
 	struct usb_interface	*intf;
 
 	if (udev->state == USB_STATE_NOTATTACHED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* Fail if autosuspend is disabled, or any interfaces are in use, or
 	 * any interface drivers require remote wakeup but it isn't available.
@@ -1839,6 +1895,7 @@ static int autosuspend_check(struct usb_device *udev)
 
 int usb_runtime_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device	*udev = to_usb_device(dev);
 	int			status;
 
@@ -1868,6 +1925,7 @@ int usb_runtime_suspend(struct device *dev)
 
 int usb_runtime_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device	*udev = to_usb_device(dev);
 	int			status;
 
@@ -1880,6 +1938,7 @@ int usb_runtime_resume(struct device *dev)
 
 int usb_runtime_idle(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device	*udev = to_usb_device(dev);
 
 	/* An idle USB device can be suspended if it passes the various
@@ -1893,6 +1952,7 @@ int usb_runtime_idle(struct device *dev)
 
 int usb_set_usb2_hardware_lpm(struct usb_device *udev, int enable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hcd *hcd = bus_to_hcd(udev->bus);
 	int ret = -EPERM;
 
diff --git a/drivers/usb/core/file.c b/drivers/usb/core/file.c
index 87ad6b6..d5ad4d1 100644
--- a/drivers/usb/core/file.c
+++ b/drivers/usb/core/file.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/usb/core/file.c
  *
@@ -37,6 +39,7 @@ static int usb_open(struct inode *inode, struct file *file)
 	const struct file_operations *new_fops;
 
 	down_read(&minor_rwsem);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	new_fops = fops_get(usb_minors[iminor(inode)]);
 
 	if (!new_fops)
diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index 8f7d942..a849672 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * USB hub driver.
  *
@@ -107,6 +109,7 @@ static int hub_port_disable(struct usb_hub *hub, int port1, int set_state);
 
 static inline char *portspeed(struct usb_hub *hub, int portstatus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (hub_is_superspeedplus(hub->hdev))
 		return "10.0 Gb/s";
 	if (hub_is_superspeed(hub->hdev))
@@ -122,6 +125,7 @@ static inline char *portspeed(struct usb_hub *hub, int portstatus)
 /* Note that hdev or one of its children must be locked! */
 struct usb_hub *usb_hub_to_struct_hub(struct usb_device *hdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!hdev || !hdev->actconfig || !hdev->maxchild)
 		return NULL;
 	return usb_get_intfdata(hdev->actconfig->interface[0]);
@@ -206,7 +210,9 @@ static void usb_set_lpm_mel(struct usb_device *udev,
 	device_mel = udev_exit_latency * 1000;
 	hub_mel = hub_exit_latency * 1000;
 	if (device_mel > hub_mel)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		total_mel += device_mel;
+}
 	else
 		total_mel += hub_mel;
 
@@ -234,7 +240,9 @@ static void usb_set_lpm_pel(struct usb_device *udev,
 	 * the device exit latency or the hub exit latency.
 	 */
 	if (udev_exit_latency > hub_exit_latency)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		first_link_pel = udev_exit_latency * 1000;
+}
 	else
 		first_link_pel = hub_exit_latency * 1000;
 
@@ -303,6 +311,7 @@ static void usb_set_lpm_parameters(struct usb_device *udev)
 	unsigned int hub_u1_del;
 	unsigned int hub_u2_del;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!udev->lpm_capable || udev->speed < USB_SPEED_SUPER)
 		return;
 
@@ -369,6 +378,7 @@ static int get_hub_descriptor(struct usb_device *hdev,
 	unsigned dtype;
 
 	if (hub_is_superspeed(hdev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dtype = USB_DT_SS_HUB;
 		size = USB_DT_SS_HUB_SIZE;
 	} else {
@@ -400,6 +410,7 @@ static int get_hub_descriptor(struct usb_device *hdev,
  */
 static int clear_hub_feature(struct usb_device *hdev, int feature)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return usb_control_msg(hdev, usb_sndctrlpipe(hdev, 0),
 		USB_REQ_CLEAR_FEATURE, USB_RT_HUB, feature, 0, NULL, 0, 1000);
 }
@@ -409,6 +420,7 @@ static int clear_hub_feature(struct usb_device *hdev, int feature)
  */
 int usb_clear_port_feature(struct usb_device *hdev, int port1, int feature)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return usb_control_msg(hdev, usb_sndctrlpipe(hdev, 0),
 		USB_REQ_CLEAR_FEATURE, USB_RT_PORT, feature, port1,
 		NULL, 0, 1000);
@@ -419,6 +431,7 @@ int usb_clear_port_feature(struct usb_device *hdev, int port1, int feature)
  */
 static int set_port_feature(struct usb_device *hdev, int port1, int feature)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return usb_control_msg(hdev, usb_sndctrlpipe(hdev, 0),
 		USB_REQ_SET_FEATURE, USB_RT_PORT, feature, port1,
 		NULL, 0, 1000);
@@ -426,6 +439,7 @@ static int set_port_feature(struct usb_device *hdev, int port1, int feature)
 
 static char *to_led_name(int selector)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (selector) {
 	case HUB_LED_AMBER:
 		return "amber";
@@ -451,6 +465,7 @@ static void set_port_led(struct usb_hub *hub, int port1, int selector)
 
 	status = set_port_feature(hub->hdev, (selector << 8) | port1,
 			USB_PORT_FEAT_INDICATOR);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&port_dev->dev, "indicator %s status %d\n",
 		to_led_name(selector), status);
 }
@@ -540,6 +555,7 @@ static int get_hub_status(struct usb_device *hdev,
 {
 	int i, status = -ETIMEDOUT;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < USB_STS_RETRIES &&
 			(status == -ETIMEDOUT || status == -EPIPE); i++) {
 		status = usb_control_msg(hdev, usb_rcvctrlpipe(hdev, 0),
@@ -558,6 +574,7 @@ static int get_port_status(struct usb_device *hdev, int port1,
 {
 	int i, status = -ETIMEDOUT;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < USB_STS_RETRIES &&
 			(status == -ETIMEDOUT || status == -EPIPE); i++) {
 		status = usb_control_msg(hdev, usb_rcvctrlpipe(hdev, 0),
@@ -574,7 +591,9 @@ static int hub_ext_port_status(struct usb_hub *hub, int port1, int type,
 	int len = 4;
 
 	if (type != HUB_PORT_STATUS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = 8;
+}
 
 	mutex_lock(&hub->status_mutex);
 	ret = get_port_status(hub->hdev, port1, &hub->status->port, type, len);
@@ -599,6 +618,7 @@ static int hub_ext_port_status(struct usb_hub *hub, int port1, int type,
 static int hub_port_status(struct usb_hub *hub, int port1,
 		u16 *status, u16 *change)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hub_ext_port_status(hub, port1, HUB_PORT_STATUS,
 				   status, change, NULL);
 }
@@ -607,6 +627,7 @@ static void kick_hub_wq(struct usb_hub *hub)
 {
 	struct usb_interface *intf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (hub->disconnected || work_pending(&hub->events))
 		return;
 
@@ -632,6 +653,7 @@ static void kick_hub_wq(struct usb_hub *hub)
 
 void usb_kick_hub_wq(struct usb_device *hdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = usb_hub_to_struct_hub(hdev);
 
 	if (hub)
@@ -652,7 +674,9 @@ void usb_wakeup_notification(struct usb_device *hdev,
 	struct usb_hub *hub;
 
 	if (!hdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	hub = usb_hub_to_struct_hub(hdev);
 	if (hub) {
@@ -787,7 +811,9 @@ int usb_hub_set_port_power(struct usb_device *hdev, struct usb_hub *hub,
 	int ret;
 
 	if (set)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = set_port_feature(hdev, port1, USB_PORT_FEAT_POWER);
+}
 	else
 		ret = usb_clear_port_feature(hdev, port1, USB_PORT_FEAT_POWER);
 
@@ -829,6 +855,7 @@ int usb_hub_clear_tt_buffer(struct urb *urb)
 	 */
 	clear = kmalloc(sizeof *clear, GFP_ATOMIC);
 	if (clear == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_err(&udev->dev, "can't save CLEAR_TT_BUFFER state\n");
 		/* FIXME recover somehow ... RESET_TT? */
 		return -ENOMEM;
@@ -868,7 +895,9 @@ static void hub_power_on(struct usb_hub *hub, bool do_delay)
 	 * unless we send these messages to the hub.
 	 */
 	if (hub_is_port_power_switchable(hub))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_dbg(hub->intfdev, "enabling power on all ports\n");
+}
 	else
 		dev_dbg(hub->intfdev, "trying to enable port power on "
 				"non-switchable hub\n");
@@ -890,6 +919,7 @@ static int hub_hub_status(struct usb_hub *hub,
 	mutex_lock(&hub->status_mutex);
 	ret = get_hub_status(hub->hdev, &hub->status->hub);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ret != -ENODEV)
 			dev_err(hub->intfdev,
 				"%s failed (err = %d)\n", __func__, ret);
@@ -905,6 +935,7 @@ static int hub_hub_status(struct usb_hub *hub,
 static int hub_set_port_link_state(struct usb_hub *hub, int port1,
 			unsigned int link_status)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return set_port_feature(hub->hdev,
 			port1 | (link_status << 3),
 			USB_PORT_FEAT_LINK_STATE);
@@ -917,6 +948,7 @@ static int hub_set_port_link_state(struct usb_hub *hub, int port1,
  */
 static void hub_port_logical_disconnect(struct usb_hub *hub, int port1)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_dbg(&hub->ports[port1 - 1]->dev, "logical disconnect\n");
 	hub_port_disable(hub, port1, 1);
 
@@ -951,7 +983,9 @@ int usb_remove_device(struct usb_device *udev)
 	struct usb_interface *intf;
 
 	if (!udev->parent)	/* Can't remove a root hub */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	hub = usb_hub_to_struct_hub(udev->parent);
 	intf = to_usb_interface(hub->intfdev);
 
@@ -1224,6 +1258,7 @@ static void hub_activate(struct usb_hub *hub, enum hub_activation_type type)
 /* Implement the continuations for the delays above */
 static void hub_init_func2(struct work_struct *ws)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = container_of(ws, struct usb_hub, init_work.work);
 
 	hub_activate(hub, HUB_INIT2);
@@ -1231,6 +1266,7 @@ static void hub_init_func2(struct work_struct *ws)
 
 static void hub_init_func3(struct work_struct *ws)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = container_of(ws, struct usb_hub, init_work.work);
 
 	hub_activate(hub, HUB_INIT3);
@@ -1268,6 +1304,7 @@ static void hub_pm_barrier_for_all_ports(struct usb_hub *hub)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < hub->hdev->maxchild; ++i)
 		pm_runtime_barrier(&hub->ports[i]->dev);
 }
@@ -1275,6 +1312,7 @@ static void hub_pm_barrier_for_all_ports(struct usb_hub *hub)
 /* caller has locked the hub device */
 static int hub_pre_reset(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = usb_get_intfdata(intf);
 
 	hub_quiesce(hub, HUB_PRE_RESET);
@@ -1286,6 +1324,7 @@ static int hub_pre_reset(struct usb_interface *intf)
 /* caller has locked the hub device */
 static int hub_post_reset(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = usb_get_intfdata(intf);
 
 	hub->in_reset = 0;
@@ -1311,6 +1350,7 @@ static int hub_configure(struct usb_hub *hub,
 
 	hub->buffer = kmalloc(sizeof(*hub->buffer), GFP_KERNEL);
 	if (!hub->buffer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOMEM;
 		goto fail;
 	}
@@ -1609,6 +1649,7 @@ static int hub_configure(struct usb_hub *hub,
 
 static void hub_release(struct kref *kref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = container_of(kref, struct usb_hub, kref);
 
 	usb_put_dev(hub->hdev);
@@ -1620,6 +1661,7 @@ static unsigned highspeed_hubs;
 
 static void hub_disconnect(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = usb_get_intfdata(intf);
 	struct usb_device *hdev = interface_to_usbdev(intf);
 	int port1;
@@ -1727,7 +1769,9 @@ static int hub_probe(struct usb_interface *intf, const struct usb_device_id *id)
 	 */
 #ifdef CONFIG_PM
 	if (hdev->dev.power.autosuspend_delay >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pm_runtime_set_autosuspend_delay(&hdev->dev, 0);
+}
 #endif
 
 	/*
@@ -1798,6 +1842,7 @@ static int hub_probe(struct usb_interface *intf, const struct usb_device_id *id)
 static int
 hub_ioctl(struct usb_interface *intf, unsigned int code, void *user_data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_device *hdev = interface_to_usbdev(intf);
 	struct usb_hub *hub = usb_hub_to_struct_hub(hdev);
 
@@ -1837,6 +1882,7 @@ hub_ioctl(struct usb_interface *intf, unsigned int code, void *user_data)
 static int find_port_owner(struct usb_device *hdev, unsigned port1,
 		struct usb_dev_state ***ppowner)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = usb_hub_to_struct_hub(hdev);
 
 	if (hdev->state == USB_STATE_NOTATTACHED)
@@ -1860,7 +1906,9 @@ int usb_hub_claim_port(struct usb_device *hdev, unsigned port1,
 
 	rc = find_port_owner(hdev, port1, &powner);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 	if (*powner)
 		return -EBUSY;
 	*powner = owner;
@@ -1876,7 +1924,9 @@ int usb_hub_release_port(struct usb_device *hdev, unsigned port1,
 
 	rc = find_port_owner(hdev, port1, &powner);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 	if (*powner != owner)
 		return -ENOENT;
 	*powner = NULL;
@@ -1886,6 +1936,7 @@ EXPORT_SYMBOL_GPL(usb_hub_release_port);
 
 void usb_hub_release_all_ports(struct usb_device *hdev, struct usb_dev_state *owner)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = usb_hub_to_struct_hub(hdev);
 	int n;
 
@@ -1901,6 +1952,7 @@ bool usb_device_is_owned(struct usb_device *udev)
 {
 	struct usb_hub *hub;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (udev->state == USB_STATE_NOTATTACHED || !udev->parent)
 		return false;
 	hub = usb_hub_to_struct_hub(udev->parent);
@@ -1909,6 +1961,7 @@ bool usb_device_is_owned(struct usb_device *udev)
 
 static void recursively_mark_NOTATTACHED(struct usb_device *udev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = usb_hub_to_struct_hub(udev);
 	int i;
 
@@ -1948,6 +2001,7 @@ void usb_set_device_state(struct usb_device *udev,
 	unsigned long flags;
 	int wakeup = -1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&device_state_lock, flags);
 	if (udev->state == USB_STATE_NOTATTACHED)
 		;	/* do nothing */
@@ -2020,6 +2074,7 @@ static void choose_devnum(struct usb_device *udev)
 	/* be safe when more hub events are proceed in parallel */
 	mutex_lock(&bus->devnum_next_mutex);
 	if (udev->wusb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		devnum = udev->portnum + 1;
 		BUG_ON(test_bit(devnum, bus->devmap.devicemap));
 	} else {
@@ -2041,6 +2096,7 @@ static void choose_devnum(struct usb_device *udev)
 
 static void release_devnum(struct usb_device *udev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (udev->devnum > 0) {
 		clear_bit(udev->devnum, udev->bus->devmap.devicemap);
 		udev->devnum = -1;
@@ -2056,6 +2112,7 @@ static void update_devnum(struct usb_device *udev, int devnum)
 
 static void hub_free_dev(struct usb_device *udev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hcd *hcd = bus_to_hcd(udev->bus);
 
 	/* Root hubs aren't real devices, so don't free HCD resources */
@@ -2065,6 +2122,7 @@ static void hub_free_dev(struct usb_device *udev)
 
 static void hub_disconnect_children(struct usb_device *udev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = usb_hub_to_struct_hub(udev);
 	int i;
 
@@ -2170,6 +2228,7 @@ void usb_disconnect(struct usb_device **pdev)
 #ifdef CONFIG_USB_ANNOUNCE_NEW_DEVICES
 static void show_string(struct usb_device *udev, char *id, char *string)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!string)
 		return;
 	dev_info(&udev->dev, "%s: %s\n", id, string);
@@ -2177,6 +2236,7 @@ static void show_string(struct usb_device *udev, char *id, char *string)
 
 static void announce_device(struct usb_device *udev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_info(&udev->dev, "New USB device found, idVendor=%04x, idProduct=%04x\n",
 		le16_to_cpu(udev->descriptor.idVendor),
 		le16_to_cpu(udev->descriptor.idProduct));
@@ -3671,7 +3731,9 @@ static int usb_req_set_sel(struct usb_device *udev, enum usb3_link_state state)
 	int ret;
 
 	if (udev->state != USB_STATE_CONFIGURED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Convert SEL and PEL stored in ns to us */
 	u1_sel = DIV_ROUND_UP(udev->u1_params.sel, 1000);
@@ -3940,6 +4002,7 @@ static void usb_enable_link_state(struct usb_hcd *hcd, struct usb_device *udev,
 static int usb_disable_link_state(struct usb_hcd *hcd, struct usb_device *udev,
 		enum usb3_link_state state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (state) {
 	case USB3_LPM_U1:
 	case USB3_LPM_U2:
@@ -3985,6 +4048,7 @@ int usb_disable_lpm(struct usb_device *udev)
 {
 	struct usb_hcd *hcd;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!udev || !udev->parent ||
 			udev->speed < USB_SPEED_SUPER ||
 			!udev->lpm_capable ||
@@ -4016,6 +4080,7 @@ EXPORT_SYMBOL_GPL(usb_disable_lpm);
 /* Grab the bandwidth_mutex before calling usb_disable_lpm() */
 int usb_unlocked_disable_lpm(struct usb_device *udev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hcd *hcd = bus_to_hcd(udev->bus);
 	int ret;
 
@@ -4044,6 +4109,7 @@ void usb_enable_lpm(struct usb_device *udev)
 	struct usb_hub *hub;
 	struct usb_port *port_dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!udev || !udev->parent ||
 			udev->speed < USB_SPEED_SUPER ||
 			!udev->lpm_capable ||
@@ -4079,6 +4145,7 @@ EXPORT_SYMBOL_GPL(usb_enable_lpm);
 /* Grab the bandwidth_mutex before calling usb_enable_lpm() */
 void usb_unlocked_enable_lpm(struct usb_device *udev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hcd *hcd = bus_to_hcd(udev->bus);
 
 	if (!hcd)
@@ -4097,6 +4164,7 @@ static void hub_usb3_port_prepare_disable(struct usb_hub *hub,
 	struct usb_device *udev = port_dev->child;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (udev && udev->port_is_suspended && udev->do_remote_wakeup) {
 		ret = hub_set_port_link_state(hub, port_dev->portnum,
 					      USB_SS_PORT_LS_U0);
@@ -5282,6 +5350,7 @@ static struct usb_driver hub_driver = {
 int usb_hub_init(void)
 {
 	if (usb_register(&hub_driver) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "%s: can't register hub driver\n",
 			usbcore_name);
 		return -1;
@@ -5295,7 +5364,9 @@ int usb_hub_init(void)
 	 */
 	hub_wq = alloc_workqueue("usb_hub_wq", WQ_FREEZABLE, 0);
 	if (hub_wq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Fall through if kernel_thread failed */
 	usb_deregister(&hub_driver);
@@ -5306,6 +5377,7 @@ int usb_hub_init(void)
 
 void usb_hub_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	destroy_workqueue(hub_wq);
 
 	/*
@@ -5727,6 +5799,7 @@ EXPORT_SYMBOL_GPL(usb_reset_device);
  */
 void usb_queue_reset_device(struct usb_interface *iface)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (schedule_work(&iface->reset_ws))
 		usb_get_intf(iface);
 }
@@ -5748,6 +5821,7 @@ EXPORT_SYMBOL_GPL(usb_queue_reset_device);
 struct usb_device *usb_hub_find_child(struct usb_device *hdev,
 		int port1)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = usb_hub_to_struct_hub(hdev);
 
 	if (port1 < 1 || port1 > hdev->maxchild)
@@ -5759,6 +5833,7 @@ EXPORT_SYMBOL_GPL(usb_hub_find_child);
 void usb_hub_adjust_deviceremovable(struct usb_device *hdev,
 		struct usb_hub_descriptor *desc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = usb_hub_to_struct_hub(hdev);
 	enum usb_port_connect_type connect_type;
 	int i;
@@ -5813,6 +5888,7 @@ void usb_hub_adjust_deviceremovable(struct usb_device *hdev,
 acpi_handle usb_get_hub_port_acpi_handle(struct usb_device *hdev,
 	int port1)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = usb_hub_to_struct_hub(hdev);
 
 	if (!hub)
diff --git a/drivers/usb/core/notify.c b/drivers/usb/core/notify.c
index b12a463..cb9c566 100644
--- a/drivers/usb/core/notify.c
+++ b/drivers/usb/core/notify.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * All the USB notify logic
  *
@@ -41,6 +43,7 @@ EXPORT_SYMBOL_GPL(usb_register_notify);
  */
 void usb_unregister_notify(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	blocking_notifier_chain_unregister(&usb_notifier_list, nb);
 }
 EXPORT_SYMBOL_GPL(usb_unregister_notify);
@@ -48,6 +51,7 @@ EXPORT_SYMBOL_GPL(usb_unregister_notify);
 
 void usb_notify_add_device(struct usb_device *udev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	blocking_notifier_call_chain(&usb_notifier_list, USB_DEVICE_ADD, udev);
 }
 
@@ -62,10 +66,12 @@ void usb_notify_remove_device(struct usb_device *udev)
 
 void usb_notify_add_bus(struct usb_bus *ubus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	blocking_notifier_call_chain(&usb_notifier_list, USB_BUS_ADD, ubus);
 }
 
 void usb_notify_remove_bus(struct usb_bus *ubus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	blocking_notifier_call_chain(&usb_notifier_list, USB_BUS_REMOVE, ubus);
 }
diff --git a/drivers/usb/core/usb-acpi.c b/drivers/usb/core/usb-acpi.c
index ef9cf4a..a4c2d1f 100644
--- a/drivers/usb/core/usb-acpi.c
+++ b/drivers/usb/core/usb-acpi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * USB-ACPI glue code
  *
@@ -35,7 +37,9 @@ bool usb_acpi_power_manageable(struct usb_device *hdev, int index)
 	port_handle = usb_get_hub_port_acpi_handle(hdev,
 		port1);
 	if (port_handle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return acpi_bus_power_manageable(port_handle);
+}
 	else
 		return false;
 }
@@ -55,6 +59,7 @@ EXPORT_SYMBOL_GPL(usb_acpi_power_manageable);
  */
 int usb_acpi_set_power_state(struct usb_device *hdev, int index, bool enable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hub *hub = usb_hub_to_struct_hub(hdev);
 	struct usb_port *port_dev;
 	acpi_handle port_handle;
@@ -103,6 +108,7 @@ static enum usb_port_connect_type usb_acpi_get_connect_type(acpi_handle handle,
 	 */
 	status = acpi_evaluate_object(handle, "_UPC", NULL, &buffer);
 	upc = buffer.pointer;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!upc || (upc->type != ACPI_TYPE_PACKAGE)
 		|| upc->package.count != 4) {
 		goto out;
@@ -133,7 +139,9 @@ static struct acpi_device *usb_acpi_find_port(struct acpi_device *parent,
 	struct acpi_device *adev;
 
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	list_for_each_entry(adev, &parent->children, node) {
 		if (acpi_device_adr(adev) == raw)
@@ -163,6 +171,7 @@ static struct acpi_device *usb_acpi_find_companion(struct device *dev)
 	 * root hub and usb ports.
 	 */
 	if (is_usb_device(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		udev = to_usb_device(dev);
 		if (udev->parent)
 			return NULL;
@@ -244,5 +253,6 @@ int usb_acpi_register(void)
 
 void usb_acpi_unregister(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_acpi_bus_type(&usb_acpi_bus);
 }
diff --git a/drivers/usb/core/usb.c b/drivers/usb/core/usb.c
index 17681d5..60d3843 100644
--- a/drivers/usb/core/usb.c
+++ b/drivers/usb/core/usb.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * drivers/usb/core/usb.c
  *
@@ -80,6 +82,7 @@ static bool match_endpoint(struct usb_endpoint_descriptor *epd,
 		struct usb_endpoint_descriptor **int_in,
 		struct usb_endpoint_descriptor **int_out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (usb_endpoint_type(epd)) {
 	case USB_ENDPOINT_XFER_BULK:
 		if (usb_endpoint_dir_in(epd)) {
@@ -144,7 +147,9 @@ int usb_find_common_endpoints(struct usb_host_interface *alt,
 	int i;
 
 	if (bulk_in)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*bulk_in = NULL;
+}
 	if (bulk_out)
 		*bulk_out = NULL;
 	if (int_in)
@@ -190,7 +195,9 @@ int usb_find_common_endpoints_reverse(struct usb_host_interface *alt,
 	int i;
 
 	if (bulk_in)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*bulk_in = NULL;
+}
 	if (bulk_out)
 		*bulk_out = NULL;
 	if (int_in)
@@ -228,6 +235,7 @@ struct usb_host_interface *usb_find_alt_setting(
 	struct usb_interface_cache *intf_cache = NULL;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < config->desc.bNumInterfaces; i++) {
 		if (config->intf_cache[i]->altsetting[0].desc.bInterfaceNumber
 				== iface_num) {
@@ -276,7 +284,9 @@ struct usb_interface *usb_ifnum_to_if(const struct usb_device *dev,
 	int i;
 
 	if (!config)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	for (i = 0; i < config->desc.bNumInterfaces; i++)
 		if (config->interface[i]->altsetting[0]
 				.desc.bInterfaceNumber == ifnum)
@@ -311,6 +321,7 @@ struct usb_host_interface *usb_altnum_to_altsetting(
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < intf->num_altsetting; i++) {
 		if (intf->altsetting[i].desc.bAlternateSetting == altnum)
 			return &intf->altsetting[i];
@@ -330,7 +341,9 @@ static int __find_interface(struct device *dev, void *data)
 	struct usb_interface *intf;
 
 	if (!is_usb_interface(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (dev->driver != arg->drv)
 		return 0;
@@ -362,6 +375,7 @@ struct usb_interface *usb_find_interface(struct usb_driver *drv, int minor)
 	/* Drop reference count from bus_find_device */
 	put_device(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev ? to_usb_interface(dev) : NULL;
 }
 EXPORT_SYMBOL_GPL(usb_find_interface);
@@ -377,7 +391,9 @@ static int __each_dev(struct device *dev, void *data)
 
 	/* There are struct usb_interface on the same bus, filter them out */
 	if (!is_usb_device(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return arg->fn(to_usb_device(dev), arg->data);
 }
@@ -411,6 +427,7 @@ static void usb_release_dev(struct device *dev)
 	struct usb_device *udev;
 	struct usb_hcd *hcd;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	udev = to_usb_device(dev);
 	hcd = bus_to_hcd(udev->bus);
 
@@ -428,6 +445,7 @@ static int usb_dev_uevent(struct device *dev, struct kobj_uevent_env *env)
 {
 	struct usb_device *usb_dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	usb_dev = to_usb_device(dev);
 
 	if (add_uevent_var(env, "BUSNUM=%03d", usb_dev->bus->busnum))
@@ -450,6 +468,7 @@ static int usb_dev_uevent(struct device *dev, struct kobj_uevent_env *env)
 
 static int usb_dev_prepare(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;		/* Implement eventually? */
 }
 
@@ -461,31 +480,37 @@ static void usb_dev_complete(struct device *dev)
 
 static int usb_dev_suspend(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return usb_suspend(dev, PMSG_SUSPEND);
 }
 
 static int usb_dev_resume(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return usb_resume(dev, PMSG_RESUME);
 }
 
 static int usb_dev_freeze(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return usb_suspend(dev, PMSG_FREEZE);
 }
 
 static int usb_dev_thaw(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return usb_resume(dev, PMSG_THAW);
 }
 
 static int usb_dev_poweroff(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return usb_suspend(dev, PMSG_HIBERNATE);
 }
 
 static int usb_dev_restore(struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return usb_resume(dev, PMSG_RESTORE);
 }
 
@@ -511,6 +536,7 @@ static char *usb_devnode(struct device *dev,
 {
 	struct usb_device *usb_dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	usb_dev = to_usb_device(dev);
 	return kasprintf(GFP_KERNEL, "bus/usb/%03d/%03d",
 			 usb_dev->bus->busnum, usb_dev->devnum);
@@ -530,6 +556,7 @@ struct device_type usb_device_type = {
 /* Returns 1 if @usb_bus is WUSB, 0 otherwise */
 static unsigned usb_bus_is_wusb(struct usb_bus *bus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct usb_hcd *hcd = bus_to_hcd(bus);
 	return hcd->wireless;
 }
@@ -560,7 +587,9 @@ struct usb_device *usb_alloc_dev(struct usb_device *parent,
 
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (!usb_get_hcd(usb_hcd)) {
 		kfree(dev);
@@ -686,6 +715,7 @@ EXPORT_SYMBOL_GPL(usb_alloc_dev);
  */
 struct usb_device *usb_get_dev(struct usb_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev)
 		get_device(&dev->dev);
 	return dev;
@@ -701,6 +731,7 @@ EXPORT_SYMBOL_GPL(usb_get_dev);
  */
 void usb_put_dev(struct usb_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev)
 		put_device(&dev->dev);
 }
@@ -720,6 +751,7 @@ EXPORT_SYMBOL_GPL(usb_put_dev);
  */
 struct usb_interface *usb_get_intf(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (intf)
 		get_device(&intf->dev);
 	return intf;
@@ -736,6 +768,7 @@ EXPORT_SYMBOL_GPL(usb_get_intf);
  */
 void usb_put_intf(struct usb_interface *intf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (intf)
 		put_device(&intf->dev);
 }
@@ -777,7 +810,9 @@ int usb_lock_device_for_reset(struct usb_device *udev,
 	unsigned long jiffies_expire = jiffies + HZ;
 
 	if (udev->state == USB_STATE_NOTATTACHED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 	if (udev->state == USB_STATE_SUSPENDED)
 		return -EHOSTUNREACH;
 	if (iface && (iface->condition == USB_INTERFACE_UNBINDING ||
@@ -820,6 +855,7 @@ EXPORT_SYMBOL_GPL(usb_lock_device_for_reset);
  */
 int usb_get_current_frame_number(struct usb_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return usb_hcd_get_frame_number(dev);
 }
 EXPORT_SYMBOL_GPL(usb_get_current_frame_number);
@@ -1174,22 +1210,27 @@ static int usb_debugfs_init(void)
 {
 	usb_debug_root = debugfs_create_dir("usb", NULL);
 	if (!usb_debug_root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	usb_debug_devices = debugfs_create_file("devices", 0444,
 						usb_debug_root, NULL,
 						&usbfs_devices_fops);
 	if (!usb_debug_devices) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		debugfs_remove(usb_debug_root);
 		usb_debug_root = NULL;
 		return -ENOENT;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void usb_debugfs_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	debugfs_remove(usb_debug_devices);
 	debugfs_remove(usb_debug_root);
 }
@@ -1201,6 +1242,7 @@ static int __init usb_init(void)
 {
 	int retval;
 	if (usb_disabled()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("%s: USB support disabled\n", usbcore_name);
 		return 0;
 	}
@@ -1233,6 +1275,7 @@ static int __init usb_init(void)
 	if (!retval)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	usb_hub_cleanup();
 hub_init_failed:
 	usb_devio_cleanup();
diff --git a/drivers/video/console/vgacon.c b/drivers/video/console/vgacon.c
index 445b1dc..1825d11 100644
--- a/drivers/video/console/vgacon.c
+++ b/drivers/video/console/vgacon.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/drivers/video/vgacon.c -- Low level VGA based console driver
  *
@@ -105,12 +107,14 @@ static bool vga_hardscroll_user_enable = true;
 
 bool vgacon_text_force(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return vgacon_text_mode_force;
 }
 EXPORT_SYMBOL(vgacon_text_force);
 
 static int __init text_mode(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vgacon_text_mode_force = true;
 	return 1;
 }
@@ -184,6 +188,7 @@ static void vgacon_scrollback_reset(int vc_num, size_t reset_size)
 {
 	struct vgacon_scrollback_info *scrollback = &vgacon_scrollbacks[vc_num];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (scrollback->data && reset_size > 0)
 		memset(scrollback->data, 0, reset_size);
 
@@ -213,6 +218,7 @@ static void vgacon_scrollback_init(int vc_num)
 
 static void vgacon_scrollback_switch(int vc_num)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!scrollback_persistent)
 		vc_num = 0;
 
@@ -231,6 +237,7 @@ static void vgacon_scrollback_switch(int vc_num)
 
 static void vgacon_scrollback_startup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vgacon_scrollback_cur = &vgacon_scrollbacks[0];
 	vgacon_scrollback_init(0);
 }
@@ -239,6 +246,7 @@ static void vgacon_scrollback_update(struct vc_data *c, int t, int count)
 {
 	void *p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!vgacon_scrollback_cur->data || !vgacon_scrollback_cur->size ||
 	    c->vc_num != fg_console)
 		return;
@@ -266,6 +274,7 @@ static void vgacon_scrollback_update(struct vc_data *c, int t, int count)
 
 static void vgacon_restore_screen(struct vc_data *c)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vgacon_scrollback_cur->save = 0;
 
 	if (!vga_is_gfx && !vgacon_scrollback_cur->restore) {
@@ -282,6 +291,7 @@ static void vgacon_scrolldelta(struct vc_data *c, int lines)
 	int start, end, count, soff;
 
 	if (!lines) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		c->vc_visible_origin = c->vc_origin;
 		vga_set_mem_top(c);
 		return;
@@ -475,10 +485,12 @@ static const char *vgacon_startup(void)
 				 */
 
 				for (i = 0; i < 16; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					inb_p(VGA_IS1_RC);
 					outb_p(i, VGA_ATT_W);
 					outb_p(i, VGA_ATT_W);
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				outb_p(0x20, VGA_ATT_W);
 
 				/*
@@ -517,6 +529,7 @@ static const char *vgacon_startup(void)
 	scr_writew(0xAA55, p);
 	scr_writew(0x55AA, p + 1);
 	if (scr_readw(p) != 0xAA55 || scr_readw(p + 1) != 0x55AA) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scr_writew(saved1, p);
 		scr_writew(saved2, p + 1);
 		goto no_vga;
@@ -524,6 +537,7 @@ static const char *vgacon_startup(void)
 	scr_writew(0x55AA, p);
 	scr_writew(0xAA55, p + 1);
 	if (scr_readw(p) != 0x55AA || scr_readw(p + 1) != 0xAA55) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scr_writew(saved1, p);
 		scr_writew(saved2, p + 1);
 		goto no_vga;
@@ -546,10 +560,12 @@ static const char *vgacon_startup(void)
 	vgacon_yres = vga_scan_lines;
 
 	if (!vga_init_done) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vgacon_scrollback_startup();
 		vga_init_done = true;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return display_desc;
 }
 
@@ -569,13 +585,17 @@ static void vgacon_init(struct vc_data *c, int init)
 		c->vc_cols = vga_video_num_columns;
 		c->vc_rows = vga_video_num_lines;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vc_resize(c, vga_video_num_columns, vga_video_num_lines);
+}
 
 	c->vc_scan_lines = vga_scan_lines;
 	c->vc_font.height = vga_video_font_height;
 	c->vc_complement_mask = 0x7700;
 	if (vga_512_chars)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		c->vc_hi_font_mask = 0x0800;
+}
 	p = *c->vc_uni_pagedir_loc;
 	if (c->vc_uni_pagedir_loc != &vgacon_uni_pagedir) {
 		con_free_unimap(c);
@@ -583,7 +603,9 @@ static void vgacon_init(struct vc_data *c, int init)
 		vgacon_refcount++;
 	}
 	if (!vgacon_uni_pagedir && p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		con_set_default_unimap(c);
+}
 
 	/* Only set the default if the user didn't deliberately override it */
 	if (global_cursor_default == -1)
@@ -612,27 +634,48 @@ static u8 vgacon_build_attr(struct vc_data *c, u8 color, u8 intensity,
 
 	if (vga_can_do_color) {
 		if (italic)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			attr = (attr & 0xF0) | c->vc_itcolor;
+}
 		else if (underline)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			attr = (attr & 0xf0) | c->vc_ulcolor;
+}
 		else if (intensity == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			attr = (attr & 0xf0) | c->vc_halfcolor;
+}
 	}
 	if (reverse)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		attr =
 		    ((attr) & 0x88) | ((((attr) >> 4) | ((attr) << 4)) &
 				       0x77);
+}
 	if (blink)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		attr ^= 0x80;
+}
 	if (intensity == 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		attr ^= 0x08;
+}
 	if (!vga_can_do_color) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (italic)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			attr = (attr & 0xF8) | 0x02;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (underline)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			attr = (attr & 0xf8) | 0x01;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (intensity == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			attr = (attr & 0xf0) | 0x08;
+}
 	}
 	return attr;
 }
@@ -641,6 +684,7 @@ static void vgacon_invert_region(struct vc_data *c, u16 * p, int count)
 {
 	const bool col = vga_can_do_color;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (count--) {
 		u16 a = scr_readw(p);
 		if (col)
@@ -658,7 +702,9 @@ static void vgacon_set_cursor_size(int xpos, int from, int to)
 	int curs, cure;
 
 	if ((from == cursor_size_lastfrom) && (to == cursor_size_lastto))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	cursor_size_lastfrom = from;
 	cursor_size_lastto = to;
 
@@ -669,6 +715,7 @@ static void vgacon_set_cursor_size(int xpos, int from, int to)
 		outb_p(VGA_CRTC_CURSOR_END, vga_video_port_reg);
 		cure = inb_p(vga_video_port_val);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		curs = 0;
 		cure = 0;
 	}
@@ -686,7 +733,9 @@ static void vgacon_set_cursor_size(int xpos, int from, int to)
 static void vgacon_cursor(struct vc_data *c, int mode)
 {
 	if (c->vc_mode != KD_TEXT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	vgacon_restore_screen(c);
 
@@ -735,7 +784,9 @@ static void vgacon_cursor(struct vc_data *c, int mode)
 			break;
 		case CUR_NONE:
 			if (vga_video_type >= VIDEO_TYPE_VGAC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vgacon_set_cursor_size(c->vc_x, 31, 30);
+}
 			else
 				vgacon_set_cursor_size(c->vc_x, 31, 31);
 			break;
@@ -755,6 +806,7 @@ static int vgacon_doresize(struct vc_data *c,
 	unsigned int scanlines = height * c->vc_font.height;
 	u8 scanlines_lo = 0, r7 = 0, vsync_end = 0, mode, max_scan;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	raw_spin_lock_irqsave(&vga_lock, flags);
 
 	vgacon_xres = width * VGA_FONTWIDTH;
@@ -839,6 +891,7 @@ static int vgacon_switch(struct vc_data *c)
 			vgacon_doresize(c, c->vc_cols, c->vc_rows);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vgacon_scrollback_switch(c->vc_num);
 	return 0;		/* Redrawing not needed */
 }
diff --git a/drivers/video/fbdev/core/fb_notify.c b/drivers/video/fbdev/core/fb_notify.c
index 74c2da5..0209be1 100644
--- a/drivers/video/fbdev/core/fb_notify.c
+++ b/drivers/video/fbdev/core/fb_notify.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/drivers/video/fb_notify.c
  *
@@ -32,6 +34,7 @@ EXPORT_SYMBOL(fb_register_client);
  */
 int fb_unregister_client(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return blocking_notifier_chain_unregister(&fb_notifier_list, nb);
 }
 EXPORT_SYMBOL(fb_unregister_client);
@@ -42,6 +45,7 @@ EXPORT_SYMBOL(fb_unregister_client);
  */
 int fb_notifier_call_chain(unsigned long val, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return blocking_notifier_call_chain(&fb_notifier_list, val, v);
 }
 EXPORT_SYMBOL_GPL(fb_notifier_call_chain);
diff --git a/drivers/video/fbdev/core/fbcon.c b/drivers/video/fbdev/core/fbcon.c
index 04612f9..3bd2eea 100644
--- a/drivers/video/fbdev/core/fbcon.c
+++ b/drivers/video/fbdev/core/fbcon.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/drivers/video/fbcon.c -- Low level frame buffer based console driver
  *
@@ -121,6 +123,7 @@ static int map_override;
 
 static inline void fbcon_map_override(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	map_override = 1;
 }
 #else
@@ -257,11 +260,13 @@ static inline void fbcon_set_rotation(struct fb_info *info)
 
 static void fbcon_rotate(struct fb_info *info, u32 rotate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return;
 }
 
 static void fbcon_rotate_all(struct fb_info *info, u32 rotate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return;
 }
 #endif /* CONFIG_FRAMEBUFFER_CONSOLE_ROTATION */
@@ -270,6 +275,7 @@ static int fbcon_get_rotate(struct fb_info *info)
 {
 	struct fbcon_ops *ops = info->fbcon_par;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (ops) ? ops->rotate : 0;
 }
 
@@ -277,6 +283,7 @@ static inline int fbcon_is_inactive(struct vc_data *vc, struct fb_info *info)
 {
 	struct fbcon_ops *ops = info->fbcon_par;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (info->state != FBINFO_STATE_RUNNING ||
 		vc->vc_mode != KD_TEXT || ops->graphics) &&
 		!vt_force_oops_output(vc);
@@ -285,6 +292,7 @@ static inline int fbcon_is_inactive(struct vc_data *vc, struct fb_info *info)
 static int get_color(struct vc_data *vc, struct fb_info *info,
 	      u16 c, int is_fg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int depth = fb_get_color_depth(&info->var, &info->fix);
 	int color = 0;
 
@@ -354,7 +362,9 @@ static void fbcon_update_softback(struct vc_data *vc)
 	int l = fbcon_softback_size / vc->vc_size_row;
 
 	if (l > 5)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		softback_end = softback_buf + l * vc->vc_size_row;
+}
 	else
 		/* Smaller scrollback makes no sense, and 0 would screw
 		   the operation totally */
@@ -363,6 +373,7 @@ static void fbcon_update_softback(struct vc_data *vc)
 
 static void fb_flashcursor(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fb_info *info = container_of(work, struct fb_info, queue);
 	struct fbcon_ops *ops = info->fbcon_par;
 	struct vc_data *vc = NULL;
@@ -408,6 +419,7 @@ static void fbcon_add_cursor_timer(struct fb_info *info)
 {
 	struct fbcon_ops *ops = info->fbcon_par;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!info->queue.func || info->queue.func == fb_flashcursor) &&
 	    !(ops->flags & FBCON_FLAGS_CURSOR_TIMER) &&
 	    !fbcon_cursor_noblink) {
@@ -438,6 +450,7 @@ static int __init fb_console_setup(char *this_opt)
 	char *options;
 	int i, j;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!this_opt || !*this_opt)
 		return 1;
 
@@ -511,6 +524,7 @@ static int search_fb_in_map(int idx)
 {
 	int i, retval = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = first_fb_vc; i <= last_fb_vc; i++) {
 		if (con2fb_map[i] == idx)
 			retval = 1;
@@ -522,6 +536,7 @@ static int search_for_mapped_con(void)
 {
 	int i, retval = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = first_fb_vc; i <= last_fb_vc; i++) {
 		if (con2fb_map[i] != -1)
 			retval = 1;
@@ -534,7 +549,9 @@ static int do_fbcon_takeover(int show_logo)
 	int err, i;
 
 	if (!num_registered_fb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	if (!show_logo)
 		logo_shown = FBCON_LOGO_DONTSHOW;
@@ -573,6 +590,7 @@ static void fbcon_prepare_logo(struct vc_data *vc, struct fb_info *info,
 	int logo_height;
 
 	if (info->fbops->owner) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		logo_shown = FBCON_LOGO_DONTSHOW;
 		return;
 	}
@@ -657,7 +675,9 @@ static void set_blitting_type(struct vc_data *vc, struct fb_info *info)
 	ops->p = &fb_display[vc->vc_num];
 
 	if ((info->flags & FBINFO_MISC_TILEBLITTING))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fbcon_set_tileops(vc, info);
+}
 	else {
 		fbcon_set_rotation(info);
 		fbcon_set_bitops(ops);
@@ -700,7 +720,9 @@ static int con2fb_acquire_newinfo(struct vc_data *vc, struct fb_info *info,
 	int err = 0;
 
 	if (!try_module_get(info->fbops->owner))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENODEV;
+}
 
 	if (!err && info->fbops->fb_open &&
 	    info->fbops->fb_open(info, 0))
@@ -782,6 +804,7 @@ static void con2fb_init_display(struct vc_data *vc, struct fb_info *info,
 
 	ops->currcon = fg_console;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (info->fbops->fb_set_par && !(ops->flags & FBCON_FLAGS_INIT)) {
 		ret = info->fbops->fb_set_par(info);
 
@@ -828,7 +851,9 @@ static int set_con2fb_map(int unit, int newidx, int user)
  	int found, err = 0;
 
 	if (oldidx == newidx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!info)
 		return -EINVAL;
@@ -880,6 +905,7 @@ static int var_to_display(struct display *disp,
 			  struct fb_var_screeninfo *var,
 			  struct fb_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	disp->xres_virtual = var->xres_virtual;
 	disp->yres_virtual = var->yres_virtual;
 	disp->bits_per_pixel = var->bits_per_pixel;
@@ -903,6 +929,7 @@ static int var_to_display(struct display *disp,
 static void display_to_var(struct fb_var_screeninfo *var,
 			   struct display *disp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fb_videomode_to_var(var, disp->mode);
 	var->xres_virtual = disp->xres_virtual;
 	var->yres_virtual = disp->yres_virtual;
@@ -1036,6 +1063,7 @@ static void fbcon_init(struct vc_data *vc, int init)
 	int logo = 1, new_rows, new_cols, rows, cols, charcnt = 256;
 	int cap, ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (info_idx == -1 || info == NULL)
 	    return;
 
@@ -1172,6 +1200,7 @@ static void fbcon_init(struct vc_data *vc, int init)
 
 static void fbcon_free_font(struct display *p, bool freefont)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (freefont && p->userfont && p->fontdata && (--REFCOUNT(p->fontdata) == 0))
 		kfree(p->fontdata - FONT_EXTRA_WORDS * sizeof(int));
 	p->fontdata = NULL;
@@ -1193,6 +1222,7 @@ static void fbcon_deinit(struct vc_data *vc)
 	if (idx == -1)
 		goto finished;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	info = registered_fb[idx];
 
 	if (!info)
@@ -1259,7 +1289,9 @@ static void fbcon_clear(struct vc_data *vc, int sy, int sx, int height,
 	u_int y_break;
 
 	if (fbcon_is_inactive(vc, info))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!height || !width)
 		return;
@@ -1295,10 +1327,12 @@ static void fbcon_putcs(struct vc_data *vc, const unsigned short *s,
 	struct fbcon_ops *ops = info->fbcon_par;
 
 	if (!fbcon_is_inactive(vc, info))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ops->putcs(vc, info, s, count, real_y(p, ypos), xpos,
 			   get_color(vc, info, scr_readw(s), 1),
 			   get_color(vc, info, scr_readw(s), 0));
 }
+}
 
 static void fbcon_putc(struct vc_data *vc, int c, int ypos, int xpos)
 {
@@ -1314,8 +1348,10 @@ static void fbcon_clear_margins(struct vc_data *vc, int bottom_only)
 	struct fbcon_ops *ops = info->fbcon_par;
 
 	if (!fbcon_is_inactive(vc, info))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ops->clear_margins(vc, info, margin_color, bottom_only);
 }
+}
 
 static void fbcon_cursor(struct vc_data *vc, int mode)
 {
@@ -1326,6 +1362,7 @@ static void fbcon_cursor(struct vc_data *vc, int mode)
 
 	ops->cur_blink_jiffies = msecs_to_jiffies(vc->vc_cur_blink_ms);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (fbcon_is_inactive(vc, info) || vc->vc_deccm != 1)
 		return;
 
@@ -1364,7 +1401,9 @@ static void fbcon_set_disp(struct fb_info *info, struct fb_var_screeninfo *var,
 	p = &fb_display[unit];
 
 	if (var_to_display(p, var, info))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	vc = vc_cons[unit].d;
 
@@ -1428,7 +1467,9 @@ static __inline__ void ywrap_up(struct vc_data *vc, int count)
 	
 	p->yscroll += count;
 	if (p->yscroll >= p->vrows)	/* Deal with wrap */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p->yscroll -= p->vrows;
+}
 	ops->var.xoffset = 0;
 	ops->var.yoffset = p->yscroll * vc->vc_font.height;
 	ops->var.vmode |= FB_VMODE_YWRAP;
@@ -1447,7 +1488,9 @@ static __inline__ void ywrap_down(struct vc_data *vc, int count)
 	
 	p->yscroll -= count;
 	if (p->yscroll < 0)	/* Deal with wrap */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p->yscroll += p->vrows;
+}
 	ops->var.xoffset = 0;
 	ops->var.yoffset = p->yscroll * vc->vc_font.height;
 	ops->var.vmode |= FB_VMODE_YWRAP;
@@ -1466,6 +1509,7 @@ static __inline__ void ypan_up(struct vc_data *vc, int count)
 
 	p->yscroll += count;
 	if (p->yscroll > p->vrows - vc->vc_rows) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ops->bmove(vc, info, p->vrows - vc->vc_rows,
 			    0, 0, 0, vc->vc_rows, vc->vc_cols);
 		p->yscroll -= p->vrows - vc->vc_rows;
@@ -1491,6 +1535,7 @@ static __inline__ void ypan_up_redraw(struct vc_data *vc, int t, int count)
 	p->yscroll += count;
 
 	if (p->yscroll > p->vrows - vc->vc_rows) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p->yscroll -= p->vrows - vc->vc_rows;
 		fbcon_redraw_move(vc, p, t + count, vc->vc_rows - count, t);
 	}
@@ -1514,6 +1559,7 @@ static __inline__ void ypan_down(struct vc_data *vc, int count)
 	
 	p->yscroll -= count;
 	if (p->yscroll < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ops->bmove(vc, info, 0, 0, p->vrows - vc->vc_rows,
 			    0, vc->vc_rows, vc->vc_cols);
 		p->yscroll += p->vrows - vc->vc_rows;
@@ -1539,6 +1585,7 @@ static __inline__ void ypan_down_redraw(struct vc_data *vc, int t, int count)
 	p->yscroll -= count;
 
 	if (p->yscroll < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p->yscroll += p->vrows - vc->vc_rows;
 		fbcon_redraw_move(vc, p, t, vc->vc_rows - count, t + count);
 	}
@@ -1564,7 +1611,9 @@ static void fbcon_redraw_softback(struct vc_data *vc, struct display *p,
 
 	d = (u16 *) softback_curr;
 	if (d == (u16 *) softback_in)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		d = (u16 *) vc->vc_origin;
+}
 	n = softback_curr + delta * vc->vc_size_row;
 	softback_lines -= delta;
 	if (delta < 0) {
@@ -1653,6 +1702,7 @@ static void fbcon_redraw_move(struct vc_data *vc, struct display *p,
 	unsigned short *s = (unsigned short *)
 		(vc->vc_origin + vc->vc_size_row * line);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (count--) {
 		unsigned short *start = s;
 		unsigned short *le = advance_row(s, 1);
@@ -1690,6 +1740,7 @@ static void fbcon_redraw_blit(struct vc_data *vc, struct fb_info *info,
 	unsigned short *s = d + offset;
 	struct fbcon_ops *ops = info->fbcon_par;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (count--) {
 		unsigned short *start = s;
 		unsigned short *le = advance_row(s, 1);
@@ -1738,6 +1789,7 @@ static void fbcon_redraw(struct vc_data *vc, struct display *p,
 	    (vc->vc_origin + vc->vc_size_row * line);
 	unsigned short *s = d + offset;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (count--) {
 		unsigned short *start = s;
 		unsigned short *le = advance_row(s, 1);
@@ -1792,7 +1844,9 @@ static inline void fbcon_softback_note(struct vc_data *vc, int t,
 	unsigned short *p;
 
 	if (vc->vc_num != fg_console)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	p = (unsigned short *) (vc->vc_origin + t * vc->vc_size_row);
 
 	while (count) {
@@ -1819,7 +1873,9 @@ static bool fbcon_scroll(struct vc_data *vc, unsigned int t, unsigned int b,
 	int scroll_partial = info->flags & FBINFO_PARTIAL_PAN_OK;
 
 	if (fbcon_is_inactive(vc, info))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	fbcon_cursor(vc, CM_ERASE);
 
@@ -2022,7 +2078,9 @@ static void fbcon_bmove(struct vc_data *vc, int sy, int sx, int dy, int dx,
 	struct display *p = &fb_display[vc->vc_num];
 	
 	if (fbcon_is_inactive(vc, info))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!width || !height)
 		return;
@@ -2045,6 +2103,7 @@ static void fbcon_bmove_rec(struct vc_data *vc, struct display *p, int sy, int s
 	struct fbcon_ops *ops = info->fbcon_par;
 	u_int b;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sy < y_break && sy + height > y_break) {
 		b = y_break - sy;
 		if (dy < sy) {	/* Avoid trashing self */
@@ -2088,6 +2147,7 @@ static void updatescrollmode(struct display *p,
 	int fh = vc->vc_font.height;
 	int cap = info->flags;
 	u16 t = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ypan = FBCON_SWAP(ops->rotate, info->fix.ypanstep,
 				  info->fix.xpanstep);
 	int ywrap = FBCON_SWAP(ops->rotate, info->fix.ywrapstep, t);
@@ -2136,6 +2196,7 @@ static int fbcon_resize(struct vc_data *vc, unsigned int width,
 	struct fb_var_screeninfo var = info->var;
 	int x_diff, y_diff, virt_w, virt_h, virt_fw, virt_fh;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	virt_w = FBCON_SWAP(ops->rotate, width, height);
 	virt_h = FBCON_SWAP(ops->rotate, height, width);
 	virt_fw = FBCON_SWAP(ops->rotate, vc->vc_font.width,
@@ -2185,6 +2246,7 @@ static int fbcon_switch(struct vc_data *vc)
 	ops = info->fbcon_par;
 
 	if (softback_top) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (softback_lines)
 			fbcon_set_origin(vc);
 		softback_top = softback_curr = softback_in = softback_buf;
@@ -2318,6 +2380,7 @@ static void fbcon_generic_blank(struct vc_data *vc, struct fb_info *info,
 	struct fb_event event;
 
 	if (blank) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unsigned short charmask = vc->vc_hi_font_mask ?
 			0x1ff : 0xff;
 		unsigned short oldc;
@@ -2348,6 +2411,7 @@ static int fbcon_blank(struct vc_data *vc, int blank, int mode_switch)
 		ops->graphics = 1;
 
 		if (!blank) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			var.activate = FB_ACTIVATE_NOW | FB_ACTIVATE_FORCE;
 			fb_set_var(info, &var);
 			ops->graphics = 0;
@@ -2387,7 +2451,9 @@ static int fbcon_debug_enter(struct vc_data *vc)
 	ops->save_graphics = ops->graphics;
 	ops->graphics = 0;
 	if (info->fbops->fb_debug_enter)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->fbops->fb_debug_enter(info);
+}
 	fbcon_set_palette(vc, color_table);
 	return 0;
 }
@@ -2399,7 +2465,9 @@ static int fbcon_debug_leave(struct vc_data *vc)
 
 	ops->graphics = ops->save_graphics;
 	if (info->fbops->fb_debug_leave)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->fbops->fb_debug_leave(info);
+}
 	return 0;
 }
 
@@ -2411,6 +2479,7 @@ static int fbcon_get_font(struct vc_data *vc, struct console_font *font)
 
 	font->width = vc->vc_font.width;
 	font->height = vc->vc_font.height;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	font->charcount = vc->vc_hi_font_mask ? 512 : 256;
 	if (!font->data)
 		return 0;
@@ -2457,6 +2526,7 @@ static int fbcon_get_font(struct vc_data *vc, struct console_font *font)
 /* set/clear vc_hi_font_mask and update vc attrs accordingly */
 static void set_vc_hi_font(struct vc_data *vc, bool set)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!set) {
 		vc->vc_hi_font_mask = 0;
 		if (vc->vc_can_do_color) {
@@ -2525,6 +2595,7 @@ static int fbcon_do_set_font(struct vc_data *vc, int w, int h,
 	int cnt;
 	char *old_data = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (con_is_visible(vc) && softback_lines)
 		fbcon_set_origin(vc);
 
@@ -2572,7 +2643,9 @@ static int fbcon_copy_font(struct vc_data *vc, int con)
 	struct console_font *f = &vc->vc_font;
 
 	if (od->fontdata == f->data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;	/* already the same font... */
+}
 	return fbcon_do_set_font(vc, f->width, f->height, od->fontdata, od->userfont);
 }
 
@@ -2657,8 +2730,10 @@ static int fbcon_set_def_font(struct vc_data *vc, struct console_font *font, cha
 	const struct font_desc *f;
 
 	if (!name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		f = get_default_font(info->var.xres, info->var.yres,
 				     info->pixmap.blit_x, info->pixmap.blit_y);
+}
 	else if (!(f = find_font(name)))
 		return -ENOENT;
 
@@ -2682,7 +2757,9 @@ static void fbcon_set_palette(struct vc_data *vc, const unsigned char *table)
 	u8 val;
 
 	if (fbcon_is_inactive(vc, info))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!con_is_visible(vc))
 		return;
@@ -2733,6 +2810,7 @@ static unsigned long fbcon_getxy(struct vc_data *vc, unsigned long pos,
 	unsigned long ret;
 	int x, y;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pos >= vc->vc_origin && pos < vc->vc_scr_end) {
 		unsigned long offset = (pos - vc->vc_origin) / 2;
 
@@ -2770,6 +2848,7 @@ static unsigned long fbcon_getxy(struct vc_data *vc, unsigned long pos,
    that's why we have to use a separate routine. */
 static void fbcon_invert_region(struct vc_data *vc, u16 * p, int cnt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (cnt--) {
 		u16 a = scr_readw(p);
 		if (!vc->vc_can_do_color)
@@ -2796,6 +2875,7 @@ static void fbcon_scrolldelta(struct vc_data *vc, int lines)
 	int offset, limit, scrollback_old;
 
 	if (softback_top) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (vc->vc_num != fg_console)
 			return;
 		if (vc->vc_mode != KD_TEXT || !lines)
@@ -2879,6 +2959,7 @@ static void fbcon_scrolldelta(struct vc_data *vc, int lines)
 
 static int fbcon_set_origin(struct vc_data *vc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (softback_lines)
 		fbcon_scrolldelta(vc, softback_lines);
 	return 0;
@@ -2889,6 +2970,7 @@ static void fbcon_suspended(struct fb_info *info)
 	struct vc_data *vc = NULL;
 	struct fbcon_ops *ops = info->fbcon_par;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ops || ops->currcon < 0)
 		return;
 	vc = vc_cons[ops->currcon].d;
@@ -2902,6 +2984,7 @@ static void fbcon_resumed(struct fb_info *info)
 	struct vc_data *vc;
 	struct fbcon_ops *ops = info->fbcon_par;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ops || ops->currcon < 0)
 		return;
 	vc = vc_cons[ops->currcon].d;
@@ -2916,6 +2999,7 @@ static void fbcon_modechanged(struct fb_info *info)
 	struct display *p;
 	int rows, cols;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ops || ops->currcon < 0)
 		return;
 	vc = vc_cons[ops->currcon].d;
@@ -2956,6 +3040,7 @@ static void fbcon_set_all_vcs(struct fb_info *info)
 	struct display *p;
 	int i, rows, cols, fg = -1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ops || ops->currcon < 0)
 		return;
 
@@ -3019,7 +3104,9 @@ static int fbcon_unbind(void)
 				fbcon_is_default);
 
 	if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fbcon_has_console_bind = 0;
+}
 
 	return ret;
 }
@@ -3036,7 +3123,9 @@ static int fbcon_fb_unbind(int idx)
 	int i, new_idx = -1, ret = 0;
 
 	if (!fbcon_has_console_bind)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	for (i = first_fb_vc; i <= last_fb_vc; i++) {
 		if (con2fb_map[i] != idx &&
@@ -3086,6 +3175,7 @@ static int fbcon_fb_unregistered(struct fb_info *info)
 	int i, idx;
 
 	idx = info->node;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = first_fb_vc; i <= last_fb_vc; i++) {
 		if (con2fb_map[i] == idx)
 			con2fb_map[i] = -1;
@@ -3122,6 +3212,7 @@ static int fbcon_fb_unregistered(struct fb_info *info)
 static void fbcon_remap_all(int idx)
 {
 	int i;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = first_fb_vc; i <= last_fb_vc; i++)
 		set_con2fb_map(i, idx, 0);
 
@@ -3136,6 +3227,7 @@ static void fbcon_remap_all(int idx)
 #ifdef CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY
 static void fbcon_select_primary(struct fb_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!map_override && primary_device == -1 &&
 	    fb_is_primary_device(info)) {
 		int i;
@@ -3172,6 +3264,7 @@ static int fbcon_fb_registered(struct fb_info *info)
 	fbcon_select_primary(info);
 
 	if (info_idx == -1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = first_fb_vc; i <= last_fb_vc; i++) {
 			if (con2fb_map_boot[i] == idx) {
 				info_idx = idx;
@@ -3196,6 +3289,7 @@ static void fbcon_fb_blanked(struct fb_info *info, int blank)
 	struct fbcon_ops *ops = info->fbcon_par;
 	struct vc_data *vc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ops || ops->currcon < 0)
 		return;
 
@@ -3220,6 +3314,7 @@ static void fbcon_new_modelist(struct fb_info *info)
 	struct fb_var_screeninfo var;
 	const struct fb_videomode *mode;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = first_fb_vc; i <= last_fb_vc; i++) {
 		if (registered_fb[con2fb_map[i]] != info)
 			continue;
@@ -3243,6 +3338,7 @@ static void fbcon_get_requirement(struct fb_info *info,
 	if (caps->flags) {
 		int i, charcnt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = first_fb_vc; i <= last_fb_vc; i++) {
 			vc = vc_cons[i].d;
 			if (vc && vc->vc_mode == KD_TEXT &&
@@ -3388,7 +3484,9 @@ static ssize_t store_rotate(struct device *device,
 	char **last = NULL;
 
 	if (fbcon_has_exited)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return count;
+}
 
 	console_lock();
 	idx = con2fb_map[fg_console];
@@ -3413,7 +3511,9 @@ static ssize_t store_rotate_all(struct device *device,
 	char **last = NULL;
 
 	if (fbcon_has_exited)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return count;
+}
 
 	console_lock();
 	idx = con2fb_map[fg_console];
@@ -3436,7 +3536,9 @@ static ssize_t show_rotate(struct device *device,
 	int rotate = 0, idx;
 
 	if (fbcon_has_exited)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	console_lock();
 	idx = con2fb_map[fg_console];
@@ -3459,7 +3561,9 @@ static ssize_t show_cursor_blink(struct device *device,
 	int idx, blink = -1;
 
 	if (fbcon_has_exited)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	console_lock();
 	idx = con2fb_map[fg_console];
@@ -3488,7 +3592,9 @@ static ssize_t store_cursor_blink(struct device *device,
 	char **last = NULL;
 
 	if (fbcon_has_exited)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return count;
+}
 
 	console_lock();
 	idx = con2fb_map[fg_console];
@@ -3537,9 +3643,11 @@ static int fbcon_init_device(void)
 	}
 
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (--i >= 0)
 			device_remove_file(fbcon_device, &device_attrs[i]);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fbcon_has_sysfs = 0;
 	}
 
@@ -3553,13 +3661,17 @@ static void fbcon_start(void)
 
 		console_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < FB_MAX; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (registered_fb[i] != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				info_idx = i;
 				break;
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		do_fbcon_takeover(0);
 		console_unlock();
 
@@ -3572,7 +3684,9 @@ static void fbcon_exit(void)
 	int i, j, mapped;
 
 	if (fbcon_has_exited)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	kfree((void *)softback_buf);
 	softback_buf = 0UL;
diff --git a/drivers/video/fbdev/core/fbmem.c b/drivers/video/fbdev/core/fbmem.c
index f741ba8..13d9391 100644
--- a/drivers/video/fbdev/core/fbmem.c
+++ b/drivers/video/fbdev/core/fbmem.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/drivers/video/fbmem.c
  *
@@ -57,7 +59,9 @@ static struct fb_info *get_fb_info(unsigned int idx)
 	struct fb_info *fb_info;
 
 	if (idx >= FB_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENODEV);
+}
 
 	mutex_lock(&registration_lock);
 	fb_info = registered_fb[idx];
@@ -70,6 +74,7 @@ static struct fb_info *get_fb_info(unsigned int idx)
 
 static void put_fb_info(struct fb_info *fb_info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!atomic_dec_and_test(&fb_info->count))
 		return;
 	if (fb_info->fbops->fb_destroy)
@@ -78,6 +83,7 @@ static void put_fb_info(struct fb_info *fb_info)
 
 int lock_fb_info(struct fb_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&info->lock);
 	if (!info->fbops) {
 		mutex_unlock(&info->lock);
@@ -119,6 +125,7 @@ EXPORT_SYMBOL(fb_get_color_depth);
  */
 void fb_pad_aligned_buffer(u8 *dst, u32 d_pitch, u8 *src, u32 s_pitch, u32 height)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__fb_pad_aligned_buffer(dst, d_pitch, src, s_pitch, height);
 }
 EXPORT_SYMBOL(fb_pad_aligned_buffer);
@@ -129,6 +136,7 @@ void fb_pad_unaligned_buffer(u8 *dst, u32 d_pitch, u8 *src, u32 idx, u32 height,
 	u8 mask = (u8) (0xfff << shift_high), tmp;
 	int i, j;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = height; i--; ) {
 		for (j = 0; j < idx; j++) {
 			tmp = dst[j];
@@ -166,6 +174,7 @@ char* fb_get_buffer_offset(struct fb_info *info, struct fb_pixmap *buf, u32 size
 	 * the pixmap is done
 	 */
 	if (buf->flags & FB_PIXMAP_IO) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (info->fbops->fb_sync && (buf->flags & FB_PIXMAP_SYNC))
 			info->fbops->fb_sync(info);
 		return addr;
@@ -194,6 +203,7 @@ EXPORT_SYMBOL(fb_get_buffer_offset);
 
 static inline unsigned safe_shift(unsigned d, int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return n < 0 ? d >> -n : d << n;
 }
 
@@ -214,6 +224,7 @@ static void fb_set_logocmap(struct fb_info *info,
 	palette_cmap.blue = palette_blue;
 	palette_cmap.transp = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < logo->clutsize; i += n) {
 		n = logo->clutsize - i;
 		/* palette_cmap provides space for only 16 colors at once */
@@ -272,6 +283,7 @@ static void fb_set_logo_directpalette(struct fb_info *info,
 	greenshift = info->var.green.offset;
 	blueshift = info->var.blue.offset;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 32; i < 32 + logo->clutsize; i++)
 		palette[i] = i << redshift | i << greenshift | i << blueshift;
 }
@@ -282,6 +294,7 @@ static void fb_set_logo(struct fb_info *info,
 {
 	int i, j, k;
 	const u8 *src = logo->data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u8 xor = (info->fix.visual == FB_VISUAL_MONO01) ? 0xff : 0;
 	u8 fg = 1, d;
 
@@ -715,6 +728,7 @@ static const struct seq_operations proc_fb_seq_ops = {
 
 static int proc_fb_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &proc_fb_seq_ops);
 }
 
@@ -736,6 +750,7 @@ static const struct file_operations fb_proc_fops = {
  */
 static struct fb_info *file_fb_info(struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	int fbidx = iminor(inode);
 	struct fb_info *info = registered_fb[fbidx];
@@ -755,6 +770,7 @@ fb_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
 	int c, cnt = 0, err = 0;
 	unsigned long total_size;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!info || ! info->screen_base)
 		return -ENODEV;
 
@@ -820,6 +836,7 @@ fb_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
 	int c, cnt = 0, err = 0;
 	unsigned long total_size;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!info || !info->screen_base)
 		return -ENODEV;
 
@@ -890,6 +907,7 @@ fb_pan_display(struct fb_info *info, struct fb_var_screeninfo *var)
 	int err = 0;
 
 	if (var->yoffset > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (var->vmode & FB_VMODE_YWRAP) {
 			if (!fix->ywrapstep || (var->yoffset % fix->ywrapstep))
 				err = -EINVAL;
@@ -929,6 +947,7 @@ static int fb_check_caps(struct fb_info *info, struct fb_var_screeninfo *var,
 
 	memset(&caps, 0, sizeof(caps));
 	memset(&fbcaps, 0, sizeof(fbcaps));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	caps.flags = (activate & FB_ACTIVATE_ALL) ? 1 : 0;
 	event.info = info;
 	event.data = &caps;
@@ -965,6 +984,7 @@ fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var)
 		    ret = fb_notifier_call_chain(FB_EVENT_MODE_DELETE, &event);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ret)
 		    fb_delete_videomode(&mode1, &info->modelist);
 
@@ -1274,7 +1294,9 @@ static int fb_getput_cmap(struct fb_info *info, unsigned int cmd,
 	cmap32 = compat_ptr(arg);
 
 	if (copy_in_user(&cmap->start, &cmap32->start, 2 * sizeof(__u32)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	if (get_user(data, &cmap32->red) ||
 	    put_user(compat_ptr(data), &cmap->red) ||
@@ -1306,6 +1328,7 @@ static int do_fscreeninfo_to_user(struct fb_fix_screeninfo *fix,
 	err = copy_to_user(&fix32->id, &fix->id, sizeof(fix32->id));
 
 	data = (__u32) (unsigned long) fix->smem_start;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err |= put_user(data, &fix32->smem_start);
 
 	err |= put_user(fix->smem_len, &fix32->smem_len);
@@ -1336,7 +1359,9 @@ static int fb_get_fscreeninfo(struct fb_info *info, unsigned int cmd,
 	struct fb_fix_screeninfo fix;
 
 	if (!lock_fb_info(info))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 	fix = info->fix;
 	unlock_fb_info(info);
 	return do_fscreeninfo_to_user(&fix, compat_ptr(arg));
@@ -1345,6 +1370,7 @@ static int fb_get_fscreeninfo(struct fb_info *info, unsigned int cmd,
 static long fb_compat_ioctl(struct file *file, unsigned int cmd,
 			    unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fb_info *info = file_fb_info(file);
 	struct fb_ops *fb;
 	long ret = -ENOIOCTLCMD;
@@ -1384,6 +1410,7 @@ static long fb_compat_ioctl(struct file *file, unsigned int cmd,
 static int
 fb_mmap(struct file *file, struct vm_area_struct * vma)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fb_info *info = file_fb_info(file);
 	struct fb_ops *fb;
 	unsigned long mmio_pgoff;
@@ -1444,6 +1471,7 @@ fb_open(struct inode *inode, struct file *file)
 __acquires(&info->lock)
 __releases(&info->lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int fbidx = iminor(inode);
 	struct fb_info *info;
 	int res = 0;
@@ -1489,7 +1517,9 @@ __releases(&info->lock)
 
 	mutex_lock(&info->lock);
 	if (info->fbops->fb_release)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->fbops->fb_release(info,1);
+}
 	module_put(info->fbops->owner);
 	mutex_unlock(&info->lock);
 	put_fb_info(info);
@@ -1576,6 +1606,7 @@ static bool fb_do_apertures_overlap(struct apertures_struct *gena,
 				    struct apertures_struct *hwa)
 {
 	int i, j;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!hwa || !gena)
 		return false;
 
@@ -1641,7 +1672,9 @@ static int do_register_framebuffer(struct fb_info *fb_info)
 	struct fb_videomode mode;
 
 	if (fb_check_foreignness(fb_info))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSYS;
+}
 
 	ret = do_remove_conflicting_framebuffers(fb_info->apertures,
 						 fb_info->fix.id,
@@ -1722,6 +1755,7 @@ static int do_unregister_framebuffer(struct fb_info *fb_info)
 	int i, ret = 0;
 
 	i = fb_info->node;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (i < 0 || i >= FB_MAX || registered_fb[i] != fb_info)
 		return -EINVAL;
 
@@ -1764,6 +1798,7 @@ int unlink_framebuffer(struct fb_info *fb_info)
 	int i;
 
 	i = fb_info->node;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (i < 0 || i >= FB_MAX || registered_fb[i] != fb_info)
 		return -EINVAL;
 
@@ -1854,6 +1889,7 @@ void fb_set_suspend(struct fb_info *info, int state)
 
 	event.info = info;
 	if (state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fb_notifier_call_chain(FB_EVENT_SUSPEND, &event);
 		info->state = FBINFO_STATE_SUSPENDED;
 	} else {
@@ -1878,16 +1914,20 @@ fbmem_init(void)
 	int ret;
 
 	if (!proc_create("fb", 0, NULL, &fb_proc_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ret = register_chrdev(FB_MAJOR, "fb", &fb_fops);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk("unable to get major %d for fb devs\n", FB_MAJOR);
 		goto err_chrdev;
 	}
 
 	fb_class = class_create(THIS_MODULE, "graphics");
 	if (IS_ERR(fb_class)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(fb_class);
 		pr_warn("Unable to create fb class; errno = %d\n", ret);
 		fb_class = NULL;
@@ -1933,6 +1973,7 @@ int fb_new_modelist(struct fb_info *info)
 	struct fb_videomode *m, mode;
 	int err = 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_safe(pos, n, &info->modelist) {
 		modelist = list_entry(pos, struct fb_modelist, list);
 		m = &modelist->mode;
diff --git a/drivers/video/fbdev/hyperv_fb.c b/drivers/video/fbdev/hyperv_fb.c
index 2fd49b2..ad568c4 100644
--- a/drivers/video/fbdev/hyperv_fb.c
+++ b/drivers/video/fbdev/hyperv_fb.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2012, Microsoft Corporation.
  *
diff --git a/drivers/video/fbdev/vesafb.c b/drivers/video/fbdev/vesafb.c
index 528fe91..1df7215 100644
--- a/drivers/video/fbdev/vesafb.c
+++ b/drivers/video/fbdev/vesafb.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * framebuffer driver for VBE 2.0 compliant graphic boards
  *
diff --git a/drivers/video/fbdev/xen-fbfront.c b/drivers/video/fbdev/xen-fbfront.c
index 46f6396..baf494b 100644
--- a/drivers/video/fbdev/xen-fbfront.c
+++ b/drivers/video/fbdev/xen-fbfront.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Xen para-virtual frame buffer device
  *
diff --git a/drivers/virtio/virtio.c b/drivers/virtio/virtio.c
index bf7ff39..150fd49 100644
--- a/drivers/virtio/virtio.c
+++ b/drivers/virtio/virtio.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/virtio.h>
 #include <linux/spinlock.h>
 #include <linux/virtio_config.h>
diff --git a/drivers/virtio/virtio_balloon.c b/drivers/virtio/virtio_balloon.c
index f0b3a0b..d1b5a3b 100644
--- a/drivers/virtio/virtio_balloon.c
+++ b/drivers/virtio/virtio_balloon.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Virtio balloon implementation, inspired by Dor Laor and Marcelo
  * Tosatti's implementations.
diff --git a/drivers/virtio/virtio_input.c b/drivers/virtio/virtio_input.c
index 3a0468f..0776c61 100644
--- a/drivers/virtio/virtio_input.c
+++ b/drivers/virtio/virtio_input.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/module.h>
 #include <linux/virtio.h>
 #include <linux/virtio_config.h>
diff --git a/drivers/virtio/virtio_mmio.c b/drivers/virtio/virtio_mmio.c
index 74dc717..24e6d73 100644
--- a/drivers/virtio/virtio_mmio.c
+++ b/drivers/virtio/virtio_mmio.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Virtio memory mapped device driver
  *
diff --git a/drivers/virtio/virtio_pci_common.c b/drivers/virtio/virtio_pci_common.c
index 1c4797e..921b9f9 100644
--- a/drivers/virtio/virtio_pci_common.c
+++ b/drivers/virtio/virtio_pci_common.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Virtio PCI driver - common functionality for all device versions
  *
diff --git a/drivers/virtio/virtio_pci_legacy.c b/drivers/virtio/virtio_pci_legacy.c
index 2780886..5e86dff 100644
--- a/drivers/virtio/virtio_pci_legacy.c
+++ b/drivers/virtio/virtio_pci_legacy.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Virtio PCI driver - legacy device support
  *
diff --git a/drivers/virtio/virtio_pci_modern.c b/drivers/virtio/virtio_pci_modern.c
index 2555d80..437bafe 100644
--- a/drivers/virtio/virtio_pci_modern.c
+++ b/drivers/virtio/virtio_pci_modern.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Virtio PCI driver - modern (virtio 1.0) device support
  *
diff --git a/drivers/virtio/virtio_ring.c b/drivers/virtio/virtio_ring.c
index eb30f3e..c1d90bb 100644
--- a/drivers/virtio/virtio_ring.c
+++ b/drivers/virtio/virtio_ring.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Virtio ring implementation.
  *
  *  Copyright 2007 Rusty Russell IBM Corporation
diff --git a/drivers/xen/balloon.c b/drivers/xen/balloon.c
index 065f0b6..9128266 100644
--- a/drivers/xen/balloon.c
+++ b/drivers/xen/balloon.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  * Xen balloon driver - enables returning/claiming memory to/from Xen.
  *
diff --git a/drivers/xen/cpu_hotplug.c b/drivers/xen/cpu_hotplug.c
index d4265c8..023478d 100644
--- a/drivers/xen/cpu_hotplug.c
+++ b/drivers/xen/cpu_hotplug.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #define pr_fmt(fmt) "xen:" KBUILD_MODNAME ": " fmt
 
diff --git a/drivers/xen/evtchn.c b/drivers/xen/evtchn.c
index 9729a64..27f6a52 100644
--- a/drivers/xen/evtchn.c
+++ b/drivers/xen/evtchn.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  * evtchn.c
  *
diff --git a/drivers/xen/gntalloc.c b/drivers/xen/gntalloc.c
index 3fa40c7..b8d9393 100644
--- a/drivers/xen/gntalloc.c
+++ b/drivers/xen/gntalloc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  * gntalloc.c
  *
diff --git a/drivers/xen/gntdev.c b/drivers/xen/gntdev.c
index bd56653..a00a679 100644
--- a/drivers/xen/gntdev.c
+++ b/drivers/xen/gntdev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  * gntdev.c
  *
diff --git a/drivers/xen/grant-table.c b/drivers/xen/grant-table.c
index 2c6a911..672fbf6 100644
--- a/drivers/xen/grant-table.c
+++ b/drivers/xen/grant-table.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  * grant_table.c
  *
diff --git a/drivers/xen/manage.c b/drivers/xen/manage.c
index c425d03..6767b6d 100644
--- a/drivers/xen/manage.c
+++ b/drivers/xen/manage.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Handle extern requests for shutdown, reboot and sysrq
  */
diff --git a/drivers/xen/pci.c b/drivers/xen/pci.c
index 7494dbe..22ebba0 100644
--- a/drivers/xen/pci.c
+++ b/drivers/xen/pci.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2009, Intel Corporation.
  *
diff --git a/drivers/xen/pcpu.c b/drivers/xen/pcpu.c
index cdc6daa..6d081fb 100644
--- a/drivers/xen/pcpu.c
+++ b/drivers/xen/pcpu.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  * pcpu.c
  * Management physical cpu in dom0, get pcpu info and provide sys interface
diff --git a/drivers/xen/platform-pci.c b/drivers/xen/platform-pci.c
index 5d7dcad..2177e55 100644
--- a/drivers/xen/platform-pci.c
+++ b/drivers/xen/platform-pci.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  * platform-pci.c
  *
diff --git a/drivers/xen/privcmd.c b/drivers/xen/privcmd.c
index feca75b..744795b 100644
--- a/drivers/xen/privcmd.c
+++ b/drivers/xen/privcmd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  * privcmd.c
  *
diff --git a/drivers/xen/sys-hypervisor.c b/drivers/xen/sys-hypervisor.c
index 9d314bb..668c11b 100644
--- a/drivers/xen/sys-hypervisor.c
+++ b/drivers/xen/sys-hypervisor.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  copyright (c) 2006 IBM Corporation
  *  Authored by: Mike D. Day <ncmike@us.ibm.com>
diff --git a/drivers/xen/xen-acpi-pad.c b/drivers/xen/xen-acpi-pad.c
index 23d1808..b73cf1f 100644
--- a/drivers/xen/xen-acpi-pad.c
+++ b/drivers/xen/xen-acpi-pad.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * xen-acpi-pad.c - Xen pad interface
  *
diff --git a/drivers/xen/xen-acpi-processor.c b/drivers/xen/xen-acpi-processor.c
index 23e391d..8ff5023 100644
--- a/drivers/xen/xen-acpi-processor.c
+++ b/drivers/xen/xen-acpi-processor.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright 2012 by Oracle Inc
  * Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
diff --git a/drivers/xen/xenbus/xenbus_dev_frontend.c b/drivers/xen/xenbus/xenbus_dev_frontend.c
index f3b089b..9d90869 100644
--- a/drivers/xen/xenbus/xenbus_dev_frontend.c
+++ b/drivers/xen/xenbus/xenbus_dev_frontend.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Driver giving user-space access to the kernel's xenbus connection
  * to xenstore.
diff --git a/drivers/xen/xenbus/xenbus_probe.c b/drivers/xen/xenbus/xenbus_probe.c
index 74888ca..fc182eb6 100644
--- a/drivers/xen/xenbus/xenbus_probe.c
+++ b/drivers/xen/xenbus/xenbus_probe.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  * Talks to Xen Store to figure out what devices we have.
  *
diff --git a/drivers/xen/xenbus/xenbus_probe_frontend.c b/drivers/xen/xenbus/xenbus_probe_frontend.c
index 19e45ce..a95d398 100644
--- a/drivers/xen/xenbus/xenbus_probe_frontend.c
+++ b/drivers/xen/xenbus/xenbus_probe_frontend.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 
 #define DPRINTK(fmt, ...)				\
diff --git a/drivers/xen/xenfs/super.c b/drivers/xen/xenfs/super.c
index 71ddfb4..402ecf0 100644
--- a/drivers/xen/xenfs/super.c
+++ b/drivers/xen/xenfs/super.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  xenfs.c - a filesystem for passing info between the a domain and
  *  the hypervisor.
-- 
2.7.4

