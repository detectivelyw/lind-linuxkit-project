From 802a2da83143ff4200b969121bb1512239b72d60 Mon Sep 17 00:00:00 2001
From: Yiwen Li <detectivelyw@gmail.com>
Date: Tue, 4 Jun 2019 15:56:23 -0400
Subject: [PATCH 10/11] instrumented net.

---
 net/802/psnap.c                                |   2 +
 net/802/stp.c                                  |   2 +
 net/8021q/vlan.c                               |   2 +
 net/8021q/vlan.h                               |   2 +
 net/8021q/vlan_core.c                          |   2 +
 net/8021q/vlan_netlink.c                       |   2 +
 net/8021q/vlanproc.c                           |   2 +
 net/9p/error.c                                 |   2 +
 net/9p/mod.c                                   |   2 +
 net/9p/trans_fd.c                              |   2 +
 net/9p/trans_virtio.c                          |   2 +
 net/bridge/br.c                                |   2 +
 net/bridge/br_fdb.c                            |   2 +
 net/bridge/br_mdb.c                            |   2 +
 net/bridge/br_netfilter_hooks.c                |   2 +
 net/bridge/br_netlink.c                        |   2 +
 net/bridge/br_nf_core.c                        |   2 +
 net/bridge/br_private.h                        |   2 +
 net/bridge/netfilter/ebt_802_3.c               |   2 +
 net/bridge/netfilter/ebt_among.c               |   2 +
 net/bridge/netfilter/ebt_arp.c                 |   2 +
 net/bridge/netfilter/ebt_arpreply.c            |   2 +
 net/bridge/netfilter/ebt_dnat.c                |   2 +
 net/bridge/netfilter/ebt_ip.c                  |   2 +
 net/bridge/netfilter/ebt_ip6.c                 |   2 +
 net/bridge/netfilter/ebt_limit.c               |   2 +
 net/bridge/netfilter/ebt_log.c                 |   2 +
 net/bridge/netfilter/ebt_mark.c                |   2 +
 net/bridge/netfilter/ebt_mark_m.c              |   2 +
 net/bridge/netfilter/ebt_nflog.c               |   2 +
 net/bridge/netfilter/ebt_pkttype.c             |   2 +
 net/bridge/netfilter/ebt_redirect.c            |   2 +
 net/bridge/netfilter/ebt_snat.c                |   2 +
 net/bridge/netfilter/ebt_stp.c                 |   2 +
 net/bridge/netfilter/ebt_vlan.c                |   2 +
 net/bridge/netfilter/ebtable_broute.c          |   2 +
 net/bridge/netfilter/ebtable_filter.c          |   2 +
 net/bridge/netfilter/ebtable_nat.c             |   2 +
 net/bridge/netfilter/ebtables.c                |   2 +
 net/bridge/netfilter/nf_log_bridge.c           |   2 +
 net/bridge/netfilter/nf_tables_bridge.c        |   2 +
 net/bridge/netfilter/nft_meta_bridge.c         |   2 +
 net/bridge/netfilter/nft_reject_bridge.c       |   2 +
 net/core/datagram.c                            |  85 ++++
 net/core/dev.c                                 | 587 +++++++++++++++++++++++++
 net/core/dev_addr_lists.c                      |  55 +++
 net/core/dev_ioctl.c                           |  52 +++
 net/core/dst.c                                 |  37 ++
 net/core/dst_cache.c                           |  18 +
 net/core/fib_notifier.c                        |  13 +
 net/core/fib_rules.c                           |  40 ++
 net/core/filter.c                              | 222 +++++++++-
 net/core/flow_dissector.c                      |  12 +
 net/core/gen_estimator.c                       |  10 +
 net/core/gro_cells.c                           |   9 +
 net/core/link_watch.c                          |  49 +++
 net/core/lwt_bpf.c                             |   2 +
 net/core/lwtunnel.c                            |   2 +
 net/core/neighbour.c                           |  81 ++++
 net/core/net-procfs.c                          |  39 ++
 net/core/net-sysfs.c                           |  98 +++++
 net/core/net_namespace.c                       |  71 +++
 net/core/netclassid_cgroup.c                   |   2 +
 net/core/netevent.c                            |   4 +
 net/core/netprio_cgroup.c                      |   2 +
 net/core/ptp_classifier.c                      |   3 +
 net/core/request_sock.c                        |   3 +
 net/core/rtnetlink.c                           | 391 ++++++++++++++++
 net/core/scm.c                                 |  41 ++
 net/core/secure_seq.c                          |   9 +
 net/core/skbuff.c                              | 115 +++++
 net/core/sock.c                                | 119 +++++
 net/core/sock_diag.c                           |  19 +
 net/core/sock_reuseport.c                      |  14 +
 net/core/stream.c                              |  11 +
 net/core/sysctl_net_core.c                     |  14 +
 net/dns_resolver/dns_key.c                     |  13 +
 net/ethernet/eth.c                             |  34 ++
 net/ipv4/af_inet.c                             |  98 +++++
 net/ipv4/arp.c                                 |  83 ++++
 net/ipv4/cipso_ipv4.c                          |  44 ++
 net/ipv4/datagram.c                            |  25 ++
 net/ipv4/devinet.c                             | 186 ++++++++
 net/ipv4/fib_frontend.c                        | 106 +++++
 net/ipv4/fib_lookup.h                          |   2 +
 net/ipv4/fib_notifier.c                        |   8 +
 net/ipv4/fib_rules.c                           |  23 +
 net/ipv4/fib_semantics.c                       | 221 ++++++++++
 net/ipv4/fib_trie.c                            | 152 +++++++
 net/ipv4/fou.c                                 |   2 +
 net/ipv4/gre_demux.c                           |   2 +
 net/ipv4/gre_offload.c                         |  10 +
 net/ipv4/icmp.c                                |  53 +++
 net/ipv4/igmp.c                                |  41 ++
 net/ipv4/inet_connection_sock.c                |  81 ++++
 net/ipv4/inet_diag.c                           |   2 +
 net/ipv4/inet_fragment.c                       |  25 ++
 net/ipv4/inet_hashtables.c                     |  82 ++++
 net/ipv4/inet_timewait_sock.c                  |  23 +
 net/ipv4/inetpeer.c                            |  18 +
 net/ipv4/ip_fragment.c                         |  25 ++
 net/ipv4/ip_input.c                            |  31 ++
 net/ipv4/ip_options.c                          |  72 +++
 net/ipv4/ip_output.c                           | 121 +++++
 net/ipv4/ip_sockglue.c                         |  39 ++
 net/ipv4/ip_tunnel.c                           |  71 +++
 net/ipv4/ip_tunnel_core.c                      |  19 +
 net/ipv4/ipconfig.c                            |  56 +++
 net/ipv4/ipip.c                                |   2 +
 net/ipv4/ipmr.c                                |  99 +++++
 net/ipv4/netfilter.c                           |   8 +
 net/ipv4/netfilter/arp_tables.c                |   2 +
 net/ipv4/netfilter/arpt_mangle.c               |   2 +
 net/ipv4/netfilter/arptable_filter.c           |   2 +
 net/ipv4/netfilter/ip_tables.c                 | 120 +++++
 net/ipv4/netfilter/ipt_CLUSTERIP.c             |   2 +
 net/ipv4/netfilter/ipt_ECN.c                   |   2 +
 net/ipv4/netfilter/ipt_MASQUERADE.c            |   5 +
 net/ipv4/netfilter/ipt_REJECT.c                |   4 +
 net/ipv4/netfilter/ipt_SYNPROXY.c              |   2 +
 net/ipv4/netfilter/ipt_ah.c                    |   2 +
 net/ipv4/netfilter/ipt_rpfilter.c              |   2 +
 net/ipv4/netfilter/iptable_filter.c            |  16 +
 net/ipv4/netfilter/iptable_mangle.c            |  19 +
 net/ipv4/netfilter/iptable_nat.c               |  16 +
 net/ipv4/netfilter/iptable_raw.c               |   2 +
 net/ipv4/netfilter/iptable_security.c          |   2 +
 net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c |  19 +
 net/ipv4/netfilter/nf_conntrack_proto_icmp.c   |  13 +
 net/ipv4/netfilter/nf_defrag_ipv4.c            |   9 +
 net/ipv4/netfilter/nf_log_arp.c                |   8 +
 net/ipv4/netfilter/nf_log_ipv4.c               |  11 +
 net/ipv4/netfilter/nf_nat_h323.c               |   2 +
 net/ipv4/netfilter/nf_nat_l3proto_ipv4.c       |  10 +
 net/ipv4/netfilter/nf_nat_masquerade_ipv4.c    |   9 +
 net/ipv4/netfilter/nf_nat_pptp.c               |   2 +
 net/ipv4/netfilter/nf_nat_proto_gre.c          |   2 +
 net/ipv4/netfilter/nf_nat_snmp_basic.c         |   2 +
 net/ipv4/netfilter/nf_tables_arp.c             |   2 +
 net/ipv4/netfilter/nf_tables_ipv4.c            |   2 +
 net/ipv4/netfilter/nft_chain_nat_ipv4.c        |   2 +
 net/ipv4/netfilter/nft_chain_route_ipv4.c      |   2 +
 net/ipv4/netfilter/nft_dup_ipv4.c              |   2 +
 net/ipv4/netfilter/nft_masq_ipv4.c             |   2 +
 net/ipv4/netfilter/nft_redir_ipv4.c            |   2 +
 net/ipv4/netfilter/nft_reject_ipv4.c           |   2 +
 net/ipv4/ping.c                                |  25 ++
 net/ipv4/proc.c                                |  13 +
 net/ipv4/protocol.c                            |   5 +
 net/ipv4/raw.c                                 |  48 ++
 net/ipv4/route.c                               | 189 ++++++++
 net/ipv4/sysctl_net_ipv4.c                     |  26 ++
 net/ipv4/tcp.c                                 | 433 ++++++++++++++++++
 net/ipv4/tcp_cong.c                            |  38 ++
 net/ipv4/tcp_cubic.c                           |  35 ++
 net/ipv4/tcp_diag.c                            |   2 +
 net/ipv4/tcp_fastopen.c                        |  42 ++
 net/ipv4/tcp_input.c                           | 485 ++++++++++++++++++++
 net/ipv4/tcp_ipv4.c                            | 104 +++++
 net/ipv4/tcp_metrics.c                         | 105 +++++
 net/ipv4/tcp_minisocks.c                       |  40 ++
 net/ipv4/tcp_offload.c                         |   5 +
 net/ipv4/tcp_output.c                          | 331 ++++++++++++++
 net/ipv4/tcp_rate.c                            |  13 +
 net/ipv4/tcp_recovery.c                        |  13 +
 net/ipv4/tcp_timer.c                           |  62 +++
 net/ipv4/tcp_ulp.c                             |  14 +
 net/ipv4/tunnel4.c                             |   9 +
 net/ipv4/udp.c                                 | 236 ++++++++++
 net/ipv4/udp_diag.c                            |   2 +
 net/ipv4/udp_offload.c                         |  11 +
 net/ipv4/udplite.c                             |   7 +
 net/ipv4/xfrm4_policy.c                        |  27 ++
 net/ipv4/xfrm4_protocol.c                      |  15 +
 net/ipv4/xfrm4_state.c                         |   6 +
 net/ipv6/addrconf.c                            | 362 +++++++++++++++
 net/ipv6/addrconf_core.c                       |  20 +
 net/ipv6/addrlabel.c                           |  54 +++
 net/ipv6/af_inet6.c                            |  74 ++++
 net/ipv6/anycast.c                             |  34 ++
 net/ipv6/calipso.c                             |  45 ++
 net/ipv6/datagram.c                            |  37 ++
 net/ipv6/exthdrs.c                             |  28 ++
 net/ipv6/exthdrs_core.c                        |  17 +
 net/ipv6/exthdrs_offload.c                     |   2 +
 net/ipv6/fib6_notifier.c                       |   8 +
 net/ipv6/fib6_rules.c                          |   2 +
 net/ipv6/fou6.c                                |   2 +
 net/ipv6/icmp.c                                |  82 ++++
 net/ipv6/inet6_connection_sock.c               |  13 +
 net/ipv6/inet6_hashtables.c                    |  31 ++
 net/ipv6/ip6_checksum.c                        |   6 +
 net/ipv6/ip6_fib.c                             | 254 +++++++++++
 net/ipv6/ip6_flowlabel.c                       |  40 ++
 net/ipv6/ip6_icmp.c                            |   3 +
 net/ipv6/ip6_input.c                           |  14 +
 net/ipv6/ip6_offload.c                         |  10 +
 net/ipv6/ip6_output.c                          | 153 +++++++
 net/ipv6/ip6_tunnel.c                          |   2 +
 net/ipv6/ipv6_sockglue.c                       |  61 +++
 net/ipv6/mcast.c                               | 192 ++++++++
 net/ipv6/ndisc.c                               |  56 +++
 net/ipv6/netfilter.c                           |   9 +
 net/ipv6/netfilter/ip6_tables.c                | 133 ++++++
 net/ipv6/netfilter/ip6t_MASQUERADE.c           |   2 +
 net/ipv6/netfilter/ip6t_NPT.c                  |   2 +
 net/ipv6/netfilter/ip6t_REJECT.c               |   4 +
 net/ipv6/netfilter/ip6t_SYNPROXY.c             |   2 +
 net/ipv6/netfilter/ip6t_ah.c                   |   2 +
 net/ipv6/netfilter/ip6t_eui64.c                |   2 +
 net/ipv6/netfilter/ip6t_frag.c                 |   2 +
 net/ipv6/netfilter/ip6t_hbh.c                  |   2 +
 net/ipv6/netfilter/ip6t_ipv6header.c           |   4 +
 net/ipv6/netfilter/ip6t_mh.c                   |   2 +
 net/ipv6/netfilter/ip6t_rpfilter.c             |   2 +
 net/ipv6/netfilter/ip6t_rt.c                   |   2 +
 net/ipv6/netfilter/ip6table_filter.c           |  16 +
 net/ipv6/netfilter/ip6table_mangle.c           |   8 +
 net/ipv6/netfilter/ip6table_nat.c              |   2 +
 net/ipv6/netfilter/ip6table_raw.c              |   2 +
 net/ipv6/netfilter/ip6table_security.c         |   2 +
 net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c |  17 +
 net/ipv6/netfilter/nf_conntrack_proto_icmpv6.c |  14 +
 net/ipv6/netfilter/nf_conntrack_reasm.c        |  16 +
 net/ipv6/netfilter/nf_defrag_ipv6_hooks.c      |   9 +
 net/ipv6/netfilter/nf_log_ipv6.c               |  11 +
 net/ipv6/netfilter/nf_nat_l3proto_ipv6.c       |   2 +
 net/ipv6/netfilter/nf_nat_masquerade_ipv6.c    |   2 +
 net/ipv6/netfilter/nf_tables_ipv6.c            |   2 +
 net/ipv6/netfilter/nft_chain_nat_ipv6.c        |   2 +
 net/ipv6/netfilter/nft_chain_route_ipv6.c      |   2 +
 net/ipv6/netfilter/nft_dup_ipv6.c              |   2 +
 net/ipv6/netfilter/nft_masq_ipv6.c             |   2 +
 net/ipv6/netfilter/nft_redir_ipv6.c            |   2 +
 net/ipv6/netfilter/nft_reject_ipv6.c           |   2 +
 net/ipv6/output_core.c                         |  13 +
 net/ipv6/ping.c                                |  11 +
 net/ipv6/proc.c                                |  20 +
 net/ipv6/protocol.c                            |   4 +
 net/ipv6/raw.c                                 |  46 ++
 net/ipv6/reassembly.c                          |  20 +
 net/ipv6/route.c                               | 273 ++++++++++++
 net/ipv6/seg6.c                                |  14 +
 net/ipv6/sysctl_net_ipv6.c                     |   4 +
 net/ipv6/tcp_ipv6.c                            | 170 +++++++
 net/ipv6/tcpv6_offload.c                       |   5 +
 net/ipv6/tunnel6.c                             |   2 +
 net/ipv6/udp.c                                 |  91 ++++
 net/ipv6/udp_offload.c                         |   6 +
 net/ipv6/udplite.c                             |   6 +
 net/ipv6/xfrm6_policy.c                        |  29 ++
 net/ipv6/xfrm6_protocol.c                      |  15 +
 net/ipv6/xfrm6_state.c                         |   9 +
 net/l3mdev/l3mdev.c                            |   2 +
 net/llc/llc_core.c                             |   2 +
 net/netfilter/core.c                           |  68 +++
 net/netfilter/ipset/ip_set_bitmap_ip.c         |   2 +
 net/netfilter/ipset/ip_set_bitmap_ipmac.c      |   2 +
 net/netfilter/ipset/ip_set_bitmap_port.c       |   2 +
 net/netfilter/ipset/ip_set_core.c              |   2 +
 net/netfilter/ipset/ip_set_hash_ip.c           |   2 +
 net/netfilter/ipset/ip_set_hash_ipport.c       |   2 +
 net/netfilter/ipset/ip_set_hash_ipportip.c     |   2 +
 net/netfilter/ipset/ip_set_hash_ipportnet.c    |   2 +
 net/netfilter/ipset/ip_set_hash_net.c          |   2 +
 net/netfilter/ipset/ip_set_hash_netiface.c     |   2 +
 net/netfilter/ipset/ip_set_hash_netport.c      |   2 +
 net/netfilter/ipset/ip_set_list_set.c          |   2 +
 net/netfilter/ipvs/ip_vs_app.c                 |   2 +
 net/netfilter/ipvs/ip_vs_conn.c                |   2 +
 net/netfilter/ipvs/ip_vs_core.c                |   2 +
 net/netfilter/ipvs/ip_vs_ctl.c                 |   2 +
 net/netfilter/ipvs/ip_vs_dh.c                  |   2 +
 net/netfilter/ipvs/ip_vs_est.c                 |   2 +
 net/netfilter/ipvs/ip_vs_fo.c                  |   2 +
 net/netfilter/ipvs/ip_vs_ftp.c                 |   2 +
 net/netfilter/ipvs/ip_vs_lblc.c                |   2 +
 net/netfilter/ipvs/ip_vs_lblcr.c               |   2 +
 net/netfilter/ipvs/ip_vs_lc.c                  |   2 +
 net/netfilter/ipvs/ip_vs_nq.c                  |   2 +
 net/netfilter/ipvs/ip_vs_ovf.c                 |   2 +
 net/netfilter/ipvs/ip_vs_proto.c               |   2 +
 net/netfilter/ipvs/ip_vs_proto_sctp.c          |   2 +
 net/netfilter/ipvs/ip_vs_proto_tcp.c           |   2 +
 net/netfilter/ipvs/ip_vs_proto_udp.c           |   2 +
 net/netfilter/ipvs/ip_vs_rr.c                  |   2 +
 net/netfilter/ipvs/ip_vs_sched.c               |   2 +
 net/netfilter/ipvs/ip_vs_sed.c                 |   2 +
 net/netfilter/ipvs/ip_vs_sh.c                  |   2 +
 net/netfilter/ipvs/ip_vs_sync.c                |   2 +
 net/netfilter/ipvs/ip_vs_wlc.c                 |   2 +
 net/netfilter/ipvs/ip_vs_wrr.c                 |   2 +
 net/netfilter/nf_conntrack_acct.c              |  11 +
 net/netfilter/nf_conntrack_amanda.c            |   2 +
 net/netfilter/nf_conntrack_core.c              | 117 +++++
 net/netfilter/nf_conntrack_ecache.c            |   2 +
 net/netfilter/nf_conntrack_expect.c            |  44 ++
 net/netfilter/nf_conntrack_extend.c            |  15 +
 net/netfilter/nf_conntrack_ftp.c               |  18 +
 net/netfilter/nf_conntrack_h323_main.c         |   2 +
 net/netfilter/nf_conntrack_helper.c            |  35 ++
 net/netfilter/nf_conntrack_irc.c               |  10 +
 net/netfilter/nf_conntrack_labels.c            |   2 +
 net/netfilter/nf_conntrack_netbios_ns.c        |   2 +
 net/netfilter/nf_conntrack_netlink.c           | 104 +++++
 net/netfilter/nf_conntrack_pptp.c              |   2 +
 net/netfilter/nf_conntrack_proto.c             |  45 ++
 net/netfilter/nf_conntrack_proto_dccp.c        |   2 +
 net/netfilter/nf_conntrack_proto_generic.c     |  12 +
 net/netfilter/nf_conntrack_proto_gre.c         |   2 +
 net/netfilter/nf_conntrack_proto_sctp.c        |   2 +
 net/netfilter/nf_conntrack_proto_tcp.c         |  24 +
 net/netfilter/nf_conntrack_proto_udp.c         |  13 +
 net/netfilter/nf_conntrack_sane.c              |   2 +
 net/netfilter/nf_conntrack_seqadj.c            |  12 +
 net/netfilter/nf_conntrack_sip.c               |  55 +++
 net/netfilter/nf_conntrack_snmp.c              |   2 +
 net/netfilter/nf_conntrack_standalone.c        |  27 ++
 net/netfilter/nf_conntrack_tftp.c              |   2 +
 net/netfilter/nf_conntrack_timeout.c           |   2 +
 net/netfilter/nf_conntrack_timestamp.c         |   2 +
 net/netfilter/nf_log.c                         |  34 ++
 net/netfilter/nf_log_common.c                  |   4 +
 net/netfilter/nf_nat_amanda.c                  |   2 +
 net/netfilter/nf_nat_core.c                    |  38 ++
 net/netfilter/nf_nat_ftp.c                     |   6 +
 net/netfilter/nf_nat_irc.c                     |   4 +
 net/netfilter/nf_nat_sip.c                     |  11 +
 net/netfilter/nf_nat_tftp.c                    |   2 +
 net/netfilter/nf_queue.c                       |  11 +
 net/netfilter/nf_sockopt.c                     |  13 +
 net/netfilter/nf_synproxy_core.c               |   2 +
 net/netfilter/nf_tables_api.c                  |   2 +
 net/netfilter/nf_tables_core.c                 |   2 +
 net/netfilter/nf_tables_inet.c                 |   2 +
 net/netfilter/nf_tables_netdev.c               |   2 +
 net/netfilter/nfnetlink.c                      |  26 ++
 net/netfilter/nfnetlink_acct.c                 |   2 +
 net/netfilter/nfnetlink_cthelper.c             |   2 +
 net/netfilter/nfnetlink_cttimeout.c            |   2 +
 net/netfilter/nfnetlink_log.c                  |  45 ++
 net/netfilter/nfnetlink_queue.c                |   2 +
 net/netfilter/nft_compat.c                     |   2 +
 net/netfilter/nft_counter.c                    |   2 +
 net/netfilter/nft_ct.c                         |   2 +
 net/netfilter/nft_dup_netdev.c                 |   2 +
 net/netfilter/nft_exthdr.c                     |   2 +
 net/netfilter/nft_fwd_netdev.c                 |   2 +
 net/netfilter/nft_hash.c                       |   2 +
 net/netfilter/nft_limit.c                      |   2 +
 net/netfilter/nft_log.c                        |   2 +
 net/netfilter/nft_meta.c                       |   2 +
 net/netfilter/nft_nat.c                        |   2 +
 net/netfilter/nft_queue.c                      |   2 +
 net/netfilter/nft_reject_inet.c                |   2 +
 net/netfilter/x_tables.c                       | 145 ++++++
 net/netfilter/xt_CHECKSUM.c                    |   2 +
 net/netfilter/xt_CLASSIFY.c                    |   2 +
 net/netfilter/xt_CT.c                          |   2 +
 net/netfilter/xt_DSCP.c                        |   2 +
 net/netfilter/xt_HL.c                          |   2 +
 net/netfilter/xt_HMARK.c                       |   2 +
 net/netfilter/xt_IDLETIMER.c                   |   2 +
 net/netfilter/xt_LOG.c                         |   5 +
 net/netfilter/xt_NETMAP.c                      |   2 +
 net/netfilter/xt_NFLOG.c                       |   7 +
 net/netfilter/xt_NFQUEUE.c                     |   2 +
 net/netfilter/xt_RATEEST.c                     |   2 +
 net/netfilter/xt_REDIRECT.c                    |   2 +
 net/netfilter/xt_TCPMSS.c                      |   6 +
 net/netfilter/xt_TCPOPTSTRIP.c                 |   2 +
 net/netfilter/xt_TEE.c                         |   2 +
 net/netfilter/xt_TPROXY.c                      |   2 +
 net/netfilter/xt_TRACE.c                       |   2 +
 net/netfilter/xt_addrtype.c                    |  10 +
 net/netfilter/xt_bpf.c                         |   2 +
 net/netfilter/xt_cgroup.c                      |   2 +
 net/netfilter/xt_cluster.c                     |   2 +
 net/netfilter/xt_comment.c                     |   2 +
 net/netfilter/xt_connbytes.c                   |   2 +
 net/netfilter/xt_connlabel.c                   |   2 +
 net/netfilter/xt_connlimit.c                   |   2 +
 net/netfilter/xt_connmark.c                    |   2 +
 net/netfilter/xt_conntrack.c                   |  14 +
 net/netfilter/xt_cpu.c                         |   2 +
 net/netfilter/xt_dccp.c                        |   2 +
 net/netfilter/xt_devgroup.c                    |   2 +
 net/netfilter/xt_dscp.c                        |   2 +
 net/netfilter/xt_ecn.c                         |   2 +
 net/netfilter/xt_esp.c                         |   2 +
 net/netfilter/xt_hashlimit.c                   |   2 +
 net/netfilter/xt_helper.c                      |   2 +
 net/netfilter/xt_hl.c                          |   2 +
 net/netfilter/xt_ipcomp.c                      |   2 +
 net/netfilter/xt_iprange.c                     |   2 +
 net/netfilter/xt_ipvs.c                        |   2 +
 net/netfilter/xt_l2tp.c                        |   2 +
 net/netfilter/xt_length.c                      |   2 +
 net/netfilter/xt_limit.c                       |   2 +
 net/netfilter/xt_mac.c                         |   2 +
 net/netfilter/xt_mark.c                        |   7 +
 net/netfilter/xt_multiport.c                   |   2 +
 net/netfilter/xt_nat.c                         |  11 +
 net/netfilter/xt_nfacct.c                      |   2 +
 net/netfilter/xt_osf.c                         |   2 +
 net/netfilter/xt_owner.c                       |   2 +
 net/netfilter/xt_physdev.c                     |   2 +
 net/netfilter/xt_pkttype.c                     |   2 +
 net/netfilter/xt_policy.c                      |  12 +
 net/netfilter/xt_quota.c                       |   2 +
 net/netfilter/xt_rateest.c                     |   2 +
 net/netfilter/xt_realm.c                       |   2 +
 net/netfilter/xt_recent.c                      |   2 +
 net/netfilter/xt_sctp.c                        |   2 +
 net/netfilter/xt_set.c                         |   2 +
 net/netfilter/xt_state.c                       |   8 +
 net/netfilter/xt_statistic.c                   |   2 +
 net/netfilter/xt_string.c                      |   2 +
 net/netfilter/xt_tcpmss.c                      |   2 +
 net/netfilter/xt_tcpudp.c                      |   7 +
 net/netfilter/xt_time.c                        |   2 +
 net/netfilter/xt_u32.c                         |   2 +
 net/netlabel/netlabel_calipso.c                |  37 ++
 net/netlabel/netlabel_cipso_v4.c               |  10 +
 net/netlabel/netlabel_domainhash.c             |  71 +++
 net/netlabel/netlabel_kapi.c                   |  34 ++
 net/netlabel/netlabel_mgmt.c                   |   4 +
 net/netlabel/netlabel_unlabeled.c              |  24 +
 net/netlabel/netlabel_user.c                   |  15 +
 net/netlink/af_netlink.c                       | 321 ++++++++++++++
 net/netlink/diag.c                             |   2 +
 net/netlink/genetlink.c                        | 133 ++++++
 net/packet/af_packet.c                         | 368 ++++++++++++++++
 net/packet/diag.c                              |   2 +
 net/sched/act_api.c                            |  59 +++
 net/sched/act_bpf.c                            |   2 +
 net/sched/act_csum.c                           |   2 +
 net/sched/act_gact.c                           |   2 +
 net/sched/act_ipt.c                            |   2 +
 net/sched/act_mirred.c                         |   2 +
 net/sched/act_nat.c                            |   2 +
 net/sched/act_pedit.c                          |   2 +
 net/sched/act_police.c                         |   2 +
 net/sched/act_simple.c                         |   2 +
 net/sched/act_skbedit.c                        |   2 +
 net/sched/cls_api.c                            |  41 ++
 net/sched/cls_basic.c                          |   2 +
 net/sched/cls_bpf.c                            |   2 +
 net/sched/cls_cgroup.c                         |   2 +
 net/sched/cls_flow.c                           |   2 +
 net/sched/cls_fw.c                             |   2 +
 net/sched/cls_matchall.c                       |   2 +
 net/sched/cls_route.c                          |   2 +
 net/sched/cls_rsvp.h                           |   2 +
 net/sched/cls_tcindex.c                        |   2 +
 net/sched/cls_u32.c                            |   2 +
 net/sched/em_cmp.c                             |   2 +
 net/sched/em_ipset.c                           |   2 +
 net/sched/em_meta.c                            |   2 +
 net/sched/em_nbyte.c                           |   2 +
 net/sched/em_text.c                            |   2 +
 net/sched/em_u32.c                             |   2 +
 net/sched/ematch.c                             |  14 +
 net/sched/sch_api.c                            |  74 ++++
 net/sched/sch_blackhole.c                      |   4 +
 net/sched/sch_generic.c                        |  88 ++++
 net/socket.c                                   | 227 ++++++++++
 net/switchdev/switchdev.c                      |   2 +
 net/sysctl_net.c                               |   2 +
 net/unix/af_unix.c                             | 271 ++++++++++++
 net/unix/diag.c                                |   2 +
 net/unix/garbage.c                             |  16 +
 net/unix/sysctl_net_unix.c                     |   5 +
 net/vmw_vsock/hyperv_transport.c               |   2 +
 net/vmw_vsock/virtio_transport.c               |   2 +
 net/xfrm/xfrm_device.c                         |   9 +
 net/xfrm/xfrm_hash.c                           |   8 +
 net/xfrm/xfrm_input.c                          |  23 +
 net/xfrm/xfrm_policy.c                         | 169 +++++++
 net/xfrm/xfrm_proc.c                           |   2 +
 net/xfrm/xfrm_state.c                          | 102 +++++
 net/xfrm/xfrm_sysctl.c                         |   5 +
 482 files changed, 12955 insertions(+), 4 deletions(-)

diff --git a/net/802/psnap.c b/net/802/psnap.c
index db6baf7..29407c1 100644
--- a/net/802/psnap.c
+++ b/net/802/psnap.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	SNAP data link layer. Derived from 802.2
  *
diff --git a/net/802/stp.c b/net/802/stp.c
index 2c40ba0..8429f5c 100644
--- a/net/802/stp.c
+++ b/net/802/stp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	STP SAP demux
  *
diff --git a/net/8021q/vlan.c b/net/8021q/vlan.c
index cf2e700..fb46009 100644
--- a/net/8021q/vlan.c
+++ b/net/8021q/vlan.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		802.1Q VLAN
  *		Ethernet-type device handling.
diff --git a/net/8021q/vlan.h b/net/8021q/vlan.h
index 0e7afdf..be7c333 100644
--- a/net/8021q/vlan.h
+++ b/net/8021q/vlan.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __BEN_VLAN_802_1Q_INC__
 #define __BEN_VLAN_802_1Q_INC__
diff --git a/net/8021q/vlan_core.c b/net/8021q/vlan_core.c
index 64aa9f7..2bac2fc 100644
--- a/net/8021q/vlan_core.c
+++ b/net/8021q/vlan_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/skbuff.h>
 #include <linux/netdevice.h>
diff --git a/net/8021q/vlan_netlink.c b/net/8021q/vlan_netlink.c
index 5e831de..dcf0334 100644
--- a/net/8021q/vlan_netlink.c
+++ b/net/8021q/vlan_netlink.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	VLAN netlink control interface
  *
diff --git a/net/8021q/vlanproc.c b/net/8021q/vlanproc.c
index 5f1446c..987c720 100644
--- a/net/8021q/vlanproc.c
+++ b/net/8021q/vlanproc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /******************************************************************************
  * vlanproc.c	VLAN Module. /proc filesystem interface.
  *
diff --git a/net/9p/error.c b/net/9p/error.c
index 126fd0d..fbceb2d 100644
--- a/net/9p/error.c
+++ b/net/9p/error.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/fs/9p/error.c
  *
diff --git a/net/9p/mod.c b/net/9p/mod.c
index 6ab36ae..4b779df 100644
--- a/net/9p/mod.c
+++ b/net/9p/mod.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  net/9p/9p.c
  *
diff --git a/net/9p/trans_fd.c b/net/9p/trans_fd.c
index 985046a..5c6e7e1 100644
--- a/net/9p/trans_fd.c
+++ b/net/9p/trans_fd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/fs/9p/trans_fd.c
  *
diff --git a/net/9p/trans_virtio.c b/net/9p/trans_virtio.c
index 3aa5a93..8c883c8 100644
--- a/net/9p/trans_virtio.c
+++ b/net/9p/trans_virtio.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * The Virtio 9p transport driver
  *
diff --git a/net/bridge/br.c b/net/bridge/br.c
index 1407d1b..11b5117 100644
--- a/net/bridge/br.c
+++ b/net/bridge/br.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Generic parts
  *	Linux ethernet bridge
diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index 4ea5c8b..82da20b 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Forwarding database
  *	Linux ethernet bridge
diff --git a/net/bridge/br_mdb.c b/net/bridge/br_mdb.c
index 31ddff2..82f328b 100644
--- a/net/bridge/br_mdb.c
+++ b/net/bridge/br_mdb.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/err.h>
 #include <linux/igmp.h>
diff --git a/net/bridge/br_netfilter_hooks.c b/net/bridge/br_netfilter_hooks.c
index c2eea1b..ada7f1c 100644
--- a/net/bridge/br_netfilter_hooks.c
+++ b/net/bridge/br_netfilter_hooks.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Handle firewalling
  *	Linux ethernet bridge
diff --git a/net/bridge/br_netlink.c b/net/bridge/br_netlink.c
index 08190db..c9bf3d5 100644
--- a/net/bridge/br_netlink.c
+++ b/net/bridge/br_netlink.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Bridge netlink control interface
  *
diff --git a/net/bridge/br_nf_core.c b/net/bridge/br_nf_core.c
index 20cbb72..f4d141c 100644
--- a/net/bridge/br_nf_core.c
+++ b/net/bridge/br_nf_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Handle firewalling core
  *	Linux ethernet bridge
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index e870cfc..58d8323 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Linux ethernet bridge
  *
diff --git a/net/bridge/netfilter/ebt_802_3.c b/net/bridge/netfilter/ebt_802_3.c
index 5fc4aff..0afeaee 100644
--- a/net/bridge/netfilter/ebt_802_3.c
+++ b/net/bridge/netfilter/ebt_802_3.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * 802_3
  *
diff --git a/net/bridge/netfilter/ebt_among.c b/net/bridge/netfilter/ebt_among.c
index 279527f..52b9421 100644
--- a/net/bridge/netfilter/ebt_among.c
+++ b/net/bridge/netfilter/ebt_among.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_among
  *
diff --git a/net/bridge/netfilter/ebt_arp.c b/net/bridge/netfilter/ebt_arp.c
index 2271422..cca5e31 100644
--- a/net/bridge/netfilter/ebt_arp.c
+++ b/net/bridge/netfilter/ebt_arp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_arp
  *
diff --git a/net/bridge/netfilter/ebt_arpreply.c b/net/bridge/netfilter/ebt_arpreply.c
index db85230..646c94f 100644
--- a/net/bridge/netfilter/ebt_arpreply.c
+++ b/net/bridge/netfilter/ebt_arpreply.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_arpreply
  *
diff --git a/net/bridge/netfilter/ebt_dnat.c b/net/bridge/netfilter/ebt_dnat.c
index dfc86a0..ba90e95 100644
--- a/net/bridge/netfilter/ebt_dnat.c
+++ b/net/bridge/netfilter/ebt_dnat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_dnat
  *
diff --git a/net/bridge/netfilter/ebt_ip.c b/net/bridge/netfilter/ebt_ip.c
index 2b46c50..5f42b9b 100644
--- a/net/bridge/netfilter/ebt_ip.c
+++ b/net/bridge/netfilter/ebt_ip.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_ip
  *
diff --git a/net/bridge/netfilter/ebt_ip6.c b/net/bridge/netfilter/ebt_ip6.c
index 2a5a52a..5890d5e 100644
--- a/net/bridge/netfilter/ebt_ip6.c
+++ b/net/bridge/netfilter/ebt_ip6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_ip6
  *
diff --git a/net/bridge/netfilter/ebt_limit.c b/net/bridge/netfilter/ebt_limit.c
index 61a9f1b..93fde65 100644
--- a/net/bridge/netfilter/ebt_limit.c
+++ b/net/bridge/netfilter/ebt_limit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_limit
  *
diff --git a/net/bridge/netfilter/ebt_log.c b/net/bridge/netfilter/ebt_log.c
index 707caea..ee994bb 100644
--- a/net/bridge/netfilter/ebt_log.c
+++ b/net/bridge/netfilter/ebt_log.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_log
  *
diff --git a/net/bridge/netfilter/ebt_mark.c b/net/bridge/netfilter/ebt_mark.c
index 19f0f95..9c76c29 100644
--- a/net/bridge/netfilter/ebt_mark.c
+++ b/net/bridge/netfilter/ebt_mark.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_mark
  *
diff --git a/net/bridge/netfilter/ebt_mark_m.c b/net/bridge/netfilter/ebt_mark_m.c
index d98baef..2fb67d2 100644
--- a/net/bridge/netfilter/ebt_mark_m.c
+++ b/net/bridge/netfilter/ebt_mark_m.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_mark_m
  *
diff --git a/net/bridge/netfilter/ebt_nflog.c b/net/bridge/netfilter/ebt_nflog.c
index da1c2fd..2c1e07e 100644
--- a/net/bridge/netfilter/ebt_nflog.c
+++ b/net/bridge/netfilter/ebt_nflog.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ebt_nflog
  *
diff --git a/net/bridge/netfilter/ebt_pkttype.c b/net/bridge/netfilter/ebt_pkttype.c
index 496a565..9456f7f 100644
--- a/net/bridge/netfilter/ebt_pkttype.c
+++ b/net/bridge/netfilter/ebt_pkttype.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_pkttype
  *
diff --git a/net/bridge/netfilter/ebt_redirect.c b/net/bridge/netfilter/ebt_redirect.c
index a7223ea..3829fe7 100644
--- a/net/bridge/netfilter/ebt_redirect.c
+++ b/net/bridge/netfilter/ebt_redirect.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_redirect
  *
diff --git a/net/bridge/netfilter/ebt_snat.c b/net/bridge/netfilter/ebt_snat.c
index 11cf9e9..512c836 100644
--- a/net/bridge/netfilter/ebt_snat.c
+++ b/net/bridge/netfilter/ebt_snat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_snat
  *
diff --git a/net/bridge/netfilter/ebt_stp.c b/net/bridge/netfilter/ebt_stp.c
index 3140eb9..f31946b 100644
--- a/net/bridge/netfilter/ebt_stp.c
+++ b/net/bridge/netfilter/ebt_stp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebt_stp
  *
diff --git a/net/bridge/netfilter/ebt_vlan.c b/net/bridge/netfilter/ebt_vlan.c
index 98c221d..1121bec 100644
--- a/net/bridge/netfilter/ebt_vlan.c
+++ b/net/bridge/netfilter/ebt_vlan.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Description: EBTables 802.1Q match extension kernelspace module.
  * Authors: Nick Fedchik <nick@fedchik.org.ua>
diff --git a/net/bridge/netfilter/ebtable_broute.c b/net/bridge/netfilter/ebtable_broute.c
index 276b602..e012e42 100644
--- a/net/bridge/netfilter/ebtable_broute.c
+++ b/net/bridge/netfilter/ebtable_broute.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebtable_broute
  *
diff --git a/net/bridge/netfilter/ebtable_filter.c b/net/bridge/netfilter/ebtable_filter.c
index c41da5f..295e19e 100644
--- a/net/bridge/netfilter/ebtable_filter.c
+++ b/net/bridge/netfilter/ebtable_filter.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebtable_filter
  *
diff --git a/net/bridge/netfilter/ebtable_nat.c b/net/bridge/netfilter/ebtable_nat.c
index 08df740..0b68ed2 100644
--- a/net/bridge/netfilter/ebtable_nat.c
+++ b/net/bridge/netfilter/ebtable_nat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebtable_nat
  *
diff --git a/net/bridge/netfilter/ebtables.c b/net/bridge/netfilter/ebtables.c
index 3b3dcf7..8b6c364 100644
--- a/net/bridge/netfilter/ebtables.c
+++ b/net/bridge/netfilter/ebtables.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  ebtables
  *
diff --git a/net/bridge/netfilter/nf_log_bridge.c b/net/bridge/netfilter/nf_log_bridge.c
index bd2b3c7..1af8ad1 100644
--- a/net/bridge/netfilter/nf_log_bridge.c
+++ b/net/bridge/netfilter/nf_log_bridge.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2014 by Pablo Neira Ayuso <pablo@netfilter.org>
  *
diff --git a/net/bridge/netfilter/nf_tables_bridge.c b/net/bridge/netfilter/nf_tables_bridge.c
index 97afdc0..452aa28 100644
--- a/net/bridge/netfilter/nf_tables_bridge.c
+++ b/net/bridge/netfilter/nf_tables_bridge.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2013 Pablo Neira Ayuso <pablo@netfilter.org>
diff --git a/net/bridge/netfilter/nft_meta_bridge.c b/net/bridge/netfilter/nft_meta_bridge.c
index bb63c9a..3396a05 100644
--- a/net/bridge/netfilter/nft_meta_bridge.c
+++ b/net/bridge/netfilter/nft_meta_bridge.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2014 Intel Corporation
  *
diff --git a/net/bridge/netfilter/nft_reject_bridge.c b/net/bridge/netfilter/nft_reject_bridge.c
index eaf05de..0945e32 100644
--- a/net/bridge/netfilter/nft_reject_bridge.c
+++ b/net/bridge/netfilter/nft_reject_bridge.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2014 Pablo Neira Ayuso <pablo@netfilter.org>
  *
diff --git a/net/core/datagram.c b/net/core/datagram.c
index 3964c10..cc13893 100644
--- a/net/core/datagram.c
+++ b/net/core/datagram.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *	SUCS NET3:
@@ -78,7 +80,9 @@ static int receiver_wake_function(wait_queue_entry_t *wait, unsigned int mode, i
 	 * Avoid a wakeup if event not interesting for us
 	 */
 	if (bits && !(bits & (POLLIN | POLLERR)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return autoremove_wake_function(wait, mode, sync, key);
 }
 /*
@@ -116,6 +120,7 @@ int __skb_wait_for_more_packets(struct sock *sk, int *err, long *timeo_p,
 	if (signal_pending(current))
 		goto interrupted;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = 0;
 	*timeo_p = schedule_timeout(*timeo_p);
 out:
@@ -138,7 +143,9 @@ static struct sk_buff *skb_set_peeked(struct sk_buff *skb)
 	struct sk_buff *nskb;
 
 	if (skb->peeked)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return skb;
+}
 
 	/* We have to unshare an skb before modifying it. */
 	if (!skb_shared(skb))
@@ -175,6 +182,7 @@ struct sk_buff *__skb_try_recv_from_queue(struct sock *sk,
 	int _off = 0;
 
 	if (unlikely(flags & MSG_PEEK && *off >= 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		peek_at_off = true;
 		_off = *off;
 	}
@@ -184,12 +192,15 @@ struct sk_buff *__skb_try_recv_from_queue(struct sock *sk,
 		if (flags & MSG_PEEK) {
 			if (peek_at_off && _off >= skb->len &&
 			    (_off || skb->peeked)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				_off -= skb->len;
 				continue;
 			}
 			if (!skb->len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				skb = skb_set_peeked(skb);
 				if (unlikely(IS_ERR(skb))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					*err = PTR_ERR(skb);
 					return NULL;
 				}
@@ -204,6 +215,7 @@ struct sk_buff *__skb_try_recv_from_queue(struct sock *sk,
 		*off = _off;
 		return skb;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -275,12 +287,16 @@ struct sk_buff *__skb_try_recv_datagram(struct sock *sk, unsigned int flags,
 		if (error)
 			goto no_packet;
 		if (skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return skb;
+}
 
 		if (!sk_can_busy_loop(sk))
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_busy_loop(sk, flags & MSG_DONTWAIT);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while (!skb_queue_empty(&sk->sk_receive_queue));
 
 	error = -EAGAIN;
@@ -305,13 +321,16 @@ struct sk_buff *__skb_recv_datagram(struct sock *sk, unsigned int flags,
 		skb = __skb_try_recv_datagram(sk, flags, destructor, peeked,
 					      off, err, &last);
 		if (skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return skb;
+}
 
 		if (*err != -EAGAIN)
 			break;
 	} while (timeo &&
 		!__skb_wait_for_more_packets(sk, err, &timeo, last));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(__skb_recv_datagram);
@@ -338,6 +357,7 @@ void __skb_free_datagram_locked(struct sock *sk, struct sk_buff *skb, int len)
 	bool slow;
 
 	if (!skb_unref(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_peek_offset_bwd(sk, len);
 		return;
 	}
@@ -361,6 +381,7 @@ int __sk_queue_drop_skb(struct sock *sk, struct sk_buff_head *sk_queue,
 	int err = 0;
 
 	if (flags & MSG_PEEK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOENT;
 		spin_lock_bh(&sk_queue->lock);
 		if (skb->next) {
@@ -401,6 +422,7 @@ EXPORT_SYMBOL(__sk_queue_drop_skb);
 
 int skb_kill_datagram(struct sock *sk, struct sk_buff *skb, unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int err = __sk_queue_drop_skb(sk, &sk->sk_receive_queue, skb, flags,
 				      NULL);
 
@@ -429,13 +451,17 @@ int skb_copy_datagram_iter(const struct sk_buff *skb, int offset,
 	/* Copy header. */
 	if (copy > 0) {
 		if (copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copy = len;
+}
 		n = copy_to_iter(skb->data + offset, copy, to);
 		offset += n;
 		if (n != copy)
 			goto short_copy;
 		if ((len -= copy) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	}
 
 	/* Copy paged appendix. Hmm... why does this look so complicated? */
@@ -448,7 +474,9 @@ int skb_copy_datagram_iter(const struct sk_buff *skb, int offset,
 		end = start + skb_frag_size(frag);
 		if ((copy = end - offset) > 0) {
 			if (copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copy = len;
+}
 			n = copy_page_to_iter(skb_frag_page(frag),
 					      frag->page_offset + offset -
 					      start, copy, to);
@@ -456,31 +484,48 @@ int skb_copy_datagram_iter(const struct sk_buff *skb, int offset,
 			if (n != copy)
 				goto short_copy;
 			if (!(len -= copy))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = end;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_walk_frags(skb, frag_iter) {
 		int end;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(start > offset + len);
 
 		end = start + frag_iter->len;
 		if ((copy = end - offset) > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copy = len;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (skb_copy_datagram_iter(frag_iter, offset - start,
 						   to, copy))
 				goto fault;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if ((len -= copy) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			offset += copy;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = end;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* This is not really a user copy fault, but rather someone
 	 * gave us a bogus length on the skb.  We should probably
@@ -495,6 +540,7 @@ int skb_copy_datagram_iter(const struct sk_buff *skb, int offset,
 	if (iov_iter_count(to))
 		goto fault;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(skb_copy_datagram_iter);
@@ -519,11 +565,15 @@ int skb_copy_datagram_from_iter(struct sk_buff *skb, int offset,
 	/* Copy header. */
 	if (copy > 0) {
 		if (copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copy = len;
+}
 		if (copy_from_iter(skb->data + offset, copy, from) != copy)
 			goto fault;
 		if ((len -= copy) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 		offset += copy;
 	}
 
@@ -539,7 +589,9 @@ int skb_copy_datagram_from_iter(struct sk_buff *skb, int offset,
 			size_t copied;
 
 			if (copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copy = len;
+}
 			copied = copy_page_from_iter(skb_frag_page(frag),
 					  frag->page_offset + offset - start,
 					  copy, from);
@@ -547,33 +599,50 @@ int skb_copy_datagram_from_iter(struct sk_buff *skb, int offset,
 				goto fault;
 
 			if (!(len -= copy))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
 			offset += copy;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = end;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_walk_frags(skb, frag_iter) {
 		int end;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(start > offset + len);
 
 		end = start + frag_iter->len;
 		if ((copy = end - offset) > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copy = len;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (skb_copy_datagram_from_iter(frag_iter,
 							offset - start,
 							from, copy))
 				goto fault;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if ((len -= copy) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			offset += copy;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = end;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 fault:
 	return -EFAULT;
@@ -583,6 +652,7 @@ EXPORT_SYMBOL(skb_copy_datagram_from_iter);
 int __zerocopy_sg_from_iter(struct sock *sk, struct sk_buff *skb,
 			    struct iov_iter *from, size_t length)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int frag = skb_shinfo(skb)->nr_frags;
 
 	while (length && iov_iter_count(from)) {
@@ -637,6 +707,7 @@ EXPORT_SYMBOL(__zerocopy_sg_from_iter);
  */
 int zerocopy_sg_from_iter(struct sk_buff *skb, struct iov_iter *from)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int copy = min_t(int, skb_headlen(skb), iov_iter_count(from));
 
 	/* copy up to skb headlen */
@@ -651,6 +722,7 @@ static int skb_copy_and_csum_datagram(const struct sk_buff *skb, int offset,
 				      struct iov_iter *to, int len,
 				      __wsum *csump)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int start = skb_headlen(skb);
 	int i, copy = start - offset, start_off = offset;
 	struct sk_buff *frag_iter;
@@ -736,6 +808,7 @@ __sum16 __skb_checksum_complete_head(struct sk_buff *skb, int len)
 
 	sum = csum_fold(skb_checksum(skb, 0, len, skb->csum));
 	if (likely(!sum)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unlikely(skb->ip_summed == CHECKSUM_COMPLETE) &&
 		    !skb->csum_complete_sw)
 			netdev_rx_csum_fault(skb->dev);
@@ -792,7 +865,9 @@ int skb_copy_and_csum_datagram_msg(struct sk_buff *skb,
 	int chunk = skb->len - hlen;
 
 	if (!chunk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (msg_data_left(msg) < chunk) {
 		if (__skb_checksum_complete(skb))
@@ -848,9 +923,13 @@ unsigned int datagram_poll(struct file *file, struct socket *sock,
 			(sock_flag(sk, SOCK_SELECT_ERR_QUEUE) ? POLLPRI : 0);
 
 	if (sk->sk_shutdown & RCV_SHUTDOWN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLRDHUP | POLLIN | POLLRDNORM;
+}
 	if (sk->sk_shutdown == SHUTDOWN_MASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLHUP;
+}
 
 	/* readable? */
 	if (!skb_queue_empty(&sk->sk_receive_queue))
@@ -858,11 +937,16 @@ unsigned int datagram_poll(struct file *file, struct socket *sock,
 
 	/* Connection-based need to check for termination and startup */
 	if (connection_based(sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sk->sk_state == TCP_CLOSE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mask |= POLLHUP;
+}
 		/* connection hasn't started yet? */
 		if (sk->sk_state == TCP_SYN_SENT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return mask;
+}
 	}
 
 	/* writable? */
@@ -871,6 +955,7 @@ unsigned int datagram_poll(struct file *file, struct socket *sock,
 	else
 		sk_set_bit(SOCKWQ_ASYNC_NOSPACE, sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mask;
 }
 EXPORT_SYMBOL(datagram_poll);
diff --git a/net/core/dev.c b/net/core/dev.c
index d33bbed..b060ac9 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *      NET3    Protocol independent device support routines.
  *
@@ -231,6 +233,7 @@ static inline void rps_unlock(struct softnet_data *sd)
 /* Device list insertion */
 static void list_netdevice(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(dev);
 
 	ASSERT_RTNL();
@@ -384,7 +387,9 @@ static inline void netdev_set_addr_lockdep_class(struct net_device *dev)
 static inline struct list_head *ptype_head(const struct packet_type *pt)
 {
 	if (pt->type == htons(ETH_P_ALL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return pt->dev ? &pt->dev->ptype_all : &ptype_all;
+}
 	else
 		return pt->dev ? &pt->dev->ptype_specific :
 				 &ptype_base[ntohs(pt->type) & PTYPE_HASH_MASK];
@@ -440,6 +445,7 @@ void __dev_remove_pack(struct packet_type *pt)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_warn("dev_remove_pack: %p not found\n", pt);
 out:
 	spin_unlock(&ptype_lock);
@@ -460,6 +466,7 @@ EXPORT_SYMBOL(__dev_remove_pack);
  */
 void dev_remove_pack(struct packet_type *pt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__dev_remove_pack(pt);
 
 	synchronize_net();
@@ -513,6 +520,7 @@ static void __dev_remove_offload(struct packet_offload *po)
 
 	spin_lock(&offload_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(po1, head, list) {
 		if (po == po1) {
 			list_del_rcu(&po->list);
@@ -539,6 +547,7 @@ static void __dev_remove_offload(struct packet_offload *po)
  */
 void dev_remove_offload(struct packet_offload *po)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__dev_remove_offload(po);
 
 	synchronize_net();
@@ -569,6 +578,7 @@ static int netdev_boot_setup_add(char *name, struct ifmap *map)
 	int i;
 
 	s = dev_boot_setup;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < NETDEV_BOOT_SETUP_MAX; i++) {
 		if (s[i].name[0] == '\0' || s[i].name[0] == ' ') {
 			memset(s[i].name, 0, sizeof(s[i].name));
@@ -595,6 +605,7 @@ int netdev_boot_setup_check(struct net_device *dev)
 	struct netdev_boot_setup *s = dev_boot_setup;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < NETDEV_BOOT_SETUP_MAX; i++) {
 		if (s[i].name[0] != '\0' && s[i].name[0] != ' ' &&
 		    !strcmp(dev->name, s[i].name)) {
@@ -633,11 +644,16 @@ unsigned long netdev_boot_base(const char *prefix, int unit)
 	 * to indicate not to probe for this interface
 	 */
 	if (__dev_get_by_name(&init_net, name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	for (i = 0; i < NETDEV_BOOT_SETUP_MAX; i++)
 		if (!strcmp(name, s[i].name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return s[i].map.base_addr;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -650,6 +666,7 @@ int __init netdev_boot_setup(char *str)
 	struct ifmap map;
 
 	str = get_options(str, ARRAY_SIZE(ints), ints);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!str || !*str)
 		return 0;
 
@@ -706,6 +723,7 @@ int dev_fill_metadata_dst(struct net_device *dev, struct sk_buff *skb)
 {
 	struct ip_tunnel_info *info;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev->netdev_ops  || !dev->netdev_ops->ndo_fill_metadata_dst)
 		return -EINVAL;
 
@@ -738,8 +756,11 @@ struct net_device *__dev_get_by_name(struct net *net, const char *name)
 
 	hlist_for_each_entry(dev, head, name_hlist)
 		if (!strncmp(dev->name, name, IFNAMSIZ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return dev;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(__dev_get_by_name);
@@ -763,8 +784,11 @@ struct net_device *dev_get_by_name_rcu(struct net *net, const char *name)
 
 	hlist_for_each_entry_rcu(dev, head, name_hlist)
 		if (!strncmp(dev->name, name, IFNAMSIZ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return dev;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(dev_get_by_name_rcu);
@@ -788,7 +812,9 @@ struct net_device *dev_get_by_name(struct net *net, const char *name)
 	rcu_read_lock();
 	dev = dev_get_by_name_rcu(net, name);
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_hold(dev);
+}
 	rcu_read_unlock();
 	return dev;
 }
@@ -813,8 +839,11 @@ struct net_device *__dev_get_by_index(struct net *net, int ifindex)
 
 	hlist_for_each_entry(dev, head, index_hlist)
 		if (dev->ifindex == ifindex)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return dev;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(__dev_get_by_index);
@@ -837,8 +866,11 @@ struct net_device *dev_get_by_index_rcu(struct net *net, int ifindex)
 
 	hlist_for_each_entry_rcu(dev, head, index_hlist)
 		if (dev->ifindex == ifindex)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return dev;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(dev_get_by_index_rcu);
@@ -862,7 +894,10 @@ struct net_device *dev_get_by_index(struct net *net, int ifindex)
 	rcu_read_lock();
 	dev = dev_get_by_index_rcu(net, ifindex);
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_hold(dev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	return dev;
 }
@@ -882,6 +917,7 @@ struct net_device *dev_get_by_napi_id(unsigned int napi_id)
 {
 	struct napi_struct *napi;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(!rcu_read_lock_held());
 
 	if (napi_id < MIN_NAPI_ID)
@@ -946,6 +982,7 @@ struct net_device *dev_getbyhwaddr_rcu(struct net *net, unsigned short type,
 {
 	struct net_device *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev_rcu(net, dev)
 		if (dev->type == type &&
 		    !memcmp(dev->dev_addr, ha, dev->addr_len))
@@ -959,6 +996,7 @@ struct net_device *__dev_getfirstbyhwtype(struct net *net, unsigned short type)
 {
 	struct net_device *dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 	for_each_netdev(net, dev)
 		if (dev->type == type)
@@ -973,6 +1011,7 @@ struct net_device *dev_getfirstbyhwtype(struct net *net, unsigned short type)
 	struct net_device *dev, *ret = NULL;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev_rcu(net, dev)
 		if (dev->type == type) {
 			dev_hold(dev);
@@ -1000,6 +1039,7 @@ struct net_device *__dev_get_by_flags(struct net *net, unsigned short if_flags,
 {
 	struct net_device *dev, *ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	ret = NULL;
@@ -1024,17 +1064,26 @@ EXPORT_SYMBOL(__dev_get_by_flags);
 bool dev_valid_name(const char *name)
 {
 	if (*name == '\0')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (strlen(name) >= IFNAMSIZ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (!strcmp(name, ".") || !strcmp(name, ".."))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	while (*name) {
 		if (*name == '/' || *name == ':' || isspace(*name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
 		name++;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 EXPORT_SYMBOL(dev_valid_name);
@@ -1070,23 +1119,30 @@ static int __dev_alloc_name(struct net *net, const char *name, char *buf)
 		 * characters.
 		 */
 		if (p[1] != 'd' || strchr(p + 2, '%'))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
 		/* Use one page as a bit array of possible slots */
 		inuse = (unsigned long *) get_zeroed_page(GFP_ATOMIC);
 		if (!inuse)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
 		for_each_netdev(net, d) {
 			if (!sscanf(d->name, name, &i))
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (i < 0 || i >= max_netdevices)
 				continue;
 
 			/*  avoid cases where sscanf is not exact inverse of printf */
 			snprintf(buf, IFNAMSIZ, name, i);
 			if (!strncmp(buf, d->name, IFNAMSIZ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				set_bit(i, inuse);
+}
 		}
 
 		i = find_first_zero_bit(inuse, max_netdevices);
@@ -1125,6 +1181,7 @@ int dev_alloc_name(struct net_device *dev, const char *name)
 	struct net *net;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!dev_net(dev));
 	net = dev_net(dev);
 	ret = __dev_alloc_name(net, name, buf);
@@ -1153,15 +1210,22 @@ int dev_get_valid_name(struct net *net, struct net_device *dev,
 	BUG_ON(!net);
 
 	if (!dev_valid_name(name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (strchr(name, '%'))
 		return dev_alloc_name_ns(net, dev, name);
 	else if (__dev_get_by_name(net, name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EEXIST;
+}
 	else if (dev->name != name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		strlcpy(dev->name, name, IFNAMSIZ);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(dev_get_valid_name);
@@ -1182,6 +1246,7 @@ int dev_change_name(struct net_device *dev, const char *newname)
 	int ret;
 	struct net *net;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 	BUG_ON(!dev_net(dev));
 
@@ -1267,6 +1332,7 @@ int dev_set_alias(struct net_device *dev, const char *alias, size_t len)
 {
 	char *new_ifalias;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	if (len >= IFALIASZ)
@@ -1297,6 +1363,7 @@ int dev_set_alias(struct net_device *dev, const char *alias, size_t len)
  */
 void netdev_features_change(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_netdevice_notifiers(NETDEV_FEAT_CHANGE, dev);
 }
 EXPORT_SYMBOL(netdev_features_change);
@@ -1334,6 +1401,7 @@ EXPORT_SYMBOL(netdev_state_change);
  */
 void netdev_notify_peers(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtnl_lock();
 	call_netdevice_notifiers(NETDEV_NOTIFY_PEERS, dev);
 	call_netdevice_notifiers(NETDEV_RESEND_IGMP, dev);
@@ -1349,7 +1417,9 @@ static int __dev_open(struct net_device *dev)
 	ASSERT_RTNL();
 
 	if (!netif_device_present(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* Block netpoll from trying to do any rx path servicing.
 	 * If we don't do this there is a chance ndo_poll_controller
@@ -1360,7 +1430,9 @@ static int __dev_open(struct net_device *dev)
 	ret = call_netdevice_notifiers(NETDEV_PRE_UP, dev);
 	ret = notifier_to_errno(ret);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	set_bit(__LINK_STATE_START, &dev->state);
 
@@ -1370,10 +1442,13 @@ static int __dev_open(struct net_device *dev)
 	if (!ret && ops->ndo_open)
 		ret = ops->ndo_open(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	netpoll_poll_enable(dev);
 
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clear_bit(__LINK_STATE_START, &dev->state);
+}
 	else {
 		dev->flags |= IFF_UP;
 		dev_set_rx_mode(dev);
@@ -1381,6 +1456,7 @@ static int __dev_open(struct net_device *dev)
 		add_device_randomness(dev->dev_addr, dev->addr_len);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -1401,7 +1477,9 @@ int dev_open(struct net_device *dev)
 	int ret;
 
 	if (dev->flags & IFF_UP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = __dev_open(dev);
 	if (ret < 0)
@@ -1451,7 +1529,9 @@ static void __dev_close_many(struct list_head *head)
 		 *	event.
 		 */
 		if (ops->ndo_stop)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ops->ndo_stop(dev);
+}
 
 		dev->flags &= ~IFF_UP;
 		netpoll_poll_enable(dev);
@@ -1498,6 +1578,7 @@ EXPORT_SYMBOL(dev_close_many);
  */
 void dev_close(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->flags & IFF_UP) {
 		LIST_HEAD(single);
 
@@ -1526,7 +1607,9 @@ void dev_disable_lro(struct net_device *dev)
 	netdev_update_features(dev);
 
 	if (unlikely(dev->features & NETIF_F_LRO))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_WARN(dev, "failed to disable LRO!\n");
+}
 
 	netdev_for_each_lower_dev(dev, lower_dev, iter)
 		dev_disable_lro(lower_dev);
@@ -1581,6 +1664,7 @@ int register_netdevice_notifier(struct notifier_block *nb)
 			if (!(dev->flags & IFF_UP))
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			call_netdevice_notifier(nb, NETDEV_UP, dev);
 		}
 	}
@@ -1591,16 +1675,22 @@ int register_netdevice_notifier(struct notifier_block *nb)
 
 rollback:
 	last = dev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_net(net) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_netdev(net, dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (dev == last)
 				goto outroll;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (dev->flags & IFF_UP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				call_netdevice_notifier(nb, NETDEV_GOING_DOWN,
 							dev);
 				call_netdevice_notifier(nb, NETDEV_DOWN, dev);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			call_netdevice_notifier(nb, NETDEV_UNREGISTER, dev);
 		}
 	}
@@ -1636,6 +1726,7 @@ int unregister_netdevice_notifier(struct notifier_block *nb)
 	if (err)
 		goto unlock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_net(net) {
 		for_each_netdev(net, dev) {
 			if (dev->flags & IFF_UP) {
@@ -1667,6 +1758,7 @@ static int call_netdevice_notifiers_info(unsigned long val,
 					 struct netdev_notifier_info *info)
 {
 	ASSERT_RTNL();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	netdev_notifier_info_init(info, dev);
 	return raw_notifier_call_chain(&netdev_chain, val, info);
 }
@@ -1693,12 +1785,14 @@ static struct static_key ingress_needed __read_mostly;
 
 void net_inc_ingress_queue(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	static_key_slow_inc(&ingress_needed);
 }
 EXPORT_SYMBOL_GPL(net_inc_ingress_queue);
 
 void net_dec_ingress_queue(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	static_key_slow_dec(&ingress_needed);
 }
 EXPORT_SYMBOL_GPL(net_dec_ingress_queue);
@@ -1780,6 +1874,7 @@ EXPORT_SYMBOL(net_disable_timestamp);
 
 static inline void net_timestamp_set(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb->tstamp = 0;
 	if (static_key_false(&netstamp_needed))
 		__net_timestamp(skb);
@@ -1796,7 +1891,9 @@ bool is_skb_forwardable(const struct net_device *dev, const struct sk_buff *skb)
 	unsigned int len;
 
 	if (!(dev->flags & IFF_UP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	len = dev->mtu + dev->hard_header_len + VLAN_HLEN;
 	if (skb->len <= len)
@@ -1814,6 +1911,7 @@ EXPORT_SYMBOL_GPL(is_skb_forwardable);
 
 int __dev_forward_skb(struct net_device *dev, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = ____dev_forward_skb(dev, skb);
 
 	if (likely(!ret)) {
@@ -1845,6 +1943,7 @@ EXPORT_SYMBOL_GPL(__dev_forward_skb);
  */
 int dev_forward_skb(struct net_device *dev, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __dev_forward_skb(dev, skb) ?: netif_rx_internal(skb);
 }
 EXPORT_SYMBOL_GPL(dev_forward_skb);
@@ -1854,7 +1953,9 @@ static inline int deliver_skb(struct sk_buff *skb,
 			      struct net_device *orig_dev)
 {
 	if (unlikely(skb_orphan_frags_rx(skb, GFP_ATOMIC)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	refcount_inc(&skb->users);
 	return pt_prev->func(skb, skb->dev, pt_prev, orig_dev);
 }
@@ -1872,6 +1973,7 @@ static inline void deliver_ptype_list_skb(struct sk_buff *skb,
 			continue;
 		if (pt_prev)
 			deliver_skb(skb, pt_prev, orig_dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pt_prev = ptype;
 	}
 	*pt = pt_prev;
@@ -1879,6 +1981,7 @@ static inline void deliver_ptype_list_skb(struct sk_buff *skb,
 
 static inline bool skb_loop_sk(struct packet_type *ptype, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ptype->af_packet_priv || !skb->sk)
 		return false;
 
@@ -1978,6 +2081,7 @@ static void netif_setup_tc(struct net_device *dev, unsigned int txq)
 
 	/* If TC0 is invalidated disable TC mapping */
 	if (tc->offset + tc->count > txq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("Number of in use tx queues changed invalidating tc mappings. Priority traffic classification disabled!\n");
 		dev->num_tc = 0;
 		return;
@@ -1998,6 +2102,7 @@ static void netif_setup_tc(struct net_device *dev, unsigned int txq)
 
 int netdev_txq_to_tc(struct net_device *dev, unsigned int txq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->num_tc) {
 		struct netdev_tc_txq *tc = &dev->tc_to_txq[0];
 		int i;
@@ -2025,7 +2130,9 @@ static bool remove_xps_queue(struct xps_dev_maps *dev_maps,
 	int pos;
 
 	if (dev_maps)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		map = xmap_dereference(dev_maps->cpu_map[tci]);
+}
 	if (!map)
 		return false;
 
@@ -2050,6 +2157,7 @@ static bool remove_xps_queue_cpu(struct net_device *dev,
 				 struct xps_dev_maps *dev_maps,
 				 int cpu, u16 offset, u16 count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int num_tc = dev->num_tc ? : 1;
 	bool active = false;
 	int tci;
@@ -2081,18 +2189,25 @@ static void netif_reset_xps_queues(struct net_device *dev, u16 offset,
 	if (!dev_maps)
 		goto out_no_maps;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(cpu)
 		active |= remove_xps_queue_cpu(dev, dev_maps, cpu,
 					       offset, count);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!active) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		RCU_INIT_POINTER(dev->xps_maps, NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_rcu(dev_maps, rcu);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = offset + (count - 1); count--; i--)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_queue_numa_node_write(netdev_get_tx_queue(dev, i),
 					     NUMA_NO_NODE);
+}
 
 out_no_maps:
 	mutex_unlock(&xps_map_mutex);
@@ -2110,6 +2225,7 @@ static struct xps_map *expand_xps_map(struct xps_map *map,
 	int alloc_len = XPS_MIN_MAP_ALLOC;
 	int i, pos;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (pos = 0; map && pos < map->len; pos++) {
 		if (map->queues[pos] != index)
 			continue;
@@ -2148,6 +2264,7 @@ int netif_set_xps_queue(struct net_device *dev, const struct cpumask *mask,
 	bool active = false;
 
 	if (dev->num_tc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		num_tc = dev->num_tc;
 		tc = netdev_txq_to_tc(dev, index);
 		if (tc < 0)
@@ -2312,6 +2429,7 @@ EXPORT_SYMBOL(netdev_reset_tc);
 
 int netdev_set_tc_queue(struct net_device *dev, u8 tc, u16 count, u16 offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tc >= dev->num_tc)
 		return -EINVAL;
 
@@ -2326,6 +2444,7 @@ EXPORT_SYMBOL(netdev_set_tc_queue);
 
 int netdev_set_num_tc(struct net_device *dev, u8 num_tc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (num_tc > TC_MAX_QUEUE)
 		return -EINVAL;
 
@@ -2346,21 +2465,32 @@ int netif_set_real_num_tx_queues(struct net_device *dev, unsigned int txq)
 	int rc;
 
 	if (txq < 1 || txq > dev->num_tx_queues)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (dev->reg_state == NETREG_REGISTERED ||
 	    dev->reg_state == NETREG_UNREGISTERING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ASSERT_RTNL();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = netdev_queue_update_kobjects(dev, dev->real_num_tx_queues,
 						  txq);
 		if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return rc;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->num_tc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			netif_setup_tc(dev, txq);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (txq < dev->real_num_tx_queues) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qdisc_reset_all_tx_gt(dev, txq);
 #ifdef CONFIG_XPS
 			netif_reset_xps_queues_gt(dev, txq);
@@ -2389,15 +2519,21 @@ int netif_set_real_num_rx_queues(struct net_device *dev, unsigned int rxq)
 	int rc;
 
 	if (rxq < 1 || rxq > dev->num_rx_queues)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (dev->reg_state == NETREG_REGISTERED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ASSERT_RTNL();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = net_rx_queue_update_kobjects(dev, dev->real_num_rx_queues,
 						  rxq);
 		if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return rc;
+}
 	}
 
 	dev->real_num_rx_queues = rxq;
@@ -2414,6 +2550,7 @@ EXPORT_SYMBOL(netif_set_real_num_rx_queues);
  */
 int netif_get_num_default_rss_queues(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return is_kdump_kernel() ?
 		1 : min_t(int, DEFAULT_MAX_NUM_RSS_QUEUES, num_online_cpus());
 }
@@ -2446,17 +2583,20 @@ struct dev_kfree_skb_cb {
 
 static struct dev_kfree_skb_cb *get_kfree_skb_cb(const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (struct dev_kfree_skb_cb *)skb->cb;
 }
 
 void netif_schedule_queue(struct netdev_queue *txq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	if (!(txq->state & QUEUE_STATE_ANY_XOFF)) {
 		struct Qdisc *q = rcu_dereference(txq->qdisc);
 
 		__netif_schedule(q);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 EXPORT_SYMBOL(netif_schedule_queue);
@@ -2467,6 +2607,7 @@ void netif_tx_wake_queue(struct netdev_queue *dev_queue)
 		struct Qdisc *q;
 
 		rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		q = rcu_dereference(dev_queue->qdisc);
 		__netif_schedule(q);
 		rcu_read_unlock();
@@ -2479,7 +2620,9 @@ void __dev_kfree_skb_irq(struct sk_buff *skb, enum skb_free_reason reason)
 	unsigned long flags;
 
 	if (unlikely(!skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (likely(refcount_read(&skb->users) == 1)) {
 		smp_rmb();
@@ -2499,7 +2642,9 @@ EXPORT_SYMBOL(__dev_kfree_skb_irq);
 void __dev_kfree_skb_any(struct sk_buff *skb, enum skb_free_reason reason)
 {
 	if (in_irq() || irqs_disabled())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__dev_kfree_skb_irq(skb, reason);
+}
 	else
 		dev_kfree_skb(skb);
 }
@@ -2514,6 +2659,7 @@ EXPORT_SYMBOL(__dev_kfree_skb_any);
  */
 void netif_device_detach(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_and_clear_bit(__LINK_STATE_PRESENT, &dev->state) &&
 	    netif_running(dev)) {
 		netif_tx_stop_all_queues(dev);
@@ -2529,6 +2675,7 @@ EXPORT_SYMBOL(netif_device_detach);
  */
 void netif_device_attach(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_and_set_bit(__LINK_STATE_PRESENT, &dev->state) &&
 	    netif_running(dev)) {
 		netif_tx_wake_all_queues(dev);
@@ -2549,6 +2696,7 @@ u16 __skb_tx_hash(const struct net_device *dev, struct sk_buff *skb,
 	u16 qcount = num_tx_queues;
 
 	if (skb_rx_queue_recorded(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hash = skb_get_rx_queue(skb);
 		while (unlikely(hash >= num_tx_queues))
 			hash -= num_tx_queues;
@@ -2573,7 +2721,9 @@ static void skb_warn_bad_offload(const struct sk_buff *skb)
 	const char *name = "";
 
 	if (!net_ratelimit())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (dev) {
 		if (dev->dev.parent)
@@ -2602,6 +2752,7 @@ int skb_checksum_help(struct sk_buff *skb)
 		goto out_set_summed;
 
 	if (unlikely(skb_shinfo(skb)->gso_size)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb_warn_bad_offload(skb);
 		return -EINVAL;
 	}
@@ -2610,6 +2761,7 @@ int skb_checksum_help(struct sk_buff *skb)
 	 * be modified by an external entity : checksum could be wrong.
 	 */
 	if (skb_has_shared_frag(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = __skb_linearize(skb);
 		if (ret)
 			goto out;
@@ -2645,6 +2797,7 @@ int skb_crc32c_csum_help(struct sk_buff *skb)
 	if (skb->ip_summed != CHECKSUM_PARTIAL)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(skb_is_gso(skb)))
 		goto out;
 
@@ -2687,8 +2840,11 @@ __be16 skb_network_protocol(struct sk_buff *skb, int *depth)
 		struct ethhdr *eth;
 
 		if (unlikely(!pskb_may_pull(skb, sizeof(struct ethhdr))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		eth = (struct ethhdr *)skb_mac_header(skb);
 		type = eth->h_proto;
 	}
@@ -2704,6 +2860,7 @@ __be16 skb_network_protocol(struct sk_buff *skb, int *depth)
 struct sk_buff *skb_mac_gso_segment(struct sk_buff *skb,
 				    netdev_features_t features)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sk_buff *segs = ERR_PTR(-EPROTONOSUPPORT);
 	struct packet_offload *ptype;
 	int vlan_depth = skb->mac_len;
@@ -2734,6 +2891,7 @@ EXPORT_SYMBOL(skb_mac_gso_segment);
  */
 static inline bool skb_needs_check(struct sk_buff *skb, bool tx_path)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tx_path)
 		return skb->ip_summed != CHECKSUM_PARTIAL &&
 		       skb->ip_summed != CHECKSUM_UNNECESSARY;
@@ -2765,7 +2923,9 @@ struct sk_buff *__skb_gso_segment(struct sk_buff *skb,
 		/* We're going to init ->check field in TCP or UDP header */
 		err = skb_cow_head(skb, 0);
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(err);
+}
 	}
 
 	/* Only report GSO partial support if it will enable us to
@@ -2803,6 +2963,7 @@ EXPORT_SYMBOL(__skb_gso_segment);
 #ifdef CONFIG_BUG
 void netdev_rx_csum_fault(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (net_ratelimit()) {
 		pr_err("%s: hw csum failure\n", dev ? dev->name : "<unknown>");
 		dump_stack();
@@ -2865,6 +3026,7 @@ static netdev_features_t net_mpls_features(struct sk_buff *skb,
 					   netdev_features_t features,
 					   __be16 type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return features;
 }
 #endif
@@ -2882,8 +3044,11 @@ static netdev_features_t harmonize_features(struct sk_buff *skb,
 	    !can_checksum_protocol(features, type)) {
 		features &= ~(NETIF_F_CSUM_MASK | NETIF_F_GSO_MASK);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (illegal_highdma(skb->dev, skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		features &= ~NETIF_F_SG;
+}
 
 	return features;
 }
@@ -2907,6 +3072,7 @@ static netdev_features_t gso_features_check(const struct sk_buff *skb,
 					    struct net_device *dev,
 					    netdev_features_t features)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u16 gso_segs = skb_shinfo(skb)->gso_segs;
 
 	if (gso_segs > dev->gso_max_segs)
@@ -2941,20 +3107,26 @@ netdev_features_t netif_skb_features(struct sk_buff *skb)
 	netdev_features_t features = dev->features;
 
 	if (skb_is_gso(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		features = gso_features_check(skb, dev, features);
+}
 
 	/* If encapsulation offload request, verify we are testing
 	 * hardware encapsulation features instead of standard
 	 * features for the netdev
 	 */
 	if (skb->encapsulation)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		features &= dev->hw_enc_features;
+}
 
 	if (skb_vlan_tagged(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		features = netdev_intersect_features(features,
 						     dev->vlan_features |
 						     NETIF_F_HW_VLAN_CTAG_TX |
 						     NETIF_F_HW_VLAN_STAG_TX);
+}
 
 	if (dev->netdev_ops->ndo_features_check)
 		features &= dev->netdev_ops->ndo_features_check(skb, dev,
@@ -2973,7 +3145,9 @@ static int xmit_one(struct sk_buff *skb, struct net_device *dev,
 	int rc;
 
 	if (!list_empty(&ptype_all) || !list_empty(&dev->ptype_all))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_queue_xmit_nit(skb, dev);
+}
 
 	len = skb->len;
 	trace_net_dev_start_xmit(skb, dev);
@@ -2995,12 +3169,15 @@ struct sk_buff *dev_hard_start_xmit(struct sk_buff *first, struct net_device *de
 		skb->next = NULL;
 		rc = xmit_one(skb, dev, txq, next != NULL);
 		if (unlikely(!dev_xmit_complete(rc))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb->next = next;
 			goto out;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb = next;
 		if (netif_xmit_stopped(txq) && skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rc = NETDEV_TX_BUSY;
 			break;
 		}
@@ -3024,8 +3201,10 @@ int skb_csum_hwoffload_help(struct sk_buff *skb,
 			    const netdev_features_t features)
 {
 	if (unlikely(skb->csum_not_inet))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return !!(features & NETIF_F_SCTP_CRC) ? 0 :
 			skb_crc32c_csum_help(skb);
+}
 
 	return !!(features & NETIF_F_CSUM_MASK) ? 0 : skb_checksum_help(skb);
 }
@@ -3047,6 +3226,7 @@ static struct sk_buff *validate_xmit_skb(struct sk_buff *skb, struct net_device
 		if (IS_ERR(segs)) {
 			goto out_kfree_skb;
 		} else if (segs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			consume_skb(skb);
 			skb = segs;
 		}
@@ -3055,6 +3235,7 @@ static struct sk_buff *validate_xmit_skb(struct sk_buff *skb, struct net_device
 		    __skb_linearize(skb))
 			goto out_kfree_skb;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (validate_xmit_xfrm(skb, features))
 			goto out_kfree_skb;
 
@@ -3074,6 +3255,7 @@ static struct sk_buff *validate_xmit_skb(struct sk_buff *skb, struct net_device
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb;
 
 out_kfree_skb:
@@ -3099,7 +3281,9 @@ struct sk_buff *validate_xmit_skb_list(struct sk_buff *skb, struct net_device *d
 			continue;
 
 		if (!head)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			head = skb;
+}
 		else
 			tail->next = skb;
 		/* If skb was segmented, skb->prev points to
@@ -3113,6 +3297,7 @@ EXPORT_SYMBOL_GPL(validate_xmit_skb_list);
 
 static void qdisc_pkt_len_init(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct skb_shared_info *shinfo = skb_shinfo(skb);
 
 	qdisc_skb_cb(skb)->pkt_len = skb->len;
@@ -3135,7 +3320,9 @@ static void qdisc_pkt_len_init(struct sk_buff *skb)
 			th = skb_header_pointer(skb, skb_transport_offset(skb),
 						sizeof(_tcphdr), &_tcphdr);
 			if (likely(th))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				hdr_len += __tcp_hdrlen(th);
+}
 		} else {
 			struct udphdr _udphdr;
 
@@ -3144,10 +3331,14 @@ static void qdisc_pkt_len_init(struct sk_buff *skb)
 				hdr_len += sizeof(struct udphdr);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (shinfo->gso_type & SKB_GSO_DODGY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gso_segs = DIV_ROUND_UP(skb->len - hdr_len,
 						shinfo->gso_size);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		qdisc_skb_cb(skb)->pkt_len += (gso_segs - 1) * hdr_len;
 	}
 }
@@ -3156,6 +3347,7 @@ static inline int __dev_xmit_skb(struct sk_buff *skb, struct Qdisc *q,
 				 struct net_device *dev,
 				 struct netdev_queue *txq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spinlock_t *root_lock = qdisc_lock(q);
 	struct sk_buff *to_free = NULL;
 	bool contended;
@@ -3170,10 +3362,14 @@ static inline int __dev_xmit_skb(struct sk_buff *skb, struct Qdisc *q,
 	 */
 	contended = qdisc_is_running(q);
 	if (unlikely(contended))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&q->busylock);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(root_lock);
 	if (unlikely(test_bit(__QDISC_STATE_DEACTIVATED, &q->state))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__qdisc_drop(skb, &to_free);
 		rc = NET_XMIT_DROP;
 	} else if ((q->flags & TCQ_F_CAN_BYPASS) && !qdisc_qlen(q) &&
@@ -3184,33 +3380,49 @@ static inline int __dev_xmit_skb(struct sk_buff *skb, struct Qdisc *q,
 		 * xmit the skb directly.
 		 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		qdisc_bstats_update(q, skb);
 
 		if (sch_direct_xmit(skb, q, dev, txq, root_lock, true)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (unlikely(contended)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&q->busylock);
 				contended = false;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__qdisc_run(q);
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			qdisc_run_end(q);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = NET_XMIT_SUCCESS;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = q->enqueue(skb, q, &to_free) & NET_XMIT_MASK;
 		if (qdisc_run_begin(q)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (unlikely(contended)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&q->busylock);
 				contended = false;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__qdisc_run(q);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(root_lock);
 	if (unlikely(to_free))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb_list(to_free);
+}
 	if (unlikely(contended))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&q->busylock);
+}
 	return rc;
 }
 
@@ -3242,6 +3454,7 @@ EXPORT_SYMBOL(xmit_recursion);
  */
 int dev_loopback_xmit(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_reset_mac_header(skb);
 	__skb_pull(skb, skb_network_offset(skb));
 	skb->pkt_type = PACKET_LOOPBACK;
@@ -3303,6 +3516,7 @@ static inline int get_xps_queue(struct net_device *dev, struct sk_buff *skb)
 	int queue_index = -1;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_maps = rcu_dereference(dev->xps_maps);
 	if (dev_maps) {
 		unsigned int tci = skb->sender_cpu - 1;
@@ -3336,6 +3550,7 @@ static u16 __netdev_pick_tx(struct net_device *dev, struct sk_buff *skb)
 	struct sock *sk = skb->sk;
 	int queue_index = sk_tx_queue_get(sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (queue_index < 0 || skb->ooo_okay ||
 	    queue_index >= dev->real_num_tx_queues) {
 		int new_index = get_xps_queue(dev, skb);
@@ -3371,13 +3586,18 @@ struct netdev_queue *netdev_pick_tx(struct net_device *dev,
 		const struct net_device_ops *ops = dev->netdev_ops;
 
 		if (ops->ndo_select_queue)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			queue_index = ops->ndo_select_queue(dev, skb, accel_priv,
 							    __netdev_pick_tx);
+}
 		else
 			queue_index = __netdev_pick_tx(dev, skb);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!accel_priv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			queue_index = netdev_cap_txqueue(dev, queue_index);
+}
 	}
 
 	skb_set_queue_mapping(skb, queue_index);
@@ -3420,7 +3640,9 @@ static int __dev_queue_xmit(struct sk_buff *skb, void *accel_priv)
 	skb_reset_mac_header(skb);
 
 	if (unlikely(skb_shinfo(skb)->tx_flags & SKBTX_SCHED_TSTAMP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__skb_tstamp_tx(skb, NULL, skb->sk, SCM_TSTAMP_SCHED);
+}
 
 	/* Disable soft irqs for various locks below. Also
 	 * stops preemption for RCU.
@@ -3492,7 +3714,9 @@ static int __dev_queue_xmit(struct sk_buff *skb, void *accel_priv)
 					goto out;
 				}
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			HARD_TX_UNLOCK(dev, txq);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net_crit_ratelimited("Virtual device %s asks to queue packet!\n",
 					     dev->name);
 		} else {
@@ -3505,6 +3729,7 @@ static int __dev_queue_xmit(struct sk_buff *skb, void *accel_priv)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rc = -ENETDOWN;
 	rcu_read_unlock_bh();
 
@@ -3524,6 +3749,7 @@ EXPORT_SYMBOL(dev_queue_xmit);
 
 int dev_queue_xmit_accel(struct sk_buff *skb, void *accel_priv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __dev_queue_xmit(skb, accel_priv);
 }
 EXPORT_SYMBOL(dev_queue_xmit_accel);
@@ -3570,6 +3796,7 @@ static struct rps_dev_flow *
 set_rps_cpu(struct net_device *dev, struct sk_buff *skb,
 	    struct rps_dev_flow *rflow, u16 next_cpu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (next_cpu < nr_cpu_ids) {
 #ifdef CONFIG_RFS_ACCEL
 		struct netdev_rx_queue *rxqueue;
@@ -3628,6 +3855,7 @@ static int get_rps_cpu(struct net_device *dev, struct sk_buff *skb,
 	u32 hash;
 
 	if (skb_rx_queue_recorded(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		u16 index = skb_get_rx_queue(skb);
 
 		if (unlikely(index >= dev->real_num_rx_queues)) {
@@ -3734,6 +3962,7 @@ bool rps_may_expire_flow(struct net_device *dev, u16 rxq_index,
 	unsigned int cpu;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flow_table = rcu_dereference(rxqueue->rps_flow_table);
 	if (flow_table && flow_id <= flow_table->mask) {
 		rflow = &flow_table->flows[flow_id];
@@ -3773,6 +4002,7 @@ static int rps_ipi_queued(struct softnet_data *sd)
 	struct softnet_data *mysd = this_cpu_ptr(&softnet_data);
 
 	if (sd != mysd) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sd->rps_ipi_next = mysd->rps_ipi_list;
 		mysd->rps_ipi_list = sd;
 
@@ -3795,13 +4025,18 @@ static bool skb_flow_limit(struct sk_buff *skb, unsigned int qlen)
 	unsigned int old_flow, new_flow;
 
 	if (qlen < (netdev_max_backlog >> 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sd = this_cpu_ptr(&softnet_data);
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fl = rcu_dereference(sd->flow_limit);
 	if (fl) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new_flow = skb_get_hash(skb) & (fl->num_buckets - 1);
 		old_flow = fl->history[fl->history_head];
 		fl->history[fl->history_head] = new_flow;
@@ -3810,14 +4045,19 @@ static bool skb_flow_limit(struct sk_buff *skb, unsigned int qlen)
 		fl->history_head &= FLOW_LIMIT_HISTORY - 1;
 
 		if (likely(fl->buckets[old_flow]))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fl->buckets[old_flow]--;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (++fl->buckets[new_flow] > (FLOW_LIMIT_HISTORY >> 1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fl->count++;
 			rcu_read_unlock();
 			return true;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 #endif
 	return false;
@@ -3838,9 +4078,11 @@ static int enqueue_to_backlog(struct sk_buff *skb, int cpu,
 
 	local_irq_save(flags);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rps_lock(sd);
 	if (!netif_running(skb->dev))
 		goto drop;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	qlen = skb_queue_len(&sd->input_pkt_queue);
 	if (qlen <= netdev_max_backlog && !skb_flow_limit(skb, qlen)) {
 		if (qlen) {
@@ -3866,8 +4108,10 @@ static int enqueue_to_backlog(struct sk_buff *skb, int cpu,
 	sd->dropped++;
 	rps_unlock(sd);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_irq_restore(flags);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_long_inc(&skb->dev->rx_dropped);
 	kfree_skb(skb);
 	return NET_RX_DROP;
@@ -3886,7 +4130,9 @@ static u32 netif_receive_generic_xdp(struct sk_buff *skb,
 	 * not get XDP generic processing.
 	 */
 	if (skb_cloned(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return XDP_PASS;
+}
 
 	if (skb_linearize(skb))
 		goto do_drop;
@@ -3944,6 +4190,7 @@ void generic_xdp_tx(struct sk_buff *skb, struct bpf_prog *xdp_prog)
 	int cpu, rc;
 
 	txq = netdev_pick_tx(dev, skb, NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpu = smp_processor_id();
 	HARD_TX_LOCK(dev, txq, cpu);
 	if (!netif_xmit_stopped(txq)) {
@@ -3963,6 +4210,7 @@ static struct static_key generic_xdp_needed __read_mostly;
 
 int do_xdp_generic(struct bpf_prog *xdp_prog, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (xdp_prog) {
 		u32 act = netif_receive_generic_xdp(skb, xdp_prog);
 		int err;
@@ -4002,6 +4250,7 @@ static int netif_rx_internal(struct sk_buff *skb)
 
 		preempt_disable();
 		rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = do_xdp_generic(rcu_dereference(skb->dev->xdp_prog), skb);
 		rcu_read_unlock();
 		preempt_enable();
@@ -4011,7 +4260,9 @@ static int netif_rx_internal(struct sk_buff *skb)
 		 * this as an error.
 		 */
 		if (ret != XDP_PASS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NET_RX_SUCCESS;
+}
 	}
 
 #ifdef CONFIG_RPS
@@ -4024,8 +4275,11 @@ static int netif_rx_internal(struct sk_buff *skb)
 
 		cpu = get_rps_cpu(skb->dev, skb, &rflow);
 		if (cpu < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cpu = smp_processor_id();
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = enqueue_to_backlog(skb, cpu, &rflow->last_qtail);
 
 		rcu_read_unlock();
@@ -4038,6 +4292,7 @@ static int netif_rx_internal(struct sk_buff *skb)
 		ret = enqueue_to_backlog(skb, get_cpu(), &qtail);
 		put_cpu();
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -4072,6 +4327,7 @@ int netif_rx_ni(struct sk_buff *skb)
 
 	preempt_disable();
 	err = netif_rx_internal(skb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (local_softirq_pending())
 		do_softirq();
 	preempt_enable();
@@ -4087,28 +4343,39 @@ static __latent_entropy void net_tx_action(struct softirq_action *h)
 	if (sd->completion_queue) {
 		struct sk_buff *clist;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_irq_disable();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clist = sd->completion_queue;
 		sd->completion_queue = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_irq_enable();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (clist) {
 			struct sk_buff *skb = clist;
 
 			clist = clist->next;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			WARN_ON(refcount_read(&skb->users));
 			if (likely(get_kfree_skb_cb(skb)->reason == SKB_REASON_CONSUMED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				trace_consume_skb(skb);
+}
 			else
 				trace_kfree_skb(skb, net_tx_action);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (skb->fclone != SKB_FCLONE_UNAVAILABLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__kfree_skb(skb);
+}
 			else
 				__kfree_skb_defer(skb);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__kfree_skb_flush();
 	}
 
@@ -4211,6 +4478,7 @@ sch_handle_ingress(struct sk_buff *skb, struct packet_type **pt_prev, int *ret,
  */
 bool netdev_is_rx_handler_busy(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 	return dev && rtnl_dereference(dev->rx_handler);
 }
@@ -4234,6 +4502,7 @@ int netdev_rx_handler_register(struct net_device *dev,
 			       rx_handler_func_t *rx_handler,
 			       void *rx_handler_data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (netdev_is_rx_handler_busy(dev))
 		return -EBUSY;
 
@@ -4256,6 +4525,7 @@ EXPORT_SYMBOL_GPL(netdev_rx_handler_register);
 void netdev_rx_handler_unregister(struct net_device *dev)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 	RCU_INIT_POINTER(dev->rx_handler, NULL);
 	/* a reader seeing a non NULL rx_handler in a rcu_read_lock()
@@ -4273,6 +4543,7 @@ EXPORT_SYMBOL_GPL(netdev_rx_handler_unregister);
  */
 static bool skb_pfmemalloc_protocol(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (skb->protocol) {
 	case htons(ETH_P_ARP):
 	case htons(ETH_P_IP):
@@ -4335,6 +4606,7 @@ static int __netif_receive_skb_core(struct sk_buff *skb, bool pfmemalloc)
 
 	if (skb->protocol == cpu_to_be16(ETH_P_8021Q) ||
 	    skb->protocol == cpu_to_be16(ETH_P_8021AD)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb = skb_vlan_untag(skb);
 		if (unlikely(!skb))
 			goto out;
@@ -4347,24 +4619,34 @@ static int __netif_receive_skb_core(struct sk_buff *skb, bool pfmemalloc)
 		goto skip_taps;
 
 	list_for_each_entry_rcu(ptype, &ptype_all, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pt_prev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = deliver_skb(skb, pt_prev, orig_dev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pt_prev = ptype;
 	}
 
 	list_for_each_entry_rcu(ptype, &skb->dev->ptype_all, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pt_prev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = deliver_skb(skb, pt_prev, orig_dev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pt_prev = ptype;
 	}
 
 skip_taps:
 #ifdef CONFIG_NET_INGRESS
 	if (static_key_false(&ingress_needed)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb = sch_handle_ingress(skb, &pt_prev, &ret, orig_dev);
 		if (!skb)
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (nf_ingress(skb, &pt_prev, &ret, orig_dev) < 0)
 			goto out;
 	}
@@ -4375,22 +4657,29 @@ static int __netif_receive_skb_core(struct sk_buff *skb, bool pfmemalloc)
 		goto drop;
 
 	if (skb_vlan_tag_present(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pt_prev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = deliver_skb(skb, pt_prev, orig_dev);
 			pt_prev = NULL;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (vlan_do_receive(&skb))
 			goto another_round;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (unlikely(!skb))
 			goto out;
 	}
 
 	rx_handler = rcu_dereference(skb->dev->rx_handler);
 	if (rx_handler) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pt_prev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = deliver_skb(skb, pt_prev, orig_dev);
 			pt_prev = NULL;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (rx_handler(&skb)) {
 		case RX_HANDLER_CONSUMED:
 			ret = NET_RX_SUCCESS;
@@ -4407,8 +4696,11 @@ static int __netif_receive_skb_core(struct sk_buff *skb, bool pfmemalloc)
 	}
 
 	if (unlikely(skb_vlan_tag_present(skb))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (skb_vlan_tag_get_id(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb->pkt_type = PACKET_OTHERHOST;
+}
 		/* Note: we might in the future use prio bits
 		 * and set skb->priority like in vlan_do_receive()
 		 * For the time being, just ignore Priority Code Point
@@ -4429,6 +4721,7 @@ static int __netif_receive_skb_core(struct sk_buff *skb, bool pfmemalloc)
 			       &orig_dev->ptype_specific);
 
 	if (unlikely(skb->dev != orig_dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		deliver_ptype_list_skb(skb, &pt_prev, orig_dev, type,
 				       &skb->dev->ptype_specific);
 	}
@@ -4441,9 +4734,12 @@ static int __netif_receive_skb_core(struct sk_buff *skb, bool pfmemalloc)
 	} else {
 drop:
 		if (!deliver_exact)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atomic_long_inc(&skb->dev->rx_dropped);
+}
 		else
 			atomic_long_inc(&skb->dev->rx_nohandler);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
 		/* Jamal, now you will not able to escape explaining
 		 * me how you were going to use this. :-)
@@ -4482,6 +4778,7 @@ static int __netif_receive_skb(struct sk_buff *skb)
 
 static int generic_xdp_install(struct net_device *dev, struct netdev_xdp *xdp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bpf_prog *old = rtnl_dereference(dev->xdp_prog);
 	struct bpf_prog *new = xdp->prog;
 	int ret = 0;
@@ -4519,22 +4816,29 @@ static int netif_receive_skb_internal(struct sk_buff *skb)
 
 	net_timestamp_check(netdev_tstamp_prequeue, skb);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (skb_defer_rx_timestamp(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NET_RX_SUCCESS;
+}
 
 	if (static_key_false(&generic_xdp_needed)) {
 		int ret;
 
 		preempt_disable();
 		rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = do_xdp_generic(rcu_dereference(skb->dev->xdp_prog), skb);
 		rcu_read_unlock();
 		preempt_enable();
 
 		if (ret != XDP_PASS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NET_RX_DROP;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 #ifdef CONFIG_RPS
 	if (static_key_false(&rps_needed)) {
@@ -4542,6 +4846,7 @@ static int netif_receive_skb_internal(struct sk_buff *skb)
 		int cpu = get_rps_cpu(skb->dev, skb, &rflow);
 
 		if (cpu >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = enqueue_to_backlog(skb, cpu, &rflow->last_qtail);
 			rcu_read_unlock();
 			return ret;
@@ -4570,6 +4875,7 @@ static int netif_receive_skb_internal(struct sk_buff *skb)
  */
 int netif_receive_skb(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	trace_netif_receive_skb_entry(skb);
 
 	return netif_receive_skb_internal(skb);
@@ -4588,19 +4894,25 @@ static void flush_backlog(struct work_struct *work)
 	sd = this_cpu_ptr(&softnet_data);
 
 	local_irq_disable();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rps_lock(sd);
 	skb_queue_walk_safe(&sd->input_pkt_queue, skb, tmp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (skb->dev->reg_state == NETREG_UNREGISTERING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__skb_unlink(skb, &sd->input_pkt_queue);
 			kfree_skb(skb);
 			input_queue_head_incr(sd);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rps_unlock(sd);
 	local_irq_enable();
 
 	skb_queue_walk_safe(&sd->process_queue, skb, tmp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (skb->dev->reg_state == NETREG_UNREGISTERING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__skb_unlink(skb, &sd->process_queue);
 			kfree_skb(skb);
 			input_queue_head_incr(sd);
@@ -4622,6 +4934,7 @@ static void flush_all_backlogs(void)
 	for_each_online_cpu(cpu)
 		flush_work(per_cpu_ptr(&flush_works, cpu));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	put_online_cpus();
 }
 
@@ -4632,6 +4945,7 @@ static int napi_gro_complete(struct sk_buff *skb)
 	struct list_head *head = &offload_base;
 	int err = -ENOENT;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(sizeof(struct napi_gro_cb) > sizeof(skb->cb));
 
 	if (NAPI_GRO_CB(skb)->count == 1) {
@@ -4700,26 +5014,33 @@ static void gro_list_prepare(struct napi_struct *napi, struct sk_buff *skb)
 		NAPI_GRO_CB(p)->flush = 0;
 
 		if (hash != skb_get_hash_raw(p)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NAPI_GRO_CB(p)->same_flow = 0;
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		diffs = (unsigned long)p->dev ^ (unsigned long)skb->dev;
 		diffs |= p->vlan_tci ^ skb->vlan_tci;
 		diffs |= skb_metadata_dst_cmp(p, skb);
 		if (maclen == ETH_HLEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			diffs |= compare_ether_header(skb_mac_header(p),
 						      skb_mac_header(skb));
+}
 		else if (!diffs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			diffs = memcmp(skb_mac_header(p),
 				       skb_mac_header(skb),
 				       maclen);
+}
 		NAPI_GRO_CB(p)->same_flow = !diffs;
 	}
 }
 
 static void skb_gro_reset_offset(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct skb_shared_info *pinfo = skb_shinfo(skb);
 	const skb_frag_t *frag0 = &pinfo->frags[0];
 
@@ -4730,7 +5051,9 @@ static void skb_gro_reset_offset(struct sk_buff *skb)
 	if (skb_mac_header(skb) == skb_tail_pointer(skb) &&
 	    pinfo->nr_frags &&
 	    !PageHighMem(skb_frag_page(frag0))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NAPI_GRO_CB(skb)->frag0 = skb_frag_address(frag0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NAPI_GRO_CB(skb)->frag0_len = min_t(unsigned int,
 						    skb_frag_size(frag0),
 						    skb->end - skb->tail);
@@ -4739,6 +5062,7 @@ static void skb_gro_reset_offset(struct sk_buff *skb)
 
 static void gro_pull_from_frag0(struct sk_buff *skb, int grow)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct skb_shared_info *pinfo = skb_shinfo(skb);
 
 	BUG_ON(skb->end - skb->tail < grow);
@@ -4808,12 +5132,14 @@ static enum gro_result dev_gro_receive(struct napi_struct *napi, struct sk_buff
 		pp = ptype->callbacks.gro_receive(&napi->gro_list, skb);
 		break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	if (&ptype->list == head)
 		goto normal;
 
 	if (IS_ERR(pp) && PTR_ERR(pp) == -EINPROGRESS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = GRO_CONSUMED;
 		goto ok;
 	}
@@ -4836,20 +5162,25 @@ static enum gro_result dev_gro_receive(struct napi_struct *napi, struct sk_buff
 	if (NAPI_GRO_CB(skb)->flush)
 		goto normal;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(napi->gro_count >= MAX_GRO_SKBS)) {
 		struct sk_buff *nskb = napi->gro_list;
 
 		/* locate the end of the list to select the 'oldest' flow */
 		while (nskb->next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pp = &nskb->next;
 			nskb = *pp;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*pp = NULL;
 		nskb->next = NULL;
 		napi_gro_complete(nskb);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		napi->gro_count++;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	NAPI_GRO_CB(skb)->count = 1;
 	NAPI_GRO_CB(skb)->age = jiffies;
 	NAPI_GRO_CB(skb)->last = skb;
@@ -4861,7 +5192,9 @@ static enum gro_result dev_gro_receive(struct napi_struct *napi, struct sk_buff
 pull:
 	grow = skb_gro_offset(skb) - skb_headlen(skb);
 	if (grow > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gro_pull_from_frag0(skb, grow);
+}
 ok:
 	return ret;
 
@@ -4875,6 +5208,7 @@ struct packet_offload *gro_find_receive_by_type(__be16 type)
 	struct list_head *offload_head = &offload_base;
 	struct packet_offload *ptype;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(ptype, offload_head, list) {
 		if (ptype->type != type || !ptype->callbacks.gro_receive)
 			continue;
@@ -4889,6 +5223,7 @@ struct packet_offload *gro_find_complete_by_type(__be16 type)
 	struct list_head *offload_head = &offload_base;
 	struct packet_offload *ptype;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(ptype, offload_head, list) {
 		if (ptype->type != type || !ptype->callbacks.gro_complete)
 			continue;
@@ -4900,6 +5235,7 @@ EXPORT_SYMBOL(gro_find_complete_by_type);
 
 static void napi_skb_free_stolen_head(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_dst_drop(skb);
 	secpath_reset(skb);
 	kmem_cache_free(skbuff_head_cache, skb);
@@ -4910,7 +5246,9 @@ static gro_result_t napi_skb_finish(gro_result_t ret, struct sk_buff *skb)
 	switch (ret) {
 	case GRO_NORMAL:
 		if (netif_receive_skb_internal(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = GRO_DROP;
+}
 		break;
 
 	case GRO_DROP:
@@ -4919,7 +5257,9 @@ static gro_result_t napi_skb_finish(gro_result_t ret, struct sk_buff *skb)
 
 	case GRO_MERGED_FREE:
 		if (NAPI_GRO_CB(skb)->free == NAPI_GRO_FREE_STOLEN_HEAD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			napi_skb_free_stolen_head(skb);
+}
 		else
 			__kfree_skb(skb);
 		break;
@@ -4935,6 +5275,7 @@ static gro_result_t napi_skb_finish(gro_result_t ret, struct sk_buff *skb)
 
 gro_result_t napi_gro_receive(struct napi_struct *napi, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_mark_napi_id(skb, napi);
 	trace_napi_gro_receive_entry(skb);
 
@@ -4946,6 +5287,7 @@ EXPORT_SYMBOL(napi_gro_receive);
 
 static void napi_reuse_skb(struct napi_struct *napi, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(skb->pfmemalloc)) {
 		consume_skb(skb);
 		return;
@@ -4969,6 +5311,7 @@ struct sk_buff *napi_get_frags(struct napi_struct *napi)
 	struct sk_buff *skb = napi->skb;
 
 	if (!skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb = napi_alloc_skb(napi, GRO_MAX_HEAD);
 		if (skb) {
 			napi->skb = skb;
@@ -4983,6 +5326,7 @@ static gro_result_t napi_frags_finish(struct napi_struct *napi,
 				      struct sk_buff *skb,
 				      gro_result_t ret)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (ret) {
 	case GRO_NORMAL:
 	case GRO_HELD:
@@ -5028,6 +5372,7 @@ static struct sk_buff *napi_frags_skb(struct napi_struct *napi)
 
 	eth = skb_gro_header_fast(skb, 0);
 	if (unlikely(skb_gro_header_hard(skb, hlen))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		eth = skb_gro_header_slow(skb, hlen, 0);
 		if (unlikely(!eth)) {
 			net_warn_ratelimited("%s: dropping impossible skb from %s\n",
@@ -5054,6 +5399,7 @@ static struct sk_buff *napi_frags_skb(struct napi_struct *napi)
 
 gro_result_t napi_gro_frags(struct napi_struct *napi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sk_buff *skb = napi_frags_skb(napi);
 
 	if (!skb)
@@ -5113,8 +5459,10 @@ static void net_rps_action_and_irq_enable(struct softnet_data *sd)
 	struct softnet_data *remsd = sd->rps_ipi_list;
 
 	if (remsd) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sd->rps_ipi_list = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_irq_enable();
 
 		/* Send pending IPI's to kick RPS processing on remote cpus. */
@@ -5135,6 +5483,7 @@ static bool sd_has_rps_ipi_waiting(struct softnet_data *sd)
 
 static int process_backlog(struct napi_struct *napi, int quota)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct softnet_data *sd = container_of(napi, struct softnet_data, backlog);
 	bool again = true;
 	int work = 0;
@@ -5143,7 +5492,9 @@ static int process_backlog(struct napi_struct *napi, int quota)
 	 * not waiting net_rx_action() end.
 	 */
 	if (sd_has_rps_ipi_waiting(sd)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_irq_disable();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_rps_action_and_irq_enable(sd);
 	}
 
@@ -5152,16 +5503,20 @@ static int process_backlog(struct napi_struct *napi, int quota)
 		struct sk_buff *skb;
 
 		while ((skb = __skb_dequeue(&sd->process_queue))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_lock();
 			__netif_receive_skb(skb);
 			rcu_read_unlock();
 			input_queue_head_incr(sd);
 			if (++work >= quota)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return work;
+}
 
 		}
 
 		local_irq_disable();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rps_lock(sd);
 		if (skb_queue_empty(&sd->input_pkt_queue)) {
 			/*
@@ -5178,10 +5533,12 @@ static int process_backlog(struct napi_struct *napi, int quota)
 			skb_queue_splice_tail_init(&sd->input_pkt_queue,
 						   &sd->process_queue);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rps_unlock(sd);
 		local_irq_enable();
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return work;
 }
 
@@ -5216,9 +5573,12 @@ bool napi_schedule_prep(struct napi_struct *n)
 	unsigned long val, new;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		val = READ_ONCE(n->state);
 		if (unlikely(val & NAPIF_STATE_DISABLE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
 		new = val | NAPIF_STATE_SCHED;
 
 		/* Sets STATE_MISSED bit if STATE_SCHED was already set
@@ -5243,6 +5603,7 @@ EXPORT_SYMBOL(napi_schedule_prep);
  */
 void __napi_schedule_irqoff(struct napi_struct *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	____napi_schedule(this_cpu_ptr(&softnet_data), n);
 }
 EXPORT_SYMBOL(__napi_schedule_irqoff);
@@ -5265,22 +5626,30 @@ bool napi_complete_done(struct napi_struct *n, int work_done)
 		unsigned long timeout = 0;
 
 		if (work_done)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			timeout = n->dev->gro_flush_timeout;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (timeout)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hrtimer_start(&n->timer, ns_to_ktime(timeout),
 				      HRTIMER_MODE_REL_PINNED);
+}
 		else
 			napi_gro_flush(n, false);
 	}
 	if (unlikely(!list_empty(&n->poll_list))) {
 		/* If n->poll_list is not empty, we need to mask irqs */
 		local_irq_save(flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del_init(&n->poll_list);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_irq_restore(flags);
 	}
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		val = READ_ONCE(n->state);
 
 		WARN_ON_ONCE(!(val & NAPIF_STATE_SCHED));
@@ -5300,6 +5669,7 @@ bool napi_complete_done(struct napi_struct *n, int work_done)
 		return false;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 EXPORT_SYMBOL(napi_complete_done);
@@ -5312,8 +5682,11 @@ static struct napi_struct *napi_by_id(unsigned int napi_id)
 
 	hlist_for_each_entry_rcu(napi, &napi_hash[hash], napi_hash_node)
 		if (napi->napi_id == napi_id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return napi;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -5346,7 +5719,9 @@ static void busy_poll_stop(struct napi_struct *napi, void *have_poll_lock)
 	trace_napi_poll(napi, rc, BUSY_POLL_BUDGET);
 	netpoll_poll_unlock(have_poll_lock);
 	if (rc == BUSY_POLL_BUDGET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__napi_schedule(napi);
+}
 	local_bh_enable();
 }
 
@@ -5354,6 +5729,7 @@ void napi_busy_loop(unsigned int napi_id,
 		    bool (*loop_end)(void *, unsigned long),
 		    void *loop_end_arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long start_time = loop_end ? busy_loop_current_time() : 0;
 	int (*napi_poll)(struct napi_struct *napi, int budget);
 	void *have_poll_lock = NULL;
@@ -5428,12 +5804,15 @@ static void napi_hash_add(struct napi_struct *napi)
 	    test_and_set_bit(NAPI_STATE_HASHED, &napi->state))
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&napi_hash_lock);
 
 	/* 0..NR_CPUS range is reserved for sender_cpu use */
 	do {
 		if (unlikely(++napi_gen_id < MIN_NAPI_ID))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			napi_gen_id = MIN_NAPI_ID;
+}
 	} while (napi_by_id(napi_gen_id));
 	napi->napi_id = napi_gen_id;
 
@@ -5453,9 +5832,11 @@ bool napi_hash_del(struct napi_struct *napi)
 	spin_lock(&napi_hash_lock);
 
 	if (test_and_clear_bit(NAPI_STATE_HASHED, &napi->state)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_sync_needed = true;
 		hlist_del_rcu(&napi->napi_hash_node);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&napi_hash_lock);
 	return rcu_sync_needed;
 }
@@ -5465,6 +5846,7 @@ static enum hrtimer_restart napi_watchdog(struct hrtimer *timer)
 {
 	struct napi_struct *napi;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	napi = container_of(timer, struct napi_struct, timer);
 
 	/* Note : we use a relaxed variant of napi_schedule_prep() not setting
@@ -5488,8 +5870,10 @@ void netif_napi_add(struct net_device *dev, struct napi_struct *napi,
 	napi->skb = NULL;
 	napi->poll = poll;
 	if (weight > NAPI_POLL_WEIGHT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err_once("netif_napi_add() called with weight %d on device %s\n",
 			    weight, dev->name);
+}
 	napi->weight = weight;
 	list_add(&napi->dev_list, &dev->napi_list);
 	napi->dev = dev;
@@ -5503,6 +5887,7 @@ EXPORT_SYMBOL(netif_napi_add);
 
 void napi_disable(struct napi_struct *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 	set_bit(NAPI_STATE_DISABLE, &n->state);
 
@@ -5522,7 +5907,9 @@ void netif_napi_del(struct napi_struct *napi)
 {
 	might_sleep();
 	if (napi_hash_del(napi))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		synchronize_net();
+}
 	list_del_init(&napi->dev_list);
 	napi_free_frags(napi);
 
@@ -5566,10 +5953,12 @@ static int napi_poll(struct napi_struct *n, struct list_head *repoll)
 	 * move the instance around on the list at-will.
 	 */
 	if (unlikely(napi_disable_pending(n))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		napi_complete(n);
 		goto out_unlock;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (n->gro_list) {
 		/* flush too old packets
 		 * If HZ < 1000, flush all packets.
@@ -5581,11 +5970,13 @@ static int napi_poll(struct napi_struct *n, struct list_head *repoll)
 	 * prior to exhausting their budget.
 	 */
 	if (unlikely(!list_empty(&n->poll_list))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn_once("%s: Budget exhausted after napi rescheduled\n",
 			     n->dev ? n->dev->name : "backlog");
 		goto out_unlock;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_add_tail(&n->poll_list, repoll);
 
 out_unlock:
@@ -5636,7 +6027,9 @@ static __latent_entropy void net_rx_action(struct softirq_action *h)
 	list_splice_tail(&repoll, &list);
 	list_splice(&list, &sd->poll_list);
 	if (!list_empty(&sd->poll_list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__raise_softirq_irqoff(NET_RX_SOFTIRQ);
+}
 
 	net_rps_action_and_irq_enable(sd);
 out:
@@ -5664,6 +6057,7 @@ static struct netdev_adjacent *__netdev_find_adj(struct net_device *adj_dev,
 {
 	struct netdev_adjacent *adj;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(adj, adj_list, list) {
 		if (adj->dev == adj_dev)
 			return adj;
@@ -5690,6 +6084,7 @@ static int __netdev_has_upper_dev(struct net_device *upper_dev, void *data)
 bool netdev_has_upper_dev(struct net_device *dev,
 			  struct net_device *upper_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	return netdev_walk_all_upper_dev_rcu(dev, __netdev_has_upper_dev,
@@ -5710,6 +6105,7 @@ EXPORT_SYMBOL(netdev_has_upper_dev);
 bool netdev_has_upper_dev_all_rcu(struct net_device *dev,
 				  struct net_device *upper_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !!netdev_walk_all_upper_dev_rcu(dev, __netdev_has_upper_dev,
 					       upper_dev);
 }
@@ -5744,12 +6140,18 @@ struct net_device *netdev_master_upper_dev_get(struct net_device *dev)
 	ASSERT_RTNL();
 
 	if (list_empty(&dev->adj_list.upper))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	upper = list_first_entry(&dev->adj_list.upper,
 				 struct netdev_adjacent, list);
 	if (likely(upper->master))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return upper->dev;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(netdev_master_upper_dev_get);
@@ -5772,6 +6174,7 @@ void *netdev_adjacent_get_private(struct list_head *adj_list)
 {
 	struct netdev_adjacent *adj;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	adj = list_entry(adj_list, struct netdev_adjacent, list);
 
 	return adj->private;
@@ -5791,13 +6194,17 @@ struct net_device *netdev_upper_get_next_dev_rcu(struct net_device *dev,
 {
 	struct netdev_adjacent *upper;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(!rcu_read_lock_held() && !lockdep_rtnl_is_held());
 
 	upper = list_entry_rcu((*iter)->next, struct netdev_adjacent, list);
 
 	if (&upper->list == &dev->adj_list.upper)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*iter = &upper->list;
 
 	return upper->dev;
@@ -5809,6 +6216,7 @@ static struct net_device *netdev_next_upper_dev_rcu(struct net_device *dev,
 {
 	struct netdev_adjacent *upper;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(!rcu_read_lock_held() && !lockdep_rtnl_is_held());
 
 	upper = list_entry_rcu((*iter)->next, struct netdev_adjacent, list);
@@ -5865,6 +6273,7 @@ void *netdev_lower_get_next_private(struct net_device *dev,
 {
 	struct netdev_adjacent *lower;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lower = list_entry(*iter, struct netdev_adjacent, list);
 
 	if (&lower->list == &dev->adj_list.lower)
@@ -5891,6 +6300,7 @@ void *netdev_lower_get_next_private_rcu(struct net_device *dev,
 {
 	struct netdev_adjacent *lower;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(!rcu_read_lock_held());
 
 	lower = list_entry_rcu((*iter)->next, struct netdev_adjacent, list);
@@ -5922,8 +6332,11 @@ void *netdev_lower_get_next(struct net_device *dev, struct list_head **iter)
 	lower = list_entry(*iter, struct netdev_adjacent, list);
 
 	if (&lower->list == &dev->adj_list.lower)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*iter = lower->list.next;
 
 	return lower->dev;
@@ -5935,6 +6348,7 @@ static struct net_device *netdev_next_lower_dev(struct net_device *dev,
 {
 	struct netdev_adjacent *lower;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lower = list_entry((*iter)->next, struct netdev_adjacent, list);
 
 	if (&lower->list == &dev->adj_list.lower)
@@ -5978,6 +6392,7 @@ static struct net_device *netdev_next_lower_dev_rcu(struct net_device *dev,
 {
 	struct netdev_adjacent *lower;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lower = list_entry_rcu((*iter)->next, struct netdev_adjacent, list);
 	if (&lower->list == &dev->adj_list.lower)
 		return NULL;
@@ -6028,6 +6443,7 @@ void *netdev_lower_get_first_private_rcu(struct net_device *dev)
 {
 	struct netdev_adjacent *lower;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lower = list_first_or_null_rcu(&dev->adj_list.lower,
 			struct netdev_adjacent, list);
 	if (lower)
@@ -6050,7 +6466,10 @@ struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *dev)
 	upper = list_first_or_null_rcu(&dev->adj_list.upper,
 				       struct netdev_adjacent, list);
 	if (upper && likely(upper->master))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return upper->dev;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(netdev_master_upper_dev_get_rcu);
@@ -6061,6 +6480,7 @@ static int netdev_adjacent_sysfs_add(struct net_device *dev,
 {
 	char linkname[IFNAMSIZ+7];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sprintf(linkname, dev_list == &dev->adj_list.upper ?
 		"upper_%s" : "lower_%s", adj_dev->name);
 	return sysfs_create_link(&(dev->dev.kobj), &(adj_dev->dev.kobj),
@@ -6072,6 +6492,7 @@ static void netdev_adjacent_sysfs_del(struct net_device *dev,
 {
 	char linkname[IFNAMSIZ+7];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sprintf(linkname, dev_list == &dev->adj_list.upper ?
 		"upper_%s" : "lower_%s", name);
 	sysfs_remove_link(&(dev->dev.kobj), linkname);
@@ -6081,6 +6502,7 @@ static inline bool netdev_adjacent_is_neigh_list(struct net_device *dev,
 						 struct net_device *adj_dev,
 						 struct list_head *dev_list)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (dev_list == &dev->adj_list.upper ||
 		dev_list == &dev->adj_list.lower) &&
 		net_eq(dev_net(dev), dev_net(adj_dev));
@@ -6097,6 +6519,7 @@ static int __netdev_adjacent_dev_insert(struct net_device *dev,
 	adj = __netdev_find_adj(adj_dev, dev_list);
 
 	if (adj) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		adj->ref_nr += 1;
 		pr_debug("Insert adjacency: dev %s adj_dev %s adj->ref_nr %d\n",
 			 dev->name, adj_dev->name, adj->ref_nr);
@@ -6154,6 +6577,7 @@ static void __netdev_adjacent_dev_remove(struct net_device *dev,
 {
 	struct netdev_adjacent *adj;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("Remove adjacency: dev %s adj_dev %s ref_nr %d\n",
 		 dev->name, adj_dev->name, ref_nr);
 
@@ -6198,7 +6622,9 @@ static int __netdev_adjacent_dev_link_lists(struct net_device *dev,
 	ret = __netdev_adjacent_dev_insert(dev, upper_dev, up_list,
 					   private, master);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = __netdev_adjacent_dev_insert(upper_dev, dev, down_list,
 					   private, false);
@@ -6216,6 +6642,7 @@ static void __netdev_adjacent_dev_unlink_lists(struct net_device *dev,
 					       struct list_head *up_list,
 					       struct list_head *down_list)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__netdev_adjacent_dev_remove(dev, upper_dev, ref_nr, up_list);
 	__netdev_adjacent_dev_remove(upper_dev, dev, ref_nr, down_list);
 }
@@ -6224,6 +6651,7 @@ static int __netdev_adjacent_dev_link_neighbour(struct net_device *dev,
 						struct net_device *upper_dev,
 						void *private, bool master)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __netdev_adjacent_dev_link_lists(dev, upper_dev,
 						&dev->adj_list.upper,
 						&upper_dev->adj_list.lower,
@@ -6233,6 +6661,7 @@ static int __netdev_adjacent_dev_link_neighbour(struct net_device *dev,
 static void __netdev_adjacent_dev_unlink_neighbour(struct net_device *dev,
 						   struct net_device *upper_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__netdev_adjacent_dev_unlink_lists(dev, upper_dev, 1,
 					   &dev->adj_list.upper,
 					   &upper_dev->adj_list.lower);
@@ -6245,6 +6674,7 @@ static int __netdev_upper_dev_link(struct net_device *dev,
 	struct netdev_notifier_changeupper_info changeupper_info;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	if (dev == upper_dev)
@@ -6303,6 +6733,7 @@ static int __netdev_upper_dev_link(struct net_device *dev,
 int netdev_upper_dev_link(struct net_device *dev,
 			  struct net_device *upper_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __netdev_upper_dev_link(dev, upper_dev, false, NULL, NULL);
 }
 EXPORT_SYMBOL(netdev_upper_dev_link);
@@ -6324,6 +6755,7 @@ int netdev_master_upper_dev_link(struct net_device *dev,
 				 struct net_device *upper_dev,
 				 void *upper_priv, void *upper_info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __netdev_upper_dev_link(dev, upper_dev, true,
 				       upper_priv, upper_info);
 }
@@ -6342,6 +6774,7 @@ void netdev_upper_dev_unlink(struct net_device *dev,
 {
 	struct netdev_notifier_changeupper_info changeupper_info;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	changeupper_info.upper_dev = upper_dev;
@@ -6371,6 +6804,7 @@ void netdev_bonding_info_change(struct net_device *dev,
 {
 	struct netdev_notifier_bonding_info	info;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&info.bonding_info, bonding_info,
 	       sizeof(struct netdev_bonding_info));
 	call_netdevice_notifiers_info(NETDEV_BONDING_INFO, dev,
@@ -6384,6 +6818,7 @@ static void netdev_adjacent_add_links(struct net_device *dev)
 
 	struct net *net = dev_net(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(iter, &dev->adj_list.upper, list) {
 		if (!net_eq(net, dev_net(iter->dev)))
 			continue;
@@ -6409,6 +6844,7 @@ static void netdev_adjacent_del_links(struct net_device *dev)
 
 	struct net *net = dev_net(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(iter, &dev->adj_list.upper, list) {
 		if (!net_eq(net, dev_net(iter->dev)))
 			continue;
@@ -6434,6 +6870,7 @@ void netdev_adjacent_rename_links(struct net_device *dev, char *oldname)
 
 	struct net *net = dev_net(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(iter, &dev->adj_list.upper, list) {
 		if (!net_eq(net, dev_net(iter->dev)))
 			continue;
@@ -6459,7 +6896,9 @@ void *netdev_lower_dev_get_private(struct net_device *dev,
 	struct netdev_adjacent *lower;
 
 	if (!lower_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	lower = __netdev_find_adj(lower_dev, &dev->adj_list.lower);
 	if (!lower)
 		return NULL;
@@ -6476,6 +6915,7 @@ int dev_get_nest_level(struct net_device *dev)
 	int max_nest = -1;
 	int nest;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	netdev_for_each_lower_dev(dev, lower, iter) {
@@ -6501,6 +6941,7 @@ void netdev_lower_state_changed(struct net_device *lower_dev,
 {
 	struct netdev_notifier_changelowerstate_info changelowerstate_info;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 	changelowerstate_info.lower_state_info = lower_state_info;
 	call_netdevice_notifiers_info(NETDEV_CHANGELOWERSTATE, lower_dev,
@@ -6513,8 +6954,10 @@ static void dev_change_rx_flags(struct net_device *dev, int flags)
 	const struct net_device_ops *ops = dev->netdev_ops;
 
 	if (ops->ndo_change_rx_flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ops->ndo_change_rx_flags(dev, flags);
 }
+}
 
 static int __dev_set_promiscuity(struct net_device *dev, int inc, bool notify)
 {
@@ -6522,6 +6965,7 @@ static int __dev_set_promiscuity(struct net_device *dev, int inc, bool notify)
 	kuid_t uid;
 	kgid_t gid;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	dev->flags |= IFF_PROMISC;
@@ -6582,7 +7026,9 @@ int dev_set_promiscuity(struct net_device *dev, int inc)
 
 	err = __dev_set_promiscuity(dev, inc, true);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	if (dev->flags != old_flags)
 		dev_set_rx_mode(dev);
 	return err;
@@ -6593,6 +7039,7 @@ static int __dev_set_allmulti(struct net_device *dev, int inc, bool notify)
 {
 	unsigned int old_flags = dev->flags, old_gflags = dev->gflags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	dev->flags |= IFF_ALLMULTI;
@@ -6636,6 +7083,7 @@ static int __dev_set_allmulti(struct net_device *dev, int inc, bool notify)
 
 int dev_set_allmulti(struct net_device *dev, int inc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __dev_set_allmulti(dev, inc, true);
 }
 EXPORT_SYMBOL(dev_set_allmulti);
@@ -6652,19 +7100,25 @@ void __dev_set_rx_mode(struct net_device *dev)
 
 	/* dev_open will call this function so the list will stay sane. */
 	if (!(dev->flags&IFF_UP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!netif_device_present(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!(dev->priv_flags & IFF_UNICAST_FLT)) {
 		/* Unicast addresses changes may only happen under the rtnl,
 		 * therefore calling __dev_set_promiscuity here is safe.
 		 */
 		if (!netdev_uc_empty(dev) && !dev->uc_promisc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__dev_set_promiscuity(dev, 1, false);
 			dev->uc_promisc = true;
 		} else if (netdev_uc_empty(dev) && dev->uc_promisc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__dev_set_promiscuity(dev, -1, false);
 			dev->uc_promisc = false;
 		}
@@ -6676,6 +7130,7 @@ void __dev_set_rx_mode(struct net_device *dev)
 
 void dev_set_rx_mode(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	netif_addr_lock_bh(dev);
 	__dev_set_rx_mode(dev);
 	netif_addr_unlock_bh(dev);
@@ -6705,7 +7160,9 @@ unsigned int dev_get_flags(const struct net_device *dev)
 		if (netif_carrier_ok(dev))
 			flags |= IFF_LOWER_UP;
 		if (netif_dormant(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flags |= IFF_DORMANT;
+}
 	}
 
 	return flags;
@@ -6734,7 +7191,9 @@ int __dev_change_flags(struct net_device *dev, unsigned int flags)
 	 */
 
 	if ((old_flags ^ flags) & IFF_MULTICAST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_change_rx_flags(dev, IFF_MULTICAST);
+}
 
 	dev_set_rx_mode(dev);
 
@@ -6747,20 +7206,27 @@ int __dev_change_flags(struct net_device *dev, unsigned int flags)
 	ret = 0;
 	if ((old_flags ^ flags) & IFF_UP) {
 		if (old_flags & IFF_UP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__dev_close(dev);
+}
 		else
 			ret = __dev_open(dev);
 	}
 
 	if ((flags ^ dev->gflags) & IFF_PROMISC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int inc = (flags & IFF_PROMISC) ? 1 : -1;
 		unsigned int old_flags = dev->flags;
 
 		dev->gflags ^= IFF_PROMISC;
 
 		if (__dev_set_promiscuity(dev, inc, false) >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (dev->flags != old_flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev_set_rx_mode(dev);
+}
+}
 	}
 
 	/* NOTE: order of synchronization of IFF_PROMISC and IFF_ALLMULTI
@@ -6768,6 +7234,7 @@ int __dev_change_flags(struct net_device *dev, unsigned int flags)
 	 * IFF_ALLMULTI is requested not asking us and not reporting.
 	 */
 	if ((flags ^ dev->gflags) & IFF_ALLMULTI) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int inc = (flags & IFF_ALLMULTI) ? 1 : -1;
 
 		dev->gflags ^= IFF_ALLMULTI;
@@ -6817,7 +7284,9 @@ int dev_change_flags(struct net_device *dev, unsigned int flags)
 
 	ret = __dev_change_flags(dev, flags);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	changes = (old_flags ^ dev->flags) | (old_gflags ^ dev->gflags);
 	__dev_notify_flags(dev, old_flags, changes);
@@ -6830,7 +7299,9 @@ int __dev_set_mtu(struct net_device *dev, int new_mtu)
 	const struct net_device_ops *ops = dev->netdev_ops;
 
 	if (ops->ndo_change_mtu)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ops->ndo_change_mtu(dev, new_mtu);
+}
 
 	dev->mtu = new_mtu;
 	return 0;
@@ -6849,7 +7320,9 @@ int dev_set_mtu(struct net_device *dev, int new_mtu)
 	int err, orig_mtu;
 
 	if (new_mtu == dev->mtu)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* MTU must be positive, and in range */
 	if (new_mtu < 0 || new_mtu < dev->min_mtu) {
@@ -6897,6 +7370,7 @@ EXPORT_SYMBOL(dev_set_mtu);
  */
 void dev_set_group(struct net_device *dev, int new_group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->group = new_group;
 }
 EXPORT_SYMBOL(dev_set_group);
@@ -6914,7 +7388,9 @@ int dev_set_mac_address(struct net_device *dev, struct sockaddr *sa)
 	int err;
 
 	if (!ops->ndo_set_mac_address)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 	if (sa->sa_family != dev->type)
 		return -EINVAL;
 	if (!netif_device_present(dev))
@@ -6941,7 +7417,9 @@ int dev_change_carrier(struct net_device *dev, bool new_carrier)
 	const struct net_device_ops *ops = dev->netdev_ops;
 
 	if (!ops->ndo_change_carrier)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 	if (!netif_device_present(dev))
 		return -ENODEV;
 	return ops->ndo_change_carrier(dev, new_carrier);
@@ -6961,7 +7439,10 @@ int dev_get_phys_port_id(struct net_device *dev,
 	const struct net_device_ops *ops = dev->netdev_ops;
 
 	if (!ops->ndo_get_phys_port_id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ops->ndo_get_phys_port_id(dev, ppid);
 }
 EXPORT_SYMBOL(dev_get_phys_port_id);
@@ -6980,7 +7461,10 @@ int dev_get_phys_port_name(struct net_device *dev,
 	const struct net_device_ops *ops = dev->netdev_ops;
 
 	if (!ops->ndo_get_phys_port_name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ops->ndo_get_phys_port_name(dev, name, len);
 }
 EXPORT_SYMBOL(dev_get_phys_port_name);
@@ -6998,7 +7482,9 @@ int dev_change_proto_down(struct net_device *dev, bool proto_down)
 	const struct net_device_ops *ops = dev->netdev_ops;
 
 	if (!ops->ndo_change_proto_down)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 	if (!netif_device_present(dev))
 		return -ENODEV;
 	return ops->ndo_change_proto_down(dev, proto_down);
@@ -7028,7 +7514,9 @@ static int dev_xdp_install(struct net_device *dev, xdp_op_t xdp_op,
 
 	memset(&xdp, 0, sizeof(xdp));
 	if (flags & XDP_FLAGS_HW_MODE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xdp.command = XDP_SETUP_PROG_HW;
+}
 	else
 		xdp.command = XDP_SETUP_PROG;
 	xdp.extack = extack;
@@ -7055,6 +7543,7 @@ int dev_change_xdp_fd(struct net_device *dev, struct netlink_ext_ack *extack,
 	xdp_op_t xdp_op, xdp_chk;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	xdp_op = xdp_chk = ops->ndo_xdp;
@@ -7098,7 +7587,9 @@ static int dev_new_index(struct net *net)
 
 	for (;;) {
 		if (++ifindex <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ifindex = 1;
+}
 		if (!__dev_get_by_index(net, ifindex))
 			return net->ifindex = ifindex;
 	}
@@ -7128,9 +7619,11 @@ static void rollback_registered_many(struct list_head *head)
 		 * devices and proceed with the remaining.
 		 */
 		if (dev->reg_state == NETREG_UNINITIALIZED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("unregister_netdevice: device %s/%p never was registered\n",
 				 dev->name, dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			WARN_ON(1);
 			list_del(&dev->unreg_list);
 			continue;
@@ -7217,6 +7710,7 @@ static netdev_features_t netdev_sync_upper_features(struct net_device *lower,
 	netdev_features_t feature;
 	int feature_bit;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev_feature(&upper_disables, feature_bit) {
 		feature = __NETIF_F_BIT(feature_bit);
 		if (!(upper->wanted_features & feature)
@@ -7237,6 +7731,7 @@ static void netdev_sync_lower_features(struct net_device *upper,
 	netdev_features_t feature;
 	int feature_bit;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev_feature(&upper_disables, feature_bit) {
 		feature = __NETIF_F_BIT(feature_bit);
 		if (!(features & feature) && (lower->features & feature)) {
@@ -7258,18 +7753,21 @@ static netdev_features_t netdev_fix_features(struct net_device *dev,
 	/* Fix illegal checksum combinations */
 	if ((features & NETIF_F_HW_CSUM) &&
 	    (features & (NETIF_F_IP_CSUM|NETIF_F_IPV6_CSUM))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_warn(dev, "mixed HW and IP checksum settings.\n");
 		features &= ~(NETIF_F_IP_CSUM|NETIF_F_IPV6_CSUM);
 	}
 
 	/* TSO requires that SG is present as well. */
 	if ((features & NETIF_F_ALL_TSO) && !(features & NETIF_F_SG)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_dbg(dev, "Dropping TSO features since no SG feature.\n");
 		features &= ~NETIF_F_ALL_TSO;
 	}
 
 	if ((features & NETIF_F_TSO) && !(features & NETIF_F_HW_CSUM) &&
 					!(features & NETIF_F_IP_CSUM)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_dbg(dev, "Dropping TSO features since no CSUM feature.\n");
 		features &= ~NETIF_F_TSO;
 		features &= ~NETIF_F_TSO_ECN;
@@ -7277,20 +7775,26 @@ static netdev_features_t netdev_fix_features(struct net_device *dev,
 
 	if ((features & NETIF_F_TSO6) && !(features & NETIF_F_HW_CSUM) &&
 					 !(features & NETIF_F_IPV6_CSUM)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_dbg(dev, "Dropping TSO6 features since no CSUM feature.\n");
 		features &= ~NETIF_F_TSO6;
 	}
 
 	/* TSO with IPv4 ID mangling requires IPv4 TSO be enabled */
 	if ((features & NETIF_F_TSO_MANGLEID) && !(features & NETIF_F_TSO))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		features &= ~NETIF_F_TSO_MANGLEID;
+}
 
 	/* TSO ECN requires that TSO is present as well. */
 	if ((features & NETIF_F_ALL_TSO) == NETIF_F_TSO_ECN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		features &= ~NETIF_F_TSO_ECN;
+}
 
 	/* Software GSO depends on SG. */
 	if ((features & NETIF_F_GSO) && !(features & NETIF_F_SG)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_dbg(dev, "Dropping NETIF_F_GSO since no SG feature.\n");
 		features &= ~NETIF_F_GSO;
 	}
@@ -7298,6 +7802,7 @@ static netdev_features_t netdev_fix_features(struct net_device *dev,
 	/* GSO partial features require GSO partial be set */
 	if ((features & dev->gso_partial_features) &&
 	    !(features & NETIF_F_GSO_PARTIAL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_dbg(dev,
 			   "Dropping partially supported GSO features since no GSO partial.\n");
 		features &= ~dev->gso_partial_features;
@@ -7318,7 +7823,9 @@ int __netdev_update_features(struct net_device *dev)
 	features = netdev_get_wanted_features(dev);
 
 	if (dev->netdev_ops->ndo_fix_features)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		features = dev->netdev_ops->ndo_fix_features(dev, features);
+}
 
 	/* driver might be less strict about feature dependencies */
 	features = netdev_fix_features(dev, features);
@@ -7330,15 +7837,19 @@ int __netdev_update_features(struct net_device *dev)
 	if (dev->features == features)
 		goto sync_lower;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	netdev_dbg(dev, "Features changed: %pNF -> %pNF\n",
 		&dev->features, &features);
 
 	if (dev->netdev_ops->ndo_set_features)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = dev->netdev_ops->ndo_set_features(dev, features);
+}
 	else
 		err = 0;
 
 	if (unlikely(err < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_err(dev,
 			"set_features() failed (%d); wanted %pNF, left %pNF\n",
 			err, &features, &dev->features);
@@ -7367,9 +7878,11 @@ int __netdev_update_features(struct net_device *dev)
 			 * but *after* calling udp_tunnel_drop_rx_info.
 			 */
 			if (features & NETIF_F_RX_UDP_TUNNEL_PORT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev->features = features;
 				udp_tunnel_get_rx_info(dev);
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				udp_tunnel_drop_rx_info(dev);
 			}
 		}
@@ -7390,6 +7903,7 @@ int __netdev_update_features(struct net_device *dev)
  */
 void netdev_update_features(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (__netdev_update_features(dev))
 		netdev_features_change(dev);
 }
@@ -7407,6 +7921,7 @@ EXPORT_SYMBOL(netdev_update_features);
  */
 void netdev_change_features(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__netdev_update_features(dev);
 	netdev_features_change(dev);
 }
@@ -7424,6 +7939,7 @@ EXPORT_SYMBOL(netdev_change_features);
 void netif_stacked_transfer_operstate(const struct net_device *rootdev,
 					struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rootdev->operstate == IF_OPER_DORMANT)
 		netif_dormant_on(dev);
 	else
@@ -7445,14 +7961,18 @@ static int netif_alloc_rx_queues(struct net_device *dev)
 
 	BUG_ON(count < 1);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rx = kvzalloc(sz, GFP_KERNEL | __GFP_RETRY_MAYFAIL);
 	if (!rx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	dev->_rx = rx;
 
 	for (i = 0; i < count; i++)
 		rx[i].dev = dev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 #endif
@@ -7462,6 +7982,7 @@ static void netdev_init_one_queue(struct net_device *dev,
 {
 	/* Initialize queue lock */
 	spin_lock_init(&queue->_xmit_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	netdev_set_xmit_lockdep_class(&queue->_xmit_lock, dev->type);
 	queue->xmit_lock_owner = -1;
 	netdev_queue_numa_node_write(queue, NUMA_NO_NODE);
@@ -7483,11 +8004,16 @@ static int netif_alloc_netdev_queues(struct net_device *dev)
 	size_t sz = count * sizeof(*tx);
 
 	if (count < 1 || count > 0xffff)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tx = kvzalloc(sz, GFP_KERNEL | __GFP_RETRY_MAYFAIL);
 	if (!tx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	dev->_tx = tx;
 
@@ -7501,6 +8027,7 @@ void netif_tx_stop_all_queues(struct net_device *dev)
 {
 	unsigned int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < dev->num_tx_queues; i++) {
 		struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
 
@@ -7541,6 +8068,7 @@ int register_netdevice(struct net_device *dev)
 	BUG_ON(!net);
 
 	spin_lock_init(&dev->addr_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	netdev_set_addr_lockdep_class(dev);
 
 	ret = dev_get_valid_name(net, dev, dev->name);
@@ -7551,8 +8079,11 @@ int register_netdevice(struct net_device *dev)
 	if (dev->netdev_ops->ndo_init) {
 		ret = dev->netdev_ops->ndo_init(dev);
 		if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ret > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EIO;
+}
 			goto out;
 		}
 	}
@@ -7561,14 +8092,17 @@ int register_netdevice(struct net_device *dev)
 	     NETIF_F_HW_VLAN_CTAG_FILTER) &&
 	    (!dev->netdev_ops->ndo_vlan_rx_add_vid ||
 	     !dev->netdev_ops->ndo_vlan_rx_kill_vid)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_WARN(dev, "Buggy VLAN acceleration in driver!\n");
 		ret = -EINVAL;
 		goto err_uninit;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -EBUSY;
 	if (!dev->ifindex)
 		dev->ifindex = dev_new_index(net);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (__dev_get_by_index(net, dev->ifindex))
 		goto err_uninit;
 
@@ -7579,6 +8113,7 @@ int register_netdevice(struct net_device *dev)
 	dev->features |= NETIF_F_SOFT_FEATURES;
 
 	if (dev->netdev_ops->ndo_udp_tunnel_add) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->features |= NETIF_F_RX_UDP_TUNNEL_PORT;
 		dev->hw_features |= NETIF_F_RX_UDP_TUNNEL_PORT;
 	}
@@ -7596,11 +8131,17 @@ int register_netdevice(struct net_device *dev)
 	if (dev->hw_features & NETIF_F_TSO)
 		dev->hw_features |= NETIF_F_TSO_MANGLEID;
 	if (dev->vlan_features & NETIF_F_TSO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->vlan_features |= NETIF_F_TSO_MANGLEID;
+}
 	if (dev->mpls_features & NETIF_F_TSO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->mpls_features |= NETIF_F_TSO_MANGLEID;
+}
 	if (dev->hw_enc_features & NETIF_F_TSO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->hw_enc_features |= NETIF_F_TSO_MANGLEID;
+}
 
 	/* Make NETIF_F_HIGHDMA inheritable to VLAN devices.
 	 */
@@ -7651,6 +8192,7 @@ int register_netdevice(struct net_device *dev)
 	ret = call_netdevice_notifiers(NETDEV_REGISTER, dev);
 	ret = notifier_to_errno(ret);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rollback_registered(dev);
 		dev->reg_state = NETREG_UNREGISTERED;
 	}
@@ -7667,9 +8209,14 @@ int register_netdevice(struct net_device *dev)
 
 err_uninit:
 	if (dev->netdev_ops->ndo_uninit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->netdev_ops->ndo_uninit(dev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->priv_destructor)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->priv_destructor(dev);
+}
 	goto out;
 }
 EXPORT_SYMBOL(register_netdevice);
@@ -7772,7 +8319,9 @@ static void netdev_wait_allrefs(struct net_device *dev)
 	refcnt = netdev_refcnt_read(dev);
 
 	while (refcnt != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (time_after(jiffies, rebroadcast_time + 1 * HZ)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rtnl_lock();
 
 			/* Rebroadcast unregister notification */
@@ -7783,6 +8332,7 @@ static void netdev_wait_allrefs(struct net_device *dev)
 			rtnl_lock();
 
 			call_netdevice_notifiers(NETDEV_UNREGISTER_FINAL, dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (test_bit(__LINK_STATE_LINKWATCH_PENDING,
 				     &dev->state)) {
 				/* We must not have linkwatch events
@@ -7794,16 +8344,20 @@ static void netdev_wait_allrefs(struct net_device *dev)
 				linkwatch_run_queue();
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__rtnl_unlock();
 
 			rebroadcast_time = jiffies;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msleep(250);
 
 		refcnt = netdev_refcnt_read(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (time_after(jiffies, warning_time + 10 * HZ)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_emerg("unregister_netdevice: waiting for %s to become free. Usage count = %d\n",
 				 dev->name, refcnt);
 			warning_time = jiffies;
@@ -7859,6 +8413,7 @@ void netdev_run_todo(void)
 		__rtnl_unlock();
 
 		if (unlikely(dev->reg_state != NETREG_UNREGISTERING)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("network todo '%s' but state %d\n",
 			       dev->name, dev->reg_state);
 			dump_stack();
@@ -7903,6 +8458,7 @@ void netdev_stats_to_stats64(struct rtnl_link_stats64 *stats64,
 {
 #if BITS_PER_LONG == 64
 	BUILD_BUG_ON(sizeof(*stats64) < sizeof(*netdev_stats));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(stats64, netdev_stats, sizeof(*netdev_stats));
 	/* zero out counters that only exist in rtnl_link_stats64 */
 	memset((char *)stats64 + sizeof(*netdev_stats), 0,
@@ -7938,11 +8494,13 @@ struct rtnl_link_stats64 *dev_get_stats(struct net_device *dev,
 	const struct net_device_ops *ops = dev->netdev_ops;
 
 	if (ops->ndo_get_stats64) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(storage, 0, sizeof(*storage));
 		ops->ndo_get_stats64(dev, storage);
 	} else if (ops->ndo_get_stats) {
 		netdev_stats_to_stats64(storage, ops->ndo_get_stats(dev));
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_stats_to_stats64(storage, &dev->stats);
 	}
 	storage->rx_dropped += (unsigned long)atomic_long_read(&dev->rx_dropped);
@@ -7954,6 +8512,7 @@ EXPORT_SYMBOL(dev_get_stats);
 
 struct netdev_queue *dev_ingress_queue_create(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netdev_queue *queue = dev_ingress_queue(dev);
 
 #ifdef CONFIG_NET_CLS_ACT
@@ -7975,6 +8534,7 @@ static const struct ethtool_ops default_ethtool_ops;
 void netdev_set_default_ethtool_ops(struct net_device *dev,
 				    const struct ethtool_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->ethtool_ops == &default_ethtool_ops)
 		dev->ethtool_ops = ops;
 }
@@ -8012,17 +8572,20 @@ struct net_device *alloc_netdev_mqs(int sizeof_priv, const char *name,
 	BUG_ON(strlen(name) >= sizeof(dev->name));
 
 	if (txqs < 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("alloc_netdev: Unable to allocate device with zero queues\n");
 		return NULL;
 	}
 
 #ifdef CONFIG_SYSFS
 	if (rxqs < 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("alloc_netdev: Unable to allocate device with zero RX queues\n");
 		return NULL;
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	alloc_size = sizeof(struct net_device);
 	if (sizeof_priv) {
 		/* ensure 32-byte alignment of private area */
@@ -8034,7 +8597,9 @@ struct net_device *alloc_netdev_mqs(int sizeof_priv, const char *name,
 
 	p = kvzalloc(alloc_size, GFP_KERNEL | __GFP_RETRY_MAYFAIL);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	dev = PTR_ALIGN(p, NETDEV_ALIGN);
 	dev->padded = (char *)dev - (char *)p;
@@ -8091,6 +8656,7 @@ struct net_device *alloc_netdev_mqs(int sizeof_priv, const char *name,
 	if (!dev->ethtool_ops)
 		dev->ethtool_ops = &default_ethtool_ops;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_hook_ingress_init(dev);
 
 	return dev;
@@ -8122,6 +8688,7 @@ void free_netdev(struct net_device *dev)
 	struct bpf_prog *prog;
 
 	might_sleep();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	netif_free_tx_queues(dev);
 #ifdef CONFIG_SYSFS
 	kvfree(dev->_rx);
@@ -8140,12 +8707,14 @@ void free_netdev(struct net_device *dev)
 
 	prog = rcu_dereference_protected(dev->xdp_prog, 1);
 	if (prog) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bpf_prog_put(prog);
 		static_key_slow_dec(&generic_xdp_needed);
 	}
 
 	/*  Compatibility with error handling in drivers */
 	if (dev->reg_state == NETREG_UNINITIALIZED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_freemem(dev);
 		return;
 	}
@@ -8194,6 +8763,7 @@ void unregister_netdevice_queue(struct net_device *dev, struct list_head *head)
 	if (head) {
 		list_move_tail(&dev->unreg_list, head);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rollback_registered(dev);
 		/* Finish processing unregister after unlock */
 		net_set_todo(dev);
@@ -8234,6 +8804,7 @@ EXPORT_SYMBOL(unregister_netdevice_many);
  */
 void unregister_netdev(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtnl_lock();
 	unregister_netdevice(dev);
 	rtnl_unlock();
@@ -8258,6 +8829,7 @@ int dev_change_net_namespace(struct net_device *dev, struct net *net, const char
 {
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	/* Don't allow namespace local devices to be moved. */
@@ -8365,6 +8937,7 @@ static int dev_cpu_dead(unsigned int oldcpu)
 	unsigned int cpu;
 	struct softnet_data *sd, *oldsd, *remsd = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_irq_disable();
 	cpu = smp_processor_id();
 	sd = &per_cpu(softnet_data, cpu);
@@ -8437,6 +9010,7 @@ static int dev_cpu_dead(unsigned int oldcpu)
 netdev_features_t netdev_increment_features(netdev_features_t all,
 	netdev_features_t one, netdev_features_t mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mask & NETIF_F_HW_CSUM)
 		mask |= NETIF_F_CSUM_MASK;
 	mask |= NETIF_F_VLAN_CHALLENGED;
@@ -8479,6 +9053,7 @@ static int __net_init netdev_init(struct net *net)
 	if (net->dev_index_head == NULL)
 		goto err_idx;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_idx:
@@ -8501,7 +9076,9 @@ const char *netdev_drivername(const struct net_device *dev)
 
 	parent = dev->dev.parent;
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return empty;
+}
 
 	driver = parent->driver;
 	if (driver && driver->name)
@@ -8512,6 +9089,7 @@ const char *netdev_drivername(const struct net_device *dev)
 static void __netdev_printk(const char *level, const struct net_device *dev,
 			    struct va_format *vaf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev && dev->dev.parent) {
 		dev_printk_emit(level[1] - '0',
 				dev->dev.parent,
@@ -8605,8 +9183,10 @@ static void __net_exit default_device_exit(struct net *net)
 		snprintf(fb_name, IFNAMSIZ, "dev%d", dev->ifindex);
 		err = dev_change_net_namespace(dev, &init_net, fb_name);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_emerg("%s: failed to move %s to init_net: %d\n",
 				 __func__, dev->name, err);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BUG();
 		}
 	}
@@ -8624,16 +9204,19 @@ static void __net_exit rtnl_lock_unregistering(struct list_head *net_list)
 
 	add_wait_queue(&netdev_unregistering_wq, &wait);
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unregistering = false;
 		rtnl_lock();
 		list_for_each_entry(net, net_list, exit_list) {
 			if (net->dev_unreg_count > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				unregistering = true;
 				break;
 			}
 		}
 		if (!unregistering)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__rtnl_unlock();
 
 		wait_woken(&wait, TASK_UNINTERRUPTIBLE, MAX_SCHEDULE_TIMEOUT);
@@ -8667,7 +9250,9 @@ static void __net_exit default_device_exit_batch(struct list_head *net_list)
 	list_for_each_entry(net, net_list, exit_list) {
 		for_each_netdev_reverse(net, dev) {
 			if (dev->rtnl_link_ops && dev->rtnl_link_ops->dellink)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev->rtnl_link_ops->dellink(dev, &dev_kill_list);
+}
 			else
 				unregister_netdevice_queue(dev, &dev_kill_list);
 		}
@@ -8704,10 +9289,12 @@ static int __init net_dev_init(void)
 	if (netdev_kobject_init())
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_LIST_HEAD(&ptype_all);
 	for (i = 0; i < PTYPE_HASH_SIZE; i++)
 		INIT_LIST_HEAD(&ptype_base[i]);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_LIST_HEAD(&offload_base);
 
 	if (register_pernet_subsys(&netdev_net_ops))
diff --git a/net/core/dev_addr_lists.c b/net/core/dev_addr_lists.c
index c0548d2..8062ce6 100644
--- a/net/core/dev_addr_lists.c
+++ b/net/core/dev_addr_lists.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/core/dev_addr_lists.c - Functions for handling net device lists
  * Copyright (c) 2010 Jiri Pirko <jpirko@redhat.com>
@@ -30,10 +32,15 @@ static int __hw_addr_create_ex(struct netdev_hw_addr_list *list,
 
 	alloc_size = sizeof(*ha);
 	if (alloc_size < L1_CACHE_BYTES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alloc_size = L1_CACHE_BYTES;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ha = kmalloc(alloc_size, GFP_ATOMIC);
 	if (!ha)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	memcpy(ha->addr, addr, addr_len);
 	ha->type = addr_type;
 	ha->refcount = 1;
@@ -54,24 +61,34 @@ static int __hw_addr_add_ex(struct netdev_hw_addr_list *list,
 	struct netdev_hw_addr *ha;
 
 	if (addr_len > MAX_ADDR_LEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	list_for_each_entry(ha, &list->list, list) {
 		if (!memcmp(ha->addr, addr, addr_len) &&
 		    ha->type == addr_type) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (global) {
 				/* check if addr is already used as global */
 				if (ha->global_use)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return 0;
+}
 				else
 					ha->global_use = true;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sync) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (ha->synced && sync_count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -EEXIST;
+}
 				else
 					ha->synced++;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ha->refcount++;
 			return 0;
 		}
@@ -93,6 +110,7 @@ static int __hw_addr_del_entry(struct netdev_hw_addr_list *list,
 			       struct netdev_hw_addr *ha, bool global,
 			       bool sync)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (global && !ha->global_use)
 		return -ENOENT;
 
@@ -119,6 +137,7 @@ static int __hw_addr_del_ex(struct netdev_hw_addr_list *list,
 {
 	struct netdev_hw_addr *ha;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(ha, &list->list, list) {
 		if (!memcmp(ha->addr, addr, addr_len) &&
 		    (ha->type == addr_type || !addr_type))
@@ -131,6 +150,7 @@ static int __hw_addr_del(struct netdev_hw_addr_list *list,
 			 const unsigned char *addr, int addr_len,
 			 unsigned char addr_type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __hw_addr_del_ex(list, addr, addr_len, addr_type, false, false);
 }
 
@@ -142,6 +162,7 @@ static int __hw_addr_sync_one(struct netdev_hw_addr_list *to_list,
 
 	err = __hw_addr_add_ex(to_list, ha->addr, addr_len, ha->type,
 			       false, true, ha->sync_cnt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (err && err != -EEXIST)
 		return err;
 
@@ -163,7 +184,9 @@ static void __hw_addr_unsync_one(struct netdev_hw_addr_list *to_list,
 	err = __hw_addr_del_ex(to_list, ha->addr, addr_len, ha->type,
 			       false, true);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	ha->sync_cnt--;
 	/* address on from list is not marked synced */
 	__hw_addr_del_entry(from_list, ha, false, false);
@@ -176,6 +199,7 @@ static int __hw_addr_sync_multiple(struct netdev_hw_addr_list *to_list,
 	int err = 0;
 	struct netdev_hw_addr *ha, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(ha, tmp, &from_list->list, list) {
 		if (ha->sync_cnt == ha->refcount) {
 			__hw_addr_unsync_one(to_list, from_list, ha, addr_len);
@@ -200,6 +224,7 @@ int __hw_addr_sync(struct netdev_hw_addr_list *to_list,
 	int err = 0;
 	struct netdev_hw_addr *ha, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(ha, tmp, &from_list->list, list) {
 		if (!ha->sync_cnt) {
 			err = __hw_addr_sync_one(to_list, ha, addr_len);
@@ -218,6 +243,7 @@ void __hw_addr_unsync(struct netdev_hw_addr_list *to_list,
 {
 	struct netdev_hw_addr *ha, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(ha, tmp, &from_list->list, list) {
 		if (ha->sync_cnt)
 			__hw_addr_unsync_one(to_list, from_list, ha, addr_len);
@@ -296,6 +322,7 @@ void __hw_addr_unsync_dev(struct netdev_hw_addr_list *list,
 {
 	struct netdev_hw_addr *ha, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(ha, tmp, &list->list, list) {
 		if (!ha->sync_cnt)
 			continue;
@@ -399,6 +426,7 @@ int dev_addr_add(struct net_device *dev, const unsigned char *addr,
 {
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	err = __hw_addr_add(&dev->dev_addrs, addr, dev->addr_len, addr_type);
@@ -425,6 +453,7 @@ int dev_addr_del(struct net_device *dev, const unsigned char *addr,
 	int err;
 	struct netdev_hw_addr *ha;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	/*
@@ -460,6 +489,7 @@ int dev_uc_add_excl(struct net_device *dev, const unsigned char *addr)
 	int err;
 
 	netif_addr_lock_bh(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(ha, &dev->uc.list, list) {
 		if (!memcmp(ha->addr, addr, dev->addr_len) &&
 		    ha->type == NETDEV_HW_ADDR_T_UNICAST) {
@@ -493,7 +523,9 @@ int dev_uc_add(struct net_device *dev, const unsigned char *addr)
 	err = __hw_addr_add(&dev->uc, addr, dev->addr_len,
 			    NETDEV_HW_ADDR_T_UNICAST);
 	if (!err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__dev_set_rx_mode(dev);
+}
 	netif_addr_unlock_bh(dev);
 	return err;
 }
@@ -515,7 +547,9 @@ int dev_uc_del(struct net_device *dev, const unsigned char *addr)
 	err = __hw_addr_del(&dev->uc, addr, dev->addr_len,
 			    NETDEV_HW_ADDR_T_UNICAST);
 	if (!err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__dev_set_rx_mode(dev);
+}
 	netif_addr_unlock_bh(dev);
 	return err;
 }
@@ -539,7 +573,9 @@ int dev_uc_sync(struct net_device *to, struct net_device *from)
 	int err = 0;
 
 	if (to->addr_len != from->addr_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	netif_addr_lock_nested(to);
 	err = __hw_addr_sync(&to->uc, &from->uc, to->addr_len);
@@ -569,7 +605,9 @@ int dev_uc_sync_multiple(struct net_device *to, struct net_device *from)
 	int err = 0;
 
 	if (to->addr_len != from->addr_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	netif_addr_lock_nested(to);
 	err = __hw_addr_sync_multiple(&to->uc, &from->uc, to->addr_len);
@@ -591,6 +629,7 @@ EXPORT_SYMBOL(dev_uc_sync_multiple);
  */
 void dev_uc_unsync(struct net_device *to, struct net_device *from)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (to->addr_len != from->addr_len)
 		return;
 
@@ -611,6 +650,7 @@ EXPORT_SYMBOL(dev_uc_unsync);
  */
 void dev_uc_flush(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	netif_addr_lock_bh(dev);
 	__hw_addr_flush(&dev->uc);
 	netif_addr_unlock_bh(dev);
@@ -625,6 +665,7 @@ EXPORT_SYMBOL(dev_uc_flush);
  */
 void dev_uc_init(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__hw_addr_init(&dev->uc);
 }
 EXPORT_SYMBOL(dev_uc_init);
@@ -644,6 +685,7 @@ int dev_mc_add_excl(struct net_device *dev, const unsigned char *addr)
 	int err;
 
 	netif_addr_lock_bh(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(ha, &dev->mc.list, list) {
 		if (!memcmp(ha->addr, addr, dev->addr_len) &&
 		    ha->type == NETDEV_HW_ADDR_T_MULTICAST) {
@@ -671,6 +713,7 @@ static int __dev_mc_add(struct net_device *dev, const unsigned char *addr,
 			       NETDEV_HW_ADDR_T_MULTICAST, global, false, 0);
 	if (!err)
 		__dev_set_rx_mode(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	netif_addr_unlock_bh(dev);
 	return err;
 }
@@ -697,6 +740,7 @@ EXPORT_SYMBOL(dev_mc_add);
  */
 int dev_mc_add_global(struct net_device *dev, const unsigned char *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __dev_mc_add(dev, addr, true);
 }
 EXPORT_SYMBOL(dev_mc_add_global);
@@ -710,7 +754,9 @@ static int __dev_mc_del(struct net_device *dev, const unsigned char *addr,
 	err = __hw_addr_del_ex(&dev->mc, addr, dev->addr_len,
 			       NETDEV_HW_ADDR_T_MULTICAST, global, false);
 	if (!err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__dev_set_rx_mode(dev);
+}
 	netif_addr_unlock_bh(dev);
 	return err;
 }
@@ -725,6 +771,7 @@ static int __dev_mc_del(struct net_device *dev, const unsigned char *addr,
  */
 int dev_mc_del(struct net_device *dev, const unsigned char *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __dev_mc_del(dev, addr, false);
 }
 EXPORT_SYMBOL(dev_mc_del);
@@ -739,6 +786,7 @@ EXPORT_SYMBOL(dev_mc_del);
  */
 int dev_mc_del_global(struct net_device *dev, const unsigned char *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __dev_mc_del(dev, addr, true);
 }
 EXPORT_SYMBOL(dev_mc_del_global);
@@ -760,7 +808,9 @@ int dev_mc_sync(struct net_device *to, struct net_device *from)
 	int err = 0;
 
 	if (to->addr_len != from->addr_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	netif_addr_lock_nested(to);
 	err = __hw_addr_sync(&to->mc, &from->mc, to->addr_len);
@@ -790,7 +840,9 @@ int dev_mc_sync_multiple(struct net_device *to, struct net_device *from)
 	int err = 0;
 
 	if (to->addr_len != from->addr_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	netif_addr_lock_nested(to);
 	err = __hw_addr_sync_multiple(&to->mc, &from->mc, to->addr_len);
@@ -812,6 +864,7 @@ EXPORT_SYMBOL(dev_mc_sync_multiple);
  */
 void dev_mc_unsync(struct net_device *to, struct net_device *from)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (to->addr_len != from->addr_len)
 		return;
 
@@ -832,6 +885,7 @@ EXPORT_SYMBOL(dev_mc_unsync);
  */
 void dev_mc_flush(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	netif_addr_lock_bh(dev);
 	__hw_addr_flush(&dev->mc);
 	netif_addr_unlock_bh(dev);
@@ -846,6 +900,7 @@ EXPORT_SYMBOL(dev_mc_flush);
  */
 void dev_mc_init(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__hw_addr_init(&dev->mc);
 }
 EXPORT_SYMBOL(dev_mc_init);
diff --git a/net/core/dev_ioctl.c b/net/core/dev_ioctl.c
index 7e690d0..8a40b5c 100644
--- a/net/core/dev_ioctl.c
+++ b/net/core/dev_ioctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/kmod.h>
 #include <linux/netdevice.h>
@@ -28,7 +30,9 @@ static int dev_ifname(struct net *net, struct ifreq __user *arg)
 	 */
 
 	if (copy_from_user(&ifr, arg, sizeof(struct ifreq)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	ifr.ifr_name[IFNAMSIZ-1] = 0;
 
 	error = netdev_get_name(net, ifr.ifr_name, ifr.ifr_ifindex);
@@ -54,7 +58,9 @@ static gifconf_func_t *gifconf_list[NPROTO];
 int register_gifconf(unsigned int family, gifconf_func_t *gifconf)
 {
 	if (family >= NPROTO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	gifconf_list[family] = gifconf;
 	return 0;
 }
@@ -80,7 +86,9 @@ static int dev_ifconf(struct net *net, char __user *arg)
 	 */
 
 	if (copy_from_user(&ifc, arg, sizeof(struct ifconf)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	pos = ifc.ifc_buf;
 	len = ifc.ifc_len;
@@ -100,7 +108,9 @@ static int dev_ifconf(struct net *net, char __user *arg)
 					done = gifconf_list[i](dev, pos + total,
 							       len - total);
 				if (done < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -EFAULT;
+}
 				total += done;
 			}
 		}
@@ -126,7 +136,9 @@ static int dev_ifsioc_locked(struct net *net, struct ifreq *ifr, unsigned int cm
 	struct net_device *dev = dev_get_by_name_rcu(net, ifr->ifr_name);
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	switch (cmd) {
 	case SIOCGIFFLAGS:	/* Get interface flags */
@@ -144,8 +156,10 @@ static int dev_ifsioc_locked(struct net *net, struct ifreq *ifr, unsigned int cm
 
 	case SIOCGIFHWADDR:
 		if (!dev->addr_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memset(ifr->ifr_hwaddr.sa_data, 0,
 			       sizeof(ifr->ifr_hwaddr.sa_data));
+}
 		else
 			memcpy(ifr->ifr_hwaddr.sa_data, dev->dev_addr,
 			       min(sizeof(ifr->ifr_hwaddr.sa_data),
@@ -183,6 +197,7 @@ static int dev_ifsioc_locked(struct net *net, struct ifreq *ifr, unsigned int cm
 		break;
 
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -195,7 +210,9 @@ static int net_hwtstamp_validate(struct ifreq *ifr)
 	int rx_filter_valid = 0;
 
 	if (copy_from_user(&cfg, ifr->ifr_data, sizeof(cfg)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	if (cfg.flags) /* reserved for future extensions */
 		return -EINVAL;
@@ -248,7 +265,9 @@ static int dev_ifsioc(struct net *net, struct ifreq *ifr, unsigned int cmd)
 	const struct net_device_ops *ops;
 
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	ops = dev->netdev_ops;
 
@@ -424,7 +443,9 @@ int dev_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 		return ret;
 	}
 	if (cmd == SIOCGIFNAME)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return dev_ifname(net, (struct ifreq __user *)arg);
+}
 
 	/*
 	 * Take care of Wireless Extensions. Unfortunately struct iwreq
@@ -437,21 +458,28 @@ int dev_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 		struct iwreq iwr;
 
 		if (copy_from_user(&iwr, arg, sizeof(iwr)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iwr.ifr_name[sizeof(iwr.ifr_name) - 1] = 0;
 
 		return wext_handle_ioctl(net, &iwr, cmd, arg);
 	}
 
 	if (copy_from_user(&ifr, arg, sizeof(struct ifreq)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	ifr.ifr_name[IFNAMSIZ-1] = 0;
 
 	colon = strchr(ifr.ifr_name, ':');
 	if (colon)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*colon = 0;
+}
 
 	/*
 	 *	See which interface the caller is talking about.
@@ -478,11 +506,14 @@ int dev_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 		rcu_read_unlock();
 		if (!ret) {
 			if (colon)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*colon = ':';
+}
 			if (copy_to_user(arg, &ifr,
 					 sizeof(struct ifreq)))
 				ret = -EFAULT;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 
 	case SIOCETHTOOL:
@@ -491,12 +522,17 @@ int dev_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 		ret = dev_ethtool(net, &ifr);
 		rtnl_unlock();
 		if (!ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (colon)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*colon = ':';
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (copy_to_user(arg, &ifr,
 					 sizeof(struct ifreq)))
 				ret = -EFAULT;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 
 	/*
@@ -509,18 +545,26 @@ int dev_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 	case SIOCGMIIREG:
 	case SIOCSIFNAME:
 		if (!ns_capable(net->user_ns, CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_load(net, ifr.ifr_name);
 		rtnl_lock();
 		ret = dev_ifsioc(net, &ifr, cmd);
 		rtnl_unlock();
 		if (!ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (colon)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*colon = ':';
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (copy_to_user(arg, &ifr,
 					 sizeof(struct ifreq)))
 				ret = -EFAULT;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 
 	/*
@@ -532,7 +576,9 @@ int dev_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 	case SIOCSIFMAP:
 	case SIOCSIFTXQLEN:
 		if (!capable(CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 		/* fall through */
 	/*
 	 *	These ioctl calls:
@@ -557,7 +603,9 @@ int dev_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 	case SIOCBRDELIF:
 	case SIOCSHWTSTAMP:
 		if (!ns_capable(net->user_ns, CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 		/* fall through */
 	case SIOCBONDSLAVEINFOQUERY:
 	case SIOCBONDINFOQUERY:
@@ -584,15 +632,19 @@ int dev_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 		    cmd == SIOCGHWTSTAMP ||
 		    (cmd >= SIOCDEVPRIVATE &&
 		     cmd <= SIOCDEVPRIVATE + 15)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_load(net, ifr.ifr_name);
 			rtnl_lock();
 			ret = dev_ifsioc(net, &ifr, cmd);
 			rtnl_unlock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!ret && copy_to_user(arg, &ifr,
 						 sizeof(struct ifreq)))
 				ret = -EFAULT;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTTY;
 	}
 }
diff --git a/net/core/dst.c b/net/core/dst.c
index a6c47da..95e22c4 100644
--- a/net/core/dst.c
+++ b/net/core/dst.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/core/dst.c	Protocol independent destination cache.
  *
@@ -44,6 +46,7 @@
  */
 int dst_discard_out(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree_skb(skb);
 	return 0;
 }
@@ -65,7 +68,9 @@ void dst_init(struct dst_entry *dst, struct dst_ops *ops,
 	dst->child = NULL;
 	dst->dev = dev;
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_hold(dev);
+}
 	dst->ops = ops;
 	dst_init_metrics(dst, dst_default_metrics.metrics, true);
 	dst->expires = 0UL;
@@ -90,8 +95,10 @@ void dst_init(struct dst_entry *dst, struct dst_ops *ops,
 	dst->flags = flags;
 	dst->next = NULL;
 	if (!(flags & DST_NOCOUNT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_entries_add(ops, 1);
 }
+}
 EXPORT_SYMBOL(dst_init);
 
 void *dst_alloc(struct dst_ops *ops, struct net_device *dev,
@@ -100,13 +107,18 @@ void *dst_alloc(struct dst_ops *ops, struct net_device *dev,
 	struct dst_entry *dst;
 
 	if (ops->gc && dst_entries_get_fast(ops) > ops->gc_thresh) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ops->gc(ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
 	}
 
 	dst = kmem_cache_alloc(ops->kmem_cachep, GFP_ATOMIC);
 	if (!dst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	dst_init(dst, ops, dev, initial_ref, initial_obsolete, flags);
 
@@ -128,18 +140,25 @@ struct dst_entry *dst_destroy(struct dst_entry * dst)
 	if (dst->ops->destroy)
 		dst->ops->destroy(dst);
 	if (dst->dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_put(dst->dev);
+}
 
 	lwtstate_put(dst->lwtstate);
 
 	if (dst->flags & DST_METADATA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		metadata_dst_free((struct metadata_dst *)dst);
+}
 	else
 		kmem_cache_free(dst->ops->kmem_cachep, dst);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dst = child;
 	if (dst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_release_immediate(dst);
+}
 	return NULL;
 }
 EXPORT_SYMBOL(dst_destroy);
@@ -182,8 +201,10 @@ void dst_release(struct dst_entry *dst)
 
 		newrefcnt = atomic_dec_return(&dst->__refcnt);
 		if (unlikely(newrefcnt < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net_warn_ratelimited("%s: dst:%p refcnt:%d\n",
 					     __func__, dst, newrefcnt);
+}
 		if (!newrefcnt)
 			call_rcu(&dst->rcu_head, dst_destroy_rcu);
 	}
@@ -197,8 +218,10 @@ void dst_release_immediate(struct dst_entry *dst)
 
 		newrefcnt = atomic_dec_return(&dst->__refcnt);
 		if (unlikely(newrefcnt < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net_warn_ratelimited("%s: dst:%p refcnt:%d\n",
 					     __func__, dst, newrefcnt);
+}
 		if (!newrefcnt)
 			dst_destroy(dst);
 	}
@@ -207,6 +230,7 @@ EXPORT_SYMBOL(dst_release_immediate);
 
 u32 *dst_cow_metrics_generic(struct dst_entry *dst, unsigned long old)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dst_metrics *p = kmalloc(sizeof(*p), GFP_ATOMIC);
 
 	if (p) {
@@ -220,15 +244,22 @@ u32 *dst_cow_metrics_generic(struct dst_entry *dst, unsigned long old)
 		prev = cmpxchg(&dst->_metrics, old, new);
 
 		if (prev != old) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(p);
 			p = (struct dst_metrics *)__DST_METRICS_PTR(prev);
 			if (prev & DST_METRICS_READ_ONLY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				p = NULL;
+}
 		} else if (prev & DST_METRICS_REFCOUNTED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (refcount_dec_and_test(&old_p->refcnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kfree(old_p);
+}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(offsetof(struct dst_metrics, metrics) != 0);
 	return (u32 *)p;
 }
@@ -252,6 +283,7 @@ static struct dst_ops md_dst_ops = {
 
 static int dst_md_discard_out(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ONCE(1, "Attempting to call output on metadata dst\n");
 	kfree_skb(skb);
 	return 0;
@@ -259,6 +291,7 @@ static int dst_md_discard_out(struct net *net, struct sock *sk, struct sk_buff *
 
 static int dst_md_discard(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ONCE(1, "Attempting to call input on metadata dst\n");
 	kfree_skb(skb);
 	return 0;
@@ -288,7 +321,9 @@ struct metadata_dst *metadata_dst_alloc(u8 optslen, enum metadata_type type,
 
 	md_dst = kmalloc(sizeof(*md_dst) + optslen, flags);
 	if (!md_dst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	__metadata_dst_init(md_dst, type, optslen);
 
@@ -314,7 +349,9 @@ metadata_dst_alloc_percpu(u8 optslen, enum metadata_type type, gfp_t flags)
 	md_dst = __alloc_percpu_gfp(sizeof(struct metadata_dst) + optslen,
 				    __alignof__(struct metadata_dst), flags);
 	if (!md_dst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	for_each_possible_cpu(cpu)
 		__metadata_dst_init(per_cpu_ptr(md_dst, cpu), type, optslen);
diff --git a/net/core/dst_cache.c b/net/core/dst_cache.c
index 554d364..fbb298b 100644
--- a/net/core/dst_cache.c
+++ b/net/core/dst_cache.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/core/dst_cache.c - dst entry cache
  *
@@ -31,6 +33,7 @@ struct dst_cache_pcpu {
 static void dst_cache_per_cpu_dst_set(struct dst_cache_pcpu *dst_cache,
 				      struct dst_entry *dst, u32 cookie)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dst_release(dst_cache->dst);
 	if (dst)
 		dst_hold(dst);
@@ -49,6 +52,7 @@ static struct dst_entry *dst_cache_per_cpu_get(struct dst_cache *dst_cache,
 		goto fail;
 
 	/* the cache already hold a dst reference; it can't go away */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dst_hold(dst);
 
 	if (unlikely(!time_after(idst->refresh_ts, dst_cache->reset_ts) ||
@@ -66,6 +70,7 @@ static struct dst_entry *dst_cache_per_cpu_get(struct dst_cache *dst_cache,
 
 struct dst_entry *dst_cache_get(struct dst_cache *dst_cache)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dst_cache->cache)
 		return NULL;
 
@@ -79,7 +84,9 @@ struct rtable *dst_cache_get_ip4(struct dst_cache *dst_cache, __be32 *saddr)
 	struct dst_entry *dst;
 
 	if (!dst_cache->cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	idst = this_cpu_ptr(dst_cache->cache);
 	dst = dst_cache_per_cpu_get(dst_cache, idst);
@@ -97,7 +104,9 @@ void dst_cache_set_ip4(struct dst_cache *dst_cache, struct dst_entry *dst,
 	struct dst_cache_pcpu *idst;
 
 	if (!dst_cache->cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	idst = this_cpu_ptr(dst_cache->cache);
 	dst_cache_per_cpu_dst_set(idst, dst, 0);
@@ -112,7 +121,9 @@ void dst_cache_set_ip6(struct dst_cache *dst_cache, struct dst_entry *dst,
 	struct dst_cache_pcpu *idst;
 
 	if (!dst_cache->cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	idst = this_cpu_ptr(dst_cache->cache);
 	dst_cache_per_cpu_dst_set(this_cpu_ptr(dst_cache->cache), dst,
@@ -128,7 +139,9 @@ struct dst_entry *dst_cache_get_ip6(struct dst_cache *dst_cache,
 	struct dst_entry *dst;
 
 	if (!dst_cache->cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	idst = this_cpu_ptr(dst_cache->cache);
 	dst = dst_cache_per_cpu_get(dst_cache, idst);
@@ -146,8 +159,11 @@ int dst_cache_init(struct dst_cache *dst_cache, gfp_t gfp)
 	dst_cache->cache = alloc_percpu_gfp(struct dst_cache_pcpu,
 					    gfp | __GFP_ZERO);
 	if (!dst_cache->cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dst_cache_reset(dst_cache);
 	return 0;
 }
@@ -158,7 +174,9 @@ void dst_cache_destroy(struct dst_cache *dst_cache)
 	int i;
 
 	if (!dst_cache->cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for_each_possible_cpu(i)
 		dst_release(per_cpu_ptr(dst_cache->cache, i)->dst);
diff --git a/net/core/fib_notifier.c b/net/core/fib_notifier.c
index 4fc202d..e649965 100644
--- a/net/core/fib_notifier.c
+++ b/net/core/fib_notifier.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/rtnetlink.h>
 #include <linux/notifier.h>
 #include <linux/rcupdate.h>
@@ -13,6 +15,7 @@ int call_fib_notifier(struct notifier_block *nb, struct net *net,
 		      enum fib_event_type event_type,
 		      struct fib_notifier_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	info->net = net;
 	return nb->notifier_call(nb, event_type, info);
 }
@@ -33,6 +36,7 @@ static unsigned int fib_seq_sum(void)
 	struct net *net;
 
 	rtnl_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_net(net) {
 		list_for_each_entry(ops, &net->fib_notifier_ops, list) {
 			if (!try_module_get(ops->owner))
@@ -50,6 +54,7 @@ static int fib_net_dump(struct net *net, struct notifier_block *nb)
 {
 	struct fib_notifier_ops *ops;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(ops, &net->fib_notifier_ops, list) {
 		int err;
 
@@ -68,6 +73,7 @@ static bool fib_dump_is_consistent(struct notifier_block *nb,
 				   void (*cb)(struct notifier_block *nb),
 				   unsigned int fib_seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_notifier_chain_register(&fib_chain, nb);
 	if (fib_seq == fib_seq_sum())
 		return true;
@@ -85,6 +91,7 @@ int register_fib_notifier(struct notifier_block *nb,
 	int err;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unsigned int fib_seq = fib_seq_sum();
 		struct net *net;
 
@@ -110,6 +117,7 @@ EXPORT_SYMBOL(register_fib_notifier);
 
 int unregister_fib_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_chain_unregister(&fib_chain, nb);
 }
 EXPORT_SYMBOL(unregister_fib_notifier);
@@ -121,7 +129,9 @@ static int __fib_notifier_ops_register(struct fib_notifier_ops *ops,
 
 	list_for_each_entry(o, &net->fib_notifier_ops, list)
 		if (ops->family == o->family)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EEXIST;
+}
 	list_add_tail_rcu(&ops->list, &net->fib_notifier_ops);
 	return 0;
 }
@@ -134,12 +144,15 @@ fib_notifier_ops_register(const struct fib_notifier_ops *tmpl, struct net *net)
 
 	ops = kmemdup(tmpl, sizeof(*ops), GFP_KERNEL);
 	if (!ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	err = __fib_notifier_ops_register(ops, net);
 	if (err)
 		goto err_register;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ops;
 
 err_register:
diff --git a/net/core/fib_rules.c b/net/core/fib_rules.c
index 9a6d97c..d0a539e 100644
--- a/net/core/fib_rules.c
+++ b/net/core/fib_rules.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/core/fib_rules.c		Generic Routing Rules
  *
@@ -25,6 +27,7 @@ static const struct fib_kuid_range fib_kuid_range_unset = {
 
 bool fib_rule_matchall(const struct fib_rule *rule)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rule->iifindex || rule->oifindex || rule->mark || rule->tun_id ||
 	    rule->flags)
 		return false;
@@ -44,8 +47,11 @@ int fib_default_rule_add(struct fib_rules_ops *ops,
 
 	r = kzalloc(ops->rule_size, GFP_KERNEL);
 	if (r == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	refcount_set(&r->refcnt, 1);
 	r->action = FR_ACT_TO_TBL;
 	r->pref = pref;
@@ -70,6 +76,7 @@ static u32 fib_default_rule_pref(struct fib_rules_ops *ops)
 	struct fib_rule *rule;
 
 	if (!list_empty(&ops->rules_list)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pos = ops->rules_list.next;
 		if (pos->next != &ops->rules_list) {
 			rule = list_entry(pos->next, struct fib_rule, list);
@@ -90,6 +97,7 @@ static struct fib_rules_ops *lookup_rules_ops(struct net *net, int family)
 	struct fib_rules_ops *ops;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(ops, &net->rules_ops, list) {
 		if (ops->family == family) {
 			if (!try_module_get(ops->owner))
@@ -105,12 +113,14 @@ static struct fib_rules_ops *lookup_rules_ops(struct net *net, int family)
 
 static void rules_ops_put(struct fib_rules_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ops)
 		module_put(ops->owner);
 }
 
 static void flush_route_cache(struct fib_rules_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ops->flush_cache)
 		ops->flush_cache(ops);
 }
@@ -124,13 +134,16 @@ static int __fib_rules_register(struct fib_rules_ops *ops)
 	net = ops->fro_net;
 
 	if (ops->rule_size < sizeof(struct fib_rule))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (ops->match == NULL || ops->configure == NULL ||
 	    ops->compare == NULL || ops->fill == NULL ||
 	    ops->action == NULL)
 		return -EINVAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&net->rules_mod_lock);
 	list_for_each_entry(o, &net->rules_ops, list)
 		if (ops->family == o->family)
@@ -152,17 +165,21 @@ fib_rules_register(const struct fib_rules_ops *tmpl, struct net *net)
 
 	ops = kmemdup(tmpl, sizeof(*ops), GFP_KERNEL);
 	if (ops == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	INIT_LIST_HEAD(&ops->rules_list);
 	ops->fro_net = net;
 
 	err = __fib_rules_register(ops);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(ops);
 		ops = ERR_PTR(err);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ops;
 }
 EXPORT_SYMBOL_GPL(fib_rules_register);
@@ -194,6 +211,7 @@ EXPORT_SYMBOL_GPL(fib_rules_unregister);
 
 static int uid_range_set(struct fib_kuid_range *range)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return uid_valid(range->start) && uid_valid(range->end);
 }
 
@@ -226,6 +244,7 @@ static int fib_rule_match(struct fib_rule *rule, struct fib_rules_ops *ops,
 {
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rule->iifindex && (rule->iifindex != fl->flowi_iif))
 		goto out;
 
@@ -258,6 +277,7 @@ int fib_rules_lookup(struct fib_rules_ops *ops, struct flowi *fl,
 
 	rcu_read_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(rule, &ops->rules_list, list) {
 jumped:
 		if (!fib_rule_match(rule, ops, fl, flags, arg))
@@ -333,7 +353,9 @@ int fib_rules_dump(struct net *net, struct notifier_block *nb, int family)
 
 	ops = lookup_rules_ops(net, family);
 	if (!ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 	list_for_each_entry_rcu(rule, &ops->rules_list, list)
 		call_fib_rule_notifier(nb, net, FIB_EVENT_RULE_ADD, rule,
 				       family);
@@ -348,6 +370,7 @@ unsigned int fib_rules_seq_read(struct net *net, int family)
 	unsigned int fib_rules_seq;
 	struct fib_rules_ops *ops;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	ops = lookup_rules_ops(net, family);
@@ -366,10 +389,12 @@ static int validate_rulemsg(struct fib_rule_hdr *frh, struct nlattr **tb,
 	int err = -EINVAL;
 
 	if (frh->src_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tb[FRA_SRC] == NULL ||
 		    frh->src_len > (ops->addr_size * 8) ||
 		    nla_len(tb[FRA_SRC]) != ops->addr_size)
 			goto errout;
+}
 
 	if (frh->dst_len)
 		if (tb[FRA_DST] == NULL ||
@@ -387,6 +412,7 @@ static int rule_exists(struct fib_rules_ops *ops, struct fib_rule_hdr *frh,
 {
 	struct fib_rule *r;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(r, &ops->rules_list, list) {
 		if (r->action != rule->action)
 			continue;
@@ -432,6 +458,7 @@ static int rule_exists(struct fib_rules_ops *ops, struct fib_rule_hdr *frh,
 int fib_nl_newrule(struct sk_buff *skb, struct nlmsghdr *nlh,
 		   struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct fib_rule_hdr *frh = nlmsg_data(nlh);
 	struct fib_rules_ops *ops = NULL;
@@ -626,6 +653,7 @@ EXPORT_SYMBOL_GPL(fib_nl_newrule);
 int fib_nl_delrule(struct sk_buff *skb, struct nlmsghdr *nlh,
 		   struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct fib_rule_hdr *frh = nlmsg_data(nlh);
 	struct fib_rules_ops *ops = NULL;
@@ -795,7 +823,9 @@ static int fib_nl_fill_rule(struct sk_buff *skb, struct fib_rule *rule,
 
 	nlh = nlmsg_put(skb, pid, seq, type, sizeof(*frh), flags);
 	if (nlh == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	frh = nlmsg_data(nlh);
 	frh->family = ops->family;
@@ -867,6 +897,7 @@ static int dump_rules(struct sk_buff *skb, struct netlink_callback *cb,
 	int err = 0;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(rule, &ops->rules_list, list) {
 		if (idx < cb->args[1])
 			goto skip;
@@ -888,6 +919,7 @@ static int dump_rules(struct sk_buff *skb, struct netlink_callback *cb,
 
 static int fib_nl_dumprule(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct fib_rules_ops *ops;
 	int idx = 0, family;
@@ -935,6 +967,7 @@ static void notify_rule_change(int event, struct fib_rule *rule,
 	if (skb == NULL)
 		goto errout;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = fib_nl_fill_rule(skb, rule, pid, nlh->nlmsg_seq, event, 0, ops);
 	if (err < 0) {
 		/* -EMSGSIZE implies BUG in fib_rule_nlmsg_size() */
@@ -970,9 +1003,13 @@ static void detach_rules(struct list_head *rules, struct net_device *dev)
 
 	list_for_each_entry(rule, rules, list) {
 		if (rule->iifindex == dev->ifindex)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rule->iifindex = -1;
+}
 		if (rule->oifindex == dev->ifindex)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rule->oifindex = -1;
+}
 	}
 }
 
@@ -980,6 +1017,7 @@ static void detach_rules(struct list_head *rules, struct net_device *dev)
 static int fib_rules_event(struct notifier_block *this, unsigned long event,
 			   void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = netdev_notifier_info_to_dev(ptr);
 	struct net *net = dev_net(dev);
 	struct fib_rules_ops *ops;
@@ -994,6 +1032,7 @@ static int fib_rules_event(struct notifier_block *this, unsigned long event,
 
 	case NETDEV_CHANGENAME:
 		list_for_each_entry(ops, &net->rules_ops, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			detach_rules(&ops->rules_list, dev);
 			attach_rules(&ops->rules_list, dev);
 		}
@@ -1038,6 +1077,7 @@ static int __init fib_rules_init(void)
 	if (err < 0)
 		goto fail_unregister;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 fail_unregister:
diff --git a/net/core/filter.c b/net/core/filter.c
index d5158a1..006a6a5 100644
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Linux Socket Filter - Kernel level socket filtering
  *
@@ -81,17 +83,24 @@ int sk_filter_trim_cap(struct sock *sk, struct sk_buff *skb, unsigned int cap)
 	 * helping free memory
 	 */
 	if (skb_pfmemalloc(skb) && !sock_flag(sk, SOCK_MEMALLOC)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_PFMEMALLOCDROP);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
 	}
 	err = BPF_CGROUP_RUN_PROG_INET_INGRESS(sk, skb);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = security_sock_rcv_skb(sk, skb);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	filter = rcu_dereference(sk->sk_filter);
 	if (filter) {
@@ -101,8 +110,10 @@ int sk_filter_trim_cap(struct sock *sk, struct sk_buff *skb, unsigned int cap)
 		skb->sk = sk;
 		pkt_len = bpf_prog_run_save_cb(filter->prog, skb);
 		skb->sk = save_sk;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = pkt_len ? pskb_trim(skb, max(cap, pkt_len)) : -EPERM;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	return err;
@@ -110,16 +121,19 @@ int sk_filter_trim_cap(struct sock *sk, struct sk_buff *skb, unsigned int cap)
 EXPORT_SYMBOL(sk_filter_trim_cap);
 
 BPF_CALL_1(__skb_get_pay_offset, struct sk_buff *, skb)
-{
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb_get_poff(skb);
 }
 
 BPF_CALL_3(__skb_get_nlattr, struct sk_buff *, skb, u32, a, u32, x)
-{
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nlattr *nla;
 
 	if (skb_is_nonlinear(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (skb->len < sizeof(struct nlattr))
 		return 0;
@@ -135,11 +149,13 @@ BPF_CALL_3(__skb_get_nlattr, struct sk_buff *, skb, u32, a, u32, x)
 }
 
 BPF_CALL_3(__skb_get_nlattr_nest, struct sk_buff *, skb, u32, a, u32, x)
-{
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nlattr *nla;
 
 	if (skb_is_nonlinear(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (skb->len < sizeof(struct nlattr))
 		return 0;
@@ -159,7 +175,8 @@ BPF_CALL_3(__skb_get_nlattr_nest, struct sk_buff *, skb, u32, a, u32, x)
 }
 
 BPF_CALL_0(__get_raw_cpu_id)
-{
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return raw_smp_processor_id();
 }
 
@@ -245,8 +262,10 @@ static bool convert_bpf_extensions(struct sock_filter *fp,
 	case SKF_AD_OFF + SKF_AD_IFINDEX:
 	case SKF_AD_OFF + SKF_AD_HATYPE:
 		BUILD_BUG_ON(FIELD_SIZEOF(struct net_device, ifindex) != 4);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUILD_BUG_ON(FIELD_SIZEOF(struct net_device, type) != 2);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*insn++ = BPF_LDX_MEM(BPF_FIELD_SIZEOF(struct sk_buff, dev),
 				      BPF_REG_TMP, BPF_REG_CTX,
 				      offsetof(struct sk_buff, dev));
@@ -254,8 +273,10 @@ static bool convert_bpf_extensions(struct sock_filter *fp,
 		*insn++ = BPF_JMP_IMM(BPF_JNE, BPF_REG_TMP, 0, 1);
 		*insn++ = BPF_EXIT_INSN();
 		if (fp->k == SKF_AD_OFF + SKF_AD_IFINDEX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*insn = BPF_LDX_MEM(BPF_W, BPF_REG_A, BPF_REG_TMP,
 					    offsetof(struct net_device, ifindex));
+}
 		else
 			*insn = BPF_LDX_MEM(BPF_H, BPF_REG_A, BPF_REG_TMP,
 					    offsetof(struct net_device, type));
@@ -269,6 +290,7 @@ static bool convert_bpf_extensions(struct sock_filter *fp,
 	case SKF_AD_OFF + SKF_AD_RXHASH:
 		BUILD_BUG_ON(FIELD_SIZEOF(struct sk_buff, hash) != 4);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*insn = BPF_LDX_MEM(BPF_W, BPF_REG_A, BPF_REG_CTX,
 				    offsetof(struct sk_buff, hash));
 		break;
@@ -343,9 +365,11 @@ static bool convert_bpf_extensions(struct sock_filter *fp,
 		 * where no-one bothers.
 		 */
 		BUG_ON(__bpf_call_base(0, 0, 0, 0, 0) != 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*insnp = insn;
 	return true;
 }
@@ -377,18 +401,24 @@ static int bpf_convert_filter(struct sock_filter *prog, int len,
 	int *addrs = NULL;
 	u8 bpf_src;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(BPF_MEMWORDS * sizeof(u32) > MAX_BPF_STACK);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(BPF_REG_FP + 1 != MAX_BPF_REG);
 
 	if (len <= 0 || len > BPF_MAXINSNS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (new_prog) {
 		first_insn = new_prog->insnsi;
 		addrs = kcalloc(len, sizeof(*addrs),
 				GFP_KERNEL | __GFP_NOWARN);
 		if (!addrs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	}
 
 do_pass:
@@ -482,6 +512,7 @@ static int bpf_convert_filter(struct sock_filter *prog, int len,
 		case BPF_JMP | BPF_JA:
 			target = i + fp->k + 1;
 			insn->code = fp->code;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BPF_EMIT_JMP;
 			break;
 
@@ -542,11 +573,14 @@ static int bpf_convert_filter(struct sock_filter *prog, int len,
 			/* Other jumps are mapped into two insns: Jxx and JA. */
 			target = i + fp->jt + 1;
 			insn->code = BPF_JMP | BPF_OP(fp->code) | bpf_src;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BPF_EMIT_JMP;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			insn++;
 
 			insn->code = BPF_JMP | BPF_JA;
 			target = i + fp->jf + 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BPF_EMIT_JMP;
 			break;
 
@@ -581,6 +615,7 @@ static int bpf_convert_filter(struct sock_filter *prog, int len,
 		case BPF_ST:
 		case BPF_STX:
 			stack_off = fp->k * 4  + 4;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*insn = BPF_STX_MEM(BPF_W, BPF_REG_FP, BPF_CLASS(fp->code) ==
 					    BPF_ST ? BPF_REG_A : BPF_REG_X,
 					    -stack_off);
@@ -589,13 +624,16 @@ static int bpf_convert_filter(struct sock_filter *prog, int len,
 			 * stack_depth for ST|STX insns is enough
 			 */
 			if (new_prog && new_prog->aux->stack_depth < stack_off)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				new_prog->aux->stack_depth = stack_off;
+}
 			break;
 
 		/* Load from stack. */
 		case BPF_LD | BPF_MEM:
 		case BPF_LDX | BPF_MEM:
 			stack_off = fp->k * 4  + 4;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*insn = BPF_LDX_MEM(BPF_W, BPF_CLASS(fp->code) == BPF_LD  ?
 					    BPF_REG_A : BPF_REG_X, BPF_REG_FP,
 					    -stack_off);
@@ -660,6 +698,7 @@ static int bpf_convert_filter(struct sock_filter *prog, int len,
 
 	kfree(addrs);
 	BUG_ON(*new_len != new_flen);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 err:
 	kfree(addrs);
@@ -678,11 +717,14 @@ static int check_load_and_stores(const struct sock_filter *filter, int flen)
 	u16 *masks, memvalid = 0; /* One bit per cell, 16 cells */
 	int pc, ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(BPF_MEMWORDS > 16);
 
 	masks = kmalloc_array(flen, sizeof(*masks), GFP_KERNEL);
 	if (!masks)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	memset(masks, 0xff, flen * sizeof(*masks));
 
@@ -697,6 +739,7 @@ static int check_load_and_stores(const struct sock_filter *filter, int flen)
 		case BPF_LD | BPF_MEM:
 		case BPF_LDX | BPF_MEM:
 			if (!(memvalid & (1 << filter[pc].k))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EINVAL;
 				goto error;
 			}
@@ -787,7 +830,9 @@ static bool chk_code_allowed(u16 code_to_probe)
 	};
 
 	if (code_to_probe >= ARRAY_SIZE(codes))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	return codes[code_to_probe];
 }
@@ -796,9 +841,13 @@ static bool bpf_check_basics_ok(const struct sock_filter *filter,
 				unsigned int flen)
 {
 	if (filter == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (flen == 0 || flen > BPF_MAXINSNS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	return true;
 }
@@ -829,7 +878,9 @@ static int bpf_check_classic(const struct sock_filter *filter,
 
 		/* May we actually operate on this code? */
 		if (!chk_code_allowed(ftest->code))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
 		/* Some instructions need special checks */
 		switch (ftest->code) {
@@ -837,12 +888,16 @@ static int bpf_check_classic(const struct sock_filter *filter,
 		case BPF_ALU | BPF_MOD | BPF_K:
 			/* Check for division by zero */
 			if (ftest->k == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 			break;
 		case BPF_ALU | BPF_LSH | BPF_K:
 		case BPF_ALU | BPF_RSH | BPF_K:
 			if (ftest->k >= 32)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 			break;
 		case BPF_LD | BPF_MEM:
 		case BPF_LDX | BPF_MEM:
@@ -850,7 +905,9 @@ static int bpf_check_classic(const struct sock_filter *filter,
 		case BPF_STX:
 			/* Check for invalid memory addresses */
 			if (ftest->k >= BPF_MEMWORDS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 			break;
 		case BPF_JMP | BPF_JA:
 			/* Note, the large ftest->k might cause loops.
@@ -858,7 +915,9 @@ static int bpf_check_classic(const struct sock_filter *filter,
 			 * where offsets are limited. --ANK (981016)
 			 */
 			if (ftest->k >= (unsigned int)(flen - pc - 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 			break;
 		case BPF_JMP | BPF_JEQ | BPF_K:
 		case BPF_JMP | BPF_JEQ | BPF_X:
@@ -878,10 +937,14 @@ static int bpf_check_classic(const struct sock_filter *filter,
 		case BPF_LD | BPF_B | BPF_ABS:
 			anc_found = false;
 			if (bpf_anc_helper(ftest) & BPF_ANC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				anc_found = true;
+}
 			/* Ancillary operation unknown or unsupported */
 			if (anc_found == false && ftest->k >= SKF_AD_OFF)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 		}
 	}
 
@@ -892,6 +955,7 @@ static int bpf_check_classic(const struct sock_filter *filter,
 		return check_load_and_stores(filter, flen);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EINVAL;
 }
 
@@ -903,18 +967,23 @@ static int bpf_prog_store_orig_filter(struct bpf_prog *fp,
 
 	fp->orig_prog = kmalloc(sizeof(*fkprog), GFP_KERNEL);
 	if (!fp->orig_prog)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fkprog = fp->orig_prog;
 	fkprog->len = fprog->len;
 
 	fkprog->filter = kmemdup(fp->insns, fsize,
 				 GFP_KERNEL | __GFP_NOWARN);
 	if (!fkprog->filter) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(fp->orig_prog);
 		return -ENOMEM;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -931,6 +1000,7 @@ static void bpf_release_orig_filter(struct bpf_prog *fp)
 static void __bpf_prog_release(struct bpf_prog *prog)
 {
 	if (prog->type == BPF_PROG_TYPE_SOCKET_FILTER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bpf_prog_put(prog);
 	} else {
 		bpf_release_orig_filter(prog);
@@ -988,11 +1058,13 @@ static bool __sk_filter_charge(struct sock *sk, struct sk_filter *fp)
 		atomic_add(filter_size, &sk->sk_omem_alloc);
 		return true;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
 bool sk_filter_charge(struct sock *sk, struct sk_filter *fp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!refcount_inc_not_zero(&fp->refcnt))
 		return false;
 
@@ -1024,6 +1096,7 @@ static struct bpf_prog *bpf_migrate_filter(struct bpf_prog *fp)
 	old_prog = kmemdup(fp->insns, old_len * sizeof(struct sock_filter),
 			   GFP_KERNEL | __GFP_NOWARN);
 	if (!old_prog) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOMEM;
 		goto out_err;
 	}
@@ -1081,6 +1154,7 @@ static struct bpf_prog *bpf_prepare_filter(struct bpf_prog *fp,
 
 	err = bpf_check_classic(fp->insns, fp->len);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__bpf_prog_release(fp);
 		return ERR_PTR(err);
 	}
@@ -1089,8 +1163,10 @@ static struct bpf_prog *bpf_prepare_filter(struct bpf_prog *fp,
 	 * needed on classic filters, f.e. in case of seccomp.
 	 */
 	if (trans) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = trans(fp->insns, fp->len);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__bpf_prog_release(fp);
 			return ERR_PTR(err);
 		}
@@ -1107,6 +1183,7 @@ static struct bpf_prog *bpf_prepare_filter(struct bpf_prog *fp,
 	if (!fp->jited)
 		fp = bpf_migrate_filter(fp);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fp;
 }
 
@@ -1127,11 +1204,15 @@ int bpf_prog_create(struct bpf_prog **pfp, struct sock_fprog_kern *fprog)
 
 	/* Make sure new filter is there and in the right amounts. */
 	if (!bpf_check_basics_ok(fprog->filter, fprog->len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	fp = bpf_prog_alloc(bpf_prog_size(fprog->len), 0);
 	if (!fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	memcpy(fp->insns, fprog->filter, fsize);
 
@@ -1147,7 +1228,9 @@ int bpf_prog_create(struct bpf_prog **pfp, struct sock_fprog_kern *fprog)
 	 */
 	fp = bpf_prepare_filter(fp, NULL);
 	if (IS_ERR(fp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(fp);
+}
 
 	*pfp = fp;
 	return 0;
@@ -1174,7 +1257,9 @@ int bpf_prog_create_from_user(struct bpf_prog **pfp, struct sock_fprog *fprog,
 
 	/* Make sure new filter is there and in the right amounts. */
 	if (!bpf_check_basics_ok(fprog->filter, fprog->len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	fp = bpf_prog_alloc(bpf_prog_size(fprog->len), 0);
 	if (!fp)
@@ -1210,6 +1295,7 @@ EXPORT_SYMBOL_GPL(bpf_prog_create_from_user);
 
 void bpf_prog_destroy(struct bpf_prog *fp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__bpf_prog_release(fp);
 }
 EXPORT_SYMBOL_GPL(bpf_prog_destroy);
@@ -1220,14 +1306,18 @@ static int __sk_attach_prog(struct bpf_prog *prog, struct sock *sk)
 
 	fp = kmalloc(sizeof(*fp), GFP_KERNEL);
 	if (!fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	fp->prog = prog;
 
 	if (!__sk_filter_charge(sk, fp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(fp);
 		return -ENOMEM;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	refcount_set(&fp->refcnt, 1);
 
 	old_fp = rcu_dereference_protected(sk->sk_filter,
@@ -1235,8 +1325,11 @@ static int __sk_attach_prog(struct bpf_prog *prog, struct sock *sk)
 	rcu_assign_pointer(sk->sk_filter, fp);
 
 	if (old_fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_filter_uncharge(sk, old_fp);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1246,7 +1339,9 @@ static int __reuseport_attach_prog(struct bpf_prog *prog, struct sock *sk)
 	int err;
 
 	if (bpf_prog_size(prog->len) > sysctl_optmem_max)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (sk_unhashed(sk) && sk->sk_reuseport) {
 		err = reuseport_alloc(sk);
@@ -1272,17 +1367,24 @@ struct bpf_prog *__get_filter(struct sock_fprog *fprog, struct sock *sk)
 	int err;
 
 	if (sock_flag(sk, SOCK_FILTER_LOCKED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EPERM);
+}
 
 	/* Make sure new filter is there and in the right amounts. */
 	if (!bpf_check_basics_ok(fprog->filter, fprog->len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	prog = bpf_prog_alloc(bpf_prog_size(fprog->len), 0);
 	if (!prog)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	if (copy_from_user(prog->insns, fprog->filter, fsize)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__bpf_prog_free(prog);
 		return ERR_PTR(-EFAULT);
 	}
@@ -1291,6 +1393,7 @@ struct bpf_prog *__get_filter(struct sock_fprog *fprog, struct sock *sk)
 
 	err = bpf_prog_store_orig_filter(prog, fprog);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__bpf_prog_free(prog);
 		return ERR_PTR(-ENOMEM);
 	}
@@ -1317,20 +1420,25 @@ int sk_attach_filter(struct sock_fprog *fprog, struct sock *sk)
 	int err;
 
 	if (IS_ERR(prog))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(prog);
+}
 
 	err = __sk_attach_prog(prog, sk);
 	if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__bpf_prog_release(prog);
 		return err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL_GPL(sk_attach_filter);
 
 int sk_reuseport_attach_filter(struct sock_fprog *fprog, struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bpf_prog *prog = __get_filter(fprog, sk);
 	int err;
 
@@ -1348,6 +1456,7 @@ int sk_reuseport_attach_filter(struct sock_fprog *fprog, struct sock *sk)
 
 static struct bpf_prog *__get_bpf(u32 ufd, struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sock_flag(sk, SOCK_FILTER_LOCKED))
 		return ERR_PTR(-EPERM);
 
@@ -1356,6 +1465,7 @@ static struct bpf_prog *__get_bpf(u32 ufd, struct sock *sk)
 
 int sk_attach_bpf(u32 ufd, struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bpf_prog *prog = __get_bpf(ufd, sk);
 	int err;
 
@@ -1373,6 +1483,7 @@ int sk_attach_bpf(u32 ufd, struct sock *sk)
 
 int sk_reuseport_attach_bpf(u32 ufd, struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bpf_prog *prog = __get_bpf(ufd, sk);
 	int err;
 
@@ -1400,12 +1511,14 @@ static DEFINE_PER_CPU(struct bpf_scratchpad, bpf_sp);
 static inline int __bpf_try_make_writable(struct sk_buff *skb,
 					  unsigned int write_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb_ensure_writable(skb, write_len);
 }
 
 static inline int bpf_try_make_writable(struct sk_buff *skb,
 					unsigned int write_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int err = __bpf_try_make_writable(skb, write_len);
 
 	bpf_compute_data_end(skb);
@@ -1414,17 +1527,20 @@ static inline int bpf_try_make_writable(struct sk_buff *skb,
 
 static int bpf_try_make_head_writable(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bpf_try_make_writable(skb, skb_headlen(skb));
 }
 
 static inline void bpf_push_mac_rcsum(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (skb_at_tc_ingress(skb))
 		skb_postpush_rcsum(skb, skb_mac_header(skb), skb->mac_len);
 }
 
 static inline void bpf_pull_mac_rcsum(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (skb_at_tc_ingress(skb))
 		skb_postpull_rcsum(skb, skb_mac_header(skb), skb->mac_len);
 }
@@ -1435,7 +1551,9 @@ BPF_CALL_5(bpf_skb_store_bytes, struct sk_buff *, skb, u32, offset,
 	void *ptr;
 
 	if (unlikely(flags & ~(BPF_F_RECOMPUTE_CSUM | BPF_F_INVALIDATE_HASH)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (unlikely(offset > 0xffff))
 		return -EFAULT;
 	if (unlikely(bpf_try_make_writable(skb, offset + len)))
@@ -1474,6 +1592,7 @@ BPF_CALL_4(bpf_skb_load_bytes, const struct sk_buff *, skb, u32, offset,
 	if (unlikely(offset > 0xffff))
 		goto err_clear;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ptr = skb_header_pointer(skb, offset, len, to);
 	if (unlikely(!ptr))
 		goto err_clear;
@@ -1524,7 +1643,9 @@ BPF_CALL_5(bpf_l3_csum_replace, struct sk_buff *, skb, u32, offset,
 	__sum16 *ptr;
 
 	if (unlikely(flags & ~(BPF_F_HDR_FIELD_MASK)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (unlikely(offset > 0xffff || offset & 1))
 		return -EFAULT;
 	if (unlikely(bpf_try_make_writable(skb, offset + sizeof(*ptr))))
@@ -1676,12 +1797,14 @@ static const struct bpf_func_proto bpf_csum_update_proto = {
 
 static inline int __bpf_rx_skb(struct net_device *dev, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev_forward_skb(dev, skb);
 }
 
 static inline int __bpf_rx_skb_no_mac(struct net_device *dev,
 				      struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = ____dev_forward_skb(dev, skb);
 
 	if (likely(!ret)) {
@@ -1696,6 +1819,7 @@ static inline int __bpf_tx_skb(struct net_device *dev, struct sk_buff *skb)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(__this_cpu_read(xmit_recursion) > XMIT_RECURSION_LIMIT)) {
 		net_crit_ratelimited("bpf: recursion limit reached on datapath, buggy bpf program?\n");
 		kfree_skb(skb);
@@ -1725,7 +1849,9 @@ static int __bpf_redirect_no_mac(struct sk_buff *skb, struct net_device *dev,
 	 * to ensure that rcsum starts at net header.
 	 */
 	if (!skb_at_tc_ingress(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb_postpull_rcsum(skb, skb_mac_header(skb), mlen);
+}
 	skb_pop_mac_header(skb);
 	skb_reset_mac_len(skb);
 	return flags & BPF_F_INGRESS ?
@@ -1749,6 +1875,7 @@ static int __bpf_redirect_common(struct sk_buff *skb, struct net_device *dev,
 static int __bpf_redirect(struct sk_buff *skb, struct net_device *dev,
 			  u32 flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev_is_mac_header_xmit(dev))
 		return __bpf_redirect_common(skb, dev, flags);
 	else
@@ -1762,7 +1889,9 @@ BPF_CALL_3(bpf_clone_redirect, struct sk_buff *, skb, u32, ifindex, u64, flags)
 	int ret;
 
 	if (unlikely(flags & ~(BPF_F_INGRESS)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	dev = dev_get_by_index_rcu(dev_net(skb->dev), ifindex);
 	if (unlikely(!dev))
@@ -1810,7 +1939,9 @@ BPF_CALL_2(bpf_redirect, u32, ifindex, u64, flags)
 	struct redirect_info *ri = this_cpu_ptr(&redirect_info);
 
 	if (unlikely(flags & ~(BPF_F_INGRESS)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return TC_ACT_SHOT;
+}
 
 	ri->ifindex = ifindex;
 	ri->flags = flags;
@@ -1820,6 +1951,7 @@ BPF_CALL_2(bpf_redirect, u32, ifindex, u64, flags)
 
 int skb_do_redirect(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct redirect_info *ri = this_cpu_ptr(&redirect_info);
 	struct net_device *dev;
 
@@ -1848,7 +1980,9 @@ BPF_CALL_4(bpf_sk_redirect_map, struct sk_buff *, skb,
 
 	/* If user passes invalid input drop the packet. */
 	if (unlikely(flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return SK_DROP;
+}
 
 	tcb->bpf.key = key;
 	tcb->bpf.flags = flags;
@@ -1863,6 +1997,7 @@ struct sock *do_sk_redirect_map(struct sk_buff *skb)
 	struct sock *sk = NULL;
 
 	if (tcb->bpf.map) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk = __sock_map_lookup_elem(tcb->bpf.map, tcb->bpf.key);
 
 		tcb->bpf.key = 0;
@@ -1884,6 +2019,7 @@ static const struct bpf_func_proto bpf_sk_redirect_map_proto = {
 
 BPF_CALL_1(bpf_get_cgroup_classid, const struct sk_buff *, skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return task_get_classid(skb);
 }
 
@@ -1896,6 +2032,7 @@ static const struct bpf_func_proto bpf_get_cgroup_classid_proto = {
 
 BPF_CALL_1(bpf_get_route_realm, const struct sk_buff *, skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dst_tclassid(skb);
 }
 
@@ -1966,6 +2103,7 @@ BPF_CALL_3(bpf_skb_vlan_push, struct sk_buff *, skb, __be16, vlan_proto,
 		     vlan_proto != htons(ETH_P_8021AD)))
 		vlan_proto = htons(ETH_P_8021Q);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bpf_push_mac_rcsum(skb);
 	ret = skb_vlan_push(skb, vlan_proto, vlan_tci);
 	bpf_pull_mac_rcsum(skb);
@@ -2047,6 +2185,7 @@ static int bpf_skb_net_hdr_push(struct sk_buff *skb, u32 off, u32 len)
 	 */
 	ret = bpf_skb_generic_push(skb, off, len);
 	if (likely(!ret)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb->mac_header -= len;
 		skb->network_header -= len;
 		if (trans_same)
@@ -2064,6 +2203,7 @@ static int bpf_skb_net_hdr_pop(struct sk_buff *skb, u32 off, u32 len)
 	/* Same here, __skb_push()/__skb_pull() pair not needed. */
 	ret = bpf_skb_generic_pop(skb, off, len);
 	if (likely(!ret)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb->mac_header += len;
 		skb->network_header += len;
 		if (trans_same)
@@ -2081,7 +2221,9 @@ static int bpf_skb_proto_4_to_6(struct sk_buff *skb)
 
 	ret = skb_cow(skb, len_diff);
 	if (unlikely(ret < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = bpf_skb_net_hdr_push(skb, off, len_diff);
 	if (unlikely(ret < 0))
@@ -2117,7 +2259,9 @@ static int bpf_skb_proto_6_to_4(struct sk_buff *skb)
 
 	ret = skb_unclone(skb, GFP_ATOMIC);
 	if (unlikely(ret < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = bpf_skb_net_hdr_pop(skb, off, len_diff);
 	if (unlikely(ret < 0))
@@ -2149,6 +2293,7 @@ static int bpf_skb_proto_xlat(struct sk_buff *skb, __be16 to_proto)
 {
 	__be16 from_proto = skb->protocol;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (from_proto == htons(ETH_P_IP) &&
 	      to_proto == htons(ETH_P_IPV6))
 		return bpf_skb_proto_4_to_6(skb);
@@ -2166,7 +2311,9 @@ BPF_CALL_3(bpf_skb_change_proto, struct sk_buff *, skb, __be16, proto,
 	int ret;
 
 	if (unlikely(flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* General idea is that this helper does the basic groundwork
 	 * needed for changing the protocol, and eBPF program fills the
@@ -2220,6 +2367,7 @@ static const struct bpf_func_proto bpf_skb_change_type_proto = {
 
 static u32 bpf_skb_net_base_len(const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (skb->protocol) {
 	case htons(ETH_P_IP):
 		return sizeof(struct iphdr);
@@ -2232,6 +2380,7 @@ static u32 bpf_skb_net_base_len(const struct sk_buff *skb)
 
 static int bpf_skb_net_grow(struct sk_buff *skb, u32 len_diff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 off = skb_mac_header_len(skb) + bpf_skb_net_base_len(skb);
 	int ret;
 
@@ -2256,6 +2405,7 @@ static int bpf_skb_net_grow(struct sk_buff *skb, u32 len_diff)
 
 static int bpf_skb_net_shrink(struct sk_buff *skb, u32 len_diff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 off = skb_mac_header_len(skb) + bpf_skb_net_base_len(skb);
 	int ret;
 
@@ -2280,12 +2430,14 @@ static int bpf_skb_net_shrink(struct sk_buff *skb, u32 len_diff)
 
 static u32 __bpf_skb_max_len(const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb->dev->mtu + skb->dev->hard_header_len;
 }
 
 static int bpf_skb_adjust_net(struct sk_buff *skb, s32 len_diff)
 {
 	bool trans_same = skb->transport_header == skb->network_header;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 len_cur, len_diff_abs = abs(len_diff);
 	u32 len_min = bpf_skb_net_base_len(skb);
 	u32 len_max = __bpf_skb_max_len(skb);
@@ -2319,7 +2471,9 @@ BPF_CALL_4(bpf_skb_adjust_room, struct sk_buff *, skb, s32, len_diff,
 	   u32, mode, u64, flags)
 {
 	if (unlikely(flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (likely(mode == BPF_ADJ_ROOM_NET))
 		return bpf_skb_adjust_net(skb, len_diff);
 
@@ -2338,6 +2492,7 @@ static const struct bpf_func_proto bpf_skb_adjust_room_proto = {
 
 static u32 __bpf_skb_min_len(const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 min_len = skb_network_offset(skb);
 
 	if (skb_transport_header_was_set(skb))
@@ -2355,18 +2510,22 @@ static int bpf_skb_grow_rcsum(struct sk_buff *skb, unsigned int new_len)
 
 	ret = __skb_grow_rcsum(skb, new_len);
 	if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(skb->data + old_len, 0, new_len - old_len);
+}
 	return ret;
 }
 
 static int bpf_skb_trim_rcsum(struct sk_buff *skb, unsigned int new_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __skb_trim_rcsum(skb, new_len);
 }
 
 BPF_CALL_3(bpf_skb_change_tail, struct sk_buff *, skb, u32, new_len,
 	   u64, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 max_len = __bpf_skb_max_len(skb);
 	u32 min_len = __bpf_skb_min_len(skb);
 	int ret;
@@ -2418,6 +2577,7 @@ static const struct bpf_func_proto bpf_skb_change_tail_proto = {
 BPF_CALL_3(bpf_skb_change_head, struct sk_buff *, skb, u32, head_room,
 	   u64, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 max_len = __bpf_skb_max_len(skb);
 	u32 new_len = skb->len + head_room;
 	int ret;
@@ -2484,6 +2644,7 @@ static int __bpf_tx_xdp(struct net_device *dev,
 	int err;
 
 	if (!dev->netdev_ops->ndo_xdp_xmit) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
 	}
 
@@ -2499,6 +2660,7 @@ static int __bpf_tx_xdp(struct net_device *dev,
 
 void xdp_do_flush_map(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct redirect_info *ri = this_cpu_ptr(&redirect_info);
 	struct bpf_map *map = ri->map_to_flush;
 
@@ -2511,12 +2673,14 @@ EXPORT_SYMBOL_GPL(xdp_do_flush_map);
 static inline bool xdp_map_invalid(const struct bpf_prog *xdp_prog,
 				   unsigned long aux)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (unsigned long)xdp_prog->aux != aux;
 }
 
 static int xdp_do_redirect_map(struct net_device *dev, struct xdp_buff *xdp,
 			       struct bpf_prog *xdp_prog)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct redirect_info *ri = this_cpu_ptr(&redirect_info);
 	unsigned long map_owner = ri->map_owner;
 	struct bpf_map *map = ri->map;
@@ -2557,6 +2721,7 @@ static int xdp_do_redirect_map(struct net_device *dev, struct xdp_buff *xdp,
 int xdp_do_redirect(struct net_device *dev, struct xdp_buff *xdp,
 		    struct bpf_prog *xdp_prog)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct redirect_info *ri = this_cpu_ptr(&redirect_info);
 	struct net_device *fwd;
 	u32 index = ri->ifindex;
@@ -2587,6 +2752,7 @@ EXPORT_SYMBOL_GPL(xdp_do_redirect);
 int xdp_do_generic_redirect(struct net_device *dev, struct sk_buff *skb,
 			    struct bpf_prog *xdp_prog)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct redirect_info *ri = this_cpu_ptr(&redirect_info);
 	unsigned long map_owner = ri->map_owner;
 	struct bpf_map *map = ri->map;
@@ -2641,7 +2807,9 @@ BPF_CALL_2(bpf_xdp_redirect, u32, ifindex, u64, flags)
 	struct redirect_info *ri = this_cpu_ptr(&redirect_info);
 
 	if (unlikely(flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return XDP_ABORTED;
+}
 
 	ri->ifindex = ifindex;
 	ri->flags = flags;
@@ -2665,7 +2833,9 @@ BPF_CALL_4(bpf_xdp_redirect_map, struct bpf_map *, map, u32, ifindex, u64, flags
 	struct redirect_info *ri = this_cpu_ptr(&redirect_info);
 
 	if (unlikely(flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return XDP_ABORTED;
+}
 
 	ri->ifindex = ifindex;
 	ri->flags = flags;
@@ -2689,6 +2859,7 @@ static const struct bpf_func_proto bpf_xdp_redirect_map_proto = {
 
 bool bpf_helper_changes_pkt_data(void *func)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (func == bpf_skb_vlan_push ||
 	    func == bpf_skb_vlan_pop ||
 	    func == bpf_skb_store_bytes ||
@@ -2709,6 +2880,7 @@ bool bpf_helper_changes_pkt_data(void *func)
 static unsigned long bpf_skb_copy(void *dst_buff, const void *skb,
 				  unsigned long off, unsigned long len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	void *ptr = skb_header_pointer(skb, off, len, dst_buff);
 
 	if (unlikely(!ptr))
@@ -2725,7 +2897,9 @@ BPF_CALL_5(bpf_skb_event_output, struct sk_buff *, skb, struct bpf_map *, map,
 	u64 skb_size = (flags & BPF_F_CTXLEN_MASK) >> 32;
 
 	if (unlikely(flags & ~(BPF_F_CTXLEN_MASK | BPF_F_INDEX_MASK)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (unlikely(skb_size > skb->len))
 		return -EFAULT;
 
@@ -2746,12 +2920,14 @@ static const struct bpf_func_proto bpf_skb_event_output_proto = {
 
 static unsigned short bpf_tunnel_key_af(u64 flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return flags & BPF_F_TUNINFO_IPV6 ? AF_INET6 : AF_INET;
 }
 
 BPF_CALL_4(bpf_skb_get_tunnel_key, struct sk_buff *, skb, struct bpf_tunnel_key *, to,
 	   u32, size, u64, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ip_tunnel_info *info = skb_tunnel_info(skb);
 	u8 compat[sizeof(struct bpf_tunnel_key)];
 	void *to_orig = to;
@@ -2818,6 +2994,7 @@ static const struct bpf_func_proto bpf_skb_get_tunnel_key_proto = {
 
 BPF_CALL_3(bpf_skb_get_tunnel_opt, struct sk_buff *, skb, u8 *, to, u32, size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ip_tunnel_info *info = skb_tunnel_info(skb);
 	int err;
 
@@ -2925,6 +3102,7 @@ static const struct bpf_func_proto bpf_skb_set_tunnel_key_proto = {
 BPF_CALL_3(bpf_skb_set_tunnel_opt, struct sk_buff *, skb,
 	   const u8 *, from, u32, size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel_info *info = skb_tunnel_info(skb);
 	const struct metadata_dst *md = this_cpu_ptr(md_dst);
 
@@ -2950,6 +3128,7 @@ static const struct bpf_func_proto bpf_skb_set_tunnel_opt_proto = {
 static const struct bpf_func_proto *
 bpf_get_skb_set_tunnel_proto(enum bpf_func_id which)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!md_dst) {
 		/* Race is not possible, since it's called from verifier
 		 * that is holding verifier mutex.
@@ -2979,6 +3158,7 @@ BPF_CALL_3(bpf_skb_under_cgroup, struct sk_buff *, skb, struct bpf_map *, map,
 	struct sock *sk;
 
 	sk = skb_to_full_sk(skb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!sk || !sk_fullsock(sk))
 		return -ENOENT;
 	if (unlikely(idx >= array->map.max_entries))
@@ -3003,6 +3183,7 @@ static const struct bpf_func_proto bpf_skb_under_cgroup_proto = {
 static unsigned long bpf_xdp_copy(void *dst_buff, const void *src_buff,
 				  unsigned long off, unsigned long len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(dst_buff, src_buff + off, len);
 	return 0;
 }
@@ -3013,7 +3194,9 @@ BPF_CALL_5(bpf_xdp_event_output, struct xdp_buff *, xdp, struct bpf_map *, map,
 	u64 xdp_size = (flags & BPF_F_CTXLEN_MASK) >> 32;
 
 	if (unlikely(flags & ~(BPF_F_CTXLEN_MASK | BPF_F_INDEX_MASK)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (unlikely(xdp_size > (unsigned long)(xdp->data_end - xdp->data)))
 		return -EFAULT;
 
@@ -3034,6 +3217,7 @@ static const struct bpf_func_proto bpf_xdp_event_output_proto = {
 
 BPF_CALL_1(bpf_get_socket_cookie, struct sk_buff *, skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb->sk ? sock_gen_cookie(skb->sk) : 0;
 }
 
@@ -3046,6 +3230,7 @@ static const struct bpf_func_proto bpf_get_socket_cookie_proto = {
 
 BPF_CALL_1(bpf_get_socket_uid, struct sk_buff *, skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sock *sk = sk_to_full_sk(skb->sk);
 	kuid_t kuid;
 
@@ -3070,7 +3255,9 @@ BPF_CALL_5(bpf_setsockopt, struct bpf_sock_ops_kern *, bpf_sock,
 	int val;
 
 	if (!sk_fullsock(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (level == SOL_SOCKET) {
 		if (optlen != sizeof(int))
@@ -3165,6 +3352,7 @@ static const struct bpf_func_proto bpf_setsockopt_proto = {
 static const struct bpf_func_proto *
 bpf_base_func_proto(enum bpf_func_id func_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (func_id) {
 	case BPF_FUNC_map_lookup_elem:
 		return &bpf_map_lookup_elem_proto;
@@ -3193,6 +3381,7 @@ bpf_base_func_proto(enum bpf_func_id func_id)
 static const struct bpf_func_proto *
 sock_filter_func_proto(enum bpf_func_id func_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (func_id) {
 	/* inet and inet6 sockets are created in a process
 	 * context so there is always a valid uid/gid
@@ -3207,6 +3396,7 @@ sock_filter_func_proto(enum bpf_func_id func_id)
 static const struct bpf_func_proto *
 sk_filter_func_proto(enum bpf_func_id func_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (func_id) {
 	case BPF_FUNC_skb_load_bytes:
 		return &bpf_skb_load_bytes_proto;
@@ -3222,6 +3412,7 @@ sk_filter_func_proto(enum bpf_func_id func_id)
 static const struct bpf_func_proto *
 tc_cls_act_func_proto(enum bpf_func_id func_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (func_id) {
 	case BPF_FUNC_skb_store_bytes:
 		return &bpf_skb_store_bytes_proto;
@@ -3289,6 +3480,7 @@ tc_cls_act_func_proto(enum bpf_func_id func_id)
 static const struct bpf_func_proto *
 xdp_func_proto(enum bpf_func_id func_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (func_id) {
 	case BPF_FUNC_perf_event_output:
 		return &bpf_xdp_event_output_proto;
@@ -3308,6 +3500,7 @@ xdp_func_proto(enum bpf_func_id func_id)
 static const struct bpf_func_proto *
 lwt_inout_func_proto(enum bpf_func_id func_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (func_id) {
 	case BPF_FUNC_skb_load_bytes:
 		return &bpf_skb_load_bytes_proto;
@@ -3335,6 +3528,7 @@ lwt_inout_func_proto(enum bpf_func_id func_id)
 static const struct bpf_func_proto *
 	sock_ops_func_proto(enum bpf_func_id func_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (func_id) {
 	case BPF_FUNC_setsockopt:
 		return &bpf_setsockopt_proto;
@@ -3347,6 +3541,7 @@ static const struct bpf_func_proto *
 
 static const struct bpf_func_proto *sk_skb_func_proto(enum bpf_func_id func_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (func_id) {
 	case BPF_FUNC_skb_store_bytes:
 		return &bpf_skb_store_bytes_proto;
@@ -3372,6 +3567,7 @@ static const struct bpf_func_proto *sk_skb_func_proto(enum bpf_func_id func_id)
 static const struct bpf_func_proto *
 lwt_xmit_func_proto(enum bpf_func_id func_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (func_id) {
 	case BPF_FUNC_skb_get_tunnel_key:
 		return &bpf_skb_get_tunnel_key_proto;
@@ -3409,6 +3605,7 @@ static bool bpf_skb_is_valid_access(int off, int size, enum bpf_access_type type
 {
 	const int size_default = sizeof(__u32);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (off < 0 || off >= sizeof(struct __sk_buff))
 		return false;
 
@@ -3449,6 +3646,7 @@ static bool sk_filter_is_valid_access(int off, int size,
 				      enum bpf_access_type type,
 				      struct bpf_insn_access_aux *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (off) {
 	case bpf_ctx_range(struct __sk_buff, tc_classid):
 	case bpf_ctx_range(struct __sk_buff, data):
@@ -3473,6 +3671,7 @@ static bool lwt_is_valid_access(int off, int size,
 				enum bpf_access_type type,
 				struct bpf_insn_access_aux *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (off) {
 	case bpf_ctx_range(struct __sk_buff, tc_classid):
 	case bpf_ctx_range_till(struct __sk_buff, family, local_port):
@@ -3506,6 +3705,7 @@ static bool sock_filter_is_valid_access(int off, int size,
 					enum bpf_access_type type,
 					struct bpf_insn_access_aux *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type == BPF_WRITE) {
 		switch (off) {
 		case offsetof(struct bpf_sock, bound_dev_if):
@@ -3534,7 +3734,9 @@ static int bpf_unclone_prologue(struct bpf_insn *insn_buf, bool direct_write,
 	struct bpf_insn *insn = insn_buf;
 
 	if (!direct_write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* if (!skb->cloned)
 	 *       goto start;
@@ -3570,6 +3772,7 @@ static int bpf_unclone_prologue(struct bpf_insn *insn_buf, bool direct_write,
 static int tc_cls_act_prologue(struct bpf_insn *insn_buf, bool direct_write,
 			       const struct bpf_prog *prog)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bpf_unclone_prologue(insn_buf, direct_write, prog, TC_ACT_SHOT);
 }
 
@@ -3577,6 +3780,7 @@ static bool tc_cls_act_is_valid_access(int off, int size,
 				       enum bpf_access_type type,
 				       struct bpf_insn_access_aux *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type == BPF_WRITE) {
 		switch (off) {
 		case bpf_ctx_range(struct __sk_buff, mark):
@@ -3606,6 +3810,7 @@ static bool tc_cls_act_is_valid_access(int off, int size,
 
 static bool __is_valid_xdp_access(int off, int size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (off < 0 || off >= sizeof(struct xdp_md))
 		return false;
 	if (off % size != 0)
@@ -3620,6 +3825,7 @@ static bool xdp_is_valid_access(int off, int size,
 				enum bpf_access_type type,
 				struct bpf_insn_access_aux *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type == BPF_WRITE)
 		return false;
 
@@ -3639,6 +3845,7 @@ void bpf_warn_invalid_xdp_action(u32 act)
 {
 	const u32 act_max = XDP_REDIRECT;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ONCE(1, "%s XDP return value %u, expect packet loss!\n",
 		  act > act_max ? "Illegal" : "Driver unsupported",
 		  act);
@@ -3647,6 +3854,7 @@ EXPORT_SYMBOL_GPL(bpf_warn_invalid_xdp_action);
 
 static bool __is_valid_sock_ops_access(int off, int size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (off < 0 || off >= sizeof(struct bpf_sock_ops))
 		return false;
 	/* The verifier guarantees that size > 0. */
@@ -3662,6 +3870,7 @@ static bool sock_ops_is_valid_access(int off, int size,
 				     enum bpf_access_type type,
 				     struct bpf_insn_access_aux *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type == BPF_WRITE) {
 		switch (off) {
 		case offsetof(struct bpf_sock_ops, op) ...
@@ -3678,6 +3887,7 @@ static bool sock_ops_is_valid_access(int off, int size,
 static int sk_skb_prologue(struct bpf_insn *insn_buf, bool direct_write,
 			   const struct bpf_prog *prog)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bpf_unclone_prologue(insn_buf, direct_write, prog, SK_DROP);
 }
 
@@ -3685,6 +3895,7 @@ static bool sk_skb_is_valid_access(int off, int size,
 				   enum bpf_access_type type,
 				   struct bpf_insn_access_aux *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type == BPF_WRITE) {
 		switch (off) {
 		case bpf_ctx_range(struct __sk_buff, tc_index):
@@ -4339,7 +4550,9 @@ int sk_detach_filter(struct sock *sk)
 	struct sk_filter *filter;
 
 	if (sock_flag(sk, SOCK_FILTER_LOCKED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	filter = rcu_dereference_protected(sk->sk_filter,
 					   lockdep_sock_is_held(sk));
@@ -4361,6 +4574,7 @@ int sk_get_filter(struct sock *sk, struct sock_filter __user *ubuf,
 	int ret = 0;
 
 	lock_sock(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	filter = rcu_dereference_protected(sk->sk_filter,
 					   lockdep_sock_is_held(sk));
 	if (!filter)
diff --git a/net/core/flow_dissector.c b/net/core/flow_dissector.c
index f950b80..9aee2ea 100644
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/kernel.h>
 #include <linux/skbuff.h>
 #include <linux/export.h>
@@ -45,6 +47,7 @@ void skb_flow_dissector_init(struct flow_dissector *flow_dissector,
 		BUG_ON(dissector_uses_key(flow_dissector,
 					  key->key_id));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dissector_set_key(flow_dissector, key->key_id);
 		flow_dissector->offset[key->key_id] = key->offset;
 	}
@@ -76,7 +79,9 @@ static __be16 skb_flow_get_be16(const struct sk_buff *skb, int poff,
 
 	u = __skb_header_pointer(skb, poff, sizeof(_u), data, hlen, &_u);
 	if (u)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return *u;
+}
 
 	return 0;
 }
@@ -98,6 +103,7 @@ __be32 __skb_flow_get_ports(const struct sk_buff *skb, int thoff, u8 ip_proto,
 	int poff = proto_ports_offset(ip_proto);
 
 	if (!data) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		data = skb->data;
 		hlen = skb_headlen(skb);
 	}
@@ -111,6 +117,7 @@ __be32 __skb_flow_get_ports(const struct sk_buff *skb, int thoff, u8 ip_proto,
 			return *ports;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(__skb_flow_get_ports);
@@ -1038,6 +1045,7 @@ void make_flow_keys_digest(struct flow_keys_digest *digest,
 	struct _flow_keys_digest_data *data =
 	    (struct _flow_keys_digest_data *)digest;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(sizeof(*data) > sizeof(*digest));
 
 	memset(digest, 0, sizeof(*digest));
@@ -1162,13 +1170,16 @@ u32 skb_get_poff(const struct sk_buff *skb)
 	struct flow_keys keys;
 
 	if (!skb_flow_dissect_flow_keys(skb, &keys, 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return __skb_get_poff(skb, skb->data, &keys, skb_headlen(skb));
 }
 
 __u32 __get_hash_from_flowi6(const struct flowi6 *fl6, struct flow_keys *keys)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(keys, 0, sizeof(*keys));
 
 	memcpy(&keys->addrs.v6addrs.src, &fl6->saddr,
@@ -1188,6 +1199,7 @@ EXPORT_SYMBOL(__get_hash_from_flowi6);
 
 __u32 __get_hash_from_flowi4(const struct flowi4 *fl4, struct flow_keys *keys)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(keys, 0, sizeof(*keys));
 
 	keys->addrs.v4addrs.src = fl4->saddr;
diff --git a/net/core/gen_estimator.c b/net/core/gen_estimator.c
index 00ecec4..6dd6fc9 100644
--- a/net/core/gen_estimator.c
+++ b/net/core/gen_estimator.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/gen_estimator.c	Simple rate estimator.
  *
@@ -66,6 +68,7 @@ struct net_rate_estimator {
 static void est_fetch_counters(struct net_rate_estimator *e,
 			       struct gnet_stats_basic_packed *b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (e->stats_lock)
 		spin_lock(e->stats_lock);
 
@@ -99,6 +102,7 @@ static void est_timer(unsigned long arg)
 
 	est->next_jiffies += ((HZ/4) << est->intvl_log);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(time_after_eq(jiffies, est->next_jiffies))) {
 		/* Ouch... timer was delayed. */
 		est->next_jiffies = jiffies + 1;
@@ -131,6 +135,7 @@ int gen_new_estimator(struct gnet_stats_basic_packed *bstats,
 		      seqcount_t *running,
 		      struct nlattr *opt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct gnet_estimator *parm = nla_data(opt);
 	struct net_rate_estimator *old, *est;
 	struct gnet_stats_basic_packed b;
@@ -197,7 +202,9 @@ void gen_kill_estimator(struct net_rate_estimator __rcu **rate_est)
 
 	est = xchg((__force struct net_rate_estimator **)rate_est, NULL);
 	if (est) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		del_timer_sync(&est->timer);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_rcu(est, rcu);
 	}
 }
@@ -223,6 +230,7 @@ int gen_replace_estimator(struct gnet_stats_basic_packed *bstats,
 			  spinlock_t *stats_lock,
 			  seqcount_t *running, struct nlattr *opt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return gen_new_estimator(bstats, cpu_bstats, rate_est,
 				 stats_lock, running, opt);
 }
@@ -236,6 +244,7 @@ EXPORT_SYMBOL(gen_replace_estimator);
  */
 bool gen_estimator_active(struct net_rate_estimator __rcu **rate_est)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !!rcu_access_pointer(*rate_est);
 }
 EXPORT_SYMBOL(gen_estimator_active);
@@ -247,6 +256,7 @@ bool gen_estimator_read(struct net_rate_estimator __rcu **rate_est,
 	unsigned seq;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	est = rcu_dereference(*rate_est);
 	if (!est) {
 		rcu_read_unlock();
diff --git a/net/core/gro_cells.c b/net/core/gro_cells.c
index 4b54e5f..191bd14 100644
--- a/net/core/gro_cells.c
+++ b/net/core/gro_cells.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/skbuff.h>
 #include <linux/slab.h>
@@ -14,6 +16,7 @@ int gro_cells_receive(struct gro_cells *gcells, struct sk_buff *skb)
 	struct net_device *dev = skb->dev;
 	struct gro_cell *cell;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!gcells->cells || skb_cloned(skb) || netif_elide_gro(dev))
 		return netif_rx(skb);
 
@@ -35,6 +38,7 @@ EXPORT_SYMBOL(gro_cells_receive);
 /* called under BH context */
 static int gro_cell_poll(struct napi_struct *napi, int budget)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct gro_cell *cell = container_of(napi, struct gro_cell, napi);
 	struct sk_buff *skb;
 	int work_done = 0;
@@ -58,7 +62,9 @@ int gro_cells_init(struct gro_cells *gcells, struct net_device *dev)
 
 	gcells->cells = alloc_percpu(struct gro_cell);
 	if (!gcells->cells)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	for_each_possible_cpu(i) {
 		struct gro_cell *cell = per_cpu_ptr(gcells->cells, i);
@@ -71,6 +77,7 @@ int gro_cells_init(struct gro_cells *gcells, struct net_device *dev)
 			       NAPI_POLL_WEIGHT);
 		napi_enable(&cell->napi);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(gro_cells_init);
@@ -80,7 +87,9 @@ void gro_cells_destroy(struct gro_cells *gcells)
 	int i;
 
 	if (!gcells->cells)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	for_each_possible_cpu(i) {
 		struct gro_cell *cell = per_cpu_ptr(gcells->cells, i);
 
diff --git a/net/core/link_watch.c b/net/core/link_watch.c
index 9828616..9d71b6a 100644
--- a/net/core/link_watch.c
+++ b/net/core/link_watch.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Linux network device link state notification
  *
@@ -44,7 +46,9 @@ static unsigned char default_operstate(const struct net_device *dev)
 			IF_OPER_LOWERLAYERDOWN : IF_OPER_DOWN);
 
 	if (netif_dormant(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return IF_OPER_DORMANT;
+}
 
 	return IF_OPER_UP;
 }
@@ -55,14 +59,18 @@ static void rfc2863_policy(struct net_device *dev)
 	unsigned char operstate = default_operstate(dev);
 
 	if (operstate == dev->operstate)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	write_lock_bh(&dev_base_lock);
 
 	switch(dev->link_mode) {
 	case IF_LINK_MODE_DORMANT:
 		if (operstate == IF_OPER_UP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			operstate = IF_OPER_DORMANT;
+}
 		break;
 
 	case IF_LINK_MODE_DEFAULT:
@@ -80,21 +88,32 @@ void linkwatch_init_dev(struct net_device *dev)
 {
 	/* Handle pre-registration link state changes */
 	if (!netif_carrier_ok(dev) || netif_dormant(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rfc2863_policy(dev);
 }
+}
 
 
 static bool linkwatch_urgent_event(struct net_device *dev)
 {
 	if (!netif_running(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->ifindex != dev_get_iflink(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->priv_flags & IFF_TEAM_PORT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return netif_carrier_ok(dev) &&	qdisc_tx_changing(dev);
 }
 
@@ -108,6 +127,7 @@ static void linkwatch_add_event(struct net_device *dev)
 		list_add_tail(&dev->link_watch_list, &lweventlist);
 		dev_hold(dev);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&lweventlist_lock, flags);
 }
 
@@ -117,25 +137,35 @@ static void linkwatch_schedule_work(int urgent)
 	unsigned long delay = linkwatch_nextevent - jiffies;
 
 	if (test_bit(LW_URGENT, &linkwatch_flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Minimise down-time: drop delay for up event. */
 	if (urgent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (test_and_set_bit(LW_URGENT, &linkwatch_flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		delay = 0;
 	}
 
 	/* If we wrap around we'll delay it by at most HZ. */
 	if (delay > HZ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		delay = 0;
+}
 
 	/*
 	 * If urgent, schedule immediate execution; otherwise, don't
 	 * override the existing timer.
 	 */
 	if (test_bit(LW_URGENT, &linkwatch_flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mod_delayed_work(system_wq, &linkwatch_work, 0);
+}
 	else
 		schedule_delayed_work(&linkwatch_work, delay);
 }
@@ -156,13 +186,18 @@ static void linkwatch_do_dev(struct net_device *dev)
 
 	rfc2863_policy(dev);
 	if (dev->flags & IFF_UP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (netif_carrier_ok(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_activate(dev);
+}
 		else
 			dev_deactivate(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_state_change(dev);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_put(dev);
 }
 
@@ -182,8 +217,11 @@ static void __linkwatch_run_queue(int urgent_only)
 		linkwatch_nextevent = jiffies + HZ;
 	/* Limit wrap-around effect on delay. */
 	else if (time_after(linkwatch_nextevent, jiffies + HZ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		linkwatch_nextevent = jiffies;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clear_bit(LW_URGENT, &linkwatch_flags);
 
 	spin_lock_irq(&lweventlist_lock);
@@ -195,16 +233,21 @@ static void __linkwatch_run_queue(int urgent_only)
 		list_del_init(&dev->link_watch_list);
 
 		if (urgent_only && !linkwatch_urgent_event(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			list_add_tail(&dev->link_watch_list, &lweventlist);
 			continue;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irq(&lweventlist_lock);
 		linkwatch_do_dev(dev);
 		spin_lock_irq(&lweventlist_lock);
 	}
 
 	if (!list_empty(&lweventlist))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		linkwatch_schedule_work(0);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(&lweventlist_lock);
 }
 
@@ -215,18 +258,23 @@ void linkwatch_forget_dev(struct net_device *dev)
 
 	spin_lock_irqsave(&lweventlist_lock, flags);
 	if (!list_empty(&dev->link_watch_list)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del_init(&dev->link_watch_list);
 		clean = 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&lweventlist_lock, flags);
 	if (clean)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		linkwatch_do_dev(dev);
 }
+}
 
 
 /* Must be called with the rtnl semaphore held */
 void linkwatch_run_queue(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__linkwatch_run_queue(0);
 }
 
@@ -246,6 +294,7 @@ void linkwatch_fire_event(struct net_device *dev)
 	if (!test_and_set_bit(__LINK_STATE_LINKWATCH_PENDING, &dev->state)) {
 		linkwatch_add_event(dev);
 	} else if (!urgent)
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 
 	linkwatch_schedule_work(urgent);
diff --git a/net/core/lwt_bpf.c b/net/core/lwt_bpf.c
index 1307731..847db13 100644
--- a/net/core/lwt_bpf.c
+++ b/net/core/lwt_bpf.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (c) 2016 Thomas Graf <tgraf@tgraf.ch>
  *
  * This program is free software; you can redistribute it and/or
diff --git a/net/core/lwtunnel.c b/net/core/lwtunnel.c
index 0b17175..7d256dc 100644
--- a/net/core/lwtunnel.c
+++ b/net/core/lwtunnel.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * lwtunnel	Infrastructure for light weight tunnels like mpls
  *
diff --git a/net/core/neighbour.c b/net/core/neighbour.c
index 741ae25..3a97b76 100644
--- a/net/core/neighbour.c
+++ b/net/core/neighbour.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Generic address resolution entity
  *
@@ -91,12 +93,14 @@ static const struct file_operations neigh_stat_seq_fops;
 
 static int neigh_blackhole(struct neighbour *neigh, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree_skb(skb);
 	return -ENETDOWN;
 }
 
 static void neigh_cleanup_and_release(struct neighbour *neigh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (neigh->parms->neigh_cleanup)
 		neigh->parms->neigh_cleanup(neigh);
 
@@ -124,6 +128,7 @@ static bool neigh_del(struct neighbour *n, __u8 state,
 	bool retval = false;
 
 	write_lock(&n->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (refcount_read(&n->refcnt) == 1 && !(n->nud_state & state)) {
 		struct neighbour *neigh;
 
@@ -147,6 +152,7 @@ bool neigh_remove_one(struct neighbour *ndel, struct neigh_table *tbl)
 	struct neighbour *n;
 	struct neighbour __rcu **np;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nht = rcu_dereference_protected(tbl->nht,
 					lockdep_is_held(&tbl->lock));
 	hash_val = tbl->hash(pkey, ndel->dev, nht->hash_rnd);
@@ -168,6 +174,7 @@ static int neigh_forced_gc(struct neigh_table *tbl)
 	int i;
 	struct neigh_hash_table *nht;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	NEIGH_CACHE_STAT_INC(tbl, forced_gc_runs);
 
 	write_lock_bh(&tbl->lock);
@@ -203,6 +210,7 @@ static void neigh_add_timer(struct neighbour *n, unsigned long when)
 {
 	neigh_hold(n);
 	if (unlikely(mod_timer(&n->timer, when))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk("NEIGH: BUG, double timer add, state is %x\n",
 		       n->nud_state);
 		dump_stack();
@@ -216,6 +224,7 @@ static int neigh_del_timer(struct neighbour *n)
 		neigh_release(n);
 		return 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -224,6 +233,7 @@ static void pneigh_queue_purge(struct sk_buff_head *list)
 	struct sk_buff *skb;
 
 	while ((skb = skb_dequeue(list)) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_put(skb->dev);
 		kfree_skb(skb);
 	}
@@ -247,6 +257,7 @@ static void neigh_flush_dev(struct neigh_table *tbl, struct net_device *dev)
 				np = &n->next;
 				continue;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_assign_pointer(*np,
 				   rcu_dereference_protected(n->next,
 						lockdep_is_held(&tbl->lock)));
@@ -268,11 +279,15 @@ static void neigh_flush_dev(struct neigh_table *tbl, struct net_device *dev)
 				n->arp_queue_len_bytes = 0;
 				n->output = neigh_blackhole;
 				if (n->nud_state & NUD_VALID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					n->nud_state = NUD_NOARP;
+}
 				else
 					n->nud_state = NUD_NONE;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				neigh_dbg(2, "neigh %p is stray\n", n);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			write_unlock(&n->lock);
 			neigh_cleanup_and_release(n);
 		}
@@ -281,6 +296,7 @@ static void neigh_flush_dev(struct neigh_table *tbl, struct net_device *dev)
 
 void neigh_changeaddr(struct neigh_table *tbl, struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_lock_bh(&tbl->lock);
 	neigh_flush_dev(tbl, dev);
 	write_unlock_bh(&tbl->lock);
@@ -310,10 +326,13 @@ static struct neighbour *neigh_alloc(struct neigh_table *tbl, struct net_device
 	if (entries >= tbl->gc_thresh3 ||
 	    (entries >= tbl->gc_thresh2 &&
 	     time_after(now, tbl->last_flush + 5 * HZ))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!neigh_forced_gc(tbl) &&
 		    entries >= tbl->gc_thresh3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net_info_ratelimited("%s: neighbor table overflow!\n",
 					     tbl->id);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NEIGH_CACHE_STAT_INC(tbl, table_fulls);
 			goto out_entries;
 		}
@@ -359,7 +378,9 @@ static struct neigh_hash_table *neigh_hash_alloc(unsigned int shift)
 
 	ret = kmalloc(sizeof(*ret), GFP_ATOMIC);
 	if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	if (size <= PAGE_SIZE)
 		buckets = kzalloc(size, GFP_ATOMIC);
 	else
@@ -367,6 +388,7 @@ static struct neigh_hash_table *neigh_hash_alloc(unsigned int shift)
 			  __get_free_pages(GFP_ATOMIC | __GFP_ZERO,
 					   get_order(size));
 	if (!buckets) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(ret);
 		return NULL;
 	}
@@ -374,11 +396,13 @@ static struct neigh_hash_table *neigh_hash_alloc(unsigned int shift)
 	ret->hash_shift = shift;
 	for (i = 0; i < NEIGH_NUM_HASH_RND; i++)
 		neigh_get_hash_rnd(&ret->hash_rnd[i]);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 static void neigh_hash_free_rcu(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct neigh_hash_table *nht = container_of(head,
 						    struct neigh_hash_table,
 						    rcu);
@@ -398,6 +422,7 @@ static struct neigh_hash_table *neigh_hash_grow(struct neigh_table *tbl,
 	unsigned int i, hash;
 	struct neigh_hash_table *new_nht, *old_nht;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	NEIGH_CACHE_STAT_INC(tbl, hash_grows);
 
 	old_nht = rcu_dereference_protected(tbl->nht,
@@ -440,14 +465,18 @@ struct neighbour *neigh_lookup(struct neigh_table *tbl, const void *pkey,
 
 	NEIGH_CACHE_STAT_INC(tbl, lookups);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock_bh();
 	n = __neigh_lookup_noref(tbl, pkey, dev);
 	if (n) {
 		if (!refcount_inc_not_zero(&n->refcnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			n = NULL;
+}
 		NEIGH_CACHE_STAT_INC(tbl, hits);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock_bh();
 	return n;
 }
@@ -461,6 +490,7 @@ struct neighbour *neigh_lookup_nodev(struct neigh_table *tbl, struct net *net,
 	u32 hash_val;
 	struct neigh_hash_table *nht;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	NEIGH_CACHE_STAT_INC(tbl, lookups);
 
 	rcu_read_lock_bh();
@@ -494,6 +524,7 @@ struct neighbour *__neigh_create(struct neigh_table *tbl, const void *pkey,
 	struct neigh_hash_table *nht;
 
 	if (!n) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = ERR_PTR(-ENOBUFS);
 		goto out;
 	}
@@ -1933,7 +1964,9 @@ static int neightbl_fill_param_info(struct sk_buff *skb,
 
 	nlh = nlmsg_put(skb, pid, seq, type, sizeof(*ndtmsg), flags);
 	if (nlh == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	ndtmsg = nlmsg_data(nlh);
 
@@ -1984,6 +2017,7 @@ static const struct nla_policy nl_ntbl_parm_policy[NDTPA_MAX+1] = {
 static int neightbl_set(struct sk_buff *skb, struct nlmsghdr *nlh,
 			struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct neigh_table *tbl;
 	struct ndtmsg *ndtmsg;
@@ -2144,6 +2178,7 @@ static int neightbl_set(struct sk_buff *skb, struct nlmsghdr *nlh,
 
 static int neightbl_dump_info(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	int family, tidx, nidx = 0;
 	int tbl_skip = cb->args[0];
@@ -2205,8 +2240,11 @@ static int neigh_fill_info(struct sk_buff *skb, struct neighbour *neigh,
 
 	nlh = nlmsg_put(skb, pid, seq, type, sizeof(*ndm), flags);
 	if (nlh == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ndm = nlmsg_data(nlh);
 	ndm->ndm_family	 = neigh->ops->family;
 	ndm->ndm_pad1    = 0;
@@ -2225,6 +2263,7 @@ static int neigh_fill_info(struct sk_buff *skb, struct neighbour *neigh,
 
 		neigh_ha_snapshot(haddr, neigh, neigh->dev);
 		if (nla_put(skb, NDA_LLADDR, neigh->dev->addr_len, haddr) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			read_unlock_bh(&neigh->lock);
 			goto nla_put_failure;
 		}
@@ -2257,7 +2296,9 @@ static int pneigh_fill_info(struct sk_buff *skb, struct pneigh_entry *pn,
 
 	nlh = nlmsg_put(skb, pid, seq, type, sizeof(*ndm), flags);
 	if (nlh == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	ndm = nlmsg_data(nlh);
 	ndm->ndm_family	 = tbl->family;
@@ -2290,7 +2331,9 @@ static bool neigh_master_filtered(struct net_device *dev, int master_idx)
 	struct net_device *master;
 
 	if (!master_idx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	master = netdev_master_upper_dev_get(dev);
 	if (!master || master->ifindex != master_idx)
@@ -2301,6 +2344,7 @@ static bool neigh_master_filtered(struct net_device *dev, int master_idx)
 
 static bool neigh_ifindex_filtered(struct net_device *dev, int filter_idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (filter_idx && dev->ifindex != filter_idx)
 		return true;
 
@@ -2310,6 +2354,7 @@ static bool neigh_ifindex_filtered(struct net_device *dev, int filter_idx)
 static int neigh_dump_table(struct neigh_table *tbl, struct sk_buff *skb,
 			    struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	const struct nlmsghdr *nlh = cb->nlh;
 	struct nlattr *tb[NDA_MAX + 1];
@@ -2376,6 +2421,7 @@ static int pneigh_dump_table(struct neigh_table *tbl, struct sk_buff *skb,
 
 	read_lock_bh(&tbl->lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (h = s_h; h <= PNEIGH_HASHMASK; h++) {
 		if (h > s_h)
 			s_idx = 0;
@@ -2450,6 +2496,7 @@ void neigh_for_each(struct neigh_table *tbl, void (*cb)(struct neighbour *, void
 	struct neigh_hash_table *nht;
 
 	rcu_read_lock_bh();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nht = rcu_dereference_bh(tbl->nht);
 
 	read_lock(&tbl->lock); /* avoid resizes */
@@ -2473,6 +2520,7 @@ void __neigh_for_each_release(struct neigh_table *tbl,
 	int chain;
 	struct neigh_hash_table *nht;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nht = rcu_dereference_protected(tbl->nht,
 					lockdep_is_held(&tbl->lock));
 	for (chain = 0; chain < (1 << nht->hash_shift); chain++) {
@@ -2512,6 +2560,7 @@ int neigh_xmit(int index, struct net_device *dev,
 		tbl = neigh_tables[index];
 		if (!tbl)
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock_bh();
 		neigh = __neigh_lookup_noref(tbl, addr, dev);
 		if (!neigh)
@@ -2550,6 +2599,7 @@ static struct neighbour *neigh_get_first(struct seq_file *seq)
 	int bucket = state->bucket;
 
 	state->flags &= ~NEIGH_SEQ_IS_PNEIGH;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (bucket = 0; bucket < (1 << nht->hash_shift); bucket++) {
 		n = rcu_dereference_bh(nht->hash_buckets[bucket]);
 
@@ -2589,6 +2639,7 @@ static struct neighbour *neigh_get_next(struct seq_file *seq,
 	struct neigh_hash_table *nht = state->nht;
 
 	if (state->neigh_sub_iter) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		void *v = state->neigh_sub_iter(state, n, pos);
 		if (v)
 			return n;
@@ -2630,6 +2681,7 @@ static struct neighbour *neigh_get_next(struct seq_file *seq,
 
 static struct neighbour *neigh_get_idx(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct neighbour *n = neigh_get_first(seq);
 
 	if (n) {
@@ -2652,6 +2704,7 @@ static struct pneigh_entry *pneigh_get_first(struct seq_file *seq)
 	int bucket = state->bucket;
 
 	state->flags |= NEIGH_SEQ_IS_PNEIGH;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (bucket = 0; bucket <= PNEIGH_HASHMASK; bucket++) {
 		pn = tbl->phash_buckets[bucket];
 		while (pn && !net_eq(pneigh_net(pn), net))
@@ -2673,6 +2726,7 @@ static struct pneigh_entry *pneigh_get_next(struct seq_file *seq,
 	struct neigh_table *tbl = state->tbl;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pn = pn->next;
 	} while (pn && !net_eq(pneigh_net(pn), net));
 
@@ -2694,6 +2748,7 @@ static struct pneigh_entry *pneigh_get_next(struct seq_file *seq,
 
 static struct pneigh_entry *pneigh_get_idx(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pneigh_entry *pn = pneigh_get_first(seq);
 
 	if (pn) {
@@ -2714,6 +2769,7 @@ static void *neigh_get_idx_any(struct seq_file *seq, loff_t *pos)
 	loff_t idxpos = *pos;
 
 	rc = neigh_get_idx(seq, &idxpos);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!rc && !(state->flags & NEIGH_SEQ_NEIGH_ONLY))
 		rc = pneigh_get_idx(seq, &idxpos);
 
@@ -2730,6 +2786,7 @@ void *neigh_seq_start(struct seq_file *seq, loff_t *pos, struct neigh_table *tbl
 	state->flags = (neigh_seq_flags & ~NEIGH_SEQ_IS_PNEIGH);
 
 	rcu_read_lock_bh();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	state->nht = rcu_dereference_bh(tbl->nht);
 
 	return *pos ? neigh_get_idx_any(seq, pos) : SEQ_START_TOKEN;
@@ -2742,6 +2799,7 @@ void *neigh_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 	void *rc;
 
 	if (v == SEQ_START_TOKEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = neigh_get_first(seq);
 		goto out;
 	}
@@ -2766,6 +2824,7 @@ EXPORT_SYMBOL(neigh_seq_next);
 void neigh_seq_stop(struct seq_file *seq, void *v)
 	__releases(rcu_bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock_bh();
 }
 EXPORT_SYMBOL(neigh_seq_stop);
@@ -2778,7 +2837,9 @@ static void *neigh_stat_seq_start(struct seq_file *seq, loff_t *pos)
 	int cpu;
 
 	if (*pos == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return SEQ_START_TOKEN;
+}
 
 	for (cpu = *pos-1; cpu < nr_cpu_ids; ++cpu) {
 		if (!cpu_possible(cpu))
@@ -2794,6 +2855,7 @@ static void *neigh_stat_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 	struct neigh_table *tbl = seq->private;
 	int cpu;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (cpu = *pos; cpu < nr_cpu_ids; ++cpu) {
 		if (!cpu_possible(cpu))
 			continue;
@@ -2814,6 +2876,7 @@ static int neigh_stat_seq_show(struct seq_file *seq, void *v)
 	struct neigh_statistics *st = v;
 
 	if (v == SEQ_START_TOKEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_printf(seq, "entries  allocs destroys hash_grows  lookups hits  res_failed  rcv_probes_mcast rcv_probes_ucast  periodic_gc_runs forced_gc_runs unresolved_discards table_fulls\n");
 		return 0;
 	}
@@ -2852,6 +2915,7 @@ static const struct seq_operations neigh_stat_seq_ops = {
 
 static int neigh_stat_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = seq_open(file, &neigh_stat_seq_ops);
 
 	if (!ret) {
@@ -2902,11 +2966,14 @@ static void __neigh_notify(struct neighbour *n, int type, int flags,
 	return;
 errout:
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtnl_set_sk_err(net, RTNLGRP_NEIGH, err);
 }
+}
 
 void neigh_app_ns(struct neighbour *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__neigh_notify(n, RTM_GETNEIGH, NLM_F_REQUEST, 0);
 }
 EXPORT_SYMBOL(neigh_app_ns);
@@ -2929,6 +2996,7 @@ static int proc_unres_qlen(struct ctl_table *ctl, int write,
 	size = *(int *)ctl->data / SKB_TRUESIZE(ETH_FRAME_LEN);
 	ret = proc_dointvec_minmax(&tmp, write, buffer, lenp, ppos);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (write && !ret)
 		*(int *)ctl->data = size * SKB_TRUESIZE(ETH_FRAME_LEN);
 	return ret;
@@ -2937,6 +3005,7 @@ static int proc_unres_qlen(struct ctl_table *ctl, int write,
 static struct neigh_parms *neigh_get_dev_parms_rcu(struct net_device *dev,
 						   int family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (family) {
 	case AF_INET:
 		return __in_dev_arp_parms_get_rcu(dev);
@@ -2953,6 +3022,7 @@ static void neigh_copy_dflt_parms(struct net *net, struct neigh_parms *p,
 	int family = neigh_parms_family(p);
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev_rcu(net, dev) {
 		struct neigh_parms *dst_p =
 				neigh_get_dev_parms_rcu(dev, family);
@@ -2971,7 +3041,9 @@ static void neigh_proc_update(struct ctl_table *ctl, int write)
 	int index = (int *) ctl->data - p->data;
 
 	if (!write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	set_bit(index, p->data_state);
 	if (index == NEIGH_VAR_DELAY_PROBE_TIME)
@@ -2998,6 +3070,7 @@ static int neigh_proc_dointvec_zero_intmax(struct ctl_table *ctl, int write,
 int neigh_proc_dointvec(struct ctl_table *ctl, int write,
 			void __user *buffer, size_t *lenp, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = proc_dointvec(ctl, write, buffer, lenp, ppos);
 
 	neigh_proc_update(ctl, write);
@@ -3009,6 +3082,7 @@ int neigh_proc_dointvec_jiffies(struct ctl_table *ctl, int write,
 				void __user *buffer,
 				size_t *lenp, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = proc_dointvec_jiffies(ctl, write, buffer, lenp, ppos);
 
 	neigh_proc_update(ctl, write);
@@ -3020,6 +3094,7 @@ static int neigh_proc_dointvec_userhz_jiffies(struct ctl_table *ctl, int write,
 					      void __user *buffer,
 					      size_t *lenp, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = proc_dointvec_userhz_jiffies(ctl, write, buffer, lenp, ppos);
 
 	neigh_proc_update(ctl, write);
@@ -3030,6 +3105,7 @@ int neigh_proc_dointvec_ms_jiffies(struct ctl_table *ctl, int write,
 				   void __user *buffer,
 				   size_t *lenp, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = proc_dointvec_ms_jiffies(ctl, write, buffer, lenp, ppos);
 
 	neigh_proc_update(ctl, write);
@@ -3041,6 +3117,7 @@ static int neigh_proc_dointvec_unres_qlen(struct ctl_table *ctl, int write,
 					  void __user *buffer,
 					  size_t *lenp, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = proc_unres_qlen(ctl, write, buffer, lenp, ppos);
 
 	neigh_proc_update(ctl, write);
@@ -3055,7 +3132,9 @@ static int neigh_proc_base_reachable_time(struct ctl_table *ctl, int write,
 	int ret;
 
 	if (strcmp(ctl->procname, "base_reachable_time") == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = neigh_proc_dointvec_jiffies(ctl, write, buffer, lenp, ppos);
+}
 	else if (strcmp(ctl->procname, "base_reachable_time_ms") == 0)
 		ret = neigh_proc_dointvec_ms_jiffies(ctl, write, buffer, lenp, ppos);
 	else
@@ -3216,7 +3295,9 @@ int neigh_sysctl_register(struct net_device *dev, struct neigh_parms *p,
 
 	/* Don't export sysctls to unprivileged users */
 	if (neigh_parms_net(p)->user_ns != &init_user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		t->neigh_vars[0].procname = NULL;
+}
 
 	switch (neigh_parms_family(p)) {
 	case AF_INET:
diff --git a/net/core/net-procfs.c b/net/core/net-procfs.c
index 615ccab..f7bc245 100644
--- a/net/core/net-procfs.c
+++ b/net/core/net-procfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/netdevice.h>
 #include <linux/proc_fs.h>
@@ -15,6 +17,7 @@ extern struct list_head ptype_base[PTYPE_HASH_SIZE] __read_mostly;
 
 static inline struct net_device *dev_from_same_bucket(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = seq_file_net(seq);
 	struct net_device *dev;
 	struct hlist_head *h;
@@ -23,9 +26,12 @@ static inline struct net_device *dev_from_same_bucket(struct seq_file *seq, loff
 	h = &net->dev_name_head[get_bucket(*pos)];
 	hlist_for_each_entry_rcu(dev, h, name_hlist) {
 		if (++count == offset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return dev;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -37,12 +43,15 @@ static inline struct net_device *dev_from_bucket(struct seq_file *seq, loff_t *p
 	do {
 		dev = dev_from_same_bucket(seq, pos);
 		if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return dev;
+}
 
 		bucket = get_bucket(*pos) + 1;
 		*pos = set_bucket_offset(bucket, 1);
 	} while (bucket < NETDEV_HASHENTRIES);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -53,13 +62,20 @@ static inline struct net_device *dev_from_bucket(struct seq_file *seq, loff_t *p
 static void *dev_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	if (!*pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return SEQ_START_TOKEN;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (get_bucket(*pos) >= NETDEV_HASHENTRIES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev_from_bucket(seq, pos);
 }
 
@@ -72,6 +88,7 @@ static void *dev_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 static void dev_seq_stop(struct seq_file *seq, void *v)
 	__releases(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -120,6 +137,7 @@ static struct softnet_data *softnet_get_online(loff_t *pos)
 {
 	struct softnet_data *sd = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (*pos < nr_cpu_ids)
 		if (cpu_online(*pos)) {
 			sd = &per_cpu(softnet_data, *pos);
@@ -131,11 +149,13 @@ static struct softnet_data *softnet_get_online(loff_t *pos)
 
 static void *softnet_seq_start(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return softnet_get_online(pos);
 }
 
 static void *softnet_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	++*pos;
 	return softnet_get_online(pos);
 }
@@ -153,6 +173,7 @@ static int softnet_seq_show(struct seq_file *seq, void *v)
 	struct sd_flow_limit *fl;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fl = rcu_dereference(sd->flow_limit);
 	if (fl)
 		flow_limit_count = fl->count;
@@ -198,6 +219,7 @@ static const struct seq_operations softnet_seq_ops = {
 
 static int softnet_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &softnet_seq_ops);
 }
 
@@ -215,6 +237,7 @@ static void *ptype_get_idx(loff_t pos)
 	loff_t i = 0;
 	int t;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(pt, &ptype_all, list) {
 		if (i == pos)
 			return pt;
@@ -234,6 +257,7 @@ static void *ptype_get_idx(loff_t pos)
 static void *ptype_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	return *pos ? ptype_get_idx(*pos - 1) : SEQ_START_TOKEN;
 }
@@ -246,7 +270,9 @@ static void *ptype_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 
 	++*pos;
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ptype_get_idx(0);
+}
 
 	pt = v;
 	nxt = pt->list.next;
@@ -270,6 +296,7 @@ static void *ptype_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 static void ptype_seq_stop(struct seq_file *seq, void *v)
 	__releases(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -278,7 +305,9 @@ static int ptype_seq_show(struct seq_file *seq, void *v)
 	struct packet_type *pt = v;
 
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_puts(seq, "Type Device      Function\n");
+}
 	else if (pt->dev == NULL || dev_net(pt->dev) == seq_file_net(seq)) {
 		if (pt->type == htons(ETH_P_ALL))
 			seq_puts(seq, "ALL ");
@@ -301,6 +330,7 @@ static const struct seq_operations ptype_seq_ops = {
 
 static int ptype_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &ptype_seq_ops,
 			sizeof(struct seq_net_private));
 }
@@ -326,8 +356,10 @@ static int __net_init dev_proc_net_init(struct net *net)
 	if (!proc_create("ptype", S_IRUGO, net->proc_net, &ptype_seq_fops))
 		goto out_softnet;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (wext_proc_init(net))
 		goto out_ptype;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rc = 0;
 out:
 	return rc;
@@ -342,6 +374,7 @@ static int __net_init dev_proc_net_init(struct net *net)
 
 static void __net_exit dev_proc_net_exit(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	wext_proc_exit(net);
 
 	remove_proc_entry("ptype", net->proc_net);
@@ -360,7 +393,9 @@ static int dev_mc_seq_show(struct seq_file *seq, void *v)
 	struct net_device *dev = v;
 
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	netif_addr_lock_bh(dev);
 	netdev_for_each_mc_addr(ha, dev) {
@@ -382,6 +417,7 @@ static const struct seq_operations dev_mc_seq_ops = {
 
 static int dev_mc_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &dev_mc_seq_ops,
 			    sizeof(struct seq_net_private));
 }
@@ -397,7 +433,9 @@ static const struct file_operations dev_mc_seq_fops = {
 static int __net_init dev_mc_net_init(struct net *net)
 {
 	if (!proc_create("dev_mcast", 0, net->proc_net, &dev_mc_seq_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
@@ -416,5 +454,6 @@ int __init dev_proc_init(void)
 	int ret = register_pernet_subsys(&dev_proc_ops);
 	if (!ret)
 		return register_pernet_subsys(&dev_mc_net_ops);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
diff --git a/net/core/net-sysfs.c b/net/core/net-sysfs.c
index 927a6dc..4f14d60 100644
--- a/net/core/net-sysfs.c
+++ b/net/core/net-sysfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net-sysfs.c - network device class and attributes
  *
@@ -45,6 +47,7 @@ static ssize_t netdev_show(const struct device *dev,
 			   struct device_attribute *attr, char *buf,
 			   ssize_t (*format)(const struct net_device *, char *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *ndev = to_net_dev(dev);
 	ssize_t ret = -EINVAL;
 
@@ -81,6 +84,7 @@ static ssize_t netdev_store(struct device *dev, struct device_attribute *attr,
 			    const char *buf, size_t len,
 			    int (*set)(struct net_device *, unsigned long))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *netdev = to_net_dev(dev);
 	struct net *net = dev_net(netdev);
 	unsigned long new;
@@ -117,6 +121,7 @@ NETDEVICE_SHOW_RO(link_mode, fmt_dec);
 static ssize_t iflink_show(struct device *dev, struct device_attribute *attr,
 			   char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *ndev = to_net_dev(dev);
 
 	return sprintf(buf, fmt_dec, dev_get_iflink(ndev));
@@ -125,6 +130,7 @@ static DEVICE_ATTR_RO(iflink);
 
 static ssize_t format_name_assign_type(const struct net_device *dev, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, fmt_dec, dev->name_assign_type);
 }
 
@@ -132,6 +138,7 @@ static ssize_t name_assign_type_show(struct device *dev,
 				     struct device_attribute *attr,
 				     char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *ndev = to_net_dev(dev);
 	ssize_t ret = -EINVAL;
 
@@ -146,12 +153,14 @@ static DEVICE_ATTR_RO(name_assign_type);
 static ssize_t address_show(struct device *dev, struct device_attribute *attr,
 			    char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *ndev = to_net_dev(dev);
 	ssize_t ret = -EINVAL;
 
 	read_lock(&dev_base_lock);
 	if (dev_isalive(ndev))
 		ret = sysfs_format_mac(buf, ndev->dev_addr, ndev->addr_len);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock(&dev_base_lock);
 	return ret;
 }
@@ -160,6 +169,7 @@ static DEVICE_ATTR_RO(address);
 static ssize_t broadcast_show(struct device *dev,
 			      struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *ndev = to_net_dev(dev);
 
 	if (dev_isalive(ndev))
@@ -170,6 +180,7 @@ static DEVICE_ATTR_RO(broadcast);
 
 static int change_carrier(struct net_device *dev, unsigned long new_carrier)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!netif_running(dev))
 		return -EINVAL;
 	return dev_change_carrier(dev, (bool)new_carrier);
@@ -178,12 +189,14 @@ static int change_carrier(struct net_device *dev, unsigned long new_carrier)
 static ssize_t carrier_store(struct device *dev, struct device_attribute *attr,
 			     const char *buf, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return netdev_store(dev, attr, buf, len, change_carrier);
 }
 
 static ssize_t carrier_show(struct device *dev,
 			    struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *netdev = to_net_dev(dev);
 
 	if (netif_running(netdev))
@@ -196,6 +209,7 @@ static DEVICE_ATTR_RW(carrier);
 static ssize_t speed_show(struct device *dev,
 			  struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *netdev = to_net_dev(dev);
 	int ret = -EINVAL;
 
@@ -216,6 +230,7 @@ static DEVICE_ATTR_RO(speed);
 static ssize_t duplex_show(struct device *dev,
 			   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *netdev = to_net_dev(dev);
 	int ret = -EINVAL;
 
@@ -250,6 +265,7 @@ static DEVICE_ATTR_RO(duplex);
 static ssize_t dormant_show(struct device *dev,
 			    struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *netdev = to_net_dev(dev);
 
 	if (netif_running(netdev))
@@ -272,6 +288,7 @@ static const char *const operstates[] = {
 static ssize_t operstate_show(struct device *dev,
 			      struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct net_device *netdev = to_net_dev(dev);
 	unsigned char operstate;
 
@@ -292,6 +309,7 @@ static ssize_t carrier_changes_show(struct device *dev,
 				    struct device_attribute *attr,
 				    char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *netdev = to_net_dev(dev);
 
 	return sprintf(buf, fmt_dec,
@@ -303,24 +321,28 @@ static DEVICE_ATTR_RO(carrier_changes);
 
 static int change_mtu(struct net_device *dev, unsigned long new_mtu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev_set_mtu(dev, (int)new_mtu);
 }
 
 static ssize_t mtu_store(struct device *dev, struct device_attribute *attr,
 			 const char *buf, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return netdev_store(dev, attr, buf, len, change_mtu);
 }
 NETDEVICE_SHOW_RW(mtu, fmt_dec);
 
 static int change_flags(struct net_device *dev, unsigned long new_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev_change_flags(dev, (unsigned int)new_flags);
 }
 
 static ssize_t flags_store(struct device *dev, struct device_attribute *attr,
 			   const char *buf, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return netdev_store(dev, attr, buf, len, change_flags);
 }
 NETDEVICE_SHOW_RW(flags, fmt_hex);
@@ -331,7 +353,9 @@ static int change_tx_queue_len(struct net_device *dev, unsigned long new_len)
 	int res;
 
 	if (new_len != (unsigned int)new_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ERANGE;
+}
 
 	if (new_len != orig_len) {
 		dev->tx_queue_len = new_len;
@@ -352,6 +376,7 @@ static ssize_t tx_queue_len_store(struct device *dev,
 				  struct device_attribute *attr,
 				  const char *buf, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!capable(CAP_NET_ADMIN))
 		return -EPERM;
 
@@ -361,6 +386,7 @@ NETDEVICE_SHOW_RW(tx_queue_len, fmt_dec);
 
 static int change_gro_flush_timeout(struct net_device *dev, unsigned long val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->gro_flush_timeout = val;
 	return 0;
 }
@@ -369,6 +395,7 @@ static ssize_t gro_flush_timeout_store(struct device *dev,
 				       struct device_attribute *attr,
 				       const char *buf, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!capable(CAP_NET_ADMIN))
 		return -EPERM;
 
@@ -379,6 +406,7 @@ NETDEVICE_SHOW_RW(gro_flush_timeout, fmt_ulong);
 static ssize_t ifalias_store(struct device *dev, struct device_attribute *attr,
 			     const char *buf, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *netdev = to_net_dev(dev);
 	struct net *net = dev_net(netdev);
 	size_t count = len;
@@ -402,6 +430,7 @@ static ssize_t ifalias_store(struct device *dev, struct device_attribute *attr,
 static ssize_t ifalias_show(struct device *dev,
 			    struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct net_device *netdev = to_net_dev(dev);
 	ssize_t ret = 0;
 
@@ -416,6 +445,7 @@ static DEVICE_ATTR_RW(ifalias);
 
 static int change_group(struct net_device *dev, unsigned long new_group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_set_group(dev, (int)new_group);
 	return 0;
 }
@@ -423,6 +453,7 @@ static int change_group(struct net_device *dev, unsigned long new_group)
 static ssize_t group_store(struct device *dev, struct device_attribute *attr,
 			   const char *buf, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return netdev_store(dev, attr, buf, len, change_group);
 }
 NETDEVICE_SHOW(group, fmt_dec);
@@ -430,6 +461,7 @@ static DEVICE_ATTR(netdev_group, S_IRUGO | S_IWUSR, group_show, group_store);
 
 static int change_proto_down(struct net_device *dev, unsigned long proto_down)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev_change_proto_down(dev, (bool)proto_down);
 }
 
@@ -437,6 +469,7 @@ static ssize_t proto_down_store(struct device *dev,
 				struct device_attribute *attr,
 				const char *buf, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return netdev_store(dev, attr, buf, len, change_proto_down);
 }
 NETDEVICE_SHOW_RW(proto_down, fmt_dec);
@@ -444,6 +477,7 @@ NETDEVICE_SHOW_RW(proto_down, fmt_dec);
 static ssize_t phys_port_id_show(struct device *dev,
 				 struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *netdev = to_net_dev(dev);
 	ssize_t ret = -EINVAL;
 
@@ -466,6 +500,7 @@ static DEVICE_ATTR_RO(phys_port_id);
 static ssize_t phys_port_name_show(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *netdev = to_net_dev(dev);
 	ssize_t ret = -EINVAL;
 
@@ -488,6 +523,7 @@ static DEVICE_ATTR_RO(phys_port_name);
 static ssize_t phys_switch_id_show(struct device *dev,
 				   struct device_attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *netdev = to_net_dev(dev);
 	ssize_t ret = -EINVAL;
 
@@ -549,6 +585,7 @@ static ssize_t netstat_show(const struct device *d,
 			    struct device_attribute *attr, char *buf,
 			    unsigned long offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = to_net_dev(d);
 	ssize_t ret = -EINVAL;
 
@@ -658,6 +695,7 @@ static const struct attribute_group wireless_group = {
 static ssize_t rx_queue_attr_show(struct kobject *kobj, struct attribute *attr,
 				  char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct rx_queue_attribute *attribute = to_rx_queue_attr(attr);
 	struct netdev_rx_queue *queue = to_rx_queue(kobj);
 
@@ -670,6 +708,7 @@ static ssize_t rx_queue_attr_show(struct kobject *kobj, struct attribute *attr,
 static ssize_t rx_queue_attr_store(struct kobject *kobj, struct attribute *attr,
 				   const char *buf, size_t count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct rx_queue_attribute *attribute = to_rx_queue_attr(attr);
 	struct netdev_rx_queue *queue = to_rx_queue(kobj);
 
@@ -692,7 +731,9 @@ static ssize_t show_rps_map(struct netdev_rx_queue *queue, char *buf)
 	int i, len;
 
 	if (!zalloc_cpumask_var(&mask, GFP_KERNEL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	rcu_read_lock();
 	map = rcu_dereference(queue->rps_map);
@@ -716,7 +757,9 @@ static ssize_t store_rps_map(struct netdev_rx_queue *queue,
 	static DEFINE_MUTEX(rps_map_mutex);
 
 	if (!capable(CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	if (!alloc_cpumask_var(&mask, GFP_KERNEL))
 		return -ENOMEM;
@@ -772,6 +815,7 @@ static ssize_t show_rps_dev_flow_table_cnt(struct netdev_rx_queue *queue,
 	unsigned long val = 0;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flow_table = rcu_dereference(queue->rps_flow_table);
 	if (flow_table)
 		val = (unsigned long)flow_table->mask + 1;
@@ -782,6 +826,7 @@ static ssize_t show_rps_dev_flow_table_cnt(struct netdev_rx_queue *queue,
 
 static void rps_dev_flow_table_release(struct rcu_head *rcu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rps_dev_flow_table *table = container_of(rcu,
 	    struct rps_dev_flow_table, rcu);
 	vfree(table);
@@ -796,7 +841,9 @@ static ssize_t store_rps_dev_flow_table_cnt(struct netdev_rx_queue *queue,
 	int rc;
 
 	if (!capable(CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	rc = kstrtoul(buf, 0, &count);
 	if (rc < 0)
@@ -864,6 +911,7 @@ static struct attribute *rx_queue_default_attrs[] __ro_after_init = {
 
 static void rx_queue_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netdev_rx_queue *queue = to_rx_queue(kobj);
 #ifdef CONFIG_RPS
 	struct rps_map *map;
@@ -871,23 +919,29 @@ static void rx_queue_release(struct kobject *kobj)
 
 	map = rcu_dereference_protected(queue->rps_map, 1);
 	if (map) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		RCU_INIT_POINTER(queue->rps_map, NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_rcu(map, rcu);
 	}
 
 	flow_table = rcu_dereference_protected(queue->rps_flow_table, 1);
 	if (flow_table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		RCU_INIT_POINTER(queue->rps_flow_table, NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		call_rcu(&flow_table->rcu, rps_dev_flow_table_release);
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(kobj, 0, sizeof(*kobj));
 	dev_put(queue->dev);
 }
 
 static const void *rx_queue_namespace(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netdev_rx_queue *queue = to_rx_queue(kobj);
 	struct device *dev = &queue->dev->dev;
 	const void *ns = NULL;
@@ -915,11 +969,14 @@ static int rx_queue_add_kobject(struct net_device *dev, int index)
 	error = kobject_init_and_add(kobj, &rx_queue_ktype, NULL,
 				     "rx-%u", index);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	if (dev->sysfs_rx_queue_group) {
 		error = sysfs_create_group(kobj, dev->sysfs_rx_queue_group);
 		if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kobject_put(kobj);
 			return error;
 		}
@@ -946,6 +1003,7 @@ net_rx_queue_update_kobjects(struct net_device *dev, int old_num, int new_num)
 	for (i = old_num; i < new_num; i++) {
 		error = rx_queue_add_kobject(dev, i);
 		if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			new_num = old_num;
 			break;
 		}
@@ -957,7 +1015,9 @@ net_rx_queue_update_kobjects(struct net_device *dev, int old_num, int new_num)
 		if (!atomic_read(&dev_net(dev)->count))
 			kobj->uevent_suppress = 1;
 		if (dev->sysfs_rx_queue_group)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sysfs_remove_group(kobj, dev->sysfs_rx_queue_group);
+}
 		kobject_put(kobj);
 	}
 
@@ -1031,6 +1091,7 @@ static unsigned int get_netdev_queue_index(struct netdev_queue *queue)
 	unsigned int i;
 
 	i = queue - dev->_tx;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(i >= dev->num_tx_queues);
 
 	return i;
@@ -1044,7 +1105,9 @@ static ssize_t traffic_class_show(struct netdev_queue *queue,
 	int tc = netdev_txq_to_tc(dev, index);
 
 	if (tc < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	return sprintf(buf, "%u\n", tc);
 }
@@ -1053,6 +1116,7 @@ static ssize_t traffic_class_show(struct netdev_queue *queue,
 static ssize_t tx_maxrate_show(struct netdev_queue *queue,
 			       char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%lu\n", queue->tx_maxrate);
 }
 
@@ -1065,7 +1129,9 @@ static ssize_t tx_maxrate_store(struct netdev_queue *queue,
 
 	err = kstrtou32(buf, 10, &rate);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (!rtnl_trylock())
 		return restart_syscall();
@@ -1098,6 +1164,7 @@ static struct netdev_queue_attribute queue_traffic_class __ro_after_init
  */
 static ssize_t bql_show(char *buf, unsigned int value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sprintf(buf, "%u\n", value);
 }
 
@@ -1107,6 +1174,7 @@ static ssize_t bql_set(const char *buf, const size_t count,
 	unsigned int value;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!strcmp(buf, "max") || !strcmp(buf, "max\n")) {
 		value = DQL_MAX_LIMIT;
 	} else {
@@ -1139,7 +1207,9 @@ static ssize_t bql_set_hold_time(struct netdev_queue *queue,
 
 	err = kstrtouint(buf, 10, &value);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	dql->slack_hold_time = msecs_to_jiffies(value);
 
@@ -1208,7 +1278,9 @@ static ssize_t xps_cpus_show(struct netdev_queue *queue,
 	unsigned long index;
 
 	if (!zalloc_cpumask_var(&mask, GFP_KERNEL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	index = get_netdev_queue_index(queue);
 
@@ -1254,7 +1326,9 @@ static ssize_t xps_cpus_store(struct netdev_queue *queue,
 	int err;
 
 	if (!capable(CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	if (!alloc_cpumask_var(&mask, GFP_KERNEL))
 		return -ENOMEM;
@@ -1290,6 +1364,7 @@ static struct attribute *netdev_queue_default_attrs[] __ro_after_init = {
 
 static void netdev_queue_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netdev_queue *queue = to_netdev_queue(kobj);
 
 	memset(kobj, 0, sizeof(*kobj));
@@ -1298,6 +1373,7 @@ static void netdev_queue_release(struct kobject *kobj)
 
 static const void *netdev_queue_namespace(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netdev_queue *queue = to_netdev_queue(kobj);
 	struct device *dev = &queue->dev->dev;
 	const void *ns = NULL;
@@ -1325,11 +1401,14 @@ static int netdev_queue_add_kobject(struct net_device *dev, int index)
 	error = kobject_init_and_add(kobj, &netdev_queue_ktype, NULL,
 				     "tx-%u", index);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 #ifdef CONFIG_BQL
 	error = sysfs_create_group(kobj, &dql_group);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kobject_put(kobj);
 		return error;
 	}
@@ -1352,6 +1431,7 @@ netdev_queue_update_kobjects(struct net_device *dev, int old_num, int new_num)
 	for (i = old_num; i < new_num; i++) {
 		error = netdev_queue_add_kobject(dev, i);
 		if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			new_num = old_num;
 			break;
 		}
@@ -1382,7 +1462,9 @@ static int register_queue_kobjects(struct net_device *dev)
 	dev->queues_kset = kset_create_and_add("queues",
 					       NULL, &dev->dev.kobj);
 	if (!dev->queues_kset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	real_rx = dev->real_num_rx_queues;
 #endif
 	real_tx = dev->real_num_tx_queues;
@@ -1390,11 +1472,13 @@ static int register_queue_kobjects(struct net_device *dev)
 	error = net_rx_queue_update_kobjects(dev, 0, real_rx);
 	if (error)
 		goto error;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rxq = real_rx;
 
 	error = netdev_queue_update_kobjects(dev, 0, real_tx);
 	if (error)
 		goto error;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	txq = real_tx;
 
 	return 0;
@@ -1445,6 +1529,7 @@ static const void *net_initial_ns(void)
 
 static const void *net_netlink_ns(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sock_net(sk);
 }
 
@@ -1460,6 +1545,7 @@ EXPORT_SYMBOL_GPL(net_ns_type_operations);
 
 static int netdev_uevent(struct device *d, struct kobj_uevent_env *env)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = to_net_dev(d);
 	int retval;
 
@@ -1494,6 +1580,7 @@ static void netdev_release(struct device *d)
 
 static const void *net_namespace(struct device *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = to_net_dev(d);
 
 	return dev_net(dev);
@@ -1549,7 +1636,9 @@ void netdev_unregister_kobject(struct net_device *ndev)
 	struct device *dev = &ndev->dev;
 
 	if (!atomic_read(&dev_net(ndev)->count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_set_uevent_suppress(dev, 1);
+}
 
 	kobject_get(&dev->kobj);
 
@@ -1577,13 +1666,17 @@ int netdev_register_kobject(struct net_device *ndev)
 #ifdef CONFIG_SYSFS
 	/* Allow for a device specific group */
 	if (*groups)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		groups++;
+}
 
 	*groups++ = &netstat_group;
 
 #if IS_ENABLED(CONFIG_WIRELESS_EXT) || IS_ENABLED(CONFIG_CFG80211)
 	if (ndev->ieee80211_ptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*groups++ = &wireless_group;
+}
 #if IS_ENABLED(CONFIG_WIRELESS_EXT)
 	else if (ndev->wireless_handlers)
 		*groups++ = &wireless_group;
@@ -1593,10 +1686,13 @@ int netdev_register_kobject(struct net_device *ndev)
 
 	error = device_add(dev);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	error = register_queue_kobjects(ndev);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		device_del(dev);
 		return error;
 	}
@@ -1609,6 +1705,7 @@ int netdev_register_kobject(struct net_device *ndev)
 int netdev_class_create_file_ns(const struct class_attribute *class_attr,
 				const void *ns)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return class_create_file_ns(&net_class, class_attr, ns);
 }
 EXPORT_SYMBOL(netdev_class_create_file_ns);
@@ -1616,6 +1713,7 @@ EXPORT_SYMBOL(netdev_class_create_file_ns);
 void netdev_class_remove_file_ns(const struct class_attribute *class_attr,
 				 const void *ns)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	class_remove_file_ns(&net_class, class_attr, ns);
 }
 EXPORT_SYMBOL(netdev_class_remove_file_ns);
diff --git a/net/core/net_namespace.c b/net/core/net_namespace.c
index 0dd6359..9d1be8a 100644
--- a/net/core/net_namespace.c
+++ b/net/core/net_namespace.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 
 #include <linux/workqueue.h>
@@ -77,7 +79,9 @@ static int net_assign_generic(struct net *net, unsigned int id, void *data)
 
 	ng = net_alloc_generic();
 	if (ng == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/*
 	 * Some synchronisation notes:
@@ -113,11 +117,14 @@ static int ops_init(const struct pernet_operations *ops, struct net *net)
 		if (err)
 			goto cleanup;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 	if (ops->init)
 		err = ops->init(net);
 	if (!err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 cleanup:
 	kfree(data);
@@ -161,6 +168,7 @@ static int alloc_netid(struct net *net, struct net *peer, int reqid)
 	int min = 0, max = 0;
 
 	if (reqid >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		min = reqid;
 		max = reqid + 1;
 	}
@@ -176,6 +184,7 @@ static int alloc_netid(struct net *net, struct net *peer, int reqid)
 #define NET_ID_ZERO -1
 static int net_eq_idr(int id, void *net, void *peer)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (net_eq(net, peer))
 		return id ? : NET_ID_ZERO;
 	return 0;
@@ -194,16 +203,23 @@ static int __peernet2id_alloc(struct net *net, struct net *peer, bool *alloc)
 
 	/* Magic value for id 0. */
 	if (id == NET_ID_ZERO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (id > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return id;
+}
 
 	if (alloc_it) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		id = alloc_netid(net, peer, -1);
 		*alloc = true;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return id >= 0 ? id : NETNSA_NSID_NOT_ASSIGNED;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NETNSA_NSID_NOT_ASSIGNED;
 }
 
@@ -225,7 +241,9 @@ int peernet2id_alloc(struct net *net, struct net *peer)
 	int id;
 
 	if (atomic_read(&net->count) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NETNSA_NSID_NOT_ASSIGNED;
+}
 	spin_lock_bh(&net->nsid_lock);
 	alloc = atomic_read(&peer->count) == 0 ? false : true;
 	id = __peernet2id_alloc(net, peer, &alloc);
@@ -252,6 +270,7 @@ EXPORT_SYMBOL(peernet2id);
  */
 bool peernet_has_id(struct net *net, struct net *peer)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return peernet2id(net, peer) >= 0;
 }
 
@@ -260,7 +279,9 @@ struct net *get_net_ns_by_id(struct net *net, int id)
 	struct net *peer;
 
 	if (id < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	rcu_read_lock();
 	spin_lock_bh(&net->nsid_lock);
@@ -304,13 +325,17 @@ static __net_init int setup_net(struct net *net, struct user_namespace *user_ns)
 	 */
 	list_add(&net->exit_list, &net_exit_list);
 	saved_ops = ops;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_continue_reverse(ops, &pernet_list, list)
 		ops_exit_list(ops, &net_exit_list);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ops = saved_ops;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_continue_reverse(ops, &pernet_list, list)
 		ops_free_list(ops, &net_exit_list);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_barrier();
 	goto out;
 }
@@ -328,7 +353,9 @@ static struct pernet_operations net_defaults_ops = {
 static __init int net_defaults_init(void)
 {
 	if (register_pernet_subsys(&net_defaults_ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Cannot initialize net default settings");
+}
 
 	return 0;
 }
@@ -396,10 +423,13 @@ struct net *copy_net_ns(unsigned long flags,
 
 	ucounts = inc_net_namespaces(user_ns);
 	if (!ucounts)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOSPC);
+}
 
 	net = net_alloc();
 	if (!net) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dec_net_namespaces(ucounts);
 		return ERR_PTR(-ENOMEM);
 	}
@@ -408,6 +438,7 @@ struct net *copy_net_ns(unsigned long flags,
 
 	rv = mutex_lock_killable(&net_mutex);
 	if (rv < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_free(net);
 		dec_net_namespaces(ucounts);
 		put_user_ns(user_ns);
@@ -423,11 +454,13 @@ struct net *copy_net_ns(unsigned long flags,
 	}
 	mutex_unlock(&net_mutex);
 	if (rv < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dec_net_namespaces(ucounts);
 		put_user_ns(user_ns);
 		net_drop_ns(net);
 		return ERR_PTR(rv);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return net;
 }
 
@@ -459,11 +492,17 @@ static void cleanup_net(struct work_struct *work)
 			spin_lock_bh(&tmp->nsid_lock);
 			id = __peernet2id(tmp, net);
 			if (id >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				idr_remove(&tmp->netns_ids, id);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_bh(&tmp->nsid_lock);
 			if (id >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rtnl_net_notifyid(tmp, RTM_DELNSID, id);
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_bh(&net->nsid_lock);
 		idr_destroy(&net->netns_ids);
 		spin_unlock_bh(&net->nsid_lock);
@@ -513,6 +552,7 @@ static void cleanup_net(struct work_struct *work)
  */
 void net_ns_barrier(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&net_mutex);
 	mutex_unlock(&net_mutex);
 }
@@ -541,7 +581,9 @@ struct net *get_net_ns_by_fd(int fd)
 
 	file = proc_ns_fget(fd);
 	if (IS_ERR(file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(file);
+}
 
 	ns = get_proc_ns(file_inode(file));
 	if (ns->ops == &netns_operations)
@@ -575,7 +617,9 @@ struct net *get_net_ns_by_pid(pid_t pid)
 		task_lock(tsk);
 		nsproxy = tsk->nsproxy;
 		if (nsproxy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net = get_net(nsproxy->net_ns);
+}
 		task_unlock(tsk);
 	}
 	rcu_read_unlock();
@@ -611,6 +655,7 @@ static const struct nla_policy rtnl_net_policy[NETNSA_MAX + 1] = {
 static int rtnl_net_newid(struct sk_buff *skb, struct nlmsghdr *nlh,
 			  struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct nlattr *tb[NETNSA_MAX + 1];
 	struct nlattr *nla;
@@ -683,7 +728,9 @@ static int rtnl_net_fill(struct sk_buff *skb, u32 portid, u32 seq, int flags,
 
 	nlh = nlmsg_put(skb, portid, seq, cmd, sizeof(*rth), flags);
 	if (!nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	rth = nlmsg_data(nlh);
 	rth->rtgen_family = AF_UNSPEC;
@@ -702,6 +749,7 @@ static int rtnl_net_fill(struct sk_buff *skb, u32 portid, u32 seq, int flags,
 static int rtnl_net_getid(struct sk_buff *skb, struct nlmsghdr *nlh,
 			  struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct nlattr *tb[NETNSA_MAX + 1];
 	struct nlattr *nla;
@@ -768,6 +816,7 @@ static int rtnl_net_dumpid_one(int id, void *peer, void *data)
 	if (net_cb->idx < net_cb->s_idx)
 		goto cont;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = rtnl_net_fill(net_cb->skb, NETLINK_CB(net_cb->cb->skb).portid,
 			    net_cb->cb->nlh->nlmsg_seq, NLM_F_MULTI,
 			    RTM_NEWNSID, net_cb->net, id);
@@ -781,6 +830,7 @@ static int rtnl_net_dumpid_one(int id, void *peer, void *data)
 
 static int rtnl_net_dumpid(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct rtnl_net_dump_cb net_cb = {
 		.net = net,
@@ -807,6 +857,7 @@ static void rtnl_net_notifyid(struct net *net, int cmd, int id)
 	if (!msg)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = rtnl_net_fill(msg, 0, 0, 0, cmd, net, id);
 	if (err < 0)
 		goto err_out;
@@ -832,18 +883,24 @@ static int __init net_ns_init(void)
 	/* Create workqueue for cleanup */
 	netns_wq = create_singlethread_workqueue("netns");
 	if (!netns_wq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Could not create netns workq");
+}
 #endif
 
 	ng = net_alloc_generic();
 	if (!ng)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Could not allocate generic netns");
+}
 
 	rcu_assign_pointer(init_net.gen, ng);
 
 	mutex_lock(&net_mutex);
 	if (setup_net(&init_net, &init_user_ns))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Could not setup the initial network namespace");
+}
 
 	init_net_initialized = true;
 
@@ -882,6 +939,7 @@ static int __register_pernet_operations(struct list_head *list,
 			list_add_tail(&net->exit_list, &net_exit_list);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_undo:
@@ -898,6 +956,7 @@ static void __unregister_pernet_operations(struct pernet_operations *ops)
 	LIST_HEAD(net_exit_list);
 
 	list_del(&ops->list);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_net(net)
 		list_add_tail(&net->exit_list, &net_exit_list);
 	ops_exit_list(ops, &net_exit_list);
@@ -942,21 +1001,28 @@ static int register_pernet_operations(struct list_head *list,
 again:
 		error = ida_get_new_above(&net_generic_ids, MIN_PERNET_OPS_ID, ops->id);
 		if (error < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (error == -EAGAIN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ida_pre_get(&net_generic_ids, GFP_KERNEL);
 				goto again;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
 		}
 		max_gen_ptrs = max(max_gen_ptrs, *ops->id + 1);
 	}
 	error = __register_pernet_operations(list, ops);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_barrier();
 		if (ops->id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ida_remove(&net_generic_ids, *ops->id);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -1009,6 +1075,7 @@ EXPORT_SYMBOL_GPL(register_pernet_subsys);
  */
 void unregister_pernet_subsys(struct pernet_operations *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&net_mutex);
 	unregister_pernet_operations(ops);
 	mutex_unlock(&net_mutex);
@@ -1057,6 +1124,7 @@ EXPORT_SYMBOL_GPL(register_pernet_device);
  */
 void unregister_pernet_device(struct pernet_operations *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&net_mutex);
 	if (&ops->list == first_device)
 		first_device = first_device->next;
@@ -1075,6 +1143,7 @@ static struct ns_common *netns_get(struct task_struct *task)
 	nsproxy = task->nsproxy;
 	if (nsproxy)
 		net = get_net(nsproxy->net_ns);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	task_unlock(task);
 
 	return net ? &net->ns : NULL;
@@ -1092,6 +1161,7 @@ static void netns_put(struct ns_common *ns)
 
 static int netns_install(struct nsproxy *nsproxy, struct ns_common *ns)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = to_net_ns(ns);
 
 	if (!ns_capable(net->user_ns, CAP_SYS_ADMIN) ||
@@ -1105,6 +1175,7 @@ static int netns_install(struct nsproxy *nsproxy, struct ns_common *ns)
 
 static struct user_namespace *netns_owner(struct ns_common *ns)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return to_net_ns(ns)->user_ns;
 }
 
diff --git a/net/core/netclassid_cgroup.c b/net/core/netclassid_cgroup.c
index 5e4f040..f9ec8e9 100644
--- a/net/core/netclassid_cgroup.c
+++ b/net/core/netclassid_cgroup.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/core/netclassid_cgroup.c	Classid Cgroupfs Handling
  *
diff --git a/net/core/netevent.c b/net/core/netevent.c
index 8b3bc4f..b3b6d76 100644
--- a/net/core/netevent.c
+++ b/net/core/netevent.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Network event notifiers
  *
@@ -31,6 +33,7 @@ static ATOMIC_NOTIFIER_HEAD(netevent_notif_chain);
  */
 int register_netevent_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_chain_register(&netevent_notif_chain, nb);
 }
 EXPORT_SYMBOL_GPL(register_netevent_notifier);
@@ -47,6 +50,7 @@ EXPORT_SYMBOL_GPL(register_netevent_notifier);
 
 int unregister_netevent_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_chain_unregister(&netevent_notif_chain, nb);
 }
 EXPORT_SYMBOL_GPL(unregister_netevent_notifier);
diff --git a/net/core/netprio_cgroup.c b/net/core/netprio_cgroup.c
index 1c48109..fa9eb23 100644
--- a/net/core/netprio_cgroup.c
+++ b/net/core/netprio_cgroup.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/core/netprio_cgroup.c	Priority Control Group
  *
diff --git a/net/core/ptp_classifier.c b/net/core/ptp_classifier.c
index 703cf76..3b2562d 100644
--- a/net/core/ptp_classifier.c
+++ b/net/core/ptp_classifier.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* PTP classifier
  *
  * This program is free software; you can redistribute it and/or
@@ -111,6 +113,7 @@ static struct bpf_prog *ptp_insns __read_mostly;
 
 unsigned int ptp_classify_raw(const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return BPF_PROG_RUN(ptp_insns, skb);
 }
 EXPORT_SYMBOL_GPL(ptp_classify_raw);
diff --git a/net/core/request_sock.c b/net/core/request_sock.c
index 9b8727c..ffb89b9 100644
--- a/net/core/request_sock.c
+++ b/net/core/request_sock.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NET		Generic infrastructure for Network protocols.
  *
@@ -107,6 +109,7 @@ void reqsk_fastopen_remove(struct sock *sk, struct request_sock *req,
 	if (req->sk)	/* the child socket hasn't been accepted yet */
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!reset || lsk->sk_state != TCP_LISTEN) {
 		/* If the listener has been closed don't bother with the
 		 * special RST handling below.
diff --git a/net/core/rtnetlink.c b/net/core/rtnetlink.c
index 5ace489..caa2789 100644
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -76,6 +78,7 @@ EXPORT_SYMBOL(rtnl_lock);
 static struct sk_buff *defer_kfree_skb_list;
 void rtnl_kfree_skbs(struct sk_buff *head, struct sk_buff *tail)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (head && tail) {
 		tail->next = defer_kfree_skb_list;
 		defer_kfree_skb_list = head;
@@ -109,6 +112,7 @@ EXPORT_SYMBOL(rtnl_unlock);
 
 int rtnl_trylock(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mutex_trylock(&rtnl_mutex);
 }
 EXPORT_SYMBOL(rtnl_trylock);
@@ -174,9 +178,12 @@ int __rtnl_register(int protocol, int msgtype,
 
 	tab = rcu_dereference_raw(rtnl_msg_handlers[protocol]);
 	if (tab == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tab = kcalloc(RTM_NR_MSGTYPES, sizeof(*tab), GFP_KERNEL);
 		if (tab == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOBUFS;
+}
 
 		rcu_assign_pointer(rtnl_msg_handlers[protocol], tab);
 	}
@@ -205,10 +212,12 @@ void rtnl_register(int protocol, int msgtype,
 		   unsigned int flags)
 {
 	if (__rtnl_register(protocol, msgtype, doit, dumpit, flags) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Unable to register rtnetlink message handler, "
 		      "protocol = %d, message type = %d\n",
 		      protocol, msgtype);
 }
+}
 EXPORT_SYMBOL_GPL(rtnl_register);
 
 /**
@@ -223,6 +232,7 @@ int rtnl_unregister(int protocol, int msgtype)
 	struct rtnl_link *handlers;
 	int msgindex;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(protocol < 0 || protocol > RTNL_FAMILY_MAX);
 	msgindex = rtm_msgindex(msgtype);
 
@@ -253,6 +263,7 @@ void rtnl_unregister_all(int protocol)
 {
 	struct rtnl_link *handlers;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(protocol < 0 || protocol > RTNL_FAMILY_MAX);
 
 	rtnl_lock();
@@ -276,8 +287,11 @@ static const struct rtnl_link_ops *rtnl_link_ops_get(const char *kind)
 
 	list_for_each_entry(ops, &link_ops, list) {
 		if (!strcmp(ops->kind, kind))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ops;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -294,7 +308,9 @@ static const struct rtnl_link_ops *rtnl_link_ops_get(const char *kind)
 int __rtnl_link_register(struct rtnl_link_ops *ops)
 {
 	if (rtnl_link_ops_get(ops->kind))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EEXIST;
+}
 
 	/* The check for setup is here because if ops
 	 * does not have that filled up, it is not possible
@@ -331,6 +347,7 @@ static void __rtnl_kill_links(struct net *net, struct rtnl_link_ops *ops)
 	struct net_device *dev;
 	LIST_HEAD(list_kill);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev(net, dev) {
 		if (dev->rtnl_link_ops == ops)
 			ops->dellink(dev, &list_kill);
@@ -348,6 +365,7 @@ void __rtnl_link_unregister(struct rtnl_link_ops *ops)
 {
 	struct net *net;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_net(net) {
 		__rtnl_kill_links(net, ops);
 	}
@@ -366,6 +384,7 @@ static void rtnl_lock_unregistering_all(void)
 
 	add_wait_queue(&netdev_unregistering_wq, &wait);
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unregistering = false;
 		rtnl_lock();
 		for_each_net(net) {
@@ -410,7 +429,9 @@ static size_t rtnl_link_get_slave_info_data_size(const struct net_device *dev)
 	if (!master_dev)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ops = master_dev->rtnl_link_ops;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ops || !ops->get_slave_size)
 		goto out;
 	/* IFLA_INFO_SLAVE_DATA + nested data */
@@ -428,7 +449,9 @@ static size_t rtnl_link_get_size(const struct net_device *dev)
 	size_t size;
 
 	if (!ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	size = nla_total_size(sizeof(struct nlattr)) + /* IFLA_LINKINFO */
 	       nla_total_size(strlen(ops->kind) + 1);  /* IFLA_INFO_KIND */
@@ -455,9 +478,12 @@ static const struct rtnl_af_ops *rtnl_af_lookup(const int family)
 
 	list_for_each_entry(ops, &rtnl_af_ops, list) {
 		if (ops->family == family)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ops;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -483,6 +509,7 @@ EXPORT_SYMBOL_GPL(rtnl_af_register);
  */
 void __rtnl_af_unregister(struct rtnl_af_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_del(&ops->list);
 }
 EXPORT_SYMBOL_GPL(__rtnl_af_unregister);
@@ -493,6 +520,7 @@ EXPORT_SYMBOL_GPL(__rtnl_af_unregister);
  */
 void rtnl_af_unregister(struct rtnl_af_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtnl_lock();
 	__rtnl_af_unregister(ops);
 	rtnl_unlock();
@@ -525,7 +553,9 @@ static bool rtnl_have_link_slave_info(const struct net_device *dev)
 
 	master_dev = netdev_master_upper_dev_get((struct net_device *) dev);
 	if (master_dev && master_dev->rtnl_link_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 	return false;
 }
 
@@ -539,21 +569,36 @@ static int rtnl_link_slave_info_fill(struct sk_buff *skb,
 
 	master_dev = netdev_master_upper_dev_get((struct net_device *) dev);
 	if (!master_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ops = master_dev->rtnl_link_ops;
 	if (!ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put_string(skb, IFLA_INFO_SLAVE_KIND, ops->kind) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ops->fill_slave_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		slave_data = nla_nest_start(skb, IFLA_INFO_SLAVE_DATA);
 		if (!slave_data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EMSGSIZE;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = ops->fill_slave_info(skb, master_dev, dev);
 		if (err < 0)
 			goto err_cancel_slave_data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nla_nest_end(skb, slave_data);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_cancel_slave_data:
@@ -569,23 +614,33 @@ static int rtnl_link_info_fill(struct sk_buff *skb,
 	int err;
 
 	if (!ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (nla_put_string(skb, IFLA_INFO_KIND, ops->kind) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 	if (ops->fill_xstats) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = ops->fill_xstats(skb, dev);
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	}
 	if (ops->fill_info) {
 		data = nla_nest_start(skb, IFLA_INFO_DATA);
 		if (data == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EMSGSIZE;
+}
 		err = ops->fill_info(skb, dev);
 		if (err < 0)
 			goto err_cancel_data;
 		nla_nest_end(skb, data);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_cancel_data:
@@ -626,7 +681,9 @@ int rtnetlink_send(struct sk_buff *skb, struct net *net, u32 pid, unsigned int g
 
 	NETLINK_CB(skb).dst_group = group;
 	if (echo)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		refcount_inc(&skb->users);
+}
 	netlink_broadcast(rtnl, skb, pid, group, GFP_KERNEL);
 	if (echo)
 		err = netlink_unicast(rtnl, skb, pid, MSG_DONTWAIT);
@@ -648,7 +705,9 @@ void rtnl_notify(struct sk_buff *skb, struct net *net, u32 pid, u32 group,
 	int report = 0;
 
 	if (nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		report = nlmsg_report(nlh);
+}
 
 	nlmsg_notify(rtnl, skb, pid, group, report, flags);
 }
@@ -669,16 +728,20 @@ int rtnetlink_put_metrics(struct sk_buff *skb, u32 *metrics)
 
 	mx = nla_nest_start(skb, RTA_METRICS);
 	if (mx == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOBUFS;
+}
 
 	for (i = 0; i < RTAX_MAX; i++) {
 		if (metrics[i]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (i == RTAX_CC_ALGO - 1) {
 				char tmp[TCP_CA_NAME_MAX], *name;
 
 				name = tcp_ca_get_name_by_key(metrics[i], tmp);
 				if (!name)
 					continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (nla_put_string(skb, i + 1, name))
 					goto nla_put_failure;
 			} else if (i == RTAX_FEATURES - 1) {
@@ -686,22 +749,28 @@ int rtnetlink_put_metrics(struct sk_buff *skb, u32 *metrics)
 
 				if (!user_features)
 					continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				BUILD_BUG_ON(RTAX_FEATURE_MASK & DST_FEATURE_MASK);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (nla_put_u32(skb, i + 1, user_features))
 					goto nla_put_failure;
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (nla_put_u32(skb, i + 1, metrics[i]))
 					goto nla_put_failure;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			valid++;
 		}
 	}
 
 	if (!valid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nla_nest_cancel(skb, mx);
 		return 0;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nla_nest_end(skb, mx);
 
 nla_put_failure:
@@ -724,8 +793,11 @@ int rtnl_put_cacheinfo(struct sk_buff *skb, struct dst_entry *dst, u32 id,
 	if (expires) {
 		unsigned long clock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clock = jiffies_to_clock_t(abs(expires));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clock = min_t(unsigned long, clock, INT_MAX);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ci.rta_expires = (expires > 0) ? clock : -clock;
 	}
 	return nla_put(skb, RTA_CACHEINFO, sizeof(ci), &ci);
@@ -847,12 +919,15 @@ static inline int rtnl_vfinfo_size(const struct net_device *dev,
 			 nla_total_size(sizeof(struct ifla_vf_trust)));
 		return size;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 }
+}
 
 static size_t rtnl_port_size(const struct net_device *dev,
 			     u32 ext_filter_mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size_t port_size = nla_total_size(4)		/* PORT_VF */
 		+ nla_total_size(PORT_PROFILE_MAX)	/* PORT_PROFILE */
 		+ nla_total_size(PORT_UUID_MAX)		/* PORT_INSTANCE_UUID */
@@ -868,6 +943,7 @@ static size_t rtnl_port_size(const struct net_device *dev,
 	if (!dev->netdev_ops->ndo_get_vf_port || !dev->dev.parent ||
 	    !(ext_filter_mask & RTEXT_FILTER_VF))
 		return 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev_num_vf(dev->dev.parent))
 		return port_self_size + vf_ports_size +
 			vf_port_size * dev_num_vf(dev->dev.parent);
@@ -877,6 +953,7 @@ static size_t rtnl_port_size(const struct net_device *dev,
 
 static size_t rtnl_xdp_size(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size_t xdp_size = nla_total_size(0) +	/* nest IFLA_XDP */
 			  nla_total_size(1) +	/* XDP_ATTACHED */
 			  nla_total_size(4);	/* XDP_PROG_ID */
@@ -936,7 +1013,9 @@ static int rtnl_vf_ports_fill(struct sk_buff *skb, struct net_device *dev)
 
 	vf_ports = nla_nest_start(skb, IFLA_VF_PORTS);
 	if (!vf_ports)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	for (vf = 0; vf < dev_num_vf(dev->dev.parent); vf++) {
 		vf_port = nla_nest_start(skb, IFLA_VF_PORT);
@@ -970,7 +1049,9 @@ static int rtnl_port_self_fill(struct sk_buff *skb, struct net_device *dev)
 
 	port_self = nla_nest_start(skb, IFLA_PORT_SELF);
 	if (!port_self)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	err = dev->netdev_ops->ndo_get_vf_port(dev, PORT_SELF_VF, skb);
 	if (err) {
@@ -992,16 +1073,24 @@ static int rtnl_port_fill(struct sk_buff *skb, struct net_device *dev,
 	    !(ext_filter_mask & RTEXT_FILTER_VF))
 		return 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = rtnl_port_self_fill(skb, dev);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev_num_vf(dev->dev.parent)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = rtnl_vf_ports_fill(skb, dev);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1013,13 +1102,20 @@ static int rtnl_phys_port_id_fill(struct sk_buff *skb, struct net_device *dev)
 	err = dev_get_phys_port_id(dev, &ppid);
 	if (err) {
 		if (err == -EOPNOTSUPP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put(skb, IFLA_PHYS_PORT_ID, ppid.id_len, ppid.id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1031,13 +1127,20 @@ static int rtnl_phys_port_name_fill(struct sk_buff *skb, struct net_device *dev)
 	err = dev_get_phys_port_name(dev, name, sizeof(name));
 	if (err) {
 		if (err == -EOPNOTSUPP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put_string(skb, IFLA_PHYS_PORT_NAME, name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1053,14 +1156,19 @@ static int rtnl_phys_switch_id_fill(struct sk_buff *skb, struct net_device *dev)
 	err = switchdev_port_attr_get(dev, &attr);
 	if (err) {
 		if (err == -EOPNOTSUPP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put(skb, IFLA_PHYS_SWITCH_ID, attr.u.ppid.id_len,
 		    attr.u.ppid.id))
 		return -EMSGSIZE;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1073,15 +1181,20 @@ static noinline_for_stack int rtnl_fill_stats(struct sk_buff *skb,
 	attr = nla_reserve_64bit(skb, IFLA_STATS64,
 				 sizeof(struct rtnl_link_stats64), IFLA_PAD);
 	if (!attr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sp = nla_data(attr);
 	dev_get_stats(dev, sp);
 
 	attr = nla_reserve(skb, IFLA_STATS,
 			   sizeof(struct rtnl_link_stats));
 	if (!attr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	copy_rtnl_link_stats(nla_data(attr), sp);
 
@@ -1224,7 +1337,9 @@ static int rtnl_fill_link_ifmap(struct sk_buff *skb, struct net_device *dev)
 	map.port        = dev->if_port;
 
 	if (nla_put_64bit(skb, IFLA_MAP, sizeof(map), &map, IFLA_PAD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	return 0;
 }
@@ -1239,11 +1354,14 @@ static u8 rtnl_xdp_attached_mode(struct net_device *dev, u32 *prog_id)
 	*prog_id = 0;
 	generic_xdp_prog = rtnl_dereference(dev->xdp_prog);
 	if (generic_xdp_prog) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*prog_id = generic_xdp_prog->aux->id;
 		return XDP_ATTACHED_SKB;
 	}
 	if (!ops->ndo_xdp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return XDP_ATTACHED_NONE;
+}
 
 	return __dev_xdp_attached(dev, ops->ndo_xdp, prog_id);
 }
@@ -1256,7 +1374,9 @@ static int rtnl_xdp_fill(struct sk_buff *skb, struct net_device *dev)
 
 	xdp = nla_nest_start(skb, IFLA_XDP);
 	if (!xdp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	err = nla_put_u8(skb, IFLA_XDP_ATTACHED,
 			 rtnl_xdp_attached_mode(dev, &prog_id));
@@ -1264,6 +1384,7 @@ static int rtnl_xdp_fill(struct sk_buff *skb, struct net_device *dev)
 		goto err_cancel;
 
 	if (prog_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = nla_put_u32(skb, IFLA_XDP_PROG_ID, prog_id);
 		if (err)
 			goto err_cancel;
@@ -1321,8 +1442,11 @@ static int rtnl_fill_ifinfo(struct sk_buff *skb, struct net_device *dev,
 	ASSERT_RTNL();
 	nlh = nlmsg_put(skb, pid, seq, type, sizeof(*ifm), flags);
 	if (nlh == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ifm = nlmsg_data(nlh);
 	ifm->ifi_family = AF_UNSPEC;
 	ifm->__ifi_pad = 0;
@@ -1360,6 +1484,7 @@ static int rtnl_fill_ifinfo(struct sk_buff *skb, struct net_device *dev,
 		goto nla_put_failure;
 
 	if (event != IFLA_EVENT_NONE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (nla_put_u32(skb, IFLA_EVENT, event))
 			goto nla_put_failure;
 	}
@@ -1398,11 +1523,14 @@ static int rtnl_fill_ifinfo(struct sk_buff *skb, struct net_device *dev,
 		vfinfo = nla_nest_start(skb, IFLA_VFINFO_LIST);
 		if (!vfinfo)
 			goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < num_vfs; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (rtnl_fill_vfinfo(skb, dev, i, vfinfo))
 				goto nla_put_failure;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nla_nest_end(skb, vfinfo);
 	}
 
@@ -1422,6 +1550,7 @@ static int rtnl_fill_ifinfo(struct sk_buff *skb, struct net_device *dev,
 		struct net *link_net = dev->rtnl_link_ops->get_link_net(dev);
 
 		if (!net_eq(dev_net(dev), link_net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			int id = peernet2id_alloc(dev_net(dev), link_net);
 
 			if (nla_put_s32(skb, IFLA_LINK_NETNSID, id))
@@ -1449,7 +1578,9 @@ static int rtnl_fill_ifinfo(struct sk_buff *skb, struct net_device *dev,
 			 * continue.
 			 */
 			if (err == -ENODATA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				nla_nest_cancel(skb, af);
+}
 			else if (err < 0)
 				goto nla_put_failure;
 
@@ -1577,12 +1708,19 @@ static bool link_master_filtered(struct net_device *dev, int master_idx)
 	struct net_device *master;
 
 	if (!master_idx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	master = netdev_master_upper_dev_get(dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!master || master->ifindex != master_idx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1590,8 +1728,11 @@ static bool link_kind_filtered(const struct net_device *dev,
 			       const struct rtnl_link_ops *kind_ops)
 {
 	if (kind_ops && dev->rtnl_link_ops != kind_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1603,6 +1744,7 @@ static bool link_dump_filtered(struct net_device *dev,
 	    link_kind_filtered(dev, kind_ops))
 		return true;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1637,19 +1779,28 @@ static int rtnl_dump_ifinfo(struct sk_buff *skb, struct netlink_callback *cb)
 	if (nlmsg_parse(cb->nlh, hdrlen, tb, IFLA_MAX,
 			ifla_policy, NULL) >= 0) {
 		if (tb[IFLA_EXT_MASK])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ext_filter_mask = nla_get_u32(tb[IFLA_EXT_MASK]);
+}
 
 		if (tb[IFLA_MASTER])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			master_idx = nla_get_u32(tb[IFLA_MASTER]);
+}
 
 		if (tb[IFLA_LINKINFO])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kind_ops = linkinfo_to_kind_ops(tb[IFLA_LINKINFO]);
+}
 
 		if (master_idx || kind_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flags |= NLM_F_DUMP_FILTERED;
+}
 	}
 
 	for (h = s_h; h < NETDEV_HASHENTRIES; h++, s_idx = 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		idx = 0;
 		head = &net->dev_index_head[h];
 		hlist_for_each_entry(dev, head, index_hlist) {
@@ -1687,6 +1838,7 @@ static int rtnl_dump_ifinfo(struct sk_buff *skb, struct netlink_callback *cb)
 int rtnl_nla_parse_ifla(struct nlattr **tb, const struct nlattr *head, int len,
 			struct netlink_ext_ack *exterr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nla_parse(tb, IFLA_MAX, head, len, ifla_policy, exterr);
 }
 EXPORT_SYMBOL(rtnl_nla_parse_ifla);
@@ -1698,7 +1850,9 @@ struct net *rtnl_link_get_net(struct net *src_net, struct nlattr *tb[])
 	 * network namespace we are talking about.
 	 */
 	if (tb[IFLA_NET_NS_PID])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net = get_net_ns_by_pid(nla_get_u32(tb[IFLA_NET_NS_PID]));
+}
 	else if (tb[IFLA_NET_NS_FD])
 		net = get_net_ns_by_fd(nla_get_u32(tb[IFLA_NET_NS_FD]));
 	else
@@ -1727,19 +1881,26 @@ static int validate_linkmsg(struct net_device *dev, struct nlattr *tb[])
 			const struct rtnl_af_ops *af_ops;
 
 			if (!(af_ops = rtnl_af_lookup(nla_type(af))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EAFNOSUPPORT;
+}
 
 			if (!af_ops->set_link_af)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EOPNOTSUPP;
+}
 
 			if (af_ops->validate_link_af) {
 				err = af_ops->validate_link_af(dev, af);
 				if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return err;
+}
 			}
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1753,6 +1914,7 @@ static int handle_infiniband_guid(struct net_device *dev, struct ifla_vf_guid *i
 
 static int handle_vf_guid(struct net_device *dev, struct ifla_vf_guid *ivt, int guid_type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->type != ARPHRD_INFINIBAND)
 		return -EOPNOTSUPP;
 
@@ -1765,6 +1927,7 @@ static int do_setvfinfo(struct net_device *dev, struct nlattr **tb)
 	int err = -EINVAL;
 
 	if (tb[IFLA_VF_MAC]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct ifla_vf_mac *ivm = nla_data(tb[IFLA_VF_MAC]);
 
 		err = -EOPNOTSUPP;
@@ -1914,6 +2077,7 @@ static int do_setvfinfo(struct net_device *dev, struct nlattr **tb)
 
 static int do_set_master(struct net_device *dev, int ifindex)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *upper_dev = netdev_master_upper_dev_get(dev);
 	const struct net_device_ops *ops;
 	int err;
@@ -1959,20 +2123,26 @@ static int do_setlink(const struct sk_buff *skb,
 	int err;
 
 	if (tb[IFLA_NET_NS_PID] || tb[IFLA_NET_NS_FD]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct net *net = rtnl_link_get_net(dev_net(dev), tb);
 		if (IS_ERR(net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(net);
 			goto errout;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!netlink_ns_capable(skb, net->user_ns, CAP_NET_ADMIN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_net(net);
 			err = -EPERM;
 			goto errout;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = dev_change_net_namespace(dev, net, ifname);
 		put_net(net);
 		if (err)
 			goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status |= DO_SETLINK_MODIFIED;
 	}
 
@@ -1981,15 +2151,19 @@ static int do_setlink(const struct sk_buff *skb,
 		struct ifmap k_map;
 
 		if (!ops->ndo_set_config) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EOPNOTSUPP;
 			goto errout;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!netif_device_present(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENODEV;
 			goto errout;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		u_map = nla_data(tb[IFLA_MAP]);
 		k_map.mem_start = (unsigned long) u_map->mem_start;
 		k_map.mem_end = (unsigned long) u_map->mem_end;
@@ -2002,6 +2176,7 @@ static int do_setlink(const struct sk_buff *skb,
 		if (err < 0)
 			goto errout;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status |= DO_SETLINK_NOTIFY;
 	}
 
@@ -2009,31 +2184,39 @@ static int do_setlink(const struct sk_buff *skb,
 		struct sockaddr *sa;
 		int len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = sizeof(sa_family_t) + max_t(size_t, dev->addr_len,
 						  sizeof(*sa));
 		sa = kmalloc(len, GFP_KERNEL);
 		if (!sa) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENOMEM;
 			goto errout;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sa->sa_family = dev->type;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(sa->sa_data, nla_data(tb[IFLA_ADDRESS]),
 		       dev->addr_len);
 		err = dev_set_mac_address(dev, sa);
 		kfree(sa);
 		if (err)
 			goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status |= DO_SETLINK_MODIFIED;
 	}
 
 	if (tb[IFLA_MTU]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = dev_set_mtu(dev, nla_get_u32(tb[IFLA_MTU]));
 		if (err < 0)
 			goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status |= DO_SETLINK_MODIFIED;
 	}
 
 	if (tb[IFLA_GROUP]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_set_group(dev, nla_get_u32(tb[IFLA_GROUP]));
 		status |= DO_SETLINK_NOTIFY;
 	}
@@ -2044,21 +2227,26 @@ static int do_setlink(const struct sk_buff *skb,
 	 * requested.
 	 */
 	if (ifm->ifi_index > 0 && ifname[0]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = dev_change_name(dev, ifname);
 		if (err < 0)
 			goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status |= DO_SETLINK_MODIFIED;
 	}
 
 	if (tb[IFLA_IFALIAS]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = dev_set_alias(dev, nla_data(tb[IFLA_IFALIAS]),
 				    nla_len(tb[IFLA_IFALIAS]));
 		if (err < 0)
 			goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status |= DO_SETLINK_NOTIFY;
 	}
 
 	if (tb[IFLA_BROADCAST]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nla_memcpy(dev->broadcast, tb[IFLA_BROADCAST], dev->addr_len);
 		call_netdevice_notifiers(NETDEV_CHANGEADDR, dev);
 	}
@@ -2070,45 +2258,59 @@ static int do_setlink(const struct sk_buff *skb,
 	}
 
 	if (tb[IFLA_MASTER]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = do_set_master(dev, nla_get_u32(tb[IFLA_MASTER]));
 		if (err)
 			goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status |= DO_SETLINK_MODIFIED;
 	}
 
 	if (tb[IFLA_CARRIER]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = dev_change_carrier(dev, nla_get_u8(tb[IFLA_CARRIER]));
 		if (err)
 			goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status |= DO_SETLINK_MODIFIED;
 	}
 
 	if (tb[IFLA_TXQLEN]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unsigned int value = nla_get_u32(tb[IFLA_TXQLEN]);
 		unsigned int orig_len = dev->tx_queue_len;
 
 		if (dev->tx_queue_len ^ value) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->tx_queue_len = value;
 			err = call_netdevice_notifiers(
 			      NETDEV_CHANGE_TX_QUEUE_LEN, dev);
 			err = notifier_to_errno(err);
 			if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev->tx_queue_len = orig_len;
 				goto errout;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status |= DO_SETLINK_MODIFIED;
 		}
 	}
 
 	if (tb[IFLA_OPERSTATE])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_operstate(dev, nla_get_u8(tb[IFLA_OPERSTATE]));
+}
 
 	if (tb[IFLA_LINKMODE]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unsigned char value = nla_get_u8(tb[IFLA_LINKMODE]);
 
 		write_lock_bh(&dev_base_lock);
 		if (dev->link_mode ^ value)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status |= DO_SETLINK_NOTIFY;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->link_mode = value;
 		write_unlock_bh(&dev_base_lock);
 	}
@@ -2118,22 +2320,29 @@ static int do_setlink(const struct sk_buff *skb,
 		struct nlattr *attr;
 		int rem;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nla_for_each_nested(attr, tb[IFLA_VFINFO_LIST], rem) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (nla_type(attr) != IFLA_VF_INFO ||
 			    nla_len(attr) < NLA_HDRLEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EINVAL;
 				goto errout;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = nla_parse_nested(vfinfo, IFLA_VF_MAX, attr,
 					       ifla_vf_policy, NULL);
 			if (err < 0)
 				goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = do_setvfinfo(dev, vfinfo);
 			if (err < 0)
 				goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status |= DO_SETLINK_NOTIFY;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 
 	if (tb[IFLA_VF_PORTS]) {
@@ -2146,27 +2355,36 @@ static int do_setlink(const struct sk_buff *skb,
 		if (!ops->ndo_set_vf_port)
 			goto errout;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nla_for_each_nested(attr, tb[IFLA_VF_PORTS], rem) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (nla_type(attr) != IFLA_VF_PORT ||
 			    nla_len(attr) < NLA_HDRLEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EINVAL;
 				goto errout;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = nla_parse_nested(port, IFLA_PORT_MAX, attr,
 					       ifla_port_policy, NULL);
 			if (err < 0)
 				goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!port[IFLA_PORT_VF]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EOPNOTSUPP;
 				goto errout;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vf = nla_get_u32(port[IFLA_PORT_VF]);
 			err = ops->ndo_set_vf_port(dev, vf, port);
 			if (err < 0)
 				goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status |= DO_SETLINK_NOTIFY;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 
 	if (tb[IFLA_PORT_SELF]) {
@@ -2178,11 +2396,16 @@ static int do_setlink(const struct sk_buff *skb,
 		if (err < 0)
 			goto errout;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EOPNOTSUPP;
 		if (ops->ndo_set_vf_port)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = ops->ndo_set_vf_port(dev, PORT_SELF_VF, port);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err < 0)
 			goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status |= DO_SETLINK_NOTIFY;
 	}
 
@@ -2194,7 +2417,9 @@ static int do_setlink(const struct sk_buff *skb,
 			const struct rtnl_af_ops *af_ops;
 
 			if (!(af_ops = rtnl_af_lookup(nla_type(af))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				BUG();
+}
 
 			err = af_ops->set_link_af(dev, af);
 			if (err < 0)
@@ -2203,6 +2428,7 @@ static int do_setlink(const struct sk_buff *skb,
 			status |= DO_SETLINK_NOTIFY;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 
 	if (tb[IFLA_PROTO_DOWN]) {
@@ -2210,6 +2436,7 @@ static int do_setlink(const struct sk_buff *skb,
 					    nla_get_u8(tb[IFLA_PROTO_DOWN]));
 		if (err)
 			goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status |= DO_SETLINK_NOTIFY;
 	}
 
@@ -2222,29 +2449,38 @@ static int do_setlink(const struct sk_buff *skb,
 		if (err < 0)
 			goto errout;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (xdp[IFLA_XDP_ATTACHED] || xdp[IFLA_XDP_PROG_ID]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
 			goto errout;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (xdp[IFLA_XDP_FLAGS]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			xdp_flags = nla_get_u32(xdp[IFLA_XDP_FLAGS]);
 			if (xdp_flags & ~XDP_FLAGS_MASK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EINVAL;
 				goto errout;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (hweight32(xdp_flags & XDP_FLAGS_MODES) > 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EINVAL;
 				goto errout;
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (xdp[IFLA_XDP_FD]) {
 			err = dev_change_xdp_fd(dev, extack,
 						nla_get_s32(xdp[IFLA_XDP_FD]),
 						xdp_flags);
 			if (err)
 				goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			status |= DO_SETLINK_NOTIFY;
 		}
 	}
@@ -2255,8 +2491,10 @@ static int do_setlink(const struct sk_buff *skb,
 			netdev_state_change(dev);
 
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net_warn_ratelimited("A link change request failed with some changes committed already. Interface %s may have been left with an inconsistent configuration, please check.\n",
 					     dev->name);
+}
 	}
 
 	return err;
@@ -2265,6 +2503,7 @@ static int do_setlink(const struct sk_buff *skb,
 static int rtnl_setlink(struct sk_buff *skb, struct nlmsghdr *nlh,
 			struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct ifinfomsg *ifm;
 	struct net_device *dev;
@@ -2312,7 +2551,9 @@ static int rtnl_group_dellink(const struct net *net, int group)
 	bool found = false;
 
 	if (!group)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	for_each_netdev(net, dev) {
 		if (dev->group == group) {
@@ -2347,6 +2588,7 @@ int rtnl_delete_link(struct net_device *dev)
 	LIST_HEAD(list_kill);
 
 	ops = dev->rtnl_link_ops;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ops || !ops->dellink)
 		return -EOPNOTSUPP;
 
@@ -2360,6 +2602,7 @@ EXPORT_SYMBOL_GPL(rtnl_delete_link);
 static int rtnl_dellink(struct sk_buff *skb, struct nlmsghdr *nlh,
 			struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct net_device *dev;
 	struct ifinfomsg *ifm;
@@ -2396,6 +2639,7 @@ int rtnl_configure_link(struct net_device *dev, const struct ifinfomsg *ifm)
 	int err;
 
 	old_flags = dev->flags;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ifm && (ifm->ifi_flags || ifm->ifi_change)) {
 		err = __dev_change_flags(dev, rtnl_dev_combine_flags(dev, ifm));
 		if (err < 0)
@@ -2418,7 +2662,9 @@ struct net_device *rtnl_create_link(struct net *net,
 	unsigned int num_rx_queues = 1;
 
 	if (tb[IFLA_NUM_TX_QUEUES])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		num_tx_queues = nla_get_u32(tb[IFLA_NUM_TX_QUEUES]);
+}
 	else if (ops->get_num_tx_queues)
 		num_tx_queues = ops->get_num_tx_queues();
 
@@ -2468,6 +2714,7 @@ static int rtnl_group_changelink(const struct sk_buff *skb,
 	struct net_device *dev, *aux;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev_safe(net, dev, aux) {
 		if (dev->group == group) {
 			err = do_setlink(skb, dev, ifm, extack, tb, NULL, 0);
@@ -2503,16 +2750,22 @@ static int rtnl_newlink(struct sk_buff *skb, struct nlmsghdr *nlh,
 		return err;
 
 	if (tb[IFLA_IFNAME])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nla_strlcpy(ifname, tb[IFLA_IFNAME], IFNAMSIZ);
+}
 	else
 		ifname[0] = '\0';
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ifm = nlmsg_data(nlh);
 	if (ifm->ifi_index > 0)
 		dev = __dev_get_by_index(net, ifm->ifi_index);
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ifname[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev = __dev_get_by_name(net, ifname);
+}
 		else
 			dev = NULL;
 	}
@@ -2520,23 +2773,33 @@ static int rtnl_newlink(struct sk_buff *skb, struct nlmsghdr *nlh,
 	if (dev) {
 		master_dev = netdev_master_upper_dev_get(dev);
 		if (master_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			m_ops = master_dev->rtnl_link_ops;
+}
 	}
 
 	err = validate_linkmsg(dev, tb);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (tb[IFLA_LINKINFO]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = nla_parse_nested(linkinfo, IFLA_INFO_MAX,
 				       tb[IFLA_LINKINFO], ifla_info_policy,
 				       NULL);
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(linkinfo, 0, sizeof(linkinfo));
+}
 
 	if (linkinfo[IFLA_INFO_KIND]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nla_strlcpy(kind, linkinfo[IFLA_INFO_KIND], sizeof(kind));
 		ops = rtnl_link_ops_get(kind);
 	} else {
@@ -2552,38 +2815,56 @@ static int rtnl_newlink(struct sk_buff *skb, struct nlmsghdr *nlh,
 		struct net *dest_net, *link_net = NULL;
 
 		if (ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ops->maxtype && linkinfo[IFLA_INFO_DATA]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = nla_parse_nested(attr, ops->maxtype,
 						       linkinfo[IFLA_INFO_DATA],
 						       ops->policy, NULL);
 				if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return err;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				data = attr;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ops->validate) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = ops->validate(tb, data, extack);
 				if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return err;
+}
 			}
 		}
 
 		if (m_ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (m_ops->slave_maxtype &&
 			    linkinfo[IFLA_INFO_SLAVE_DATA]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = nla_parse_nested(slave_attr,
 						       m_ops->slave_maxtype,
 						       linkinfo[IFLA_INFO_SLAVE_DATA],
 						       m_ops->slave_policy,
 						       NULL);
 				if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return err;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				slave_data = slave_attr;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (m_ops->slave_validate) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = m_ops->slave_validate(tb, slave_data,
 							    extack);
 				if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return err;
+}
 			}
 		}
 
@@ -2591,30 +2872,46 @@ static int rtnl_newlink(struct sk_buff *skb, struct nlmsghdr *nlh,
 			int status = 0;
 
 			if (nlh->nlmsg_flags & NLM_F_EXCL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EEXIST;
+}
 			if (nlh->nlmsg_flags & NLM_F_REPLACE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EOPNOTSUPP;
+}
 
 			if (linkinfo[IFLA_INFO_DATA]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!ops || ops != dev->rtnl_link_ops ||
 				    !ops->changelink)
 					return -EOPNOTSUPP;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = ops->changelink(dev, tb, data, extack);
 				if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return err;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status |= DO_SETLINK_NOTIFY;
 			}
 
 			if (linkinfo[IFLA_INFO_SLAVE_DATA]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!m_ops || !m_ops->slave_changelink)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -EOPNOTSUPP;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = m_ops->slave_changelink(master_dev, dev,
 							      tb, slave_data,
 							      extack);
 				if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return err;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				status |= DO_SETLINK_NOTIFY;
 			}
 
@@ -2622,20 +2919,28 @@ static int rtnl_newlink(struct sk_buff *skb, struct nlmsghdr *nlh,
 					  status);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(nlh->nlmsg_flags & NLM_F_CREATE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ifm->ifi_index == 0 && tb[IFLA_GROUP])
 				return rtnl_group_changelink(skb, net,
 						nla_get_u32(tb[IFLA_GROUP]),
 						ifm, extack, tb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENODEV;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tb[IFLA_MAP] || tb[IFLA_PROTINFO])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EOPNOTSUPP;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ops) {
 #ifdef CONFIG_MODULES
 			if (kind[0]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__rtnl_unlock();
 				request_module("rtnl-link-%s", kind);
 				rtnl_lock();
@@ -2647,45 +2952,62 @@ static int rtnl_newlink(struct sk_buff *skb, struct nlmsghdr *nlh,
 			return -EOPNOTSUPP;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ops->setup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EOPNOTSUPP;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ifname[0]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			snprintf(ifname, IFNAMSIZ, "%s%%d", ops->kind);
 			name_assign_type = NET_NAME_ENUM;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dest_net = rtnl_link_get_net(net, tb);
 		if (IS_ERR(dest_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return PTR_ERR(dest_net);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EPERM;
 		if (!netlink_ns_capable(skb, dest_net->user_ns, CAP_NET_ADMIN))
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tb[IFLA_LINK_NETNSID]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			int id = nla_get_s32(tb[IFLA_LINK_NETNSID]);
 
 			link_net = get_net_ns_by_id(dest_net, id);
 			if (!link_net) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err =  -EINVAL;
 				goto out;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EPERM;
 			if (!netlink_ns_capable(skb, link_net->user_ns, CAP_NET_ADMIN))
 				goto out;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev = rtnl_create_link(link_net ? : dest_net, ifname,
 				       name_assign_type, ops, tb);
 		if (IS_ERR(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(dev);
 			goto out;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->ifindex = ifm->ifi_index;
 
 		if (ops->newlink) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = ops->newlink(link_net ? : net, dev, tb, data,
 					   extack);
 			/* Drivers should call free_netdev() in ->destructor
@@ -2695,32 +3017,44 @@ static int rtnl_newlink(struct sk_buff *skb, struct nlmsghdr *nlh,
 			if (err < 0) {
 				/* If device is not registered at all, free it now */
 				if (dev->reg_state == NETREG_UNINITIALIZED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					free_netdev(dev);
+}
 				goto out;
 			}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = register_netdevice(dev);
 			if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				free_netdev(dev);
 				goto out;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = rtnl_configure_link(dev, ifm);
 		if (err < 0)
 			goto out_unregister;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (link_net) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = dev_change_net_namespace(dev, dest_net, ifname);
 			if (err < 0)
 				goto out_unregister;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tb[IFLA_MASTER]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = do_set_master(dev, nla_get_u32(tb[IFLA_MASTER]));
 			if (err)
 				goto out_unregister;
 		}
 out:
 		if (link_net)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_net(link_net);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_net(dest_net);
 		return err;
 out_unregister:
@@ -2730,6 +3064,7 @@ static int rtnl_newlink(struct sk_buff *skb, struct nlmsghdr *nlh,
 			ops->dellink(dev, &list_kill);
 			unregister_netdevice_many(&list_kill);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unregister_netdevice(dev);
 		}
 		goto out;
@@ -2750,28 +3085,39 @@ static int rtnl_getlink(struct sk_buff *skb, struct nlmsghdr *nlh,
 
 	err = nlmsg_parse(nlh, sizeof(*ifm), tb, IFLA_MAX, ifla_policy, extack);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (tb[IFLA_IFNAME])
 		nla_strlcpy(ifname, tb[IFLA_IFNAME], IFNAMSIZ);
 
 	if (tb[IFLA_EXT_MASK])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ext_filter_mask = nla_get_u32(tb[IFLA_EXT_MASK]);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ifm = nlmsg_data(nlh);
 	if (ifm->ifi_index > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev = __dev_get_by_index(net, ifm->ifi_index);
+}
 	else if (tb[IFLA_IFNAME])
 		dev = __dev_get_by_name(net, ifname);
 	else
 		return -EINVAL;
 
 	if (dev == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	nskb = nlmsg_new(if_nlmsg_size(dev, ext_filter_mask), GFP_KERNEL);
 	if (nskb == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOBUFS;
+}
 
 	err = rtnl_fill_ifinfo(nskb, dev, RTM_NEWLINK, NETLINK_CB(skb).portid,
 			       nlh->nlmsg_seq, 0, 0, ext_filter_mask, 0);
@@ -2782,6 +3128,7 @@ static int rtnl_getlink(struct sk_buff *skb, struct nlmsghdr *nlh,
 	} else
 		err = rtnl_unicast(nskb, net, NETLINK_CB(skb).portid);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -2800,11 +3147,15 @@ static u16 rtnl_calcit(struct sk_buff *skb, struct nlmsghdr *nlh)
 
 	if (nlmsg_parse(nlh, hdrlen, tb, IFLA_MAX, ifla_policy, NULL) >= 0) {
 		if (tb[IFLA_EXT_MASK])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ext_filter_mask = nla_get_u32(tb[IFLA_EXT_MASK]);
+}
 	}
 
 	if (!ext_filter_mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NLMSG_GOODSIZE;
+}
 	/*
 	 * traverse the list of net devices and compute the minimum
 	 * buffer size based upon the filter mask.
@@ -2815,6 +3166,7 @@ static u16 rtnl_calcit(struct sk_buff *skb, struct nlmsghdr *nlh)
 					     if_nlmsg_size(dev,
 						           ext_filter_mask));
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	return nlmsg_total_size(min_ifinfo_dump_size);
@@ -2826,7 +3178,9 @@ static int rtnl_dump_all(struct sk_buff *skb, struct netlink_callback *cb)
 	int s_idx = cb->family;
 
 	if (s_idx == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		s_idx = 1;
+}
 
 	for (idx = 1; idx <= RTNL_FAMILY_MAX; idx++) {
 		int type = cb->nlh->nlmsg_type-RTM_BASE;
@@ -2861,6 +3215,7 @@ struct sk_buff *rtmsg_ifinfo_build_skb(int type, struct net_device *dev,
 				       unsigned int change,
 				       u32 event, gfp_t flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(dev);
 	struct sk_buff *skb;
 	int err = -ENOBUFS;
@@ -2877,15 +3232,20 @@ struct sk_buff *rtmsg_ifinfo_build_skb(int type, struct net_device *dev,
 		kfree_skb(skb);
 		goto errout;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb;
 errout:
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtnl_set_sk_err(net, RTNLGRP_LINK, err);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
 void rtmsg_ifinfo_send(struct sk_buff *skb, struct net_device *dev, gfp_t flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(dev);
 
 	rtnl_notify(skb, net, 0, RTNLGRP_LINK, NULL, flags);
@@ -2898,7 +3258,9 @@ static void rtmsg_ifinfo_event(int type, struct net_device *dev,
 	struct sk_buff *skb;
 
 	if (dev->reg_state != NETREG_REGISTERED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	skb = rtmsg_ifinfo_build_skb(type, dev, change, event, flags);
 	if (skb)
@@ -2923,7 +3285,9 @@ static int nlmsg_populate_fdb_fill(struct sk_buff *skb,
 
 	nlh = nlmsg_put(skb, pid, seq, type, sizeof(*ndm), nlflags);
 	if (!nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	ndm = nlmsg_data(nlh);
 	ndm->ndm_family  = AF_BRIDGE;
@@ -2959,6 +3323,7 @@ static inline size_t rtnl_fdb_nlmsg_size(void)
 static void rtnl_fdb_notify(struct net_device *dev, u8 *addr, u16 vid, int type,
 			    u16 ndm_state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(dev);
 	struct sk_buff *skb;
 	int err = -ENOBUFS;
@@ -3022,6 +3387,7 @@ static int fdb_vid_parse(struct nlattr *vlan_attr, u16 *p_vid)
 	u16 vid = 0;
 
 	if (vlan_attr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (nla_len(vlan_attr) != sizeof(u16)) {
 			pr_info("PF_BRIDGE: RTM_NEWNEIGH with invalid vlan\n");
 			return -EINVAL;
@@ -3042,6 +3408,7 @@ static int fdb_vid_parse(struct nlattr *vlan_attr, u16 *p_vid)
 static int rtnl_fdb_add(struct sk_buff *skb, struct nlmsghdr *nlh,
 			struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct ndmsg *ndm;
 	struct nlattr *tb[NDA_MAX+1];
@@ -3127,6 +3494,7 @@ int ndo_dflt_fdb_del(struct ndmsg *ndm,
 	 * implement its own handler for this.
 	 */
 	if (!(ndm->ndm_state & NUD_PERMANENT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("%s: FDB only supports static addresses\n", dev->name);
 		return err;
 	}
@@ -3143,6 +3511,7 @@ EXPORT_SYMBOL(ndo_dflt_fdb_del);
 static int rtnl_fdb_del(struct sk_buff *skb, struct nlmsghdr *nlh,
 			struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct ndmsg *ndm;
 	struct nlattr *tb[NDA_MAX+1];
@@ -3229,6 +3598,7 @@ static int nlmsg_populate_fdb(struct sk_buff *skb,
 	portid = NETLINK_CB(cb->skb).portid;
 	seq = cb->nlh->nlmsg_seq;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(ha, &list->list, list) {
 		if (*idx < cb->args[2])
 			goto skip;
@@ -3265,6 +3635,7 @@ int ndo_dflt_fdb_dump(struct sk_buff *skb,
 	err = nlmsg_populate_fdb(skb, cb, dev, idx, &dev->uc);
 	if (err)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = nlmsg_populate_fdb(skb, cb, dev, idx, &dev->mc);
 out:
 	netif_addr_unlock_bh(dev);
@@ -3292,6 +3663,7 @@ static int rtnl_fdb_dump(struct sk_buff *skb, struct netlink_callback *cb)
 	err = nlmsg_parse(cb->nlh, sizeof(struct ifinfomsg), tb,
 			  IFLA_MAX, ifla_policy, NULL);
 	if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
 	} else if (err == 0) {
 		if (tb[IFLA_MASTER])
@@ -3379,6 +3751,7 @@ static int rtnl_fdb_dump(struct sk_buff *skb, struct netlink_callback *cb)
 static int brport_nla_put_flag(struct sk_buff *skb, u32 flags, u32 mask,
 			       unsigned int attrnum, unsigned int flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mask & flag)
 		return nla_put_u8(skb, attrnum, !!(flags & flag));
 	return 0;
@@ -3396,6 +3769,7 @@ int ndo_dflt_bridge_getlink(struct sk_buff *skb, u32 pid, u32 seq,
 	struct ifinfomsg *ifm;
 	struct nlattr *br_afspec;
 	struct nlattr *protinfo;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u8 operstate = netif_running(dev) ? dev->operstate : IF_OPER_DOWN;
 	struct net_device *br_dev = netdev_master_upper_dev_get(dev);
 	int err = 0;
@@ -3485,6 +3859,7 @@ EXPORT_SYMBOL_GPL(ndo_dflt_bridge_getlink);
 
 static int rtnl_bridge_getlink(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct net_device *dev;
 	int idx = 0;
@@ -4227,21 +4602,28 @@ static int rtnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh,
 
 	doit = READ_ONCE(handlers[type].doit);
 	if (!doit) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		family = PF_UNSPEC;
 		handlers = rcu_dereference(rtnl_msg_handlers[family]);
 	}
 
 	flags = READ_ONCE(handlers[type].flags);
 	if (flags & RTNL_FLAG_DOIT_UNLOCKED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		refcount_inc(&rtnl_msg_handlers_ref[family]);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		doit = READ_ONCE(handlers[type].doit);
 		rcu_read_unlock();
 		if (doit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = doit(skb, nlh, extack);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		refcount_dec(&rtnl_msg_handlers_ref[family]);
 		return err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	rtnl_lock();
@@ -4251,6 +4633,7 @@ static int rtnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh,
 		if (doit)
 			err = doit(skb, nlh, extack);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtnl_unlock();
 	return err;
 
@@ -4270,14 +4653,18 @@ static int rtnetlink_bind(struct net *net, int group)
 	case RTNLGRP_IPV4_MROUTE_R:
 	case RTNLGRP_IPV6_MROUTE_R:
 		if (!ns_capable(net->user_ns, CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 		break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int rtnetlink_event(struct notifier_block *this, unsigned long event, void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = netdev_notifier_info_to_dev(ptr);
 
 	switch (event) {
@@ -4320,7 +4707,9 @@ static int __net_init rtnetlink_net_init(struct net *net)
 
 	sk = netlink_kernel_create(net, NETLINK_ROUTE, &cfg);
 	if (!sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	net->rtnl = sk;
 	return 0;
 }
@@ -4344,7 +4733,9 @@ void __init rtnetlink_init(void)
 		refcount_set(&rtnl_msg_handlers_ref[i], 1);
 
 	if (register_pernet_subsys(&rtnetlink_net_ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("rtnetlink_init: cannot initialize rtnetlink\n");
+}
 
 	register_netdevice_notifier(&rtnetlink_dev_notifier);
 
diff --git a/net/core/scm.c b/net/core/scm.c
index b1ff8a4..9ee8c06 100644
--- a/net/core/scm.c
+++ b/net/core/scm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* scm.c - Socket level control messages processing.
  *
  * Author:	Alexey Kuznetsov, <kuznet@ms2.inr.ac.ru>
@@ -47,6 +49,7 @@
 
 static __inline__ int scm_check_creds(struct ucred *creds)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct cred *cred = current_cred();
 	kuid_t uid = make_kuid(cred->user_ns, creds->uid);
 	kgid_t gid = make_kgid(cred->user_ns, creds->gid);
@@ -75,16 +78,23 @@ static int scm_fp_copy(struct cmsghdr *cmsg, struct scm_fp_list **fplp)
 	num = (cmsg->cmsg_len - sizeof(struct cmsghdr))/sizeof(int);
 
 	if (num <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (num > SCM_MAX_FD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!fpl)
 	{
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fpl = kmalloc(sizeof(struct scm_fp_list), GFP_KERNEL);
 		if (!fpl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 		*fplp = fpl;
 		fpl->count = 0;
 		fpl->max = SCM_MAX_FD;
@@ -93,7 +103,9 @@ static int scm_fp_copy(struct cmsghdr *cmsg, struct scm_fp_list **fplp)
 	fpp = &fpl->fp[fpl->count];
 
 	if (fpl->count + num > fpl->max)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/*
 	 *	Verify the descriptors and increment the usage count.
@@ -105,7 +117,9 @@ static int scm_fp_copy(struct cmsghdr *cmsg, struct scm_fp_list **fplp)
 		struct file *file;
 
 		if (fd < 0 || !(file = fget_raw(fd)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EBADF;
+}
 		*fpp++ = file;
 		fpl->count++;
 	}
@@ -113,6 +127,7 @@ static int scm_fp_copy(struct cmsghdr *cmsg, struct scm_fp_list **fplp)
 	if (!fpl->user)
 		fpl->user = get_uid(current_user());
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return num;
 }
 
@@ -137,6 +152,7 @@ int __scm_send(struct socket *sock, struct msghdr *msg, struct scm_cookie *p)
 	int err;
 
 	for_each_cmsghdr(cmsg, msg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 
 		/* Verify that cmsg_len is at least sizeof(struct cmsghdr) */
@@ -169,28 +185,35 @@ int __scm_send(struct socket *sock, struct msghdr *msg, struct scm_cookie *p)
 			kgid_t gid;
 			if (cmsg->cmsg_len != CMSG_LEN(sizeof(struct ucred)))
 				goto error;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(&creds, CMSG_DATA(cmsg), sizeof(struct ucred));
 			err = scm_check_creds(&creds);
 			if (err)
 				goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p->creds.pid = creds.pid;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!p->pid || pid_vnr(p->pid) != creds.pid) {
 				struct pid *pid;
 				err = -ESRCH;
 				pid = find_get_pid(creds.pid);
 				if (!pid)
 					goto error;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				put_pid(p->pid);
 				p->pid = pid;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
 			uid = make_kuid(current_user_ns(), creds.uid);
 			gid = make_kgid(current_user_ns(), creds.gid);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!uid_valid(uid) || !gid_valid(gid))
 				goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p->creds.uid = uid;
 			p->creds.gid = gid;
 			break;
@@ -202,9 +225,11 @@ int __scm_send(struct socket *sock, struct msghdr *msg, struct scm_cookie *p)
 
 	if (p->fp && !p->fp->count)
 	{
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(p->fp);
 		p->fp = NULL;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 error:
@@ -222,13 +247,17 @@ int put_cmsg(struct msghdr * msg, int level, int type, int len, void *data)
 	int err;
 
 	if (MSG_CMSG_COMPAT & msg->msg_flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return put_cmsg_compat(msg, level, type, len, data);
+}
 
 	if (cm==NULL || msg->msg_controllen < sizeof(*cm)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msg->msg_flags |= MSG_CTRUNC;
 		return 0; /* XXX: return error? check spec. */
 	}
 	if (msg->msg_controllen < cmlen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msg->msg_flags |= MSG_CTRUNC;
 		cmlen = msg->msg_controllen;
 	}
@@ -264,6 +293,7 @@ void scm_detach_fds(struct msghdr *msg, struct scm_cookie *scm)
 	int err = 0, i;
 
 	if (MSG_CMSG_COMPAT & msg->msg_flags) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scm_detach_fds_compat(msg, scm);
 		return;
 	}
@@ -273,7 +303,9 @@ void scm_detach_fds(struct msghdr *msg, struct scm_cookie *scm)
 			 / sizeof(int));
 
 	if (fdnum < fdmax)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fdmax = fdnum;
+}
 
 	for (i=0, cmfptr=(__force int __user *)CMSG_DATA(cm); i<fdmax;
 	     i++, cmfptr++)
@@ -287,9 +319,11 @@ void scm_detach_fds(struct msghdr *msg, struct scm_cookie *scm)
 					  ? O_CLOEXEC : 0);
 		if (err < 0)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new_fd = err;
 		err = put_user(new_fd, cmfptr);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_unused_fd(new_fd);
 			break;
 		}
@@ -313,13 +347,17 @@ void scm_detach_fds(struct msghdr *msg, struct scm_cookie *scm)
 		if (!err) {
 			cmlen = CMSG_SPACE(i*sizeof(int));
 			if (msg->msg_controllen < cmlen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cmlen = msg->msg_controllen;
+}
 			msg->msg_control += cmlen;
 			msg->msg_controllen -= cmlen;
 		}
 	}
 	if (i < fdnum || (fdnum && fdmax <= 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msg->msg_flags |= MSG_CTRUNC;
+}
 
 	/*
 	 * All of the files that fit in the message have had their
@@ -335,7 +373,9 @@ struct scm_fp_list *scm_fp_dup(struct scm_fp_list *fpl)
 	int i;
 
 	if (!fpl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	new_fpl = kmemdup(fpl, offsetof(struct scm_fp_list, fp[fpl->count]),
 			  GFP_KERNEL);
@@ -345,6 +385,7 @@ struct scm_fp_list *scm_fp_dup(struct scm_fp_list *fpl)
 		new_fpl->max = new_fpl->count;
 		new_fpl->user = get_uid(fpl->user);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return new_fpl;
 }
 EXPORT_SYMBOL(scm_fp_dup);
diff --git a/net/core/secure_seq.c b/net/core/secure_seq.c
index 7232274..3f780c2 100644
--- a/net/core/secure_seq.c
+++ b/net/core/secure_seq.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2016 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.
  */
@@ -63,8 +65,11 @@ u32 secure_tcpv6_ts_off(const struct net *net,
 	};
 
 	if (net->ipv4.sysctl_tcp_timestamps != 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ts_secret_init();
 	return siphash(&combined, offsetofend(typeof(combined), daddr),
 		       &ts_secret);
@@ -117,8 +122,11 @@ EXPORT_SYMBOL(secure_ipv6_port_ephemeral);
 u32 secure_tcp_ts_off(const struct net *net, __be32 saddr, __be32 daddr)
 {
 	if (net->ipv4.sysctl_tcp_timestamps != 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ts_secret_init();
 	return siphash_2u32((__force u32)saddr, (__force u32)daddr,
 			    &ts_secret);
@@ -143,6 +151,7 @@ u32 secure_tcp_seq(__be32 saddr, __be32 daddr,
 
 u32 secure_ipv4_port_ephemeral(__be32 saddr, __be32 daddr, __be16 dport)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_secret_init();
 	return siphash_3u32((__force u32)saddr, (__force u32)daddr,
 			    (__force u16)dport, &net_secret);
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index cc811ad..9717902 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Routines having to do with the 'struct sk_buff' memory handlers.
  *
@@ -97,6 +99,7 @@ EXPORT_SYMBOL(sysctl_max_skb_frags);
 static void skb_panic(struct sk_buff *skb, unsigned int sz, void *addr,
 		      const char msg[])
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_emerg("%s: text:%p len:%d put:%d head:%p data:%p tail:%#lx end:%#lx dev:%s\n",
 		 msg, addr, skb->len, sz, skb->head, skb->data,
 		 (unsigned long)skb->tail, (unsigned long)skb->end,
@@ -106,11 +109,13 @@ static void skb_panic(struct sk_buff *skb, unsigned int sz, void *addr,
 
 static void skb_over_panic(struct sk_buff *skb, unsigned int sz, void *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_panic(skb, sz, addr, __func__);
 }
 
 static void skb_under_panic(struct sk_buff *skb, unsigned int sz, void *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_panic(skb, sz, addr, __func__);
 }
 
@@ -187,7 +192,9 @@ struct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask,
 		? skbuff_fclone_cache : skbuff_head_cache;
 
 	if (sk_memalloc_socks() && (flags & SKB_ALLOC_RX))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gfp_mask |= __GFP_MEMALLOC;
+}
 
 	/* Get the HEAD */
 	skb = kmem_cache_alloc_node(cache, gfp_mask & ~__GFP_DMA, node);
@@ -237,6 +244,7 @@ struct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask,
 	if (flags & SKB_ALLOC_FCLONE) {
 		struct sk_buff_fclones *fclones;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fclones = container_of(skb, struct sk_buff_fclones, skb1);
 
 		skb->fclone = SKB_FCLONE_ORIG;
@@ -280,7 +288,9 @@ struct sk_buff *__build_skb(void *data, unsigned int frag_size)
 
 	skb = kmem_cache_alloc(skbuff_head_cache, GFP_ATOMIC);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	size -= SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 
@@ -309,6 +319,7 @@ struct sk_buff *__build_skb(void *data, unsigned int frag_size)
  */
 struct sk_buff *build_skb(void *data, unsigned int frag_size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sk_buff *skb = __build_skb(data, frag_size);
 
 	if (skb && frag_size) {
@@ -337,6 +348,7 @@ static void *__netdev_alloc_frag(unsigned int fragsz, gfp_t gfp_mask)
 	unsigned long flags;
 	void *data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_irq_save(flags);
 	nc = this_cpu_ptr(&netdev_alloc_cache);
 	data = page_frag_alloc(nc, fragsz, gfp_mask);
@@ -353,12 +365,14 @@ static void *__netdev_alloc_frag(unsigned int fragsz, gfp_t gfp_mask)
  */
 void *netdev_alloc_frag(unsigned int fragsz)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __netdev_alloc_frag(fragsz, GFP_ATOMIC | __GFP_COLD);
 }
 EXPORT_SYMBOL(netdev_alloc_frag);
 
 static void *__napi_alloc_frag(unsigned int fragsz, gfp_t gfp_mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct napi_alloc_cache *nc = this_cpu_ptr(&napi_alloc_cache);
 
 	return page_frag_alloc(&nc->page, fragsz, gfp_mask);
@@ -366,6 +380,7 @@ static void *__napi_alloc_frag(unsigned int fragsz, gfp_t gfp_mask)
 
 void *napi_alloc_frag(unsigned int fragsz)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __napi_alloc_frag(fragsz, GFP_ATOMIC | __GFP_COLD);
 }
 EXPORT_SYMBOL(napi_alloc_frag);
@@ -392,6 +407,7 @@ struct sk_buff *__netdev_alloc_skb(struct net_device *dev, unsigned int len,
 	bool pfmemalloc;
 	void *data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	len += NET_SKB_PAD;
 
 	if ((len > SKB_WITH_OVERHEAD(PAGE_SIZE)) ||
@@ -463,31 +479,40 @@ struct sk_buff *__napi_alloc_skb(struct napi_struct *napi, unsigned int len,
 
 	if ((len > SKB_WITH_OVERHEAD(PAGE_SIZE)) ||
 	    (gfp_mask & (__GFP_DIRECT_RECLAIM | GFP_DMA))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb = __alloc_skb(len, gfp_mask, SKB_ALLOC_RX, NUMA_NO_NODE);
 		if (!skb)
 			goto skb_fail;
 		goto skb_success;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	len += SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 	len = SKB_DATA_ALIGN(len);
 
 	if (sk_memalloc_socks())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gfp_mask |= __GFP_MEMALLOC;
+}
 
 	data = page_frag_alloc(&nc->page, len, gfp_mask);
 	if (unlikely(!data))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	skb = __build_skb(data, len);
 	if (unlikely(!skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb_free_frag(data);
 		return NULL;
 	}
 
 	/* use OR instead of assignment to avoid clearing of bits in mask */
 	if (nc->page.pfmemalloc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb->pfmemalloc = 1;
+}
 	skb->head_frag = 1;
 
 skb_success:
@@ -512,6 +537,7 @@ EXPORT_SYMBOL(skb_add_rx_frag);
 void skb_coalesce_rx_frag(struct sk_buff *skb, int i, int size,
 			  unsigned int truesize)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_frag_t *frag = &skb_shinfo(skb)->frags[i];
 
 	skb_frag_size_add(frag, size);
@@ -523,12 +549,14 @@ EXPORT_SYMBOL(skb_coalesce_rx_frag);
 
 static void skb_drop_list(struct sk_buff **listp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree_skb_list(*listp);
 	*listp = NULL;
 }
 
 static inline void skb_drop_fraglist(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_drop_list(&skb_shinfo(skb)->frag_list);
 }
 
@@ -536,6 +564,7 @@ static void skb_clone_fraglist(struct sk_buff *skb)
 {
 	struct sk_buff *list;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_walk_frags(skb, list)
 		skb_get(list);
 }
@@ -545,13 +574,16 @@ static void skb_free_head(struct sk_buff *skb)
 	unsigned char *head = skb->head;
 
 	if (skb->head_frag)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb_free_frag(head);
+}
 	else
 		kfree(head);
 }
 
 static void skb_release_data(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct skb_shared_info *shinfo = skb_shinfo(skb);
 	int i;
 
@@ -564,7 +596,9 @@ static void skb_release_data(struct sk_buff *skb)
 		__skb_frag_unref(&shinfo->frags[i]);
 
 	if (shinfo->frag_list)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb_list(shinfo->frag_list);
+}
 
 	skb_zcopy_clear(skb, true);
 	skb_free_head(skb);
@@ -598,7 +632,9 @@ static void kfree_skbmem(struct sk_buff *skb)
 		break;
 	}
 	if (!refcount_dec_and_test(&fclones->fclone_ref))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 fastpath:
 	kmem_cache_free(skbuff_fclone_cache, fclones);
 }
@@ -2255,7 +2291,9 @@ int skb_splice_bits(struct sk_buff *skb, struct sock *sk, unsigned int offset,
 	__skb_splice_bits(skb, pipe, &offset, &tlen, &spd, sk);
 
 	if (spd.nr_pages)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = splice_to_pipe(pipe, &spd);
+}
 
 	return ret;
 }
@@ -2376,6 +2414,7 @@ EXPORT_SYMBOL_GPL(skb_send_sock);
 
 int skb_store_bits(struct sk_buff *skb, int offset, const void *from, int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int start = skb_headlen(skb);
 	struct sk_buff *frag_iter;
 	int i, copy;
@@ -2463,10 +2502,14 @@ __wsum __skb_checksum(const struct sk_buff *skb, int offset, int len,
 	/* Checksum header. */
 	if (copy > 0) {
 		if (copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copy = len;
+}
 		csum = ops->update(skb->data + offset, copy, csum);
 		if ((len -= copy) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return csum;
+}
 		offset += copy;
 		pos	= copy;
 	}
@@ -2485,47 +2528,65 @@ __wsum __skb_checksum(const struct sk_buff *skb, int offset, int len,
 			u8 *vaddr;
 
 			if (copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copy = len;
+}
 
 			skb_frag_foreach_page(frag,
 					      frag->page_offset + offset - start,
 					      copy, p, p_off, p_len, copied) {
 				vaddr = kmap_atomic(p);
 				csum2 = ops->update(vaddr + p_off, p_len, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kunmap_atomic(vaddr);
 				csum = ops->combine(csum, csum2, pos, p_len);
 				pos += p_len;
 			}
 
 			if (!(len -= copy))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return csum;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			offset += copy;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = end;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_walk_frags(skb, frag_iter) {
 		int end;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(start > offset + len);
 
 		end = start + frag_iter->len;
 		if ((copy = end - offset) > 0) {
 			__wsum csum2;
 			if (copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copy = len;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			csum2 = __skb_checksum(frag_iter, offset - start,
 					       copy, 0, ops);
 			csum = ops->combine(csum, csum2, pos, copy);
 			if ((len -= copy) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return csum;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			offset += copy;
 			pos    += copy;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = end;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(len);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return csum;
 }
 EXPORT_SYMBOL(__skb_checksum);
@@ -2555,23 +2616,31 @@ __wsum skb_copy_and_csum_bits(const struct sk_buff *skb, int offset,
 	/* Copy header. */
 	if (copy > 0) {
 		if (copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copy = len;
+}
 		csum = csum_partial_copy_nocheck(skb->data + offset, to,
 						 copy, csum);
 		if ((len -= copy) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return csum;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		offset += copy;
 		to     += copy;
 		pos	= copy;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < skb_shinfo(skb)->nr_frags; i++) {
 		int end;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(start > offset + len);
 
 		end = start + skb_frag_size(&skb_shinfo(skb)->frags[i]);
 		if ((copy = end - offset) > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb_frag_t *frag = &skb_shinfo(skb)->frags[i];
 			u32 p_off, p_len, copied;
 			struct page *p;
@@ -2579,57 +2648,81 @@ __wsum skb_copy_and_csum_bits(const struct sk_buff *skb, int offset,
 			u8 *vaddr;
 
 			if (copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copy = len;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb_frag_foreach_page(frag,
 					      frag->page_offset + offset - start,
 					      copy, p, p_off, p_len, copied) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vaddr = kmap_atomic(p);
 				csum2 = csum_partial_copy_nocheck(vaddr + p_off,
 								  to + copied,
 								  p_len, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kunmap_atomic(vaddr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				csum = csum_block_add(csum, csum2, pos);
 				pos += p_len;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!(len -= copy))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return csum;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			offset += copy;
 			to     += copy;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = end;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_walk_frags(skb, frag_iter) {
 		__wsum csum2;
 		int end;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(start > offset + len);
 
 		end = start + frag_iter->len;
 		if ((copy = end - offset) > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copy = len;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			csum2 = skb_copy_and_csum_bits(frag_iter,
 						       offset - start,
 						       to, copy, 0);
 			csum = csum_block_add(csum, csum2, pos);
 			if ((len -= copy) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return csum;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			offset += copy;
 			to     += copy;
 			pos    += copy;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = end;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(len);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return csum;
 }
 EXPORT_SYMBOL(skb_copy_and_csum_bits);
 
 static __wsum warn_crc32c_csum_update(const void *buff, int len, __wsum sum)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_warn_ratelimited(
 		"%s: attempt to compute crc32c without libcrc32c.ko\n",
 		__func__);
@@ -2639,6 +2732,7 @@ static __wsum warn_crc32c_csum_update(const void *buff, int len, __wsum sum)
 static __wsum warn_crc32c_csum_combine(__wsum csum, __wsum csum2,
 				       int offset, int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_warn_ratelimited(
 		"%s: attempt to compute crc32c without libcrc32c.ko\n",
 		__func__);
@@ -2705,6 +2799,7 @@ skb_zerocopy(struct sk_buff *to, struct sk_buff *from, int len, int hlen)
 	struct page *page;
 	unsigned int offset;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!from->head_frag && !hlen);
 
 	/* dont bother with small payloads */
@@ -2759,7 +2854,9 @@ void skb_copy_and_csum_dev(const struct sk_buff *skb, u8 *to)
 	long csstart;
 
 	if (skb->ip_summed == CHECKSUM_PARTIAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		csstart = skb_checksum_start_offset(skb);
+}
 	else
 		csstart = skb_headlen(skb);
 
@@ -2814,6 +2911,7 @@ struct sk_buff *skb_dequeue_tail(struct sk_buff_head *list)
 	unsigned long flags;
 	struct sk_buff *result;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&list->lock, flags);
 	result = __skb_dequeue_tail(list);
 	spin_unlock_irqrestore(&list->lock, flags);
@@ -2871,6 +2969,7 @@ void skb_queue_head(struct sk_buff_head *list, struct sk_buff *newsk)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&list->lock, flags);
 	__skb_queue_head(list, newsk);
 	spin_unlock_irqrestore(&list->lock, flags);
@@ -2932,6 +3031,7 @@ void skb_append(struct sk_buff *old, struct sk_buff *newsk, struct sk_buff_head
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&list->lock, flags);
 	__skb_queue_after(list, old, newsk);
 	spin_unlock_irqrestore(&list->lock, flags);
@@ -2954,6 +3054,7 @@ void skb_insert(struct sk_buff *old, struct sk_buff *newsk, struct sk_buff_head
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&list->lock, flags);
 	__skb_insert(newsk, old->prev, old, list);
 	spin_unlock_irqrestore(&list->lock, flags);
@@ -2993,6 +3094,7 @@ static inline void skb_split_no_header(struct sk_buff *skb,
 	skb->len		  = len;
 	skb->data_len		  = len - pos;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nfrags; i++) {
 		int size = skb_frag_size(&skb_shinfo(skb)->frags[i]);
 
@@ -3030,6 +3132,7 @@ static inline void skb_split_no_header(struct sk_buff *skb,
  */
 void skb_split(struct sk_buff *skb, struct sk_buff *skb1, const u32 len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int pos = skb_headlen(skb);
 
 	skb_shinfo(skb1)->tx_flags |= skb_shinfo(skb)->tx_flags &
@@ -3048,6 +3151,7 @@ EXPORT_SYMBOL(skb_split);
  */
 static int skb_prepare_for_shift(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb_cloned(skb) && pskb_expand_head(skb, 0, 0, GFP_ATOMIC);
 }
 
@@ -3074,6 +3178,7 @@ int skb_shift(struct sk_buff *tgt, struct sk_buff *skb, int shiftlen)
 	int from, to, merge, todo;
 	struct skb_frag_struct *fragfrom, *fragto;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(shiftlen > skb->len);
 
 	if (skb_headlen(skb))
@@ -3202,6 +3307,7 @@ int skb_shift(struct sk_buff *tgt, struct sk_buff *skb, int shiftlen)
 void skb_prepare_seq_read(struct sk_buff *skb, unsigned int from,
 			  unsigned int to, struct skb_seq_state *st)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	st->lower_offset = from;
 	st->upper_offset = to;
 	st->root_skb = st->cur_skb = skb;
@@ -3242,6 +3348,7 @@ unsigned int skb_seq_read(unsigned int consumed, const u8 **data,
 	skb_frag_t *frag;
 
 	if (unlikely(abs_offset >= st->upper_offset)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (st->frag_data) {
 			kunmap_atomic(st->frag_data);
 			st->frag_data = NULL;
@@ -3311,6 +3418,7 @@ EXPORT_SYMBOL(skb_seq_read);
  */
 void skb_abort_seq_read(struct skb_seq_state *st)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (st->frag_data)
 		kunmap_atomic(st->frag_data);
 }
@@ -3322,11 +3430,13 @@ static unsigned int skb_ts_get_next_block(unsigned int offset, const u8 **text,
 					  struct ts_config *conf,
 					  struct ts_state *state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb_seq_read(offset, text, TS_SKB_CB(state));
 }
 
 static void skb_ts_finish(struct ts_config *conf, struct ts_state *state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_abort_seq_read(TS_SKB_CB(state));
 }
 
@@ -3354,6 +3464,7 @@ unsigned int skb_find_text(struct sk_buff *skb, unsigned int from,
 	skb_prepare_seq_read(skb, from, to, TS_SKB_CB(&state));
 
 	ret = textsearch_find(config, &state);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (ret <= to - from ? ret : UINT_MAX);
 }
 EXPORT_SYMBOL(skb_find_text);
@@ -3374,6 +3485,7 @@ int skb_append_datato_frags(struct sock *sk, struct sk_buff *skb,
 					int len, int odd, struct sk_buff *skb),
 			void *from, int length)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int frg_cnt = skb_shinfo(skb)->nr_frags;
 	int copy;
 	int offset = 0;
@@ -3419,6 +3531,7 @@ EXPORT_SYMBOL(skb_append_datato_frags);
 int skb_append_pagefrags(struct sk_buff *skb, struct page *page,
 			 int offset, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int i = skb_shinfo(skb)->nr_frags;
 
 	if (skb_can_coalesce(skb, i, page, offset)) {
@@ -3491,7 +3604,9 @@ struct sk_buff *skb_segment(struct sk_buff *head_skb,
 	__skb_push(head_skb, doffset);
 	proto = skb_network_protocol(head_skb, &dummy);
 	if (unlikely(!proto))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	sg = !!(features & NETIF_F_SG);
 	csum = !!can_checksum_protocol(features, proto);
diff --git a/net/core/sock.c b/net/core/sock.c
index ec6eb54..8fc0e71 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -158,6 +160,7 @@ static LIST_HEAD(proto_list);
 bool sk_ns_capable(const struct sock *sk,
 		   struct user_namespace *user_ns, int cap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return file_ns_capable(sk->sk_socket->file, user_ns, cap) &&
 		ns_capable(user_ns, cap);
 }
@@ -174,6 +177,7 @@ EXPORT_SYMBOL(sk_ns_capable);
  */
 bool sk_capable(const struct sock *sk, int cap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sk_ns_capable(sk, &init_user_ns, cap);
 }
 EXPORT_SYMBOL(sk_capable);
@@ -189,6 +193,7 @@ EXPORT_SYMBOL(sk_capable);
  */
 bool sk_net_capable(const struct sock *sk, int cap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sk_ns_capable(sk, sock_net(sk)->user_ns, cap);
 }
 EXPORT_SYMBOL(sk_net_capable);
@@ -334,6 +339,7 @@ EXPORT_SYMBOL_GPL(memalloc_socks);
  */
 void sk_set_memalloc(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock_set_flag(sk, SOCK_MEMALLOC);
 	sk->sk_allocation |= __GFP_MEMALLOC;
 	static_key_slow_inc(&memalloc_socks);
@@ -342,6 +348,7 @@ EXPORT_SYMBOL_GPL(sk_set_memalloc);
 
 void sk_clear_memalloc(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock_reset_flag(sk, SOCK_MEMALLOC);
 	sk->sk_allocation &= ~__GFP_MEMALLOC;
 	static_key_slow_dec(&memalloc_socks);
@@ -378,7 +385,9 @@ static int sock_set_timeout(long *timeo_p, char __user *optval, int optlen)
 	struct timeval tv;
 
 	if (optlen < sizeof(tv))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (copy_from_user(&tv, optval, sizeof(tv)))
 		return -EFAULT;
 	if (tv.tv_usec < 0 || tv.tv_usec >= USEC_PER_SEC)
@@ -407,6 +416,7 @@ static void sock_warn_obsolete_bsdism(const char *name)
 {
 	static int warned;
 	static char warncomm[TASK_COMM_LEN];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (strcmp(warncomm, current->comm) && warned < 5) {
 		strcpy(warncomm,  current->comm);
 		pr_warn("process `%s' is using obsolete %s SO_BSDCOMPAT\n",
@@ -429,6 +439,7 @@ static bool sock_needs_netstamp(const struct sock *sk)
 static void sock_disable_timestamp(struct sock *sk, unsigned long flags)
 {
 	if (sk->sk_flags & flags) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk->sk_flags &= ~flags;
 		if (sock_needs_netstamp(sk) &&
 		    !(sk->sk_flags & SK_FLAGS_TIMESTAMP))
@@ -443,6 +454,7 @@ int __sock_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
 	struct sk_buff_head *list = &sk->sk_receive_queue;
 
 	if (atomic_read(&sk->sk_rmem_alloc) >= sk->sk_rcvbuf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_inc(&sk->sk_drops);
 		trace_sock_rcvqueue_full(sk, skb);
 		return -ENOMEM;
@@ -478,7 +490,9 @@ int sock_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
 
 	err = sk_filter(sk, skb);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return __sock_queue_rcv_skb(sk, skb);
 }
@@ -492,6 +506,7 @@ int __sk_receive_skb(struct sock *sk, struct sk_buff *skb,
 	if (sk_filter_trim_cap(sk, skb, trim_cap))
 		goto discard_and_relse;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb->dev = NULL;
 
 	if (sk_rcvqueues_full(sk, sk->sk_rcvbuf)) {
@@ -530,16 +545,21 @@ EXPORT_SYMBOL(__sk_receive_skb);
 
 struct dst_entry *__sk_dst_check(struct sock *sk, u32 cookie)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dst_entry *dst = __sk_dst_get(sk);
 
 	if (dst && dst->obsolete && dst->ops->check(dst, cookie) == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_tx_queue_clear(sk);
 		sk->sk_dst_pending_confirm = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		RCU_INIT_POINTER(sk->sk_dst_cache, NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_release(dst);
 		return NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dst;
 }
 EXPORT_SYMBOL(__sk_dst_check);
@@ -549,11 +569,13 @@ struct dst_entry *sk_dst_check(struct sock *sk, u32 cookie)
 	struct dst_entry *dst = sk_dst_get(sk);
 
 	if (dst && dst->obsolete && dst->ops->check(dst, cookie) == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_dst_reset(sk);
 		dst_release(dst);
 		return NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dst;
 }
 EXPORT_SYMBOL(sk_dst_check);
@@ -572,6 +594,7 @@ static int sock_setbindtodevice(struct sock *sk, char __user *optval,
 	if (!ns_capable(net->user_ns, CAP_NET_RAW))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -EINVAL;
 	if (optlen < 0)
 		goto out;
@@ -625,6 +648,7 @@ static int sock_getbindtodevice(struct sock *sk, char __user *optval,
 	char devname[IFNAMSIZ];
 
 	if (sk->sk_bound_dev_if == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = 0;
 		goto zero;
 	}
@@ -659,7 +683,9 @@ static int sock_getbindtodevice(struct sock *sk, char __user *optval,
 static inline void sock_valbool_flag(struct sock *sk, int bit, int valbool)
 {
 	if (valbool)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_set_flag(sk, bit);
+}
 	else
 		sock_reset_flag(sk, bit);
 }
@@ -667,9 +693,13 @@ static inline void sock_valbool_flag(struct sock *sk, int bit, int valbool)
 bool sk_mc_loop(struct sock *sk)
 {
 	if (dev_recursion_level())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (!sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 	switch (sk->sk_family) {
 	case AF_INET:
 		return inet_sk(sk)->mc_loop;
@@ -678,6 +708,7 @@ bool sk_mc_loop(struct sock *sk)
 		return inet6_sk(sk)->mc_loop;
 #endif
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(1);
 	return true;
 }
@@ -702,13 +733,19 @@ int sock_setsockopt(struct socket *sock, int level, int optname,
 	 */
 
 	if (optname == SO_BINDTODEVICE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sock_setbindtodevice(sk, optval, optlen);
+}
 
 	if (optlen < sizeof(int))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (get_user(val, (int __user *)optval))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	valbool = val ? 1 : 0;
 
@@ -717,7 +754,9 @@ int sock_setsockopt(struct socket *sock, int level, int optname,
 	switch (optname) {
 	case SO_DEBUG:
 		if (val && !capable(CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EACCES;
+}
 		else
 			sock_valbool_flag(sk, SOCK_DBG, valbool);
 		break;
@@ -755,6 +794,7 @@ int sock_setsockopt(struct socket *sock, int level, int optname,
 
 	case SO_SNDBUFFORCE:
 		if (!capable(CAP_NET_ADMIN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EPERM;
 			break;
 		}
@@ -789,6 +829,7 @@ int sock_setsockopt(struct socket *sock, int level, int optname,
 
 	case SO_RCVBUFFORCE:
 		if (!capable(CAP_NET_ADMIN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EPERM;
 			break;
 		}
@@ -797,6 +838,7 @@ int sock_setsockopt(struct socket *sock, int level, int optname,
 	case SO_KEEPALIVE:
 		if (sk->sk_prot->keepalive)
 			sk->sk_prot->keepalive(sk, valbool);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_valbool_flag(sk, SOCK_KEEPOPEN, valbool);
 		break;
 
@@ -818,15 +860,19 @@ int sock_setsockopt(struct socket *sock, int level, int optname,
 
 	case SO_LINGER:
 		if (optlen < sizeof(ling)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EINVAL;	/* 1003.1g */
 			break;
 		}
 		if (copy_from_user(&ling, optval, sizeof(ling))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EFAULT;
 			break;
 		}
 		if (!ling.l_onoff)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sock_reset_flag(sk, SOCK_LINGER);
+}
 		else {
 #if (BITS_PER_LONG == 32)
 			if ((unsigned int)ling.l_linger >= MAX_SCHEDULE_TIMEOUT/HZ)
@@ -853,12 +899,16 @@ int sock_setsockopt(struct socket *sock, int level, int optname,
 	case SO_TIMESTAMPNS:
 		if (valbool)  {
 			if (optname == SO_TIMESTAMP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sock_reset_flag(sk, SOCK_RCVTSTAMPNS);
+}
 			else
 				sock_set_flag(sk, SOCK_RCVTSTAMPNS);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sock_set_flag(sk, SOCK_RCVTSTAMP);
 			sock_enable_timestamp(sk, SOCK_TIMESTAMP);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sock_reset_flag(sk, SOCK_RCVTSTAMP);
 			sock_reset_flag(sk, SOCK_RCVTSTAMPNS);
 		}
@@ -866,35 +916,47 @@ int sock_setsockopt(struct socket *sock, int level, int optname,
 
 	case SO_TIMESTAMPING:
 		if (val & ~SOF_TIMESTAMPING_MASK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EINVAL;
 			break;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (val & SOF_TIMESTAMPING_OPT_ID &&
 		    !(sk->sk_tsflags & SOF_TIMESTAMPING_OPT_ID)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk->sk_protocol == IPPROTO_TCP &&
 			    sk->sk_type == SOCK_STREAM) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if ((1 << sk->sk_state) &
 				    (TCPF_CLOSE | TCPF_LISTEN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ret = -EINVAL;
 					break;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sk->sk_tskey = tcp_sk(sk)->snd_una;
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sk->sk_tskey = 0;
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (val & SOF_TIMESTAMPING_OPT_STATS &&
 		    !(val & SOF_TIMESTAMPING_OPT_TSONLY)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EINVAL;
 			break;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk->sk_tsflags = val;
 		if (val & SOF_TIMESTAMPING_RX_SOFTWARE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sock_enable_timestamp(sk,
 					      SOCK_TIMESTAMPING_RX_SOFTWARE);
+}
 		else
 			sock_disable_timestamp(sk,
 					       (1UL << SOCK_TIMESTAMPING_RX_SOFTWARE));
@@ -902,7 +964,10 @@ int sock_setsockopt(struct socket *sock, int level, int optname,
 
 	case SO_RCVLOWAT:
 		if (val < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = INT_MAX;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk->sk_rcvlowat = val ? : 1;
 		break;
 
@@ -2597,6 +2662,7 @@ static void sock_def_wakeup(struct sock *sk)
 	wq = rcu_dereference(sk->sk_wq);
 	if (skwq_has_sleeper(wq))
 		wake_up_interruptible_all(&wq->wait);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -2645,6 +2711,7 @@ static void sock_def_write_space(struct sock *sk)
 			sk_wake_async(sk, SOCK_WAKE_SPACE, POLL_OUT);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -2654,6 +2721,7 @@ static void sock_def_destruct(struct sock *sk)
 
 void sk_send_sigurg(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sk->sk_socket && sk->sk_socket->file)
 		if (send_sigurg(&sk->sk_socket->file->f_owner))
 			sk_wake_async(sk, SOCK_WAKE_URG, POLL_PRI);
@@ -2664,15 +2732,19 @@ void sk_reset_timer(struct sock *sk, struct timer_list* timer,
 		    unsigned long expires)
 {
 	if (!mod_timer(timer, expires))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_hold(sk);
 }
+}
 EXPORT_SYMBOL(sk_reset_timer);
 
 void sk_stop_timer(struct sock *sk, struct timer_list* timer)
 {
 	if (del_timer(timer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__sock_put(sk);
 }
+}
 EXPORT_SYMBOL(sk_stop_timer);
 
 void sock_init_data(struct socket *sock, struct sock *sk)
@@ -2701,11 +2773,14 @@ void sock_init_data(struct socket *sock, struct sock *sk)
 	}
 
 	rwlock_init(&sk->sk_callback_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sk->sk_kern_sock)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lockdep_set_class_and_name(
 			&sk->sk_callback_lock,
 			af_kern_callback_keys + sk->sk_family,
 			af_family_kern_clock_key_strings[sk->sk_family]);
+}
 	else
 		lockdep_set_class_and_name(
 			&sk->sk_callback_lock,
@@ -2753,6 +2828,7 @@ EXPORT_SYMBOL(sock_init_data);
 void lock_sock_nested(struct sock *sk, int subclass)
 {
 	might_sleep();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&sk->sk_lock.slock);
 	if (sk->sk_lock.owned)
 		__lock_sock(sk);
@@ -2768,6 +2844,7 @@ EXPORT_SYMBOL(lock_sock_nested);
 
 void release_sock(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&sk->sk_lock.slock);
 	if (sk->sk_backlog.tail)
 		__release_sock(sk);
@@ -2781,6 +2858,7 @@ void release_sock(struct sock *sk)
 	sock_release_ownership(sk);
 	if (waitqueue_active(&sk->sk_lock.wq))
 		wake_up(&sk->sk_lock.wq);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&sk->sk_lock.slock);
 }
 EXPORT_SYMBOL(release_sock);
@@ -2801,6 +2879,7 @@ EXPORT_SYMBOL(release_sock);
 bool lock_sock_fast(struct sock *sk)
 {
 	might_sleep();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&sk->sk_lock.slock);
 
 	if (!sk->sk_lock.owned)
@@ -2809,6 +2888,7 @@ bool lock_sock_fast(struct sock *sk)
 		 */
 		return false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__lock_sock(sk);
 	sk->sk_lock.owned = 1;
 	spin_unlock(&sk->sk_lock.slock);
@@ -2816,6 +2896,7 @@ bool lock_sock_fast(struct sock *sk)
 	 * The sk_lock has mutex_lock() semantics here:
 	 */
 	mutex_acquire(&sk->sk_lock.dep_map, 0, 0, _RET_IP_);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_bh_enable();
 	return true;
 }
@@ -2825,7 +2906,9 @@ int sock_get_timestamp(struct sock *sk, struct timeval __user *userstamp)
 {
 	struct timeval tv;
 	if (!sock_flag(sk, SOCK_TIMESTAMP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_enable_timestamp(sk, SOCK_TIMESTAMP);
+}
 	tv = ktime_to_timeval(sk->sk_stamp);
 	if (tv.tv_sec == -1)
 		return -ENOENT;
@@ -2841,7 +2924,9 @@ int sock_get_timestampns(struct sock *sk, struct timespec __user *userstamp)
 {
 	struct timespec ts;
 	if (!sock_flag(sk, SOCK_TIMESTAMP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_enable_timestamp(sk, SOCK_TIMESTAMP);
+}
 	ts = ktime_to_timespec(sk->sk_stamp);
 	if (ts.tv_sec == -1)
 		return -ENOENT;
@@ -2882,6 +2967,7 @@ int sock_recv_errqueue(struct sock *sk, struct msghdr *msg, int len,
 	if (skb == NULL)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	copied = skb->len;
 	if (copied > len) {
 		msg->msg_flags |= MSG_TRUNC;
@@ -2929,8 +3015,10 @@ int compat_sock_common_getsockopt(struct socket *sock, int level, int optname,
 	struct sock *sk = sock->sk;
 
 	if (sk->sk_prot->compat_getsockopt != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sk->sk_prot->compat_getsockopt(sk, level, optname,
 						      optval, optlen);
+}
 	return sk->sk_prot->getsockopt(sk, level, optname, optval, optlen);
 }
 EXPORT_SYMBOL(compat_sock_common_getsockopt);
@@ -2946,7 +3034,9 @@ int sock_common_recvmsg(struct socket *sock, struct msghdr *msg, size_t size,
 	err = sk->sk_prot->recvmsg(sk, msg, size, flags & MSG_DONTWAIT,
 				   flags & ~MSG_DONTWAIT, &addr_len);
 	if (err >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msg->msg_namelen = addr_len;
+}
 	return err;
 }
 EXPORT_SYMBOL(sock_common_recvmsg);
@@ -2970,8 +3060,10 @@ int compat_sock_common_setsockopt(struct socket *sock, int level, int optname,
 	struct sock *sk = sock->sk;
 
 	if (sk->sk_prot->compat_setsockopt != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sk->sk_prot->compat_setsockopt(sk, level, optname,
 						      optval, optlen);
+}
 	return sk->sk_prot->setsockopt(sk, level, optname, optval, optlen);
 }
 EXPORT_SYMBOL(compat_sock_common_setsockopt);
@@ -3008,6 +3100,7 @@ void sk_common_release(struct sock *sk)
 
 	xfrm_sk_free_policy(sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_refcnt_debug_release(sk);
 
 	sock_put(sk);
@@ -3016,6 +3109,7 @@ EXPORT_SYMBOL(sk_common_release);
 
 void sk_get_meminfo(const struct sock *sk, u32 *mem)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(mem, 0, sizeof(*mem) * SK_MEMINFO_VARS);
 
 	mem[SK_MEMINFO_RMEM_ALLOC] = sk_rmem_alloc_get(sk);
@@ -3049,6 +3143,7 @@ int sock_prot_inuse_get(struct net *net, struct proto *prot)
 	int cpu, idx = prot->inuse_idx;
 	int res = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(cpu)
 		res += per_cpu_ptr(net->core.inuse, cpu)->val[idx];
 
@@ -3075,7 +3170,9 @@ static struct pernet_operations net_inuse_ops = {
 static __init int net_inuse_init(void)
 {
 	if (register_pernet_subsys(&net_inuse_ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Cannot initialize net inuse counters");
+}
 
 	return 0;
 }
@@ -3108,6 +3205,7 @@ static void assign_proto_idx(struct proto *prot)
 	prot->inuse_idx = find_first_zero_bit(proto_inuse_idx, PROTO_INUSE_NR);
 
 	if (unlikely(prot->inuse_idx == PROTO_INUSE_NR - 1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("PROTO_INUSE_NR exhausted\n");
 		return;
 	}
@@ -3117,6 +3215,7 @@ static void assign_proto_idx(struct proto *prot)
 
 static void release_proto_idx(struct proto *prot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (prot->inuse_idx != PROTO_INUSE_NR - 1)
 		clear_bit(prot->inuse_idx, proto_inuse_idx);
 }
@@ -3132,6 +3231,7 @@ static inline void release_proto_idx(struct proto *prot)
 
 static void req_prot_cleanup(struct request_sock_ops *rsk_prot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!rsk_prot)
 		return;
 	kfree(rsk_prot->slab_name);
@@ -3145,22 +3245,28 @@ static int req_prot_init(const struct proto *prot)
 	struct request_sock_ops *rsk_prot = prot->rsk_prot;
 
 	if (!rsk_prot)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	rsk_prot->slab_name = kasprintf(GFP_KERNEL, "request_sock_%s",
 					prot->name);
 	if (!rsk_prot->slab_name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	rsk_prot->slab = kmem_cache_create(rsk_prot->slab_name,
 					   rsk_prot->obj_size, 0,
 					   prot->slab_flags, NULL);
 
 	if (!rsk_prot->slab) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Can't create request sock SLAB cache!\n",
 			prot->name);
 		return -ENOMEM;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -3172,6 +3278,7 @@ int proto_register(struct proto *prot, int alloc_slab)
 					NULL);
 
 		if (prot->slab == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_crit("%s: Can't create sock SLAB cache!\n",
 				prot->name);
 			goto out;
@@ -3217,6 +3324,7 @@ EXPORT_SYMBOL(proto_register);
 
 void proto_unregister(struct proto *prot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&proto_list_mutex);
 	release_proto_idx(prot);
 	list_del(&prot->node);
@@ -3239,32 +3347,38 @@ EXPORT_SYMBOL(proto_unregister);
 static void *proto_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(proto_list_mutex)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&proto_list_mutex);
 	return seq_list_start_head(&proto_list, *pos);
 }
 
 static void *proto_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_list_next(v, &proto_list, pos);
 }
 
 static void proto_seq_stop(struct seq_file *seq, void *v)
 	__releases(proto_list_mutex)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&proto_list_mutex);
 }
 
 static char proto_method_implemented(const void *method)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return method == NULL ? 'n' : 'y';
 }
 static long sock_prot_memory_allocated(struct proto *proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return proto->memory_allocated != NULL ? proto_memory_allocated(proto) : -1L;
 }
 
 static char *sock_prot_memory_pressure(struct proto *proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return proto->memory_pressure != NULL ?
 	proto_memory_pressure(proto) ? "yes" : "no" : "NI";
 }
@@ -3305,6 +3419,7 @@ static void proto_seq_printf(struct seq_file *seq, struct proto *proto)
 
 static int proto_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (v == &proto_list)
 		seq_printf(seq, "%-9s %-4s %-8s %-6s %-5s %-7s %-4s %-10s %s",
 			   "protocol",
@@ -3330,6 +3445,7 @@ static const struct seq_operations proto_seq_ops = {
 
 static int proto_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &proto_seq_ops,
 			    sizeof(struct seq_net_private));
 }
@@ -3345,7 +3461,9 @@ static const struct file_operations proto_seq_fops = {
 static __net_init int proto_init_net(struct net *net)
 {
 	if (!proc_create("protocols", S_IRUGO, net->proc_net, &proto_seq_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
@@ -3375,6 +3493,7 @@ bool sk_busy_loop_end(void *p, unsigned long start_time)
 {
 	struct sock *sk = p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !skb_queue_empty(&sk->sk_receive_queue) ||
 	       sk_busy_loop_timeout(sk, start_time);
 }
diff --git a/net/core/sock_diag.c b/net/core/sock_diag.c
index 146b50e..8a0005f 100644
--- a/net/core/sock_diag.c
+++ b/net/core/sock_diag.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* License: GPL */
 
 #include <linux/mutex.h>
@@ -21,6 +23,7 @@ static struct workqueue_struct *broadcast_wq;
 
 u64 sock_gen_cookie(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		u64 res = atomic64_read(&sk->sk_cookie);
 
@@ -35,6 +38,7 @@ int sock_diag_check_cookie(struct sock *sk, const __u32 *cookie)
 {
 	u64 res;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cookie[0] == INET_DIAG_NOCOOKIE && cookie[1] == INET_DIAG_NOCOOKIE)
 		return 0;
 
@@ -48,6 +52,7 @@ EXPORT_SYMBOL_GPL(sock_diag_check_cookie);
 
 void sock_diag_save_cookie(struct sock *sk, __u32 *cookie)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u64 res = sock_gen_cookie(sk);
 
 	cookie[0] = (u32)res;
@@ -75,6 +80,7 @@ int sock_diag_put_filterinfo(bool may_report_filterinfo, struct sock *sk,
 	int err = 0;
 
 	if (!may_report_filterinfo) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nla_reserve(skb, attrtype, 0);
 		return 0;
 	}
@@ -110,6 +116,7 @@ struct broadcast_sk {
 
 static size_t sock_diag_nlmsg_size(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NLMSG_ALIGN(sizeof(struct inet_diag_msg)
 	       + nla_total_size(sizeof(u8)) /* INET_DIAG_PROTOCOL */
 	       + nla_total_size_64bit(sizeof(struct tcp_info))); /* INET_DIAG_INFO */
@@ -169,6 +176,7 @@ EXPORT_SYMBOL_GPL(sock_diag_register_inet_compat);
 
 void sock_diag_unregister_inet_compat(int (*fn)(struct sk_buff *skb, struct nlmsghdr *nlh))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&sock_diag_table_mutex);
 	inet_rcv_compat = NULL;
 	mutex_unlock(&sock_diag_table_mutex);
@@ -180,11 +188,15 @@ int sock_diag_register(const struct sock_diag_handler *hndl)
 	int err = 0;
 
 	if (hndl->family >= AF_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&sock_diag_table_mutex);
 	if (sock_diag_handlers[hndl->family])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EBUSY;
+}
 	else
 		sock_diag_handlers[hndl->family] = hndl;
 	mutex_unlock(&sock_diag_table_mutex);
@@ -198,7 +210,9 @@ void sock_diag_unregister(const struct sock_diag_handler *hnld)
 	int family = hnld->family;
 
 	if (family >= AF_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	mutex_lock(&sock_diag_table_mutex);
 	BUG_ON(sock_diag_handlers[family] != hnld);
@@ -214,7 +228,9 @@ static int __sock_diag_cmd(struct sk_buff *skb, struct nlmsghdr *nlh)
 	const struct sock_diag_handler *hndl;
 
 	if (nlmsg_len(nlh) < sizeof(*req))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (req->sdiag_family >= AF_MAX)
 		return -EINVAL;
@@ -270,6 +286,7 @@ static DEFINE_MUTEX(sock_diag_mutex);
 
 static void sock_diag_rcv(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&sock_diag_mutex);
 	netlink_rcv_skb(skb, &sock_diag_rcv_msg);
 	mutex_unlock(&sock_diag_mutex);
@@ -277,6 +294,7 @@ static void sock_diag_rcv(struct sk_buff *skb)
 
 static int sock_diag_bind(struct net *net, int group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (group) {
 	case SKNLGRP_INET_TCP_DESTROY:
 	case SKNLGRP_INET_UDP_DESTROY:
@@ -296,6 +314,7 @@ static int sock_diag_bind(struct net *net, int group)
 
 int sock_diag_destroy(struct sock *sk, int err)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ns_capable(sock_net(sk)->user_ns, CAP_NET_ADMIN))
 		return -EPERM;
 
diff --git a/net/core/sock_reuseport.c b/net/core/sock_reuseport.c
index 676092d..26dfb47 100644
--- a/net/core/sock_reuseport.c
+++ b/net/core/sock_reuseport.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * To speed up listener socket lookup, create an array to store all sockets
@@ -21,10 +23,13 @@ static struct sock_reuseport *__reuseport_alloc(unsigned int max_socks)
 	struct sock_reuseport *reuse = kzalloc(size, GFP_ATOMIC);
 
 	if (!reuse)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	reuse->max_socks = max_socks;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(reuse->prog, NULL);
 	return reuse;
 }
@@ -47,6 +52,7 @@ int reuseport_alloc(struct sock *sk)
 
 	reuse = __reuseport_alloc(INIT_SOCKS);
 	if (!reuse) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&reuseport_lock);
 		return -ENOMEM;
 	}
@@ -69,7 +75,9 @@ static struct sock_reuseport *reuseport_grow(struct sock_reuseport *reuse)
 
 	more_socks_size = reuse->max_socks * 2U;
 	if (more_socks_size > U16_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	more_reuse = __reuseport_alloc(more_socks_size);
 	if (!more_reuse)
@@ -98,6 +106,7 @@ static void reuseport_free_rcu(struct rcu_head *head)
 {
 	struct sock_reuseport *reuse;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	reuse = container_of(head, struct sock_reuseport, rcu);
 	if (reuse->prog)
 		bpf_prog_destroy(reuse->prog);
@@ -114,6 +123,7 @@ int reuseport_add_sock(struct sock *sk, struct sock *sk2)
 {
 	struct sock_reuseport *old_reuse, *reuse;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!rcu_access_pointer(sk2->sk_reuseport_cb)) {
 		int err = reuseport_alloc(sk2);
 
@@ -158,6 +168,7 @@ void reuseport_detach_sock(struct sock *sk)
 	int i;
 
 	spin_lock_bh(&reuseport_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	reuse = rcu_dereference_protected(sk->sk_reuseport_cb,
 					  lockdep_is_held(&reuseport_lock));
 	rcu_assign_pointer(sk->sk_reuseport_cb, NULL);
@@ -183,6 +194,7 @@ static struct sock *run_bpf(struct sock_reuseport *reuse, u16 socks,
 	u32 index;
 
 	if (skb_shared(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nskb = skb_clone(skb, GFP_ATOMIC);
 		if (!nskb)
 			return NULL;
@@ -226,6 +238,7 @@ struct sock *reuseport_select_sock(struct sock *sk,
 	u16 socks;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	reuse = rcu_dereference(sk->sk_reuseport_cb);
 
 	/* if memory allocation failed or add call is not yet complete */
@@ -257,6 +270,7 @@ reuseport_attach_prog(struct sock *sk, struct bpf_prog *prog)
 	struct bpf_prog *old_prog;
 
 	spin_lock_bh(&reuseport_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	reuse = rcu_dereference_protected(sk->sk_reuseport_cb,
 					  lockdep_is_held(&reuseport_lock));
 	old_prog = rcu_dereference_protected(reuse->prog,
diff --git a/net/core/stream.c b/net/core/stream.c
index 1cff9c6..bc8a7513 100644
--- a/net/core/stream.c
+++ b/net/core/stream.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *     SUCS NET3:
@@ -32,6 +34,7 @@ void sk_stream_write_space(struct sock *sk)
 	struct socket *sock = sk->sk_socket;
 	struct socket_wq *wq;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sk_stream_is_writeable(sk) && sock) {
 		clear_bit(SOCK_NOSPACE, &sock->flags);
 
@@ -55,6 +58,7 @@ void sk_stream_write_space(struct sock *sk)
  */
 int sk_stream_wait_connect(struct sock *sk, long *timeo_p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DEFINE_WAIT_FUNC(wait, woken_wake_function);
 	struct task_struct *tsk = current;
 	int done;
@@ -89,6 +93,7 @@ EXPORT_SYMBOL(sk_stream_wait_connect);
  */
 static inline int sk_stream_closing(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (1 << sk->sk_state) &
 	       (TCPF_FIN_WAIT1 | TCPF_CLOSING | TCPF_LAST_ACK);
 }
@@ -96,15 +101,19 @@ static inline int sk_stream_closing(struct sock *sk)
 void sk_stream_wait_close(struct sock *sk, long timeout)
 {
 	if (timeout) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DEFINE_WAIT_FUNC(wait, woken_wake_function);
 
 		add_wait_queue(sk_sleep(sk), &wait);
 
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk_wait_event(sk, &timeout, !sk_stream_closing(sk), &wait))
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (!signal_pending(current) && timeout);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		remove_wait_queue(sk_sleep(sk), &wait);
 	}
 }
@@ -120,6 +129,7 @@ int sk_stream_wait_memory(struct sock *sk, long *timeo_p)
 	int err = 0;
 	long vm_wait = 0;
 	long current_timeo = *timeo_p;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bool noblock = (*timeo_p ? false : true);
 	DEFINE_WAIT_FUNC(wait, woken_wake_function);
 
@@ -180,6 +190,7 @@ EXPORT_SYMBOL(sk_stream_wait_memory);
 
 int sk_stream_error(struct sock *sk, int flags, int err)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (err == -EPIPE)
 		err = sock_error(sk) ? : -EPIPE;
 	if (err == -EPIPE && !(flags & MSG_NOSIGNAL))
diff --git a/net/core/sysctl_net_core.c b/net/core/sysctl_net_core.c
index a47ad6c..99d6284 100644
--- a/net/core/sysctl_net_core.c
+++ b/net/core/sysctl_net_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /* -*- linux-c -*-
  * sysctl_net_core.c: sysctl interface to net core subsystem.
@@ -47,6 +49,7 @@ static int rps_sock_flow_sysctl(struct ctl_table *table, int write,
 
 	mutex_lock(&sock_flow_mutex);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	orig_sock_table = rcu_dereference_protected(rps_sock_flow_table,
 					lockdep_is_held(&sock_flow_mutex));
 	size = orig_size = orig_sock_table ? orig_sock_table->mask + 1 : 0;
@@ -112,7 +115,9 @@ static int flow_limit_cpu_sysctl(struct ctl_table *table, int write,
 	int i, len, ret = 0;
 
 	if (!alloc_cpumask_var(&mask, GFP_KERNEL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (write) {
 		ret = cpumask_parse_user(buffer, *lenp, mask);
@@ -193,6 +198,7 @@ static int flow_limit_table_len_sysctl(struct ctl_table *table, int write,
 	ptr = table->data;
 	old = *ptr;
 	ret = proc_dointvec(table, write, buffer, lenp, ppos);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ret && write && !is_power_of_2(*ptr)) {
 		*ptr = old;
 		ret = -EINVAL;
@@ -217,6 +223,7 @@ static int set_default_qdisc(struct ctl_table *table, int write,
 	qdisc_get_default(id, IFNAMSIZ);
 
 	ret = proc_dostring(&tbl, write, buffer, lenp, ppos);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (write && ret == 0)
 		ret = qdisc_set_default(id);
 	return ret;
@@ -230,7 +237,9 @@ static int proc_do_dev_weight(struct ctl_table *table, int write,
 
 	ret = proc_dointvec(table, write, buffer, lenp, ppos);
 	if (ret != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	dev_rx_weight = weight_p * dev_weight_rx_bias;
 	dev_tx_weight = weight_p * dev_weight_tx_bias;
@@ -488,6 +497,7 @@ static __net_init int sysctl_core_net_init(struct net *net)
 
 	tbl = netns_core_table;
 	if (!net_eq(net, &init_net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tbl = kmemdup(tbl, sizeof(netns_core_table), GFP_KERNEL);
 		if (tbl == NULL)
 			goto err_dup;
@@ -496,6 +506,7 @@ static __net_init int sysctl_core_net_init(struct net *net)
 
 		/* Don't export any sysctls to unprivileged users */
 		if (net->user_ns != &init_user_ns) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tbl[0].procname = NULL;
 		}
 	}
@@ -504,11 +515,14 @@ static __net_init int sysctl_core_net_init(struct net *net)
 	if (net->core.sysctl_hdr == NULL)
 		goto err_reg;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_reg:
 	if (tbl != netns_core_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(tbl);
+}
 err_dup:
 	return -ENOMEM;
 }
diff --git a/net/dns_resolver/dns_key.c b/net/dns_resolver/dns_key.c
index e1d4d89..5012922 100644
--- a/net/dns_resolver/dns_key.c
+++ b/net/dns_resolver/dns_key.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Key type used to cache DNS lookups made by the kernel
  *
  * See Documentation/networking/dns_resolver.txt
@@ -66,6 +68,7 @@ dns_resolver_preparse(struct key_preparsed_payload *prep)
 	int datalen = prep->datalen, result_len = 0;
 	const char *data = prep->data, *end, *opt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("'%*.*s',%u", datalen, datalen, data, datalen);
 
 	if (datalen <= 1 || !data || data[datalen - 1] != '\0')
@@ -165,6 +168,7 @@ dns_resolver_preparse(struct key_preparsed_payload *prep)
  */
 static void dns_resolver_free_preparse(struct key_preparsed_payload *prep)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_devel("==>%s()\n", __func__);
 
 	kfree(prep->payload.data[dns_key_data]);
@@ -182,6 +186,7 @@ static bool dns_resolver_cmp(const struct key *key,
 	int slen, dlen, ret = 0;
 	const char *src = key->description, *dsp = match_data->raw_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("%s,%s", src, dsp);
 
 	if (!src || !dsp)
@@ -213,6 +218,7 @@ static bool dns_resolver_cmp(const struct key *key,
  */
 static int dns_resolver_match_preparse(struct key_match_data *match_data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	match_data->lookup_type = KEYRING_SEARCH_LOOKUP_ITERATE;
 	match_data->cmp = dns_resolver_cmp;
 	return 0;
@@ -223,6 +229,7 @@ static int dns_resolver_match_preparse(struct key_match_data *match_data)
  */
 static void dns_resolver_describe(const struct key *key, struct seq_file *m)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_puts(m, key->description);
 	if (key_is_positive(key)) {
 		int err = PTR_ERR(key->payload.data[dns_key_error]);
@@ -241,6 +248,7 @@ static void dns_resolver_describe(const struct key *key, struct seq_file *m)
 static long dns_resolver_read(const struct key *key,
 			      char __user *buffer, size_t buflen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int err = PTR_ERR(key->payload.data[dns_key_error]);
 
 	if (err)
@@ -275,7 +283,9 @@ static int __init init_dns_resolver(void)
 	 */
 	cred = prepare_kernel_cred(NULL);
 	if (!cred)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	keyring = keyring_alloc(".dns_resolver",
 				GLOBAL_ROOT_UID, GLOBAL_ROOT_GID, cred,
@@ -283,6 +293,7 @@ static int __init init_dns_resolver(void)
 				KEY_USR_VIEW | KEY_USR_READ,
 				KEY_ALLOC_NOT_IN_QUOTA, NULL, NULL);
 	if (IS_ERR(keyring)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(keyring);
 		goto failed_put_cred;
 	}
@@ -299,6 +310,7 @@ static int __init init_dns_resolver(void)
 	dns_resolver_cache = cred;
 
 	kdebug("DNS resolver keyring: %d\n", key_serial(keyring));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 failed_put_key:
@@ -310,6 +322,7 @@ static int __init init_dns_resolver(void)
 
 static void __exit exit_dns_resolver(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_revoke(dns_resolver_cache->thread_keyring);
 	unregister_key_type(&key_type_dns_resolver);
 	put_cred(dns_resolver_cache);
diff --git a/net/ethernet/eth.c b/net/ethernet/eth.c
index eaeba9b..0599dee 100644
--- a/net/ethernet/eth.c
+++ b/net/ethernet/eth.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -107,11 +109,14 @@ int eth_header(struct sk_buff *skb, struct net_device *dev,
 	 *      Anyway, the loopback-device should never use this function...
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->flags & (IFF_LOOPBACK | IFF_NOARP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		eth_zero_addr(eth->h_dest);
 		return ETH_HLEN;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ETH_HLEN;
 }
 EXPORT_SYMBOL(eth_header);
@@ -132,7 +137,9 @@ u32 eth_get_headlen(void *data, unsigned int len)
 
 	/* this should never happen, but better safe than sorry */
 	if (unlikely(len < sizeof(*eth)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return len;
+}
 
 	/* parse any remaining L2/L3 headers, check for L4 */
 	if (!skb_flow_dissect_flow_keys_buf(&keys, data, eth->h_proto,
@@ -182,10 +189,14 @@ __be16 eth_type_trans(struct sk_buff *skb, struct net_device *dev)
 	 * and if so, set skb->protocol without looking at the packet.
 	 */
 	if (unlikely(netdev_uses_dsa(dev)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return htons(ETH_P_XDSA);
+}
 
 	if (likely(eth_proto_is_802_3(eth->h_proto)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return eth->h_proto;
+}
 
 	/*
 	 *      This is a magic hack to spot IPX packets. Older Novell breaks
@@ -194,8 +205,11 @@ __be16 eth_type_trans(struct sk_buff *skb, struct net_device *dev)
 	 *      won't work for fault tolerant netware but does for the rest.
 	 */
 	sap = skb_header_pointer(skb, 0, sizeof(*sap), &_service_access_point);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sap && *sap == 0xFFFF)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return htons(ETH_P_802_3);
+}
 
 	/*
 	 *      Real 802.2 LLC
@@ -211,6 +225,7 @@ EXPORT_SYMBOL(eth_type_trans);
  */
 int eth_header_parse(const struct sk_buff *skb, unsigned char *haddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ethhdr *eth = eth_hdr(skb);
 	memcpy(haddr, eth->h_source, ETH_ALEN);
 	return ETH_ALEN;
@@ -234,7 +249,9 @@ int eth_header_cache(const struct neighbour *neigh, struct hh_cache *hh, __be16
 	    (((u8 *) hh->hh_data) + (HH_DATA_OFF(sizeof(*eth))));
 
 	if (type == htons(ETH_P_802_3))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	eth->h_proto = type;
 	memcpy(eth->h_source, dev->dev_addr, ETH_ALEN);
@@ -256,6 +273,7 @@ void eth_header_cache_update(struct hh_cache *hh,
 			     const struct net_device *dev,
 			     const unsigned char *haddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(((u8 *) hh->hh_data) + HH_DATA_OFF(sizeof(struct ethhdr)),
 	       haddr, ETH_ALEN);
 }
@@ -270,6 +288,7 @@ int eth_prepare_mac_addr_change(struct net_device *dev, void *p)
 {
 	struct sockaddr *addr = p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(dev->priv_flags & IFF_LIVE_ADDR_CHANGE) && netif_running(dev))
 		return -EBUSY;
 	if (!is_valid_ether_addr(addr->sa_data))
@@ -287,6 +306,7 @@ void eth_commit_mac_addr_change(struct net_device *dev, void *p)
 {
 	struct sockaddr *addr = p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(dev->dev_addr, addr->sa_data, ETH_ALEN);
 }
 EXPORT_SYMBOL(eth_commit_mac_addr_change);
@@ -307,7 +327,9 @@ int eth_mac_addr(struct net_device *dev, void *p)
 
 	ret = eth_prepare_mac_addr_change(dev, p);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	eth_commit_mac_addr_change(dev, p);
 	return 0;
 }
@@ -323,6 +345,7 @@ EXPORT_SYMBOL(eth_mac_addr);
  */
 int eth_change_mtu(struct net_device *dev, int new_mtu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	netdev_warn(dev, "%s is deprecated\n", __func__);
 	dev->mtu = new_mtu;
 	return 0;
@@ -332,7 +355,9 @@ EXPORT_SYMBOL(eth_change_mtu);
 int eth_validate_addr(struct net_device *dev)
 {
 	if (!is_valid_ether_addr(dev->dev_addr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EADDRNOTAVAIL;
+}
 
 	return 0;
 }
@@ -395,6 +420,7 @@ EXPORT_SYMBOL(alloc_etherdev_mqs);
 
 static void devm_free_netdev(struct device *dev, void *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	free_netdev(*(struct net_device **)res);
 }
 
@@ -406,7 +432,9 @@ struct net_device *devm_alloc_etherdev_mqs(struct device *dev, int sizeof_priv,
 
 	dr = devres_alloc(devm_free_netdev, sizeof(*dr), GFP_KERNEL);
 	if (!dr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	netdev = alloc_etherdev_mqs(sizeof_priv, txqs, rxqs);
 	if (!netdev) {
@@ -441,6 +469,7 @@ struct sk_buff **eth_gro_receive(struct sk_buff **head,
 	hlen = off_eth + sizeof(*eh);
 	eh = skb_gro_header_fast(skb, off_eth);
 	if (skb_gro_header_hard(skb, hlen)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		eh = skb_gro_header_slow(skb, hlen, off_eth);
 		if (unlikely(!eh))
 			goto out;
@@ -489,7 +518,9 @@ int eth_gro_complete(struct sk_buff *skb, int nhoff)
 	int err = -ENOSYS;
 
 	if (skb->encapsulation)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb_set_inner_mac_header(skb, nhoff);
+}
 
 	rcu_read_lock();
 	ptype = gro_find_complete_by_type(type);
@@ -522,6 +553,7 @@ fs_initcall(eth_offload_init);
 
 unsigned char * __weak arch_get_platform_mac_address(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -531,7 +563,9 @@ int eth_platform_get_mac_address(struct device *dev, u8 *mac_addr)
 	struct device_node *dp;
 
 	if (dev_is_pci(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dp = pci_device_to_OF_node(to_pci_dev(dev));
+}
 	else
 		dp = dev->of_node;
 
diff --git a/net/ipv4/af_inet.c b/net/ipv4/af_inet.c
index b9d9a2b..9d845cf 100644
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -132,6 +134,7 @@ static DEFINE_SPINLOCK(inetsw_lock);
 
 void inet_sock_destruct(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 
 	__skb_queue_purge(&sk->sk_receive_queue);
@@ -140,11 +143,13 @@ void inet_sock_destruct(struct sock *sk)
 	sk_mem_reclaim(sk);
 
 	if (sk->sk_type == SOCK_STREAM && sk->sk_state != TCP_CLOSE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Attempt to release TCP socket in state %d %p\n",
 		       sk->sk_state, sk);
 		return;
 	}
 	if (!sock_flag(sk, SOCK_DEAD)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Attempt to release alive inet socket %p\n", sk);
 		return;
 	}
@@ -157,6 +162,7 @@ void inet_sock_destruct(struct sock *sk)
 	kfree(rcu_dereference_protected(inet->inet_opt, 1));
 	dst_release(rcu_dereference_check(sk->sk_dst_cache, 1));
 	dst_release(sk->sk_rx_dst);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_refcnt_debug_dec(sk);
 }
 EXPORT_SYMBOL(inet_sock_destruct);
@@ -179,6 +185,7 @@ static int inet_autobind(struct sock *sk)
 	inet = inet_sk(sk);
 	if (!inet->inet_num) {
 		if (sk->sk_prot->get_port(sk, 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			release_sock(sk);
 			return -EAGAIN;
 		}
@@ -220,6 +227,7 @@ int inet_listen(struct socket *sock, int backlog)
 		if ((sysctl_tcp_fastopen & TFO_SERVER_WO_SOCKOPT1) &&
 		    (sysctl_tcp_fastopen & TFO_SERVER_ENABLE) &&
 		    !inet_csk(sk)->icsk_accept_queue.fastopenq.max_qlen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fastopen_queue_tune(sk, backlog);
 			tcp_fastopen_init_key_once(true);
 		}
@@ -253,7 +261,9 @@ static int inet_create(struct net *net, struct socket *sock, int protocol,
 	int err;
 
 	if (protocol < 0 || protocol >= IPPROTO_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	sock->state = SS_UNCONNECTED;
 
@@ -263,6 +273,7 @@ static int inet_create(struct net *net, struct socket *sock, int protocol,
 	rcu_read_lock();
 	list_for_each_entry_rcu(answer, &inetsw[sock->type], list) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		/* Check the non-wild match. */
 		if (protocol == answer->protocol) {
@@ -271,25 +282,31 @@ static int inet_create(struct net *net, struct socket *sock, int protocol,
 		} else {
 			/* Check for the two wild cases. */
 			if (IPPROTO_IP == protocol) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				protocol = answer->protocol;
 				break;
 			}
 			if (IPPROTO_IP == answer->protocol)
 				break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EPROTONOSUPPORT;
 	}
 
 	if (unlikely(err)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (try_loading_module < 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock();
 			/*
 			 * Be more specific, e.g. net-pf-2-proto-132-type-1
 			 * (net-pf-PF_INET-proto-IPPROTO_SCTP-type-SOCK_STREAM)
 			 */
 			if (++try_loading_module == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				request_module("net-pf-%d-proto-%d-type-%d",
 					       PF_INET, protocol, sock->type);
+}
 			/*
 			 * Fall back to generic, e.g. net-pf-2-proto-132
 			 * (net-pf-PF_INET-proto-IPPROTO_SCTP)
@@ -302,6 +319,7 @@ static int inet_create(struct net *net, struct socket *sock, int protocol,
 			goto out_rcu_unlock;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EPERM;
 	if (sock->type == SOCK_RAW && !kern &&
 	    !ns_capable(net->user_ns, CAP_NET_RAW))
@@ -319,10 +337,12 @@ static int inet_create(struct net *net, struct socket *sock, int protocol,
 	if (!sk)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 	if (INET_PROTOSW_REUSE & answer_flags)
 		sk->sk_reuse = SK_CAN_REUSE;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet = inet_sk(sk);
 	inet->is_icsk = (INET_PROTOSW_ICSK & answer_flags) != 0;
 
@@ -331,11 +351,15 @@ static int inet_create(struct net *net, struct socket *sock, int protocol,
 	if (SOCK_RAW == sock->type) {
 		inet->inet_num = protocol;
 		if (IPPROTO_RAW == protocol)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet->hdrincl = 1;
+}
 	}
 
 	if (net->ipv4.sysctl_ip_no_pmtu_disc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet->pmtudisc = IP_PMTUDISC_DONT;
+}
 	else
 		inet->pmtudisc = IP_PMTUDISC_WANT;
 
@@ -355,6 +379,7 @@ static int inet_create(struct net *net, struct socket *sock, int protocol,
 	inet->mc_list	= NULL;
 	inet->rcv_tos	= 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_refcnt_debug_inc(sk);
 
 	if (inet->inet_num) {
@@ -367,6 +392,7 @@ static int inet_create(struct net *net, struct socket *sock, int protocol,
 		/* Add to protocol hash chains. */
 		err = sk->sk_prot->hash(sk);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_common_release(sk);
 			goto out;
 		}
@@ -375,6 +401,7 @@ static int inet_create(struct net *net, struct socket *sock, int protocol,
 	if (sk->sk_prot->init) {
 		err = sk->sk_prot->init(sk);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_common_release(sk);
 			goto out;
 		}
@@ -383,6 +410,7 @@ static int inet_create(struct net *net, struct socket *sock, int protocol,
 	if (!kern) {
 		err = BPF_CGROUP_RUN_PROG_INET_SOCK(sk);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_common_release(sk);
 			goto out;
 		}
@@ -441,9 +469,11 @@ int inet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 
 	/* If the socket has its own bind function then use it. (RAW) */
 	if (sk->sk_prot->bind) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sk->sk_prot->bind(sk, uaddr, addr_len);
 		goto out;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EINVAL;
 	if (addr_len < sizeof(struct sockaddr_in))
 		goto out;
@@ -531,12 +561,16 @@ int inet_dgram_connect(struct socket *sock, struct sockaddr *uaddr,
 	struct sock *sk = sock->sk;
 
 	if (addr_len < sizeof(uaddr->sa_family))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (uaddr->sa_family == AF_UNSPEC)
 		return sk->sk_prot->disconnect(sk, flags);
 
 	if (!inet_sk(sk)->inet_num && inet_autobind(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAGAIN;
+}
 	return sk->sk_prot->connect(sk, uaddr, addr_len);
 }
 EXPORT_SYMBOL(inet_dgram_connect);
@@ -587,10 +621,14 @@ int __inet_stream_connect(struct socket *sock, struct sockaddr *uaddr,
 	 */
 	if (uaddr) {
 		if (addr_len < sizeof(uaddr->sa_family))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
 		if (uaddr->sa_family == AF_UNSPEC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = sk->sk_prot->disconnect(sk, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sock->state = err ? SS_DISCONNECTING : SS_UNCONNECTED;
 			goto out;
 		}
@@ -605,7 +643,9 @@ int __inet_stream_connect(struct socket *sock, struct sockaddr *uaddr,
 		goto out;
 	case SS_CONNECTING:
 		if (inet_sk(sk)->defer_connect)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = is_sendmsg ? -EINPROGRESS : -EISCONN;
+}
 		else
 			err = -EALREADY;
 		/* Fall out of switch with err, set for this state */
@@ -643,6 +683,7 @@ int __inet_stream_connect(struct socket *sock, struct sockaddr *uaddr,
 		if (!timeo || !inet_wait_for_connect(sk, timeo, writebias))
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sock_intr_errno(timeo);
 		if (signal_pending(current))
 			goto out;
@@ -668,7 +709,9 @@ int __inet_stream_connect(struct socket *sock, struct sockaddr *uaddr,
 	err = sock_error(sk) ? : -ECONNABORTED;
 	sock->state = SS_UNCONNECTED;
 	if (sk->sk_prot->disconnect(sk, flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock->state = SS_DISCONNECTING;
+}
 	goto out;
 }
 EXPORT_SYMBOL(__inet_stream_connect);
@@ -725,6 +768,7 @@ int inet_getname(struct socket *sock, struct sockaddr *uaddr,
 {
 	struct sock *sk		= sock->sk;
 	struct inet_sock *inet	= inet_sk(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DECLARE_SOCKADDR(struct sockaddr_in *, sin, uaddr);
 
 	sin->sin_family = AF_INET;
@@ -917,7 +961,9 @@ static int inet_compat_ioctl(struct socket *sock, unsigned int cmd, unsigned lon
 	int err = -ENOIOCTLCMD;
 
 	if (sk->sk_prot->compat_ioctl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sk->sk_prot->compat_ioctl(sk, cmd, arg);
+}
 
 	return err;
 }
@@ -1075,12 +1121,14 @@ void inet_register_protosw(struct inet_protosw *p)
 	/* If we are trying to override a permanent protocol, bail. */
 	last_perm = &inetsw[p->type];
 	list_for_each(lh, &inetsw[p->type]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		answer = list_entry(lh, struct inet_protosw, list);
 		/* Check only the non-wild match. */
 		if ((INET_PROTOSW_PERMANENT & answer->flags) == 0)
 			break;
 		if (protocol == answer->protocol)
 			goto out_permanent;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		last_perm = lh;
 	}
 
@@ -1109,6 +1157,7 @@ EXPORT_SYMBOL(inet_register_protosw);
 
 void inet_unregister_protosw(struct inet_protosw *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (INET_PROTOSW_PERMANENT & p->flags) {
 		pr_err("Attempt to unregister permanent protocol %d\n",
 		       p->protocol);
@@ -1124,6 +1173,7 @@ EXPORT_SYMBOL(inet_unregister_protosw);
 
 static int inet_sk_reselect_saddr(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	__be32 old_saddr = inet->inet_saddr;
 	__be32 daddr = inet->inet_daddr;
@@ -1172,6 +1222,7 @@ static int inet_sk_reselect_saddr(struct sock *sk)
 
 int inet_sk_rebuild_header(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct rtable *rt = (struct rtable *)__sk_dst_check(sk, 0);
 	__be32 daddr;
@@ -1181,14 +1232,21 @@ int inet_sk_rebuild_header(struct sock *sk)
 
 	/* Route is OK, nothing to do. */
 	if (rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Reroute. */
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet_opt = rcu_dereference(inet->inet_opt);
 	daddr = inet->inet_daddr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (inet_opt && inet_opt->opt.srr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		daddr = inet_opt->opt.faddr;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	fl4 = &inet->cork.fl.u.ip4;
 	rt = ip_route_output_ports(sock_net(sk), fl4, sk, daddr, inet->inet_saddr,
@@ -1196,9 +1254,11 @@ int inet_sk_rebuild_header(struct sock *sk)
 				   sk->sk_protocol, RT_CONN_FLAGS(sk),
 				   sk->sk_bound_dev_if);
 	if (!IS_ERR(rt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		sk_setup_caps(sk, &rt->dst);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(rt);
 
 		/* Routing failed... */
@@ -1214,6 +1274,7 @@ int inet_sk_rebuild_header(struct sock *sk)
 			sk->sk_err_soft = -err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 EXPORT_SYMBOL(inet_sk_rebuild_header);
@@ -1236,6 +1297,7 @@ struct sk_buff *inet_gso_segment(struct sk_buff *skb,
 	if (unlikely(!pskb_may_pull(skb, sizeof(*iph))))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iph = ip_hdr(skb);
 	ihl = iph->ihl * 4;
 	if (ihl < sizeof(*iph))
@@ -1362,6 +1424,7 @@ struct sk_buff **inet_gro_receive(struct sk_buff **head, struct sk_buff *skb)
 		if (!NAPI_GRO_CB(p)->same_flow)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iph2 = (struct iphdr *)(p->data + off);
 		/* The above works because, with the exception of the top
 		 * (inner most) layer, we only aggregate pkts with the same
@@ -1371,6 +1434,7 @@ struct sk_buff **inet_gro_receive(struct sk_buff **head, struct sk_buff *skb)
 		if ((iph->protocol ^ iph2->protocol) |
 		    ((__force u32)iph->saddr ^ (__force u32)iph2->saddr) |
 		    ((__force u32)iph->daddr ^ (__force u32)iph2->daddr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NAPI_GRO_CB(p)->same_flow = 0;
 			continue;
 		}
@@ -1397,7 +1461,9 @@ struct sk_buff **inet_gro_receive(struct sk_buff **head, struct sk_buff *skb)
 		 */
 		if (!NAPI_GRO_CB(p)->is_atomic ||
 		    !(iph->frag_off & htons(IP_DF))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flush_id ^= NAPI_GRO_CB(p)->count;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flush_id = flush_id ? 0xFFFF : 0;
 		}
 
@@ -1405,7 +1471,9 @@ struct sk_buff **inet_gro_receive(struct sk_buff **head, struct sk_buff *skb)
 		 * datagram we can overwrite the value and ignore it.
 		 */
 		if (NAPI_GRO_CB(skb)->is_atomic)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NAPI_GRO_CB(p)->flush_id = flush_id;
+}
 		else
 			NAPI_GRO_CB(p)->flush_id |= flush_id;
 	}
@@ -1438,6 +1506,7 @@ EXPORT_SYMBOL(inet_gro_receive);
 static struct sk_buff **ipip_gro_receive(struct sk_buff **head,
 					 struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (NAPI_GRO_CB(skb)->encap_mark) {
 		NAPI_GRO_CB(skb)->flush = 1;
 		return NULL;
@@ -1476,6 +1545,7 @@ EXPORT_SYMBOL(inet_current_timestamp);
 
 int inet_recv_error(struct sock *sk, struct msghdr *msg, int len, int *addr_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sk->sk_family == AF_INET)
 		return ip_recv_error(sk, msg, len, addr_len);
 #if IS_ENABLED(CONFIG_IPV6)
@@ -1487,6 +1557,7 @@ int inet_recv_error(struct sock *sk, struct msghdr *msg, int len, int *addr_len)
 
 int inet_gro_complete(struct sk_buff *skb, int nhoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__be16 newlen = htons(skb->len - nhoff);
 	struct iphdr *iph = (struct iphdr *)(skb->data + nhoff);
 	const struct net_offload *ops;
@@ -1521,6 +1592,7 @@ EXPORT_SYMBOL(inet_gro_complete);
 
 static int ipip_gro_complete(struct sk_buff *skb, int nhoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb->encapsulation = 1;
 	skb_shinfo(skb)->gso_type |= SKB_GSO_IPXIP4;
 	return inet_gro_complete(skb, nhoff);
@@ -1557,6 +1629,7 @@ unsigned long snmp_fold_field(void __percpu *mib, int offt)
 	unsigned long res = 0;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(i)
 		res += snmp_get_cpu_field(mib, i, offt);
 	return res;
@@ -1797,11 +1870,17 @@ static int __init ipv4_offload_init(void)
 	 * Add offloads
 	 */
 	if (udpv4_offload_init() < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot add UDP protocol offload\n", __func__);
+}
 	if (tcpv4_offload_init() < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot add TCP protocol offload\n", __func__);
+}
 	if (ipip_offload_init() < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot add IPIP protocol offload\n", __func__);
+}
 
 	dev_add_offload(&ip_packet_offload);
 	return 0;
@@ -1820,6 +1899,7 @@ static int __init inet_init(void)
 	struct list_head *r;
 	int rc = -EINVAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock_skb_cb_check_size(sizeof(struct inet_skb_parm));
 
 	rc = proto_register(&tcp_prot, 1);
@@ -1853,19 +1933,29 @@ static int __init inet_init(void)
 	 */
 
 	if (inet_add_protocol(&icmp_protocol, IPPROTO_ICMP) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot add ICMP protocol\n", __func__);
+}
 	if (inet_add_protocol(&udp_protocol, IPPROTO_UDP) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot add UDP protocol\n", __func__);
+}
 	if (inet_add_protocol(&tcp_protocol, IPPROTO_TCP) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot add TCP protocol\n", __func__);
+}
 #ifdef CONFIG_IP_MULTICAST
 	if (inet_add_protocol(&igmp_protocol, IPPROTO_IGMP) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot add IGMP protocol\n", __func__);
+}
 #endif
 
 	/* Register the socket-side information for inet_create. */
 	for (r = &inetsw[0]; r < &inetsw[SOCK_MAX]; ++r)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INIT_LIST_HEAD(r);
+}
 
 	for (q = inetsw_array; q < &inetsw_array[INETSW_ARRAY_LEN]; ++q)
 		inet_register_protosw(q);
@@ -1898,24 +1988,32 @@ static int __init inet_init(void)
 	 */
 
 	if (icmp_init() < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Failed to create the ICMP control socket.\n");
+}
 
 	/*
 	 *	Initialise the multicast router
 	 */
 #if defined(CONFIG_IP_MROUTE)
 	if (ip_mr_init())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot init ipv4 mroute\n", __func__);
+}
 #endif
 
 	if (init_inet_pernet_ops())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot init ipv4 inet pernet ops\n", __func__);
+}
 	/*
 	 *	Initialise per-cpu ipv4 mibs
 	 */
 
 	if (init_ipv4_mibs())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot init ipv4 mibs\n", __func__);
+}
 
 	ipv4_proc_init();
 
diff --git a/net/ipv4/arp.c b/net/ipv4/arp.c
index a1d1f50..fe9d409 100644
--- a/net/ipv4/arp.c
+++ b/net/ipv4/arp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* linux/net/ipv4/arp.c
  *
  * Copyright (C) 1994 by Florian  La Roche
@@ -201,10 +203,12 @@ int arp_mc_map(__be32 addr, u8 *haddr, struct net_device *dev, int dir)
 		return 0;
 	default:
 		if (dir) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(haddr, dev->broadcast, dev->addr_len);
 			return 0;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EINVAL;
 }
 
@@ -236,6 +240,7 @@ static int arp_constructor(struct neighbour *neigh)
 	rcu_read_lock();
 	in_dev = __in_dev_get_rcu(dev);
 	if (!in_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		return -EINVAL;
 	}
@@ -248,6 +253,7 @@ static int arp_constructor(struct neighbour *neigh)
 	rcu_read_unlock();
 
 	if (!dev->header_ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		neigh->nud_state = NUD_NOARP;
 		neigh->ops = &arp_direct_ops;
 		neigh->output = neigh_direct_output;
@@ -268,6 +274,7 @@ static int arp_constructor(struct neighbour *neigh)
 		 */
 
 		if (neigh->type == RTN_MULTICAST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			neigh->nud_state = NUD_NOARP;
 			arp_mc_map(addr, neigh->ha, dev, 1);
 		} else if (dev->flags & (IFF_NOARP | IFF_LOOPBACK)) {
@@ -275,7 +282,9 @@ static int arp_constructor(struct neighbour *neigh)
 			memcpy(neigh->ha, dev->dev_addr, dev->addr_len);
 		} else if (neigh->type == RTN_BROADCAST ||
 			   (dev->flags & IFF_POINTOPOINT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			neigh->nud_state = NUD_NOARP;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(neigh->ha, dev->broadcast, dev->addr_len);
 		}
 
@@ -289,11 +298,13 @@ static int arp_constructor(struct neighbour *neigh)
 		else
 			neigh->output = neigh->ops->output;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void arp_error_report(struct neighbour *neigh, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dst_link_failure(skb);
 	kfree_skb(skb);
 }
@@ -310,12 +321,16 @@ static void arp_send_dst(int type, int ptype, __be32 dest_ip,
 
 	/* arp on this interface. */
 	if (dev->flags & IFF_NOARP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	skb = arp_create(type, ptype, dest_ip, dev, src_ip,
 			 dest_hw, src_hw, target_hw);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	skb_dst_set(skb, dst_clone(dst));
 	arp_xmit(skb);
@@ -326,6 +341,7 @@ void arp_send(int type, int ptype, __be32 dest_ip,
 	      const unsigned char *dest_hw, const unsigned char *src_hw,
 	      const unsigned char *target_hw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	arp_send_dst(type, ptype, dest_ip, dev, src_ip, dest_hw, src_hw,
 		     target_hw, NULL);
 }
@@ -344,6 +360,7 @@ static void arp_solicit(struct neighbour *neigh, struct sk_buff *skb)
 	rcu_read_lock();
 	in_dev = __in_dev_get_rcu(dev);
 	if (!in_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		return;
 	}
@@ -357,6 +374,7 @@ static void arp_solicit(struct neighbour *neigh, struct sk_buff *skb)
 	case 1:		/* Restrict announcements of saddr in same subnet */
 		if (!skb)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		saddr = ip_hdr(skb)->saddr;
 		if (inet_addr_type_dev_table(dev_net(dev), dev,
 					     saddr) == RTN_LOCAL) {
@@ -364,11 +382,13 @@ static void arp_solicit(struct neighbour *neigh, struct sk_buff *skb)
 			if (inet_addr_onlink(in_dev, target, saddr))
 				break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		saddr = 0;
 		break;
 	case 2:		/* Avoid secondary IPs, get a primary/preferred one */
 		break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	if (!saddr)
@@ -376,26 +396,33 @@ static void arp_solicit(struct neighbour *neigh, struct sk_buff *skb)
 
 	probes -= NEIGH_VAR(neigh->parms, UCAST_PROBES);
 	if (probes < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(neigh->nud_state & NUD_VALID))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("trying to ucast probe in NUD_INVALID\n");
+}
 		neigh_ha_snapshot(dst_ha, neigh, dev);
 		dst_hw = dst_ha;
 	} else {
 		probes -= NEIGH_VAR(neigh->parms, APP_PROBES);
 		if (probes < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			neigh_app_ns(neigh);
 			return;
 		}
 	}
 
 	if (skb && !(dev->priv_flags & IFF_XMIT_DST_RELEASE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst = skb_dst(skb);
+}
 	arp_send_dst(ARPOP_REQUEST, ETH_P_ARP, target, dev, saddr,
 		     dst_hw, dev->dev_addr, NULL, dst);
 }
 
 static int arp_ignore(struct in_device *in_dev, __be32 sip, __be32 tip)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(in_dev->dev);
 	int scope;
 
@@ -439,7 +466,9 @@ static int arp_filter(__be32 sip, __be32 tip, struct net_device *dev)
 
 	rt = ip_route_output(net, sip, tip, 0, 0);
 	if (IS_ERR(rt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	if (rt->dst.dev != dev) {
 		__NET_INC_STATS(net, LINUX_MIB_ARPFILTER);
 		flag = 1;
@@ -458,7 +487,9 @@ static inline int arp_fwd_proxy(struct in_device *in_dev,
 	int imi, omi = -1;
 
 	if (rt->dst.dev == dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!IN_DEV_PROXY_ARP(in_dev))
 		return 0;
@@ -540,7 +571,9 @@ struct sk_buff *arp_create(int type, int ptype, __be32 dest_ip,
 
 	skb = alloc_skb(arp_hdr_len(dev) + hlen + tlen, GFP_ATOMIC);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	skb_reserve(skb, hlen);
 	skb_reset_network_header(skb);
@@ -548,7 +581,9 @@ struct sk_buff *arp_create(int type, int ptype, __be32 dest_ip,
 	skb->dev = dev;
 	skb->protocol = htons(ETH_P_ARP);
 	if (!src_hw)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		src_hw = dev->dev_addr;
+}
 	if (!dest_hw)
 		dest_hw = dev->broadcast;
 
@@ -591,6 +626,7 @@ struct sk_buff *arp_create(int type, int ptype, __be32 dest_ip,
 #if IS_ENABLED(CONFIG_FDDI)
 	case ARPHRD_FDDI:
 		arp->ar_hrd = htons(ARPHRD_ETHER);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		arp->ar_pro = htons(ETH_P_IP);
 		break;
 #endif
@@ -604,6 +640,7 @@ struct sk_buff *arp_create(int type, int ptype, __be32 dest_ip,
 
 	memcpy(arp_ptr, src_hw, dev->addr_len);
 	arp_ptr += dev->addr_len;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(arp_ptr, &src_ip, 4);
 	arp_ptr += 4;
 
@@ -614,11 +651,14 @@ struct sk_buff *arp_create(int type, int ptype, __be32 dest_ip,
 #endif
 	default:
 		if (target_hw)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(arp_ptr, target_hw, dev->addr_len);
+}
 		else
 			memset(arp_ptr, 0, dev->addr_len);
 		arp_ptr += dev->addr_len;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(arp_ptr, &dest_ip, 4);
 
 	return skb;
@@ -665,9 +705,12 @@ static bool arp_is_garp(struct net *net, struct net_device *dev,
 			!memcmp(tha, sha, dev->addr_len);
 
 	if (is_garp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*addr_type = inet_addr_type_dev_table(net, dev, sip);
 		if (*addr_type != RTN_UNICAST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			is_garp = false;
+}
 	}
 	return is_garp;
 }
@@ -699,6 +742,7 @@ static int arp_process(struct net *net, struct sock *sk, struct sk_buff *skb)
 	if (!in_dev)
 		goto out_free_skb;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	arp = arp_hdr(skb);
 
 	switch (dev_type) {
@@ -748,6 +792,7 @@ static int arp_process(struct net *net, struct sock *sk, struct sk_buff *skb)
 	arp_ptr = (unsigned char *)(arp + 1);
 	sha	= arp_ptr;
 	arp_ptr += dev->addr_len;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&sip, arp_ptr, 4);
 	arp_ptr += 4;
 	switch (dev_type) {
@@ -759,6 +804,7 @@ static int arp_process(struct net *net, struct sock *sk, struct sk_buff *skb)
 		tha = arp_ptr;
 		arp_ptr += dev->addr_len;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&tip, arp_ptr, 4);
 /*
  *	Check for bad requests for 127.x.x.x and requests for multicast
@@ -780,7 +826,9 @@ static int arp_process(struct net *net, struct sock *sk, struct sk_buff *skb)
  *     Special case: We must set Frame Relay source Q.922 address
  */
 	if (dev_type == ARPHRD_DLCI)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sha = dev->broadcast;
+}
 
 /*
  *  Process entry.  The idea here is we want to send a reply if it is a
@@ -806,6 +854,7 @@ static int arp_process(struct net *net, struct sock *sk, struct sk_buff *skb)
 
 	/* Special case: IPv4 duplicate address detection packet (RFC2131) */
 	if (sip == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (arp->ar_op == htons(ARPOP_REQUEST) &&
 		    inet_addr_type_dev_table(net, dev, tip) == RTN_LOCAL &&
 		    !arp_ignore(in_dev, sip, tip))
@@ -817,6 +866,7 @@ static int arp_process(struct net *net, struct sock *sk, struct sk_buff *skb)
 	if (arp->ar_op == htons(ARPOP_REQUEST) &&
 	    ip_route_input_noref(skb, tip, sip, 0, dev) == 0) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt = skb_rtable(skb);
 		addr_type = rt->rt_type;
 
@@ -824,11 +874,17 @@ static int arp_process(struct net *net, struct sock *sk, struct sk_buff *skb)
 			int dont_send;
 
 			dont_send = arp_ignore(in_dev, sip, tip);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!dont_send && IN_DEV_ARPFILTER(in_dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dont_send = arp_filter(sip, tip, dev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!dont_send) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				n = neigh_event_ns(&arp_tbl, sha, &sip, dev);
 				if (n) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					arp_send_dst(ARPOP_REPLY, ETH_P_ARP,
 						     sip, dev, tip, sha,
 						     dev->dev_addr, sha,
@@ -838,23 +894,30 @@ static int arp_process(struct net *net, struct sock *sk, struct sk_buff *skb)
 			}
 			goto out_consume_skb;
 		} else if (IN_DEV_FORWARD(in_dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (addr_type == RTN_UNICAST  &&
 			    (arp_fwd_proxy(in_dev, dev, rt) ||
 			     arp_fwd_pvlan(in_dev, dev, rt, sip, tip) ||
 			     (rt->dst.dev != dev &&
 			      pneigh_lookup(&arp_tbl, net, &tip, dev, 0)))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				n = neigh_event_ns(&arp_tbl, sha, &sip, dev);
 				if (n)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					neigh_release(n);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (NEIGH_CB(skb)->flags & LOCALLY_ENQUEUED ||
 				    skb->pkt_type == PACKET_HOST ||
 				    NEIGH_VAR(in_dev->arp_parms, PROXY_DELAY) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					arp_send_dst(ARPOP_REPLY, ETH_P_ARP,
 						     sip, dev, tip, sha,
 						     dev->dev_addr, sha,
 						     reply_dst);
 				} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					pneigh_enqueue(&arp_tbl,
 						       in_dev->arp_parms, skb);
 					goto out_free_dst;
@@ -929,6 +992,7 @@ static int arp_process(struct net *net, struct sock *sk, struct sk_buff *skb)
 
 static void parp_redo(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	arp_process(dev_net(skb->dev), NULL, skb);
 }
 
@@ -956,6 +1020,7 @@ static int arp_rcv(struct sk_buff *skb, struct net_device *dev,
 	if (!pskb_may_pull(skb, arp_hdr_len(dev)))
 		goto freeskb;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	arp = arp_hdr(skb);
 	if (arp->ar_hln != dev->addr_len || arp->ar_pln != 4)
 		goto freeskb;
@@ -985,6 +1050,7 @@ static int arp_rcv(struct sk_buff *skb, struct net_device *dev,
 
 static int arp_req_set_proxy(struct net *net, struct net_device *dev, int on)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev) {
 		IPV4_DEVCONF_ALL(net, PROXY_ARP) = on;
 		return 0;
@@ -1002,6 +1068,7 @@ static int arp_req_set_public(struct net *net, struct arpreq *r,
 	__be32 ip = ((struct sockaddr_in *)&r->arp_pa)->sin_addr.s_addr;
 	__be32 mask = ((struct sockaddr_in *)&r->arp_netmask)->sin_addr.s_addr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mask && mask != htonl(0xFFFFFFFF))
 		return -EINVAL;
 	if (!dev && (r->arp_flags & ATF_COM)) {
@@ -1027,7 +1094,9 @@ static int arp_req_set(struct net *net, struct arpreq *r,
 	int err;
 
 	if (r->arp_flags & ATF_PUBL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return arp_req_set_public(net, r, dev);
+}
 
 	ip = ((struct sockaddr_in *)&r->arp_pa)->sin_addr.s_addr;
 	if (r->arp_flags & ATF_PERM)
@@ -1080,6 +1149,7 @@ static int arp_req_set(struct net *net, struct arpreq *r,
 
 static unsigned int arp_state_to_flags(struct neighbour *neigh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (neigh->nud_state&NUD_PERMANENT)
 		return ATF_PERM | ATF_COM;
 	else if (neigh->nud_state&NUD_VALID)
@@ -1100,6 +1170,7 @@ static int arp_req_get(struct arpreq *r, struct net_device *dev)
 
 	neigh = neigh_lookup(&arp_tbl, &ip, dev);
 	if (neigh) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(neigh->nud_state & NUD_NOARP)) {
 			read_lock_bh(&neigh->lock);
 			memcpy(r->arp_ha.sa_data, neigh->ha, dev->addr_len);
@@ -1116,6 +1187,7 @@ static int arp_req_get(struct arpreq *r, struct net_device *dev)
 
 static int arp_invalidate(struct net_device *dev, __be32 ip)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct neighbour *neigh = neigh_lookup(&arp_tbl, &ip, dev);
 	int err = -ENXIO;
 	struct neigh_table *tbl = &arp_tbl;
@@ -1140,6 +1212,7 @@ static int arp_req_delete_public(struct net *net, struct arpreq *r,
 	__be32 ip = ((struct sockaddr_in *) &r->arp_pa)->sin_addr.s_addr;
 	__be32 mask = ((struct sockaddr_in *)&r->arp_netmask)->sin_addr.s_addr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mask == htonl(0xFFFFFFFF))
 		return pneigh_delete(&arp_tbl, net, &ip, dev);
 
@@ -1155,7 +1228,9 @@ static int arp_req_delete(struct net *net, struct arpreq *r,
 	__be32 ip;
 
 	if (r->arp_flags & ATF_PUBL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return arp_req_delete_public(net, r, dev);
+}
 
 	ip = ((struct sockaddr_in *)&r->arp_pa)->sin_addr.s_addr;
 	if (!dev) {
@@ -1242,6 +1317,7 @@ int arp_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 static int arp_netdev_event(struct notifier_block *this, unsigned long event,
 			    void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = netdev_notifier_info_to_dev(ptr);
 	struct netdev_notifier_change_info *change_info;
 
@@ -1253,7 +1329,9 @@ static int arp_netdev_event(struct notifier_block *this, unsigned long event,
 	case NETDEV_CHANGE:
 		change_info = ptr;
 		if (change_info->flags_changed & IFF_NOARP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			neigh_changeaddr(&arp_tbl, dev);
+}
 		break;
 	default:
 		break;
@@ -1374,6 +1452,7 @@ static void arp_format_pneigh_entry(struct seq_file *seq,
 				    struct pneigh_entry *n)
 {
 	struct net_device *dev = n->dev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int hatype = dev ? dev->type : 0;
 	char tbuf[16];
 
@@ -1385,6 +1464,7 @@ static void arp_format_pneigh_entry(struct seq_file *seq,
 
 static int arp_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (v == SEQ_START_TOKEN) {
 		seq_puts(seq, "IP address       HW type     Flags       "
 			      "HW address            Mask     Device\n");
@@ -1419,6 +1499,7 @@ static const struct seq_operations arp_seq_ops = {
 
 static int arp_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &arp_seq_ops,
 			    sizeof(struct neigh_seq_state));
 }
@@ -1435,7 +1516,9 @@ static const struct file_operations arp_seq_fops = {
 static int __net_init arp_net_init(struct net *net)
 {
 	if (!proc_create("arp", S_IRUGO, net->proc_net, &arp_seq_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
diff --git a/net/ipv4/cipso_ipv4.c b/net/ipv4/cipso_ipv4.c
index 82178cc..773a8df 100644
--- a/net/ipv4/cipso_ipv4.c
+++ b/net/ipv4/cipso_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * CIPSO - Commercial IP Security Option
  *
@@ -145,6 +147,7 @@ int cipso_v4_rbm_strictvalid = 1;
  */
 static void cipso_v4_cache_entry_free(struct cipso_v4_map_cache_entry *entry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (entry->lsm_data)
 		netlbl_secattr_cache_free(entry->lsm_data);
 	kfree(entry->key);
@@ -162,6 +165,7 @@ static void cipso_v4_cache_entry_free(struct cipso_v4_map_cache_entry *entry)
  */
 static u32 cipso_v4_map_cache_hash(const unsigned char *key, u32 key_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return jhash(key, key_len, 0);
 }
 
@@ -186,7 +190,9 @@ static int __init cipso_v4_cache_init(void)
 				 sizeof(struct cipso_v4_map_cache_bkt),
 				 GFP_KERNEL);
 	if (!cipso_v4_cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	for (iter = 0; iter < CIPSO_V4_CACHE_BUCKETS; iter++) {
 		spin_lock_init(&cipso_v4_cache[iter].lock);
@@ -194,6 +200,7 @@ static int __init cipso_v4_cache_init(void)
 		INIT_LIST_HEAD(&cipso_v4_cache[iter].list);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -210,6 +217,7 @@ void cipso_v4_cache_invalidate(void)
 	struct cipso_v4_map_cache_entry *entry, *tmp_entry;
 	u32 iter;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (iter = 0; iter < CIPSO_V4_CACHE_BUCKETS; iter++) {
 		spin_lock_bh(&cipso_v4_cache[iter].lock);
 		list_for_each_entry_safe(entry,
@@ -255,7 +263,9 @@ static int cipso_v4_cache_check(const unsigned char *key,
 	u32 hash;
 
 	if (!cipso_v4_cache_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	hash = cipso_v4_map_cache_hash(key, key_len);
 	bkt = hash & (CIPSO_V4_CACHE_BUCKETS - 1);
@@ -317,6 +327,7 @@ int cipso_v4_cache_add(const unsigned char *cipso_ptr,
 	struct cipso_v4_map_cache_entry *old_entry = NULL;
 	u32 cipso_ptr_len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!cipso_v4_cache_enabled || cipso_v4_cache_bucketsize <= 0)
 		return 0;
 
@@ -374,6 +385,7 @@ static struct cipso_v4_doi *cipso_v4_doi_search(u32 doi)
 {
 	struct cipso_v4_doi *iter;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(iter, &cipso_v4_doi_list, list)
 		if (iter->doi == doi && refcount_read(&iter->refcount))
 			return iter;
@@ -407,6 +419,7 @@ int cipso_v4_doi_add(struct cipso_v4_doi *doi_def,
 
 	if (doi_def->doi == CIPSO_V4_DOI_UNKNOWN)
 		goto doi_add_return;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (iter = 0; iter < CIPSO_V4_TAG_MAXCNT; iter++) {
 		switch (doi_def->tags[iter]) {
 		case CIPSO_V4_TAG_RBITMAP:
@@ -477,6 +490,7 @@ int cipso_v4_doi_add(struct cipso_v4_doi *doi_def,
  */
 void cipso_v4_doi_free(struct cipso_v4_doi *doi_def)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!doi_def)
 		return;
 
@@ -505,6 +519,7 @@ static void cipso_v4_doi_free_rcu(struct rcu_head *entry)
 {
 	struct cipso_v4_doi *doi_def;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	doi_def = container_of(entry, struct cipso_v4_doi, rcu);
 	cipso_v4_doi_free(doi_def);
 }
@@ -529,6 +544,7 @@ int cipso_v4_doi_remove(u32 doi, struct netlbl_audit *audit_info)
 	spin_lock(&cipso_v4_doi_list_lock);
 	doi_def = cipso_v4_doi_search(doi);
 	if (!doi_def) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&cipso_v4_doi_list_lock);
 		ret_val = -ENOENT;
 		goto doi_remove_return;
@@ -576,6 +592,7 @@ struct cipso_v4_doi *cipso_v4_doi_getdef(u32 doi)
 	doi_def = cipso_v4_doi_search(doi);
 	if (!doi_def)
 		goto doi_getdef_return;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!refcount_inc_not_zero(&doi_def->refcount))
 		doi_def = NULL;
 
@@ -594,6 +611,7 @@ struct cipso_v4_doi *cipso_v4_doi_getdef(u32 doi)
  */
 void cipso_v4_doi_putdef(struct cipso_v4_doi *doi_def)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!doi_def)
 		return;
 
@@ -629,6 +647,7 @@ int cipso_v4_doi_walk(u32 *skip_cnt,
 	struct cipso_v4_doi *iter_doi;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(iter_doi, &cipso_v4_doi_list, list)
 		if (refcount_read(&iter_doi->refcount) > 0) {
 			if (doi_cnt++ < *skip_cnt)
@@ -663,6 +682,7 @@ int cipso_v4_doi_walk(u32 *skip_cnt,
  */
 static int cipso_v4_map_lvl_valid(const struct cipso_v4_doi *doi_def, u8 level)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (doi_def->type) {
 	case CIPSO_V4_MAP_PASS:
 		return 0;
@@ -691,6 +711,7 @@ static int cipso_v4_map_lvl_hton(const struct cipso_v4_doi *doi_def,
 				 u32 host_lvl,
 				 u32 *net_lvl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (doi_def->type) {
 	case CIPSO_V4_MAP_PASS:
 		*net_lvl = host_lvl;
@@ -815,6 +836,7 @@ static int cipso_v4_map_cat_rbm_hton(const struct cipso_v4_doi *doi_def,
 	u32 *host_cat_array = NULL;
 
 	if (doi_def->type == CIPSO_V4_MAP_TRANS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		host_cat_size = doi_def->map.std->cat.local_size;
 		host_cat_array = doi_def->map.std->cat.local;
 	}
@@ -876,6 +898,7 @@ static int cipso_v4_map_cat_rbm_ntoh(const struct cipso_v4_doi *doi_def,
 	u32 *net_cat_array = NULL;
 
 	if (doi_def->type == CIPSO_V4_MAP_TRANS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_cat_size = doi_def->map.std->cat.cipso_size;
 		net_cat_array = doi_def->map.std->cat.cipso;
 	}
@@ -933,6 +956,7 @@ static int cipso_v4_map_cat_enum_valid(const struct cipso_v4_doi *doi_def,
 	int cat_prev = -1;
 	u32 iter;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (doi_def->type != CIPSO_V4_MAP_PASS || enumcat_len & 0x01)
 		return -EFAULT;
 
@@ -969,6 +993,7 @@ static int cipso_v4_map_cat_enum_hton(const struct cipso_v4_doi *doi_def,
 	u32 cat_iter = 0;
 
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cat = netlbl_catmap_walk(secattr->attr.mls.cat, cat + 1);
 		if (cat < 0)
 			break;
@@ -1003,6 +1028,7 @@ static int cipso_v4_map_cat_enum_ntoh(const struct cipso_v4_doi *doi_def,
 	int ret_val;
 	u32 iter;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (iter = 0; iter < net_cat_len; iter += 2) {
 		ret_val = netlbl_catmap_setbit(&secattr->attr.mls.cat,
 					     get_unaligned_be16(&net_cat[iter]),
@@ -1035,6 +1061,7 @@ static int cipso_v4_map_cat_rng_valid(const struct cipso_v4_doi *doi_def,
 	u32 cat_prev = CIPSO_V4_MAX_REM_CATS + 1;
 	u32 iter;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (doi_def->type != CIPSO_V4_MAP_PASS || rngcat_len & 0x01)
 		return -EFAULT;
 
@@ -1137,6 +1164,7 @@ static int cipso_v4_map_cat_rng_ntoh(const struct cipso_v4_doi *doi_def,
 	u16 cat_low;
 	u16 cat_high;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (net_iter = 0; net_iter < net_cat_len; net_iter += 4) {
 		cat_high = get_unaligned_be16(&net_cat[net_iter]);
 		if ((net_iter + 4) <= net_cat_len)
@@ -1173,6 +1201,7 @@ static void cipso_v4_gentag_hdr(const struct cipso_v4_doi *doi_def,
 				unsigned char *buf,
 				u32 len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	buf[0] = IPOPT_CIPSO;
 	buf[1] = CIPSO_V4_HDR_LEN + len;
 	*(__be32 *)&buf[2] = htonl(doi_def->doi);
@@ -1202,7 +1231,9 @@ static int cipso_v4_gentag_rbm(const struct cipso_v4_doi *doi_def,
 	u32 level;
 
 	if ((secattr->flags & NETLBL_SECATTR_MLS_LVL) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	ret_val = cipso_v4_map_lvl_hton(doi_def,
 					secattr->attr.mls.lvl,
@@ -1257,7 +1288,9 @@ static int cipso_v4_parsetag_rbm(const struct cipso_v4_doi *doi_def,
 
 	ret_val = cipso_v4_map_lvl_ntoh(doi_def, tag[3], &level);
 	if (ret_val != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret_val;
+}
 	secattr->attr.mls.lvl = level;
 	secattr->flags |= NETLBL_SECATTR_MLS_LVL;
 
@@ -1299,7 +1332,9 @@ static int cipso_v4_gentag_enum(const struct cipso_v4_doi *doi_def,
 	u32 level;
 
 	if (!(secattr->flags & NETLBL_SECATTR_MLS_LVL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	ret_val = cipso_v4_map_lvl_hton(doi_def,
 					secattr->attr.mls.lvl,
@@ -1348,7 +1383,9 @@ static int cipso_v4_parsetag_enum(const struct cipso_v4_doi *doi_def,
 
 	ret_val = cipso_v4_map_lvl_ntoh(doi_def, tag[3], &level);
 	if (ret_val != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret_val;
+}
 	secattr->attr.mls.lvl = level;
 	secattr->flags |= NETLBL_SECATTR_MLS_LVL;
 
@@ -1390,7 +1427,9 @@ static int cipso_v4_gentag_rng(const struct cipso_v4_doi *doi_def,
 	u32 level;
 
 	if (!(secattr->flags & NETLBL_SECATTR_MLS_LVL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	ret_val = cipso_v4_map_lvl_hton(doi_def,
 					secattr->attr.mls.lvl,
@@ -1438,7 +1477,9 @@ static int cipso_v4_parsetag_rng(const struct cipso_v4_doi *doi_def,
 
 	ret_val = cipso_v4_map_lvl_ntoh(doi_def, tag[3], &level);
 	if (ret_val != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret_val;
+}
 	secattr->attr.mls.lvl = level;
 	secattr->flags |= NETLBL_SECATTR_MLS_LVL;
 
@@ -1475,6 +1516,7 @@ static int cipso_v4_gentag_loc(const struct cipso_v4_doi *doi_def,
 			       unsigned char *buffer,
 			       u32 buffer_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(secattr->flags & NETLBL_SECATTR_SECID))
 		return -EPERM;
 
@@ -1500,6 +1542,7 @@ static int cipso_v4_parsetag_loc(const struct cipso_v4_doi *doi_def,
 				 const unsigned char *tag,
 				 struct netlbl_lsm_secattr *secattr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	secattr->attr.secid = *(u32 *)&tag[2];
 	secattr->flags |= NETLBL_SECATTR_SECID;
 
@@ -1517,6 +1560,7 @@ static int cipso_v4_parsetag_loc(const struct cipso_v4_doi *doi_def,
  */
 unsigned char *cipso_v4_optptr(const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct iphdr *iph = ip_hdr(skb);
 	unsigned char *optptr = (unsigned char *)&(ip_hdr(skb)[1]);
 	int optlen;
diff --git a/net/ipv4/datagram.c b/net/ipv4/datagram.c
index f915abf..fde4d48 100644
--- a/net/ipv4/datagram.c
+++ b/net/ipv4/datagram.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	common UDP/RAW code
  *	Linux INET implementation
@@ -22,6 +24,7 @@
 
 int __ip4_datagram_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct sockaddr_in *usin = (struct sockaddr_in *) uaddr;
 	struct flowi4 *fl4;
@@ -32,20 +35,30 @@ int __ip4_datagram_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len
 
 
 	if (addr_len < sizeof(*usin))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (usin->sin_family != AF_INET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
 	sk_dst_reset(sk);
 
 	oif = sk->sk_bound_dev_if;
 	saddr = inet->inet_saddr;
 	if (ipv4_is_multicast(usin->sin_addr.s_addr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!oif)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			oif = inet->mc_index;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!saddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			saddr = inet->mc_addr;
+}
 	}
 	fl4 = &inet->cork.fl.u.ip4;
 	rt = ip_route_connect(fl4, usin->sin_addr.s_addr, saddr,
@@ -53,13 +66,17 @@ int __ip4_datagram_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len
 			      sk->sk_protocol,
 			      inet->inet_sport, usin->sin_port, sk);
 	if (IS_ERR(rt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(rt);
 		if (err == -ENETUNREACH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			IP_INC_STATS(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);
+}
 		goto out;
 	}
 
 	if ((rt->rt_flags & RTCF_BROADCAST) && !sock_flag(sk, SOCK_BROADCAST)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip_rt_put(rt);
 		err = -EACCES;
 		goto out;
@@ -101,6 +118,7 @@ EXPORT_SYMBOL(ip4_datagram_connect);
  */
 void ip4_datagram_release_cb(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_sock *inet = inet_sk(sk);
 	const struct ip_options_rcu *inet_opt;
 	__be32 daddr = inet->inet_daddr;
@@ -112,17 +130,24 @@ void ip4_datagram_release_cb(struct sock *sk)
 
 	dst = __sk_dst_get(sk);
 	if (!dst || !dst->obsolete || dst->ops->check(dst, 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet_opt = rcu_dereference(inet->inet_opt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (inet_opt && inet_opt->opt.srr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		daddr = inet_opt->opt.faddr;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rt = ip_route_output_ports(sock_net(sk), &fl4, sk, daddr,
 				   inet->inet_saddr, inet->inet_dport,
 				   inet->inet_sport, sk->sk_protocol,
 				   RT_CONN_FLAGS(sk), sk->sk_bound_dev_if);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dst = !IS_ERR(rt) ? &rt->dst : NULL;
 	sk_dst_set(sk, dst);
 
diff --git a/net/ipv4/devinet.c b/net/ipv4/devinet.c
index bffa88e..19d59d6 100644
--- a/net/ipv4/devinet.c
+++ b/net/ipv4/devinet.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	NET3	IP device support routines.
  *
@@ -137,6 +139,7 @@ static void inet_hash_remove(struct in_ifaddr *ifa)
  */
 struct net_device *__ip_dev_find(struct net *net, __be32 addr, bool devref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 hash = inet_addr_hash(net, addr);
 	struct net_device *result = NULL;
 	struct in_ifaddr *ifa;
@@ -148,6 +151,7 @@ struct net_device *__ip_dev_find(struct net *net, __be32 addr, bool devref)
 
 			if (!net_eq(dev_net(dev), net))
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			result = dev;
 			break;
 		}
@@ -167,7 +171,10 @@ struct net_device *__ip_dev_find(struct net *net, __be32 addr, bool devref)
 			result = FIB_RES_DEV(res);
 	}
 	if (result && devref)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_hold(result);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	return result;
 }
@@ -224,7 +231,9 @@ void in_dev_finish_destroy(struct in_device *idev)
 #endif
 	dev_put(dev);
 	if (!idev->dead)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Freeing alive in_device %p\n", idev);
+}
 	else
 		kfree(idev);
 }
@@ -248,7 +257,9 @@ static struct in_device *inetdev_init(struct net_device *dev)
 	if (!in_dev->arp_parms)
 		goto out_kfree;
 	if (IPV4_DEVCONF(in_dev->cnf, FORWARDING))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_disable_lro(dev);
+}
 	/* Reference in_dev->dev */
 	dev_hold(dev);
 	/* Account for reference dev->ip_ptr (below) */
@@ -256,6 +267,7 @@ static struct in_device *inetdev_init(struct net_device *dev)
 
 	err = devinet_sysctl_register(in_dev);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		in_dev->dead = 1;
 		in_dev_put(in_dev);
 		in_dev = NULL;
@@ -263,7 +275,9 @@ static struct in_device *inetdev_init(struct net_device *dev)
 	}
 	ip_mc_init_dev(in_dev);
 	if (dev->flags & IFF_UP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip_mc_up(in_dev);
+}
 
 	/* we can receive as soon as ip_ptr is set -- do this last */
 	rcu_assign_pointer(dev->ip_ptr, in_dev);
@@ -299,6 +313,7 @@ static void inetdev_destroy(struct in_device *in_dev)
 		inet_free_ifa(ifa);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(dev->ip_ptr, NULL);
 
 	devinet_sysctl_unregister(in_dev);
@@ -310,6 +325,7 @@ static void inetdev_destroy(struct in_device *in_dev)
 
 int inet_addr_onlink(struct in_device *in_dev, __be32 a, __be32 b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	for_primary_ifa(in_dev) {
 		if (inet_ifa_match(a, ifa)) {
@@ -341,23 +357,30 @@ static void __inet_del_ifa(struct in_device *in_dev, struct in_ifaddr **ifap,
 	 * unless alias promotion is set
 	 **/
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(ifa1->ifa_flags & IFA_F_SECONDARY)) {
 		struct in_ifaddr **ifap1 = &ifa1->ifa_next;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while ((ifa = *ifap1) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!(ifa->ifa_flags & IFA_F_SECONDARY) &&
 			    ifa1->ifa_scope <= ifa->ifa_scope)
 				last_prim = ifa;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!(ifa->ifa_flags & IFA_F_SECONDARY) ||
 			    ifa1->ifa_mask != ifa->ifa_mask ||
 			    !inet_ifa_match(ifa1->ifa_address, ifa)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ifap1 = &ifa->ifa_next;
 				prev_prom = ifa;
 				continue;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!do_promote) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				inet_hash_remove(ifa);
 				*ifap1 = ifa->ifa_next;
 
@@ -366,6 +389,7 @@ static void __inet_del_ifa(struct in_device *in_dev, struct in_ifaddr **ifap,
 						NETDEV_DOWN, ifa);
 				inet_free_ifa(ifa);
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				promote = ifa;
 				break;
 			}
@@ -378,6 +402,7 @@ static void __inet_del_ifa(struct in_device *in_dev, struct in_ifaddr **ifap,
 	 * while all addresses are on the device list.
 	 */
 	for (ifa = promote; ifa; ifa = ifa->ifa_next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ifa1->ifa_mask == ifa->ifa_mask &&
 		    inet_ifa_match(ifa1->ifa_address, ifa))
 			fib_del_ifaddr(ifa, ifa1);
@@ -406,26 +431,33 @@ static void __inet_del_ifa(struct in_device *in_dev, struct in_ifaddr **ifap,
 		struct in_ifaddr *next_sec = promote->ifa_next;
 
 		if (prev_prom) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			prev_prom->ifa_next = promote->ifa_next;
 			promote->ifa_next = last_prim->ifa_next;
 			last_prim->ifa_next = promote;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		promote->ifa_flags &= ~IFA_F_SECONDARY;
 		rtmsg_ifa(RTM_NEWADDR, promote, nlh, portid);
 		blocking_notifier_call_chain(&inetaddr_chain,
 				NETDEV_UP, promote);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (ifa = next_sec; ifa; ifa = ifa->ifa_next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ifa1->ifa_mask != ifa->ifa_mask ||
 			    !inet_ifa_match(ifa1->ifa_address, ifa))
 					continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fib_add_ifaddr(ifa);
 		}
 
 	}
 	if (destroy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_free_ifa(ifa1);
 }
+}
 
 static void inet_del_ifa(struct in_device *in_dev, struct in_ifaddr **ifap,
 			 int destroy)
@@ -448,6 +480,7 @@ static int __inet_insert_ifa(struct in_ifaddr *ifa, struct nlmsghdr *nlh,
 	ASSERT_RTNL();
 
 	if (!ifa->ifa_local) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_free_ifa(ifa);
 		return 0;
 	}
@@ -466,10 +499,13 @@ static int __inet_insert_ifa(struct in_ifaddr *ifa, struct nlmsghdr *nlh,
 				inet_free_ifa(ifa);
 				return -EEXIST;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ifa1->ifa_scope != ifa->ifa_scope) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				inet_free_ifa(ifa);
 				return -EINVAL;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ifa->ifa_flags |= IFA_F_SECONDARY;
 		}
 	}
@@ -487,6 +523,7 @@ static int __inet_insert_ifa(struct in_ifaddr *ifa, struct nlmsghdr *nlh,
 					   NETDEV_UP, &ivi);
 	ret = notifier_to_errno(ret);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_free_ifa(ifa);
 		return ret;
 	}
@@ -520,6 +557,7 @@ static int inet_insert_ifa(struct in_ifaddr *ifa)
 
 static int inet_set_ifa(struct net_device *dev, struct in_ifaddr *ifa)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct in_device *in_dev = __in_dev_get_rtnl(dev);
 
 	ASSERT_RTNL();
@@ -552,6 +590,7 @@ struct in_device *inetdev_by_index(struct net *net, int ifindex)
 	dev = dev_get_by_index_rcu(net, ifindex);
 	if (dev)
 		in_dev = rcu_dereference_rtnl(dev->ip_ptr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	return in_dev;
 }
@@ -562,6 +601,7 @@ EXPORT_SYMBOL(inetdev_by_index);
 struct in_ifaddr *inet_ifa_byprefix(struct in_device *in_dev, __be32 prefix,
 				    __be32 mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	for_primary_ifa(in_dev) {
@@ -579,6 +619,7 @@ static int ip_mc_config(struct sock *sk, bool join, const struct in_ifaddr *ifa)
 	};
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	lock_sock(sk);
@@ -594,6 +635,7 @@ static int ip_mc_config(struct sock *sk, bool join, const struct in_ifaddr *ifa)
 static int inet_rtm_deladdr(struct sk_buff *skb, struct nlmsghdr *nlh,
 			    struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct nlattr *tb[IFA_MAX+1];
 	struct in_device *in_dev;
@@ -668,29 +710,38 @@ static void check_lifetime(struct work_struct *work)
 
 			if (ifa->ifa_valid_lft != INFINITY_LIFE_TIME &&
 			    age >= ifa->ifa_valid_lft) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				change_needed = true;
 			} else if (ifa->ifa_preferred_lft ==
 				   INFINITY_LIFE_TIME) {
 				continue;
 			} else if (age >= ifa->ifa_preferred_lft) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (time_before(ifa->ifa_tstamp +
 						ifa->ifa_valid_lft * HZ, next))
 					next = ifa->ifa_tstamp +
 					       ifa->ifa_valid_lft * HZ;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!(ifa->ifa_flags & IFA_F_DEPRECATED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					change_needed = true;
+}
 			} else if (time_before(ifa->ifa_tstamp +
 					       ifa->ifa_preferred_lft * HZ,
 					       next)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				next = ifa->ifa_tstamp +
 				       ifa->ifa_preferred_lft * HZ;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		if (!change_needed)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtnl_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hlist_for_each_entry_safe(ifa, n, &inet_addr_lst[i], hash) {
 			unsigned long age;
 
@@ -707,7 +758,9 @@ static void check_lifetime(struct work_struct *work)
 
 				for (ifap = &ifa->ifa_dev->ifa_list;
 				     *ifap != NULL; ifap = &(*ifap)->ifa_next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (*ifap == ifa) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						inet_del_ifa(ifa->ifa_dev,
 							     ifap, 1);
 						break;
@@ -717,10 +770,12 @@ static void check_lifetime(struct work_struct *work)
 				   INFINITY_LIFE_TIME &&
 				   age >= ifa->ifa_preferred_lft &&
 				   !(ifa->ifa_flags & IFA_F_DEPRECATED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ifa->ifa_flags |= IFA_F_DEPRECATED;
 				rtmsg_ifa(RTM_NEWADDR, ifa, NULL, 0);
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtnl_unlock();
 	}
 
@@ -729,12 +784,16 @@ static void check_lifetime(struct work_struct *work)
 
 	/* If rounded timeout is accurate enough, accept it. */
 	if (time_before(next_sec, next + ADDRCONF_TIMER_FUZZ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next_sched = next_sec;
+}
 
 	now = jiffies;
 	/* And minimum interval is ADDRCONF_TIMER_FUZZ_MAX. */
 	if (time_before(next_sched, now + ADDRCONF_TIMER_FUZZ_MAX))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next_sched = now + ADDRCONF_TIMER_FUZZ_MAX;
+}
 
 	queue_delayed_work(system_power_efficient_wq, &check_lifetime_work,
 			next_sched - now);
@@ -749,14 +808,21 @@ static void set_ifa_lifetime(struct in_ifaddr *ifa, __u32 valid_lft,
 
 	timeout = addrconf_timeout_fixup(valid_lft, HZ);
 	if (addrconf_finite_timeout(timeout))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ifa->ifa_valid_lft = timeout;
+}
 	else
 		ifa->ifa_flags |= IFA_F_PERMANENT;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	timeout = addrconf_timeout_fixup(prefered_lft, HZ);
 	if (addrconf_finite_timeout(timeout)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (timeout == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ifa->ifa_flags |= IFA_F_DEPRECATED;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ifa->ifa_preferred_lft = timeout;
 	}
 	ifa->ifa_tstamp = jiffies;
@@ -779,6 +845,7 @@ static struct in_ifaddr *rtm_to_ifaddr(struct net *net, struct nlmsghdr *nlh,
 	if (err < 0)
 		goto errout;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ifm = nlmsg_data(nlh);
 	err = -EINVAL;
 	if (ifm->ifa_prefixlen > 32 || !tb[IFA_LOCAL])
@@ -789,6 +856,7 @@ static struct in_ifaddr *rtm_to_ifaddr(struct net *net, struct nlmsghdr *nlh,
 	if (!dev)
 		goto errout;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	in_dev = __in_dev_get_rtnl(dev);
 	err = -ENOBUFS;
 	if (!in_dev)
@@ -809,6 +877,7 @@ static struct in_ifaddr *rtm_to_ifaddr(struct net *net, struct nlmsghdr *nlh,
 	if (!tb[IFA_ADDRESS])
 		tb[IFA_ADDRESS] = tb[IFA_LOCAL];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_HLIST_NODE(&ifa->hash);
 	ifa->ifa_prefixlen = ifm->ifa_prefixlen;
 	ifa->ifa_mask = inet_make_mask(ifm->ifa_prefixlen);
@@ -824,7 +893,9 @@ static struct in_ifaddr *rtm_to_ifaddr(struct net *net, struct nlmsghdr *nlh,
 		ifa->ifa_broadcast = nla_get_in_addr(tb[IFA_BROADCAST]);
 
 	if (tb[IFA_LABEL])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nla_strlcpy(ifa->ifa_label, tb[IFA_LABEL], IFNAMSIZ);
+}
 	else
 		memcpy(ifa->ifa_label, dev->name, IFNAMSIZ);
 
@@ -832,14 +903,18 @@ static struct in_ifaddr *rtm_to_ifaddr(struct net *net, struct nlmsghdr *nlh,
 		struct ifa_cacheinfo *ci;
 
 		ci = nla_data(tb[IFA_CACHEINFO]);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ci->ifa_valid || ci->ifa_prefered > ci->ifa_valid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
 			goto errout_free;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*pvalid_lft = ci->ifa_valid;
 		*pprefered_lft = ci->ifa_prefered;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ifa;
 
 errout_free:
@@ -854,15 +929,19 @@ static struct in_ifaddr *find_matching_ifa(struct in_ifaddr *ifa)
 	struct in_ifaddr *ifa1, **ifap;
 
 	if (!ifa->ifa_local)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	for (ifap = &in_dev->ifa_list; (ifa1 = *ifap) != NULL;
 	     ifap = &ifa1->ifa_next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ifa1->ifa_mask == ifa->ifa_mask &&
 		    inet_ifa_match(ifa1->ifa_address, ifa) &&
 		    ifa1->ifa_local == ifa->ifa_local)
 			return ifa1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -879,7 +958,9 @@ static int inet_rtm_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh,
 
 	ifa = rtm_to_ifaddr(net, nlh, &valid_lft, &prefered_lft);
 	if (IS_ERR(ifa))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(ifa);
+}
 
 	ifa_existing = find_matching_ifa(ifa);
 	if (!ifa_existing) {
@@ -888,21 +969,25 @@ static int inet_rtm_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh,
 		 */
 		set_ifa_lifetime(ifa, valid_lft, prefered_lft);
 		if (ifa->ifa_flags & IFA_F_MCAUTOJOIN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			int ret = ip_mc_config(net->ipv4.mc_autojoin_sk,
 					       true, ifa);
 
 			if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				inet_free_ifa(ifa);
 				return ret;
 			}
 		}
 		return __inet_insert_ifa(ifa, nlh, NETLINK_CB(skb).portid);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_free_ifa(ifa);
 
 		if (nlh->nlmsg_flags & NLM_F_EXCL ||
 		    !(nlh->nlmsg_flags & NLM_F_REPLACE))
 			return -EEXIST;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ifa = ifa_existing;
 		set_ifa_lifetime(ifa, valid_lft, prefered_lft);
 		cancel_delayed_work(&check_lifetime_work);
@@ -910,6 +995,7 @@ static int inet_rtm_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh,
 				&check_lifetime_work, 0);
 		rtmsg_ifa(RTM_NEWADDR, ifa, nlh, NETLINK_CB(skb).portid);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -922,7 +1008,9 @@ static int inet_abc_len(__be32 addr)
 	int rc = -1;	/* Something else, probably a multicast. */
 
 	if (ipv4_is_zeronet(addr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = 0;
+}
 	else {
 		__u32 haddr = ntohl(addr);
 
@@ -964,7 +1052,9 @@ int devinet_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 
 	colon = strchr(ifr.ifr_name, ':');
 	if (colon)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*colon = 0;
+}
 
 	dev_load(net, ifr.ifr_name);
 
@@ -994,6 +1084,7 @@ int devinet_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 		ret = -EPERM;
 		if (!ns_capable(net->user_ns, CAP_NET_ADMIN))
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EINVAL;
 		if (sin->sin_family != AF_INET)
 			goto out;
@@ -1011,8 +1102,11 @@ int devinet_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 		goto done;
 
 	if (colon)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*colon = ':';
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	in_dev = __in_dev_get_rtnl(dev);
 	if (in_dev) {
 		if (tryaddrmatch) {
@@ -1041,6 +1135,7 @@ int devinet_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -EADDRNOTAVAIL;
 	if (!ifa && cmd != SIOCSIFADDR && cmd != SIOCSIFFLAGS)
 		goto done;
@@ -1064,12 +1159,16 @@ int devinet_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 
 	case SIOCSIFFLAGS:
 		if (colon) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EADDRNOTAVAIL;
 			if (!ifa)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = 0;
 			if (!(ifr.ifr_flags & IFF_UP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				inet_del_ifa(in_dev, ifap, 1);
+}
 			break;
 		}
 		ret = dev_change_flags(dev, ifr.ifr_flags);
@@ -1080,28 +1179,37 @@ int devinet_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 		if (inet_abc_len(sin->sin_addr.s_addr) < 0)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ifa) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ENOBUFS;
 			ifa = inet_alloc_ifa();
 			if (!ifa)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			INIT_HLIST_NODE(&ifa->hash);
 			if (colon)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				memcpy(ifa->ifa_label, ifr.ifr_name, IFNAMSIZ);
+}
 			else
 				memcpy(ifa->ifa_label, dev->name, IFNAMSIZ);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = 0;
 			if (ifa->ifa_local == sin->sin_addr.s_addr)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_del_ifa(in_dev, ifap, 0);
 			ifa->ifa_broadcast = 0;
 			ifa->ifa_scope = 0;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ifa->ifa_address = ifa->ifa_local = sin->sin_addr.s_addr;
 
 		if (!(dev->flags & IFF_POINTOPOINT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ifa->ifa_prefixlen = inet_abc_len(ifa->ifa_address);
 			ifa->ifa_mask = inet_make_mask(ifa->ifa_prefixlen);
 			if ((dev->flags & IFF_BROADCAST) &&
@@ -1109,9 +1217,11 @@ int devinet_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 				ifa->ifa_broadcast = ifa->ifa_address |
 						     ~ifa->ifa_mask;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ifa->ifa_prefixlen = 32;
 			ifa->ifa_mask = inet_make_mask(32);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_ifa_lifetime(ifa, INFINITY_LIFE_TIME, INFINITY_LIFE_TIME);
 		ret = inet_set_ifa(dev, ifa);
 		break;
@@ -1119,6 +1229,7 @@ int devinet_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 	case SIOCSIFBRDADDR:	/* Set the broadcast address */
 		ret = 0;
 		if (ifa->ifa_broadcast != sin->sin_addr.s_addr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_del_ifa(in_dev, ifap, 0);
 			ifa->ifa_broadcast = sin->sin_addr.s_addr;
 			inet_insert_ifa(ifa);
@@ -1129,9 +1240,11 @@ int devinet_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 		ret = 0;
 		if (ifa->ifa_address == sin->sin_addr.s_addr)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EINVAL;
 		if (inet_abc_len(sin->sin_addr.s_addr) < 0)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 0;
 		inet_del_ifa(in_dev, ifap, 0);
 		ifa->ifa_address = sin->sin_addr.s_addr;
@@ -1146,6 +1259,7 @@ int devinet_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 		ret = -EINVAL;
 		if (bad_mask(sin->sin_addr.s_addr, 0))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 0;
 		if (ifa->ifa_mask != sin->sin_addr.s_addr) {
 			__be32 old_mask = ifa->ifa_mask;
@@ -1163,9 +1277,11 @@ int devinet_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 			    (ifa->ifa_prefixlen < 31) &&
 			    (ifa->ifa_broadcast ==
 			     (ifa->ifa_local|~old_mask))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ifa->ifa_broadcast = (ifa->ifa_local |
 						      ~sin->sin_addr.s_addr);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_insert_ifa(ifa);
 		}
 		break;
@@ -1182,6 +1298,7 @@ int devinet_ioctl(struct net *net, unsigned int cmd, void __user *arg)
 
 static int inet_gifconf(struct net_device *dev, char __user *buf, int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct in_device *in_dev = __in_dev_get_rtnl(dev);
 	struct in_ifaddr *ifa;
 	struct ifreq ifr;
@@ -1197,6 +1314,7 @@ static int inet_gifconf(struct net_device *dev, char __user *buf, int len)
 		}
 		if (len < (int) sizeof(ifr))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(&ifr, 0, sizeof(struct ifreq));
 		strcpy(ifr.ifr_name, ifa->ifa_label);
 
@@ -1575,8 +1693,11 @@ static int inet_fill_ifaddr(struct sk_buff *skb, struct in_ifaddr *ifa,
 
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(*ifm), flags);
 	if (!nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ifm = nlmsg_data(nlh);
 	ifm->ifa_family = AF_INET;
 	ifm->ifa_prefixlen = ifa->ifa_prefixlen;
@@ -1585,23 +1706,31 @@ static int inet_fill_ifaddr(struct sk_buff *skb, struct in_ifaddr *ifa,
 	ifm->ifa_index = ifa->ifa_dev->dev->ifindex;
 
 	if (!(ifm->ifa_flags & IFA_F_PERMANENT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		preferred = ifa->ifa_preferred_lft;
 		valid = ifa->ifa_valid_lft;
 		if (preferred != INFINITY_LIFE_TIME) {
 			long tval = (jiffies - ifa->ifa_tstamp) / HZ;
 
 			if (preferred > tval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				preferred -= tval;
+}
 			else
 				preferred = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (valid != INFINITY_LIFE_TIME) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (valid > tval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					valid -= tval;
+}
 				else
 					valid = 0;
 			}
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		preferred = INFINITY_LIFE_TIME;
 		valid = INFINITY_LIFE_TIME;
 	}
@@ -1642,6 +1771,7 @@ static int inet_dump_ifaddr(struct sk_buff *skb, struct netlink_callback *cb)
 	s_ip_idx = ip_idx = cb->args[2];
 
 	for (h = s_h; h < NETDEV_HASHENTRIES; h++, s_idx = 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		idx = 0;
 		head = &net->dev_index_head[h];
 		rcu_read_lock();
@@ -1651,7 +1781,10 @@ static int inet_dump_ifaddr(struct sk_buff *skb, struct netlink_callback *cb)
 			if (idx < s_idx)
 				goto cont;
 			if (h > s_h || idx > s_idx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				s_ip_idx = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			in_dev = __in_dev_get_rcu(dev);
 			if (!in_dev)
 				goto cont;
@@ -1664,6 +1797,7 @@ static int inet_dump_ifaddr(struct sk_buff *skb, struct netlink_callback *cb)
 					     NETLINK_CB(cb->skb).portid,
 					     cb->nlh->nlmsg_seq,
 					     RTM_NEWADDR, NLM_F_MULTI) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					rcu_read_unlock();
 					goto done;
 				}
@@ -1672,6 +1806,7 @@ static int inet_dump_ifaddr(struct sk_buff *skb, struct netlink_callback *cb)
 cont:
 			idx++;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 	}
 
@@ -1707,8 +1842,10 @@ static void rtmsg_ifa(int event, struct in_ifaddr *ifa, struct nlmsghdr *nlh,
 	return;
 errout:
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtnl_set_sk_err(net, RTNLGRP_IPV4_IFADDR, err);
 }
+}
 
 static size_t inet_get_link_af_size(const struct net_device *dev,
 				    u32 ext_filter_mask)
@@ -1716,7 +1853,9 @@ static size_t inet_get_link_af_size(const struct net_device *dev,
 	struct in_device *in_dev = rcu_dereference_rtnl(dev->ip_ptr);
 
 	if (!in_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return nla_total_size(IPV4_DEVCONF_MAX * 4); /* IFLA_INET_CONF */
 }
@@ -1729,15 +1868,20 @@ static int inet_fill_link_af(struct sk_buff *skb, const struct net_device *dev,
 	int i;
 
 	if (!in_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODATA;
+}
 
 	nla = nla_reserve(skb, IFLA_INET_CONF, IPV4_DEVCONF_MAX * 4);
 	if (!nla)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	for (i = 0; i < IPV4_DEVCONF_MAX; i++)
 		((u32 *) nla_data(nla))[i] = in_dev->cnf.data[i];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1751,6 +1895,7 @@ static int inet_validate_link_af(const struct net_device *dev,
 	struct nlattr *a, *tb[IFLA_INET_MAX+1];
 	int err, rem;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev && !__in_dev_get_rtnl(dev))
 		return -EAFNOSUPPORT;
 
@@ -1775,6 +1920,7 @@ static int inet_validate_link_af(const struct net_device *dev,
 
 static int inet_set_link_af(struct net_device *dev, const struct nlattr *nla)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct in_device *in_dev = __in_dev_get_rtnl(dev);
 	struct nlattr *a, *tb[IFLA_INET_MAX+1];
 	int rem;
@@ -1800,10 +1946,14 @@ static int inet_netconf_msgsize_devconf(int type)
 	bool all = false;
 
 	if (type == NETCONFA_ALL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		all = true;
+}
 
 	if (all || type == NETCONFA_FORWARDING)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		size += nla_total_size(4);
+}
 	if (all || type == NETCONFA_RP_FILTER)
 		size += nla_total_size(4);
 	if (all || type == NETCONFA_MC_FORWARDING)
@@ -1828,11 +1978,16 @@ static int inet_netconf_fill_devconf(struct sk_buff *skb, int ifindex,
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(struct netconfmsg),
 			flags);
 	if (!nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	if (type == NETCONFA_ALL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		all = true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ncm = nlmsg_data(nlh);
 	ncm->ncm_family = AF_INET;
 
@@ -1894,8 +2049,10 @@ void inet_netconf_notify_devconf(struct net *net, int event, int type,
 	return;
 errout:
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtnl_set_sk_err(net, RTNLGRP_IPV4_NETCONF, err);
 }
+}
 
 static const struct nla_policy devconf_ipv4_policy[NETCONFA_MAX+1] = {
 	[NETCONFA_IFINDEX]	= { .len = sizeof(int) },
@@ -1909,6 +2066,7 @@ static int inet_netconf_get_devconf(struct sk_buff *in_skb,
 				    struct nlmsghdr *nlh,
 				    struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(in_skb->sk);
 	struct nlattr *tb[NETCONFA_MAX+1];
 	struct netconfmsg *ncm;
@@ -1970,6 +2128,7 @@ static int inet_netconf_get_devconf(struct sk_buff *in_skb,
 static int inet_netconf_dump_devconf(struct sk_buff *skb,
 				     struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	int h, s_h;
 	int idx, s_idx;
@@ -2052,6 +2211,7 @@ static void devinet_copy_dflt_conf(struct net *net, int i)
 		if (in_dev && !test_bit(i, in_dev->cnf.state))
 			in_dev->cnf.data[i] = net->ipv4.devconf_dflt->data[i];
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -2072,6 +2232,7 @@ static void inet_forward_change(struct net *net)
 				    NETCONFA_IFINDEX_DEFAULT,
 				    net->ipv4.devconf_dflt);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev(net, dev) {
 		struct in_device *in_dev;
 
@@ -2091,9 +2252,13 @@ static void inet_forward_change(struct net *net)
 static int devinet_conf_ifindex(struct net *net, struct ipv4_devconf *cnf)
 {
 	if (cnf == net->ipv4.devconf_dflt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NETCONFA_IFINDEX_DEFAULT;
+}
 	else if (cnf == net->ipv4.devconf_all)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NETCONFA_IFINDEX_ALL;
+}
 	else {
 		struct in_device *idev
 			= container_of(cnf, struct in_device, cnf);
@@ -2122,7 +2287,9 @@ static int devinet_conf_proc(struct ctl_table *ctl, int write,
 		if (i == IPV4_DEVCONF_ACCEPT_LOCAL - 1 ||
 		    i == IPV4_DEVCONF_ROUTE_LOCALNET - 1)
 			if ((new_value == 0) && (old_value != 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rt_cache_flush(net);
+}
 
 		if (i == IPV4_DEVCONF_RP_FILTER - 1 &&
 		    new_value != old_value) {
@@ -2133,6 +2300,7 @@ static int devinet_conf_proc(struct ctl_table *ctl, int write,
 		}
 		if (i == IPV4_DEVCONF_PROXY_ARP - 1 &&
 		    new_value != old_value) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ifindex = devinet_conf_ifindex(net, cnf);
 			inet_netconf_notify_devconf(net, RTM_NEWNETCONF,
 						    NETCONFA_PROXY_NEIGH,
@@ -2140,6 +2308,7 @@ static int devinet_conf_proc(struct ctl_table *ctl, int write,
 		}
 		if (i == IPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN - 1 &&
 		    new_value != old_value) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ifindex = devinet_conf_ifindex(net, cnf);
 			inet_netconf_notify_devconf(net, RTM_NEWNETCONF,
 						    NETCONFA_IGNORE_ROUTES_WITH_LINKDOWN,
@@ -2159,6 +2328,7 @@ static int devinet_sysctl_forward(struct ctl_table *ctl, int write,
 	loff_t pos = *ppos;
 	int ret = proc_dointvec(ctl, write, buffer, lenp, ppos);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (write && *valp != val) {
 		struct net *net = ctl->extra2;
 
@@ -2337,15 +2507,22 @@ static int devinet_sysctl_register(struct in_device *idev)
 	int err;
 
 	if (!sysctl_dev_name_is_allowed(idev->dev->name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	err = neigh_sysctl_register(idev->dev, idev->arp_parms, NULL);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	err = __devinet_sysctl_register(dev_net(idev->dev), idev->dev->name,
 					idev->dev->ifindex, &idev->cnf);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		neigh_sysctl_unregister(idev->arp_parms);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -2386,10 +2563,12 @@ static __net_init int devinet_init_net(struct net *net)
 	dflt = &ipv4_devconf_dflt;
 
 	if (!net_eq(net, &init_net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		all = kmemdup(all, sizeof(ipv4_devconf), GFP_KERNEL);
 		if (!all)
 			goto err_alloc_all;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dflt = kmemdup(dflt, sizeof(ipv4_devconf_dflt), GFP_KERNEL);
 		if (!dflt)
 			goto err_alloc_dflt;
@@ -2415,6 +2594,7 @@ static __net_init int devinet_init_net(struct net *net)
 	if (err < 0)
 		goto err_reg_dflt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENOMEM;
 	forw_hdr = register_net_sysctl(net, "net/ipv4", tbl);
 	if (!forw_hdr)
@@ -2433,14 +2613,20 @@ static __net_init int devinet_init_net(struct net *net)
 	__devinet_sysctl_unregister(net, all, NETCONFA_IFINDEX_ALL);
 err_reg_all:
 	if (tbl != ctl_forward_entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(tbl);
+}
 err_alloc_ctl:
 #endif
 	if (dflt != &ipv4_devconf_dflt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(dflt);
+}
 err_alloc_dflt:
 	if (all != &ipv4_devconf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(all);
+}
 err_alloc_all:
 	return err;
 }
diff --git a/net/ipv4/fib_frontend.c b/net/ipv4/fib_frontend.c
index d728741..ea4cd2f 100644
--- a/net/ipv4/fib_frontend.c
+++ b/net/ipv4/fib_frontend.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -81,17 +83,23 @@ struct fib_table *fib_new_table(struct net *net, u32 id)
 	unsigned int h;
 
 	if (id == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		id = RT_TABLE_MAIN;
+}
 	tb = fib_get_table(net, id);
 	if (tb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return tb;
+}
 
 	if (id == RT_TABLE_LOCAL && !net->ipv4.fib_has_custom_rules)
 		alias = fib_new_table(net, RT_TABLE_MAIN);
 
 	tb = fib_trie_table(id, alias);
 	if (!tb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	switch (id) {
 	case RT_TABLE_MAIN:
@@ -118,14 +126,19 @@ struct fib_table *fib_get_table(struct net *net, u32 id)
 	unsigned int h;
 
 	if (id == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		id = RT_TABLE_MAIN;
+}
 	h = id & (FIB_TABLE_HASHSZ - 1);
 
 	head = &net->ipv4.fib_table_hash[h];
 	hlist_for_each_entry_rcu(tb, head, tb_hlist) {
 		if (tb->tb_id == id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return tb;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 #endif /* CONFIG_IP_MULTIPLE_TABLES */
@@ -157,15 +170,22 @@ int fib_unmerge(struct net *net)
 	/* attempt to fetch local table if it has been allocated */
 	old = fib_get_table(net, RT_TABLE_LOCAL);
 	if (!old)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	new = fib_trie_unmerge(old);
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/* table is already unmerged */
 	if (new == old)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* replace merged table with clean table */
 	fib_replace_table(net, old, new);
@@ -174,7 +194,9 @@ int fib_unmerge(struct net *net)
 	/* attempt to fetch main table if it has been allocated */
 	main_table = fib_get_table(net, RT_TABLE_MAIN);
 	if (!main_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* flush local entries from main table */
 	fib_table_flush_external(main_table);
@@ -214,14 +236,20 @@ static inline unsigned int __inet_dev_addr_type(struct net *net,
 	struct fib_table *table;
 
 	if (ipv4_is_zeronet(addr) || ipv4_is_lbcast(addr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return RTN_BROADCAST;
+}
 	if (ipv4_is_multicast(addr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return RTN_MULTICAST;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 
 	table = fib_get_table(net, tb_id);
 	if (table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = RTN_UNICAST;
 		if (!fib_table_lookup(table, &fl4, &res, FIB_LOOKUP_NOREF)) {
 			if (!dev || dev == res.fi->fib_dev)
@@ -229,6 +257,7 @@ static inline unsigned int __inet_dev_addr_type(struct net *net,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	return ret;
 }
@@ -248,6 +277,7 @@ EXPORT_SYMBOL(inet_addr_type);
 unsigned int inet_dev_addr_type(struct net *net, const struct net_device *dev,
 				__be32 addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 rt_table = l3mdev_fib_table(dev) ? : RT_TABLE_LOCAL;
 
 	return __inet_dev_addr_type(net, dev, addr, rt_table);
@@ -348,6 +378,7 @@ static int __fib_validate_source(struct sk_buff *skb, __be32 src, __be32 dst,
 	if (!rpf && !fib_num_tclassid_users(net) &&
 	    (dev->ifindex != oif || !IN_DEV_TX_REDIRECTS(idev)))
 		goto last_resort;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fib_combine_itag(itag, &res);
 	dev_match = false;
 
@@ -356,9 +387,11 @@ static int __fib_validate_source(struct sk_buff *skb, __be32 src, __be32 dst,
 		struct fib_nh *nh = &res.fi->fib_nh[ret];
 
 		if (nh->nh_dev == dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_match = true;
 			break;
 		} else if (l3mdev_master_ifindex_rcu(nh->nh_dev) == dev->ifindex) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_match = true;
 			break;
 		}
@@ -368,20 +401,28 @@ static int __fib_validate_source(struct sk_buff *skb, __be32 src, __be32 dst,
 		dev_match = true;
 #endif
 	if (dev_match) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = FIB_RES_NH(res).nh_scope >= RT_SCOPE_HOST;
 		return ret;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (no_addr)
 		goto last_resort;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rpf == 1)
 		goto e_rpf;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fl4.flowi4_oif = dev->ifindex;
 
 	ret = 0;
 	if (fib_lookup(net, &fl4, &res, FIB_LOOKUP_IGNORE_LINKSTATE) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (res.type == RTN_UNICAST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = FIB_RES_NH(res).nh_scope >= RT_SCOPE_HOST;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 
 last_resort:
@@ -406,6 +447,7 @@ int fib_validate_source(struct sk_buff *skb, __be32 src, __be32 dst,
 	if (!r && !fib_num_tclassid_users(dev_net(dev)) &&
 	    IN_DEV_ACCEPT_LOCAL(idev) &&
 	    (dev->ifindex != oif || !IN_DEV_TX_REDIRECTS(idev))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*itag = 0;
 		return 0;
 	}
@@ -414,6 +456,7 @@ int fib_validate_source(struct sk_buff *skb, __be32 src, __be32 dst,
 
 static inline __be32 sk_extract_addr(struct sockaddr *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ((struct sockaddr_in *) addr)->sin_addr.s_addr;
 }
 
@@ -439,7 +482,9 @@ static int rtentry_to_fib_config(struct net *net, int cmd, struct rtentry *rt,
 	cfg->fc_nlinfo.nl_net = net;
 
 	if (rt->rt_dst.sa_family != AF_INET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
 	/*
 	 * Check mask for validity:
@@ -640,6 +685,7 @@ static int rtm_to_fib_config(struct net *net, struct sk_buff *skb,
 	if (err < 0)
 		goto errout;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(cfg, 0, sizeof(*cfg));
 
 	rtm = nlmsg_data(nlh);
@@ -657,7 +703,9 @@ static int rtm_to_fib_config(struct net *net, struct sk_buff *skb,
 	cfg->fc_nlinfo.nl_net = net;
 
 	if (cfg->fc_type > RTN_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NL_SET_ERR_MSG(extack, "Invalid route type");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		goto errout;
 	}
@@ -842,7 +890,9 @@ static void fib_magic(int cmd, int type, __be32 dst, int dst_len, struct in_ifad
 
 	tb = fib_new_table(net, tb_id);
 	if (!tb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	cfg.fc_table = tb->tb_id;
 
@@ -867,8 +917,10 @@ void fib_add_ifaddr(struct in_ifaddr *ifa)
 	__be32 prefix = ifa->ifa_address & mask;
 
 	if (ifa->ifa_flags & IFA_F_SECONDARY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prim = inet_ifa_byprefix(in_dev, prefix, mask);
 		if (!prim) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn("%s: bug: prim == NULL\n", __func__);
 			return;
 		}
@@ -877,7 +929,9 @@ void fib_add_ifaddr(struct in_ifaddr *ifa)
 	fib_magic(RTM_NEWROUTE, RTN_LOCAL, addr, 32, prim);
 
 	if (!(dev->flags & IFF_UP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Add broadcast address, if it is explicitly assigned. */
 	if (ifa->ifa_broadcast && ifa->ifa_broadcast != htonl(0xFFFFFFFF))
@@ -922,16 +976,22 @@ void fib_del_ifaddr(struct in_ifaddr *ifa, struct in_ifaddr *iprim)
 	int same_prefsrc = 0;	/* Another primary with same IP */
 
 	if (ifa->ifa_flags & IFA_F_SECONDARY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prim = inet_ifa_byprefix(in_dev, any, ifa->ifa_mask);
 		if (!prim) {
 			/* if the device has been deleted, we don't perform
 			 * address promotion
 			 */
 			if (!in_dev->dead)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pr_warn("%s: bug: prim == NULL\n", __func__);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (iprim && iprim != prim) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn("%s: bug: iprim != prim\n", __func__);
 			return;
 		}
@@ -941,6 +1001,7 @@ void fib_del_ifaddr(struct in_ifaddr *ifa, struct in_ifaddr *iprim)
 			fib_magic(RTM_DELROUTE,
 				  dev->flags & IFF_LOOPBACK ? RTN_LOCAL : RTN_UNICAST,
 				  any, ifa->ifa_prefixlen, prim);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		subnet = 1;
 	}
 
@@ -953,7 +1014,9 @@ void fib_del_ifaddr(struct in_ifaddr *ifa, struct in_ifaddr *iprim)
 	 * Scan address list to be sure that addresses are really gone.
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (ifa1 = in_dev->ifa_list; ifa1; ifa1 = ifa1->ifa_next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ifa1 == ifa) {
 			/* promotion, keep the IP */
 			gone = 0;
@@ -985,39 +1048,64 @@ void fib_del_ifaddr(struct in_ifaddr *ifa, struct in_ifaddr *iprim)
 					prim1 = inet_ifa_byprefix(in_dev,
 							ifa1->ifa_address,
 							ifa1->ifa_mask);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!prim1)
 					continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (prim1->ifa_local != prim->ifa_local)
 					continue;
 			}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (prim->ifa_local != ifa1->ifa_local)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			prim1 = ifa1;
 			if (prim != prim1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				same_prefsrc = 1;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ifa->ifa_local == ifa1->ifa_local)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ok |= LOCAL_OK;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ifa->ifa_broadcast == ifa1->ifa_broadcast)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ok |= BRD_OK;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (brd == ifa1->ifa_broadcast)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ok |= BRD1_OK;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (any == ifa1->ifa_broadcast)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ok |= BRD0_OK;
+}
 		/* primary has network specific broadcasts */
 		if (prim1 == ifa1 && ifa1->ifa_prefixlen < 31) {
 			__be32 brd1 = ifa1->ifa_address | ~ifa1->ifa_mask;
 			__be32 any1 = ifa1->ifa_address & ifa1->ifa_mask;
 
 			if (!ipv4_is_zeronet(any1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (ifa->ifa_broadcast == brd1 ||
 				    ifa->ifa_broadcast == any1)
 					ok |= BRD_OK;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (brd == brd1 || brd == any1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ok |= BRD1_OK;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (any == brd1 || any == any1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ok |= BRD0_OK;
+}
 			}
 		}
 	}
@@ -1047,7 +1135,9 @@ void fib_del_ifaddr(struct in_ifaddr *ifa, struct in_ifaddr *iprim)
 			 * for stray nexthop entries, then ignite fib_flush.
 			 */
 			if (fib_sync_down_addr(dev, ifa->ifa_local))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fib_flush(dev_net(dev));
+}
 		}
 	}
 #undef LOCAL_OK
@@ -1074,6 +1164,7 @@ static void nl_fib_lookup(struct net *net, struct fib_result_nl *frn)
 
 	frn->err = -ENOENT;
 	if (tb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_bh_disable();
 
 		frn->tb_id = tb->tb_id;
@@ -1128,7 +1219,9 @@ static int __net_init nl_fib_lookup_init(struct net *net)
 
 	sk = netlink_kernel_create(net, NETLINK_FIB_LOOKUP, &cfg);
 	if (!sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 	net->ipv4.fibnl = sk;
 	return 0;
 }
@@ -1173,6 +1266,7 @@ static int fib_inetaddr_event(struct notifier_block *this, unsigned long event,
 			 */
 			fib_disable_ip(dev, event, true);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rt_cache_flush(dev_net(dev));
 		}
 		break;
@@ -1182,6 +1276,7 @@ static int fib_inetaddr_event(struct notifier_block *this, unsigned long event,
 
 static int fib_netdev_event(struct notifier_block *this, unsigned long event, void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = netdev_notifier_info_to_dev(ptr);
 	struct netdev_notifier_changeupper_info *info;
 	struct in_device *in_dev;
@@ -1194,9 +1289,12 @@ static int fib_netdev_event(struct notifier_block *this, unsigned long event, vo
 		return NOTIFY_DONE;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	in_dev = __in_dev_get_rtnl(dev);
 	if (!in_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NOTIFY_DONE;
+}
 
 	switch (event) {
 	case NETDEV_UP:
@@ -1228,9 +1326,12 @@ static int fib_netdev_event(struct notifier_block *this, unsigned long event, vo
 		 * an L3 master device (e.g., VRF)
 		 */
 		if (info->upper_dev && netif_is_l3_master(info->upper_dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fib_disable_ip(dev, NETDEV_DOWN, true);
+}
 		break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NOTIFY_DONE;
 }
 
@@ -1249,13 +1350,16 @@ static int __net_init ip_fib_net_init(struct net *net)
 
 	err = fib4_notifier_init(net);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/* Avoid false sharing : Use at least a full cache line */
 	size = max_t(size_t, size, L1_CACHE_BYTES);
 
 	net->ipv4.fib_table_hash = kzalloc(size, GFP_KERNEL);
 	if (!net->ipv4.fib_table_hash) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOMEM;
 		goto err_table_hash_alloc;
 	}
@@ -1263,6 +1367,7 @@ static int __net_init ip_fib_net_init(struct net *net)
 	err = fib4_rules_init(net);
 	if (err < 0)
 		goto err_rules_init;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_rules_init:
@@ -1279,6 +1384,7 @@ static void ip_fib_net_exit(struct net *net)
 	rtnl_lock();
 #ifdef CONFIG_IP_MULTIPLE_TABLES
 	RCU_INIT_POINTER(net->ipv4.fib_main, NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(net->ipv4.fib_default, NULL);
 #endif
 	/* Destroy the tables in reverse order to guarantee that the
diff --git a/net/ipv4/fib_lookup.h b/net/ipv4/fib_lookup.h
index e6ff282..d0c248a 100644
--- a/net/ipv4/fib_lookup.h
+++ b/net/ipv4/fib_lookup.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SPDX-License-Identifier: GPL-2.0 */
 #ifndef _FIB_LOOKUP_H
 #define _FIB_LOOKUP_H
diff --git a/net/ipv4/fib_notifier.c b/net/ipv4/fib_notifier.c
index b804ccb..07ee4ae 100644
--- a/net/ipv4/fib_notifier.c
+++ b/net/ipv4/fib_notifier.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/rtnetlink.h>
 #include <linux/notifier.h>
@@ -13,6 +15,7 @@ int call_fib4_notifier(struct notifier_block *nb, struct net *net,
 		       enum fib_event_type event_type,
 		       struct fib_notifier_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	info->family = AF_INET;
 	return call_fib_notifier(nb, net, event_type, info);
 }
@@ -29,6 +32,7 @@ int call_fib4_notifiers(struct net *net, enum fib_event_type event_type,
 
 static unsigned int fib4_seq_read(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	return net->ipv4.fib_seq + fib4_rules_seq_read(net);
@@ -40,7 +44,9 @@ static int fib4_dump(struct net *net, struct notifier_block *nb)
 
 	err = fib4_rules_dump(net, nb);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	fib_notify(net, nb);
 
@@ -62,7 +68,9 @@ int __net_init fib4_notifier_init(struct net *net)
 
 	ops = fib_notifier_ops_register(&fib4_notifier_ops_template, net);
 	if (IS_ERR(ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(ops);
+}
 	net->ipv4.notifier_ops = ops;
 
 	return 0;
diff --git a/net/ipv4/fib_rules.c b/net/ipv4/fib_rules.c
index 35d646a..7791a27 100644
--- a/net/ipv4/fib_rules.c
+++ b/net/ipv4/fib_rules.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -49,6 +51,7 @@ struct fib4_rule {
 
 static bool fib4_rule_matchall(const struct fib_rule *rule)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fib4_rule *r = container_of(rule, struct fib4_rule, common);
 
 	if (r->dst_len || r->src_len || r->tos)
@@ -58,6 +61,7 @@ static bool fib4_rule_matchall(const struct fib_rule *rule)
 
 bool fib4_rule_default(const struct fib_rule *rule)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!fib4_rule_matchall(rule) || rule->action != FR_ACT_TO_TBL ||
 	    rule->l3mdev)
 		return false;
@@ -70,11 +74,13 @@ EXPORT_SYMBOL_GPL(fib4_rule_default);
 
 int fib4_rules_dump(struct net *net, struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fib_rules_dump(net, nb, AF_INET);
 }
 
 unsigned int fib4_rules_seq_read(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fib_rules_seq_read(net, AF_INET);
 }
 
@@ -99,7 +105,9 @@ int __fib_lookup(struct net *net, struct flowi4 *flp,
 #endif
 
 	if (err == -ESRCH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENETUNREACH;
+}
 
 	return err;
 }
@@ -146,7 +154,9 @@ static bool fib4_rule_suppress(struct fib_rule *rule, struct fib_lookup_arg *arg
 	struct net_device *dev = NULL;
 
 	if (result->fi)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev = result->fi->fib_dev;
+}
 
 	/* do not accept result if the route does
 	 * not meet the required prefix length
@@ -189,6 +199,7 @@ static struct fib_table *fib_empty_table(struct net *net)
 {
 	u32 id;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (id = 1; id <= RT_TABLE_MAX; id++)
 		if (!fib_get_table(net, id))
 			return fib_new_table(net, id);
@@ -204,6 +215,7 @@ static int fib4_rule_configure(struct fib_rule *rule, struct sk_buff *skb,
 			       struct fib_rule_hdr *frh,
 			       struct nlattr **tb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	int err = -EINVAL;
 	struct fib4_rule *rule4 = (struct fib4_rule *) rule;
@@ -281,6 +293,7 @@ static int fib4_rule_compare(struct fib_rule *rule, struct fib_rule_hdr *frh,
 {
 	struct fib4_rule *rule4 = (struct fib4_rule *) rule;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (frh->src_len && (rule4->src_len != frh->src_len))
 		return 0;
 
@@ -331,6 +344,7 @@ static int fib4_rule_fill(struct fib_rule *rule, struct sk_buff *skb,
 
 static size_t fib4_rule_nlmsg_payload(struct fib_rule *rule)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nla_total_size(4) /* dst */
 	       + nla_total_size(4) /* src */
 	       + nla_total_size(4); /* flow */
@@ -338,6 +352,7 @@ static size_t fib4_rule_nlmsg_payload(struct fib_rule *rule)
 
 static void fib4_rule_flush_cache(struct fib_rules_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rt_cache_flush(ops->fro_net);
 }
 
@@ -365,13 +380,19 @@ static int fib_default_rules_init(struct fib_rules_ops *ops)
 
 	err = fib_default_rule_add(ops, 0, RT_TABLE_LOCAL, 0);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	err = fib_default_rule_add(ops, 0x7FFE, RT_TABLE_MAIN, 0);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	err = fib_default_rule_add(ops, 0x7FFF, RT_TABLE_DEFAULT, 0);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	return 0;
 }
 
@@ -382,7 +403,9 @@ int __net_init fib4_rules_init(struct net *net)
 
 	ops = fib_rules_register(&fib4_rules_ops_template, net);
 	if (IS_ERR(ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(ops);
+}
 
 	err = fib_default_rules_init(ops);
 	if (err < 0)
diff --git a/net/ipv4/fib_semantics.c b/net/ipv4/fib_semantics.c
index aff3751..522dd44 100644
--- a/net/ipv4/fib_semantics.c
+++ b/net/ipv4/fib_semantics.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -146,13 +148,16 @@ static void rt_fibinfo_free(struct rtable __rcu **rtp)
 	struct rtable *rt = rcu_dereference_protected(*rtp, 1);
 
 	if (!rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Not even needed : RCU_INIT_POINTER(*rtp, NULL);
 	 * because we waited an RCU grace period before calling
 	 * free_fib_info_rcu()
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dst_dev_put(&rt->dst);
 	dst_release_immediate(&rt->dst);
 }
@@ -164,11 +169,16 @@ static void free_nh_exceptions(struct fib_nh *nh)
 
 	hash = rcu_dereference_protected(nh->nh_exceptions, 1);
 	if (!hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < FNHE_HASH_SIZE; i++) {
 		struct fib_nh_exception *fnhe;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fnhe = rcu_dereference_protected(hash[i].chain, 1);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (fnhe) {
 			struct fib_nh_exception *next;
 			
@@ -182,6 +192,7 @@ static void free_nh_exceptions(struct fib_nh *nh)
 			fnhe = next;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(hash);
 }
 
@@ -190,13 +201,16 @@ static void rt_fibinfo_free_cpus(struct rtable __rcu * __percpu *rtp)
 	int cpu;
 
 	if (!rtp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for_each_possible_cpu(cpu) {
 		struct rtable *rt;
 
 		rt = rcu_dereference_protected(*per_cpu_ptr(rtp, cpu), 1);
 		if (rt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dst_dev_put(&rt->dst);
 			dst_release_immediate(&rt->dst);
 		}
@@ -212,7 +226,9 @@ static void free_fib_info_rcu(struct rcu_head *head)
 
 	change_nexthops(fi) {
 		if (nexthop_nh->nh_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_put(nexthop_nh->nh_dev);
+}
 		lwtstate_put(nexthop_nh->nh_lwtstate);
 		free_nh_exceptions(nexthop_nh);
 		rt_fibinfo_free_cpus(nexthop_nh->nh_pcpu_rth_output);
@@ -221,13 +237,16 @@ static void free_fib_info_rcu(struct rcu_head *head)
 
 	m = fi->fib_metrics;
 	if (m != &dst_default_metrics && refcount_dec_and_test(&m->refcnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(m);
+}
 	kfree(fi);
 }
 
 void free_fib_info(struct fib_info *fi)
 {
 	if (fi->fib_dead == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("Freeing alive fib_info %p\n", fi);
 		return;
 	}
@@ -244,6 +263,7 @@ EXPORT_SYMBOL_GPL(free_fib_info);
 
 void fib_release_info(struct fib_info *fi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&fib_info_lock);
 	if (fi && --fi->fib_treeref == 0) {
 		hlist_del(&fi->fib_hash);
@@ -257,6 +277,7 @@ void fib_release_info(struct fib_info *fi)
 		fi->fib_dead = 1;
 		fib_info_put(fi);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&fib_info_lock);
 }
 
@@ -279,6 +300,7 @@ static inline int nh_comp(const struct fib_info *fi, const struct fib_info *ofi)
 			return -1;
 		onh++;
 	} endfor_nexthops(fi);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -332,6 +354,7 @@ static struct fib_info *fib_find_info(const struct fib_info *nfi)
 			return fi;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -348,6 +371,7 @@ int ip_fib_check_default(__be32 gw, struct net_device *dev)
 
 	hash = fib_devindex_hashfn(dev->ifindex);
 	head = &fib_info_devhash[hash];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry(nh, head, nh_hash) {
 		if (nh->nh_dev == dev &&
 		    nh->nh_gw == gw &&
@@ -430,8 +454,10 @@ void rtmsg_fib(int event, __be32 key, struct fib_alias *fa,
 	return;
 errout:
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtnl_set_sk_err(info->nl_net, RTNLGRP_IPV4_ROUTE, err);
 }
+}
 
 static int fib_detect_death(struct fib_info *fi, int order,
 			    struct fib_info **last_resort, int *last_idx,
@@ -442,6 +468,7 @@ static int fib_detect_death(struct fib_info *fi, int order,
 
 	n = neigh_lookup(&arp_tbl, &fi->fib_nh[0].nh_gw, fi->fib_dev);
 	if (n) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		state = n->nud_state;
 		neigh_release(n);
 	} else {
@@ -466,6 +493,7 @@ static int fib_count_nexthops(struct rtnexthop *rtnh, int remaining,
 {
 	int nhs = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (rtnh_ok(rtnh, remaining)) {
 		nhs++;
 		rtnh = rtnh_next(rtnh, &remaining);
@@ -487,6 +515,7 @@ static int fib_get_nhs(struct fib_info *fi, struct rtnexthop *rtnh,
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	change_nexthops(fi) {
 		int attrlen;
 
@@ -563,13 +592,19 @@ static void fib_rebalance(struct fib_info *fi)
 	struct in_device *in_dev;
 
 	if (fi->fib_nhs < 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	total = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_nexthops(fi) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (nh->nh_flags & RTNH_F_DEAD)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		in_dev = __in_dev_get_rtnl(nh->nh_dev);
 
 		if (in_dev &&
@@ -577,27 +612,34 @@ static void fib_rebalance(struct fib_info *fi)
 		    nh->nh_flags & RTNH_F_LINKDOWN)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		total += nh->nh_weight;
 	} endfor_nexthops(fi);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	w = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	change_nexthops(fi) {
 		int upper_bound;
 
 		in_dev = __in_dev_get_rtnl(nexthop_nh->nh_dev);
 
 		if (nexthop_nh->nh_flags & RTNH_F_DEAD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			upper_bound = -1;
 		} else if (in_dev &&
 			   IN_DEV_IGNORE_ROUTES_WITH_LINKDOWN(in_dev) &&
 			   nexthop_nh->nh_flags & RTNH_F_LINKDOWN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			upper_bound = -1;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			w += nexthop_nh->nh_weight;
 			upper_bound = DIV_ROUND_CLOSEST_ULL((u64)w << 31,
 							    total) - 1;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_set(&nexthop_nh->nh_upper_bound, upper_bound);
 	} endfor_nexthops(fi);
 }
@@ -625,7 +667,9 @@ static int fib_encap_match(u16 encap_type,
 	int ret, result = 0;
 
 	if (encap_type == LWTUNNEL_ENCAP_NONE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = lwtunnel_build_state(encap_type, encap, AF_INET,
 				   cfg, &lwtstate, extack);
@@ -646,10 +690,13 @@ int fib_nh_match(struct fib_config *cfg, struct fib_info *fi,
 #endif
 
 	if (cfg->fc_priority && cfg->fc_priority != fi->fib_priority)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	if (cfg->fc_oif || cfg->fc_gw) {
 		if (cfg->fc_encap) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (fib_encap_match(cfg->fc_encap_type, cfg->fc_encap,
 					    fi->fib_nh, cfg, extack))
 				return 1;
@@ -657,32 +704,46 @@ int fib_nh_match(struct fib_config *cfg, struct fib_info *fi,
 		if ((!cfg->fc_oif || cfg->fc_oif == fi->fib_nh->nh_oif) &&
 		    (!cfg->fc_gw  || cfg->fc_gw == fi->fib_nh->nh_gw))
 			return 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
 	}
 
 #ifdef CONFIG_IP_ROUTE_MULTIPATH
 	if (!cfg->fc_mp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtnh = cfg->fc_mp;
 	remaining = cfg->fc_mp_len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_nexthops(fi) {
 		int attrlen;
 
 		if (!rtnh_ok(rtnh, remaining))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rtnh->rtnh_ifindex && rtnh->rtnh_ifindex != nh->nh_oif)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		attrlen = rtnh_attrlen(rtnh);
 		if (attrlen > 0) {
 			struct nlattr *nla, *attrs = rtnh_attrs(rtnh);
 
 			nla = nla_find(attrs, attrlen, RTA_GATEWAY);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (nla && nla_get_in_addr(nla) != nh->nh_gw)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 1;
+}
 #ifdef CONFIG_IP_ROUTE_CLASSID
 			nla = nla_find(attrs, attrlen, RTA_FLOW);
 			if (nla && nla_get_u32(nla) != nh->nh_tclassid)
@@ -690,6 +751,7 @@ int fib_nh_match(struct fib_config *cfg, struct fib_info *fi,
 #endif
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtnh = rtnh_next(rtnh, &remaining);
 	} endfor_nexthops(fi);
 #endif
@@ -702,17 +764,25 @@ bool fib_metrics_match(struct fib_config *cfg, struct fib_info *fi)
 	int remaining;
 
 	if (!cfg->fc_mx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nla_for_each_attr(nla, cfg->fc_mx, cfg->fc_mx_len, remaining) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int type = nla_type(nla);
 		u32 fi_val, val;
 
 		if (!type)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (type > RTAX_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (type == RTAX_CC_ALGO) {
 			char tmp[TCP_CA_NAME_MAX];
 			bool ecn_ca = false;
@@ -720,17 +790,25 @@ bool fib_metrics_match(struct fib_config *cfg, struct fib_info *fi)
 			nla_strlcpy(tmp, nla, sizeof(tmp));
 			val = tcp_ca_get_key_by_name(tmp, &ecn_ca);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = nla_get_u32(nla);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fi_val = fi->fib_metrics->metrics[type - 1];
 		if (type == RTAX_FEATURES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fi_val &= ~DST_FEATURE_ECN_CA;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fi_val != val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 
@@ -793,31 +871,47 @@ static int fib_check_nh(struct fib_config *cfg, struct fib_info *fi,
 			unsigned int addr_type;
 
 			if (cfg->fc_scope >= RT_SCOPE_LINK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				NL_SET_ERR_MSG(extack,
 					       "Nexthop has invalid scope");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev = __dev_get_by_index(net, nh->nh_oif);
 			if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -ENODEV;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!(dev->flags & IFF_UP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				NL_SET_ERR_MSG(extack,
 					       "Nexthop device is not up");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -ENETDOWN;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			addr_type = inet_addr_type_dev_table(net, dev, nh->nh_gw);
 			if (addr_type != RTN_UNICAST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				NL_SET_ERR_MSG(extack,
 					       "Nexthop has invalid gateway");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!netif_carrier_ok(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				nh->nh_flags |= RTNH_F_LINKDOWN;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nh->nh_dev = dev;
 			dev_hold(dev);
 			nh->nh_scope = RT_SCOPE_LINK;
 			return 0;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock();
 		{
 			struct fib_table *tbl = NULL;
@@ -845,19 +939,24 @@ static int fib_check_nh(struct fib_config *cfg, struct fib_info *fi,
 			 * table rather than the given table
 			 */
 			if (!tbl || err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = fib_lookup(net, &fl4, &res,
 						 FIB_LOOKUP_IGNORE_LINKSTATE);
 			}
 
 			if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				NL_SET_ERR_MSG(extack,
 					       "Nexthop has invalid gateway");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rcu_read_unlock();
 				return err;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		if (res.type != RTN_UNICAST && res.type != RTN_LOCAL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack, "Nexthop has invalid gateway");
 			goto out;
 		}
@@ -865,29 +964,38 @@ static int fib_check_nh(struct fib_config *cfg, struct fib_info *fi,
 		nh->nh_oif = FIB_RES_OIF(res);
 		nh->nh_dev = dev = FIB_RES_DEV(res);
 		if (!dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack,
 				       "No egress device for nexthop gateway");
 			goto out;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_hold(dev);
 		if (!netif_carrier_ok(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nh->nh_flags |= RTNH_F_LINKDOWN;
+}
 		err = (dev->flags & IFF_UP) ? 0 : -ENETDOWN;
 	} else {
 		struct in_device *in_dev;
 
 		if (nh->nh_flags & (RTNH_F_PERVASIVE | RTNH_F_ONLINK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack,
 				       "Invalid flags for nexthop - PERVASIVE and ONLINK can not be set");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock();
 		err = -ENODEV;
 		in_dev = inetdev_by_index(net, nh->nh_oif);
 		if (!in_dev)
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENETDOWN;
 		if (!(in_dev->dev->flags & IFF_UP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack, "Device for nexthop is not up");
 			goto out;
 		}
@@ -895,7 +1003,10 @@ static int fib_check_nh(struct fib_config *cfg, struct fib_info *fi,
 		dev_hold(nh->nh_dev);
 		nh->nh_scope = RT_SCOPE_HOST;
 		if (!netif_carrier_ok(nh->nh_dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nh->nh_flags |= RTNH_F_LINKDOWN;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 	}
 out:
@@ -925,10 +1036,15 @@ static struct hlist_head *fib_info_hash_alloc(int bytes)
 static void fib_info_hash_free(struct hlist_head *hash, int bytes)
 {
 	if (!hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (bytes <= PAGE_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(hash);
+}
 	else
 		free_pages((unsigned long) hash, get_order(bytes));
 }
@@ -951,6 +1067,7 @@ static void fib_info_hash_move(struct hlist_head *new_info_hash,
 		struct hlist_node *n;
 		struct fib_info *fi;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hlist_for_each_entry_safe(fi, n, head, fib_hash) {
 			struct hlist_head *dest;
 			unsigned int new_hash;
@@ -967,6 +1084,7 @@ static void fib_info_hash_move(struct hlist_head *new_info_hash,
 		struct hlist_node *n;
 		struct fib_info *fi;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hlist_for_each_entry_safe(fi, n, lhead, fib_lhash) {
 			struct hlist_head *ldest;
 			unsigned int new_hash;
@@ -1003,19 +1121,25 @@ static bool fib_valid_prefsrc(struct fib_config *cfg, __be32 fib_prefsrc)
 		int rc;
 
 		if (tb_id == RT_TABLE_MAIN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tb_id = RT_TABLE_LOCAL;
+}
 
 		rc = inet_addr_type_table(cfg->fc_nlinfo.nl_net,
 					  fib_prefsrc, tb_id);
 
 		if (rc != RTN_LOCAL && tb_id != RT_TABLE_LOCAL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rc = inet_addr_type_table(cfg->fc_nlinfo.nl_net,
 						  fib_prefsrc, RT_TABLE_LOCAL);
 		}
 
 		if (rc != RTN_LOCAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 
@@ -1027,41 +1151,69 @@ fib_convert_metrics(struct fib_info *fi, const struct fib_config *cfg)
 	int remaining;
 
 	if (!cfg->fc_mx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nla_for_each_attr(nla, cfg->fc_mx, cfg->fc_mx_len, remaining) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int type = nla_type(nla);
 		u32 val;
 
 		if (!type)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (type > RTAX_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (type == RTAX_CC_ALGO) {
 			char tmp[TCP_CA_NAME_MAX];
 
 			nla_strlcpy(tmp, nla, sizeof(tmp));
 			val = tcp_ca_get_key_by_name(tmp, &ecn_ca);
 			if (val == TCP_CA_UNSPEC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = nla_get_u32(nla);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (type == RTAX_ADVMSS && val > 65535 - 40)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = 65535 - 40;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (type == RTAX_MTU && val > 65535 - 15)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = 65535 - 15;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (type == RTAX_HOPLIMIT && val > 255)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = 255;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (type == RTAX_FEATURES && (val & ~RTAX_FEATURE_MASK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fi->fib_metrics->metrics[type - 1] = val;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ecn_ca)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fi->fib_metrics->metrics[RTAX_FEATURES - 1] |= DST_FEATURE_ECN_CA;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1079,11 +1231,13 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 
 	/* Fast check to catch the most weird cases */
 	if (fib_props[cfg->fc_type].scope > cfg->fc_scope) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NL_SET_ERR_MSG(extack, "Invalid scope");
 		goto err_inval;
 	}
 
 	if (cfg->fc_flags & (RTNH_F_DEAD | RTNH_F_LINKDOWN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NL_SET_ERR_MSG(extack,
 			       "Invalid rtm_flags - can not contain DEAD or LINKDOWN");
 		goto err_inval;
@@ -1091,12 +1245,14 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 
 #ifdef CONFIG_IP_ROUTE_MULTIPATH
 	if (cfg->fc_mp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nhs = fib_count_nexthops(cfg->fc_mp, cfg->fc_mp_len, extack);
 		if (nhs == 0)
 			goto err_inval;
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENOBUFS;
 	if (fib_info_cnt >= fib_info_hash_size) {
 		unsigned int new_size = fib_info_hash_size << 1;
@@ -1105,11 +1261,14 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 		unsigned int bytes;
 
 		if (!new_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			new_size = 16;
+}
 		bytes = new_size * sizeof(struct hlist_head *);
 		new_info_hash = fib_info_hash_alloc(bytes);
 		new_laddrhash = fib_info_hash_alloc(bytes);
 		if (!new_info_hash || !new_laddrhash) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fib_info_hash_free(new_info_hash, bytes);
 			fib_info_hash_free(new_laddrhash, bytes);
 		} else
@@ -1123,11 +1282,14 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 	if (!fi)
 		goto failure;
 	if (cfg->fc_mx) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fi->fib_metrics = kzalloc(sizeof(*fi->fib_metrics), GFP_KERNEL);
 		if (unlikely(!fi->fib_metrics)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(fi);
 			return ERR_PTR(err);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		refcount_set(&fi->fib_metrics->refcnt, 1);
 	} else {
 		fi->fib_metrics = (struct dst_metrics *)&dst_default_metrics;
@@ -1159,12 +1321,16 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 		err = fib_get_nhs(fi, cfg->fc_mp, cfg->fc_mp_len, cfg, extack);
 		if (err != 0)
 			goto failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cfg->fc_oif && fi->fib_nh->nh_oif != cfg->fc_oif) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack,
 				       "Nexthop device index does not match RTA_OIF");
 			goto err_inval;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cfg->fc_gw && fi->fib_nh->nh_gw != cfg->fc_gw) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack,
 				       "Nexthop gateway does not match RTA_GATEWAY");
 			goto err_inval;
@@ -1188,16 +1354,19 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 			struct lwtunnel_state *lwtstate;
 
 			if (cfg->fc_encap_type == LWTUNNEL_ENCAP_NONE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				NL_SET_ERR_MSG(extack,
 					       "LWT encap type not specified");
 				goto err_inval;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = lwtunnel_build_state(cfg->fc_encap_type,
 						   cfg->fc_encap, AF_INET, cfg,
 						   &lwtstate, extack);
 			if (err)
 				goto failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nh->nh_lwtstate = lwtstate_get(lwtstate);
 		}
 		nh->nh_oif = cfg->fc_oif;
@@ -1214,7 +1383,9 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 	}
 
 	if (fib_props[cfg->fc_type].error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cfg->fc_gw || cfg->fc_oif || cfg->fc_mp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack,
 				       "Gateway, device and multipath can not be specified for this route type");
 			goto err_inval;
@@ -1235,6 +1406,7 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 	}
 
 	if (cfg->fc_scope > RT_SCOPE_HOST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NL_SET_ERR_MSG(extack, "Invalid scope");
 		goto err_inval;
 	}
@@ -1244,11 +1416,13 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 
 		/* Local address is added. */
 		if (nhs != 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack,
 				       "Route with host scope can not have multiple nexthops");
 			goto err_inval;
 		}
 		if (nh->nh_gw) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack,
 				       "Route with host scope can not have a gateway");
 			goto err_inval;
@@ -1266,13 +1440,18 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 			if (err != 0)
 				goto failure;
 			if (nexthop_nh->nh_flags & RTNH_F_LINKDOWN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				linkdown++;
+}
 		} endfor_nexthops(fi)
 		if (linkdown == fi->fib_nhs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fi->fib_flags |= RTNH_F_LINKDOWN;
+}
 	}
 
 	if (fi->fib_prefsrc && !fib_valid_prefsrc(cfg, fi->fib_prefsrc)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NL_SET_ERR_MSG(extack, "Invalid prefsrc address");
 		goto err_inval;
 	}
@@ -1314,6 +1493,7 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 		head = &fib_info_devhash[hash];
 		hlist_add_head(&nexthop_nh->nh_hash, head);
 	} endfor_nexthops(fi)
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&fib_info_lock);
 	return fi;
 
@@ -1322,10 +1502,12 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 
 failure:
 	if (fi) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fi->fib_dead = 1;
 		free_fib_info(fi);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(err);
 }
 
@@ -1338,8 +1520,11 @@ int fib_dump_info(struct sk_buff *skb, u32 portid, u32 seq, int event,
 
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(*rtm), flags);
 	if (!nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtm = nlmsg_data(nlh);
 	rtm->rtm_family = AF_INET;
 	rtm->rtm_dst_len = dst_len;
@@ -1383,10 +1568,13 @@ int fib_dump_info(struct sk_buff *skb, u32 portid, u32 seq, int event,
 			if (in_dev &&
 			    IN_DEV_IGNORE_ROUTES_WITH_LINKDOWN(in_dev))
 				rtm->rtm_flags |= RTNH_F_DEAD;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock();
 		}
 		if (fi->fib_nh->nh_flags & RTNH_F_OFFLOAD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rtm->rtm_flags |= RTNH_F_OFFLOAD;
+}
 #ifdef CONFIG_IP_ROUTE_CLASSID
 		if (fi->fib_nh[0].nh_tclassid &&
 		    nla_put_u32(skb, RTA_FLOW, fi->fib_nh[0].nh_tclassid))
@@ -1405,11 +1593,14 @@ int fib_dump_info(struct sk_buff *skb, u32 portid, u32 seq, int event,
 		if (!mp)
 			goto nla_put_failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_nexthops(fi) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rtnh = nla_reserve_nohdr(skb, sizeof(*rtnh));
 			if (!rtnh)
 				goto nla_put_failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rtnh->rtnh_flags = nh->nh_flags & 0xFF;
 			if (nh->nh_flags & RTNH_F_LINKDOWN) {
 				struct in_device *in_dev;
@@ -1419,8 +1610,10 @@ int fib_dump_info(struct sk_buff *skb, u32 portid, u32 seq, int event,
 				if (in_dev &&
 				    IN_DEV_IGNORE_ROUTES_WITH_LINKDOWN(in_dev))
 					rtnh->rtnh_flags |= RTNH_F_DEAD;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rcu_read_unlock();
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rtnh->rtnh_hops = nh->nh_weight - 1;
 			rtnh->rtnh_ifindex = nh->nh_oif;
 
@@ -1440,6 +1633,7 @@ int fib_dump_info(struct sk_buff *skb, u32 portid, u32 seq, int event,
 			rtnh->rtnh_len = nlmsg_get_pos(skb) - (void *) rtnh;
 		} endfor_nexthops(fi);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nla_nest_end(skb, mp);
 	}
 #endif
@@ -1467,17 +1661,22 @@ int fib_sync_down_addr(struct net_device *dev, __be32 local)
 	struct fib_info *fi;
 
 	if (!fib_info_laddrhash || local == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	hlist_for_each_entry(fi, head, fib_lhash) {
 		if (!net_eq(fi->fib_net, net) ||
 		    fi->fib_tb_id != tb_id)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fi->fib_prefsrc == local) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fi->fib_flags |= RTNH_F_DEAD;
 			ret++;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -1493,9 +1692,11 @@ static int call_fib_nh_notifiers(struct fib_nh *fib_nh,
 	case FIB_EVENT_NH_ADD:
 		if (fib_nh->nh_flags & RTNH_F_DEAD)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (IN_DEV_IGNORE_ROUTES_WITH_LINKDOWN(in_dev) &&
 		    fib_nh->nh_flags & RTNH_F_LINKDOWN)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return call_fib4_notifiers(dev_net(fib_nh->nh_dev), event_type,
 					   &info.info);
 	case FIB_EVENT_NH_DEL:
@@ -1508,6 +1709,7 @@ static int call_fib_nh_notifiers(struct fib_nh *fib_nh,
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NOTIFY_DONE;
 }
 
@@ -1527,7 +1729,9 @@ int fib_sync_down_dev(struct net_device *dev, unsigned long event, bool force)
 	struct fib_nh *nh;
 
 	if (force)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scope = -1;
+}
 
 	hlist_for_each_entry(nh, head, nh_hash) {
 		struct fib_info *fi = nh->nh_parent;
@@ -1536,11 +1740,14 @@ int fib_sync_down_dev(struct net_device *dev, unsigned long event, bool force)
 		BUG_ON(!fi->fib_nhs);
 		if (nh->nh_dev != dev || fi == prev_fi)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prev_fi = fi;
 		dead = 0;
 		change_nexthops(fi) {
 			if (nexthop_nh->nh_flags & RTNH_F_DEAD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dead++;
+}
 			else if (nexthop_nh->nh_dev == dev &&
 				 nexthop_nh->nh_scope != scope) {
 				switch (event) {
@@ -1559,6 +1766,7 @@ int fib_sync_down_dev(struct net_device *dev, unsigned long event, bool force)
 #ifdef CONFIG_IP_ROUTE_MULTIPATH
 			if (event == NETDEV_UNREGISTER &&
 			    nexthop_nh->nh_dev == dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dead = fi->fib_nhs;
 				break;
 			}
@@ -1595,6 +1803,7 @@ static void fib_select_default(const struct flowi4 *flp, struct fib_result *res)
 	u32 last_prio = res->fi->fib_priority;
 	u8 last_tos = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry_rcu(fa, fa_head, fa_list) {
 		struct fib_info *next_fi = fa->fa_info;
 
@@ -1671,7 +1880,9 @@ int fib_sync_up(struct net_device *dev, unsigned int nh_flags)
 	int ret;
 
 	if (!(dev->flags & IFF_UP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (nh_flags & RTNH_F_DEAD) {
 		unsigned int flags = dev_get_flags(dev);
@@ -1680,6 +1891,7 @@ int fib_sync_up(struct net_device *dev, unsigned int nh_flags)
 			nh_flags |= RTNH_F_LINKDOWN;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	prev_fi = NULL;
 	hash = fib_devindex_hashfn(dev->ifindex);
 	head = &fib_info_devhash[hash];
@@ -1693,6 +1905,7 @@ int fib_sync_up(struct net_device *dev, unsigned int nh_flags)
 		if (nh->nh_dev != dev || fi == prev_fi)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prev_fi = fi;
 		alive = 0;
 		change_nexthops(fi) {
@@ -1700,12 +1913,15 @@ int fib_sync_up(struct net_device *dev, unsigned int nh_flags)
 				alive++;
 				continue;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!nexthop_nh->nh_dev ||
 			    !(nexthop_nh->nh_dev->flags & IFF_UP))
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (nexthop_nh->nh_dev != dev ||
 			    !__in_dev_get_rtnl(dev))
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			alive++;
 			nexthop_nh->nh_flags &= ~nh_flags;
 			call_fib_nh_notifiers(nexthop_nh, FIB_EVENT_NH_ADD);
@@ -1719,6 +1935,7 @@ int fib_sync_up(struct net_device *dev, unsigned int nh_flags)
 		fib_rebalance(fi);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -1735,7 +1952,9 @@ static bool fib_good_nh(const struct fib_nh *nh)
 		n = __ipv4_neigh_lookup_noref(nh->nh_dev,
 					      (__force u32)nh->nh_gw);
 		if (n)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			state = n->nud_state;
+}
 
 		rcu_read_unlock_bh();
 	}
@@ -1749,6 +1968,7 @@ void fib_select_multipath(struct fib_result *res, int hash)
 	struct net *net = fi->fib_net;
 	bool first = false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_nexthops(fi) {
 		if (hash > atomic_read(&nh->nh_upper_bound))
 			continue;
@@ -1776,6 +1996,7 @@ void fib_select_path(struct net *net, struct fib_result *res,
 
 #ifdef CONFIG_IP_ROUTE_MULTIPATH
 	if (res->fi->fib_nhs > 1 && oif_check) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int h = fib_multipath_hash(res->fi, fl4, skb);
 
 		fib_select_multipath(res, h);
diff --git a/net/ipv4/fib_trie.c b/net/ipv4/fib_trie.c
index c636650..b3b022a 100644
--- a/net/ipv4/fib_trie.c
+++ b/net/ipv4/fib_trie.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *   This program is free software; you can redistribute it and/or
  *   modify it under the terms of the GNU General Public License
@@ -196,6 +198,7 @@ static struct kmem_cache *trie_leaf_kmem __read_mostly;
 
 static inline struct tnode *tn_info(struct key_vector *kv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return container_of(kv, struct tnode, kv[0]);
 }
 
@@ -230,8 +233,11 @@ static inline unsigned long get_index(t_key key, struct key_vector *kv)
 {
 	unsigned long index = key ^ kv->key;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((BITS_PER_LONG <= KEYLENGTH) && (KEYLENGTH == kv->pos))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return index >> kv->pos;
 }
@@ -318,6 +324,7 @@ static inline void alias_free_mem_rcu(struct fib_alias *fa)
 
 static void __node_free_rcu(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tnode *n = container_of(head, struct tnode, rcu);
 
 	if (!n->tn_bits)
@@ -334,7 +341,9 @@ static struct tnode *tnode_alloc(int bits)
 
 	/* verify bits is within bounds */
 	if (bits > TNODE_VMALLOC_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/* determine size and verify it is non-zero and didn't overflow */
 	size = TNODE_SIZE(1ul << bits);
@@ -362,7 +371,9 @@ static struct key_vector *leaf_new(t_key key, struct fib_alias *fa)
 
 	kv = kmem_cache_alloc(trie_leaf_kmem, GFP_KERNEL);
 	if (!kv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/* initialize key vector */
 	l = kv->kv;
@@ -389,13 +400,18 @@ static struct key_vector *tnode_new(t_key key, int pos, int bits)
 
 	tnode = tnode_alloc(bits);
 	if (!tnode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("AT %p s=%zu %zu\n", tnode, TNODE_SIZE(0),
 		 sizeof(struct key_vector *) << bits);
 
 	if (bits == KEYLENGTH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tnode->full_children = 1;
+}
 	else
 		tnode->empty_children = 1ul << bits;
 
@@ -438,9 +454,13 @@ static void put_child(struct key_vector *tn, unsigned long i,
 	isfull = tnode_full(tn, n);
 
 	if (wasfull && !isfull)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tn_info(tn)->full_children--;
+}
 	else if (!wasfull && isfull)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tn_info(tn)->full_children++;
+}
 
 	if (n && (tn->slen < n->slen))
 		tn->slen = n->slen;
@@ -464,7 +484,9 @@ static void update_children(struct key_vector *tn)
 		 * to point to ourselves.
 		 */
 		if (node_parent(inode) == tn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			update_children(inode);
+}
 		else
 			node_set_parent(inode, tn);
 	}
@@ -487,6 +509,7 @@ static inline void tnode_free_init(struct key_vector *tn)
 static inline void tnode_free_append(struct key_vector *tn,
 				     struct key_vector *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tn_info(n)->rcu.next = tn_info(tn)->rcu.next;
 	tn_info(tn)->rcu.next = &tn_info(n)->rcu;
 }
@@ -504,6 +527,7 @@ static void tnode_free(struct key_vector *tn)
 	}
 
 	if (tnode_free_size >= PAGE_SIZE * sync_pages) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tnode_free_size = 0;
 		synchronize_rcu();
 	}
@@ -532,7 +556,9 @@ static struct key_vector *replace(struct trie *t,
 
 		/* resize child node */
 		if (tnode_full(tn, inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tn = resize(t, inode);
+}
 	}
 
 	return tp;
@@ -545,6 +571,7 @@ static struct key_vector *inflate(struct trie *t,
 	unsigned long i;
 	t_key m;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("In inflate\n");
 
 	tn = tnode_new(oldtnode->key, oldtnode->pos - 1, oldtnode->bits + 1);
@@ -579,7 +606,9 @@ static struct key_vector *inflate(struct trie *t,
 
 		/* An internal node with two children */
 		if (inode->bits == 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_child(tn, 2 * i + 1, get_child(inode, 1));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_child(tn, 2 * i, get_child(inode, 0));
 			continue;
 		}
@@ -601,23 +630,30 @@ static struct key_vector *inflate(struct trie *t,
 		node1 = tnode_new(inode->key | m, inode->pos, inode->bits - 1);
 		if (!node1)
 			goto nomem;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		node0 = tnode_new(inode->key, inode->pos, inode->bits - 1);
 
 		tnode_free_append(tn, node1);
 		if (!node0)
 			goto nomem;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tnode_free_append(tn, node0);
 
 		/* populate child pointers in new nodes */
 		for (k = child_length(inode), j = k / 2; j;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_child(node1, --j, get_child(inode, --k));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_child(node0, j, get_child(inode, j));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_child(node1, --j, get_child(inode, --k));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_child(node0, j, get_child(inode, j));
 		}
 
 		/* link new nodes to parent */
 		NODE_INIT_PARENT(node1, tn);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NODE_INIT_PARENT(node0, tn);
 
 		/* link parent to nodes */
@@ -640,6 +676,7 @@ static struct key_vector *halve(struct trie *t,
 	struct key_vector *tn;
 	unsigned long i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("In halve\n");
 
 	tn = tnode_new(oldtnode->key, oldtnode->pos + 1, oldtnode->bits - 1);
@@ -807,6 +844,7 @@ static unsigned char update_suffix(struct key_vector *tn)
  */
 static inline bool should_inflate(struct key_vector *tp, struct key_vector *tn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long used = child_length(tn);
 	unsigned long threshold = used;
 
@@ -822,6 +860,7 @@ static inline bool should_inflate(struct key_vector *tp, struct key_vector *tn)
 
 static inline bool should_halve(struct key_vector *tp, struct key_vector *tn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long used = child_length(tn);
 	unsigned long threshold = used;
 
@@ -836,13 +875,16 @@ static inline bool should_halve(struct key_vector *tp, struct key_vector *tn)
 
 static inline bool should_collapse(struct key_vector *tn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long used = child_length(tn);
 
 	used -= tn_info(tn)->empty_children;
 
 	/* account for bits == KEYLENGTH case */
 	if ((tn->bits == KEYLENGTH) && tn_info(tn)->full_children)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		used -= KEY_MAX;
+}
 
 	/* One child or none, time to drop us from the trie */
 	return used < 2;
@@ -858,6 +900,7 @@ static struct key_vector *resize(struct trie *t, struct key_vector *tn)
 	unsigned long cindex = get_index(tn->key, tp);
 	int max_work = MAX_WORK;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("In tnode_resize %p inflate_threshold=%d threshold=%d\n",
 		 tn, inflate_threshold, halve_threshold);
 
@@ -888,12 +931,15 @@ static struct key_vector *resize(struct trie *t, struct key_vector *tn)
 
 	/* Return if at least one inflate is run */
 	if (max_work != MAX_WORK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return tp;
+}
 
 	/* Halve as long as the number of empty children in this
 	 * node is above threshold.
 	 */
 	while (should_halve(tp, tn) && max_work) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp = halve(t, tn);
 		if (!tp) {
 #ifdef CONFIG_IP_FIB_TRIE_STATS
@@ -902,7 +948,9 @@ static struct key_vector *resize(struct trie *t, struct key_vector *tn)
 			break;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		max_work--;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tn = get_child(tp, cindex);
 	}
 
@@ -923,6 +971,7 @@ static void node_pull_suffix(struct key_vector *tn, unsigned char slen)
 		if (node_slen == slen)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tn = node_parent(tn);
 		node_slen = tn->slen;
 	}
@@ -944,6 +993,7 @@ static struct key_vector *fib_find_node(struct trie *t,
 	unsigned long index = 0;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pn = n;
 		n = get_child_rcu(n, index);
 
@@ -967,6 +1017,7 @@ static struct key_vector *fib_find_node(struct trie *t,
 		 * long is greater than 32 bits.
 		 */
 		if (index >= (1ul << n->bits)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			n = NULL;
 			break;
 		}
@@ -988,7 +1039,9 @@ static struct fib_alias *fib_find_alias(struct hlist_head *fah, u8 slen,
 	struct fib_alias *fa;
 
 	if (!fah)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	hlist_for_each_entry(fa, fah, fa_list) {
 		if (fa->fa_slen < slen)
@@ -1002,9 +1055,12 @@ static struct fib_alias *fib_find_alias(struct hlist_head *fah, u8 slen,
 		if (fa->fa_tos > tos)
 			continue;
 		if (fa->fa_info->fib_priority >= prio || fa->fa_tos < tos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return fa;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -1072,6 +1128,7 @@ static int fib_insert_alias(struct trie *t, struct key_vector *tp,
 		return fib_insert_node(t, tp, new, key);
 
 	if (fa) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hlist_add_before_rcu(&new->fa_list, &fa->fa_list);
 	} else {
 		struct fib_alias *last;
@@ -1082,6 +1139,7 @@ static int fib_insert_alias(struct trie *t, struct key_vector *tp,
 			if ((new->fa_slen == last->fa_slen) &&
 			    (new->tb_id > last->tb_id))
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fa = last;
 		}
 
@@ -1093,26 +1151,33 @@ static int fib_insert_alias(struct trie *t, struct key_vector *tp,
 
 	/* if we added to the tail node then we need to update slen */
 	if (l->slen < new->fa_slen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		l->slen = new->fa_slen;
 		node_push_suffix(tp, new->fa_slen);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static bool fib_valid_key_len(u32 key, u8 plen, struct netlink_ext_ack *extack)
 {
 	if (plen > KEYLENGTH) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NL_SET_ERR_MSG(extack, "Invalid prefix length");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
 	}
 
 	if ((plen < KEYLENGTH) && (key << plen)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NL_SET_ERR_MSG(extack,
 			       "Invalid prefix for given prefix length");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 
@@ -1135,12 +1200,16 @@ int fib_table_insert(struct net *net, struct fib_table *tb,
 	key = ntohl(cfg->fc_dst);
 
 	if (!fib_valid_key_len(key, plen, extack))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("Insert table=%u %08x/%d\n", tb->tb_id, key, plen);
 
 	fi = fib_create_info(cfg, extack);
 	if (IS_ERR(fi)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(fi);
 		goto err;
 	}
@@ -1166,6 +1235,7 @@ int fib_table_insert(struct net *net, struct fib_table *tb,
 		if (cfg->fc_nlflags & NLM_F_EXCL)
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nlflags &= ~NLM_F_EXCL;
 
 		/* We have 2 goals:
@@ -1175,6 +1245,7 @@ int fib_table_insert(struct net *net, struct fib_table *tb,
 		 */
 		fa_match = NULL;
 		fa_first = fa;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hlist_for_each_entry_from(fa, fa_list) {
 			if ((fa->fa_slen != slen) ||
 			    (fa->tb_id != tb->tb_id) ||
@@ -1184,6 +1255,7 @@ int fib_table_insert(struct net *net, struct fib_table *tb,
 				break;
 			if (fa->fa_type == cfg->fc_type &&
 			    fa->fa_info == fi) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fa_match = fa;
 				break;
 			}
@@ -1196,15 +1268,20 @@ int fib_table_insert(struct net *net, struct fib_table *tb,
 			nlflags |= NLM_F_REPLACE;
 			fa = fa_first;
 			if (fa_match) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (fa == fa_match)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					err = 0;
+}
 				goto out;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENOBUFS;
 			new_fa = kmem_cache_alloc(fn_alias_kmem, GFP_KERNEL);
 			if (!new_fa)
 				goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fi_drop = fa->fa_info;
 			new_fa->fa_tos = fa->fa_tos;
 			new_fa->fa_info = fi;
@@ -1219,6 +1296,7 @@ int fib_table_insert(struct net *net, struct fib_table *tb,
 						 key, plen, fi,
 						 new_fa->fa_tos, cfg->fc_type,
 						 tb->tb_id);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rtmsg_fib(RTM_NEWROUTE, htonl(key), new_fa, plen,
 				  tb->tb_id, &cfg->fc_nlinfo, nlflags);
 
@@ -1228,7 +1306,9 @@ int fib_table_insert(struct net *net, struct fib_table *tb,
 
 			fib_release_info(fi_drop);
 			if (state & FA_S_ACCESSED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rt_cache_flush(cfg->fc_nlinfo.nl_net);
+}
 
 			goto succeeded;
 		}
@@ -1239,13 +1319,17 @@ int fib_table_insert(struct net *net, struct fib_table *tb,
 		if (fa_match)
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cfg->fc_nlflags & NLM_F_APPEND) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			event = FIB_EVENT_ENTRY_APPEND;
 			nlflags |= NLM_F_APPEND;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fa = fa_first;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENOENT;
 	if (!(cfg->fc_nlflags & NLM_F_CREATE))
 		goto out;
@@ -1316,7 +1400,9 @@ int fib_table_lookup(struct fib_table *tb, const struct flowi4 *flp,
 
 	n = get_child_rcu(pn, cindex);
 	if (!n)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAGAIN;
+}
 
 #ifdef CONFIG_IP_FIB_TRIE_STATS
 	this_cpu_inc(stats->gets);
@@ -1351,6 +1437,7 @@ int fib_table_lookup(struct fib_table *tb, const struct flowi4 *flp,
 		 * bits later.  Otherwise we are just wasting cycles.
 		 */
 		if (n->slen > n->pos) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pn = n;
 			cindex = index;
 		}
@@ -1400,7 +1487,9 @@ int fib_table_lookup(struct fib_table *tb, const struct flowi4 *flp,
 				 * further nodes to parse.
 				 */
 				if (IS_TRIE(pn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -EAGAIN;
+}
 #ifdef CONFIG_IP_FIB_TRIE_STATS
 				this_cpu_inc(stats->backtrack);
 #endif
@@ -1426,6 +1515,7 @@ int fib_table_lookup(struct fib_table *tb, const struct flowi4 *flp,
 		struct fib_info *fi = fa->fa_info;
 		int nhsel, err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((BITS_PER_LONG > KEYLENGTH) || (fa->fa_slen < KEYLENGTH)) {
 			if (index >= (1ul << fa->fa_slen))
 				continue;
@@ -1446,6 +1536,7 @@ int fib_table_lookup(struct fib_table *tb, const struct flowi4 *flp,
 		}
 		if (fi->fib_flags & RTNH_F_DEAD)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (nhsel = 0; nhsel < fi->fib_nhs; nhsel++) {
 			const struct fib_nh *nh = &fi->fib_nh[nhsel];
 			struct in_device *in_dev = __in_dev_get_rcu(nh->nh_dev);
@@ -1464,7 +1555,9 @@ int fib_table_lookup(struct fib_table *tb, const struct flowi4 *flp,
 			}
 
 			if (!(fib_flags & FIB_LOOKUP_NOREF))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				refcount_inc(&fi->fib_clntref);
+}
 
 			res->prefix = htonl(n->key);
 			res->prefixlen = KEYLENGTH - fa->fa_slen;
@@ -1494,6 +1587,7 @@ static void fib_remove_alias(struct trie *t, struct key_vector *tp,
 {
 	/* record the location of the previous list_info entry */
 	struct hlist_node **pprev = old->fa_list.pprev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fib_alias *fa = hlist_entry(pprev, typeof(*fa), fa_list.next);
 
 	/* remove the fib_alias from the list */
@@ -1513,7 +1607,9 @@ static void fib_remove_alias(struct trie *t, struct key_vector *tp,
 
 	/* only access fa if it is pointing at the last valid hlist_node */
 	if (*pprev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* update the trie with the latest suffix length */
 	l->slen = fa->fa_slen;
@@ -1535,19 +1631,27 @@ int fib_table_delete(struct net *net, struct fib_table *tb,
 	key = ntohl(cfg->fc_dst);
 
 	if (!fib_valid_key_len(key, plen, extack))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	l = fib_find_node(t, &tp, key);
 	if (!l)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
 
 	fa = fib_find_alias(&l->leaf, slen, tos, 0, tb->tb_id);
 	if (!fa)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("Deleting %08x/%d tos=%d t=%p\n", key, plen, tos, t);
 
 	fa_to_delete = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry_from(fa, fa_list) {
 		struct fib_info *fi = fa->fa_info;
 
@@ -1565,13 +1669,16 @@ int fib_table_delete(struct net *net, struct fib_table *tb,
 		     fi->fib_protocol == cfg->fc_protocol) &&
 		    fib_nh_match(cfg, fi, extack) == 0 &&
 		    fib_metrics_match(cfg, fi)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fa_to_delete = fa;
 			break;
 		}
 	}
 
 	if (!fa_to_delete)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
 
 	call_fib_entry_notifiers(net, FIB_EVENT_ENTRY_DEL, key, plen,
 				 fa_to_delete->fa_info, tos,
@@ -1580,7 +1687,9 @@ int fib_table_delete(struct net *net, struct fib_table *tb,
 		  &cfg->fc_nlinfo, 0);
 
 	if (!plen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tb->tb_num_default--;
+}
 
 	fib_remove_alias(t, tp, l, fa_to_delete);
 
@@ -1668,6 +1777,7 @@ static void fib_trie_free(struct fib_table *tb)
 			if (IS_TRIE(pn))
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			n = pn;
 			pn = node_parent(pn);
 
@@ -1718,7 +1828,9 @@ struct fib_table *fib_trie_unmerge(struct fib_table *oldtb)
 	t_key key = 0;
 
 	if (oldtb->tb_data == oldtb->__data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return oldtb;
+}
 
 	local_tb = fib_trie_table(RT_TABLE_LOCAL, NULL);
 	if (!local_tb)
@@ -1910,6 +2022,7 @@ int fib_table_flush(struct net *net, struct fib_table *tb)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("trie_flush found=%d\n", found);
 	return found;
 }
@@ -1919,6 +2032,7 @@ static void fib_leaf_notify(struct net *net, struct key_vector *l,
 {
 	struct fib_alias *fa;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry_rcu(fa, &l->leaf, fa_list) {
 		struct fib_info *fi = fa->fa_info;
 
@@ -1944,6 +2058,7 @@ static void fib_table_notify(struct net *net, struct fib_table *tb,
 	struct key_vector *l, *tp = t->kv;
 	t_key key = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((l = leaf_walk_rcu(&tp, key)) != NULL) {
 		fib_leaf_notify(net, l, tb, nb);
 
@@ -1958,6 +2073,7 @@ void fib_notify(struct net *net, struct notifier_block *nb)
 {
 	unsigned int h;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (h = 0; h < FIB_TABLE_HASHSZ; h++) {
 		struct hlist_head *head = &net->ipv4.fib_table_hash[h];
 		struct fib_table *tb;
@@ -1999,6 +2115,7 @@ static int fn_trie_dump_leaf(struct key_vector *l, struct fib_table *tb,
 		int err;
 
 		if (i < s_i) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			i++;
 			continue;
 		}
@@ -2014,6 +2131,7 @@ static int fn_trie_dump_leaf(struct key_vector *l, struct fib_table *tb,
 				    xkey, KEYLENGTH - fa->fa_slen,
 				    fa->fa_tos, fa->fa_info, NLM_F_MULTI);
 		if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cb->args[4] = i;
 			return err;
 		}
@@ -2041,6 +2159,7 @@ int fib_table_dump(struct fib_table *tb, struct sk_buff *skb,
 
 		err = fn_trie_dump_leaf(l, tb, skb, cb);
 		if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cb->args[3] = key;
 			cb->args[2] = count;
 			return err;
@@ -2081,19 +2200,26 @@ struct fib_table *fib_trie_table(u32 id, struct fib_table *alias)
 	size_t sz = sizeof(*tb);
 
 	if (!alias)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sz += sizeof(struct trie);
+}
 
 	tb = kzalloc(sz, GFP_KERNEL);
 	if (!tb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	tb->tb_id = id;
 	tb->tb_num_default = 0;
 	tb->tb_data = (alias ? alias->__data : tb->__data);
 
 	if (alias)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return tb;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	t = (struct trie *) tb->tb_data;
 	t->kv[0].pos = KEYLENGTH;
 	t->kv[0].slen = KEYLENGTH;
@@ -2124,6 +2250,7 @@ static struct key_vector *fib_trie_get_next(struct fib_trie_iter *iter)
 	struct key_vector *pn = iter->tnode;
 	t_key pkey;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("get_next iter={node=%p index=%d depth=%d}\n",
 		 iter->tnode, iter->index, iter->depth);
 
@@ -2167,7 +2294,9 @@ static struct key_vector *fib_trie_get_first(struct fib_trie_iter *iter,
 	struct key_vector *n, *pn;
 
 	if (!t)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	pn = t->kv;
 	n = rcu_dereference(pn->tnode[0]);
@@ -2195,6 +2324,7 @@ static void trie_collect_stats(struct trie *t, struct trie_stat *s)
 	memset(s, 0, sizeof(*s));
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (n = fib_trie_get_first(&iter, t); n; n = fib_trie_get_next(&iter)) {
 		if (IS_LEAF(n)) {
 			struct fib_alias *fa;
@@ -2224,7 +2354,9 @@ static void trie_show_stats(struct seq_file *seq, struct trie_stat *stat)
 	unsigned int i, max, pointers, bytes, avdepth;
 
 	if (stat->leaves)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		avdepth = stat->totdepth*100 / stat->leaves;
+}
 	else
 		avdepth = 0;
 
@@ -2291,6 +2423,7 @@ static void trie_show_usage(struct seq_file *seq,
 
 static void fib_table_print(struct seq_file *seq, struct fib_table *tb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tb->tb_id == RT_TABLE_LOCAL)
 		seq_puts(seq, "Local:\n");
 	else if (tb->tb_id == RT_TABLE_MAIN)
@@ -2310,6 +2443,7 @@ static int fib_triestat_seq_show(struct seq_file *seq, void *v)
 		   " %zd bytes, size of tnode: %zd bytes.\n",
 		   LEAF_SIZE, TNODE_SIZE(0));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (h = 0; h < FIB_TABLE_HASHSZ; h++) {
 		struct hlist_head *head = &net->ipv4.fib_table_hash[h];
 		struct fib_table *tb;
@@ -2336,6 +2470,7 @@ static int fib_triestat_seq_show(struct seq_file *seq, void *v)
 
 static int fib_triestat_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open_net(inode, file, fib_triestat_seq_show);
 }
 
@@ -2354,6 +2489,7 @@ static struct key_vector *fib_trie_get_idx(struct seq_file *seq, loff_t pos)
 	loff_t idx = 0;
 	unsigned int h;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (h = 0; h < FIB_TABLE_HASHSZ; h++) {
 		struct hlist_head *head = &net->ipv4.fib_table_hash[h];
 		struct fib_table *tb;
@@ -2377,6 +2513,7 @@ static struct key_vector *fib_trie_get_idx(struct seq_file *seq, loff_t pos)
 static void *fib_trie_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	return fib_trie_get_idx(seq, *pos);
 }
@@ -2394,7 +2531,9 @@ static void *fib_trie_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 	/* next node in same table */
 	n = fib_trie_get_next(iter);
 	if (n)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return n;
+}
 
 	/* walk rest of this hash chain */
 	h = tb->tb_id & (FIB_TABLE_HASHSZ - 1);
@@ -2424,17 +2563,20 @@ static void *fib_trie_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 static void fib_trie_seq_stop(struct seq_file *seq, void *v)
 	__releases(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
 static void seq_indent(struct seq_file *seq, int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (n-- > 0)
 		seq_puts(seq, "   ");
 }
 
 static inline const char *rtn_scope(char *buf, size_t len, enum rt_scope_t s)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (s) {
 	case RT_SCOPE_UNIVERSE: return "universe";
 	case RT_SCOPE_SITE:	return "site";
@@ -2464,6 +2606,7 @@ static const char *const rtn_type_names[__RTN_MAX] = {
 
 static inline const char *rtn_type(char *buf, size_t len, unsigned int t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (t < __RTN_MAX && rtn_type_names[t])
 		return rtn_type_names[t];
 	snprintf(buf, len, "type %u", t);
@@ -2476,6 +2619,7 @@ static int fib_trie_seq_show(struct seq_file *seq, void *v)
 	const struct fib_trie_iter *iter = seq->private;
 	struct key_vector *n = v;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_TRIE(node_parent_rcu(n)))
 		fib_table_print(seq, iter->tb);
 
@@ -2522,6 +2666,7 @@ static const struct seq_operations fib_trie_seq_ops = {
 
 static int fib_trie_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &fib_trie_seq_ops,
 			    sizeof(struct fib_trie_iter));
 }
@@ -2587,7 +2732,9 @@ static void *fib_route_seq_start(struct seq_file *seq, loff_t *pos)
 
 	tb = fib_get_table(seq_file_net(seq), RT_TABLE_MAIN);
 	if (!tb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	iter->main_tb = tb;
 	t = (struct trie *)tb->tb_data;
@@ -2627,6 +2774,7 @@ static void *fib_route_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 static void fib_route_seq_stop(struct seq_file *seq, void *v)
 	__releases(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -2634,6 +2782,7 @@ static unsigned int fib_flag_trans(int type, __be32 mask, const struct fib_info
 {
 	unsigned int flags = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type == RTN_UNREACHABLE || type == RTN_PROHIBIT)
 		flags = RTF_REJECT;
 	if (fi && fi->fib_nh->nh_gw)
@@ -2659,6 +2808,7 @@ static int fib_route_seq_show(struct seq_file *seq, void *v)
 	__be32 prefix;
 
 	if (v == SEQ_START_TOKEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_printf(seq, "%-127s\n", "Iface\tDestination\tGateway "
 			   "\tFlags\tRefCnt\tUse\tMetric\tMask\t\tMTU"
 			   "\tWindow\tIRTT");
@@ -2716,6 +2866,7 @@ static const struct seq_operations fib_route_seq_ops = {
 
 static int fib_route_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &fib_route_seq_ops,
 			    sizeof(struct fib_route_iter));
 }
@@ -2740,6 +2891,7 @@ int __net_init fib_proc_init(struct net *net)
 	if (!proc_create("route", S_IRUGO, net->proc_net, &fib_route_fops))
 		goto out3;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out3:
diff --git a/net/ipv4/fou.c b/net/ipv4/fou.c
index 1540db6..c3bdde4 100644
--- a/net/ipv4/fou.c
+++ b/net/ipv4/fou.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/module.h>
 #include <linux/errno.h>
 #include <linux/socket.h>
diff --git a/net/ipv4/gre_demux.c b/net/ipv4/gre_demux.c
index b798862..cc96df8 100644
--- a/net/ipv4/gre_demux.c
+++ b/net/ipv4/gre_demux.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	GRE over IPv4 demultiplexer driver
  *
diff --git a/net/ipv4/gre_offload.c b/net/ipv4/gre_offload.c
index 1859c47..bae7f88 100644
--- a/net/ipv4/gre_offload.c
+++ b/net/ipv4/gre_offload.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPV4 GSO/GRO offload support
  *	Linux INET implementation
@@ -18,6 +20,7 @@
 static struct sk_buff *gre_gso_segment(struct sk_buff *skb,
 				       netdev_features_t features)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int tnl_hlen = skb_inner_mac_header(skb) - skb_transport_header(skb);
 	struct sk_buff *segs = ERR_PTR(-EINVAL);
 	u16 mac_offset = skb->mac_header;
@@ -123,6 +126,7 @@ static struct sk_buff **gre_gro_receive(struct sk_buff **head,
 	if (NAPI_GRO_CB(skb)->encap_mark)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	NAPI_GRO_CB(skb)->encap_mark = 1;
 
 	off = skb_gro_offset(skb);
@@ -240,6 +244,7 @@ static int gre_gro_complete(struct sk_buff *skb, int nhoff)
 	skb_shinfo(skb)->gso_type = SKB_GSO_GRE;
 
 	type = greh->protocol;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (greh->flags & GRE_KEY)
 		grehlen += GRE_HEADER_SECTION;
 
@@ -273,13 +278,18 @@ static int __init gre_offload_init(void)
 	err = inet_add_offload(&gre_offload, IPPROTO_GRE);
 #if IS_ENABLED(CONFIG_IPV6)
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = inet6_add_offload(&gre_offload, IPPROTO_GRE);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_del_offload(&gre_offload, IPPROTO_GRE);
+}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 device_initcall(gre_offload_init);
diff --git a/net/ipv4/icmp.c b/net/ipv4/icmp.c
index 3c1570d..1d2bd9f 100644
--- a/net/ipv4/icmp.c
+++ b/net/ipv4/icmp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	NET3:	Implementation of the ICMP protocol layer.
  *
@@ -227,6 +229,7 @@ static inline struct sock *icmp_xmit_lock(struct net *net)
 
 static inline void icmp_xmit_unlock(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sk->sk_lock.slock);
 }
 
@@ -257,6 +260,7 @@ bool icmp_global_allow(void)
 	 * without taking the spinlock.
 	 */
 	if (!icmp_global.credit) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		delta = min_t(u32, now - icmp_global.stamp, HZ);
 		if (delta < HZ / 50)
 			return false;
@@ -283,21 +287,29 @@ EXPORT_SYMBOL(icmp_global_allow);
 static bool icmpv4_mask_allow(struct net *net, int type, int code)
 {
 	if (type > NR_ICMP_TYPES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	/* Don't limit PMTU discovery. */
 	if (type == ICMP_DEST_UNREACH && code == ICMP_FRAG_NEEDED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	/* Limit if icmp type is enabled in ratemask. */
 	if (!((1 << type) & net->ipv4.sysctl_icmp_ratemask))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
 static bool icmpv4_global_allow(struct net *net, int type, int code)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (icmpv4_mask_allow(net, type, code))
 		return true;
 
@@ -326,11 +338,14 @@ static bool icmpv4_xrlim_allow(struct net *net, struct rtable *rt,
 	if (dst->dev && (dst->dev->flags&IFF_LOOPBACK))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vif = l3mdev_master_ifindex(dst->dev);
 	peer = inet_getpeer_v4(net->ipv4.peers, fl4->daddr, vif, 1);
 	rc = inet_peer_xrlim_allow(peer, net->ipv4.sysctl_icmp_ratelimit);
 	if (peer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_putpeer(peer);
+}
 out:
 	return rc;
 }
@@ -376,9 +391,11 @@ static void icmp_push_reply(struct icmp_bxm *icmp_param,
 			   icmp_param->data_len+icmp_param->head_len,
 			   icmp_param->head_len,
 			   ipc, rt, MSG_DONTWAIT) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__ICMP_INC_STATS(sock_net(sk), ICMP_MIB_OUTERRORS);
 		ip_flush_pending_frames(sk);
 	} else if ((skb = skb_peek(&sk->sk_write_queue)) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct icmphdr *icmph = icmp_hdr(skb);
 		__wsum csum = 0;
 		struct sk_buff *skb1;
@@ -408,6 +425,7 @@ static void icmp_reply(struct icmp_bxm *icmp_param, struct sk_buff *skb)
 	struct sock *sk;
 	struct inet_sock *inet;
 	__be32 daddr, saddr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 mark = IP4_REPLY_MARK(net, skb->mark);
 	int type = icmp_param->data.icmph.type;
 	int code = icmp_param->data.icmph.code;
@@ -491,7 +509,9 @@ static struct rtable *icmp_route_lookup(struct net *net,
 	security_skb_classify_flow(skb_in, flowi4_to_flowi(fl4));
 	rt = ip_route_output_key_hash(net, fl4, skb_in);
 	if (IS_ERR(rt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rt;
+}
 
 	/* No need to clone since we're just using its address. */
 	rt2 = rt;
@@ -500,11 +520,16 @@ static struct rtable *icmp_route_lookup(struct net *net,
 					   flowi4_to_flowi(fl4), NULL, 0);
 	if (!IS_ERR(rt)) {
 		if (rt != rt2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return rt;
+}
 	} else if (PTR_ERR(rt) == -EPERM) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt = NULL;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rt;
+}
 
 	err = xfrm_decode_session_reverse(skb_in, flowi4_to_flowi(&fl4_dec), AF_INET);
 	if (err)
@@ -514,7 +539,9 @@ static struct rtable *icmp_route_lookup(struct net *net,
 				     fl4_dec.saddr) == RTN_LOCAL) {
 		rt2 = __ip_route_output_key(net, &fl4_dec);
 		if (IS_ERR(rt2))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(rt2);
+}
 	} else {
 		struct flowi4 fl4_2 = {};
 		unsigned long orefdst;
@@ -522,6 +549,7 @@ static struct rtable *icmp_route_lookup(struct net *net,
 		fl4_2.daddr = fl4_dec.saddr;
 		rt2 = ip_route_output_key(net, &fl4_2);
 		if (IS_ERR(rt2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(rt2);
 			goto relookup_failed;
 		}
@@ -543,22 +571,32 @@ static struct rtable *icmp_route_lookup(struct net *net,
 					    flowi4_to_flowi(&fl4_dec), NULL,
 					    XFRM_LOOKUP_ICMP);
 	if (!IS_ERR(rt2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_release(&rt->dst);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(fl4, &fl4_dec, sizeof(*fl4));
 		rt = rt2;
 	} else if (PTR_ERR(rt2) == -EPERM) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dst_release(&rt->dst);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rt2;
 	} else {
 		err = PTR_ERR(rt2);
 		goto relookup_failed;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rt;
 
 relookup_failed:
 	if (rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rt;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(err);
 }
 
@@ -682,10 +720,14 @@ void icmp_send(struct sk_buff *skb_in, int type, int code, __be32 info)
 		    net->ipv4.sysctl_icmp_errors_use_inbound_ifaddr)
 			dev = dev_get_by_index_rcu(net, inet_iif(skb_in));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			saddr = inet_select_addr(dev, 0, RT_SCOPE_LINK);
+}
 		else
 			saddr = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 	}
 
@@ -729,13 +771,17 @@ void icmp_send(struct sk_buff *skb_in, int type, int code, __be32 info)
 
 	room = dst_mtu(&rt->dst);
 	if (room > 576)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		room = 576;
+}
 	room -= sizeof(struct iphdr) + icmp_param.replyopts.opt.opt.optlen;
 	room -= sizeof(struct icmphdr);
 
 	icmp_param.data_len = skb_in->len - icmp_param.offset;
 	if (icmp_param.data_len > room)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icmp_param.data_len = room;
+}
 	icmp_param.head_len = sizeof(struct icmphdr);
 
 	icmp_push_reply(&icmp_param, &fl4, &ipc, &rt);
@@ -760,6 +806,7 @@ static void icmp_socket_deliver(struct sk_buff *skb, u32 info)
 	 * avoid additional coding at protocol handlers.
 	 */
 	if (!pskb_may_pull(skb, iph->ihl * 4 + 8)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__ICMP_INC_STATS(dev_net(skb->dev), ICMP_MIB_INERRORS);
 		return;
 	}
@@ -776,6 +823,7 @@ static bool icmp_tag_validation(int proto)
 	bool ok;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ok = rcu_dereference(inet_protos[proto])->icmp_strict_tag_validation;
 	rcu_read_unlock();
 	return ok;
@@ -804,6 +852,7 @@ static bool icmp_unreach(struct sk_buff *skb)
 	if (!pskb_may_pull(skb, sizeof(struct iphdr)))
 		goto out_err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	icmph = icmp_hdr(skb);
 	iph   = (const struct iphdr *)skb->data;
 
@@ -878,6 +927,7 @@ static bool icmp_unreach(struct sk_buff *skb)
 
 	if (!net->ipv4.sysctl_icmp_ignore_bogus_error_responses &&
 	    inet_addr_type_dev_table(net, skb->dev, iph->daddr) == RTN_BROADCAST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_warn_ratelimited("%pI4 sent an invalid ICMP type %u, code %u error to a broadcast: %pI4 on %s\n",
 				     &ip_hdr(skb)->saddr,
 				     icmph->type, icmph->code,
@@ -1197,7 +1247,9 @@ static int __net_init icmp_sk_init(struct net *net)
 
 	net->ipv4.icmp_sk = alloc_percpu(struct sock *);
 	if (!net->ipv4.icmp_sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	for_each_possible_cpu(i) {
 		struct sock *sk;
@@ -1249,6 +1301,7 @@ static int __net_init icmp_sk_init(struct net *net)
 fail:
 	for_each_possible_cpu(i)
 		inet_ctl_sock_destroy(*per_cpu_ptr(net->ipv4.icmp_sk, i));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	free_percpu(net->ipv4.icmp_sk);
 	return err;
 }
diff --git a/net/ipv4/igmp.c b/net/ipv4/igmp.c
index fbeb35a..057ba25 100644
--- a/net/ipv4/igmp.c
+++ b/net/ipv4/igmp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Linux NET3:	Internet Group Management Protocol  [IGMP]
  *
@@ -143,6 +145,7 @@ static int unsolicited_report_interval(struct in_device *in_dev)
 {
 	int interval_ms, interval_jiffies;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IGMP_V1_SEEN(in_dev) || IGMP_V2_SEEN(in_dev))
 		interval_ms = IN_DEV_CONF_GET(
 			in_dev,
@@ -198,6 +201,7 @@ static void ip_ma_put(struct ip_mc_list *im)
 
 static void igmp_stop_timer(struct ip_mc_list *im)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&im->lock);
 	if (del_timer(&im->timer))
 		refcount_dec(&im->refcnt);
@@ -210,6 +214,7 @@ static void igmp_stop_timer(struct ip_mc_list *im)
 /* It must be called with locked im->lock */
 static void igmp_start_timer(struct ip_mc_list *im, int max_delay)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int tv = prandom_u32() % max_delay;
 
 	im->tm_running = 1;
@@ -219,6 +224,7 @@ static void igmp_start_timer(struct ip_mc_list *im, int max_delay)
 
 static void igmp_gq_start_timer(struct in_device *in_dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int tv = prandom_u32() % in_dev->mr_maxdelay;
 	unsigned long exp = jiffies + tv + 2;
 
@@ -233,6 +239,7 @@ static void igmp_gq_start_timer(struct in_device *in_dev)
 
 static void igmp_ifc_start_timer(struct in_device *in_dev, int delay)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int tv = prandom_u32() % delay;
 
 	if (!mod_timer(&in_dev->mr_ifc_timer, jiffies+tv+2))
@@ -241,6 +248,7 @@ static void igmp_ifc_start_timer(struct in_device *in_dev, int delay)
 
 static void igmp_mod_timer(struct ip_mc_list *im, int max_delay)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&im->lock);
 	im->unsolicit_count = 0;
 	if (del_timer(&im->timer)) {
@@ -267,6 +275,7 @@ static void igmp_mod_timer(struct ip_mc_list *im, int max_delay)
 static int is_in(struct ip_mc_list *pmc, struct ip_sf_list *psf, int type,
 	int gdeleted, int sdeleted)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (type) {
 	case IGMPV3_MODE_IS_INCLUDE:
 	case IGMPV3_MODE_IS_EXCLUDE:
@@ -314,6 +323,7 @@ igmp_scount(struct ip_mc_list *pmc, int type, int gdeleted, int sdeleted)
 	struct ip_sf_list *psf;
 	int scount = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (psf = pmc->sources; psf; psf = psf->sf_next) {
 		if (!is_in(pmc, psf, type, gdeleted, sdeleted))
 			continue;
@@ -326,6 +336,7 @@ igmp_scount(struct ip_mc_list *pmc, int type, int gdeleted, int sdeleted)
 static __be32 igmpv3_get_srcaddr(struct net_device *dev,
 				 const struct flowi4 *fl4)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct in_device *in_dev = __in_dev_get_rcu(dev);
 
 	if (!in_dev)
@@ -351,6 +362,7 @@ static struct sk_buff *igmpv3_newpack(struct net_device *dev, unsigned int mtu)
 	int tlen = dev->needed_tailroom;
 	unsigned int size = mtu;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		skb = alloc_skb(size + hlen + tlen,
 				GFP_ATOMIC | __GFP_NOWARN);
@@ -412,6 +424,7 @@ static struct sk_buff *igmpv3_newpack(struct net_device *dev, unsigned int mtu)
 
 static int igmpv3_sendpack(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct igmphdr *pig = igmp_hdr(skb);
 	const int igmplen = skb_tail_pointer(skb) - skb_transport_header(skb);
 
@@ -422,6 +435,7 @@ static int igmpv3_sendpack(struct sk_buff *skb)
 
 static int grec_size(struct ip_mc_list *pmc, int type, int gdel, int sdel)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sizeof(struct igmpv3_grec) + 4*igmp_scount(pmc, type, gdel, sdel);
 }
 
@@ -433,6 +447,7 @@ static struct sk_buff *add_grhead(struct sk_buff *skb, struct ip_mc_list *pmc,
 	struct igmpv3_grec *pgr;
 
 	if (!skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb = igmpv3_newpack(dev, mtu);
 		if (!skb)
 			return NULL;
@@ -461,6 +476,7 @@ static struct sk_buff *add_grec(struct sk_buff *skb, struct ip_mc_list *pmc,
 	int scount, stotal, first, isquery, truncate;
 	unsigned int mtu;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pmc->multiaddr == IGMP_ALL_HOSTS)
 		return skb;
 	if (ipv4_is_local_multicast(pmc->multiaddr) && !net->ipv4.sysctl_igmp_llm_reports)
@@ -2713,6 +2729,7 @@ struct igmp_mc_iter_state {
 
 static inline struct ip_mc_list *igmp_mc_get_first(struct seq_file *seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = seq_file_net(seq);
 	struct ip_mc_list *im = NULL;
 	struct igmp_mc_iter_state *state = igmp_mc_seq_private(seq);
@@ -2737,6 +2754,7 @@ static struct ip_mc_list *igmp_mc_get_next(struct seq_file *seq, struct ip_mc_li
 {
 	struct igmp_mc_iter_state *state = igmp_mc_seq_private(seq);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	im = rcu_dereference(im->next_rcu);
 	while (!im) {
 		state->dev = next_net_device_rcu(state->dev);
@@ -2754,6 +2772,7 @@ static struct ip_mc_list *igmp_mc_get_next(struct seq_file *seq, struct ip_mc_li
 
 static struct ip_mc_list *igmp_mc_get_idx(struct seq_file *seq, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_mc_list *im = igmp_mc_get_first(seq);
 	if (im)
 		while (pos && (im = igmp_mc_get_next(seq, im)) != NULL)
@@ -2764,6 +2783,7 @@ static struct ip_mc_list *igmp_mc_get_idx(struct seq_file *seq, loff_t pos)
 static void *igmp_mc_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(rcu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	return *pos ? igmp_mc_get_idx(seq, *pos - 1) : SEQ_START_TOKEN;
 }
@@ -2772,7 +2792,9 @@ static void *igmp_mc_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
 	struct ip_mc_list *im;
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		im = igmp_mc_get_first(seq);
+}
 	else
 		im = igmp_mc_get_next(seq, v);
 	++*pos;
@@ -2791,6 +2813,7 @@ static void igmp_mc_seq_stop(struct seq_file *seq, void *v)
 
 static int igmp_mc_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (v == SEQ_START_TOKEN)
 		seq_puts(seq,
 			 "Idx\tDevice    : Count Querier\tGroup    Users Timer\tReporter\n");
@@ -2833,6 +2856,7 @@ static const struct seq_operations igmp_mc_seq_ops = {
 
 static int igmp_mc_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &igmp_mc_seq_ops,
 			sizeof(struct igmp_mc_iter_state));
 }
@@ -2856,6 +2880,7 @@ struct igmp_mcf_iter_state {
 
 static inline struct ip_sf_list *igmp_mcf_get_first(struct seq_file *seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = seq_file_net(seq);
 	struct ip_sf_list *psf = NULL;
 	struct ip_mc_list *im = NULL;
@@ -2888,6 +2913,7 @@ static struct ip_sf_list *igmp_mcf_get_next(struct seq_file *seq, struct ip_sf_l
 	struct igmp_mcf_iter_state *state = igmp_mcf_seq_private(seq);
 
 	psf = psf->sf_next;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!psf) {
 		spin_unlock_bh(&state->im->lock);
 		state->im = state->im->next;
@@ -2913,6 +2939,7 @@ static struct ip_sf_list *igmp_mcf_get_next(struct seq_file *seq, struct ip_sf_l
 
 static struct ip_sf_list *igmp_mcf_get_idx(struct seq_file *seq, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_sf_list *psf = igmp_mcf_get_first(seq);
 	if (psf)
 		while (pos && (psf = igmp_mcf_get_next(seq, psf)) != NULL)
@@ -2923,6 +2950,7 @@ static struct ip_sf_list *igmp_mcf_get_idx(struct seq_file *seq, loff_t pos)
 static void *igmp_mcf_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(rcu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	return *pos ? igmp_mcf_get_idx(seq, *pos - 1) : SEQ_START_TOKEN;
 }
@@ -2931,7 +2959,9 @@ static void *igmp_mcf_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
 	struct ip_sf_list *psf;
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		psf = igmp_mcf_get_first(seq);
+}
 	else
 		psf = igmp_mcf_get_next(seq, v);
 	++*pos;
@@ -2943,6 +2973,7 @@ static void igmp_mcf_seq_stop(struct seq_file *seq, void *v)
 {
 	struct igmp_mcf_iter_state *state = igmp_mcf_seq_private(seq);
 	if (likely(state->im)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&state->im->lock);
 		state->im = NULL;
 	}
@@ -2957,6 +2988,7 @@ static int igmp_mcf_seq_show(struct seq_file *seq, void *v)
 	struct igmp_mcf_iter_state *state = igmp_mcf_seq_private(seq);
 
 	if (v == SEQ_START_TOKEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_puts(seq, "Idx Device        MCA        SRC    INC    EXC\n");
 	} else {
 		seq_printf(seq,
@@ -2980,6 +3012,7 @@ static const struct seq_operations igmp_mcf_seq_ops = {
 
 static int igmp_mcf_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &igmp_mcf_seq_ops,
 			sizeof(struct igmp_mcf_iter_state));
 }
@@ -3007,11 +3040,13 @@ static int __net_init igmp_net_init(struct net *net)
 	err = inet_ctl_sock_create(&net->ipv4.mc_autojoin_sk, AF_INET,
 				   SOCK_DGRAM, 0, net);
 	if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Failed to initialize the IGMP autojoin socket (err %d)\n",
 		       err);
 		goto out_sock;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_sock:
@@ -3038,6 +3073,7 @@ static struct pernet_operations igmp_net_ops = {
 static int igmp_netdev_event(struct notifier_block *this,
 			     unsigned long event, void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = netdev_notifier_info_to_dev(ptr);
 	struct in_device *in_dev;
 
@@ -3045,7 +3081,9 @@ static int igmp_netdev_event(struct notifier_block *this,
 	case NETDEV_RESEND_IGMP:
 		in_dev = __in_dev_get_rtnl(dev);
 		if (in_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ip_mc_rejoin_groups(in_dev);
+}
 		break;
 	default:
 		break;
@@ -3064,10 +3102,13 @@ int __init igmp_mc_init(void)
 
 	err = register_pernet_subsys(&igmp_net_ops);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	err = register_netdevice_notifier(&igmp_notifier);
 	if (err)
 		goto reg_notif_fail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 reg_notif_fail:
diff --git a/net/ipv4/inet_connection_sock.c b/net/ipv4/inet_connection_sock.c
index 0cc08c5..6aac3ba 100644
--- a/net/ipv4/inet_connection_sock.c
+++ b/net/ipv4/inet_connection_sock.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -50,17 +52,27 @@ static int ipv6_rcv_saddr_equal(const struct in6_addr *sk1_rcv_saddr6,
 
 	/* if both are mapped, treat as IPv4 */
 	if (addr_type == IPV6_ADDR_MAPPED && addr_type2 == IPV6_ADDR_MAPPED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!sk2_ipv6only) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk1_rcv_saddr == sk2_rcv_saddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!sk1_rcv_saddr || !sk2_rcv_saddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return match_wildcard;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 
 	if (addr_type == IPV6_ADDR_ANY && addr_type2 == IPV6_ADDR_ANY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	if (addr_type2 == IPV6_ADDR_ANY && match_wildcard &&
 	    !(sk2_ipv6only && addr_type == IPV6_ADDR_MAPPED))
@@ -74,6 +86,7 @@ static int ipv6_rcv_saddr_equal(const struct in6_addr *sk1_rcv_saddr6,
 	    ipv6_addr_equal(sk1_rcv_saddr6, sk2_rcv_saddr6))
 		return 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 #endif
@@ -87,10 +100,16 @@ static int ipv4_rcv_saddr_equal(__be32 sk1_rcv_saddr, __be32 sk2_rcv_saddr,
 {
 	if (!sk2_ipv6only) {
 		if (sk1_rcv_saddr == sk2_rcv_saddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!sk1_rcv_saddr || !sk2_rcv_saddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return match_wildcard;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -117,6 +136,7 @@ void inet_get_local_port_range(struct net *net, int *low, int *high)
 	unsigned int seq;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq = read_seqbegin(&net->ipv4.ip_local_ports.lock);
 
 		*low = net->ipv4.ip_local_ports.range[0];
@@ -157,6 +177,7 @@ static int inet_csk_bind_conflict(const struct sock *sk,
 			}
 			if (!relax && reuse && sk2->sk_reuse &&
 			    sk2->sk_state != TCP_LISTEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (inet_rcv_saddr_equal(sk, sk2, true))
 					break;
 			}
@@ -185,7 +206,9 @@ inet_csk_find_open_port(struct sock *sk, struct inet_bind_bucket **tb_ret, int *
 	inet_get_local_port_range(net, &low, &high);
 	high++; /* [32768, 60999] -> [32768, 61000[ */
 	if (high - low < 4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		attempt_half = 0;
+}
 	if (attempt_half) {
 		int half = low + (((high - low) >> 2) << 1);
 
@@ -208,7 +231,9 @@ inet_csk_find_open_port(struct sock *sk, struct inet_bind_bucket **tb_ret, int *
 	port = low + offset;
 	for (i = 0; i < remaining; i += 2, port += 2) {
 		if (unlikely(port >= high))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			port -= remaining;
+}
 		if (inet_is_local_reserved_port(net, port))
 			continue;
 		head = &hinfo->bhash[inet_bhashfn(net, port,
@@ -216,10 +241,12 @@ inet_csk_find_open_port(struct sock *sk, struct inet_bind_bucket **tb_ret, int *
 		spin_lock_bh(&head->lock);
 		inet_bind_bucket_for_each(tb, &head->chain)
 			if (net_eq(ib_net(tb), net) && tb->port == port) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!inet_csk_bind_conflict(sk, tb, false, false))
 					goto success;
 				goto next_port;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tb = NULL;
 		goto success;
 next_port:
@@ -227,15 +254,18 @@ inet_csk_find_open_port(struct sock *sk, struct inet_bind_bucket **tb_ret, int *
 		cond_resched();
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset--;
 	if (!(offset & 1))
 		goto other_parity_scan;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (attempt_half == 1) {
 		/* OK we now try the upper half of the range */
 		attempt_half = 2;
 		goto other_half_scan;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 success:
 	*port_ret = port;
@@ -249,20 +279,30 @@ static inline int sk_reuseport_match(struct inet_bind_bucket *tb,
 	kuid_t uid = sock_i_uid(sk);
 
 	if (tb->fastreuseport <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (!sk->sk_reuseport)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (rcu_access_pointer(sk->sk_reuseport_cb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (!uid_eq(tb->fastuid, uid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	/* We only need to check the rcv_saddr if this tb was once marked
 	 * without fastreuseport and then was reset, as we can only know that
 	 * the fast_*rcv_saddr doesn't have any conflicts with the socks on the
 	 * owners list.
 	 */
 	if (tb->fastreuseport == FASTREUSEPORT_ANY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 #if IS_ENABLED(CONFIG_IPV6)
 	if (tb->fast_sk_family == AF_INET6)
 		return ipv6_rcv_saddr_equal(&tb->fast_v6_rcv_saddr,
@@ -293,7 +333,9 @@ int inet_csk_get_port(struct sock *sk, unsigned short snum)
 	if (!port) {
 		head = inet_csk_find_open_port(sk, &tb, &port);
 		if (!head)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
+}
 		if (!tb)
 			goto tb_not_found;
 		goto success;
@@ -351,6 +393,7 @@ int inet_csk_get_port(struct sock *sk, unsigned short snum)
 			 * socks.
 			 */
 			if (!sk_reuseport_match(tb, sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tb->fastreuseport = FASTREUSEPORT_STRICT;
 				tb->fastuid = uid;
 				tb->fast_rcv_saddr = sk->sk_rcv_saddr;
@@ -381,6 +424,7 @@ EXPORT_SYMBOL_GPL(inet_csk_get_port);
  */
 static int inet_csk_wait_for_connect(struct sock *sk, long timeo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	DEFINE_WAIT(wait);
 	int err;
@@ -405,17 +449,21 @@ static int inet_csk_wait_for_connect(struct sock *sk, long timeo)
 		release_sock(sk);
 		if (reqsk_queue_empty(&icsk->icsk_accept_queue))
 			timeo = schedule_timeout(timeo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sched_annotate_sleep();
 		lock_sock(sk);
 		err = 0;
 		if (!reqsk_queue_empty(&icsk->icsk_accept_queue))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		if (sk->sk_state != TCP_LISTEN)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sock_intr_errno(timeo);
 		if (signal_pending(current))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EAGAIN;
 		if (!timeo)
 			break;
@@ -429,6 +477,7 @@ static int inet_csk_wait_for_connect(struct sock *sk, long timeo)
  */
 struct sock *inet_csk_accept(struct sock *sk, int flags, int *err, bool kern)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct request_sock_queue *queue = &icsk->icsk_accept_queue;
 	struct request_sock *req;
@@ -462,6 +511,7 @@ struct sock *inet_csk_accept(struct sock *sk, int flags, int *err, bool kern)
 
 	if (sk->sk_protocol == IPPROTO_TCP &&
 	    tcp_rsk(req)->tfo_listener) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_bh(&queue->fastopenq.lock);
 		if (tcp_rsk(req)->tfo_listener) {
 			/* We are still waiting for the final ACK from 3WHS
@@ -473,6 +523,7 @@ struct sock *inet_csk_accept(struct sock *sk, int flags, int *err, bool kern)
 			req->sk = NULL;
 			req = NULL;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&queue->fastopenq.lock);
 	}
 out:
@@ -498,6 +549,7 @@ void inet_csk_init_xmit_timers(struct sock *sk,
 			       void (*delack_handler)(unsigned long),
 			       void (*keepalive_handler)(unsigned long))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
 	setup_timer(&icsk->icsk_retransmit_timer, retransmit_handler,
@@ -511,6 +563,7 @@ EXPORT_SYMBOL(inet_csk_init_xmit_timers);
 
 void inet_csk_clear_xmit_timers(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
 	icsk->icsk_pending = icsk->icsk_ack.pending = icsk->icsk_ack.blocked = 0;
@@ -537,6 +590,7 @@ struct dst_entry *inet_csk_route_req(const struct sock *sk,
 				     struct flowi4 *fl4,
 				     const struct request_sock *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_request_sock *ireq = inet_rsk(req);
 	struct net *net = read_pnet(&ireq->ireq_net);
 	struct ip_options_rcu *opt;
@@ -570,6 +624,7 @@ struct dst_entry *inet_csk_route_child_sock(const struct sock *sk,
 					    struct sock *newsk,
 					    const struct request_sock *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_request_sock *ireq = inet_rsk(req);
 	struct net *net = read_pnet(&ireq->ireq_net);
 	struct inet_sock *newinet = inet_sk(newsk);
@@ -614,6 +669,7 @@ static inline void syn_ack_recalc(struct request_sock *req, const int thresh,
 				  const u8 rskq_defer_accept,
 				  int *expire, int *resend)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!rskq_defer_accept) {
 		*expire = req->num_timeout >= thresh;
 		*resend = 1;
@@ -632,6 +688,7 @@ static inline void syn_ack_recalc(struct request_sock *req, const int thresh,
 
 int inet_rtx_syn_ack(const struct sock *parent, struct request_sock *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int err = req->rsk_ops->rtx_syn_ack(parent, req);
 
 	if (!err)
@@ -648,6 +705,7 @@ static bool reqsk_queue_unlink(struct request_sock_queue *queue,
 	bool found = false;
 
 	if (sk_hashed(req_to_sk(req))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spinlock_t *lock = inet_ehash_lockp(hashinfo, req->rsk_hash);
 
 		spin_lock(lock);
@@ -662,6 +720,7 @@ static bool reqsk_queue_unlink(struct request_sock_queue *queue,
 void inet_csk_reqsk_queue_drop(struct sock *sk, struct request_sock *req)
 {
 	if (reqsk_queue_unlink(&inet_csk(sk)->icsk_accept_queue, req)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		reqsk_queue_removed(&inet_csk(sk)->icsk_accept_queue, req);
 		reqsk_put(req);
 	}
@@ -670,6 +729,7 @@ EXPORT_SYMBOL(inet_csk_reqsk_queue_drop);
 
 void inet_csk_reqsk_queue_drop_and_put(struct sock *sk, struct request_sock *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet_csk_reqsk_queue_drop(sk, req);
 	reqsk_put(req);
 }
@@ -689,6 +749,7 @@ static void reqsk_timer_handler(unsigned long data)
 	if (sk_state_load(sk_listener) != TCP_LISTEN)
 		goto drop;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	max_retries = icsk->icsk_syn_retries ? : net->ipv4.sysctl_tcp_synack_retries;
 	thresh = max_retries;
 	/* Normally all the openreqs are young and become mature
@@ -783,6 +844,7 @@ struct sock *inet_csk_clone_lock(const struct sock *sk,
 	struct sock *newsk = sk_clone_lock(sk, priority);
 
 	if (newsk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct inet_connection_sock *newicsk = inet_csk(newsk);
 
 		newsk->sk_state = TCP_SYN_RECV;
@@ -837,6 +899,7 @@ void inet_csk_destroy_sock(struct sock *sk)
 
 	xfrm_sk_free_policy(sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_refcnt_debug_release(sk);
 
 	percpu_counter_dec(sk->sk_prot->orphan_count);
@@ -864,6 +927,7 @@ EXPORT_SYMBOL(inet_csk_prepare_forced_close);
 
 int inet_csk_listen_start(struct sock *sk, int backlog)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct inet_sock *inet = inet_sk(sk);
 	int err = -EADDRINUSE;
@@ -887,9 +951,12 @@ int inet_csk_listen_start(struct sock *sk, int backlog)
 		err = sk->sk_prot->hash(sk);
 
 		if (likely(!err))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk->sk_state = TCP_CLOSE;
 	return err;
 }
@@ -898,6 +965,7 @@ EXPORT_SYMBOL_GPL(inet_csk_listen_start);
 static void inet_child_forget(struct sock *sk, struct request_sock *req,
 			      struct sock *child)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk->sk_prot->disconnect(child, O_NONBLOCK);
 
 	sock_orphan(child);
@@ -923,10 +991,12 @@ struct sock *inet_csk_reqsk_queue_add(struct sock *sk,
 				      struct request_sock *req,
 				      struct sock *child)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct request_sock_queue *queue = &inet_csk(sk)->icsk_accept_queue;
 
 	spin_lock(&queue->rskq_lock);
 	if (unlikely(sk->sk_state != TCP_LISTEN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_child_forget(sk, req, child);
 		child = NULL;
 	} else {
@@ -939,6 +1009,7 @@ struct sock *inet_csk_reqsk_queue_add(struct sock *sk,
 		queue->rskq_accept_tail = req;
 		sk_acceptq_added(sk);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&queue->rskq_lock);
 	return child;
 }
@@ -951,7 +1022,9 @@ struct sock *inet_csk_complete_hashdance(struct sock *sk, struct sock *child,
 		inet_csk_reqsk_queue_drop(sk, req);
 		reqsk_queue_removed(&inet_csk(sk)->icsk_accept_queue, req);
 		if (inet_csk_reqsk_queue_add(sk, req, child))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return child;
+}
 	}
 	/* Too bad, another child took ownership of the request, undo. */
 	bh_unlock_sock(child);
@@ -966,6 +1039,7 @@ EXPORT_SYMBOL(inet_csk_complete_hashdance);
  */
 void inet_csk_listen_stop(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct request_sock_queue *queue = &icsk->icsk_accept_queue;
 	struct request_sock *next, *req;
@@ -983,6 +1057,7 @@ void inet_csk_listen_stop(struct sock *sk)
 
 		local_bh_disable();
 		bh_lock_sock(child);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(sock_owned_by_user(child));
 		sock_hold(child);
 
@@ -1000,7 +1075,9 @@ void inet_csk_listen_stop(struct sock *sk)
 		req = queue->fastopenq.rskq_rst_head;
 		queue->fastopenq.rskq_rst_head = NULL;
 		spin_unlock_bh(&queue->fastopenq.lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (req != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			next = req->dl_next;
 			reqsk_put(req);
 			req = next;
@@ -1025,6 +1102,7 @@ EXPORT_SYMBOL_GPL(inet_csk_addr2sockaddr);
 int inet_csk_compat_getsockopt(struct sock *sk, int level, int optname,
 			       char __user *optval, int __user *optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 
 	if (icsk->icsk_af_ops->compat_getsockopt)
@@ -1038,6 +1116,7 @@ EXPORT_SYMBOL_GPL(inet_csk_compat_getsockopt);
 int inet_csk_compat_setsockopt(struct sock *sk, int level, int optname,
 			       char __user *optval, unsigned int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 
 	if (icsk->icsk_af_ops->compat_setsockopt)
@@ -1051,6 +1130,7 @@ EXPORT_SYMBOL_GPL(inet_csk_compat_setsockopt);
 
 static struct dst_entry *inet_csk_rebuild_route(struct sock *sk, struct flowi *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_sock *inet = inet_sk(sk);
 	const struct ip_options_rcu *inet_opt;
 	__be32 daddr = inet->inet_daddr;
@@ -1077,6 +1157,7 @@ static struct dst_entry *inet_csk_rebuild_route(struct sock *sk, struct flowi *f
 
 struct dst_entry *inet_csk_update_pmtu(struct sock *sk, u32 mtu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dst_entry *dst = __sk_dst_check(sk, 0);
 	struct inet_sock *inet = inet_sk(sk);
 
diff --git a/net/ipv4/inet_diag.c b/net/ipv4/inet_diag.c
index c9c35b6..9726014 100644
--- a/net/ipv4/inet_diag.c
+++ b/net/ipv4/inet_diag.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * inet_diag.c	Module for monitoring INET transport protocols sockets.
  *
diff --git a/net/ipv4/inet_fragment.c b/net/ipv4/inet_fragment.c
index af74d04..d723015 100644
--- a/net/ipv4/inet_fragment.c
+++ b/net/ipv4/inet_fragment.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * inet fragments management
  *
@@ -55,11 +57,13 @@ EXPORT_SYMBOL(ip_frag_ecn_table);
 static unsigned int
 inet_frag_hashfn(const struct inet_frags *f, const struct inet_frag_queue *q)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return f->hashfn(q) & (INETFRAGS_HASHSZ - 1);
 }
 
 static bool inet_frag_may_rebuild(struct inet_frags *f)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return time_after(jiffies,
 	       f->last_rebuild_jiffies + INETFRAGS_MIN_REBUILD_INTERVAL);
 }
@@ -73,6 +77,7 @@ static void inet_frag_secret_rebuild(struct inet_frags *f)
 	if (!inet_frag_may_rebuild(f))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	get_random_bytes(&f->rnd, sizeof(u32));
 
 	for (i = 0; i < INETFRAGS_HASHSZ; i++) {
@@ -119,6 +124,7 @@ static void inet_frag_secret_rebuild(struct inet_frags *f)
 
 static bool inet_fragq_should_evict(const struct inet_frag_queue *q)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return q->net->low_thresh == 0 ||
 	       frag_mem_limit(q->net) >= q->net->low_thresh;
 }
@@ -134,16 +140,20 @@ inet_evict_bucket(struct inet_frags *f, struct inet_frag_bucket *hb)
 	spin_lock(&hb->chain_lock);
 
 	hlist_for_each_entry_safe(fq, n, &hb->chain, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!inet_fragq_should_evict(fq))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!del_timer(&fq->timer))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hlist_add_head(&fq->list_evictor, &expired);
 		++evicted;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&hb->chain_lock);
 
 	hlist_for_each_entry_safe(fq, n, &expired, list_evictor)
@@ -158,6 +168,7 @@ static void inet_frag_worker(struct work_struct *work)
 	unsigned int i, evicted = 0;
 	struct inet_frags *f;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	f = container_of(work, struct inet_frags, frags_work);
 
 	BUILD_BUG_ON(INETFRAGS_EVICT_BUCKETS >= INETFRAGS_HASHSZ);
@@ -181,6 +192,7 @@ static void inet_frag_worker(struct work_struct *work)
 
 static void inet_frag_schedule_worker(struct inet_frags *f)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(!work_pending(&f->frags_work)))
 		schedule_work(&f->frags_work);
 }
@@ -203,7 +215,9 @@ int inet_frags_init(struct inet_frags *f)
 	f->frags_cachep = kmem_cache_create(f->frags_cache_name, f->qsize, 0, 0,
 					    NULL);
 	if (!f->frags_cachep)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
@@ -211,6 +225,7 @@ EXPORT_SYMBOL(inet_frags_init);
 
 void inet_frags_fini(struct inet_frags *f)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cancel_work_sync(&f->frags_work);
 	kmem_cache_destroy(f->frags_cachep);
 }
@@ -273,6 +288,7 @@ static inline void fq_unlink(struct inet_frag_queue *fq, struct inet_frags *f)
 
 void inet_frag_kill(struct inet_frag_queue *fq, struct inet_frags *f)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (del_timer(&fq->timer))
 		refcount_dec(&fq->refcnt);
 
@@ -289,6 +305,7 @@ void inet_frag_destroy(struct inet_frag_queue *q, struct inet_frags *f)
 	struct netns_frags *nf;
 	unsigned int sum, sum_truesize = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!(q->flags & INET_FRAG_COMPLETE));
 	WARN_ON(del_timer(&q->timer) != 0);
 
@@ -317,6 +334,7 @@ static struct inet_frag_queue *inet_frag_intern(struct netns_frags *nf,
 						struct inet_frags *f,
 						void *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_frag_bucket *hb = get_frag_bucket_locked(qp_in, f);
 	struct inet_frag_queue *qp;
 
@@ -353,6 +371,7 @@ static struct inet_frag_queue *inet_frag_alloc(struct netns_frags *nf,
 {
 	struct inet_frag_queue *q;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!nf->high_thresh || frag_mem_limit(nf) > nf->high_thresh) {
 		inet_frag_schedule_worker(f);
 		return NULL;
@@ -381,7 +400,9 @@ static struct inet_frag_queue *inet_frag_create(struct netns_frags *nf,
 
 	q = inet_frag_alloc(nf, f, arg);
 	if (!q)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	return inet_frag_intern(nf, q, f, arg);
 }
@@ -395,7 +416,9 @@ struct inet_frag_queue *inet_frag_find(struct netns_frags *nf,
 	int depth = 0;
 
 	if (frag_mem_limit(nf) > nf->low_thresh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_frag_schedule_worker(f);
+}
 
 	hash &= (INETFRAGS_HASHSZ - 1);
 	hb = &f->hash[hash];
@@ -432,6 +455,8 @@ void inet_frag_maybe_warn_overflow(struct inet_frag_queue *q,
 		". Dropping fragment.\n";
 
 	if (PTR_ERR(q) == -ENOBUFS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_dbg_ratelimited("%s%s", prefix, msg);
 }
+}
 EXPORT_SYMBOL(inet_frag_maybe_warn_overflow);
diff --git a/net/ipv4/inet_hashtables.c b/net/ipv4/inet_hashtables.c
index e7d15fb0..b880f98 100644
--- a/net/ipv4/inet_hashtables.c
+++ b/net/ipv4/inet_hashtables.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the BSD Socket
@@ -69,6 +71,7 @@ struct inet_bind_bucket *inet_bind_bucket_create(struct kmem_cache *cachep,
 	struct inet_bind_bucket *tb = kmem_cache_alloc(cachep, GFP_ATOMIC);
 
 	if (tb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_pnet(&tb->ib_net, net);
 		tb->port      = snum;
 		tb->fastreuse = 0;
@@ -120,6 +123,7 @@ static void __inet_put_port(struct sock *sk)
 
 void inet_put_port(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_bh_disable();
 	__inet_put_port(sk);
 	local_bh_enable();
@@ -138,6 +142,7 @@ int __inet_inherit_port(const struct sock *sk, struct sock *child)
 	spin_lock(&head->lock);
 	tb = inet_csk(sk)->icsk_bind_hash;
 	if (unlikely(!tb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&head->lock);
 		return -ENOENT;
 	}
@@ -148,19 +153,23 @@ int __inet_inherit_port(const struct sock *sk, struct sock *child)
 		 * as that of the child socket. We have to look up or
 		 * create a new bind bucket for the child here. */
 		inet_bind_bucket_for_each(tb, &head->chain) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (net_eq(ib_net(tb), sock_net(sk)) &&
 			    tb->port == port)
 				break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!tb) {
 			tb = inet_bind_bucket_create(table->bind_bucket_cachep,
 						     sock_net(sk), head, port);
 			if (!tb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&head->lock);
 				return -ENOMEM;
 			}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet_bind_hash(child, tb, port);
 	spin_unlock(&head->lock);
 
@@ -181,21 +190,33 @@ static inline int compute_score(struct sock *sk, struct net *net,
 		score = sk->sk_family == PF_INET ? 2 : 1;
 		if (rcv_saddr) {
 			if (rcv_saddr != daddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -1;
+}
 			score += 4;
 		}
 		if (sk->sk_bound_dev_if || exact_dif) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bool dev_match = (sk->sk_bound_dev_if == dif ||
 					  sk->sk_bound_dev_if == sdif);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (exact_dif && !dev_match)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk->sk_bound_dev_if && dev_match)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				score += 4;
+}
 		}
 		if (sk->sk_incoming_cpu == raw_smp_processor_id())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			score++;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return score;
 }
 
@@ -227,23 +248,33 @@ struct sock *__inet_lookup_listener(struct net *net,
 		if (score > hiscore) {
 			reuseport = sk->sk_reuseport;
 			if (reuseport) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				phash = inet_ehashfn(net, daddr, hnum,
 						     saddr, sport);
 				result = reuseport_select_sock(sk, phash,
 							       skb, doff);
 				if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return result;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				matches = 1;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			result = sk;
 			hiscore = score;
 		} else if (score == hiscore && reuseport) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			matches++;
 			if (reciprocal_scale(phash, matches) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				result = sk;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			phash = next_pseudo_random32(phash);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return result;
 }
 EXPORT_SYMBOL_GPL(__inet_lookup_listener);
@@ -252,12 +283,20 @@ EXPORT_SYMBOL_GPL(__inet_lookup_listener);
 void sock_gen_put(struct sock *sk)
 {
 	if (!refcount_dec_and_test(&sk->sk_refcnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sk->sk_state == TCP_TIME_WAIT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_twsk_free(inet_twsk(sk));
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (sk->sk_state == TCP_NEW_SYN_RECV)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		reqsk_free(inet_reqsk(sk));
+}
 	else
 		sk_free(sk);
 }
@@ -297,6 +336,7 @@ struct sock *__inet_lookup_established(struct net *net,
 			if (unlikely(!INET_MATCH(sk, net, acookie,
 						 saddr, daddr, ports,
 						 dif, sdif))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sock_gen_put(sk);
 				goto begin;
 			}
@@ -342,12 +382,16 @@ static int __inet_check_established(struct inet_timewait_death_row *death_row,
 	spin_lock(lock);
 
 	sk_nulls_for_each(sk2, node, &head->chain) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sk2->sk_hash != hash)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (likely(INET_MATCH(sk2, net, acookie,
 					 saddr, daddr, ports, dif, sdif))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk2->sk_state == TCP_TIME_WAIT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tw = inet_twsk(sk2);
 				if (twsk_unique(sk, sk2, twp))
 					break;
@@ -365,18 +409,23 @@ static int __inet_check_established(struct inet_timewait_death_row *death_row,
 	WARN_ON(!sk_unhashed(sk));
 	__sk_nulls_add_node_rcu(sk, &head->chain);
 	if (tw) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_nulls_del_node_init_rcu((struct sock *)tw);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__NET_INC_STATS(net, LINUX_MIB_TIMEWAITRECYCLED);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(lock);
 	sock_prot_inuse_add(sock_net(sk), sk->sk_prot, 1);
 
 	if (twp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*twp = tw;
 	} else if (tw) {
 		/* Silly. Should hash-dance instead... */
 		inet_twsk_deschedule_put(tw);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 not_unique:
@@ -386,6 +435,7 @@ static int __inet_check_established(struct inet_timewait_death_row *death_row,
 
 static u32 inet_sk_port_offset(const struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_sock *inet = inet_sk(sk);
 
 	return secure_ipv4_port_ephemeral(inet->inet_rcv_saddr,
@@ -417,7 +467,10 @@ bool inet_ehash_insert(struct sock *sk, struct sock *osk)
 		ret = sk_nulls_del_node_init_rcu(osk);
 	}
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__sk_nulls_add_node_rcu(sk, list);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(lock);
 	return ret;
 }
@@ -429,6 +482,7 @@ bool inet_ehash_nolisten(struct sock *sk, struct sock *osk)
 	if (ok) {
 		sock_prot_inuse_add(sock_net(sk), sk->sk_prot, 1);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		percpu_counter_inc(sk->sk_prot->orphan_count);
 		sk->sk_state = TCP_CLOSE;
 		sock_set_flag(sk, SOCK_DEAD);
@@ -446,6 +500,7 @@ static int inet_reuseport_add_sock(struct sock *sk,
 	kuid_t uid = sock_i_uid(sk);
 
 	sk_for_each_rcu(sk2, &ilb->head) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sk2 != sk &&
 		    sk2->sk_family == sk->sk_family &&
 		    ipv6_only_sock(sk2) == ipv6_only_sock(sk) &&
@@ -466,6 +521,7 @@ int __inet_hash(struct sock *sk, struct sock *osk)
 	int err = 0;
 
 	if (sk->sk_state != TCP_LISTEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_ehash_nolisten(sk, osk);
 		return 0;
 	}
@@ -483,6 +539,7 @@ int __inet_hash(struct sock *sk, struct sock *osk)
 		hlist_add_tail_rcu(&sk->sk_node, &ilb->head);
 	else
 		hlist_add_head_rcu(&sk->sk_node, &ilb->head);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock_set_flag(sk, SOCK_RCU_FREE);
 	sock_prot_inuse_add(sock_net(sk), sk->sk_prot, 1);
 unlock:
@@ -497,6 +554,7 @@ int inet_hash(struct sock *sk)
 	int err = 0;
 
 	if (sk->sk_state != TCP_CLOSE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_bh_disable();
 		err = __inet_hash(sk, NULL);
 		local_bh_enable();
@@ -514,7 +572,9 @@ void inet_unhash(struct sock *sk)
 	int done;
 
 	if (sk_unhashed(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (sk->sk_state == TCP_LISTEN) {
 		lock = &hashinfo->listening_hash[inet_sk_listen_hashfn(sk)].lock;
@@ -522,15 +582,19 @@ void inet_unhash(struct sock *sk)
 	} else {
 		lock = inet_ehash_lockp(hashinfo, sk->sk_hash);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(lock);
 	if (rcu_access_pointer(sk->sk_reuseport_cb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		reuseport_detach_sock(sk);
+}
 	if (listener)
 		done = __sk_del_node_init(sk);
 	else
 		done = __sk_nulls_del_node_init_rcu(sk);
 	if (done)
 		sock_prot_inuse_add(sock_net(sk), sk->sk_prot, -1);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(lock);
 }
 EXPORT_SYMBOL_GPL(inet_unhash);
@@ -556,10 +620,12 @@ int __inet_hash_connect(struct inet_timewait_death_row *death_row,
 		tb = inet_csk(sk)->icsk_bind_hash;
 		spin_lock_bh(&head->lock);
 		if (sk_head(&tb->owners) == sk && !sk->sk_bind_node.next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_ehash_nolisten(sk, NULL);
 			spin_unlock_bh(&head->lock);
 			return 0;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&head->lock);
 		/* No definite answer... Walk to established hash table */
 		ret = check_established(death_row, sk, port, NULL);
@@ -582,7 +648,9 @@ int __inet_hash_connect(struct inet_timewait_death_row *death_row,
 	port = low + offset;
 	for (i = 0; i < remaining; i += 2, port += 2) {
 		if (unlikely(port >= high))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			port -= remaining;
+}
 		if (inet_is_local_reserved_port(net, port))
 			continue;
 		head = &hinfo->bhash[inet_bhashfn(net, port,
@@ -593,10 +661,13 @@ int __inet_hash_connect(struct inet_timewait_death_row *death_row,
 		 * the established check is already unique enough.
 		 */
 		inet_bind_bucket_for_each(tb, &head->chain) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (net_eq(ib_net(tb), net) && tb->port == port) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (tb->fastreuse >= 0 ||
 				    tb->fastreuseport >= 0)
 					goto next_port;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				WARN_ON(hlist_empty(&tb->owners));
 				if (!check_established(death_row, sk,
 						       port, &tw))
@@ -608,6 +679,7 @@ int __inet_hash_connect(struct inet_timewait_death_row *death_row,
 		tb = inet_bind_bucket_create(hinfo->bind_bucket_cachep,
 					     net, head, port);
 		if (!tb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_bh(&head->lock);
 			return -ENOMEM;
 		}
@@ -619,10 +691,13 @@ int __inet_hash_connect(struct inet_timewait_death_row *death_row,
 		cond_resched();
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset++;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((offset & 1) && remaining > 1)
 		goto other_parity_scan;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EADDRNOTAVAIL;
 
 ok:
@@ -635,10 +710,15 @@ int __inet_hash_connect(struct inet_timewait_death_row *death_row,
 		inet_ehash_nolisten(sk, (struct sock *)tw);
 	}
 	if (tw)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_twsk_bind_unhash(tw, hinfo);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&head->lock);
 	if (tw)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_twsk_deschedule_put(tw);
+}
 	local_bh_enable();
 	return 0;
 }
@@ -684,7 +764,9 @@ int inet_ehash_locks_alloc(struct inet_hashinfo *hashinfo)
 
 		hashinfo->ehash_locks = kvmalloc_array(nblocks, locksz, GFP_KERNEL);
 		if (!hashinfo->ehash_locks)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
 		for (i = 0; i < nblocks; i++)
 			spin_lock_init(&hashinfo->ehash_locks[i]);
diff --git a/net/ipv4/inet_timewait_sock.c b/net/ipv4/inet_timewait_sock.c
index d451b9f..63f30d3 100644
--- a/net/ipv4/inet_timewait_sock.c
+++ b/net/ipv4/inet_timewait_sock.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -31,7 +33,9 @@ void inet_twsk_bind_unhash(struct inet_timewait_sock *tw,
 	struct inet_bind_bucket *tb = tw->tw_tb;
 
 	if (!tb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	__hlist_del(&tw->tw_bind_node);
 	tw->tw_tb = NULL;
@@ -76,8 +80,10 @@ void inet_twsk_free(struct inet_timewait_sock *tw)
 void inet_twsk_put(struct inet_timewait_sock *tw)
 {
 	if (refcount_dec_and_test(&tw->tw_refcnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_twsk_free(tw);
 }
+}
 EXPORT_SYMBOL_GPL(inet_twsk_put);
 
 static void inet_twsk_add_node_rcu(struct inet_timewait_sock *tw,
@@ -100,6 +106,7 @@ static void inet_twsk_add_bind_node(struct inet_timewait_sock *tw,
 void __inet_twsk_hashdance(struct inet_timewait_sock *tw, struct sock *sk,
 			   struct inet_hashinfo *hashinfo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_sock *inet = inet_sk(sk);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	struct inet_ehash_bucket *ehead = inet_ehash_bucket(hashinfo, sk->sk_hash);
@@ -137,6 +144,7 @@ void __inet_twsk_hashdance(struct inet_timewait_sock *tw, struct sock *sk,
 	if (__sk_nulls_del_node_init_rcu(sk))
 		sock_prot_inuse_add(sock_net(sk), sk->sk_prot, -1);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(lock);
 }
 EXPORT_SYMBOL_GPL(__inet_twsk_hashdance);
@@ -146,7 +154,9 @@ static void tw_timer_handler(unsigned long data)
 	struct inet_timewait_sock *tw = (struct inet_timewait_sock *)data;
 
 	if (tw->tw_kill)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__NET_INC_STATS(twsk_net(tw), LINUX_MIB_TIMEWAITKILLED);
+}
 	else
 		__NET_INC_STATS(twsk_net(tw), LINUX_MIB_TIMEWAITED);
 	inet_twsk_kill(tw);
@@ -159,11 +169,14 @@ struct inet_timewait_sock *inet_twsk_alloc(const struct sock *sk,
 	struct inet_timewait_sock *tw;
 
 	if (atomic_read(&dr->tw_count) >= dr->sysctl_max_tw_buckets)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	tw = kmem_cache_alloc(sk->sk_prot_creator->twsk_prot->twsk_slab,
 			      GFP_ATOMIC);
 	if (tw) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const struct inet_sock *inet = inet_sk(sk);
 
 		tw->tw_dr	    = dr;
@@ -197,6 +210,7 @@ struct inet_timewait_sock *inet_twsk_alloc(const struct sock *sk,
 		__module_get(tw->tw_prot->owner);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return tw;
 }
 EXPORT_SYMBOL_GPL(inet_twsk_alloc);
@@ -211,6 +225,7 @@ EXPORT_SYMBOL_GPL(inet_twsk_alloc);
  */
 void inet_twsk_deschedule_put(struct inet_timewait_sock *tw)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (del_timer_sync(&tw->tw_timer))
 		inet_twsk_kill(tw);
 	inet_twsk_put(tw);
@@ -249,6 +264,7 @@ void __inet_twsk_schedule(struct inet_timewait_sock *tw, int timeo, bool rearm)
 		BUG_ON(mod_timer(&tw->tw_timer, jiffies + timeo));
 		atomic_inc(&tw->tw_dr->tw_count);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mod_timer_pending(&tw->tw_timer, jiffies + timeo);
 	}
 }
@@ -268,22 +284,28 @@ void inet_twsk_purge(struct inet_hashinfo *hashinfo, int family)
 		rcu_read_lock();
 restart:
 		sk_nulls_for_each_rcu(sk, node, &head->chain) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk->sk_state != TCP_TIME_WAIT)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tw = inet_twsk(sk);
 			if ((tw->tw_family != family) ||
 				atomic_read(&twsk_net(tw)->count))
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (unlikely(!refcount_inc_not_zero(&tw->tw_refcnt)))
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (unlikely((tw->tw_family != family) ||
 				     atomic_read(&twsk_net(tw)->count))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				inet_twsk_put(tw);
 				goto restart;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock();
 			local_bh_disable();
 			inet_twsk_deschedule_put(tw);
@@ -296,6 +318,7 @@ void inet_twsk_purge(struct inet_hashinfo *hashinfo, int family)
 		 */
 		if (get_nulls_value(node) != slot)
 			goto restart;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 	}
 }
diff --git a/net/ipv4/inetpeer.c b/net/ipv4/inetpeer.c
index b20c8ac..b83bf52 100644
--- a/net/ipv4/inetpeer.c
+++ b/net/ipv4/inetpeer.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *		INETPEER - A storage for permanent information about peers
  *
@@ -81,11 +83,17 @@ void __init inet_initpeers(void)
 	 * myself.  --SAW
 	 */
 	if (si.totalram <= (32768*1024)/PAGE_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_peer_threshold >>= 1; /* max pool size about 1MB on IA32 */
+}
 	if (si.totalram <= (16384*1024)/PAGE_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_peer_threshold >>= 1; /* about 512KB */
+}
 	if (si.totalram <= (8192*1024)/PAGE_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_peer_threshold >>= 2; /* about 128KB */
+}
 
 	peer_cachep = kmem_cache_create("inet_peer_cache",
 			sizeof(struct inet_peer),
@@ -107,6 +115,7 @@ static struct inet_peer *lookup(const struct inetpeer_addr *daddr,
 
 	pp = &base->rb_root.rb_node;
 	parent = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		int cmp;
 
@@ -139,6 +148,7 @@ static struct inet_peer *lookup(const struct inetpeer_addr *daddr,
 
 static void inetpeer_free_rcu(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_free(peer_cachep, container_of(head, struct inet_peer, rcu));
 }
 
@@ -152,7 +162,9 @@ static void inet_peer_gc(struct inet_peer_base *base,
 	int i;
 
 	if (base->total >= inet_peer_threshold)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ttl = 0; /* be aggressive */
+}
 	else
 		ttl = inet_peer_maxttl
 				- (inet_peer_maxttl - inet_peer_minttl) / HZ *
@@ -192,7 +204,9 @@ struct inet_peer *inet_getpeer(struct inet_peer_base *base,
 	rcu_read_unlock();
 
 	if (p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return p;
+}
 
 	/* If no writer did a change during our lookup, we can return early. */
 	if (!create && !invalidated)
@@ -234,6 +248,7 @@ EXPORT_SYMBOL_GPL(inet_getpeer);
 
 void inet_putpeer(struct inet_peer *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	p->dtime = (__u32)jiffies;
 
 	if (refcount_dec_and_test(&p->refcnt))
@@ -265,7 +280,9 @@ bool inet_peer_xrlim_allow(struct inet_peer *peer, int timeout)
 	bool rc = false;
 
 	if (!peer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	token = peer->rate_tokens;
 	now = jiffies;
@@ -287,6 +304,7 @@ void inetpeer_invalidate_tree(struct inet_peer_base *base)
 	struct inet_peer *p, *n;
 
 	rbtree_postorder_for_each_entry_safe(p, n, &base->rb_root, rb_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_putpeer(p);
 		cond_resched();
 	}
diff --git a/net/ipv4/ip_fragment.c b/net/ipv4/ip_fragment.c
index df8fe05..c2e9238 100644
--- a/net/ipv4/ip_fragment.c
+++ b/net/ipv4/ip_fragment.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
@@ -84,6 +86,7 @@ struct ipq {
 
 static u8 ip4_frag_ecn(u8 tos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1 << (tos & INET_ECN_MASK);
 }
 
@@ -91,6 +94,7 @@ static struct inet_frags ip4_frags;
 
 int ip_frag_mem(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sum_frag_mem_limit(&net->ipv4.frags);
 }
 
@@ -105,6 +109,7 @@ struct ip4_create_arg {
 
 static unsigned int ipqhashfn(__be16 id, __be32 saddr, __be32 daddr, u8 prot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_get_random_once(&ip4_frags.rnd, sizeof(ip4_frags.rnd));
 	return jhash_3words((__force u32)id << 16 | prot,
 			    (__force u32)saddr, (__force u32)daddr,
@@ -115,6 +120,7 @@ static unsigned int ip4_hashfn(const struct inet_frag_queue *q)
 {
 	const struct ipq *ipq;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ipq = container_of(q, struct ipq, q);
 	return ipqhashfn(ipq->id, ipq->saddr, ipq->daddr, ipq->protocol);
 }
@@ -124,6 +130,7 @@ static bool ip4_frag_match(const struct inet_frag_queue *q, const void *a)
 	const struct ipq *qp;
 	const struct ip4_create_arg *arg = a;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	qp = container_of(q, struct ipq, q);
 	return	qp->id == arg->iph->id &&
 		qp->saddr == arg->iph->saddr &&
@@ -135,6 +142,7 @@ static bool ip4_frag_match(const struct inet_frag_queue *q, const void *a)
 
 static void ip4_frag_init(struct inet_frag_queue *q, const void *a)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipq *qp = container_of(q, struct ipq, q);
 	struct netns_ipv4 *ipv4 = container_of(q->net, struct netns_ipv4,
 					       frags);
@@ -158,6 +166,7 @@ static void ip4_frag_free(struct inet_frag_queue *q)
 {
 	struct ipq *qp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	qp = container_of(q, struct ipq, q);
 	if (qp->peer)
 		inet_putpeer(qp->peer);
@@ -168,6 +177,7 @@ static void ip4_frag_free(struct inet_frag_queue *q)
 
 static void ipq_put(struct ipq *ipq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet_frag_put(&ipq->q, &ip4_frags);
 }
 
@@ -176,11 +186,13 @@ static void ipq_put(struct ipq *ipq)
  */
 static void ipq_kill(struct ipq *ipq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet_frag_kill(&ipq->q, &ip4_frags);
 }
 
 static bool frag_expire_skip_icmp(u32 user)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return user == IP_DEFRAG_AF_PACKET ||
 	       ip_defrag_user_in_between(user, IP_DEFRAG_CONNTRACK_IN,
 					 __IP_DEFRAG_CONNTRACK_IN_END) ||
@@ -196,6 +208,7 @@ static void ip_expire(unsigned long arg)
 	struct ipq *qp;
 	struct net *net;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	qp = container_of((struct inet_frag_queue *) arg, struct ipq, q);
 	net = container_of(qp->q.net, struct net, ipv4.frags);
 
@@ -273,6 +286,7 @@ static struct ipq *ip_find(struct net *net, struct iphdr *iph,
 
 	q = inet_frag_find(&net->ipv4.frags, &ip4_frags, &arg, hash);
 	if (IS_ERR_OR_NULL(q)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_frag_maybe_warn_overflow(q, pr_fmt());
 		return NULL;
 	}
@@ -288,6 +302,7 @@ static int ip_frag_too_far(struct ipq *qp)
 
 	int rc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!peer || !max)
 		return 0;
 
@@ -313,6 +328,7 @@ static int ip_frag_reinit(struct ipq *qp)
 	unsigned int sum_truesize = 0;
 
 	if (!mod_timer(&qp->q.timer, jiffies + qp->q.net->timeout)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		refcount_inc(&qp->q.refcnt);
 		return -ETIMEDOUT;
 	}
@@ -352,6 +368,7 @@ static int ip_frag_queue(struct ipq *qp, struct sk_buff *skb)
 	if (qp->q.flags & INET_FRAG_COMPLETE)
 		goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(IPCB(skb)->flags & IPSKB_FRAG_COMPLETE) &&
 	    unlikely(ip_frag_too_far(qp)) &&
 	    unlikely(err = ip_frag_reinit(qp))) {
@@ -532,6 +549,7 @@ static int ip_frag_queue(struct ipq *qp, struct sk_buff *skb)
 static int ip_frag_reasm(struct ipq *qp, struct sk_buff *prev,
 			 struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = container_of(qp->q.net, struct net, ipv4.frags);
 	struct iphdr *iph;
 	struct sk_buff *fp, *head = qp->q.fragments;
@@ -664,6 +682,7 @@ static int ip_frag_reasm(struct ipq *qp, struct sk_buff *prev,
 /* Process an incoming IP datagram fragment. */
 int ip_defrag(struct net *net, struct sk_buff *skb, u32 user)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = skb->dev ? : skb_dst(skb)->dev;
 	int vif = l3mdev_master_ifindex_rcu(dev);
 	struct ipq *qp;
@@ -697,6 +716,7 @@ struct sk_buff *ip_check_defrag(struct net *net, struct sk_buff *skb, u32 user)
 	int netoff;
 	u32 len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (skb->protocol != htons(ETH_P_IP))
 		return skb;
 
@@ -788,6 +808,7 @@ static int __net_init ip4_frags_ns_ctl_register(struct net *net)
 
 	table = ip4_frags_ns_ctl_table;
 	if (!net_eq(net, &init_net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table = kmemdup(table, sizeof(ip4_frags_ns_ctl_table), GFP_KERNEL);
 		if (!table)
 			goto err_alloc;
@@ -810,7 +831,9 @@ static int __net_init ip4_frags_ns_ctl_register(struct net *net)
 
 err_reg:
 	if (!net_eq(net, &init_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(table);
+}
 err_alloc:
 	return -ENOMEM;
 }
@@ -898,5 +921,7 @@ void __init ipfrag_init(void)
 	ip4_frags.frag_expire = ip_expire;
 	ip4_frags.frags_cache_name = ip_frag_cache_name;
 	if (inet_frags_init(&ip4_frags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("IP: failed to allocate ip4_frags cache\n");
 }
+}
diff --git a/net/ipv4/ip_input.c b/net/ipv4/ip_input.c
index 57fc13c..037e822 100644
--- a/net/ipv4/ip_input.c
+++ b/net/ipv4/ip_input.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -159,6 +161,7 @@ bool ip_call_ra_chain(struct sk_buff *skb)
 	struct net_device *dev = skb->dev;
 	struct net *net = dev_net(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (ra = rcu_dereference(ip_ra_chain); ra; ra = rcu_dereference(ra->next)) {
 		struct sock *sk = ra->sk;
 
@@ -207,27 +210,36 @@ static int ip_local_deliver_finish(struct net *net, struct sock *sk, struct sk_b
 			int ret;
 
 			if (!ipprot->no_policy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!xfrm4_policy_check(NULL, XFRM_POLICY_IN, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					kfree_skb(skb);
 					goto out;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				nf_reset(skb);
 			}
 			ret = ipprot->handler(skb);
 			if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				protocol = -ret;
 				goto resubmit;
 			}
 			__IP_INC_STATS(net, IPSTATS_MIB_INDELIVERS);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!raw) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (xfrm4_policy_check(NULL, XFRM_POLICY_IN, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					__IP_INC_STATS(net, IPSTATS_MIB_INUNKNOWNPROTOS);
 					icmp_send(skb, ICMP_DEST_UNREACH,
 						  ICMP_PROT_UNREACH, 0);
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kfree_skb(skb);
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__IP_INC_STATS(net, IPSTATS_MIB_INDELIVERS);
 				consume_skb(skb);
 			}
@@ -250,8 +262,11 @@ int ip_local_deliver(struct sk_buff *skb)
 	struct net *net = dev_net(skb->dev);
 
 	if (ip_is_fragment(ip_hdr(skb))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ip_defrag(net, skb, IP_DEFRAG_LOCAL_DELIVER))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	}
 
 	return NF_HOOK(NFPROTO_IPV4, NF_INET_LOCAL_IN,
@@ -273,6 +288,7 @@ static inline bool ip_rcv_options(struct sk_buff *skb)
 					      --ANK (980813)
 	*/
 	if (skb_cow(skb, skb_headroom(skb))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__IP_INC_STATS(dev_net(dev), IPSTATS_MIB_INDISCARDS);
 		goto drop;
 	}
@@ -310,6 +326,7 @@ static inline bool ip_rcv_options(struct sk_buff *skb)
 
 static int ip_rcv_finish(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct iphdr *iph = ip_hdr(skb);
 	int (*edemux)(struct sk_buff *skb);
 	struct net_device *dev = skb->dev;
@@ -321,7 +338,9 @@ static int ip_rcv_finish(struct net *net, struct sock *sk, struct sk_buff *skb)
 	 */
 	skb = l3mdev_ip_rcv(skb);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NET_RX_SUCCESS;
+}
 
 	if (net->ipv4.sysctl_ip_early_demux &&
 	    !skb_dst(skb) &&
@@ -365,13 +384,16 @@ static int ip_rcv_finish(struct net *net, struct sock *sk, struct sk_buff *skb)
 	if (iph->ihl > 5 && ip_rcv_options(skb))
 		goto drop;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rt = skb_rtable(skb);
 	if (rt->rt_type == RTN_MULTICAST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__IP_UPD_PO_STATS(net, IPSTATS_MIB_INMCAST, skb->len);
 	} else if (rt->rt_type == RTN_BROADCAST) {
 		__IP_UPD_PO_STATS(net, IPSTATS_MIB_INBCAST, skb->len);
 	} else if (skb->pkt_type == PACKET_BROADCAST ||
 		   skb->pkt_type == PACKET_MULTICAST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct in_device *in_dev = __in_dev_get_rcu(dev);
 
 		/* RFC 1122 3.3.6:
@@ -422,11 +444,13 @@ int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt,
 		goto drop;
 
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net = dev_net(dev);
 	__IP_UPD_PO_STATS(net, IPSTATS_MIB_IN, skb->len);
 
 	skb = skb_share_check(skb, GFP_ATOMIC);
 	if (!skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__IP_INC_STATS(net, IPSTATS_MIB_INDISCARDS);
 		goto out;
 	}
@@ -434,6 +458,7 @@ int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt,
 	if (!pskb_may_pull(skb, sizeof(struct iphdr)))
 		goto inhdr_error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iph = ip_hdr(skb);
 
 	/*
@@ -450,8 +475,11 @@ int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt,
 	if (iph->ihl < 5 || iph->version != 4)
 		goto inhdr_error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IPSTATS_MIB_ECT1PKTS != IPSTATS_MIB_NOECTPKTS + INET_ECN_ECT_1);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IPSTATS_MIB_ECT0PKTS != IPSTATS_MIB_NOECTPKTS + INET_ECN_ECT_0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IPSTATS_MIB_CEPKTS != IPSTATS_MIB_NOECTPKTS + INET_ECN_CE);
 	__IP_ADD_STATS(net,
 		       IPSTATS_MIB_NOECTPKTS + (iph->tos & INET_ECN_MASK),
@@ -460,6 +488,7 @@ int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt,
 	if (!pskb_may_pull(skb, iph->ihl*4))
 		goto inhdr_error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iph = ip_hdr(skb);
 
 	if (unlikely(ip_fast_csum((u8 *)iph, iph->ihl)))
@@ -467,6 +496,7 @@ int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt,
 
 	len = ntohs(iph->tot_len);
 	if (skb->len < len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__IP_INC_STATS(net, IPSTATS_MIB_INTRUNCATEDPKTS);
 		goto drop;
 	} else if (len < (iph->ihl*4))
@@ -477,6 +507,7 @@ int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt,
 	 * Note this now means skb->len holds ntohs(iph->tot_len).
 	 */
 	if (pskb_trim_rcsum(skb, len)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__IP_INC_STATS(net, IPSTATS_MIB_INDISCARDS);
 		goto drop;
 	}
diff --git a/net/ipv4/ip_options.c b/net/ipv4/ip_options.c
index ed194d4..dd599ac 100644
--- a/net/ipv4/ip_options.c
+++ b/net/ipv4/ip_options.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
@@ -44,6 +46,7 @@
 void ip_options_build(struct sk_buff *skb, struct ip_options *opt,
 		      __be32 daddr, struct rtable *rt, int is_frag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned char *iph = skb_network_header(skb);
 
 	memcpy(&(IPCB(skb)->opt), opt, sizeof(struct ip_options));
@@ -51,27 +54,39 @@ void ip_options_build(struct sk_buff *skb, struct ip_options *opt,
 	opt = &(IPCB(skb)->opt);
 
 	if (opt->srr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(iph+opt->srr+iph[opt->srr+1]-4, &daddr, 4);
+}
 
 	if (!is_frag) {
 		if (opt->rr_needaddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ip_rt_get_source(iph+opt->rr+iph[opt->rr+2]-5, skb, rt);
+}
 		if (opt->ts_needaddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ip_rt_get_source(iph+opt->ts+iph[opt->ts+2]-9, skb, rt);
+}
 		if (opt->ts_needtime) {
 			__be32 midtime;
 
 			midtime = inet_current_timestamp();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(iph+opt->ts+iph[opt->ts+2]-5, &midtime, 4);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (opt->rr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(iph+opt->rr, IPOPT_NOP, iph[opt->rr+1]);
 		opt->rr = 0;
 		opt->rr_needaddr = 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (opt->ts) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(iph+opt->ts, IPOPT_NOP, iph[opt->ts+1]);
 		opt->ts = 0;
 		opt->ts_needaddr = opt->ts_needtime = 0;
@@ -97,62 +112,93 @@ int __ip_options_echo(struct net *net, struct ip_options *dopt,
 	memset(dopt, 0, sizeof(struct ip_options));
 
 	if (sopt->optlen == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sptr = skb_network_header(skb);
 	dptr = dopt->__data;
 
 	if (sopt->rr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		optlen  = sptr[sopt->rr+1];
 		soffset = sptr[sopt->rr+2];
 		dopt->rr = dopt->optlen + sizeof(struct iphdr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(dptr, sptr+sopt->rr, optlen);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sopt->rr_needaddr && soffset <= optlen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (soffset + 3 > optlen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dptr[2] = soffset + 4;
 			dopt->rr_needaddr = 1;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dptr += optlen;
 		dopt->optlen += optlen;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sopt->ts) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		optlen = sptr[sopt->ts+1];
 		soffset = sptr[sopt->ts+2];
 		dopt->ts = dopt->optlen + sizeof(struct iphdr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(dptr, sptr+sopt->ts, optlen);
 		if (soffset <= optlen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sopt->ts_needaddr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (soffset + 3 > optlen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dopt->ts_needaddr = 1;
 				soffset += 4;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sopt->ts_needtime) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (soffset + 3 > optlen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if ((dptr[3]&0xF) != IPOPT_TS_PRESPEC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					dopt->ts_needtime = 1;
 					soffset += 4;
 				} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					dopt->ts_needtime = 0;
 
 					if (soffset + 7 <= optlen) {
 						__be32 addr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						memcpy(&addr, dptr+soffset-1, 4);
 						if (inet_addr_type(net, addr) != RTN_UNICAST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 							dopt->ts_needtime = 1;
 							soffset += 8;
 						}
 					}
 				}
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dptr[2] = soffset;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dptr += optlen;
 		dopt->optlen += optlen;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sopt->srr) {
 		unsigned char *start = sptr+sopt->srr;
 		__be32 faddr;
@@ -161,12 +207,19 @@ int __ip_options_echo(struct net *net, struct ip_options *dopt,
 		soffset = start[2];
 		doffset = 0;
 		if (soffset > optlen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			soffset = optlen + 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		soffset -= 4;
 		if (soffset > 3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(&faddr, &start[soffset-1], 4);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			for (soffset -= 4, doffset = 4; soffset > 3; soffset -= 4, doffset += 4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				memcpy(&dptr[doffset-1], &start[soffset-1], 4);
+}
 			/*
 			 * RFC1812 requires to fix illegal source routes.
 			 */
@@ -174,7 +227,9 @@ int __ip_options_echo(struct net *net, struct ip_options *dopt,
 				   &start[soffset + 3], 4) == 0)
 				doffset -= 4;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (doffset > 3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dopt->faddr = faddr;
 			dptr[0] = start[0];
 			dptr[1] = doffset+3;
@@ -185,17 +240,23 @@ int __ip_options_echo(struct net *net, struct ip_options *dopt,
 			dopt->is_strictroute = sopt->is_strictroute;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sopt->cipso) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		optlen  = sptr[sopt->cipso+1];
 		dopt->cipso = dopt->optlen+sizeof(struct iphdr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(dptr, sptr+sopt->cipso, optlen);
 		dptr += optlen;
 		dopt->optlen += optlen;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (dopt->optlen & 3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*dptr++ = IPOPT_END;
 		dopt->optlen++;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -207,6 +268,7 @@ int __ip_options_echo(struct net *net, struct ip_options *dopt,
 
 void ip_options_fragment(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned char *optptr = skb_network_header(skb) + sizeof(struct iphdr);
 	struct ip_options *opt = &(IPCB(skb)->opt);
 	int  l = opt->optlen;
@@ -241,6 +303,7 @@ void ip_options_fragment(struct sk_buff *skb)
  */
 static void spec_dst_fill(__be32 *spec_dst, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (*spec_dst == htonl(INADDR_ANY))
 		*spec_dst = fib_compute_spec_dst(skb);
 }
@@ -254,6 +317,7 @@ static void spec_dst_fill(__be32 *spec_dst, struct sk_buff *skb)
 int ip_options_compile(struct net *net,
 		       struct ip_options *opt, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__be32 spec_dst = htonl(INADDR_ANY);
 	unsigned char *pp_ptr = NULL;
 	struct rtable *rt = NULL;
@@ -481,6 +545,7 @@ EXPORT_SYMBOL(ip_options_compile);
 
 void ip_options_undo(struct ip_options *opt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (opt->srr) {
 		unsigned  char *optptr = opt->__data+opt->srr-sizeof(struct  iphdr);
 		memmove(optptr+7, optptr+3, optptr[1]-7);
@@ -508,6 +573,7 @@ void ip_options_undo(struct ip_options *opt)
 
 static struct ip_options_rcu *ip_options_get_alloc(const int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return kzalloc(sizeof(struct ip_options_rcu) + ((optlen + 3) & ~3),
 		       GFP_KERNEL);
 }
@@ -515,6 +581,7 @@ static struct ip_options_rcu *ip_options_get_alloc(const int optlen)
 static int ip_options_get_finish(struct net *net, struct ip_options_rcu **optp,
 				 struct ip_options_rcu *opt, int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (optlen & 3)
 		opt->opt.__data[optlen++] = IPOPT_END;
 	opt->opt.optlen = optlen;
@@ -530,6 +597,7 @@ static int ip_options_get_finish(struct net *net, struct ip_options_rcu **optp,
 int ip_options_get_from_user(struct net *net, struct ip_options_rcu **optp,
 			     unsigned char __user *data, int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_options_rcu *opt = ip_options_get_alloc(optlen);
 
 	if (!opt)
@@ -544,6 +612,7 @@ int ip_options_get_from_user(struct net *net, struct ip_options_rcu **optp,
 int ip_options_get(struct net *net, struct ip_options_rcu **optp,
 		   unsigned char *data, int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_options_rcu *opt = ip_options_get_alloc(optlen);
 
 	if (!opt)
@@ -561,6 +630,7 @@ void ip_forward_options(struct sk_buff *skb)
 	unsigned char *raw = skb_network_header(skb);
 
 	if (opt->rr_needaddr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		optptr = (unsigned char *)raw + opt->rr;
 		ip_rt_get_source(&optptr[optptr[2]-5], skb, rt);
 		opt->is_changed = 1;
@@ -613,7 +683,9 @@ int ip_options_rcv_srr(struct sk_buff *skb)
 	int err;
 
 	if (!rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (skb->pkt_type != PACKET_HOST)
 		return -EINVAL;
diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
index e8e675b..4496ee8 100644
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -96,6 +98,7 @@ EXPORT_SYMBOL(ip_send_check);
 
 int __ip_local_out(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct iphdr *iph = ip_hdr(skb);
 
 	iph->tot_len = htons(skb->len);
@@ -106,7 +109,9 @@ int __ip_local_out(struct net *net, struct sock *sk, struct sk_buff *skb)
 	 */
 	skb = l3mdev_ip_out(sk, skb);
 	if (unlikely(!skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	skb->protocol = htons(ETH_P_IP);
 
@@ -143,6 +148,7 @@ static inline int ip_select_ttl(struct inet_sock *inet, struct dst_entry *dst)
 int ip_build_and_send_pkt(struct sk_buff *skb, const struct sock *sk,
 			  __be32 saddr, __be32 daddr, struct ip_options_rcu *opt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct rtable *rt = skb_rtable(skb);
 	struct net *net = sock_net(sk);
@@ -163,11 +169,13 @@ int ip_build_and_send_pkt(struct sk_buff *skb, const struct sock *sk,
 		iph->frag_off = htons(IP_DF);
 		iph->id = 0;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iph->frag_off = 0;
 		__ip_select_ident(net, iph, 1);
 	}
 
 	if (opt && opt->opt.optlen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iph->ihl += opt->opt.optlen>>2;
 		ip_options_build(skb, &opt->opt, daddr, rt, 0);
 	}
@@ -183,6 +191,7 @@ EXPORT_SYMBOL_GPL(ip_build_and_send_pkt);
 
 static int ip_finish_output2(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dst_entry *dst = skb_dst(skb);
 	struct rtable *rt = (struct rtable *)dst;
 	struct net_device *dev = dst->dev;
@@ -191,9 +200,12 @@ static int ip_finish_output2(struct net *net, struct sock *sk, struct sk_buff *s
 	u32 nexthop;
 
 	if (rt->rt_type == RTN_MULTICAST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		IP_UPD_PO_STATS(net, IPSTATS_MIB_OUTMCAST, skb->len);
 	} else if (rt->rt_type == RTN_BROADCAST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		IP_UPD_PO_STATS(net, IPSTATS_MIB_OUTBCAST, skb->len);
+}
 
 	/* Be paranoid, rather than too clever. */
 	if (unlikely(skb_headroom(skb) < hh_len && dev->header_ops)) {
@@ -201,22 +213,32 @@ static int ip_finish_output2(struct net *net, struct sock *sk, struct sk_buff *s
 
 		skb2 = skb_realloc_headroom(skb, LL_RESERVED_SPACE(dev));
 		if (!skb2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree_skb(skb);
 			return -ENOMEM;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (skb->sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb_set_owner_w(skb2, skb->sk);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		consume_skb(skb);
 		skb = skb2;
 	}
 
 	if (lwtunnel_xmit_redirect(dst->lwtstate)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int res = lwtunnel_xmit(skb);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (res < 0 || res == LWTUNNEL_XMIT_DONE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return res;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock_bh();
 	nexthop = (__force u32) rt_nexthop(rt, ip_hdr(skb)->daddr);
 	neigh = __ipv4_neigh_lookup_noref(dev, nexthop);
@@ -231,10 +253,13 @@ static int ip_finish_output2(struct net *net, struct sock *sk, struct sk_buff *s
 		rcu_read_unlock_bh();
 		return res;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock_bh();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_dbg_ratelimited("%s: No header cache and no neighbour!\n",
 			    __func__);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree_skb(skb);
 	return -EINVAL;
 }
@@ -249,7 +274,9 @@ static int ip_finish_output_gso(struct net *net, struct sock *sk,
 	/* common case: seglen is <= mtu
 	 */
 	if (skb_gso_validate_mtu(skb, mtu))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ip_finish_output2(net, sk, skb);
+}
 
 	/* Slowpath -  GSO segment length exceeds the egress MTU.
 	 *
@@ -296,6 +323,7 @@ static int ip_finish_output(struct net *net, struct sock *sk, struct sk_buff *sk
 
 	ret = BPF_CGROUP_RUN_PROG_INET_EGRESS(sk, skb);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
 		return ret;
 	}
@@ -303,16 +331,21 @@ static int ip_finish_output(struct net *net, struct sock *sk, struct sk_buff *sk
 #if defined(CONFIG_NETFILTER) && defined(CONFIG_XFRM)
 	/* Policy lookup after SNAT yielded a new policy */
 	if (skb_dst(skb)->xfrm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		IPCB(skb)->flags |= IPSKB_REROUTED;
 		return dst_output(net, sk, skb);
 	}
 #endif
 	mtu = ip_skb_dst_mtu(sk, skb);
 	if (skb_is_gso(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ip_finish_output_gso(net, sk, skb, mtu);
+}
 
 	if (skb->len > mtu || (IPCB(skb)->flags & IPSKB_FRAG_PMTU))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ip_fragment(net, sk, skb, mtu, ip_finish_output2);
+}
 
 	return ip_finish_output2(net, sk, skb);
 }
@@ -324,6 +357,7 @@ static int ip_mc_finish_output(struct net *net, struct sock *sk,
 
 	ret = BPF_CGROUP_RUN_PROG_INET_EGRESS(sk, skb);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
 		return ret;
 	}
@@ -333,6 +367,7 @@ static int ip_mc_finish_output(struct net *net, struct sock *sk,
 
 int ip_mc_output(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rtable *rt = skb_rtable(skb);
 	struct net_device *dev = rt->dst.dev;
 
@@ -416,6 +451,7 @@ int ip_output(struct net *net, struct sock *sk, struct sk_buff *skb)
  */
 static void ip_copy_addrs(struct iphdr *iph, const struct flowi4 *fl4)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(offsetof(typeof(*fl4), daddr) !=
 		     offsetof(typeof(*fl4), saddr) + sizeof(fl4->saddr));
 	memcpy(&iph->saddr, &fl4->saddr,
@@ -425,6 +461,7 @@ static void ip_copy_addrs(struct iphdr *iph, const struct flowi4 *fl4)
 /* Note: skb->sk can be different from sk, in case of tunnels */
 int ip_queue_xmit(struct sock *sk, struct sk_buff *skb, struct flowi *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct net *net = sock_net(sk);
 	struct ip_options_rcu *inet_opt;
@@ -450,8 +487,11 @@ int ip_queue_xmit(struct sock *sk, struct sk_buff *skb, struct flowi *fl)
 
 		/* Use correct destination address if we have options. */
 		daddr = inet->inet_daddr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (inet_opt && inet_opt->opt.srr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			daddr = inet_opt->opt.faddr;
+}
 
 		/* If this fails, retransmit mechanism of transport layer will
 		 * keep trying until route appears or the connection times
@@ -466,6 +506,7 @@ int ip_queue_xmit(struct sock *sk, struct sk_buff *skb, struct flowi *fl)
 					   sk->sk_bound_dev_if);
 		if (IS_ERR(rt))
 			goto no_route;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_setup_caps(sk, &rt->dst);
 	}
 	skb_dst_set_noref(skb, &rt->dst);
@@ -490,6 +531,7 @@ int ip_queue_xmit(struct sock *sk, struct sk_buff *skb, struct flowi *fl)
 	/* Transport layer set skb->h.foo itself. */
 
 	if (inet_opt && inet_opt->opt.optlen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iph->ihl += inet_opt->opt.optlen >> 2;
 		ip_options_build(skb, &inet_opt->opt, inet->inet_daddr, rt, 0);
 	}
@@ -507,7 +549,9 @@ int ip_queue_xmit(struct sock *sk, struct sk_buff *skb, struct flowi *fl)
 
 no_route:
 	rcu_read_unlock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	IP_INC_STATS(net, IPSTATS_MIB_OUTNOROUTES);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree_skb(skb);
 	return -EHOSTUNREACH;
 }
@@ -515,6 +559,7 @@ EXPORT_SYMBOL(ip_queue_xmit);
 
 static void ip_copy_metadata(struct sk_buff *to, struct sk_buff *from)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	to->pkt_type = from->pkt_type;
 	to->priority = from->priority;
 	to->protocol = from->protocol;
@@ -540,6 +585,7 @@ static int ip_fragment(struct net *net, struct sock *sk, struct sk_buff *skb,
 		       unsigned int mtu,
 		       int (*output)(struct net *, struct sock *, struct sk_buff *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct iphdr *iph = ip_hdr(skb);
 
 	if ((iph->frag_off & htons(IP_DF)) == 0)
@@ -831,13 +877,18 @@ ip_generic_getfrag(void *from, char *to, int offset, int len, int odd, struct sk
 
 	if (skb->ip_summed == CHECKSUM_PARTIAL) {
 		if (!copy_from_iter_full(to, len, &msg->msg_iter))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 	} else {
 		__wsum csum = 0;
 		if (!csum_and_copy_from_iter_full(to, len, &csum, &msg->msg_iter))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 		skb->csum = csum_block_add(skb->csum, csum, odd);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(ip_generic_getfrag);
@@ -863,6 +914,7 @@ static int __ip_append_data(struct sock *sk,
 			    void *from, int length, int transhdrlen,
 			    unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct sk_buff *skb;
 
@@ -925,7 +977,10 @@ static int __ip_append_data(struct sock *sk,
 		/* Check if the remaining data fits into current packet. */
 		copy = mtu - skb->len;
 		if (copy < length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copy = maxfraglen - skb->len;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy <= 0) {
 			char *data;
 			unsigned int datalen;
@@ -936,7 +991,9 @@ static int __ip_append_data(struct sock *sk,
 alloc_new_skb:
 			skb_prev = skb;
 			if (skb_prev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fraggap = skb_prev->len - maxfraglen;
+}
 			else
 				fraggap = 0;
 
@@ -946,7 +1003,9 @@ static int __ip_append_data(struct sock *sk,
 			 */
 			datalen = length + fraggap;
 			if (datalen > mtu - fragheaderlen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				datalen = maxfraglen - fragheaderlen;
+}
 			fraglen = datalen + fragheaderlen;
 
 			if ((flags & MSG_MORE) &&
@@ -970,6 +1029,7 @@ static int __ip_append_data(struct sock *sk,
 						alloclen + hh_len + 15,
 						(flags & MSG_DONTWAIT), &err);
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				skb = NULL;
 				if (refcount_read(&sk->sk_wmem_alloc) <=
 				    2 * sk->sk_sndbuf)
@@ -977,7 +1037,9 @@ static int __ip_append_data(struct sock *sk,
 							   alloclen + hh_len + 15, 1,
 							   sk->sk_allocation);
 				if (unlikely(!skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					err = -ENOBUFS;
+}
 			}
 			if (!skb)
 				goto error;
@@ -1005,6 +1067,7 @@ static int __ip_append_data(struct sock *sk,
 			data += fragheaderlen + exthdrlen;
 
 			if (fraggap) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				skb->csum = skb_copy_and_csum_bits(
 					skb_prev, maxfraglen,
 					data + transhdrlen, fraggap, 0);
@@ -1016,6 +1079,7 @@ static int __ip_append_data(struct sock *sk,
 
 			copy = datalen - transhdrlen - fraggap;
 			if (copy > 0 && getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EFAULT;
 				kfree_skb(skb);
 				goto error;
@@ -1028,7 +1092,9 @@ static int __ip_append_data(struct sock *sk,
 			csummode = CHECKSUM_NONE;
 
 			if ((flags & MSG_CONFIRM) && !skb_prev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				skb_set_dst_pending_confirm(skb, 1);
+}
 
 			/*
 			 * Put the packet on the pending queue.
@@ -1037,43 +1103,54 @@ static int __ip_append_data(struct sock *sk,
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy > length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copy = length;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(rt->dst.dev->features&NETIF_F_SG)) {
 			unsigned int off;
 
 			off = skb->len;
 			if (getfrag(from, skb_put(skb, copy),
 					offset, copy, off, skb) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__skb_trim(skb, off);
 				err = -EFAULT;
 				goto error;
 			}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			int i = skb_shinfo(skb)->nr_frags;
 
 			err = -ENOMEM;
 			if (!sk_page_frag_refill(sk, pfrag))
 				goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!skb_can_coalesce(skb, i, pfrag->page,
 					      pfrag->offset)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EMSGSIZE;
 				if (i == MAX_SKB_FRAGS)
 					goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__skb_fill_page_desc(skb, i, pfrag->page,
 						     pfrag->offset, 0);
 				skb_shinfo(skb)->nr_frags = ++i;
 				get_page(pfrag->page);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copy = min_t(int, copy, pfrag->size - pfrag->offset);
 			if (getfrag(from,
 				    page_address(pfrag->page) + pfrag->offset,
 				    offset, copy, skb->len, skb) < 0)
 				goto error_efault;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pfrag->offset += copy;
 			skb_frag_size_add(&skb_shinfo(skb)->frags[i - 1], copy);
 			skb->len += copy;
@@ -1081,10 +1158,12 @@ static int __ip_append_data(struct sock *sk,
 			skb->truesize += copy;
 			refcount_add(copy, &sk->sk_wmem_alloc);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		offset += copy;
 		length -= copy;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 error_efault:
@@ -1110,7 +1189,9 @@ static int ip_setup_cork(struct sock *sk, struct inet_cork *cork,
 			cork->opt = kmalloc(sizeof(struct ip_options) + 40,
 					    sk->sk_allocation);
 			if (unlikely(!cork->opt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -ENOBUFS;
+}
 		}
 		memcpy(cork->opt, &opt->opt, sizeof(struct ip_options) + opt->opt.optlen);
 		cork->flags |= IPCORK_OPT;
@@ -1118,7 +1199,9 @@ static int ip_setup_cork(struct sock *sk, struct inet_cork *cork,
 	}
 	rt = *rtp;
 	if (unlikely(!rt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	/*
 	 * We steal reference to this route, caller should not release it
 	 */
@@ -1153,17 +1236,23 @@ int ip_append_data(struct sock *sk, struct flowi4 *fl4,
 		   struct ipcm_cookie *ipc, struct rtable **rtp,
 		   unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	int err;
 
 	if (flags&MSG_PROBE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (skb_queue_empty(&sk->sk_write_queue)) {
 		err = ip_setup_cork(sk, &inet->cork.base, ipc, rtp);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		transhdrlen = 0;
 	}
 
@@ -1175,6 +1264,7 @@ int ip_append_data(struct sock *sk, struct flowi4 *fl4,
 ssize_t	ip_append_page(struct sock *sk, struct flowi4 *fl4, struct page *page,
 		       int offset, size_t size, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct sk_buff *skb;
 	struct rtable *rt;
@@ -1337,8 +1427,11 @@ struct sk_buff *__ip_make_skb(struct sock *sk,
 
 	/* move skb->data to ip header from ext header */
 	if (skb->data < skb_network_header(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__skb_pull(skb, skb_network_offset(skb));
+}
 	while ((tmp_skb = __skb_dequeue(queue)) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__skb_pull(tmp_skb, skb_network_header_len(skb));
 		*tail_skb = tmp_skb;
 		tail_skb = &(tmp_skb->next);
@@ -1368,12 +1461,17 @@ struct sk_buff *__ip_make_skb(struct sock *sk,
 		opt = cork->opt;
 
 	if (cork->ttl != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ttl = cork->ttl;
+}
 	else if (rt->rt_type == RTN_MULTICAST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ttl = inet->mc_ttl;
+}
 	else
 		ttl = ip_select_ttl(inet, &rt->dst);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iph = ip_hdr(skb);
 	iph->version = 4;
 	iph->ihl = 5;
@@ -1413,10 +1511,16 @@ int ip_send_skb(struct net *net, struct sk_buff *skb)
 
 	err = ip_local_out(net, skb->sk, skb);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = net_xmit_errno(err);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			IP_INC_STATS(net, IPSTATS_MIB_OUTDISCARDS);
+}
 	}
 
 	return err;
@@ -1428,7 +1532,9 @@ int ip_push_pending_frames(struct sock *sk, struct flowi4 *fl4)
 
 	skb = ip_finish_skb(sk, fl4);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Netfilter gets whole the not fragmented skb. */
 	return ip_send_skb(sock_net(sk), skb);
@@ -1467,8 +1573,11 @@ struct sk_buff *ip_make_skb(struct sock *sk,
 	int err;
 
 	if (flags & MSG_PROBE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__skb_queue_head_init(&queue);
 
 	cork.flags = 0;
@@ -1476,7 +1585,9 @@ struct sk_buff *ip_make_skb(struct sock *sk,
 	cork.opt = NULL;
 	err = ip_setup_cork(sk, &cork, ipc, rtp);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(err);
+}
 
 	err = __ip_append_data(sk, fl4, &queue, &cork,
 			       &current->task_frag, getfrag,
@@ -1522,7 +1633,9 @@ void ip_send_unicast_reply(struct sock *sk, struct sk_buff *skb,
 	int oif;
 
 	if (__ip_options_echo(net, &replyopts.opt.opt, skb, sopt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	ipc.addr = daddr;
 	ipc.opt = NULL;
@@ -1531,15 +1644,20 @@ void ip_send_unicast_reply(struct sock *sk, struct sk_buff *skb,
 	ipc.tos = -1;
 
 	if (replyopts.opt.opt.optlen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ipc.opt = &replyopts.opt;
 
 		if (replyopts.opt.opt.srr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			daddr = replyopts.opt.opt.faddr;
+}
 	}
 
 	oif = arg->bound_dev_if;
 	if (!oif && netif_index_is_l3_master(net, skb->skb_iif))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		oif = skb->skb_iif;
+}
 
 	flowi4_init_output(&fl4, oif,
 			   IP4_REPLY_MARK(net, skb->mark),
@@ -1552,7 +1670,9 @@ void ip_send_unicast_reply(struct sock *sk, struct sk_buff *skb,
 	security_skb_classify_flow(skb, flowi4_to_flowi(&fl4));
 	rt = ip_route_output_key(net, &fl4);
 	if (IS_ERR(rt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	inet_sk(sk)->tos = arg->tos;
 
@@ -1564,6 +1684,7 @@ void ip_send_unicast_reply(struct sock *sk, struct sk_buff *skb,
 	err = ip_append_data(sk, &fl4, ip_reply_glue_bits, arg->iov->iov_base,
 			     len, 0, &ipc, &rt, MSG_DONTWAIT);
 	if (unlikely(err)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip_flush_pending_frames(sk);
 		goto out;
 	}
diff --git a/net/ipv4/ip_sockglue.c b/net/ipv4/ip_sockglue.c
index f56aab5..39cc33a 100644
--- a/net/ipv4/ip_sockglue.c
+++ b/net/ipv4/ip_sockglue.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
@@ -62,17 +64,20 @@ static void ip_cmsg_recv_pktinfo(struct msghdr *msg, struct sk_buff *skb)
 
 static void ip_cmsg_recv_ttl(struct msghdr *msg, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ttl = ip_hdr(skb)->ttl;
 	put_cmsg(msg, SOL_IP, IP_TTL, sizeof(int), &ttl);
 }
 
 static void ip_cmsg_recv_tos(struct msghdr *msg, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	put_cmsg(msg, SOL_IP, IP_TOS, 1, &ip_hdr(skb)->tos);
 }
 
 static void ip_cmsg_recv_opts(struct msghdr *msg, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IPCB(skb)->opt.optlen == 0)
 		return;
 
@@ -88,7 +93,9 @@ static void ip_cmsg_recv_retopts(struct net *net, struct msghdr *msg,
 	struct ip_options *opt = (struct ip_options *)optbuf;
 
 	if (IPCB(skb)->opt.optlen == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (ip_options_echo(net, opt, skb)) {
 		msg->msg_flags |= MSG_CTRUNC;
@@ -104,7 +111,9 @@ static void ip_cmsg_recv_fragsize(struct msghdr *msg, struct sk_buff *skb)
 	int val;
 
 	if (IPCB(skb)->frag_max_size == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	val = IPCB(skb)->frag_max_size;
 	put_cmsg(msg, SOL_IP, IP_RECVFRAGSIZE, sizeof(val), &val);
@@ -116,7 +125,9 @@ static void ip_cmsg_recv_checksum(struct msghdr *msg, struct sk_buff *skb,
 	__wsum csum = skb->csum;
 
 	if (skb->ip_summed != CHECKSUM_COMPLETE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (offset != 0) {
 		int tend_off = skb_transport_offset(skb) + tlen;
@@ -134,7 +145,9 @@ static void ip_cmsg_recv_security(struct msghdr *msg, struct sk_buff *skb)
 
 	err = security_socket_getpeersec_dgram(NULL, skb, &secid);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	err = security_secid_to_secctx(secid, &secdata, &seclen);
 	if (err)
@@ -151,7 +164,9 @@ static void ip_cmsg_recv_dstaddr(struct msghdr *msg, struct sk_buff *skb)
 	__be16 *ports = (__be16 *)skb_transport_header(skb);
 
 	if (skb_transport_offset(skb) + 4 > (int)skb->len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* All current transport protocols have the port numbers in the
 	 * first four bytes of the transport header and this function is
@@ -169,6 +184,7 @@ static void ip_cmsg_recv_dstaddr(struct msghdr *msg, struct sk_buff *skb)
 void ip_cmsg_recv_offset(struct msghdr *msg, struct sock *sk,
 			 struct sk_buff *skb, int tlen, int offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	unsigned int flags = inet->cmsg_flags;
 
@@ -244,6 +260,7 @@ int ip_cmsg_send(struct sock *sk, struct msghdr *msg, struct ipcm_cookie *ipc,
 	struct cmsghdr *cmsg;
 	struct net *net = sock_net(sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_cmsghdr(cmsg, msg) {
 		if (!CMSG_OK(msg, cmsg))
 			return -EINVAL;
@@ -336,6 +353,7 @@ struct ip_ra_chain __rcu *ip_ra_chain;
 
 static void ip_ra_destroy_rcu(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_ra_chain *ra = container_of(head, struct ip_ra_chain, rcu);
 
 	sock_put(ra->saved_sk);
@@ -349,24 +367,33 @@ int ip_ra_control(struct sock *sk, unsigned char on,
 	struct ip_ra_chain __rcu **rap;
 
 	if (sk->sk_type != SOCK_RAW || inet_sk(sk)->inet_num == IPPROTO_RAW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	new_ra = on ? kmalloc(sizeof(*new_ra), GFP_KERNEL) : NULL;
 
 	for (rap = &ip_ra_chain;
 	     (ra = rtnl_dereference(*rap)) != NULL;
 	     rap = &ra->next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ra->sk == sk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (on) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kfree(new_ra);
 				return -EADDRINUSE;
 			}
 			/* dont let ip_call_ra_chain() use sk again */
 			ra->sk = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			RCU_INIT_POINTER(*rap, ra->next);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ra->destructor)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ra->destructor(sk);
+}
 			/*
 			 * Delay sock_put(sk) and kfree(ra) after one rcu grace
 			 * period. This guarantee ip_call_ra_chain() dont need
@@ -378,11 +405,16 @@ int ip_ra_control(struct sock *sk, unsigned char on,
 		}
 	}
 	if (!new_ra)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOBUFS;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	new_ra->sk = sk;
 	new_ra->destructor = destructor;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(new_ra->next, ra);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_assign_pointer(*rap, new_ra);
 	sock_hold(sk);
 
@@ -396,7 +428,9 @@ void ip_icmp_error(struct sock *sk, struct sk_buff *skb, int err,
 
 	skb = skb_clone(skb, GFP_ATOMIC);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	serr = SKB_EXT_ERR(skb);
 	serr->ee.ee_errno = err;
@@ -420,6 +454,7 @@ void ip_icmp_error(struct sock *sk, struct sk_buff *skb, int err,
 
 void ip_local_error(struct sock *sk, int err, __be32 daddr, __be16 port, u32 info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct sock_exterr_skb *serr;
 	struct iphdr *iph;
@@ -460,6 +495,7 @@ void ip_local_error(struct sock *sk, int err, __be32 daddr, __be16 port, u32 inf
  */
 static inline bool ipv4_datagram_support_addr(struct sock_exterr_skb *serr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return serr->ee.ee_origin == SO_EE_ORIGIN_ICMP ||
 	       serr->ee.ee_origin == SO_EE_ORIGIN_LOCAL || serr->port;
 }
@@ -476,7 +512,9 @@ static bool ipv4_datagram_support_cmsg(const struct sock *sk,
 	struct in_pktinfo *info;
 
 	if (ee_origin == SO_EE_ORIGIN_ICMP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	if (ee_origin == SO_EE_ORIGIN_LOCAL)
 		return false;
@@ -501,6 +539,7 @@ int ip_recv_error(struct sock *sk, struct msghdr *msg, int len, int *addr_len)
 {
 	struct sock_exterr_skb *serr;
 	struct sk_buff *skb;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DECLARE_SOCKADDR(struct sockaddr_in *, sin, msg->msg_name);
 	struct {
 		struct sock_extended_err ee;
diff --git a/net/ipv4/ip_tunnel.c b/net/ipv4/ip_tunnel.c
index 4e90082..0c994c6 100644
--- a/net/ipv4/ip_tunnel.c
+++ b/net/ipv4/ip_tunnel.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2013 Nicira, Inc.
  *
@@ -72,6 +74,7 @@ static unsigned int ip_tunnel_hash(__be32 key, __be32 remote)
 static bool ip_tunnel_key_match(const struct ip_tunnel_parm *p,
 				__be16 flags, __be32 key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (p->i_flags & TUNNEL_KEY) {
 		if (flags & TUNNEL_KEY)
 			return key == p->i_key;
@@ -105,6 +108,7 @@ struct ip_tunnel *ip_tunnel_lookup(struct ip_tunnel_net *itn,
 	hash = ip_tunnel_hash(key, remote);
 	head = &itn->tunnels[hash];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry_rcu(t, head, hash_node) {
 		if (local != t->parms.iph.saddr ||
 		    remote != t->parms.iph.daddr ||
@@ -194,13 +198,18 @@ static struct hlist_head *ip_bucket(struct ip_tunnel_net *itn,
 	__be32 i_key = parms->i_key;
 
 	if (parms->iph.daddr && !ipv4_is_multicast(parms->iph.daddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		remote = parms->iph.daddr;
+}
 	else
 		remote = 0;
 
 	if (!(parms->i_flags & TUNNEL_KEY) && (parms->i_flags & VTI_ISVTI))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i_key = 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	h = ip_tunnel_hash(i_key, remote);
 	return &itn->tunnels[h];
 }
@@ -210,12 +219,15 @@ static void ip_tunnel_add(struct ip_tunnel_net *itn, struct ip_tunnel *t)
 	struct hlist_head *head = ip_bucket(itn, &t->parms);
 
 	if (t->collect_md)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_assign_pointer(itn->collect_md_tun, t);
+}
 	hlist_add_head_rcu(&t->hash_node, head);
 }
 
 static void ip_tunnel_del(struct ip_tunnel_net *itn, struct ip_tunnel *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (t->collect_md)
 		rcu_assign_pointer(itn->collect_md_tun, NULL);
 	hlist_del_init_rcu(&t->hash_node);
@@ -233,6 +245,7 @@ static struct ip_tunnel *ip_tunnel_find(struct ip_tunnel_net *itn,
 	struct ip_tunnel *t = NULL;
 	struct hlist_head *head = ip_bucket(itn, parms);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry_rcu(t, head, hash_node) {
 		if (local == t->parms.iph.saddr &&
 		    remote == t->parms.iph.daddr &&
@@ -256,10 +269,13 @@ static struct net_device *__ip_tunnel_create(struct net *net,
 	if (parms->name[0])
 		strlcpy(name, parms->name, IFNAMSIZ);
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (strlen(ops->kind) > (IFNAMSIZ - 3)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -E2BIG;
 			goto failed;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		strlcpy(name, ops->kind, IFNAMSIZ);
 		strncat(name, "%d", 2);
 	}
@@ -267,9 +283,11 @@ static struct net_device *__ip_tunnel_create(struct net *net,
 	ASSERT_RTNL();
 	dev = alloc_netdev(ops->priv_size, name, NET_NAME_UNKNOWN, ops->setup);
 	if (!dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOMEM;
 		goto failed;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_net_set(dev, net);
 
 	dev->rtnl_link_ops = ops;
@@ -282,6 +300,7 @@ static struct net_device *__ip_tunnel_create(struct net *net,
 	if (err)
 		goto failed_free;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dev;
 
 failed_free:
@@ -296,6 +315,7 @@ static inline void init_tunnel_flow(struct flowi4 *fl4,
 				    __be32 key, __u8 tos, int oif,
 				    __u32 mark)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(fl4, 0, sizeof(*fl4));
 	fl4->flowi4_oif = oif;
 	fl4->daddr = daddr;
@@ -329,19 +349,27 @@ static int ip_tunnel_bind_dev(struct net_device *dev)
 		rt = ip_route_output_key(tunnel->net, &fl4);
 
 		if (!IS_ERR(rt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tdev = rt->dst.dev;
 			ip_rt_put(rt);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->type != ARPHRD_ETHER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->flags |= IFF_POINTOPOINT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_cache_reset(&tunnel->dst_cache);
 	}
 
 	if (!tdev && tunnel->parms.link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tdev = __dev_get_by_index(tunnel->net, tunnel->parms.link);
+}
 
 	if (tdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hlen = tdev->hard_header_len + tdev->needed_headroom;
 		mtu = tdev->mtu;
 	}
@@ -350,7 +378,9 @@ static int ip_tunnel_bind_dev(struct net_device *dev)
 	mtu -= (dev->hard_header_len + t_hlen);
 
 	if (mtu < IPV4_MIN_MTU)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mtu = IPV4_MIN_MTU;
+}
 
 	return mtu;
 }
@@ -363,6 +393,7 @@ static struct ip_tunnel *ip_tunnel_create(struct net *net,
 	struct net_device *dev;
 	int t_hlen;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!itn->fb_tunnel_dev);
 	dev = __ip_tunnel_create(net, itn->fb_tunnel_dev->rtnl_link_ops, parms);
 	if (IS_ERR(dev))
@@ -393,6 +424,7 @@ int ip_tunnel_rcv(struct ip_tunnel *tunnel, struct sk_buff *skb,
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!(tpi->flags&TUNNEL_CSUM) &&  (tunnel->parms.i_flags&TUNNEL_CSUM)) ||
 	     ((tpi->flags&TUNNEL_CSUM) && !(tunnel->parms.i_flags&TUNNEL_CSUM))) {
 		tunnel->dev->stats.rx_crc_errors++;
@@ -457,7 +489,9 @@ int ip_tunnel_encap_add_ops(const struct ip_tunnel_encap_ops *ops,
 			    unsigned int num)
 {
 	if (num >= MAX_IPTUN_ENCAP_OPS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ERANGE;
+}
 
 	return !cmpxchg((const struct ip_tunnel_encap_ops **)
 			&iptun_encaps[num],
@@ -471,7 +505,9 @@ int ip_tunnel_encap_del_ops(const struct ip_tunnel_encap_ops *ops,
 	int ret;
 
 	if (num >= MAX_IPTUN_ENCAP_OPS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ERANGE;
+}
 
 	ret = (cmpxchg((const struct ip_tunnel_encap_ops **)
 		       &iptun_encaps[num],
@@ -492,7 +528,9 @@ int ip_tunnel_encap_setup(struct ip_tunnel *t,
 
 	hlen = ip_encap_hlen(ipencap);
 	if (hlen < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return hlen;
+}
 
 	t->encap.type = ipencap->type;
 	t->encap.sport = ipencap->sport;
@@ -510,6 +548,7 @@ static int tnl_update_pmtu(struct net_device *dev, struct sk_buff *skb,
 			    struct rtable *rt, __be16 df,
 			    const struct iphdr *inner_iph)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel *tunnel = netdev_priv(dev);
 	int pkt_size = skb->len - tunnel->hlen - dev->hard_header_len;
 	int mtu;
@@ -558,6 +597,7 @@ static int tnl_update_pmtu(struct net_device *dev, struct sk_buff *skb,
 
 void ip_md_tunnel_xmit(struct sk_buff *skb, struct net_device *dev, u8 proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel *tunnel = netdev_priv(dev);
 	u32 headroom = sizeof(struct iphdr);
 	struct ip_tunnel_info *tun_info;
@@ -634,6 +674,7 @@ EXPORT_SYMBOL_GPL(ip_md_tunnel_xmit);
 void ip_tunnel_xmit(struct sk_buff *skb, struct net_device *dev,
 		    const struct iphdr *tnl_params, u8 protocol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel *tunnel = netdev_priv(dev);
 	const struct iphdr *inner_iph;
 	struct flowi4 fl4;
@@ -804,6 +845,7 @@ static void ip_tunnel_update(struct ip_tunnel_net *itn,
 			     bool set_mtu,
 			     __u32 fwmark)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ip_tunnel_del(itn, t);
 	t->parms.iph.saddr = p->iph.saddr;
 	t->parms.iph.daddr = p->iph.daddr;
@@ -839,6 +881,7 @@ int ip_tunnel_ioctl(struct net_device *dev, struct ip_tunnel_parm *p, int cmd)
 	struct net *net = t->net;
 	struct ip_tunnel_net *itn = net_generic(net, t->ip_tnl_net_id);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!itn->fb_tunnel_dev);
 	switch (cmd) {
 	case SIOCGETTUNNEL:
@@ -937,6 +980,7 @@ EXPORT_SYMBOL_GPL(ip_tunnel_ioctl);
 
 int __ip_tunnel_change_mtu(struct net_device *dev, int new_mtu, bool strict)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel *tunnel = netdev_priv(dev);
 	int t_hlen = tunnel->hlen + sizeof(struct iphdr);
 	int max_mtu = 0xFFF8 - dev->hard_header_len - t_hlen;
@@ -958,12 +1002,14 @@ EXPORT_SYMBOL_GPL(__ip_tunnel_change_mtu);
 
 int ip_tunnel_change_mtu(struct net_device *dev, int new_mtu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __ip_tunnel_change_mtu(dev, new_mtu, true);
 }
 EXPORT_SYMBOL_GPL(ip_tunnel_change_mtu);
 
 static void ip_tunnel_dev_free(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel *tunnel = netdev_priv(dev);
 
 	gro_cells_destroy(&tunnel->gro_cells);
@@ -973,6 +1019,7 @@ static void ip_tunnel_dev_free(struct net_device *dev)
 
 void ip_tunnel_dellink(struct net_device *dev, struct list_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel *tunnel = netdev_priv(dev);
 	struct ip_tunnel_net *itn;
 
@@ -987,6 +1034,7 @@ EXPORT_SYMBOL_GPL(ip_tunnel_dellink);
 
 struct net *ip_tunnel_get_link_net(const struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel *tunnel = netdev_priv(dev);
 
 	return tunnel->net;
@@ -995,6 +1043,7 @@ EXPORT_SYMBOL(ip_tunnel_get_link_net);
 
 int ip_tunnel_get_iflink(const struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel *tunnel = netdev_priv(dev);
 
 	return tunnel->parms.link;
@@ -1004,6 +1053,7 @@ EXPORT_SYMBOL(ip_tunnel_get_iflink);
 int ip_tunnel_init_net(struct net *net, unsigned int ip_tnl_net_id,
 				  struct rtnl_link_ops *ops, char *devname)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel_net *itn = net_generic(net, ip_tnl_net_id);
 	struct ip_tunnel_parm parms;
 	unsigned int i;
@@ -1012,13 +1062,17 @@ int ip_tunnel_init_net(struct net *net, unsigned int ip_tnl_net_id,
 		INIT_HLIST_HEAD(&itn->tunnels[i]);
 
 	if (!ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		itn->fb_tunnel_dev = NULL;
 		return 0;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(&parms, 0, sizeof(parms));
 	if (devname)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		strlcpy(parms.name, devname, IFNAMSIZ);
+}
 
 	rtnl_lock();
 	itn->fb_tunnel_dev = __ip_tunnel_create(net, ops, &parms);
@@ -1057,7 +1111,9 @@ static void ip_tunnel_destroy(struct ip_tunnel_net *itn, struct list_head *head,
 			 * been added to the list by the previous loop.
 			 */
 			if (!net_eq(dev_net(t->dev), net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				unregister_netdevice_queue(t->dev, head);
+}
 	}
 }
 
@@ -1085,6 +1141,7 @@ int ip_tunnel_newlink(struct net_device *dev, struct nlattr *tb[],
 	itn = net_generic(net, nt->ip_tnl_net_id);
 
 	if (nt->collect_md) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rtnl_dereference(itn->collect_md_tun))
 			return -EEXIST;
 	} else {
@@ -1121,7 +1178,9 @@ int ip_tunnel_changelink(struct net_device *dev, struct nlattr *tb[],
 	struct ip_tunnel_net *itn = net_generic(net, tunnel->ip_tnl_net_id);
 
 	if (dev == itn->fb_tunnel_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	t = ip_tunnel_find(itn, p, dev->type);
 
@@ -1152,6 +1211,7 @@ EXPORT_SYMBOL_GPL(ip_tunnel_changelink);
 
 int ip_tunnel_init(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel *tunnel = netdev_priv(dev);
 	struct iphdr *iph = &tunnel->parms.iph;
 	int err;
@@ -1160,16 +1220,20 @@ int ip_tunnel_init(struct net_device *dev)
 	dev->priv_destructor = ip_tunnel_dev_free;
 	dev->tstats = netdev_alloc_pcpu_stats(struct pcpu_sw_netstats);
 	if (!dev->tstats)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	err = dst_cache_init(&tunnel->dst_cache, GFP_KERNEL);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		free_percpu(dev->tstats);
 		return err;
 	}
 
 	err = gro_cells_init(&tunnel->gro_cells, dev);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_cache_destroy(&tunnel->dst_cache);
 		free_percpu(dev->tstats);
 		return err;
@@ -1182,15 +1246,18 @@ int ip_tunnel_init(struct net_device *dev)
 	iph->ihl		= 5;
 
 	if (tunnel->collect_md) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev->features |= NETIF_F_NETNS_LOCAL;
 		netif_keep_dst(dev);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL_GPL(ip_tunnel_init);
 
 void ip_tunnel_uninit(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel *tunnel = netdev_priv(dev);
 	struct net *net = tunnel->net;
 	struct ip_tunnel_net *itn;
@@ -1198,8 +1265,11 @@ void ip_tunnel_uninit(struct net_device *dev)
 	itn = net_generic(net, tunnel->ip_tnl_net_id);
 	/* fb_tunnel_dev will be unregisted in net-exit call. */
 	if (itn->fb_tunnel_dev != dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip_tunnel_del(itn, netdev_priv(dev));
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dst_cache_reset(&tunnel->dst_cache);
 }
 EXPORT_SYMBOL_GPL(ip_tunnel_uninit);
@@ -1207,6 +1277,7 @@ EXPORT_SYMBOL_GPL(ip_tunnel_uninit);
 /* Do least required initialization, rest of init is done in tunnel_init call */
 void ip_tunnel_setup(struct net_device *dev, unsigned int net_id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel *tunnel = netdev_priv(dev);
 	tunnel->ip_tnl_net_id = net_id;
 }
diff --git a/net/ipv4/ip_tunnel_core.c b/net/ipv4/ip_tunnel_core.c
index 2f39479..0313e42 100644
--- a/net/ipv4/ip_tunnel_core.c
+++ b/net/ipv4/ip_tunnel_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2013 Nicira, Inc.
  *
@@ -60,6 +62,7 @@ void iptunnel_xmit(struct sock *sk, struct rtable *rt, struct sk_buff *skb,
 		   __be32 src, __be32 dst, __u8 proto,
 		   __u8 tos, __u8 ttl, __be16 df, bool xnet)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int pkt_len = skb->len - skb_inner_network_offset(skb);
 	struct net *net = dev_net(rt->dst.dev);
 	struct net_device *dev = skb->dev;
@@ -98,6 +101,7 @@ EXPORT_SYMBOL_GPL(iptunnel_xmit);
 int __iptunnel_pull_header(struct sk_buff *skb, int hdr_len,
 			   __be16 inner_proto, bool raw_proto, bool xnet)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(!pskb_may_pull(skb, hdr_len)))
 		return -ENOMEM;
 
@@ -134,6 +138,7 @@ struct metadata_dst *iptunnel_metadata_reply(struct metadata_dst *md,
 	struct metadata_dst *res;
 	struct ip_tunnel_info *dst, *src;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!md || md->type != METADATA_IP_TUNNEL ||
 	    md->u.tun_info.mode & IP_TUNNEL_INFO_TX)
 
@@ -163,6 +168,7 @@ int iptunnel_handle_offloads(struct sk_buff *skb,
 	int err;
 
 	if (likely(!skb->encapsulation)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb_reset_inner_headers(skb);
 		skb->encapsulation = 1;
 	}
@@ -204,11 +210,13 @@ void ip_tunnel_get_stats64(struct net_device *dev,
 		unsigned int start;
 
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			start = u64_stats_fetch_begin_irq(&tstats->syncp);
 			rx_packets = tstats->rx_packets;
 			tx_packets = tstats->tx_packets;
 			rx_bytes = tstats->rx_bytes;
 			tx_bytes = tstats->tx_bytes;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (u64_stats_fetch_retry_irq(&tstats->syncp, start));
 
 		tot->rx_packets += rx_packets;
@@ -241,7 +249,9 @@ static int ip_tun_build_state(struct nlattr *attr,
 	err = nla_parse_nested(tb, LWTUNNEL_IP_MAX, attr, ip_tun_policy,
 			       extack);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	new_state = lwtunnel_state_alloc(sizeof(*tun_info));
 	if (!new_state)
@@ -280,6 +290,7 @@ static int ip_tun_build_state(struct nlattr *attr,
 static int ip_tun_fill_encap_info(struct sk_buff *skb,
 				  struct lwtunnel_state *lwtstate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel_info *tun_info = lwt_tun_info(lwtstate);
 
 	if (nla_put_be64(skb, LWTUNNEL_IP_ID, tun_info->key.tun_id,
@@ -296,6 +307,7 @@ static int ip_tun_fill_encap_info(struct sk_buff *skb,
 
 static int ip_tun_encap_nlsize(struct lwtunnel_state *lwtstate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nla_total_size_64bit(8)	/* LWTUNNEL_IP_ID */
 		+ nla_total_size(4)	/* LWTUNNEL_IP_DST */
 		+ nla_total_size(4)	/* LWTUNNEL_IP_SRC */
@@ -306,6 +318,7 @@ static int ip_tun_encap_nlsize(struct lwtunnel_state *lwtstate)
 
 static int ip_tun_cmp_encap(struct lwtunnel_state *a, struct lwtunnel_state *b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return memcmp(lwt_tun_info(a), lwt_tun_info(b),
 		      sizeof(struct ip_tunnel_info));
 }
@@ -340,7 +353,9 @@ static int ip6_tun_build_state(struct nlattr *attr,
 	err = nla_parse_nested(tb, LWTUNNEL_IP6_MAX, attr, ip6_tun_policy,
 			       extack);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	new_state = lwtunnel_state_alloc(sizeof(*tun_info));
 	if (!new_state)
@@ -379,6 +394,7 @@ static int ip6_tun_build_state(struct nlattr *attr,
 static int ip6_tun_fill_encap_info(struct sk_buff *skb,
 				   struct lwtunnel_state *lwtstate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip_tunnel_info *tun_info = lwt_tun_info(lwtstate);
 
 	if (nla_put_be64(skb, LWTUNNEL_IP6_ID, tun_info->key.tun_id,
@@ -395,6 +411,7 @@ static int ip6_tun_fill_encap_info(struct sk_buff *skb,
 
 static int ip6_tun_encap_nlsize(struct lwtunnel_state *lwtstate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nla_total_size_64bit(8)	/* LWTUNNEL_IP6_ID */
 		+ nla_total_size(16)	/* LWTUNNEL_IP6_DST */
 		+ nla_total_size(16)	/* LWTUNNEL_IP6_SRC */
@@ -428,12 +445,14 @@ EXPORT_SYMBOL(ip_tunnel_metadata_cnt);
 
 void ip_tunnel_need_metadata(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	static_key_slow_inc(&ip_tunnel_metadata_cnt);
 }
 EXPORT_SYMBOL_GPL(ip_tunnel_need_metadata);
 
 void ip_tunnel_unneed_metadata(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	static_key_slow_dec(&ip_tunnel_metadata_cnt);
 }
 EXPORT_SYMBOL_GPL(ip_tunnel_unneed_metadata);
diff --git a/net/ipv4/ipconfig.c b/net/ipv4/ipconfig.c
index abdebca..9f3fb1c 100644
--- a/net/ipv4/ipconfig.c
+++ b/net/ipv4/ipconfig.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  Automatic Configuration of IP -- use DHCP, BOOTP, RARP, or
@@ -193,6 +195,7 @@ static struct ic_device *ic_dev __initdata;		/* Selected device */
 
 static bool __init ic_is_init_dev(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->flags & IFF_LOOPBACK)
 		return false;
 	return user_dev_name[0] ? !strcmp(dev->name, user_dev_name) :
@@ -484,11 +487,13 @@ static struct packet_type rarp_packet_type __initdata = {
 
 static inline void __init ic_rarp_init(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_add_pack(&rarp_packet_type);
 }
 
 static inline void __init ic_rarp_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_remove_pack(&rarp_packet_type);
 }
 
@@ -507,6 +512,7 @@ ic_rarp_recv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt
 	if (!net_eq(dev_net(dev), &init_net))
 		goto drop;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb = skb_share_check(skb, GFP_ATOMIC);
 	if (!skb)
 		return NET_RX_DROP;
@@ -605,6 +611,7 @@ static inline void __init ic_nameservers_predef(void)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < CONF_NAMESERVERS_MAX; i++)
 		ic_nameservers[i] = NONE;
 }
@@ -667,6 +674,7 @@ static const u8 ic_bootp_cookie[4] = { 99, 130, 83, 99 };
 static void __init
 ic_dhcp_init_options(u8 *options, struct ic_device *d)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u8 mt = ((ic_servaddr == NONE)
 		 ? DHCPDISCOVER : DHCPREQUEST);
 	u8 *e = options;
@@ -746,6 +754,7 @@ ic_dhcp_init_options(u8 *options, struct ic_device *d)
 
 static void __init ic_bootp_init_ext(u8 *e)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(e, ic_bootp_cookie, 4);	/* RFC1048 Magic Cookie */
 	e += 4;
 	*e++ = 1;		/* Subnet mask request */
@@ -781,6 +790,7 @@ static void __init ic_bootp_init_ext(u8 *e)
  */
 static inline void __init ic_bootp_init(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ic_nameservers_predef();
 
 	dev_add_pack(&bootp_packet_type);
@@ -792,6 +802,7 @@ static inline void __init ic_bootp_init(void)
  */
 static inline void __init ic_bootp_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_remove_pack(&bootp_packet_type);
 }
 
@@ -812,7 +823,9 @@ static void __init ic_bootp_send_if(struct ic_device *d, unsigned long jiffies_d
 	skb = alloc_skb(sizeof(struct bootp_pkt) + hlen + tlen + 15,
 			GFP_KERNEL);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	skb_reserve(skb, hlen);
 	b = skb_put_zero(skb, sizeof(struct bootp_pkt));
 
@@ -880,6 +893,7 @@ static void __init ic_bootp_send_if(struct ic_device *d, unsigned long jiffies_d
  */
 static int __init ic_bootp_string(char *dest, char *src, int len, int max)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!len)
 		return 0;
 	if (len > max-1)
@@ -901,6 +915,7 @@ static void __init ic_do_bootp_ext(u8 *ext)
 
 	u8 *c;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("DHCP/BOOTP: Got extension %d:", *ext);
 	for (c=ext+2; c<ext+2+ext[1]; c++)
 		pr_debug(" %02x", *c);
@@ -1167,6 +1182,7 @@ static int __init ic_dynamic(void)
 	 * are missing, and without DHCP/BOOTP/RARP we are unable to get it.
 	 */
 	if (!ic_proto_enabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("IP-Config: Incomplete network configuration information\n");
 		return -1;
 	}
@@ -1318,6 +1334,7 @@ static int pnp_seq_show(struct seq_file *seq, void *v)
 
 static int pnp_seq_open(struct inode *indoe, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, pnp_seq_show, NULL);
 }
 
@@ -1342,6 +1359,7 @@ __be32 __init root_nfs_parse_addr(char *name)
 	char *cp, *cq;
 
 	cp = cq = name;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (octets < 4) {
 		while (*cp >= '0' && *cp <= '9')
 			cp++;
@@ -1370,6 +1388,7 @@ static int __init wait_for_devices(void)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < DEVICE_WAIT_MAX; i++) {
 		struct net_device *dev;
 		int found = 0;
@@ -1407,8 +1426,11 @@ static int __init ip_auto_config(void)
 #endif /* CONFIG_PROC_FS */
 
 	if (!ic_enable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("IP-Config: Entered.\n");
 #ifdef IPCONFIG_DYNAMIC
  try_try_again:
@@ -1416,12 +1438,16 @@ static int __init ip_auto_config(void)
 	/* Wait for devices to appear */
 	err = wait_for_devices();
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/* Setup all network devices */
 	err = ic_open_devs();
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/* Give drivers a chance to settle */
 	msleep(CONF_POST_OPEN);
@@ -1441,6 +1467,7 @@ static int __init ip_auto_config(void)
 	    ic_first_dev->next) {
 #ifdef IPCONFIG_DYNAMIC
 		if (ic_dynamic() < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ic_close_devs();
 
 			/*
@@ -1459,12 +1486,15 @@ static int __init ip_auto_config(void)
 			 */
 #ifdef CONFIG_ROOT_NFS
 			if (ROOT_DEV ==  Root_NFS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pr_err("IP-Config: Retrying forever (NFS root)...\n");
 				goto try_try_again;
 			}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (--retries) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pr_err("IP-Config: Reopening network devices...\n");
 				goto try_try_again;
 			}
@@ -1483,15 +1513,21 @@ static int __init ip_auto_config(void)
 		ic_dev = ic_first_dev;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	addr = root_nfs_parse_addr(root_server_path);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (root_server_addr == NONE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		root_server_addr = addr;
+}
 
 	/*
 	 * Use defaults wherever applicable.
 	 */
 	if (ic_defaults() < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	/*
 	 * Record which protocol was actually used.
@@ -1514,16 +1550,28 @@ static int __init ip_auto_config(void)
 	pr_info("     bootserver=%pI4, rootserver=%pI4, rootpath=%s",
 		&ic_servaddr, &root_server_addr, root_server_path);
 	if (ic_dev_mtu)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_cont(", mtu=%d", ic_dev_mtu);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < CONF_NAMESERVERS_MAX; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ic_nameservers[i] != NONE) {
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_cont("     nameserver%u=%pI4",
 				i, &ic_nameservers[i]);
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i++; i < CONF_NAMESERVERS_MAX; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ic_nameservers[i] != NONE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_cont(", nameserver%u=%pI4", i, &ic_nameservers[i]);
+}
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_cont("\n");
 #endif /* !SILENT */
 
@@ -1532,10 +1580,13 @@ static int __init ip_auto_config(void)
 	 * autoconfigured and set up routes.
 	 */
 	if (ic_setup_if() < 0 || ic_setup_routes() < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -1;
+}
 	else
 		err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ic_close_devs();
 
 	return err;
@@ -1550,6 +1601,7 @@ late_initcall(ip_auto_config);
  */
 static int __init ic_proto_name(char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!strcmp(name, "on") || !strcmp(name, "any")) {
 		return 1;
 	}
@@ -1612,7 +1664,9 @@ static int __init ip_auto_config_setup(char *addrs)
 	 * and skip the below static IP processing.
 	 */
 	if (ic_proto_name(addrs))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/* If no static IP is given, turn off autoconfig and bail.  */
 	if (*addrs == 0 ||
@@ -1693,12 +1747,14 @@ __setup("ip=", ip_auto_config_setup);
 
 static int __init nfsaddrs_config_setup(char *addrs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ip_auto_config_setup(addrs);
 }
 __setup("nfsaddrs=", nfsaddrs_config_setup);
 
 static int __init vendor_class_identifier_setup(char *addrs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (strlcpy(vendor_class_identifier, addrs,
 		    sizeof(vendor_class_identifier))
 	    >= sizeof(vendor_class_identifier))
diff --git a/net/ipv4/ipip.c b/net/ipv4/ipip.c
index cdd6273..01c2554 100644
--- a/net/ipv4/ipip.c
+++ b/net/ipv4/ipip.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Linux NET3:	IP/IP protocol decoder.
  *
diff --git a/net/ipv4/ipmr.c b/net/ipv4/ipmr.c
index c9b3e6e..2156771 100644
--- a/net/ipv4/ipmr.c
+++ b/net/ipv4/ipmr.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IP multicast routing support for mrouted 3.6/3.8
  *
@@ -270,12 +272,14 @@ static void __net_exit ipmr_rules_exit(struct net *net)
 
 static struct mr_table *ipmr_get_table(struct net *net, u32 id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return net->ipv4.mrt;
 }
 
 static int ipmr_fib_lookup(struct net *net, struct flowi4 *flp4,
 			   struct mr_table **mrt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*mrt = net->ipv4.mrt;
 	return 0;
 }
@@ -286,13 +290,16 @@ static int __net_init ipmr_rules_init(struct net *net)
 
 	mrt = ipmr_new_table(net, RT_TABLE_DEFAULT);
 	if (IS_ERR(mrt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(mrt);
+}
 	net->ipv4.mrt = mrt;
 	return 0;
 }
 
 static void __net_exit ipmr_rules_exit(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtnl_lock();
 	ipmr_free_table(net->ipv4.mrt);
 	net->ipv4.mrt = NULL;
@@ -306,6 +313,7 @@ static inline int ipmr_hash_cmp(struct rhashtable_compare_arg *arg,
 	const struct mfc_cache_cmp_arg *cmparg = arg->key;
 	struct mfc_cache *c = (struct mfc_cache *)ptr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cmparg->mfc_mcastgrp != c->mfc_mcastgrp ||
 	       cmparg->mfc_origin != c->mfc_origin;
 }
@@ -326,15 +334,22 @@ static struct mr_table *ipmr_new_table(struct net *net, u32 id)
 
 	/* "pimreg%u" should not exceed 16 bytes (IFNAMSIZ) */
 	if (id != RT_TABLE_DEFAULT && id >= 1000000000)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	mrt = ipmr_get_table(net, id);
 	if (mrt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return mrt;
+}
 
 	mrt = kzalloc(sizeof(*mrt), GFP_KERNEL);
 	if (!mrt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_pnet(&mrt->net, net);
 	mrt->id = id;
 
@@ -364,6 +379,7 @@ static void ipmr_free_table(struct mr_table *mrt)
 
 static void ipmr_del_tunnel(struct net_device *dev, struct vifctl *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(dev);
 
 	dev_close(dev);
@@ -398,6 +414,7 @@ static bool ipmr_init_vif_indev(const struct net_device *dev)
 {
 	struct in_device *in_dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	in_dev = __in_dev_get_rtnl(dev);
@@ -432,6 +449,7 @@ static struct net_device *ipmr_new_tunnel(struct net *net, struct vifctl *v)
 		ifr.ifr_ifru.ifru_data = (__force void __user *)&p;
 
 		if (ops->ndo_do_ioctl) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mm_segment_t oldfs = get_fs();
 
 			set_fs(KERNEL_DS);
@@ -462,6 +480,7 @@ static struct net_device *ipmr_new_tunnel(struct net *net, struct vifctl *v)
 #if defined(CONFIG_IP_PIMSM_V1) || defined(CONFIG_IP_PIMSM_V2)
 static netdev_tx_t reg_vif_xmit(struct sk_buff *skb, struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(dev);
 	struct mr_table *mrt;
 	struct flowi4 fl4 = {
@@ -488,6 +507,7 @@ static netdev_tx_t reg_vif_xmit(struct sk_buff *skb, struct net_device *dev)
 
 static int reg_vif_get_iflink(const struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -498,6 +518,7 @@ static const struct net_device_ops reg_vif_netdev_ops = {
 
 static void reg_vif_setup(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev->type		= ARPHRD_PIMREG;
 	dev->mtu		= ETH_DATA_LEN - sizeof(struct iphdr) - 8;
 	dev->flags		= IFF_NOARP;
@@ -512,7 +533,9 @@ static struct net_device *ipmr_reg_vif(struct net *net, struct mr_table *mrt)
 	char name[IFNAMSIZ];
 
 	if (mrt->id == RT_TABLE_DEFAULT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sprintf(name, "pimreg");
+}
 	else
 		sprintf(name, "pimreg%u", mrt->id);
 
@@ -598,6 +621,7 @@ static int vif_delete(struct mr_table *mrt, int vifi, int notify,
 	struct net_device *dev;
 	struct in_device *in_dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (vifi < 0 || vifi >= mrt->maxvif)
 		return -EADDRNOTAVAIL;
 
@@ -647,6 +671,7 @@ static int vif_delete(struct mr_table *mrt, int vifi, int notify,
 
 static void ipmr_cache_free_rcu(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mfc_cache *c = container_of(head, struct mfc_cache, rcu);
 
 	kmem_cache_free(mrt_cachep, c);
@@ -654,6 +679,7 @@ static void ipmr_cache_free_rcu(struct rcu_head *head)
 
 static inline void ipmr_cache_free(struct mfc_cache *c)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_rcu(&c->rcu, ipmr_cache_free_rcu);
 }
 
@@ -662,6 +688,7 @@ static inline void ipmr_cache_free(struct mfc_cache *c)
  */
 static void ipmr_destroy_unres(struct mr_table *mrt, struct mfc_cache *c)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = read_pnet(&mrt->net);
 	struct sk_buff *skb;
 	struct nlmsgerr *e;
@@ -697,6 +724,7 @@ static void ipmr_expire_process(unsigned long arg)
 	struct mfc_cache *c, *next;
 
 	if (!spin_trylock(&mfc_unres_lock)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mod_timer(&mrt->ipmr_expire_timer, jiffies+HZ/10);
 		return;
 	}
@@ -737,6 +765,7 @@ static void ipmr_update_thresholds(struct mr_table *mrt, struct mfc_cache *cache
 	cache->mfc_un.res.maxvif = 0;
 	memset(cache->mfc_un.res.ttls, 255, MAXVIFS);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (vifi = 0; vifi < mrt->maxvif; vifi++) {
 		if (VIF_EXISTS(mrt, vifi) &&
 		    ttls[vifi] && ttls[vifi] < 255) {
@@ -761,7 +790,9 @@ static int vif_add(struct net *net, struct mr_table *mrt,
 
 	/* Is vif busy ? */
 	if (VIF_EXISTS(mrt, vifi))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EADDRINUSE;
+}
 
 	switch (vifc->vifc_flags) {
 	case VIFF_REGISTER:
@@ -867,6 +898,7 @@ static struct mfc_cache *ipmr_cache_find(struct mr_table *mrt,
 	struct mfc_cache *c;
 
 	list = rhltable_lookup(&mrt->mfc_hash, &arg, ipmr_rht_params);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rhl_for_each_entry_rcu(c, tmp, list, mnode)
 		return c;
 
@@ -934,6 +966,7 @@ static struct mfc_cache *ipmr_cache_find_parent(struct mr_table *mrt,
 	struct mfc_cache *c;
 
 	list = rhltable_lookup(&mrt->mfc_hash, &arg, ipmr_rht_params);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rhl_for_each_entry_rcu(c, tmp, list, mnode)
 		if (parent == -1 || parent == c->mfc_parent)
 			return c;
@@ -944,6 +977,7 @@ static struct mfc_cache *ipmr_cache_find_parent(struct mr_table *mrt,
 /* Allocate a multicast cache entry */
 static struct mfc_cache *ipmr_cache_alloc(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mfc_cache *c = kmem_cache_zalloc(mrt_cachep, GFP_KERNEL);
 
 	if (c) {
@@ -955,6 +989,7 @@ static struct mfc_cache *ipmr_cache_alloc(void)
 
 static struct mfc_cache *ipmr_cache_alloc_unres(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mfc_cache *c = kmem_cache_zalloc(mrt_cachep, GFP_ATOMIC);
 
 	if (c) {
@@ -1003,6 +1038,7 @@ static void ipmr_cache_resolve(struct net *net, struct mr_table *mrt,
 static int ipmr_cache_report(struct mr_table *mrt,
 			     struct sk_buff *pkt, vifi_t vifi, int assert)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const int ihl = ip_hdrlen(pkt);
 	struct sock *mroute_sk;
 	struct igmphdr *igmp;
@@ -1079,6 +1115,7 @@ static int ipmr_cache_report(struct mr_table *mrt,
 static int ipmr_cache_unresolved(struct mr_table *mrt, vifi_t vifi,
 				 struct sk_buff *skb, struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct iphdr *iph = ip_hdr(skb);
 	struct mfc_cache *c;
 	bool found = false;
@@ -1158,7 +1195,9 @@ static int ipmr_mfc_delete(struct mr_table *mrt, struct mfcctl *mfc, int parent)
 				   mfc->mfcc_mcastgrp.s_addr, parent);
 	rcu_read_unlock();
 	if (!c)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 	rhltable_remove(&mrt->mfc_hash, &c->mnode, ipmr_rht_params);
 	list_del_rcu(&c->list);
 	mroute_netlink_event(mrt, c, RTM_DELROUTE);
@@ -1175,7 +1214,9 @@ static int ipmr_mfc_add(struct net *net, struct mr_table *mrt,
 	int ret;
 
 	if (mfc->mfcc_parent >= MAXVIFS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENFILE;
+}
 
 	/* The entries are added/deleted only under RTNL */
 	rcu_read_lock();
@@ -1251,16 +1292,20 @@ static void mroute_clean_tables(struct mr_table *mrt, bool all)
 
 	/* Shut down all active vif entries */
 	for (i = 0; i < mrt->maxvif; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!all && (mrt->vif_table[i].flags & VIFF_STATIC))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vif_delete(mrt, i, 0, &list);
 	}
 	unregister_netdevice_many(&list);
 
 	/* Wipe the cache */
 	list_for_each_entry_safe(c, tmp, &mrt->mfc_cache_list, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!all && (c->mfc_flags & MFC_STATIC))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rhltable_remove(&mrt->mfc_hash, &c->mnode, ipmr_rht_params);
 		list_del_rcu(&c->list);
 		mroute_netlink_event(mrt, c, RTM_DELROUTE);
@@ -1268,12 +1313,16 @@ static void mroute_clean_tables(struct mr_table *mrt, bool all)
 	}
 
 	if (atomic_read(&mrt->cache_resolve_queue_len) != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_bh(&mfc_unres_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_for_each_entry_safe(c, tmp, &mrt->mfc_unres_queue, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			list_del(&c->list);
 			mroute_netlink_event(mrt, c, RTM_DELROUTE);
 			ipmr_destroy_unres(mrt, c);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&mfc_unres_lock);
 	}
 }
@@ -1283,6 +1332,7 @@ static void mroute_clean_tables(struct mr_table *mrt, bool all)
  */
 static void mrtsock_destruct(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(sk);
 	struct mr_table *mrt;
 
@@ -1309,6 +1359,7 @@ static void mrtsock_destruct(struct sock *sk)
 int ip_mroute_setsockopt(struct sock *sk, int optname, char __user *optval,
 			 unsigned int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(sk);
 	int val, ret = 0, parent = 0;
 	struct mr_table *mrt;
@@ -1531,6 +1582,7 @@ int ipmr_ioctl(struct sock *sk, int cmd, void __user *arg)
 	struct net *net = sock_net(sk);
 	struct mr_table *mrt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mrt = ipmr_get_table(net, raw_sk(sk)->ipmr_table ? : RT_TABLE_DEFAULT);
 	if (!mrt)
 		return -ENOENT;
@@ -1605,6 +1657,7 @@ int ipmr_compat_ioctl(struct sock *sk, unsigned int cmd, void __user *arg)
 	struct net *net = sock_net(sk);
 	struct mr_table *mrt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mrt = ipmr_get_table(net, raw_sk(sk)->ipmr_table ? : RT_TABLE_DEFAULT);
 	if (!mrt)
 		return -ENOENT;
@@ -1656,6 +1709,7 @@ int ipmr_compat_ioctl(struct sock *sk, unsigned int cmd, void __user *arg)
 
 static int ipmr_device_event(struct notifier_block *this, unsigned long event, void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = netdev_notifier_info_to_dev(ptr);
 	struct net *net = dev_net(dev);
 	struct mr_table *mrt;
@@ -1663,15 +1717,21 @@ static int ipmr_device_event(struct notifier_block *this, unsigned long event, v
 	int ct;
 
 	if (event != NETDEV_UNREGISTER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NOTIFY_DONE;
+}
 
 	ipmr_for_each_table(mrt, net) {
 		v = &mrt->vif_table[0];
 		for (ct = 0; ct < mrt->maxvif; ct++, v++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (v->dev == dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vif_delete(mrt, ct, 1, NULL);
+}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NOTIFY_DONE;
 }
 
@@ -1702,6 +1762,7 @@ static void ip_encap(struct net *net, struct sk_buff *skb,
 	iph->saddr	=	saddr;
 	iph->protocol	=	IPPROTO_IPIP;
 	iph->ihl	=	5;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iph->tot_len	=	htons(skb->len);
 	ip_select_ident(net, skb, NULL);
 	ip_send_check(iph);
@@ -1715,6 +1776,7 @@ static inline int ipmr_forward_finish(struct net *net, struct sock *sk,
 {
 	struct ip_options *opt = &(IPCB(skb)->opt);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	IP_INC_STATS(net, IPSTATS_MIB_OUTFORWDATAGRAMS);
 	IP_ADD_STATS(net, IPSTATS_MIB_OUTOCTETS, skb->len);
 
@@ -1729,6 +1791,7 @@ static inline int ipmr_forward_finish(struct net *net, struct sock *sk,
 static void ipmr_queue_xmit(struct net *net, struct mr_table *mrt,
 			    struct sk_buff *skb, struct mfc_cache *c, int vifi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct iphdr *iph = ip_hdr(skb);
 	struct vif_device *vif = &mrt->vif_table[vifi];
 	struct net_device *dev;
@@ -1827,6 +1890,7 @@ static int ipmr_find_vif(struct mr_table *mrt, struct net_device *dev)
 {
 	int ct;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (ct = mrt->maxvif-1; ct >= 0; ct--) {
 		if (mrt->vif_table[ct].dev == dev)
 			break;
@@ -1839,6 +1903,7 @@ static void ip_mr_forward(struct net *net, struct mr_table *mrt,
 			  struct net_device *dev, struct sk_buff *skb,
 			  struct mfc_cache *cache, int local)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int true_vifi = ipmr_find_vif(mrt, dev);
 	int psend = -1;
 	int vif, ct;
@@ -1951,6 +2016,7 @@ static void ip_mr_forward(struct net *net, struct mr_table *mrt,
 
 static struct mr_table *ipmr_rt_fib_lookup(struct net *net, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rtable *rt = skb_rtable(skb);
 	struct iphdr *iph = ip_hdr(skb);
 	struct flowi4 fl4 = {
@@ -1990,6 +2056,7 @@ int ip_mr_input(struct sk_buff *skb)
 	 */
 	dev = skb->dev;
 	if (netif_is_l3_master(skb->dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev = dev_get_by_index_rcu(net, IPCB(skb)->iif);
 		if (!dev) {
 			kfree_skb(skb);
@@ -2092,6 +2159,7 @@ int pim_rcv_v1(struct sk_buff *skb)
 	if (!pskb_may_pull(skb, sizeof(*pim) + sizeof(struct iphdr)))
 		goto drop;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pim = igmp_hdr(skb);
 
 	mrt = ipmr_rt_fib_lookup(net, skb);
@@ -2119,6 +2187,7 @@ static int pim_rcv(struct sk_buff *skb)
 	if (!pskb_may_pull(skb, sizeof(*pim) + sizeof(struct iphdr)))
 		goto drop;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pim = (struct pimreghdr *)skb_transport_header(skb);
 	if (pim->type != ((PIM_VERSION << 4) | (PIM_TYPE_REGISTER)) ||
 	    (pim->flags & PIM_NULL_REGISTER) ||
@@ -2148,6 +2217,7 @@ static int __ipmr_fill_mroute(struct mr_table *mrt, struct sk_buff *skb,
 
 	/* If cache is unresolved, don't try to parse IIF and OIF */
 	if (c->mfc_parent >= MAXVIFS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtm->rtm_flags |= RTNH_F_UNRESOLVED;
 		return -ENOENT;
 	}
@@ -2200,7 +2270,9 @@ int ipmr_get_route(struct net *net, struct sk_buff *skb,
 
 	mrt = ipmr_get_table(net, RT_TABLE_DEFAULT);
 	if (!mrt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	rcu_read_lock();
 	cache = ipmr_cache_find(mrt, saddr, daddr);
@@ -2263,7 +2335,9 @@ static int ipmr_fill_mroute(struct mr_table *mrt, struct sk_buff *skb,
 
 	nlh = nlmsg_put(skb, portid, seq, cmd, sizeof(*rtm), flags);
 	if (!nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	rtm = nlmsg_data(nlh);
 	rtm->rtm_family   = RTNL_FAMILY_IPMR;
@@ -2321,6 +2395,7 @@ static size_t mroute_msgsize(bool unresolved, int maxvif)
 static void mroute_netlink_event(struct mr_table *mrt, struct mfc_cache *mfc,
 				 int cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = read_pnet(&mrt->net);
 	struct sk_buff *skb;
 	int err = -ENOBUFS;
@@ -2360,6 +2435,7 @@ static size_t igmpmsg_netlink_msgsize(size_t payloadlen)
 
 static void igmpmsg_netlink_event(struct mr_table *mrt, struct sk_buff *pkt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = read_pnet(&mrt->net);
 	struct nlmsghdr *nlh;
 	struct rtgenmsg *rtgenm;
@@ -2409,6 +2485,7 @@ static void igmpmsg_netlink_event(struct mr_table *mrt, struct sk_buff *pkt)
 static int ipmr_rtm_getroute(struct sk_buff *in_skb, struct nlmsghdr *nlh,
 			     struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(in_skb->sk);
 	struct nlattr *tb[RTA_MAX + 1];
 	struct sk_buff *skb = NULL;
@@ -2469,6 +2546,7 @@ static int ipmr_rtm_getroute(struct sk_buff *in_skb, struct nlmsghdr *nlh,
 
 static int ipmr_rtm_dumproute(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct mr_table *mrt;
 	struct mfc_cache *mfc;
@@ -2537,6 +2615,7 @@ static const struct nla_policy rtm_ipmr_policy[RTA_MAX + 1] = {
 
 static bool ipmr_rtm_validate_proto(unsigned char rtm_protocol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (rtm_protocol) {
 	case RTPROT_STATIC:
 	case RTPROT_MROUTED:
@@ -2547,6 +2626,7 @@ static bool ipmr_rtm_validate_proto(unsigned char rtm_protocol)
 
 static int ipmr_nla_get_ttls(const struct nlattr *nla, struct mfcctl *mfcc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rtnexthop *rtnh = nla_data(nla);
 	int remaining = nla_len(nla), vifi = 0;
 
@@ -2577,6 +2657,7 @@ static int rtm_to_ipmr_mfcc(struct net *net, struct nlmsghdr *nlh,
 			     extack);
 	if (ret < 0)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtm = nlmsg_data(nlh);
 
 	ret = -EINVAL;
@@ -2793,6 +2874,7 @@ static struct vif_device *ipmr_vif_seq_idx(struct net *net,
 {
 	struct mr_table *mrt = iter->mrt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (iter->ct = 0; iter->ct < mrt->maxvif; ++iter->ct) {
 		if (!VIF_EXISTS(mrt, iter->ct))
 			continue;
@@ -2811,7 +2893,9 @@ static void *ipmr_vif_seq_start(struct seq_file *seq, loff_t *pos)
 
 	mrt = ipmr_get_table(net, RT_TABLE_DEFAULT);
 	if (!mrt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 
 	iter->mrt = mrt;
 
@@ -2828,7 +2912,9 @@ static void *ipmr_vif_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 
 	++*pos;
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ipmr_vif_seq_idx(net, iter, 0);
+}
 
 	while (++iter->ct < mrt->maxvif) {
 		if (!VIF_EXISTS(mrt, iter->ct))
@@ -2841,6 +2927,7 @@ static void *ipmr_vif_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 static void ipmr_vif_seq_stop(struct seq_file *seq, void *v)
 	__releases(mrt_lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock(&mrt_lock);
 }
 
@@ -2850,6 +2937,7 @@ static int ipmr_vif_seq_show(struct seq_file *seq, void *v)
 	struct mr_table *mrt = iter->mrt;
 
 	if (v == SEQ_START_TOKEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_puts(seq,
 			 "Interface      BytesIn  PktsIn  BytesOut PktsOut Flags Local    Remote\n");
 	} else {
@@ -2875,6 +2963,7 @@ static const struct seq_operations ipmr_vif_seq_ops = {
 
 static int ipmr_vif_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &ipmr_vif_seq_ops,
 			    sizeof(struct ipmr_vif_iter));
 }
@@ -2901,6 +2990,7 @@ static struct mfc_cache *ipmr_mfc_seq_idx(struct net *net,
 
 	rcu_read_lock();
 	it->cache = &mrt->mfc_cache_list;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(mfc, &mrt->mfc_cache_list, list)
 		if (pos-- == 0)
 			return mfc;
@@ -2926,7 +3016,9 @@ static void *ipmr_mfc_seq_start(struct seq_file *seq, loff_t *pos)
 
 	mrt = ipmr_get_table(net, RT_TABLE_DEFAULT);
 	if (!mrt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 
 	it->mrt = mrt;
 	it->cache = NULL;
@@ -2944,7 +3036,9 @@ static void *ipmr_mfc_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 	++*pos;
 
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ipmr_mfc_seq_idx(net, seq->private, 0);
+}
 
 	if (mfc->list.next != it->cache)
 		return list_entry(mfc->list.next, struct mfc_cache, list);
@@ -2973,7 +3067,9 @@ static void ipmr_mfc_seq_stop(struct seq_file *seq, void *v)
 	struct mr_table *mrt = it->mrt;
 
 	if (it->cache == &mrt->mfc_unres_queue)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&mfc_unres_lock);
+}
 	else if (it->cache == &mrt->mfc_cache_list)
 		rcu_read_unlock();
 }
@@ -2983,6 +3079,7 @@ static int ipmr_mfc_seq_show(struct seq_file *seq, void *v)
 	int n;
 
 	if (v == SEQ_START_TOKEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_puts(seq,
 		 "Group    Origin   Iif     Pkts    Bytes    Wrong Oifs\n");
 	} else {
@@ -3028,6 +3125,7 @@ static const struct seq_operations ipmr_mfc_seq_ops = {
 
 static int ipmr_mfc_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &ipmr_mfc_seq_ops,
 			    sizeof(struct ipmr_mfc_iter));
 }
@@ -3108,6 +3206,7 @@ int __init ip_mr_init(void)
 		goto reg_notif_fail;
 #ifdef CONFIG_IP_PIMSM_V2
 	if (inet_add_protocol(&pim_protocol, IPPROTO_PIM) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s: can't add PIM protocol\n", __func__);
 		err = -EAGAIN;
 		goto add_proto_fail;
diff --git a/net/ipv4/netfilter.c b/net/ipv4/netfilter.c
index c0cc6aa..664c9c0 100644
--- a/net/ipv4/netfilter.c
+++ b/net/ipv4/netfilter.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPv4 specific functions of netfilter core
  *
@@ -19,6 +21,7 @@
 /* route_me_harder function, used by iptable_nat, iptable_mangle + ip_queue */
 int ip_route_me_harder(struct net *net, struct sk_buff *skb, unsigned int addr_type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct iphdr *iph = ip_hdr(skb);
 	struct rtable *rt;
 	struct flowi4 fl4 = {};
@@ -98,6 +101,7 @@ static void nf_ip_saveroute(const struct sk_buff *skb,
 	struct ip_rt_info *rt_info = nf_queue_entry_reroute(entry);
 
 	if (entry->state.hook == NF_INET_LOCAL_OUT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const struct iphdr *iph = ip_hdr(skb);
 
 		rt_info->tos = iph->tos;
@@ -113,6 +117,7 @@ static int nf_ip_reroute(struct net *net, struct sk_buff *skb,
 	const struct ip_rt_info *rt_info = nf_queue_entry_reroute(entry);
 
 	if (entry->state.hook == NF_INET_LOCAL_OUT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const struct iphdr *iph = ip_hdr(skb);
 
 		if (!(iph->tos == rt_info->tos &&
@@ -127,6 +132,7 @@ static int nf_ip_reroute(struct net *net, struct sk_buff *skb,
 __sum16 nf_ip_checksum(struct sk_buff *skb, unsigned int hook,
 			    unsigned int dataoff, u_int8_t protocol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct iphdr *iph = ip_hdr(skb);
 	__sum16 csum = 0;
 
@@ -159,6 +165,7 @@ static __sum16 nf_ip_checksum_partial(struct sk_buff *skb, unsigned int hook,
 				      unsigned int dataoff, unsigned int len,
 				      u_int8_t protocol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct iphdr *iph = ip_hdr(skb);
 	__sum16 csum = 0;
 
@@ -179,6 +186,7 @@ static __sum16 nf_ip_checksum_partial(struct sk_buff *skb, unsigned int hook,
 static int nf_ip_route(struct net *net, struct dst_entry **dst,
 		       struct flowi *fl, bool strict __always_unused)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rtable *rt = ip_route_output_key(net, &fl->u.ip4);
 	if (IS_ERR(rt))
 		return PTR_ERR(rt);
diff --git a/net/ipv4/netfilter/arp_tables.c b/net/ipv4/netfilter/arp_tables.c
index 9e2770f..5531b33 100644
--- a/net/ipv4/netfilter/arp_tables.c
+++ b/net/ipv4/netfilter/arp_tables.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Packet matching code for ARP packets.
  *
diff --git a/net/ipv4/netfilter/arpt_mangle.c b/net/ipv4/netfilter/arpt_mangle.c
index a5e52a9..f8c8007 100644
--- a/net/ipv4/netfilter/arpt_mangle.c
+++ b/net/ipv4/netfilter/arpt_mangle.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* module that allows mangling of the arp payload */
 #include <linux/module.h>
 #include <linux/netfilter.h>
diff --git a/net/ipv4/netfilter/arptable_filter.c b/net/ipv4/netfilter/arptable_filter.c
index 8f8713b..e072b6f 100644
--- a/net/ipv4/netfilter/arptable_filter.c
+++ b/net/ipv4/netfilter/arptable_filter.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Filtering ARP tables module.
  *
diff --git a/net/ipv4/netfilter/ip_tables.c b/net/ipv4/netfilter/ip_tables.c
index 39286e5..c317f19 100644
--- a/net/ipv4/netfilter/ip_tables.c
+++ b/net/ipv4/netfilter/ip_tables.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Packet matching code.
  *
@@ -61,12 +63,16 @@ ip_packet_match(const struct iphdr *ip,
 	ret = ifname_compare_aligned(indev, ipinfo->iniface, ipinfo->iniface_mask);
 
 	if (NF_INVF(ipinfo, IPT_INV_VIA_IN, ret != 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	ret = ifname_compare_aligned(outdev, ipinfo->outiface, ipinfo->outiface_mask);
 
 	if (NF_INVF(ipinfo, IPT_INV_VIA_OUT, ret != 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/* Check specific protocol */
 	if (ipinfo->proto &&
@@ -86,15 +92,20 @@ static bool
 ip_checkentry(const struct ipt_ip *ip)
 {
 	if (ip->flags & ~IPT_F_MASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (ip->invflags & ~IPT_INV_MASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	return true;
 }
 
 static unsigned int
 ipt_error(struct sk_buff *skb, const struct xt_action_param *par)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_info_ratelimited("error: `%s'\n", (const char *)par->targinfo);
 
 	return NF_DROP;
@@ -121,6 +132,7 @@ static inline bool unconditional(const struct ipt_entry *e)
 static inline const struct xt_entry_target *
 ipt_get_target_c(const struct ipt_entry *e)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ipt_get_target((struct ipt_entry *)e);
 }
 
@@ -219,6 +231,7 @@ static void trace_packet(struct net *net,
 static inline
 struct ipt_entry *ipt_next_entry(const struct ipt_entry *entry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (void *)entry + entry->next_offset;
 }
 
@@ -278,7 +291,9 @@ ipt_do_table(struct sk_buff *skb,
 	 * but it is no problem since absolute verdict is issued by these.
 	 */
 	if (static_key_false(&xt_tee_enabled))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		jumpstack += private->stacksize * __this_cpu_read(nf_skb_duplicated);
+}
 
 	e = get_entry(table_base, private->hook_entry[hook]);
 
@@ -296,6 +311,7 @@ ipt_do_table(struct sk_buff *skb,
 		}
 
 		xt_ematch_foreach(ematch, e) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpar.match     = ematch->u.kernel.match;
 			acpar.matchinfo = ematch->data;
 			if (!acpar.match->match(skb, &acpar))
@@ -305,6 +321,7 @@ ipt_do_table(struct sk_buff *skb,
 		counter = xt_get_this_cpu_counter(&e->counters);
 		ADD_COUNTER(*counter, skb->len, 1);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		t = ipt_get_target(e);
 		WARN_ON(!t->u.kernel.target);
 
@@ -325,23 +342,29 @@ ipt_do_table(struct sk_buff *skb,
 					verdict = (unsigned int)(-v) - 1;
 					break;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (stackidx == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					e = get_entry(table_base,
 					    private->underflow[hook]);
 				} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					e = jumpstack[--stackidx];
 					e = ipt_next_entry(e);
 				}
 				continue;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (table_base + v != ipt_next_entry(e) &&
 			    !(e->ip.flags & IPT_F_GOTO))
 				jumpstack[stackidx++] = e;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			e = get_entry(table_base, v);
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpar.target   = t->u.kernel.target;
 		acpar.targinfo = t->data;
 
@@ -354,13 +377,16 @@ ipt_do_table(struct sk_buff *skb,
 			/* Verdict */
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while (!acpar.hotdrop);
 
 	xt_write_recseq_end(addend);
 	local_bh_enable();
 
 	if (acpar.hotdrop)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NF_DROP;
+}
 	else return verdict;
 }
 
@@ -391,7 +417,9 @@ mark_source_chains(const struct xt_table_info *newinfo,
 			int visited = e->comefrom & (1 << hook);
 
 			if (e->comefrom & (1 << NF_INET_NUMHOOKS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
 
 			e->comefrom |= ((1 << hook) | (1 << NF_INET_NUMHOOKS));
 
@@ -419,14 +447,19 @@ mark_source_chains(const struct xt_table_info *newinfo,
 					if (pos == oldpos)
 						goto next;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					e = entry0 + pos;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				} while (oldpos == pos + e->next_offset);
 
 				/* Move along one */
 				size = e->next_offset;
 				e = entry0 + pos + size;
 				if (pos + size >= newinfo->size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				e->counters.pcnt = pos;
 				pos += size;
 			} else {
@@ -436,16 +469,21 @@ mark_source_chains(const struct xt_table_info *newinfo,
 					   XT_STANDARD_TARGET) == 0 &&
 				    newpos >= 0) {
 					/* This a jump; chase it. */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (!xt_find_jump_offset(offsets, newpos,
 								 newinfo->number))
 						return 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					e = entry0 + newpos;
 				} else {
 					/* ... this is a fallthru */
 					newpos = pos + e->next_offset;
 					if (newpos >= newinfo->size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						return 0;
+}
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				e = entry0 + newpos;
 				e->counters.pcnt = pos;
 				pos = newpos;
@@ -453,6 +491,7 @@ mark_source_chains(const struct xt_table_info *newinfo,
 		}
 next:		;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -465,7 +504,9 @@ static void cleanup_match(struct xt_entry_match *m, struct net *net)
 	par.matchinfo = m->data;
 	par.family    = NFPROTO_IPV4;
 	if (par.match->destroy != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		par.match->destroy(&par);
+}
 	module_put(par.match->me);
 }
 
@@ -490,7 +531,9 @@ find_check_match(struct xt_entry_match *m, struct xt_mtchk_param *par)
 	match = xt_request_find_match(NFPROTO_IPV4, m->u.user.name,
 				      m->u.user.revision);
 	if (IS_ERR(match))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(match);
+}
 	m->u.kernel.match = match;
 
 	ret = check_match(m, par);
@@ -505,6 +548,7 @@ find_check_match(struct xt_entry_match *m, struct xt_mtchk_param *par)
 
 static int check_target(struct ipt_entry *e, struct net *net, const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct xt_entry_target *t = ipt_get_target(e);
 	struct xt_tgchk_param par = {
 		.net       = net,
@@ -533,8 +577,11 @@ find_check_entry(struct ipt_entry *e, struct net *net, const char *name,
 	struct xt_entry_match *ematch;
 
 	if (!xt_percpu_counter_alloc(alloc_state, &e->counters))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	j = 0;
 	mtpar.net	= net;
 	mtpar.table     = name;
@@ -542,16 +589,20 @@ find_check_entry(struct ipt_entry *e, struct net *net, const char *name,
 	mtpar.hook_mask = e->comefrom;
 	mtpar.family    = NFPROTO_IPV4;
 	xt_ematch_foreach(ematch, e) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = find_check_match(ematch, &mtpar);
 		if (ret != 0)
 			goto cleanup_matches;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		++j;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	t = ipt_get_target(e);
 	target = xt_request_find_target(NFPROTO_IPV4, t->u.user.name,
 					t->u.user.revision);
 	if (IS_ERR(target)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(target);
 		goto cleanup_matches;
 	}
@@ -561,16 +612,20 @@ find_check_entry(struct ipt_entry *e, struct net *net, const char *name,
 	if (ret)
 		goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
  err:
 	module_put(t->u.kernel.target->me);
  cleanup_matches:
 	xt_ematch_foreach(ematch, e) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (j-- == 0)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cleanup_match(ematch, net);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_percpu_counter_free(&e->counters);
 
 	return ret;
@@ -582,10 +637,15 @@ static bool check_underflow(const struct ipt_entry *e)
 	unsigned int verdict;
 
 	if (!unconditional(e))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	t = ipt_get_target_c(e);
 	if (strcmp(t->u.user.name, XT_STANDARD_TARGET) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	verdict = ((struct xt_standard_target *)t)->verdict;
 	verdict = -verdict - 1;
 	return verdict == NF_DROP || verdict == NF_ACCEPT;
@@ -613,12 +673,16 @@ check_entry_size_and_hooks(struct ipt_entry *e,
 		return -EINVAL;
 
 	if (!ip_checkentry(&e->ip))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	err = xt_check_entry_offsets(e, e->elems, e->target_offset,
 				     e->next_offset);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/* Check hooks & underflows */
 	for (h = 0; h < NF_INET_NUMHOOKS; h++) {
@@ -628,7 +692,9 @@ check_entry_size_and_hooks(struct ipt_entry *e,
 			newinfo->hook_entry[h] = hook_entries[h];
 		if ((unsigned char *)e - base == underflows[h]) {
 			if (!check_underflow(e))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 
 			newinfo->underflow[h] = underflows[h];
 		}
@@ -685,7 +751,10 @@ translate_table(struct net *net, struct xt_table_info *newinfo, void *entry0,
 
 	offsets = xt_alloc_entry_offsets(newinfo->number);
 	if (!offsets)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i = 0;
 	/* Walk through entries, checking offsets. */
 	xt_entry_foreach(iter, entry0, newinfo->size) {
@@ -704,6 +773,7 @@ translate_table(struct net *net, struct xt_table_info *newinfo, void *entry0,
 			++newinfo->stacksize;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -EINVAL;
 	if (i != repl->num_entries)
 		goto out_free;
@@ -720,6 +790,7 @@ translate_table(struct net *net, struct xt_table_info *newinfo, void *entry0,
 	}
 
 	if (!mark_source_chains(newinfo, repl->valid_hooks, entry0, offsets)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ELOOP;
 		goto out_free;
 	}
@@ -736,14 +807,19 @@ translate_table(struct net *net, struct xt_table_info *newinfo, void *entry0,
 	}
 
 	if (ret != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xt_entry_foreach(iter, entry0, newinfo->size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (i-- == 0)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cleanup_entry(iter, net);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
  out_free:
 	kvfree(offsets);
@@ -758,6 +834,7 @@ get_counters(const struct xt_table_info *t,
 	unsigned int cpu;
 	unsigned int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(cpu) {
 		seqcount_t *s = &per_cpu(xt_recseq, cpu);
 
@@ -794,7 +871,9 @@ static struct xt_counters *alloc_counters(const struct xt_table *table)
 	counters = vzalloc(countersize);
 
 	if (counters == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	get_counters(private, counters);
 
@@ -815,7 +894,9 @@ copy_entries_to_user(unsigned int total_size,
 
 	counters = alloc_counters(table);
 	if (IS_ERR(counters))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(counters);
+}
 
 	loc_cpu_entry = private->entries;
 
@@ -868,7 +949,9 @@ static void compat_standard_from_user(void *dst, const void *src)
 	int v = *(compat_int_t *)src;
 
 	if (v > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		v += xt_compat_calc_jump(AF_INET, v);
+}
 	memcpy(dst, &v, sizeof(v));
 }
 
@@ -877,7 +960,9 @@ static int compat_standard_to_user(void __user *dst, const void *src)
 	compat_int_t cv = *(int *)src;
 
 	if (cv > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cv -= xt_compat_calc_jump(AF_INET, cv);
+}
 	return copy_to_user(dst, &cv, sizeof(cv)) ? -EFAULT : 0;
 }
 
@@ -892,6 +977,7 @@ static int compat_calc_entry(const struct ipt_entry *e,
 
 	off = sizeof(struct ipt_entry) - sizeof(struct compat_ipt_entry);
 	entry_offset = (void *)e - base;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_ematch_foreach(ematch, e)
 		off += xt_compat_match_offset(ematch->u.kernel.match);
 	t = ipt_get_target_c(e);
@@ -919,6 +1005,7 @@ static int compat_table_info(const struct xt_table_info *info,
 	const void *loc_cpu_entry;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!newinfo || !info)
 		return -EINVAL;
 
@@ -944,7 +1031,9 @@ static int get_info(struct net *net, void __user *user,
 	int ret;
 
 	if (*len != sizeof(struct ipt_getinfo))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (copy_from_user(name, user, sizeof(name)) != 0)
 		return -EFAULT;
@@ -1003,7 +1092,9 @@ get_entries(struct net *net, struct ipt_get_entries __user *uptr,
 	struct xt_table *t;
 
 	if (*len < sizeof(get))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (copy_from_user(&get, uptr, sizeof(get)) != 0)
 		return -EFAULT;
 	if (*len != sizeof(struct ipt_get_entries) + get.size)
@@ -1041,6 +1132,7 @@ __do_replace(struct net *net, const char *name, unsigned int valid_hooks,
 	ret = 0;
 	counters = vzalloc(num_counters * sizeof(struct xt_counters));
 	if (!counters) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOMEM;
 		goto out;
 	}
@@ -1257,7 +1349,9 @@ compat_find_calc_match(struct xt_entry_match *m,
 	match = xt_request_find_match(NFPROTO_IPV4, m->u.user.name,
 				      m->u.user.revision);
 	if (IS_ERR(match))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(match);
+}
 
 	m->u.kernel.match = match;
 	*size += xt_compat_match_offset(match);
@@ -1358,6 +1452,7 @@ compat_copy_entry_from_user(struct compat_ipt_entry *e, void **dstptr,
 
 	origsize = *size;
 	de = *dstptr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(de, e, sizeof(struct ipt_entry));
 	memcpy(&de->counters, &e->counters, sizeof(e->counters));
 
@@ -1487,7 +1582,9 @@ compat_do_replace(struct net *net, void __user *user, unsigned int len)
 	struct ipt_entry *iter;
 
 	if (copy_from_user(&tmp, user, sizeof(tmp)) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	/* overflow check */
 	if (tmp.num_counters >= INT_MAX / sizeof(struct xt_counters))
@@ -1533,7 +1630,9 @@ compat_do_ipt_set_ctl(struct sock *sk,	int cmd, void __user *user,
 	int ret;
 
 	if (!ns_capable(sock_net(sk)->user_ns, CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	switch (cmd) {
 	case IPT_SO_SET_REPLACE:
@@ -1571,7 +1670,9 @@ compat_copy_entries_to_user(unsigned int total_size, struct xt_table *table,
 
 	counters = alloc_counters(table);
 	if (IS_ERR(counters))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(counters);
+}
 
 	pos = userptr;
 	size = total_size;
@@ -1595,7 +1696,9 @@ compat_get_entries(struct net *net, struct compat_ipt_get_entries __user *uptr,
 	struct xt_table *t;
 
 	if (*len < sizeof(get))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (copy_from_user(&get, uptr, sizeof(get)) != 0)
 		return -EFAULT;
@@ -1635,7 +1738,9 @@ compat_do_ipt_get_ctl(struct sock *sk, int cmd, void __user *user, int *len)
 	int ret;
 
 	if (!ns_capable(sock_net(sk)->user_ns, CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	switch (cmd) {
 	case IPT_SO_GET_INFO:
@@ -1657,7 +1762,9 @@ do_ipt_set_ctl(struct sock *sk, int cmd, void __user *user, unsigned int len)
 	int ret;
 
 	if (!ns_capable(sock_net(sk)->user_ns, CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	switch (cmd) {
 	case IPT_SO_SET_REPLACE:
@@ -1681,7 +1788,9 @@ do_ipt_get_ctl(struct sock *sk, int cmd, void __user *user, int *len)
 	int ret;
 
 	if (!ns_capable(sock_net(sk)->user_ns, CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	switch (cmd) {
 	case IPT_SO_GET_INFO:
@@ -1737,6 +1846,7 @@ static void __ipt_unregister_table(struct net *net, struct xt_table *table)
 
 	/* Decrease module usage counts and free resources */
 	loc_cpu_entry = private->entries;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_entry_foreach(iter, loc_cpu_entry, private->size)
 		cleanup_entry(iter, net);
 	if (private->number > private->initial_entries)
@@ -1756,7 +1866,9 @@ int ipt_register_table(struct net *net, const struct xt_table *table,
 
 	newinfo = xt_alloc_table_info(repl->size);
 	if (!newinfo)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	loc_cpu_entry = newinfo->entries;
 	memcpy(loc_cpu_entry, repl->entries, repl->size);
@@ -1767,6 +1879,7 @@ int ipt_register_table(struct net *net, const struct xt_table *table,
 
 	new_table = xt_register_table(net, table, &bootstrap, newinfo);
 	if (IS_ERR(new_table)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(new_table);
 		goto out_free;
 	}
@@ -1776,10 +1889,12 @@ int ipt_register_table(struct net *net, const struct xt_table *table,
 
 	ret = nf_register_net_hooks(net, ops, hweight32(table->valid_hooks));
 	if (ret != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__ipt_unregister_table(net, new_table);
 		*res = NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 
 out_free:
@@ -1790,6 +1905,7 @@ int ipt_register_table(struct net *net, const struct xt_table *table,
 void ipt_unregister_table(struct net *net, struct xt_table *table,
 			  const struct nf_hook_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_unregister_net_hooks(net, ops, hweight32(table->valid_hooks));
 	__ipt_unregister_table(net, table);
 }
@@ -1800,6 +1916,7 @@ icmp_type_code_match(u_int8_t test_type, u_int8_t min_code, u_int8_t max_code,
 		     u_int8_t type, u_int8_t code,
 		     bool invert)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ((test_type == 0xFF) ||
 		(type == test_type && code >= min_code && code <= max_code))
 		^ invert;
@@ -1814,7 +1931,9 @@ icmp_match(const struct sk_buff *skb, struct xt_action_param *par)
 
 	/* Must not be a fragment. */
 	if (par->fragoff != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	ic = skb_header_pointer(skb, par->thoff, sizeof(_icmph), &_icmph);
 	if (ic == NULL) {
@@ -1938,6 +2057,7 @@ static int __init ip_tables_init(void)
 
 static void __exit ip_tables_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_unregister_sockopt(&ipt_sockopts);
 
 	xt_unregister_matches(ipt_builtin_mt, ARRAY_SIZE(ipt_builtin_mt));
diff --git a/net/ipv4/netfilter/ipt_CLUSTERIP.c b/net/ipv4/netfilter/ipt_CLUSTERIP.c
index 24a8c2e..5a702f8 100644
--- a/net/ipv4/netfilter/ipt_CLUSTERIP.c
+++ b/net/ipv4/netfilter/ipt_CLUSTERIP.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Cluster IP hashmark target
  * (C) 2003-2004 by Harald Welte <laforge@netfilter.org>
  * based on ideas of Fabio Olive Leite <olive@unixforge.org>
diff --git a/net/ipv4/netfilter/ipt_ECN.c b/net/ipv4/netfilter/ipt_ECN.c
index 2707652..02594d5 100644
--- a/net/ipv4/netfilter/ipt_ECN.c
+++ b/net/ipv4/netfilter/ipt_ECN.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* iptables module for the IPv4 and TCP ECN bits, Version 1.5
  *
  * (C) 2002 by Harald Welte <laforge@netfilter.org>
diff --git a/net/ipv4/netfilter/ipt_MASQUERADE.c b/net/ipv4/netfilter/ipt_MASQUERADE.c
index a03e4e7..43d5bfe 100644
--- a/net/ipv4/netfilter/ipt_MASQUERADE.c
+++ b/net/ipv4/netfilter/ipt_MASQUERADE.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Masquerade.  Simple mapping which alters range to a local IP address
    (depending on route). */
 
@@ -34,6 +36,7 @@ static int masquerade_tg_check(const struct xt_tgchk_param *par)
 	const struct nf_nat_ipv4_multi_range_compat *mr = par->targinfo;
 
 	if (mr->range[0].flags & NF_NAT_RANGE_MAP_IPS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("bad MAP_IPS.\n");
 		return -EINVAL;
 	}
@@ -61,6 +64,7 @@ masquerade_tg(struct sk_buff *skb, const struct xt_action_param *par)
 
 static void masquerade_tg_destroy(const struct xt_tgdtor_param *par)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_ct_netns_put(par->net, par->family);
 }
 
@@ -90,6 +94,7 @@ static int __init masquerade_tg_init(void)
 
 static void __exit masquerade_tg_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_target(&masquerade_tg_reg);
 	nf_nat_masquerade_ipv4_unregister_notifier();
 }
diff --git a/net/ipv4/netfilter/ipt_REJECT.c b/net/ipv4/netfilter/ipt_REJECT.c
index 8bd0d7b..b9430d1 100644
--- a/net/ipv4/netfilter/ipt_REJECT.c
+++ b/net/ipv4/netfilter/ipt_REJECT.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * This is a module which is used for rejecting packets.
  */
@@ -74,6 +76,7 @@ static int reject_tg_check(const struct xt_tgchk_param *par)
 	const struct ipt_entry *e = par->entryinfo;
 
 	if (rejinfo->with == IPT_ICMP_ECHOREPLY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("ECHOREPLY no longer supported.\n");
 		return -EINVAL;
 	} else if (rejinfo->with == IPT_TCP_RESET) {
@@ -106,6 +109,7 @@ static int __init reject_tg_init(void)
 
 static void __exit reject_tg_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_target(&reject_tg_reg);
 }
 
diff --git a/net/ipv4/netfilter/ipt_SYNPROXY.c b/net/ipv4/netfilter/ipt_SYNPROXY.c
index f75fc6b..4bffaa9 100644
--- a/net/ipv4/netfilter/ipt_SYNPROXY.c
+++ b/net/ipv4/netfilter/ipt_SYNPROXY.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2013 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/ipv4/netfilter/ipt_ah.c b/net/ipv4/netfilter/ipt_ah.c
index a787d07..617ec2b 100644
--- a/net/ipv4/netfilter/ipt_ah.c
+++ b/net/ipv4/netfilter/ipt_ah.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match AH parameters. */
 /* (C) 1999-2000 Yon Uriarte <yon@astaro.de>
  *
diff --git a/net/ipv4/netfilter/ipt_rpfilter.c b/net/ipv4/netfilter/ipt_rpfilter.c
index 37fb955..ad54a47 100644
--- a/net/ipv4/netfilter/ipt_rpfilter.c
+++ b/net/ipv4/netfilter/ipt_rpfilter.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2011 Florian Westphal <fw@strlen.de>
  *
diff --git a/net/ipv4/netfilter/iptable_filter.c b/net/ipv4/netfilter/iptable_filter.c
index 7667f22..52732a7 100644
--- a/net/ipv4/netfilter/iptable_filter.c
+++ b/net/ipv4/netfilter/iptable_filter.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * This is the 1999 rewrite of IP Firewalling, aiming for kernel 2.3.x.
  *
@@ -59,11 +61,15 @@ static int __net_init iptable_filter_table_init(struct net *net)
 	int err;
 
 	if (net->ipv4.iptable_filter)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	repl = ipt_alloc_initial_table(&packet_filter);
 	if (repl == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	/* Entry 1 is the FORWARD hook */
 	((struct ipt_standard *)repl->entries)[1].target.verdict =
 		forward ? -NF_ACCEPT - 1 : -NF_DROP - 1;
@@ -79,13 +85,17 @@ static int __net_init iptable_filter_net_init(struct net *net)
 	if (net == &init_net || !forward)
 		return iptable_filter_table_init(net);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void __net_exit iptable_filter_net_exit(struct net *net)
 {
 	if (!net->ipv4.iptable_filter)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ipt_unregister_table(net, net->ipv4.iptable_filter, filter_ops);
 	net->ipv4.iptable_filter = NULL;
 }
@@ -101,17 +111,23 @@ static int __init iptable_filter_init(void)
 
 	filter_ops = xt_hook_ops_alloc(&packet_filter, iptable_filter_hook);
 	if (IS_ERR(filter_ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(filter_ops);
+}
 
 	ret = register_pernet_subsys(&iptable_filter_net_ops);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(filter_ops);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 static void __exit iptable_filter_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&iptable_filter_net_ops);
 	kfree(filter_ops);
 }
diff --git a/net/ipv4/netfilter/iptable_mangle.c b/net/ipv4/netfilter/iptable_mangle.c
index aebdb33..7105945 100644
--- a/net/ipv4/netfilter/iptable_mangle.c
+++ b/net/ipv4/netfilter/iptable_mangle.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * This is the 1999 rewrite of IP Firewalling, aiming for kernel 2.3.x.
  *
@@ -64,18 +66,23 @@ ipt_mangle_out(struct sk_buff *skb, const struct nf_hook_state *state)
 	ret = ipt_do_table(skb, state, state->net->ipv4.iptable_mangle);
 	/* Reroute for ANY change. */
 	if (ret != NF_DROP && ret != NF_STOLEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iph = ip_hdr(skb);
 
 		if (iph->saddr != saddr ||
 		    iph->daddr != daddr ||
 		    skb->mark != mark ||
 		    iph->tos != tos) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = ip_route_me_harder(state->net, skb, RTN_UNSPEC);
 			if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = NF_DROP_ERR(err);
+}
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -97,11 +104,15 @@ static int __net_init iptable_mangle_table_init(struct net *net)
 	int ret;
 
 	if (net->ipv4.iptable_mangle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	repl = ipt_alloc_initial_table(&packet_mangler);
 	if (repl == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	ret = ipt_register_table(net, &packet_mangler, repl, mangle_ops,
 				 &net->ipv4.iptable_mangle);
 	kfree(repl);
@@ -111,7 +122,10 @@ static int __net_init iptable_mangle_table_init(struct net *net)
 static void __net_exit iptable_mangle_net_exit(struct net *net)
 {
 	if (!net->ipv4.iptable_mangle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ipt_unregister_table(net, net->ipv4.iptable_mangle, mangle_ops);
 	net->ipv4.iptable_mangle = NULL;
 }
@@ -126,27 +140,32 @@ static int __init iptable_mangle_init(void)
 
 	mangle_ops = xt_hook_ops_alloc(&packet_mangler, iptable_mangle_hook);
 	if (IS_ERR(mangle_ops)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(mangle_ops);
 		return ret;
 	}
 
 	ret = register_pernet_subsys(&iptable_mangle_net_ops);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(mangle_ops);
 		return ret;
 	}
 
 	ret = iptable_mangle_table_init(&init_net);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unregister_pernet_subsys(&iptable_mangle_net_ops);
 		kfree(mangle_ops);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 static void __exit iptable_mangle_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&iptable_mangle_net_ops);
 	kfree(mangle_ops);
 }
diff --git a/net/ipv4/netfilter/iptable_nat.c b/net/ipv4/netfilter/iptable_nat.c
index a1a07b3..e7037b6 100644
--- a/net/ipv4/netfilter/iptable_nat.c
+++ b/net/ipv4/netfilter/iptable_nat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2006 Netfilter Core Team <coreteam@netfilter.org>
  * (C) 2011 Patrick McHardy <kaber@trash.net>
@@ -36,6 +38,7 @@ static unsigned int iptable_nat_do_chain(void *priv,
 					 const struct nf_hook_state *state,
 					 struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ipt_do_table(skb, state, state->net->ipv4.nat_table);
 }
 
@@ -104,11 +107,15 @@ static int __net_init iptable_nat_table_init(struct net *net)
 	int ret;
 
 	if (net->ipv4.nat_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	repl = ipt_alloc_initial_table(&nf_nat_ipv4_table);
 	if (repl == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	ret = ipt_register_table(net, &nf_nat_ipv4_table, repl,
 				 nf_nat_ipv4_ops, &net->ipv4.nat_table);
 	kfree(repl);
@@ -118,7 +125,10 @@ static int __net_init iptable_nat_table_init(struct net *net)
 static void __net_exit iptable_nat_net_exit(struct net *net)
 {
 	if (!net->ipv4.nat_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ipt_unregister_table(net, net->ipv4.nat_table, nf_nat_ipv4_ops);
 	net->ipv4.nat_table = NULL;
 }
@@ -132,16 +142,22 @@ static int __init iptable_nat_init(void)
 	int ret = register_pernet_subsys(&iptable_nat_net_ops);
 
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = iptable_nat_table_init(&init_net);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unregister_pernet_subsys(&iptable_nat_net_ops);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 static void __exit iptable_nat_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&iptable_nat_net_ops);
 }
 
diff --git a/net/ipv4/netfilter/iptable_raw.c b/net/ipv4/netfilter/iptable_raw.c
index 2642ecd..712f596 100644
--- a/net/ipv4/netfilter/iptable_raw.c
+++ b/net/ipv4/netfilter/iptable_raw.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * 'raw' table, which is the very first hooked in at PRE_ROUTING and LOCAL_OUT .
  *
diff --git a/net/ipv4/netfilter/iptable_security.c b/net/ipv4/netfilter/iptable_security.c
index ff22659..90c8858 100644
--- a/net/ipv4/netfilter/iptable_security.c
+++ b/net/ipv4/netfilter/iptable_security.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * "security" table
  *
diff --git a/net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c b/net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c
index 997a968..1a76fe7 100644
--- a/net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c
+++ b/net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>
@@ -46,7 +48,9 @@ static bool ipv4_pkt_to_tuple(const struct sk_buff *skb, unsigned int nhoff,
 	ap = skb_header_pointer(skb, nhoff + offsetof(struct iphdr, saddr),
 				sizeof(u_int32_t) * 2, _addrs);
 	if (ap == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	tuple->src.u3.ip = ap[0];
 	tuple->dst.u3.ip = ap[1];
@@ -57,6 +61,7 @@ static bool ipv4_pkt_to_tuple(const struct sk_buff *skb, unsigned int nhoff,
 static bool ipv4_invert_tuple(struct nf_conntrack_tuple *tuple,
 			      const struct nf_conntrack_tuple *orig)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tuple->src.u3.ip = orig->dst.u3.ip;
 	tuple->dst.u3.ip = orig->src.u3.ip;
 
@@ -71,7 +76,9 @@ static int ipv4_get_l4proto(const struct sk_buff *skb, unsigned int nhoff,
 
 	iph = skb_header_pointer(skb, nhoff, sizeof(_iph), &_iph);
 	if (iph == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -NF_ACCEPT;
+}
 
 	/* Conntrack defragments packets, we might still see fragments
 	 * inside ICMP packets though. */
@@ -103,6 +110,7 @@ static unsigned int ipv4_helper(void *priv,
 
 	/* This is where we call the helper: as the packet goes out. */
 	ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ct || ctinfo == IP_CT_RELATED_REPLY)
 		return NF_ACCEPT;
 
@@ -127,6 +135,7 @@ static unsigned int ipv4_confirm(void *priv,
 	enum ip_conntrack_info ctinfo;
 
 	ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ct || ctinfo == IP_CT_RELATED_REPLY)
 		goto out;
 
@@ -147,6 +156,7 @@ static unsigned int ipv4_conntrack_in(void *priv,
 				      struct sk_buff *skb,
 				      const struct nf_hook_state *state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nf_conntrack_in(state->net, PF_INET, state->hook, skb);
 }
 
@@ -213,6 +223,7 @@ static const struct nf_hook_ops ipv4_conntrack_ops[] = {
 static int
 getorigdst(struct sock *sk, int optval, void __user *user, int *len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_sock *inet = inet_sk(sk);
 	const struct nf_conntrack_tuple_hash *h;
 	struct nf_conntrack_tuple tuple;
@@ -292,6 +303,7 @@ static const struct nla_policy ipv4_nla_policy[CTA_IP_MAX+1] = {
 static int ipv4_nlattr_to_tuple(struct nlattr *tb[],
 				struct nf_conntrack_tuple *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tb[CTA_IP_V4_SRC] || !tb[CTA_IP_V4_DST])
 		return -EINVAL;
 
@@ -312,6 +324,7 @@ static struct nf_sockopt_ops so_getorigdst = {
 
 static int ipv4_hooks_register(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct conntrack4_net *cnet = net_generic(net, conntrack4_net_id);
 	int err = 0;
 
@@ -339,6 +352,7 @@ static int ipv4_hooks_register(struct net *net)
 
 static void ipv4_hooks_unregister(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct conntrack4_net *cnet = net_generic(net, conntrack4_net_id);
 
 	mutex_lock(&register_ipv4_hooks);
@@ -419,12 +433,14 @@ static int __init nf_conntrack_l3proto_ipv4_init(void)
 #endif
 	ret = nf_register_sockopt(&so_getorigdst);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Unable to register netfilter socket option\n");
 		return ret;
 	}
 
 	ret = register_pernet_subsys(&ipv4_net_ops);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("nf_conntrack_ipv4: can't register pernet ops\n");
 		goto cleanup_sockopt;
 	}
@@ -436,10 +452,12 @@ static int __init nf_conntrack_l3proto_ipv4_init(void)
 
 	ret = nf_ct_l3proto_register(&nf_conntrack_l3proto_ipv4);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("nf_conntrack_ipv4: can't register ipv4 proto.\n");
 		goto cleanup_l4proto;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 cleanup_l4proto:
 	nf_ct_l4proto_unregister(builtin_l4proto4,
@@ -453,6 +471,7 @@ static int __init nf_conntrack_l3proto_ipv4_init(void)
 
 static void __exit nf_conntrack_l3proto_ipv4_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	synchronize_net();
 	nf_ct_l3proto_unregister(&nf_conntrack_l3proto_ipv4);
 	nf_ct_l4proto_unregister(builtin_l4proto4,
diff --git a/net/ipv4/netfilter/nf_conntrack_proto_icmp.c b/net/ipv4/netfilter/nf_conntrack_proto_icmp.c
index a046c29..2a47592 100644
--- a/net/ipv4/netfilter/nf_conntrack_proto_icmp.c
+++ b/net/ipv4/netfilter/nf_conntrack_proto_icmp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>
  * (C) 2006-2010 Patrick McHardy <kaber@trash.net>
@@ -37,7 +39,9 @@ static bool icmp_pkt_to_tuple(const struct sk_buff *skb, unsigned int dataoff,
 
 	hp = skb_header_pointer(skb, dataoff, sizeof(_hdr), &_hdr);
 	if (hp == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	tuple->dst.u.icmp.type = hp->type;
 	tuple->src.u.icmp.id = hp->un.echo.id;
@@ -61,6 +65,7 @@ static const u_int8_t invmap[] = {
 static bool icmp_invert_tuple(struct nf_conntrack_tuple *tuple,
 			      const struct nf_conntrack_tuple *orig)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (orig->dst.u.icmp.type >= sizeof(invmap) ||
 	    !invmap[orig->dst.u.icmp.type])
 		return false;
@@ -73,6 +78,7 @@ static bool icmp_invert_tuple(struct nf_conntrack_tuple *tuple,
 
 static unsigned int *icmp_get_timeouts(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &icmp_pernet(net)->timeout;
 }
 
@@ -126,6 +132,7 @@ icmp_error_message(struct net *net, struct nf_conn *tmpl, struct sk_buff *skb,
 	enum ip_conntrack_info ctinfo;
 	struct nf_conntrack_zone tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(skb_nfct(skb));
 	zone = nf_ct_zone_tmpl(tmpl, skb, &tmp);
 
@@ -177,6 +184,7 @@ icmp_error(struct net *net, struct nf_conn *tmpl,
 	/* Not enough header? */
 	icmph = skb_header_pointer(skb, ip_hdrlen(skb), sizeof(_ih), &_ih);
 	if (icmph == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (LOG_INVALID(net, IPPROTO_ICMP))
 			nf_log_packet(net, PF_INET, 0, skb, NULL, NULL,
 				      NULL, "nf_ct_icmp: short packet ");
@@ -224,6 +232,7 @@ icmp_error(struct net *net, struct nf_conn *tmpl,
 static int icmp_tuple_to_nlattr(struct sk_buff *skb,
 				const struct nf_conntrack_tuple *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put_be16(skb, CTA_PROTO_ICMP_ID, t->src.u.icmp.id) ||
 	    nla_put_u8(skb, CTA_PROTO_ICMP_TYPE, t->dst.u.icmp.type) ||
 	    nla_put_u8(skb, CTA_PROTO_ICMP_CODE, t->dst.u.icmp.code))
@@ -243,6 +252,7 @@ static const struct nla_policy icmp_nla_policy[CTA_PROTO_MAX+1] = {
 static int icmp_nlattr_to_tuple(struct nlattr *tb[],
 				struct nf_conntrack_tuple *tuple)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tb[CTA_PROTO_ICMP_TYPE] ||
 	    !tb[CTA_PROTO_ICMP_CODE] ||
 	    !tb[CTA_PROTO_ICMP_ID])
@@ -325,7 +335,9 @@ static int icmp_kmemdup_sysctl_table(struct nf_proto_net *pn,
 				sizeof(icmp_sysctl_table),
 				GFP_KERNEL);
 	if (!pn->ctl_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	pn->ctl_table[0].data = &in->timeout;
 #endif
@@ -334,6 +346,7 @@ static int icmp_kmemdup_sysctl_table(struct nf_proto_net *pn,
 
 static int icmp_init_net(struct net *net, u_int16_t proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_icmp_net *in = icmp_pernet(net);
 	struct nf_proto_net *pn = &in->pn;
 
diff --git a/net/ipv4/netfilter/nf_defrag_ipv4.c b/net/ipv4/netfilter/nf_defrag_ipv4.c
index 37fe1616..75bb899 100644
--- a/net/ipv4/netfilter/nf_defrag_ipv4.c
+++ b/net/ipv4/netfilter/nf_defrag_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>
  *
@@ -35,7 +37,9 @@ static int nf_ct_ipv4_gather_frags(struct net *net, struct sk_buff *skb,
 	local_bh_enable();
 
 	if (!err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb->ignore_df = 1;
+}
 
 	return err;
 }
@@ -49,6 +53,7 @@ static enum ip_defrag_users nf_ct_defrag_user(unsigned int hooknum,
 		enum ip_conntrack_info ctinfo;
 		const struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		zone_id = nf_ct_zone_id(nf_ct_zone(ct), CTINFO2DIR(ctinfo));
 	}
 #endif
@@ -67,6 +72,7 @@ static unsigned int ipv4_conntrack_defrag(void *priv,
 {
 	struct sock *sk = skb->sk;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sk && sk_fullsock(sk) && (sk->sk_family == PF_INET) &&
 	    inet_sk(sk)->nodefrag)
 		return NF_ACCEPT;
@@ -108,6 +114,7 @@ static const struct nf_hook_ops ipv4_defrag_ops[] = {
 static void __net_exit defrag4_net_exit(struct net *net)
 {
 	if (net->nf.defrag_ipv4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nf_unregister_net_hooks(net, ipv4_defrag_ops,
 					ARRAY_SIZE(ipv4_defrag_ops));
 		net->nf.defrag_ipv4 = false;
@@ -125,6 +132,7 @@ static int __init nf_defrag_init(void)
 
 static void __exit nf_defrag_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&defrag4_net_ops);
 }
 
@@ -132,6 +140,7 @@ int nf_defrag_ipv4_enable(struct net *net)
 {
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	if (net->nf.defrag_ipv4)
diff --git a/net/ipv4/netfilter/nf_log_arp.c b/net/ipv4/netfilter/nf_log_arp.c
index df5c2a2..f2c6074 100644
--- a/net/ipv4/netfilter/nf_log_arp.c
+++ b/net/ipv4/netfilter/nf_log_arp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2014 by Pablo Neira Ayuso <pablo@netfilter.org>
  *
@@ -53,6 +55,7 @@ static void dump_arp_packet(struct nf_log_buf *m,
 
 	ah = skb_header_pointer(skb, 0, sizeof(_arph), &_arph);
 	if (ah == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nf_log_buf_add(m, "TRUNCATED");
 		return;
 	}
@@ -130,14 +133,18 @@ static int __init nf_log_arp_init(void)
 
 	ret = register_pernet_subsys(&nf_log_arp_net_ops);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = nf_log_register(NFPROTO_ARP, &nf_arp_logger);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to register logger\n");
 		goto err1;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err1:
@@ -147,6 +154,7 @@ static int __init nf_log_arp_init(void)
 
 static void __exit nf_log_arp_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&nf_log_arp_net_ops);
 	nf_log_unregister(&nf_arp_logger);
 }
diff --git a/net/ipv4/netfilter/nf_log_ipv4.c b/net/ipv4/netfilter/nf_log_ipv4.c
index 4388de0..d46f49e 100644
--- a/net/ipv4/netfilter/nf_log_ipv4.c
+++ b/net/ipv4/netfilter/nf_log_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>
  *
@@ -44,7 +46,9 @@ static void dump_ipv4_packet(struct nf_log_buf *m,
 	unsigned int logflags;
 
 	if (info->type == NF_LOG_TYPE_LOG)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		logflags = info->u.log.logflags;
+}
 	else
 		logflags = NF_LOG_DEFAULT_MASK;
 
@@ -280,7 +284,9 @@ static void dump_ipv4_mac_header(struct nf_log_buf *m,
 	unsigned int logflags = 0;
 
 	if (info->type == NF_LOG_TYPE_LOG)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		logflags = info->u.log.logflags;
+}
 
 	if (!(logflags & NF_LOG_MACDECODE))
 		goto fallback;
@@ -366,14 +372,18 @@ static int __init nf_log_ipv4_init(void)
 
 	ret = register_pernet_subsys(&nf_log_ipv4_net_ops);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = nf_log_register(NFPROTO_IPV4, &nf_ip_logger);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to register logger\n");
 		goto err1;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err1:
@@ -383,6 +393,7 @@ static int __init nf_log_ipv4_init(void)
 
 static void __exit nf_log_ipv4_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&nf_log_ipv4_net_ops);
 	nf_log_unregister(&nf_ip_logger);
 }
diff --git a/net/ipv4/netfilter/nf_nat_h323.c b/net/ipv4/netfilter/nf_nat_h323.c
index ac8342d..7db8b05 100644
--- a/net/ipv4/netfilter/nf_nat_h323.c
+++ b/net/ipv4/netfilter/nf_nat_h323.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * H.323 extension for NAT alteration.
  *
diff --git a/net/ipv4/netfilter/nf_nat_l3proto_ipv4.c b/net/ipv4/netfilter/nf_nat_l3proto_ipv4.c
index a0f37b2..3ecea44 100644
--- a/net/ipv4/netfilter/nf_nat_l3proto_ipv4.c
+++ b/net/ipv4/netfilter/nf_nat_l3proto_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2006 Netfilter Core Team <coreteam@netfilter.org>
@@ -39,6 +41,7 @@ static void nf_nat_ipv4_decode_session(struct sk_buff *skb,
 	struct flowi4 *fl4 = &fl->u.ip4;
 
 	if (ct->status & statusbit) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl4->daddr = t->dst.u3.ip;
 		if (t->dst.protonum == IPPROTO_TCP ||
 		    t->dst.protonum == IPPROTO_UDP ||
@@ -65,6 +68,7 @@ static void nf_nat_ipv4_decode_session(struct sk_buff *skb,
 static bool nf_nat_ipv4_in_range(const struct nf_conntrack_tuple *t,
 				 const struct nf_nat_range *range)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ntohl(t->src.u3.ip) >= ntohl(range->min_addr.ip) &&
 	       ntohl(t->src.u3.ip) <= ntohl(range->max_addr.ip);
 }
@@ -72,6 +76,7 @@ static bool nf_nat_ipv4_in_range(const struct nf_conntrack_tuple *t,
 static u32 nf_nat_ipv4_secure_port(const struct nf_conntrack_tuple *t,
 				   __be16 dport)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return secure_ipv4_port_ephemeral(t->src.u3.ip, t->dst.u3.ip, dport);
 }
 
@@ -85,7 +90,9 @@ static bool nf_nat_ipv4_manip_pkt(struct sk_buff *skb,
 	unsigned int hdroff;
 
 	if (!skb_make_writable(skb, iphdroff + sizeof(*iph)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	iph = (void *)skb->data + iphdroff;
 	hdroff = iphdroff + iph->ihl * 4;
@@ -114,6 +121,7 @@ static void nf_nat_ipv4_csum_update(struct sk_buff *skb,
 	__be32 oldip, newip;
 
 	if (maniptype == NF_NAT_MANIP_SRC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		oldip = iph->saddr;
 		newip = t->src.u3.ip;
 	} else {
@@ -127,6 +135,7 @@ static void nf_nat_ipv4_csum_recalc(struct sk_buff *skb,
 				    u8 proto, void *data, __sum16 *check,
 				    int datalen, int oldlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (skb->ip_summed != CHECKSUM_PARTIAL) {
 		const struct iphdr *iph = ip_hdr(skb);
 
@@ -145,6 +154,7 @@ static void nf_nat_ipv4_csum_recalc(struct sk_buff *skb,
 static int nf_nat_ipv4_nlattr_to_range(struct nlattr *tb[],
 				       struct nf_nat_range *range)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tb[CTA_NAT_V4_MINIP]) {
 		range->min_addr.ip = nla_get_be32(tb[CTA_NAT_V4_MINIP]);
 		range->flags |= NF_NAT_RANGE_MAP_IPS;
diff --git a/net/ipv4/netfilter/nf_nat_masquerade_ipv4.c b/net/ipv4/netfilter/nf_nat_masquerade_ipv4.c
index 0c366aa..24534bc 100644
--- a/net/ipv4/netfilter/nf_nat_masquerade_ipv4.c
+++ b/net/ipv4/netfilter/nf_nat_masquerade_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2006 Netfilter Core Team <coreteam@netfilter.org>
  *
@@ -34,6 +36,7 @@ nf_nat_masquerade_ipv4(struct sk_buff *skb, unsigned int hooknum,
 	const struct rtable *rt;
 	__be32 newsrc, nh;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(hooknum != NF_INET_POST_ROUTING);
 
 	ct = nf_ct_get(skb, &ctinfo);
@@ -75,6 +78,7 @@ EXPORT_SYMBOL_GPL(nf_nat_masquerade_ipv4);
 
 static int device_cmp(struct nf_conn *i, void *ifindex)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct nf_conn_nat *nat = nfct_nat(i);
 
 	if (!nat)
@@ -88,6 +92,7 @@ static int masq_device_event(struct notifier_block *this,
 			     unsigned long event,
 			     void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct net_device *dev = netdev_notifier_info_to_dev(ptr);
 	struct net *net = dev_net(dev);
 
@@ -118,7 +123,9 @@ static int masq_inet_event(struct notifier_block *this,
 	 * and we have to perform the flush.
 	 */
 	if (idev->dead)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NOTIFY_DONE;
+}
 
 	netdev_notifier_info_init(&info, idev->dev);
 	return masq_device_event(this, event, &info);
@@ -138,7 +145,9 @@ void nf_nat_masquerade_ipv4_register_notifier(void)
 {
 	/* check if the notifier was already set */
 	if (atomic_inc_return(&masquerade_notifier_refcount) > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Register for device down reports */
 	register_netdevice_notifier(&masq_dev_notifier);
diff --git a/net/ipv4/netfilter/nf_nat_pptp.c b/net/ipv4/netfilter/nf_nat_pptp.c
index 8a69363..9c13b59 100644
--- a/net/ipv4/netfilter/nf_nat_pptp.c
+++ b/net/ipv4/netfilter/nf_nat_pptp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * nf_nat_pptp.c
  *
diff --git a/net/ipv4/netfilter/nf_nat_proto_gre.c b/net/ipv4/netfilter/nf_nat_proto_gre.c
index edf0500..14165d3 100644
--- a/net/ipv4/netfilter/nf_nat_proto_gre.c
+++ b/net/ipv4/netfilter/nf_nat_proto_gre.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * nf_nat_proto_gre.c
  *
diff --git a/net/ipv4/netfilter/nf_nat_snmp_basic.c b/net/ipv4/netfilter/nf_nat_snmp_basic.c
index d5b1e0b..a60c107 100644
--- a/net/ipv4/netfilter/nf_nat_snmp_basic.c
+++ b/net/ipv4/netfilter/nf_nat_snmp_basic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * nf_nat_snmp_basic.c
  *
diff --git a/net/ipv4/netfilter/nf_tables_arp.c b/net/ipv4/netfilter/nf_tables_arp.c
index 4bbc273..2341ef6 100644
--- a/net/ipv4/netfilter/nf_tables_arp.c
+++ b/net/ipv4/netfilter/nf_tables_arp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008-2010 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2013 Pablo Neira Ayuso <pablo@netfilter.org>
diff --git a/net/ipv4/netfilter/nf_tables_ipv4.c b/net/ipv4/netfilter/nf_tables_ipv4.c
index 2840a29..e42a9cb 100644
--- a/net/ipv4/netfilter/nf_tables_ipv4.c
+++ b/net/ipv4/netfilter/nf_tables_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2012-2013 Pablo Neira Ayuso <pablo@netfilter.org>
diff --git a/net/ipv4/netfilter/nft_chain_nat_ipv4.c b/net/ipv4/netfilter/nft_chain_nat_ipv4.c
index f5c66a7..5e1428d 100644
--- a/net/ipv4/netfilter/nft_chain_nat_ipv4.c
+++ b/net/ipv4/netfilter/nft_chain_nat_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008-2009 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2012 Pablo Neira Ayuso <pablo@netfilter.org>
diff --git a/net/ipv4/netfilter/nft_chain_route_ipv4.c b/net/ipv4/netfilter/nft_chain_route_ipv4.c
index 30493be..3e3129c 100644
--- a/net/ipv4/netfilter/nft_chain_route_ipv4.c
+++ b/net/ipv4/netfilter/nft_chain_route_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2012 Pablo Neira Ayuso <pablo@netfilter.org>
diff --git a/net/ipv4/netfilter/nft_dup_ipv4.c b/net/ipv4/netfilter/nft_dup_ipv4.c
index 0af3d8d..fff6c6f 100644
--- a/net/ipv4/netfilter/nft_dup_ipv4.c
+++ b/net/ipv4/netfilter/nft_dup_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2015 Pablo Neira Ayuso <pablo@netfilter.org>
  *
diff --git a/net/ipv4/netfilter/nft_masq_ipv4.c b/net/ipv4/netfilter/nft_masq_ipv4.c
index f186772..e417b77 100644
--- a/net/ipv4/netfilter/nft_masq_ipv4.c
+++ b/net/ipv4/netfilter/nft_masq_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2014 Arturo Borrero Gonzalez <arturo@debian.org>
  *
diff --git a/net/ipv4/netfilter/nft_redir_ipv4.c b/net/ipv4/netfilter/nft_redir_ipv4.c
index 5120be1..a2ba588 100644
--- a/net/ipv4/netfilter/nft_redir_ipv4.c
+++ b/net/ipv4/netfilter/nft_redir_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2014 Arturo Borrero Gonzalez <arturo@debian.org>
  *
diff --git a/net/ipv4/netfilter/nft_reject_ipv4.c b/net/ipv4/netfilter/nft_reject_ipv4.c
index 517ce93..084a0bd 100644
--- a/net/ipv4/netfilter/nft_reject_ipv4.c
+++ b/net/ipv4/netfilter/nft_reject_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008-2009 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2013 Eric Leblond <eric@regit.org>
diff --git a/net/ipv4/ping.c b/net/ipv4/ping.c
index b8f0db5..11cb2c7 100644
--- a/net/ipv4/ping.c
+++ b/net/ipv4/ping.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -66,6 +68,7 @@ static u16 ping_port_rover;
 
 static inline u32 ping_hashfn(const struct net *net, u32 num, u32 mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 res = (num + net_hash_mix(net)) & mask;
 
 	pr_debug("hash(%u) = %u\n", num, res);
@@ -76,6 +79,7 @@ EXPORT_SYMBOL_GPL(ping_hash);
 static inline struct hlist_nulls_head *ping_hashslot(struct ping_table *table,
 					     struct net *net, unsigned int num)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &table->hash[ping_hashfn(net, num, PING_HTABLE_MASK)];
 }
 
@@ -92,6 +96,7 @@ int ping_get_port(struct sock *sk, unsigned short ident)
 		u32 i;
 		u16 result = ping_port_rover + 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < (1L << 16); i++, result++) {
 			if (!result)
 				result++; /* avoid zero */
@@ -147,6 +152,7 @@ EXPORT_SYMBOL_GPL(ping_get_port);
 
 int ping_hash(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("ping_hash(sk->port=%u)\n", inet_sk(sk)->inet_num);
 	BUG(); /* "Please do not press this button again." */
 
@@ -155,6 +161,7 @@ int ping_hash(struct sock *sk)
 
 void ping_unhash(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *isk = inet_sk(sk);
 
 	pr_debug("ping_unhash(isk=%p,isk->num=%u)\n", isk, isk->inet_num);
@@ -173,6 +180,7 @@ EXPORT_SYMBOL_GPL(ping_unhash);
 
 static struct sock *ping_lookup(struct net *net, struct sk_buff *skb, u16 ident)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hlist_nulls_head *hslot = ping_hashslot(&ping_table, net, ident);
 	struct sock *sk = NULL;
 	struct inet_sock *isk;
@@ -246,6 +254,7 @@ static void inet_get_ping_group_range_net(struct net *net, kgid_t *low,
 	unsigned int seq;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq = read_seqbegin(&net->ipv4.ping_group_range.lock);
 
 		*low = data[0];
@@ -256,6 +265,7 @@ static void inet_get_ping_group_range_net(struct net *net, kgid_t *low,
 
 int ping_init_sock(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(sk);
 	kgid_t group = current_egid();
 	struct group_info *group_info;
@@ -288,6 +298,7 @@ EXPORT_SYMBOL_GPL(ping_init_sock);
 
 void ping_close(struct sock *sk, long timeout)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("ping_close(sk=%p,sk->num=%u)\n",
 		 inet_sk(sk), inet_sk(sk)->inet_num);
 	pr_debug("isk->refcnt = %d\n", refcount_read(&sk->sk_refcnt));
@@ -1026,6 +1037,7 @@ static struct sock *ping_get_first(struct seq_file *seq, int start)
 	struct ping_iter_state *state = seq->private;
 	struct net *net = seq_file_net(seq);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (state->bucket = start; state->bucket < PING_HTABLE_SIZE;
 	     ++state->bucket) {
 		struct hlist_nulls_node *node;
@@ -1053,6 +1065,7 @@ static struct sock *ping_get_next(struct seq_file *seq, struct sock *sk)
 	struct net *net = seq_file_net(seq);
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk = sk_nulls_next(sk);
 	} while (sk && (!net_eq(sock_net(sk), net)));
 
@@ -1063,6 +1076,7 @@ static struct sock *ping_get_next(struct seq_file *seq, struct sock *sk)
 
 static struct sock *ping_get_idx(struct seq_file *seq, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sock *sk = ping_get_first(seq, 0);
 
 	if (sk)
@@ -1080,12 +1094,14 @@ void *ping_seq_start(struct seq_file *seq, loff_t *pos, sa_family_t family)
 
 	read_lock_bh(&ping_table.lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return *pos ? ping_get_idx(seq, *pos-1) : SEQ_START_TOKEN;
 }
 EXPORT_SYMBOL_GPL(ping_seq_start);
 
 static void *ping_v4_seq_start(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ping_seq_start(seq, pos, AF_INET);
 }
 
@@ -1094,7 +1110,9 @@ void *ping_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 	struct sock *sk;
 
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk = ping_get_idx(seq, 0);
+}
 	else
 		sk = ping_get_next(seq, v);
 
@@ -1106,6 +1124,7 @@ EXPORT_SYMBOL_GPL(ping_seq_next);
 void ping_seq_stop(struct seq_file *seq, void *v)
 	__releases(ping_table.lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock_bh(&ping_table.lock);
 }
 EXPORT_SYMBOL_GPL(ping_seq_stop);
@@ -1113,6 +1132,7 @@ EXPORT_SYMBOL_GPL(ping_seq_stop);
 static void ping_v4_format_sock(struct sock *sp, struct seq_file *f,
 		int bucket)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sp);
 	__be32 dest = inet->inet_daddr;
 	__be32 src = inet->inet_rcv_saddr;
@@ -1133,6 +1153,7 @@ static void ping_v4_format_sock(struct sock *sp, struct seq_file *f,
 
 static int ping_v4_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_setwidth(seq, 127);
 	if (v == SEQ_START_TOKEN)
 		seq_puts(seq, "  sl  local_address rem_address   st tx_queue "
@@ -1149,6 +1170,7 @@ static int ping_v4_seq_show(struct seq_file *seq, void *v)
 
 static int ping_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ping_seq_afinfo *afinfo = PDE_DATA(inode);
 	return seq_open_net(inode, file, &afinfo->seq_ops,
 			   sizeof(struct ping_iter_state));
@@ -1180,7 +1202,9 @@ int ping_proc_register(struct net *net, struct ping_seq_afinfo *afinfo)
 	p = proc_create_data(afinfo->name, S_IRUGO, net->proc_net,
 			     afinfo->seq_fops, afinfo);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 EXPORT_SYMBOL_GPL(ping_proc_register);
@@ -1213,6 +1237,7 @@ int __init ping_proc_init(void)
 
 void ping_proc_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&ping_v4_net_ops);
 }
 
diff --git a/net/ipv4/proc.c b/net/ipv4/proc.c
index 127153f..34e5adf 100644
--- a/net/ipv4/proc.c
+++ b/net/ipv4/proc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -79,6 +81,7 @@ static int sockstat_seq_show(struct seq_file *seq, void *v)
 
 static int sockstat_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open_net(inode, file, sockstat_seq_show);
 }
 
@@ -307,6 +310,7 @@ static void icmpmsg_put_line(struct seq_file *seq, unsigned long *vals,
 	int j;
 
 	if (count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_puts(seq, "\nIcmpMsg:");
 		for (j = 0; j < count; ++j)
 			seq_printf(seq, " %sType%u",
@@ -328,6 +332,7 @@ static void icmpmsg_put(struct seq_file *seq)
 	struct net *net = seq->private;
 
 	count = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ICMPMSG_MIB_MAX; i++) {
 		val = atomic_long_read(&net->mib.icmpmsg_statistics->mibs[i]);
 		if (val) {
@@ -351,6 +356,7 @@ static void icmp_put(struct seq_file *seq)
 	atomic_long_t *ptr = net->mib.icmpmsg_statistics->mibs;
 
 	seq_puts(seq, "\nIcmp: InMsgs InErrors InCsumErrors");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; icmpmibmap[i].name; i++)
 		seq_printf(seq, " In%s", icmpmibmap[i].name);
 	seq_puts(seq, " OutMsgs OutErrors");
@@ -383,6 +389,7 @@ static int snmp_seq_show_ipstats(struct seq_file *seq, void *v)
 	memset(buff64, 0, IPSTATS_MIB_MAX * sizeof(u64));
 
 	seq_puts(seq, "Ip: Forwarding DefaultTTL");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; snmp4_ipstats_list[i].name; i++)
 		seq_printf(seq, " %s", snmp4_ipstats_list[i].name);
 
@@ -402,6 +409,7 @@ static int snmp_seq_show_ipstats(struct seq_file *seq, void *v)
 
 static int snmp_seq_show_tcp_udp(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long buff[TCPUDP_MIB_MAX];
 	struct net *net = seq->private;
 	int i;
@@ -452,6 +460,7 @@ static int snmp_seq_show_tcp_udp(struct seq_file *seq, void *v)
 
 static int snmp_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	snmp_seq_show_ipstats(seq, v);
 
 	icmp_put(seq);	/* RFC 2011 compatibility */
@@ -464,6 +473,7 @@ static int snmp_seq_show(struct seq_file *seq, void *v)
 
 static int snmp_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open_net(inode, file, snmp_seq_show);
 }
 
@@ -486,6 +496,7 @@ static int netstat_seq_show(struct seq_file *seq, void *v)
 	struct net *net = seq->private;
 
 	seq_puts(seq, "TcpExt:");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; snmp4_net_list[i].name; i++)
 		seq_printf(seq, " %s", snmp4_net_list[i].name);
 
@@ -512,6 +523,7 @@ static int netstat_seq_show(struct seq_file *seq, void *v)
 
 static int netstat_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open_net(inode, file, netstat_seq_show);
 }
 
@@ -533,6 +545,7 @@ static __net_init int ip_proc_init_net(struct net *net)
 	if (!proc_create("snmp", S_IRUGO, net->proc_net, &snmp_seq_fops))
 		goto out_snmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_snmp:
diff --git a/net/ipv4/protocol.c b/net/ipv4/protocol.c
index 32a691b..067eba0 100644
--- a/net/ipv4/protocol.c
+++ b/net/ipv4/protocol.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -35,6 +37,7 @@ EXPORT_SYMBOL(inet_offloads);
 int inet_add_protocol(const struct net_protocol *prot, unsigned char protocol)
 {
 	if (!prot->netns_ok) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Protocol %u is not namespace aware, cannot register.\n",
 			protocol);
 		return -EINVAL;
@@ -56,6 +59,7 @@ int inet_del_protocol(const struct net_protocol *prot, unsigned char protocol)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = (cmpxchg((const struct net_protocol **)&inet_protos[protocol],
 		       prot, NULL) == prot) ? 0 : -1;
 
@@ -69,6 +73,7 @@ int inet_del_offload(const struct net_offload *prot, unsigned char protocol)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = (cmpxchg((const struct net_offload **)&inet_offloads[protocol],
 		       prot, NULL) == prot) ? 0 : -1;
 
diff --git a/net/ipv4/raw.c b/net/ipv4/raw.c
index 125c1ea..b37a06e 100644
--- a/net/ipv4/raw.c
+++ b/net/ipv4/raw.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -125,6 +127,7 @@ struct sock *__raw_v4_lookup(struct net *net, struct sock *sk,
 			     unsigned short num, __be32 raddr, __be32 laddr,
 			     int dif, int sdif)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_for_each_from(sk) {
 		struct inet_sock *inet = inet_sk(sk);
 
@@ -153,7 +156,9 @@ static int icmp_filter(const struct sock *sk, const struct sk_buff *skb)
 	hdr = skb_header_pointer(skb, skb_transport_offset(skb),
 				 sizeof(_hdr), &_hdr);
 	if (!hdr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	if (hdr->type < 32) {
 		__u32 data = raw_sk(sk)->filter.data;
@@ -173,6 +178,7 @@ static int icmp_filter(const struct sock *sk, const struct sk_buff *skb)
  */
 static int raw_v4_input(struct sk_buff *skb, const struct iphdr *iph, int hash)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int sdif = inet_sdif(skb);
 	struct sock *sk;
 	struct hlist_head *head;
@@ -221,7 +227,9 @@ int raw_local_deliver(struct sk_buff *skb, int protocol)
 	 * don't care less
 	 */
 	if (raw_sk && !raw_v4_input(skb, ip_hdr(skb), hash))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		raw_sk = NULL;
+}
 
 	return raw_sk != NULL;
 
@@ -229,6 +237,7 @@ int raw_local_deliver(struct sk_buff *skb, int protocol)
 
 static void raw_err(struct sock *sk, struct sk_buff *skb, u32 info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	const int type = icmp_hdr(skb)->type;
 	const int code = icmp_hdr(skb)->code;
@@ -306,14 +315,17 @@ void raw_icmp_error(struct sk_buff *skb, int protocol, u32 info)
 		iph = (const struct iphdr *)skb->data;
 		net = dev_net(skb->dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while ((raw_sk = __raw_v4_lookup(net, raw_sk, protocol,
 						iph->daddr, iph->saddr,
 						dif, sdif)) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			raw_err(raw_sk, skb, info);
 			raw_sk = sk_next(raw_sk);
 			iph = (const struct iphdr *)skb->data;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock(&raw_v4_hashinfo.lock);
 }
 
@@ -321,6 +333,7 @@ static int raw_rcv_skb(struct sock *sk, struct sk_buff *skb)
 {
 	/* Charge it to the socket. */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ipv4_pktinfo_prepare(sk, skb);
 	if (sock_queue_rcv_skb(sk, skb) < 0) {
 		kfree_skb(skb);
@@ -332,6 +345,7 @@ static int raw_rcv_skb(struct sock *sk, struct sk_buff *skb)
 
 int raw_rcv(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!xfrm4_policy_check(sk, XFRM_POLICY_IN, skb)) {
 		atomic_inc(&sk->sk_drops);
 		kfree_skb(skb);
@@ -350,6 +364,7 @@ static int raw_send_hdrinc(struct sock *sk, struct flowi4 *fl4,
 			   struct rtable **rtp, unsigned int flags,
 			   const struct sockcm_cookie *sockc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct net *net = sock_net(sk);
 	struct iphdr *iph;
@@ -453,7 +468,9 @@ static int raw_probe_proto_opt(struct raw_frag_vec *rfv, struct flowi4 *fl4)
 	int err;
 
 	if (fl4->flowi4_proto != IPPROTO_ICMP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* We only need the first two bytes. */
 	rfv->hlen = 2;
@@ -474,6 +491,7 @@ static int raw_getfrag(void *from, char *to, int offset, int len, int odd,
 	struct raw_frag_vec *rfv = from;
 
 	if (offset < rfv->hlen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int copy = min(rfv->hlen - offset, len);
 
 		if (skb->ip_summed == CHECKSUM_PARTIAL)
@@ -501,6 +519,7 @@ static int raw_getfrag(void *from, char *to, int offset, int len, int odd,
 
 static int raw_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct net *net = sock_net(sk);
 	struct ipcm_cookie ipc;
@@ -713,6 +732,7 @@ static void raw_destroy(struct sock *sk)
 /* This gets rid of all the nasties in af_inet. -DaveM */
 static int raw_bind(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct sockaddr_in *addr = (struct sockaddr_in *) uaddr;
 	u32 tb_id = RT_TABLE_LOCAL;
@@ -749,6 +769,7 @@ out:	return ret;
 static int raw_recvmsg(struct sock *sk, struct msghdr *msg, size_t len,
 		       int noblock, int flags, int *addr_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	size_t copied = 0;
 	int err = -EOPNOTSUPP;
@@ -801,6 +822,7 @@ static int raw_recvmsg(struct sock *sk, struct msghdr *msg, size_t len,
 
 static int raw_init(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct raw_sock *rp = raw_sk(sk);
 
 	if (inet_sk(sk)->inet_num == IPPROTO_ICMP)
@@ -810,6 +832,7 @@ static int raw_init(struct sock *sk)
 
 static int raw_seticmpfilter(struct sock *sk, char __user *optval, int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (optlen > sizeof(struct icmp_filter))
 		optlen = sizeof(struct icmp_filter);
 	if (copy_from_user(&raw_sk(sk)->filter, optval, optlen))
@@ -823,6 +846,7 @@ static int raw_geticmpfilter(struct sock *sk, char __user *optval, int __user *o
 
 	if (get_user(len, optlen))
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -EINVAL;
 	if (len < 0)
 		goto out;
@@ -839,6 +863,7 @@ out:	return ret;
 static int do_raw_setsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, unsigned int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (optname == ICMP_FILTER) {
 		if (inet_sk(sk)->inet_num != IPPROTO_ICMP)
 			return -EOPNOTSUPP;
@@ -851,6 +876,7 @@ static int do_raw_setsockopt(struct sock *sk, int level, int optname,
 static int raw_setsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, unsigned int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (level != SOL_RAW)
 		return ip_setsockopt(sk, level, optname, optval, optlen);
 	return do_raw_setsockopt(sk, level, optname, optval, optlen);
@@ -860,6 +886,7 @@ static int raw_setsockopt(struct sock *sk, int level, int optname,
 static int compat_raw_setsockopt(struct sock *sk, int level, int optname,
 				 char __user *optval, unsigned int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (level != SOL_RAW)
 		return compat_ip_setsockopt(sk, level, optname, optval, optlen);
 	return do_raw_setsockopt(sk, level, optname, optval, optlen);
@@ -869,6 +896,7 @@ static int compat_raw_setsockopt(struct sock *sk, int level, int optname,
 static int do_raw_getsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int __user *optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (optname == ICMP_FILTER) {
 		if (inet_sk(sk)->inet_num != IPPROTO_ICMP)
 			return -EOPNOTSUPP;
@@ -881,6 +909,7 @@ static int do_raw_getsockopt(struct sock *sk, int level, int optname,
 static int raw_getsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int __user *optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (level != SOL_RAW)
 		return ip_getsockopt(sk, level, optname, optval, optlen);
 	return do_raw_getsockopt(sk, level, optname, optval, optlen);
@@ -890,6 +919,7 @@ static int raw_getsockopt(struct sock *sk, int level, int optname,
 static int compat_raw_getsockopt(struct sock *sk, int level, int optname,
 				 char __user *optval, int __user *optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (level != SOL_RAW)
 		return compat_ip_getsockopt(sk, level, optname, optval, optlen);
 	return do_raw_getsockopt(sk, level, optname, optval, optlen);
@@ -898,6 +928,7 @@ static int compat_raw_getsockopt(struct sock *sk, int level, int optname,
 
 static int raw_ioctl(struct sock *sk, int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (cmd) {
 	case SIOCOUTQ: {
 		int amount = sk_wmem_alloc_get(sk);
@@ -928,6 +959,7 @@ static int raw_ioctl(struct sock *sk, int cmd, unsigned long arg)
 #ifdef CONFIG_COMPAT
 static int compat_raw_ioctl(struct sock *sk, unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (cmd) {
 	case SIOCOUTQ:
 	case SIOCINQ:
@@ -944,6 +976,7 @@ static int compat_raw_ioctl(struct sock *sk, unsigned int cmd, unsigned long arg
 
 int raw_abort(struct sock *sk, int err)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lock_sock(sk);
 
 	sk->sk_err = err;
@@ -990,6 +1023,7 @@ static struct sock *raw_get_first(struct seq_file *seq)
 	struct sock *sk;
 	struct raw_iter_state *state = raw_seq_private(seq);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (state->bucket = 0; state->bucket < RAW_HTABLE_SIZE;
 			++state->bucket) {
 		sk_for_each(sk, &state->h->ht[state->bucket])
@@ -1003,6 +1037,7 @@ static struct sock *raw_get_first(struct seq_file *seq)
 
 static struct sock *raw_get_next(struct seq_file *seq, struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct raw_iter_state *state = raw_seq_private(seq);
 
 	do {
@@ -1020,6 +1055,7 @@ static struct sock *raw_get_next(struct seq_file *seq, struct sock *sk)
 
 static struct sock *raw_get_idx(struct seq_file *seq, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sock *sk = raw_get_first(seq);
 
 	if (sk)
@@ -1030,6 +1066,7 @@ static struct sock *raw_get_idx(struct seq_file *seq, loff_t pos)
 
 void *raw_seq_start(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct raw_iter_state *state = raw_seq_private(seq);
 
 	read_lock(&state->h->lock);
@@ -1042,7 +1079,9 @@ void *raw_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 	struct sock *sk;
 
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk = raw_get_first(seq);
+}
 	else
 		sk = raw_get_next(seq, v);
 	++*pos;
@@ -1052,6 +1091,7 @@ EXPORT_SYMBOL_GPL(raw_seq_next);
 
 void raw_seq_stop(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct raw_iter_state *state = raw_seq_private(seq);
 
 	read_unlock(&state->h->lock);
@@ -1060,6 +1100,7 @@ EXPORT_SYMBOL_GPL(raw_seq_stop);
 
 static void raw_sock_seq_show(struct seq_file *seq, struct sock *sp, int i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sp);
 	__be32 dest = inet->inet_daddr,
 	       src = inet->inet_rcv_saddr;
@@ -1079,6 +1120,7 @@ static void raw_sock_seq_show(struct seq_file *seq, struct sock *sp, int i)
 
 static int raw_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (v == SEQ_START_TOKEN)
 		seq_printf(seq, "  sl  local_address rem_address   st tx_queue "
 				"rx_queue tr tm->when retrnsmt   uid  timeout "
@@ -1103,7 +1145,9 @@ int raw_seq_open(struct inode *ino, struct file *file,
 
 	err = seq_open_net(ino, file, ops, sizeof(struct raw_iter_state));
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	i = raw_seq_private((struct seq_file *)file->private_data);
 	i->h = h;
@@ -1113,6 +1157,7 @@ EXPORT_SYMBOL_GPL(raw_seq_open);
 
 static int raw_v4_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return raw_seq_open(inode, file, &raw_v4_hashinfo, &raw_seq_ops);
 }
 
@@ -1127,7 +1172,9 @@ static const struct file_operations raw_seq_fops = {
 static __net_init int raw_init_net(struct net *net)
 {
 	if (!proc_create("raw", S_IRUGO, net->proc_net, &raw_seq_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
@@ -1149,6 +1196,7 @@ int __init raw_proc_init(void)
 
 void __init raw_proc_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&raw_net_ops);
 }
 #endif /* CONFIG_PROC_FS */
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index 0ba88ef..dc474a0 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -149,6 +151,7 @@ static void		ipv4_dst_destroy(struct dst_entry *dst);
 
 static u32 *ipv4_cow_metrics(struct dst_entry *dst, unsigned long old)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(1);
 	return NULL;
 }
@@ -202,6 +205,7 @@ static DEFINE_PER_CPU(struct rt_cache_stat, rt_cache_stat);
 #ifdef CONFIG_PROC_FS
 static void *rt_cache_seq_start(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (*pos)
 		return NULL;
 	return SEQ_START_TOKEN;
@@ -209,6 +213,7 @@ static void *rt_cache_seq_start(struct seq_file *seq, loff_t *pos)
 
 static void *rt_cache_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	++*pos;
 	return NULL;
 }
@@ -219,6 +224,7 @@ static void rt_cache_seq_stop(struct seq_file *seq, void *v)
 
 static int rt_cache_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (v == SEQ_START_TOKEN)
 		seq_printf(seq, "%-127s\n",
 			   "Iface\tDestination\tGateway \tFlags\t\tRefCnt\tUse\t"
@@ -236,6 +242,7 @@ static const struct seq_operations rt_cache_seq_ops = {
 
 static int rt_cache_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &rt_cache_seq_ops);
 }
 
@@ -253,7 +260,9 @@ static void *rt_cpu_seq_start(struct seq_file *seq, loff_t *pos)
 	int cpu;
 
 	if (*pos == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return SEQ_START_TOKEN;
+}
 
 	for (cpu = *pos-1; cpu < nr_cpu_ids; ++cpu) {
 		if (!cpu_possible(cpu))
@@ -268,6 +277,7 @@ static void *rt_cpu_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
 	int cpu;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (cpu = *pos; cpu < nr_cpu_ids; ++cpu) {
 		if (!cpu_possible(cpu))
 			continue;
@@ -288,6 +298,7 @@ static int rt_cpu_seq_show(struct seq_file *seq, void *v)
 	struct rt_cache_stat *st = v;
 
 	if (v == SEQ_START_TOKEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_printf(seq, "entries  in_hit in_slow_tot in_slow_mc in_no_route in_brd in_martian_dst in_martian_src  out_hit out_slow_tot out_slow_mc  gc_total gc_ignored gc_goal_miss gc_dst_overflow in_hlist_search out_hlist_search\n");
 		return 0;
 	}
@@ -327,6 +338,7 @@ static const struct seq_operations rt_cpu_seq_ops = {
 
 static int rt_cpu_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &rt_cpu_seq_ops);
 }
 
@@ -461,7 +473,10 @@ static struct neighbour *ipv4_neigh_lookup(const struct dst_entry *dst,
 
 	n = __ipv4_neigh_lookup(dev, *(__force u32 *)pkey);
 	if (n)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return n;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return neigh_create(&arp_tbl, pkey, dev);
 }
 
@@ -473,7 +488,9 @@ static void ipv4_confirm_neigh(const struct dst_entry *dst, const void *daddr)
 
 	rt = (const struct rtable *)dst;
 	if (rt->rt_gateway)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pkey = (const __be32 *)&rt->rt_gateway;
+}
 	else if (!daddr ||
 		 (rt->rt_flags &
 		  (RTCF_MULTICAST | RTCF_BROADCAST | RTCF_LOCAL)))
@@ -504,6 +521,7 @@ u32 ip_idents_reserve(u32 hash, int segs)
 
 	/* Do not use atomic_add_return() as it makes UBSAN unhappy */
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		old = (u32)atomic_read(p_id);
 		new = old + delta + segs;
 	} while (atomic_cmpxchg(p_id, old, new) != old);
@@ -534,6 +552,7 @@ static void __build_flow_key(const struct net *net, struct flowi4 *fl4,
 			     int oif, u8 tos,
 			     u8 prot, u32 mark, int flow_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sk) {
 		const struct inet_sock *inet = inet_sk(sk);
 
@@ -552,6 +571,7 @@ static void __build_flow_key(const struct net *net, struct flowi4 *fl4,
 static void build_skb_flow_key(struct flowi4 *fl4, const struct sk_buff *skb,
 			       const struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct net *net = dev_net(skb->dev);
 	const struct iphdr *iph = ip_hdr(skb);
 	int oif = skb->dev->ifindex;
@@ -564,6 +584,7 @@ static void build_skb_flow_key(struct flowi4 *fl4, const struct sk_buff *skb,
 
 static void build_sk_flow_key(struct flowi4 *fl4, const struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_sock *inet = inet_sk(sk);
 	const struct ip_options_rcu *inet_opt;
 	__be32 daddr = inet->inet_daddr;
@@ -583,6 +604,7 @@ static void build_sk_flow_key(struct flowi4 *fl4, const struct sock *sk)
 static void ip_rt_build_flow_key(struct flowi4 *fl4, const struct sock *sk,
 				 const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (skb)
 		build_skb_flow_key(fl4, skb, sk);
 	else
@@ -595,6 +617,7 @@ static void fnhe_flush_routes(struct fib_nh_exception *fnhe)
 {
 	struct rtable *rt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rt = rcu_dereference(fnhe->fnhe_rth_input);
 	if (rt) {
 		RCU_INIT_POINTER(fnhe->fnhe_rth_input, NULL);
@@ -613,6 +636,7 @@ static struct fib_nh_exception *fnhe_oldest(struct fnhe_hash_bucket *hash)
 {
 	struct fib_nh_exception *fnhe, *oldest;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	oldest = rcu_dereference(hash->chain);
 	for (fnhe = rcu_dereference(oldest->fnhe_next); fnhe;
 	     fnhe = rcu_dereference(fnhe->fnhe_next)) {
@@ -628,6 +652,7 @@ static inline u32 fnhe_hashfun(__be32 daddr)
 	static u32 fnhe_hashrnd __read_mostly;
 	u32 hval;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_get_random_once(&fnhe_hashrnd, sizeof(fnhe_hashrnd));
 	hval = jhash_1word((__force u32) daddr, fnhe_hashrnd);
 	return hash_32(hval, FNHE_HASH_SHIFT);
@@ -635,6 +660,7 @@ static inline u32 fnhe_hashfun(__be32 daddr)
 
 static void fill_route_from_fnhe(struct rtable *rt, struct fib_nh_exception *fnhe)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rt->rt_pmtu = fnhe->fnhe_pmtu;
 	rt->dst.expires = fnhe->fnhe_expires;
 
@@ -660,6 +686,7 @@ static void update_or_create_fnhe(struct fib_nh *nh, __be32 daddr, __be32 gw,
 
 	spin_lock_bh(&fnhe_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hash = rcu_dereference(nh->nh_exceptions);
 	if (!hash) {
 		hash = kzalloc(FNHE_HASH_SIZE * sizeof(*hash), GFP_ATOMIC);
@@ -736,6 +763,7 @@ static void update_or_create_fnhe(struct fib_nh *nh, __be32 daddr, __be32 gw,
 static void __ip_do_redirect(struct rtable *rt, struct sk_buff *skb, struct flowi4 *fl4,
 			     bool kill_route)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__be32 new_gw = icmp_hdr(skb)->un.gateway;
 	__be32 old_gw = ip_hdr(skb)->saddr;
 	struct net_device *dev = skb->dev;
@@ -839,10 +867,12 @@ static struct dst_entry *ipv4_negative_advice(struct dst_entry *dst)
 
 	if (rt) {
 		if (dst->obsolete > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ip_rt_put(rt);
 			ret = NULL;
 		} else if ((rt->rt_flags & RTCF_REDIRECTED) ||
 			   rt->dst.expires) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ip_rt_put(rt);
 			ret = NULL;
 		}
@@ -868,6 +898,7 @@ static struct dst_entry *ipv4_negative_advice(struct dst_entry *dst)
 
 void ip_rt_send_redirect(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rtable *rt = skb_rtable(skb);
 	struct in_device *in_dev;
 	struct inet_peer *peer;
@@ -933,6 +964,7 @@ void ip_rt_send_redirect(struct sk_buff *skb)
 
 static int ip_error(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct in_device *in_dev = __in_dev_get_rcu(skb->dev);
 	struct rtable *rt = skb_rtable(skb);
 	struct inet_peer *peer;
@@ -1004,7 +1036,9 @@ static void __ip_rt_update_pmtu(struct rtable *rt, struct flowi4 *fl4, u32 mtu)
 	struct fib_result res;
 
 	if (dst_metric_locked(dst, RTAX_MTU))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (ipv4_mtu(dst) < mtu)
 		return;
@@ -1044,7 +1078,9 @@ void ipv4_update_pmtu(struct sk_buff *skb, struct net *net, u32 mtu,
 	struct rtable *rt;
 
 	if (!mark)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mark = IP4_REPLY_MARK(net, skb->mark);
+}
 
 	__build_flow_key(net, &fl4, NULL, iph, oif,
 			 RT_TOS(iph->tos), protocol, mark, flow_flags);
@@ -1065,7 +1101,9 @@ static void __ipv4_sk_update_pmtu(struct sk_buff *skb, struct sock *sk, u32 mtu)
 	__build_flow_key(sock_net(sk), &fl4, sk, iph, 0, 0, 0, 0, 0);
 
 	if (!fl4.flowi4_mark)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl4.flowi4_mark = IP4_REPLY_MARK(sock_net(sk), skb->mark);
+}
 
 	rt = __ip_route_output_key(sock_net(sk), &fl4);
 	if (!IS_ERR(rt)) {
@@ -1088,6 +1126,7 @@ void ipv4_sk_update_pmtu(struct sk_buff *skb, struct sock *sk, u32 mtu)
 	if (!ip_sk_accept_pmtu(sk))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	odst = sk_dst_get(sk);
 
 	if (sock_owned_by_user(sk) || !odst) {
@@ -1139,6 +1178,7 @@ void ipv4_redirect(struct sk_buff *skb, struct net *net,
 			 RT_TOS(iph->tos), protocol, mark, flow_flags);
 	rt = __ip_route_output_key(net, &fl4);
 	if (!IS_ERR(rt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__ip_do_redirect(rt, skb, &fl4, false);
 		ip_rt_put(rt);
 	}
@@ -1155,6 +1195,7 @@ void ipv4_sk_redirect(struct sk_buff *skb, struct sock *sk)
 	__build_flow_key(net, &fl4, sk, iph, 0, 0, 0, 0, 0);
 	rt = __ip_route_output_key(net, &fl4);
 	if (!IS_ERR(rt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__ip_do_redirect(rt, skb, &fl4, false);
 		ip_rt_put(rt);
 	}
@@ -1174,7 +1215,10 @@ static struct dst_entry *ipv4_dst_check(struct dst_entry *dst, u32 cookie)
 	 * DST_OBSOLETE_DEAD by dst_free().
 	 */
 	if (dst->obsolete != DST_OBSOLETE_FORCE_CHK || rt_is_expired(rt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dst;
 }
 
@@ -1186,11 +1230,14 @@ static void ipv4_link_failure(struct sk_buff *skb)
 
 	rt = skb_rtable(skb);
 	if (rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_set_expires(&rt->dst, 0);
 }
+}
 
 static int ip_rt_bug(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s: %pI4 -> %pI4, %s\n",
 		 __func__, &ip_hdr(skb)->saddr, &ip_hdr(skb)->daddr,
 		 skb->dev ? skb->dev->name : "?");
@@ -1213,7 +1260,9 @@ void ip_rt_get_source(u8 *addr, struct sk_buff *skb, struct rtable *rt)
 	__be32 src;
 
 	if (rt_is_output_route(rt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		src = ip_hdr(skb)->saddr;
+}
 	else {
 		struct fib_result res;
 		struct flowi4 fl4;
@@ -1266,16 +1315,23 @@ static unsigned int ipv4_mtu(const struct dst_entry *dst)
 	unsigned int mtu = rt->rt_pmtu;
 
 	if (!mtu || time_after_eq(jiffies, rt->dst.expires))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mtu = dst_metric_raw(dst, RTAX_MTU);
+}
 
 	if (mtu)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return mtu;
+}
 
 	mtu = READ_ONCE(dst->dev->mtu);
 
 	if (unlikely(dst_metric_locked(dst, RTAX_MTU))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rt->rt_uses_gateway && mtu > 576)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mtu = 576;
+}
 	}
 
 	mtu = min_t(unsigned int, mtu, IP_MAX_MTU);
@@ -1290,15 +1346,23 @@ static struct fib_nh_exception *find_exception(struct fib_nh *nh, __be32 daddr)
 	u32 hval;
 
 	if (!hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hval = fnhe_hashfun(daddr);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (fnhe = rcu_dereference(hash[hval].chain); fnhe;
 	     fnhe = rcu_dereference(fnhe->fnhe_next)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fnhe->fnhe_daddr == daddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return fnhe;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -1315,7 +1379,9 @@ static bool rt_bind_exception(struct rtable *rt, struct fib_nh_exception *fnhe,
 		int genid = fnhe_genid(dev_net(rt->dst.dev));
 
 		if (rt_is_input_route(rt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			porig = &fnhe->fnhe_rth_input;
+}
 		else
 			porig = &fnhe->fnhe_rth_output;
 		orig = rcu_dereference(*porig);
@@ -1368,10 +1434,12 @@ static bool rt_cache_route(struct fib_nh *nh, struct rtable *rt)
 	prev = cmpxchg(p, orig, rt);
 	if (prev == orig) {
 		if (orig) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dst_dev_put(&orig->dst);
 			dst_release(&orig->dst);
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_release(&rt->dst);
 		ret = false;
 	}
@@ -1403,7 +1471,9 @@ static void ipv4_dst_destroy(struct dst_entry *dst)
 	struct rtable *rt = (struct rtable *) dst;
 
 	if (p != &dst_default_metrics && refcount_dec_and_test(&p->refcnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(p);
+}
 
 	if (!list_empty(&rt->rt_uncached)) {
 		struct uncached_list *ul = rt->rt_uncached_list;
@@ -1416,6 +1486,7 @@ static void ipv4_dst_destroy(struct dst_entry *dst)
 
 void rt_flush_dev(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(dev);
 	struct rtable *rt;
 	int cpu;
@@ -1425,12 +1496,15 @@ void rt_flush_dev(struct net_device *dev)
 
 		spin_lock_bh(&ul->lock);
 		list_for_each_entry(rt, &ul->head, rt_uncached) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (rt->dst.dev != dev)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rt->dst.dev = net->loopback_dev;
 			dev_hold(rt->dst.dev);
 			dev_put(dev);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&ul->lock);
 	}
 }
@@ -1459,6 +1533,7 @@ static void rt_set_nexthop(struct rtable *rt, __be32 daddr,
 		}
 		dst_init_metrics(&rt->dst, fi->fib_metrics->metrics, true);
 		if (fi->fib_metrics != &dst_default_metrics) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rt->dst._metrics |= DST_METRICS_REFCOUNTED;
 			refcount_inc(&fi->fib_metrics->refcnt);
 		}
@@ -1467,7 +1542,9 @@ static void rt_set_nexthop(struct rtable *rt, __be32 daddr,
 #endif
 		rt->dst.lwtstate = lwtstate_get(nh->nh_lwtstate);
 		if (unlikely(fnhe))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cached = rt_bind_exception(rt, fnhe, daddr, do_cache);
+}
 		else if (do_cache)
 			cached = rt_cache_route(nh, rt);
 		if (unlikely(!cached)) {
@@ -1477,7 +1554,10 @@ static void rt_set_nexthop(struct rtable *rt, __be32 daddr,
 			 * route into the cache we really need to set it.
 			 */
 			if (!rt->rt_gateway)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rt->rt_gateway = daddr;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rt_add_uncached_list(rt);
 		}
 	} else
@@ -1532,7 +1612,9 @@ int ip_mc_validate_source(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 
 	/* Primary sanity checks. */
 	if (!in_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (ipv4_is_multicast(saddr) || ipv4_is_lbcast(saddr) ||
 	    skb->protocol != htons(ETH_P_IP))
@@ -1557,6 +1639,7 @@ int ip_mc_validate_source(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 static int ip_route_input_mc(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 			     u8 tos, struct net_device *dev, int our)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct in_device *in_dev = __in_dev_get_rcu(dev);
 	unsigned int flags = RTCF_MULTICAST;
 	struct rtable *rth;
@@ -1607,6 +1690,7 @@ static void ip_handle_martian_source(struct net_device *dev,
 		 */
 		pr_warn("martian source %pI4 from %pI4, on dev %s\n",
 			&daddr, &saddr, dev->name);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->hard_header_len && skb_mac_header_was_set(skb)) {
 			print_hex_dump(KERN_WARNING, "ll header: ",
 				       DUMP_PREFIX_OFFSET, 16, 1,
@@ -1625,6 +1709,7 @@ static void ip_del_fnhe(struct fib_nh *nh, __be32 daddr)
 
 	spin_lock_bh(&fnhe_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hash = rcu_dereference_protected(nh->nh_exceptions,
 					 lockdep_is_held(&fnhe_lock));
 	hash += hval;
@@ -1650,11 +1735,13 @@ static void ip_del_fnhe(struct fib_nh *nh, __be32 daddr)
 static void set_lwt_redirect(struct rtable *rth)
 {
 	if (lwtunnel_output_redirect(rth->dst.lwtstate)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rth->dst.lwtstate->orig_output = rth->dst.output;
 		rth->dst.output = lwtunnel_output;
 	}
 
 	if (lwtunnel_input_redirect(rth->dst.lwtstate)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rth->dst.lwtstate->orig_input = rth->dst.input;
 		rth->dst.input = lwtunnel_input;
 	}
@@ -1676,6 +1763,7 @@ static int __mkroute_input(struct sk_buff *skb,
 	/* get a working reference to the output device */
 	out_dev = __in_dev_get_rcu(FIB_RES_DEV(*res));
 	if (!out_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_crit_ratelimited("Bug in ip_route_input_slow(). Please report.\n");
 		return -EINVAL;
 	}
@@ -1765,6 +1853,7 @@ static int __mkroute_input(struct sk_buff *skb,
 static void ip_multipath_l3_keys(const struct sk_buff *skb,
 				 struct flow_keys *hash_keys)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct iphdr *outer_iph = ip_hdr(skb);
 	const struct iphdr *inner_iph;
 	const struct icmphdr *icmph;
@@ -1884,6 +1973,7 @@ static int ip_route_input_slow(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 			       u8 tos, struct net_device *dev,
 			       struct fib_result *res)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct in_device *in_dev = __in_dev_get_rcu(dev);
 	struct ip_tunnel_info *tun_info;
 	struct flowi4	fl4;
@@ -1905,7 +1995,9 @@ static int ip_route_input_slow(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 
 	tun_info = skb_tunnel_info(skb);
 	if (tun_info && !(tun_info->mode & IP_TUNNEL_INFO_TX))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl4.flowi4_tun_key.tun_id = tun_info->key.tun_id;
+}
 	else
 		fl4.flowi4_tun_key.tun_id = 0;
 	skb_dst_drop(skb);
@@ -1931,9 +2023,11 @@ static int ip_route_input_slow(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 	 * and call it once if daddr or/and saddr are loopback addresses
 	 */
 	if (ipv4_is_loopback(daddr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!IN_DEV_NET_ROUTE_LOCALNET(in_dev, net))
 			goto martian_destination;
 	} else if (ipv4_is_loopback(saddr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!IN_DEV_NET_ROUTE_LOCALNET(in_dev, net))
 			goto martian_source;
 	}
@@ -1952,8 +2046,11 @@ static int ip_route_input_slow(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 	fl4.flowi4_uid = sock_net_uid(net, NULL);
 	err = fib_lookup(net, &fl4, res, 0);
 	if (err != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!IN_DEV_FORWARD(in_dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EHOSTUNREACH;
+}
 		goto no_route;
 	}
 
@@ -1968,13 +2065,17 @@ static int ip_route_input_slow(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 		goto local_input;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!IN_DEV_FORWARD(in_dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EHOSTUNREACH;
 		goto no_route;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (res->type != RTN_UNICAST)
 		goto martian_destination;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = ip_mkroute_input(skb, res, in_dev, daddr, saddr, tos);
 out:	return err;
 
@@ -1988,6 +2089,7 @@ out:	return err;
 		if (err < 0)
 			goto martian_source;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flags |= RTCF_BROADCAST;
 	res->type = RTN_BROADCAST;
 	RT_CACHE_STAT_INC(in_brd);
@@ -2002,6 +2104,7 @@ out:	return err;
 				err = 0;
 				goto out;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			do_cache = true;
 		}
 	}
@@ -2022,6 +2125,7 @@ out:	return err;
 
 	RT_CACHE_STAT_INC(in_slow_tot);
 	if (res->type == RTN_UNREACHABLE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rth->dst.input= ip_error;
 		rth->dst.error= -err;
 		rth->rt_flags 	&= ~RTCF_LOCAL;
@@ -2032,13 +2136,16 @@ out:	return err;
 
 		rth->dst.lwtstate = lwtstate_get(nh->nh_lwtstate);
 		if (lwtunnel_input_redirect(rth->dst.lwtstate)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			WARN_ON(rth->dst.input == lwtunnel_input);
 			rth->dst.lwtstate->orig_input = rth->dst.input;
 			rth->dst.input = lwtunnel_input;
 		}
 
 		if (unlikely(!rt_cache_route(nh, rth)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rt_add_uncached_list(rth);
+}
 	}
 	skb_dst_set(skb, &rth->dst);
 	err = 0;
@@ -2046,6 +2153,7 @@ out:	return err;
 
 no_route:
 	RT_CACHE_STAT_INC(in_no_route);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	res->type = RTN_UNREACHABLE;
 	res->fi = NULL;
 	res->table = NULL;
@@ -2058,8 +2166,10 @@ out:	return err;
 	RT_CACHE_STAT_INC(in_martian_dst);
 #ifdef CONFIG_IP_ROUTE_VERBOSE
 	if (IN_DEV_LOG_MARTIANS(in_dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_warn_ratelimited("martian destination %pI4 from %pI4, dev %s\n",
 				     &daddr, &saddr, dev->name);
+}
 #endif
 
 e_inval:
@@ -2106,6 +2216,7 @@ int ip_route_input_rcu(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 	   route cache entry is created eventually.
 	 */
 	if (ipv4_is_multicast(daddr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct in_device *in_dev = __in_dev_get_rcu(dev);
 		int our = 0;
 		int err = -EINVAL;
@@ -2124,6 +2235,7 @@ int ip_route_input_rcu(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 						      ip_hdr(skb)->protocol);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (our
 #ifdef CONFIG_IP_MROUTE
 			||
@@ -2131,9 +2243,11 @@ int ip_route_input_rcu(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 		     IN_DEV_MFORWARD(in_dev))
 #endif
 		   ) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = ip_route_input_mc(skb, daddr, saddr,
 						tos, dev, our);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
 	}
 
@@ -2155,7 +2269,9 @@ static struct rtable *__mkroute_output(const struct fib_result *res,
 
 	in_dev = __in_dev_get_rcu(dev_out);
 	if (!in_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	if (likely(!IN_DEV_ROUTE_LOCALNET(in_dev)))
 		if (ipv4_is_loopback(fl4->saddr) &&
@@ -2164,20 +2280,29 @@ static struct rtable *__mkroute_output(const struct fib_result *res,
 			return ERR_PTR(-EINVAL);
 
 	if (ipv4_is_lbcast(fl4->daddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type = RTN_BROADCAST;
+}
 	else if (ipv4_is_multicast(fl4->daddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type = RTN_MULTICAST;
+}
 	else if (ipv4_is_zeronet(fl4->daddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	if (dev_out->flags & IFF_LOOPBACK)
 		flags |= RTCF_LOCAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	do_cache = true;
 	if (type == RTN_BROADCAST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= RTCF_BROADCAST | RTCF_LOCAL;
 		fi = NULL;
 	} else if (type == RTN_MULTICAST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= RTCF_MULTICAST | RTCF_LOCAL;
 		if (!ip_check_mc_rcu(in_dev, fl4->daddr, fl4->saddr,
 				     fl4->flowi4_proto))
@@ -2189,7 +2314,9 @@ static struct rtable *__mkroute_output(const struct fib_result *res,
 		 * Yes, it is hack.
 		 */
 		if (fi && res->prefixlen < 4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fi = NULL;
+}
 	} else if ((type == RTN_LOCAL) && (orig_oif != 0) &&
 		   (orig_oif != dev_out->ifindex)) {
 		/* For local routes that require a particular output interface
@@ -2204,6 +2331,7 @@ static struct rtable *__mkroute_output(const struct fib_result *res,
 		fi = NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fnhe = NULL;
 	do_cache &= fi != NULL;
 	if (do_cache) {
@@ -2212,10 +2340,14 @@ static struct rtable *__mkroute_output(const struct fib_result *res,
 
 		fnhe = find_exception(nh, fl4->daddr);
 		if (fnhe) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			prth = &fnhe->fnhe_rth_output;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rth = rcu_dereference(*prth);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (rth && rth->dst.expires &&
 			    time_after(jiffies, rth->dst.expires)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ip_del_fnhe(nh, fl4->daddr);
 				fnhe = NULL;
 			} else {
@@ -2227,6 +2359,7 @@ static struct rtable *__mkroute_output(const struct fib_result *res,
 			     FLOWI_FLAG_KNOWN_NH &&
 			     !(nh->nh_gw &&
 			       nh->nh_scope == RT_SCOPE_LINK))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			do_cache = false;
 			goto add;
 		}
@@ -2235,7 +2368,9 @@ static struct rtable *__mkroute_output(const struct fib_result *res,
 
 rt_cache:
 		if (rt_cache_valid(rth) && dst_hold_safe(&rth->dst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return rth;
+}
 	}
 
 add:
@@ -2244,7 +2379,9 @@ static struct rtable *__mkroute_output(const struct fib_result *res,
 			   IN_DEV_CONF_GET(in_dev, NOXFRM),
 			   do_cache);
 	if (!rth)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOBUFS);
+}
 
 	rth->rt_iif = orig_oif;
 	if (res->table)
@@ -2253,15 +2390,20 @@ static struct rtable *__mkroute_output(const struct fib_result *res,
 	RT_CACHE_STAT_INC(out_slow_tot);
 
 	if (flags & (RTCF_BROADCAST | RTCF_MULTICAST)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (flags & RTCF_LOCAL &&
 		    !(dev_out->flags & IFF_LOOPBACK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rth->dst.output = ip_mc_output;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			RT_CACHE_STAT_INC(out_slow_mc);
 		}
 #ifdef CONFIG_IP_MROUTE
 		if (type == RTN_MULTICAST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (IN_DEV_MFORWARD(in_dev) &&
 			    !ipv4_is_local_multicast(fl4->daddr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rth->dst.input = ip_mr_input;
 				rth->dst.output = ip_mc_output;
 			}
@@ -2314,6 +2456,7 @@ struct rtable *ip_route_output_key_hash_rcu(struct net *net, struct flowi4 *fl4,
 	int err = -ENETUNREACH;
 
 	if (fl4->saddr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rth = ERR_PTR(-EINVAL);
 		if (ipv4_is_multicast(fl4->saddr) ||
 		    ipv4_is_lbcast(fl4->saddr) ||
@@ -2351,6 +2494,7 @@ struct rtable *ip_route_output_key_hash_rcu(struct net *net, struct flowi4 *fl4,
 			   Luckily, this hack is good workaround.
 			 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fl4->flowi4_oif = dev_out->ifindex;
 			goto make_route;
 		}
@@ -2371,24 +2515,33 @@ struct rtable *ip_route_output_key_hash_rcu(struct net *net, struct flowi4 *fl4,
 
 		/* RACE: Check return value of inet_select_addr instead. */
 		if (!(dev_out->flags & IFF_UP) || !__in_dev_get_rcu(dev_out)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rth = ERR_PTR(-ENETUNREACH);
 			goto out;
 		}
 		if (ipv4_is_local_multicast(fl4->daddr) ||
 		    ipv4_is_lbcast(fl4->daddr) ||
 		    fl4->flowi4_proto == IPPROTO_IGMP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!fl4->saddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fl4->saddr = inet_select_addr(dev_out, 0,
 							      RT_SCOPE_LINK);
+}
 			goto make_route;
 		}
 		if (!fl4->saddr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ipv4_is_multicast(fl4->daddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fl4->saddr = inet_select_addr(dev_out, 0,
 							      fl4->flowi4_scope);
+}
 			else if (!fl4->daddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fl4->saddr = inet_select_addr(dev_out, 0,
 							      RT_SCOPE_HOST);
+}
 		}
 	}
 
@@ -2405,6 +2558,7 @@ struct rtable *ip_route_output_key_hash_rcu(struct net *net, struct flowi4 *fl4,
 
 	err = fib_lookup(net, fl4, res, 0);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res->fi = NULL;
 		res->table = NULL;
 		if (fl4->flowi4_oif &&
@@ -2428,12 +2582,16 @@ struct rtable *ip_route_output_key_hash_rcu(struct net *net, struct flowi4 *fl4,
 			   likely IPv6, but we do not.
 			 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (fl4->saddr == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fl4->saddr = inet_select_addr(dev_out, 0,
 							      RT_SCOPE_LINK);
+}
 			res->type = RTN_UNICAST;
 			goto make_route;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rth = ERR_PTR(err);
 		goto out;
 	}
@@ -2475,11 +2633,13 @@ struct rtable *ip_route_output_key_hash_rcu(struct net *net, struct flowi4 *fl4,
 
 static struct dst_entry *ipv4_blackhole_dst_check(struct dst_entry *dst, u32 cookie)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
 static unsigned int ipv4_blackhole_mtu(const struct dst_entry *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int mtu = dst_metric_raw(dst, RTAX_MTU);
 
 	return mtu ? : dst->dev->mtu;
@@ -2498,6 +2658,7 @@ static void ipv4_rt_blackhole_redirect(struct dst_entry *dst, struct sock *sk,
 static u32 *ipv4_rt_blackhole_cow_metrics(struct dst_entry *dst,
 					  unsigned long old)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -2527,7 +2688,9 @@ struct dst_entry *ipv4_blackhole_route(struct net *net, struct dst_entry *dst_or
 
 		new->dev = net->loopback_dev;
 		if (new->dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_hold(new->dev);
+}
 
 		rt->rt_is_input = ort->rt_is_input;
 		rt->rt_iif = ort->rt_iif;
@@ -2553,13 +2716,16 @@ struct rtable *ip_route_output_flow(struct net *net, struct flowi4 *flp4,
 	struct rtable *rt = __ip_route_output_key(net, flp4);
 
 	if (IS_ERR(rt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rt;
+}
 
 	if (flp4->flowi4_proto)
 		rt = (struct rtable *)xfrm_lookup_route(net, &rt->dst,
 							flowi4_to_flowi(flp4),
 							sk, 0);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rt;
 }
 EXPORT_SYMBOL_GPL(ip_route_output_flow);
@@ -2569,6 +2735,7 @@ static int rt_fill_info(struct net *net,  __be32 dst, __be32 src, u32 table_id,
 			struct flowi4 *fl4, struct sk_buff *skb, u32 portid,
 			u32 seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rtable *rt = skb_rtable(skb);
 	struct rtmsg *r;
 	struct nlmsghdr *nlh;
@@ -2681,6 +2848,7 @@ static int rt_fill_info(struct net *net,  __be32 dst, __be32 src, u32 table_id,
 static int inet_rtm_getroute(struct sk_buff *in_skb, struct nlmsghdr *nlh,
 			     struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(in_skb->sk);
 	struct rtmsg *rtm;
 	struct nlattr *tb[RTA_MAX+1];
@@ -2827,6 +2995,7 @@ static int ipv4_sysctl_rtcache_flush(struct ctl_table *__ctl, int write,
 	struct net *net = (struct net *)__ctl->extra1;
 
 	if (write) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt_cache_flush(net);
 		fnhe_genid_bump(net);
 		return 0;
@@ -2962,24 +3131,30 @@ static __net_init int sysctl_route_net_init(struct net *net)
 
 	tbl = ipv4_route_flush_table;
 	if (!net_eq(net, &init_net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tbl = kmemdup(tbl, sizeof(ipv4_route_flush_table), GFP_KERNEL);
 		if (!tbl)
 			goto err_dup;
 
 		/* Don't export sysctls to unprivileged users */
 		if (net->user_ns != &init_user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tbl[0].procname = NULL;
+}
 	}
 	tbl[0].extra1 = net;
 
 	net->ipv4.route_hdr = register_net_sysctl(net, "net/ipv4/route", tbl);
 	if (!net->ipv4.route_hdr)
 		goto err_reg;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_reg:
 	if (tbl != ipv4_route_flush_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(tbl);
+}
 err_dup:
 	return -ENOMEM;
 }
@@ -3002,6 +3177,7 @@ static __net_initdata struct pernet_operations sysctl_route_ops = {
 
 static __net_init int rt_genid_init(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&net->ipv4.rt_genid, 0);
 	atomic_set(&net->fnhe_genid, 0);
 	atomic_set(&net->ipv4.dev_addr_genid, get_random_int());
@@ -3014,10 +3190,13 @@ static __net_initdata struct pernet_operations rt_genid_ops = {
 
 static int __net_init ipv4_inetpeer_init(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_peer_base *bp = kmalloc(sizeof(*bp), GFP_KERNEL);
 
 	if (!bp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	inet_peer_base_init(bp);
 	net->ipv4.peers = bp;
 	return 0;
@@ -3048,13 +3227,17 @@ int __init ip_rt_init(void)
 
 	ip_idents = kmalloc(IP_IDENTS_SZ * sizeof(*ip_idents), GFP_KERNEL);
 	if (!ip_idents)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("IP: failed to allocate ip_idents\n");
+}
 
 	prandom_bytes(ip_idents, IP_IDENTS_SZ * sizeof(*ip_idents));
 
 	ip_tstamps = kcalloc(IP_IDENTS_SZ, sizeof(*ip_tstamps), GFP_KERNEL);
 	if (!ip_tstamps)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("IP: failed to allocate ip_tstamps\n");
+}
 
 	for_each_possible_cpu(cpu) {
 		struct uncached_list *ul = &per_cpu(rt_uncached_list, cpu);
@@ -3075,10 +3258,14 @@ int __init ip_rt_init(void)
 	ipv4_dst_blackhole_ops.kmem_cachep = ipv4_dst_ops.kmem_cachep;
 
 	if (dst_entries_init(&ipv4_dst_ops) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("IP: failed to allocate ipv4_dst_ops counter\n");
+}
 
 	if (dst_entries_init(&ipv4_dst_blackhole_ops) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("IP: failed to allocate ipv4_dst_blackhole_ops counter\n");
+}
 
 	ipv4_dst_ops.gc_thresh = ~0;
 	ip_rt_max_size = INT_MAX;
@@ -3087,7 +3274,9 @@ int __init ip_rt_init(void)
 	ip_fib_init();
 
 	if (ip_rt_proc_init())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Unable to create route proc files\n");
+}
 #ifdef CONFIG_XFRM
 	xfrm_init();
 	xfrm4_init();
diff --git a/net/ipv4/sysctl_net_ipv4.c b/net/ipv4/sysctl_net_ipv4.c
index 0989e73..6c9e2b0 100644
--- a/net/ipv4/sysctl_net_ipv4.c
+++ b/net/ipv4/sysctl_net_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * sysctl_net_ipv4.c: sysctl interface to net IPV4 subsystem.
@@ -55,6 +57,7 @@ static void set_local_port_range(struct net *net, int range[2])
 	bool same_parity = !((range[0] ^ range[1]) & 1);
 
 	write_seqlock_bh(&net->ipv4.ip_local_ports.lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (same_parity && !net->ipv4.ip_local_ports.warned) {
 		net->ipv4.ip_local_ports.warned = true;
 		pr_err_ratelimited("ip_local_port_range: prefer different parity for start/end values.\n");
@@ -104,6 +107,7 @@ static int ipv4_local_port_range(struct ctl_table *table, int write,
 static int ipv4_privileged_ports(struct ctl_table *table, int write,
 				void __user *buffer, size_t *lenp, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = container_of(table->data, struct net,
 	    ipv4.sysctl_ip_prot_sock);
 	int ret;
@@ -142,6 +146,7 @@ static void inet_get_ping_group_range_table(struct ctl_table *table, kgid_t *low
 		container_of(table->data, struct net, ipv4.ping_group_range.range);
 	unsigned int seq;
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq = read_seqbegin(&net->ipv4.ping_group_range.lock);
 
 		*low = data[0];
@@ -188,6 +193,7 @@ static int ipv4_ping_group_range(struct ctl_table *table, int write,
 		high = make_kgid(user_ns, urange[1]);
 		if (!gid_valid(low) || !gid_valid(high) ||
 		    (urange[1] < urange[0]) || gid_lt(high, low)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			low = make_kgid(&init_user_ns, 1);
 			high = make_kgid(&init_user_ns, 0);
 		}
@@ -210,6 +216,7 @@ static int proc_tcp_congestion_control(struct ctl_table *ctl, int write,
 	tcp_get_default_congestion_control(val);
 
 	ret = proc_dostring(&tbl, write, buffer, lenp, ppos);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (write && ret == 0)
 		ret = tcp_set_default_congestion_control(val);
 	return ret;
@@ -225,7 +232,9 @@ static int proc_tcp_available_congestion_control(struct ctl_table *ctl,
 
 	tbl.data = kmalloc(tbl.maxlen, GFP_USER);
 	if (!tbl.data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	tcp_get_available_congestion_control(tbl.data, TCP_CA_BUF_MAX);
 	ret = proc_dostring(&tbl, write, buffer, lenp, ppos);
 	kfree(tbl.data);
@@ -242,7 +251,9 @@ static int proc_allowed_congestion_control(struct ctl_table *ctl,
 
 	tbl.data = kmalloc(tbl.maxlen, GFP_USER);
 	if (!tbl.data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	tcp_get_allowed_congestion_control(tbl.data, tbl.maxlen);
 	ret = proc_dostring(&tbl, write, buffer, lenp, ppos);
@@ -263,7 +274,9 @@ static int proc_tcp_fastopen_key(struct ctl_table *ctl, int write,
 
 	tbl.data = kmalloc(tbl.maxlen, GFP_KERNEL);
 	if (!tbl.data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	rcu_read_lock();
 	ctxt = rcu_dereference(tcp_fastopen_ctx);
@@ -308,6 +321,7 @@ static void proc_configure_early_demux(int enabled, int protocol)
 
 	rcu_read_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ipprot = rcu_dereference(inet_protos[protocol]);
 	if (ipprot)
 		ipprot->early_demux = enabled ? ipprot->early_demux_handler :
@@ -329,6 +343,7 @@ static int proc_tcp_early_demux(struct ctl_table *table, int write,
 
 	ret = proc_dointvec(table, write, buffer, lenp, ppos);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (write && !ret) {
 		int enabled = init_net.ipv4.sysctl_tcp_early_demux;
 
@@ -345,6 +360,7 @@ static int proc_udp_early_demux(struct ctl_table *table, int write,
 
 	ret = proc_dointvec(table, write, buffer, lenp, ppos);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (write && !ret) {
 		int enabled = init_net.ipv4.sysctl_udp_early_demux;
 
@@ -362,6 +378,7 @@ static int proc_tfo_blackhole_detect_timeout(struct ctl_table *table,
 	int ret;
 
 	ret = proc_dointvec_minmax(table, write, buffer, lenp, ppos);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (write && ret == 0)
 		tcp_fastopen_active_timeout_reset();
 
@@ -378,7 +395,9 @@ static int proc_tcp_available_ulp(struct ctl_table *ctl,
 
 	tbl.data = kmalloc(tbl.maxlen, GFP_USER);
 	if (!tbl.data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	tcp_get_available_ulp(tbl.data, TCP_ULP_BUF_MAX);
 	ret = proc_dostring(&tbl, write, buffer, lenp, ppos);
 	kfree(tbl.data);
@@ -1173,13 +1192,16 @@ static __net_init int ipv4_sysctl_init_net(struct net *net)
 	if (!net->ipv4.sysctl_local_reserved_ports)
 		goto err_ports;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_ports:
 	unregister_net_sysctl_table(net->ipv4.ipv4_hdr);
 err_reg:
 	if (!net_eq(net, &init_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(table);
+}
 err_alloc:
 	return -ENOMEM;
 }
@@ -1205,13 +1227,17 @@ static __init int sysctl_ipv4_init(void)
 
 	hdr = register_net_sysctl(&init_net, "net/ipv4", ipv4_table);
 	if (!hdr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (register_pernet_subsys(&ipv4_sysctl_ops)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unregister_net_sysctl_table(hdr);
 		return -ENOMEM;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index fe11128..4718195 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -329,7 +331,9 @@ void tcp_enter_memory_pressure(struct sock *sk)
 	unsigned long val;
 
 	if (tcp_memory_pressure)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	val = jiffies;
 
 	if (!val)
@@ -344,12 +348,17 @@ void tcp_leave_memory_pressure(struct sock *sk)
 	unsigned long val;
 
 	if (!tcp_memory_pressure)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	val = xchg(&tcp_memory_pressure, 0);
 	if (val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_ADD_STATS(sock_net(sk), LINUX_MIB_TCPMEMORYPRESSURESCHRONO,
 			      jiffies_to_msecs(jiffies - val));
 }
+}
 EXPORT_SYMBOL_GPL(tcp_leave_memory_pressure);
 
 /* Convert seconds to retransmits based on initial and max timeout */
@@ -365,7 +374,9 @@ static u8 secs_to_retrans(int seconds, int timeout, int rto_max)
 			res++;
 			timeout <<= 1;
 			if (timeout > rto_max)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				timeout = rto_max;
+}
 			period += timeout;
 		}
 	}
@@ -378,6 +389,7 @@ static int retrans_to_secs(u8 retrans, int timeout, int rto_max)
 	int period = 0;
 
 	if (retrans > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		period = timeout;
 		while (--retrans) {
 			timeout <<= 1;
@@ -391,6 +403,7 @@ static int retrans_to_secs(u8 retrans, int timeout, int rto_max)
 
 static u64 tcp_compute_delivery_rate(const struct tcp_sock *tp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 rate = READ_ONCE(tp->rate_delivered);
 	u32 intv = READ_ONCE(tp->rate_interval_us);
 	u64 rate64 = 0;
@@ -409,6 +422,7 @@ static u64 tcp_compute_delivery_rate(const struct tcp_sock *tp)
  */
 void tcp_init_sock(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 
@@ -459,14 +473,20 @@ EXPORT_SYMBOL(tcp_init_sock);
 static void tcp_tx_timestamp(struct sock *sk, u16 tsflags, struct sk_buff *skb)
 {
 	if (tsflags && skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct skb_shared_info *shinfo = skb_shinfo(skb);
 		struct tcp_skb_cb *tcb = TCP_SKB_CB(skb);
 
 		sock_tx_timestamp(sk, tsflags, &shinfo->tx_flags);
 		if (tsflags & SOF_TIMESTAMPING_TX_ACK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcb->txstamp_ack = 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tsflags & SOF_TIMESTAMPING_TX_RECORD_MASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			shinfo->tskey = TCP_SKB_CB(skb)->seq + skb->len - 1;
+}
 	}
 }
 
@@ -490,13 +510,16 @@ unsigned int tcp_poll(struct file *file, struct socket *sock, poll_table *wait)
 
 	state = sk_state_load(sk);
 	if (state == TCP_LISTEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return inet_csk_listen_poll(sk);
+}
 
 	/* Socket is not locked. We are protected from async events
 	 * by poll logic and correct handling of state changes
 	 * made by other threads is impossible in any case.
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mask = 0;
 
 	/*
@@ -527,13 +550,16 @@ unsigned int tcp_poll(struct file *file, struct socket *sock, poll_table *wait)
 	 * blocking on fresh not-connected or disconnected socket. --ANK
 	 */
 	if (sk->sk_shutdown == SHUTDOWN_MASK || state == TCP_CLOSE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLHUP;
+}
 	if (sk->sk_shutdown & RCV_SHUTDOWN)
 		mask |= POLLIN | POLLRDNORM | POLLRDHUP;
 
 	/* Connected or passive Fast Open socket? */
 	if (state != TCP_SYN_SENT &&
 	    (state != TCP_SYN_RECV || tp->fastopen_rsk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int target = sock_rcvlowat(sk, 0, INT_MAX);
 
 		if (tp->urg_seq == tp->copied_seq &&
@@ -548,6 +574,7 @@ unsigned int tcp_poll(struct file *file, struct socket *sock, poll_table *wait)
 			if (sk_stream_is_writeable(sk)) {
 				mask |= POLLOUT | POLLWRNORM;
 			} else {  /* send SIGIO later */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sk_set_bit(SOCKWQ_ASYNC_NOSPACE, sk);
 				set_bit(SOCK_NOSPACE, &sk->sk_socket->flags);
 
@@ -558,13 +585,17 @@ unsigned int tcp_poll(struct file *file, struct socket *sock, poll_table *wait)
 				 */
 				smp_mb__after_atomic();
 				if (sk_stream_is_writeable(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					mask |= POLLOUT | POLLWRNORM;
+}
 			}
 		} else
 			mask |= POLLOUT | POLLWRNORM;
 
 		if (tp->urg_data & TCP_URG_VALID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mask |= POLLPRI;
+}
 	} else if (state == TCP_SYN_SENT && inet_sk(sk)->defer_connect) {
 		/* Active TCP fastopen socket with defer_connect
 		 * Return POLLOUT so application can call write()
@@ -577,12 +608,14 @@ unsigned int tcp_poll(struct file *file, struct socket *sock, poll_table *wait)
 	if (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue))
 		mask |= POLLERR;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mask;
 }
 EXPORT_SYMBOL(tcp_poll);
 
 int tcp_ioctl(struct sock *sk, int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int answ;
 	bool slow;
@@ -590,7 +623,9 @@ int tcp_ioctl(struct sock *sk, int cmd, unsigned long arg)
 	switch (cmd) {
 	case SIOCINQ:
 		if (sk->sk_state == TCP_LISTEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
 		slow = lock_sock_fast(sk);
 		answ = tcp_inq(sk);
@@ -601,19 +636,29 @@ int tcp_ioctl(struct sock *sk, int cmd, unsigned long arg)
 		break;
 	case SIOCOUTQ:
 		if (sk->sk_state == TCP_LISTEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((1 << sk->sk_state) & (TCPF_SYN_SENT | TCPF_SYN_RECV))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			answ = 0;
+}
 		else
 			answ = tp->write_seq - tp->snd_una;
 		break;
 	case SIOCOUTQNSD:
 		if (sk->sk_state == TCP_LISTEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((1 << sk->sk_state) & (TCPF_SYN_SENT | TCPF_SYN_RECV))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			answ = 0;
+}
 		else
 			answ = tp->write_seq - tp->snd_nxt;
 		break;
@@ -633,11 +678,13 @@ static inline void tcp_mark_push(struct tcp_sock *tp, struct sk_buff *skb)
 
 static inline bool forced_push(const struct tcp_sock *tp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return after(tp->write_seq, tp->pushed_seq + (tp->max_window >> 1));
 }
 
 static void skb_entail(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct tcp_skb_cb *tcb = TCP_SKB_CB(skb);
 
@@ -658,8 +705,10 @@ static void skb_entail(struct sock *sk, struct sk_buff *skb)
 static inline void tcp_mark_urg(struct tcp_sock *tp, int flags)
 {
 	if (flags & MSG_OOB)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->snd_up = tp->write_seq;
 }
+}
 
 /* If a not yet filled skb is pushed, do not send it if
  * we have data packets in Qdisc or NIC queues :
@@ -683,15 +732,21 @@ static bool tcp_should_autocork(struct sock *sk, struct sk_buff *skb,
 static void tcp_push(struct sock *sk, int flags, int mss_now,
 		     int nonagle, int size_goal)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb;
 
 	if (!tcp_send_head(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb = tcp_write_queue_tail(sk);
 	if (!(flags & MSG_MORE) || forced_push(tp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_mark_push(tp, skb);
+}
 
 	tcp_mark_urg(tp, flags);
 
@@ -699,18 +754,24 @@ static void tcp_push(struct sock *sk, int flags, int mss_now,
 
 		/* avoid atomic op if TSQ_THROTTLED bit is already set */
 		if (!test_bit(TSQ_THROTTLED, &sk->sk_tsq_flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPAUTOCORKING);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_bit(TSQ_THROTTLED, &sk->sk_tsq_flags);
 		}
 		/* It is possible TX completion already happened
 		 * before we set TSQ_THROTTLED.
 		 */
 		if (refcount_read(&sk->sk_wmem_alloc) > skb->truesize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 	}
 
 	if (flags & MSG_MORE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nonagle = TCP_NAGLE_CORK;
+}
 
 	__tcp_push_pending_frames(sk, mss_now, nonagle);
 }
@@ -770,7 +831,9 @@ ssize_t tcp_splice_read(struct socket *sock, loff_t *ppos,
 	 * We can't seek on a socket input
 	 */
 	if (unlikely(*ppos))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESPIPE;
+}
 
 	ret = spliced = 0;
 
@@ -850,13 +913,16 @@ struct sk_buff *sk_stream_alloc_skb(struct sock *sk, int size, gfp_t gfp,
 	size = ALIGN(size, 4);
 
 	if (unlikely(tcp_under_memory_pressure(sk)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_mem_reclaim_partial(sk);
+}
 
 	skb = alloc_skb_fclone(size + sk->sk_prot->max_header, gfp);
 	if (likely(skb)) {
 		bool mem_scheduled;
 
 		if (force_schedule) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mem_scheduled = true;
 			sk_forced_mem_schedule(sk, skb->truesize);
 		} else {
@@ -871,22 +937,28 @@ struct sk_buff *sk_stream_alloc_skb(struct sock *sk, int size, gfp_t gfp,
 			skb->reserved_tailroom = skb->end - skb->tail - size;
 			return skb;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__kfree_skb(skb);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk->sk_prot->enter_memory_pressure(sk);
 		sk_stream_moderate_sndbuf(sk);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
 static unsigned int tcp_xmit_size_goal(struct sock *sk, u32 mss_now,
 				       int large_allowed)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	u32 new_size_goal, size_goal;
 
 	if (!large_allowed || !sk_can_gso(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return mss_now;
+}
 
 	/* Note : tcp_tso_autosize() will eventually split this later */
 	new_size_goal = sk->sk_gso_max_size - 1 - MAX_TCP_HEADER;
@@ -917,6 +989,7 @@ static int tcp_send_mss(struct sock *sk, int *size_goal, int flags)
 ssize_t do_tcp_sendpages(struct sock *sk, struct page *page, int offset,
 			 size_t size, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int mss_now, size_goal;
 	int err;
@@ -1050,6 +1123,7 @@ EXPORT_SYMBOL_GPL(do_tcp_sendpages);
 int tcp_sendpage_locked(struct sock *sk, struct page *page, int offset,
 			size_t size, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(sk->sk_route_caps & NETIF_F_SG) ||
 	    !sk_check_csum_caps(sk))
 		return sock_no_sendpage_locked(sk, page, offset, size, flags);
@@ -1086,17 +1160,22 @@ EXPORT_SYMBOL(tcp_sendpage);
 static int linear_payload_sz(bool first_skb)
 {
 	if (first_skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return SKB_WITH_OVERHEAD(2048 - MAX_TCP_HEADER);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int select_size(const struct sock *sk, bool sg, bool first_skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	int tmp = tp->mss_cache;
 
 	if (sg) {
 		if (sk_can_gso(sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tmp = linear_payload_sz(first_skb);
 		} else {
 			int pgbreak = SKB_MAX_HEAD(MAX_TCP_HEADER);
@@ -1113,6 +1192,7 @@ static int select_size(const struct sock *sk, bool sg, bool first_skb)
 void tcp_free_fastopen_req(struct tcp_sock *tp)
 {
 	if (tp->fastopen_req) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(tp->fastopen_req);
 		tp->fastopen_req = NULL;
 	}
@@ -1121,6 +1201,7 @@ void tcp_free_fastopen_req(struct tcp_sock *tp)
 static int tcp_sendmsg_fastopen(struct sock *sk, struct msghdr *msg,
 				int *copied, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct inet_sock *inet = inet_sk(sk);
 	struct sockaddr *uaddr = msg->msg_name;
@@ -1165,6 +1246,7 @@ static int tcp_sendmsg_fastopen(struct sock *sk, struct msghdr *msg,
 
 int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct ubuf_info *uarg = NULL;
 	struct sk_buff *skb;
@@ -1178,26 +1260,36 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 	flags = msg->msg_flags;
 
 	if (flags & MSG_ZEROCOPY && size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sk->sk_state != TCP_ESTABLISHED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
 			goto out_err;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb = tcp_send_head(sk) ? tcp_write_queue_tail(sk) : NULL;
 		uarg = sock_zerocopy_realloc(sk, size, skb_zcopy(skb));
 		if (!uarg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENOBUFS;
 			goto out_err;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(sk_check_csum_caps(sk) && sk->sk_route_caps & NETIF_F_SG))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uarg->zerocopy = 0;
+}
 	}
 
 	if (unlikely(flags & MSG_FASTOPEN || inet_sk(sk)->defer_connect)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = tcp_sendmsg_fastopen(sk, msg, &copied_syn, size);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err == -EINPROGRESS && copied_syn > 0)
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (err)
 			goto out_err;
 	}
@@ -1212,17 +1304,21 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 	 */
 	if (((1 << sk->sk_state) & ~(TCPF_ESTABLISHED | TCPF_CLOSE_WAIT)) &&
 	    !tcp_passive_fastopen(sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sk_stream_wait_connect(sk, &timeo);
 		if (err != 0)
 			goto do_error;
 	}
 
 	if (unlikely(tp->repair)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tp->repair_queue == TCP_RECV_QUEUE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copied = tcp_send_rcvq(sk, msg, size);
 			goto out_nopush;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		if (tp->repair_queue == TCP_NO_QUEUE)
 			goto out_err;
@@ -1232,8 +1328,10 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 
 	sockc.tsflags = sk->sk_tsflags;
 	if (msg->msg_controllen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sock_cmsg_send(sk, msg, &sockc);
 		if (unlikely(err)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
 			goto out_err;
 		}
@@ -1261,7 +1359,9 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 		skb = tcp_write_queue_tail(sk);
 		if (tcp_send_head(sk)) {
 			if (skb->ip_summed == CHECKSUM_NONE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				max = mss_now;
+}
 			copy = max - skb->len;
 		}
 
@@ -1276,9 +1376,11 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 				goto wait_for_sndbuf;
 
 			if (process_backlog && sk_flush_backlog(sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				process_backlog = false;
 				goto restart;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			first_skb = skb_queue_empty(&sk->sk_write_queue);
 			skb = sk_stream_alloc_skb(sk,
 						  select_size(sk, sg, first_skb),
@@ -1287,6 +1389,7 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 			if (!skb)
 				goto wait_for_memory;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			process_backlog = true;
 			/*
 			 * Check whether we can use HW checksum.
@@ -1303,7 +1406,9 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 			 * avoid wrong rtt estimation.
 			 */
 			if (tp->repair)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				TCP_SKB_CB(skb)->sacked |= TCPCB_REPAIRED;
+}
 		}
 
 		/* Try to append data to the end of skb. */
@@ -1328,9 +1433,11 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 			if (!skb_can_coalesce(skb, i, pfrag->page,
 					      pfrag->offset)) {
 				if (i >= sysctl_max_skb_frags || !sg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					tcp_mark_push(tp, skb);
 					goto new_segment;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				merge = false;
 			}
 
@@ -1356,11 +1463,15 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 			}
 			pfrag->offset += copy;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = skb_zerocopy_iter_stream(sk, skb, msg, copy, uarg);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (err == -EMSGSIZE || err == -EEXIST)
 				goto new_segment;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (err < 0)
 				goto do_error;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copy = err;
 		}
 
@@ -1374,17 +1485,22 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 		copied += copy;
 		if (!msg_data_left(msg)) {
 			if (unlikely(flags & MSG_EOR))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				TCP_SKB_CB(skb)->eor = 1;
+}
 			goto out;
 		}
 
 		if (skb->len < max || (flags & MSG_OOB) || unlikely(tp->repair))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (forced_push(tp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_mark_push(tp, skb);
 			__tcp_push_pending_frames(sk, mss_now, TCP_NAGLE_PUSH);
 		} else if (skb == tcp_send_head(sk))
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_push_one(sk, mss_now);
 		continue;
 
@@ -1392,13 +1508,17 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 		set_bit(SOCK_NOSPACE, &sk->sk_socket->flags);
 wait_for_memory:
 		if (copied)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_push(sk, flags & ~MSG_MORE, mss_now,
 				 TCP_NAGLE_PUSH, size_goal);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sk_stream_wait_memory(sk, &timeo);
 		if (err != 0)
 			goto do_error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mss_now = tcp_send_mss(sk, &size_goal, flags);
 	}
 
@@ -1413,6 +1533,7 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 
 do_fault:
 	if (!skb->len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_unlink_write_queue(skb, sk);
 		/* It is the one place in all of TCP, except connection
 		 * reset, where we can be unlinking the send_head.
@@ -1430,9 +1551,11 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 	/* make sure we wake any epoll edge trigger waiter */
 	if (unlikely(skb_queue_len(&sk->sk_write_queue) == 0 &&
 		     err == -EAGAIN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk->sk_write_space(sk);
 		tcp_chrono_stop(sk, TCP_CHRONO_SNDBUF_LIMITED);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 EXPORT_SYMBOL_GPL(tcp_sendmsg_locked);
@@ -1456,6 +1579,7 @@ EXPORT_SYMBOL(tcp_sendmsg);
 
 static int tcp_recv_urg(struct sock *sk, struct msghdr *msg, int len, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	/* No URG data to read. */
@@ -1505,6 +1629,7 @@ static int tcp_peek_sndq(struct sock *sk, struct msghdr *msg, int len)
 
 	/* XXX -- need to support SO_PEEK_OFF */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_queue_walk(&sk->sk_write_queue, skb) {
 		err = skb_copy_datagram_msg(skb, 0, msg, skb->len);
 		if (err)
@@ -1524,6 +1649,7 @@ static int tcp_peek_sndq(struct sock *sk, struct msghdr *msg, int len)
  */
 static void tcp_cleanup_rbuf(struct sock *sk, int copied)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	bool time_to_ack = false;
 
@@ -1534,6 +1660,7 @@ static void tcp_cleanup_rbuf(struct sock *sk, int copied)
 	     tp->copied_seq, TCP_SKB_CB(skb)->end_seq, tp->rcv_nxt);
 
 	if (inet_csk_ack_scheduled(sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const struct inet_connection_sock *icsk = inet_csk(sk);
 		   /* Delayed ACKs frequently hit locked sockets during bulk
 		    * receive. */
@@ -1573,7 +1700,9 @@ static void tcp_cleanup_rbuf(struct sock *sk, int copied)
 			 * "Lots" means "at least twice" here.
 			 */
 			if (new_window && new_window >= 2 * rcv_window_now)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				time_to_ack = true;
+}
 		}
 	}
 	if (time_to_ack)
@@ -1585,6 +1714,7 @@ static struct sk_buff *tcp_recv_skb(struct sock *sk, u32 seq, u32 *off)
 	struct sk_buff *skb;
 	u32 offset;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((skb = skb_peek(&sk->sk_receive_queue)) != NULL) {
 		offset = seq - TCP_SKB_CB(skb)->seq;
 		if (unlikely(TCP_SKB_CB(skb)->tcp_flags & TCPHDR_SYN)) {
@@ -1625,7 +1755,9 @@ int tcp_read_sock(struct sock *sk, read_descriptor_t *desc,
 	int copied = 0;
 
 	if (sk->sk_state == TCP_LISTEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTCONN;
+}
 	while ((skb = tcp_recv_skb(sk, seq, &offset)) != NULL) {
 		if (offset < skb->len) {
 			int used;
@@ -1689,6 +1821,7 @@ EXPORT_SYMBOL(tcp_read_sock);
 
 int tcp_peek_len(struct socket *sock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return tcp_inq(sock->sk);
 }
 EXPORT_SYMBOL(tcp_peek_len);
@@ -1696,6 +1829,7 @@ EXPORT_SYMBOL(tcp_peek_len);
 static void tcp_update_recv_tstamps(struct sk_buff *skb,
 				    struct scm_timestamping *tss)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (skb->tstamp)
 		tss->ts[0] = ktime_to_timespec(skb->tstamp);
 	else
@@ -1714,6 +1848,7 @@ void tcp_recv_timestamp(struct msghdr *msg, const struct sock *sk,
 	struct timeval tv;
 	bool has_timestamping = false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tss->ts[0].tv_sec || tss->ts[0].tv_nsec) {
 		if (sock_flag(sk, SOCK_RCVTSTAMP)) {
 			if (sock_flag(sk, SOCK_RCVTSTAMPNS)) {
@@ -1759,6 +1894,7 @@ void tcp_recv_timestamp(struct msghdr *msg, const struct sock *sk,
 int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 		int flags, int *addr_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int copied = 0;
 	u32 peek_seq;
@@ -1773,7 +1909,9 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 	bool has_tss = false;
 
 	if (unlikely(flags & MSG_ERRQUEUE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return inet_recv_error(sk, msg, len, addr_len);
+}
 
 	if (sk_can_busy_loop(sk) && skb_queue_empty(&sk->sk_receive_queue) &&
 	    (sk->sk_state == TCP_ESTABLISHED))
@@ -1792,13 +1930,16 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 		goto recv_urg;
 
 	if (unlikely(tp->repair)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EPERM;
 		if (!(flags & MSG_PEEK))
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tp->repair_queue == TCP_SEND_QUEUE)
 			goto recv_sndq;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		if (tp->repair_queue == TCP_NO_QUEUE)
 			goto out;
@@ -1808,6 +1949,7 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 
 	seq = &tp->copied_seq;
 	if (flags & MSG_PEEK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		peek_seq = tp->copied_seq;
 		seq = &peek_seq;
 	}
@@ -1819,9 +1961,12 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 
 		/* Are we at urgent data? Stop if we have read anything or have SIGURG pending. */
 		if (tp->urg_data && tp->urg_seq == *seq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (copied)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copied = timeo ? sock_intr_errno(timeo) : -EAGAIN;
 				break;
 			}
@@ -1831,6 +1976,7 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 
 		last = skb_peek_tail(&sk->sk_receive_queue);
 		skb_queue_walk(&sk->sk_receive_queue, skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			last = skb;
 			/* Now that we have two receive queues this
 			 * shouldn't happen.
@@ -1843,6 +1989,7 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 
 			offset = *seq - TCP_SKB_CB(skb)->seq;
 			if (unlikely(TCP_SKB_CB(skb)->tcp_flags & TCPHDR_SYN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pr_err_once("%s: found a SYN, please report !\n", __func__);
 				offset--;
 			}
@@ -1850,6 +1997,7 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 				goto found_ok_skb;
 			if (TCP_SKB_CB(skb)->tcp_flags & TCPHDR_FIN)
 				goto found_fin_ok;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			WARN(!(flags & MSG_PEEK),
 			     "recvmsg bug 2: copied %X seq %X rcvnxt %X fl %X\n",
 			     *seq, TCP_SKB_CB(skb)->seq, tp->rcv_nxt, flags);
@@ -1861,6 +2009,7 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 			break;
 
 		if (copied) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk->sk_err ||
 			    sk->sk_state == TCP_CLOSE ||
 			    (sk->sk_shutdown & RCV_SHUTDOWN) ||
@@ -1872,6 +2021,7 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 				break;
 
 			if (sk->sk_err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copied = sock_error(sk);
 				break;
 			}
@@ -1880,6 +2030,7 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 				break;
 
 			if (sk->sk_state == TCP_CLOSE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!sock_flag(sk, SOCK_DONE)) {
 					/* This occurs when user tries to read
 					 * from never connected socket.
@@ -1891,6 +2042,7 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 			}
 
 			if (!timeo) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copied = -EAGAIN;
 				break;
 			}
@@ -1913,9 +2065,11 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 
 		if ((flags & MSG_PEEK) &&
 		    (peek_seq - copied - urg_hole != tp->copied_seq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net_dbg_ratelimited("TCP(%s:%d): Application bug, race in MSG_PEEK\n",
 					    current->comm,
 					    task_pid_nr(current));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			peek_seq = tp->copied_seq;
 		}
 		continue;
@@ -1924,14 +2078,19 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 		/* Ok so how much can we use? */
 		used = skb->len - offset;
 		if (len < used)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			used = len;
+}
 
 		/* Do we have urgent data here? */
 		if (tp->urg_data) {
 			u32 urg_offset = tp->urg_seq - *seq;
 			if (urg_offset < used) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!urg_offset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (!sock_flag(sk, SOCK_URGINLINE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						++*seq;
 						urg_hole++;
 						offset++;
@@ -1940,7 +2099,9 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 							goto skip_copy;
 					}
 				} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					used = urg_offset;
+}
 			}
 		}
 
@@ -1949,7 +2110,9 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 			if (err) {
 				/* Exception. Bailout! */
 				if (!copied)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					copied = -EFAULT;
+}
 				break;
 			}
 		}
@@ -1962,6 +2125,7 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 
 skip_copy:
 		if (tp->urg_data && after(tp->copied_seq, tp->urg_seq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->urg_data = 0;
 			tcp_fast_path_check(sk);
 		}
@@ -1969,6 +2133,7 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 			continue;
 
 		if (TCP_SKB_CB(skb)->has_rxtstamp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_update_recv_tstamps(skb, &tss);
 			has_tss = true;
 		}
@@ -1991,7 +2156,9 @@ int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
 	 */
 
 	if (has_tss)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_recv_timestamp(msg, sk, &tss);
+}
 
 	/* Clean up data we have read: This will do ACK frames. */
 	tcp_cleanup_rbuf(sk, copied);
@@ -2025,7 +2192,9 @@ void tcp_set_state(struct sock *sk, int state)
 
 	case TCP_CLOSE:
 		if (oldstate == TCP_CLOSE_WAIT || oldstate == TCP_ESTABLISHED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			TCP_INC_STATS(sock_net(sk), TCP_MIB_ESTABRESETS);
+}
 
 		sk->sk_prot->unhash(sk);
 		if (inet_csk(sk)->icsk_bind_hash &&
@@ -2115,9 +2284,13 @@ bool tcp_check_oom(struct sock *sk, int shift)
 	out_of_socket_memory = tcp_out_of_memory(sk);
 
 	if (too_many_orphans)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_info_ratelimited("too many orphaned sockets\n");
+}
 	if (out_of_socket_memory)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_info_ratelimited("out of memory -- consider tuning tcp_mem\n");
+}
 	return too_many_orphans || out_of_socket_memory;
 }
 
@@ -2147,7 +2320,10 @@ void tcp_close(struct sock *sk, long timeout)
 		u32 len = TCP_SKB_CB(skb)->end_seq - TCP_SKB_CB(skb)->seq;
 
 		if (TCP_SKB_CB(skb)->tcp_flags & TCPHDR_FIN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			len--;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		data_was_unread += len;
 		__kfree_skb(skb);
 	}
@@ -2166,15 +2342,18 @@ void tcp_close(struct sock *sk, long timeout)
 	 * Note: timeout is always zero in such a case.
 	 */
 	if (unlikely(tcp_sk(sk)->repair)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk->sk_prot->disconnect(sk, 0);
 	} else if (data_was_unread) {
 		/* Unread data was tossed, zap the connection. */
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPABORTONCLOSE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_set_state(sk, TCP_CLOSE);
 		tcp_send_active_reset(sk, sk->sk_allocation);
 	} else if (sock_flag(sk, SOCK_LINGER) && !sk->sk_lingertime) {
 		/* Check zero linger _after_ checking for unread data. */
 		sk->sk_prot->disconnect(sk, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPABORTONDATA);
 	} else if (tcp_close_state(sk)) {
 		/* We FIN if the application ate all the data before
@@ -2248,19 +2427,25 @@ void tcp_close(struct sock *sk, long timeout)
 	 */
 
 	if (sk->sk_state == TCP_FIN_WAIT2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct tcp_sock *tp = tcp_sk(sk);
 		if (tp->linger2 < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_set_state(sk, TCP_CLOSE);
 			tcp_send_active_reset(sk, GFP_ATOMIC);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__NET_INC_STATS(sock_net(sk),
 					LINUX_MIB_TCPABORTONLINGER);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			const int tmo = tcp_fin_time(sk);
 
 			if (tmo > TCP_TIMEWAIT_LEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				inet_csk_reset_keepalive_timer(sk,
 						tmo - TCP_TIMEWAIT_LEN);
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_time_wait(sk, TCP_FIN_WAIT2, tmo);
 				goto out;
 			}
@@ -2269,12 +2454,15 @@ void tcp_close(struct sock *sk, long timeout)
 	if (sk->sk_state != TCP_CLOSE) {
 		sk_mem_reclaim(sk);
 		if (tcp_check_oom(sk, 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_set_state(sk, TCP_CLOSE);
 			tcp_send_active_reset(sk, GFP_ATOMIC);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__NET_INC_STATS(sock_net(sk),
 					LINUX_MIB_TCPABORTONMEMORY);
 		} else if (!check_net(sock_net(sk))) {
 			/* Not possible to send reset; just close */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_set_state(sk, TCP_CLOSE);
 		}
 	}
@@ -2286,7 +2474,9 @@ void tcp_close(struct sock *sk, long timeout)
 		 * finishes.
 		 */
 		if (req)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			reqsk_fastopen_remove(sk, req, false);
+}
 		inet_csk_destroy_sock(sk);
 	}
 	/* Otherwise, socket is reprieved until protocol close. */
@@ -2302,6 +2492,7 @@ EXPORT_SYMBOL(tcp_close);
 
 static inline bool tcp_need_reset(int state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (1 << state) &
 	       (TCPF_ESTABLISHED | TCPF_CLOSE_WAIT | TCPF_FIN_WAIT1 |
 		TCPF_FIN_WAIT2 | TCPF_SYN_RECV);
@@ -2309,6 +2500,7 @@ static inline bool tcp_need_reset(int state)
 
 int tcp_disconnect(struct sock *sk, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
@@ -2392,6 +2584,7 @@ EXPORT_SYMBOL(tcp_disconnect);
 
 static inline bool tcp_can_repair_sock(const struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ns_capable(sock_net(sk)->user_ns, CAP_NET_ADMIN) &&
 		(sk->sk_state != TCP_LISTEN);
 }
@@ -2401,7 +2594,9 @@ static int tcp_repair_set_window(struct tcp_sock *tp, char __user *optbuf, int l
 	struct tcp_repair_window opt;
 
 	if (!tp->repair)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	if (len != sizeof(opt))
 		return -EINVAL;
@@ -2431,6 +2626,7 @@ static int tcp_repair_set_window(struct tcp_sock *tp, char __user *optbuf, int l
 static int tcp_repair_options_est(struct sock *sk,
 		struct tcp_repair_opt __user *optbuf, unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct tcp_repair_opt opt;
 
@@ -2485,6 +2681,7 @@ static int tcp_repair_options_est(struct sock *sk,
 static int do_tcp_setsockopt(struct sock *sk, int level,
 		int optname, char __user *optval, unsigned int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct net *net = sock_net(sk);
@@ -2497,12 +2694,17 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 		char name[TCP_CA_NAME_MAX];
 
 		if (optlen < 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
 		val = strncpy_from_user(name, optval,
 					min_t(long, TCP_CA_NAME_MAX-1, optlen));
 		if (val < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		name[val] = 0;
 
 		lock_sock(sk);
@@ -2514,13 +2716,18 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 		char name[TCP_ULP_NAME_MAX];
 
 		if (optlen < 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
 		val = strncpy_from_user(name, optval,
 					min_t(long, TCP_ULP_NAME_MAX - 1,
 					      optlen));
 		if (val < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		name[val] = 0;
 
 		lock_sock(sk);
@@ -2534,10 +2741,14 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 	}
 
 	if (optlen < sizeof(int))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (get_user(val, (int __user *)optval))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	lock_sock(sk);
 
@@ -2548,9 +2759,11 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 		 * know which interface is going to be used
 		 */
 		if (val && (val < TCP_MIN_MSS || val > MAX_TCP_WINDOW)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->rx_opt.user_mss = val;
 		break;
 
@@ -2573,59 +2786,88 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 
 	case TCP_THIN_LINEAR_TIMEOUTS:
 		if (val < 0 || val > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
+}
 		else
 			tp->thin_lto = val;
 		break;
 
 	case TCP_THIN_DUPACK:
 		if (val < 0 || val > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
+}
 		break;
 
 	case TCP_REPAIR:
 		if (!tcp_can_repair_sock(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EPERM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (val == 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->repair = 1;
 			sk->sk_reuse = SK_FORCE_REUSE;
 			tp->repair_queue = TCP_NO_QUEUE;
 		} else if (val == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->repair = 0;
 			sk->sk_reuse = SK_NO_REUSE;
 			tcp_send_window_probe(sk);
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
+}
 
 		break;
 
 	case TCP_REPAIR_QUEUE:
 		if (!tp->repair)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EPERM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (val < TCP_QUEUES_NR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->repair_queue = val;
+}
 		else
 			err = -EINVAL;
 		break;
 
 	case TCP_QUEUE_SEQ:
 		if (sk->sk_state != TCP_CLOSE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EPERM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (tp->repair_queue == TCP_SEND_QUEUE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->write_seq = val;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (tp->repair_queue == TCP_RECV_QUEUE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->rcv_nxt = val;
+}
 		else
 			err = -EINVAL;
 		break;
 
 	case TCP_REPAIR_OPTIONS:
 		if (!tp->repair)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (sk->sk_state == TCP_ESTABLISHED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = tcp_repair_options_est(sk,
 					(struct tcp_repair_opt __user *)optval,
 					optlen);
+}
 		else
 			err = -EPERM;
 		break;
@@ -2643,63 +2885,87 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 		 * stronger than TCP_NODELAY.
 		 */
 		if (val) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->nonagle |= TCP_NAGLE_CORK;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->nonagle &= ~TCP_NAGLE_CORK;
 			if (tp->nonagle&TCP_NAGLE_OFF)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tp->nonagle |= TCP_NAGLE_PUSH;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_push_pending_frames(sk);
 		}
 		break;
 
 	case TCP_KEEPIDLE:
 		if (val < 1 || val > MAX_TCP_KEEPIDLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
+}
 		else {
 			tp->keepalive_time = val * HZ;
 			if (sock_flag(sk, SOCK_KEEPOPEN) &&
 			    !((1 << sk->sk_state) &
 			      (TCPF_CLOSE | TCPF_LISTEN))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				u32 elapsed = keepalive_time_elapsed(tp);
 				if (tp->keepalive_time > elapsed)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					elapsed = tp->keepalive_time - elapsed;
+}
 				else
 					elapsed = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				inet_csk_reset_keepalive_timer(sk, elapsed);
 			}
 		}
 		break;
 	case TCP_KEEPINTVL:
 		if (val < 1 || val > MAX_TCP_KEEPINTVL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
+}
 		else
 			tp->keepalive_intvl = val * HZ;
 		break;
 	case TCP_KEEPCNT:
 		if (val < 1 || val > MAX_TCP_KEEPCNT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
+}
 		else
 			tp->keepalive_probes = val;
 		break;
 	case TCP_SYNCNT:
 		if (val < 1 || val > MAX_TCP_SYNCNT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
+}
 		else
 			icsk->icsk_syn_retries = val;
 		break;
 
 	case TCP_SAVE_SYN:
 		if (val < 0 || val > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
+}
 		else
 			tp->save_syn = val;
 		break;
 
 	case TCP_LINGER2:
 		if (val < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->linger2 = -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (val > net->ipv4.sysctl_tcp_fin_timeout / HZ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->linger2 = 0;
+}
 		else
 			tp->linger2 = val * HZ;
 		break;
@@ -2713,28 +2979,38 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 
 	case TCP_WINDOW_CLAMP:
 		if (!val) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk->sk_state != TCP_CLOSE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EINVAL;
 				break;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->window_clamp = 0;
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->window_clamp = val < SOCK_MIN_RCVBUF / 2 ?
 						SOCK_MIN_RCVBUF / 2 : val;
+}
 		break;
 
 	case TCP_QUICKACK:
 		if (!val) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			icsk->icsk_ack.pingpong = 1;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			icsk->icsk_ack.pingpong = 0;
 			if ((1 << sk->sk_state) &
 			    (TCPF_ESTABLISHED | TCPF_CLOSE_WAIT) &&
 			    inet_csk_ack_scheduled(sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				icsk->icsk_ack.pending |= ICSK_ACK_PUSHED;
 				tcp_cleanup_rbuf(sk, 1);
 				if (!(val & 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					icsk->icsk_ack.pingpong = 1;
+}
 			}
 		}
 		break;
@@ -2751,7 +3027,9 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 		 * before giving up and aborting (ETIMEDOUT) a connection.
 		 */
 		if (val < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
+}
 		else
 			icsk->icsk_user_timeout = msecs_to_jiffies(val);
 		break;
@@ -2759,28 +3037,37 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 	case TCP_FASTOPEN:
 		if (val >= 0 && ((1 << sk->sk_state) & (TCPF_CLOSE |
 		    TCPF_LISTEN))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_fastopen_init_key_once(true);
 
 			fastopen_queue_tune(sk, val);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
 		}
 		break;
 	case TCP_FASTOPEN_CONNECT:
 		if (val > 1 || val < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
 		} else if (sysctl_tcp_fastopen & TFO_CLIENT_ENABLE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk->sk_state == TCP_CLOSE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tp->fastopen_connect = val;
+}
 			else
 				err = -EINVAL;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EOPNOTSUPP;
 		}
 		break;
 	case TCP_TIMESTAMP:
 		if (!tp->repair)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EPERM;
+}
 		else
 			tp->tsoffset = val - tcp_time_stamp_raw();
 		break;
@@ -2803,6 +3090,7 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 int tcp_setsockopt(struct sock *sk, int level, int optname, char __user *optval,
 		   unsigned int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 
 	if (level != SOL_TCP)
@@ -2816,6 +3104,7 @@ EXPORT_SYMBOL(tcp_setsockopt);
 int compat_tcp_setsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, unsigned int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (level != SOL_TCP)
 		return inet_csk_compat_setsockopt(sk, level, optname,
 						  optval, optlen);
@@ -2830,6 +3119,7 @@ static void tcp_get_info_chrono_stats(const struct tcp_sock *tp,
 	u64 stats[__TCP_CHRONO_MAX], total = 0;
 	enum tcp_chrono i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = TCP_CHRONO_BUSY; i < __TCP_CHRONO_MAX; ++i) {
 		stats[i] = tp->chrono_stat[i - 1];
 		if (i == tp->chrono_type)
@@ -2846,6 +3136,7 @@ static void tcp_get_info_chrono_stats(const struct tcp_sock *tp,
 /* Return information about state of tcp endpoint in API format. */
 void tcp_get_info(struct sock *sk, struct tcp_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk); /* iff sk_type == SOCK_STREAM */
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	u32 now;
@@ -2855,7 +3146,9 @@ void tcp_get_info(struct sock *sk, struct tcp_info *info)
 
 	memset(info, 0, sizeof(*info));
 	if (sk->sk_type != SOCK_STREAM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	info->tcpi_state = sk_state_load(sk);
 
@@ -2864,6 +3157,7 @@ void tcp_get_info(struct sock *sk, struct tcp_info *info)
 	rate64 = rate != ~0U ? rate : ~0ULL;
 	info->tcpi_pacing_rate = rate64;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rate = READ_ONCE(sk->sk_max_pacing_rate);
 	rate64 = rate != ~0U ? rate : ~0ULL;
 	info->tcpi_max_pacing_rate = rate64;
@@ -2881,6 +3175,7 @@ void tcp_get_info(struct sock *sk, struct tcp_info *info)
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	slow = lock_sock_fast(sk);
 
 	info->tcpi_ca_state = icsk->icsk_ca_state;
@@ -2889,22 +3184,39 @@ void tcp_get_info(struct sock *sk, struct tcp_info *info)
 	info->tcpi_backoff = icsk->icsk_backoff;
 
 	if (tp->rx_opt.tstamp_ok)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->tcpi_options |= TCPI_OPT_TIMESTAMPS;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tcp_is_sack(tp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->tcpi_options |= TCPI_OPT_SACK;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tp->rx_opt.wscale_ok) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->tcpi_options |= TCPI_OPT_WSCALE;
 		info->tcpi_snd_wscale = tp->rx_opt.snd_wscale;
 		info->tcpi_rcv_wscale = tp->rx_opt.rcv_wscale;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tp->ecn_flags & TCP_ECN_OK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->tcpi_options |= TCPI_OPT_ECN;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tp->ecn_flags & TCP_ECN_SEEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->tcpi_options |= TCPI_OPT_ECN_SEEN;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tp->syn_data_acked)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->tcpi_options |= TCPI_OPT_SYN_DATA;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	info->tcpi_rto = jiffies_to_usecs(icsk->icsk_rto);
 	info->tcpi_ato = jiffies_to_usecs(icsk->icsk_ack.ato);
 	info->tcpi_snd_mss = tp->mss_cache;
@@ -2936,6 +3248,7 @@ void tcp_get_info(struct sock *sk, struct tcp_info *info)
 
 	info->tcpi_bytes_acked = tp->bytes_acked;
 	info->tcpi_bytes_received = tp->bytes_received;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	info->tcpi_notsent_bytes = max_t(int, 0, tp->write_seq - tp->snd_nxt);
 	tcp_get_info_chrono_stats(tp, info);
 
@@ -2946,16 +3259,21 @@ void tcp_get_info(struct sock *sk, struct tcp_info *info)
 	info->tcpi_data_segs_in = tp->data_segs_in;
 	info->tcpi_data_segs_out = tp->data_segs_out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	info->tcpi_delivery_rate_app_limited = tp->rate_app_limited ? 1 : 0;
 	rate64 = tcp_compute_delivery_rate(tp);
 	if (rate64)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->tcpi_delivery_rate = rate64;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unlock_sock_fast(sk, slow);
 }
 EXPORT_SYMBOL_GPL(tcp_get_info);
 
 struct sk_buff *tcp_get_timestamping_opt_stats(const struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *stats;
 	struct tcp_info info;
@@ -2999,26 +3317,37 @@ struct sk_buff *tcp_get_timestamping_opt_stats(const struct sock *sk)
 static int do_tcp_getsockopt(struct sock *sk, int level,
 		int optname, char __user *optval, int __user *optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct net *net = sock_net(sk);
 	int val, len;
 
 	if (get_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	len = min_t(unsigned int, len, sizeof(int));
 
 	if (len < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	switch (optname) {
 	case TCP_MAXSEG:
 		val = tp->mss_cache;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!val && ((1 << sk->sk_state) & (TCPF_CLOSE | TCPF_LISTEN)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = tp->rx_opt.user_mss;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tp->repair)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = tp->rx_opt.mss_clamp;
+}
 		break;
 	case TCP_NODELAY:
 		val = !!(tp->nonagle&TCP_NAGLE_OFF);
@@ -3041,7 +3370,9 @@ static int do_tcp_getsockopt(struct sock *sk, int level,
 	case TCP_LINGER2:
 		val = tp->linger2;
 		if (val >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = (val ? : net->ipv4.sysctl_tcp_fin_timeout) / HZ;
+}
 		break;
 	case TCP_DEFER_ACCEPT:
 		val = retrans_to_secs(icsk->icsk_accept_queue.rskq_defer_accept,
@@ -3054,15 +3385,22 @@ static int do_tcp_getsockopt(struct sock *sk, int level,
 		struct tcp_info info;
 
 		if (get_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
 		tcp_get_info(sk, &info);
 
 		len = min_t(unsigned int, len, sizeof(info));
 		if (put_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 		if (copy_to_user(optval, &info, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 	case TCP_CC_INFO: {
@@ -3072,17 +3410,31 @@ static int do_tcp_getsockopt(struct sock *sk, int level,
 		int attr;
 
 		if (get_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ca_ops = icsk->icsk_ca_ops;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ca_ops && ca_ops->get_info)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sz = ca_ops->get_info(sk, ~0U, &attr, &info);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = min_t(unsigned int, len, sz);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (put_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_to_user(optval, &info, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 	case TCP_QUICKACK:
@@ -3091,27 +3443,51 @@ static int do_tcp_getsockopt(struct sock *sk, int level,
 
 	case TCP_CONGESTION:
 		if (get_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = min_t(unsigned int, len, TCP_CA_NAME_MAX);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (put_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_to_user(optval, icsk->icsk_ca_ops->name, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 
 	case TCP_ULP:
 		if (get_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = min_t(unsigned int, len, TCP_ULP_NAME_MAX);
 		if (!icsk->icsk_ulp_ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (put_user(0, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (put_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_to_user(optval, icsk->icsk_ulp_ops->name, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 
 	case TCP_THIN_LINEAR_TIMEOUTS:
@@ -3128,7 +3504,9 @@ static int do_tcp_getsockopt(struct sock *sk, int level,
 
 	case TCP_REPAIR_QUEUE:
 		if (tp->repair)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = tp->repair_queue;
+}
 		else
 			return -EINVAL;
 		break;
@@ -3137,14 +3515,23 @@ static int do_tcp_getsockopt(struct sock *sk, int level,
 		struct tcp_repair_window opt;
 
 		if (get_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (len != sizeof(opt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!tp->repair)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opt.snd_wl1	= tp->snd_wl1;
 		opt.snd_wnd	= tp->snd_wnd;
 		opt.max_window	= tp->max_window;
@@ -3152,14 +3539,22 @@ static int do_tcp_getsockopt(struct sock *sk, int level,
 		opt.rcv_wup	= tp->rcv_wup;
 
 		if (copy_to_user(optval, &opt, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 	case TCP_QUEUE_SEQ:
 		if (tp->repair_queue == TCP_SEND_QUEUE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = tp->write_seq;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (tp->repair_queue == TCP_RECV_QUEUE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = tp->rcv_nxt;
+}
 		else
 			return -EINVAL;
 		break;
@@ -3187,35 +3582,53 @@ static int do_tcp_getsockopt(struct sock *sk, int level,
 		break;
 	case TCP_SAVED_SYN: {
 		if (get_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lock_sock(sk);
 		if (tp->saved_syn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (len < tp->saved_syn[0]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (put_user(tp->saved_syn[0], optlen)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					release_sock(sk);
 					return -EFAULT;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				release_sock(sk);
 				return -EINVAL;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			len = tp->saved_syn[0];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (put_user(len, optlen)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				release_sock(sk);
 				return -EFAULT;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (copy_to_user(optval, tp->saved_syn + 1, len)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				release_sock(sk);
 				return -EFAULT;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_saved_syn_free(tp);
 			release_sock(sk);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			release_sock(sk);
 			len = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (put_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EFAULT;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 	default:
@@ -3223,15 +3636,21 @@ static int do_tcp_getsockopt(struct sock *sk, int level,
 	}
 
 	if (put_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	if (copy_to_user(optval, &val, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 int tcp_getsockopt(struct sock *sk, int level, int optname, char __user *optval,
 		   int __user *optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
 	if (level != SOL_TCP)
@@ -3245,6 +3664,7 @@ EXPORT_SYMBOL(tcp_getsockopt);
 int compat_tcp_getsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int __user *optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (level != SOL_TCP)
 		return inet_csk_compat_getsockopt(sk, level, optname,
 						  optval, optlen);
@@ -3265,7 +3685,9 @@ static void __tcp_alloc_md5sig_pool(void)
 
 	hash = crypto_alloc_ahash("md5", 0, CRYPTO_ALG_ASYNC);
 	if (IS_ERR(hash))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for_each_possible_cpu(cpu) {
 		void *scratch = per_cpu(tcp_md5sig_pool, cpu).scratch;
@@ -3300,6 +3722,7 @@ static void __tcp_alloc_md5sig_pool(void)
 
 bool tcp_alloc_md5sig_pool(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(!tcp_md5sig_pool_populated)) {
 		mutex_lock(&tcp_md5sig_mutex);
 
@@ -3322,6 +3745,7 @@ EXPORT_SYMBOL(tcp_alloc_md5sig_pool);
  */
 struct tcp_md5sig_pool *tcp_get_md5sig_pool(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_bh_disable();
 
 	if (tcp_md5sig_pool_populated) {
@@ -3341,6 +3765,7 @@ int tcp_md5_hash_skb_data(struct tcp_md5sig_pool *hp,
 	const struct tcphdr *tp = tcp_hdr(skb);
 	struct ahash_request *req = hp->md5_req;
 	unsigned int i;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const unsigned int head_data_len = skb_headlen(skb) > header_len ?
 					   skb_headlen(skb) - header_len : 0;
 	const struct skb_shared_info *shi = skb_shinfo(skb);
@@ -3395,7 +3820,9 @@ void tcp_done(struct sock *sk)
 	tcp_set_state(sk, TCP_CLOSE);
 	tcp_clear_xmit_timers(sk);
 	if (req)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		reqsk_fastopen_remove(sk, req, false);
+}
 
 	sk->sk_shutdown = SHUTDOWN_MASK;
 
@@ -3408,6 +3835,7 @@ EXPORT_SYMBOL_GPL(tcp_done);
 
 int tcp_abort(struct sock *sk, int err)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!sk_fullsock(sk)) {
 		if (sk->sk_state == TCP_NEW_SYN_RECV) {
 			struct request_sock *req = inet_reqsk(sk);
@@ -3458,7 +3886,9 @@ static int __init set_thash_entries(char *str)
 	ssize_t ret;
 
 	if (!str)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = kstrtoul(str, 0, &thash_entries);
 	if (ret)
@@ -3484,6 +3914,7 @@ void __init tcp_init(void)
 	unsigned long limit;
 	unsigned int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(sizeof(struct tcp_skb_cb) >
 		     FIELD_SIZEOF(struct sk_buff, cb));
 
@@ -3514,7 +3945,9 @@ void __init tcp_init(void)
 		INIT_HLIST_NULLS_HEAD(&tcp_hashinfo.ehash[i].chain, i);
 
 	if (inet_ehash_locks_alloc(&tcp_hashinfo))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("TCP: failed to alloc ehash_locks");
+}
 	tcp_hashinfo.bhash =
 		alloc_large_system_hash("TCP bind",
 					sizeof(struct inet_bind_hashbucket),
diff --git a/net/ipv4/tcp_cong.c b/net/ipv4/tcp_cong.c
index 2f26124..9a4739b 100644
--- a/net/ipv4/tcp_cong.c
+++ b/net/ipv4/tcp_cong.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Pluggable TCP congestion control support and newReno
  * congestion control.
@@ -26,15 +28,19 @@ static struct tcp_congestion_ops *tcp_ca_find(const char *name)
 
 	list_for_each_entry_rcu(e, &tcp_cong_list, list) {
 		if (strcmp(e->name, name) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return e;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
 /* Must be called with rcu lock held */
 static const struct tcp_congestion_ops *__tcp_ca_find_autoload(const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_congestion_ops *ca = tcp_ca_find(name);
 #ifdef CONFIG_MODULES
 	if (!ca && capable(CAP_NET_ADMIN)) {
@@ -54,9 +60,12 @@ struct tcp_congestion_ops *tcp_ca_find_key(u32 key)
 
 	list_for_each_entry_rcu(e, &tcp_cong_list, list) {
 		if (e->key == key)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return e;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -71,6 +80,7 @@ int tcp_register_congestion_control(struct tcp_congestion_ops *ca)
 	/* all algorithms must implement these */
 	if (!ca->ssthresh || !ca->undo_cwnd ||
 	    !(ca->cong_avoid || ca->cong_control)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s does not implement required ops\n", ca->name);
 		return -EINVAL;
 	}
@@ -79,13 +89,16 @@ int tcp_register_congestion_control(struct tcp_congestion_ops *ca)
 
 	spin_lock(&tcp_cong_list_lock);
 	if (ca->key == TCP_CA_UNSPEC || tcp_ca_find_key(ca->key)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_notice("%s already registered or non-unique key\n",
 			  ca->name);
 		ret = -EEXIST;
 	} else {
 		list_add_tail_rcu(&ca->list, &tcp_cong_list);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("%s registered\n", ca->name);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&tcp_cong_list_lock);
 
 	return ret;
@@ -100,6 +113,7 @@ EXPORT_SYMBOL_GPL(tcp_register_congestion_control);
  */
 void tcp_unregister_congestion_control(struct tcp_congestion_ops *ca)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&tcp_cong_list_lock);
 	list_del_rcu(&ca->list);
 	spin_unlock(&tcp_cong_list_lock);
@@ -120,6 +134,7 @@ u32 tcp_ca_get_key_by_name(const char *name, bool *ecn_ca)
 	const struct tcp_congestion_ops *ca;
 	u32 key = TCP_CA_UNSPEC;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	rcu_read_lock();
@@ -142,8 +157,10 @@ char *tcp_ca_get_name_by_key(u32 key, char *buffer)
 	rcu_read_lock();
 	ca = tcp_ca_find_key(key);
 	if (ca)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = strncpy(buffer, ca->name,
 			      TCP_CA_NAME_MAX);
+}
 	rcu_read_unlock();
 
 	return ret;
@@ -153,6 +170,7 @@ EXPORT_SYMBOL_GPL(tcp_ca_get_name_by_key);
 /* Assign choice of congestion control. */
 void tcp_assign_congestion_control(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_congestion_ops *ca;
 
@@ -171,20 +189,25 @@ void tcp_assign_congestion_control(struct sock *sk)
 	memset(icsk->icsk_ca_priv, 0, sizeof(icsk->icsk_ca_priv));
 
 	if (ca->flags & TCP_CONG_NEEDS_ECN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INET_ECN_xmit(sk);
+}
 	else
 		INET_ECN_dontxmit(sk);
 }
 
 void tcp_init_congestion_control(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 
 	tcp_sk(sk)->prior_ssthresh = 0;
 	if (icsk->icsk_ca_ops->init)
 		icsk->icsk_ca_ops->init(sk);
 	if (tcp_ca_needs_ecn(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INET_ECN_xmit(sk);
+}
 	else
 		INET_ECN_dontxmit(sk);
 }
@@ -192,6 +215,7 @@ void tcp_init_congestion_control(struct sock *sk)
 static void tcp_reinit_congestion_control(struct sock *sk,
 					  const struct tcp_congestion_ops *ca)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
 	tcp_cleanup_congestion_control(sk);
@@ -206,10 +230,13 @@ static void tcp_reinit_congestion_control(struct sock *sk,
 /* Manage refcounts on socket close. */
 void tcp_cleanup_congestion_control(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
 	if (icsk->icsk_ca_ops->release)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icsk->icsk_ca_ops->release(sk);
+}
 	module_put(icsk->icsk_ca_ops->owner);
 }
 
@@ -223,6 +250,7 @@ int tcp_set_default_congestion_control(const char *name)
 	ca = tcp_ca_find(name);
 #ifdef CONFIG_MODULES
 	if (!ca && capable(CAP_NET_ADMIN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&tcp_cong_list_lock);
 
 		request_module("tcp_%s", name);
@@ -236,6 +264,7 @@ int tcp_set_default_congestion_control(const char *name)
 		list_move(&ca->list, &tcp_cong_list);
 		ret = 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&tcp_cong_list_lock);
 
 	return ret;
@@ -255,6 +284,7 @@ void tcp_get_available_congestion_control(char *buf, size_t maxlen)
 	size_t offs = 0;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(ca, &tcp_cong_list, list) {
 		offs += snprintf(buf + offs, maxlen - offs,
 				 "%s%s",
@@ -284,6 +314,7 @@ void tcp_get_allowed_congestion_control(char *buf, size_t maxlen)
 
 	*buf = '\0';
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(ca, &tcp_cong_list, list) {
 		if (!(ca->flags & TCP_CONG_NON_RESTRICTED))
 			continue;
@@ -303,7 +334,9 @@ int tcp_set_allowed_congestion_control(char *val)
 
 	saved_clone = clone = kstrdup(val, GFP_USER);
 	if (!clone)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	spin_lock(&tcp_cong_list_lock);
 	/* pass 1 check for bad entries */
@@ -340,6 +373,7 @@ int tcp_set_allowed_congestion_control(char *val)
  */
 int tcp_set_congestion_control(struct sock *sk, const char *name, bool load, bool reinit)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	const struct tcp_congestion_ops *ca;
 	int err = 0;
@@ -396,6 +430,7 @@ int tcp_set_congestion_control(struct sock *sk, const char *name, bool load, boo
  */
 u32 tcp_slow_start(struct tcp_sock *tp, u32 acked)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 cwnd = min(tp->snd_cwnd + acked, tp->snd_ssthresh);
 
 	acked -= cwnd - tp->snd_cwnd;
@@ -436,6 +471,7 @@ EXPORT_SYMBOL_GPL(tcp_cong_avoid_ai);
  */
 void tcp_reno_cong_avoid(struct sock *sk, u32 ack, u32 acked)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (!tcp_is_cwnd_limited(sk))
@@ -455,6 +491,7 @@ EXPORT_SYMBOL_GPL(tcp_reno_cong_avoid);
 /* Slow start threshold is half the congestion window (min 2) */
 u32 tcp_reno_ssthresh(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 
 	return max(tp->snd_cwnd >> 1U, 2U);
@@ -463,6 +500,7 @@ EXPORT_SYMBOL_GPL(tcp_reno_ssthresh);
 
 u32 tcp_reno_undo_cwnd(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 
 	return max(tp->snd_cwnd, tp->prior_cwnd);
diff --git a/net/ipv4/tcp_cubic.c b/net/ipv4/tcp_cubic.c
index 78bfadf..deb4c12 100644
--- a/net/ipv4/tcp_cubic.c
+++ b/net/ipv4/tcp_cubic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * TCP CUBIC: Binary Increase Congestion control for TCP v2.3
  * Home page:
@@ -127,6 +129,7 @@ static inline u32 bictcp_clock(void)
 
 static inline void bictcp_hystart_reset(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct bictcp *ca = inet_csk_ca(sk);
 
@@ -138,6 +141,7 @@ static inline void bictcp_hystart_reset(struct sock *sk)
 
 static void bictcp_init(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bictcp *ca = inet_csk_ca(sk);
 
 	bictcp_reset(ca);
@@ -146,12 +150,15 @@ static void bictcp_init(struct sock *sk)
 		bictcp_hystart_reset(sk);
 
 	if (!hystart && initial_ssthresh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_sk(sk)->snd_ssthresh = initial_ssthresh;
 }
+}
 
 static void bictcp_cwnd_event(struct sock *sk, enum tcp_ca_event event)
 {
 	if (event == CA_EVENT_TX_START) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct bictcp *ca = inet_csk_ca(sk);
 		u32 now = tcp_jiffies32;
 		s32 delta;
@@ -162,10 +169,14 @@ static void bictcp_cwnd_event(struct sock *sk, enum tcp_ca_event event)
 		 * Shift epoch_start to keep cwnd growth to cubic curve.
 		 */
 		if (ca->epoch_start && delta > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ca->epoch_start += delta;
 			if (after(ca->epoch_start, now))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ca->epoch_start = now;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 }
@@ -333,25 +344,37 @@ static inline void bictcp_update(struct bictcp *ca, u32 cwnd, u32 acked)
 
 static void bictcp_cong_avoid(struct sock *sk, u32 ack, u32 acked)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct bictcp *ca = inet_csk_ca(sk);
 
 	if (!tcp_is_cwnd_limited(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tcp_in_slow_start(tp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (hystart && after(ack, ca->end_seq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bictcp_hystart_reset(sk);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acked = tcp_slow_start(tp, acked);
 		if (!acked)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bictcp_update(ca, tp->snd_cwnd, acked);
 	tcp_cong_avoid_ai(tp, ca->cnt, acked);
 }
 
 static u32 bictcp_recalc_ssthresh(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	struct bictcp *ca = inet_csk_ca(sk);
 
@@ -359,8 +382,10 @@ static u32 bictcp_recalc_ssthresh(struct sock *sk)
 
 	/* Wmax and fast convergence */
 	if (tp->snd_cwnd < ca->last_max_cwnd && fast_convergence)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ca->last_max_cwnd = (tp->snd_cwnd * (BICTCP_BETA_SCALE + beta))
 			/ (2 * BICTCP_BETA_SCALE);
+}
 	else
 		ca->last_max_cwnd = tp->snd_cwnd;
 
@@ -377,6 +402,7 @@ static void bictcp_state(struct sock *sk, u8 new_state)
 
 static void hystart_update(struct sock *sk, u32 delay)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct bictcp *ca = inet_csk_ca(sk);
 
@@ -428,21 +454,28 @@ static void hystart_update(struct sock *sk, u32 delay)
  */
 static void bictcp_acked(struct sock *sk, const struct ack_sample *sample)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	struct bictcp *ca = inet_csk_ca(sk);
 	u32 delay;
 
 	/* Some calls are for duplicates without timetamps */
 	if (sample->rtt_us < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Discard delay samples right after fast recovery */
 	if (ca->epoch_start && (s32)(tcp_jiffies32 - ca->epoch_start) < HZ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	delay = (sample->rtt_us << 3) / USEC_PER_MSEC;
 	if (delay == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		delay = 1;
+}
 
 	/* first time call or link delay decreases */
 	if (ca->delay_min == 0 || ca->delay_min > delay)
@@ -468,6 +501,7 @@ static struct tcp_congestion_ops cubictcp __read_mostly = {
 
 static int __init cubictcp_register(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(sizeof(struct bictcp) > ICSK_CA_PRIV_SIZE);
 
 	/* Precompute a bunch of the scaling factors that are used per-packet
@@ -503,6 +537,7 @@ static int __init cubictcp_register(void)
 
 static void __exit cubictcp_unregister(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_unregister_congestion_control(&cubictcp);
 }
 
diff --git a/net/ipv4/tcp_diag.c b/net/ipv4/tcp_diag.c
index abbf0ed..deb01d2 100644
--- a/net/ipv4/tcp_diag.c
+++ b/net/ipv4/tcp_diag.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * tcp_diag.c	Module for monitoring TCP transport protocols sockets.
  *
diff --git a/net/ipv4/tcp_fastopen.c b/net/ipv4/tcp_fastopen.c
index fbbeda6..e914023 100644
--- a/net/ipv4/tcp_fastopen.c
+++ b/net/ipv4/tcp_fastopen.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/crypto.h>
 #include <linux/err.h>
@@ -45,7 +47,9 @@ int tcp_fastopen_reset_cipher(void *key, unsigned int len)
 
 	ctx = kmalloc(sizeof(*ctx), GFP_KERNEL);
 	if (!ctx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	ctx->tfm = crypto_alloc_cipher("aes", 0, 0);
 
 	if (IS_ERR(ctx->tfm)) {
@@ -81,6 +85,7 @@ static bool __tcp_fastopen_cookie_gen(const void *path,
 	bool ok = false;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ctx = rcu_dereference(tcp_fastopen_ctx);
 	if (ctx) {
 		crypto_cipher_encrypt_one(ctx->tfm, foc->val, path);
@@ -101,6 +106,7 @@ static bool tcp_fastopen_cookie_gen(struct request_sock *req,
 				    struct sk_buff *syn,
 				    struct tcp_fastopen_cookie *foc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (req->rsk_ops->family == AF_INET) {
 		const struct iphdr *iph = ip_hdr(syn);
 
@@ -132,6 +138,7 @@ static bool tcp_fastopen_cookie_gen(struct request_sock *req,
  */
 void tcp_fastopen_add_skb(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (TCP_SKB_CB(skb)->end_seq == tp->rcv_nxt)
@@ -186,7 +193,9 @@ static struct sock *tcp_fastopen_create_child(struct sock *sk,
 	child = inet_csk(sk)->icsk_af_ops->syn_recv_sock(sk, skb, req, NULL,
 							 NULL, &own_req);
 	if (!child)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	spin_lock(&queue->fastopenq.lock);
 	queue->fastopenq.qlen++;
@@ -252,7 +261,9 @@ static bool tcp_fastopen_queue_check(struct sock *sk)
 	 */
 	fastopenq = &inet_csk(sk)->icsk_accept_queue.fastopenq;
 	if (fastopenq->max_qlen == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	if (fastopenq->qlen >= fastopenq->max_qlen) {
 		struct request_sock *req1;
@@ -285,7 +296,9 @@ struct sock *tcp_try_fastopen(struct sock *sk, struct sk_buff *skb,
 	struct sock *child;
 
 	if (foc->len == 0) /* Client requests a cookie */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPFASTOPENCOOKIEREQD);
+}
 
 	if (!((sysctl_tcp_fastopen & TFO_SERVER_ENABLE) &&
 	      (syn_data || foc->len >= 0) &&
@@ -294,9 +307,11 @@ struct sock *tcp_try_fastopen(struct sock *sk, struct sk_buff *skb,
 		return NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (syn_data && (sysctl_tcp_fastopen & TFO_SERVER_COOKIE_NOT_REQD))
 		goto fastopen;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (foc->len >= 0 &&  /* Client presents or requests a cookie */
 	    tcp_fastopen_cookie_gen(req, skb, &valid_foc) &&
 	    foc->len == TCP_FASTOPEN_COOKIE_SIZE &&
@@ -313,15 +328,21 @@ struct sock *tcp_try_fastopen(struct sock *sk, struct sk_buff *skb,
 fastopen:
 		child = tcp_fastopen_create_child(sk, skb, req);
 		if (child) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			foc->len = -1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NET_INC_STATS(sock_net(sk),
 				      LINUX_MIB_TCPFASTOPENPASSIVE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return child;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPFASTOPENPASSIVEFAIL);
 	} else if (foc->len > 0) /* Client presents an invalid cookie */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPFASTOPENPASSIVEFAIL);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	valid_foc.exp = foc->exp;
 	*foc = valid_foc;
 	return NULL;
@@ -369,7 +390,9 @@ bool tcp_fastopen_defer_connect(struct sock *sk, int *err)
 	u16 mss;
 
 	if (tp->fastopen_connect && !tp->fastopen_req) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tcp_fastopen_cookie_check(sk, &mss, &cookie)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_sk(sk)->defer_connect = 1;
 			return true;
 		}
@@ -380,10 +403,13 @@ bool tcp_fastopen_defer_connect(struct sock *sk, int *err)
 		tp->fastopen_req = kzalloc(sizeof(*tp->fastopen_req),
 					   sk->sk_allocation);
 		if (tp->fastopen_req)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->fastopen_req->cookie = cookie;
+}
 		else
 			*err = -ENOBUFS;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 EXPORT_SYMBOL(tcp_fastopen_defer_connect);
@@ -412,6 +438,7 @@ static unsigned long tfo_active_disable_stamp __read_mostly;
  */
 void tcp_fastopen_active_disable(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_inc(&tfo_active_disable_times);
 	tfo_active_disable_stamp = jiffies;
 	NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPFASTOPENBLACKHOLE);
@@ -420,6 +447,7 @@ void tcp_fastopen_active_disable(struct sock *sk)
 /* Reset tfo_active_disable_times to 0 */
 void tcp_fastopen_active_timeout_reset(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&tfo_active_disable_times, 0);
 }
 
@@ -429,6 +457,7 @@ void tcp_fastopen_active_timeout_reset(void)
  */
 bool tcp_fastopen_active_should_disable(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int tfo_da_times = atomic_read(&tfo_active_disable_times);
 	int multiplier;
 	unsigned long timeout;
@@ -457,28 +486,41 @@ bool tcp_fastopen_active_should_disable(struct sock *sk)
  */
 void tcp_fastopen_active_disable_ofo_check(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct rb_node *p;
 	struct sk_buff *skb;
 	struct dst_entry *dst;
 
 	if (!tp->syn_fastopen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tp->data_segs_in) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = rb_first(&tp->out_of_order_queue);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (p && !rb_next(p)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb = rb_entry(p, struct sk_buff, rbnode);
 			if (TCP_SKB_CB(skb)->tcp_flags & TCPHDR_FIN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_fastopen_active_disable(sk);
 				return;
 			}
 		}
 	} else if (tp->syn_fastopen_ch &&
 		   atomic_read(&tfo_active_disable_times)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst = sk_dst_get(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(dst && dst->dev && (dst->dev->flags & IFF_LOOPBACK)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_fastopen_active_timeout_reset();
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_release(dst);
 	}
 }
diff --git a/net/ipv4/tcp_input.c b/net/ipv4/tcp_input.c
index d9d215e..b83768b 100644
--- a/net/ipv4/tcp_input.c
+++ b/net/ipv4/tcp_input.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
@@ -137,6 +139,7 @@ static void tcp_gro_dev_warn(struct sock *sk, const struct sk_buff *skb,
 
 		rcu_read_lock();
 		dev = dev_get_by_index_rcu(sock_net(sk), skb->skb_iif);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!dev || len >= dev->mtu)
 			pr_warn("%s: Driver has suspect GRO implementation, TCP performance may be compromised.\n",
 				dev ? dev->name : "Unknown driver");
@@ -149,6 +152,7 @@ static void tcp_gro_dev_warn(struct sock *sk, const struct sk_buff *skb,
  */
 static void tcp_measure_rcv_mss(struct sock *sk, const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	const unsigned int lss = icsk->icsk_ack.last_seg_size;
 	unsigned int len;
@@ -188,6 +192,7 @@ static void tcp_measure_rcv_mss(struct sock *sk, const struct sk_buff *skb)
 			len -= tcp_sk(sk)->tcp_header_len;
 			icsk->icsk_ack.last_seg_size = len;
 			if (len == lss) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				icsk->icsk_ack.rcv_mss = len;
 				return;
 			}
@@ -200,17 +205,21 @@ static void tcp_measure_rcv_mss(struct sock *sk, const struct sk_buff *skb)
 
 static void tcp_incr_quickack(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	unsigned int quickacks = tcp_sk(sk)->rcv_wnd / (2 * icsk->icsk_ack.rcv_mss);
 
 	if (quickacks == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		quickacks = 2;
+}
 	if (quickacks > icsk->icsk_ack.quick)
 		icsk->icsk_ack.quick = min(quickacks, TCP_MAX_QUICKACKS);
 }
 
 static void tcp_enter_quickack_mode(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	tcp_incr_quickack(sk);
 	icsk->icsk_ack.pingpong = 0;
@@ -223,6 +232,7 @@ static void tcp_enter_quickack_mode(struct sock *sk)
 
 static bool tcp_in_quickack_mode(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	const struct dst_entry *dst = __sk_dst_get(sk);
 
@@ -233,22 +243,28 @@ static bool tcp_in_quickack_mode(struct sock *sk)
 static void tcp_ecn_queue_cwr(struct tcp_sock *tp)
 {
 	if (tp->ecn_flags & TCP_ECN_OK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->ecn_flags |= TCP_ECN_QUEUE_CWR;
 }
+}
 
 static void tcp_ecn_accept_cwr(struct tcp_sock *tp, const struct sk_buff *skb)
 {
 	if (tcp_hdr(skb)->cwr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->ecn_flags &= ~TCP_ECN_DEMAND_CWR;
 }
+}
 
 static void tcp_ecn_withdraw_cwr(struct tcp_sock *tp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tp->ecn_flags &= ~TCP_ECN_DEMAND_CWR;
 }
 
 static void __tcp_ecn_check_ce(struct tcp_sock *tp, const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (TCP_SKB_CB(skb)->ip_dsfield & INET_ECN_MASK) {
 	case INET_ECN_NOT_ECT:
 		/* Funny extension: if ECT is not set on a segment,
@@ -280,17 +296,22 @@ static void __tcp_ecn_check_ce(struct tcp_sock *tp, const struct sk_buff *skb)
 static void tcp_ecn_check_ce(struct tcp_sock *tp, const struct sk_buff *skb)
 {
 	if (tp->ecn_flags & TCP_ECN_OK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__tcp_ecn_check_ce(tp, skb);
 }
+}
 
 static void tcp_ecn_rcv_synack(struct tcp_sock *tp, const struct tcphdr *th)
 {
 	if ((tp->ecn_flags & TCP_ECN_OK) && (!th->ece || th->cwr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->ecn_flags &= ~TCP_ECN_OK;
 }
+}
 
 static void tcp_ecn_rcv_syn(struct tcp_sock *tp, const struct tcphdr *th)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((tp->ecn_flags & TCP_ECN_OK) && (!th->ece || !th->cwr))
 		tp->ecn_flags &= ~TCP_ECN_OK;
 }
@@ -298,7 +319,9 @@ static void tcp_ecn_rcv_syn(struct tcp_sock *tp, const struct tcphdr *th)
 static bool tcp_ecn_rcv_ecn_echo(const struct tcp_sock *tp, const struct tcphdr *th)
 {
 	if (th->ece && !th->syn && (tp->ecn_flags & TCP_ECN_OK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 	return false;
 }
 
@@ -309,6 +332,7 @@ static bool tcp_ecn_rcv_ecn_echo(const struct tcp_sock *tp, const struct tcphdr
 
 static void tcp_sndbuf_expand(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	const struct tcp_congestion_ops *ca_ops = inet_csk(sk)->icsk_ca_ops;
 	int sndmem, per_mss;
@@ -366,6 +390,7 @@ static void tcp_sndbuf_expand(struct sock *sk)
 /* Slow part of check#2. */
 static int __tcp_grow_window(const struct sock *sk, const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	/* Optimize this! */
 	int truesize = tcp_win_from_space(skb->truesize) >> 1;
@@ -378,11 +403,13 @@ static int __tcp_grow_window(const struct sock *sk, const struct sk_buff *skb)
 		truesize >>= 1;
 		window >>= 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void tcp_grow_window(struct sock *sk, const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	/* Check #1 */
@@ -432,6 +459,7 @@ static void tcp_fixup_rcvbuf(struct sock *sk)
  */
 void tcp_init_buffer_space(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int maxwin;
 
@@ -469,6 +497,7 @@ void tcp_init_buffer_space(struct sock *sk)
 /* 5. Recalculate window clamp after socket hit its memory bounds. */
 static void tcp_clamp_window(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
@@ -494,6 +523,7 @@ static void tcp_clamp_window(struct sock *sk)
  */
 void tcp_initialize_rcv_mss(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	unsigned int hint = min_t(unsigned int, tp->advmss, tp->mss_cache);
 
@@ -536,9 +566,12 @@ static void tcp_rcv_rtt_update(struct tcp_sock *tp, u32 sample, int win_dep)
 			m -= (new_sample >> 3);
 			new_sample += m;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			m <<= 3;
 			if (m < new_sample)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				new_sample = m;
+}
 		}
 	} else {
 		/* No previous measure. */
@@ -555,10 +588,16 @@ static inline void tcp_rcv_rtt_measure(struct tcp_sock *tp)
 	if (tp->rcv_rtt_est.time == 0)
 		goto new_measure;
 	if (before(tp->rcv_nxt, tp->rcv_rtt_est.seq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	delta_us = tcp_stamp_us_delta(tp->tcp_mstamp, tp->rcv_rtt_est.time);
 	if (!delta_us)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		delta_us = 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_rcv_rtt_update(tp, delta_us, 1);
 
 new_measure:
@@ -569,6 +608,7 @@ static inline void tcp_rcv_rtt_measure(struct tcp_sock *tp)
 static inline void tcp_rcv_rtt_measure_ts(struct sock *sk,
 					  const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (tp->rx_opt.rcv_tsecr &&
@@ -578,7 +618,9 @@ static inline void tcp_rcv_rtt_measure_ts(struct sock *sk,
 		u32 delta_us;
 
 		if (!delta)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			delta = 1;
+}
 		delta_us = delta * (USEC_PER_SEC / TCP_TS_HZ);
 		tcp_rcv_rtt_update(tp, delta_us, 0);
 	}
@@ -590,6 +632,7 @@ static inline void tcp_rcv_rtt_measure_ts(struct sock *sk,
  */
 void tcp_rcv_space_adjust(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int time;
 	int copied;
@@ -597,7 +640,9 @@ void tcp_rcv_space_adjust(struct sock *sk)
 	tcp_mstamp_refresh(tp);
 	time = tcp_stamp_us_delta(tp->tcp_mstamp, tp->rcvq_space.time);
 	if (time < (tp->rcv_rtt_est.rtt_us >> 3) || tp->rcv_rtt_est.rtt_us == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Number of bytes copied to user in last RTT */
 	copied = tp->copied_seq - tp->rcvq_space.seq;
@@ -613,6 +658,7 @@ void tcp_rcv_space_adjust(struct sock *sk)
 	 * <prev RTT . ><current RTT .. ><next RTT .... >
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sysctl_tcp_moderate_rcvbuf &&
 	    !(sk->sk_userlocks & SOCK_RCVBUF_LOCK)) {
 		int rcvwin, rcvmem, rcvbuf;
@@ -629,6 +675,7 @@ void tcp_rcv_space_adjust(struct sock *sk)
 		 */
 		if (copied >=
 		    tp->rcvq_space.space + (tp->rcvq_space.space >> 2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (copied >=
 			    tp->rcvq_space.space + (tp->rcvq_space.space >> 1))
 				rcvwin <<= 1;
@@ -636,18 +683,23 @@ void tcp_rcv_space_adjust(struct sock *sk)
 				rcvwin += (rcvwin >> 1);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcvmem = SKB_TRUESIZE(tp->advmss + MAX_TCP_HEADER);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (tcp_win_from_space(rcvmem) < tp->advmss)
 			rcvmem += 128;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcvbuf = min(rcvwin / tp->advmss * rcvmem, sysctl_tcp_rmem[2]);
 		if (rcvbuf > sk->sk_rcvbuf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk->sk_rcvbuf = rcvbuf;
 
 			/* Make the window clamp follow along.  */
 			tp->window_clamp = rcvwin;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tp->rcvq_space.space = copied;
 
 new_measure:
@@ -667,6 +719,7 @@ void tcp_rcv_space_adjust(struct sock *sk)
  */
 static void tcp_event_data_recv(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	u32 now;
@@ -694,7 +747,9 @@ static void tcp_event_data_recv(struct sock *sk, struct sk_buff *skb)
 		} else if (m < icsk->icsk_ack.ato) {
 			icsk->icsk_ack.ato = (icsk->icsk_ack.ato >> 1) + m;
 			if (icsk->icsk_ack.ato > icsk->icsk_rto)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				icsk->icsk_ack.ato = icsk->icsk_rto;
+}
 		} else if (m > icsk->icsk_rto) {
 			/* Too long gap. Apparently sender failed to
 			 * restart window, so that we send ACKs quickly.
@@ -722,6 +777,7 @@ static void tcp_event_data_recv(struct sock *sk, struct sk_buff *skb)
  */
 static void tcp_rtt_estimator(struct sock *sk, long mrtt_us)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	long m = mrtt_us; /* RTT */
 	u32 srtt = tp->srtt_us;
@@ -763,13 +819,18 @@ static void tcp_rtt_estimator(struct sock *sk, long mrtt_us)
 		}
 		tp->mdev_us += m;		/* mdev = 3/4 mdev + 1/4 new */
 		if (tp->mdev_us > tp->mdev_max_us) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->mdev_max_us = tp->mdev_us;
 			if (tp->mdev_max_us > tp->rttvar_us)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tp->rttvar_us = tp->mdev_max_us;
+}
 		}
 		if (after(tp->snd_una, tp->rtt_seq)) {
 			if (tp->mdev_max_us < tp->rttvar_us)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tp->rttvar_us -= (tp->rttvar_us - tp->mdev_max_us) >> 2;
+}
 			tp->rtt_seq = tp->snd_nxt;
 			tp->mdev_max_us = tcp_rto_min_us(sk);
 		}
@@ -795,6 +856,7 @@ int sysctl_tcp_pacing_ca_ratio __read_mostly = 120;
 
 static void tcp_update_pacing_rate(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	u64 rate;
 
@@ -832,6 +894,7 @@ static void tcp_update_pacing_rate(struct sock *sk)
  */
 static void tcp_set_rto(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	/* Old crap is replaced with new one. 8)
 	 *
@@ -862,7 +925,9 @@ __u32 tcp_init_cwnd(const struct tcp_sock *tp, const struct dst_entry *dst)
 	__u32 cwnd = (dst ? dst_metric(dst, RTAX_INITCWND) : 0);
 
 	if (!cwnd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cwnd = TCP_INIT_CWND;
+}
 	return min_t(__u32, cwnd, tp->snd_cwnd_clamp);
 }
 
@@ -887,6 +952,7 @@ static void tcp_dsack_seen(struct tcp_sock *tp)
 static void tcp_update_reordering(struct sock *sk, const int metric,
 				  const int ts)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int mib_idx;
 
@@ -925,6 +991,7 @@ static void tcp_update_reordering(struct sock *sk, const int metric,
 /* This must be called before lost_out is incremented */
 static void tcp_verify_retransmit_hint(struct tcp_sock *tp, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tp->retransmit_skb_hint ||
 	    before(TCP_SKB_CB(skb)->seq,
 		   TCP_SKB_CB(tp->retransmit_skb_hint)->seq))
@@ -949,6 +1016,7 @@ static void tcp_sum_lost(struct tcp_sock *tp, struct sk_buff *skb)
 
 static void tcp_skb_mark_lost(struct tcp_sock *tp, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(TCP_SKB_CB(skb)->sacked & (TCPCB_LOST|TCPCB_SACKED_ACKED))) {
 		tcp_verify_retransmit_hint(tp, skb);
 
@@ -960,6 +1028,7 @@ static void tcp_skb_mark_lost(struct tcp_sock *tp, struct sk_buff *skb)
 
 void tcp_skb_mark_lost_uncond_verify(struct tcp_sock *tp, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_verify_retransmit_hint(tp, skb);
 
 	tcp_sum_lost(tp, skb);
@@ -1104,23 +1173,28 @@ static bool tcp_check_dsack(struct sock *sk, const struct sk_buff *ack_skb,
 			    struct tcp_sack_block_wire *sp, int num_sacks,
 			    u32 prior_snd_una)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	u32 start_seq_0 = get_unaligned_be32(&sp[0].start_seq);
 	u32 end_seq_0 = get_unaligned_be32(&sp[0].end_seq);
 	bool dup_sack = false;
 
 	if (before(start_seq_0, TCP_SKB_CB(ack_skb)->ack_seq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dup_sack = true;
 		tcp_dsack_seen(tp);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPDSACKRECV);
 	} else if (num_sacks > 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		u32 end_seq_1 = get_unaligned_be32(&sp[1].end_seq);
 		u32 start_seq_1 = get_unaligned_be32(&sp[1].start_seq);
 
 		if (!after(end_seq_0, end_seq_1) &&
 		    !before(start_seq_0, start_seq_1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dup_sack = true;
 			tcp_dsack_seen(tp);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NET_INC_STATS(sock_net(sk),
 					LINUX_MIB_TCPDSACKOFORECV);
 		}
@@ -1164,6 +1238,7 @@ static int tcp_match_skb_to_sack(struct sock *sk, struct sk_buff *skb,
 	unsigned int pkt_len;
 	unsigned int mss;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	in_sack = !after(start_seq, TCP_SKB_CB(skb)->seq) &&
 		  !before(end_seq, TCP_SKB_CB(skb)->end_seq);
 
@@ -1210,6 +1285,7 @@ static u8 tcp_sacktag_one(struct sock *sk,
 			  int dup_sack, int pcount,
 			  u64 xmit_time)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int fack_count = state->fack_count;
 
@@ -1297,6 +1373,7 @@ static bool tcp_shifted_skb(struct sock *sk, struct sk_buff *skb,
 			    unsigned int pcount, int shifted, int mss,
 			    bool dup_sack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *prev = tcp_write_queue_prev(sk, skb);
 	u32 start_seq = TCP_SKB_CB(skb)->seq;	/* start of newly-SACKed */
@@ -1380,12 +1457,14 @@ static bool tcp_shifted_skb(struct sock *sk, struct sk_buff *skb,
  */
 static int tcp_skb_seglen(const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return tcp_skb_pcount(skb) == 1 ? skb->len : tcp_skb_mss(skb);
 }
 
 /* Shifting pages past head area doesn't work */
 static int skb_can_shift(const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !skb_headlen(skb) && skb_is_nonlinear(skb);
 }
 
@@ -1397,6 +1476,7 @@ static struct sk_buff *tcp_shift_skb_data(struct sock *sk, struct sk_buff *skb,
 					  u32 start_seq, u32 end_seq,
 					  bool dup_sack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *prev;
 	int mss;
@@ -1539,6 +1619,7 @@ static struct sk_buff *tcp_sacktag_walk(struct sk_buff *skb, struct sock *sk,
 					u32 start_seq, u32 end_seq,
 					bool dup_sack_in)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *tmp;
 
@@ -1615,6 +1696,7 @@ static struct sk_buff *tcp_sacktag_skip(struct sk_buff *skb, struct sock *sk,
 					struct tcp_sacktag_state *state,
 					u32 skip_to_seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_for_write_queue_from(skb, sk) {
 		if (skb == tcp_send_head(sk))
 			break;
@@ -1633,6 +1715,7 @@ static struct sk_buff *tcp_maybe_skipping_dsack(struct sk_buff *skb,
 						struct tcp_sacktag_state *state,
 						u32 skip_to_seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!next_dup)
 		return skb;
 
@@ -1648,6 +1731,7 @@ static struct sk_buff *tcp_maybe_skipping_dsack(struct sk_buff *skb,
 
 static int tcp_sack_cache_ok(const struct tcp_sock *tp, const struct tcp_sack_block *cache)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cache < tp->recv_sack_cache + ARRAY_SIZE(tp->recv_sack_cache);
 }
 
@@ -1655,6 +1739,7 @@ static int
 tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,
 			u32 prior_snd_una, struct tcp_sacktag_state *state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	const unsigned char *ptr = (skb_transport_header(ack_skb) +
 				    TCP_SKB_CB(ack_skb)->sacked);
@@ -1673,7 +1758,9 @@ tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,
 
 	if (!tp->sacked_out) {
 		if (WARN_ON(tp->fackets_out))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->fackets_out = 0;
+}
 		tcp_highest_sack_reset(sk);
 	}
 
@@ -1689,14 +1776,19 @@ tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,
 	 * contain valid SACK info.
 	 */
 	if (before(TCP_SKB_CB(ack_skb)->ack_seq, prior_snd_una - tp->max_window))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!tp->packets_out)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	used_sacks = 0;
 	first_sack_index = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < num_sacks; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bool dup_sack = !i && found_dup_sack;
 
 		sp[used_sacks].start_seq = get_unaligned_be32(&sp_wire[i].start_seq);
@@ -1708,8 +1800,11 @@ tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,
 			int mib_idx;
 
 			if (dup_sack) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!tp->undo_marker)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					mib_idx = LINUX_MIB_TCPDSACKIGNOREDNOUNDO;
+}
 				else
 					mib_idx = LINUX_MIB_TCPDSACKIGNOREDOLD;
 			} else {
@@ -1717,12 +1812,17 @@ tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,
 				if ((TCP_SKB_CB(ack_skb)->ack_seq != tp->snd_una) &&
 				    !after(sp[used_sacks].end_seq, tp->snd_una))
 					continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				mib_idx = LINUX_MIB_TCPSACKDISCARD;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NET_INC_STATS(sock_net(sk), mib_idx);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (i == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				first_sack_index = -1;
+}
 			continue;
 		}
 
@@ -1730,22 +1830,29 @@ tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,
 		if (!after(sp[used_sacks].end_seq, prior_snd_una))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		used_sacks++;
 	}
 
 	/* order SACK blocks to allow in order walk of the retrans queue */
 	for (i = used_sacks - 1; i > 0; i--) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (j = 0; j < i; j++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (after(sp[j].start_seq, sp[j + 1].start_seq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				swap(sp[j], sp[j + 1]);
 
 				/* Track where the first SACK block goes to */
 				if (j == first_sack_index)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					first_sack_index = j + 1;
+}
 			}
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb = tcp_write_queue_head(sk);
 	state->fack_count = 0;
 	i = 0;
@@ -1754,6 +1861,7 @@ tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,
 		/* It's already past, so skip checking against it */
 		cache = tp->recv_sack_cache + ARRAY_SIZE(tp->recv_sack_cache);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cache = tp->recv_sack_cache;
 		/* Skip empty blocks in at head of the cache */
 		while (tcp_sack_cache_ok(tp, cache) && !cache->start_seq &&
@@ -1761,14 +1869,19 @@ tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,
 			cache++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (i < used_sacks) {
 		u32 start_seq = sp[i].start_seq;
 		u32 end_seq = sp[i].end_seq;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bool dup_sack = (found_dup_sack && (i == first_sack_index));
 		struct tcp_sack_block *next_dup = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (found_dup_sack && ((i + 1) == first_sack_index))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			next_dup = &sp[i + 1];
+}
 
 		/* Skip too early cached blocks */
 		while (tcp_sack_cache_ok(tp, cache) &&
@@ -1781,6 +1894,7 @@ tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,
 
 			/* Head todo? */
 			if (before(start_seq, cache->start_seq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				skb = tcp_sacktag_skip(skb, sk, state,
 						       start_seq);
 				skb = tcp_sacktag_walk(skb, sk, next_dup,
@@ -1794,6 +1908,7 @@ tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,
 			if (!after(end_seq, cache->end_seq))
 				goto advance_sp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb = tcp_maybe_skipping_dsack(skb, sk, next_dup,
 						       state,
 						       cache->end_seq);
@@ -1804,23 +1919,29 @@ tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,
 				skb = tcp_highest_sack(sk);
 				if (!skb)
 					break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				state->fack_count = tp->fackets_out;
 				cache++;
 				goto walk;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb = tcp_sacktag_skip(skb, sk, state, cache->end_seq);
 			/* Check overlap against next cached too (past this one already) */
 			cache++;
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!before(start_seq, tcp_highest_sack_seq(tp))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb = tcp_highest_sack(sk);
 			if (!skb)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			state->fack_count = tp->fackets_out;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb = tcp_sacktag_skip(skb, sk, state, start_seq);
 
 walk:
@@ -1833,16 +1954,22 @@ tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,
 
 	/* Clear the head of the cache sack blocks so we can skip it next time */
 	for (i = 0; i < ARRAY_SIZE(tp->recv_sack_cache) - used_sacks; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->recv_sack_cache[i].start_seq = 0;
 		tp->recv_sack_cache[i].end_seq = 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (j = 0; j < used_sacks; j++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->recv_sack_cache[i++] = sp[j];
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((state->reord < tp->fackets_out) &&
 	    ((inet_csk(sk)->icsk_ca_state != TCP_CA_Loss) || tp->undo_marker))
 		tcp_update_reordering(sk, tp->fackets_out - state->reord, 0);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_verify_left_out(tp);
 out:
 
@@ -1862,6 +1989,7 @@ static bool tcp_limit_reno_sacked(struct tcp_sock *tp)
 {
 	u32 holes;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	holes = max(tp->lost_out, 1U);
 	holes = min(holes, tp->packets_out);
 
@@ -1878,6 +2006,7 @@ static bool tcp_limit_reno_sacked(struct tcp_sock *tp)
  */
 static void tcp_check_reno_reordering(struct sock *sk, const int addend)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	if (tcp_limit_reno_sacked(tp))
 		tcp_update_reordering(sk, tp->packets_out + addend, 0);
@@ -1887,6 +2016,7 @@ static void tcp_check_reno_reordering(struct sock *sk, const int addend)
 
 static void tcp_add_reno_sack(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	u32 prior_sacked = tp->sacked_out;
 
@@ -1901,6 +2031,7 @@ static void tcp_add_reno_sack(struct sock *sk)
 
 static void tcp_remove_reno_sacks(struct sock *sk, int acked)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (acked > 0) {
@@ -1943,6 +2074,7 @@ static inline void tcp_init_undo(struct tcp_sock *tp)
  */
 void tcp_enter_loss(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct net *net = sock_net(sk);
@@ -1969,17 +2101,23 @@ void tcp_enter_loss(struct sock *sk)
 	tp->lost_out = 0;
 
 	if (tcp_is_reno(tp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_reset_reno_sack(tp);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb = tcp_write_queue_head(sk);
 	is_reneg = skb && (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED);
 	if (is_reneg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPSACKRENEGING);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->sacked_out = 0;
 		tp->fackets_out = 0;
 		/* Mark SACK reneging until we recover from this loss event. */
 		tp->is_sack_reneg = 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_clear_all_retrans_hints(tp);
 
 	tcp_for_write_queue(skb, sk) {
@@ -2037,7 +2175,9 @@ void tcp_enter_loss(struct sock *sk)
 static bool tcp_check_sack_reneging(struct sock *sk, int flag)
 {
 	if (flag & FLAG_SACK_RENEGING) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct tcp_sock *tp = tcp_sk(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unsigned long delay = max(usecs_to_jiffies(tp->srtt_us >> 4),
 					  msecs_to_jiffies(10));
 
@@ -2045,11 +2185,13 @@ static bool tcp_check_sack_reneging(struct sock *sk, int flag)
 					  delay, TCP_RTO_MAX);
 		return true;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
 static inline int tcp_fackets_out(const struct tcp_sock *tp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return tcp_is_reno(tp) ? tp->sacked_out + 1 : tp->fackets_out;
 }
 
@@ -2182,16 +2324,22 @@ static inline int tcp_dupack_heuristics(const struct tcp_sock *tp)
  */
 static bool tcp_time_to_recover(struct sock *sk, int flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	/* Trick#1: The loss is proven. */
 	if (tp->lost_out)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	/* Not-A-Trick#2 : Classic rule... */
 	if (tcp_dupack_heuristics(tp) > tp->reordering)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -2203,6 +2351,7 @@ static bool tcp_time_to_recover(struct sock *sk, int flag)
  */
 static void tcp_mark_head_lost(struct sock *sk, int packets, int mark_head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb;
 	int cnt, oldcnt, lost;
@@ -2265,6 +2414,7 @@ static void tcp_mark_head_lost(struct sock *sk, int packets, int mark_head)
 
 static void tcp_update_scoreboard(struct sock *sk, int fast_rexmit)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (tcp_is_reno(tp)) {
@@ -2304,6 +2454,7 @@ static bool tcp_skb_spurious_retrans(const struct tcp_sock *tp,
  */
 static inline bool tcp_packet_delayed(const struct tcp_sock *tp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !tp->retrans_stamp ||
 	       tcp_tsopt_ecr_before(tp, tp->retrans_stamp);
 }
@@ -2326,15 +2477,21 @@ static inline bool tcp_packet_delayed(const struct tcp_sock *tp)
  */
 static bool tcp_any_retrans_done(const struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb;
 
 	if (tp->retrans_out)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb = tcp_write_queue_head(sk);
 	if (unlikely(skb && TCP_SKB_CB(skb)->sacked & TCPCB_EVER_RETRANS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	return false;
 }
@@ -2370,6 +2527,7 @@ static void DBGUNDO(struct sock *sk, const char *msg)
 
 static void tcp_undo_cwnd_reduction(struct sock *sk, bool unmark_loss)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (unmark_loss) {
@@ -2400,12 +2558,14 @@ static void tcp_undo_cwnd_reduction(struct sock *sk, bool unmark_loss)
 
 static inline bool tcp_may_undo(const struct tcp_sock *tp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return tp->undo_marker && (!tp->undo_retrans || tcp_packet_delayed(tp));
 }
 
 /* People celebrate: "We love our President!" */
 static bool tcp_try_undo_recovery(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (tcp_may_undo(tp)) {
@@ -2439,20 +2599,27 @@ static bool tcp_try_undo_recovery(struct sock *sk)
 /* Try to undo cwnd reduction, because D-SACKs acked all retransmitted data */
 static bool tcp_try_undo_dsack(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (tp->undo_marker && !tp->undo_retrans) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DBGUNDO(sk, "D-SACK");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_undo_cwnd_reduction(sk, false);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPDSACKUNDO);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
 /* Undo during loss recovery after partial ACK or using F-RTO. */
 static bool tcp_try_undo_loss(struct sock *sk, bool frto_undo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (frto_undo || tcp_may_undo(tp)) {
@@ -2484,6 +2651,7 @@ static bool tcp_try_undo_loss(struct sock *sk, bool frto_undo)
  */
 static void tcp_init_cwnd_reduction(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	tp->high_seq = tp->snd_nxt;
@@ -2498,6 +2666,7 @@ static void tcp_init_cwnd_reduction(struct sock *sk)
 
 void tcp_cwnd_reduction(struct sock *sk, int newly_acked_sacked, int flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int sndcnt = 0;
 	int delta = tp->snd_ssthresh - tcp_packets_in_flight(tp);
@@ -2525,6 +2694,7 @@ void tcp_cwnd_reduction(struct sock *sk, int newly_acked_sacked, int flag)
 
 static inline void tcp_end_cwnd_reduction(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (inet_csk(sk)->icsk_ca_ops->cong_control)
@@ -2542,6 +2712,7 @@ static inline void tcp_end_cwnd_reduction(struct sock *sk)
 /* Enter CWR state. Disable cwnd undo since congestion is proven with ECN */
 void tcp_enter_cwr(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	tp->prior_ssthresh = 0;
@@ -2555,13 +2726,17 @@ EXPORT_SYMBOL(tcp_enter_cwr);
 
 static void tcp_try_keep_open(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int state = TCP_CA_Open;
 
 	if (tcp_left_out(tp) || tcp_any_retrans_done(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		state = TCP_CA_Disorder;
+}
 
 	if (inet_csk(sk)->icsk_ca_state != state) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_set_ca_state(sk, state);
 		tp->high_seq = tp->snd_nxt;
 	}
@@ -2569,6 +2744,7 @@ static void tcp_try_keep_open(struct sock *sk)
 
 static void tcp_try_to_open(struct sock *sk, int flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	tcp_verify_left_out(tp);
@@ -2577,7 +2753,9 @@ static void tcp_try_to_open(struct sock *sk, int flag)
 		tp->retrans_stamp = 0;
 
 	if (flag & FLAG_ECE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_enter_cwr(sk);
+}
 
 	if (inet_csk(sk)->icsk_ca_state != TCP_CA_CWR) {
 		tcp_try_keep_open(sk);
@@ -2586,6 +2764,7 @@ static void tcp_try_to_open(struct sock *sk, int flag)
 
 static void tcp_mtup_probe_failed(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
 	icsk->icsk_mtup.search_high = icsk->icsk_mtup.probe_size - 1;
@@ -2595,6 +2774,7 @@ static void tcp_mtup_probe_failed(struct sock *sk)
 
 static void tcp_mtup_probe_success(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
@@ -2619,6 +2799,7 @@ static void tcp_mtup_probe_success(struct sock *sk)
  */
 void tcp_simple_retransmit(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb;
@@ -2665,6 +2846,7 @@ EXPORT_SYMBOL(tcp_simple_retransmit);
 
 void tcp_enter_recovery(struct sock *sk, bool ece_ack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int mib_idx;
 
@@ -2692,6 +2874,7 @@ void tcp_enter_recovery(struct sock *sk, bool ece_ack)
 static void tcp_process_loss(struct sock *sk, int flag, bool is_dupack,
 			     int *rexmit)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	bool recovered = !before(tp->snd_una, tp->high_seq);
 
@@ -2749,6 +2932,7 @@ static void tcp_process_loss(struct sock *sk, int flag, bool is_dupack,
 /* Undo during fast recovery after partial ACK. */
 static bool tcp_try_undo_partial(struct sock *sk, const int acked)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (tp->undo_marker && tcp_packet_delayed(tp)) {
@@ -2779,6 +2963,7 @@ static bool tcp_try_undo_partial(struct sock *sk, const int acked)
 
 static void tcp_rack_identify_loss(struct sock *sk, int *ack_flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	/* Use RACK to detect loss */
@@ -2787,7 +2972,9 @@ static void tcp_rack_identify_loss(struct sock *sk, int *ack_flag)
 
 		tcp_rack_mark_lost(sk);
 		if (prior_retrans > tp->retrans_out)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*ack_flag |= FLAG_LOST_RETRANS;
+}
 	}
 }
 
@@ -2806,6 +2993,7 @@ static void tcp_rack_identify_loss(struct sock *sk, int *ack_flag)
 static void tcp_fastretrans_alert(struct sock *sk, const int acked,
 				  bool is_dupack, int *ack_flag, int *rexmit)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int fast_rexmit = 0, flag = *ack_flag;
@@ -2813,18 +3001,26 @@ static void tcp_fastretrans_alert(struct sock *sk, const int acked,
 				    (tcp_fackets_out(tp) > tp->reordering));
 
 	if (WARN_ON(!tp->packets_out && tp->sacked_out))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->sacked_out = 0;
+}
 	if (WARN_ON(!tp->sacked_out && tp->fackets_out))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->fackets_out = 0;
+}
 
 	/* Now state machine starts.
 	 * A. ECE, hence prohibit cwnd undoing, the reduction is required. */
 	if (flag & FLAG_ECE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->prior_ssthresh = 0;
+}
 
 	/* B. In all the states check for reneging SACKs. */
 	if (tcp_check_sack_reneging(sk, flag))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* C. Check consistency of the current state. */
 	tcp_verify_left_out(tp);
@@ -2835,11 +3031,13 @@ static void tcp_fastretrans_alert(struct sock *sk, const int acked,
 		WARN_ON(tp->retrans_out != 0);
 		tp->retrans_stamp = 0;
 	} else if (!before(tp->snd_una, tp->high_seq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (icsk->icsk_ca_state) {
 		case TCP_CA_CWR:
 			/* CWR is to be held something *above* high_seq
 			 * is ACKed for CWR bit to reach receiver. */
 			if (tp->snd_una != tp->high_seq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_end_cwnd_reduction(sk);
 				tcp_set_ca_state(sk, TCP_CA_Open);
 			}
@@ -2847,9 +3045,15 @@ static void tcp_fastretrans_alert(struct sock *sk, const int acked,
 
 		case TCP_CA_Recovery:
 			if (tcp_is_reno(tp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_reset_reno_sack(tp);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (tcp_try_undo_recovery(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_end_cwnd_reduction(sk);
 			break;
 		}
@@ -2859,34 +3063,50 @@ static void tcp_fastretrans_alert(struct sock *sk, const int acked,
 	switch (icsk->icsk_ca_state) {
 	case TCP_CA_Recovery:
 		if (!(flag & FLAG_SND_UNA_ADVANCED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (tcp_is_reno(tp) && is_dupack)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_add_reno_sack(sk);
+}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (tcp_try_undo_partial(sk, acked))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return;
+}
 			/* Partial ACK arrived. Force fast retransmit. */
 			do_lost = tcp_is_reno(tp) ||
 				  tcp_fackets_out(tp) > tp->reordering;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tcp_try_undo_dsack(sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_try_keep_open(sk);
 			return;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_rack_identify_loss(sk, ack_flag);
 		break;
 	case TCP_CA_Loss:
 		tcp_process_loss(sk, flag, is_dupack, rexmit);
 		tcp_rack_identify_loss(sk, ack_flag);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(icsk->icsk_ca_state == TCP_CA_Open ||
 		      (*ack_flag & FLAG_LOST_RETRANS)))
 			return;
 		/* Change state if cwnd is undone or retransmits are lost */
 	default:
 		if (tcp_is_reno(tp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (flag & FLAG_SND_UNA_ADVANCED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_reset_reno_sack(tp);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (is_dupack)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_add_reno_sack(sk);
+}
 		}
 
 		if (icsk->icsk_ca_state <= TCP_CA_Disorder)
@@ -2902,6 +3122,7 @@ static void tcp_fastretrans_alert(struct sock *sk, const int acked,
 		if (icsk->icsk_ca_state < TCP_CA_CWR &&
 		    icsk->icsk_mtup.probe_size &&
 		    tp->snd_una == tp->mtu_probe.probe_seq_start) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_mtup_probe_failed(sk);
 			/* Restores the reduction we did in tcp_mtup_probe() */
 			tp->snd_cwnd++;
@@ -2914,13 +3135,18 @@ static void tcp_fastretrans_alert(struct sock *sk, const int acked,
 		fast_rexmit = 1;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (do_lost)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_update_scoreboard(sk, fast_rexmit);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*rexmit = REXMIT_LOST;
 }
 
 static void tcp_update_rtt_min(struct sock *sk, u32 rtt_us)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	u32 wlen = sysctl_tcp_min_rtt_wlen * HZ;
 
@@ -2932,6 +3158,7 @@ static bool tcp_ack_update_rtt(struct sock *sk, const int flag,
 			       long seq_rtt_us, long sack_rtt_us,
 			       long ca_rtt_us, struct rate_sample *rs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 
 	/* Prefer RTT measured from ACK's timing to TS-ECR. This is because
@@ -2940,7 +3167,9 @@ static bool tcp_ack_update_rtt(struct sock *sk, const int flag,
 	 * is acked (RFC6298).
 	 */
 	if (seq_rtt_us < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_rtt_us = sack_rtt_us;
+}
 
 	/* RTTM Rule: A TSecr value received in a segment is used to
 	 * update the averaged RTT measurement only if the segment
@@ -2957,7 +3186,9 @@ static bool tcp_ack_update_rtt(struct sock *sk, const int flag,
 	}
 	rs->rtt_us = ca_rtt_us; /* RTT of last (S)ACKed packet (or -1) */
 	if (seq_rtt_us < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/* ca_rtt_us >= 0 is counting on the invariant that ca_rtt_us is
 	 * always taken together with ACK, SACK, or TS-opts. Any negative
@@ -2987,6 +3218,7 @@ void tcp_synack_rtt_meas(struct sock *sk, struct request_sock *req)
 
 static void tcp_cong_avoid(struct sock *sk, u32 ack, u32 acked)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 
 	icsk->icsk_ca_ops->cong_avoid(sk, ack, acked);
@@ -2998,6 +3230,7 @@ static void tcp_cong_avoid(struct sock *sk, u32 ack, u32 acked)
  */
 void tcp_rearm_rto(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 
@@ -3005,9 +3238,12 @@ void tcp_rearm_rto(struct sock *sk)
 	 * for SYN-ACK retrans purpose, stay put.
 	 */
 	if (tp->fastopen_rsk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!tp->packets_out) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_csk_clear_xmit_timer(sk, ICSK_TIME_RETRANS);
 	} else {
 		u32 rto = inet_csk(sk)->icsk_rto;
@@ -3035,6 +3271,7 @@ static void tcp_set_xmit_timer(struct sock *sk)
 /* If we get here, the whole TSO packet has not been acked. */
 static u32 tcp_tso_acked(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	u32 packets_acked;
 
@@ -3060,8 +3297,11 @@ static void tcp_ack_tstamp(struct sock *sk, struct sk_buff *skb,
 
 	/* Avoid cache line misses to get skb_shinfo() and shinfo->tx_flags */
 	if (likely(!TCP_SKB_CB(skb)->txstamp_ack))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	shinfo = skb_shinfo(skb);
 	if (!before(shinfo->tskey, prior_snd_una) &&
 	    before(shinfo->tskey, tcp_sk(sk)->snd_una))
@@ -3076,6 +3316,7 @@ static int tcp_clean_rtx_queue(struct sock *sk, int prior_fackets,
 			       u32 prior_snd_una, int *acked,
 			       struct tcp_sacktag_state *sack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	u64 first_ackt, last_ackt;
 	struct tcp_sock *tp = tcp_sk(sk);
@@ -3106,9 +3347,11 @@ static int tcp_clean_rtx_queue(struct sock *sk, int prior_fackets,
 			    !after(tp->snd_una, scb->seq))
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acked_pcount = tcp_tso_acked(sk, skb);
 			if (!acked_pcount)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fully_acked = false;
 		} else {
 			/* Speedup tcp_unlink_write_queue() and next loop */
@@ -3118,13 +3361,17 @@ static int tcp_clean_rtx_queue(struct sock *sk, int prior_fackets,
 
 		if (unlikely(sacked & TCPCB_RETRANS)) {
 			if (sacked & TCPCB_SACKED_RETRANS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tp->retrans_out -= acked_pcount;
+}
 			flag |= FLAG_RETRANS_DATA_ACKED;
 		} else if (!(sacked & TCPCB_SACKED_ACKED)) {
 			last_ackt = skb->skb_mstamp;
 			WARN_ON_ONCE(last_ackt == 0);
 			if (!first_ackt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				first_ackt = last_ackt;
+}
 
 			last_in_flight = TCP_SKB_CB(skb)->tx.in_flight;
 			reord = min(pkts_acked, reord);
@@ -3133,6 +3380,7 @@ static int tcp_clean_rtx_queue(struct sock *sk, int prior_fackets,
 		}
 
 		if (sacked & TCPCB_SACKED_ACKED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->sacked_out -= acked_pcount;
 		} else if (tcp_is_sack(tp)) {
 			tp->delivered += acked_pcount;
@@ -3141,7 +3389,9 @@ static int tcp_clean_rtx_queue(struct sock *sk, int prior_fackets,
 						 skb->skb_mstamp);
 		}
 		if (sacked & TCPCB_LOST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->lost_out -= acked_pcount;
+}
 
 		tp->packets_out -= acked_pcount;
 		pkts_acked += acked_pcount;
@@ -3164,12 +3414,17 @@ static int tcp_clean_rtx_queue(struct sock *sk, int prior_fackets,
 		if (!fully_acked)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_unlink_write_queue(skb, sk);
 		sk_wmem_free_skb(sk, skb);
 		if (unlikely(skb == tp->retransmit_skb_hint))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->retransmit_skb_hint = NULL;
+}
 		if (unlikely(skb == tp->lost_skb_hint))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->lost_skb_hint = NULL;
+}
 	}
 
 	if (!skb)
@@ -3179,13 +3434,16 @@ static int tcp_clean_rtx_queue(struct sock *sk, int prior_fackets,
 		tp->snd_up = tp->snd_una;
 
 	if (skb && (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flag |= FLAG_SACK_RENEGING;
+}
 
 	if (likely(first_ackt) && !(flag & FLAG_RETRANS_DATA_ACKED)) {
 		seq_rtt_us = tcp_stamp_us_delta(tp->tcp_mstamp, first_ackt);
 		ca_rtt_us = tcp_stamp_us_delta(tp->tcp_mstamp, last_ackt);
 	}
 	if (sack->first_sackt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sack_rtt_us = tcp_stamp_us_delta(tp->tcp_mstamp, sack->first_sackt);
 		ca_rtt_us = tcp_stamp_us_delta(tp->tcp_mstamp, sack->last_sackt);
 	}
@@ -3196,17 +3454,21 @@ static int tcp_clean_rtx_queue(struct sock *sk, int prior_fackets,
 		flag |= FLAG_SET_XMIT_TIMER;  /* set TLP or RTO timer */
 		if (unlikely(icsk->icsk_mtup.probe_size &&
 			     !after(tp->mtu_probe.probe_seq_end, tp->snd_una))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_mtup_probe_success(sk);
 		}
 
 		if (tcp_is_reno(tp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_remove_reno_sacks(sk, pkts_acked);
 		} else {
 			int delta;
 
 			/* Non-retransmitted hole got filled? That's reordering */
 			if (reord < prior_fackets && reord <= tp->fackets_out)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_update_reordering(sk, tp->fackets_out - reord, 0);
+}
 
 			delta = tcp_is_fack(tp) ? pkts_acked :
 						  prior_sacked - tp->sacked_out;
@@ -3237,18 +3499,22 @@ static int tcp_clean_rtx_queue(struct sock *sk, int prior_fackets,
 	WARN_ON((int)tp->lost_out < 0);
 	WARN_ON((int)tp->retrans_out < 0);
 	if (!tp->packets_out && tcp_is_sack(tp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icsk = inet_csk(sk);
 		if (tp->lost_out) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("Leak l=%u %d\n",
 				 tp->lost_out, icsk->icsk_ca_state);
 			tp->lost_out = 0;
 		}
 		if (tp->sacked_out) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("Leak s=%u %d\n",
 				 tp->sacked_out, icsk->icsk_ca_state);
 			tp->sacked_out = 0;
 		}
 		if (tp->retrans_out) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("Leak r=%u %d\n",
 				 tp->retrans_out, icsk->icsk_ca_state);
 			tp->retrans_out = 0;
@@ -3261,6 +3527,7 @@ static int tcp_clean_rtx_queue(struct sock *sk, int prior_fackets,
 
 static void tcp_ack_probe(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
@@ -3296,7 +3563,9 @@ static inline bool tcp_may_raise_cwnd(const struct sock *sk, const int flag)
 	 * cwnd in tcp_fastretrans_alert() based on more states.
 	 */
 	if (tcp_sk(sk)->reordering > sock_net(sk)->ipv4.sysctl_tcp_reordering)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return flag & FLAG_FORWARD_PROGRESS;
+}
 
 	return flag & FLAG_DATA_ACKED;
 }
@@ -3309,9 +3578,11 @@ static inline bool tcp_may_raise_cwnd(const struct sock *sk, const int flag)
 static void tcp_cong_control(struct sock *sk, u32 ack, u32 acked_sacked,
 			     int flag, const struct rate_sample *rs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 
 	if (icsk->icsk_ca_ops->cong_control) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icsk->icsk_ca_ops->cong_control(sk, rs);
 		return;
 	}
@@ -3366,6 +3637,7 @@ static void tcp_rcv_nxt_update(struct tcp_sock *tp, u32 seq)
 static int tcp_ack_update_window(struct sock *sk, const struct sk_buff *skb, u32 ack,
 				 u32 ack_seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int flag = 0;
 	u32 nwin = ntohs(tcp_hdr(skb)->window);
@@ -3374,6 +3646,7 @@ static int tcp_ack_update_window(struct sock *sk, const struct sk_buff *skb, u32
 		nwin <<= tp->rx_opt.snd_wscale;
 
 	if (tcp_may_update_window(tp, ack, ack_seq, nwin)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flag |= FLAG_WIN_UPDATE;
 		tcp_update_wl(tp, ack_seq);
 
@@ -3404,6 +3677,7 @@ static int tcp_ack_update_window(struct sock *sk, const struct sk_buff *skb, u32
 static bool __tcp_oow_rate_limited(struct net *net, int mib_idx,
 				   u32 *last_oow_ack_time)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (*last_oow_ack_time) {
 		s32 elapsed = (s32)(tcp_jiffies32 - *last_oow_ack_time);
 
@@ -3496,10 +3770,13 @@ static void tcp_replace_ts_recent(struct tcp_sock *tp, u32 seq)
  */
 static void tcp_process_tlp_ack(struct sock *sk, u32 ack, int flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (before(ack, tp->tlp_high_seq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (flag & FLAG_DSACKING_ACK) {
 		/* This DSACK means original and TLP probe arrived; no loss */
@@ -3512,22 +3789,27 @@ static void tcp_process_tlp_ack(struct sock *sk, u32 ack, int flag)
 		tcp_set_ca_state(sk, TCP_CA_CWR);
 		tcp_end_cwnd_reduction(sk);
 		tcp_try_keep_open(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk),
 				LINUX_MIB_TCPLOSSPROBERECOVERY);
 	} else if (!(flag & (FLAG_SND_UNA_ADVANCED |
 			     FLAG_NOT_DUP | FLAG_DATA_SACKED))) {
 		/* Pure dupack: original and TLP probe arrived; no loss */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->tlp_high_seq = 0;
 	}
 }
 
 static inline void tcp_in_ack_event(struct sock *sk, u32 flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 
 	if (icsk->icsk_ca_ops->in_ack_event)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icsk->icsk_ca_ops->in_ack_event(sk, flags);
 }
+}
 
 /* Congestion control has updated the cwnd already. So if we're in
  * loss recovery then now we do any new sends (for FRTO) or
@@ -3535,24 +3817,34 @@ static inline void tcp_in_ack_event(struct sock *sk, u32 flags)
  */
 static void tcp_xmit_recovery(struct sock *sk, int rexmit)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (rexmit == REXMIT_NONE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(rexmit == 2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__tcp_push_pending_frames(sk, tcp_current_mss(sk),
 					  TCP_NAGLE_OFF);
 		if (after(tp->snd_nxt, tp->high_seq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->frto = 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_xmit_retransmit_queue(sk);
 }
 
 /* This routine deals with incoming acks, but not outgoing ones. */
 static int tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct tcp_sacktag_state sack_state;
@@ -3581,8 +3873,12 @@ static int tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)
 	if (before(ack, prior_snd_una)) {
 		/* RFC 5961 5.2 [Blind Data Injection Attack].[Mitigation] */
 		if (before(ack, prior_snd_una - tp->max_window)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!(flag & FLAG_NO_CHALLENGE_ACK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_send_challenge_ack(sk, skb);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
 		}
 		goto old_ack;
@@ -3635,6 +3931,7 @@ static int tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)
 							&sack_state);
 
 		if (tcp_ecn_rcv_ecn_echo(tp, tcp_hdr(skb))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flag |= FLAG_ECE;
 			ack_ev_flags |= CA_ACK_ECE;
 		}
@@ -3665,6 +3962,7 @@ static int tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)
 		tcp_set_xmit_timer(sk);
 
 	if (tcp_ack_is_dubious(sk, flag)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		is_dupack = !(flag & (FLAG_SND_UNA_ADVANCED | FLAG_NOT_DUP));
 		tcp_fastretrans_alert(sk, acked, is_dupack, &flag, &rexmit);
 	}
@@ -3688,14 +3986,18 @@ static int tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)
 	 * it needs to be for normal retransmission.
 	 */
 	if (tcp_send_head(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_ack_probe(sk);
+}
 
 	if (tp->tlp_high_seq)
 		tcp_process_tlp_ack(sk, ack, flag);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 
 invalid_ack:
 	SOCK_DEBUG(sk, "Ack %u after %u:%u\n", ack, tp->snd_una, tp->snd_nxt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -1;
 
 old_ack:
@@ -3703,13 +4005,16 @@ static int tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)
 	 * If data was DSACKed, see if we can undo a cwnd reduction.
 	 */
 	if (TCP_SKB_CB(skb)->sacked) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flag |= tcp_sacktag_write_queue(sk, skb, prior_snd_una,
 						&sack_state);
 		tcp_fastretrans_alert(sk, acked, is_dupack, &flag, &rexmit);
 		tcp_xmit_recovery(sk, rexmit);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	SOCK_DEBUG(sk, "Ack %u before %u:%u\n", ack, tp->snd_una, tp->snd_nxt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -3759,12 +4064,17 @@ void tcp_parse_options(const struct net *net,
 		default:
 			opsize = *ptr++;
 			if (opsize < 2) /* "silly options" */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return;
+}
 			if (opsize > length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return;	/* don't parse partial options */
+}
 			switch (opcode) {
 			case TCPOPT_MSS:
 				if (opsize == TCPOLEN_MSS && th->syn && !estab) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					u16 in_mss = get_unaligned_be16(ptr);
 					if (in_mss) {
 						if (opt_rx->user_mss &&
@@ -3780,10 +4090,12 @@ void tcp_parse_options(const struct net *net,
 					__u8 snd_wscale = *(__u8 *)ptr;
 					opt_rx->wscale_ok = 1;
 					if (snd_wscale > TCP_MAX_WSCALE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						net_info_ratelimited("%s: Illegal window scaling value %d > %u received\n",
 								     __func__,
 								     snd_wscale,
 								     TCP_MAX_WSCALE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						snd_wscale = TCP_MAX_WSCALE;
 					}
 					opt_rx->snd_wscale = snd_wscale;
@@ -3861,8 +4173,10 @@ static bool tcp_parse_aligned_timestamp(struct tcp_sock *tp, const struct tcphdr
 			tp->rx_opt.rcv_tsecr = ntohl(*ptr) - tp->tsoffset;
 		else
 			tp->rx_opt.rcv_tsecr = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -3877,18 +4191,22 @@ static bool tcp_fast_parse_options(const struct net *net,
 	 * values.  Because equality is used, short doff can be ignored here.
 	 */
 	if (th->doff == (sizeof(*th) / 4)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->rx_opt.saw_tstamp = 0;
 		return false;
 	} else if (tp->rx_opt.tstamp_ok &&
 		   th->doff == ((sizeof(*th) + TCPOLEN_TSTAMP_ALIGNED) / 4)) {
 		if (tcp_parse_aligned_timestamp(tp, th))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
+}
 	}
 
 	tcp_parse_options(net, skb, &tp->rx_opt, 1, NULL);
 	if (tp->rx_opt.saw_tstamp && tp->rx_opt.rcv_tsecr)
 		tp->rx_opt.rcv_tsecr -= tp->tsoffset;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 
@@ -3903,7 +4221,9 @@ const u8 *tcp_parse_md5sig_option(const struct tcphdr *th)
 
 	/* If the TCP option is too short, we can short cut */
 	if (length < TCPOLEN_MD5SIG)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	while (length > 0) {
 		int opcode = *ptr++;
@@ -3918,13 +4238,18 @@ const u8 *tcp_parse_md5sig_option(const struct tcphdr *th)
 		default:
 			opsize = *ptr++;
 			if (opsize < 2 || opsize > length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return NULL;
+}
 			if (opcode == TCPOPT_MD5SIG)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return opsize == TCPOLEN_MD5SIG ? ptr : NULL;
+}
 		}
 		ptr += opsize - 2;
 		length -= opsize;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(tcp_parse_md5sig_option);
@@ -3955,6 +4280,7 @@ EXPORT_SYMBOL(tcp_parse_md5sig_option);
 
 static int tcp_disordered_ack(const struct sock *sk, const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	const struct tcphdr *th = tcp_hdr(skb);
 	u32 seq = TCP_SKB_CB(skb)->seq;
@@ -3976,6 +4302,7 @@ static int tcp_disordered_ack(const struct sock *sk, const struct sk_buff *skb)
 static inline bool tcp_paws_discard(const struct sock *sk,
 				   const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 
 	return !tcp_paws_check(&tp->rx_opt, TCP_PAWS_WINDOW) &&
@@ -4042,6 +4369,7 @@ void tcp_reset(struct sock *sk)
  */
 void tcp_fin(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	inet_csk_schedule_ack(sk);
@@ -4094,7 +4422,9 @@ void tcp_fin(struct sock *sk)
 	 */
 	skb_rbtree_purge(&tp->out_of_order_queue);
 	if (tcp_is_sack(tp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_sack_reset(&tp->rx_opt);
+}
 	sk_mem_reclaim(sk);
 
 	if (!sock_flag(sk, SOCK_DEAD)) {
@@ -4112,6 +4442,7 @@ void tcp_fin(struct sock *sk)
 static inline bool tcp_sack_extend(struct tcp_sack_block *sp, u32 seq,
 				  u32 end_seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!after(seq, sp->end_seq) && !after(sp->start_seq, end_seq)) {
 		if (before(seq, sp->start_seq))
 			sp->start_seq = seq;
@@ -4124,13 +4455,16 @@ static inline bool tcp_sack_extend(struct tcp_sack_block *sp, u32 seq,
 
 static void tcp_dsack_set(struct sock *sk, u32 seq, u32 end_seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (tcp_is_sack(tp) && sysctl_tcp_dsack) {
 		int mib_idx;
 
 		if (before(seq, tp->rcv_nxt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mib_idx = LINUX_MIB_TCPDSACKOLDSENT;
+}
 		else
 			mib_idx = LINUX_MIB_TCPDSACKOFOSENT;
 
@@ -4144,6 +4478,7 @@ static void tcp_dsack_set(struct sock *sk, u32 seq, u32 end_seq)
 
 static void tcp_dsack_extend(struct sock *sk, u32 seq, u32 end_seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (!tp->rx_opt.dsack)
@@ -4154,6 +4489,7 @@ static void tcp_dsack_extend(struct sock *sk, u32 seq, u32 end_seq)
 
 static void tcp_send_dupack(struct sock *sk, const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(skb)->seq &&
@@ -4203,6 +4539,7 @@ static void tcp_sack_maybe_coalesce(struct tcp_sock *tp)
 
 static void tcp_sack_new_ofo_skb(struct sock *sk, u32 seq, u32 end_seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct tcp_sack_block *sp = &tp->selective_acks[0];
 	int cur_sacks = tp->rx_opt.num_sacks;
@@ -4308,10 +4645,14 @@ static bool tcp_try_coalesce(struct sock *sk,
 
 	/* Its possible this segment overlaps with prior segment in queue */
 	if (TCP_SKB_CB(from)->seq != TCP_SKB_CB(to)->end_seq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	if (!skb_try_coalesce(to, from, fragstolen, &delta))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	atomic_add(delta, &sk->sk_rmem_alloc);
 	sk_mem_charge(sk, delta);
@@ -4321,13 +4662,17 @@ static bool tcp_try_coalesce(struct sock *sk,
 	TCP_SKB_CB(to)->tcp_flags |= TCP_SKB_CB(from)->tcp_flags;
 
 	if (TCP_SKB_CB(from)->has_rxtstamp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		TCP_SKB_CB(to)->has_rxtstamp = true;
 		if (dest == OOO_QUEUE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			TCP_SKB_CB(to)->swtstamp = TCP_SKB_CB(from)->swtstamp;
+}
 		else
 			to->tstamp = from->tstamp;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 
@@ -4342,6 +4687,7 @@ static void tcp_drop(struct sock *sk, struct sk_buff *skb)
  */
 static void tcp_ofo_queue(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	__u32 dsack_high = tp->rcv_nxt;
 	bool fin, fragstolen, eaten;
@@ -4404,19 +4750,28 @@ static int tcp_try_rmem_schedule(struct sock *sk, struct sk_buff *skb,
 	if (atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf ||
 	    !sk_rmem_schedule(sk, skb, size)) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tcp_prune_queue(sk) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (!sk_rmem_schedule(sk, skb, size)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!tcp_prune_ofo_queue(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -1;
+}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void tcp_data_queue_ofo(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct rb_node **p, *q, *parent;
 	struct sk_buff *skb1;
@@ -4564,6 +4919,7 @@ static int __must_check tcp_queue_rcv(struct sock *sk, struct sk_buff *skb, int
 	struct sk_buff *tail = skb_peek_tail(&sk->sk_receive_queue);
 
 	__skb_pull(skb, hdrlen);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	eaten = (tail &&
 		 tcp_try_coalesce(sk, RCV_QUEUE, tail,
 				  skb, fragstolen)) ? 1 : 0;
@@ -4583,7 +4939,9 @@ int tcp_send_rcvq(struct sock *sk, struct msghdr *msg, size_t size)
 	bool fragstolen;
 
 	if (size == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (size > PAGE_SIZE) {
 		int npages = min_t(size_t, size >> PAGE_SHIFT, MAX_SKB_FRAGS);
@@ -4627,6 +4985,7 @@ int tcp_send_rcvq(struct sock *sk, struct msghdr *msg, size_t size)
 
 static void tcp_data_queue(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	bool fragstolen;
 	int eaten;
@@ -4665,17 +5024,22 @@ static void tcp_data_queue(struct sock *sk, struct sk_buff *skb)
 			tcp_fin(sk);
 
 		if (!RB_EMPTY_ROOT(&tp->out_of_order_queue)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_ofo_queue(sk);
 
 			/* RFC2581. 4.2. SHOULD send immediate ACK, when
 			 * gap in queue is filled.
 			 */
 			if (RB_EMPTY_ROOT(&tp->out_of_order_queue))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				inet_csk(sk)->icsk_ack.pingpong = 0;
+}
 		}
 
 		if (tp->rx_opt.num_sacks)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_sack_remove(tp);
+}
 
 		tcp_fast_path_check(sk);
 
@@ -4683,6 +5047,7 @@ static void tcp_data_queue(struct sock *sk, struct sk_buff *skb)
 			kfree_skb_partial(skb, fragstolen);
 		if (!sock_flag(sk, SOCK_DEAD))
 			sk->sk_data_ready(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -4703,6 +5068,7 @@ static void tcp_data_queue(struct sock *sk, struct sk_buff *skb)
 	if (!before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt + tcp_receive_window(tp)))
 		goto out_of_window;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_enter_quickack_mode(sk);
 
 	if (before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt)) {
@@ -4711,6 +5077,7 @@ static void tcp_data_queue(struct sock *sk, struct sk_buff *skb)
 			   tp->rcv_nxt, TCP_SKB_CB(skb)->seq,
 			   TCP_SKB_CB(skb)->end_seq);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_dsack_set(sk, TCP_SKB_CB(skb)->seq, tp->rcv_nxt);
 
 		/* If window is closed, drop tail of packet. But after
@@ -4721,11 +5088,13 @@ static void tcp_data_queue(struct sock *sk, struct sk_buff *skb)
 		goto queue_and_out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_data_queue_ofo(sk, skb);
 }
 
 static struct sk_buff *tcp_skb_next(struct sk_buff *skb, struct sk_buff_head *list)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (list)
 		return !skb_queue_is_last(list, skb) ? skb->next : NULL;
 
@@ -4736,6 +5105,7 @@ static struct sk_buff *tcp_collapse_one(struct sock *sk, struct sk_buff *skb,
 					struct sk_buff_head *list,
 					struct rb_root *root)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sk_buff *next = tcp_skb_next(skb, list);
 
 	if (list)
@@ -4756,6 +5126,7 @@ static void tcp_rbtree_insert(struct rb_root *root, struct sk_buff *skb)
 	struct rb_node *parent = NULL;
 	struct sk_buff *skb1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (*p) {
 		parent = *p;
 		skb1 = rb_entry(parent, struct sk_buff, rbnode);
@@ -4875,6 +5246,7 @@ tcp_collapse(struct sock *sk, struct sk_buff_head *list, struct rb_root *root,
  */
 static void tcp_collapse_ofo_queue(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb, *head;
 	struct rb_node *p;
@@ -4928,6 +5300,7 @@ static void tcp_collapse_ofo_queue(struct sock *sk)
  */
 static bool tcp_prune_ofo_queue(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct rb_node *node, *prev;
 
@@ -4967,6 +5340,7 @@ static bool tcp_prune_ofo_queue(struct sock *sk)
  */
 static int tcp_prune_queue(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	SOCK_DEBUG(sk, "prune_queue: c=%x\n", tp->copied_seq);
@@ -5010,6 +5384,7 @@ static int tcp_prune_queue(struct sock *sk)
 
 static bool tcp_should_expand_sndbuf(const struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 
 	/* If the user specified a specific send buffer setting, do
@@ -5041,6 +5416,7 @@ static bool tcp_should_expand_sndbuf(const struct sock *sk)
  */
 static void tcp_new_space(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (tcp_should_expand_sndbuf(sk)) {
@@ -5054,14 +5430,19 @@ static void tcp_new_space(struct sock *sk)
 static void tcp_check_space(struct sock *sk)
 {
 	if (sock_flag(sk, SOCK_QUEUE_SHRUNK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_reset_flag(sk, SOCK_QUEUE_SHRUNK);
 		/* pairs with tcp_poll() */
 		smp_mb();
 		if (sk->sk_socket &&
 		    test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_new_space(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!test_bit(SOCK_NOSPACE, &sk->sk_socket->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_chrono_stop(sk, TCP_CHRONO_SNDBUF_LIMITED);
+}
 		}
 	}
 }
@@ -5077,6 +5458,7 @@ static inline void tcp_data_snd_check(struct sock *sk)
  */
 static void __tcp_ack_snd_check(struct sock *sk, int ofo_possible)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	    /* More than one full frame received... */
@@ -5118,6 +5500,7 @@ static inline void tcp_ack_snd_check(struct sock *sk)
 
 static void tcp_check_urg(struct sock *sk, const struct tcphdr *th)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	u32 ptr = ntohs(th->urg_ptr);
 
@@ -5184,14 +5567,18 @@ static void tcp_check_urg(struct sock *sk, const struct tcphdr *th)
 /* This is the 'fast' part of urgent handling. */
 static void tcp_urg(struct sock *sk, struct sk_buff *skb, const struct tcphdr *th)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	/* Check if we get a new urgent pointer - normally not. */
 	if (th->urg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_check_urg(sk, th);
+}
 
 	/* Do we wait for any urgent data? - normally not... */
 	if (tp->urg_data == TCP_URG_NOTYET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		u32 ptr = tp->urg_seq - ntohl(th->seq) + (th->doff * 4) -
 			  th->syn;
 
@@ -5199,10 +5586,15 @@ static void tcp_urg(struct sock *sk, struct sk_buff *skb, const struct tcphdr *t
 		if (ptr < skb->len) {
 			u8 tmp;
 			if (skb_copy_bits(skb, ptr, &tmp, 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				BUG();
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->urg_data = TCP_URG_VALID | tmp;
 			if (!sock_flag(sk, SOCK_DEAD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sk->sk_data_ready(sk);
+}
 		}
 	}
 }
@@ -5217,6 +5609,7 @@ static void tcp_urg(struct sock *sk, struct sk_buff *skb, const struct tcphdr *t
  */
 static bool tcp_reset_check(const struct sock *sk, const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	return unlikely(TCP_SKB_CB(skb)->seq == (tp->rcv_nxt - 1) &&
@@ -5230,6 +5623,7 @@ static bool tcp_reset_check(const struct sock *sk, const struct sk_buff *skb)
 static bool tcp_validate_incoming(struct sock *sk, struct sk_buff *skb,
 				  const struct tcphdr *th, int syn_inerr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	bool rst_seq_match = false;
 
@@ -5237,8 +5631,11 @@ static bool tcp_validate_incoming(struct sock *sk, struct sk_buff *skb,
 	if (tcp_fast_parse_options(sock_net(sk), skb, th, tp) &&
 	    tp->rx_opt.saw_tstamp &&
 	    tcp_paws_discard(sk, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!th->rst) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NET_INC_STATS(sock_net(sk), LINUX_MIB_PAWSESTABREJECTED);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!tcp_oow_rate_limited(sock_net(sk), skb,
 						  LINUX_MIB_TCPACKSKIPPEDPAWS,
 						  &tp->last_oow_ack_time))
@@ -5257,13 +5654,16 @@ static bool tcp_validate_incoming(struct sock *sk, struct sk_buff *skb,
 		 * bit is set, if so drop the segment and return)".
 		 */
 		if (!th->rst) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (th->syn)
 				goto syn_challenge;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!tcp_oow_rate_limited(sock_net(sk), skb,
 						  LINUX_MIB_TCPACKSKIPPEDSEQ,
 						  &tp->last_oow_ack_time))
 				tcp_send_dupack(sk, skb);
 		} else if (tcp_reset_check(sk, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_reset(sk);
 		}
 		goto discard;
@@ -5282,25 +5682,34 @@ static bool tcp_validate_incoming(struct sock *sk, struct sk_buff *skb,
 		 */
 		if (TCP_SKB_CB(skb)->seq == tp->rcv_nxt ||
 		    tcp_reset_check(sk, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rst_seq_match = true;
 		} else if (tcp_is_sack(tp) && tp->rx_opt.num_sacks > 0) {
 			struct tcp_sack_block *sp = &tp->selective_acks[0];
 			int max_sack = sp[0].end_seq;
 			int this_sack;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			for (this_sack = 1; this_sack < tp->rx_opt.num_sacks;
 			     ++this_sack) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				max_sack = after(sp[this_sack].end_seq,
 						 max_sack) ?
 					sp[this_sack].end_seq : max_sack;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (TCP_SKB_CB(skb)->seq == max_sack)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rst_seq_match = true;
+}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rst_seq_match)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_reset(sk);
+}
 		else {
 			/* Disable TFO if RST is out-of-order
 			 * and no data has been received
@@ -5309,6 +5718,7 @@ static bool tcp_validate_incoming(struct sock *sk, struct sk_buff *skb,
 			if (tp->syn_fastopen && !tp->data_segs_in &&
 			    sk->sk_state == TCP_ESTABLISHED)
 				tcp_fastopen_active_disable(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_send_challenge_ack(sk, skb);
 		}
 		goto discard;
@@ -5322,12 +5732,17 @@ static bool tcp_validate_incoming(struct sock *sk, struct sk_buff *skb,
 	if (th->syn) {
 syn_challenge:
 		if (syn_inerr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			TCP_INC_STATS(sock_net(sk), TCP_MIB_INERRS);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPSYNCHALLENGE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_send_challenge_ack(sk, skb);
 		goto discard;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 
 discard:
@@ -5366,7 +5781,9 @@ void tcp_rcv_established(struct sock *sk, struct sk_buff *skb,
 
 	tcp_mstamp_refresh(tp);
 	if (unlikely(!sk->sk_rx_dst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_csk(sk)->icsk_af_ops->sk_rx_dst_set(sk, skb);
+}
 	/*
 	 *	Header prediction.
 	 *	The code loosely follows the one in the famous
@@ -5652,6 +6069,7 @@ static int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,
 		if (tp->rx_opt.saw_tstamp && tp->rx_opt.rcv_tsecr &&
 		    !between(tp->rx_opt.rcv_tsecr, tp->retrans_stamp,
 			     tcp_time_stamp(tp))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NET_INC_STATS(sock_net(sk),
 					LINUX_MIB_PAWSACTIVEREJECTED);
 			goto reset_and_undo;
@@ -5704,7 +6122,9 @@ static int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,
 		tp->snd_wnd = ntohs(th->window);
 
 		if (!tp->rx_opt.wscale_ok) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->rx_opt.snd_wscale = tp->rx_opt.rcv_wscale = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->window_clamp = min(tp->window_clamp, 65535U);
 		}
 
@@ -5715,11 +6135,14 @@ static int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,
 			tp->advmss	    -= TCPOLEN_TSTAMP_ALIGNED;
 			tcp_store_ts_recent(tp);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->tcp_header_len = sizeof(struct tcphdr);
 		}
 
 		if (tcp_is_sack(tp) && sysctl_tcp_fack)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_enable_fack(tp);
+}
 
 		tcp_mtup_init(sk);
 		tcp_sync_mss(sk, icsk->icsk_pmtu_cookie);
@@ -5742,7 +6165,9 @@ static int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,
 			sk_wake_async(sk, SOCK_WAKE_IO, POLL_OUT);
 		}
 		if (fastopen_fail)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
 		if (sk->sk_write_pending ||
 		    icsk->icsk_accept_queue.rskq_defer_accept ||
 		    icsk->icsk_ack.pingpong) {
@@ -5769,6 +6194,7 @@ static int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,
 
 	/* No ACK in the segment */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (th->rst) {
 		/* rfc793:
 		 * "If the RST bit is set
@@ -5784,6 +6210,7 @@ static int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,
 	    tcp_paws_reject(&tp->rx_opt, 0))
 		goto discard_and_undo;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (th->syn) {
 		/* We see SYN without ACK. It is attempt of
 		 * simultaneous connect with crossed SYNs.
@@ -5792,14 +6219,17 @@ static int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,
 		tcp_set_state(sk, TCP_SYN_RECV);
 
 		if (tp->rx_opt.saw_tstamp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->rx_opt.tstamp_ok = 1;
 			tcp_store_ts_recent(tp);
 			tp->tcp_header_len =
 				sizeof(struct tcphdr) + TCPOLEN_TSTAMP_ALIGNED;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->tcp_header_len = sizeof(struct tcphdr);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->rcv_nxt = TCP_SKB_CB(skb)->seq + 1;
 		tp->copied_seq = tp->rcv_nxt;
 		tp->rcv_wup = TCP_SKB_CB(skb)->seq + 1;
@@ -5859,6 +6289,7 @@ static int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,
 
 int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	const struct tcphdr *th = tcp_hdr(skb);
@@ -5872,7 +6303,9 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 
 	case TCP_LISTEN:
 		if (th->ack)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
+}
 
 		if (th->rst)
 			goto discard;
@@ -5888,7 +6321,9 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 			local_bh_enable();
 
 			if (!acceptable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 1;
+}
 			consume_skb(skb);
 			return 0;
 		}
@@ -5899,7 +6334,9 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 		tcp_mstamp_refresh(tp);
 		queued = tcp_rcv_synsent_state_process(sk, skb, th);
 		if (queued >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return queued;
+}
 
 		/* Do step6 onward by hand. */
 		tcp_urg(sk, skb, th);
@@ -5912,6 +6349,7 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 	tp->rx_opt.saw_tstamp = 0;
 	req = tp->fastopen_rsk;
 	if (req) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON_ONCE(sk->sk_state != TCP_SYN_RECV &&
 		    sk->sk_state != TCP_FIN_WAIT1);
 
@@ -5923,7 +6361,9 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 		goto discard;
 
 	if (!tcp_validate_incoming(sk, skb, th, 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* step 5: check the ACK field */
 	acceptable = tcp_ack(sk, skb, FLAG_SLOWPATH |
@@ -5931,20 +6371,27 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 				      FLAG_NO_CHALLENGE_ACK) > 0;
 
 	if (!acceptable) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sk->sk_state == TCP_SYN_RECV)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;	/* send one RST */
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_send_challenge_ack(sk, skb);
 		goto discard;
 	}
 	switch (sk->sk_state) {
 	case TCP_SYN_RECV:
 		if (!tp->srtt_us)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_synack_rtt_meas(sk, req);
+}
 
 		/* Once we leave TCP_SYN_RECV, we no longer need req
 		 * so release it.
 		 */
 		if (req) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_csk(sk)->icsk_retransmits = 0;
 			reqsk_fastopen_remove(sk, req, false);
 		} else {
@@ -5966,7 +6413,9 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 		 * sk->sk_sleep == NULL and sk->sk_socket == NULL.
 		 */
 		if (sk->sk_socket)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_wake_async(sk, SOCK_WAKE_IO, POLL_OUT);
+}
 
 		tp->snd_una = TCP_SKB_CB(skb)->ack_seq;
 		tp->snd_wnd = ntohs(th->window) << tp->rx_opt.snd_wscale;
@@ -6026,22 +6475,31 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 		}
 
 		if (tp->linger2 < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_done(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPABORTONDATA);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
 		}
 		if (TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(skb)->seq &&
 		    after(TCP_SKB_CB(skb)->end_seq - th->fin, tp->rcv_nxt)) {
 			/* Receive out of order FIN after close() */
 			if (tp->syn_fastopen && th->fin)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_fastopen_active_disable(sk);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_done(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPABORTONDATA);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
 		}
 
 		tmo = tcp_fin_time(sk);
 		if (tmo > TCP_TIMEWAIT_LEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_csk_reset_keepalive_timer(sk, tmo - TCP_TIMEWAIT_LEN);
 		} else if (th->fin || sock_owned_by_user(sk)) {
 			/* Bad case. We could lose such FIN otherwise.
@@ -6052,6 +6510,7 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 			 */
 			inet_csk_reset_keepalive_timer(sk, tmo);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_time_wait(sk, TCP_FIN_WAIT2, tmo);
 			goto discard;
 		}
@@ -6060,6 +6519,7 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 
 	case TCP_CLOSING:
 		if (tp->snd_una == tp->write_seq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_time_wait(sk, TCP_TIME_WAIT, 0);
 			goto discard;
 		}
@@ -6093,7 +6553,9 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 		if (sk->sk_shutdown & RCV_SHUTDOWN) {
 			if (TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(skb)->seq &&
 			    after(TCP_SKB_CB(skb)->end_seq - th->fin, tp->rcv_nxt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPABORTONDATA);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_reset(sk);
 				return 1;
 			}
@@ -6115,12 +6577,14 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 discard:
 		tcp_drop(sk, skb);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(tcp_rcv_state_process);
 
 static inline void pr_drop_req(struct request_sock *req, __u16 port, int family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_request_sock *ireq = inet_rsk(req);
 
 	if (family == AF_INET)
@@ -6150,6 +6614,7 @@ static void tcp_ecn_create_request(struct request_sock *req,
 				   const struct sock *listen_sk,
 				   const struct dst_entry *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcphdr *th = tcp_hdr(skb);
 	const struct net *net = sock_net(listen_sk);
 	bool th_ecn = th->ece && th->cwr;
@@ -6157,12 +6622,17 @@ static void tcp_ecn_create_request(struct request_sock *req,
 	u32 ecn_ok_dst;
 
 	if (!th_ecn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ect = !INET_ECN_is_not_ect(TCP_SKB_CB(skb)->ip_dsfield);
 	ecn_ok_dst = dst_feature(dst, DST_FEATURE_ECN_MASK);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ecn_ok = net->ipv4.sysctl_tcp_ecn || ecn_ok_dst;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((!ect && ecn_ok) || tcp_ca_needs_ecn(listen_sk) ||
 	    (ecn_ok_dst & DST_FEATURE_ECN_CA) ||
 	    tcp_bpf_ca_needs_ecn((struct sock *)req))
@@ -6173,6 +6643,7 @@ static void tcp_openreq_init(struct request_sock *req,
 			     const struct tcp_options_received *rx_opt,
 			     struct sk_buff *skb, const struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_request_sock *ireq = inet_rsk(req);
 
 	req->rsk_rcv_wnd = 0;		/* So that tcp_send_synack() knows! */
@@ -6202,6 +6673,7 @@ struct request_sock *inet_reqsk_alloc(const struct request_sock_ops *ops,
 					       attach_listener);
 
 	if (req) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct inet_request_sock *ireq = inet_rsk(req);
 
 		ireq->ireq_opt = NULL;
@@ -6225,6 +6697,7 @@ static bool tcp_syn_flood_action(const struct sock *sk,
 				 const struct sk_buff *skb,
 				 const char *proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct request_sock_queue *queue = &inet_csk(sk)->icsk_accept_queue;
 	const char *msg = "Dropping request";
 	bool want_cookie = false;
@@ -6253,12 +6726,15 @@ static void tcp_reqsk_record_syn(const struct sock *sk,
 				 const struct sk_buff *skb)
 {
 	if (tcp_sk(sk)->save_syn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		u32 len = skb_network_header_len(skb) + tcp_hdrlen(skb);
 		u32 *copy;
 
 		copy = kmalloc(len + sizeof(u32), GFP_ATOMIC);
 		if (copy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copy[0] = len;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(&copy[1], skb_network_header(skb), len);
 			req->saved_syn = copy;
 		}
@@ -6286,12 +6762,14 @@ int tcp_conn_request(struct request_sock_ops *rsk_ops,
 	 */
 	if ((net->ipv4.sysctl_tcp_syncookies == 2 ||
 	     inet_csk_reqsk_queue_is_full(sk)) && !isn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		want_cookie = tcp_syn_flood_action(sk, skb, rsk_ops->slab_name);
 		if (!want_cookie)
 			goto drop;
 	}
 
 	if (sk_acceptq_is_full(sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_LISTENOVERFLOWS);
 		goto drop;
 	}
@@ -6310,7 +6788,9 @@ int tcp_conn_request(struct request_sock_ops *rsk_ops,
 			  want_cookie ? NULL : &foc);
 
 	if (want_cookie && !tmp_opt.saw_tstamp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_clear_options(&tmp_opt);
+}
 
 	tmp_opt.tstamp_ok = tmp_opt.saw_tstamp;
 	tcp_openreq_init(req, &tmp_opt, skb, sk);
@@ -6355,10 +6835,13 @@ int tcp_conn_request(struct request_sock_ops *rsk_ops,
 	tcp_ecn_create_request(req, skb, sk, dst);
 
 	if (want_cookie) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		isn = cookie_init_sequence(af_ops, sk, skb, &req->mss);
 		req->cookie_ts = tmp_opt.tstamp_ok;
 		if (!tmp_opt.tstamp_ok)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_rsk(req)->ecn_ok = 0;
+}
 	}
 
 	tcp_rsk(req)->snt_isn = isn;
@@ -6369,6 +6852,7 @@ int tcp_conn_request(struct request_sock_ops *rsk_ops,
 		fastopen_sk = tcp_try_fastopen(sk, skb, req, &foc);
 	}
 	if (fastopen_sk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		af_ops->send_synack(fastopen_sk, dst, &fl, req,
 				    &foc, TCP_SYNACK_FASTOPEN);
 		/* Add the child socket directly into the accept queue */
@@ -6385,6 +6869,7 @@ int tcp_conn_request(struct request_sock_ops *rsk_ops,
 				    !want_cookie ? TCP_SYNACK_NORMAL :
 						   TCP_SYNACK_COOKIE);
 		if (want_cookie) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			reqsk_free(req);
 			return 0;
 		}
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index cab4b93..0a605f0 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -108,6 +110,7 @@ static u32 tcp_v4_init_ts_off(const struct net *net, const struct sk_buff *skb)
 
 int tcp_twsk_unique(struct sock *sk, struct sock *sktw, void *twp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_timewait_sock *tcptw = tcp_twsk(sktw);
 	struct tcp_sock *tp = tcp_sk(sk);
 
@@ -153,17 +156,25 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 	struct inet_timewait_death_row *tcp_death_row = &sock_net(sk)->ipv4.tcp_death_row;
 
 	if (addr_len < sizeof(struct sockaddr_in))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (usin->sin_family != AF_INET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
 	nexthop = daddr = usin->sin_addr.s_addr;
 	inet_opt = rcu_dereference_protected(inet->inet_opt,
 					     lockdep_sock_is_held(sk));
 	if (inet_opt && inet_opt->opt.srr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!daddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nexthop = inet_opt->opt.faddr;
 	}
 
@@ -175,13 +186,18 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 			      IPPROTO_TCP,
 			      orig_sport, orig_dport, sk);
 	if (IS_ERR(rt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(rt);
 		if (err == -ENETUNREACH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			IP_INC_STATS(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
 	}
 
 	if (rt->rt_flags & (RTCF_MULTICAST | RTCF_BROADCAST)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip_rt_put(rt);
 		return -ENETUNREACH;
 	}
@@ -198,7 +214,9 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 		tp->rx_opt.ts_recent	   = 0;
 		tp->rx_opt.ts_recent_stamp = 0;
 		if (likely(!tp->repair))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->write_seq	   = 0;
+}
 	}
 
 	inet->inet_dport = usin->sin_port;
@@ -206,7 +224,9 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 
 	inet_csk(sk)->icsk_ext_hdr_len = 0;
 	if (inet_opt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_csk(sk)->icsk_ext_hdr_len = inet_opt->opt.optlen;
+}
 
 	tp->rx_opt.mss_clamp = TCP_MSS_DEFAULT;
 
@@ -225,6 +245,7 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 	rt = ip_route_newports(fl4, rt, orig_sport, orig_dport,
 			       inet->inet_sport, inet->inet_dport, sk);
 	if (IS_ERR(rt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(rt);
 		rt = NULL;
 		goto failure;
@@ -248,7 +269,9 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 	inet->inet_id = tp->write_seq ^ jiffies;
 
 	if (tcp_fastopen_defer_connect(sk, &err))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	if (err)
 		goto failure;
 
@@ -257,6 +280,7 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 	if (err)
 		goto failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 failure:
@@ -279,6 +303,7 @@ EXPORT_SYMBOL(tcp_v4_connect);
  */
 void tcp_v4_mtu_reduced(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct dst_entry *dst;
 	u32 mtu;
@@ -315,6 +340,7 @@ EXPORT_SYMBOL(tcp_v4_mtu_reduced);
 
 static void do_redirect(struct sk_buff *skb, struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dst_entry *dst = __sk_dst_check(sk, 0);
 
 	if (dst)
@@ -325,6 +351,7 @@ static void do_redirect(struct sk_buff *skb, struct sock *sk)
 /* handle ICMP messages on TCP_NEW_SYN_RECV request sockets */
 void tcp_req_err(struct sock *sk, u32 seq, bool abort)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct request_sock *req = inet_reqsk(sk);
 	struct net *net = sock_net(sk);
 
@@ -557,6 +584,7 @@ void tcp_v4_err(struct sk_buff *icmp_skb, u32 info)
 
 void __tcp_v4_send_check(struct sk_buff *skb, __be32 saddr, __be32 daddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcphdr *th = tcp_hdr(skb);
 
 	if (skb->ip_summed == CHECKSUM_PARTIAL) {
@@ -574,6 +602,7 @@ void __tcp_v4_send_check(struct sk_buff *skb, __be32 saddr, __be32 daddr)
 /* This routine computes an IPv4 TCP checksum. */
 void tcp_v4_send_check(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_sock *inet = inet_sk(sk);
 
 	__tcp_v4_send_check(skb, inet->inet_saddr, inet->inet_daddr);
@@ -595,6 +624,7 @@ EXPORT_SYMBOL(tcp_v4_send_check);
 
 static void tcp_v4_send_reset(const struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcphdr *th = tcp_hdr(skb);
 	struct {
 		struct tcphdr th;
@@ -1358,13 +1388,16 @@ struct sock *tcp_v4_syn_recv_sock(const struct sock *sk, struct sk_buff *skb,
 	newsk->sk_bound_dev_if = ireq->ir_iif;
 	newinet->inet_saddr   = ireq->ir_loc_addr;
 	inet_opt	      = rcu_dereference(ireq->ireq_opt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(newinet->inet_opt, inet_opt);
 	newinet->mc_index     = inet_iif(skb);
 	newinet->mc_ttl	      = ip_hdr(skb)->ttl;
 	newinet->rcv_tos      = ip_hdr(skb)->tos;
 	inet_csk(newsk)->icsk_ext_hdr_len = 0;
 	if (inet_opt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_csk(newsk)->icsk_ext_hdr_len = inet_opt->opt.optlen;
+}
 	newinet->inet_id = newtp->write_seq ^ jiffies;
 
 	if (!dst) {
@@ -1404,11 +1437,14 @@ struct sock *tcp_v4_syn_recv_sock(const struct sock *sk, struct sk_buff *skb,
 		goto put_and_exit;
 	*own_req = inet_ehash_nolisten(newsk, req_to_sk(req_unhash));
 	if (likely(*own_req)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_move_syn(newtp, req);
 		ireq->ireq_opt = NULL;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		newinet->inet_opt = NULL;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return newsk;
 
 exit_overflow:
@@ -1432,7 +1468,9 @@ static struct sock *tcp_v4_cookie_check(struct sock *sk, struct sk_buff *skb)
 	const struct tcphdr *th = tcp_hdr(skb);
 
 	if (!th->syn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk = cookie_v4_check(sk, skb);
+}
 #endif
 	return sk;
 }
@@ -1457,6 +1495,7 @@ int tcp_v4_do_rcv(struct sock *sk, struct sk_buff *skb)
 		if (dst) {
 			if (inet_sk(sk)->rx_dst_ifindex != skb->skb_iif ||
 			    !dst->ops->check(dst, 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dst_release(dst);
 				sk->sk_rx_dst = NULL;
 			}
@@ -1474,19 +1513,26 @@ int tcp_v4_do_rcv(struct sock *sk, struct sk_buff *skb)
 		if (!nsk)
 			goto discard;
 		if (nsk != sk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (tcp_child_process(sk, nsk, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rsk = nsk;
 				goto reset;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
 		}
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_rps_save_rxhash(sk, skb);
+}
 
 	if (tcp_rcv_state_process(sk, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rsk = sk;
 		goto reset;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 reset:
@@ -1502,6 +1548,7 @@ int tcp_v4_do_rcv(struct sock *sk, struct sk_buff *skb)
 
 csum_err:
 	TCP_INC_STATS(sock_net(sk), TCP_MIB_CSUMERRORS);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	TCP_INC_STATS(sock_net(sk), TCP_MIB_INERRS);
 	goto discard;
 }
@@ -1514,16 +1561,23 @@ int tcp_v4_early_demux(struct sk_buff *skb)
 	struct sock *sk;
 
 	if (skb->pkt_type != PACKET_HOST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!pskb_may_pull(skb, skb_transport_offset(skb) + sizeof(struct tcphdr)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iph = ip_hdr(skb);
 	th = tcp_hdr(skb);
 
 	if (th->doff < sizeof(struct tcphdr) / 4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	sk = __inet_lookup_established(dev_net(skb->dev), &tcp_hashinfo,
 				       iph->saddr, th->source,
@@ -1536,12 +1590,15 @@ int tcp_v4_early_demux(struct sk_buff *skb)
 			struct dst_entry *dst = READ_ONCE(sk->sk_rx_dst);
 
 			if (dst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dst = dst_check(dst, 0);
+}
 			if (dst &&
 			    inet_sk(sk)->rx_dst_ifindex == skb->skb_iif)
 				skb_dst_set_noref(skb, dst);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1564,10 +1621,13 @@ bool tcp_add_backlog(struct sock *sk, struct sk_buff *skb)
 	skb_condense(skb);
 
 	if (unlikely(sk_add_backlog(sk, skb, limit))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bh_unlock_sock(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPBACKLOGDROP);
 		return true;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 EXPORT_SYMBOL(tcp_add_backlog);
@@ -1589,6 +1649,7 @@ EXPORT_SYMBOL(tcp_filter);
 
 static void tcp_v4_restore_cb(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memmove(IPCB(skb), &TCP_SKB_CB(skb)->header.h4,
 		sizeof(struct inet_skb_parm));
 }
@@ -1666,16 +1727,19 @@ int tcp_v4_rcv(struct sk_buff *skb)
 		goto do_time_wait;
 
 	if (sk->sk_state == TCP_NEW_SYN_RECV) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct request_sock *req = inet_reqsk(sk);
 		struct sock *nsk;
 
 		sk = req->rsk_listener;
 		if (unlikely(tcp_v4_inbound_md5_hash(sk, skb))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_drops_add(sk, skb);
 			reqsk_put(req);
 			goto discard_it;
 		}
 		if (unlikely(sk->sk_state != TCP_LISTEN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_csk_reqsk_queue_drop_and_put(sk, req);
 			goto lookup;
 		}
@@ -1692,13 +1756,16 @@ int tcp_v4_rcv(struct sk_buff *skb)
 			nsk = tcp_check_req(sk, skb, req, false);
 		}
 		if (!nsk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			reqsk_put(req);
 			goto discard_and_relse;
 		}
 		if (nsk == sk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			reqsk_put(req);
 			tcp_v4_restore_cb(skb);
 		} else if (tcp_child_process(sk, nsk, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_v4_send_reset(nsk, skb);
 			goto discard_and_relse;
 		} else {
@@ -1707,6 +1774,7 @@ int tcp_v4_rcv(struct sk_buff *skb)
 		}
 	}
 	if (unlikely(iph->ttl < inet_sk(sk)->min_ttl)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__NET_INC_STATS(net, LINUX_MIB_TCPMINTTLDROP);
 		goto discard_and_relse;
 	}
@@ -1742,12 +1810,14 @@ int tcp_v4_rcv(struct sk_buff *skb)
 	} else if (tcp_add_backlog(sk, skb)) {
 		goto discard_and_relse;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bh_unlock_sock(sk);
 
 put_and_return:
 	if (refcounted)
 		sock_put(sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 
 no_tcp_socket:
@@ -1773,23 +1843,30 @@ int tcp_v4_rcv(struct sk_buff *skb)
 discard_and_relse:
 	sk_drops_add(sk, skb);
 	if (refcounted)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_put(sk);
+}
 	goto discard_it;
 
 do_time_wait:
 	if (!xfrm4_policy_check(NULL, XFRM_POLICY_IN, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_twsk_put(inet_twsk(sk));
 		goto discard_it;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_v4_fill_cb(skb, iph, th);
 
 	if (tcp_checksum_complete(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_twsk_put(inet_twsk(sk));
 		goto csum_error;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (tcp_timewait_state_process(inet_twsk(sk), skb, th)) {
 	case TCP_TW_SYN: {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct sock *sk2 = inet_lookup_listener(dev_net(skb->dev),
 							&tcp_hashinfo, skb,
 							__tcp_hdrlen(th),
@@ -1798,6 +1875,7 @@ int tcp_v4_rcv(struct sk_buff *skb)
 							inet_iif(skb),
 							sdif);
 		if (sk2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_twsk_deschedule_put(inet_twsk(sk));
 			sk = sk2;
 			tcp_v4_restore_cb(skb);
@@ -1826,6 +1904,7 @@ static struct timewait_sock_ops tcp_timewait_sock_ops = {
 
 void inet_sk_rx_dst_set(struct sock *sk, const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dst_entry *dst = skb_dst(skb);
 
 	if (dst && dst_hold_safe(dst)) {
@@ -1868,6 +1947,7 @@ static const struct tcp_sock_af_ops tcp_sock_ipv4_specific = {
  */
 static int tcp_v4_init_sock(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
 	tcp_init_sock(sk);
@@ -1883,6 +1963,7 @@ static int tcp_v4_init_sock(struct sock *sk)
 
 void tcp_v4_destroy_sock(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	tcp_clear_xmit_timers(sk);
@@ -1903,8 +1984,11 @@ void tcp_v4_destroy_sock(struct sock *sk)
 #ifdef CONFIG_TCP_MD5SIG
 	/* Clean up the MD5 key list, if any */
 	if (tp->md5sig_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_clear_md5_list(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_rcu(tp->md5sig_info, rcu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->md5sig_info = NULL;
 	}
 #endif
@@ -1974,6 +2058,7 @@ static void *listening_get_idx(struct seq_file *seq, loff_t *pos)
 	st->offset = 0;
 	rc = listening_get_next(seq, NULL);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (rc && *pos) {
 		rc = listening_get_next(seq, rc);
 		--*pos;
@@ -1983,6 +2068,7 @@ static void *listening_get_idx(struct seq_file *seq, loff_t *pos)
 
 static inline bool empty_bucket(const struct tcp_iter_state *st)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hlist_nulls_empty(&tcp_hashinfo.ehash[st->bucket].chain);
 }
 
@@ -1997,6 +2083,7 @@ static void *established_get_first(struct seq_file *seq)
 	void *rc = NULL;
 
 	st->offset = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (; st->bucket <= tcp_hashinfo.ehash_mask; ++st->bucket) {
 		struct sock *sk;
 		struct hlist_nulls_node *node;
@@ -2033,6 +2120,7 @@ static void *established_get_next(struct seq_file *seq, void *cur)
 
 	sk = sk_nulls_next(sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_nulls_for_each_from(sk, node) {
 		if (sk->sk_family == st->family && net_eq(sock_net(sk), net))
 			return sk;
@@ -2051,6 +2139,7 @@ static void *established_get_idx(struct seq_file *seq, loff_t pos)
 	st->bucket = 0;
 	rc = established_get_first(seq);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (rc && pos) {
 		rc = established_get_next(seq, rc);
 		--pos;
@@ -2067,6 +2156,7 @@ static void *tcp_get_idx(struct seq_file *seq, loff_t pos)
 	rc	  = listening_get_idx(seq, &pos);
 
 	if (!rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		st->state = TCP_SEQ_STATE_ESTABLISHED;
 		rc	  = established_get_idx(seq, pos);
 	}
@@ -2112,6 +2202,7 @@ static void *tcp_seq_start(struct seq_file *seq, loff_t *pos)
 	struct tcp_iter_state *st = seq->private;
 	void *rc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (*pos && *pos == st->last_pos) {
 		rc = tcp_seek_last_pos(seq);
 		if (rc)
@@ -2135,6 +2226,7 @@ static void *tcp_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 	void *rc = NULL;
 
 	if (v == SEQ_START_TOKEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = tcp_get_idx(seq, 0);
 		goto out;
 	}
@@ -2177,6 +2269,7 @@ static void tcp_seq_stop(struct seq_file *seq, void *v)
 
 int tcp_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_seq_afinfo *afinfo = PDE_DATA(inode);
 	struct tcp_iter_state *s;
 	int err;
@@ -2205,7 +2298,9 @@ int tcp_proc_register(struct net *net, struct tcp_seq_afinfo *afinfo)
 	p = proc_create_data(afinfo->name, S_IRUGO, net->proc_net,
 			     afinfo->seq_fops, afinfo);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = -ENOMEM;
+}
 	return rc;
 }
 EXPORT_SYMBOL(tcp_proc_register);
@@ -2219,6 +2314,7 @@ EXPORT_SYMBOL(tcp_proc_unregister);
 static void get_openreq4(const struct request_sock *req,
 			 struct seq_file *f, int i)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_request_sock *ireq = inet_rsk(req);
 	long delta = req->rsk_timer.expires - jiffies;
 
@@ -2252,6 +2348,7 @@ static void get_tcp4_sock(struct sock *sk, struct seq_file *f, int i)
 	const struct fastopen_queue *fastopenq = &icsk->icsk_accept_queue.fastopenq;
 	__be32 dest = inet->inet_daddr;
 	__be32 src = inet->inet_rcv_saddr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__u16 destp = ntohs(inet->inet_dport);
 	__u16 srcp = ntohs(inet->inet_sport);
 	int rx_queue;
@@ -2312,6 +2409,7 @@ static void get_timewait4_sock(const struct inet_timewait_sock *tw,
 
 	dest  = tw->tw_daddr;
 	src   = tw->tw_rcv_saddr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	destp = ntohs(tw->tw_dport);
 	srcp  = ntohs(tw->tw_sport);
 
@@ -2331,6 +2429,7 @@ static int tcp4_seq_show(struct seq_file *seq, void *v)
 
 	seq_setwidth(seq, TMPSZ - 1);
 	if (v == SEQ_START_TOKEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_puts(seq, "  sl  local_address rem_address   st tx_queue "
 			   "rx_queue tr tm->when retrnsmt   uid  timeout "
 			   "inode");
@@ -2388,6 +2487,7 @@ int __init tcp4_proc_init(void)
 
 void tcp4_proc_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&tcp4_net_ops);
 }
 #endif /* CONFIG_PROC_FS */
@@ -2454,7 +2554,9 @@ static int __net_init tcp_sk_init(struct net *net)
 
 	net->ipv4.tcp_sk = alloc_percpu(struct sock *);
 	if (!net->ipv4.tcp_sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	for_each_possible_cpu(cpu) {
 		struct sock *sk;
@@ -2519,5 +2621,7 @@ static struct pernet_operations __net_initdata tcp_sk_ops = {
 void __init tcp_v4_init(void)
 {
 	if (register_pernet_subsys(&tcp_sk_ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Failed to create the TCP control socket.\n");
 }
+}
diff --git a/net/ipv4/tcp_metrics.c b/net/ipv4/tcp_metrics.c
index 0f0d740..8d44025 100644
--- a/net/ipv4/tcp_metrics.c
+++ b/net/ipv4/tcp_metrics.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/rcupdate.h>
 #include <linux/spinlock.h>
@@ -55,6 +57,7 @@ struct tcp_metrics_block {
 
 static inline struct net *tm_net(struct tcp_metrics_block *tm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return read_pnet(&tm->tcpm_net);
 }
 
@@ -103,15 +106,25 @@ static void tcpm_suck_dst(struct tcp_metrics_block *tm,
 
 	val = 0;
 	if (dst_metric_locked(dst, RTAX_RTT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		val |= 1 << TCP_METRIC_RTT;
+}
 	if (dst_metric_locked(dst, RTAX_RTTVAR))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		val |= 1 << TCP_METRIC_RTTVAR;
+}
 	if (dst_metric_locked(dst, RTAX_SSTHRESH))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		val |= 1 << TCP_METRIC_SSTHRESH;
+}
 	if (dst_metric_locked(dst, RTAX_CWND))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		val |= 1 << TCP_METRIC_CWND;
+}
 	if (dst_metric_locked(dst, RTAX_REORDERING))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		val |= 1 << TCP_METRIC_REORDERING;
+}
 	tm->tcpm_lock = val;
 
 	msval = dst_metric_raw(dst, RTAX_RTT);
@@ -136,8 +149,10 @@ static void tcpm_suck_dst(struct tcp_metrics_block *tm,
 static void tcpm_check_stamp(struct tcp_metrics_block *tm, struct dst_entry *dst)
 {
 	if (tm && unlikely(time_after(jiffies, tm->tcpm_stamp + TCP_METRICS_TIMEOUT)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcpm_suck_dst(tm, dst, false);
 }
+}
 
 #define TCP_METRICS_RECLAIM_DEPTH	5
 #define TCP_METRICS_RECLAIM_PTR		(struct tcp_metrics_block *) 0x1UL
@@ -162,10 +177,12 @@ static struct tcp_metrics_block *tcpm_new(struct dst_entry *dst,
 	 */
 	tm = __tcp_get_metrics(saddr, daddr, net, hash);
 	if (tm == TCP_METRICS_RECLAIM_PTR) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		reclaim = true;
 		tm = NULL;
 	}
 	if (tm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcpm_check_stamp(tm, dst);
 		goto out_unlock;
 	}
@@ -173,18 +190,26 @@ static struct tcp_metrics_block *tcpm_new(struct dst_entry *dst,
 	if (unlikely(reclaim)) {
 		struct tcp_metrics_block *oldest;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		oldest = deref_locked(tcp_metrics_hash[hash].chain);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (tm = deref_locked(oldest->tcpm_next); tm;
 		     tm = deref_locked(tm->tcpm_next)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (time_before(tm->tcpm_stamp, oldest->tcpm_stamp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				oldest = tm;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tm = oldest;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tm = kmalloc(sizeof(*tm), GFP_ATOMIC);
 		if (!tm)
 			goto out_unlock;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_pnet(&tm->tcpm_net, net);
 	tm->tcpm_saddr = *saddr;
 	tm->tcpm_daddr = *daddr;
@@ -204,9 +229,14 @@ static struct tcp_metrics_block *tcpm_new(struct dst_entry *dst,
 static struct tcp_metrics_block *tcp_get_encode(struct tcp_metrics_block *tm, int depth)
 {
 	if (tm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return tm;
+}
 	if (depth > TCP_METRICS_RECLAIM_DEPTH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return TCP_METRICS_RECLAIM_PTR;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -223,6 +253,7 @@ static struct tcp_metrics_block *__tcp_get_metrics(const struct inetpeer_addr *s
 		    addr_same(&tm->tcpm_daddr, daddr) &&
 		    net_eq(tm_net(tm), net))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		depth++;
 	}
 	return tcp_get_encode(tm, depth);
@@ -291,6 +322,7 @@ static struct tcp_metrics_block *tcp_get_metrics(struct sock *sk,
 			inetpeer_set_addr_v4(&daddr, inet_sk(sk)->inet_daddr);
 			hash = ipv4_addr_hash(inet_sk(sk)->inet_daddr);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inetpeer_set_addr_v6(&saddr, &sk->sk_v6_rcv_saddr);
 			inetpeer_set_addr_v6(&daddr, &sk->sk_v6_daddr);
 			hash = ipv6_addr_hash(&sk->sk_v6_daddr);
@@ -306,12 +338,15 @@ static struct tcp_metrics_block *tcp_get_metrics(struct sock *sk,
 
 	tm = __tcp_get_metrics(&saddr, &daddr, net, hash);
 	if (tm == TCP_METRICS_RECLAIM_PTR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tm = NULL;
+}
 	if (!tm && create)
 		tm = tcpm_new(dst, &saddr, &daddr, hash);
 	else
 		tcpm_check_stamp(tm, dst);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return tm;
 }
 
@@ -321,6 +356,7 @@ static struct tcp_metrics_block *tcp_get_metrics(struct sock *sk,
  */
 void tcp_update_metrics(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	struct dst_entry *dst = __sk_dst_get(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
@@ -332,8 +368,11 @@ void tcp_update_metrics(struct sock *sk)
 
 	sk_dst_confirm(sk);
 	if (sysctl_tcp_nometrics_save || !dst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	if (icsk->icsk_backoff || !tp->srtt_us) {
 		/* This session failed to estimate rtt. Why?
@@ -341,8 +380,11 @@ void tcp_update_metrics(struct sock *sk)
 		 * results.
 		 */
 		tm = tcp_get_metrics(sk, dst, false);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tm && !tcp_metric_locked(tm, TCP_METRIC_RTT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_metric_set(tm, TCP_METRIC_RTT, 0);
+}
 		goto out_unlock;
 	} else
 		tm = tcp_get_metrics(sk, dst, true);
@@ -378,7 +420,9 @@ void tcp_update_metrics(struct sock *sk)
 
 		var = tcp_metric_get(tm, TCP_METRIC_RTTVAR);
 		if (m >= var)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			var = m;
+}
 		else
 			var -= (var - m) >> 2;
 
@@ -388,16 +432,22 @@ void tcp_update_metrics(struct sock *sk)
 	if (tcp_in_initial_slowstart(tp)) {
 		/* Slow start still did not finish. */
 		if (!tcp_metric_locked(tm, TCP_METRIC_SSTHRESH)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = tcp_metric_get(tm, TCP_METRIC_SSTHRESH);
 			if (val && (tp->snd_cwnd >> 1) > val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_metric_set(tm, TCP_METRIC_SSTHRESH,
 					       tp->snd_cwnd >> 1);
+}
 		}
 		if (!tcp_metric_locked(tm, TCP_METRIC_CWND)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = tcp_metric_get(tm, TCP_METRIC_CWND);
 			if (tp->snd_cwnd > val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_metric_set(tm, TCP_METRIC_CWND,
 					       tp->snd_cwnd);
+}
 		}
 	} else if (!tcp_in_slow_start(tp) &&
 		   icsk->icsk_ca_state == TCP_CA_Open) {
@@ -405,7 +455,9 @@ void tcp_update_metrics(struct sock *sk)
 		if (!tcp_metric_locked(tm, TCP_METRIC_SSTHRESH))
 			tcp_metric_set(tm, TCP_METRIC_SSTHRESH,
 				       max(tp->snd_cwnd >> 1, tp->snd_ssthresh));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!tcp_metric_locked(tm, TCP_METRIC_CWND)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = tcp_metric_get(tm, TCP_METRIC_CWND);
 			tcp_metric_set(tm, TCP_METRIC_CWND, (val + tp->snd_cwnd) >> 1);
 		}
@@ -414,17 +466,25 @@ void tcp_update_metrics(struct sock *sk)
 		 * ssthresh may be also invalid.
 		 */
 		if (!tcp_metric_locked(tm, TCP_METRIC_CWND)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = tcp_metric_get(tm, TCP_METRIC_CWND);
 			tcp_metric_set(tm, TCP_METRIC_CWND,
 				       (val + tp->snd_ssthresh) >> 1);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!tcp_metric_locked(tm, TCP_METRIC_SSTHRESH)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = tcp_metric_get(tm, TCP_METRIC_SSTHRESH);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (val && tp->snd_ssthresh > val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_metric_set(tm, TCP_METRIC_SSTHRESH,
 					       tp->snd_ssthresh);
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!tcp_metric_locked(tm, TCP_METRIC_REORDERING)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = tcp_metric_get(tm, TCP_METRIC_REORDERING);
 			if (val < tp->reordering &&
 			    tp->reordering != net->ipv4.sysctl_tcp_reordering)
@@ -441,6 +501,7 @@ void tcp_update_metrics(struct sock *sk)
 
 void tcp_init_metrics(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dst_entry *dst = __sk_dst_get(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct tcp_metrics_block *tm;
@@ -450,33 +511,44 @@ void tcp_init_metrics(struct sock *sk)
 	if (!dst)
 		goto reset;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	tm = tcp_get_metrics(sk, dst, true);
 	if (!tm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		goto reset;
 	}
 
 	if (tcp_metric_locked(tm, TCP_METRIC_CWND))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->snd_cwnd_clamp = tcp_metric_get(tm, TCP_METRIC_CWND);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	val = tcp_metric_get(tm, TCP_METRIC_SSTHRESH);
 	if (val) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->snd_ssthresh = val;
 		if (tp->snd_ssthresh > tp->snd_cwnd_clamp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->snd_ssthresh = tp->snd_cwnd_clamp;
+}
 	} else {
 		/* ssthresh may have been reduced unnecessarily during.
 		 * 3WHS. Restore it back to its initial default.
 		 */
 		tp->snd_ssthresh = TCP_INFINITE_SSTHRESH;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	val = tcp_metric_get(tm, TCP_METRIC_REORDERING);
 	if (val && tp->reordering != val) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_disable_fack(tp);
 		tp->reordering = val;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crtt = tcp_metric_get(tm, TCP_METRIC_RTT);
 	rcu_read_unlock();
 reset:
@@ -522,7 +594,9 @@ void tcp_init_metrics(struct sock *sk)
 	 * retransmission has occurred.
 	 */
 	if (tp->total_retrans > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->snd_cwnd = 1;
+}
 	else
 		tp->snd_cwnd = tcp_init_cwnd(tp, dst);
 	tp->snd_cwnd_stamp = tcp_jiffies32;
@@ -534,7 +608,9 @@ bool tcp_peer_is_proven(struct request_sock *req, struct dst_entry *dst)
 	bool ret;
 
 	if (!dst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	rcu_read_lock();
 	tm = __tcp_get_metrics_req(req, dst);
@@ -562,6 +638,7 @@ void tcp_fastopen_cache_get(struct sock *sk, u16 *mss,
 		unsigned int seq;
 
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			seq = read_seqbegin(&fastopen_seqlock);
 			if (tfom->mss)
 				*mss = tfom->mss;
@@ -579,6 +656,7 @@ void tcp_fastopen_cache_set(struct sock *sk, u16 mss,
 			    struct tcp_fastopen_cookie *cookie, bool syn_lost,
 			    u16 try_exp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dst_entry *dst = __sk_dst_get(sk);
 	struct tcp_metrics_block *tm;
 
@@ -740,7 +818,9 @@ static int tcp_metrics_dump_info(struct sk_buff *skb,
 			  &tcp_metrics_nl_family, NLM_F_MULTI,
 			  TCP_METRICS_CMD_GET);
 	if (!hdr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	if (tcp_metrics_fill_info(skb, tm) < 0)
 		goto nla_put_failure;
@@ -756,6 +836,7 @@ static int tcp_metrics_dump_info(struct sk_buff *skb,
 static int tcp_metrics_nl_dump(struct sk_buff *skb,
 			       struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	unsigned int max_rows = 1U << tcp_metrics_hash_log;
 	unsigned int row, s_row = cb->args[0];
@@ -793,6 +874,7 @@ static int __parse_nl_addr(struct genl_info *info, struct inetpeer_addr *addr,
 
 	a = info->attrs[v4];
 	if (a) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inetpeer_set_addr_v4(addr, nla_get_in_addr(a));
 		if (hash)
 			*hash = ipv4_addr_hash(inetpeer_get_addr_v4(addr));
@@ -816,6 +898,7 @@ static int __parse_nl_addr(struct genl_info *info, struct inetpeer_addr *addr,
 static int parse_nl_addr(struct genl_info *info, struct inetpeer_addr *addr,
 			 unsigned int *hash, int optional)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __parse_nl_addr(info, addr, hash, optional,
 			       TCP_METRICS_ATTR_ADDR_IPV4,
 			       TCP_METRICS_ATTR_ADDR_IPV6);
@@ -823,6 +906,7 @@ static int parse_nl_addr(struct genl_info *info, struct inetpeer_addr *addr,
 
 static int parse_nl_saddr(struct genl_info *info, struct inetpeer_addr *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __parse_nl_addr(info, addr, NULL, 0,
 			       TCP_METRICS_ATTR_SADDR_IPV4,
 			       TCP_METRICS_ATTR_SADDR_IPV6);
@@ -841,7 +925,9 @@ static int tcp_metrics_nl_cmd_get(struct sk_buff *skb, struct genl_info *info)
 
 	ret = parse_nl_addr(info, &daddr, &hash, 0);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = parse_nl_saddr(info, &saddr);
 	if (ret < 0)
@@ -896,13 +982,18 @@ static void tcp_metrics_flush_all(struct net *net)
 		spin_lock_bh(&tcp_metrics_lock);
 		pp = &hb->chain;
 		for (tm = deref_locked(*pp); tm; tm = deref_locked(*pp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (net_eq(tm_net(tm), net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*pp = tm->tcpm_next;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kfree_rcu(tm, rcu_head);
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pp = &tm->tcpm_next;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&tcp_metrics_lock);
 	}
 }
@@ -920,7 +1011,9 @@ static int tcp_metrics_nl_cmd_del(struct sk_buff *skb, struct genl_info *info)
 
 	ret = parse_nl_addr(info, &daddr, &hash, 1);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	if (ret > 0) {
 		tcp_metrics_flush_all(net);
 		return 0;
@@ -983,7 +1076,9 @@ static int __init set_tcpmhash_entries(char *str)
 	ssize_t ret;
 
 	if (!str)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = kstrtouint(str, 0, &tcpmhash_entries);
 	if (ret)
@@ -999,12 +1094,16 @@ static int __net_init tcp_net_metrics_init(struct net *net)
 	unsigned int slots;
 
 	if (!net_eq(net, &init_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	slots = tcpmhash_entries;
 	if (!slots) {
 		if (totalram_pages >= 128 * 1024)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			slots = 16 * 1024;
+}
 		else
 			slots = 8 * 1024;
 	}
@@ -1014,7 +1113,9 @@ static int __net_init tcp_net_metrics_init(struct net *net)
 
 	tcp_metrics_hash = kvzalloc(size, GFP_KERNEL);
 	if (!tcp_metrics_hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
@@ -1035,9 +1136,13 @@ void __init tcp_metrics_init(void)
 
 	ret = register_pernet_subsys(&tcp_net_metrics_ops);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Could not allocate the tcp_metrics hash table\n");
+}
 
 	ret = genl_register_family(&tcp_metrics_nl_family);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Could not register tcp_metrics generic netlink\n");
 }
+}
diff --git a/net/ipv4/tcp_minisocks.c b/net/ipv4/tcp_minisocks.c
index 420fecb..086b42e 100644
--- a/net/ipv4/tcp_minisocks.c
+++ b/net/ipv4/tcp_minisocks.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -33,9 +35,15 @@ int sysctl_tcp_abort_on_overflow __read_mostly;
 static bool tcp_in_window(u32 seq, u32 end_seq, u32 s_win, u32 e_win)
 {
 	if (seq == s_win)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (after(end_seq, s_win) && before(seq, e_win))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq == e_win && seq == end_seq;
 }
 
@@ -43,6 +51,7 @@ static enum tcp_tw_status
 tcp_timewait_check_oow_rate_limit(struct inet_timewait_sock *tw,
 				  const struct sk_buff *skb, int mib_idx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_timewait_sock *tcptw = tcp_twsk((struct sock *)tw);
 
 	if (!tcp_oow_rate_limited(twsk_net(tw), skb, mib_idx,
@@ -97,6 +106,7 @@ tcp_timewait_state_process(struct inet_timewait_sock *tw, struct sk_buff *skb,
 	bool paws_reject = false;
 
 	tmp_opt.saw_tstamp = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (th->doff > (sizeof(*th) >> 2) && tcptw->tw_ts_recent_stamp) {
 		tcp_parse_options(twsk_net(tw), skb, &tmp_opt, 0, NULL);
 
@@ -251,6 +261,7 @@ EXPORT_SYMBOL(tcp_timewait_state_process);
  */
 void tcp_time_wait(struct sock *sk, int state, int timeo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	struct inet_timewait_sock *tw;
@@ -259,6 +270,7 @@ void tcp_time_wait(struct sock *sk, int state, int timeo)
 	tw = inet_twsk_alloc(sk, tcp_death_row, state);
 
 	if (tw) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct tcp_timewait_sock *tcptw = tcp_twsk((struct sock *)tw);
 		const int rto = (icsk->icsk_rto << 2) - (icsk->icsk_rto >> 1);
 		struct inet_sock *inet = inet_sk(sk);
@@ -297,20 +309,29 @@ void tcp_time_wait(struct sock *sk, int state, int timeo)
 			tcptw->tw_md5_key = NULL;
 			key = tp->af_specific->md5_lookup(sk, sk);
 			if (key) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcptw->tw_md5_key = kmemdup(key, sizeof(*key), GFP_ATOMIC);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (tcptw->tw_md5_key && !tcp_alloc_md5sig_pool())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					BUG();
+}
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (0);
 #endif
 
 		/* Get the TIME_WAIT timeout firing. */
 		if (timeo < rto)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			timeo = rto;
+}
 
 		tw->tw_timeout = TCP_TIMEWAIT_LEN;
 		if (state == TCP_TIME_WAIT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			timeo = TCP_TIMEWAIT_LEN;
+}
 
 		/* tw_timer is pinned, so we need to make sure BH are disabled
 		 * in following section, otherwise timer handler could run before
@@ -352,6 +373,7 @@ void tcp_openreq_init_rwin(struct request_sock *req,
 			   const struct sock *sk_listener,
 			   const struct dst_entry *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_request_sock *ireq = inet_rsk(req);
 	const struct tcp_sock *tp = tcp_sk(sk_listener);
 	int full_space = tcp_full_space(sk_listener);
@@ -361,6 +383,7 @@ void tcp_openreq_init_rwin(struct request_sock *req,
 	int mss;
 
 	mss = tcp_mss_clamp(tp, dst_metric_advmss(dst));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	window_clamp = READ_ONCE(tp->window_clamp);
 	/* Set this up on the first call only */
 	req->rsk_window_clamp = window_clamp ? : dst_metric(dst, RTAX_WINDOW);
@@ -373,8 +396,11 @@ void tcp_openreq_init_rwin(struct request_sock *req,
 	rcv_wnd = tcp_rwnd_init_bpf((struct sock *)req);
 	if (rcv_wnd == 0)
 		rcv_wnd = dst_metric(dst, RTAX_INITRWND);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (full_space < rcv_wnd * mss)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		full_space = rcv_wnd * mss;
+}
 
 	/* tcp_full_space because it is guaranteed to be the first packet */
 	tcp_select_initial_window(full_space,
@@ -396,6 +422,7 @@ static void tcp_ecn_openreq_child(struct tcp_sock *tp,
 
 void tcp_ca_openreq_child(struct sock *sk, const struct dst_entry *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	u32 ca_key = dst_metric(dst, RTAX_CC_ALGO);
 	bool ca_got_dst = false;
@@ -405,11 +432,14 @@ void tcp_ca_openreq_child(struct sock *sk, const struct dst_entry *dst)
 
 		rcu_read_lock();
 		ca = tcp_ca_find_key(ca_key);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (likely(ca && try_module_get(ca->owner))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			icsk->icsk_ca_dst_locked = tcp_ca_dst_locked(dst);
 			icsk->icsk_ca_ops = ca;
 			ca_got_dst = true;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 	}
 
@@ -436,6 +466,7 @@ struct sock *tcp_create_openreq_child(const struct sock *sk,
 	struct sock *newsk = inet_csk_clone_lock(sk, req, GFP_ATOMIC);
 
 	if (newsk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const struct inet_request_sock *ireq = inet_rsk(req);
 		struct tcp_request_sock *treq = tcp_rsk(req);
 		struct inet_connection_sock *newicsk = inet_csk(newsk);
@@ -500,7 +531,9 @@ struct sock *tcp_create_openreq_child(const struct sock *sk,
 		newtp->rx_opt.tstamp_ok = ireq->tstamp_ok;
 		if ((newtp->rx_opt.sack_ok = ireq->sack_ok) != 0) {
 			if (sysctl_tcp_fack)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_enable_fack(newtp);
+}
 		}
 		newtp->window_clamp = req->rsk_window_clamp;
 		newtp->rcv_ssthresh = req->rsk_rcv_wnd;
@@ -510,7 +543,9 @@ struct sock *tcp_create_openreq_child(const struct sock *sk,
 			newtp->rx_opt.snd_wscale = ireq->snd_wscale;
 			newtp->rx_opt.rcv_wscale = ireq->rcv_wscale;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			newtp->rx_opt.snd_wscale = newtp->rx_opt.rcv_wscale = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			newtp->window_clamp = min(newtp->window_clamp, 65535U);
 		}
 		newtp->snd_wnd = (ntohs(tcp_hdr(skb)->window) <<
@@ -522,6 +557,7 @@ struct sock *tcp_create_openreq_child(const struct sock *sk,
 			newtp->rx_opt.ts_recent_stamp = get_seconds();
 			newtp->tcp_header_len = sizeof(struct tcphdr) + TCPOLEN_TSTAMP_ALIGNED;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			newtp->rx_opt.ts_recent_stamp = 0;
 			newtp->tcp_header_len = sizeof(struct tcphdr);
 		}
@@ -529,10 +565,14 @@ struct sock *tcp_create_openreq_child(const struct sock *sk,
 #ifdef CONFIG_TCP_MD5SIG
 		newtp->md5sig_info = NULL;	/*XXX*/
 		if (newtp->af_specific->md5_lookup(sk, newsk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			newtp->tcp_header_len += TCPOLEN_MD5SIG_ALIGNED;
+}
 #endif
 		if (skb->len >= TCP_MSS_DEFAULT + newtp->tcp_header_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			newicsk->icsk_ack.last_seg_size = skb->len - newtp->tcp_header_len;
+}
 		newtp->rx_opt.mss_clamp = req->mss;
 		tcp_ecn_openreq_child(newtp, req);
 		newtp->fastopen_req = NULL;
diff --git a/net/ipv4/tcp_offload.c b/net/ipv4/tcp_offload.c
index 4d58e2c..09687d4 100644
--- a/net/ipv4/tcp_offload.c
+++ b/net/ipv4/tcp_offload.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPV4 GSO/GRO offload support
  *	Linux INET implementation
@@ -17,6 +19,7 @@
 static void tcp_gso_tstamp(struct sk_buff *skb, unsigned int ts_seq,
 			   unsigned int seq, unsigned int mss)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (skb) {
 		if (before(ts_seq, seq + mss)) {
 			skb_shinfo(skb)->tx_flags |= SKBTX_SW_TSTAMP;
@@ -32,6 +35,7 @@ static void tcp_gso_tstamp(struct sk_buff *skb, unsigned int ts_seq,
 static struct sk_buff *tcp4_gso_segment(struct sk_buff *skb,
 					netdev_features_t features)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(skb_shinfo(skb)->gso_type & SKB_GSO_TCPV4))
 		return ERR_PTR(-EINVAL);
 
@@ -57,6 +61,7 @@ static struct sk_buff *tcp4_gso_segment(struct sk_buff *skb,
 struct sk_buff *tcp_gso_segment(struct sk_buff *skb,
 				netdev_features_t features)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sk_buff *segs = ERR_PTR(-EINVAL);
 	unsigned int sum_truesize = 0;
 	struct tcphdr *th;
diff --git a/net/ipv4/tcp_output.c b/net/ipv4/tcp_output.c
index cd3d60b..a60b54a 100644
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -68,6 +70,7 @@ static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 /* Account for new data that has been sent to the network. */
 static void tcp_event_new_data_sent(struct sock *sk, const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	unsigned int prior_packets = tp->packets_out;
@@ -92,6 +95,7 @@ static void tcp_event_new_data_sent(struct sock *sk, const struct sk_buff *skb)
  */
 static inline __u32 tcp_acceptable_seq(const struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 
 	if (!before(tcp_wnd_end(tp), tp->snd_nxt) ||
@@ -118,6 +122,7 @@ static inline __u32 tcp_acceptable_seq(const struct sock *sk)
  */
 static __u16 tcp_advertise_mss(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	const struct dst_entry *dst = __sk_dst_get(sk);
 	int mss = tp->advmss;
@@ -126,6 +131,7 @@ static __u16 tcp_advertise_mss(struct sock *sk)
 		unsigned int metric = dst_metric_advmss(dst);
 
 		if (metric < mss) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mss = metric;
 			tp->advmss = mss;
 		}
@@ -139,6 +145,7 @@ static __u16 tcp_advertise_mss(struct sock *sk)
  */
 void tcp_cwnd_restart(struct sock *sk, s32 delta)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	u32 restart_cwnd = tcp_init_cwnd(tp, __sk_dst_get(sk));
 	u32 cwnd = tp->snd_cwnd;
@@ -159,6 +166,7 @@ void tcp_cwnd_restart(struct sock *sk, s32 delta)
 static void tcp_event_data_sent(struct tcp_sock *tp,
 				struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	const u32 now = tcp_jiffies32;
 
@@ -228,7 +236,9 @@ void tcp_select_initial_window(int __space, __u32 mss,
 	 * misinterpreting the window field as a signed quantity.
 	 */
 	if (sysctl_tcp_workaround_signed_windows)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		(*rcv_wnd) = min(space, MAX_TCP_WINDOW);
+}
 	else
 		(*rcv_wnd) = space;
 
@@ -262,6 +272,7 @@ EXPORT_SYMBOL(tcp_select_initial_window);
  */
 static u16 tcp_select_window(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	u32 old_win = tp->rcv_wnd;
 	u32 cur_win = tcp_receive_window(tp);
@@ -277,8 +288,10 @@ static u16 tcp_select_window(struct sock *sk)
 		 * Relax Will Robinson.
 		 */
 		if (new_win == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NET_INC_STATS(sock_net(sk),
 				      LINUX_MIB_TCPWANTZEROWINDOWADV);
+}
 		new_win = ALIGN(cur_win, 1 << tp->rx_opt.rcv_wscale);
 	}
 	tp->rcv_wnd = new_win;
@@ -288,7 +301,9 @@ static u16 tcp_select_window(struct sock *sk)
 	 * scaled window.
 	 */
 	if (!tp->rx_opt.rcv_wscale && sysctl_tcp_workaround_signed_windows)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new_win = min(new_win, MAX_TCP_WINDOW);
+}
 	else
 		new_win = min(new_win, (65535U << tp->rx_opt.rcv_wscale));
 
@@ -297,11 +312,15 @@ static u16 tcp_select_window(struct sock *sk)
 
 	/* If we advertise zero window, disable fast path. */
 	if (new_win == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->pred_flags = 0;
 		if (old_win)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NET_INC_STATS(sock_net(sk),
 				      LINUX_MIB_TCPTOZEROWINDOWADV);
+}
 	} else if (old_win == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPFROMZEROWINDOWADV);
 	}
 
@@ -311,6 +330,7 @@ static u16 tcp_select_window(struct sock *sk)
 /* Packet ECN state for a SYN-ACK */
 static void tcp_ecn_send_synack(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 
 	TCP_SKB_CB(skb)->tcp_flags &= ~TCPHDR_CWR;
@@ -324,30 +344,39 @@ static void tcp_ecn_send_synack(struct sock *sk, struct sk_buff *skb)
 /* Packet ECN state for a SYN.  */
 static void tcp_ecn_send_syn(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	bool bpf_needs_ecn = tcp_bpf_ca_needs_ecn(sk);
 	bool use_ecn = sock_net(sk)->ipv4.sysctl_tcp_ecn == 1 ||
 		tcp_ca_needs_ecn(sk) || bpf_needs_ecn;
 
 	if (!use_ecn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const struct dst_entry *dst = __sk_dst_get(sk);
 
 		if (dst && dst_feature(dst, RTAX_FEATURE_ECN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			use_ecn = true;
+}
 	}
 
 	tp->ecn_flags = 0;
 
 	if (use_ecn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		TCP_SKB_CB(skb)->tcp_flags |= TCPHDR_ECE | TCPHDR_CWR;
 		tp->ecn_flags = TCP_ECN_OK;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tcp_ca_needs_ecn(sk) || bpf_needs_ecn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			INET_ECN_xmit(sk);
+}
 	}
 }
 
 static void tcp_ecn_clear_syn(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sock_net(sk)->ipv4.sysctl_tcp_ecn_fallback)
 		/* tp->ecn_flags are cleared at a later point in time when
 		 * SYN ACK is ultimatively being received.
@@ -359,8 +388,10 @@ static void
 tcp_ecn_make_synack(const struct request_sock *req, struct tcphdr *th)
 {
 	if (inet_rsk(req)->ecn_ok)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		th->ece = 1;
 }
+}
 
 /* Set up ECN state for a packet on a ESTABLISHED socket that is about to
  * be sent.
@@ -368,14 +399,17 @@ tcp_ecn_make_synack(const struct request_sock *req, struct tcphdr *th)
 static void tcp_ecn_send(struct sock *sk, struct sk_buff *skb,
 			 struct tcphdr *th, int tcp_header_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (tp->ecn_flags & TCP_ECN_OK) {
 		/* Not-retransmitted data segment: set ECT and inject CWR. */
 		if (skb->len != tcp_header_len &&
 		    !before(TCP_SKB_CB(skb)->seq, tp->snd_nxt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			INET_ECN_xmit(sk);
 			if (tp->ecn_flags & TCP_ECN_QUEUE_CWR) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tp->ecn_flags &= ~TCP_ECN_QUEUE_CWR;
 				th->cwr = 1;
 				skb_shinfo(skb)->gso_type |= SKB_GSO_TCP_ECN;
@@ -384,8 +418,11 @@ static void tcp_ecn_send(struct sock *sk, struct sk_buff *skb,
 			/* ACK or retransmitted segment: clear ECT|CE */
 			INET_ECN_dontxmit(sk);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tp->ecn_flags & TCP_ECN_DEMAND_CWR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			th->ece = 1;
+}
 	}
 }
 
@@ -449,6 +486,7 @@ static void tcp_options_write(__be32 *ptr, struct tcp_sock *tp,
 	u16 options = opts->options;	/* mungable copy */
 
 	if (unlikely(OPTION_MD5 & options)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*ptr++ = htonl((TCPOPT_NOP << 24) | (TCPOPT_NOP << 16) |
 			       (TCPOPT_MD5SIG << 8) | TCPOLEN_MD5SIG);
 		/* overload cookie hash location */
@@ -480,6 +518,7 @@ static void tcp_options_write(__be32 *ptr, struct tcp_sock *tp,
 	}
 
 	if (unlikely(OPTION_SACK_ADVERTISE & options)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*ptr++ = htonl((TCPOPT_NOP << 24) |
 			       (TCPOPT_NOP << 16) |
 			       (TCPOPT_SACK_PERM << 8) |
@@ -519,21 +558,27 @@ static void tcp_options_write(__be32 *ptr, struct tcp_sock *tp,
 		u32 len; /* Fast Open option length */
 
 		if (foc->exp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			len = TCPOLEN_EXP_FASTOPEN_BASE + foc->len;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*ptr = htonl((TCPOPT_EXP << 24) | (len << 16) |
 				     TCPOPT_FASTOPEN_MAGIC);
 			p += TCPOLEN_EXP_FASTOPEN_BASE;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			len = TCPOLEN_FASTOPEN_BASE + foc->len;
 			*p++ = TCPOPT_FASTOPEN;
 			*p++ = len;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(p, foc->val, foc->len);
 		if ((len & 3) == 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p[foc->len] = TCPOPT_NOP;
 			p[foc->len + 1] = TCPOPT_NOP;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ptr += (len + 3) >> 2;
 	}
 }
@@ -545,6 +590,7 @@ static unsigned int tcp_syn_options(struct sock *sk, struct sk_buff *skb,
 				struct tcp_out_options *opts,
 				struct tcp_md5sig_key **md5)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	unsigned int remaining = MAX_TCP_OPTION_SPACE;
 	struct tcp_fastopen_request *fastopen = tp->fastopen_req;
@@ -552,6 +598,7 @@ static unsigned int tcp_syn_options(struct sock *sk, struct sk_buff *skb,
 #ifdef CONFIG_TCP_MD5SIG
 	*md5 = tp->af_specific->md5_lookup(sk, sk);
 	if (*md5) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opts->options |= OPTION_MD5;
 		remaining -= TCPOLEN_MD5SIG_ALIGNED;
 	}
@@ -585,20 +632,25 @@ static unsigned int tcp_syn_options(struct sock *sk, struct sk_buff *skb,
 	if (likely(sock_net(sk)->ipv4.sysctl_tcp_sack)) {
 		opts->options |= OPTION_SACK_ADVERTISE;
 		if (unlikely(!(OPTION_TS & opts->options)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			remaining -= TCPOLEN_SACKPERM_ALIGNED;
+}
 	}
 
 	if (fastopen && fastopen->cookie.len >= 0) {
 		u32 need = fastopen->cookie.len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		need += fastopen->cookie.exp ? TCPOLEN_EXP_FASTOPEN_BASE :
 					       TCPOLEN_FASTOPEN_BASE;
 		need = (need + 3) & ~3U;  /* Align to 32 bits */
 		if (remaining >= need) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opts->options |= OPTION_FAST_OPEN_COOKIE;
 			opts->fastopen_cookie = &fastopen->cookie;
 			remaining -= need;
 			tp->syn_fastopen = 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->syn_fastopen_exp = fastopen->cookie.exp ? 1 : 0;
 		}
 	}
@@ -613,11 +665,13 @@ static unsigned int tcp_synack_options(struct request_sock *req,
 				       const struct tcp_md5sig_key *md5,
 				       struct tcp_fastopen_cookie *foc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_request_sock *ireq = inet_rsk(req);
 	unsigned int remaining = MAX_TCP_OPTION_SPACE;
 
 #ifdef CONFIG_TCP_MD5SIG
 	if (md5) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opts->options |= OPTION_MD5;
 		remaining -= TCPOLEN_MD5SIG_ALIGNED;
 
@@ -648,15 +702,19 @@ static unsigned int tcp_synack_options(struct request_sock *req,
 	if (likely(ireq->sack_ok)) {
 		opts->options |= OPTION_SACK_ADVERTISE;
 		if (unlikely(!ireq->tstamp_ok))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			remaining -= TCPOLEN_SACKPERM_ALIGNED;
+}
 	}
 	if (foc != NULL && foc->len >= 0) {
 		u32 need = foc->len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		need += foc->exp ? TCPOLEN_EXP_FASTOPEN_BASE :
 				   TCPOLEN_FASTOPEN_BASE;
 		need = (need + 3) & ~3U;  /* Align to 32 bits */
 		if (remaining >= need) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opts->options |= OPTION_FAST_OPEN_COOKIE;
 			opts->fastopen_cookie = foc;
 			remaining -= need;
@@ -673,6 +731,7 @@ static unsigned int tcp_established_options(struct sock *sk, struct sk_buff *skb
 					struct tcp_out_options *opts,
 					struct tcp_md5sig_key **md5)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	unsigned int size = 0;
 	unsigned int eff_sacks;
@@ -682,6 +741,7 @@ static unsigned int tcp_established_options(struct sock *sk, struct sk_buff *skb
 #ifdef CONFIG_TCP_MD5SIG
 	*md5 = tp->af_specific->md5_lookup(sk, sk);
 	if (unlikely(*md5)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opts->options |= OPTION_MD5;
 		size += TCPOLEN_MD5SIG_ALIGNED;
 	}
@@ -733,6 +793,7 @@ static DEFINE_PER_CPU(struct tsq_tasklet, tsq_tasklet);
 
 static void tcp_tsq_handler(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((1 << sk->sk_state) &
 	    (TCPF_ESTABLISHED | TCPF_FIN_WAIT1 | TCPF_CLOSING |
 	     TCPF_CLOSE_WAIT  | TCPF_LAST_ACK)) {
@@ -763,6 +824,7 @@ static void tcp_tasklet_func(unsigned long data)
 	struct tcp_sock *tp;
 	struct sock *sk;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_irq_save(flags);
 	list_splice_init(&tsq->head, &list);
 	local_irq_restore(flags);
@@ -808,12 +870,16 @@ void tcp_release_cb(struct sock *sk)
 	do {
 		flags = sk->sk_tsq_flags;
 		if (!(flags & TCP_DEFERRED_ALL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 		nflags = flags & ~TCP_DEFERRED_ALL;
 	} while (cmpxchg(&sk->sk_tsq_flags, flags, nflags) != flags);
 
 	if (flags & TCPF_TSQ_DEFERRED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_tsq_handler(sk);
+}
 
 	/* Here begins the tricky part :
 	 * We are called from release_sock() with :
@@ -827,6 +893,7 @@ void tcp_release_cb(struct sock *sk)
 	sock_release_ownership(sk);
 
 	if (flags & TCPF_WRITE_TIMER_DEFERRED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_write_timer_handler(sk);
 		__sock_put(sk);
 	}
@@ -835,6 +902,7 @@ void tcp_release_cb(struct sock *sk)
 		__sock_put(sk);
 	}
 	if (flags & TCPF_MTU_REDUCED_DEFERRED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_csk(sk)->icsk_af_ops->mtu_reduced(sk);
 		__sock_put(sk);
 	}
@@ -881,6 +949,7 @@ void tcp_wfree(struct sk_buff *skb)
 	if (refcount_read(&sk->sk_wmem_alloc) >= SKB_TRUESIZE(1) && this_cpu_ksoftirqd() == current)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (oval = READ_ONCE(sk->sk_tsq_flags);; oval = nval) {
 		struct tsq_tasklet *tsq;
 		bool empty;
@@ -888,19 +957,26 @@ void tcp_wfree(struct sk_buff *skb)
 		if (!(oval & TSQF_THROTTLED) || (oval & TSQF_QUEUED))
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nval = (oval & ~TSQF_THROTTLED) | TSQF_QUEUED | TCPF_TSQ_DEFERRED;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nval = cmpxchg(&sk->sk_tsq_flags, oval, nval);
 		if (nval != oval)
 			continue;
 
 		/* queue this socket to tasklet queue */
 		local_irq_save(flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tsq = this_cpu_ptr(&tsq_tasklet);
 		empty = list_empty(&tsq->head);
 		list_add(&tp->tsq_node, &tsq->head);
 		if (empty)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tasklet_schedule(&tsq->tasklet);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_irq_restore(flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 out:
@@ -912,6 +988,7 @@ void tcp_wfree(struct sk_buff *skb)
  */
 enum hrtimer_restart tcp_pace_kick(struct hrtimer *timer)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = container_of(timer, struct tcp_sock, pacing_timer);
 	struct sock *sk = (struct sock *)tp;
 	unsigned long nval, oval;
@@ -958,10 +1035,16 @@ static void tcp_internal_pacing(struct sock *sk, const struct sk_buff *skb)
 	u32 rate;
 
 	if (!tcp_needs_internal_pacing(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rate = sk->sk_pacing_rate;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!rate || rate == ~0U)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Should account for header sizes as sch_fq does,
 	 * but lets make things simple.
@@ -987,6 +1070,7 @@ static void tcp_internal_pacing(struct sock *sk, const struct sk_buff *skb)
 static int tcp_transmit_skb(struct sock *sk, struct sk_buff *skb, int clone_it,
 			    gfp_t gfp_mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	struct inet_sock *inet;
 	struct tcp_sock *tp;
@@ -999,6 +1083,7 @@ static int tcp_transmit_skb(struct sock *sk, struct sk_buff *skb, int clone_it,
 	int err;
 
 	BUG_ON(!skb || !tcp_skb_pcount(skb));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tp = tcp_sk(sk);
 
 	if (clone_it) {
@@ -1006,11 +1091,15 @@ static int tcp_transmit_skb(struct sock *sk, struct sk_buff *skb, int clone_it,
 			- tp->snd_una;
 		oskb = skb;
 		if (unlikely(skb_cloned(skb)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb = pskb_copy(skb, gfp_mask);
+}
 		else
 			skb = skb_clone(skb, gfp_mask);
 		if (unlikely(!skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOBUFS;
+}
 	}
 	skb->skb_mstamp = tp->tcp_mstamp;
 
@@ -1066,10 +1155,13 @@ static int tcp_transmit_skb(struct sock *sk, struct sk_buff *skb, int clone_it,
 
 	/* The urg_mode check is necessary during a below snd_una win probe */
 	if (unlikely(tcp_urg_mode(tp) && before(tcb->seq, tp->snd_up))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (before(tp->snd_up, tcb->seq + 0x10000)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			th->urg_ptr = htons(tp->snd_up - tcb->seq);
 			th->urg = 1;
 		} else if (after(tcb->seq + 0xFFFF, tp->snd_nxt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			th->urg_ptr = htons(0xFFFF);
 			th->urg = 1;
 		}
@@ -1089,6 +1181,7 @@ static int tcp_transmit_skb(struct sock *sk, struct sk_buff *skb, int clone_it,
 #ifdef CONFIG_TCP_MD5SIG
 	/* Calculate the MD5 hash, as we have all we need now */
 	if (md5) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_nocaps_add(sk, NETIF_F_GSO_MASK);
 		tp->af_specific->calc_md5_hash(opts.hash_location,
 					       md5, sk, skb);
@@ -1125,13 +1218,16 @@ static int tcp_transmit_skb(struct sock *sk, struct sk_buff *skb, int clone_it,
 	err = icsk->icsk_af_ops->queue_xmit(sk, skb, &inet->cork.fl);
 
 	if (unlikely(err > 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_enter_cwr(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = net_xmit_eval(err);
 	}
 	if (!err && oskb) {
 		oskb->skb_mstamp = tp->tcp_mstamp;
 		tcp_rate_skb_sent(sk, oskb);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -1142,6 +1238,7 @@ static int tcp_transmit_skb(struct sock *sk, struct sk_buff *skb, int clone_it,
  */
 static void tcp_queue_skb(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	/* Advance write_seq and place onto the write_queue. */
@@ -1162,6 +1259,7 @@ static void tcp_set_skb_tso_segs(struct sk_buff *skb, unsigned int mss_now)
 		tcp_skb_pcount_set(skb, 1);
 		TCP_SKB_CB(skb)->tcp_gso_size = 0;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_skb_pcount_set(skb, DIV_ROUND_UP(skb->len, mss_now));
 		TCP_SKB_CB(skb)->tcp_gso_size = mss_now;
 	}
@@ -1173,6 +1271,7 @@ static void tcp_set_skb_tso_segs(struct sk_buff *skb, unsigned int mss_now)
 static void tcp_adjust_fackets_out(struct sock *sk, const struct sk_buff *skb,
 				   int decr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (!tp->sacked_out || tcp_is_reno(tp))
@@ -1187,6 +1286,7 @@ static void tcp_adjust_fackets_out(struct sock *sk, const struct sk_buff *skb,
  */
 static void tcp_adjust_pcount(struct sock *sk, const struct sk_buff *skb, int decr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	tp->packets_out -= decr;
@@ -1214,12 +1314,14 @@ static void tcp_adjust_pcount(struct sock *sk, const struct sk_buff *skb, int de
 
 static bool tcp_has_tx_tstamp(const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return TCP_SKB_CB(skb)->txstamp_ack ||
 		(skb_shinfo(skb)->tx_flags & SKBTX_ANY_TSTAMP);
 }
 
 static void tcp_fragment_tstamp(struct sk_buff *skb, struct sk_buff *skb2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct skb_shared_info *shinfo = skb_shinfo(skb);
 
 	if (unlikely(tcp_has_tx_tstamp(skb)) &&
@@ -1237,6 +1339,7 @@ static void tcp_fragment_tstamp(struct sk_buff *skb, struct sk_buff *skb2)
 
 static void tcp_skb_fragment_eor(struct sk_buff *skb, struct sk_buff *skb2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	TCP_SKB_CB(skb2)->eor = TCP_SKB_CB(skb)->eor;
 	TCP_SKB_CB(skb)->eor = 0;
 }
@@ -1249,6 +1352,7 @@ static void tcp_skb_fragment_eor(struct sk_buff *skb, struct sk_buff *skb2)
 int tcp_fragment(struct sock *sk, struct sk_buff *skb, u32 len,
 		 unsigned int mss_now, gfp_t gfp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *buff;
 	int nsize, old_factor;
@@ -1342,6 +1446,7 @@ static int __pskb_trim_head(struct sk_buff *skb, int len)
 	struct skb_shared_info *shinfo;
 	int i, k, eat;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	eat = min_t(int, len, skb_headlen(skb));
 	if (eat) {
 		__skb_pull(skb, eat);
@@ -1381,7 +1486,9 @@ int tcp_trim_head(struct sock *sk, struct sk_buff *skb, u32 len)
 	u32 delta_truesize;
 
 	if (skb_unclone(skb, GFP_ATOMIC))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	delta_truesize = __pskb_trim_head(skb, len);
 
@@ -1405,6 +1512,7 @@ int tcp_trim_head(struct sock *sk, struct sk_buff *skb, u32 len)
 /* Calculate MSS not accounting any TCP options.  */
 static inline int __tcp_mtu_to_mss(struct sock *sk, int pmtu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	int mss_now;
@@ -1416,22 +1524,29 @@ static inline int __tcp_mtu_to_mss(struct sock *sk, int pmtu)
 
 	/* IPv6 adds a frag_hdr in case RTAX_FEATURE_ALLFRAG is set */
 	if (icsk->icsk_af_ops->net_frag_header_len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const struct dst_entry *dst = __sk_dst_get(sk);
 
 		if (dst && dst_allfrag(dst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mss_now -= icsk->icsk_af_ops->net_frag_header_len;
+}
 	}
 
 	/* Clamp it (mss_clamp does not include tcp options) */
 	if (mss_now > tp->rx_opt.mss_clamp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mss_now = tp->rx_opt.mss_clamp;
+}
 
 	/* Now subtract optional transport overhead */
 	mss_now -= icsk->icsk_ext_hdr_len;
 
 	/* Then reserve room for full set of TCP options and 8 bytes of data */
 	if (mss_now < 48)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mss_now = 48;
+}
 	return mss_now;
 }
 
@@ -1446,6 +1561,7 @@ int tcp_mtu_to_mss(struct sock *sk, int pmtu)
 /* Inverse of above */
 int tcp_mss_to_mtu(struct sock *sk, int mss)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	int mtu;
@@ -1457,10 +1573,13 @@ int tcp_mss_to_mtu(struct sock *sk, int mss)
 
 	/* IPv6 adds a frag_hdr in case RTAX_FEATURE_ALLFRAG is set */
 	if (icsk->icsk_af_ops->net_frag_header_len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const struct dst_entry *dst = __sk_dst_get(sk);
 
 		if (dst && dst_allfrag(dst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mtu += icsk->icsk_af_ops->net_frag_header_len;
+}
 	}
 	return mtu;
 }
@@ -1469,6 +1588,7 @@ EXPORT_SYMBOL(tcp_mss_to_mtu);
 /* MTU probing init per socket */
 void tcp_mtup_init(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct net *net = sock_net(sk);
@@ -1479,8 +1599,10 @@ void tcp_mtup_init(struct sock *sk)
 	icsk->icsk_mtup.search_low = tcp_mss_to_mtu(sk, net->ipv4.sysctl_tcp_base_mss);
 	icsk->icsk_mtup.probe_size = 0;
 	if (icsk->icsk_mtup.enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icsk->icsk_mtup.probe_timestamp = tcp_jiffies32;
 }
+}
 EXPORT_SYMBOL(tcp_mtup_init);
 
 /* This function synchronize snd mss to current pmtu/exthdr set.
@@ -1507,12 +1629,15 @@ EXPORT_SYMBOL(tcp_mtup_init);
  */
 unsigned int tcp_sync_mss(struct sock *sk, u32 pmtu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	int mss_now;
 
 	if (icsk->icsk_mtup.search_high > pmtu)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icsk->icsk_mtup.search_high = pmtu;
+}
 
 	mss_now = tcp_mtu_to_mss(sk, pmtu);
 	mss_now = tcp_bound_to_half_wnd(tp, mss_now);
@@ -1520,7 +1645,9 @@ unsigned int tcp_sync_mss(struct sock *sk, u32 pmtu)
 	/* And store cached results */
 	icsk->icsk_pmtu_cookie = pmtu;
 	if (icsk->icsk_mtup.enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mss_now = min(mss_now, tcp_mtu_to_mss(sk, icsk->icsk_mtup.search_low));
+}
 	tp->mss_cache = mss_now;
 
 	return mss_now;
@@ -1532,6 +1659,7 @@ EXPORT_SYMBOL(tcp_sync_mss);
  */
 unsigned int tcp_current_mss(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	const struct dst_entry *dst = __sk_dst_get(sk);
 	u32 mss_now;
@@ -1544,7 +1672,9 @@ unsigned int tcp_current_mss(struct sock *sk)
 	if (dst) {
 		u32 mtu = dst_mtu(dst);
 		if (mtu != inet_csk(sk)->icsk_pmtu_cookie)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mss_now = tcp_sync_mss(sk, mtu);
+}
 	}
 
 	header_len = tcp_established_options(sk, NULL, &opts, &md5) +
@@ -1567,6 +1697,7 @@ unsigned int tcp_current_mss(struct sock *sk)
  */
 static void tcp_cwnd_application_limited(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (inet_csk(sk)->icsk_ca_state == TCP_CA_Open &&
@@ -1575,6 +1706,7 @@ static void tcp_cwnd_application_limited(struct sock *sk)
 		u32 init_win = tcp_init_cwnd(tp, __sk_dst_get(sk));
 		u32 win_used = max(tp->snd_cwnd_used, init_win);
 		if (win_used < tp->snd_cwnd) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->snd_ssthresh = tcp_current_ssthresh(sk);
 			tp->snd_cwnd = (tp->snd_cwnd + win_used) >> 1;
 		}
@@ -1704,6 +1836,7 @@ static unsigned int tcp_mss_split_point(const struct sock *sk,
 					unsigned int max_segs,
 					int nonagle)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	u32 partial, needed, window, max_len;
 
@@ -1745,7 +1878,9 @@ static inline unsigned int tcp_cwnd_test(const struct tcp_sock *tp,
 	in_flight = tcp_packets_in_flight(tp);
 	cwnd = tp->snd_cwnd;
 	if (in_flight >= cwnd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* For better scheduling, ensure we have at least
 	 * 2 GSO packets in flight.
@@ -1760,6 +1895,7 @@ static inline unsigned int tcp_cwnd_test(const struct tcp_sock *tp,
  */
 static int tcp_init_tso_segs(struct sk_buff *skb, unsigned int mss_now)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int tso_segs = tcp_skb_pcount(skb);
 
 	if (!tso_segs || (tso_segs > 1 && tcp_skb_mss(skb) != mss_now)) {
@@ -1783,14 +1919,20 @@ static inline bool tcp_nagle_test(const struct tcp_sock *tp, const struct sk_buf
 	 * argument based upon the location of SKB in the send queue.
 	 */
 	if (nonagle & TCP_NAGLE_PUSH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	/* Don't use the nagle rule for urgent data (or for the final FIN). */
 	if (tcp_urg_mode(tp) || (TCP_SKB_CB(skb)->tcp_flags & TCPHDR_FIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	if (!tcp_nagle_check(skb->len < cur_mss, tp, nonagle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	return false;
 }
@@ -1803,7 +1945,9 @@ static bool tcp_snd_wnd_test(const struct tcp_sock *tp,
 	u32 end_seq = TCP_SKB_CB(skb)->end_seq;
 
 	if (skb->len > cur_mss)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		end_seq = TCP_SKB_CB(skb)->seq + cur_mss;
+}
 
 	return !after(end_seq, tcp_wnd_end(tp));
 }
@@ -1824,7 +1968,9 @@ static int tso_fragment(struct sock *sk, struct sk_buff *skb, unsigned int len,
 
 	/* All of a TSO frame must be composed of paged data.  */
 	if (skb->len != skb->data_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return tcp_fragment(sk, skb, len, mss_now, gfp);
+}
 
 	buff = sk_stream_alloc_skb(sk, 0, gfp, true);
 	if (unlikely(!buff))
@@ -1873,6 +2019,7 @@ static int tso_fragment(struct sock *sk, struct sk_buff *skb, unsigned int len,
 static bool tcp_tso_should_defer(struct sock *sk, struct sk_buff *skb,
 				 bool *is_cwnd_limited, u32 max_segs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	u32 age, send_win, cong_win, limit, in_flight;
 	struct tcp_sock *tp = tcp_sk(sk);
@@ -1950,6 +2097,7 @@ static bool tcp_tso_should_defer(struct sock *sk, struct sk_buff *skb,
 
 static inline void tcp_mtu_check_reprobe(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct net *net = sock_net(sk);
@@ -1984,6 +2132,7 @@ static inline void tcp_mtu_check_reprobe(struct sock *sk)
  */
 static int tcp_mtu_probe(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb, *nskb, *next;
@@ -2030,17 +2179,28 @@ static int tcp_mtu_probe(struct sock *sk)
 
 	/* Have enough data in the send queue to probe? */
 	if (tp->write_seq - tp->snd_nxt < size_needed)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tp->snd_wnd < size_needed)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (after(tp->snd_nxt + size_needed, tcp_wnd_end(tp)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Do we need to wait to drain cwnd? With none in flight, don't stall */
 	if (tcp_packets_in_flight(tp) + 2 > tp->snd_cwnd) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!tcp_packets_in_flight(tp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
 		else
 			return 0;
 	}
@@ -2048,7 +2208,10 @@ static int tcp_mtu_probe(struct sock *sk)
 	/* We're allowed to probe.  Build it now. */
 	nskb = sk_stream_alloc_skb(sk, probe_size, GFP_ATOMIC, false);
 	if (!nskb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk->sk_wmem_queued += nskb->truesize;
 	sk_mem_charge(sk, nskb->truesize);
 
@@ -2065,9 +2228,12 @@ static int tcp_mtu_probe(struct sock *sk)
 	tcp_highest_sack_replace(sk, skb, nskb);
 
 	len = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_for_write_queue_from_safe(skb, next, sk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		copy = min_t(int, skb->len, probe_size - len);
 		if (nskb->ip_summed) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb_copy_bits(skb, 0, skb_put(nskb, copy), copy);
 		} else {
 			__wsum csum = skb_copy_and_csum_bits(skb, 0,
@@ -2076,6 +2242,7 @@ static int tcp_mtu_probe(struct sock *sk)
 			nskb->csum = csum_block_add(nskb->csum, csum, len);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (skb->len <= copy) {
 			/* We've eaten all the data from this skb.
 			 * Throw it away. */
@@ -2083,25 +2250,33 @@ static int tcp_mtu_probe(struct sock *sk)
 			tcp_unlink_write_queue(skb, sk);
 			sk_wmem_free_skb(sk, skb);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			TCP_SKB_CB(nskb)->tcp_flags |= TCP_SKB_CB(skb)->tcp_flags &
 						   ~(TCPHDR_FIN|TCPHDR_PSH);
 			if (!skb_shinfo(skb)->nr_frags) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				skb_pull(skb, copy);
 				if (skb->ip_summed != CHECKSUM_PARTIAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					skb->csum = csum_partial(skb->data,
 								 skb->len, 0);
+}
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__pskb_trim_head(skb, copy);
 				tcp_set_skb_tso_segs(skb, mss_now);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			TCP_SKB_CB(skb)->seq += copy;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len += copy;
 
 		if (len >= probe_size)
 			break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_init_tso_segs(nskb, nskb->len);
 
 	/* We're ready to send.  If this fails, the probe will
@@ -2120,6 +2295,7 @@ static int tcp_mtu_probe(struct sock *sk)
 		return 1;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -1;
 }
 
@@ -2159,6 +2335,7 @@ static bool tcp_small_queue_check(struct sock *sk, const struct sk_buff *skb,
 		    skb->prev == sk->sk_write_queue.next)
 			return false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_bit(TSQ_THROTTLED, &sk->sk_tsq_flags);
 		/* It is possible TX completion already happened
 		 * before we set TSQ_THROTTLED, so we must
@@ -2166,8 +2343,11 @@ static bool tcp_small_queue_check(struct sock *sk, const struct sk_buff *skb,
 		 */
 		smp_mb__after_atomic();
 		if (refcount_read(&sk->sk_wmem_alloc) > limit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -2184,6 +2364,7 @@ static void tcp_chrono_set(struct tcp_sock *tp, const enum tcp_chrono new)
 
 void tcp_chrono_start(struct sock *sk, const enum tcp_chrono type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	/* If there are multiple conditions worthy of tracking in a
@@ -2197,6 +2378,7 @@ void tcp_chrono_start(struct sock *sk, const enum tcp_chrono type)
 
 void tcp_chrono_stop(struct sock *sk, const enum tcp_chrono type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 
@@ -2210,8 +2392,10 @@ void tcp_chrono_stop(struct sock *sk, const enum tcp_chrono type)
 	if (tcp_write_queue_empty(sk))
 		tcp_chrono_set(tp, TCP_CHRONO_UNSPEC);
 	else if (type == tp->chrono_type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_chrono_set(tp, TCP_CHRONO_BUSY);
 }
+}
 
 /* This routine writes packets to the network.  It advances the
  * send_head.  This happens as incoming acks open up the remote
@@ -2230,6 +2414,7 @@ void tcp_chrono_stop(struct sock *sk, const enum tcp_chrono type)
 static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 			   int push_one, gfp_t gfp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb;
 	unsigned int tso_segs, sent_pkts;
@@ -2245,8 +2430,10 @@ static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 		/* Do MTU probing. */
 		result = tcp_mtu_probe(sk);
 		if (!result) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
 		} else if (result > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sent_pkts = 1;
 		}
 	}
@@ -2269,6 +2456,7 @@ static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 
 		cwnd_quota = tcp_cwnd_test(tp, skb);
 		if (!cwnd_quota) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (push_one == 2)
 				/* Force out a loss probe pkt. */
 				cwnd_quota = 1;
@@ -2277,6 +2465,7 @@ static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 		}
 
 		if (unlikely(!tcp_snd_wnd_test(tp, skb, mss_now))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			is_rwnd_limited = true;
 			break;
 		}
@@ -2287,12 +2476,14 @@ static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 						      nonagle : TCP_NAGLE_PUSH))))
 				break;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!push_one &&
 			    tcp_tso_should_defer(sk, skb, &is_cwnd_limited,
 						 max_segs))
 				break;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		limit = mss_now;
 		if (tso_segs > 1 && !tcp_urg_mode(tp))
 			limit = tcp_mss_split_point(sk, skb, mss_now,
@@ -2306,7 +2497,9 @@ static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 			break;
 
 		if (test_bit(TCP_TSQ_DEFERRED, &sk->sk_tsq_flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			clear_bit(TCP_TSQ_DEFERRED, &sk->sk_tsq_flags);
+}
 		if (tcp_small_queue_check(sk, skb, 0))
 			break;
 
@@ -2327,13 +2520,17 @@ static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 	}
 
 	if (is_rwnd_limited)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_chrono_start(sk, TCP_CHRONO_RWND_LIMITED);
+}
 	else
 		tcp_chrono_stop(sk, TCP_CHRONO_RWND_LIMITED);
 
 	if (likely(sent_pkts)) {
 		if (tcp_in_cwnd_reduction(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->prr_out += sent_pkts;
+}
 
 		/* Send one loss probe per tail loss episode. */
 		if (push_one != 2)
@@ -2347,6 +2544,7 @@ static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 
 bool tcp_schedule_loss_probe(struct sock *sk, bool advancing_rto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	u32 timeout, rto_delta_us;
@@ -2355,7 +2553,9 @@ bool tcp_schedule_loss_probe(struct sock *sk, bool advancing_rto)
 	 * finishes.
 	 */
 	if (tp->fastopen_rsk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/* Schedule a loss probe in 2*RTT for SACK capable connections
 	 * in Open state, that are either limited by cwnd or application.
@@ -2380,6 +2580,7 @@ bool tcp_schedule_loss_probe(struct sock *sk, bool advancing_rto)
 		else
 			timeout += TCP_TIMEOUT_MIN;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		timeout = TCP_TIMEOUT_INIT;
 	}
 
@@ -2403,10 +2604,13 @@ static bool skb_still_in_host_queue(const struct sock *sk,
 				    const struct sk_buff *skb)
 {
 	if (unlikely(skb_fclone_busy(sk, skb))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk),
 			      LINUX_MIB_TCPSPURIOUS_RTX_HOSTQUEUES);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -2415,6 +2619,7 @@ static bool skb_still_in_host_queue(const struct sock *sk,
  */
 void tcp_send_loss_probe(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb;
 	int pcount;
@@ -2422,15 +2627,19 @@ void tcp_send_loss_probe(struct sock *sk)
 
 	skb = tcp_send_head(sk);
 	if (skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tcp_snd_wnd_test(tp, skb, mss)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pcount = tp->packets_out;
 			tcp_write_xmit(sk, mss, TCP_NAGLE_OFF, 2, GFP_ATOMIC);
 			if (tp->packets_out > pcount)
 				goto probe_sent;
 			goto rearm_timer;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb = tcp_write_queue_prev(sk, skb);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb = tcp_write_queue_tail(sk);
 	}
 
@@ -2445,14 +2654,17 @@ void tcp_send_loss_probe(struct sock *sk)
 	if (skb_still_in_host_queue(sk, skb))
 		goto rearm_timer;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pcount = tcp_skb_pcount(skb);
 	if (WARN_ON(!pcount))
 		goto rearm_timer;
 
 	if ((pcount > 1) && (skb->len > (pcount - 1) * mss)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unlikely(tcp_fragment(sk, skb, (pcount - 1) * mss, mss,
 					  GFP_ATOMIC)))
 			goto rearm_timer;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb = tcp_write_queue_next(sk, skb);
 	}
 
@@ -2485,7 +2697,9 @@ void __tcp_push_pending_frames(struct sock *sk, unsigned int cur_mss,
 	 * all will be happy.
 	 */
 	if (unlikely(sk->sk_state == TCP_CLOSE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (tcp_write_xmit(sk, cur_mss, nonagle, 0,
 			   sk_gfp_mask(sk, GFP_ATOMIC)))
@@ -2497,6 +2711,7 @@ void __tcp_push_pending_frames(struct sock *sk, unsigned int cur_mss,
  */
 void tcp_push_one(struct sock *sk, unsigned int mss_now)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sk_buff *skb = tcp_send_head(sk);
 
 	BUG_ON(!skb || skb->len < mss_now);
@@ -2558,6 +2773,7 @@ void tcp_push_one(struct sock *sk, unsigned int mss_now)
  */
 u32 __tcp_select_window(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	/* MSS for the peer's data.  Previous versions used mss_clamp
@@ -2573,16 +2789,22 @@ u32 __tcp_select_window(struct sock *sk)
 	int window;
 
 	if (unlikely(mss > full_space)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mss = full_space;
 		if (mss <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	}
 	if (free_space < (full_space >> 1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icsk->icsk_ack.quick = 0;
 
 		if (tcp_under_memory_pressure(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->rcv_ssthresh = min(tp->rcv_ssthresh,
 					       4U * tp->advmss);
+}
 
 		/* free_space might become our new window, make sure we don't
 		 * increase it due to wscale.
@@ -2597,7 +2819,9 @@ u32 __tcp_select_window(struct sock *sk)
 		 * to announce zero window in time before rmem limit kicks in.
 		 */
 		if (free_space < (allowed_space >> 4) || free_space < mss)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	}
 
 	if (free_space > tp->rcv_ssthresh)
@@ -2607,6 +2831,7 @@ u32 __tcp_select_window(struct sock *sk)
 	 * scaled window will not line up with the MSS boundary anyway.
 	 */
 	if (tp->rx_opt.rcv_wscale) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		window = free_space;
 
 		/* Advertise enough space so that it won't get scaled away.
@@ -2615,6 +2840,7 @@ u32 __tcp_select_window(struct sock *sk)
 		 */
 		window = ALIGN(window, (1 << tp->rx_opt.rcv_wscale));
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		window = tp->rcv_wnd;
 		/* Get the largest window that is a nice multiple of mss.
 		 * Window clamp already applied above.
@@ -2626,6 +2852,7 @@ u32 __tcp_select_window(struct sock *sk)
 		 */
 		if (window <= free_space - mss || window > free_space)
 			window = rounddown(free_space, mss);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (mss == full_space &&
 			 free_space > window + (full_space >> 1))
 			window = free_space;
@@ -2637,6 +2864,7 @@ u32 __tcp_select_window(struct sock *sk)
 void tcp_skb_collapse_tstamp(struct sk_buff *skb,
 			     const struct sk_buff *next_skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(tcp_has_tx_tstamp(next_skb))) {
 		const struct skb_shared_info *next_shinfo =
 			skb_shinfo(next_skb);
@@ -2652,6 +2880,7 @@ void tcp_skb_collapse_tstamp(struct sk_buff *skb,
 /* Collapses two adjacent SKB's during retransmission. */
 static bool tcp_collapse_retrans(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *next_skb = tcp_write_queue_next(sk, skb);
 	int skb_size, next_skb_size;
@@ -2707,14 +2936,22 @@ static bool tcp_collapse_retrans(struct sock *sk, struct sk_buff *skb)
 static bool tcp_can_collapse(const struct sock *sk, const struct sk_buff *skb)
 {
 	if (tcp_skb_pcount(skb) > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (skb_cloned(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (skb == tcp_send_head(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	/* Some heuristics for collapsing over SACK'd could be invented */
 	if (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	return true;
 }
@@ -2725,14 +2962,19 @@ static bool tcp_can_collapse(const struct sock *sk, const struct sk_buff *skb)
 static void tcp_retrans_try_collapse(struct sock *sk, struct sk_buff *to,
 				     int space)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb = to, *tmp;
 	bool first = true;
 
 	if (!sysctl_tcp_retrans_collapse)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (TCP_SKB_CB(skb)->tcp_flags & TCPHDR_SYN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	tcp_for_write_queue_from_safe(skb, tmp, sk) {
 		if (!tcp_can_collapse(sk, skb))
@@ -2744,16 +2986,20 @@ static void tcp_retrans_try_collapse(struct sock *sk, struct sk_buff *to,
 		space -= skb->len;
 
 		if (first) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			first = false;
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (space < 0)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (after(TCP_SKB_CB(skb)->end_seq, tcp_wnd_end(tp)))
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!tcp_collapse_retrans(sk, to))
 			break;
 	}
@@ -2765,6 +3011,7 @@ static void tcp_retrans_try_collapse(struct sock *sk, struct sk_buff *to,
  */
 int __tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	unsigned int cur_mss;
@@ -2773,7 +3020,9 @@ int __tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
 
 	/* Inconclusive MTU probe */
 	if (icsk->icsk_mtup.probe_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icsk->icsk_mtup.probe_size = 0;
+}
 
 	/* Do not sent more than we queued. 1/4 is reserved for possible
 	 * copying overhead: fragmentation, tunneling, mangling etc.
@@ -2784,17 +3033,27 @@ int __tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
 		return -EAGAIN;
 
 	if (skb_still_in_host_queue(sk, skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	if (before(TCP_SKB_CB(skb)->seq, tp->snd_una)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (before(TCP_SKB_CB(skb)->end_seq, tp->snd_una))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BUG();
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tcp_trim_head(sk, skb, tp->snd_una - TCP_SKB_CB(skb)->seq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	}
 
 	if (inet_csk(sk)->icsk_af_ops->rebuild_header(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EHOSTUNREACH; /* Routing failure or similar. */
+}
 
 	cur_mss = tcp_current_mss(sk);
 
@@ -2809,24 +3068,34 @@ int __tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
 
 	len = cur_mss * segs;
 	if (skb->len > len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tcp_fragment(sk, skb, len, cur_mss, GFP_ATOMIC))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM; /* We'll try again later. */
+}
 	} else {
 		if (skb_unclone(skb, GFP_ATOMIC))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		diff = tcp_skb_pcount(skb);
 		tcp_set_skb_tso_segs(skb, cur_mss);
 		diff -= tcp_skb_pcount(skb);
 		if (diff)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_adjust_pcount(sk, skb, diff);
+}
 		if (skb->len < cur_mss)
 			tcp_retrans_try_collapse(sk, skb, cur_mss);
 	}
 
 	/* RFC3168, section 6.1.1.1. ECN fallback */
 	if ((TCP_SKB_CB(skb)->tcp_flags & TCPHDR_SYN_ECN) == TCPHDR_SYN_ECN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_ecn_clear_syn(sk, skb);
+}
 
 	/* Update global and local TCP statistics. */
 	segs = tcp_skb_pcount(skb);
@@ -2844,9 +3113,11 @@ int __tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
 		struct sk_buff *nskb;
 
 		nskb = __pskb_copy(skb, MAX_TCP_HEADER, GFP_ATOMIC);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = nskb ? tcp_transmit_skb(sk, nskb, 0, GFP_ATOMIC) :
 			     -ENOBUFS;
 		if (!err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb->skb_mstamp = tp->tcp_mstamp;
 			tcp_rate_skb_sent(sk, skb);
 		}
@@ -2857,19 +3128,23 @@ int __tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
 	if (likely(!err)) {
 		TCP_SKB_CB(skb)->sacked |= TCPCB_EVER_RETRANS;
 	} else if (err != -EBUSY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPRETRANSFAIL);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
 int tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int err = __tcp_retransmit_skb(sk, skb, segs);
 
 	if (err == 0) {
 #if FASTRETRANS_DEBUG > 0
 		if (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_RETRANS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net_dbg_ratelimited("retrans_out leaked\n");
 		}
 #endif
@@ -2878,7 +3153,9 @@ int tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
 
 		/* Save stamp of the first retransmit. */
 		if (!tp->retrans_stamp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tp->retrans_stamp = tcp_skb_timestamp(skb);
+}
 
 	}
 
@@ -2898,6 +3175,7 @@ int tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
  */
 void tcp_xmit_retransmit_queue(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb;
@@ -2986,14 +3264,19 @@ void sk_forced_mem_schedule(struct sock *sk, int size)
 	int amt;
 
 	if (size <= sk->sk_forward_alloc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	amt = sk_mem_pages(size);
 	sk->sk_forward_alloc += amt * SK_MEM_QUANTUM;
 	sk_memory_allocated_add(sk, amt);
 
 	if (mem_cgroup_sockets_enabled && sk->sk_memcg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mem_cgroup_charge_skmem(sk->sk_memcg, amt);
 }
+}
 
 /* Send a FIN. The caller locks the socket for us.
  * We should try to send a FIN packet really hard, but eventually give up.
@@ -3026,8 +3309,10 @@ void tcp_send_fin(struct sock *sk)
 	} else {
 		skb = alloc_skb_fclone(MAX_TCP_HEADER, sk->sk_allocation);
 		if (unlikely(!skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (tskb)
 				goto coalesce;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
 		}
 		skb_reserve(skb, MAX_TCP_HEADER);
@@ -3049,6 +3334,7 @@ void tcp_send_active_reset(struct sock *sk, gfp_t priority)
 {
 	struct sk_buff *skb;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	TCP_INC_STATS(sock_net(sk), TCP_MIB_OUTRSTS);
 
 	/* NOTE: No TCP options attached and we never retransmit this. */
@@ -3079,6 +3365,7 @@ int tcp_send_synack(struct sock *sk)
 	struct sk_buff *skb;
 
 	skb = tcp_write_queue_head(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!skb || !(TCP_SKB_CB(skb)->tcp_flags & TCPHDR_SYN)) {
 		pr_debug("%s: wrong queue state\n", __func__);
 		return -EFAULT;
@@ -3117,6 +3404,7 @@ struct sk_buff *tcp_make_synack(const struct sock *sk, struct dst_entry *dst,
 				struct tcp_fastopen_cookie *foc,
 				enum tcp_synack_type synack_type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_request_sock *ireq = inet_rsk(req);
 	const struct tcp_sock *tp = tcp_sk(sk);
 	struct tcp_md5sig_key *md5 = NULL;
@@ -3128,6 +3416,7 @@ struct sk_buff *tcp_make_synack(const struct sock *sk, struct dst_entry *dst,
 
 	skb = alloc_skb(MAX_TCP_HEADER, GFP_ATOMIC);
 	if (unlikely(!skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_release(dst);
 		return NULL;
 	}
@@ -3151,6 +3440,7 @@ struct sk_buff *tcp_make_synack(const struct sock *sk, struct dst_entry *dst,
 		skb_set_owner_w(skb, (struct sock *)sk);
 		break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_dst_set(skb, dst);
 
 	mss = tcp_mss_clamp(tp, dst_metric_advmss(dst));
@@ -3158,7 +3448,9 @@ struct sk_buff *tcp_make_synack(const struct sock *sk, struct dst_entry *dst,
 	memset(&opts, 0, sizeof(opts));
 #ifdef CONFIG_SYN_COOKIES
 	if (unlikely(req->cookie_ts))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb->skb_mstamp = cookie_init_timestamp(req);
+}
 	else
 #endif
 		skb->skb_mstamp = tcp_clock_us();
@@ -3196,8 +3488,10 @@ struct sk_buff *tcp_make_synack(const struct sock *sk, struct dst_entry *dst,
 #ifdef CONFIG_TCP_MD5SIG
 	/* Okay, we have all we need - do the md5 hash if needed */
 	if (md5)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_rsk(req)->af_specific->calc_md5_hash(opts.hash_location,
 					       md5, req_to_sk(req), skb);
+}
 	rcu_read_unlock();
 #endif
 
@@ -3209,26 +3503,34 @@ EXPORT_SYMBOL(tcp_make_synack);
 
 static void tcp_ca_dst_init(struct sock *sk, const struct dst_entry *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	const struct tcp_congestion_ops *ca;
 	u32 ca_key = dst_metric(dst, RTAX_CC_ALGO);
 
 	if (ca_key == TCP_CA_UNSPEC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	ca = tcp_ca_find_key(ca_key);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (likely(ca && try_module_get(ca->owner))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		module_put(icsk->icsk_ca_ops->owner);
 		icsk->icsk_ca_dst_locked = tcp_ca_dst_locked(dst);
 		icsk->icsk_ca_ops = ca;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
 /* Do all connect socket setups that can be done AF independent. */
 static void tcp_connect_init(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct dst_entry *dst = __sk_dst_get(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	__u8 rcv_wscale;
@@ -3243,12 +3545,16 @@ static void tcp_connect_init(struct sock *sk)
 
 #ifdef CONFIG_TCP_MD5SIG
 	if (tp->af_specific->md5_lookup(sk, sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->tcp_header_len += TCPOLEN_MD5SIG_ALIGNED;
+}
 #endif
 
 	/* If user gave his TCP_MAXSEG, record it to clamp */
 	if (tp->rx_opt.user_mss)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->rx_opt.mss_clamp = tp->rx_opt.user_mss;
+}
 	tp->max_window = 0;
 	tcp_mtup_init(sk);
 	tcp_sync_mss(sk, dst_mtu(dst));
@@ -3304,6 +3610,7 @@ static void tcp_connect_init(struct sock *sk)
 
 static void tcp_connect_queue_skb(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct tcp_skb_cb *tcb = TCP_SKB_CB(skb);
 
@@ -3325,6 +3632,7 @@ static void tcp_connect_queue_skb(struct sock *sk, struct sk_buff *skb)
  */
 static int tcp_send_syn_data(struct sock *sk, struct sk_buff *syn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct tcp_fastopen_request *fo = tp->fastopen_req;
 	int space, err = 0;
@@ -3410,6 +3718,7 @@ static int tcp_send_syn_data(struct sock *sk, struct sk_buff *syn)
 /* Build a SYN and send it off. */
 int tcp_connect(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *buff;
 	int err;
@@ -3417,18 +3726,23 @@ int tcp_connect(struct sock *sk)
 	tcp_call_bpf(sk, BPF_SOCK_OPS_TCP_CONNECT_CB);
 
 	if (inet_csk(sk)->icsk_af_ops->rebuild_header(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EHOSTUNREACH; /* Routing failure or similar. */
+}
 
 	tcp_connect_init(sk);
 
 	if (unlikely(tp->repair)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_finish_connect(sk, NULL);
 		return 0;
 	}
 
 	buff = sk_stream_alloc_skb(sk, 0, sk->sk_allocation, true);
 	if (unlikely(!buff))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOBUFS;
+}
 
 	tcp_init_nondata_skb(buff, tp->write_seq++, TCPHDR_SYN);
 	tcp_mstamp_refresh(tp);
@@ -3440,7 +3754,9 @@ int tcp_connect(struct sock *sk)
 	err = tp->fastopen_req ? tcp_send_syn_data(sk, buff) :
 	      tcp_transmit_skb(sk, buff, 1, sk->sk_allocation);
 	if (err == -ECONNREFUSED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/* We change tp->snd_nxt after the tcp_transmit_skb() call
 	 * in order to make this packet get counted in tcpOutSegs.
@@ -3449,6 +3765,7 @@ int tcp_connect(struct sock *sk)
 	tp->pushed_seq = tp->write_seq;
 	buff = tcp_send_head(sk);
 	if (unlikely(buff)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->snd_nxt	= TCP_SKB_CB(buff)->seq;
 		tp->pushed_seq	= TCP_SKB_CB(buff)->seq;
 	}
@@ -3467,6 +3784,7 @@ EXPORT_SYMBOL(tcp_connect);
  */
 void tcp_send_delayed_ack(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	int ato = icsk->icsk_ack.ato;
 	unsigned long timeout;
@@ -3474,6 +3792,7 @@ void tcp_send_delayed_ack(struct sock *sk)
 	tcp_ca_event(sk, CA_EVENT_DELAYED_ACK);
 
 	if (ato > TCP_DELACK_MIN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const struct tcp_sock *tp = tcp_sk(sk);
 		int max_ato = HZ / 2;
 
@@ -3492,7 +3811,9 @@ void tcp_send_delayed_ack(struct sock *sk)
 					TCP_DELACK_MIN);
 
 			if (rtt < max_ato)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				max_ato = rtt;
+}
 		}
 
 		ato = min(ato, max_ato);
@@ -3513,7 +3834,9 @@ void tcp_send_delayed_ack(struct sock *sk)
 		}
 
 		if (!time_before(timeout, icsk->icsk_ack.timeout))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			timeout = icsk->icsk_ack.timeout;
+}
 	}
 	icsk->icsk_ack.pending |= ICSK_ACK_SCHED | ICSK_ACK_TIMER;
 	icsk->icsk_ack.timeout = timeout;
@@ -3527,7 +3850,9 @@ void tcp_send_ack(struct sock *sk)
 
 	/* If we have been reset, we may not send again. */
 	if (sk->sk_state == TCP_CLOSE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	tcp_ca_event(sk, CA_EVENT_NON_DELAYED_ACK);
 
@@ -3538,6 +3863,7 @@ void tcp_send_ack(struct sock *sk)
 	buff = alloc_skb(MAX_TCP_HEADER,
 			 sk_gfp_mask(sk, GFP_ATOMIC | __GFP_NOWARN));
 	if (unlikely(!buff)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_csk_schedule_ack(sk);
 		inet_csk(sk)->icsk_ack.ato = TCP_ATO_MIN;
 		inet_csk_reset_xmit_timer(sk, ICSK_TIME_DACK,
@@ -3573,6 +3899,7 @@ EXPORT_SYMBOL_GPL(tcp_send_ack);
  */
 static int tcp_xmit_probe_skb(struct sock *sk, int urgent, int mib)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb;
 
@@ -3596,6 +3923,7 @@ static int tcp_xmit_probe_skb(struct sock *sk, int urgent, int mib)
 /* Called from setsockopt( ... TCP_REPAIR ) */
 void tcp_send_window_probe(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sk->sk_state == TCP_ESTABLISHED) {
 		tcp_sk(sk)->snd_wl1 = tcp_sk(sk)->rcv_nxt - 1;
 		tcp_mstamp_refresh(tcp_sk(sk));
@@ -3606,6 +3934,7 @@ void tcp_send_window_probe(struct sock *sk)
 /* Initiate keepalive or window probe from timer. */
 int tcp_write_wakeup(struct sock *sk, int mib)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb;
 
@@ -3651,6 +3980,7 @@ int tcp_write_wakeup(struct sock *sk, int mib)
  */
 void tcp_send_probe0(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct net *net = sock_net(sk);
@@ -3689,6 +4019,7 @@ void tcp_send_probe0(struct sock *sk)
 
 int tcp_rtx_synack(const struct sock *sk, struct request_sock *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcp_request_sock_ops *af_ops = tcp_rsk(req)->af_specific;
 	struct flowi fl;
 	int res;
diff --git a/net/ipv4/tcp_rate.c b/net/ipv4/tcp_rate.c
index c61240e..c400f51 100644
--- a/net/ipv4/tcp_rate.c
+++ b/net/ipv4/tcp_rate.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <net/tcp.h>
 
 /* The bandwidth estimator estimates the rate at which the network
@@ -38,6 +40,7 @@
  */
 void tcp_rate_skb_sent(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	 /* In general we need to start delivery rate samples from the
@@ -75,11 +78,14 @@ void tcp_rate_skb_sent(struct sock *sk, struct sk_buff *skb)
 void tcp_rate_skb_delivered(struct sock *sk, struct sk_buff *skb,
 			    struct rate_sample *rs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct tcp_skb_cb *scb = TCP_SKB_CB(skb);
 
 	if (!scb->tx.delivered_mstamp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!rs->prior_delivered ||
 	    after(scb->tx.delivered, rs->prior_delivered)) {
@@ -101,13 +107,16 @@ void tcp_rate_skb_delivered(struct sock *sk, struct sk_buff *skb,
 	 * we don't need to reset since it'll be freed soon.
 	 */
 	if (scb->sacked & TCPCB_SACKED_ACKED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scb->tx.delivered_mstamp = 0;
 }
+}
 
 /* Update the connection delivery information and generate a rate sample. */
 void tcp_rate_gen(struct sock *sk, u32 delivered, u32 lost,
 		  bool is_sack_reneg, struct rate_sample *rs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	u32 snd_us, ack_us;
 
@@ -154,11 +163,14 @@ void tcp_rate_gen(struct sock *sk, u32 delivered, u32 lost,
 	 * for connections suffer heavy or prolonged losses.
 	 */
 	if (unlikely(rs->interval_us < tcp_min_rtt(tp))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!rs->is_retrans)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("tcp rate: %ld %d %u %u %u\n",
 				 rs->interval_us, rs->delivered,
 				 inet_csk(sk)->icsk_ca_state,
 				 tp->rx_opt.sack_ok, tcp_min_rtt(tp));
+}
 		rs->interval_us = -1;
 		return;
 	}
@@ -176,6 +188,7 @@ void tcp_rate_gen(struct sock *sk, u32 delivered, u32 lost,
 /* If a gap is detected between sends, mark the socket application-limited. */
 void tcp_rate_check_app_limited(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	if (/* We have less than one packet to send. */
diff --git a/net/ipv4/tcp_recovery.c b/net/ipv4/tcp_recovery.c
index be8ef1e..1521c94 100644
--- a/net/ipv4/tcp_recovery.c
+++ b/net/ipv4/tcp_recovery.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/tcp.h>
 #include <net/tcp.h>
@@ -6,6 +8,7 @@ int sysctl_tcp_recovery __read_mostly = TCP_RACK_LOSS_DETECTION;
 
 static void tcp_rack_mark_skb_lost(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	tcp_skb_mark_lost_uncond_verify(tp, skb);
@@ -45,6 +48,7 @@ static bool tcp_rack_sent_after(u64 t1, u64 t2, u32 seq1, u32 seq2)
  */
 static void tcp_rack_detect_loss(struct sock *sk, u32 *reo_timeout)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct sk_buff *skb;
 	u32 reo_wnd;
@@ -70,6 +74,7 @@ static void tcp_rack_detect_loss(struct sock *sk, u32 *reo_timeout)
 		    scb->sacked & TCPCB_SACKED_ACKED)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tcp_rack_sent_after(tp->rack.mstamp, skb->skb_mstamp,
 					tp->rack.end_seq, scb->end_seq)) {
 			/* Step 3 in draft-cheng-tcpm-rack-00.txt:
@@ -81,6 +86,7 @@ static void tcp_rack_detect_loss(struct sock *sk, u32 *reo_timeout)
 			s32 remaining = tp->rack.rtt_us + reo_wnd - elapsed;
 
 			if (remaining < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_rack_mark_skb_lost(sk, skb);
 				continue;
 			}
@@ -104,16 +110,20 @@ static void tcp_rack_detect_loss(struct sock *sk, u32 *reo_timeout)
 
 void tcp_rack_mark_lost(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	u32 timeout;
 
 	if (!tp->rack.advanced)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Reset the advanced flag to avoid unnecessary queue scanning */
 	tp->rack.advanced = 0;
 	tcp_rack_detect_loss(sk, &timeout);
 	if (timeout) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		timeout = usecs_to_jiffies(timeout) + TCP_TIMEOUT_MIN;
 		inet_csk_reset_xmit_timer(sk, ICSK_TIME_REO_TIMEOUT,
 					  timeout, inet_csk(sk)->icsk_rto);
@@ -147,7 +157,9 @@ void tcp_rack_advance(struct tcp_sock *tp, u8 sacked, u32 end_seq,
 		 * an RTT later).
 		 */
 		if (rtt_us < tcp_min_rtt(tp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 	}
 	tp->rack.rtt_us = rtt_us;
 	tp->rack.mstamp = xmit_time;
@@ -160,6 +172,7 @@ void tcp_rack_advance(struct tcp_sock *tp, u8 sacked, u32 end_seq,
  */
 void tcp_rack_reo_timeout(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	u32 timeout, prior_inflight;
 
diff --git a/net/ipv4/tcp_timer.c b/net/ipv4/tcp_timer.c
index 14ac7df..e675bd3 100644
--- a/net/ipv4/tcp_timer.c
+++ b/net/ipv4/tcp_timer.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -33,6 +35,7 @@ int sysctl_tcp_thin_linear_timeouts __read_mostly;
 
 static void tcp_write_err(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk->sk_err = sk->sk_err_soft ? : ETIMEDOUT;
 	sk->sk_error_report(sk);
 
@@ -66,6 +69,7 @@ static void tcp_write_err(struct sock *sk)
  */
 static int tcp_out_of_resources(struct sock *sk, bool do_reset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int shift = 0;
 
@@ -108,6 +112,7 @@ static int tcp_out_of_resources(struct sock *sk, bool do_reset)
  */
 static int tcp_orphan_retries(struct sock *sk, bool alive)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int retries = sock_net(sk)->ipv4.sysctl_tcp_orphan_retries; /* May be zero. */
 
 	/* We know from an ICMP that something is wrong. */
@@ -124,6 +129,7 @@ static int tcp_orphan_retries(struct sock *sk, bool alive)
 
 static void tcp_mtu_probing(struct inet_connection_sock *icsk, struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(sk);
 
 	/* Black hole detection */
@@ -168,13 +174,18 @@ static bool retransmits_timed_out(struct sock *sk,
 	unsigned int linear_backoff_thresh, start_ts;
 
 	if (!inet_csk(sk)->icsk_retransmits)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	start_ts = tcp_sk(sk)->retrans_stamp;
 	if (unlikely(!start_ts))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start_ts = tcp_skb_timestamp(tcp_write_queue_head(sk));
+}
 
 	if (likely(timeout == 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		linear_backoff_thresh = ilog2(TCP_RTO_MAX/rto_base);
 
 		if (boundary <= linear_backoff_thresh)
@@ -189,6 +200,7 @@ static bool retransmits_timed_out(struct sock *sk,
 /* A write timeout has occurred. Process the after effects. */
 static int tcp_write_timeout(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct net *net = sock_net(sk);
@@ -199,16 +211,21 @@ static int tcp_write_timeout(struct sock *sk)
 		if (icsk->icsk_retransmits) {
 			dst_negative_advice(sk);
 			if (tp->syn_fastopen || tp->syn_data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_fastopen_cache_set(sk, 0, NULL, true, 0);
+}
 			if (tp->syn_data && icsk->icsk_retransmits == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				NET_INC_STATS(sock_net(sk),
 					      LINUX_MIB_TCPFASTOPENACTIVEFAIL);
+}
 		} else if (!tp->syn_data && !tp->syn_fastopen) {
 			sk_rethink_txhash(sk);
 		}
 		retry_until = icsk->icsk_syn_retries ? : net->ipv4.sysctl_tcp_syn_retries;
 		expired = icsk->icsk_retransmits >= retry_until;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (retransmits_timed_out(sk, net->ipv4.sysctl_tcp_retries1, 0)) {
 			/* Some middle-boxes may black-hole Fast Open _after_
 			 * the handshake. Therefore we conservatively disable
@@ -216,30 +233,39 @@ static int tcp_write_timeout(struct sock *sk)
 			 * successful Fast Open.
 			 */
 			if (tp->syn_data_acked) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_fastopen_cache_set(sk, 0, NULL, true, 0);
 				if (icsk->icsk_retransmits == net->ipv4.sysctl_tcp_retries1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					NET_INC_STATS(sock_net(sk),
 						      LINUX_MIB_TCPFASTOPENACTIVEFAIL);
+}
 			}
 			/* Black hole detection */
 			tcp_mtu_probing(icsk, sk);
 
 			dst_negative_advice(sk);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_rethink_txhash(sk);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retry_until = net->ipv4.sysctl_tcp_retries2;
 		if (sock_flag(sk, SOCK_DEAD)) {
 			const bool alive = icsk->icsk_rto < TCP_RTO_MAX;
 
 			retry_until = tcp_orphan_retries(sk, alive);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			do_reset = alive ||
 				!retransmits_timed_out(sk, retry_until, 0);
 
 			if (tcp_out_of_resources(sk, do_reset))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 1;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		expired = retransmits_timed_out(sk, retry_until,
 						icsk->icsk_user_timeout);
 	}
@@ -248,12 +274,14 @@ static int tcp_write_timeout(struct sock *sk)
 		tcp_write_err(sk);
 		return 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 /* Called with BH disabled */
 void tcp_delack_timer_handler(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
 	sk_mem_reclaim_partial(sk);
@@ -263,6 +291,7 @@ void tcp_delack_timer_handler(struct sock *sk)
 		goto out;
 
 	if (time_after(icsk->icsk_ack.timeout, jiffies)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_reset_timer(sk, &icsk->icsk_delack_timer, icsk->icsk_ack.timeout);
 		goto out;
 	}
@@ -286,8 +315,10 @@ void tcp_delack_timer_handler(struct sock *sk)
 
 out:
 	if (tcp_under_memory_pressure(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_mem_reclaim(sk);
 }
+}
 
 
 /**
@@ -311,14 +342,18 @@ static void tcp_delack_timer(unsigned long data)
 		__NET_INC_STATS(sock_net(sk), LINUX_MIB_DELAYEDACKLOCKED);
 		/* deleguate our work to tcp_release_cb() */
 		if (!test_and_set_bit(TCP_DELACK_TIMER_DEFERRED, &sk->sk_tsq_flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sock_hold(sk);
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bh_unlock_sock(sk);
 	sock_put(sk);
 }
 
 static void tcp_probe_timer(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
 	int max_probes;
@@ -370,6 +405,7 @@ abort:		tcp_write_err(sk);
  */
 static void tcp_fastopen_synack_timer(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	int max_retries = icsk->icsk_syn_retries ? :
 	    sock_net(sk)->ipv4.sysctl_tcp_synack_retries + 1; /* add one more retry for fastopen */
@@ -408,11 +444,13 @@ static void tcp_fastopen_synack_timer(struct sock *sk)
  */
 void tcp_retransmit_timer(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct net *net = sock_net(sk);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
 	if (tp->fastopen_rsk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON_ONCE(sk->sk_state != TCP_SYN_RECV &&
 			     sk->sk_state != TCP_FIN_WAIT1);
 		tcp_fastopen_synack_timer(sk);
@@ -437,6 +475,7 @@ void tcp_retransmit_timer(struct sock *sk)
 		 */
 		struct inet_sock *inet = inet_sk(sk);
 		if (sk->sk_family == AF_INET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net_dbg_ratelimited("Peer %pI4:%u/%u unexpectedly shrunk window %u:%u (repaired)\n",
 					    &inet->inet_daddr,
 					    ntohs(inet->inet_dport),
@@ -445,6 +484,7 @@ void tcp_retransmit_timer(struct sock *sk)
 		}
 #if IS_ENABLED(CONFIG_IPV6)
 		else if (sk->sk_family == AF_INET6) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net_dbg_ratelimited("Peer %pI6:%u/%u unexpectedly shrunk window %u:%u (repaired)\n",
 					    &sk->sk_v6_daddr,
 					    ntohs(inet->inet_dport),
@@ -453,9 +493,11 @@ void tcp_retransmit_timer(struct sock *sk)
 		}
 #endif
 		if (tcp_jiffies32 - tp->rcv_tstamp > TCP_RTO_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_write_err(sk);
 			goto out;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_enter_loss(sk);
 		tcp_retransmit_skb(sk, tcp_write_queue_head(sk), 1);
 		__sk_dst_reset(sk);
@@ -469,19 +511,27 @@ void tcp_retransmit_timer(struct sock *sk)
 		int mib_idx;
 
 		if (icsk->icsk_ca_state == TCP_CA_Recovery) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (tcp_is_sack(tp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				mib_idx = LINUX_MIB_TCPSACKRECOVERYFAIL;
+}
 			else
 				mib_idx = LINUX_MIB_TCPRENORECOVERYFAIL;
 		} else if (icsk->icsk_ca_state == TCP_CA_Loss) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mib_idx = LINUX_MIB_TCPLOSSFAILURES;
 		} else if ((icsk->icsk_ca_state == TCP_CA_Disorder) ||
 			   tp->sacked_out) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (tcp_is_sack(tp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				mib_idx = LINUX_MIB_TCPSACKFAILURES;
+}
 			else
 				mib_idx = LINUX_MIB_TCPRENOFAILURES;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mib_idx = LINUX_MIB_TCPTIMEOUTS;
 		}
 		__NET_INC_STATS(sock_net(sk), mib_idx);
@@ -494,7 +544,9 @@ void tcp_retransmit_timer(struct sock *sk)
 		 * do not backoff.
 		 */
 		if (!icsk->icsk_retransmits)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			icsk->icsk_retransmits = 1;
+}
 		inet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS,
 					  min(icsk->icsk_rto, TCP_RESOURCE_PROBE_INTERVAL),
 					  TCP_RTO_MAX);
@@ -533,7 +585,9 @@ void tcp_retransmit_timer(struct sock *sk)
 	    (tp->thin_lto || sysctl_tcp_thin_linear_timeouts) &&
 	    tcp_stream_is_thin(tp) &&
 	    icsk->icsk_retransmits <= TCP_THIN_LINEAR_RETRIES) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icsk->icsk_backoff = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icsk->icsk_rto = min(__tcp_set_rto(tp), TCP_RTO_MAX);
 	} else {
 		/* Use normal (exponential) backoff */
@@ -550,6 +604,7 @@ out:;
    Called by tcp_write_timer() */
 void tcp_write_timer_handler(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	int event;
 
@@ -558,6 +613,7 @@ void tcp_write_timer_handler(struct sock *sk)
 		goto out;
 
 	if (time_after(icsk->icsk_timeout, jiffies)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_reset_timer(sk, &icsk->icsk_retransmit_timer, icsk->icsk_timeout);
 		goto out;
 	}
@@ -596,14 +652,18 @@ static void tcp_write_timer(unsigned long data)
 	} else {
 		/* delegate our work to tcp_release_cb() */
 		if (!test_and_set_bit(TCP_WRITE_TIMER_DEFERRED, &sk->sk_tsq_flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sock_hold(sk);
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bh_unlock_sock(sk);
 	sock_put(sk);
 }
 
 void tcp_syn_ack_timeout(const struct request_sock *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = read_pnet(&inet_rsk(req)->ireq_net);
 
 	__NET_INC_STATS(net, LINUX_MIB_TCPTIMEOUTS);
@@ -613,7 +673,9 @@ EXPORT_SYMBOL(tcp_syn_ack_timeout);
 void tcp_set_keepalive(struct sock *sk, int val)
 {
 	if ((1 << sk->sk_state) & (TCPF_CLOSE | TCPF_LISTEN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (val && !sock_flag(sk, SOCK_KEEPOPEN))
 		inet_csk_reset_keepalive_timer(sk, keepalive_time_when(tcp_sk(sk)));
diff --git a/net/ipv4/tcp_ulp.c b/net/ipv4/tcp_ulp.c
index 6bb9e14..67d572a 100644
--- a/net/ipv4/tcp_ulp.c
+++ b/net/ipv4/tcp_ulp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Pluggable TCP upper layer protocol support.
  *
@@ -21,6 +23,7 @@ static struct tcp_ulp_ops *tcp_ulp_find(const char *name)
 {
 	struct tcp_ulp_ops *e;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(e, &tcp_ulp_list, list) {
 		if (strcmp(e->name, name) == 0)
 			return e;
@@ -60,6 +63,7 @@ int tcp_register_ulp(struct tcp_ulp_ops *ulp)
 
 	spin_lock(&tcp_ulp_list_lock);
 	if (tcp_ulp_find(ulp->name)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_notice("%s already registered or non-unique name\n",
 			  ulp->name);
 		ret = -EEXIST;
@@ -74,6 +78,7 @@ EXPORT_SYMBOL_GPL(tcp_register_ulp);
 
 void tcp_unregister_ulp(struct tcp_ulp_ops *ulp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&tcp_ulp_list_lock);
 	list_del_rcu(&ulp->list);
 	spin_unlock(&tcp_ulp_list_lock);
@@ -90,6 +95,7 @@ void tcp_get_available_ulp(char *buf, size_t maxlen)
 
 	*buf = '\0';
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(ulp_ops, &tcp_ulp_list, list) {
 		offs += snprintf(buf + offs, maxlen - offs,
 				 "%s%s",
@@ -100,19 +106,27 @@ void tcp_get_available_ulp(char *buf, size_t maxlen)
 
 void tcp_cleanup_ulp(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
 	if (!icsk->icsk_ulp_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (icsk->icsk_ulp_ops->release)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icsk->icsk_ulp_ops->release(sk);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	module_put(icsk->icsk_ulp_ops->owner);
 }
 
 /* Change upper layer protocol for socket */
 int tcp_set_ulp(struct sock *sk, const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	const struct tcp_ulp_ops *ulp_ops;
 	int err = 0;
diff --git a/net/ipv4/tunnel4.c b/net/ipv4/tunnel4.c
index ec35eaa..730ef79 100644
--- a/net/ipv4/tunnel4.c
+++ b/net/ipv4/tunnel4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* tunnel4.c: Generic IP tunnel transformer.
  *
  * Copyright (C) 2003 David S. Miller (davem@redhat.com)
@@ -41,8 +43,10 @@ int xfrm4_tunnel_register(struct xfrm_tunnel *handler, unsigned short family)
 	     (t = rcu_dereference_protected(*pprev,
 			lockdep_is_held(&tunnel4_mutex))) != NULL;
 	     pprev = &t->next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (t->priority > priority)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (t->priority == priority)
 			goto err;
 	}
@@ -98,6 +102,7 @@ static int tunnel4_rcv(struct sk_buff *skb)
 	if (!pskb_may_pull(skb, sizeof(struct iphdr)))
 		goto drop;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_tunnel_rcu(tunnel4_handlers, handler)
 		if (!handler->handler(skb))
 			return 0;
@@ -117,6 +122,7 @@ static int tunnel64_rcv(struct sk_buff *skb)
 	if (!pskb_may_pull(skb, sizeof(struct ipv6hdr)))
 		goto drop;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_tunnel_rcu(tunnel64_handlers, handler)
 		if (!handler->handler(skb))
 			return 0;
@@ -153,6 +159,7 @@ static void tunnel4_err(struct sk_buff *skb, u32 info)
 {
 	struct xfrm_tunnel *handler;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_tunnel_rcu(tunnel4_handlers, handler)
 		if (!handler->err_handler(skb, info))
 			break;
@@ -163,6 +170,7 @@ static void tunnel64_err(struct sk_buff *skb, u32 info)
 {
 	struct xfrm_tunnel *handler;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_tunnel_rcu(tunnel64_handlers, handler)
 		if (!handler->err_handler(skb, info))
 			break;
@@ -211,6 +219,7 @@ static int __init tunnel4_init(void)
 		goto err;
 #if IS_ENABLED(CONFIG_IPV6)
 	if (inet_add_protocol(&tunnel64_protocol, IPPROTO_IPV6)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_del_protocol(&tunnel4_protocol, IPPROTO_IPIP);
 		goto err;
 	}
diff --git a/net/ipv4/udp.c b/net/ipv4/udp.c
index ebfbcca..ce7c94a 100644
--- a/net/ipv4/udp.c
+++ b/net/ipv4/udp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -154,6 +156,7 @@ static int udp_lib_lport_inuse(struct net *net, __u16 num,
 	kuid_t uid = sock_i_uid(sk);
 
 	sk_for_each(sk2, &hslot->head) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (net_eq(sock_net(sk2), net) &&
 		    sk2 != sk &&
 		    (bitmap || udp_sk(sk2)->udp_port_hash == num) &&
@@ -161,19 +164,28 @@ static int udp_lib_lport_inuse(struct net *net, __u16 num,
 		    (!sk2->sk_bound_dev_if || !sk->sk_bound_dev_if ||
 		     sk2->sk_bound_dev_if == sk->sk_bound_dev_if) &&
 		    inet_rcv_saddr_equal(sk, sk2, true)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk2->sk_reuseport && sk->sk_reuseport &&
 			    !rcu_access_pointer(sk->sk_reuseport_cb) &&
 			    uid_eq(uid, sock_i_uid(sk2))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!bitmap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return 0;
+}
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!bitmap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__set_bit(udp_sk(sk2)->udp_port_hash >> log,
 					  bitmap);
 			}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -190,6 +202,7 @@ static int udp_lib_lport_inuse2(struct net *net, __u16 num,
 	int res = 0;
 
 	spin_lock(&hslot2->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	udp_portaddr_for_each_entry(sk2, &hslot2->head) {
 		if (net_eq(sock_net(sk2), net) &&
 		    sk2 != sk &&
@@ -214,6 +227,7 @@ static int udp_lib_lport_inuse2(struct net *net, __u16 num,
 
 static int udp_reuseport_add_sock(struct sock *sk, struct udp_hslot *hslot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(sk);
 	kuid_t uid = sock_i_uid(sk);
 	struct sock *sk2;
@@ -284,10 +298,14 @@ int udp_lib_get_port(struct sock *sk, unsigned short snum,
 				    !test_bit(snum >> udptable->log, bitmap) &&
 				    !inet_is_local_reserved_port(net, snum))
 					goto found;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				snum += rand;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			} while (snum != first);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_bh(&hslot->lock);
 			cond_resched();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (++first != last);
 		goto fail;
 	} else {
@@ -304,12 +322,16 @@ int udp_lib_get_port(struct sock *sk, unsigned short snum,
 			if (hslot->count < hslot2->count)
 				goto scan_primary_hash;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			exist = udp_lib_lport_inuse2(net, snum, hslot2, sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!exist && (hash2_nulladdr != slot2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				hslot2 = udp_hashslot2(udptable, hash2_nulladdr);
 				exist = udp_lib_lport_inuse2(net, snum, hslot2,
 							     sk);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (exist)
 				goto fail_unlock;
 			else
@@ -326,6 +348,7 @@ int udp_lib_get_port(struct sock *sk, unsigned short snum,
 	if (sk_unhashed(sk)) {
 		if (sk->sk_reuseport &&
 		    udp_reuseport_add_sock(sk, hslot)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_sk(sk)->inet_num = 0;
 			udp_sk(sk)->udp_port_hash = 0;
 			udp_sk(sk)->udp_portaddr_hash ^= snum;
@@ -348,6 +371,7 @@ int udp_lib_get_port(struct sock *sk, unsigned short snum,
 		hslot2->count++;
 		spin_unlock(&hslot2->lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock_set_flag(sk, SOCK_RCU_FREE);
 	error = 0;
 fail_unlock:
@@ -393,34 +417,50 @@ static int compute_score(struct sock *sk, struct net *net,
 
 	if (inet->inet_rcv_saddr) {
 		if (inet->inet_rcv_saddr != daddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
 		score += 4;
 	}
 
 	if (inet->inet_daddr) {
 		if (inet->inet_daddr != saddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
 		score += 4;
 	}
 
 	if (inet->inet_dport) {
 		if (inet->inet_dport != sport)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
 		score += 4;
 	}
 
 	if (sk->sk_bound_dev_if || exact_dif) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bool dev_match = (sk->sk_bound_dev_if == dif ||
 				  sk->sk_bound_dev_if == sdif);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (exact_dif && !dev_match)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sk->sk_bound_dev_if && dev_match)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			score += 4;
+}
 	}
 
 	if (sk->sk_incoming_cpu == raw_smp_processor_id())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		score++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return score;
 }
 
@@ -430,6 +470,7 @@ static u32 udp_ehashfn(const struct net *net, const __be32 laddr,
 {
 	static u32 udp_ehash_secret __read_mostly;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_get_random_once(&udp_ehash_secret, sizeof(udp_ehash_secret));
 
 	return __inet_ehashfn(laddr, lport, faddr, fport,
@@ -450,6 +491,7 @@ static struct sock *udp4_lib_lookup2(struct net *net,
 
 	result = NULL;
 	badness = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	udp_portaddr_for_each_entry_rcu(sk, &hslot2->head) {
 		score = compute_score(sk, net, saddr, sport,
 				      daddr, hnum, dif, sdif, exact_dif);
@@ -492,31 +534,39 @@ struct sock *__udp4_lib_lookup(struct net *net, __be32 saddr,
 	u32 hash = 0;
 
 	if (hslot->count > 10) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hash2 = udp4_portaddr_hash(net, daddr, hnum);
 		slot2 = hash2 & udptable->mask;
 		hslot2 = &udptable->hash2[slot2];
 		if (hslot->count < hslot2->count)
 			goto begin;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = udp4_lib_lookup2(net, saddr, sport,
 					  daddr, hnum, dif, sdif,
 					  exact_dif, hslot2, skb);
 		if (!result) {
 			unsigned int old_slot2 = slot2;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hash2 = udp4_portaddr_hash(net, htonl(INADDR_ANY), hnum);
 			slot2 = hash2 & udptable->mask;
 			/* avoid searching the same slot again. */
 			if (unlikely(slot2 == old_slot2))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return result;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hslot2 = &udptable->hash2[slot2];
 			if (hslot->count < hslot2->count)
 				goto begin;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			result = udp4_lib_lookup2(net, saddr, sport,
 						  daddr, hnum, dif, sdif,
 						  exact_dif, hslot2, skb);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
 	}
 begin:
@@ -528,23 +578,33 @@ struct sock *__udp4_lib_lookup(struct net *net, __be32 saddr,
 		if (score > badness) {
 			reuseport = sk->sk_reuseport;
 			if (reuseport) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				hash = udp_ehashfn(net, daddr, hnum,
 						   saddr, sport);
 				result = reuseport_select_sock(sk, hash, skb,
 							sizeof(struct udphdr));
 				if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return result;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				matches = 1;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			result = sk;
 			badness = score;
 		} else if (score == badness && reuseport) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			matches++;
 			if (reciprocal_scale(hash, matches) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				result = sk;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hash = next_pseudo_random32(hash);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return result;
 }
 EXPORT_SYMBOL_GPL(__udp4_lib_lookup);
@@ -553,6 +613,7 @@ static inline struct sock *__udp4_lib_lookup_skb(struct sk_buff *skb,
 						 __be16 sport, __be16 dport,
 						 struct udp_table *udptable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct iphdr *iph = ip_hdr(skb);
 
 	return __udp4_lib_lookup(dev_net(skb->dev), iph->saddr, sport,
@@ -592,6 +653,7 @@ static inline bool __udp_is_mcast_sock(struct net *net, struct sock *sk,
 				       __be16 rmt_port, __be32 rmt_addr,
 				       int dif, int sdif, unsigned short hnum)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 
 	if (!net_eq(sock_net(sk), net) ||
@@ -604,7 +666,9 @@ static inline bool __udp_is_mcast_sock(struct net *net, struct sock *sk,
 	     sk->sk_bound_dev_if != sdif))
 		return false;
 	if (!ip_mc_sf_allow(sk, loc_addr, rmt_addr, dif, sdif))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	return true;
 }
 
@@ -635,10 +699,12 @@ void __udp4_lib_err(struct sk_buff *skb, u32 info, struct udp_table *udptable)
 			       iph->saddr, uh->source, skb->dev->ifindex, 0,
 			       udptable, NULL);
 	if (!sk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__ICMP_INC_STATS(net, ICMP_MIB_INERRORS);
 		return;	/* No socket for error */
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 	harderr = 0;
 	inet = inet_sk(sk);
@@ -656,14 +722,17 @@ void __udp4_lib_err(struct sk_buff *skb, u32 info, struct udp_table *udptable)
 		break;
 	case ICMP_DEST_UNREACH:
 		if (code == ICMP_FRAG_NEEDED) { /* Path MTU discovery */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ipv4_sk_update_pmtu(skb, sk, info);
 			if (inet->pmtudisc != IP_PMTUDISC_DONT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = EMSGSIZE;
 				harderr = 1;
 				break;
 			}
 			goto out;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = EHOSTUNREACH;
 		if (code <= NR_ICMP_UNREACH) {
 			harderr = icmp_err_convert[code].fatal;
@@ -683,7 +752,9 @@ void __udp4_lib_err(struct sk_buff *skb, u32 info, struct udp_table *udptable)
 		if (!harderr || sk->sk_state != TCP_ESTABLISHED)
 			goto out;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip_icmp_error(sk, skb, err, uh->dest, info, (u8 *)(uh+1));
+}
 
 	sk->sk_err = err;
 	sk->sk_error_report(sk);
@@ -701,9 +772,11 @@ void udp_err(struct sk_buff *skb, u32 info)
  */
 void udp_flush_pending_frames(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct udp_sock *up = udp_sk(sk);
 
 	if (up->pending) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->len = 0;
 		up->pending = 0;
 		ip_flush_pending_frames(sk);
@@ -720,6 +793,7 @@ EXPORT_SYMBOL(udp_flush_pending_frames);
  */
 void udp4_hwcsum(struct sk_buff *skb, __be32 src, __be32 dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct udphdr *uh = udp_hdr(skb);
 	int offset = skb_transport_offset(skb);
 	int len = skb->len - offset;
@@ -743,16 +817,20 @@ void udp4_hwcsum(struct sk_buff *skb, __be32 src, __be32 dst)
 		 * should be together
 		 */
 		skb_walk_frags(skb, frags) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			csum = csum_add(csum, frags->csum);
 			hlen -= frags->len;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		csum = skb_checksum(skb, offset, hlen, csum);
 		skb->ip_summed = CHECKSUM_NONE;
 
 		uh->check = csum_tcpudp_magic(src, dst, len, IPPROTO_UDP, csum);
 		if (uh->check == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uh->check = CSUM_MANGLED_0;
+}
 	}
 }
 EXPORT_SYMBOL_GPL(udp4_hwcsum);
@@ -763,6 +841,7 @@ EXPORT_SYMBOL_GPL(udp4_hwcsum);
 void udp_set_csum(bool nocheck, struct sk_buff *skb,
 		  __be32 saddr, __be32 daddr, int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct udphdr *uh = udp_hdr(skb);
 
 	if (nocheck) {
@@ -804,10 +883,13 @@ static int udp_send_skb(struct sk_buff *skb, struct flowi4 *fl4)
 	uh->check = 0;
 
 	if (is_udplite)  				 /*     UDP-Lite      */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		csum = udplite_csum(skb);
+}
 
 	else if (sk->sk_no_check_tx) {			 /* UDP csum off */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb->ip_summed = CHECKSUM_NONE;
 		goto send;
 
@@ -823,14 +905,19 @@ static int udp_send_skb(struct sk_buff *skb, struct flowi4 *fl4)
 	uh->check = csum_tcpudp_magic(fl4->saddr, fl4->daddr, len,
 				      sk->sk_protocol, csum);
 	if (uh->check == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uh->check = CSUM_MANGLED_0;
+}
 
 send:
 	err = ip_send_skb(sock_net(sk), skb);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err == -ENOBUFS && !inet->recverr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			UDP_INC_STATS(sock_net(sk),
 				      UDP_MIB_SNDBUFERRORS, is_udplite);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = 0;
 		}
 	} else
@@ -844,6 +931,7 @@ static int udp_send_skb(struct sk_buff *skb, struct flowi4 *fl4)
  */
 int udp_push_pending_frames(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct udp_sock  *up = udp_sk(sk);
 	struct inet_sock *inet = inet_sk(sk);
 	struct flowi4 *fl4 = &inet->cork.fl.u.ip4;
@@ -865,6 +953,7 @@ EXPORT_SYMBOL(udp_push_pending_frames);
 
 int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct udp_sock *up = udp_sk(sk);
 	struct flowi4 fl4_stack;
@@ -884,15 +973,20 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 	struct ip_options_data opt_copy;
 
 	if (len > 0xFFFF)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	/*
 	 *	Check the flags.
 	 */
 
 	if (msg->msg_flags & MSG_OOB) /* Mirror BSD error message compatibility */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ipc.opt = NULL;
 	ipc.tx_flags = 0;
 	ipc.ttl = 0;
@@ -908,12 +1002,15 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 		 */
 		lock_sock(sk);
 		if (likely(up->pending)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (unlikely(up->pending != AF_INET)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				release_sock(sk);
 				return -EINVAL;
 			}
 			goto do_append_data;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		release_sock(sk);
 	}
 	ulen += sizeof(struct udphdr);
@@ -922,21 +1019,31 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 	 *	Get and verify the address.
 	 */
 	if (msg->msg_name) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DECLARE_SOCKADDR(struct sockaddr_in *, usin, msg->msg_name);
 		if (msg->msg_namelen < sizeof(*usin))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 		if (usin->sin_family != AF_INET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (usin->sin_family != AF_UNSPEC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EAFNOSUPPORT;
+}
 		}
 
 		daddr = usin->sin_addr.s_addr;
 		dport = usin->sin_port;
 		if (dport == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 	} else {
 		if (sk->sk_state != TCP_ESTABLISHED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EDESTADDRREQ;
+}
 		daddr = inet->inet_daddr;
 		dport = inet->inet_dport;
 		/* Open fast path for connected socket.
@@ -950,13 +1057,19 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 	ipc.oif = sk->sk_bound_dev_if;
 
 	if (msg->msg_controllen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = ip_cmsg_send(sk, msg, &ipc, sk->sk_family == AF_INET6);
 		if (unlikely(err)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(ipc.opt);
 			return err;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ipc.opt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			free = 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		connected = 0;
 	}
 	if (!ipc.opt) {
@@ -965,10 +1078,12 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 		rcu_read_lock();
 		inet_opt = rcu_dereference(inet->inet_opt);
 		if (inet_opt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(&opt_copy, inet_opt,
 			       sizeof(*inet_opt) + inet_opt->opt.optlen);
 			ipc.opt = &opt_copy.opt;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 	}
 
@@ -978,8 +1093,12 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 	sock_tx_timestamp(sk, ipc.sockc.tsflags, &ipc.tx_flags);
 
 	if (ipc.opt && ipc.opt->opt.srr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!daddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		faddr = ipc.opt->opt.faddr;
 		connected = 0;
 	}
@@ -987,15 +1106,23 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 	if (sock_flag(sk, SOCK_LOCALROUTE) ||
 	    (msg->msg_flags & MSG_DONTROUTE) ||
 	    (ipc.opt && ipc.opt->opt.is_strictroute)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tos |= RTO_ONLINK;
 		connected = 0;
 	}
 
 	if (ipv4_is_multicast(daddr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ipc.oif)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ipc.oif = inet->mc_index;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!saddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			saddr = inet->mc_addr;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		connected = 0;
 	} else if (!ipc.oif)
 		ipc.oif = inet->uc_index;
@@ -1004,6 +1131,7 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 		rt = (struct rtable *)sk_dst_check(sk, 0);
 
 	if (!rt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct net *net = sock_net(sk);
 		__u8 flow_flags = inet_sk_flowi_flags(sk);
 
@@ -1018,19 +1146,25 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 		security_sk_classify_flow(sk, flowi4_to_flowi(fl4));
 		rt = ip_route_output_flow(net, fl4, sk);
 		if (IS_ERR(rt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(rt);
 			rt = NULL;
 			if (err == -ENETUNREACH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				IP_INC_STATS(net, IPSTATS_MIB_OUTNOROUTES);
+}
 			goto out;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EACCES;
 		if ((rt->rt_flags & RTCF_BROADCAST) &&
 		    !sock_flag(sk, SOCK_BROADCAST))
 			goto out;
 		if (connected)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_dst_set(sk, dst_clone(&rt->dst));
+}
 	}
 
 	if (msg->msg_flags&MSG_CONFIRM)
@@ -1039,7 +1173,9 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 
 	saddr = fl4->saddr;
 	if (!ipc.addr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		daddr = ipc.addr = fl4->daddr;
+}
 
 	/* Lockless fast path for the non-corking case. */
 	if (!corkreq) {
@@ -1052,13 +1188,16 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lock_sock(sk);
 	if (unlikely(up->pending)) {
 		/* The socket is already corked while preparing it. */
 		/* ... which is an evident application bug. --ANK */
 		release_sock(sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_dbg_ratelimited("socket already corked\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		goto out;
 	}
@@ -1078,19 +1217,32 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 			     sizeof(struct udphdr), &ipc, &rt,
 			     corkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		udp_flush_pending_frames(sk);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (!corkreq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = udp_push_pending_frames(sk);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (unlikely(skb_queue_empty(&sk->sk_write_queue)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up->pending = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	release_sock(sk);
 
 out:
 	ip_rt_put(rt);
 	if (free)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(ipc.opt);
+}
 	if (!err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return len;
+}
 	/*
 	 * ENOBUFS = no kernel mem, SOCK_NOSPACE = no sndbuf space.  Reporting
 	 * ENOBUFS might not be good (it's not tunable per se), but otherwise
@@ -1099,16 +1251,22 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 	 * seems like overkill.
 	 */
 	if (err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		UDP_INC_STATS(sock_net(sk),
 			      UDP_MIB_SNDBUFERRORS, is_udplite);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 
 do_confirm:
 	if (msg->msg_flags & MSG_PROBE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_confirm_neigh(&rt->dst, &fl4->daddr);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(msg->msg_flags&MSG_PROBE) || len)
 		goto back_from_confirm;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 	goto out;
 }
@@ -1117,6 +1275,7 @@ EXPORT_SYMBOL(udp_sendmsg);
 int udp_sendpage(struct sock *sk, struct page *page, int offset,
 		 size_t size, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct udp_sock *up = udp_sk(sk);
 	int ret;
@@ -1171,8 +1330,10 @@ int udp_sendpage(struct sock *sk, struct page *page, int offset,
 
 static void udp_set_dev_scratch(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct udp_dev_scratch *scratch = udp_skb_scratch(skb);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(sizeof(struct udp_dev_scratch) > sizeof(long));
 	scratch->_tsize_state = skb->truesize;
 #if BITS_PER_LONG == 64
@@ -1202,6 +1363,7 @@ static bool udp_skb_has_head_state(struct sk_buff *skb)
 static void udp_rmem_release(struct sock *sk, int size, int partial,
 			     bool rx_queue_lock_held)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct udp_sock *up = udp_sk(sk);
 	struct sk_buff_head *sk_queue;
 	int amt;
@@ -1222,7 +1384,9 @@ static void udp_rmem_release(struct sock *sk, int size, int partial,
 	 */
 	sk_queue = &sk->sk_receive_queue;
 	if (!rx_queue_lock_held)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&sk_queue->lock);
+}
 
 
 	sk->sk_forward_alloc += size;
@@ -1238,8 +1402,10 @@ static void udp_rmem_release(struct sock *sk, int size, int partial,
 	skb_queue_splice_tail_init(sk_queue, &up->reader_queue);
 
 	if (!rx_queue_lock_held)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&sk_queue->lock);
 }
+}
 
 /* Note: called with reader_queue.lock held.
  * Instead of using skb->truesize here, find a copy of it in skb->dev_scratch
@@ -1256,6 +1422,7 @@ EXPORT_SYMBOL(udp_skb_destructor);
 /* as above, but the caller held the rx queue lock, too */
 static void udp_skb_dtor_locked(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	prefetch(&skb->data);
 	udp_rmem_release(sk, udp_skb_truesize(skb), 1, true);
 }
@@ -1282,8 +1449,10 @@ static spinlock_t *busylock_acquire(void *ptr)
 static void busylock_release(spinlock_t *busy)
 {
 	if (busy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(busy);
 }
+}
 
 int __udp_enqueue_schedule_skb(struct sock *sk, struct sk_buff *skb)
 {
@@ -1306,6 +1475,7 @@ int __udp_enqueue_schedule_skb(struct sock *sk, struct sk_buff *skb)
 	 * - Less work at consume_skb() (less alien page frag freeing)
 	 */
 	if (rmem > (sk->sk_rcvbuf >> 1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb_condense(skb);
 
 		busy = busylock_acquire(sk);
@@ -1320,11 +1490,14 @@ int __udp_enqueue_schedule_skb(struct sock *sk, struct sk_buff *skb)
 	if (rmem > (size + sk->sk_rcvbuf))
 		goto uncharge_drop;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&list->lock);
 	if (size >= sk->sk_forward_alloc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		amt = sk_mem_pages(size);
 		delta = amt << SK_MEM_QUANTUM_SHIFT;
 		if (!__sk_mem_raise_allocated(sk, delta, amt, SK_MEM_RECV)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENOBUFS;
 			spin_unlock(&list->lock);
 			goto uncharge_drop;
@@ -1368,6 +1541,7 @@ void udp_destruct_sock(struct sock *sk)
 
 	skb_queue_splice_tail_init(&sk->sk_receive_queue, &up->reader_queue);
 	while ((skb = __skb_dequeue(&up->reader_queue)) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		total += skb->truesize;
 		kfree_skb(skb);
 	}
@@ -1388,6 +1562,7 @@ EXPORT_SYMBOL_GPL(udp_init_sock);
 void skb_consume_udp(struct sock *sk, struct sk_buff *skb, int len)
 {
 	if (unlikely(READ_ONCE(sk->sk_peek_off) >= 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bool slow = lock_sock_fast(sk);
 
 		sk_peek_offset_bwd(sk, len);
@@ -1395,13 +1570,17 @@ void skb_consume_udp(struct sock *sk, struct sk_buff *skb, int len)
 	}
 
 	if (!skb_unref(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* In the more common cases we cleared the head states previously,
 	 * see __udp_queue_rcv_skb().
 	 */
 	if (unlikely(udp_skb_has_head_state(skb)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb_release_head_state(skb);
+}
 	__consume_stateless_skb(skb);
 }
 EXPORT_SYMBOL_GPL(skb_consume_udp);
@@ -1414,10 +1593,13 @@ static struct sk_buff *__first_packet_length(struct sock *sk,
 
 	while ((skb = skb_peek(rcvq)) != NULL) {
 		if (udp_lib_checksum_complete(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__UDP_INC_STATS(sock_net(sk), UDP_MIB_CSUMERRORS,
 					IS_UDPLITE(sk));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__UDP_INC_STATS(sock_net(sk), UDP_MIB_INERRORS,
 					IS_UDPLITE(sk));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atomic_inc(&sk->sk_drops);
 			__skb_unlink(skb, rcvq);
 			*total += skb->truesize;
@@ -1451,6 +1633,7 @@ static int first_packet_length(struct sock *sk)
 	spin_lock_bh(&rcvq->lock);
 	skb = __first_packet_length(sk, rcvq, &total);
 	if (!skb && !skb_queue_empty(sk_queue)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&sk_queue->lock);
 		skb_queue_splice_tail_init(sk_queue, rcvq);
 		spin_unlock(&sk_queue->lock);
@@ -1459,7 +1642,10 @@ static int first_packet_length(struct sock *sk)
 	}
 	res = skb ? skb->len : -1;
 	if (total)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		udp_rmem_release(sk, total, 1, false);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&rcvq->lock);
 	return res;
 }
@@ -1473,8 +1659,10 @@ int udp_ioctl(struct sock *sk, int cmd, unsigned long arg)
 	switch (cmd) {
 	case SIOCOUTQ:
 	{
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int amount = sk_wmem_alloc_get(sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return put_user(amount, (int __user *)arg);
 	}
 
@@ -1489,6 +1677,7 @@ int udp_ioctl(struct sock *sk, int cmd, unsigned long arg)
 		return -ENOIOCTLCMD;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(udp_ioctl);
@@ -1515,17 +1704,20 @@ struct sk_buff *__skb_recv_udp(struct sock *sk, unsigned int flags,
 		error = -EAGAIN;
 		*peeked = 0;
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock_bh(&queue->lock);
 			skb = __skb_try_recv_from_queue(sk, queue, flags,
 							udp_skb_destructor,
 							peeked, off, err,
 							&last);
 			if (skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock_bh(&queue->lock);
 				return skb;
 			}
 
 			if (skb_queue_empty(sk_queue)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock_bh(&queue->lock);
 				goto busy_check;
 			}
@@ -1545,13 +1737,17 @@ struct sk_buff *__skb_recv_udp(struct sock *sk, unsigned int flags,
 			spin_unlock(&sk_queue->lock);
 			spin_unlock_bh(&queue->lock);
 			if (skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return skb;
+}
 
 busy_check:
 			if (!sk_can_busy_loop(sk))
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_busy_loop(sk, flags & MSG_DONTWAIT);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (!skb_queue_empty(sk_queue));
 
 		/* sk_queue is empty, reader_queue may contain peeked packets */
@@ -1572,6 +1768,7 @@ EXPORT_SYMBOL_GPL(__skb_recv_udp);
 int udp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int noblock,
 		int flags, int *addr_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	DECLARE_SOCKADDR(struct sockaddr_in *, sin, msg->msg_name);
 	struct sk_buff *skb;
@@ -1582,7 +1779,9 @@ int udp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int noblock,
 	bool checksum_valid = false;
 
 	if (flags & MSG_ERRQUEUE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ip_recv_error(sk, msg, len, addr_len);
+}
 
 try_again:
 	peeking = flags & MSG_PEEK;
@@ -1591,12 +1790,18 @@ int udp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int noblock,
 	if (!skb)
 		return err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ulen = udp_skb_len(skb);
 	copied = len;
 	if (copied > ulen - off)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		copied = ulen - off;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (copied < ulen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msg->msg_flags |= MSG_TRUNC;
+}
 
 	/*
 	 * If checksum is needed at all, try to do it while copying the
@@ -1606,6 +1811,7 @@ int udp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int noblock,
 
 	if (copied < ulen || peeking ||
 	    (is_udplite && UDP_SKB_CB(skb)->partial_cov)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		checksum_valid = udp_skb_csum_unnecessary(skb) ||
 				!__udp_lib_checksum_complete(skb);
 		if (!checksum_valid)
@@ -1614,10 +1820,13 @@ int udp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int noblock,
 
 	if (checksum_valid || udp_skb_csum_unnecessary(skb)) {
 		if (udp_skb_is_linear(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = copy_linear_skb(skb, copied, off, &msg->msg_iter);
+}
 		else
 			err = skb_copy_datagram_msg(skb, off, msg, copied);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = skb_copy_and_csum_datagram_msg(skb, off, msg);
 
 		if (err == -EINVAL)
@@ -1625,11 +1834,15 @@ int udp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int noblock,
 	}
 
 	if (unlikely(err)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!peeked) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atomic_inc(&sk->sk_drops);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			UDP_INC_STATS(sock_net(sk),
 				      UDP_MIB_INERRORS, is_udplite);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
 		return err;
 	}
@@ -1649,11 +1862,15 @@ int udp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int noblock,
 		*addr_len = sizeof(*sin);
 	}
 	if (inet->cmsg_flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip_cmsg_recv_offset(msg, sk, skb, sizeof(struct udphdr), off);
+}
 
 	err = copied;
 	if (flags & MSG_TRUNC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = ulen;
+}
 
 	skb_consume_udp(sk, skb, peeking ? -err : err);
 	return err;
@@ -2579,6 +2796,7 @@ static struct sock *udp_get_first(struct seq_file *seq, int start)
 	struct udp_iter_state *state = seq->private;
 	struct net *net = seq_file_net(seq);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (state->bucket = start; state->bucket <= state->udp_table->mask;
 	     ++state->bucket) {
 		struct udp_hslot *hslot = &state->udp_table->hash[state->bucket];
@@ -2606,6 +2824,7 @@ static struct sock *udp_get_next(struct seq_file *seq, struct sock *sk)
 	struct net *net = seq_file_net(seq);
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk = sk_next(sk);
 	} while (sk && (!net_eq(sock_net(sk), net) || sk->sk_family != state->family));
 
@@ -2619,6 +2838,7 @@ static struct sock *udp_get_next(struct seq_file *seq, struct sock *sk)
 
 static struct sock *udp_get_idx(struct seq_file *seq, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sock *sk = udp_get_first(seq, 0);
 
 	if (sk)
@@ -2632,6 +2852,7 @@ static void *udp_seq_start(struct seq_file *seq, loff_t *pos)
 	struct udp_iter_state *state = seq->private;
 	state->bucket = MAX_UDP_PORTS;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return *pos ? udp_get_idx(seq, *pos-1) : SEQ_START_TOKEN;
 }
 
@@ -2640,7 +2861,9 @@ static void *udp_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 	struct sock *sk;
 
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk = udp_get_idx(seq, 0);
+}
 	else
 		sk = udp_get_next(seq, v);
 
@@ -2653,11 +2876,14 @@ static void udp_seq_stop(struct seq_file *seq, void *v)
 	struct udp_iter_state *state = seq->private;
 
 	if (state->bucket <= state->udp_table->mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&state->udp_table->hash[state->bucket].lock);
 }
+}
 
 int udp_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct udp_seq_afinfo *afinfo = PDE_DATA(inode);
 	struct udp_iter_state *s;
 	int err;
@@ -2687,7 +2913,9 @@ int udp_proc_register(struct net *net, struct udp_seq_afinfo *afinfo)
 	p = proc_create_data(afinfo->name, S_IRUGO, net->proc_net,
 			     afinfo->seq_fops, afinfo);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = -ENOMEM;
+}
 	return rc;
 }
 EXPORT_SYMBOL(udp_proc_register);
@@ -2702,6 +2930,7 @@ EXPORT_SYMBOL(udp_proc_unregister);
 static void udp4_format_sock(struct sock *sp, struct seq_file *f,
 		int bucket)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sp);
 	__be32 dest = inet->inet_daddr;
 	__be32 src  = inet->inet_rcv_saddr;
@@ -2722,6 +2951,7 @@ static void udp4_format_sock(struct sock *sp, struct seq_file *f,
 
 int udp4_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_setwidth(seq, 127);
 	if (v == SEQ_START_TOKEN)
 		seq_puts(seq, "  sl  local_address rem_address   st tx_queue "
@@ -2777,6 +3007,7 @@ int __init udp4_proc_init(void)
 
 void udp4_proc_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&udp4_net_ops);
 }
 #endif /* CONFIG_PROC_FS */
@@ -2787,7 +3018,9 @@ static int __init set_uhash_entries(char *str)
 	ssize_t ret;
 
 	if (!str)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = kstrtoul(str, 0, &uhash_entries);
 	if (ret)
@@ -2830,6 +3063,7 @@ u32 udp_flow_hashrnd(void)
 {
 	static u32 hashrnd __read_mostly;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_get_random_once(&hashrnd, sizeof(hashrnd));
 
 	return hashrnd;
@@ -2856,7 +3090,9 @@ void __init udp_init(void)
 	udp_busylocks = kmalloc(sizeof(spinlock_t) << udp_busylocks_log,
 				GFP_KERNEL);
 	if (!udp_busylocks)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("UDP: failed to alloc udp_busylocks\n");
+}
 	for (i = 0; i < (1U << udp_busylocks_log); i++)
 		spin_lock_init(udp_busylocks + i);
 }
diff --git a/net/ipv4/udp_diag.c b/net/ipv4/udp_diag.c
index d0390d8..916934b 100644
--- a/net/ipv4/udp_diag.c
+++ b/net/ipv4/udp_diag.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * udp_diag.c	Module for monitoring UDP transport protocols sockets.
  *
diff --git a/net/ipv4/udp_offload.c b/net/ipv4/udp_offload.c
index ea6e6e7..c57d029 100644
--- a/net/ipv4/udp_offload.c
+++ b/net/ipv4/udp_offload.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPV4 GSO/GRO offload support
  *	Linux INET implementation
@@ -20,6 +22,7 @@ static struct sk_buff *__skb_udp_tunnel_segment(struct sk_buff *skb,
 					     netdev_features_t features),
 	__be16 new_protocol, bool is_ipv6)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int tnl_hlen = skb_inner_mac_header(skb) - skb_transport_header(skb);
 	bool remcsum, need_csum, offload_csum, gso_partial;
 	struct sk_buff *segs = ERR_PTR(-EINVAL);
@@ -190,6 +193,7 @@ EXPORT_SYMBOL(skb_udp_tunnel_segment);
 static struct sk_buff *udp4_ufo_fragment(struct sk_buff *skb,
 					 netdev_features_t features)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sk_buff *segs = ERR_PTR(-EINVAL);
 	unsigned int mss;
 	__wsum csum;
@@ -272,10 +276,13 @@ struct sk_buff **udp_gro_receive(struct sk_buff **head, struct sk_buff *skb,
 unflush:
 	flush = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (p = *head; p; p = p->next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!NAPI_GRO_CB(p)->same_flow)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uh2 = (struct udphdr   *)(p->data + off);
 
 		/* Match ports and either checksums are either both zero
@@ -283,11 +290,13 @@ struct sk_buff **udp_gro_receive(struct sk_buff **head, struct sk_buff *skb,
 		 */
 		if ((*(u32 *)&uh->source != *(u32 *)&uh2->source) ||
 		    (!uh->check ^ !uh2->check)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NAPI_GRO_CB(p)->same_flow = 0;
 			continue;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_gro_pull(skb, sizeof(struct udphdr)); /* pull encapsulating udp header */
 	skb_gro_postpull_rcsum(skb, uh, sizeof(struct udphdr));
 	pp = call_gro_receive_sk(udp_sk(sk)->gro_receive, sk, head, skb);
@@ -330,6 +339,7 @@ static struct sk_buff **udp4_gro_receive(struct sk_buff **head,
 int udp_gro_complete(struct sk_buff *skb, int nhoff,
 		     udp_lookup_t lookup)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__be16 newlen = htons(skb->len - nhoff);
 	struct udphdr *uh = (struct udphdr *)(skb->data + nhoff);
 	int err = -ENOSYS;
@@ -358,6 +368,7 @@ EXPORT_SYMBOL(udp_gro_complete);
 
 static int udp4_gro_complete(struct sk_buff *skb, int nhoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct iphdr *iph = ip_hdr(skb);
 	struct udphdr *uh = (struct udphdr *)(skb->data + nhoff);
 
diff --git a/net/ipv4/udplite.c b/net/ipv4/udplite.c
index 59f10fe..9785b84 100644
--- a/net/ipv4/udplite.c
+++ b/net/ipv4/udplite.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  UDPLITE     An implementation of the UDP-Lite protocol (RFC 3828).
  *
@@ -21,11 +23,13 @@ EXPORT_SYMBOL(udplite_table);
 
 static int udplite_rcv(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __udp4_lib_rcv(skb, &udplite_table, IPPROTO_UDPLITE);
 }
 
 static void udplite_err(struct sk_buff *skb, u32 info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__udp4_lib_err(skb, info, &udplite_table);
 }
 
@@ -130,7 +134,10 @@ void __init udplite4_register(void)
 	inet_register_protosw(&udplite4_protosw);
 
 	if (udplite4_proc_init())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s: Cannot register /proc!\n", __func__);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return;
 
 out_unregister_proto:
diff --git a/net/ipv4/xfrm4_policy.c b/net/ipv4/xfrm4_policy.c
index 05017e2..9b32481 100644
--- a/net/ipv4/xfrm4_policy.c
+++ b/net/ipv4/xfrm4_policy.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * xfrm4_policy.c
@@ -32,7 +34,9 @@ static struct dst_entry *__xfrm4_dst_lookup(struct net *net, struct flowi4 *fl4,
 	fl4->flowi4_oif = l3mdev_master_ifindex_by_index(net, oif);
 	fl4->flowi4_mark = mark;
 	if (saddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl4->saddr = saddr->a4;
+}
 
 	fl4->flowi4_flags = FLOWI_FLAG_SKIP_NH_OIF;
 
@@ -62,7 +66,9 @@ static int xfrm4_get_saddr(struct net *net, int oif,
 
 	dst = __xfrm4_dst_lookup(net, &fl4, 0, oif, NULL, daddr, mark);
 	if (IS_ERR(dst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EHOSTUNREACH;
+}
 
 	saddr->a4 = fl4.saddr;
 	dst_release(dst);
@@ -71,12 +77,14 @@ static int xfrm4_get_saddr(struct net *net, int oif,
 
 static int xfrm4_get_tos(const struct flowi *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return IPTOS_RT_MASK & fl->u.ip4.flowi4_tos; /* Strip ECN bits */
 }
 
 static int xfrm4_init_path(struct xfrm_dst *path, struct dst_entry *dst,
 			   int nfheader_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -109,6 +117,7 @@ static int xfrm4_fill_dst(struct xfrm_dst *xdst, struct net_device *dev,
 static void
 _decode_session4(struct sk_buff *skb, struct flowi *fl, int reverse)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct iphdr *iph = ip_hdr(skb);
 	u8 *xprth = skb_network_header(skb) + iph->ihl * 4;
 	struct flowi4 *fl4 = &fl->u.ip4;
@@ -117,6 +126,7 @@ _decode_session4(struct sk_buff *skb, struct flowi *fl, int reverse)
 	if (skb_dst(skb))
 		oif = skb_dst(skb)->dev->ifindex;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(fl4, 0, sizeof(struct flowi4));
 	fl4->flowi4_mark = skb->mark;
 	fl4->flowi4_oif = reverse ? skb->skb_iif : oif;
@@ -185,6 +195,7 @@ _decode_session4(struct sk_buff *skb, struct flowi *fl, int reverse)
 				xprth = skb_network_header(skb) + iph->ihl * 4;
 				ipcomp_hdr = (__be16 *)xprth;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fl4->fl4_ipsec_spi = htonl(ntohs(ipcomp_hdr[1]));
 			}
 			break;
@@ -199,9 +210,14 @@ _decode_session4(struct sk_buff *skb, struct flowi *fl, int reverse)
 				greflags = (__be16 *)xprth;
 				gre_hdr = (__be32 *)xprth;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (greflags[0] & GRE_KEY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (greflags[0] & GRE_CSUM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						gre_hdr++;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					fl4->fl4_gre_key = gre_hdr[1];
 				}
 			}
@@ -248,6 +264,7 @@ static void xfrm4_dst_destroy(struct dst_entry *dst)
 static void xfrm4_dst_ifdown(struct dst_entry *dst, struct net_device *dev,
 			     int unregister)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!unregister)
 		return;
 
@@ -295,6 +312,7 @@ static __net_init int xfrm4_net_sysctl_init(struct net *net)
 
 	table = xfrm4_policy_table;
 	if (!net_eq(net, &init_net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table = kmemdup(table, sizeof(xfrm4_policy_table), GFP_KERNEL);
 		if (!table)
 			goto err_alloc;
@@ -311,7 +329,9 @@ static __net_init int xfrm4_net_sysctl_init(struct net *net)
 
 err_reg:
 	if (!net_eq(net, &init_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(table);
+}
 err_alloc:
 	return -ENOMEM;
 }
@@ -321,7 +341,9 @@ static __net_exit void xfrm4_net_sysctl_exit(struct net *net)
 	struct ctl_table *table;
 
 	if (!net->ipv4.xfrm4_hdr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	table = net->ipv4.xfrm4_hdr->ctl_table_arg;
 	unregister_net_sysctl_table(net->ipv4.xfrm4_hdr);
@@ -347,12 +369,17 @@ static int __net_init xfrm4_net_init(struct net *net)
 	       sizeof(xfrm4_dst_ops_template));
 	ret = dst_entries_init(&net->xfrm.xfrm4_dst_ops);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = xfrm4_net_sysctl_init(net);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_entries_destroy(&net->xfrm.xfrm4_dst_ops);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
diff --git a/net/ipv4/xfrm4_protocol.c b/net/ipv4/xfrm4_protocol.c
index 8dd0e6ab..4a4064c 100644
--- a/net/ipv4/xfrm4_protocol.c
+++ b/net/ipv4/xfrm4_protocol.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* xfrm4_protocol.c - Generic xfrm protocol multiplexer.
  *
  * Copyright (C) 2013 secunet Security Networks AG
@@ -29,6 +31,7 @@ static DEFINE_MUTEX(xfrm4_protocol_mutex);
 
 static inline struct xfrm4_protocol __rcu **proto_handlers(u8 protocol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (protocol) {
 	case IPPROTO_ESP:
 		return &esp4_handlers;
@@ -53,7 +56,9 @@ int xfrm4_rcv_cb(struct sk_buff *skb, u8 protocol, int err)
 	struct xfrm4_protocol __rcu **head = proto_handlers(protocol);
 
 	if (!head)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	for_each_protocol_rcu(*head, handler)
 		if ((ret = handler->cb_handler(skb, err)) <= 0)
@@ -77,6 +82,7 @@ int xfrm4_rcv_encap(struct sk_buff *skb, int nexthdr, __be32 spi,
 	if (!head)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(*head, handler)
 		if ((ret = handler->input_handler(skb, nexthdr, spi, encap_type)) != -EINVAL)
 			return ret;
@@ -96,6 +102,7 @@ static int xfrm4_esp_rcv(struct sk_buff *skb)
 
 	XFRM_TUNNEL_SKB_CB(skb)->tunnel.ip4 = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(esp4_handlers, handler)
 		if ((ret = handler->handler(skb)) != -EINVAL)
 			return ret;
@@ -110,6 +117,7 @@ static void xfrm4_esp_err(struct sk_buff *skb, u32 info)
 {
 	struct xfrm4_protocol *handler;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(esp4_handlers, handler)
 		if (!handler->err_handler(skb, info))
 			break;
@@ -122,6 +130,7 @@ static int xfrm4_ah_rcv(struct sk_buff *skb)
 
 	XFRM_TUNNEL_SKB_CB(skb)->tunnel.ip4 = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(ah4_handlers, handler)
 		if ((ret = handler->handler(skb)) != -EINVAL)
 			return ret;
@@ -136,6 +145,7 @@ static void xfrm4_ah_err(struct sk_buff *skb, u32 info)
 {
 	struct xfrm4_protocol *handler;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(ah4_handlers, handler)
 		if (!handler->err_handler(skb, info))
 			break;
@@ -148,6 +158,7 @@ static int xfrm4_ipcomp_rcv(struct sk_buff *skb)
 
 	XFRM_TUNNEL_SKB_CB(skb)->tunnel.ip4 = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(ipcomp4_handlers, handler)
 		if ((ret = handler->handler(skb)) != -EINVAL)
 			return ret;
@@ -162,6 +173,7 @@ static void xfrm4_ipcomp_err(struct sk_buff *skb, u32 info)
 {
 	struct xfrm4_protocol *handler;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(ipcomp4_handlers, handler)
 		if (!handler->err_handler(skb, info))
 			break;
@@ -195,6 +207,7 @@ static const struct xfrm_input_afinfo xfrm4_input_afinfo = {
 
 static inline const struct net_protocol *netproto(unsigned char protocol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (protocol) {
 	case IPPROTO_ESP:
 		return &esp4_protocol;
@@ -216,6 +229,7 @@ int xfrm4_protocol_register(struct xfrm4_protocol *handler,
 	int ret = -EEXIST;
 	int priority = handler->priority;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!proto_handlers(protocol) || !netproto(protocol))
 		return -EINVAL;
 
@@ -261,6 +275,7 @@ int xfrm4_protocol_deregister(struct xfrm4_protocol *handler,
 	struct xfrm4_protocol *t;
 	int ret = -ENOENT;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!proto_handlers(protocol) || !netproto(protocol))
 		return -EINVAL;
 
diff --git a/net/ipv4/xfrm4_state.c b/net/ipv4/xfrm4_state.c
index 80c40b4..2c4eb24 100644
--- a/net/ipv4/xfrm4_state.c
+++ b/net/ipv4/xfrm4_state.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * xfrm4_state.c
@@ -17,6 +19,7 @@
 
 static int xfrm4_init_flags(struct xfrm_state *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (xs_net(x)->ipv4.sysctl_ip_no_pmtu_disc)
 		x->props.flags |= XFRM_STATE_NOPMTUDISC;
 	return 0;
@@ -30,6 +33,7 @@ __xfrm4_init_tempsel(struct xfrm_selector *sel, const struct flowi *fl)
 	sel->daddr.a4 = fl4->daddr;
 	sel->saddr.a4 = fl4->saddr;
 	sel->dport = xfrm_flowi_dport(fl, &fl4->uli);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sel->dport_mask = htons(0xffff);
 	sel->sport = xfrm_flowi_sport(fl, &fl4->uli);
 	sel->sport_mask = htons(0xffff);
@@ -44,6 +48,7 @@ static void
 xfrm4_init_temprop(struct xfrm_state *x, const struct xfrm_tmpl *tmpl,
 		   const xfrm_address_t *daddr, const xfrm_address_t *saddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	x->id = tmpl->id;
 	if (x->id.daddr.a4 == 0)
 		x->id.daddr.a4 = daddr->a4;
@@ -57,6 +62,7 @@ xfrm4_init_temprop(struct xfrm_state *x, const struct xfrm_tmpl *tmpl,
 
 int xfrm4_extract_header(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct iphdr *iph = ip_hdr(skb);
 
 	XFRM_MODE_SKB_CB(skb)->ihl = sizeof(*iph);
diff --git a/net/ipv6/addrconf.c b/net/ipv6/addrconf.c
index 6a76e41..2c2d43d 100644
--- a/net/ipv6/addrconf.c
+++ b/net/ipv6/addrconf.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPv6 Address [auto]configuration
  *	Linux INET6 implementation
@@ -313,18 +315,23 @@ static inline bool addrconf_link_ready(const struct net_device *dev)
 static void addrconf_del_rs_timer(struct inet6_dev *idev)
 {
 	if (del_timer(&idev->rs_timer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__in6_dev_put(idev);
 }
+}
 
 static void addrconf_del_dad_work(struct inet6_ifaddr *ifp)
 {
 	if (cancel_delayed_work(&ifp->dad_work))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__in6_ifa_put(ifp);
 }
+}
 
 static void addrconf_mod_rs_timer(struct inet6_dev *idev,
 				  unsigned long when)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!timer_pending(&idev->rs_timer))
 		in6_dev_hold(idev);
 	mod_timer(&idev->rs_timer, jiffies + when);
@@ -333,10 +340,13 @@ static void addrconf_mod_rs_timer(struct inet6_dev *idev,
 static void addrconf_mod_dad_work(struct inet6_ifaddr *ifp,
 				   unsigned long delay)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	in6_ifa_hold(ifp);
 	if (mod_delayed_work(addrconf_wq, &ifp->dad_work, delay))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		in6_ifa_put(ifp);
 }
+}
 
 static int snmp6_alloc_dev(struct inet6_dev *idev)
 {
@@ -362,6 +372,7 @@ static int snmp6_alloc_dev(struct inet6_dev *idev)
 	if (!idev->stats.icmpv6msgdev)
 		goto err_icmpmsg;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_icmpmsg:
@@ -380,11 +391,15 @@ static struct inet6_dev *ipv6_add_dev(struct net_device *dev)
 	ASSERT_RTNL();
 
 	if (dev->mtu < IPV6_MIN_MTU)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	ndev = kzalloc(sizeof(struct inet6_dev), GFP_KERNEL);
 	if (!ndev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(err);
+}
 
 	rwlock_init(&ndev->lock);
 	ndev->dev = dev;
@@ -394,25 +409,32 @@ static struct inet6_dev *ipv6_add_dev(struct net_device *dev)
 	memcpy(&ndev->cnf, dev_net(dev)->ipv6.devconf_dflt, sizeof(ndev->cnf));
 
 	if (ndev->cnf.stable_secret.initialized)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ndev->cnf.addr_gen_mode = IN6_ADDR_GEN_MODE_STABLE_PRIVACY;
+}
 	else
 		ndev->cnf.addr_gen_mode = ipv6_devconf_dflt.addr_gen_mode;
 
 	ndev->cnf.mtu6 = dev->mtu;
 	ndev->nd_parms = neigh_parms_alloc(dev, &nd_tbl);
 	if (!ndev->nd_parms) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(ndev);
 		return ERR_PTR(err);
 	}
 	if (ndev->cnf.forwarding)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_disable_lro(dev);
+}
 	/* We refer to the device */
 	dev_hold(dev);
 
 	if (snmp6_alloc_dev(ndev) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ADBG(KERN_WARNING
 			"%s: cannot allocate memory for statistics; dev=%s.\n",
 			__func__, dev->name);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		neigh_parms_release(&nd_tbl, ndev->nd_parms);
 		dev_put(dev);
 		kfree(ndev);
@@ -420,6 +442,7 @@ static struct inet6_dev *ipv6_add_dev(struct net_device *dev)
 	}
 
 	if (snmp6_register_dev(ndev) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ADBG(KERN_WARNING
 			"%s: cannot create /proc/net/dev_snmp6/%s\n",
 			__func__, dev->name);
@@ -434,6 +457,7 @@ static struct inet6_dev *ipv6_add_dev(struct net_device *dev)
 
 #if IS_ENABLED(CONFIG_IPV6_SIT)
 	if (dev->type == ARPHRD_SIT && (dev->priv_flags & IFF_ISATAP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("%s: Disabled Multicast RS\n", dev->name);
 		ndev->cnf.rtr_solicits = 0;
 	}
@@ -453,12 +477,15 @@ static struct inet6_dev *ipv6_add_dev(struct net_device *dev)
 	ndev->token = in6addr_any;
 
 	if (netif_running(dev) && addrconf_link_ready(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ndev->if_flags |= IF_READY;
+}
 
 	ipv6_mc_init_dev(ndev);
 	ndev->tstamp = jiffies;
 	err = addrconf_sysctl_register(ndev);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ipv6_mc_destroy_dev(ndev);
 		snmp6_unregister_dev(ndev);
 		goto err_release;
@@ -474,8 +501,11 @@ static struct inet6_dev *ipv6_add_dev(struct net_device *dev)
 
 	/* Join all-router multicast group if forwarding is set */
 	if (ndev->cnf.forwarding && (dev->flags & IFF_MULTICAST))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ipv6_dev_mc_inc(dev, &in6addr_linklocal_allrouters);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ndev;
 
 err_release:
@@ -491,15 +521,20 @@ static struct inet6_dev *ipv6_find_idev(struct net_device *dev)
 
 	ASSERT_RTNL();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	idev = __in6_dev_get(dev);
 	if (!idev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		idev = ipv6_add_dev(dev);
 		if (IS_ERR(idev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
 	}
 
 	if (dev->flags&IFF_UP)
 		ipv6_mc_up(idev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return idev;
 }
 
@@ -510,10 +545,14 @@ static int inet6_netconf_msgsize_devconf(int type)
 	bool all = false;
 
 	if (type == NETCONFA_ALL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		all = true;
+}
 
 	if (all || type == NETCONFA_FORWARDING)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		size += nla_total_size(4);
+}
 #ifdef CONFIG_IPV6_MROUTE
 	if (all || type == NETCONFA_MC_FORWARDING)
 		size += nla_total_size(4);
@@ -539,11 +578,16 @@ static int inet6_netconf_fill_devconf(struct sk_buff *skb, int ifindex,
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(struct netconfmsg),
 			flags);
 	if (!nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	if (type == NETCONFA_ALL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		all = true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ncm = nlmsg_data(nlh);
 	ncm->ncm_family = AF_INET6;
 
@@ -615,6 +659,7 @@ static int inet6_netconf_get_devconf(struct sk_buff *in_skb,
 				     struct nlmsghdr *nlh,
 				     struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(in_skb->sk);
 	struct nlattr *tb[NETCONFA_MAX+1];
 	struct netconfmsg *ncm;
@@ -676,6 +721,7 @@ static int inet6_netconf_get_devconf(struct sk_buff *in_skb,
 static int inet6_netconf_dump_devconf(struct sk_buff *skb,
 				      struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	int h, s_h;
 	int idx, s_idx;
@@ -751,7 +797,9 @@ static void dev_forward_change(struct inet6_dev *idev)
 	struct inet6_ifaddr *ifa;
 
 	if (!idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	dev = idev->dev;
 	if (idev->cnf.forwarding)
 		dev_disable_lro(dev);
@@ -786,6 +834,7 @@ static void addrconf_forward_change(struct net *net, __s32 newf)
 	struct net_device *dev;
 	struct inet6_dev *idev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev(net, dev) {
 		idev = __in6_dev_get(dev);
 		if (idev) {
@@ -803,7 +852,9 @@ static int addrconf_fixup_forwarding(struct ctl_table *table, int *p, int newf)
 	int old;
 
 	if (!rtnl_trylock())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return restart_syscall();
+}
 
 	net = (struct net *)table->extra2;
 	old = *p;
@@ -849,6 +900,7 @@ static void addrconf_linkdown_change(struct net *net, __s32 newf)
 	struct net_device *dev;
 	struct inet6_dev *idev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev(net, dev) {
 		idev = __in6_dev_get(dev);
 		if (idev) {
@@ -871,7 +923,9 @@ static int addrconf_fixup_linkdown(struct ctl_table *table, int *p, int newf)
 	int old;
 
 	if (!rtnl_trylock())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return restart_syscall();
+}
 
 	net = (struct net *)table->extra2;
 	old = *p;
@@ -917,10 +971,13 @@ void inet6_ifa_finish_destroy(struct inet6_ifaddr *ifp)
 	in6_dev_put(ifp->idev);
 
 	if (cancel_delayed_work(&ifp->dad_work))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_notice("delayed DAD work was pending while freeing ifa=%p\n",
 			  ifp);
+}
 
 	if (ifp->state != INET6_IFADDR_STATE_DEAD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("Freeing alive inet6 address %p\n", ifp);
 		return;
 	}
@@ -975,16 +1032,19 @@ ipv6_add_addr(struct inet6_dev *idev, const struct in6_addr *addr,
 	     addr_type & IPV6_ADDR_LOOPBACK))
 		return ERR_PTR(-EADDRNOTAVAIL);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock_bh();
 
 	in6_dev_hold(idev);
 
 	if (idev->dead) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENODEV;			/*XXX*/
 		goto out2;
 	}
 
 	if (idev->cnf.disable_ipv6) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EACCES;
 		goto out2;
 	}
@@ -1000,11 +1060,14 @@ ipv6_add_addr(struct inet6_dev *idev, const struct in6_addr *addr,
 	if (err)
 		goto out2;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&addrconf_hash_lock);
 
 	/* Ignore adding duplicate addresses on an interface */
 	if (ipv6_chk_same_addr(dev_net(idev->dev), addr, idev->dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ADBG("ipv6_add_addr: already assigned\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EEXIST;
 		goto out;
 	}
@@ -1012,13 +1075,16 @@ ipv6_add_addr(struct inet6_dev *idev, const struct in6_addr *addr,
 	ifa = kzalloc(sizeof(struct inet6_ifaddr), GFP_ATOMIC);
 
 	if (!ifa) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ADBG("ipv6_add_addr: malloc failed\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOBUFS;
 		goto out;
 	}
 
 	rt = addrconf_dst_alloc(idev, addr, false);
 	if (IS_ERR(rt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(rt);
 		goto out;
 	}
@@ -1031,7 +1097,9 @@ ipv6_add_addr(struct inet6_dev *idev, const struct in6_addr *addr,
 
 	ifa->addr = *addr;
 	if (peer_addr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ifa->peer_addr = *peer_addr;
+}
 
 	spin_lock_init(&ifa->lock);
 	INIT_DELAYED_WORK(&ifa->dad_work, addrconf_dad_work);
@@ -1064,10 +1132,12 @@ ipv6_add_addr(struct inet6_dev *idev, const struct in6_addr *addr,
 	ipv6_link_dev_addr(idev, ifa);
 
 	if (ifa->flags&IFA_F_TEMPORARY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_add(&ifa->tmp_list, &idev->tempaddr_list);
 		in6_ifa_hold(ifa);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	in6_ifa_hold(ifa);
 	write_unlock(&idev->lock);
 out2:
@@ -1076,11 +1146,13 @@ ipv6_add_addr(struct inet6_dev *idev, const struct in6_addr *addr,
 	if (likely(err == 0))
 		inet6addr_notifier_call_chain(NETDEV_UP, ifa);
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(ifa);
 		in6_dev_put(idev);
 		ifa = ERR_PTR(err);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ifa;
 out:
 	spin_unlock(&addrconf_hash_lock);
@@ -1121,6 +1193,7 @@ check_cleanup_prefix_route(struct inet6_ifaddr *ifp, unsigned long *expires)
 
 	*expires = jiffies;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(ifa, &idev->addr_list, if_list) {
 		if (ifa == ifp)
 			continue;
@@ -1158,6 +1231,7 @@ cleanup_prefix_route(struct inet6_ifaddr *ifp, unsigned long expires, bool del_r
 				       ifp->idev->dev,
 				       0, RTF_GATEWAY | RTF_DEFAULT);
 	if (rt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (del_rt)
 			ip6_del_rt(rt);
 		else {
@@ -1177,6 +1251,7 @@ static void ipv6_del_addr(struct inet6_ifaddr *ifp)
 	enum cleanup_prefix_rt_t action = CLEANUP_PREFIX_RT_NOP;
 	unsigned long expires;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	spin_lock_bh(&ifp->lock);
@@ -1242,6 +1317,7 @@ static int ipv6_create_tempaddr(struct inet6_ifaddr *ifp, struct inet6_ifaddr *i
 
 	write_lock_bh(&idev->lock);
 	if (ift) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_bh(&ift->lock);
 		memcpy(&addr.s6_addr[8], &ift->addr.s6_addr[8], 8);
 		spin_unlock_bh(&ift->lock);
@@ -1395,6 +1471,7 @@ struct ipv6_saddr_dst {
 
 static inline int ipv6_saddr_preferred(int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type & (IPV6_ADDR_MAPPED|IPV6_ADDR_COMPATv4|IPV6_ADDR_LOOPBACK))
 		return 1;
 	return 0;
@@ -1425,6 +1502,7 @@ static int ipv6_get_saddr_eval(struct net *net,
 	int ret;
 
 	if (i <= score->rule) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (i) {
 		case IPV6_SADDR_RULE_SCOPE:
 			ret = score->scopedist;
@@ -1471,9 +1549,12 @@ static int ipv6_get_saddr_eval(struct net *net,
 		 */
 		ret = __ipv6_addr_src_scope(score->addr_type);
 		if (ret >= dst->scope)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ret;
+}
 		else
 			ret -= 128;	/* 30 is enough */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		score->scopedist = ret;
 		break;
 	case IPV6_SADDR_RULE_PREFERRED:
@@ -1482,7 +1563,10 @@ static int ipv6_get_saddr_eval(struct net *net,
 		u8 avoid = IFA_F_DEPRECATED;
 
 		if (!ipv6_use_optimistic_addr(net, score->ifa->idev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			avoid |= IFA_F_OPTIMISTIC;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = ipv6_saddr_preferred(score->addr_type) ||
 		      !(score->ifa->flags & avoid);
 		break;
@@ -1529,7 +1613,10 @@ static int ipv6_get_saddr_eval(struct net *net,
 		/* Rule 8: Use longest matching prefix */
 		ret = ipv6_addr_diff(&score->ifa->addr, dst->addr);
 		if (ret > score->ifa->prefix_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = score->ifa->prefix_len;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		score->matchlen = ret;
 		break;
 #ifdef CONFIG_IPV6_OPTIMISTIC_DAD
@@ -1581,6 +1668,7 @@ static int __ipv6_dev_get_saddr(struct net *net,
 
 		if (unlikely(score->addr_type == IPV6_ADDR_ANY ||
 			     score->addr_type & IPV6_ADDR_MULTICAST)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net_dbg_ratelimited("ADDRCONF: unspecified / multicast address assigned as unicast address on %s",
 					    idev->dev->name);
 			continue;
@@ -1596,6 +1684,7 @@ static int __ipv6_dev_get_saddr(struct net *net,
 			miniscore = ipv6_get_saddr_eval(net, score, dst, i);
 
 			if (minihiscore > miniscore) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (i == IPV6_SADDR_RULE_SCOPE &&
 				    score->scopedist > 0) {
 					/*
@@ -1611,10 +1700,13 @@ static int __ipv6_dev_get_saddr(struct net *net,
 				break;
 			} else if (minihiscore < miniscore) {
 				if (hiscore->ifa)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					in6_ifa_put(hiscore->ifa);
+}
 
 				in6_ifa_hold(score->ifa);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				swap(hiscore, score);
 				hiscore_idx = 1 - hiscore_idx;
 
@@ -1641,8 +1733,10 @@ static int ipv6_get_saddr_master(struct net *net,
 
 	idev = __in6_dev_get(dst_dev);
 	if (idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hiscore_idx = __ipv6_dev_get_saddr(net, dst, idev,
 						   scores, hiscore_idx);
+}
 
 	idev = __in6_dev_get(master);
 	if (idev)
@@ -1693,10 +1787,12 @@ int ipv6_dev_get_saddr(struct net *net, const struct net_device *dst_dev,
 	 *    (the 'outgoing' interface)." (RFC 6724)
 	 */
 	if (dst_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		idev = __in6_dev_get(dst_dev);
 		if ((dst_type & IPV6_ADDR_MULTICAST) ||
 		    dst.scope <= IPV6_ADDR_SCOPE_LINKLOCAL ||
 		    (idev && idev->cnf.use_oif_addrs_only)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			use_oif_addr = true;
 		}
 	}
@@ -1714,6 +1810,7 @@ int ipv6_dev_get_saddr(struct net *net, const struct net_device *dst_dev,
 		 */
 		master = l3mdev_master_dev_rcu(dst_dev);
 		if (master) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			master_idx = master->ifindex;
 
 			hiscore_idx = ipv6_get_saddr_master(net, dst_dev,
@@ -1724,15 +1821,18 @@ int ipv6_dev_get_saddr(struct net *net, const struct net_device *dst_dev,
 				goto out;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_netdev_rcu(net, dev) {
 			/* only consider addresses on devices in the
 			 * same L3 domain
 			 */
 			if (l3mdev_master_ifindex_rcu(dev) != master_idx)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			idev = __in6_dev_get(dev);
 			if (!idev)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hiscore_idx = __ipv6_dev_get_saddr(net, &dst, idev, scores, hiscore_idx);
 		}
 	}
@@ -1742,7 +1842,9 @@ int ipv6_dev_get_saddr(struct net *net, const struct net_device *dst_dev,
 
 	hiscore = &scores[hiscore_idx];
 	if (!hiscore->ifa)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EADDRNOTAVAIL;
+}
 
 	*saddr = hiscore->ifa->addr;
 	in6_ifa_put(hiscore->ifa);
@@ -1778,6 +1880,7 @@ int ipv6_get_lladdr(struct net_device *dev, struct in6_addr *addr,
 	rcu_read_lock();
 	idev = __in6_dev_get(dev);
 	if (idev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_lock_bh(&idev->lock);
 		err = __ipv6_get_lladdr(idev, addr, banned_flags);
 		read_unlock_bh(&idev->lock);
@@ -1792,6 +1895,7 @@ static int ipv6_count_addresses(struct inet6_dev *idev)
 	struct inet6_ifaddr *ifp;
 
 	read_lock_bh(&idev->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(ifp, &idev->addr_list, if_list)
 		cnt++;
 	read_unlock_bh(&idev->lock);
@@ -1827,11 +1931,13 @@ int ipv6_chk_addr_and_flags(struct net *net, const struct in6_addr *addr,
 		    !(ifp_flags&banned_flags) &&
 		    (!dev || ifp->idev->dev == dev ||
 		     !(ifp->scope&(IFA_LINK|IFA_HOST) || strict))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock_bh();
 			return 1;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock_bh();
 	return 0;
 }
@@ -1847,10 +1953,14 @@ static bool ipv6_chk_same_addr(struct net *net, const struct in6_addr *addr,
 		if (!net_eq(dev_net(ifp->idev->dev), net))
 			continue;
 		if (ipv6_addr_equal(&ifp->addr, addr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!dev || ifp->idev->dev == dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return true;
+}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1867,6 +1977,7 @@ bool ipv6_chk_custom_prefix(const struct in6_addr *addr,
 	rcu_read_lock();
 	idev = __in6_dev_get(dev);
 	if (idev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_lock_bh(&idev->lock);
 		list_for_each_entry(ifa, &idev->addr_list, if_list) {
 			ret = ipv6_prefix_equal(addr, &ifa->addr, prefix_len);
@@ -1891,6 +2002,7 @@ int ipv6_chk_prefix(const struct in6_addr *addr, struct net_device *dev)
 	rcu_read_lock();
 	idev = __in6_dev_get(dev);
 	if (idev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_lock_bh(&idev->lock);
 		list_for_each_entry(ifa, &idev->addr_list, if_list) {
 			onlink = ipv6_prefix_equal(addr, &ifa->addr,
@@ -1916,14 +2028,17 @@ struct inet6_ifaddr *ipv6_get_ifaddr(struct net *net, const struct in6_addr *add
 		if (!net_eq(dev_net(ifp->idev->dev), net))
 			continue;
 		if (ipv6_addr_equal(&ifp->addr, addr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!dev || ifp->idev->dev == dev ||
 			    !(ifp->scope&(IFA_LINK|IFA_HOST) || strict)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				result = ifp;
 				in6_ifa_hold(ifp);
 				break;
 			}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock_bh();
 
 	return result;
@@ -1933,6 +2048,7 @@ struct inet6_ifaddr *ipv6_get_ifaddr(struct net *net, const struct in6_addr *add
 
 static void addrconf_dad_stop(struct inet6_ifaddr *ifp, int dad_failed)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dad_failed)
 		ifp->flags |= IFA_F_DADFAILED;
 
@@ -1971,6 +2087,7 @@ static int addrconf_dad_end(struct inet6_ifaddr *ifp)
 		ifp->state = INET6_IFADDR_STATE_POSTDAD;
 		err = 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&ifp->lock);
 
 	return err;
@@ -1982,6 +2099,7 @@ void addrconf_dad_failure(struct inet6_ifaddr *ifp)
 	struct net *net = dev_net(ifp->idev->dev);
 
 	if (addrconf_dad_end(ifp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		in6_ifa_put(ifp);
 		return;
 	}
@@ -2057,7 +2175,9 @@ void addrconf_join_solict(struct net_device *dev, const struct in6_addr *addr)
 	struct in6_addr maddr;
 
 	if (dev->flags&(IFF_LOOPBACK|IFF_NOARP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	addrconf_addr_solict_mult(addr, &maddr);
 	ipv6_dev_mc_inc(dev, &maddr);
@@ -2071,6 +2191,7 @@ void addrconf_leave_solict(struct inet6_dev *idev, const struct in6_addr *addr)
 	if (idev->dev->flags&(IFF_LOOPBACK|IFF_NOARP))
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	addrconf_addr_solict_mult(addr, &maddr);
 	__ipv6_dev_mc_dec(idev, &maddr);
 }
@@ -2081,7 +2202,9 @@ static void addrconf_join_anycast(struct inet6_ifaddr *ifp)
 	struct in6_addr addr;
 
 	if (ifp->prefix_len >= 127) /* RFC 6164 */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	ipv6_addr_prefix(&addr, &ifp->addr, ifp->prefix_len);
 	if (ipv6_addr_any(&addr))
 		return;
@@ -2094,7 +2217,9 @@ static void addrconf_leave_anycast(struct inet6_ifaddr *ifp)
 	struct in6_addr addr;
 
 	if (ifp->prefix_len >= 127) /* RFC 6164 */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	ipv6_addr_prefix(&addr, &ifp->addr, ifp->prefix_len);
 	if (ipv6_addr_any(&addr))
 		return;
@@ -2103,6 +2228,7 @@ static void addrconf_leave_anycast(struct inet6_ifaddr *ifp)
 
 static int addrconf_ifid_6lowpan(u8 *eui, struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (dev->addr_len) {
 	case ETH_ALEN:
 		memcpy(eui, dev->dev_addr, 3);
@@ -2126,7 +2252,9 @@ static int addrconf_ifid_ieee1394(u8 *eui, struct net_device *dev)
 	union fwnet_hwaddr *ha;
 
 	if (dev->addr_len != FWNET_ALEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	ha = (union fwnet_hwaddr *)dev->dev_addr;
 
@@ -2147,6 +2275,7 @@ static int addrconf_ifid_arcnet(u8 *eui, struct net_device *dev)
 
 static int addrconf_ifid_infiniband(u8 *eui, struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->addr_len != INFINIBAND_ALEN)
 		return -1;
 	memcpy(eui, dev->dev_addr + 12, 8);
@@ -2156,6 +2285,7 @@ static int addrconf_ifid_infiniband(u8 *eui, struct net_device *dev)
 
 static int __ipv6_isatap_ifid(u8 *eui, __be32 addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (addr == 0)
 		return -1;
 	eui[0] = (ipv4_is_zeronet(addr) || ipv4_is_private_10(addr) ||
@@ -2173,6 +2303,7 @@ static int __ipv6_isatap_ifid(u8 *eui, __be32 addr)
 
 static int addrconf_ifid_sit(u8 *eui, struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dev->priv_flags & IFF_ISATAP)
 		return __ipv6_isatap_ifid(eui, *(__be32 *)dev->dev_addr);
 	return -1;
@@ -2180,11 +2311,13 @@ static int addrconf_ifid_sit(u8 *eui, struct net_device *dev)
 
 static int addrconf_ifid_gre(u8 *eui, struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __ipv6_isatap_ifid(eui, *(__be32 *)dev->dev_addr);
 }
 
 static int addrconf_ifid_ip6tnl(u8 *eui, struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(eui, dev->perm_addr, 3);
 	memcpy(eui + 5, dev->perm_addr + 3, 3);
 	eui[3] = 0xFF;
@@ -2195,6 +2328,7 @@ static int addrconf_ifid_ip6tnl(u8 *eui, struct net_device *dev)
 
 static int ipv6_generate_eui64(u8 *eui, struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (dev->type) {
 	case ARPHRD_ETHER:
 	case ARPHRD_FDDI:
@@ -2225,6 +2359,7 @@ static int ipv6_inherit_eui64(u8 *eui, struct inet6_dev *idev)
 	struct inet6_ifaddr *ifp;
 
 	read_lock_bh(&idev->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_reverse(ifp, &idev->addr_list, if_list) {
 		if (ifp->scope > IFA_LINK)
 			break;
@@ -2261,8 +2396,10 @@ static void ipv6_regen_rndid(struct inet6_dev *idev)
 	    (idev->rndid[7]&0x80))
 		goto regen;
 	if ((idev->rndid[0]|idev->rndid[1]) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (idev->rndid[2] == 0x5e && idev->rndid[3] == 0xfe)
 			goto regen;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((idev->rndid[2]|idev->rndid[3]|idev->rndid[4]|idev->rndid[5]|idev->rndid[6]|idev->rndid[7]) == 0x00)
 			goto regen;
 	}
@@ -2270,6 +2407,7 @@ static void ipv6_regen_rndid(struct inet6_dev *idev)
 
 static void  ipv6_try_regen_rndid(struct inet6_dev *idev, struct in6_addr *tmpaddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tmpaddr && memcmp(idev->rndid, &tmpaddr->s6_addr[8], 8) == 0)
 		ipv6_regen_rndid(idev);
 }
@@ -2301,7 +2439,9 @@ addrconf_prefix_route(struct in6_addr *pfx, int plen, struct net_device *dev,
 	 */
 #if IS_ENABLED(CONFIG_IPV6_SIT)
 	if (dev->type == ARPHRD_SIT && (dev->flags & IFF_POINTOPOINT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cfg.fc_flags |= RTF_NONEXTHOP;
+}
 #endif
 
 	ip6_route_add(&cfg, NULL);
@@ -2316,6 +2456,7 @@ static struct rt6_info *addrconf_get_prefix_route(const struct in6_addr *pfx,
 	struct fib6_node *fn;
 	struct rt6_info *rt = NULL;
 	struct fib6_table *table;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 tb_id = l3mdev_fib_table(dev) ? : RT6_TABLE_PREFIX;
 
 	table = fib6_get_table(dev_net(dev), tb_id);
@@ -2370,15 +2511,20 @@ static struct inet6_dev *addrconf_add_dev(struct net_device *dev)
 
 	idev = ipv6_find_idev(dev);
 	if (!idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOBUFS);
+}
 
 	if (idev->cnf.disable_ipv6)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EACCES);
+}
 
 	/* Add default multicast route */
 	if (!(dev->flags & IFF_LOOPBACK) && !netif_is_l3_master(dev))
 		addrconf_add_mroute(dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return idev;
 }
 
@@ -2451,6 +2597,7 @@ static void manage_tempaddrs(struct inet6_dev *idev,
 
 static bool is_addr_mode_generate_stable(struct inet6_dev *idev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return idev->cnf.addr_gen_mode == IN6_ADDR_GEN_MODE_STABLE_PRIVACY ||
 	       idev->cnf.addr_gen_mode == IN6_ADDR_GEN_MODE_RANDOM;
 }
@@ -2462,6 +2609,7 @@ int addrconf_prefix_rcv_add_addr(struct net *net, struct net_device *dev,
 				 u32 addr_flags, bool sllao, bool tokenized,
 				 __u32 valid_lft, u32 prefered_lft)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet6_ifaddr *ifp = ipv6_get_ifaddr(net, addr, dev, 1);
 	int create = 0, update_lft = 0;
 
@@ -3543,6 +3691,7 @@ static struct notifier_block ipv6_dev_notf = {
 static void addrconf_type_change(struct net_device *dev, unsigned long event)
 {
 	struct inet6_dev *idev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	idev = __in6_dev_get(dev);
@@ -3555,12 +3704,14 @@ static void addrconf_type_change(struct net_device *dev, unsigned long event)
 
 static bool addr_is_local(const struct in6_addr *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ipv6_addr_type(addr) &
 		(IPV6_ADDR_LINKLOCAL | IPV6_ADDR_LOOPBACK);
 }
 
 static int addrconf_ifdown(struct net_device *dev, int how)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(dev);
 	struct inet6_dev *idev;
 	struct inet6_ifaddr *ifa, *tmp;
@@ -3576,7 +3727,9 @@ static int addrconf_ifdown(struct net_device *dev, int how)
 
 	idev = __in6_dev_get(dev);
 	if (!idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/*
 	 * Step 1: remove reference to ipv6 device from parent device.
@@ -3623,6 +3776,7 @@ static int addrconf_ifdown(struct net_device *dev, int how)
 				}
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&addrconf_hash_lock);
 	}
 
@@ -3636,6 +3790,7 @@ static int addrconf_ifdown(struct net_device *dev, int how)
 
 	/* Step 3: clear tempaddr list */
 	while (!list_empty(&idev->tempaddr_list)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ifa = list_first_entry(&idev->tempaddr_list,
 				       struct inet6_ifaddr, tmp_list);
 		list_del(&ifa->tmp_list);
@@ -3643,9 +3798,11 @@ static int addrconf_ifdown(struct net_device *dev, int how)
 		spin_lock_bh(&ifa->lock);
 
 		if (ifa->ifpub) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			in6_ifa_put(ifa->ifpub);
 			ifa->ifpub = NULL;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&ifa->lock);
 		in6_ifa_put(ifa);
 		write_lock_bh(&idev->lock);
@@ -3676,8 +3833,11 @@ static int addrconf_ifdown(struct net_device *dev, int how)
 			state = INET6_IFADDR_STATE_DEAD;
 			ifa->state = INET6_IFADDR_STATE_PREDAD;
 			if (!(ifa->flags & IFA_F_NODAD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ifa->flags |= IFA_F_TENTATIVE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rt = ifa->rt;
 			ifa->rt = NULL;
 		} else {
@@ -3685,17 +3845,24 @@ static int addrconf_ifdown(struct net_device *dev, int how)
 			ifa->state = INET6_IFADDR_STATE_DEAD;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&ifa->lock);
 
 		if (rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ip6_del_rt(rt);
+}
 
 		if (state != INET6_IFADDR_STATE_DEAD) {
 			__ipv6_ifa_notify(RTM_DELADDR, ifa);
 			inet6addr_notifier_call_chain(NETDEV_DOWN, ifa);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (idev->cnf.forwarding)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				addrconf_leave_anycast(ifa);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			addrconf_leave_solict(ifa->idev, &ifa->addr);
 		}
 
@@ -3730,6 +3897,7 @@ static int addrconf_ifdown(struct net_device *dev, int how)
 		neigh_ifdown(&nd_tbl, dev);
 		in6_dev_put(idev);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -3740,6 +3908,7 @@ static void addrconf_rs_timer(unsigned long data)
 	struct in6_addr lladdr;
 
 	write_lock(&idev->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (idev->dead || !(idev->if_flags & IF_READY))
 		goto out;
 
@@ -3790,7 +3959,9 @@ static void addrconf_dad_kick(struct inet6_ifaddr *ifp)
 	u64 nonce;
 
 	if (ifp->flags & IFA_F_OPTIMISTIC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rand_num = 0;
+}
 	else
 		rand_num = prandom_u32() % (idev->cnf.rtr_solicit_delay ? : 1);
 
@@ -3831,6 +4002,7 @@ static void addrconf_dad_begin(struct inet6_ifaddr *ifp)
 		if (ifp->flags & IFA_F_TENTATIVE &&
 		    !(ifp->flags & IFA_F_OPTIMISTIC))
 			send_na = true;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bump_id = ifp->flags & IFA_F_TENTATIVE;
 		ifp->flags &= ~(IFA_F_TENTATIVE|IFA_F_OPTIMISTIC|IFA_F_DADFAILED);
 		spin_unlock(&ifp->lock);
@@ -3841,6 +4013,7 @@ static void addrconf_dad_begin(struct inet6_ifaddr *ifp)
 	}
 
 	if (!(idev->if_flags & IF_READY)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&ifp->lock);
 		read_unlock_bh(&idev->lock);
 		/*
@@ -3858,6 +4031,7 @@ static void addrconf_dad_begin(struct inet6_ifaddr *ifp)
 	 * Frames right away
 	 */
 	if (ifp->flags & IFA_F_OPTIMISTIC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip6_ins_rt(ifp->rt);
 		if (ipv6_use_optimistic_addr(dev_net(dev), idev)) {
 			/* Because optimistic nodes can use this address,
@@ -3872,8 +4046,10 @@ static void addrconf_dad_begin(struct inet6_ifaddr *ifp)
 	spin_unlock(&ifp->lock);
 	read_unlock_bh(&idev->lock);
 	if (notify)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ipv6_ifa_notify(RTM_NEWADDR, ifp);
 }
+}
 
 static void addrconf_dad_start(struct inet6_ifaddr *ifp)
 {
@@ -3884,6 +4060,7 @@ static void addrconf_dad_start(struct inet6_ifaddr *ifp)
 		ifp->state = INET6_IFADDR_STATE_PREDAD;
 		begin_dad = true;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&ifp->lock);
 
 	if (begin_dad)
@@ -3909,9 +4086,11 @@ static void addrconf_dad_work(struct work_struct *w)
 
 	spin_lock_bh(&ifp->lock);
 	if (ifp->state == INET6_IFADDR_STATE_PREDAD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		action = DAD_BEGIN;
 		ifp->state = INET6_IFADDR_STATE_DAD;
 	} else if (ifp->state == INET6_IFADDR_STATE_ERRDAD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		action = DAD_ABORT;
 		ifp->state = INET6_IFADDR_STATE_POSTDAD;
 
@@ -3921,6 +4100,7 @@ static void addrconf_dad_work(struct work_struct *w)
 		    !(ifp->flags & IFA_F_STABLE_PRIVACY)) {
 			struct in6_addr addr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			addr.s6_addr32[0] = htonl(0xfe800000);
 			addr.s6_addr32[1] = 0;
 
@@ -3935,16 +4115,20 @@ static void addrconf_dad_work(struct work_struct *w)
 			}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&ifp->lock);
 
 	if (action == DAD_BEGIN) {
 		addrconf_dad_begin(ifp);
 		goto out;
 	} else if (action == DAD_ABORT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		in6_ifa_hold(ifp);
 		addrconf_dad_stop(ifp, 1);
 		if (disable_ipv6)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			addrconf_ifdown(idev->dev, 0);
+}
 		goto out;
 	}
 
@@ -3953,12 +4137,15 @@ static void addrconf_dad_work(struct work_struct *w)
 
 	write_lock_bh(&idev->lock);
 	if (idev->dead || !(idev->if_flags & IF_READY)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_unlock_bh(&idev->lock);
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&ifp->lock);
 	if (ifp->state == INET6_IFADDR_STATE_DEAD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&ifp->lock);
 		write_unlock_bh(&idev->lock);
 		goto out;
@@ -4014,6 +4201,7 @@ static bool ipv6_lonely_lladdr(struct inet6_ifaddr *ifp)
 		    IFA_F_PERMANENT)
 			return false;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 
@@ -4054,6 +4242,7 @@ static void addrconf_dad_completed(struct inet6_ifaddr *ifp, bool bump_id,
 	if (send_na &&
 	    (ifp->idev->cnf.ndisc_notify ||
 	     dev_net(dev)->ipv6.devconf_all->ndisc_notify)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ndisc_send_na(dev, &in6addr_linklocal_allnodes, &ifp->addr,
 			      /*router=*/ !!ifp->idev->cnf.forwarding,
 			      /*solicited=*/ false, /*override=*/ true,
@@ -4067,7 +4256,10 @@ static void addrconf_dad_completed(struct inet6_ifaddr *ifp, bool bump_id,
 		 *	to delay again before sending the first RS
 		 */
 		if (ipv6_get_lladdr(dev, &lladdr, IFA_F_TENTATIVE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ndisc_send_rs(dev, &lladdr, &in6addr_linklocal_allrouters);
 
 		write_lock_bh(&ifp->idev->lock);
@@ -4088,8 +4280,10 @@ static void addrconf_dad_completed(struct inet6_ifaddr *ifp, bool bump_id,
 	 * before this temporary address becomes deprecated.
 	 */
 	if (ifp->flags & IFA_F_TEMPORARY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		addrconf_verify_rtnl();
 }
+}
 
 static void addrconf_dad_run(struct inet6_dev *idev)
 {
@@ -4097,10 +4291,12 @@ static void addrconf_dad_run(struct inet6_dev *idev)
 
 	read_lock_bh(&idev->lock);
 	list_for_each_entry(ifp, &idev->addr_list, if_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&ifp->lock);
 		if (ifp->flags & IFA_F_TENTATIVE &&
 		    ifp->state == INET6_IFADDR_STATE_DAD)
 			addrconf_dad_kick(ifp);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&ifp->lock);
 	}
 	read_unlock_bh(&idev->lock);
@@ -4133,6 +4329,7 @@ static struct inet6_ifaddr *if6_get_first(struct seq_file *seq, loff_t pos)
 				continue;
 			/* sync with offset */
 			if (p < state->offset) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				p++;
 				continue;
 			}
@@ -4144,6 +4341,7 @@ static struct inet6_ifaddr *if6_get_first(struct seq_file *seq, loff_t pos)
 		state->offset = 0;
 		p = 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -4171,12 +4369,14 @@ static struct inet6_ifaddr *if6_get_next(struct seq_file *seq,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
 static void *if6_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(rcu_bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock_bh();
 	return if6_get_first(seq, *pos);
 }
@@ -4193,6 +4393,7 @@ static void *if6_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 static void if6_seq_stop(struct seq_file *seq, void *v)
 	__releases(rcu_bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock_bh();
 }
 
@@ -4233,7 +4434,9 @@ static const struct file_operations if6_fops = {
 static int __net_init if6_proc_net_init(struct net *net)
 {
 	if (!proc_create("if_inet6", S_IRUGO, net->proc_net, &if6_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
@@ -4254,6 +4457,7 @@ int __init if6_proc_init(void)
 
 void if6_proc_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&if6_proc_net_ops);
 }
 #endif	/* CONFIG_PROC_FS */
@@ -4293,6 +4497,7 @@ static void addrconf_verify_rtnl(void)
 
 	ASSERT_RTNL();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock_bh();
 	now = jiffies;
 	next = round_jiffies_up(now + ADDR_CHECK_FREQUENCY);
@@ -4312,17 +4517,20 @@ static void addrconf_verify_rtnl(void)
 			    (ifp->prefered_lft == INFINITY_LIFE_TIME))
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock(&ifp->lock);
 			/* We try to batch several events at once. */
 			age = (now - ifp->tstamp + ADDRCONF_TIMER_FUZZ_MINUS) / HZ;
 
 			if (ifp->valid_lft != INFINITY_LIFE_TIME &&
 			    age >= ifp->valid_lft) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&ifp->lock);
 				in6_ifa_hold(ifp);
 				ipv6_del_addr(ifp);
 				goto restart;
 			} else if (ifp->prefered_lft == INFINITY_LIFE_TIME) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&ifp->lock);
 				continue;
 			} else if (age >= ifp->prefered_lft) {
@@ -4330,17 +4538,21 @@ static void addrconf_verify_rtnl(void)
 				int deprecate = 0;
 
 				if (!(ifp->flags&IFA_F_DEPRECATED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					deprecate = 1;
 					ifp->flags |= IFA_F_DEPRECATED;
 				}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if ((ifp->valid_lft != INFINITY_LIFE_TIME) &&
 				    (time_before(ifp->tstamp + ifp->valid_lft * HZ, next)))
 					next = ifp->tstamp + ifp->valid_lft * HZ;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&ifp->lock);
 
 				if (deprecate) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					in6_ifa_hold(ifp);
 
 					ipv6_ifa_notify(0, ifp);
@@ -4355,9 +4567,14 @@ static void addrconf_verify_rtnl(void)
 
 				if (age >= ifp->prefered_lft - regen_advance) {
 					struct inet6_ifaddr *ifpub = ifp->ifpub;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (time_before(ifp->tstamp + ifp->prefered_lft * HZ, next))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						next = ifp->tstamp + ifp->prefered_lft * HZ;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (!ifp->regen_count && ifpub) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						ifp->regen_count++;
 						in6_ifa_hold(ifp);
 						in6_ifa_hold(ifpub);
@@ -4372,12 +4589,17 @@ static void addrconf_verify_rtnl(void)
 						goto restart;
 					}
 				} else if (time_before(ifp->tstamp + ifp->prefered_lft * HZ - regen_advance * HZ, next))
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					next = ifp->tstamp + ifp->prefered_lft * HZ - regen_advance * HZ;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&ifp->lock);
 			} else {
 				/* ifp->prefered_lft <= ifp->valid_lft */
 				if (time_before(ifp->tstamp + ifp->prefered_lft * HZ, next))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					next = ifp->tstamp + ifp->prefered_lft * HZ;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&ifp->lock);
 			}
 		}
@@ -4388,12 +4610,17 @@ static void addrconf_verify_rtnl(void)
 
 	/* If rounded timeout is accurate enough, accept it. */
 	if (time_before(next_sec, next + ADDRCONF_TIMER_FUZZ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next_sched = next_sec;
+}
 
 	/* And minimum interval is ADDRCONF_TIMER_FUZZ_MAX. */
 	if (time_before(next_sched, jiffies + ADDRCONF_TIMER_FUZZ_MAX))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next_sched = jiffies + ADDRCONF_TIMER_FUZZ_MAX;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ADBG(KERN_DEBUG "now = %lu, schedule = %lu, rounded schedule = %lu => %lu\n",
 	      now, next, next_sec, next_sched);
 	mod_delayed_work(addrconf_wq, &addr_chk_work, next_sched - now);
@@ -4420,11 +4647,16 @@ static struct in6_addr *extract_addr(struct nlattr *addr, struct nlattr *local,
 	*peer_pfx = NULL;
 
 	if (addr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pfx = nla_data(addr);
+}
 
 	if (local) {
 		if (pfx && nla_memcmp(local, pfx, sizeof(*pfx)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*peer_pfx = pfx;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pfx = nla_data(local);
 	}
 
@@ -4442,6 +4674,7 @@ static int
 inet6_rtm_deladdr(struct sk_buff *skb, struct nlmsghdr *nlh,
 		  struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct ifaddrmsg *ifm;
 	struct nlattr *tb[IFA_MAX+1];
@@ -4477,6 +4710,7 @@ static int inet6_addr_modify(struct inet6_ifaddr *ifp, u32 ifa_flags,
 	bool was_managetempaddr;
 	bool had_prefixroute;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	if (!valid_lft || (prefered_lft > valid_lft))
@@ -4566,12 +4800,17 @@ inet6_rtm_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh,
 	err = nlmsg_parse(nlh, sizeof(*ifm), tb, IFA_MAX, ifa_ipv6_policy,
 			  extack);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ifm = nlmsg_data(nlh);
 	pfx = extract_addr(tb[IFA_ADDRESS], tb[IFA_LOCAL], &peer_pfx);
 	if (!pfx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (tb[IFA_CACHEINFO]) {
 		struct ifa_cacheinfo *ci;
@@ -4580,13 +4819,16 @@ inet6_rtm_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh,
 		valid_lft = ci->ifa_valid;
 		preferred_lft = ci->ifa_prefered;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		preferred_lft = INFINITY_LIFE_TIME;
 		valid_lft = INFINITY_LIFE_TIME;
 	}
 
 	dev =  __dev_get_by_index(net, ifm->ifa_index);
 	if (!dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	ifa_flags = tb[IFA_FLAGS] ? nla_get_u32(tb[IFA_FLAGS]) : ifm->ifa_flags;
 
@@ -4605,12 +4847,14 @@ inet6_rtm_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh,
 				      preferred_lft, valid_lft);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nlh->nlmsg_flags & NLM_F_EXCL ||
 	    !(nlh->nlmsg_flags & NLM_F_REPLACE))
 		err = -EEXIST;
 	else
 		err = inet6_addr_modify(ifa, ifa_flags, preferred_lft, valid_lft);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	in6_ifa_put(ifa);
 
 	return err;
@@ -4645,11 +4889,18 @@ static int put_cacheinfo(struct sk_buff *skb, unsigned long cstamp,
 static inline int rt_scope(int ifa_scope)
 {
 	if (ifa_scope & IFA_HOST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return RT_SCOPE_HOST;
+}
 	else if (ifa_scope & IFA_LINK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return RT_SCOPE_LINK;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (ifa_scope & IFA_SITE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return RT_SCOPE_SITE;
+}
 	else
 		return RT_SCOPE_UNIVERSE;
 }
@@ -4671,34 +4922,45 @@ static int inet6_fill_ifaddr(struct sk_buff *skb, struct inet6_ifaddr *ifa,
 
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(struct ifaddrmsg), flags);
 	if (!nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	put_ifaddrmsg(nlh, ifa->prefix_len, ifa->flags, rt_scope(ifa->scope),
 		      ifa->idev->dev->ifindex);
 
 	if (!((ifa->flags&IFA_F_PERMANENT) &&
 	      (ifa->prefered_lft == INFINITY_LIFE_TIME))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		preferred = ifa->prefered_lft;
 		valid = ifa->valid_lft;
 		if (preferred != INFINITY_LIFE_TIME) {
 			long tval = (jiffies - ifa->tstamp)/HZ;
 			if (preferred > tval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				preferred -= tval;
+}
 			else
 				preferred = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (valid != INFINITY_LIFE_TIME) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (valid > tval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					valid -= tval;
+}
 				else
 					valid = 0;
 			}
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		preferred = INFINITY_LIFE_TIME;
 		valid = INFINITY_LIFE_TIME;
 	}
 
 	if (!ipv6_addr_any(&ifa->peer_addr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (nla_put_in6_addr(skb, IFA_LOCAL, &ifa->addr) < 0 ||
 		    nla_put_in6_addr(skb, IFA_ADDRESS, &ifa->peer_addr) < 0)
 			goto error;
@@ -4728,7 +4990,9 @@ static int inet6_fill_ifmcaddr(struct sk_buff *skb, struct ifmcaddr6 *ifmca,
 	int ifindex = ifmca->idev->dev->ifindex;
 
 	if (ipv6_addr_scope(&ifmca->mca_addr) & IFA_SITE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scope = RT_SCOPE_SITE;
+}
 
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(struct ifaddrmsg), flags);
 	if (!nlh)
@@ -4754,7 +5018,9 @@ static int inet6_fill_ifacaddr(struct sk_buff *skb, struct ifacaddr6 *ifaca,
 	int ifindex = ifaca->aca_idev->dev->ifindex;
 
 	if (ipv6_addr_scope(&ifaca->aca_addr) & IFA_SITE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		scope = RT_SCOPE_SITE;
+}
 
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(struct ifaddrmsg), flags);
 	if (!nlh)
@@ -4812,8 +5078,10 @@ static int in6_dump_addrs(struct inet6_dev *idev, struct sk_buff *skb,
 		/* multicast address */
 		for (ifmca = idev->mc_list; ifmca;
 		     ifmca = ifmca->next, ip_idx++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ip_idx < s_ip_idx)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = inet6_fill_ifmcaddr(skb, ifmca,
 						  NETLINK_CB(cb->skb).portid,
 						  cb->nlh->nlmsg_seq,
@@ -4827,8 +5095,10 @@ static int in6_dump_addrs(struct inet6_dev *idev, struct sk_buff *skb,
 		/* anycast address */
 		for (ifaca = idev->ac_list; ifaca;
 		     ifaca = ifaca->aca_next, ip_idx++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ip_idx < s_ip_idx)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = inet6_fill_ifacaddr(skb, ifaca,
 						  NETLINK_CB(cb->skb).portid,
 						  cb->nlh->nlmsg_seq,
@@ -4864,13 +5134,16 @@ static int inet6_dump_addr(struct sk_buff *skb, struct netlink_callback *cb,
 	rcu_read_lock();
 	cb->seq = atomic_read(&net->ipv6.dev_addr_genid) ^ net->dev_base_seq;
 	for (h = s_h; h < NETDEV_HASHENTRIES; h++, s_idx = 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		idx = 0;
 		head = &net->dev_index_head[h];
 		hlist_for_each_entry_rcu(dev, head, index_hlist) {
 			if (idx < s_idx)
 				goto cont;
 			if (h > s_h || idx > s_idx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				s_ip_idx = 0;
+}
 			ip_idx = 0;
 			idev = __in6_dev_get(dev);
 			if (!idev)
@@ -4917,6 +5190,7 @@ static int inet6_dump_ifacaddr(struct sk_buff *skb, struct netlink_callback *cb)
 static int inet6_rtm_getaddr(struct sk_buff *in_skb, struct nlmsghdr *nlh,
 			     struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(in_skb->sk);
 	struct ifaddrmsg *ifm;
 	struct nlattr *tb[IFA_MAX+1];
@@ -4997,8 +5271,10 @@ static void inet6_ifa_notify(int event, struct inet6_ifaddr *ifa)
 	return;
 errout:
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtnl_set_sk_err(net, RTNLGRP_IPV6_IFADDR, err);
 }
+}
 
 static inline void ipv6_store_devconf(struct ipv6_devconf *cnf,
 				__s32 *array, int bytes)
@@ -5076,6 +5352,7 @@ static inline void ipv6_store_devconf(struct ipv6_devconf *cnf,
 
 static inline size_t inet6_ifla6_size(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nla_total_size(4) /* IFLA_INET6_FLAGS */
 	     + nla_total_size(sizeof(struct ifla_cacheinfo))
 	     + nla_total_size(DEVCONF_MAX * 4) /* IFLA_INET6_CONF */
@@ -5119,6 +5396,7 @@ static inline void __snmp6_fill_stats64(u64 *stats, void __percpu *mib,
 
 	BUG_ON(pad < 0);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(buff, 0, sizeof(buff));
 	buff[0] = IPSTATS_MIB_MAX;
 
@@ -5127,6 +5405,7 @@ static inline void __snmp6_fill_stats64(u64 *stats, void __percpu *mib,
 			buff[i] += snmp_get_cpu_field64(mib, c, i, syncpoff);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(stats, buff, IPSTATS_MIB_MAX * sizeof(u64));
 	memset(&stats[IPSTATS_MIB_MAX], 0, pad);
 }
@@ -5134,6 +5413,7 @@ static inline void __snmp6_fill_stats64(u64 *stats, void __percpu *mib,
 static void snmp6_fill_stats(u64 *stats, struct inet6_dev *idev, int attrtype,
 			     int bytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (attrtype) {
 	case IFLA_INET6_STATS:
 		__snmp6_fill_stats64(stats, idev->stats.ipv6, bytes,
@@ -5167,16 +5447,20 @@ static int inet6_fill_ifla6_attrs(struct sk_buff *skb, struct inet6_dev *idev,
 	/* XXX - MC not implemented */
 
 	if (ext_filter_mask & RTEXT_FILTER_SKIP_STATS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	nla = nla_reserve(skb, IFLA_INET6_STATS, IPSTATS_MIB_MAX * sizeof(u64));
 	if (!nla)
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	snmp6_fill_stats(nla_data(nla), idev, IFLA_INET6_STATS, nla_len(nla));
 
 	nla = nla_reserve(skb, IFLA_INET6_ICMP6STATS, ICMP6_MIB_MAX * sizeof(u64));
 	if (!nla)
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	snmp6_fill_stats(nla_data(nla), idev, IFLA_INET6_ICMP6STATS, nla_len(nla));
 
 	nla = nla_reserve(skb, IFLA_INET6_TOKEN, sizeof(struct in6_addr));
@@ -5200,7 +5484,9 @@ static size_t inet6_get_link_af_size(const struct net_device *dev,
 				     u32 ext_filter_mask)
 {
 	if (!__in6_dev_get(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return inet6_ifla6_size();
 }
@@ -5208,13 +5494,18 @@ static size_t inet6_get_link_af_size(const struct net_device *dev,
 static int inet6_fill_link_af(struct sk_buff *skb, const struct net_device *dev,
 			      u32 ext_filter_mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet6_dev *idev = __in6_dev_get(dev);
 
 	if (!idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODATA;
+}
 
 	if (inet6_fill_ifla6_attrs(skb, idev, ext_filter_mask) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	return 0;
 }
@@ -5226,6 +5517,7 @@ static int inet6_set_iftoken(struct inet6_dev *idev, struct in6_addr *token)
 	bool clear_token, update_rs = false;
 	struct in6_addr ll_addr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	if (!token)
@@ -5296,7 +5588,9 @@ static int inet6_validate_link_af(const struct net_device *dev,
 	struct nlattr *tb[IFLA_INET6_MAX + 1];
 
 	if (dev && !__in6_dev_get(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
 	return nla_parse_nested(tb, IFLA_INET6_MAX, nla, inet6_af_policy,
 				NULL);
@@ -5309,6 +5603,7 @@ static int check_addr_gen_mode(int mode)
 	    mode != IN6_ADDR_GEN_MODE_STABLE_PRIVACY &&
 	    mode != IN6_ADDR_GEN_MODE_RANDOM)
 		return -EINVAL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -5319,6 +5614,7 @@ static int check_stable_privacy(struct inet6_dev *idev, struct net *net,
 	    !idev->cnf.stable_secret.initialized &&
 	    !net->ipv6.devconf_dflt->stable_secret.initialized)
 		return -EINVAL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -5329,18 +5625,26 @@ static int inet6_set_link_af(struct net_device *dev, const struct nlattr *nla)
 	struct nlattr *tb[IFLA_INET6_MAX + 1];
 
 	if (!idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
 	if (nla_parse_nested(tb, IFLA_INET6_MAX, nla, NULL, NULL) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG();
+}
 
 	if (tb[IFLA_INET6_TOKEN]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = inet6_set_iftoken(idev, nla_data(tb[IFLA_INET6_TOKEN]));
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	}
 
 	if (tb[IFLA_INET6_ADDR_GEN_MODE]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		u8 mode = nla_get_u8(tb[IFLA_INET6_ADDR_GEN_MODE]);
 
 		if (check_addr_gen_mode(mode) < 0 ||
@@ -5351,6 +5655,7 @@ static int inet6_set_link_af(struct net_device *dev, const struct nlattr *nla)
 		err = 0;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -5364,8 +5669,11 @@ static int inet6_fill_ifinfo(struct sk_buff *skb, struct inet6_dev *idev,
 
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(*hdr), flags);
 	if (!nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hdr = nlmsg_data(nlh);
 	hdr->ifi_family = AF_INET6;
 	hdr->__ifi_pad = 0;
@@ -5401,6 +5709,7 @@ static int inet6_fill_ifinfo(struct sk_buff *skb, struct inet6_dev *idev,
 
 static int inet6_dump_ifinfo(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	int h, s_h;
 	int idx = 0, s_idx;
@@ -5459,8 +5768,10 @@ void inet6_ifinfo_notify(int event, struct inet6_dev *idev)
 	return;
 errout:
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtnl_set_sk_err(net, RTNLGRP_IPV6_IFINFO, err);
 }
+}
 
 static inline size_t inet6_prefix_nlmsg_size(void)
 {
@@ -5479,7 +5790,9 @@ static int inet6_fill_prefix(struct sk_buff *skb, struct inet6_dev *idev,
 
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(*pmsg), flags);
 	if (!nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	pmsg = nlmsg_data(nlh);
 	pmsg->prefix_family = AF_INET6;
@@ -5520,6 +5833,7 @@ static void inet6_prefix_notify(int event, struct inet6_dev *idev,
 	if (!skb)
 		goto errout;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = inet6_fill_prefix(skb, idev, pinfo, 0, 0, event, 0);
 	if (err < 0) {
 		/* -EMSGSIZE implies BUG in inet6_prefix_nlmsg_size() */
@@ -5554,14 +5868,20 @@ static void __ipv6_ifa_notify(int event, struct inet6_ifaddr *ifp)
 		if (!rcu_access_pointer(ifp->rt->rt6i_node))
 			ip6_ins_rt(ifp->rt);
 		if (ifp->idev->cnf.forwarding)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			addrconf_join_anycast(ifp);
+}
 		if (!ipv6_addr_any(&ifp->peer_addr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			addrconf_prefix_route(&ifp->peer_addr, 128,
 					      ifp->idev->dev, 0, 0);
+}
 		break;
 	case RTM_DELADDR:
 		if (ifp->idev->cnf.forwarding)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			addrconf_leave_anycast(ifp);
+}
 		addrconf_leave_solict(ifp->idev, &ifp->addr);
 		if (!ipv6_addr_any(&ifp->peer_addr)) {
 			struct rt6_info *rt;
@@ -5569,7 +5889,9 @@ static void __ipv6_ifa_notify(int event, struct inet6_ifaddr *ifp)
 			rt = addrconf_get_prefix_route(&ifp->peer_addr, 128,
 						       ifp->idev->dev, 0, 0);
 			if (rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ip6_del_rt(rt);
+}
 		}
 		if (ifp->rt) {
 			if (dst_hold_safe(&ifp->rt->dst))
@@ -5583,9 +5905,11 @@ static void __ipv6_ifa_notify(int event, struct inet6_ifaddr *ifp)
 
 static void ipv6_ifa_notify(int event, struct inet6_ifaddr *ifp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock_bh();
 	if (likely(ifp->idev->dead == 0))
 		__ipv6_ifa_notify(event, ifp);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock_bh();
 }
 
@@ -5611,7 +5935,9 @@ int addrconf_sysctl_forward(struct ctl_table *ctl, int write,
 	ret = proc_dointvec(&lctl, write, buffer, lenp, ppos);
 
 	if (write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = addrconf_fixup_forwarding(ctl, valp, val);
+}
 	if (ret)
 		*ppos = pos;
 	return ret;
@@ -5627,6 +5953,7 @@ int addrconf_sysctl_mtu(struct ctl_table *ctl, int write,
 
 	lctl = *ctl;
 	lctl.extra1 = &min_mtu;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lctl.extra2 = idev ? &idev->dev->mtu : NULL;
 
 	return proc_dointvec_minmax(&lctl, write, buffer, lenp, ppos);
@@ -5636,6 +5963,7 @@ static void dev_disable_change(struct inet6_dev *idev)
 {
 	struct netdev_notifier_info info;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!idev || !idev->dev)
 		return;
 
@@ -5651,6 +5979,7 @@ static void addrconf_disable_change(struct net *net, __s32 newf)
 	struct net_device *dev;
 	struct inet6_dev *idev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev(net, dev) {
 		idev = __in6_dev_get(dev);
 		if (idev) {
@@ -5668,7 +5997,9 @@ static int addrconf_disable_ipv6(struct ctl_table *table, int *p, int newf)
 	int old;
 
 	if (!rtnl_trylock())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return restart_syscall();
+}
 
 	net = (struct net *)table->extra2;
 	old = *p;
@@ -5709,7 +6040,9 @@ int addrconf_sysctl_disable(struct ctl_table *ctl, int write,
 	ret = proc_dointvec(&lctl, write, buffer, lenp, ppos);
 
 	if (write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = addrconf_disable_ipv6(ctl, valp, val);
+}
 	if (ret)
 		*ppos = pos;
 	return ret;
@@ -5727,6 +6060,7 @@ int addrconf_sysctl_proxy_ndp(struct ctl_table *ctl, int write,
 	ret = proc_dointvec(ctl, write, buffer, lenp, ppos);
 	new = *valp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (write && old != new) {
 		struct net *net = ctl->extra2;
 
@@ -5767,7 +6101,9 @@ static int addrconf_sysctl_addr_gen_mode(struct ctl_table *ctl, int write,
 	struct net *net = (struct net *)ctl->extra2;
 
 	if (!rtnl_trylock())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return restart_syscall();
+}
 
 	ret = proc_dointvec(ctl, write, buffer, lenp, ppos);
 
@@ -5818,7 +6154,9 @@ static int addrconf_sysctl_stable_secret(struct ctl_table *ctl, int write,
 	struct ipv6_stable_secret *secret = ctl->data;
 
 	if (&net->ipv6.devconf_all->stable_secret == ctl->data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 
 	lctl.maxlen = IPV6_MAX_STRLEN;
 	lctl.data = str;
@@ -5894,7 +6232,9 @@ int addrconf_sysctl_ignore_routes_with_linkdown(struct ctl_table *ctl,
 	ret = proc_dointvec(&lctl, write, buffer, lenp, ppos);
 
 	if (write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = addrconf_fixup_linkdown(ctl, valp, val);
+}
 	if (ret)
 		*ppos = pos;
 	return ret;
@@ -5903,6 +6243,7 @@ int addrconf_sysctl_ignore_routes_with_linkdown(struct ctl_table *ctl,
 static
 void addrconf_set_nopolicy(struct rt6_info *rt, int action)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rt) {
 		if (action)
 			rt->dst.flags |= DST_NOPOLICY;
@@ -5917,6 +6258,7 @@ void addrconf_disable_policy_idev(struct inet6_dev *idev, int val)
 	struct inet6_ifaddr *ifa;
 
 	read_lock_bh(&idev->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(ifa, &idev->addr_list, if_list) {
 		spin_lock(&ifa->lock);
 		if (ifa->rt) {
@@ -5948,7 +6290,9 @@ int addrconf_disable_policy(struct ctl_table *ctl, int *valp, int val)
 	struct net *net;
 
 	if (!rtnl_trylock())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return restart_syscall();
+}
 
 	*valp = val;
 
@@ -5990,6 +6334,7 @@ int addrconf_sysctl_disable_policy(struct ctl_table *ctl, int write,
 	lctl.data = &val;
 	ret = proc_dointvec(&lctl, write, buffer, lenp, ppos);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (write && (*valp != val))
 		ret = addrconf_disable_policy(ctl, valp, val);
 
@@ -6405,9 +6750,13 @@ static int __addrconf_sysctl_register(struct net *net, char *dev_name,
 		goto free;
 
 	if (!strcmp(dev_name, "all"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ifindex = NETCONFA_IFINDEX_ALL;
+}
 	else if (!strcmp(dev_name, "default"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ifindex = NETCONFA_IFINDEX_DEFAULT;
+}
 	else
 		ifindex = idev->dev->ifindex;
 	inet6_netconf_notify_devconf(net, RTM_NEWNETCONF, NETCONFA_ALL,
@@ -6426,7 +6775,9 @@ static void __addrconf_sysctl_unregister(struct net *net,
 	struct ctl_table *table;
 
 	if (!p->sysctl_header)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	table = p->sysctl_header->ctl_table_arg;
 	unregister_net_sysctl_table(p->sysctl_header);
@@ -6441,17 +6792,24 @@ static int addrconf_sysctl_register(struct inet6_dev *idev)
 	int err;
 
 	if (!sysctl_dev_name_is_allowed(idev->dev->name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	err = neigh_sysctl_register(idev->dev, idev->nd_parms,
 				    &ndisc_ifinfo_sysctl_change);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	err = __addrconf_sysctl_register(dev_net(idev->dev), idev->dev->name,
 					 idev, &idev->cnf);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		neigh_sysctl_unregister(idev->nd_parms);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -6474,6 +6832,7 @@ static int __net_init addrconf_init_net(struct net *net)
 	if (!all)
 		goto err_alloc_all;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dflt = kmemdup(&ipv6_devconf_dflt, sizeof(ipv6_devconf_dflt), GFP_KERNEL);
 	if (!dflt)
 		goto err_alloc_dflt;
@@ -6547,6 +6906,7 @@ int __init addrconf_init(void)
 
 	err = ipv6_addr_label_init();
 	if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: cannot initialize default policy table: %d\n",
 			__func__, err);
 		goto out;
@@ -6558,6 +6918,7 @@ int __init addrconf_init(void)
 
 	addrconf_wq = create_workqueue("ipv6_addrconf");
 	if (!addrconf_wq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOMEM;
 		goto out_nowq;
 	}
@@ -6584,6 +6945,7 @@ int __init addrconf_init(void)
 	idev = ipv6_add_dev(init_net.loopback_dev);
 	rtnl_unlock();
 	if (IS_ERR(idev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(idev);
 		goto errlo;
 	}
diff --git a/net/ipv6/addrconf_core.c b/net/ipv6/addrconf_core.c
index 9e3488d..71aa66a 100644
--- a/net/ipv6/addrconf_core.c
+++ b/net/ipv6/addrconf_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPv6 library code, needed by static components when full IPv6 support is
  * not configured or static.
@@ -55,33 +57,47 @@ int __ipv6_addr_type(const struct in6_addr *addr)
 	}
 
 	if ((st & htonl(0xFFC00000)) == htonl(0xFE800000))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (IPV6_ADDR_LINKLOCAL | IPV6_ADDR_UNICAST |
 			IPV6_ADDR_SCOPE_TYPE(IPV6_ADDR_SCOPE_LINKLOCAL));		/* addr-select 3.1 */
+}
 	if ((st & htonl(0xFFC00000)) == htonl(0xFEC00000))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (IPV6_ADDR_SITELOCAL | IPV6_ADDR_UNICAST |
 			IPV6_ADDR_SCOPE_TYPE(IPV6_ADDR_SCOPE_SITELOCAL));		/* addr-select 3.1 */
+}
 	if ((st & htonl(0xFE000000)) == htonl(0xFC000000))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (IPV6_ADDR_UNICAST |
 			IPV6_ADDR_SCOPE_TYPE(IPV6_ADDR_SCOPE_GLOBAL));			/* RFC 4193 */
+}
 
 	if ((addr->s6_addr32[0] | addr->s6_addr32[1]) == 0) {
 		if (addr->s6_addr32[2] == 0) {
 			if (addr->s6_addr32[3] == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return IPV6_ADDR_ANY;
+}
 
 			if (addr->s6_addr32[3] == htonl(0x00000001))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return (IPV6_ADDR_LOOPBACK | IPV6_ADDR_UNICAST |
 					IPV6_ADDR_SCOPE_TYPE(IPV6_ADDR_SCOPE_LINKLOCAL));	/* addr-select 3.4 */
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (IPV6_ADDR_COMPATv4 | IPV6_ADDR_UNICAST |
 				IPV6_ADDR_SCOPE_TYPE(IPV6_ADDR_SCOPE_GLOBAL));	/* addr-select 3.3 */
 		}
 
 		if (addr->s6_addr32[2] == htonl(0x0000ffff))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (IPV6_ADDR_MAPPED |
 				IPV6_ADDR_SCOPE_TYPE(IPV6_ADDR_SCOPE_GLOBAL));	/* addr-select 3.3 */
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (IPV6_ADDR_UNICAST |
 		IPV6_ADDR_SCOPE_TYPE(IPV6_ADDR_SCOPE_GLOBAL));	/* addr-select 3.4 */
 }
@@ -98,6 +114,7 @@ EXPORT_SYMBOL(register_inet6addr_notifier);
 
 int unregister_inet6addr_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_chain_unregister(&inet6addr_chain, nb);
 }
 EXPORT_SYMBOL(unregister_inet6addr_notifier);
@@ -116,6 +133,7 @@ EXPORT_SYMBOL(register_inet6addr_validator_notifier);
 
 int unregister_inet6addr_validator_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_chain_unregister(&inet6addr_validator_chain, nb);
 }
 EXPORT_SYMBOL(unregister_inet6addr_validator_notifier);
@@ -130,6 +148,7 @@ static int eafnosupport_ipv6_dst_lookup(struct net *net, struct sock *u1,
 					struct dst_entry **u2,
 					struct flowi6 *u3)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EAFNOSUPPORT;
 }
 
@@ -184,6 +203,7 @@ void in6_dev_finish_destroy(struct inet6_dev *idev)
 #endif
 	dev_put(dev);
 	if (!idev->dead) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("Freeing alive inet6 device %p\n", idev);
 		return;
 	}
diff --git a/net/ipv6/addrlabel.c b/net/ipv6/addrlabel.c
index f664871..5551c24 100644
--- a/net/ipv6/addrlabel.c
+++ b/net/ipv6/addrlabel.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * IPv6 Address Label subsystem
@@ -52,6 +54,7 @@ static struct ip6addrlbl_table
 static inline
 struct net *ip6addrlbl_net(const struct ip6addrlbl_entry *lbl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return read_pnet(&lbl->lbl_net);
 }
 
@@ -139,6 +142,7 @@ static void ip6addrlbl_free_rcu(struct rcu_head *h)
 
 static bool ip6addrlbl_hold(struct ip6addrlbl_entry *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return refcount_inc_not_zero(&p->refcnt);
 }
 
@@ -155,13 +159,21 @@ static bool __ip6addrlbl_match(struct net *net,
 			       int addrtype, int ifindex)
 {
 	if (!net_eq(ip6addrlbl_net(p), net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (p->ifindex && p->ifindex != ifindex)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (p->addrtype && p->addrtype != addrtype)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (!ipv6_prefix_equal(addr, &p->prefix, p->prefixlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	return true;
 }
 
@@ -172,8 +184,11 @@ static struct ip6addrlbl_entry *__ipv6_addr_label(struct net *net,
 	struct ip6addrlbl_entry *p;
 	hlist_for_each_entry_rcu(p, &ip6addrlbl_table.head, list) {
 		if (__ip6addrlbl_match(net, p, addr, type, ifindex))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return p;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -190,6 +205,7 @@ u32 ipv6_addr_label(struct net *net,
 	label = p ? p->label : IPV6_ADDR_LABEL_DEFAULT;
 	rcu_read_unlock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ADDRLABEL(KERN_DEBUG "%s(addr=%pI6, type=%d, ifindex=%d) => %08x\n",
 		  __func__, addr, type, ifindex, label);
 
@@ -205,6 +221,7 @@ static struct ip6addrlbl_entry *ip6addrlbl_alloc(struct net *net,
 	struct ip6addrlbl_entry *newp;
 	int addrtype;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ADDRLABEL(KERN_DEBUG "%s(prefix=%pI6, prefixlen=%d, ifindex=%d, label=%u)\n",
 		  __func__, prefix, prefixlen, ifindex, (unsigned int)label);
 
@@ -213,23 +230,34 @@ static struct ip6addrlbl_entry *ip6addrlbl_alloc(struct net *net,
 	switch (addrtype) {
 	case IPV6_ADDR_MAPPED:
 		if (prefixlen > 96)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-EINVAL);
+}
 		if (prefixlen < 96)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			addrtype = 0;
+}
 		break;
 	case IPV6_ADDR_COMPATv4:
 		if (prefixlen != 96)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			addrtype = 0;
+}
 		break;
 	case IPV6_ADDR_LOOPBACK:
 		if (prefixlen != 128)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			addrtype = 0;
+}
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	newp = kmalloc(sizeof(*newp), GFP_KERNEL);
 	if (!newp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	ipv6_addr_prefix(&newp->prefix, prefix, prefixlen);
 	newp->prefixlen = prefixlen;
@@ -249,6 +277,7 @@ static int __ip6addrlbl_add(struct ip6addrlbl_entry *newp, int replace)
 	struct ip6addrlbl_entry *last = NULL, *p = NULL;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ADDRLABEL(KERN_DEBUG "%s(newp=%p, replace=%d)\n", __func__, newp,
 		  replace);
 
@@ -257,10 +286,13 @@ static int __ip6addrlbl_add(struct ip6addrlbl_entry *newp, int replace)
 		    net_eq(ip6addrlbl_net(p), ip6addrlbl_net(newp)) &&
 		    p->ifindex == newp->ifindex &&
 		    ipv6_addr_equal(&p->prefix, &newp->prefix)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!replace) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EEXIST;
 				goto out;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hlist_replace_rcu(&p->list, &newp->list);
 			ip6addrlbl_put(p);
 			goto out;
@@ -269,10 +301,13 @@ static int __ip6addrlbl_add(struct ip6addrlbl_entry *newp, int replace)
 			hlist_add_before_rcu(&newp->list, &p->list);
 			goto out;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		last = p;
 	}
 	if (last)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hlist_add_behind_rcu(&newp->list, &last->list);
+}
 	else
 		hlist_add_head_rcu(&newp->list, &ip6addrlbl_table.head);
 out:
@@ -289,18 +324,25 @@ static int ip6addrlbl_add(struct net *net,
 	struct ip6addrlbl_entry *newp;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ADDRLABEL(KERN_DEBUG "%s(prefix=%pI6, prefixlen=%d, ifindex=%d, label=%u, replace=%d)\n",
 		  __func__, prefix, prefixlen, ifindex, (unsigned int)label,
 		  replace);
 
 	newp = ip6addrlbl_alloc(net, prefix, prefixlen, ifindex, label);
 	if (IS_ERR(newp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(newp);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&ip6addrlbl_table.lock);
 	ret = __ip6addrlbl_add(newp, replace);
 	spin_unlock(&ip6addrlbl_table.lock);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip6addrlbl_free(newp);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -313,6 +355,7 @@ static int __ip6addrlbl_del(struct net *net,
 	struct hlist_node *n;
 	int ret = -ESRCH;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ADDRLABEL(KERN_DEBUG "%s(prefix=%pI6, prefixlen=%d, ifindex=%d)\n",
 		  __func__, prefix, prefixlen, ifindex);
 
@@ -337,6 +380,7 @@ static int ip6addrlbl_del(struct net *net,
 	struct in6_addr prefix_buf;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ADDRLABEL(KERN_DEBUG "%s(prefix=%pI6, prefixlen=%d, ifindex=%d)\n",
 		  __func__, prefix, prefixlen, ifindex);
 
@@ -353,6 +397,7 @@ static int __net_init ip6addrlbl_net_init(struct net *net)
 	int err = 0;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ADDRLABEL(KERN_DEBUG "%s\n", __func__);
 
 	for (i = 0; i < ARRAY_SIZE(ip6addrlbl_init_table); i++) {
@@ -363,7 +408,9 @@ static int __net_init ip6addrlbl_net_init(struct net *net)
 					 ip6addrlbl_init_table[i].label, 0);
 		/* XXX: should we free all rules when we catch an error? */
 		if (ret && (!err || err != -ENOMEM))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = ret;
+}
 	}
 	return err;
 }
@@ -381,6 +428,7 @@ static void __net_exit ip6addrlbl_net_exit(struct net *net)
 			ip6addrlbl_put(p);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&ip6addrlbl_table.lock);
 }
 
@@ -398,6 +446,7 @@ int __init ipv6_addr_label_init(void)
 
 void ipv6_addr_label_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&ipv6_addr_label_ops);
 }
 
@@ -421,6 +470,7 @@ static bool addrlbl_ifindex_exists(struct net *net, int ifindex)
 static int ip6addrlbl_newdel(struct sk_buff *skb, struct nlmsghdr *nlh,
 			     struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct ifaddrlblmsg *ifal;
 	struct nlattr *tb[IFAL_MAX+1];
@@ -472,6 +522,7 @@ static int ip6addrlbl_newdel(struct sk_buff *skb, struct nlmsghdr *nlh,
 static void ip6addrlbl_putmsg(struct nlmsghdr *nlh,
 			      int prefixlen, int ifindex, u32 lseq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ifaddrlblmsg *ifal = nlmsg_data(nlh);
 	ifal->ifal_family = AF_INET6;
 	ifal->ifal_prefixlen = prefixlen;
@@ -486,6 +537,7 @@ static int ip6addrlbl_fill(struct sk_buff *skb,
 			   u32 portid, u32 seq, int event,
 			   unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nlmsghdr *nlh = nlmsg_put(skb, portid, seq, event,
 					 sizeof(struct ifaddrlblmsg), flags);
 	if (!nlh)
@@ -505,6 +557,7 @@ static int ip6addrlbl_fill(struct sk_buff *skb,
 
 static int ip6addrlbl_dump(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct ip6addrlbl_entry *p;
 	int idx = 0, s_idx = cb->args[0];
@@ -540,6 +593,7 @@ static inline int ip6addrlbl_msgsize(void)
 static int ip6addrlbl_get(struct sk_buff *in_skb, struct nlmsghdr *nlh,
 			  struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(in_skb->sk);
 	struct ifaddrlblmsg *ifal;
 	struct nlattr *tb[IFAL_MAX+1];
diff --git a/net/ipv6/af_inet6.c b/net/ipv6/af_inet6.c
index 9ccbf74..d45e62c 100644
--- a/net/ipv6/af_inet6.c
+++ b/net/ipv6/af_inet6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	PF_INET6 socket protocol family
  *	Linux INET6 implementation
@@ -120,7 +122,9 @@ static int inet6_create(struct net *net, struct socket *sock, int protocol,
 	int err;
 
 	if (protocol < 0 || protocol >= IPPROTO_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* Look for the requested type/protocol pair. */
 lookup_protocol:
@@ -128,6 +132,7 @@ static int inet6_create(struct net *net, struct socket *sock, int protocol,
 	rcu_read_lock();
 	list_for_each_entry_rcu(answer, &inetsw6[sock->type], list) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		/* Check the non-wild match. */
 		if (protocol == answer->protocol) {
@@ -136,25 +141,31 @@ static int inet6_create(struct net *net, struct socket *sock, int protocol,
 		} else {
 			/* Check for the two wild cases. */
 			if (IPPROTO_IP == protocol) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				protocol = answer->protocol;
 				break;
 			}
 			if (IPPROTO_IP == answer->protocol)
 				break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EPROTONOSUPPORT;
 	}
 
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (try_loading_module < 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock();
 			/*
 			 * Be more specific, e.g. net-pf-10-proto-132-type-1
 			 * (net-pf-PF_INET6-proto-IPPROTO_SCTP-type-SOCK_STREAM)
 			 */
 			if (++try_loading_module == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				request_module("net-pf-%d-proto-%d-type-%d",
 						PF_INET6, protocol, sock->type);
+}
 			/*
 			 * Fall back to generic, e.g. net-pf-10-proto-132
 			 * (net-pf-PF_INET6-proto-IPPROTO_SCTP)
@@ -167,6 +178,7 @@ static int inet6_create(struct net *net, struct socket *sock, int protocol,
 			goto out_rcu_unlock;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EPERM;
 	if (sock->type == SOCK_RAW && !kern &&
 	    !ns_capable(net->user_ns, CAP_NET_RAW))
@@ -190,13 +202,16 @@ static int inet6_create(struct net *net, struct socket *sock, int protocol,
 	if (INET_PROTOSW_REUSE & answer_flags)
 		sk->sk_reuse = SK_CAN_REUSE;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet = inet_sk(sk);
 	inet->is_icsk = (INET_PROTOSW_ICSK & answer_flags) != 0;
 
 	if (SOCK_RAW == sock->type) {
 		inet->inet_num = protocol;
 		if (IPPROTO_RAW == protocol)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet->hdrincl = 1;
+}
 	}
 
 	sk->sk_destruct		= inet_sock_destruct;
@@ -225,7 +240,9 @@ static int inet6_create(struct net *net, struct socket *sock, int protocol,
 	inet->rcv_tos	= 0;
 
 	if (net->ipv4.sysctl_ip_no_pmtu_disc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet->pmtudisc = IP_PMTUDISC_DONT;
+}
 	else
 		inet->pmtudisc = IP_PMTUDISC_WANT;
 	/*
@@ -247,6 +264,7 @@ static int inet6_create(struct net *net, struct socket *sock, int protocol,
 		inet->inet_sport = htons(inet->inet_num);
 		err = sk->sk_prot->hash(sk);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_common_release(sk);
 			goto out;
 		}
@@ -254,6 +272,7 @@ static int inet6_create(struct net *net, struct socket *sock, int protocol,
 	if (sk->sk_prot->init) {
 		err = sk->sk_prot->init(sk);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_common_release(sk);
 			goto out;
 		}
@@ -262,6 +281,7 @@ static int inet6_create(struct net *net, struct socket *sock, int protocol,
 	if (!kern) {
 		err = BPF_CGROUP_RUN_PROG_INET_SOCK(sk);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_common_release(sk);
 			goto out;
 		}
@@ -290,17 +310,25 @@ int inet6_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 
 	/* If the socket has its own bind function then use it. */
 	if (sk->sk_prot->bind)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sk->sk_prot->bind(sk, uaddr, addr_len);
+}
 
 	if (addr_len < SIN6_LEN_RFC2133)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (addr->sin6_family != AF_INET6)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
 	addr_type = ipv6_addr_type(&addr->sin6_addr);
 	if ((addr_type & IPV6_ADDR_MULTICAST) && sock->type == SOCK_STREAM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	snum = ntohs(addr->sin6_port);
 	if (snum && snum < inet_prot_sock(net) &&
@@ -311,6 +339,7 @@ int inet6_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 
 	/* Check these errors (active socket, double bind). */
 	if (sk->sk_state != TCP_CLOSE || inet->inet_num) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		goto out;
 	}
@@ -323,6 +352,7 @@ int inet6_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 		 * makes no sense
 		 */
 		if (sk->sk_ipv6only) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
 			goto out;
 		}
@@ -336,6 +366,7 @@ int inet6_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 		    chk_addr_ret != RTN_LOCAL &&
 		    chk_addr_ret != RTN_MULTICAST &&
 		    chk_addr_ret != RTN_BROADCAST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EADDRNOTAVAIL;
 			goto out;
 		}
@@ -345,6 +376,7 @@ int inet6_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 
 			rcu_read_lock();
 			if (__ipv6_addr_needs_scope_id(addr_type)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (addr_len >= sizeof(struct sockaddr_in6) &&
 				    addr->sin6_scope_id) {
 					/* Override any existing binding, if another one
@@ -355,11 +387,14 @@ int inet6_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 
 				/* Binding to link-local address requires an interface */
 				if (!sk->sk_bound_dev_if) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					err = -EINVAL;
 					goto out_unlock;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev = dev_get_by_index_rcu(net, sk->sk_bound_dev_if);
 				if (!dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					err = -ENODEV;
 					goto out_unlock;
 				}
@@ -374,10 +409,12 @@ int inet6_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 				    !(inet->freebind || inet->transparent) &&
 				    !ipv6_chk_addr(net, &addr->sin6_addr,
 						   dev, 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					err = -EADDRNOTAVAIL;
 					goto out_unlock;
 				}
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock();
 		}
 	}
@@ -424,7 +461,9 @@ int inet6_release(struct socket *sock)
 	struct sock *sk = sock->sk;
 
 	if (!sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* Free mc lists */
 	ipv6_sock_mc_close(sk);
@@ -446,11 +485,15 @@ void inet6_destroy_sock(struct sock *sk)
 
 	skb = xchg(&np->pktoptions, NULL);
 	if (skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
+}
 
 	skb = xchg(&np->rxpmtu, NULL);
 	if (skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
+}
 
 	/* Free flowlabels */
 	fl6_free_socklist(sk);
@@ -459,6 +502,7 @@ void inet6_destroy_sock(struct sock *sk)
 
 	opt = xchg((__force struct ipv6_txoptions **)&np->opt, NULL);
 	if (opt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_sub(opt->tot_len, &sk->sk_omem_alloc);
 		txopt_put(opt);
 	}
@@ -482,14 +526,18 @@ int inet6_getname(struct socket *sock, struct sockaddr *uaddr,
 	sin->sin6_scope_id = 0;
 	if (peer) {
 		if (!inet->inet_dport)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOTCONN;
+}
 		if (((1 << sk->sk_state) & (TCPF_CLOSE | TCPF_SYN_SENT)) &&
 		    peer == 1)
 			return -ENOTCONN;
 		sin->sin6_port = inet->inet_dport;
 		sin->sin6_addr = sk->sk_v6_daddr;
 		if (np->sndflow)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sin->sin6_flowinfo = np->flow_label;
+}
 	} else {
 		if (ipv6_addr_any(&sk->sk_v6_rcv_saddr))
 			sin->sin6_addr = np->saddr;
@@ -520,6 +568,7 @@ int inet6_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
 	case SIOCADDRT:
 	case SIOCDELRT:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ipv6_route_ioctl(net, cmd, (void __user *)arg);
 
 	case SIOCSIFADDR:
@@ -530,7 +579,9 @@ int inet6_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
 		return addrconf_set_dstaddr(net, (void __user *) arg);
 	default:
 		if (!sk->sk_prot->ioctl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOIOCTLCMD;
+}
 		return sk->sk_prot->ioctl(sk, cmd, arg);
 	}
 	/*NOTREACHED*/
@@ -619,15 +670,18 @@ int inet6_register_protosw(struct inet_protosw *p)
 	ret = -EPERM;
 	last_perm = &inetsw6[p->type];
 	list_for_each(lh, &inetsw6[p->type]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		answer = list_entry(lh, struct inet_protosw, list);
 
 		/* Check only the non-wild match. */
 		if (INET_PROTOSW_PERMANENT & answer->flags) {
 			if (protocol == answer->protocol)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			last_perm = lh;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		answer = NULL;
 	}
 	if (answer)
@@ -659,6 +713,7 @@ EXPORT_SYMBOL(inet6_register_protosw);
 void
 inet6_unregister_protosw(struct inet_protosw *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (INET_PROTOSW_PERMANENT & p->flags) {
 		pr_err("Attempt to unregister permanent protocol %d\n",
 		       p->protocol);
@@ -680,6 +735,7 @@ int inet6_sk_rebuild_header(struct sock *sk)
 	dst = __sk_dst_check(sk, np->dst_cookie);
 
 	if (!dst) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct inet_sock *inet = inet_sk(sk);
 		struct in6_addr *final_p, final;
 		struct flowi6 fl6;
@@ -697,20 +753,24 @@ int inet6_sk_rebuild_header(struct sock *sk)
 		security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));
 
 		rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		final_p = fl6_update_dst(&fl6, rcu_dereference(np->opt),
 					 &final);
 		rcu_read_unlock();
 
 		dst = ip6_dst_lookup_flow(sk, &fl6, final_p);
 		if (IS_ERR(dst)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk->sk_route_caps = 0;
 			sk->sk_err_soft = -PTR_ERR(dst);
 			return PTR_ERR(dst);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip6_dst_store(sk, dst, NULL, NULL);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL_GPL(inet6_sk_rebuild_header);
@@ -721,6 +781,7 @@ bool ipv6_opt_accepted(const struct sock *sk, const struct sk_buff *skb,
 	const struct ipv6_pinfo *np = inet6_sk(sk);
 
 	if (np->rxopt.all) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (((opt->flags & IP6SKB_HOPBYHOP) &&
 		     (np->rxopt.bits.hopopts || np->rxopt.bits.ohopopts)) ||
 		    (ip6_flowinfo((struct ipv6hdr *) skb_network_header(skb)) &&
@@ -731,6 +792,7 @@ bool ipv6_opt_accepted(const struct sock *sk, const struct sk_buff *skb,
 		     (np->rxopt.bits.dstopts || np->rxopt.bits.odstopts)))
 			return true;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 EXPORT_SYMBOL_GPL(ipv6_opt_accepted);
@@ -748,6 +810,7 @@ static int __init ipv6_packet_init(void)
 
 static void ipv6_packet_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_remove_pack(&ipv6_packet_type);
 }
 
@@ -757,7 +820,9 @@ static int __net_init ipv6_init_mibs(struct net *net)
 
 	net->mib.udp_stats_in6 = alloc_percpu(struct udp_mib);
 	if (!net->mib.udp_stats_in6)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	net->mib.udplite_stats_in6 = alloc_percpu(struct udp_mib);
 	if (!net->mib.udplite_stats_in6)
 		goto err_udplite_mib;
@@ -779,6 +844,7 @@ static int __net_init ipv6_init_mibs(struct net *net)
 						GFP_KERNEL);
 	if (!net->mib.icmpv6msg_statistics)
 		goto err_icmpmsg_mib;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_icmpmsg_mib:
@@ -816,7 +882,9 @@ static int __net_init inet6_net_init(struct net *net)
 
 	err = ipv6_init_mibs(net);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 #ifdef CONFIG_PROC_FS
 	err = udp6_proc_init(net);
 	if (err)
@@ -870,13 +938,17 @@ static int __init inet6_init(void)
 	struct list_head *r;
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock_skb_cb_check_size(sizeof(struct inet6_skb_parm));
 
 	/* Register the socket-side information for inet6_create.  */
 	for (r = &inetsw6[0]; r < &inetsw6[SOCK_MAX]; ++r)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INIT_LIST_HEAD(r);
+}
 
 	if (disable_ipv6_mod) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("Loaded, but administratively disabled, reboot required to enable\n");
 		goto out;
 	}
@@ -925,6 +997,7 @@ static int __init inet6_init(void)
 	err = register_pernet_subsys(&inet6_net_ops);
 	if (err)
 		goto register_pernet_fail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = ip6_mr_init();
 	if (err)
 		goto ipmr_fail;
@@ -992,6 +1065,7 @@ static int __init inet6_init(void)
 	if (err)
 		goto tcpv6_fail;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = ipv6_packet_init();
 	if (err)
 		goto ipv6_packet_fail;
diff --git a/net/ipv6/anycast.c b/net/ipv6/anycast.c
index 0bbab8a..0fb36e3 100644
--- a/net/ipv6/anycast.c
+++ b/net/ipv6/anycast.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Anycast support for IPv6
  *	Linux INET6 implementation
@@ -52,6 +54,7 @@ static int ipv6_dev_ac_dec(struct net_device *dev, const struct in6_addr *addr);
 
 int ipv6_sock_ac_join(struct sock *sk, int ifindex, const struct in6_addr *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct net_device *dev = NULL;
 	struct inet6_dev *idev;
@@ -141,6 +144,7 @@ int ipv6_sock_ac_join(struct sock *sk, int ifindex, const struct in6_addr *addr)
  */
 int ipv6_sock_ac_drop(struct sock *sk, int ifindex, const struct in6_addr *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct net_device *dev;
 	struct ipv6_ac_socklist *pac, *prev_pac;
@@ -179,35 +183,47 @@ void ipv6_sock_ac_close(struct sock *sk)
 	int	prev_index;
 
 	if (!np->ipv6_ac_list)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtnl_lock();
 	pac = np->ipv6_ac_list;
 	np->ipv6_ac_list = NULL;
 
 	prev_index = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (pac) {
 		struct ipv6_ac_socklist *next = pac->acl_next;
 
 		if (pac->acl_ifindex != prev_index) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev = __dev_get_by_index(net, pac->acl_ifindex);
 			prev_index = pac->acl_ifindex;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ipv6_dev_ac_dec(dev, &pac->acl_addr);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_kfree_s(sk, pac, sizeof(*pac));
 		pac = next;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtnl_unlock();
 }
 
 static void aca_get(struct ifacaddr6 *aca)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	refcount_inc(&aca->aca_refcnt);
 }
 
 static void aca_put(struct ifacaddr6 *ac)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (refcount_dec_and_test(&ac->aca_refcnt)) {
 		in6_dev_put(ac->aca_idev);
 		dst_release(&ac->aca_rt->dst);
@@ -223,7 +239,9 @@ static struct ifacaddr6 *aca_alloc(struct rt6_info *rt,
 
 	aca = kzalloc(sizeof(*aca), GFP_ATOMIC);
 	if (!aca)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	aca->aca_addr = *addr;
 	in6_dev_hold(idev);
@@ -246,6 +264,7 @@ int __ipv6_dev_ac_inc(struct inet6_dev *idev, const struct in6_addr *addr)
 	struct rt6_info *rt;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	write_lock_bh(&idev->lock);
@@ -301,6 +320,7 @@ int __ipv6_dev_ac_dec(struct inet6_dev *idev, const struct in6_addr *addr)
 {
 	struct ifacaddr6 *aca, *prev_aca;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	write_lock_bh(&idev->lock);
@@ -335,6 +355,7 @@ int __ipv6_dev_ac_dec(struct inet6_dev *idev, const struct in6_addr *addr)
 /* called with rtnl_lock() */
 static int ipv6_dev_ac_dec(struct net_device *dev, const struct in6_addr *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet6_dev *idev = __in6_dev_get(dev);
 
 	if (!idev)
@@ -348,6 +369,7 @@ void ipv6_ac_destroy_dev(struct inet6_dev *idev)
 
 	write_lock_bh(&idev->lock);
 	while ((aca = idev->ac_list) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		idev->ac_list = aca->aca_next;
 		write_unlock_bh(&idev->lock);
 
@@ -374,6 +396,7 @@ static bool ipv6_chk_acast_dev(struct net_device *dev, const struct in6_addr *ad
 
 	idev = __in6_dev_get(dev);
 	if (idev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_lock_bh(&idev->lock);
 		for (aca = idev->ac_list; aca; aca = aca->aca_next)
 			if (ipv6_addr_equal(&aca->aca_addr, addr))
@@ -394,7 +417,9 @@ bool ipv6_chk_acast_addr(struct net *net, struct net_device *dev,
 
 	rcu_read_lock();
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		found = ipv6_chk_acast_dev(dev, addr);
+}
 	else
 		for_each_netdev_rcu(net, dev)
 			if (ipv6_chk_acast_dev(dev, addr)) {
@@ -433,6 +458,7 @@ static inline struct ifacaddr6 *ac6_get_first(struct seq_file *seq)
 	struct net *net = seq_file_net(seq);
 
 	state->idev = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev_rcu(net, state->dev) {
 		struct inet6_dev *idev;
 		idev = __in6_dev_get(state->dev);
@@ -454,6 +480,7 @@ static struct ifacaddr6 *ac6_get_next(struct seq_file *seq, struct ifacaddr6 *im
 	struct ac6_iter_state *state = ac6_seq_private(seq);
 
 	im = im->aca_next;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!im) {
 		if (likely(state->idev != NULL))
 			read_unlock_bh(&state->idev->lock);
@@ -474,6 +501,7 @@ static struct ifacaddr6 *ac6_get_next(struct seq_file *seq, struct ifacaddr6 *im
 
 static struct ifacaddr6 *ac6_get_idx(struct seq_file *seq, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ifacaddr6 *im = ac6_get_first(seq);
 	if (im)
 		while (pos && (im = ac6_get_next(seq, im)) != NULL)
@@ -484,12 +512,14 @@ static struct ifacaddr6 *ac6_get_idx(struct seq_file *seq, loff_t pos)
 static void *ac6_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	return ac6_get_idx(seq, *pos);
 }
 
 static void *ac6_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ifacaddr6 *im = ac6_get_next(seq, v);
 
 	++*pos;
@@ -502,6 +532,7 @@ static void ac6_seq_stop(struct seq_file *seq, void *v)
 	struct ac6_iter_state *state = ac6_seq_private(seq);
 
 	if (likely(state->idev != NULL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_unlock_bh(&state->idev->lock);
 		state->idev = NULL;
 	}
@@ -528,6 +559,7 @@ static const struct seq_operations ac6_seq_ops = {
 
 static int ac6_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &ac6_seq_ops,
 			    sizeof(struct ac6_iter_state));
 }
@@ -543,7 +575,9 @@ static const struct file_operations ac6_seq_fops = {
 int __net_init ac6_proc_init(struct net *net)
 {
 	if (!proc_create("anycast6", S_IRUGO, net->proc_net, &ac6_seq_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
diff --git a/net/ipv6/calipso.c b/net/ipv6/calipso.c
index 1323b96..86ea14c 100644
--- a/net/ipv6/calipso.c
+++ b/net/ipv6/calipso.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * CALIPSO - Common Architecture Label IPv6 Security Option
  *
@@ -111,6 +113,7 @@ static struct calipso_map_cache_bkt *calipso_cache;
  */
 static void calipso_cache_entry_free(struct calipso_map_cache_entry *entry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (entry->lsm_data)
 		netlbl_secattr_cache_free(entry->lsm_data);
 	kfree(entry->key);
@@ -128,6 +131,7 @@ static void calipso_cache_entry_free(struct calipso_map_cache_entry *entry)
  */
 static u32 calipso_map_cache_hash(const unsigned char *key, u32 key_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return jhash(key, key_len, 0);
 }
 
@@ -148,7 +152,9 @@ static int __init calipso_cache_init(void)
 				sizeof(struct calipso_map_cache_bkt),
 				GFP_KERNEL);
 	if (!calipso_cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	for (iter = 0; iter < CALIPSO_CACHE_BUCKETS; iter++) {
 		spin_lock_init(&calipso_cache[iter].lock);
@@ -156,6 +162,7 @@ static int __init calipso_cache_init(void)
 		INIT_LIST_HEAD(&calipso_cache[iter].list);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -172,6 +179,7 @@ static void calipso_cache_invalidate(void)
 	struct calipso_map_cache_entry *entry, *tmp_entry;
 	u32 iter;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (iter = 0; iter < CALIPSO_CACHE_BUCKETS; iter++) {
 		spin_lock_bh(&calipso_cache[iter].lock);
 		list_for_each_entry_safe(entry,
@@ -217,7 +225,9 @@ static int calipso_cache_check(const unsigned char *key,
 	u32 hash;
 
 	if (!calipso_cache_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	hash = calipso_map_cache_hash(key, key_len);
 	bkt = hash & (CALIPSO_CACHE_BUCKETS - 1);
@@ -281,6 +291,7 @@ static int calipso_cache_add(const unsigned char *calipso_ptr,
 	struct calipso_map_cache_entry *old_entry = NULL;
 	u32 calipso_ptr_len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!calipso_cache_enabled || calipso_cache_bucketsize <= 0)
 		return 0;
 
@@ -337,6 +348,7 @@ static struct calipso_doi *calipso_doi_search(u32 doi)
 {
 	struct calipso_doi *iter;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(iter, &calipso_doi_list, list)
 		if (iter->doi == doi && refcount_read(&iter->refcount))
 			return iter;
@@ -370,6 +382,7 @@ static int calipso_doi_add(struct calipso_doi *doi_def,
 	if (doi_def->doi == CALIPSO_DOI_UNKNOWN)
 		goto doi_add_return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	refcount_set(&doi_def->refcount, 1);
 
 	spin_lock(&calipso_doi_list_lock);
@@ -413,6 +426,7 @@ static int calipso_doi_add(struct calipso_doi *doi_def,
  */
 static void calipso_doi_free(struct calipso_doi *doi_def)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(doi_def);
 }
 
@@ -430,6 +444,7 @@ static void calipso_doi_free_rcu(struct rcu_head *entry)
 {
 	struct calipso_doi *doi_def;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	doi_def = container_of(entry, struct calipso_doi, rcu);
 	calipso_doi_free(doi_def);
 }
@@ -454,6 +469,7 @@ static int calipso_doi_remove(u32 doi, struct netlbl_audit *audit_info)
 	spin_lock(&calipso_doi_list_lock);
 	doi_def = calipso_doi_search(doi);
 	if (!doi_def) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&calipso_doi_list_lock);
 		ret_val = -ENOENT;
 		goto doi_remove_return;
@@ -499,6 +515,7 @@ static struct calipso_doi *calipso_doi_getdef(u32 doi)
 	doi_def = calipso_doi_search(doi);
 	if (!doi_def)
 		goto doi_getdef_return;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!refcount_inc_not_zero(&doi_def->refcount))
 		doi_def = NULL;
 
@@ -517,6 +534,7 @@ static struct calipso_doi *calipso_doi_getdef(u32 doi)
  */
 static void calipso_doi_putdef(struct calipso_doi *doi_def)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!doi_def)
 		return;
 
@@ -552,6 +570,7 @@ static int calipso_doi_walk(u32 *skip_cnt,
 	struct calipso_doi *iter_doi;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(iter_doi, &calipso_doi_list, list)
 		if (refcount_read(&iter_doi->refcount) > 0) {
 			if (doi_cnt++ < *skip_cnt)
@@ -597,7 +616,9 @@ bool calipso_validate(const struct sk_buff *skb, const unsigned char *option)
 	crc = crc_ccitt(0xffff, option, 8);
 	crc = crc_ccitt(crc, zero, sizeof(zero));
 	if (len > 10)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crc = crc_ccitt(crc, option + 10, len - 10);
+}
 	crc = ~crc;
 	if (option[8] != (crc & 0xff) || option[9] != ((crc >> 8) & 0xff))
 		return false;
@@ -633,6 +654,7 @@ static int calipso_map_cat_hton(const struct calipso_doi *doi_def,
 	u32 net_clen_bits = net_cat_len * 8;
 
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spot = netlbl_catmap_walk(secattr->attr.mls.cat,
 					  spot + 1);
 		if (spot < 0)
@@ -671,6 +693,7 @@ static int calipso_map_cat_ntoh(const struct calipso_doi *doi_def,
 	u32 net_clen_bits = net_cat_len * 8;
 
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spot = netlbl_bitmap_walk(net_cat,
 					  net_clen_bits,
 					  spot + 1,
@@ -705,6 +728,7 @@ static int calipso_map_cat_ntoh(const struct calipso_doi *doi_def,
 static int calipso_pad_write(unsigned char *buf, unsigned int offset,
 			     unsigned int count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON_ONCE(count >= 8))
 		return -EINVAL;
 
@@ -751,7 +775,9 @@ static int calipso_genopt(unsigned char *buf, u32 start, u32 buf_len,
 	/* CALIPSO has 4n + 2 alignment */
 	pad = padding[start & 3];
 	if (buf_len <= start + pad + CALIPSO_HDR_LEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSPC;
+}
 
 	if ((secattr->flags & NETLBL_SECATTR_MLS_LVL) == 0)
 		return -EPERM;
@@ -797,6 +823,7 @@ static int calipso_genopt(unsigned char *buf, u32 start, u32 buf_len,
  */
 static int calipso_opt_update(struct sock *sk, struct ipv6_opt_hdr *hop)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_txoptions *old = txopt_get(inet6_sk(sk)), *txopts;
 
 	txopts = ipv6_renew_options_kern(sk, old, IPV6_HOPOPTS,
@@ -829,6 +856,7 @@ static int calipso_tlv_len(struct ipv6_opt_hdr *opt, unsigned int offset)
 	unsigned char *tlv = (unsigned char *)opt;
 	unsigned int opt_len = ipv6_optlen(opt), tlv_len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (offset < sizeof(*opt) || offset >= opt_len)
 		return -EINVAL;
 	if (tlv[offset] == IPV6_TLV_PAD1)
@@ -872,6 +900,7 @@ static int calipso_opt_find(struct ipv6_opt_hdr *hop, unsigned int *start,
 	opt_len = ipv6_optlen(hop);
 	offset = sizeof(*hop);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (offset < opt_len) {
 		tlv_len = calipso_tlv_len(hop, offset);
 		if (tlv_len < 0)
@@ -933,6 +962,7 @@ calipso_opt_insert(struct ipv6_opt_hdr *hop,
 	int ret_val;
 
 	if (hop) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hop_len = ipv6_optlen(hop);
 		ret_val = calipso_opt_find(hop, &start, &end);
 		if (ret_val && ret_val != -ENOENT)
@@ -995,7 +1025,9 @@ static int calipso_opt_del(struct ipv6_opt_hdr *hop,
 
 	ret_val = calipso_opt_find(hop, &start, &end);
 	if (ret_val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret_val;
+}
 
 	hop_len = ipv6_optlen(hop);
 	if (start == sizeof(*hop) && end == hop_len) {
@@ -1038,7 +1070,9 @@ static int calipso_opt_getattr(const unsigned char *calipso,
 	struct calipso_doi *doi_def;
 
 	if (cat_len + 8 > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (calipso_cache_check(calipso + 2, calipso[1], secattr) == 0)
 		return 0;
@@ -1095,6 +1129,7 @@ static int calipso_sock_getattr(struct sock *sk,
 	unsigned char *opt;
 	struct ipv6_txoptions *txopts = txopt_get(inet6_sk(sk));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!txopts || !txopts->hopopt)
 		goto done;
 
@@ -1150,7 +1185,9 @@ static int calipso_sock_setattr(struct sock *sk,
 
 	old = NULL;
 	if (txopts)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		old = txopts->hopopt;
+}
 
 	new = calipso_opt_insert(old, doi_def, secattr);
 	txopt_put(txopts);
@@ -1176,6 +1213,7 @@ static void calipso_sock_delattr(struct sock *sk)
 	struct ipv6_opt_hdr *new_hop;
 	struct ipv6_txoptions *txopts = txopt_get(inet6_sk(sk));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!txopts || !txopts->hopopt)
 		goto done;
 
@@ -1213,6 +1251,7 @@ static int calipso_req_setattr(struct request_sock *req,
 	struct ipv6_opt_hdr *old, *new;
 	struct sock *sk = sk_to_full_sk(req_to_sk(req));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (req_inet->ipv6_opt && req_inet->ipv6_opt->hopopt)
 		old = req_inet->ipv6_opt->hopopt;
 	else
@@ -1249,6 +1288,7 @@ static int calipso_req_setattr(struct request_sock *req,
  */
 static void calipso_req_delattr(struct request_sock *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_request_sock *req_inet = inet_rsk(req);
 	struct ipv6_opt_hdr *new;
 	struct ipv6_txoptions *txopts;
@@ -1287,6 +1327,7 @@ static void calipso_req_delattr(struct request_sock *req)
  */
 static unsigned char *calipso_skbuff_optptr(const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6hdr *ip6_hdr = ipv6_hdr(skb);
 	int offset;
 
@@ -1324,6 +1365,7 @@ static int calipso_skbuff_setattr(struct sk_buff *skb,
 
 	ip6_hdr = ipv6_hdr(skb);
 	if (ip6_hdr->nexthdr == NEXTHDR_HOP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hop = (struct ipv6_opt_hdr *)(ip6_hdr + 1);
 		ret_val = calipso_opt_find(hop, &start, &end);
 		if (ret_val && ret_val != -ENOENT)
@@ -1394,7 +1436,9 @@ static int calipso_skbuff_delattr(struct sk_buff *skb)
 	u32 old_hop_len, start = 0, end = 0, delta, size, pad;
 
 	if (!calipso_skbuff_optptr(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* since we are changing the packet we should make a copy */
 	ret_val = skb_cow(skb, skb_headroom(skb));
@@ -1473,6 +1517,7 @@ int __init calipso_init(void)
 
 void calipso_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	netlbl_calipso_ops_register(NULL);
 	calipso_cache_invalidate();
 	kfree(calipso_cache);
diff --git a/net/ipv6/datagram.c b/net/ipv6/datagram.c
index a1f9187..2e87943 100644
--- a/net/ipv6/datagram.c
+++ b/net/ipv6/datagram.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	common UDP/RAW code
  *	Linux INET6 implementation
@@ -37,11 +39,13 @@
 
 static bool ipv6_mapped_addr_any(const struct in6_addr *a)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ipv6_addr_v4mapped(a) && (a->s6_addr32[3] == 0);
 }
 
 static void ip6_datagram_flow_key_init(struct flowi6 *fl6, struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 
@@ -60,7 +64,9 @@ static void ip6_datagram_flow_key_init(struct flowi6 *fl6, struct sock *sk)
 		fl6->flowi6_oif = np->sticky_pktinfo.ipi6_ifindex;
 
 	if (!fl6->flowi6_oif && ipv6_addr_is_multicast(&fl6->daddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl6->flowi6_oif = np->mcast_oif;
+}
 
 	security_sk_classify_flow(sk, flowi6_to_flowi(fl6));
 }
@@ -77,9 +83,12 @@ int ip6_datagram_dst_update(struct sock *sk, bool fix_sk_saddr)
 	int err = 0;
 
 	if (np->sndflow && (np->flow_label & IPV6_FLOWLABEL_MASK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flowlabel = fl6_sock_lookup(sk, np->flow_label);
 		if (!flowlabel)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 	}
 	ip6_datagram_flow_key_init(&fl6, sk);
 
@@ -90,6 +99,7 @@ int ip6_datagram_dst_update(struct sock *sk, bool fix_sk_saddr)
 
 	dst = ip6_dst_lookup_flow(sk, &fl6, final_p);
 	if (IS_ERR(dst)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(dst);
 		goto out;
 	}
@@ -125,15 +135,20 @@ void ip6_datagram_release_cb(struct sock *sk)
 	struct dst_entry *dst;
 
 	if (ipv6_addr_v4mapped(&sk->sk_v6_daddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	dst = __sk_dst_get(sk);
 	if (!dst || !dst->obsolete ||
 	    dst->ops->check(dst, inet6_sk(sk)->dst_cookie)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	ip6_datagram_dst_update(sk, false);
@@ -153,27 +168,37 @@ int __ip6_datagram_connect(struct sock *sk, struct sockaddr *uaddr,
 
 	if (usin->sin6_family == AF_INET) {
 		if (__ipv6_only_sock(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EAFNOSUPPORT;
+}
 		err = __ip4_datagram_connect(sk, uaddr, addr_len);
 		goto ipv4_connected;
 	}
 
 	if (addr_len < SIN6_LEN_RFC2133)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (usin->sin6_family != AF_INET6)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
 	if (np->sndflow)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl6_flowlabel = usin->sin6_flowinfo & IPV6_FLOWINFO_MASK;
+}
 
 	if (ipv6_addr_any(&usin->sin6_addr)) {
 		/*
 		 *	connect to self
 		 */
 		if (ipv6_addr_v4mapped(&sk->sk_v6_rcv_saddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ipv6_addr_set_v4mapped(htonl(INADDR_LOOPBACK),
 					       &usin->sin6_addr);
+}
 		else
 			usin->sin6_addr = in6addr_loopback;
 	}
@@ -186,6 +211,7 @@ int __ip6_datagram_connect(struct sock *sk, struct sockaddr *uaddr,
 		struct sockaddr_in sin;
 
 		if (__ipv6_only_sock(sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENETUNREACH;
 			goto out;
 		}
@@ -223,6 +249,7 @@ int __ip6_datagram_connect(struct sock *sk, struct sockaddr *uaddr,
 		    usin->sin6_scope_id) {
 			if (sk->sk_bound_dev_if &&
 			    sk->sk_bound_dev_if != usin->sin6_scope_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EINVAL;
 				goto out;
 			}
@@ -230,10 +257,13 @@ int __ip6_datagram_connect(struct sock *sk, struct sockaddr *uaddr,
 		}
 
 		if (!sk->sk_bound_dev_if && (addr_type & IPV6_ADDR_MULTICAST))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk->sk_bound_dev_if = np->mcast_oif;
+}
 
 		/* Connect to link-local address requires an interface */
 		if (!sk->sk_bound_dev_if) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
 			goto out;
 		}
@@ -280,6 +310,7 @@ EXPORT_SYMBOL_GPL(ip6_datagram_connect);
 int ip6_datagram_connect_v6_only(struct sock *sk, struct sockaddr *uaddr,
 				 int addr_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DECLARE_SOCKADDR(struct sockaddr_in6 *, sin6, uaddr);
 	if (sin6->sin6_family != AF_INET6)
 		return -EAFNOSUPPORT;
@@ -290,6 +321,7 @@ EXPORT_SYMBOL_GPL(ip6_datagram_connect_v6_only);
 void ipv6_icmp_error(struct sock *sk, struct sk_buff *skb, int err,
 		     __be16 port, u32 info, u8 *payload)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np  = inet6_sk(sk);
 	struct icmp6hdr *icmph = icmp6_hdr(skb);
 	struct sock_exterr_skb *serr;
@@ -324,6 +356,7 @@ void ipv6_icmp_error(struct sock *sk, struct sk_buff *skb, int err,
 
 void ipv6_local_error(struct sock *sk, int err, struct flowi6 *fl6, u32 info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6_pinfo *np = inet6_sk(sk);
 	struct sock_exterr_skb *serr;
 	struct ipv6hdr *iph;
@@ -363,6 +396,7 @@ void ipv6_local_error(struct sock *sk, int err, struct flowi6 *fl6, u32 info)
 
 void ipv6_local_rxpmtu(struct sock *sk, struct flowi6 *fl6, u32 mtu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct ipv6hdr *iph;
 	struct sk_buff *skb;
@@ -401,6 +435,7 @@ void ipv6_local_rxpmtu(struct sock *sk, struct flowi6 *fl6, u32 mtu)
  */
 static inline bool ipv6_datagram_support_addr(struct sock_exterr_skb *serr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return serr->ee.ee_origin == SO_EE_ORIGIN_ICMP6 ||
 	       serr->ee.ee_origin == SO_EE_ORIGIN_ICMP ||
 	       serr->ee.ee_origin == SO_EE_ORIGIN_LOCAL || serr->port;
@@ -415,6 +450,7 @@ static inline bool ipv6_datagram_support_addr(struct sock_exterr_skb *serr)
 static bool ip6_datagram_support_cmsg(struct sk_buff *skb,
 				      struct sock_exterr_skb *serr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (serr->ee.ee_origin == SO_EE_ORIGIN_ICMP ||
 	    serr->ee.ee_origin == SO_EE_ORIGIN_ICMP6)
 		return true;
@@ -433,6 +469,7 @@ static bool ip6_datagram_support_cmsg(struct sk_buff *skb,
  */
 int ipv6_recv_error(struct sock *sk, struct msghdr *msg, int len, int *addr_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct sock_exterr_skb *serr;
 	struct sk_buff *skb;
diff --git a/net/ipv6/exthdrs.c b/net/ipv6/exthdrs.c
index d6189c2..9226094 100644
--- a/net/ipv6/exthdrs.c
+++ b/net/ipv6/exthdrs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Extension Header handling for IPv6
  *	Linux INET6 implementation
@@ -76,6 +78,7 @@ struct tlvtype_proc {
 
 static bool ip6_tlvopt_unknown(struct sk_buff *skb, int optoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch ((skb_network_header(skb)[optoff] & 0xC0) >> 6) {
 	case 0: /* ignore */
 		return true;
@@ -111,6 +114,7 @@ static bool ip6_parse_tlv(const struct tlvtype_proc *procs, struct sk_buff *skb)
 	if (skb_transport_offset(skb) + len > skb_headlen(skb))
 		goto bad;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	off += 2;
 	len -= 2;
 
@@ -335,7 +339,9 @@ static int ipv6_srh_rcv(struct sk_buff *skb)
 
 	accept_seg6 = net->ipv6.devconf_all->seg6_enabled;
 	if (accept_seg6 > idev->cnf.seg6_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		accept_seg6 = idev->cnf.seg6_enabled;
+}
 
 	if (!accept_seg6) {
 		kfree_skb(skb);
@@ -459,6 +465,7 @@ static int ipv6_rthdr_rcv(struct sk_buff *skb)
 	int accept_source_route = net->ipv6.devconf_all->accept_source_route;
 
 	idev = __in6_dev_get(skb->dev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (idev && accept_source_route > idev->cnf.accept_source_route)
 		accept_source_route = idev->cnf.accept_source_route;
 
@@ -678,6 +685,7 @@ int __init ipv6_exthdrs_init(void)
 
 void ipv6_exthdrs_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet6_del_protocol(&nodata_protocol, IPPROTO_NONE);
 	inet6_del_protocol(&destopt_protocol, IPPROTO_DSTOPTS);
 	inet6_del_protocol(&rthdr_protocol, IPPROTO_ROUTING);
@@ -692,11 +700,13 @@ void ipv6_exthdrs_exit(void)
  */
 static inline struct inet6_dev *ipv6_skb_idev(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb_dst(skb) ? ip6_dst_idev(skb_dst(skb)) : __in6_dev_get(skb->dev);
 }
 
 static inline struct net *ipv6_skb_net(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb_dst(skb) ? dev_net(skb_dst(skb)->dev) : dev_net(skb->dev);
 }
 
@@ -704,6 +714,7 @@ static inline struct net *ipv6_skb_net(struct sk_buff *skb)
 
 static bool ipv6_hop_ra(struct sk_buff *skb, int optoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const unsigned char *nh = skb_network_header(skb);
 
 	if (nh[optoff + 1] == 2) {
@@ -721,6 +732,7 @@ static bool ipv6_hop_ra(struct sk_buff *skb, int optoff)
 
 static bool ipv6_hop_jumbo(struct sk_buff *skb, int optoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const unsigned char *nh = skb_network_header(skb);
 	struct net *net = ipv6_skb_net(skb);
 	u32 pkt_len;
@@ -849,6 +861,7 @@ static void ipv6_push_rthdr0(struct sk_buff *skb, u8 *proto,
 	ihdr = (struct rt0_hdr *) opt;
 
 	phdr = skb_push(skb, (ihdr->rt_hdr.hdrlen + 1) << 3);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(phdr, ihdr, sizeof(struct rt0_hdr));
 
 	hops = ihdr->rt_hdr.hdrlen >> 1;
@@ -875,6 +888,7 @@ static void ipv6_push_rthdr4(struct sk_buff *skb, u8 *proto,
 	plen = (sr_ihdr->hdrlen + 1) << 3;
 
 	sr_phdr = skb_push(skb, plen);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(sr_phdr, sr_ihdr, sizeof(struct ipv6_sr_hdr));
 
 	hops = sr_ihdr->first_segment + 1;
@@ -917,6 +931,7 @@ static void ipv6_push_rthdr(struct sk_buff *skb, u8 *proto,
 			    struct ipv6_rt_hdr *opt,
 			    struct in6_addr **addr_p, struct in6_addr *saddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (opt->type) {
 	case IPV6_SRCRT_TYPE_0:
 	case IPV6_SRCRT_STRICT:
@@ -933,6 +948,7 @@ static void ipv6_push_rthdr(struct sk_buff *skb, u8 *proto,
 
 static void ipv6_push_exthdr(struct sk_buff *skb, u8 *proto, u8 type, struct ipv6_opt_hdr *opt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_opt_hdr *h = skb_push(skb, ipv6_optlen(opt));
 
 	memcpy(h, opt, ipv6_optlen(opt));
@@ -944,6 +960,7 @@ void ipv6_push_nfrag_opts(struct sk_buff *skb, struct ipv6_txoptions *opt,
 			  u8 *proto,
 			  struct in6_addr **daddr, struct in6_addr *saddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (opt->srcrt) {
 		ipv6_push_rthdr(skb, proto, opt->srcrt, daddr, saddr);
 		/*
@@ -959,6 +976,7 @@ void ipv6_push_nfrag_opts(struct sk_buff *skb, struct ipv6_txoptions *opt,
 
 void ipv6_push_frag_opts(struct sk_buff *skb, struct ipv6_txoptions *opt, u8 *proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (opt->dst1opt)
 		ipv6_push_exthdr(skb, proto, NEXTHDR_DEST, opt->dst1opt);
 }
@@ -972,6 +990,7 @@ ipv6_dup_options(struct sock *sk, struct ipv6_txoptions *opt)
 	opt2 = sock_kmalloc(sk, opt->tot_len, GFP_ATOMIC);
 	if (opt2) {
 		long dif = (char *)opt2 - (char *)opt;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(opt2, opt, opt->tot_len);
 		if (opt2->hopopt)
 			*((char **)&opt2->hopopt) += dif;
@@ -993,6 +1012,7 @@ static int ipv6_renew_option(void *ohdr,
 			     struct ipv6_opt_hdr **hdr,
 			     char **p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (inherit) {
 		if (ohdr) {
 			memcpy(*p, ohdr, ipv6_optlen((struct ipv6_opt_hdr *)ohdr));
@@ -1044,6 +1064,7 @@ ipv6_renew_options(struct sock *sk, struct ipv6_txoptions *opt,
 	int err;
 
 	if (opt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (newtype != IPV6_HOPOPTS && opt->hopopt)
 			tot_len += CMSG_ALIGN(ipv6_optlen(opt->hopopt));
 		if (newtype != IPV6_RTHDRDSTOPTS && opt->dst0opt)
@@ -1141,10 +1162,13 @@ struct ipv6_txoptions *ipv6_fixup_options(struct ipv6_txoptions *opt_space,
 	 * --yoshfuji
 	 */
 	if (opt && opt->dst0opt && !opt->srcrt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (opt_space != opt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(opt_space, opt, sizeof(*opt_space));
 			opt = opt_space;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opt->opt_nflen -= ipv6_optlen(opt->dst0opt);
 		opt->dst0opt = NULL;
 	}
@@ -1169,8 +1193,11 @@ struct in6_addr *fl6_update_dst(struct flowi6 *fl6,
 				struct in6_addr *orig)
 {
 	if (!opt || !opt->srcrt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*orig = fl6->daddr;
 
 	switch (opt->srcrt->type) {
@@ -1190,6 +1217,7 @@ struct in6_addr *fl6_update_dst(struct flowi6 *fl6,
 		return NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return orig;
 }
 EXPORT_SYMBOL_GPL(fl6_update_dst);
diff --git a/net/ipv6/exthdrs_core.c b/net/ipv6/exthdrs_core.c
index 305e2ed..4b6b3cb 100644
--- a/net/ipv6/exthdrs_core.c
+++ b/net/ipv6/exthdrs_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPv6 library code, needed by static components when full IPv6 support is
  * not configured or static.
@@ -80,10 +82,16 @@ int ipv6_skip_exthdr(const struct sk_buff *skb, int start, u8 *nexthdrp,
 		int hdrlen;
 
 		if (nexthdr == NEXTHDR_NONE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hp = skb_header_pointer(skb, start, sizeof(_hdr), &_hdr);
 		if (!hp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (nexthdr == NEXTHDR_FRAGMENT) {
 			__be16 _frag_off, *fp;
 			fp = skb_header_pointer(skb,
@@ -92,17 +100,24 @@ int ipv6_skip_exthdr(const struct sk_buff *skb, int start, u8 *nexthdrp,
 						sizeof(_frag_off),
 						&_frag_off);
 			if (!fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*frag_offp = *fp;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ntohs(*frag_offp) & ~0x7)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hdrlen = 8;
 		} else if (nexthdr == NEXTHDR_AUTH)
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hdrlen = (hp->hdrlen+2)<<2;
 		else
 			hdrlen = ipv6_optlen(hp);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nexthdr = hp->nexthdr;
 		start += hdrlen;
 	}
@@ -114,6 +129,7 @@ EXPORT_SYMBOL(ipv6_skip_exthdr);
 
 int ipv6_find_tlv(const struct sk_buff *skb, int offset, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const unsigned char *nh = skb_network_header(skb);
 	int packet_len = skb_tail_pointer(skb) - skb_network_header(skb);
 	struct ipv6_opt_hdr *hdr;
@@ -185,6 +201,7 @@ EXPORT_SYMBOL_GPL(ipv6_find_tlv);
 int ipv6_find_hdr(const struct sk_buff *skb, unsigned int *offset,
 		  int target, unsigned short *fragoff, int *flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int start = skb_network_offset(skb) + sizeof(struct ipv6hdr);
 	u8 nexthdr = ipv6_hdr(skb)->nexthdr;
 	unsigned int len;
diff --git a/net/ipv6/exthdrs_offload.c b/net/ipv6/exthdrs_offload.c
index f5e2ba1..d0e22ed 100644
--- a/net/ipv6/exthdrs_offload.c
+++ b/net/ipv6/exthdrs_offload.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPV6 GSO/GRO offload support
  *	Linux INET6 implementation
diff --git a/net/ipv6/fib6_notifier.c b/net/ipv6/fib6_notifier.c
index 05f82ba..88d257a 100644
--- a/net/ipv6/fib6_notifier.c
+++ b/net/ipv6/fib6_notifier.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/notifier.h>
 #include <linux/socket.h>
 #include <linux/kernel.h>
@@ -11,6 +13,7 @@ int call_fib6_notifier(struct notifier_block *nb, struct net *net,
 		       enum fib_event_type event_type,
 		       struct fib_notifier_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	info->family = AF_INET6;
 	return call_fib_notifier(nb, net, event_type, info);
 }
@@ -24,6 +27,7 @@ int call_fib6_notifiers(struct net *net, enum fib_event_type event_type,
 
 static unsigned int fib6_seq_read(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fib6_tables_seq_read(net) + fib6_rules_seq_read(net);
 }
 
@@ -33,7 +37,9 @@ static int fib6_dump(struct net *net, struct notifier_block *nb)
 
 	err = fib6_rules_dump(net, nb);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return fib6_tables_dump(net, nb);
 }
@@ -51,7 +57,9 @@ int __net_init fib6_notifier_init(struct net *net)
 
 	ops = fib_notifier_ops_register(&fib6_notifier_ops_template, net);
 	if (IS_ERR(ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(ops);
+}
 	net->ipv6.notifier_ops = ops;
 
 	return 0;
diff --git a/net/ipv6/fib6_rules.c b/net/ipv6/fib6_rules.c
index b240f24..c039c8c 100644
--- a/net/ipv6/fib6_rules.c
+++ b/net/ipv6/fib6_rules.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/ipv6/fib6_rules.c	IPv6 Routing Policy Rules
  *
diff --git a/net/ipv6/fou6.c b/net/ipv6/fou6.c
index 6de3c04..743cd06 100644
--- a/net/ipv6/fou6.c
+++ b/net/ipv6/fou6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/module.h>
 #include <linux/errno.h>
 #include <linux/socket.h>
diff --git a/net/ipv6/icmp.c b/net/ipv6/icmp.c
index 5acb544..7650d31 100644
--- a/net/ipv6/icmp.c
+++ b/net/ipv6/icmp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Internet Control Message Protocol (ICMPv6)
  *	Linux INET6 implementation
@@ -92,7 +94,9 @@ static void icmpv6_err(struct sk_buff *skb, struct inet6_skb_parm *opt,
 	struct net *net = dev_net(skb->dev);
 
 	if (type == ICMPV6_PKT_TOOBIG)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip6_update_pmtu(skb, net, info, 0, 0, sock_net_uid(net, NULL));
+}
 	else if (type == NDISC_REDIRECT)
 		ip6_redirect(skb, net, skb->dev->ifindex, 0,
 			     sock_net_uid(net, NULL));
@@ -128,6 +132,7 @@ static __inline__ struct sock *icmpv6_xmit_lock(struct net *net)
 
 static __inline__ void icmpv6_xmit_unlock(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sk->sk_lock.slock);
 }
 
@@ -150,19 +155,27 @@ static bool is_ineligible(const struct sk_buff *skb)
 	__be16 frag_off;
 
 	if (len < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	ptr = ipv6_skip_exthdr(skb, ptr, &nexthdr, &frag_off);
 	if (ptr < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (nexthdr == IPPROTO_ICMPV6) {
 		u8 _type, *tp;
 		tp = skb_header_pointer(skb,
 			ptr+offsetof(struct icmp6hdr, icmp6_type),
 			sizeof(_type), &_type);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!tp || !(*tp & ICMPV6_INFOMSG_MASK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -170,17 +183,22 @@ static bool icmpv6_mask_allow(int type)
 {
 	/* Informational messages are not limited. */
 	if (type & ICMPV6_INFOMSG_MASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	/* Do not limit pmtu discovery, it would break it. */
 	if (type == ICMPV6_PKT_TOOBIG)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	return false;
 }
 
 static bool icmpv6_global_allow(int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (icmpv6_mask_allow(type))
 		return true;
 
@@ -196,12 +214,15 @@ static bool icmpv6_global_allow(int type)
 static bool icmpv6_xrlim_allow(struct sock *sk, u8 type,
 			       struct flowi6 *fl6)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(sk);
 	struct dst_entry *dst;
 	bool res = false;
 
 	if (icmpv6_mask_allow(type))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	/*
 	 * Look up the output route.
@@ -210,9 +231,11 @@ static bool icmpv6_xrlim_allow(struct sock *sk, u8 type,
 	 */
 	dst = ip6_route_output(net, sk, fl6);
 	if (dst->error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		IP6_INC_STATS(net, ip6_dst_idev(dst),
 			      IPSTATS_MIB_OUTNOROUTES);
 	} else if (dst->dev && (dst->dev->flags&IFF_LOOPBACK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = true;
 	} else {
 		struct rt6_info *rt = (struct rt6_info *)dst;
@@ -221,12 +244,17 @@ static bool icmpv6_xrlim_allow(struct sock *sk, u8 type,
 
 		/* Give more bandwidth to wider prefixes. */
 		if (rt->rt6i_dst.plen < 128)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tmo >>= ((128 - rt->rt6i_dst.plen)>>5);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		peer = inet_getpeer_v6(net->ipv6.peers, &fl6->daddr, 1);
 		res = inet_peer_xrlim_allow(peer, tmo);
 		if (peer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_putpeer(peer);
+}
 	}
 	dst_release(dst);
 	return res;
@@ -246,7 +274,9 @@ static bool opt_unrec(struct sk_buff *skb, __u32 offset)
 	offset += skb_network_offset(skb);
 	op = skb_header_pointer(skb, offset, sizeof(_optval), &_optval);
 	if (!op)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 	return (*op & 0xC0) == 0x80;
 }
 
@@ -261,7 +291,9 @@ int icmpv6_push_pending_frames(struct sock *sk, struct flowi6 *fl6,
 	if (!skb)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	icmp6h = icmp6_hdr(skb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(icmp6h, thdr, sizeof(struct icmp6hdr));
 	icmp6h->icmp6_cksum = 0;
 
@@ -275,10 +307,13 @@ int icmpv6_push_pending_frames(struct sock *sk, struct flowi6 *fl6,
 	} else {
 		__wsum tmp_csum = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb_queue_walk(&sk->sk_write_queue, skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tmp_csum = csum_add(tmp_csum, skb->csum);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tmp_csum = csum_partial(icmp6h,
 					sizeof(struct icmp6hdr), tmp_csum);
 		icmp6h->icmp6_cksum = csum_ipv6_magic(&fl6->saddr,
@@ -462,12 +497,14 @@ static void icmp6_send(struct sk_buff *skb, u8 type, u8 code, __u32 info,
 	 */
 
 	if (addr_type & IPV6_ADDR_MULTICAST || skb->pkt_type != PACKET_HOST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (type != ICMPV6_PKT_TOOBIG &&
 		    !(type == ICMPV6_PARAMPROB &&
 		      code == ICMPV6_UNK_OPTION &&
 		      (opt_unrec(skb, info))))
 			return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		saddr = NULL;
 	}
 
@@ -478,8 +515,10 @@ static void icmp6_send(struct sk_buff *skb, u8 type, u8 code, __u32 info,
 	 */
 
 	if (__ipv6_addr_needs_scope_id(addr_type)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iif = icmp6_iif(skb);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst = skb_dst(skb);
 		iif = l3mdev_master_ifindex(dst ? dst->dev : skb->dev);
 	}
@@ -491,8 +530,10 @@ static void icmp6_send(struct sk_buff *skb, u8 type, u8 code, __u32 info,
 	 *	and anycast addresses will be checked later.
 	 */
 	if ((addr_type == IPV6_ADDR_ANY) || (addr_type & IPV6_ADDR_MULTICAST)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_dbg_ratelimited("icmp6_send: addr_any/mcast source [%pI6c > %pI6c]\n",
 				    &hdr->saddr, &hdr->daddr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -500,8 +541,10 @@ static void icmp6_send(struct sk_buff *skb, u8 type, u8 code, __u32 info,
 	 *	Never answer to a ICMP packet.
 	 */
 	if (is_ineligible(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_dbg_ratelimited("icmp6_send: no reply to icmp error [%pI6c > %pI6c]\n",
 				    &hdr->saddr, &hdr->daddr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -518,7 +561,9 @@ static void icmp6_send(struct sk_buff *skb, u8 type, u8 code, __u32 info,
 	fl6.flowi6_proto = IPPROTO_ICMPV6;
 	fl6.daddr = hdr->saddr;
 	if (force_saddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		saddr = force_saddr;
+}
 	if (saddr)
 		fl6.saddr = *saddr;
 	fl6.flowi6_mark = mark;
@@ -545,7 +590,9 @@ static void icmp6_send(struct sk_buff *skb, u8 type, u8 code, __u32 info,
 	tmp_hdr.icmp6_pointer = htonl(info);
 
 	if (!fl6.flowi6_oif && ipv6_addr_is_multicast(&fl6.daddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl6.flowi6_oif = np->mcast_oif;
+}
 	else if (!fl6.flowi6_oif)
 		fl6.flowi6_oif = np->ucast_oif;
 
@@ -567,11 +614,13 @@ static void icmp6_send(struct sk_buff *skb, u8 type, u8 code, __u32 info,
 	len = skb->len - msg.offset;
 	len = min_t(unsigned int, len, IPV6_MIN_MTU - sizeof(struct ipv6hdr) - sizeof(struct icmp6hdr));
 	if (len < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_dbg_ratelimited("icmp: len problem [%pI6c > %pI6c]\n",
 				    &hdr->saddr, &hdr->daddr);
 		goto out_dst_release;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	idev = __in6_dev_get(skb->dev);
 
@@ -581,12 +630,14 @@ static void icmp6_send(struct sk_buff *skb, u8 type, u8 code, __u32 info,
 			      &ipc6, &fl6, (struct rt6_info *)dst,
 			      MSG_DONTWAIT, &sockc_unused);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ICMP6_INC_STATS(net, idev, ICMP6_MIB_OUTERRORS);
 		ip6_flush_pending_frames(sk);
 	} else {
 		err = icmpv6_push_pending_frames(sk, &fl6, &tmp_hdr,
 						 len + sizeof(struct icmp6hdr));
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 out_dst_release:
 	dst_release(dst);
@@ -600,6 +651,7 @@ static void icmp6_send(struct sk_buff *skb, u8 type, u8 code, __u32 info,
  */
 void icmpv6_param_prob(struct sk_buff *skb, u8 code, int pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	icmp6_send(skb, ICMPV6_PARAMPROB, code, pos, NULL);
 	kfree_skb(skb);
 }
@@ -619,7 +671,9 @@ int ip6_err_gen_icmpv6_unreach(struct sk_buff *skb, int nhs, int type,
 	u32 info = 0;
 
 	if (!pskb_may_pull(skb, nhs + sizeof(struct ipv6hdr) + 8))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/* RFC 4884 (partial) support for ICMP extensions */
 	if (data_len < 128 || (data_len & 7) || skb->len < data_len)
@@ -671,6 +725,7 @@ EXPORT_SYMBOL(ip6_err_gen_icmpv6_unreach);
 
 static void icmpv6_echo_reply(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(skb->dev);
 	struct sock *sk;
 	struct inet6_dev *idev;
@@ -775,6 +830,7 @@ void icmpv6_notify(struct sk_buff *skb, u8 type, u8 code, __be32 info)
 		if (inner_offset < 0)
 			goto out;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inner_offset = sizeof(struct ipv6hdr);
 	}
 
@@ -814,22 +870,27 @@ static int icmpv6_rcv(struct sk_buff *skb)
 	bool success = false;
 
 	if (!xfrm6_policy_check(NULL, XFRM_POLICY_IN, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct sec_path *sp = skb_sec_path(skb);
 		int nh;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(sp && sp->xvec[sp->len - 1]->props.flags &
 				 XFRM_STATE_ICMP))
 			goto drop_no_count;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!pskb_may_pull(skb, sizeof(*hdr) + sizeof(struct ipv6hdr)))
 			goto drop_no_count;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nh = skb_network_offset(skb);
 		skb_set_network_header(skb, sizeof(*hdr));
 
 		if (!xfrm6_policy_check_reverse(NULL, XFRM_POLICY_IN, skb))
 			goto drop_no_count;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb_set_network_header(skb, nh);
 	}
 
@@ -839,6 +900,7 @@ static int icmpv6_rcv(struct sk_buff *skb)
 	daddr = &ipv6_hdr(skb)->daddr;
 
 	if (skb_checksum_validate(skb, IPPROTO_ICMPV6, ip6_compute_pseudo)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_dbg_ratelimited("ICMPv6 checksum failed [%pI6c > %pI6c]\n",
 				    saddr, daddr);
 		goto csum_error;
@@ -847,6 +909,7 @@ static int icmpv6_rcv(struct sk_buff *skb)
 	if (!pskb_pull(skb, sizeof(*hdr)))
 		goto discard_it;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hdr = icmp6_hdr(skb);
 
 	type = hdr->icmp6_type;
@@ -870,6 +933,7 @@ static int icmpv6_rcv(struct sk_buff *skb)
 		 */
 		if (!pskb_may_pull(skb, sizeof(struct ipv6hdr)))
 			goto discard_it;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hdr = icmp6_hdr(skb);
 
 		/*
@@ -913,6 +977,7 @@ static int icmpv6_rcv(struct sk_buff *skb)
 		if (type & ICMPV6_INFOMSG_MASK)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_dbg_ratelimited("icmpv6: msg of unknown type [%pI6c > %pI6c]\n",
 				    saddr, daddr);
 
@@ -921,6 +986,7 @@ static int icmpv6_rcv(struct sk_buff *skb)
 		 * must pass to upper level
 		 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icmpv6_notify(skb, type, hdr->icmp6_code, hdr->icmp6_mtu);
 	}
 
@@ -928,10 +994,13 @@ static int icmpv6_rcv(struct sk_buff *skb)
 	 * preserve the status quo behaviour for the rest of the paths to here
 	 */
 	if (success)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		consume_skb(skb);
+}
 	else
 		kfree_skb(skb);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 csum_error:
@@ -949,6 +1018,7 @@ void icmpv6_flow_init(struct sock *sk, struct flowi6 *fl6,
 		      const struct in6_addr *daddr,
 		      int oif)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(fl6, 0, sizeof(*fl6));
 	fl6->saddr = *saddr;
 	fl6->daddr = *daddr;
@@ -967,12 +1037,15 @@ static int __net_init icmpv6_sk_init(struct net *net)
 	net->ipv6.icmp_sk =
 		kzalloc(nr_cpu_ids * sizeof(struct sock *), GFP_KERNEL);
 	if (!net->ipv6.icmp_sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	for_each_possible_cpu(i) {
 		err = inet_ctl_sock_create(&sk, PF_INET6,
 					   SOCK_RAW, IPPROTO_ICMPV6, net);
 		if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("Failed to initialize the ICMP6 control socket (err %d)\n",
 			       err);
 			goto fail;
@@ -985,11 +1058,15 @@ static int __net_init icmpv6_sk_init(struct net *net)
 		 */
 		sk->sk_sndbuf = 2 * SKB_TRUESIZE(64 * 1024);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
  fail:
 	for (j = 0; j < i; j++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_ctl_sock_destroy(net->ipv6.icmp_sk[j]);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(net->ipv6.icmp_sk);
 	return err;
 }
@@ -1015,8 +1092,11 @@ int __init icmpv6_init(void)
 
 	err = register_pernet_subsys(&icmpv6_sk_ops);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EAGAIN;
 	if (inet6_add_protocol(&icmpv6_protocol, IPPROTO_ICMPV6) < 0)
 		goto fail;
@@ -1024,6 +1104,7 @@ int __init icmpv6_init(void)
 	err = inet6_register_icmp_sender(icmp6_send);
 	if (err)
 		goto sender_reg_err;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 sender_reg_err:
@@ -1036,6 +1117,7 @@ int __init icmpv6_init(void)
 
 void icmpv6_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet6_unregister_icmp_sender(icmp6_send);
 	unregister_pernet_subsys(&icmpv6_sk_ops);
 	inet6_del_protocol(&icmpv6_protocol, IPPROTO_ICMPV6);
diff --git a/net/ipv6/inet6_connection_sock.c b/net/ipv6/inet6_connection_sock.c
index 9a31d13..97e461d 100644
--- a/net/ipv6/inet6_connection_sock.c
+++ b/net/ipv6/inet6_connection_sock.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET        An implementation of the TCP/IP protocol suite for the LINUX
  *             operating system.  INET is implemented using the  BSD Socket
@@ -33,6 +35,7 @@ struct dst_entry *inet6_csk_route_req(const struct sock *sk,
 				      const struct request_sock *req,
 				      u8 proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_request_sock *ireq = inet_rsk(req);
 	const struct ipv6_pinfo *np = inet6_sk(sk);
 	struct in6_addr *final_p, final;
@@ -54,7 +57,9 @@ struct dst_entry *inet6_csk_route_req(const struct sock *sk,
 
 	dst = ip6_dst_lookup_flow(sk, fl6, final_p);
 	if (IS_ERR(dst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	return dst;
 }
@@ -83,6 +88,7 @@ struct dst_entry *__inet6_csk_dst_check(struct sock *sk, u32 cookie)
 static struct dst_entry *inet6_csk_route_socket(struct sock *sk,
 						struct flowi6 *fl6)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct in6_addr *final_p, final;
@@ -107,10 +113,13 @@ static struct dst_entry *inet6_csk_route_socket(struct sock *sk,
 
 	dst = __inet6_csk_dst_check(sk, np->dst_cookie);
 	if (!dst) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst = ip6_dst_lookup_flow(sk, fl6, final_p);
 
 		if (!IS_ERR(dst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ip6_dst_store(sk, dst, NULL, NULL);
+}
 	}
 	return dst;
 }
@@ -124,12 +133,14 @@ int inet6_csk_xmit(struct sock *sk, struct sk_buff *skb, struct flowi *fl_unused
 
 	dst = inet6_csk_route_socket(sk, &fl6);
 	if (IS_ERR(dst)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk->sk_err_soft = -PTR_ERR(dst);
 		sk->sk_route_caps = 0;
 		kfree_skb(skb);
 		return PTR_ERR(dst);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	skb_dst_set_noref(skb, dst);
 
@@ -149,7 +160,9 @@ struct dst_entry *inet6_csk_update_pmtu(struct sock *sk, u32 mtu)
 	struct dst_entry *dst = inet6_csk_route_socket(sk, &fl6);
 
 	if (IS_ERR(dst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	dst->ops->update_pmtu(dst, sk, NULL, mtu);
 
 	dst = inet6_csk_route_socket(sk, &fl6);
diff --git a/net/ipv6/inet6_hashtables.c b/net/ipv6/inet6_hashtables.c
index b01858f..42580757e 100644
--- a/net/ipv6/inet6_hashtables.c
+++ b/net/ipv6/inet6_hashtables.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the BSD Socket
@@ -79,6 +81,7 @@ struct sock *__inet6_lookup_established(struct net *net,
 			goto out;
 
 		if (unlikely(!INET6_MATCH(sk, net, saddr, daddr, ports, dif, sdif))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sock_gen_put(sk);
 			goto begin;
 		}
@@ -103,24 +106,39 @@ static inline int compute_score(struct sock *sk, struct net *net,
 	if (net_eq(sock_net(sk), net) && inet_sk(sk)->inet_num == hnum &&
 	    sk->sk_family == PF_INET6) {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		score = 1;
 		if (!ipv6_addr_any(&sk->sk_v6_rcv_saddr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!ipv6_addr_equal(&sk->sk_v6_rcv_saddr, daddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			score++;
 		}
 		if (sk->sk_bound_dev_if || exact_dif) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bool dev_match = (sk->sk_bound_dev_if == dif ||
 					  sk->sk_bound_dev_if == sdif);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (exact_dif && !dev_match)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk->sk_bound_dev_if && dev_match)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				score++;
+}
 		}
 		if (sk->sk_incoming_cpu == raw_smp_processor_id())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			score++;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return score;
 }
 
@@ -144,23 +162,33 @@ struct sock *inet6_lookup_listener(struct net *net,
 		if (score > hiscore) {
 			reuseport = sk->sk_reuseport;
 			if (reuseport) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				phash = inet6_ehashfn(net, daddr, hnum,
 						      saddr, sport);
 				result = reuseport_select_sock(sk, phash,
 							       skb, doff);
 				if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return result;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				matches = 1;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			result = sk;
 			hiscore = score;
 		} else if (score == hiscore && reuseport) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			matches++;
 			if (reciprocal_scale(phash, matches) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				result = sk;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			phash = next_pseudo_random32(phash);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return result;
 }
 EXPORT_SYMBOL_GPL(inet6_lookup_listener);
@@ -204,6 +232,7 @@ static int __inet6_check_established(struct inet_timewait_death_row *death_row,
 
 	spin_lock(lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_nulls_for_each(sk2, node, &head->chain) {
 		if (sk2->sk_hash != hash)
 			continue;
@@ -249,6 +278,7 @@ static int __inet6_check_established(struct inet_timewait_death_row *death_row,
 
 static u32 inet6_sk_port_offset(const struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct inet_sock *inet = inet_sk(sk);
 
 	return secure_ipv6_port_ephemeral(sk->sk_v6_rcv_saddr.s6_addr32,
@@ -273,6 +303,7 @@ int inet6_hash(struct sock *sk)
 	int err = 0;
 
 	if (sk->sk_state != TCP_CLOSE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_bh_disable();
 		err = __inet_hash(sk, NULL);
 		local_bh_enable();
diff --git a/net/ipv6/ip6_checksum.c b/net/ipv6/ip6_checksum.c
index ec43d18..cb50914 100644
--- a/net/ipv6/ip6_checksum.c
+++ b/net/ipv6/ip6_checksum.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <net/ip.h>
 #include <net/udp.h>
@@ -70,9 +72,12 @@ int udp6_csum_init(struct sk_buff *skb, struct udphdr *uh, int proto)
 	UDP_SKB_CB(skb)->cscov = skb->len;
 
 	if (proto == IPPROTO_UDPLITE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = udplite_checksum_init(skb, uh);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	}
 
 	/* To support RFC 6936 (allow zero checksum in UDP/IPV6 for tunnels)
@@ -95,6 +100,7 @@ void udp6_set_csum(bool nocheck, struct sk_buff *skb,
 		   const struct in6_addr *saddr,
 		   const struct in6_addr *daddr, int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct udphdr *uh = udp_hdr(skb);
 
 	if (nocheck)
diff --git a/net/ipv6/ip6_fib.c b/net/ipv6/ip6_fib.c
index e5308d7..244b86a 100644
--- a/net/ipv6/ip6_fib.c
+++ b/net/ipv6/ip6_fib.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Linux INET6 implementation
  *	Forwarding Information Database
@@ -99,8 +101,10 @@ static int fib6_new_sernum(struct net *net)
 	int new, old;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		old = atomic_read(&net->ipv6.fib6_sernum);
 		new = old < INT_MAX ? old + 1 : 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while (atomic_cmpxchg(&net->ipv6.fib6_sernum,
 				old, new) != old);
 	return new;
@@ -151,6 +155,7 @@ static struct fib6_node *node_alloc(void)
 
 static void node_free_immediate(struct fib6_node *fn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_free(fib6_node_kmem, fn);
 }
 
@@ -171,7 +176,9 @@ void rt6_free_pcpu(struct rt6_info *non_pcpu_rt)
 	int cpu;
 
 	if (!non_pcpu_rt->rt6i_pcpu)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for_each_possible_cpu(cpu) {
 		struct rt6_info **ppcpu_rt;
@@ -180,6 +187,7 @@ void rt6_free_pcpu(struct rt6_info *non_pcpu_rt)
 		ppcpu_rt = per_cpu_ptr(non_pcpu_rt->rt6i_pcpu, cpu);
 		pcpu_rt = *ppcpu_rt;
 		if (pcpu_rt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dst_dev_put(&pcpu_rt->dst);
 			dst_release(&pcpu_rt->dst);
 			*ppcpu_rt = NULL;
@@ -283,11 +291,13 @@ static void __net_init fib6_tables_init(struct net *net)
 
 struct fib6_table *fib6_new_table(struct net *net, u32 id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fib6_get_table(net, id);
 }
 
 struct fib6_table *fib6_get_table(struct net *net, u32 id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	  return net->ipv6.fib6_main_tbl;
 }
 
@@ -298,6 +308,7 @@ struct dst_entry *fib6_rule_lookup(struct net *net, struct flowi6 *fl6,
 
 	rt = lookup(net, net->ipv6.fib6_main_tbl, fl6, flags);
 	if (rt->dst.error == -EAGAIN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip6_rt_put(rt);
 		rt = net->ipv6.ip6_null_entry;
 		dst_hold(&rt->dst);
@@ -308,6 +319,7 @@ struct dst_entry *fib6_rule_lookup(struct net *net, struct flowi6 *fl6,
 
 static void __net_init fib6_tables_init(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fib6_link_table(net, net->ipv6.fib6_main_tbl);
 }
 
@@ -318,6 +330,7 @@ unsigned int fib6_tables_seq_read(struct net *net)
 	unsigned int h, fib_seq = 0;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (h = 0; h < FIB6_TABLE_HASHSZ; h++) {
 		struct hlist_head *head = &net->ipv6.fib_table_hash[h];
 		struct fib6_table *tb;
@@ -363,6 +376,7 @@ struct fib6_dump_arg {
 
 static void fib6_rt_dump(struct rt6_info *rt, struct fib6_dump_arg *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rt == arg->net->ipv6.ip6_null_entry)
 		return;
 	call_fib6_entry_notifier(arg->nb, arg->net, FIB_EVENT_ENTRY_ADD, rt);
@@ -372,6 +386,7 @@ static int fib6_node_dump(struct fib6_walker *w)
 {
 	struct rt6_info *rt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (rt = w->leaf; rt; rt = rt->dst.rt6_next)
 		fib6_rt_dump(rt, w->args);
 	w->leaf = NULL;
@@ -381,6 +396,7 @@ static int fib6_node_dump(struct fib6_walker *w)
 static void fib6_table_dump(struct net *net, struct fib6_table *tb,
 			    struct fib6_walker *w)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	w->root = &tb->tb6_root;
 	read_lock_bh(&tb->tb6_lock);
 	fib6_walk(net, w);
@@ -396,7 +412,9 @@ int fib6_tables_dump(struct net *net, struct notifier_block *nb)
 
 	w = kzalloc(sizeof(*w), GFP_ATOMIC);
 	if (!w)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	w->func = fib6_node_dump;
 	arg.net = net;
@@ -435,9 +453,11 @@ static int fib6_dump_node(struct fib6_walker *w)
 		 * sibling routes again)
 		 */
 		if (rt->rt6i_nsiblings)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rt = list_last_entry(&rt->rt6i_siblings,
 					     struct rt6_info,
 					     rt6i_siblings);
+}
 	}
 	w->leaf = NULL;
 	return 0;
@@ -450,6 +470,7 @@ static void fib6_dump_end(struct netlink_callback *cb)
 
 	if (w) {
 		if (cb->args[4]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cb->args[4] = 0;
 			fib6_walker_unlink(net, w);
 		}
@@ -462,6 +483,7 @@ static void fib6_dump_end(struct netlink_callback *cb)
 
 static int fib6_dump_done(struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fib6_dump_end(cb);
 	return cb->done ? cb->done(cb) : 0;
 }
@@ -484,10 +506,12 @@ static int fib6_dump_table(struct fib6_table *table, struct sk_buff *skb,
 		res = fib6_walk(net, w);
 		read_unlock_bh(&table->tb6_lock);
 		if (res > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cb->args[4] = 1;
 			cb->args[5] = w->root->fn_sernum;
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cb->args[5] != w->root->fn_sernum) {
 			/* Begin at the root if the tree changed */
 			cb->args[5] = w->root->fn_sernum;
@@ -495,12 +519,16 @@ static int fib6_dump_table(struct fib6_table *table, struct sk_buff *skb,
 			w->node = w->root;
 			w->skip = w->count;
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			w->skip = 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_lock_bh(&table->tb6_lock);
 		res = fib6_walk_continue(w);
 		read_unlock_bh(&table->tb6_lock);
 		if (res <= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fib6_walker_unlink(net, w);
 			cb->args[4] = 0;
 		}
@@ -537,7 +565,9 @@ static int inet6_dump_fib(struct sk_buff *skb, struct netlink_callback *cb)
 		 */
 		w = kzalloc(sizeof(*w), GFP_ATOMIC);
 		if (!w)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 		w->func = fib6_dump_node;
 		cb->args[2] = (long)w;
 	}
@@ -549,6 +579,7 @@ static int inet6_dump_fib(struct sk_buff *skb, struct netlink_callback *cb)
 
 	rcu_read_lock();
 	for (h = s_h; h < FIB6_TABLE_HASHSZ; h++, s_e = 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		e = 0;
 		head = &net->ipv6.fib_table_hash[h];
 		hlist_for_each_entry_rcu(tb, head, tb6_hlist) {
@@ -569,6 +600,7 @@ static int inet6_dump_fib(struct sk_buff *skb, struct netlink_callback *cb)
 	res = res < 0 ? res : skb->len;
 	if (res <= 0)
 		fib6_dump_end(cb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return res;
 }
 
@@ -592,10 +624,12 @@ static struct fib6_node *fib6_add_1(struct fib6_node *root,
 	int	bit;
 	__be32	dir = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RT6_TRACE("fib6_add_1\n");
 
 	/* insert node in tree */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fn = root;
 
 	do {
@@ -607,12 +641,16 @@ static struct fib6_node *fib6_add_1(struct fib6_node *root,
 		if (plen < fn->fn_bit ||
 		    !ipv6_prefix_equal(&key->addr, addr, fn->fn_bit)) {
 			if (!allow_create) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (replace_required) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					NL_SET_ERR_MSG(extack,
 						       "Can not replace route - no match found");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					pr_warn("Can't replace route, no match found\n");
 					return ERR_PTR(-ENOENT);
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pr_warn("NLM_F_CREATE should be set when creating new route\n");
 			}
 			goto insert_above;
@@ -625,6 +663,7 @@ static struct fib6_node *fib6_add_1(struct fib6_node *root,
 		if (plen == fn->fn_bit) {
 			/* clean up an intermediate node */
 			if (!(fn->fn_flags & RTN_RTINFO)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rt6_release(fn->leaf);
 				fn->leaf = NULL;
 			}
@@ -656,11 +695,14 @@ static struct fib6_node *fib6_add_1(struct fib6_node *root,
 		 * That would keep IPv6 consistent with IPv4
 		 */
 		if (replace_required) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack,
 				       "Can not replace route - no match found");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn("Can't replace route, no match found\n");
 			return ERR_PTR(-ENOENT);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("NLM_F_CREATE should be set when creating new route\n");
 	}
 	/*
@@ -671,7 +713,9 @@ static struct fib6_node *fib6_add_1(struct fib6_node *root,
 	ln = node_alloc();
 
 	if (!ln)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 	ln->fn_bit = plen;
 
 	ln->parent = pn;
@@ -682,6 +726,7 @@ static struct fib6_node *fib6_add_1(struct fib6_node *root,
 	else
 		pn->left  = ln;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ln;
 
 
@@ -714,10 +759,17 @@ static struct fib6_node *fib6_add_1(struct fib6_node *root,
 		ln = node_alloc();
 
 		if (!in || !ln) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (in)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				node_free_immediate(in);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ln)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				node_free_immediate(ln);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-ENOMEM);
 		}
 
@@ -751,6 +803,7 @@ static struct fib6_node *fib6_add_1(struct fib6_node *root,
 		ln->fn_sernum = sernum;
 
 		if (addr_bit_set(addr, bit)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			in->right = ln;
 			in->left  = fn;
 		} else {
@@ -765,11 +818,15 @@ static struct fib6_node *fib6_add_1(struct fib6_node *root,
 		 *	     (old node)[fn] NULL
 		 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ln = node_alloc();
 
 		if (!ln)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-ENOMEM);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ln->fn_bit = plen;
 
 		ln->parent = pn;
@@ -777,17 +834,24 @@ static struct fib6_node *fib6_add_1(struct fib6_node *root,
 		ln->fn_sernum = sernum;
 
 		if (dir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pn->right = ln;
+}
 		else
 			pn->left  = ln;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (addr_bit_set(&key->addr, plen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ln->right = fn;
+}
 		else
 			ln->left  = fn;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fn->parent = ln;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ln;
 }
 
@@ -801,6 +865,7 @@ static void fib6_copy_metrics(u32 *mp, const struct mx6_config *mxc)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < RTAX_MAX; i++) {
 		if (test_bit(i, mxc->mx_valid))
 			mp[i] = mxc->mx[i];
@@ -810,22 +875,31 @@ static void fib6_copy_metrics(u32 *mp, const struct mx6_config *mxc)
 static int fib6_commit_metrics(struct dst_entry *dst, struct mx6_config *mxc)
 {
 	if (!mxc->mx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dst->flags & DST_HOST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		u32 *mp = dst_metrics_write_ptr(dst);
 
 		if (unlikely(!mp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fib6_copy_metrics(mp, mxc);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_init_metrics(dst, mxc->mx, false);
 
 		/* We've stolen mx now. */
 		mxc->mx = NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -840,11 +914,14 @@ static void fib6_purge_rt(struct rt6_info *rt, struct fib6_node *fn,
 		 * to still alive ones.
 		 */
 		while (fn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!(fn->fn_flags & RTN_RTINFO) && fn->leaf == rt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fn->leaf = fib6_find_prefix(net, fn);
 				atomic_inc(&fn->leaf->rt6i_ref);
 				rt6_release(rt);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fn = fn->parent;
 		}
 	}
@@ -870,7 +947,9 @@ static int fib6_add_rt2node(struct fib6_node *fn, struct rt6_info *rt,
 	int err;
 
 	if (info->nlh && (info->nlh->nlmsg_flags & NLM_F_APPEND))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nlflags |= NLM_F_APPEND;
+}
 
 	ins = &fn->leaf;
 
@@ -889,24 +968,37 @@ static int fib6_add_rt2node(struct fib6_node *fn, struct rt6_info *rt,
 
 			nlflags &= ~NLM_F_EXCL;
 			if (replace) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (rt_can_ecmp == rt6_qualify_for_ecmp(iter)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					found++;
 					break;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (rt_can_ecmp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					fallback_ins = fallback_ins ?: ins;
+}
 				goto next_iter;
 			}
 
 			if (rt6_duplicate_nexthop(iter, rt)) {
 				if (rt->rt6i_nsiblings)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					rt->rt6i_nsiblings = 0;
+}
 				if (!(iter->rt6i_flags & RTF_EXPIRES))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -EEXIST;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!(rt->rt6i_flags & RTF_EXPIRES))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					rt6_clean_expires(iter);
+}
 				else
 					rt6_set_expires(iter, rt->dst.expires);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				iter->rt6i_pmtu = rt->rt6i_pmtu;
 				return -EEXIST;
 			}
@@ -926,6 +1018,7 @@ static int fib6_add_rt2node(struct fib6_node *fn, struct rt6_info *rt,
 				rt->rt6i_nsiblings++;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (iter->rt6i_metric > rt->rt6i_metric)
 			break;
 
@@ -951,13 +1044,17 @@ static int fib6_add_rt2node(struct fib6_node *fn, struct rt6_info *rt,
 
 		/* Find the first route that have the same metric */
 		sibling = fn->leaf;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (sibling) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sibling->rt6i_metric == rt->rt6i_metric &&
 			    rt6_qualify_for_ecmp(sibling)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				list_add_tail(&rt->rt6i_siblings,
 					      &sibling->rt6i_siblings);
 				break;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sibling = sibling->dst.rt6_next;
 		}
 		/* For each sibling in the list, increment the counter of
@@ -965,12 +1062,17 @@ static int fib6_add_rt2node(struct fib6_node *fn, struct rt6_info *rt,
 		 * is broken!
 		 */
 		rt6i_nsiblings = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_for_each_entry_safe(sibling, temp_sibling,
 					 &rt->rt6i_siblings, rt6i_siblings) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sibling->rt6i_nsiblings++;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BUG_ON(sibling->rt6i_nsiblings != rt->rt6i_nsiblings);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rt6i_nsiblings++;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(rt6i_nsiblings != rt->rt6i_nsiblings);
 	}
 
@@ -979,13 +1081,17 @@ static int fib6_add_rt2node(struct fib6_node *fn, struct rt6_info *rt,
 	 */
 	if (!replace) {
 		if (!add)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn("NLM_F_CREATE should be set when creating new route\n");
+}
 
 add:
 		nlflags |= NLM_F_CREATE;
 		err = fib6_commit_metrics(&rt->dst, mxc);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 
 		rt->dst.rt6_next = iter;
 		*ins = rt;
@@ -1006,59 +1112,85 @@ static int fib6_add_rt2node(struct fib6_node *fn, struct rt6_info *rt,
 		int nsiblings;
 
 		if (!found) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (add)
 				goto add;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn("NLM_F_REPLACE set, but no existing node found!\n");
 			return -ENOENT;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = fib6_commit_metrics(&rt->dst, mxc);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*ins = rt;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_assign_pointer(rt->rt6i_node, fn);
 		rt->dst.rt6_next = iter->dst.rt6_next;
 		atomic_inc(&rt->rt6i_ref);
 		call_fib6_entry_notifiers(info->nl_net, FIB_EVENT_ENTRY_REPLACE,
 					  rt);
 		if (!info->skip_notify)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet6_rt_notify(RTM_NEWROUTE, rt, info, NLM_F_REPLACE);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(fn->fn_flags & RTN_RTINFO)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			info->nl_net->ipv6.rt6_stats->fib_route_nodes++;
 			fn->fn_flags |= RTN_RTINFO;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nsiblings = iter->rt6i_nsiblings;
 		iter->rt6i_node = NULL;
 		fib6_purge_rt(iter, fn, info->nl_net);
 		if (fn->rr_ptr == iter)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fn->rr_ptr = NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt6_release(iter);
 
 		if (nsiblings) {
 			/* Replacing an ECMP route, remove all siblings */
 			ins = &rt->dst.rt6_next;
 			iter = *ins;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			while (iter) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (iter->rt6i_metric > rt->rt6i_metric)
 					break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (rt6_qualify_for_ecmp(iter)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					*ins = iter->dst.rt6_next;
 					iter->rt6i_node = NULL;
 					fib6_purge_rt(iter, fn, info->nl_net);
 					if (fn->rr_ptr == iter)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						fn->rr_ptr = NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					rt6_release(iter);
 					nsiblings--;
 				} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ins = &iter->dst.rt6_next;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				iter = *ins;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			WARN_ON(nsiblings != 0);
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1072,6 +1204,7 @@ static void fib6_start_gc(struct net *net, struct rt6_info *rt)
 
 void fib6_force_start_gc(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!timer_pending(&net->ipv6.ip6_fib_timer))
 		mod_timer(&net->ipv6.ip6_fib_timer,
 			  jiffies + net->ipv6.sysctl.ip6_rt_gc_interval);
@@ -1094,26 +1227,38 @@ int fib6_add(struct fib6_node *root, struct rt6_info *rt,
 	int sernum = fib6_new_sernum(info->nl_net);
 
 	if (WARN_ON_ONCE(!atomic_read(&rt->dst.__refcnt)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (info->nlh) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(info->nlh->nlmsg_flags & NLM_F_CREATE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			allow_create = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (info->nlh->nlmsg_flags & NLM_F_REPLACE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			replace_required = 1;
+}
 	}
 	if (!allow_create && !replace_required)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("RTM_NEWROUTE with no NLM_F_CREATE or NLM_F_REPLACE\n");
+}
 
 	fn = fib6_add_1(root, &rt->rt6i_dst.addr, rt->rt6i_dst.plen,
 			offsetof(struct rt6_info, rt6i_dst), allow_create,
 			replace_required, sernum, extack);
 	if (IS_ERR(fn)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(fn);
 		fn = NULL;
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pn = fn;
 
 #ifdef CONFIG_IPV6_SUBTREES
@@ -1216,6 +1361,7 @@ int fib6_add(struct fib6_node *root, struct rt6_info *rt,
 #endif
 		goto failure;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 
 failure:
@@ -1226,7 +1372,9 @@ int fib6_add(struct fib6_node *root, struct rt6_info *rt,
 	 * fn->leaf.
 	 */
 	if (fn && !(fn->fn_flags & (RTN_RTINFO|RTN_ROOT)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fib6_repair_tree(info->nl_net, fn);
+}
 	/* Always release dst as dst->__refcnt is guaranteed
 	 * to be taken before entering this function
 	 */
@@ -1251,12 +1399,15 @@ static struct fib6_node *fib6_lookup_1(struct fib6_node *root,
 	__be32 dir;
 
 	if (unlikely(args->offset == 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/*
 	 *	Descend on a tree
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fn = root;
 
 	for (;;) {
@@ -1267,6 +1418,7 @@ static struct fib6_node *fib6_lookup_1(struct fib6_node *root,
 		next = dir ? fn->right : fn->left;
 
 		if (next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fn = next;
 			continue;
 		}
@@ -1292,7 +1444,9 @@ static struct fib6_node *fib6_lookup_1(struct fib6_node *root,
 				}
 #endif
 				if (fn->fn_flags & RTN_RTINFO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return fn;
+}
 			}
 		}
 #ifdef CONFIG_IPV6_SUBTREES
@@ -1301,9 +1455,11 @@ static struct fib6_node *fib6_lookup_1(struct fib6_node *root,
 		if (fn->fn_flags & RTN_ROOT)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fn = fn->parent;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -1329,7 +1485,9 @@ struct fib6_node *fib6_lookup(struct fib6_node *root, const struct in6_addr *dad
 
 	fn = fib6_lookup_1(root, daddr ? args : args + 1);
 	if (!fn || fn->fn_flags & RTN_TL_ROOT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fn = root;
+}
 
 	return fn;
 }
@@ -1346,6 +1504,7 @@ static struct fib6_node *fib6_locate_1(struct fib6_node *root,
 {
 	struct fib6_node *fn;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (fn = root; fn ; ) {
 		struct rt6key *key = (struct rt6key *)((u8 *)fn->leaf + offset);
 
@@ -1388,6 +1547,7 @@ struct fib6_node *fib6_locate(struct fib6_node *root,
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (fn && fn->fn_flags & RTN_RTINFO)
 		return fn;
 
@@ -1402,6 +1562,7 @@ struct fib6_node *fib6_locate(struct fib6_node *root,
 
 static struct rt6_info *fib6_find_prefix(struct net *net, struct fib6_node *fn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (fn->fn_flags & RTN_ROOT)
 		return net->ipv6.ip6_null_entry;
 
@@ -1431,7 +1592,9 @@ static struct fib6_node *fib6_repair_tree(struct net *net,
 	int iter = 0;
 
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		RT6_TRACE("fixing tree: plen=%d iter=%d\n", fn->fn_bit, iter);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iter++;
 
 		WARN_ON(fn->fn_flags & RTN_RTINFO);
@@ -1441,9 +1604,13 @@ static struct fib6_node *fib6_repair_tree(struct net *net,
 		children = 0;
 		child = NULL;
 		if (fn->right)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			child = fn->right, children |= 1;
+}
 		if (fn->left)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			child = fn->left, children |= 2;
+}
 
 		if (children == 3 || FIB6_SUBTREE(fn)
 #ifdef CONFIG_IPV6_SUBTREES
@@ -1451,9 +1618,11 @@ static struct fib6_node *fib6_repair_tree(struct net *net,
 		    || (children && fn->fn_flags & RTN_ROOT)
 #endif
 		    ) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fn->leaf = fib6_find_prefix(net, fn);
 #if RT6_DEBUG >= 2
 			if (!fn->leaf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				WARN_ON(!fn->leaf);
 				fn->leaf = net->ipv6.ip6_null_entry;
 			}
@@ -1472,7 +1641,9 @@ static struct fib6_node *fib6_repair_tree(struct net *net,
 			WARN_ON(fn->fn_flags & RTN_ROOT);
 #endif
 			if (pn->right == fn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pn->right = child;
+}
 			else if (pn->left == fn)
 				pn->left = child;
 #if RT6_DEBUG >= 2
@@ -1480,7 +1651,10 @@ static struct fib6_node *fib6_repair_tree(struct net *net,
 				WARN_ON(1);
 #endif
 			if (child)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				child->parent = pn;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nstate = FWS_R;
 #ifdef CONFIG_IPV6_SUBTREES
 		}
@@ -1490,36 +1664,52 @@ static struct fib6_node *fib6_repair_tree(struct net *net,
 		FOR_WALKERS(net, w) {
 			if (!child) {
 				if (w->root == fn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					w->root = w->node = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					RT6_TRACE("W %p adjusted by delroot 1\n", w);
 				} else if (w->node == fn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					RT6_TRACE("W %p adjusted by delnode 1, s=%d/%d\n", w, w->state, nstate);
 					w->node = pn;
 					w->state = nstate;
 				}
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (w->root == fn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					w->root = child;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					RT6_TRACE("W %p adjusted by delroot 2\n", w);
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (w->node == fn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					w->node = child;
 					if (children&2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						RT6_TRACE("W %p adjusted by delnode 2, s=%d\n", w, w->state);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						w->state = w->state >= FWS_R ? FWS_U : FWS_INIT;
 					} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						RT6_TRACE("W %p adjusted by delnode 2, s=%d\n", w, w->state);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						w->state = w->state >= FWS_C ? FWS_U : FWS_INIT;
 					}
 				}
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_unlock(&net->ipv6.fib6_walker_lock);
 
 		node_free(fn);
 		if (pn->fn_flags & RTN_RTINFO || FIB6_SUBTREE(pn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return pn;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt6_release(pn->leaf);
 		pn->leaf = NULL;
 		fn = pn;
@@ -1533,6 +1723,7 @@ static void fib6_del_route(struct fib6_node *fn, struct rt6_info **rtp,
 	struct rt6_info *rt = *rtp;
 	struct net *net = info->nl_net;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RT6_TRACE("fib6_del_route\n");
 
 	/* Unlink it */
@@ -1543,15 +1734,19 @@ static void fib6_del_route(struct fib6_node *fn, struct rt6_info **rtp,
 
 	/* Reset round-robin state, if necessary */
 	if (fn->rr_ptr == rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fn->rr_ptr = NULL;
+}
 
 	/* Remove this entry from other siblings */
 	if (rt->rt6i_nsiblings) {
 		struct rt6_info *sibling, *next_sibling;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_for_each_entry_safe(sibling, next_sibling,
 					 &rt->rt6i_siblings, rt6i_siblings)
 			sibling->rt6i_nsiblings--;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt->rt6i_nsiblings = 0;
 		list_del_init(&rt->rt6i_siblings);
 	}
@@ -1560,12 +1755,14 @@ static void fib6_del_route(struct fib6_node *fn, struct rt6_info **rtp,
 	read_lock(&net->ipv6.fib6_walker_lock);
 	FOR_WALKERS(net, w) {
 		if (w->state == FWS_C && w->leaf == rt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			RT6_TRACE("walker %p adjusted by delroute\n", w);
 			w->leaf = rt->dst.rt6_next;
 			if (!w->leaf)
 				w->state = FWS_U;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock(&net->ipv6.fib6_walker_lock);
 
 	rt->dst.rt6_next = NULL;
@@ -1599,7 +1796,9 @@ int fib6_del(struct rt6_info *rt, struct nl_info *info)
 	}
 #endif
 	if (!fn || rt == net->ipv6.ip6_null_entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	WARN_ON(!(fn->fn_flags & RTN_RTINFO));
 
@@ -1626,6 +1825,7 @@ int fib6_del(struct rt6_info *rt, struct nl_info *info)
 			return 0;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOENT;
 }
 
@@ -1660,10 +1860,13 @@ static int fib6_walk_continue(struct fib6_walker *w)
 	for (;;) {
 		fn = w->node;
 		if (!fn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
 		if (w->prune && fn != w->root &&
 		    fn->fn_flags & RTN_RTINFO && w->state < FWS_C) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			w->state = FWS_C;
 			w->leaf = fn->leaf;
 		}
@@ -1696,13 +1899,16 @@ static int fib6_walk_continue(struct fib6_walker *w)
 				int err;
 
 				if (w->skip) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					w->skip--;
 					goto skip;
 				}
 
 				err = w->func(w);
 				if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return err;
+}
 
 				w->count++;
 				continue;
@@ -1711,7 +1917,9 @@ static int fib6_walk_continue(struct fib6_walker *w)
 			w->state = FWS_U;
 		case FWS_U:
 			if (fn == w->root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
 			pn = fn->parent;
 			w->node = pn;
 #ifdef CONFIG_IPV6_SUBTREES
@@ -1755,6 +1963,7 @@ static int fib6_clean_node(struct fib6_walker *w)
 {
 	int res;
 	struct rt6_info *rt;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fib6_cleaner *c = container_of(w, struct fib6_cleaner, w);
 	struct nl_info info = {
 		.nl_net = c->net,
@@ -1784,6 +1993,7 @@ static int fib6_clean_node(struct fib6_walker *w)
 #endif
 				continue;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
 		}
 		WARN_ON(res != 0);
@@ -1840,6 +2050,7 @@ static void __fib6_clean_all(struct net *net,
 			write_unlock_bh(&table->tb6_lock);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -1852,7 +2063,9 @@ void fib6_clean_all(struct net *net, int (*func)(struct rt6_info *, void *),
 static int fib6_prune_clone(struct rt6_info *rt, void *arg)
 {
 	if (rt->rt6i_flags & RTF_CACHE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		RT6_TRACE("pruning clone %p\n", rt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
 	}
 
@@ -1896,17 +2109,27 @@ static int fib6_age(struct rt6_info *rt, void *arg)
 	 */
 
 	if (rt->rt6i_flags & RTF_EXPIRES && rt->dst.expires) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (time_after(now, rt->dst.expires)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			RT6_TRACE("expiring %p\n", rt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gc_args->more++;
 	} else if (rt->rt6i_flags & RTF_CACHE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (time_after_eq(now, rt->dst.lastuse + gc_args->timeout))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rt->dst.obsolete = DST_OBSOLETE_KILL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (atomic_read(&rt->dst.__refcnt) == 1 &&
 		    rt->dst.obsolete == DST_OBSOLETE_KILL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			RT6_TRACE("aging clone %p\n", rt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
 		} else if (rt->rt6i_flags & RTF_GATEWAY) {
 			struct neighbour *neigh;
@@ -1914,18 +2137,24 @@ static int fib6_age(struct rt6_info *rt, void *arg)
 
 			neigh = dst_neigh_lookup(&rt->dst, &rt->rt6i_gateway);
 			if (neigh) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				neigh_flags = neigh->flags;
 				neigh_release(neigh);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!(neigh_flags & NTF_ROUTER)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				RT6_TRACE("purging route %p via non-router but gateway\n",
 					  rt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -1;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gc_args->more++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1935,8 +2164,10 @@ void fib6_run_gc(unsigned long expires, struct net *net, bool force)
 	unsigned long now;
 
 	if (force) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_bh(&net->ipv6.fib6_gc_lock);
 	} else if (!spin_trylock_bh(&net->ipv6.fib6_gc_lock)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mod_timer(&net->ipv6.ip6_fib_timer, jiffies + HZ);
 		return;
 	}
@@ -1954,11 +2185,13 @@ void fib6_run_gc(unsigned long expires, struct net *net, bool force)
 					+ net->ipv6.sysctl.ip6_rt_gc_interval));
 	else
 		del_timer(&net->ipv6.ip6_fib_timer);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&net->ipv6.fib6_gc_lock);
 }
 
 static void fib6_gc_timer_cb(unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fib6_run_gc(0, (struct net *)arg, true);
 }
 
@@ -1969,7 +2202,9 @@ static int __net_init fib6_net_init(struct net *net)
 
 	err = fib6_notifier_init(net);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	spin_lock_init(&net->ipv6.fib6_gc_lock);
 	rwlock_init(&net->ipv6.fib6_walker_lock);
@@ -2087,6 +2322,7 @@ int __init fib6_init(void)
 
 void fib6_gc_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&fib6_net_ops);
 	kmem_cache_destroy(fib6_node_kmem);
 }
@@ -2114,7 +2350,9 @@ static int ipv6_route_seq_show(struct seq_file *seq, void *v)
 	seq_puts(seq, "00000000000000000000000000000000 00 ");
 #endif
 	if (rt->rt6i_flags & RTF_GATEWAY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_printf(seq, "%pi6", &rt->rt6i_gateway);
+}
 	else
 		seq_puts(seq, "00000000000000000000000000000000");
 
@@ -2131,15 +2369,20 @@ static int ipv6_route_yield(struct fib6_walker *w)
 	struct ipv6_route_iter *iter = w->args;
 
 	if (!iter->skip)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	do {
 		iter->w.leaf = iter->w.leaf->dst.rt6_next;
 		iter->skip--;
 		if (!iter->skip && iter->w.leaf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
+}
 	} while (iter->w.leaf);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -2167,6 +2410,7 @@ static struct fib6_table *ipv6_route_seq_next_table(struct fib6_table *tbl,
 		h = (tbl->tb6_id & (FIB6_TABLE_HASHSZ - 1)) + 1;
 		node = rcu_dereference_bh(hlist_next_rcu(&tbl->tb6_hlist));
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		h = 0;
 		node = NULL;
 	}
@@ -2181,9 +2425,11 @@ static struct fib6_table *ipv6_route_seq_next_table(struct fib6_table *tbl,
 static void ipv6_route_check_sernum(struct ipv6_route_iter *iter)
 {
 	if (iter->sernum != iter->w.root->fn_sernum) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iter->sernum = iter->w.root->fn_sernum;
 		iter->w.state = FWS_INIT;
 		iter->w.node = iter->w.root;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(iter->w.skip);
 		iter->w.skip = iter->w.count;
 	}
@@ -2201,6 +2447,7 @@ static void *ipv6_route_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 
 	n = ((struct rt6_info *)v)->dst.rt6_next;
 	if (n) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		++*pos;
 		return n;
 	}
@@ -2215,6 +2462,7 @@ static void *ipv6_route_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 			++*pos;
 		return iter->w.leaf;
 	} else if (r < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fib6_walker_unlink(net, &iter->w);
 		return NULL;
 	}
@@ -2222,7 +2470,9 @@ static void *ipv6_route_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 
 	iter->tbl = ipv6_route_seq_next_table(iter->tbl, net);
 	if (!iter->tbl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	ipv6_route_seq_setup_walk(iter, net);
 	goto iter_table;
@@ -2231,6 +2481,7 @@ static void *ipv6_route_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 static void *ipv6_route_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(RCU_BH)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = seq_file_net(seq);
 	struct ipv6_route_iter *iter = seq->private;
 
@@ -2242,6 +2493,7 @@ static void *ipv6_route_seq_start(struct seq_file *seq, loff_t *pos)
 		ipv6_route_seq_setup_walk(iter, net);
 		return ipv6_route_seq_next(seq, NULL, pos);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
 	}
 }
@@ -2255,12 +2507,14 @@ static bool ipv6_route_iter_active(struct ipv6_route_iter *iter)
 static void ipv6_route_seq_stop(struct seq_file *seq, void *v)
 	__releases(RCU_BH)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = seq_file_net(seq);
 	struct ipv6_route_iter *iter = seq->private;
 
 	if (ipv6_route_iter_active(iter))
 		fib6_walker_unlink(net, &iter->w);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock_bh();
 }
 
diff --git a/net/ipv6/ip6_flowlabel.c b/net/ipv6/ip6_flowlabel.c
index 15535ee..042c53d 100644
--- a/net/ipv6/ip6_flowlabel.c
+++ b/net/ipv6/ip6_flowlabel.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	ip6_flowlabel.c		IPv6 flowlabel manager.
  *
@@ -75,6 +77,7 @@ static inline struct ip6_flowlabel *__fl_lookup(struct net *net, __be32 label)
 {
 	struct ip6_flowlabel *fl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_fl_rcu(FL_HASH(label), fl) {
 		if (fl->label == label && net_eq(fl->fl_net, net))
 			return fl;
@@ -88,6 +91,7 @@ static struct ip6_flowlabel *fl_lookup(struct net *net, __be32 label)
 
 	rcu_read_lock_bh();
 	fl = __fl_lookup(net, label);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (fl && !atomic_inc_not_zero(&fl->users))
 		fl = NULL;
 	rcu_read_unlock_bh();
@@ -97,6 +101,7 @@ static struct ip6_flowlabel *fl_lookup(struct net *net, __be32 label)
 
 static void fl_free(struct ip6_flowlabel *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (fl) {
 		if (fl->share == IPV6_FL_S_PROCESS)
 			put_pid(fl->owner.pid);
@@ -107,6 +112,7 @@ static void fl_free(struct ip6_flowlabel *fl)
 
 static void fl_release(struct ip6_flowlabel *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&ip6_fl_lock);
 
 	fl->lastuse = jiffies;
@@ -135,6 +141,7 @@ static void ip6_fl_gc(unsigned long dummy)
 
 	spin_lock(&ip6_fl_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i <= FL_HASH_MASK; i++) {
 		struct ip6_flowlabel *fl;
 		struct ip6_flowlabel __rcu **flp;
@@ -179,16 +186,20 @@ static void __net_exit ip6_fl_purge(struct net *net)
 		flp = &fl_ht[i];
 		while ((fl = rcu_dereference_protected(*flp,
 						       lockdep_is_held(&ip6_fl_lock))) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (net_eq(fl->fl_net, net) &&
 			    atomic_read(&fl->users) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*flp = fl->next;
 				fl_free(fl);
 				atomic_dec(&fl_size);
 				continue;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flp = &fl->next;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&ip6_fl_lock);
 }
 
@@ -197,6 +208,7 @@ static struct ip6_flowlabel *fl_intern(struct net *net,
 {
 	struct ip6_flowlabel *lfl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fl->label = label & IPV6_FLOWLABEL_MASK;
 
 	spin_lock_bh(&ip6_fl_lock);
@@ -243,6 +255,7 @@ struct ip6_flowlabel *fl6_sock_lookup(struct sock *sk, __be32 label)
 	struct ipv6_fl_socklist *sfl;
 	struct ipv6_pinfo *np = inet6_sk(sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	label &= IPV6_FLOWLABEL_MASK;
 
 	rcu_read_lock_bh();
@@ -266,19 +279,27 @@ void fl6_free_socklist(struct sock *sk)
 	struct ipv6_fl_socklist *sfl;
 
 	if (!rcu_access_pointer(np->ipv6_fl_list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&ip6_sk_fl_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((sfl = rcu_dereference_protected(np->ipv6_fl_list,
 						lockdep_is_held(&ip6_sk_fl_lock))) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->ipv6_fl_list = sfl->next;
 		spin_unlock_bh(&ip6_sk_fl_lock);
 
 		fl_release(sfl->fl);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_rcu(sfl, rcu);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_bh(&ip6_sk_fl_lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&ip6_sk_fl_lock);
 }
 
@@ -297,6 +318,7 @@ struct ipv6_txoptions *fl6_merge_options(struct ipv6_txoptions *opt_space,
 {
 	struct ipv6_txoptions *fl_opt = fl->opt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!fopt || fopt->opt_flen == 0)
 		return fl_opt;
 
@@ -322,6 +344,7 @@ EXPORT_SYMBOL_GPL(fl6_merge_options);
 
 static unsigned long check_linger(unsigned long ttl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ttl < FL_MIN_LINGER)
 		return FL_MIN_LINGER*HZ;
 	if (ttl > FL_MAX_LINGER && !capable(CAP_NET_ADMIN))
@@ -331,6 +354,7 @@ static unsigned long check_linger(unsigned long ttl)
 
 static int fl6_renew(struct ip6_flowlabel *fl, unsigned long linger, unsigned long expires)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	linger = check_linger(linger);
 	if (!linger)
 		return -EPERM;
@@ -365,6 +389,7 @@ fl_create(struct net *net, struct sock *sk, struct in6_flowlabel_req *freq,
 	if (olen > 64 * 1024)
 		goto done;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENOMEM;
 	fl = kzalloc(sizeof(*fl), GFP_KERNEL);
 	if (!fl)
@@ -442,6 +467,7 @@ fl_create(struct net *net, struct sock *sk, struct in6_flowlabel_req *freq,
 
 static int mem_check(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct ipv6_fl_socklist *sfl;
 	int room = FL_MAX_SIZE - atomic_read(&fl_size);
@@ -467,6 +493,7 @@ static int mem_check(struct sock *sk)
 static inline void fl_link(struct ipv6_pinfo *np, struct ipv6_fl_socklist *sfl,
 		struct ip6_flowlabel *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&ip6_sk_fl_lock);
 	sfl->fl = fl;
 	sfl->next = np->ipv6_fl_list;
@@ -477,6 +504,7 @@ static inline void fl_link(struct ipv6_pinfo *np, struct ipv6_fl_socklist *sfl,
 int ipv6_flowlabel_opt_get(struct sock *sk, struct in6_flowlabel_req *freq,
 			   int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct ipv6_fl_socklist *sfl;
 
@@ -524,7 +552,9 @@ int ipv6_flowlabel_opt(struct sock *sk, char __user *optval, int optlen)
 
 
 	if (optlen < sizeof(freq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (copy_from_user(&freq, optval, sizeof(freq)))
 		return -EFAULT;
@@ -707,6 +737,7 @@ static struct ip6_flowlabel *ip6fl_get_first(struct seq_file *seq)
 	struct ip6fl_iter_state *state = ip6fl_seq_private(seq);
 	struct net *net = seq_file_net(seq);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (state->bucket = 0; state->bucket <= FL_HASH_MASK; ++state->bucket) {
 		for_each_fl_rcu(state->bucket, fl) {
 			if (net_eq(fl->fl_net, net))
@@ -723,6 +754,7 @@ static struct ip6_flowlabel *ip6fl_get_next(struct seq_file *seq, struct ip6_flo
 	struct ip6fl_iter_state *state = ip6fl_seq_private(seq);
 	struct net *net = seq_file_net(seq);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_fl_continue_rcu(fl) {
 		if (net_eq(fl->fl_net, net))
 			goto out;
@@ -744,6 +776,7 @@ static struct ip6_flowlabel *ip6fl_get_next(struct seq_file *seq, struct ip6_flo
 
 static struct ip6_flowlabel *ip6fl_get_idx(struct seq_file *seq, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip6_flowlabel *fl = ip6fl_get_first(seq);
 	if (fl)
 		while (pos && (fl = ip6fl_get_next(seq, fl)) != NULL)
@@ -754,6 +787,7 @@ static struct ip6_flowlabel *ip6fl_get_idx(struct seq_file *seq, loff_t pos)
 static void *ip6fl_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock_bh();
 	return *pos ? ip6fl_get_idx(seq, *pos - 1) : SEQ_START_TOKEN;
 }
@@ -763,7 +797,9 @@ static void *ip6fl_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 	struct ip6_flowlabel *fl;
 
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl = ip6fl_get_first(seq);
+}
 	else
 		fl = ip6fl_get_next(seq, v);
 	++*pos;
@@ -773,6 +809,7 @@ static void *ip6fl_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 static void ip6fl_seq_stop(struct seq_file *seq, void *v)
 	__releases(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock_bh();
 }
 
@@ -780,6 +817,7 @@ static int ip6fl_seq_show(struct seq_file *seq, void *v)
 {
 	struct ip6fl_iter_state *state = ip6fl_seq_private(seq);
 	if (v == SEQ_START_TOKEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_puts(seq, "Label S Owner  Users  Linger Expires  Dst                              Opt\n");
 	} else {
 		struct ip6_flowlabel *fl = v;
@@ -818,6 +856,7 @@ static int ip6fl_seq_open(struct inode *inode, struct file *file)
 			   sizeof(struct ip6fl_iter_state));
 
 	if (!err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq = file->private_data;
 		state = ip6fl_seq_private(seq);
 		rcu_read_lock();
@@ -883,6 +922,7 @@ int ip6_flowlabel_init(void)
 
 void ip6_flowlabel_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	del_timer(&ip6_fl_gc_timer);
 	unregister_pernet_subsys(&ip6_flowlabel_net_ops);
 }
diff --git a/net/ipv6/ip6_icmp.c b/net/ipv6/ip6_icmp.c
index 0204549..a8eba3a 100644
--- a/net/ipv6/ip6_icmp.c
+++ b/net/ipv6/ip6_icmp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/export.h>
 #include <linux/icmpv6.h>
@@ -22,6 +24,7 @@ int inet6_unregister_icmp_sender(ip6_icmp_send_t *fn)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = (cmpxchg((ip6_icmp_send_t **)&ip6_icmp_send, fn, NULL) == fn) ?
 	      0 : -EINVAL;
 
diff --git a/net/ipv6/ip6_input.c b/net/ipv6/ip6_input.c
index 9ee208a..64de346 100644
--- a/net/ipv6/ip6_input.c
+++ b/net/ipv6/ip6_input.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPv6 input
  *	Linux INET6 implementation
@@ -56,17 +58,25 @@ int ip6_rcv_finish(struct net *net, struct sock *sk, struct sk_buff *skb)
 	 */
 	skb = l3mdev_ip6_rcv(skb);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NET_RX_SUCCESS;
+}
 
 	if (net->ipv4.sysctl_ip_early_demux && !skb_dst(skb) && skb->sk == NULL) {
 		const struct inet6_protocol *ipprot;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ipprot = rcu_dereference(inet6_protos[ipv6_hdr(skb)->nexthdr]);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ipprot && (edemux = READ_ONCE(ipprot->early_demux)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			edemux(skb);
+}
 	}
 	if (!skb_valid_dst(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip6_route_input(skb);
+}
 
 	return dst_input(skb);
 }
@@ -79,10 +89,12 @@ int ipv6_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt
 	struct net *net = dev_net(skb->dev);
 
 	if (skb->pkt_type == PACKET_OTHERHOST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
 		return NET_RX_DROP;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 
 	idev = __in6_dev_get(skb->dev);
@@ -91,6 +103,7 @@ int ipv6_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt
 
 	if ((skb = skb_share_check(skb, GFP_ATOMIC)) == NULL ||
 	    !idev || unlikely(idev->cnf.disable_ipv6)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__IP6_INC_STATS(net, idev, IPSTATS_MIB_INDISCARDS);
 		goto drop;
 	}
@@ -113,6 +126,7 @@ int ipv6_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt
 	if (unlikely(!pskb_may_pull(skb, sizeof(*hdr))))
 		goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hdr = ipv6_hdr(skb);
 
 	if (hdr->version != 6)
diff --git a/net/ipv6/ip6_offload.c b/net/ipv6/ip6_offload.c
index 4a87f94..15cb138 100644
--- a/net/ipv6/ip6_offload.c
+++ b/net/ipv6/ip6_offload.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPV6 GSO/GRO offload support
  *	Linux INET6 implementation
@@ -29,6 +31,7 @@ static int ipv6_gso_pull_exthdrs(struct sk_buff *skb, int proto)
 		int len;
 
 		if (proto != NEXTHDR_HOP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ops = rcu_dereference(inet6_offloads[proto]);
 
 			if (unlikely(!ops))
@@ -58,6 +61,7 @@ static int ipv6_gso_pull_exthdrs(struct sk_buff *skb, int proto)
 static struct sk_buff *ipv6_gso_segment(struct sk_buff *skb,
 	netdev_features_t features)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sk_buff *segs = ERR_PTR(-EINVAL);
 	struct ipv6hdr *ipv6h;
 	const struct net_offload *ops;
@@ -146,6 +150,7 @@ static int ipv6_exthdrs_len(struct ipv6hdr *iph,
 
 	proto = iph->nexthdr;
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (proto != NEXTHDR_HOP) {
 			*opps = rcu_dereference(inet6_offloads[proto]);
 			if (unlikely(!(*opps)))
@@ -178,6 +183,7 @@ static struct sk_buff **ipv6_gro_receive(struct sk_buff **head,
 	hlen = off + sizeof(*iph);
 	iph = skb_gro_header_fast(skb, off);
 	if (skb_gro_header_hard(skb, hlen)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iph = skb_gro_header_slow(skb, hlen, off);
 		if (unlikely(!iph))
 			goto out;
@@ -375,9 +381,13 @@ static int __init ipv6_offload_init(void)
 {
 
 	if (tcpv6_offload_init() < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot add TCP protocol offload\n", __func__);
+}
 	if (ipv6_exthdrs_offload_init() < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot add EXTHDRS protocol offload\n", __func__);
+}
 
 	dev_add_offload(&ipv6_packet_offload);
 
diff --git a/net/ipv6/ip6_output.c b/net/ipv6/ip6_output.c
index 3763dc0..1af3e81 100644
--- a/net/ipv6/ip6_output.c
+++ b/net/ipv6/ip6_output.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPv6 output functions
  *	Linux INET6 implementation
@@ -61,6 +63,7 @@
 
 static int ip6_finish_output2(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dst_entry *dst = skb_dst(skb);
 	struct net_device *dev = dst->dev;
 	struct neighbour *neigh;
@@ -68,6 +71,7 @@ static int ip6_finish_output2(struct net *net, struct sock *sk, struct sk_buff *
 	int ret;
 
 	if (ipv6_addr_is_multicast(&ipv6_hdr(skb)->daddr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct inet6_dev *idev = ip6_dst_idev(skb_dst(skb));
 
 		if (!(dev->flags & IFF_LOOPBACK) && sk_mc_loop(sk) &&
@@ -75,17 +79,22 @@ static int ip6_finish_output2(struct net *net, struct sock *sk, struct sk_buff *
 		     !(IP6CB(skb)->flags & IP6SKB_FORWARDED)) ||
 		     ipv6_chk_mcast_addr(dev, &ipv6_hdr(skb)->daddr,
 					 &ipv6_hdr(skb)->saddr))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			struct sk_buff *newskb = skb_clone(skb, GFP_ATOMIC);
 
 			/* Do not check for IFF_ALLMULTI; multicast routing
 			   is not supported in any case.
 			 */
 			if (newskb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				NF_HOOK(NFPROTO_IPV6, NF_INET_POST_ROUTING,
 					net, sk, newskb, NULL, newskb->dev,
 					dev_loopback_xmit);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ipv6_hdr(skb)->hop_limit == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				IP6_INC_STATS(net, idev,
 					      IPSTATS_MIB_OUTDISCARDS);
 				kfree_skb(skb);
@@ -98,18 +107,24 @@ static int ip6_finish_output2(struct net *net, struct sock *sk, struct sk_buff *
 		if (IPV6_ADDR_MC_SCOPE(&ipv6_hdr(skb)->daddr) <=
 		    IPV6_ADDR_SCOPE_NODELOCAL &&
 		    !(dev->flags & IFF_LOOPBACK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree_skb(skb);
 			return 0;
 		}
 	}
 
 	if (lwtunnel_xmit_redirect(dst->lwtstate)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int res = lwtunnel_xmit(skb);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (res < 0 || res == LWTUNNEL_XMIT_DONE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return res;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock_bh();
 	nexthop = rt6_nexthop((struct rt6_info *)dst, &ipv6_hdr(skb)->daddr);
 	neigh = __ipv6_neigh_lookup_noref(dst->dev, nexthop);
@@ -121,8 +136,10 @@ static int ip6_finish_output2(struct net *net, struct sock *sk, struct sk_buff *
 		rcu_read_unlock_bh();
 		return ret;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock_bh();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	IP6_INC_STATS(net, ip6_dst_idev(dst), IPSTATS_MIB_OUTNOROUTES);
 	kfree_skb(skb);
 	return -EINVAL;
@@ -134,6 +151,7 @@ static int ip6_finish_output(struct net *net, struct sock *sk, struct sk_buff *s
 
 	ret = BPF_CGROUP_RUN_PROG_INET_EGRESS(sk, skb);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
 		return ret;
 	}
@@ -155,6 +173,7 @@ int ip6_output(struct net *net, struct sock *sk, struct sk_buff *skb)
 	skb->dev = dev;
 
 	if (unlikely(idev->cnf.disable_ipv6)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		IP6_INC_STATS(net, idev, IPSTATS_MIB_OUTDISCARDS);
 		kfree_skb(skb);
 		return 0;
@@ -183,6 +202,7 @@ bool ip6_autoflowlabel(struct net *net, const struct ipv6_pinfo *np)
 int ip6_xmit(const struct sock *sk, struct sk_buff *skb, struct flowi6 *fl6,
 	     __u32 mark, struct ipv6_txoptions *opt, int tclass)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(sk);
 	const struct ipv6_pinfo *np = inet6_sk(sk);
 	struct in6_addr *first_hop = &fl6->daddr;
@@ -204,13 +224,16 @@ int ip6_xmit(const struct sock *sk, struct sk_buff *skb, struct flowi6 *fl6,
 		head_room += sizeof(struct ipv6hdr) + LL_RESERVED_SPACE(dst->dev);
 
 		if (skb_headroom(skb) < head_room) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			struct sk_buff *skb2 = skb_realloc_headroom(skb, head_room);
 			if (!skb2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),
 					      IPSTATS_MIB_OUTDISCARDS);
 				kfree_skb(skb);
 				return -ENOBUFS;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			consume_skb(skb);
 			skb = skb2;
 			/* skb_set_owner_w() changes sk->sk_wmem_alloc atomically,
@@ -218,11 +241,17 @@ int ip6_xmit(const struct sock *sk, struct sk_buff *skb, struct flowi6 *fl6,
 			 */
 			skb_set_owner_w(skb, (struct sock *)sk);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (opt->opt_flen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ipv6_push_frag_opts(skb, opt, &proto);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (opt->opt_nflen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ipv6_push_nfrag_opts(skb, opt, &proto, &first_hop,
 					     &fl6->saddr);
+}
 	}
 
 	skb_push(skb, sizeof(struct ipv6hdr));
@@ -261,7 +290,9 @@ int ip6_xmit(const struct sock *sk, struct sk_buff *skb, struct flowi6 *fl6,
 		 */
 		skb = l3mdev_ip6_out((struct sock *)sk, skb);
 		if (unlikely(!skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
 		/* hooks should never assume socket lock is held.
 		 * we promote our socket to non const
@@ -271,12 +302,14 @@ int ip6_xmit(const struct sock *sk, struct sk_buff *skb, struct flowi6 *fl6,
 			       dst_output);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb->dev = dst->dev;
 	/* ipv6_local_error() does not require socket lock,
 	 * we promote our socket to non const
 	 */
 	ipv6_local_error((struct sock *)sk, EMSGSIZE, fl6, mtu);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)), IPSTATS_MIB_FRAGFAILS);
 	kfree_skb(skb);
 	return -EMSGSIZE;
@@ -289,6 +322,7 @@ static int ip6_call_ra_chain(struct sk_buff *skb, int sel)
 	struct sock *last = NULL;
 
 	read_lock(&ip6_ra_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (ra = ip6_ra_chain; ra; ra = ra->next) {
 		struct sock *sk = ra->sk;
 		if (sk && ra->sel == sel &&
@@ -314,6 +348,7 @@ static int ip6_call_ra_chain(struct sk_buff *skb, int sel)
 
 static int ip6_forward_proxy_check(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6hdr *hdr = ipv6_hdr(skb);
 	u8 nexthdr = hdr->nexthdr;
 	__be16 frag_off;
@@ -367,6 +402,7 @@ static int ip6_forward_proxy_check(struct sk_buff *skb)
 static inline int ip6_forward_finish(struct net *net, struct sock *sk,
 				     struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dst_output(net, sk, skb);
 }
 
@@ -376,6 +412,7 @@ static unsigned int ip6_dst_mtu_forward(const struct dst_entry *dst)
 	struct inet6_dev *idev;
 
 	if (dst_metric_locked(dst, RTAX_MTU)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mtu = dst_metric_raw(dst, RTAX_MTU);
 		if (mtu)
 			return mtu;
@@ -393,6 +430,7 @@ static unsigned int ip6_dst_mtu_forward(const struct dst_entry *dst)
 
 static bool ip6_pkt_too_big(const struct sk_buff *skb, unsigned int mtu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (skb->len <= mtu)
 		return false;
 
@@ -411,6 +449,7 @@ static bool ip6_pkt_too_big(const struct sk_buff *skb, unsigned int mtu)
 
 int ip6_forward(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dst_entry *dst = skb_dst(skb);
 	struct ipv6hdr *hdr = ipv6_hdr(skb);
 	struct inet6_skb_parm *opt = IP6CB(skb);
@@ -575,6 +614,7 @@ int ip6_forward(struct sk_buff *skb)
 
 static void ip6_copy_metadata(struct sk_buff *to, struct sk_buff *from)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	to->pkt_type = from->pkt_type;
 	to->priority = from->priority;
 	to->protocol = from->protocol;
@@ -595,6 +635,7 @@ int ip6_fragment(struct net *net, struct sock *sk, struct sk_buff *skb,
 {
 	struct sk_buff *frag;
 	struct rt6_info *rt = (struct rt6_info *)skb_dst(skb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np = skb->sk && !dev_recursion_level() ?
 				inet6_sk(skb->sk) : NULL;
 	struct ipv6hdr *tmp_hdr;
@@ -898,10 +939,12 @@ static struct dst_entry *ip6_sk_dst_check(struct sock *sk,
 		goto out;
 
 	if (dst->ops->family != AF_INET6) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_release(dst);
 		return NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rt = (struct rt6_info *)dst;
 	/* Yes, checking route validity in not connected
 	 * case is not very simple. Take into account,
@@ -926,6 +969,7 @@ static struct dst_entry *ip6_sk_dst_check(struct sock *sk,
 #endif
 	   (!(fl6->flowi6_flags & FLOWI_FLAG_SKIP_NH_OIF) &&
 	      (fl6->flowi6_oif && fl6->flowi6_oif != dst->dev->ifindex))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_release(dst);
 		dst = NULL;
 	}
@@ -971,12 +1015,15 @@ static int ip6_dst_lookup_tail(struct net *net, const struct sock *sk,
 		 * over.
 		 */
 		if (!had_dst && (*dst)->error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dst_release(*dst);
 			*dst = NULL;
 		}
 
 		if (fl6->flowi6_oif)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flags |= RT6_LOOKUP_F_IFACE;
+}
 	}
 
 	if (!*dst)
@@ -1031,10 +1078,12 @@ static int ip6_dst_lookup_tail(struct net *net, const struct sock *sk,
 #endif
 	if (ipv6_addr_v4mapped(&fl6->saddr) &&
 	    !(ipv6_addr_v4mapped(&fl6->daddr) || ipv6_addr_any(&fl6->daddr))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EAFNOSUPPORT;
 		goto out_err_release;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_err_release:
@@ -1042,7 +1091,10 @@ static int ip6_dst_lookup_tail(struct net *net, const struct sock *sk,
 	*dst = NULL;
 
 	if (err == -ENETUNREACH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		IP6_INC_STATS(net, NULL, IPSTATS_MIB_OUTNOROUTES);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -1083,9 +1135,13 @@ struct dst_entry *ip6_dst_lookup_flow(const struct sock *sk, struct flowi6 *fl6,
 
 	err = ip6_dst_lookup_tail(sock_net(sk), sk, &dst, fl6);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(err);
+}
 	if (final_dst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl6->daddr = *final_dst;
+}
 
 	return xfrm_lookup_route(sock_net(sk), dst, flowi6_to_flowi(fl6), sk, 0);
 }
@@ -1112,7 +1168,9 @@ struct dst_entry *ip6_sk_dst_lookup_flow(struct sock *sk, struct flowi6 *fl6,
 
 	dst = ip6_sk_dst_check(sk, dst, fl6);
 	if (!dst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst = ip6_dst_lookup_flow(sk, fl6, final_dst);
+}
 
 	return dst;
 }
@@ -1121,12 +1179,14 @@ EXPORT_SYMBOL_GPL(ip6_sk_dst_lookup_flow);
 static inline struct ipv6_opt_hdr *ip6_opt_dup(struct ipv6_opt_hdr *src,
 					       gfp_t gfp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return src ? kmemdup(src, (src->hdrlen + 1) * 8, gfp) : NULL;
 }
 
 static inline struct ipv6_rt_hdr *ip6_rthdr_dup(struct ipv6_rt_hdr *src,
 						gfp_t gfp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return src ? kmemdup(src, (src->hdrlen + 1) * 8, gfp) : NULL;
 }
 
@@ -1166,36 +1226,58 @@ static int ip6_setup_cork(struct sock *sk, struct inet_cork_full *cork,
 	 * setup for corking
 	 */
 	if (opt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (WARN_ON(v6_cork->opt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		v6_cork->opt = kzalloc(sizeof(*opt), sk->sk_allocation);
 		if (unlikely(!v6_cork->opt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOBUFS;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		v6_cork->opt->tot_len = sizeof(*opt);
 		v6_cork->opt->opt_flen = opt->opt_flen;
 		v6_cork->opt->opt_nflen = opt->opt_nflen;
 
 		v6_cork->opt->dst0opt = ip6_opt_dup(opt->dst0opt,
 						    sk->sk_allocation);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (opt->dst0opt && !v6_cork->opt->dst0opt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOBUFS;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		v6_cork->opt->dst1opt = ip6_opt_dup(opt->dst1opt,
 						    sk->sk_allocation);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (opt->dst1opt && !v6_cork->opt->dst1opt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOBUFS;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		v6_cork->opt->hopopt = ip6_opt_dup(opt->hopopt,
 						   sk->sk_allocation);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (opt->hopopt && !v6_cork->opt->hopopt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOBUFS;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		v6_cork->opt->srcrt = ip6_rthdr_dup(opt->srcrt,
 						    sk->sk_allocation);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (opt->srcrt && !v6_cork->opt->srcrt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOBUFS;
+}
 
 		/* need source address above miyazawa*/
 	}
@@ -1205,20 +1287,28 @@ static int ip6_setup_cork(struct sock *sk, struct inet_cork_full *cork,
 	v6_cork->hop_limit = ipc6->hlimit;
 	v6_cork->tclass = ipc6->tclass;
 	if (rt->dst.flags & DST_XFRM_TUNNEL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mtu = np->pmtudisc >= IPV6_PMTUDISC_PROBE ?
 		      READ_ONCE(rt->dst.dev->mtu) : dst_mtu(&rt->dst);
+}
 	else
 		mtu = np->pmtudisc >= IPV6_PMTUDISC_PROBE ?
 		      READ_ONCE(rt->dst.dev->mtu) : dst_mtu(rt->dst.path);
 	if (np->frag_size < mtu) {
 		if (np->frag_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mtu = np->frag_size;
+}
 	}
 	if (mtu < IPV6_MIN_MTU)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	cork->base.fragsize = mtu;
 	if (dst_allfrag(rt->dst.path))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cork->base.flags |= IPCORK_ALLFRAG;
+}
 	cork->base.length = 0;
 
 	return 0;
@@ -1276,13 +1366,16 @@ static int __ip6_append_data(struct sock *sk,
 	if (cork->length + length > mtu - headersize && ipc6->dontfrag &&
 	    (sk->sk_protocol == IPPROTO_UDP ||
 	     sk->sk_protocol == IPPROTO_RAW)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ipv6_local_rxpmtu(sk, fl6, mtu - headersize +
 				sizeof(struct ipv6hdr));
 		goto emsgsize;
 	}
 
 	if (ip6_sk_ignore_df(sk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		maxnonfragsize = sizeof(struct ipv6hdr) + IPV6_MAXPLEN;
+}
 	else
 		maxnonfragsize = mtu;
 
@@ -1335,8 +1428,11 @@ static int __ip6_append_data(struct sock *sk,
 		/* Check if the remaining data fits into current packet. */
 		copy = (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len;
 		if (copy < length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copy = maxfraglen - skb->len;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy <= 0) {
 			char *data;
 			unsigned int datalen;
@@ -1346,7 +1442,9 @@ static int __ip6_append_data(struct sock *sk,
 alloc_new_skb:
 			/* There's no room in the current skb */
 			if (skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fraggap = skb->len - maxfraglen;
+}
 			else
 				fraggap = 0;
 			/* update mtu and maxfraglen if necessary */
@@ -1355,6 +1453,7 @@ static int __ip6_append_data(struct sock *sk,
 						    fragheaderlen, skb, rt,
 						    orig_mtu);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb_prev = skb;
 
 			/*
@@ -1393,6 +1492,7 @@ static int __ip6_append_data(struct sock *sk,
 
 			copy = datalen - transhdrlen - fraggap;
 			if (copy < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EINVAL;
 				goto error;
 			}
@@ -1401,14 +1501,18 @@ static int __ip6_append_data(struct sock *sk,
 						alloclen + hh_len,
 						(flags & MSG_DONTWAIT), &err);
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				skb = NULL;
 				if (refcount_read(&sk->sk_wmem_alloc) <=
 				    2 * sk->sk_sndbuf)
 					skb = sock_wmalloc(sk,
 							   alloclen + hh_len, 1,
 							   sk->sk_allocation);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (unlikely(!skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					err = -ENOBUFS;
+}
 			}
 			if (!skb)
 				goto error;
@@ -1437,6 +1541,7 @@ static int __ip6_append_data(struct sock *sk,
 			skb->transport_header = (skb->network_header +
 						 fragheaderlen);
 			if (fraggap) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				skb->csum = skb_copy_and_csum_bits(
 					skb_prev, maxfraglen,
 					data + transhdrlen, fraggap, 0);
@@ -1448,6 +1553,7 @@ static int __ip6_append_data(struct sock *sk,
 			if (copy > 0 &&
 			    getfrag(from, data + transhdrlen, offset,
 				    copy, fraggap, skb) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EFAULT;
 				kfree_skb(skb);
 				goto error;
@@ -1460,7 +1566,9 @@ static int __ip6_append_data(struct sock *sk,
 			dst_exthdrlen = 0;
 
 			if ((flags & MSG_CONFIRM) && !skb_prev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				skb_set_dst_pending_confirm(skb, 1);
+}
 
 			/*
 			 * Put the packet on the pending queue
@@ -1469,43 +1577,54 @@ static int __ip6_append_data(struct sock *sk,
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy > length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copy = length;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(rt->dst.dev->features&NETIF_F_SG)) {
 			unsigned int off;
 
 			off = skb->len;
 			if (getfrag(from, skb_put(skb, copy),
 						offset, copy, off, skb) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__skb_trim(skb, off);
 				err = -EFAULT;
 				goto error;
 			}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			int i = skb_shinfo(skb)->nr_frags;
 
 			err = -ENOMEM;
 			if (!sk_page_frag_refill(sk, pfrag))
 				goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!skb_can_coalesce(skb, i, pfrag->page,
 					      pfrag->offset)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EMSGSIZE;
 				if (i == MAX_SKB_FRAGS)
 					goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__skb_fill_page_desc(skb, i, pfrag->page,
 						     pfrag->offset, 0);
 				skb_shinfo(skb)->nr_frags = ++i;
 				get_page(pfrag->page);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copy = min_t(int, copy, pfrag->size - pfrag->offset);
 			if (getfrag(from,
 				    page_address(pfrag->page) + pfrag->offset,
 				    offset, copy, skb->len, skb) < 0)
 				goto error_efault;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pfrag->offset += copy;
 			skb_frag_size_add(&skb_shinfo(skb)->frags[i - 1], copy);
 			skb->len += copy;
@@ -1513,16 +1632,19 @@ static int __ip6_append_data(struct sock *sk,
 			skb->truesize += copy;
 			refcount_add(copy, &sk->sk_wmem_alloc);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		offset += copy;
 		length -= copy;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 error_efault:
 	err = -EFAULT;
 error:
 	cork->length -= length;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS);
 	return err;
 }
@@ -1535,13 +1657,16 @@ int ip6_append_data(struct sock *sk,
 		    struct rt6_info *rt, unsigned int flags,
 		    const struct sockcm_cookie *sockc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	int exthdrlen;
 	int err;
 
 	if (flags&MSG_PROBE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (skb_queue_empty(&sk->sk_write_queue)) {
 		/*
 		 * setup for corking
@@ -1549,12 +1674,15 @@ int ip6_append_data(struct sock *sk,
 		err = ip6_setup_cork(sk, &inet->cork, &np->cork,
 				     ipc6, rt, fl6);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 
 		exthdrlen = (ipc6->opt ? ipc6->opt->opt_flen : 0);
 		length += exthdrlen;
 		transhdrlen += exthdrlen;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl6 = &inet->cork.fl.u.ip6;
 		transhdrlen = 0;
 	}
@@ -1569,6 +1697,7 @@ static void ip6_cork_release(struct inet_cork_full *cork,
 			     struct inet6_cork *v6_cork)
 {
 	if (v6_cork->opt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(v6_cork->opt->dst0opt);
 		kfree(v6_cork->opt->dst1opt);
 		kfree(v6_cork->opt->hopopt);
@@ -1608,8 +1737,11 @@ struct sk_buff *__ip6_make_skb(struct sock *sk,
 
 	/* move skb->data to ip header from ext header */
 	if (skb->data < skb_network_header(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__skb_pull(skb, skb_network_offset(skb));
+}
 	while ((tmp_skb = __skb_dequeue(queue)) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__skb_pull(tmp_skb, skb_network_header_len(skb));
 		*tail_skb = tmp_skb;
 		tail_skb = &(tmp_skb->next);
@@ -1626,9 +1758,13 @@ struct sk_buff *__ip6_make_skb(struct sock *sk,
 	*final_dst = fl6->daddr;
 	__skb_pull(skb, skb_network_header_len(skb));
 	if (opt && opt->opt_flen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ipv6_push_frag_opts(skb, opt, &proto);
+}
 	if (opt && opt->opt_nflen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ipv6_push_nfrag_opts(skb, opt, &proto, &final_dst, &fl6->saddr);
+}
 
 	skb_push(skb, sizeof(struct ipv6hdr));
 	skb_reset_network_header(skb);
@@ -1648,6 +1784,7 @@ struct sk_buff *__ip6_make_skb(struct sock *sk,
 	skb_dst_set(skb, dst_clone(&rt->dst));
 	IP6_UPD_PO_STATS(net, rt->rt6i_idev, IPSTATS_MIB_OUT, skb->len);
 	if (proto == IPPROTO_ICMPV6) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct inet6_dev *idev = ip6_dst_idev(skb_dst(skb));
 
 		ICMP6MSGOUT_INC_STATS(net, idev, icmp6_hdr(skb)->icmp6_type);
@@ -1667,11 +1804,17 @@ int ip6_send_skb(struct sk_buff *skb)
 
 	err = ip6_local_out(net, skb->sk, skb);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = net_xmit_errno(err);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			IP6_INC_STATS(net, rt->rt6i_idev,
 				      IPSTATS_MIB_OUTDISCARDS);
+}
 	}
 
 	return err;
@@ -1683,7 +1826,9 @@ int ip6_push_pending_frames(struct sock *sk)
 
 	skb = ip6_finish_skb(sk);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return ip6_send_skb(skb);
 }
@@ -1697,9 +1842,12 @@ static void __ip6_flush_pending_frames(struct sock *sk,
 	struct sk_buff *skb;
 
 	while ((skb = __skb_dequeue_tail(queue)) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (skb_dst(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			IP6_INC_STATS(sock_net(sk), ip6_dst_idev(skb_dst(skb)),
 				      IPSTATS_MIB_OUTDISCARDS);
+}
 		kfree_skb(skb);
 	}
 
@@ -1728,8 +1876,11 @@ struct sk_buff *ip6_make_skb(struct sock *sk,
 	int err;
 
 	if (flags & MSG_PROBE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__skb_queue_head_init(&queue);
 
 	cork.base.flags = 0;
@@ -1739,6 +1890,7 @@ struct sk_buff *ip6_make_skb(struct sock *sk,
 	v6_cork.opt = NULL;
 	err = ip6_setup_cork(sk, &cork, &v6_cork, ipc6, rt, fl6);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip6_cork_release(&cork, &v6_cork);
 		return ERR_PTR(err);
 	}
@@ -1750,6 +1902,7 @@ struct sk_buff *ip6_make_skb(struct sock *sk,
 				length + exthdrlen, transhdrlen + exthdrlen,
 				flags, ipc6, sockc);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__ip6_flush_pending_frames(sk, &queue, &cork, &v6_cork);
 		return ERR_PTR(err);
 	}
diff --git a/net/ipv6/ip6_tunnel.c b/net/ipv6/ip6_tunnel.c
index 1161fd5..fde29f7 100644
--- a/net/ipv6/ip6_tunnel.c
+++ b/net/ipv6/ip6_tunnel.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPv6 tunneling device
  *	Linux INET6 implementation
diff --git a/net/ipv6/ipv6_sockglue.c b/net/ipv6/ipv6_sockglue.c
index 1276d5b..b2a15d3 100644
--- a/net/ipv6/ipv6_sockglue.c
+++ b/net/ipv6/ipv6_sockglue.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPv6 BSD socket options interface
  *	Linux INET6 implementation
@@ -102,6 +104,7 @@ int ip6_ra_control(struct sock *sk, int sel)
 struct ipv6_txoptions *ipv6_update_options(struct sock *sk,
 					   struct ipv6_txoptions *opt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (inet_sk(sk)->is_icsk) {
 		if (opt &&
 		    !((1 << sk->sk_state) & (TCPF_LISTEN | TCPF_CLOSE)) &&
@@ -120,6 +123,7 @@ struct ipv6_txoptions *ipv6_update_options(struct sock *sk,
 
 static bool setsockopt_needs_rtnl(int optname)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (optname) {
 	case IPV6_ADDRFORM:
 	case IPV6_ADD_MEMBERSHIP:
@@ -148,22 +152,32 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	bool needs_rtnl = setsockopt_needs_rtnl(optname);
 
 	if (!optval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		val = 0;
+}
 	else {
 		if (optlen >= sizeof(int)) {
 			if (get_user(val, (int __user *) optval))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EFAULT;
+}
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = 0;
+}
 	}
 
 	valbool = (val != 0);
 
 	if (ip6_mroute_opt(optname))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ip6_mroute_setsockopt(sk, optname, optval, optlen);
+}
 
 	if (needs_rtnl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtnl_lock();
+}
 	lock_sock(sk);
 
 	switch (optname) {
@@ -171,6 +185,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_ADDRFORM:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (val == PF_INET) {
 			struct ipv6_txoptions *opt;
 			struct sk_buff *pktopt;
@@ -178,27 +193,35 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 			if (sk->sk_type == SOCK_RAW)
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk->sk_protocol == IPPROTO_UDP ||
 			    sk->sk_protocol == IPPROTO_UDPLITE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				struct udp_sock *up = udp_sk(sk);
 				if (up->pending == AF_INET6) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					retv = -EBUSY;
 					break;
 				}
 			} else if (sk->sk_protocol != IPPROTO_TCP)
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk->sk_state != TCP_ESTABLISHED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retv = -ENOTCONN;
 				break;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ipv6_only_sock(sk) ||
 			    !ipv6_addr_v4mapped(&sk->sk_v6_daddr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retv = -EADDRNOTAVAIL;
 				break;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fl6_free_socklist(sk);
 			__ipv6_sock_mc_close(sk);
 
@@ -209,7 +232,9 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 			 */
 			sk_refcnt_debug_dec(sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sk->sk_protocol == IPPROTO_TCP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				struct inet_connection_sock *icsk = inet_csk(sk);
 				local_bh_disable();
 				sock_prot_inuse_add(net, sk->sk_prot, -1);
@@ -224,7 +249,10 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 				struct proto *prot = &udp_prot;
 
 				if (sk->sk_protocol == IPPROTO_UDPLITE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					prot = &udplite_prot;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				local_bh_disable();
 				sock_prot_inuse_add(net, sk->sk_prot, -1);
 				sock_prot_inuse_add(net, prot, 1);
@@ -233,12 +261,15 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 				sk->sk_socket->ops = &inet_dgram_ops;
 				sk->sk_family = PF_INET;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opt = xchg((__force struct ipv6_txoptions **)&np->opt,
 				   NULL);
 			if (opt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				atomic_sub(opt->tot_len, &sk->sk_omem_alloc);
 				txopt_put(opt);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pktopt = xchg(&np->pktoptions, NULL);
 			kfree_skb(pktopt);
 
@@ -247,6 +278,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 			 * in the new family. -acme
 			 */
 			sk_refcnt_debug_inc(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			module_put(THIS_MODULE);
 			retv = 0;
 			break;
@@ -271,6 +303,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_2292PKTINFO:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->rxopt.bits.rxoinfo = valbool;
 		retv = 0;
 		break;
@@ -285,6 +318,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_2292HOPLIMIT:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->rxopt.bits.rxohlim = valbool;
 		retv = 0;
 		break;
@@ -292,6 +326,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_RECVRTHDR:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->rxopt.bits.srcrt = valbool;
 		retv = 0;
 		break;
@@ -299,6 +334,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_2292RTHDR:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->rxopt.bits.osrcrt = valbool;
 		retv = 0;
 		break;
@@ -306,6 +342,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_RECVHOPOPTS:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->rxopt.bits.hopopts = valbool;
 		retv = 0;
 		break;
@@ -313,6 +350,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_2292HOPOPTS:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->rxopt.bits.ohopopts = valbool;
 		retv = 0;
 		break;
@@ -320,6 +358,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_RECVDSTOPTS:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->rxopt.bits.dstopts = valbool;
 		retv = 0;
 		break;
@@ -327,6 +366,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_2292DSTOPTS:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->rxopt.bits.odstopts = valbool;
 		retv = 0;
 		break;
@@ -334,11 +374,15 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_TCLASS:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (val < -1 || val > 0xff)
 			goto e_inval;
 		/* RFC 3542, 6.5: default traffic class of 0x0 */
 		if (val == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->tclass = val;
 		retv = 0;
 		break;
@@ -346,6 +390,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_RECVTCLASS:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->rxopt.bits.rxtclass = valbool;
 		retv = 0;
 		break;
@@ -353,6 +398,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_FLOWINFO:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->rxopt.bits.rxflow = valbool;
 		retv = 0;
 		break;
@@ -360,6 +406,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_RECVPATHMTU:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->rxopt.bits.rxpmtu = valbool;
 		retv = 0;
 		break;
@@ -367,9 +414,11 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_TRANSPARENT:
 		if (valbool && !ns_capable(net->user_ns, CAP_NET_ADMIN) &&
 		    !ns_capable(net->user_ns, CAP_NET_RAW)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retv = -EPERM;
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (optlen < sizeof(int))
 			goto e_inval;
 		/* we don't have a separate transparent bit for IPV6 we use the one in the IPv4 socket */
@@ -380,6 +429,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 	case IPV6_RECVORIGDSTADDR:
 		if (optlen < sizeof(int))
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		np->rxopt.bits.rxorigdstaddr = valbool;
 		retv = 0;
 		break;
@@ -395,30 +445,38 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 		 * length, per RFC3542.
 		 */
 		if (optlen == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			optval = NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (!optval)
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (optlen < sizeof(struct ipv6_opt_hdr) ||
 			 optlen & 0x7 || optlen > 8 * 255)
 			goto e_inval;
 
 		/* hop-by-hop / destination options are privileged option */
 		retv = -EPERM;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (optname != IPV6_RTHDR && !ns_capable(net->user_ns, CAP_NET_RAW))
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opt = rcu_dereference_protected(np->opt,
 						lockdep_sock_is_held(sk));
 		opt = ipv6_renew_options(sk, opt, optname,
 					 (struct ipv6_opt_hdr __user *)optval,
 					 optlen);
 		if (IS_ERR(opt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retv = PTR_ERR(opt);
 			break;
 		}
 
 		/* routing header option needs extra check */
 		retv = -EINVAL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (optname == IPV6_RTHDR && opt && opt->srcrt) {
 			struct ipv6_rt_hdr *rthdr = opt->srcrt;
 			switch (rthdr->type) {
@@ -444,10 +502,12 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retv = 0;
 		opt = ipv6_update_options(sk, opt);
 sticky_done:
 		if (opt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atomic_sub(opt->tot_len, &sk->sk_omem_alloc);
 			txopt_put(opt);
 		}
@@ -460,6 +520,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 
 		if (optlen == 0)
 			goto e_inval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (optlen < sizeof(struct in6_pktinfo) || !optval)
 			goto e_inval;
 
diff --git a/net/ipv6/mcast.c b/net/ipv6/mcast.c
index 9a38a2c..1b208ea 100644
--- a/net/ipv6/mcast.c
+++ b/net/ipv6/mcast.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Multicast support for IPv6
  *	Linux INET6 implementation
@@ -125,7 +127,9 @@ static int unsolicited_report_interval(struct inet6_dev *idev)
 	int iv;
 
 	if (mld_in_v1_mode(idev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iv = idev->cnf.mldv1_unsolicited_report_interval;
+}
 	else
 		iv = idev->cnf.mldv2_unsolicited_report_interval;
 
@@ -140,6 +144,7 @@ int ipv6_sock_mc_join(struct sock *sk, int ifindex, const struct in6_addr *addr)
 	struct net *net = sock_net(sk);
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	if (!ipv6_addr_is_multicast(addr))
@@ -206,6 +211,7 @@ EXPORT_SYMBOL(ipv6_sock_mc_join);
  */
 int ipv6_sock_mc_drop(struct sock *sk, int ifindex, const struct in6_addr *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct ipv6_mc_socklist *mc_lst;
 	struct ipv6_mc_socklist __rcu **lnk;
@@ -254,6 +260,7 @@ static struct inet6_dev *ip6_mc_find_dev_rcu(struct net *net,
 	struct inet6_dev *idev = NULL;
 
 	if (ifindex == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct rt6_info *rt = rt6_lookup(net, group, NULL, 0, 0);
 
 		if (rt) {
@@ -278,6 +285,7 @@ static struct inet6_dev *ip6_mc_find_dev_rcu(struct net *net,
 
 void __ipv6_sock_mc_close(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct ipv6_mc_socklist *mc_lst;
 	struct net *net = sock_net(sk);
@@ -309,7 +317,10 @@ void ipv6_sock_mc_close(struct sock *sk)
 	struct ipv6_pinfo *np = inet6_sk(sk);
 
 	if (!rcu_access_pointer(np->ipv6_mc_list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtnl_lock();
 	__ipv6_sock_mc_close(sk);
 	rtnl_unlock();
@@ -333,7 +344,9 @@ int ip6_mc_source(int add, int omode, struct sock *sk,
 	group = &((struct sockaddr_in6 *)&pgsr->gsr_group)->sin6_addr;
 
 	if (!ipv6_addr_is_multicast(group))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	rcu_read_lock();
 	idev = ip6_mc_find_dev_rcu(net, group, pgsr->gsr_interface);
@@ -461,7 +474,9 @@ int ip6_mc_msfilter(struct sock *sk, struct group_filter *gsf)
 	group = &((struct sockaddr_in6 *)&gsf->gf_group)->sin6_addr;
 
 	if (!ipv6_addr_is_multicast(group))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (gsf->gf_fmode != MCAST_INCLUDE &&
 	    gsf->gf_fmode != MCAST_EXCLUDE)
 		return -EINVAL;
@@ -550,7 +565,9 @@ int ip6_mc_msfget(struct sock *sk, struct group_filter *gsf,
 	group = &((struct sockaddr_in6 *)&gsf->gf_group)->sin6_addr;
 
 	if (!ipv6_addr_is_multicast(group))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	rcu_read_lock();
 	idev = ip6_mc_find_dev_rcu(net, group, gsf->gf_interface);
@@ -610,6 +627,7 @@ int ip6_mc_msfget(struct sock *sk, struct group_filter *gsf,
 bool inet6_mc_check(struct sock *sk, const struct in6_addr *mc_addr,
 		    const struct in6_addr *src_addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct ipv6_mc_socklist *mc;
 	struct ip6_sf_socklist *psl;
@@ -655,18 +673,23 @@ static void igmp6_group_added(struct ifmcaddr6 *mc)
 	    IPV6_ADDR_SCOPE_LINKLOCAL)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&mc->mca_lock);
 	if (!(mc->mca_flags&MAF_LOADED)) {
 		mc->mca_flags |= MAF_LOADED;
 		if (ndisc_mc_map(&mc->mca_addr, buf, dev, 0) == 0)
 			dev_mc_add(dev, buf);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&mc->mca_lock);
 
 	if (!(dev->flags & IFF_UP) || (mc->mca_flags & MAF_NOREPORT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (mld_in_v1_mode(mc->idev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		igmp6_join_group(mc);
 		return;
 	}
@@ -685,23 +708,36 @@ static void igmp6_group_dropped(struct ifmcaddr6 *mc)
 	    IPV6_ADDR_SCOPE_LINKLOCAL)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&mc->mca_lock);
 	if (mc->mca_flags&MAF_LOADED) {
 		mc->mca_flags &= ~MAF_LOADED;
 		if (ndisc_mc_map(&mc->mca_addr, buf, dev, 0) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_mc_del(dev, buf);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&mc->mca_lock);
 	if (mc->mca_flags & MAF_NOREPORT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!mc->idev->dead)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		igmp6_leave_group(mc);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&mc->mca_lock);
 	if (del_timer(&mc->mca_timer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		refcount_dec(&mc->mca_refcnt);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&mc->mca_lock);
 }
 
@@ -720,7 +756,9 @@ static void mld_add_delrec(struct inet6_dev *idev, struct ifmcaddr6 *im)
 	 */
 	pmc = kzalloc(sizeof(*pmc), GFP_ATOMIC);
 	if (!pmc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_bh(&im->mca_lock);
 	spin_lock_init(&pmc->mca_lock);
@@ -755,32 +793,45 @@ static void mld_del_delrec(struct inet6_dev *idev, struct ifmcaddr6 *im)
 	spin_lock_bh(&idev->mc_lock);
 	pmc_prev = NULL;
 	for (pmc = idev->mc_tomb; pmc; pmc = pmc->next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ipv6_addr_equal(&pmc->mca_addr, pmca))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pmc_prev = pmc;
 	}
 	if (pmc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pmc_prev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pmc_prev->next = pmc->next;
+}
 		else
 			idev->mc_tomb = pmc->next;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&idev->mc_lock);
 
 	spin_lock_bh(&im->mca_lock);
 	if (pmc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		im->idev = pmc->idev;
 		im->mca_crcount = idev->mc_qrv;
 		im->mca_sfmode = pmc->mca_sfmode;
 		if (pmc->mca_sfmode == MCAST_INCLUDE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			im->mca_tomb = pmc->mca_tomb;
 			im->mca_sources = pmc->mca_sources;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			for (psf = im->mca_sources; psf; psf = psf->sf_next)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				psf->sf_crcount = im->mca_crcount;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		in6_dev_put(pmc->idev);
 		kfree(pmc);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&im->mca_lock);
 }
 
@@ -794,6 +845,7 @@ static void mld_clear_delrec(struct inet6_dev *idev)
 	spin_unlock_bh(&idev->mc_lock);
 
 	for (; pmc; pmc = nextpmc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nextpmc = pmc->next;
 		ip6_mc_clear_src(pmc);
 		in6_dev_put(pmc->idev);
@@ -810,6 +862,7 @@ static void mld_clear_delrec(struct inet6_dev *idev)
 		pmc->mca_tomb = NULL;
 		spin_unlock_bh(&pmc->mca_lock);
 		for (; psf; psf = psf_next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			psf_next = psf->sf_next;
 			kfree(psf);
 		}
@@ -837,7 +890,9 @@ static struct ifmcaddr6 *mca_alloc(struct inet6_dev *idev,
 
 	mc = kzalloc(sizeof(*mc), GFP_ATOMIC);
 	if (!mc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	setup_timer(&mc->mca_timer, igmp6_timer_handler, (unsigned long)mc);
 
@@ -857,6 +912,7 @@ static struct ifmcaddr6 *mca_alloc(struct inet6_dev *idev,
 	    IPV6_ADDR_MC_SCOPE(&mc->mca_addr) < IPV6_ADDR_SCOPE_LINKLOCAL)
 		mc->mca_flags |= MAF_NOREPORT;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mc;
 }
 
@@ -874,10 +930,13 @@ int ipv6_dev_mc_inc(struct net_device *dev, const struct in6_addr *addr)
 	idev = in6_dev_get(dev);
 
 	if (!idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	write_lock_bh(&idev->lock);
 	if (idev->dead) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_unlock_bh(&idev->lock);
 		in6_dev_put(idev);
 		return -ENODEV;
@@ -885,6 +944,7 @@ int ipv6_dev_mc_inc(struct net_device *dev, const struct in6_addr *addr)
 
 	for (mc = idev->mc_list; mc; mc = mc->next) {
 		if (ipv6_addr_equal(&mc->mca_addr, addr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mc->mca_users++;
 			write_unlock_bh(&idev->lock);
 			ip6_mc_add_src(idev, &mc->mca_addr, MCAST_EXCLUDE, 0,
@@ -896,6 +956,7 @@ int ipv6_dev_mc_inc(struct net_device *dev, const struct in6_addr *addr)
 
 	mc = mca_alloc(idev, addr);
 	if (!mc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_unlock_bh(&idev->lock);
 		in6_dev_put(idev);
 		return -ENOMEM;
@@ -938,10 +999,12 @@ int __ipv6_dev_mc_dec(struct inet6_dev *idev, const struct in6_addr *addr)
 				ma_put(ma);
 				return 0;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			write_unlock_bh(&idev->lock);
 			return 0;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_unlock_bh(&idev->lock);
 
 	return -ENOENT;
@@ -952,6 +1015,7 @@ int ipv6_dev_mc_dec(struct net_device *dev, const struct in6_addr *addr)
 	struct inet6_dev *idev;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	idev = __in6_dev_get(dev);
@@ -982,32 +1046,43 @@ bool ipv6_chk_mcast_addr(struct net_device *dev, const struct in6_addr *group,
 				break;
 		}
 		if (mc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (src_addr && !ipv6_addr_any(src_addr)) {
 				struct ip6_sf_list *psf;
 
 				spin_lock_bh(&mc->mca_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				for (psf = mc->mca_sources; psf; psf = psf->sf_next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (ipv6_addr_equal(&psf->sf_addr, src_addr))
 						break;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (psf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					rv = psf->sf_count[MCAST_INCLUDE] ||
 						psf->sf_count[MCAST_EXCLUDE] !=
 						mc->mca_sfcount[MCAST_EXCLUDE];
+}
 				else
 					rv = mc->mca_sfcount[MCAST_EXCLUDE] != 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock_bh(&mc->mca_lock);
 			} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rv = true; /* don't filter unspecified source */
+}
 		}
 		read_unlock_bh(&idev->lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	return rv;
 }
 
 static void mld_gq_start_timer(struct inet6_dev *idev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long tv = prandom_u32() % idev->mc_maxdelay;
 
 	idev->mc_gq_running = 1;
@@ -1019,37 +1094,47 @@ static void mld_gq_stop_timer(struct inet6_dev *idev)
 {
 	idev->mc_gq_running = 0;
 	if (del_timer(&idev->mc_gq_timer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__in6_dev_put(idev);
 }
+}
 
 static void mld_ifc_start_timer(struct inet6_dev *idev, unsigned long delay)
 {
 	unsigned long tv = prandom_u32() % delay;
 
 	if (!mod_timer(&idev->mc_ifc_timer, jiffies+tv+2))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		in6_dev_hold(idev);
 }
+}
 
 static void mld_ifc_stop_timer(struct inet6_dev *idev)
 {
 	idev->mc_ifc_count = 0;
 	if (del_timer(&idev->mc_ifc_timer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__in6_dev_put(idev);
 }
+}
 
 static void mld_dad_start_timer(struct inet6_dev *idev, unsigned long delay)
 {
 	unsigned long tv = prandom_u32() % delay;
 
 	if (!mod_timer(&idev->mc_dad_timer, jiffies+tv+2))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		in6_dev_hold(idev);
 }
+}
 
 static void mld_dad_stop_timer(struct inet6_dev *idev)
 {
 	if (del_timer(&idev->mc_dad_timer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__in6_dev_put(idev);
 }
+}
 
 /*
  *	IGMP handling (alias multicast ICMPv6 messages)
@@ -1086,6 +1171,7 @@ static bool mld_xmarksources(struct ifmcaddr6 *pmc, int nsrcs,
 	int i, scount;
 
 	scount = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (psf = pmc->mca_sources; psf; psf = psf->sf_next) {
 		if (scount == nsrcs)
 			break;
@@ -1114,7 +1200,9 @@ static bool mld_marksources(struct ifmcaddr6 *pmc, int nsrcs,
 	int i, scount;
 
 	if (pmc->mca_sfmode == MCAST_EXCLUDE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return mld_xmarksources(pmc, nsrcs, srcs);
+}
 
 	/* mark INCLUDE-mode sources */
 
@@ -1146,7 +1234,9 @@ static int mld_force_mld_version(const struct inet6_dev *idev)
 	 */
 
 	if (dev_net(idev->dev)->ipv6.devconf_all->force_mld_version != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return dev_net(idev->dev)->ipv6.devconf_all->force_mld_version;
+}
 	else
 		return idev->cnf.force_mld_version;
 }
@@ -1164,12 +1254,19 @@ static bool mld_in_v1_mode_only(const struct inet6_dev *idev)
 static bool mld_in_v1_mode(const struct inet6_dev *idev)
 {
 	if (mld_in_v2_mode_only(idev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (mld_in_v1_mode_only(idev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 	if (idev->mc_v1_seen && time_before(jiffies, idev->mc_v1_seen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1225,6 +1322,7 @@ static void mld_update_qi(struct inet6_dev *idev,
 	unsigned long mc_qqi;
 
 	if (mlh2->mld2q_qqic < 128) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mc_qqi = mlh2->mld2q_qqic;
 	} else {
 		unsigned long mc_man, mc_exp;
@@ -1255,7 +1353,9 @@ static int mld_process_v1(struct inet6_dev *idev, struct mld_msg *mld,
 
 	/* Ignore v1 queries */
 	if (mld_in_v2_mode_only(idev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mldv1_md = ntohs(mld->mld_maxdelay);
 
@@ -1297,6 +1397,7 @@ static int mld_process_v1(struct inet6_dev *idev, struct mld_msg *mld,
 static int mld_process_v2(struct inet6_dev *idev, struct mld2_query *mld,
 			  unsigned long *max_delay)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*max_delay = max(msecs_to_jiffies(mldv2_mrc(mld)), 1UL);
 
 	mld_update_qrv(idev, mld);
@@ -1322,7 +1423,9 @@ int igmp6_event_query(struct sk_buff *skb)
 	int len, err;
 
 	if (!pskb_may_pull(skb, sizeof(struct in6_addr)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* compute payload length excluding extension headers */
 	len = ntohs(ipv6_hdr(skb)->payload_len) + sizeof(struct ipv6hdr);
@@ -1438,7 +1541,9 @@ int igmp6_event_report(struct sk_buff *skb)
 
 	/* Our own report looped back. Ignore it. */
 	if (skb->pkt_type == PACKET_LOOPBACK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* send our report if the MC router may not have heard this report */
 	if (skb->pkt_type != PACKET_MULTICAST &&
@@ -1482,6 +1587,7 @@ int igmp6_event_report(struct sk_buff *skb)
 static bool is_in(struct ifmcaddr6 *pmc, struct ip6_sf_list *psf, int type,
 		  int gdeleted, int sdeleted)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (type) {
 	case MLD2_MODE_IS_INCLUDE:
 	case MLD2_MODE_IS_EXCLUDE:
@@ -1529,6 +1635,7 @@ mld_scount(struct ifmcaddr6 *pmc, int type, int gdeleted, int sdeleted)
 	struct ip6_sf_list *psf;
 	int scount = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (psf = pmc->mca_sources; psf; psf = psf->sf_next) {
 		if (!is_in(pmc, psf, type, gdeleted, sdeleted))
 			continue;
@@ -1585,7 +1692,9 @@ static struct sk_buff *mld_newpack(struct inet6_dev *idev, unsigned int mtu)
 	skb = sock_alloc_send_skb(sk, size, 1, &err);
 
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	skb->priority = TC_PRIO_CONTROL;
 	skb_reserve(skb, hlen);
@@ -1598,7 +1707,9 @@ static struct sk_buff *mld_newpack(struct inet6_dev *idev, unsigned int mtu)
 		 */
 		saddr = &in6addr_any;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		saddr = &addr_buf;
+}
 
 	ip6_mc_hdr(sk, skb, dev, saddr, &mld2_all_mcr, NEXTHDR_HOP, 0);
 
@@ -1617,6 +1728,7 @@ static struct sk_buff *mld_newpack(struct inet6_dev *idev, unsigned int mtu)
 
 static void mld_sendpack(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6hdr *pip6 = ipv6_hdr(skb);
 	struct mld2_report *pmr =
 			      (struct mld2_report *)skb_transport_header(skb);
@@ -1648,13 +1760,16 @@ static void mld_sendpack(struct sk_buff *skb)
 
 	err = 0;
 	if (IS_ERR(dst)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(dst);
 		dst = NULL;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_dst_set(skb, dst);
 	if (err)
 		goto err_out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	payload_len = skb->len;
 
 	err = NF_HOOK(NFPROTO_IPV6, NF_INET_LOCAL_OUT,
@@ -1665,9 +1780,11 @@ static void mld_sendpack(struct sk_buff *skb)
 		ICMP6MSGOUT_INC_STATS(net, idev, ICMPV6_MLD2_REPORT);
 		ICMP6_INC_STATS(net, idev, ICMP6_MIB_OUTMSGS);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		IP6_INC_STATS(net, idev, IPSTATS_MIB_OUTDISCARDS);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	return;
 
@@ -1678,6 +1795,7 @@ static void mld_sendpack(struct sk_buff *skb)
 
 static int grec_size(struct ifmcaddr6 *pmc, int type, int gdel, int sdel)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sizeof(struct mld2_grec) + 16 * mld_scount(pmc,type,gdel,sdel);
 }
 
@@ -1690,7 +1808,9 @@ static struct sk_buff *add_grhead(struct sk_buff *skb, struct ifmcaddr6 *pmc,
 	if (!skb) {
 		skb = mld_newpack(pmc->idev, mtu);
 		if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
 	}
 	pgr = skb_put(skb, sizeof(struct mld2_grec));
 	pgr->grec_type = type;
@@ -1717,11 +1837,16 @@ static struct sk_buff *add_grec(struct sk_buff *skb, struct ifmcaddr6 *pmc,
 	unsigned int mtu;
 
 	if (pmc->mca_flags & MAF_NOREPORT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return skb;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mtu = READ_ONCE(dev->mtu);
 	if (mtu < IPV6_MIN_MTU)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return skb;
+}
 
 	isquery = type == MLD2_MODE_IS_INCLUDE ||
 		  type == MLD2_MODE_IS_EXCLUDE;
@@ -1735,25 +1860,34 @@ static struct sk_buff *add_grec(struct sk_buff *skb, struct ifmcaddr6 *pmc,
 	if (!*psf_list)
 		goto empty_source;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pmr = skb ? (struct mld2_report *)skb_transport_header(skb) : NULL;
 
 	/* EX and TO_EX get a fresh packet, if needed */
 	if (truncate) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pmr && pmr->mld2r_ngrec &&
 		    AVAILABLE(skb) < grec_size(pmc, type, gdeleted, sdeleted)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				mld_sendpack(skb);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb = mld_newpack(idev, mtu);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	first = 1;
 	psf_prev = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (psf = *psf_list; psf; psf = psf_next) {
 		struct in6_addr *psrc;
 
 		psf_next = psf->sf_next;
 
 		if (!is_in(pmc, psf, type, gdeleted, sdeleted)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			psf_prev = psf;
 			continue;
 		}
@@ -1769,8 +1903,11 @@ static struct sk_buff *add_grec(struct sk_buff *skb, struct ifmcaddr6 *pmc,
 
 		/* clear marks on query responses */
 		if (isquery)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			psf->sf_gsresp = 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (AVAILABLE(skb) < sizeof(*psrc) +
 		    first*sizeof(struct mld2_grec)) {
 			if (truncate && !first)
@@ -2059,14 +2196,20 @@ static void mld_send_initial_cr(struct inet6_dev *idev)
 	int type;
 
 	if (mld_in_v1_mode(idev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb = NULL;
 	read_lock_bh(&idev->lock);
 	for (pmc = idev->mc_list; pmc; pmc = pmc->next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_bh(&pmc->mca_lock);
 		if (pmc->mca_sfcount[MCAST_EXCLUDE])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			type = MLD2_CHANGE_TO_EXCLUDE;
+}
 		else
 			type = MLD2_CHANGE_TO_INCLUDE;
 		skb = add_grec(skb, pmc, type, 0, 0, 1);
@@ -2096,7 +2239,9 @@ static void mld_dad_timer_expire(unsigned long data)
 	if (idev->mc_dad_count) {
 		idev->mc_dad_count--;
 		if (idev->mc_dad_count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mld_dad_start_timer(idev, idev->mc_maxdelay);
+}
 	}
 	in6_dev_put(idev);
 }
@@ -2108,6 +2253,7 @@ static int ip6_mc_del1_src(struct ifmcaddr6 *pmc, int sfmode,
 	int rv = 0;
 
 	psf_prev = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (psf = pmc->mca_sources; psf; psf = psf->sf_next) {
 		if (ipv6_addr_equal(&psf->sf_addr, psfsrc))
 			break;
@@ -2147,7 +2293,9 @@ static int ip6_mc_del_src(struct inet6_dev *idev, const struct in6_addr *pmca,
 	int	i, err;
 
 	if (!idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 	read_lock_bh(&idev->lock);
 	for (pmc = idev->mc_list; pmc; pmc = pmc->next) {
 		if (ipv6_addr_equal(pmca, &pmc->mca_addr))
@@ -2204,6 +2352,7 @@ static int ip6_mc_add1_src(struct ifmcaddr6 *pmc, int sfmode,
 	struct ip6_sf_list *psf, *psf_prev;
 
 	psf_prev = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (psf = pmc->mca_sources; psf; psf = psf->sf_next) {
 		if (ipv6_addr_equal(&psf->sf_addr, psfsrc))
 			break;
@@ -2229,6 +2378,7 @@ static void sf_markstate(struct ifmcaddr6 *pmc)
 	struct ip6_sf_list *psf;
 	int mca_xcount = pmc->mca_sfcount[MCAST_EXCLUDE];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (psf = pmc->mca_sources; psf; psf = psf->sf_next)
 		if (pmc->mca_sfcount[MCAST_EXCLUDE]) {
 			psf->sf_oldin = mca_xcount ==
@@ -2246,6 +2396,7 @@ static int sf_setstate(struct ifmcaddr6 *pmc)
 	int new_in, rv;
 
 	rv = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (psf = pmc->mca_sources; psf; psf = psf->sf_next) {
 		if (pmc->mca_sfcount[MCAST_EXCLUDE]) {
 			new_in = mca_xcount == psf->sf_count[MCAST_EXCLUDE] &&
@@ -2311,7 +2462,9 @@ static int ip6_mc_add_src(struct inet6_dev *idev, const struct in6_addr *pmca,
 	int	i, err;
 
 	if (!idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 	read_lock_bh(&idev->lock);
 	for (pmc = idev->mc_list; pmc; pmc = pmc->next) {
 		if (ipv6_addr_equal(pmca, &pmc->mca_addr))
@@ -2368,11 +2521,13 @@ static void ip6_mc_clear_src(struct ifmcaddr6 *pmc)
 	struct ip6_sf_list *psf, *nextpsf;
 
 	for (psf = pmc->mca_tomb; psf; psf = nextpsf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nextpsf = psf->sf_next;
 		kfree(psf);
 	}
 	pmc->mca_tomb = NULL;
 	for (psf = pmc->mca_sources; psf; psf = nextpsf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nextpsf = psf->sf_next;
 		kfree(psf);
 	}
@@ -2388,7 +2543,9 @@ static void igmp6_join_group(struct ifmcaddr6 *ma)
 	unsigned long delay;
 
 	if (ma->mca_flags & MAF_NOREPORT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	igmp6_send(&ma->mca_addr, ma->idev->dev, ICMPV6_MGM_REPORT);
 
@@ -2427,6 +2584,7 @@ static int ip6_mc_leave_src(struct sock *sk, struct ipv6_mc_socklist *iml,
 
 static void igmp6_leave_group(struct ifmcaddr6 *ma)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mld_in_v1_mode(ma->idev)) {
 		if (ma->mca_flags & MAF_LAST_REPORTER)
 			igmp6_send(&ma->mca_addr, ma->idev->dev,
@@ -2462,7 +2620,9 @@ static void mld_ifc_timer_expire(unsigned long data)
 static void mld_ifc_event(struct inet6_dev *idev)
 {
 	if (mld_in_v1_mode(idev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	idev->mc_ifc_count = idev->mc_qrv;
 	mld_ifc_start_timer(idev, 1);
 }
@@ -2472,7 +2632,9 @@ static void igmp6_timer_handler(unsigned long data)
 	struct ifmcaddr6 *ma = (struct ifmcaddr6 *) data;
 
 	if (mld_in_v1_mode(ma->idev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		igmp6_send(&ma->mca_addr, ma->idev->dev, ICMPV6_MGM_REPORT);
+}
 	else
 		mld_send_report(ma->idev, ma);
 
@@ -2492,6 +2654,7 @@ void ipv6_mc_unmap(struct inet6_dev *idev)
 	/* Install multicast list, except for all-nodes (already installed) */
 
 	read_lock_bh(&idev->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = idev->mc_list; i; i = i->next)
 		igmp6_group_dropped(i);
 	read_unlock_bh(&idev->lock);
@@ -2499,6 +2662,7 @@ void ipv6_mc_unmap(struct inet6_dev *idev)
 
 void ipv6_mc_remap(struct inet6_dev *idev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ipv6_mc_up(idev);
 }
 
@@ -2589,7 +2753,9 @@ void ipv6_mc_destroy_dev(struct inet6_dev *idev)
 	__ipv6_dev_mc_dec(idev, &in6addr_linklocal_allnodes);
 
 	if (idev->cnf.forwarding)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__ipv6_dev_mc_dec(idev, &in6addr_linklocal_allrouters);
+}
 
 	write_lock_bh(&idev->lock);
 	while ((i = idev->mc_list) != NULL) {
@@ -2606,6 +2772,7 @@ static void ipv6_mc_rejoin_groups(struct inet6_dev *idev)
 {
 	struct ifmcaddr6 *pmc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	if (mld_in_v1_mode(idev)) {
@@ -2621,13 +2788,16 @@ static int ipv6_mc_netdev_event(struct notifier_block *this,
 				unsigned long event,
 				void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = netdev_notifier_info_to_dev(ptr);
 	struct inet6_dev *idev = __in6_dev_get(dev);
 
 	switch (event) {
 	case NETDEV_RESEND_IGMP:
 		if (idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ipv6_mc_rejoin_groups(idev);
+}
 		break;
 	default:
 		break;
@@ -2656,6 +2826,7 @@ static inline struct ifmcaddr6 *igmp6_mc_get_first(struct seq_file *seq)
 	struct net *net = seq_file_net(seq);
 
 	state->idev = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev_rcu(net, state->dev) {
 		struct inet6_dev *idev;
 		idev = __in6_dev_get(state->dev);
@@ -2677,6 +2848,7 @@ static struct ifmcaddr6 *igmp6_mc_get_next(struct seq_file *seq, struct ifmcaddr
 	struct igmp6_mc_iter_state *state = igmp6_mc_seq_private(seq);
 
 	im = im->next;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!im) {
 		if (likely(state->idev))
 			read_unlock_bh(&state->idev->lock);
@@ -2697,6 +2869,7 @@ static struct ifmcaddr6 *igmp6_mc_get_next(struct seq_file *seq, struct ifmcaddr
 
 static struct ifmcaddr6 *igmp6_mc_get_idx(struct seq_file *seq, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ifmcaddr6 *im = igmp6_mc_get_first(seq);
 	if (im)
 		while (pos && (im = igmp6_mc_get_next(seq, im)) != NULL)
@@ -2707,12 +2880,14 @@ static struct ifmcaddr6 *igmp6_mc_get_idx(struct seq_file *seq, loff_t pos)
 static void *igmp6_mc_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	return igmp6_mc_get_idx(seq, *pos);
 }
 
 static void *igmp6_mc_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ifmcaddr6 *im = igmp6_mc_get_next(seq, v);
 
 	++*pos;
@@ -2725,6 +2900,7 @@ static void igmp6_mc_seq_stop(struct seq_file *seq, void *v)
 	struct igmp6_mc_iter_state *state = igmp6_mc_seq_private(seq);
 
 	if (likely(state->idev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_unlock_bh(&state->idev->lock);
 		state->idev = NULL;
 	}
@@ -2756,6 +2932,7 @@ static const struct seq_operations igmp6_mc_seq_ops = {
 
 static int igmp6_mc_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &igmp6_mc_seq_ops,
 			    sizeof(struct igmp6_mc_iter_state));
 }
@@ -2786,6 +2963,7 @@ static inline struct ip6_sf_list *igmp6_mcf_get_first(struct seq_file *seq)
 
 	state->idev = NULL;
 	state->im = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_netdev_rcu(net, state->dev) {
 		struct inet6_dev *idev;
 		idev = __in6_dev_get(state->dev);
@@ -2813,6 +2991,7 @@ static struct ip6_sf_list *igmp6_mcf_get_next(struct seq_file *seq, struct ip6_s
 	struct igmp6_mcf_iter_state *state = igmp6_mcf_seq_private(seq);
 
 	psf = psf->sf_next;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!psf) {
 		spin_unlock_bh(&state->im->mca_lock);
 		state->im = state->im->next;
@@ -2842,6 +3021,7 @@ static struct ip6_sf_list *igmp6_mcf_get_next(struct seq_file *seq, struct ip6_s
 
 static struct ip6_sf_list *igmp6_mcf_get_idx(struct seq_file *seq, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ip6_sf_list *psf = igmp6_mcf_get_first(seq);
 	if (psf)
 		while (pos && (psf = igmp6_mcf_get_next(seq, psf)) != NULL)
@@ -2852,6 +3032,7 @@ static struct ip6_sf_list *igmp6_mcf_get_idx(struct seq_file *seq, loff_t pos)
 static void *igmp6_mcf_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	return *pos ? igmp6_mcf_get_idx(seq, *pos - 1) : SEQ_START_TOKEN;
 }
@@ -2860,7 +3041,9 @@ static void *igmp6_mcf_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
 	struct ip6_sf_list *psf;
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		psf = igmp6_mcf_get_first(seq);
+}
 	else
 		psf = igmp6_mcf_get_next(seq, v);
 	++*pos;
@@ -2872,6 +3055,7 @@ static void igmp6_mcf_seq_stop(struct seq_file *seq, void *v)
 {
 	struct igmp6_mcf_iter_state *state = igmp6_mcf_seq_private(seq);
 	if (likely(state->im)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&state->im->mca_lock);
 		state->im = NULL;
 	}
@@ -2889,6 +3073,7 @@ static int igmp6_mcf_seq_show(struct seq_file *seq, void *v)
 	struct igmp6_mcf_iter_state *state = igmp6_mcf_seq_private(seq);
 
 	if (v == SEQ_START_TOKEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_puts(seq, "Idx Device                Multicast Address                   Source Address    INC    EXC\n");
 	} else {
 		seq_printf(seq,
@@ -2911,6 +3096,7 @@ static const struct seq_operations igmp6_mcf_seq_ops = {
 
 static int igmp6_mcf_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &igmp6_mcf_seq_ops,
 			    sizeof(struct igmp6_mcf_iter_state));
 }
@@ -2934,6 +3120,7 @@ static int __net_init igmp6_proc_init(struct net *net)
 			 &igmp6_mcf_seq_fops))
 		goto out_proc_net_igmp6;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 out:
 	return err;
@@ -2965,6 +3152,7 @@ static int __net_init igmp6_net_init(struct net *net)
 	err = inet_ctl_sock_create(&net->ipv6.igmp_sk, PF_INET6,
 				   SOCK_RAW, IPPROTO_ICMPV6, net);
 	if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Failed to initialize the IGMP6 control socket (err %d)\n",
 		       err);
 		goto out;
@@ -2975,6 +3163,7 @@ static int __net_init igmp6_net_init(struct net *net)
 	err = inet_ctl_sock_create(&net->ipv6.mc_autojoin_sk, PF_INET6,
 				   SOCK_RAW, IPPROTO_ICMPV6, net);
 	if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Failed to initialize the IGMP6 autojoin socket (err %d)\n",
 		       err);
 		goto out_sock_create;
@@ -2984,6 +3173,7 @@ static int __net_init igmp6_net_init(struct net *net)
 	if (err)
 		goto out_sock_create_autojoin;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_sock_create_autojoin:
@@ -3018,10 +3208,12 @@ int __init igmp6_late_init(void)
 
 void igmp6_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&igmp6_net_ops);
 }
 
 void igmp6_late_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_netdevice_notifier(&igmp6_netdev_notifier);
 }
diff --git a/net/ipv6/ndisc.c b/net/ipv6/ndisc.c
index 2a937c8..1fcc13f 100644
--- a/net/ipv6/ndisc.c
+++ b/net/ipv6/ndisc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Neighbour Discovery for IPv6
  *	Linux INET6 implementation
@@ -143,6 +145,7 @@ EXPORT_SYMBOL_GPL(nd_tbl);
 void __ndisc_fill_addr_option(struct sk_buff *skb, int type, void *data,
 			      int data_len, int pad)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int space = __ndisc_opt_addr_space(data_len, pad);
 	u8 *opt = skb_put(skb, space);
 
@@ -174,6 +177,7 @@ static inline void ndisc_fill_redirect_addr_option(struct sk_buff *skb,
 						   void *ha,
 						   const u8 *ops_data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ndisc_fill_addr_option(skb, ND_OPT_TARGET_LL_ADDR, ha, NDISC_REDIRECT);
 	ndisc_ops_fill_redirect_addr_option(skb->dev, skb, ops_data);
 }
@@ -182,6 +186,7 @@ static struct nd_opt_hdr *ndisc_next_option(struct nd_opt_hdr *cur,
 					    struct nd_opt_hdr *end)
 {
 	int type;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!cur || !end || cur >= end)
 		return NULL;
 	type = cur->nd_opt_type;
@@ -194,6 +199,7 @@ static struct nd_opt_hdr *ndisc_next_option(struct nd_opt_hdr *cur,
 static inline int ndisc_is_useropt(const struct net_device *dev,
 				   struct nd_opt_hdr *opt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return opt->nd_opt_type == ND_OPT_RDNSS ||
 		opt->nd_opt_type == ND_OPT_DNSSL ||
 		ndisc_ops_is_useropt(dev, opt->nd_opt_type);
@@ -203,6 +209,7 @@ static struct nd_opt_hdr *ndisc_next_useropt(const struct net_device *dev,
 					     struct nd_opt_hdr *cur,
 					     struct nd_opt_hdr *end)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!cur || !end || cur >= end)
 		return NULL;
 	do {
@@ -217,6 +224,7 @@ struct ndisc_options *ndisc_parse_options(const struct net_device *dev,
 {
 	struct nd_opt_hdr *nd_opt = (struct nd_opt_hdr *)opt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!nd_opt || opt_len < 0 || !ndopts)
 		return NULL;
 	memset(ndopts, 0, sizeof(*ndopts));
@@ -298,10 +306,12 @@ int ndisc_mc_map(const struct in6_addr *addr, char *buf, struct net_device *dev,
 		return ipv6_ipgre_mc_map(addr, dev->broadcast, buf);
 	default:
 		if (dir) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(buf, dev->broadcast, dev->addr_len);
 			return 0;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EINVAL;
 }
 EXPORT_SYMBOL(ndisc_mc_map);
@@ -315,6 +325,7 @@ static u32 ndisc_hash(const void *pkey,
 
 static bool ndisc_key_eq(const struct neighbour *n, const void *pkey)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return neigh_key_eq128(n, pkey);
 }
 
@@ -328,6 +339,7 @@ static int ndisc_constructor(struct neighbour *neigh)
 
 	in6_dev = in6_dev_get(dev);
 	if (!in6_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
 	}
 
@@ -337,6 +349,7 @@ static int ndisc_constructor(struct neighbour *neigh)
 
 	neigh->type = is_multicast ? RTN_MULTICAST : RTN_UNICAST;
 	if (!dev->header_ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		neigh->nud_state = NUD_NOARP;
 		neigh->ops = &ndisc_direct_ops;
 		neigh->output = neigh_direct_output;
@@ -350,7 +363,9 @@ static int ndisc_constructor(struct neighbour *neigh)
 			if (dev->flags&IFF_LOOPBACK)
 				neigh->type = RTN_LOCAL;
 		} else if (dev->flags&IFF_POINTOPOINT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			neigh->nud_state = NUD_NOARP;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(neigh->ha, dev->broadcast, dev->addr_len);
 		}
 		if (dev->header_ops->cache)
@@ -372,6 +387,7 @@ static int pndisc_constructor(struct pneigh_entry *n)
 	struct in6_addr maddr;
 	struct net_device *dev = n->dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev || !__in6_dev_get(dev))
 		return -EINVAL;
 	addrconf_addr_solict_mult(addr, &maddr);
@@ -385,6 +401,7 @@ static void pndisc_destructor(struct pneigh_entry *n)
 	struct in6_addr maddr;
 	struct net_device *dev = n->dev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dev || !__in6_dev_get(dev))
 		return;
 	addrconf_addr_solict_mult(addr, &maddr);
@@ -401,8 +418,10 @@ static struct sk_buff *ndisc_alloc_skb(struct net_device *dev,
 
 	skb = alloc_skb(hlen + sizeof(struct ipv6hdr) + len + tlen, GFP_ATOMIC);
 	if (!skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ND_PRINTK(0, err, "ndisc: %s failed to allocate an skb\n",
 			  __func__);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
 	}
 
@@ -445,6 +464,7 @@ static void ndisc_send_skb(struct sk_buff *skb,
 			   const struct in6_addr *daddr,
 			   const struct in6_addr *saddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dst_entry *dst = skb_dst(skb);
 	struct net *net = dev_net(skb->dev);
 	struct sock *sk = net->ipv6.ndisc_sk;
@@ -462,10 +482,12 @@ static void ndisc_send_skb(struct sk_buff *skb,
 		icmpv6_flow_init(sk, &fl6, type, saddr, daddr, oif);
 		dst = icmp6_dst_alloc(skb->dev, &fl6);
 		if (IS_ERR(dst)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree_skb(skb);
 			return;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb_dst_set(skb, dst);
 	}
 
@@ -488,6 +510,7 @@ static void ndisc_send_skb(struct sk_buff *skb,
 		ICMP6_INC_STATS(net, idev, ICMP6_MIB_OUTMSGS);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -505,6 +528,7 @@ void ndisc_send_na(struct net_device *dev, const struct in6_addr *daddr,
 	/* for anycast or proxy, solicited_addr != src_addr */
 	ifp = ipv6_get_ifaddr(dev_net(dev), solicited_addr, dev, 1);
 	if (ifp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		src_addr = solicited_addr;
 		if (ifp->flags & IFA_F_OPTIMISTIC)
 			override = false;
@@ -554,7 +578,9 @@ static void ndisc_send_unsol_na(struct net_device *dev)
 
 	idev = in6_dev_get(dev);
 	if (!idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	read_lock_bh(&idev->lock);
 	list_for_each_entry(ifa, &idev->addr_list, if_list) {
@@ -584,23 +610,31 @@ void ndisc_send_ns(struct net_device *dev, const struct in6_addr *solicit,
 	struct nd_msg *msg;
 
 	if (!saddr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ipv6_get_lladdr(dev, &addr_buf,
 				   (IFA_F_TENTATIVE|IFA_F_OPTIMISTIC)))
 			return;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		saddr = &addr_buf;
 	}
 
 	if (ipv6_addr_any(saddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inc_opt = false;
+}
 	if (inc_opt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		optlen += ndisc_opt_addr_space(dev,
 					       NDISC_NEIGHBOUR_SOLICITATION);
+}
 	if (nonce != 0)
 		optlen += 8;
 
 	skb = ndisc_alloc_skb(dev, sizeof(*msg) + optlen);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	msg = skb_put(skb, sizeof(*msg));
 	*msg = (struct nd_msg) {
@@ -611,9 +645,11 @@ void ndisc_send_ns(struct net_device *dev, const struct in6_addr *solicit,
 	};
 
 	if (inc_opt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ndisc_fill_addr_option(skb, ND_OPT_SOURCE_LL_ADDR,
 				       dev->dev_addr,
 				       NDISC_NEIGHBOUR_SOLICITATION);
+}
 	if (nonce != 0) {
 		u8 *opt = skb_put(skb, 8);
 
@@ -656,7 +692,9 @@ void ndisc_send_rs(struct net_device *dev, const struct in6_addr *saddr,
 	}
 #endif
 	if (send_sllao)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		optlen += ndisc_opt_addr_space(dev, NDISC_ROUTER_SOLICITATION);
+}
 
 	skb = ndisc_alloc_skb(dev, sizeof(*msg) + optlen);
 	if (!skb)
@@ -698,6 +736,7 @@ static void ndisc_solicit(struct neighbour *neigh, struct sk_buff *skb)
 	struct in6_addr *target = (struct in6_addr *)&neigh->primary_key;
 	int probes = atomic_read(&neigh->probes);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (skb && ipv6_chk_addr_and_flags(dev_net(dev), &ipv6_hdr(skb)->saddr,
 					   dev, 1,
 					   IFA_F_TENTATIVE|IFA_F_OPTIMISTIC))
@@ -727,7 +766,9 @@ static int pndisc_is_router(const void *pkey,
 	read_lock_bh(&nd_tbl.lock);
 	n = __pneigh_lookup(&nd_tbl, dev_net(dev), pkey, dev);
 	if (n)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = !!(n->flags & NTF_ROUTER);
+}
 	read_unlock_bh(&nd_tbl.lock);
 
 	return ret;
@@ -737,6 +778,7 @@ void ndisc_update(const struct net_device *dev, struct neighbour *neigh,
 		  const u8 *lladdr, u8 new, u32 flags, u8 icmp6_type,
 		  struct ndisc_options *ndopts)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	neigh_update(neigh, lladdr, new, flags, 0);
 	/* report ndisc ops about neighbour update */
 	ndisc_ops_update(dev, neigh, flags, icmp6_type, ndopts);
@@ -744,6 +786,7 @@ void ndisc_update(const struct net_device *dev, struct neighbour *neigh,
 
 static void ndisc_recv_ns(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nd_msg *msg = (struct nd_msg *)skb_transport_header(skb);
 	const struct in6_addr *saddr = &ipv6_hdr(skb)->saddr;
 	const struct in6_addr *daddr = &ipv6_hdr(skb)->daddr;
@@ -1671,12 +1714,14 @@ void ndisc_send_redirect(struct sk_buff *skb, const struct in6_addr *target)
 
 static void pndisc_redo(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ndisc_recv_ns(skb);
 	kfree_skb(skb);
 }
 
 static bool ndisc_suppress_frag_ndisc(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet6_dev *idev = __in6_dev_get(skb->dev);
 
 	if (!idev)
@@ -1694,7 +1739,9 @@ int ndisc_rcv(struct sk_buff *skb)
 	struct nd_msg *msg;
 
 	if (ndisc_suppress_frag_ndisc(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (skb_linearize(skb))
 		return 0;
@@ -1744,6 +1791,7 @@ int ndisc_rcv(struct sk_buff *skb)
 
 static int ndisc_netdev_event(struct notifier_block *this, unsigned long event, void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = netdev_notifier_info_to_dev(ptr);
 	struct netdev_notifier_change_info *change_info;
 	struct net *net = dev_net(dev);
@@ -1766,7 +1814,9 @@ static int ndisc_netdev_event(struct notifier_block *this, unsigned long event,
 	case NETDEV_CHANGE:
 		change_info = ptr;
 		if (change_info->flags_changed & IFF_NOARP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			neigh_changeaddr(&nd_tbl, dev);
+}
 		break;
 	case NETDEV_DOWN:
 		neigh_ifdown(&nd_tbl, dev);
@@ -1793,6 +1843,7 @@ static void ndisc_warn_deprecated_sysctl(struct ctl_table *ctl,
 {
 	static char warncomm[TASK_COMM_LEN];
 	static int warned;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (strcmp(warncomm, current->comm) && warned < 5) {
 		strcpy(warncomm, current->comm);
 		pr_warn("process `%s' is using deprecated sysctl (%s) net.ipv6.neigh.%s.%s - use net.ipv6.neigh.%s.%s_ms instead\n",
@@ -1850,9 +1901,11 @@ static int __net_init ndisc_net_init(struct net *net)
 	err = inet_ctl_sock_create(&sk, PF_INET6,
 				   SOCK_RAW, IPPROTO_ICMPV6, net);
 	if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ND_PRINTK(0, err,
 			  "NDISC: Failed to initialize the control socket (err %d)\n",
 			  err);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
 	}
 
@@ -1882,7 +1935,9 @@ int __init ndisc_init(void)
 
 	err = register_pernet_subsys(&ndisc_net_ops);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	/*
 	 * Initialize the neighbour table
 	 */
@@ -1911,6 +1966,7 @@ int __init ndisc_late_init(void)
 
 void ndisc_late_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_netdevice_notifier(&ndisc_netdev_notifier);
 }
 
diff --git a/net/ipv6/netfilter.c b/net/ipv6/netfilter.c
index 39970e2..bc5fd26 100644
--- a/net/ipv6/netfilter.c
+++ b/net/ipv6/netfilter.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPv6 specific functions of netfilter core
  *
@@ -20,6 +22,7 @@
 
 int ip6_route_me_harder(struct net *net, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6hdr *iph = ipv6_hdr(skb);
 	unsigned int hh_len;
 	struct dst_entry *dst;
@@ -85,6 +88,7 @@ static void nf_ip6_saveroute(const struct sk_buff *skb,
 	struct ip6_rt_info *rt_info = nf_queue_entry_reroute(entry);
 
 	if (entry->state.hook == NF_INET_LOCAL_OUT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const struct ipv6hdr *iph = ipv6_hdr(skb);
 
 		rt_info->daddr = iph->daddr;
@@ -99,6 +103,7 @@ static int nf_ip6_reroute(struct net *net, struct sk_buff *skb,
 	struct ip6_rt_info *rt_info = nf_queue_entry_reroute(entry);
 
 	if (entry->state.hook == NF_INET_LOCAL_OUT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const struct ipv6hdr *iph = ipv6_hdr(skb);
 		if (!ipv6_addr_equal(&iph->daddr, &rt_info->daddr) ||
 		    !ipv6_addr_equal(&iph->saddr, &rt_info->saddr) ||
@@ -117,6 +122,7 @@ static int nf_ip6_route(struct net *net, struct dst_entry **dst,
 		.sk.sk_bound_dev_if = 1,
 		.pinet6 = (struct ipv6_pinfo *) &fake_pinfo,
 	};
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const void *sk = strict ? &fake_sk : NULL;
 	struct dst_entry *result;
 	int err;
@@ -133,6 +139,7 @@ static int nf_ip6_route(struct net *net, struct dst_entry **dst,
 __sum16 nf_ip6_checksum(struct sk_buff *skb, unsigned int hook,
 			     unsigned int dataoff, u_int8_t protocol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6hdr *ip6h = ipv6_hdr(skb);
 	__sum16 csum = 0;
 
@@ -167,6 +174,7 @@ static __sum16 nf_ip6_checksum_partial(struct sk_buff *skb, unsigned int hook,
 				       unsigned int dataoff, unsigned int len,
 				       u_int8_t protocol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6hdr *ip6h = ipv6_hdr(skb);
 	__wsum hsum;
 	__sum16 csum = 0;
@@ -216,6 +224,7 @@ int __init ipv6_netfilter_init(void)
  */
 void ipv6_netfilter_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(nf_ipv6_ops, NULL);
 	nf_unregister_afinfo(&nf_ip6_afinfo);
 }
diff --git a/net/ipv6/netfilter/ip6_tables.c b/net/ipv6/netfilter/ip6_tables.c
index 01bd3ee..3ac478b 100644
--- a/net/ipv6/netfilter/ip6_tables.c
+++ b/net/ipv6/netfilter/ip6_tables.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Packet matching code.
  *
@@ -69,12 +71,16 @@ ip6_packet_match(const struct sk_buff *skb,
 	ret = ifname_compare_aligned(indev, ip6info->iniface, ip6info->iniface_mask);
 
 	if (NF_INVF(ip6info, IP6T_INV_VIA_IN, ret != 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	ret = ifname_compare_aligned(outdev, ip6info->outiface, ip6info->outiface_mask);
 
 	if (NF_INVF(ip6info, IP6T_INV_VIA_OUT, ret != 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 /* ... might want to do something with class and flowlabel here ... */
 
@@ -85,16 +91,25 @@ ip6_packet_match(const struct sk_buff *skb,
 
 		protohdr = ipv6_find_hdr(skb, protoff, -1, &_frag_off, NULL);
 		if (protohdr < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (_frag_off == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				*hotdrop = true;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*fragoff = _frag_off;
 
 		if (ip6info->proto == protohdr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ip6info->invflags & IP6T_INV_PROTO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
 		}
 
@@ -103,6 +118,7 @@ ip6_packet_match(const struct sk_buff *skb,
 			!(ip6info->invflags & IP6T_INV_PROTO))
 			return false;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 
@@ -111,9 +127,13 @@ static bool
 ip6_checkentry(const struct ip6t_ip6 *ipv6)
 {
 	if (ipv6->flags & ~IP6T_F_MASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if (ipv6->invflags & ~IP6T_INV_MASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	return true;
 }
@@ -121,6 +141,7 @@ ip6_checkentry(const struct ip6t_ip6 *ipv6)
 static unsigned int
 ip6t_error(struct sk_buff *skb, const struct xt_action_param *par)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_info_ratelimited("error: `%s'\n", (const char *)par->targinfo);
 
 	return NF_DROP;
@@ -145,6 +166,7 @@ static inline bool unconditional(const struct ip6t_entry *e)
 static inline const struct xt_entry_target *
 ip6t_get_target_c(const struct ip6t_entry *e)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ip6t_get_target((struct ip6t_entry *)e);
 }
 
@@ -244,6 +266,7 @@ static void trace_packet(struct net *net,
 static inline struct ip6t_entry *
 ip6t_next_entry(const struct ip6t_entry *entry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (void *)entry + entry->next_offset;
 }
 
@@ -300,7 +323,9 @@ ip6t_do_table(struct sk_buff *skb,
 	 * but it is no problem since absolute verdict is issued by these.
 	 */
 	if (static_key_false(&xt_tee_enabled))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		jumpstack += private->stacksize * __this_cpu_read(nf_skb_duplicated);
+}
 
 	e = get_entry(table_base, private->hook_entry[hook]);
 
@@ -319,6 +344,7 @@ ip6t_do_table(struct sk_buff *skb,
 		}
 
 		xt_ematch_foreach(ematch, e) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			acpar.match     = ematch->u.kernel.match;
 			acpar.matchinfo = ematch->data;
 			if (!acpar.match->match(skb, &acpar))
@@ -328,6 +354,7 @@ ip6t_do_table(struct sk_buff *skb,
 		counter = xt_get_this_cpu_counter(&e->counters);
 		ADD_COUNTER(*counter, skb->len, 1);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		t = ip6t_get_target_c(e);
 		WARN_ON(!t->u.kernel.target);
 
@@ -348,38 +375,50 @@ ip6t_do_table(struct sk_buff *skb,
 					verdict = (unsigned int)(-v) - 1;
 					break;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (stackidx == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					e = get_entry(table_base,
 					    private->underflow[hook]);
+}
 				else
 					e = ip6t_next_entry(jumpstack[--stackidx]);
 				continue;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (table_base + v != ip6t_next_entry(e) &&
 			    !(e->ipv6.flags & IP6T_F_GOTO)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				jumpstack[stackidx++] = e;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			e = get_entry(table_base, v);
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acpar.target   = t->u.kernel.target;
 		acpar.targinfo = t->data;
 
 		verdict = t->u.kernel.target->target(skb, &acpar);
 		if (verdict == XT_CONTINUE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			e = ip6t_next_entry(e);
+}
 		else
 			/* Verdict */
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while (!acpar.hotdrop);
 
 	xt_write_recseq_end(addend);
 	local_bh_enable();
 
 	if (acpar.hotdrop)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NF_DROP;
+}
 	else return verdict;
 }
 
@@ -410,7 +449,9 @@ mark_source_chains(const struct xt_table_info *newinfo,
 			int visited = e->comefrom & (1 << hook);
 
 			if (e->comefrom & (1 << NF_INET_NUMHOOKS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
 
 			e->comefrom |= ((1 << hook) | (1 << NF_INET_NUMHOOKS));
 
@@ -438,14 +479,19 @@ mark_source_chains(const struct xt_table_info *newinfo,
 					if (pos == oldpos)
 						goto next;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					e = entry0 + pos;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				} while (oldpos == pos + e->next_offset);
 
 				/* Move along one */
 				size = e->next_offset;
 				e = entry0 + pos + size;
 				if (pos + size >= newinfo->size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				e->counters.pcnt = pos;
 				pos += size;
 			} else {
@@ -455,16 +501,21 @@ mark_source_chains(const struct xt_table_info *newinfo,
 					   XT_STANDARD_TARGET) == 0 &&
 				    newpos >= 0) {
 					/* This a jump; chase it. */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (!xt_find_jump_offset(offsets, newpos,
 								 newinfo->number))
 						return 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					e = entry0 + newpos;
 				} else {
 					/* ... this is a fallthru */
 					newpos = pos + e->next_offset;
 					if (newpos >= newinfo->size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						return 0;
+}
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				e = entry0 + newpos;
 				e->counters.pcnt = pos;
 				pos = newpos;
@@ -472,6 +523,7 @@ mark_source_chains(const struct xt_table_info *newinfo,
 		}
 next:		;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -484,7 +536,9 @@ static void cleanup_match(struct xt_entry_match *m, struct net *net)
 	par.matchinfo = m->data;
 	par.family    = NFPROTO_IPV6;
 	if (par.match->destroy != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		par.match->destroy(&par);
+}
 	module_put(par.match->me);
 }
 
@@ -508,7 +562,9 @@ find_check_match(struct xt_entry_match *m, struct xt_mtchk_param *par)
 	match = xt_request_find_match(NFPROTO_IPV6, m->u.user.name,
 				      m->u.user.revision);
 	if (IS_ERR(match))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(match);
+}
 
 	m->u.kernel.match = match;
 
@@ -524,6 +580,7 @@ find_check_match(struct xt_entry_match *m, struct xt_mtchk_param *par)
 
 static int check_target(struct ip6t_entry *e, struct net *net, const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct xt_entry_target *t = ip6t_get_target(e);
 	struct xt_tgchk_param par = {
 		.net       = net,
@@ -554,8 +611,11 @@ find_check_entry(struct ip6t_entry *e, struct net *net, const char *name,
 	struct xt_entry_match *ematch;
 
 	if (!xt_percpu_counter_alloc(alloc_state, &e->counters))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	j = 0;
 	mtpar.net	= net;
 	mtpar.table     = name;
@@ -563,16 +623,20 @@ find_check_entry(struct ip6t_entry *e, struct net *net, const char *name,
 	mtpar.hook_mask = e->comefrom;
 	mtpar.family    = NFPROTO_IPV6;
 	xt_ematch_foreach(ematch, e) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = find_check_match(ematch, &mtpar);
 		if (ret != 0)
 			goto cleanup_matches;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		++j;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	t = ip6t_get_target(e);
 	target = xt_request_find_target(NFPROTO_IPV6, t->u.user.name,
 					t->u.user.revision);
 	if (IS_ERR(target)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(target);
 		goto cleanup_matches;
 	}
@@ -581,16 +645,20 @@ find_check_entry(struct ip6t_entry *e, struct net *net, const char *name,
 	ret = check_target(e, net, name);
 	if (ret)
 		goto err;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
  err:
 	module_put(t->u.kernel.target->me);
  cleanup_matches:
 	xt_ematch_foreach(ematch, e) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (j-- == 0)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cleanup_match(ematch, net);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_percpu_counter_free(&e->counters);
 
 	return ret;
@@ -602,10 +670,15 @@ static bool check_underflow(const struct ip6t_entry *e)
 	unsigned int verdict;
 
 	if (!unconditional(e))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	t = ip6t_get_target_c(e);
 	if (strcmp(t->u.user.name, XT_STANDARD_TARGET) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	verdict = ((struct xt_standard_target *)t)->verdict;
 	verdict = -verdict - 1;
 	return verdict == NF_DROP || verdict == NF_ACCEPT;
@@ -633,12 +706,16 @@ check_entry_size_and_hooks(struct ip6t_entry *e,
 		return -EINVAL;
 
 	if (!ip6_checkentry(&e->ipv6))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	err = xt_check_entry_offsets(e, e->elems, e->target_offset,
 				     e->next_offset);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/* Check hooks & underflows */
 	for (h = 0; h < NF_INET_NUMHOOKS; h++) {
@@ -648,7 +725,9 @@ check_entry_size_and_hooks(struct ip6t_entry *e,
 			newinfo->hook_entry[h] = hook_entries[h];
 		if ((unsigned char *)e - base == underflows[h]) {
 			if (!check_underflow(e))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 
 			newinfo->underflow[h] = underflows[h];
 		}
@@ -704,7 +783,10 @@ translate_table(struct net *net, struct xt_table_info *newinfo, void *entry0,
 
 	offsets = xt_alloc_entry_offsets(newinfo->number);
 	if (!offsets)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i = 0;
 	/* Walk through entries, checking offsets. */
 	xt_entry_foreach(iter, entry0, newinfo->size) {
@@ -723,6 +805,7 @@ translate_table(struct net *net, struct xt_table_info *newinfo, void *entry0,
 			++newinfo->stacksize;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -EINVAL;
 	if (i != repl->num_entries)
 		goto out_free;
@@ -739,6 +822,7 @@ translate_table(struct net *net, struct xt_table_info *newinfo, void *entry0,
 	}
 
 	if (!mark_source_chains(newinfo, repl->valid_hooks, entry0, offsets)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ELOOP;
 		goto out_free;
 	}
@@ -755,14 +839,19 @@ translate_table(struct net *net, struct xt_table_info *newinfo, void *entry0,
 	}
 
 	if (ret != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xt_entry_foreach(iter, entry0, newinfo->size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (i-- == 0)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cleanup_entry(iter, net);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
  out_free:
 	kvfree(offsets);
@@ -777,6 +866,7 @@ get_counters(const struct xt_table_info *t,
 	unsigned int cpu;
 	unsigned int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(cpu) {
 		seqcount_t *s = &per_cpu(xt_recseq, cpu);
 
@@ -813,7 +903,9 @@ static struct xt_counters *alloc_counters(const struct xt_table *table)
 	counters = vzalloc(countersize);
 
 	if (counters == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	get_counters(private, counters);
 
@@ -834,7 +926,9 @@ copy_entries_to_user(unsigned int total_size,
 
 	counters = alloc_counters(table);
 	if (IS_ERR(counters))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(counters);
+}
 
 	loc_cpu_entry = private->entries;
 
@@ -887,7 +981,9 @@ static void compat_standard_from_user(void *dst, const void *src)
 	int v = *(compat_int_t *)src;
 
 	if (v > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		v += xt_compat_calc_jump(AF_INET6, v);
+}
 	memcpy(dst, &v, sizeof(v));
 }
 
@@ -896,7 +992,9 @@ static int compat_standard_to_user(void __user *dst, const void *src)
 	compat_int_t cv = *(int *)src;
 
 	if (cv > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cv -= xt_compat_calc_jump(AF_INET6, cv);
+}
 	return copy_to_user(dst, &cv, sizeof(cv)) ? -EFAULT : 0;
 }
 
@@ -911,6 +1009,7 @@ static int compat_calc_entry(const struct ip6t_entry *e,
 
 	off = sizeof(struct ip6t_entry) - sizeof(struct compat_ip6t_entry);
 	entry_offset = (void *)e - base;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_ematch_foreach(ematch, e)
 		off += xt_compat_match_offset(ematch->u.kernel.match);
 	t = ip6t_get_target_c(e);
@@ -938,6 +1037,7 @@ static int compat_table_info(const struct xt_table_info *info,
 	const void *loc_cpu_entry;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!newinfo || !info)
 		return -EINVAL;
 
@@ -963,7 +1063,9 @@ static int get_info(struct net *net, void __user *user,
 	int ret;
 
 	if (*len != sizeof(struct ip6t_getinfo))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (copy_from_user(name, user, sizeof(name)) != 0)
 		return -EFAULT;
@@ -1022,7 +1124,9 @@ get_entries(struct net *net, struct ip6t_get_entries __user *uptr,
 	struct xt_table *t;
 
 	if (*len < sizeof(get))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (copy_from_user(&get, uptr, sizeof(get)) != 0)
 		return -EFAULT;
 	if (*len != sizeof(struct ip6t_get_entries) + get.size)
@@ -1061,6 +1165,7 @@ __do_replace(struct net *net, const char *name, unsigned int valid_hooks,
 	ret = 0;
 	counters = vzalloc(num_counters * sizeof(struct xt_counters));
 	if (!counters) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOMEM;
 		goto out;
 	}
@@ -1276,7 +1381,9 @@ compat_find_calc_match(struct xt_entry_match *m,
 	match = xt_request_find_match(NFPROTO_IPV6, m->u.user.name,
 				      m->u.user.revision);
 	if (IS_ERR(match))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(match);
+}
 
 	m->u.kernel.match = match;
 	*size += xt_compat_match_offset(match);
@@ -1377,6 +1484,7 @@ compat_copy_entry_from_user(struct compat_ip6t_entry *e, void **dstptr,
 
 	origsize = *size;
 	de = *dstptr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(de, e, sizeof(struct ip6t_entry));
 	memcpy(&de->counters, &e->counters, sizeof(e->counters));
 
@@ -1499,7 +1607,9 @@ compat_do_replace(struct net *net, void __user *user, unsigned int len)
 	struct ip6t_entry *iter;
 
 	if (copy_from_user(&tmp, user, sizeof(tmp)) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	/* overflow check */
 	if (tmp.num_counters >= INT_MAX / sizeof(struct xt_counters))
@@ -1545,7 +1655,9 @@ compat_do_ip6t_set_ctl(struct sock *sk, int cmd, void __user *user,
 	int ret;
 
 	if (!ns_capable(sock_net(sk)->user_ns, CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	switch (cmd) {
 	case IP6T_SO_SET_REPLACE:
@@ -1583,7 +1695,9 @@ compat_copy_entries_to_user(unsigned int total_size, struct xt_table *table,
 
 	counters = alloc_counters(table);
 	if (IS_ERR(counters))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(counters);
+}
 
 	pos = userptr;
 	size = total_size;
@@ -1607,7 +1721,9 @@ compat_get_entries(struct net *net, struct compat_ip6t_get_entries __user *uptr,
 	struct xt_table *t;
 
 	if (*len < sizeof(get))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (copy_from_user(&get, uptr, sizeof(get)) != 0)
 		return -EFAULT;
@@ -1647,7 +1763,9 @@ compat_do_ip6t_get_ctl(struct sock *sk, int cmd, void __user *user, int *len)
 	int ret;
 
 	if (!ns_capable(sock_net(sk)->user_ns, CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	switch (cmd) {
 	case IP6T_SO_GET_INFO:
@@ -1669,7 +1787,9 @@ do_ip6t_set_ctl(struct sock *sk, int cmd, void __user *user, unsigned int len)
 	int ret;
 
 	if (!ns_capable(sock_net(sk)->user_ns, CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	switch (cmd) {
 	case IP6T_SO_SET_REPLACE:
@@ -1693,7 +1813,9 @@ do_ip6t_get_ctl(struct sock *sk, int cmd, void __user *user, int *len)
 	int ret;
 
 	if (!ns_capable(sock_net(sk)->user_ns, CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	switch (cmd) {
 	case IP6T_SO_GET_INFO:
@@ -1749,6 +1871,7 @@ static void __ip6t_unregister_table(struct net *net, struct xt_table *table)
 
 	/* Decrease module usage counts and free resources */
 	loc_cpu_entry = private->entries;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_entry_foreach(iter, loc_cpu_entry, private->size)
 		cleanup_entry(iter, net);
 	if (private->number > private->initial_entries)
@@ -1769,7 +1892,9 @@ int ip6t_register_table(struct net *net, const struct xt_table *table,
 
 	newinfo = xt_alloc_table_info(repl->size);
 	if (!newinfo)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	loc_cpu_entry = newinfo->entries;
 	memcpy(loc_cpu_entry, repl->entries, repl->size);
@@ -1780,6 +1905,7 @@ int ip6t_register_table(struct net *net, const struct xt_table *table,
 
 	new_table = xt_register_table(net, table, &bootstrap, newinfo);
 	if (IS_ERR(new_table)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(new_table);
 		goto out_free;
 	}
@@ -1789,10 +1915,12 @@ int ip6t_register_table(struct net *net, const struct xt_table *table,
 
 	ret = nf_register_net_hooks(net, ops, hweight32(table->valid_hooks));
 	if (ret != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__ip6t_unregister_table(net, new_table);
 		*res = NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 
 out_free:
@@ -1803,6 +1931,7 @@ int ip6t_register_table(struct net *net, const struct xt_table *table,
 void ip6t_unregister_table(struct net *net, struct xt_table *table,
 			   const struct nf_hook_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_unregister_net_hooks(net, ops, hweight32(table->valid_hooks));
 	__ip6t_unregister_table(net, table);
 }
@@ -1813,6 +1942,7 @@ icmp6_type_code_match(u_int8_t test_type, u_int8_t min_code, u_int8_t max_code,
 		     u_int8_t type, u_int8_t code,
 		     bool invert)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (type == test_type && code >= min_code && code <= max_code)
 		^ invert;
 }
@@ -1826,7 +1956,9 @@ icmp6_match(const struct sk_buff *skb, struct xt_action_param *par)
 
 	/* Must not be a fragment. */
 	if (par->fragoff != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	ic = skb_header_pointer(skb, par->thoff, sizeof(_icmph), &_icmph);
 	if (ic == NULL) {
@@ -1952,6 +2084,7 @@ static int __init ip6_tables_init(void)
 
 static void __exit ip6_tables_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_unregister_sockopt(&ip6t_sockopts);
 
 	xt_unregister_matches(ip6t_builtin_mt, ARRAY_SIZE(ip6t_builtin_mt));
diff --git a/net/ipv6/netfilter/ip6t_MASQUERADE.c b/net/ipv6/netfilter/ip6t_MASQUERADE.c
index 2b1a158..c56d278 100644
--- a/net/ipv6/netfilter/ip6t_MASQUERADE.c
+++ b/net/ipv6/netfilter/ip6t_MASQUERADE.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2011 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/ipv6/netfilter/ip6t_NPT.c b/net/ipv6/netfilter/ip6t_NPT.c
index a379d2f..ca260b0 100644
--- a/net/ipv6/netfilter/ip6t_NPT.c
+++ b/net/ipv6/netfilter/ip6t_NPT.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2011, 2012 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/ipv6/netfilter/ip6t_REJECT.c b/net/ipv6/netfilter/ip6t_REJECT.c
index fa51a20..9d53719 100644
--- a/net/ipv6/netfilter/ip6t_REJECT.c
+++ b/net/ipv6/netfilter/ip6t_REJECT.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IP6 tables REJECT target module
  * Linux INET6 implementation
@@ -85,6 +87,7 @@ static int reject_tg6_check(const struct xt_tgchk_param *par)
 	const struct ip6t_entry *e = par->entryinfo;
 
 	if (rejinfo->with == IP6T_ICMP6_ECHOREPLY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("ECHOREPLY is not supported.\n");
 		return -EINVAL;
 	} else if (rejinfo->with == IP6T_TCP_RESET) {
@@ -118,6 +121,7 @@ static int __init reject_tg6_init(void)
 
 static void __exit reject_tg6_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_target(&reject_tg6_reg);
 }
 
diff --git a/net/ipv6/netfilter/ip6t_SYNPROXY.c b/net/ipv6/netfilter/ip6t_SYNPROXY.c
index 437af8c..dc6d544 100644
--- a/net/ipv6/netfilter/ip6t_SYNPROXY.c
+++ b/net/ipv6/netfilter/ip6t_SYNPROXY.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2013 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/ipv6/netfilter/ip6t_ah.c b/net/ipv6/netfilter/ip6t_ah.c
index 04099ab..ecebf8be 100644
--- a/net/ipv6/netfilter/ip6t_ah.c
+++ b/net/ipv6/netfilter/ip6t_ah.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match AH parameters. */
 
 /* (C) 2001-2002 Andras Kis-Szabo <kisza@sch.bme.hu>
diff --git a/net/ipv6/netfilter/ip6t_eui64.c b/net/ipv6/netfilter/ip6t_eui64.c
index aab0706..2b993b9 100644
--- a/net/ipv6/netfilter/ip6t_eui64.c
+++ b/net/ipv6/netfilter/ip6t_eui64.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match EUI64 address parameters. */
 
 /* (C) 2001-2002 Andras Kis-Szabo <kisza@sch.bme.hu>
diff --git a/net/ipv6/netfilter/ip6t_frag.c b/net/ipv6/netfilter/ip6t_frag.c
index 3b5735e..bb6788b 100644
--- a/net/ipv6/netfilter/ip6t_frag.c
+++ b/net/ipv6/netfilter/ip6t_frag.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match FRAG parameters. */
 
 /* (C) 2001-2002 Andras Kis-Szabo <kisza@sch.bme.hu>
diff --git a/net/ipv6/netfilter/ip6t_hbh.c b/net/ipv6/netfilter/ip6t_hbh.c
index 01df142..7b1443a 100644
--- a/net/ipv6/netfilter/ip6t_hbh.c
+++ b/net/ipv6/netfilter/ip6t_hbh.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match Hop-by-Hop and Destination parameters. */
 
 /* (C) 2001-2002 Andras Kis-Szabo <kisza@sch.bme.hu>
diff --git a/net/ipv6/netfilter/ip6t_ipv6header.c b/net/ipv6/netfilter/ip6t_ipv6header.c
index 8b14744..dc9062e 100644
--- a/net/ipv6/netfilter/ip6t_ipv6header.c
+++ b/net/ipv6/netfilter/ip6t_ipv6header.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* ipv6header match - matches IPv6 packets based
    on whether they contain certain headers */
 
@@ -45,6 +47,7 @@ ipv6header_mt6(const struct sk_buff *skb, struct xt_action_param *par)
 	len = skb->len - ptr;
 	temp = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (ip6t_ext_hdr(nexthdr)) {
 		const struct ipv6_opt_hdr *hp;
 		struct ipv6_opt_hdr _hdr;
@@ -146,6 +149,7 @@ static int __init ipv6header_mt6_init(void)
 
 static void __exit ipv6header_mt6_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_match(&ipv6header_mt6_reg);
 }
 
diff --git a/net/ipv6/netfilter/ip6t_mh.c b/net/ipv6/netfilter/ip6t_mh.c
index 0c90c66..7d07a92 100644
--- a/net/ipv6/netfilter/ip6t_mh.c
+++ b/net/ipv6/netfilter/ip6t_mh.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C)2006 USAGI/WIDE Project
  *
diff --git a/net/ipv6/netfilter/ip6t_rpfilter.c b/net/ipv6/netfilter/ip6t_rpfilter.c
index b12e61b..0487a1d5 100644
--- a/net/ipv6/netfilter/ip6t_rpfilter.c
+++ b/net/ipv6/netfilter/ip6t_rpfilter.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2011 Florian Westphal <fw@strlen.de>
  *
diff --git a/net/ipv6/netfilter/ip6t_rt.c b/net/ipv6/netfilter/ip6t_rt.c
index 2c99b94..0546e13 100644
--- a/net/ipv6/netfilter/ip6t_rt.c
+++ b/net/ipv6/netfilter/ip6t_rt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match ROUTING parameters. */
 
 /* (C) 2001-2002 Andras Kis-Szabo <kisza@sch.bme.hu>
diff --git a/net/ipv6/netfilter/ip6table_filter.c b/net/ipv6/netfilter/ip6table_filter.c
index 1343077..edefcdb 100644
--- a/net/ipv6/netfilter/ip6table_filter.c
+++ b/net/ipv6/netfilter/ip6table_filter.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * This is the 1999 rewrite of IP Firewalling, aiming for kernel 2.3.x.
  *
@@ -53,11 +55,15 @@ static int __net_init ip6table_filter_table_init(struct net *net)
 	int err;
 
 	if (net->ipv6.ip6table_filter)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	repl = ip6t_alloc_initial_table(&packet_filter);
 	if (repl == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	/* Entry 1 is the FORWARD hook */
 	((struct ip6t_standard *)repl->entries)[1].target.verdict =
 		forward ? -NF_ACCEPT - 1 : -NF_DROP - 1;
@@ -73,13 +79,17 @@ static int __net_init ip6table_filter_net_init(struct net *net)
 	if (net == &init_net || !forward)
 		return ip6table_filter_table_init(net);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void __net_exit ip6table_filter_net_exit(struct net *net)
 {
 	if (!net->ipv6.ip6table_filter)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ip6t_unregister_table(net, net->ipv6.ip6table_filter, filter_ops);
 	net->ipv6.ip6table_filter = NULL;
 }
@@ -95,17 +105,23 @@ static int __init ip6table_filter_init(void)
 
 	filter_ops = xt_hook_ops_alloc(&packet_filter, ip6table_filter_hook);
 	if (IS_ERR(filter_ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(filter_ops);
+}
 
 	ret = register_pernet_subsys(&ip6table_filter_net_ops);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(filter_ops);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 static void __exit ip6table_filter_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&ip6table_filter_net_ops);
 	kfree(filter_ops);
 }
diff --git a/net/ipv6/netfilter/ip6table_mangle.c b/net/ipv6/netfilter/ip6table_mangle.c
index 2b1a9dc..ce3811f 100644
--- a/net/ipv6/netfilter/ip6table_mangle.c
+++ b/net/ipv6/netfilter/ip6table_mangle.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPv6 packet mangling table, a port of the IPv4 mangle table to IPv6
  *
@@ -123,24 +125,30 @@ static int __init ip6table_mangle_init(void)
 
 	mangle_ops = xt_hook_ops_alloc(&packet_mangler, ip6table_mangle_hook);
 	if (IS_ERR(mangle_ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(mangle_ops);
+}
 
 	ret = register_pernet_subsys(&ip6table_mangle_net_ops);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(mangle_ops);
 		return ret;
 	}
 
 	ret = ip6table_mangle_table_init(&init_net);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unregister_pernet_subsys(&ip6table_mangle_net_ops);
 		kfree(mangle_ops);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 static void __exit ip6table_mangle_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&ip6table_mangle_net_ops);
 	kfree(mangle_ops);
 }
diff --git a/net/ipv6/netfilter/ip6table_nat.c b/net/ipv6/netfilter/ip6table_nat.c
index 9915125..b6c9689 100644
--- a/net/ipv6/netfilter/ip6table_nat.c
+++ b/net/ipv6/netfilter/ip6table_nat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2011 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/ipv6/netfilter/ip6table_raw.c b/net/ipv6/netfilter/ip6table_raw.c
index d4bc564..7ec30ac 100644
--- a/net/ipv6/netfilter/ip6table_raw.c
+++ b/net/ipv6/netfilter/ip6table_raw.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPv6 raw table, a port of the IPv4 raw table to IPv6
  *
diff --git a/net/ipv6/netfilter/ip6table_security.c b/net/ipv6/netfilter/ip6table_security.c
index cf26ccb..ba015cb 100644
--- a/net/ipv6/netfilter/ip6table_security.c
+++ b/net/ipv6/netfilter/ip6table_security.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * "security" table for IPv6
  *
diff --git a/net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c b/net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c
index b807478..e52a22c 100644
--- a/net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c
+++ b/net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C)2004 USAGI/WIDE Project
  *
@@ -50,7 +52,9 @@ static bool ipv6_pkt_to_tuple(const struct sk_buff *skb, unsigned int nhoff,
 	ap = skb_header_pointer(skb, nhoff + offsetof(struct ipv6hdr, saddr),
 				sizeof(_addrs), _addrs);
 	if (ap == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	memcpy(tuple->src.u3.ip6, ap, sizeof(tuple->src.u3.ip6));
 	memcpy(tuple->dst.u3.ip6, ap + 4, sizeof(tuple->dst.u3.ip6));
@@ -61,6 +65,7 @@ static bool ipv6_pkt_to_tuple(const struct sk_buff *skb, unsigned int nhoff,
 static bool ipv6_invert_tuple(struct nf_conntrack_tuple *tuple,
 			      const struct nf_conntrack_tuple *orig)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(tuple->src.u3.ip6, orig->dst.u3.ip6, sizeof(tuple->src.u3.ip6));
 	memcpy(tuple->dst.u3.ip6, orig->src.u3.ip6, sizeof(tuple->dst.u3.ip6));
 
@@ -77,6 +82,7 @@ static int ipv6_get_l4proto(const struct sk_buff *skb, unsigned int nhoff,
 
 	if (skb_copy_bits(skb, nhoff + offsetof(struct ipv6hdr, nexthdr),
 			  &nexthdr, sizeof(nexthdr)) != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("ip6_conntrack_core: can't get nexthdr\n");
 		return -NF_ACCEPT;
 	}
@@ -109,6 +115,7 @@ static unsigned int ipv6_helper(void *priv,
 
 	/* This is where we call the helper: as the packet goes out. */
 	ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ct || ctinfo == IP_CT_RELATED_REPLY)
 		return NF_ACCEPT;
 
@@ -142,6 +149,7 @@ static unsigned int ipv6_confirm(void *priv,
 	__be16 frag_off;
 
 	ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ct || ctinfo == IP_CT_RELATED_REPLY)
 		goto out;
 
@@ -169,6 +177,7 @@ static unsigned int ipv6_conntrack_in(void *priv,
 				      struct sk_buff *skb,
 				      const struct nf_hook_state *state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nf_conntrack_in(state->net, PF_INET6, state->hook, skb);
 }
 
@@ -282,6 +291,7 @@ ipv6_getorigdst(struct sock *sk, int optval, void __user *user, int *len)
 static int ipv6_tuple_to_nlattr(struct sk_buff *skb,
 				const struct nf_conntrack_tuple *tuple)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put_in6_addr(skb, CTA_IP_V6_SRC, &tuple->src.u3.in6) ||
 	    nla_put_in6_addr(skb, CTA_IP_V6_DST, &tuple->dst.u3.in6))
 		goto nla_put_failure;
@@ -299,6 +309,7 @@ static const struct nla_policy ipv6_nla_policy[CTA_IP_MAX+1] = {
 static int ipv6_nlattr_to_tuple(struct nlattr *tb[],
 				struct nf_conntrack_tuple *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tb[CTA_IP_V6_SRC] || !tb[CTA_IP_V6_DST])
 		return -EINVAL;
 
@@ -311,6 +322,7 @@ static int ipv6_nlattr_to_tuple(struct nlattr *tb[],
 
 static int ipv6_hooks_register(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct conntrack6_net *cnet = net_generic(net, conntrack6_net_id);
 	int err = 0;
 
@@ -336,6 +348,7 @@ static int ipv6_hooks_register(struct net *net)
 
 static void ipv6_hooks_unregister(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct conntrack6_net *cnet = net_generic(net, conntrack6_net_id);
 
 	mutex_lock(&register_ipv6_hooks);
@@ -422,6 +435,7 @@ static int __init nf_conntrack_l3proto_ipv6_init(void)
 
 	ret = nf_register_sockopt(&so_getorigdst6);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Unable to register netfilter socket option\n");
 		return ret;
 	}
@@ -437,9 +451,11 @@ static int __init nf_conntrack_l3proto_ipv6_init(void)
 
 	ret = nf_ct_l3proto_register(&nf_conntrack_l3proto_ipv6);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("nf_conntrack_ipv6: can't register ipv6 proto.\n");
 		goto cleanup_l4proto;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 cleanup_l4proto:
 	nf_ct_l4proto_unregister(builtin_l4proto6,
@@ -453,6 +469,7 @@ static int __init nf_conntrack_l3proto_ipv6_init(void)
 
 static void __exit nf_conntrack_l3proto_ipv6_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	synchronize_net();
 	nf_ct_l3proto_unregister(&nf_conntrack_l3proto_ipv6);
 	nf_ct_l4proto_unregister(builtin_l4proto6,
diff --git a/net/ipv6/netfilter/nf_conntrack_proto_icmpv6.c b/net/ipv6/netfilter/nf_conntrack_proto_icmpv6.c
index a9e1fd1..b9ed32c 100644
--- a/net/ipv6/netfilter/nf_conntrack_proto_icmpv6.c
+++ b/net/ipv6/netfilter/nf_conntrack_proto_icmpv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C)2003,2004 USAGI/WIDE Project
  *
@@ -44,7 +46,9 @@ static bool icmpv6_pkt_to_tuple(const struct sk_buff *skb,
 
 	hp = skb_header_pointer(skb, dataoff, sizeof(_hdr), &_hdr);
 	if (hp == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	tuple->dst.u.icmp.type = hp->icmp6_type;
 	tuple->src.u.icmp.id = hp->icmp6_identifier;
 	tuple->dst.u.icmp.code = hp->icmp6_code;
@@ -75,6 +79,7 @@ static bool icmpv6_invert_tuple(struct nf_conntrack_tuple *tuple,
 				const struct nf_conntrack_tuple *orig)
 {
 	int type = orig->dst.u.icmp.type - 128;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type < 0 || type >= sizeof(invmap) || !invmap[type])
 		return false;
 
@@ -86,6 +91,7 @@ static bool icmpv6_invert_tuple(struct nf_conntrack_tuple *tuple,
 
 static unsigned int *icmpv6_get_timeouts(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &icmpv6_pernet(net)->timeout;
 }
 
@@ -115,6 +121,7 @@ static bool icmpv6_new(struct nf_conn *ct, const struct sk_buff *skb,
 	};
 	int type = ct->tuplehash[0].tuple.dst.u.icmp.type - 128;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type < 0 || type >= sizeof(valid_new) || !valid_new[type]) {
 		/* Can't create a new ICMPv6 `conn' with this. */
 		pr_debug("icmpv6: can't create new conn with type %u\n",
@@ -136,6 +143,7 @@ icmpv6_error_message(struct net *net, struct nf_conn *tmpl,
 	enum ip_conntrack_info ctinfo;
 	struct nf_conntrack_zone tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(skb_nfct(skb));
 
 	/* Are they talking about one of our connections? */
@@ -187,6 +195,7 @@ icmpv6_error(struct net *net, struct nf_conn *tmpl,
 
 	icmp6h = skb_header_pointer(skb, dataoff, sizeof(_ih), &_ih);
 	if (icmp6h == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (LOG_INVALID(net, IPPROTO_ICMPV6))
 			nf_log_packet(net, PF_INET6, 0, skb, NULL, NULL, NULL,
 			      "nf_ct_icmpv6: short packet ");
@@ -222,6 +231,7 @@ icmpv6_error(struct net *net, struct nf_conn *tmpl,
 static int icmpv6_tuple_to_nlattr(struct sk_buff *skb,
 				  const struct nf_conntrack_tuple *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put_be16(skb, CTA_PROTO_ICMPV6_ID, t->src.u.icmp.id) ||
 	    nla_put_u8(skb, CTA_PROTO_ICMPV6_TYPE, t->dst.u.icmp.type) ||
 	    nla_put_u8(skb, CTA_PROTO_ICMPV6_CODE, t->dst.u.icmp.code))
@@ -241,6 +251,7 @@ static const struct nla_policy icmpv6_nla_policy[CTA_PROTO_MAX+1] = {
 static int icmpv6_nlattr_to_tuple(struct nlattr *tb[],
 				struct nf_conntrack_tuple *tuple)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tb[CTA_PROTO_ICMPV6_TYPE] ||
 	    !tb[CTA_PROTO_ICMPV6_CODE] ||
 	    !tb[CTA_PROTO_ICMPV6_ID])
@@ -324,7 +335,9 @@ static int icmpv6_kmemdup_sysctl_table(struct nf_proto_net *pn,
 				sizeof(icmpv6_sysctl_table),
 				GFP_KERNEL);
 	if (!pn->ctl_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	pn->ctl_table[0].data = &in->timeout;
 #endif
@@ -333,6 +346,7 @@ static int icmpv6_kmemdup_sysctl_table(struct nf_proto_net *pn,
 
 static int icmpv6_init_net(struct net *net, u_int16_t proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_icmp_net *in = icmpv6_pernet(net);
 	struct nf_proto_net *pn = &in->pn;
 
diff --git a/net/ipv6/netfilter/nf_conntrack_reasm.c b/net/ipv6/netfilter/nf_conntrack_reasm.c
index b263bf3..77333ae 100644
--- a/net/ipv6/netfilter/nf_conntrack_reasm.c
+++ b/net/ipv6/netfilter/nf_conntrack_reasm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPv6 fragment reassembly for connection tracking
  *
@@ -100,6 +102,7 @@ static int nf_ct_frag6_sysctl_register(struct net *net)
 
 	table = nf_ct_frag6_sysctl_table;
 	if (!net_eq(net, &init_net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table = kmemdup(table, sizeof(nf_ct_frag6_sysctl_table),
 				GFP_KERNEL);
 		if (table == NULL)
@@ -122,7 +125,9 @@ static int nf_ct_frag6_sysctl_register(struct net *net)
 
 err_reg:
 	if (!net_eq(net, &init_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(table);
+}
 err_alloc:
 	return -ENOMEM;
 }
@@ -149,12 +154,14 @@ static void __net_exit nf_ct_frags6_sysctl_unregister(struct net *net)
 
 static inline u8 ip6_frag_ecn(const struct ipv6hdr *ipv6h)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1 << (ipv6_get_dsfield(ipv6h) & INET_ECN_MASK);
 }
 
 static unsigned int nf_hash_frag(__be32 id, const struct in6_addr *saddr,
 				 const struct in6_addr *daddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_get_random_once(&nf_frags.rnd, sizeof(nf_frags.rnd));
 	return jhash_3words(ipv6_addr_hash(saddr), ipv6_addr_hash(daddr),
 			    (__force u32)id, nf_frags.rnd);
@@ -165,6 +172,7 @@ static unsigned int nf_hashfn(const struct inet_frag_queue *q)
 {
 	const struct frag_queue *nq;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nq = container_of(q, struct frag_queue, q);
 	return nf_hash_frag(nq->id, &nq->saddr, &nq->daddr);
 }
@@ -174,6 +182,7 @@ static void nf_ct_frag6_expire(unsigned long data)
 	struct frag_queue *fq;
 	struct net *net;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fq = container_of((struct inet_frag_queue *)data, struct frag_queue, q);
 	net = container_of(fq->q.net, struct net, nf_frag.frags);
 
@@ -202,6 +211,7 @@ static inline struct frag_queue *fq_find(struct net *net, __be32 id,
 	q = inet_frag_find(&net->nf_frag.frags, &nf_frags, &arg, hash);
 	local_bh_enable();
 	if (IS_ERR_OR_NULL(q)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_frag_maybe_warn_overflow(q, pr_fmt());
 		return NULL;
 	}
@@ -218,6 +228,7 @@ static int nf_ct_frag6_queue(struct frag_queue *fq, struct sk_buff *skb,
 	u8 ecn;
 
 	if (fq->q.flags & INET_FRAG_COMPLETE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("Already completed\n");
 		goto err;
 	}
@@ -379,6 +390,7 @@ nf_ct_frag6_reasm(struct frag_queue *fq, struct sk_buff *prev,  struct net_devic
 
 	inet_frag_kill(&fq->q, &nf_frags);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(head == NULL);
 	WARN_ON(NFCT_FRAG6_CB(head)->offset != 0);
 
@@ -517,6 +529,7 @@ nf_ct_frag6_reasm(struct frag_queue *fq, struct sk_buff *prev,  struct net_devic
 static int
 find_prev_fhdr(struct sk_buff *skb, u8 *prevhdrp, int *prevhoff, int *fhoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u8 nexthdr = ipv6_hdr(skb)->nexthdr;
 	const int netoff = skb_network_offset(skb);
 	u8 prev_nhoff = netoff + offsetof(struct ipv6hdr, nexthdr);
@@ -657,7 +670,9 @@ int nf_ct_frag6_init(void)
 		goto out;
 	ret = register_pernet_subsys(&nf_ct_net_ops);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_frags_fini(&nf_frags);
+}
 
 out:
 	return ret;
@@ -665,6 +680,7 @@ int nf_ct_frag6_init(void)
 
 void nf_ct_frag6_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&nf_ct_net_ops);
 	inet_frags_fini(&nf_frags);
 }
diff --git a/net/ipv6/netfilter/nf_defrag_ipv6_hooks.c b/net/ipv6/netfilter/nf_defrag_ipv6_hooks.c
index b326da5..e6c9c85 100644
--- a/net/ipv6/netfilter/nf_defrag_ipv6_hooks.c
+++ b/net/ipv6/netfilter/nf_defrag_ipv6_hooks.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>
  *
@@ -41,6 +43,7 @@ static enum ip6_defrag_users nf_ct6_defrag_user(unsigned int hooknum,
 		enum ip_conntrack_info ctinfo;
 		const struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		zone_id = nf_ct_zone_id(nf_ct_zone(ct), CTINFO2DIR(ctinfo));
 	}
 #endif
@@ -92,6 +95,7 @@ static const struct nf_hook_ops ipv6_defrag_ops[] = {
 static void __net_exit defrag6_net_exit(struct net *net)
 {
 	if (net->nf.defrag_ipv6) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nf_unregister_net_hooks(net, ipv6_defrag_ops,
 					ARRAY_SIZE(ipv6_defrag_ops));
 		net->nf.defrag_ipv6 = false;
@@ -108,14 +112,17 @@ static int __init nf_defrag_init(void)
 
 	ret = nf_ct_frag6_init();
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("nf_defrag_ipv6: can't initialize frag6.\n");
 		return ret;
 	}
 	ret = register_pernet_subsys(&defrag6_net_ops);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("nf_defrag_ipv6: can't register pernet ops\n");
 		goto cleanup_frag6;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 
 cleanup_frag6:
@@ -126,6 +133,7 @@ static int __init nf_defrag_init(void)
 
 static void __exit nf_defrag_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&defrag6_net_ops);
 	nf_ct_frag6_cleanup();
 }
@@ -134,6 +142,7 @@ int nf_defrag_ipv6_enable(struct net *net)
 {
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	if (net->nf.defrag_ipv6)
diff --git a/net/ipv6/netfilter/nf_log_ipv6.c b/net/ipv6/netfilter/nf_log_ipv6.c
index b397a8f..5ff5ea4 100644
--- a/net/ipv6/netfilter/nf_log_ipv6.c
+++ b/net/ipv6/netfilter/nf_log_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>
  *
@@ -50,7 +52,9 @@ static void dump_ipv6_packet(struct nf_log_buf *m,
 	unsigned int logflags;
 
 	if (info->type == NF_LOG_TYPE_LOG)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		logflags = info->u.log.logflags;
+}
 	else
 		logflags = NF_LOG_DEFAULT_MASK;
 
@@ -293,7 +297,9 @@ static void dump_ipv6_mac_header(struct nf_log_buf *m,
 	unsigned int logflags = 0;
 
 	if (info->type == NF_LOG_TYPE_LOG)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		logflags = info->u.log.logflags;
+}
 
 	if (!(logflags & NF_LOG_MACDECODE))
 		goto fallback;
@@ -398,14 +404,18 @@ static int __init nf_log_ipv6_init(void)
 
 	ret = register_pernet_subsys(&nf_log_ipv6_net_ops);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = nf_log_register(NFPROTO_IPV6, &nf_ip6_logger);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to register logger\n");
 		goto err1;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err1:
@@ -415,6 +425,7 @@ static int __init nf_log_ipv6_init(void)
 
 static void __exit nf_log_ipv6_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&nf_log_ipv6_net_ops);
 	nf_log_unregister(&nf_ip6_logger);
 }
diff --git a/net/ipv6/netfilter/nf_nat_l3proto_ipv6.c b/net/ipv6/netfilter/nf_nat_l3proto_ipv6.c
index 46d6dba..6c46aec 100644
--- a/net/ipv6/netfilter/nf_nat_l3proto_ipv6.c
+++ b/net/ipv6/netfilter/nf_nat_l3proto_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2011 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/ipv6/netfilter/nf_nat_masquerade_ipv6.c b/net/ipv6/netfilter/nf_nat_masquerade_ipv6.c
index 98f61fc..b12c5ff 100644
--- a/net/ipv6/netfilter/nf_nat_masquerade_ipv6.c
+++ b/net/ipv6/netfilter/nf_nat_masquerade_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2011 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/ipv6/netfilter/nf_tables_ipv6.c b/net/ipv6/netfilter/nf_tables_ipv6.c
index d6e4ba5..61567ac9 100644
--- a/net/ipv6/netfilter/nf_tables_ipv6.c
+++ b/net/ipv6/netfilter/nf_tables_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2012-2013 Pablo Neira Ayuso <pablo@netfilter.org>
diff --git a/net/ipv6/netfilter/nft_chain_nat_ipv6.c b/net/ipv6/netfilter/nft_chain_nat_ipv6.c
index 443cd30..5d62a93 100644
--- a/net/ipv6/netfilter/nft_chain_nat_ipv6.c
+++ b/net/ipv6/netfilter/nft_chain_nat_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2011 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2012 Intel Corporation
diff --git a/net/ipv6/netfilter/nft_chain_route_ipv6.c b/net/ipv6/netfilter/nft_chain_route_ipv6.c
index f272747..a17ec67 100644
--- a/net/ipv6/netfilter/nft_chain_route_ipv6.c
+++ b/net/ipv6/netfilter/nft_chain_route_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2012 Pablo Neira Ayuso <pablo@netfilter.org>
diff --git a/net/ipv6/netfilter/nft_dup_ipv6.c b/net/ipv6/netfilter/nft_dup_ipv6.c
index d8b5b60..1372fd9 100644
--- a/net/ipv6/netfilter/nft_dup_ipv6.c
+++ b/net/ipv6/netfilter/nft_dup_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2015 Pablo Neira Ayuso <pablo@netfilter.org>
  *
diff --git a/net/ipv6/netfilter/nft_masq_ipv6.c b/net/ipv6/netfilter/nft_masq_ipv6.c
index 4146536..69be676 100644
--- a/net/ipv6/netfilter/nft_masq_ipv6.c
+++ b/net/ipv6/netfilter/nft_masq_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2014 Arturo Borrero Gonzalez <arturo@debian.org>
  *
diff --git a/net/ipv6/netfilter/nft_redir_ipv6.c b/net/ipv6/netfilter/nft_redir_ipv6.c
index a27e424..54bb433 100644
--- a/net/ipv6/netfilter/nft_redir_ipv6.c
+++ b/net/ipv6/netfilter/nft_redir_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2014 Arturo Borrero Gonzalez <arturo@debian.org>
  *
diff --git a/net/ipv6/netfilter/nft_reject_ipv6.c b/net/ipv6/netfilter/nft_reject_ipv6.c
index 057deea..d52e087 100644
--- a/net/ipv6/netfilter/nft_reject_ipv6.c
+++ b/net/ipv6/netfilter/nft_reject_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008-2009 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2013 Eric Leblond <eric@regit.org>
diff --git a/net/ipv6/output_core.c b/net/ipv6/output_core.c
index 4fe7c90..0f86ee5 100644
--- a/net/ipv6/output_core.c
+++ b/net/ipv6/output_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPv6 library code, needed by static components when full IPv6 support is
  * not configured or static.  These functions are needed by GSO/GRO implementation.
@@ -26,7 +28,9 @@ static u32 __ipv6_select_ident(struct net *net, u32 hashrnd,
 	 */
 	id = ip_idents_reserve(hash, 1);
 	if (unlikely(!id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		id = 1 << 31;
+}
 
 	return id;
 }
@@ -51,7 +55,9 @@ __be32 ipv6_proxy_select_ident(struct net *net, struct sk_buff *skb)
 				   offsetof(struct ipv6hdr, saddr),
 				   sizeof(buf), buf);
 	if (!addrs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	net_get_random_once(&ip6_proxy_idents_hashrnd,
 			    sizeof(ip6_proxy_idents_hashrnd));
@@ -69,6 +75,7 @@ __be32 ipv6_select_ident(struct net *net,
 	static u32 ip6_idents_hashrnd __read_mostly;
 	u32 id;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_get_random_once(&ip6_idents_hashrnd, sizeof(ip6_idents_hashrnd));
 
 	id = __ipv6_select_ident(net, ip6_idents_hashrnd, daddr, saddr);
@@ -84,6 +91,7 @@ int ip6_find_1stfragopt(struct sk_buff *skb, u8 **nexthdr)
 	int found_rhdr = 0;
 	*nexthdr = &ipv6_hdr(skb)->nexthdr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (offset <= packet_len) {
 		struct ipv6_opt_hdr *exthdr;
 
@@ -135,6 +143,7 @@ int ip6_dst_hoplimit(struct dst_entry *dst)
 			hoplimit = idev->cnf.hop_limit;
 		else
 			hoplimit = dev_net(dev)->ipv6.devconf_all->hop_limit;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 	}
 	return hoplimit;
@@ -148,7 +157,9 @@ int __ip6_local_out(struct net *net, struct sock *sk, struct sk_buff *skb)
 
 	len = skb->len - sizeof(struct ipv6hdr);
 	if (len > IPV6_MAXPLEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = 0;
+}
 	ipv6_hdr(skb)->payload_len = htons(len);
 	IP6CB(skb)->nhoff = offsetof(struct ipv6hdr, nexthdr);
 
@@ -157,7 +168,9 @@ int __ip6_local_out(struct net *net, struct sock *sk, struct sk_buff *skb)
 	 */
 	skb = l3mdev_ip6_out(sk, skb);
 	if (unlikely(!skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	skb->protocol = htons(ETH_P_IPV6);
 
diff --git a/net/ipv6/ping.c b/net/ipv6/ping.c
index ac826dd..c6218d9 100644
--- a/net/ipv6/ping.c
+++ b/net/ipv6/ping.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -30,6 +32,7 @@
 static int dummy_ipv6_recv_error(struct sock *sk, struct msghdr *msg, int len,
 				 int *addr_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EAFNOSUPPORT;
 }
 static void dummy_ip6_datagram_recv_ctl(struct sock *sk, struct msghdr *msg,
@@ -38,6 +41,7 @@ static void dummy_ip6_datagram_recv_ctl(struct sock *sk, struct msghdr *msg,
 }
 static int dummy_icmpv6_err_convert(u8 type, u8 code, int *err)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EAFNOSUPPORT;
 }
 static void dummy_ipv6_icmp_error(struct sock *sk, struct sk_buff *skb, int err,
@@ -45,11 +49,13 @@ static void dummy_ipv6_icmp_error(struct sock *sk, struct sk_buff *skb, int err,
 static int dummy_ipv6_chk_addr(struct net *net, const struct in6_addr *addr,
 			       const struct net_device *dev, int strict)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int ping_v6_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct icmp6hdr user_icmph;
@@ -199,11 +205,13 @@ static struct inet_protosw pingv6_protosw = {
 #ifdef CONFIG_PROC_FS
 static void *ping_v6_seq_start(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ping_seq_start(seq, pos, AF_INET6);
 }
 
 static int ping_v6_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (v == SEQ_START_TOKEN) {
 		seq_puts(seq, IPV6_SEQ_DGRAM_HEADER);
 	} else {
@@ -249,7 +257,9 @@ int __init pingv6_init(void)
 #ifdef CONFIG_PROC_FS
 	int ret = register_pernet_subsys(&ping_v6_net_ops);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 #endif
 	pingv6_ops.ipv6_recv_error = ipv6_recv_error;
 	pingv6_ops.ip6_datagram_recv_common_ctl = ip6_datagram_recv_common_ctl;
@@ -266,6 +276,7 @@ int __init pingv6_init(void)
  */
 void pingv6_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pingv6_ops.ipv6_recv_error = dummy_ipv6_recv_error;
 	pingv6_ops.ip6_datagram_recv_common_ctl = dummy_ip6_datagram_recv_ctl;
 	pingv6_ops.ip6_datagram_recv_specific_ctl = dummy_ip6_datagram_recv_ctl;
diff --git a/net/ipv6/proc.c b/net/ipv6/proc.c
index e88bcb8..d73fe99 100644
--- a/net/ipv6/proc.c
+++ b/net/ipv6/proc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -54,6 +56,7 @@ static int sockstat6_seq_show(struct seq_file *seq, void *v)
 
 static int sockstat6_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open_net(inode, file, sockstat6_seq_show);
 }
 
@@ -196,6 +199,7 @@ static void snmp6_seq_show_item(struct seq_file *seq, void __percpu *pcpumib,
 				atomic_long_t *smib,
 				const struct snmp_mib *itemlist)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long buff[SNMP_MIB_MAX];
 	int i;
 
@@ -216,6 +220,7 @@ static void snmp6_seq_show_item(struct seq_file *seq, void __percpu *pcpumib,
 static void snmp6_seq_show_item64(struct seq_file *seq, void __percpu *mib,
 				  const struct snmp_mib *itemlist, size_t syncpoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u64 buff64[SNMP_MIB_MAX];
 	int i;
 
@@ -244,6 +249,7 @@ static int snmp6_seq_show(struct seq_file *seq, void *v)
 
 static int snmp6_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open_net(inode, file, snmp6_seq_show);
 }
 
@@ -270,6 +276,7 @@ static int snmp6_dev_seq_show(struct seq_file *seq, void *v)
 
 static int snmp6_dev_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, snmp6_dev_seq_show, PDE_DATA(inode));
 }
 
@@ -287,17 +294,24 @@ int snmp6_register_dev(struct inet6_dev *idev)
 	struct net *net;
 
 	if (!idev || !idev->dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net = dev_net(idev->dev);
 	if (!net->mib.proc_net_devsnmp6)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	p = proc_create_data(idev->dev->name, S_IRUGO,
 			     net->mib.proc_net_devsnmp6,
 			     &snmp6_dev_seq_fops, idev);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	idev->stats.proc_dir_entry = p;
 	return 0;
@@ -307,9 +321,13 @@ int snmp6_unregister_dev(struct inet6_dev *idev)
 {
 	struct net *net = dev_net(idev->dev);
 	if (!net->mib.proc_net_devsnmp6)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 	if (!idev->stats.proc_dir_entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	proc_remove(idev->stats.proc_dir_entry);
 	idev->stats.proc_dir_entry = NULL;
 	return 0;
@@ -327,6 +345,7 @@ static int __net_init ipv6_proc_init_net(struct net *net)
 	net->mib.proc_net_devsnmp6 = proc_mkdir("dev_snmp6", net->proc_net);
 	if (!net->mib.proc_net_devsnmp6)
 		goto proc_dev_snmp6_fail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 proc_dev_snmp6_fail:
@@ -355,6 +374,7 @@ int __init ipv6_misc_proc_init(void)
 
 void ipv6_misc_proc_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&ipv6_proc_ops);
 }
 
diff --git a/net/ipv6/protocol.c b/net/ipv6/protocol.c
index b5d54d4..1be6545 100644
--- a/net/ipv6/protocol.c
+++ b/net/ipv6/protocol.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -40,6 +42,7 @@ int inet6_del_protocol(const struct inet6_protocol *prot, unsigned char protocol
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = (cmpxchg((const struct inet6_protocol **)&inet6_protos[protocol],
 		       prot, NULL) == prot) ? 0 : -1;
 
@@ -64,6 +67,7 @@ int inet6_del_offload(const struct net_offload *prot, unsigned char protocol)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = (cmpxchg((const struct net_offload **)&inet6_offloads[protocol],
 		       prot, NULL) == prot) ? 0 : -1;
 
diff --git a/net/ipv6/raw.c b/net/ipv6/raw.c
index e4462b0..62c3db7 100644
--- a/net/ipv6/raw.c
+++ b/net/ipv6/raw.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	RAW sockets for IPv6
  *	Linux INET6 implementation
@@ -74,6 +76,7 @@ struct sock *__raw_v6_lookup(struct net *net, struct sock *sk,
 		unsigned short num, const struct in6_addr *loc_addr,
 		const struct in6_addr *rmt_addr, int dif, int sdif)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bool is_multicast = ipv6_addr_is_multicast(loc_addr);
 
 	sk_for_each_from(sk)
@@ -122,6 +125,7 @@ static int icmpv6_filter(const struct sock *sk, const struct sk_buff *skb)
 	hdr = skb_header_pointer(skb, skb_transport_offset(skb),
 				 ICMPV6_HDRLEN, &_hdr);
 	if (hdr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		const __u32 *data = &raw6_sk(sk)->filter.data[0];
 		unsigned int type = hdr->icmp6_type;
 
@@ -179,6 +183,7 @@ static bool ipv6_raw_deliver(struct sk_buff *skb, int nexthdr)
 	if (!sk)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net = dev_net(skb->dev);
 	sk = __raw_v6_lookup(net, sk, nexthdr, daddr, saddr,
 			     inet6_iif(skb), inet6_sdif(skb));
@@ -238,7 +243,9 @@ bool raw6_local_deliver(struct sk_buff *skb, int nexthdr)
 
 	raw_sk = sk_head(&raw_v6_hashinfo.ht[nexthdr & (RAW_HTABLE_SIZE - 1)]);
 	if (raw_sk && !ipv6_raw_deliver(skb, nexthdr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		raw_sk = NULL;
+}
 
 	return raw_sk != NULL;
 }
@@ -246,6 +253,7 @@ bool raw6_local_deliver(struct sk_buff *skb, int nexthdr)
 /* This cleans up af_inet6 a bit. -DaveM */
 static int rawv6_bind(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct sockaddr_in6 *addr = (struct sockaddr_in6 *) uaddr;
@@ -326,6 +334,7 @@ static void rawv6_err(struct sock *sk, struct sk_buff *skb,
 	       struct inet6_skb_parm *opt,
 	       u8 type, u8 code, int offset, __be32 info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	int err;
@@ -382,16 +391,19 @@ void raw6_icmp_error(struct sk_buff *skb, int nexthdr,
 
 		while ((sk = __raw_v6_lookup(net, sk, nexthdr, saddr, daddr,
 					     inet6_iif(skb), inet6_iif(skb)))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rawv6_err(sk, skb, NULL, type, code,
 					inner_offset, info);
 			sk = sk_next(sk);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock(&raw_v6_hashinfo.lock);
 }
 
 static inline int rawv6_rcv_skb(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((raw6_sk(sk)->checksum || rcu_access_pointer(sk->sk_filter)) &&
 	    skb_checksum_complete(skb)) {
 		atomic_inc(&sk->sk_drops);
@@ -418,6 +430,7 @@ static inline int rawv6_rcv_skb(struct sock *sk, struct sk_buff *skb)
  */
 int rawv6_rcv(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_sock *inet = inet_sk(sk);
 	struct raw6_sock *rp = raw6_sk(sk);
 
@@ -465,6 +478,7 @@ int rawv6_rcv(struct sock *sk, struct sk_buff *skb)
 static int rawv6_recvmsg(struct sock *sk, struct msghdr *msg, size_t len,
 			 int noblock, int flags, int *addr_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	DECLARE_SOCKADDR(struct sockaddr_in6 *, sin6, msg->msg_name);
 	struct sk_buff *skb;
@@ -553,6 +567,7 @@ static int rawv6_push_pending_frames(struct sock *sk, struct flowi6 *fl6,
 	if (!rp->checksum)
 		goto send;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb = skb_peek(&sk->sk_write_queue);
 	if (!skb)
 		goto out;
@@ -622,6 +637,7 @@ static int rawv6_send_hdrinc(struct sock *sk, struct msghdr *msg, int length,
 			struct flowi6 *fl6, struct dst_entry **dstp,
 			unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct net *net = sock_net(sk);
 	struct ipv6hdr *iph;
@@ -727,6 +743,7 @@ static int raw6_getfrag(void *from, char *to, int offset, int len, int odd,
 	struct raw6_frag_vec *rfv = from;
 
 	if (offset < rfv->hlen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int copy = min(rfv->hlen - offset, len);
 
 		if (skb->ip_summed == CHECKSUM_PARTIAL)
@@ -756,6 +773,7 @@ static int rawv6_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 {
 	struct ipv6_txoptions *opt_to_free = NULL;
 	struct ipv6_txoptions opt_space;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DECLARE_SOCKADDR(struct sockaddr_in6 *, sin6, msg->msg_name);
 	struct in6_addr *daddr, *final_p, final;
 	struct inet_sock *inet = inet_sk(sk);
@@ -956,14 +974,20 @@ static int rawv6_seticmpfilter(struct sock *sk, int level, int optname,
 	switch (optname) {
 	case ICMPV6_FILTER:
 		if (optlen > sizeof(struct icmp6_filter))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			optlen = sizeof(struct icmp6_filter);
+}
 		if (copy_from_user(&raw6_sk(sk)->filter, optval, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	default:
 		return -ENOPROTOOPT;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -975,7 +999,9 @@ static int rawv6_geticmpfilter(struct sock *sk, int level, int optname,
 	switch (optname) {
 	case ICMPV6_FILTER:
 		if (get_user(len, optlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 		if (len < 0)
 			return -EINVAL;
 		if (len > sizeof(struct icmp6_filter))
@@ -996,6 +1022,7 @@ static int rawv6_geticmpfilter(struct sock *sk, int level, int optname,
 static int do_rawv6_setsockopt(struct sock *sk, int level, int optname,
 			    char __user *optval, unsigned int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct raw6_sock *rp = raw6_sk(sk);
 	int val;
 
@@ -1049,7 +1076,9 @@ static int rawv6_setsockopt(struct sock *sk, int level, int optname,
 
 	case SOL_ICMPV6:
 		if (inet_sk(sk)->inet_num != IPPROTO_ICMPV6)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EOPNOTSUPP;
+}
 		return rawv6_seticmpfilter(sk, level, optname, optval, optlen);
 	case SOL_IPV6:
 		if (optname == IPV6_CHECKSUM ||
@@ -1059,6 +1088,7 @@ static int rawv6_setsockopt(struct sock *sk, int level, int optname,
 		return ipv6_setsockopt(sk, level, optname, optval, optlen);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_rawv6_setsockopt(sk, level, optname, optval, optlen);
 }
 
@@ -1066,6 +1096,7 @@ static int rawv6_setsockopt(struct sock *sk, int level, int optname,
 static int compat_rawv6_setsockopt(struct sock *sk, int level, int optname,
 				   char __user *optval, unsigned int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (level) {
 	case SOL_RAW:
 		break;
@@ -1088,6 +1119,7 @@ static int compat_rawv6_setsockopt(struct sock *sk, int level, int optname,
 static int do_rawv6_getsockopt(struct sock *sk, int level, int optname,
 			    char __user *optval, int __user *optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct raw6_sock *rp = raw6_sk(sk);
 	int val, len;
 
@@ -1126,6 +1158,7 @@ static int do_rawv6_getsockopt(struct sock *sk, int level, int optname,
 static int rawv6_getsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int __user *optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (level) {
 	case SOL_RAW:
 		break;
@@ -1149,6 +1182,7 @@ static int rawv6_getsockopt(struct sock *sk, int level, int optname,
 static int compat_rawv6_getsockopt(struct sock *sk, int level, int optname,
 				   char __user *optval, int __user *optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (level) {
 	case SOL_RAW:
 		break;
@@ -1170,6 +1204,7 @@ static int compat_rawv6_getsockopt(struct sock *sk, int level, int optname,
 
 static int rawv6_ioctl(struct sock *sk, int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (cmd) {
 	case SIOCOUTQ: {
 		int amount = sk_wmem_alloc_get(sk);
@@ -1200,6 +1235,7 @@ static int rawv6_ioctl(struct sock *sk, int cmd, unsigned long arg)
 #ifdef CONFIG_COMPAT
 static int compat_rawv6_ioctl(struct sock *sk, unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (cmd) {
 	case SIOCOUTQ:
 	case SIOCINQ:
@@ -1217,7 +1253,10 @@ static int compat_rawv6_ioctl(struct sock *sk, unsigned int cmd, unsigned long a
 static void rawv6_close(struct sock *sk, long timeout)
 {
 	if (inet_sk(sk)->inet_num == IPPROTO_RAW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip6_ra_control(sk, -1);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ip6mr_sk_done(sk);
 	sk_common_release(sk);
 }
@@ -1233,6 +1272,7 @@ static void raw6_destroy(struct sock *sk)
 
 static int rawv6_init_sk(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct raw6_sock *rp = raw6_sk(sk);
 
 	switch (inet_sk(sk)->inet_num) {
@@ -1280,6 +1320,7 @@ struct proto rawv6_prot = {
 #ifdef CONFIG_PROC_FS
 static int raw6_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (v == SEQ_START_TOKEN) {
 		seq_puts(seq, IPV6_SEQ_DGRAM_HEADER);
 	} else {
@@ -1300,6 +1341,7 @@ static const struct seq_operations raw6_seq_ops = {
 
 static int raw6_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return raw_seq_open(inode, file, &raw_v6_hashinfo, &raw6_seq_ops);
 }
 
@@ -1314,7 +1356,9 @@ static const struct file_operations raw6_seq_fops = {
 static int __net_init raw6_init_net(struct net *net)
 {
 	if (!proc_create("raw6", S_IRUGO, net->proc_net, &raw6_seq_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
@@ -1336,6 +1380,7 @@ int __init raw6_proc_init(void)
 
 void raw6_proc_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&raw6_net_ops);
 }
 #endif	/* CONFIG_PROC_FS */
@@ -1381,5 +1426,6 @@ int __init rawv6_init(void)
 
 void rawv6_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet6_unregister_protosw(&rawv6_protosw);
 }
diff --git a/net/ipv6/reassembly.c b/net/ipv6/reassembly.c
index 846012e..774f2e6 100644
--- a/net/ipv6/reassembly.c
+++ b/net/ipv6/reassembly.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPv6 fragment reassembly
  *	Linux INET6 implementation
@@ -71,6 +73,7 @@ struct ip6frag_skb_cb {
 
 static u8 ip6_frag_ecn(const struct ipv6hdr *ipv6h)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1 << (ipv6_get_dsfield(ipv6h) & INET_ECN_MASK);
 }
 
@@ -86,6 +89,7 @@ static int ip6_frag_reasm(struct frag_queue *fq, struct sk_buff *prev,
 static unsigned int inet6_hash_frag(__be32 id, const struct in6_addr *saddr,
 				    const struct in6_addr *daddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_get_random_once(&ip6_frags.rnd, sizeof(ip6_frags.rnd));
 	return jhash_3words(ipv6_addr_hash(saddr), ipv6_addr_hash(daddr),
 			    (__force u32)id, ip6_frags.rnd);
@@ -95,6 +99,7 @@ static unsigned int ip6_hashfn(const struct inet_frag_queue *q)
 {
 	const struct frag_queue *fq;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fq = container_of(q, struct frag_queue, q);
 	return inet6_hash_frag(fq->id, &fq->saddr, &fq->daddr);
 }
@@ -104,6 +109,7 @@ bool ip6_frag_match(const struct inet_frag_queue *q, const void *a)
 	const struct frag_queue *fq;
 	const struct ip6_create_arg *arg = a;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fq = container_of(q, struct frag_queue, q);
 	return	fq->id == arg->id &&
 		fq->user == arg->user &&
@@ -117,6 +123,7 @@ EXPORT_SYMBOL(ip6_frag_match);
 
 void ip6_frag_init(struct inet_frag_queue *q, const void *a)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct frag_queue *fq = container_of(q, struct frag_queue, q);
 	const struct ip6_create_arg *arg = a;
 
@@ -138,6 +145,7 @@ void ip6_expire_frag_queue(struct net *net, struct frag_queue *fq,
 	if (fq->q.flags & INET_FRAG_COMPLETE)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet_frag_kill(&fq->q, frags);
 
 	rcu_read_lock();
@@ -175,6 +183,7 @@ static void ip6_frag_expire(unsigned long data)
 	struct frag_queue *fq;
 	struct net *net;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fq = container_of((struct inet_frag_queue *)data, struct frag_queue, q);
 	net = container_of(fq->q.net, struct net, ipv6.frags);
 
@@ -200,6 +209,7 @@ fq_find(struct net *net, __be32 id, const struct in6_addr *src,
 
 	q = inet_frag_find(&net->ipv6.frags, &ip6_frags, &arg, hash);
 	if (IS_ERR_OR_NULL(q)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_frag_maybe_warn_overflow(q, pr_fmt());
 		return NULL;
 	}
@@ -218,6 +228,7 @@ static int ip6_frag_queue(struct frag_queue *fq, struct sk_buff *skb,
 	if (fq->q.flags & INET_FRAG_COMPLETE)
 		goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset = ntohs(fhdr->frag_off) & ~0x7;
 	end = offset + (ntohs(ipv6_hdr(skb)->payload_len) -
 			((u8 *)(fhdr + 1) - (u8 *)(ipv6_hdr(skb) + 1)));
@@ -383,6 +394,7 @@ static int ip6_frag_queue(struct frag_queue *fq, struct sk_buff *skb,
 static int ip6_frag_reasm(struct frag_queue *fq, struct sk_buff *prev,
 			  struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = container_of(fq->q.net, struct net, ipv6.frags);
 	struct sk_buff *fp, *head = fq->q.fragments;
 	int    payload_len;
@@ -534,6 +546,7 @@ static int ipv6_frag_rcv(struct sk_buff *skb)
 	if (IP6CB(skb)->flags & IP6SKB_FRAGMENTED)
 		goto fail_hdr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)), IPSTATS_MIB_REASMREQDS);
 
 	/* Jumbo payload inhibits frag. header */
@@ -639,6 +652,7 @@ static int __net_init ip6_frags_ns_sysctl_register(struct net *net)
 
 	table = ip6_frags_ns_ctl_table;
 	if (!net_eq(net, &init_net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table = kmemdup(table, sizeof(ip6_frags_ns_ctl_table), GFP_KERNEL);
 		if (!table)
 			goto err_alloc;
@@ -652,7 +666,9 @@ static int __net_init ip6_frags_ns_sysctl_register(struct net *net)
 
 		/* Don't export sysctls to unprivileged users */
 		if (net->user_ns != &init_user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			table[0].procname = NULL;
+}
 	}
 
 	hdr = register_net_sysctl(net, "net/ipv6", table);
@@ -664,7 +680,9 @@ static int __net_init ip6_frags_ns_sysctl_register(struct net *net)
 
 err_reg:
 	if (!net_eq(net, &init_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(table);
+}
 err_alloc:
 	return -ENOMEM;
 }
@@ -690,6 +708,7 @@ static int ip6_frags_sysctl_register(void)
 
 static void ip6_frags_sysctl_unregister(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_net_sysctl_table(ip6_ctl_header);
 }
 #else
@@ -772,6 +791,7 @@ int __init ipv6_frag_init(void)
 
 void ipv6_frag_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet_frags_fini(&ip6_frags);
 	ip6_frags_sysctl_unregister();
 	unregister_pernet_subsys(&ip6_frags_ops);
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index a4a865c..c659498 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	Linux INET6 implementation
  *	FIB front-end.
@@ -152,7 +154,9 @@ static void rt6_uncached_list_flush_dev(struct net *net, struct net_device *dev)
 	int cpu;
 
 	if (dev == loopback_dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for_each_possible_cpu(cpu) {
 		struct uncached_list *ul = per_cpu_ptr(&rt6_uncached_list, cpu);
@@ -164,22 +168,27 @@ static void rt6_uncached_list_flush_dev(struct net *net, struct net_device *dev)
 			struct net_device *rt_dev = rt->dst.dev;
 
 			if (rt_idev->dev == dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rt->rt6i_idev = in6_dev_get(loopback_dev);
 				in6_dev_put(rt_idev);
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (rt_dev == dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rt->dst.dev = loopback_dev;
 				dev_hold(rt->dst.dev);
 				dev_put(rt_dev);
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&ul->lock);
 	}
 }
 
 static u32 *rt6_pcpu_cow_metrics(struct rt6_info *rt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dst_metrics_write_ptr(rt->dst.from);
 }
 
@@ -188,9 +197,13 @@ static u32 *ipv6_cow_metrics(struct dst_entry *dst, unsigned long old)
 	struct rt6_info *rt = (struct rt6_info *)dst;
 
 	if (rt->rt6i_flags & RTF_PCPU)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rt6_pcpu_cow_metrics(rt);
+}
 	else if (rt->rt6i_flags & RTF_CACHE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	else
 		return dst_cow_metrics_generic(dst, old);
 }
@@ -202,7 +215,9 @@ static inline const void *choose_neigh_daddr(struct rt6_info *rt,
 	struct in6_addr *p = &rt->rt6i_gateway;
 
 	if (!ipv6_addr_any(p))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (const void *) p;
+}
 	else if (skb)
 		return &ipv6_hdr(skb)->daddr;
 	return daddr;
@@ -218,7 +233,9 @@ static struct neighbour *ip6_neigh_lookup(const struct dst_entry *dst,
 	daddr = choose_neigh_daddr(rt, skb, daddr);
 	n = __ipv6_neigh_lookup(dst->dev, daddr);
 	if (n)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return n;
+}
 	return neigh_create(&nd_tbl, daddr, dst->dev);
 }
 
@@ -229,7 +246,9 @@ static void ip6_confirm_neigh(const struct dst_entry *dst, const void *daddr)
 
 	daddr = choose_neigh_daddr(rt, NULL, daddr);
 	if (!daddr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (dev->flags & (IFF_NOARP | IFF_LOOPBACK))
 		return;
 	if (ipv6_addr_is_multicast((const struct in6_addr *)daddr))
@@ -258,6 +277,7 @@ static struct dst_ops ip6_dst_ops_template = {
 
 static unsigned int ip6_blackhole_mtu(const struct dst_entry *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int mtu = dst_metric_raw(dst, RTAX_MTU);
 
 	return mtu ? : dst->dev->mtu;
@@ -380,11 +400,13 @@ struct rt6_info *ip6_dst_alloc(struct net *net,
 				*p =  NULL;
 			}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dst_release_immediate(&rt->dst);
 			return NULL;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rt;
 }
 EXPORT_SYMBOL(ip6_dst_alloc);
@@ -418,8 +440,10 @@ static void ip6_dst_ifdown(struct dst_entry *dst, struct net_device *dev,
 		dev_net(dev)->loopback_dev;
 
 	if (idev && idev->dev != loopback_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct inet6_dev *loopback_idev = in6_dev_get(loopback_dev);
 		if (loopback_idev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rt->rt6i_idev = loopback_idev;
 			in6_dev_put(idev);
 		}
@@ -429,7 +453,9 @@ static void ip6_dst_ifdown(struct dst_entry *dst, struct net_device *dev,
 static bool __rt6_check_expired(const struct rt6_info *rt)
 {
 	if (rt->rt6i_flags & RTF_EXPIRES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return time_after(jiffies, rt->dst.expires);
+}
 	else
 		return false;
 }
@@ -437,12 +463,17 @@ static bool __rt6_check_expired(const struct rt6_info *rt)
 static bool rt6_check_expired(const struct rt6_info *rt)
 {
 	if (rt->rt6i_flags & RTF_EXPIRES) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (time_after(jiffies, rt->dst.expires))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
+}
 	} else if (rt->dst.from) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rt->dst.obsolete != DST_OBSOLETE_FORCE_CHK ||
 		       rt6_check_expired((struct rt6_info *)rt->dst.from);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -457,7 +488,9 @@ static struct rt6_info *rt6_multipath_select(struct rt6_info *match,
 	 * case it will always be non-zero. Otherwise now is the time to do it.
 	 */
 	if (!fl6->mp_hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl6->mp_hash = rt6_multipath_hash(fl6, NULL);
+}
 
 	route_choosen = fl6->mp_hash % (match->rt6i_nsiblings + 1);
 	/* Don't change the route, if route_choosen == 0
@@ -490,6 +523,7 @@ static inline struct rt6_info *rt6_device_match(struct net *net,
 	struct rt6_info *local = NULL;
 	struct rt6_info *sprt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!oif && ipv6_addr_any(saddr))
 		goto out;
 
@@ -606,10 +640,14 @@ static inline int rt6_check_dev(struct rt6_info *rt, int oif)
 {
 	struct net_device *dev = rt->dst.dev;
 	if (!oif || dev->ifindex == oif)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 2;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((dev->flags & IFF_LOOPBACK) &&
 	    rt->rt6i_idev && rt->rt6i_idev->dev->ifindex == oif)
 		return 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -622,12 +660,16 @@ static inline enum rt6_nud_state rt6_check_neigh(struct rt6_info *rt)
 	    !(rt->rt6i_flags & RTF_GATEWAY))
 		return RT6_NUD_SUCCEED;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock_bh();
 	neigh = __ipv6_neigh_lookup_noref(rt->dst.dev, &rt->rt6i_gateway);
 	if (neigh) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_lock(&neigh->lock);
 		if (neigh->nud_state & NUD_VALID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = RT6_NUD_SUCCEED;
+}
 #ifdef CONFIG_IPV6_ROUTER_PREF
 		else if (!(neigh->nud_state & NUD_FAILED))
 			ret = RT6_NUD_SUCCEED;
@@ -636,9 +678,11 @@ static inline enum rt6_nud_state rt6_check_neigh(struct rt6_info *rt)
 #endif
 		read_unlock(&neigh->lock);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = IS_ENABLED(CONFIG_IPV6_ROUTER_PREF) ?
 		      RT6_NUD_SUCCEED : RT6_NUD_FAIL_DO_RR;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock_bh();
 
 	return ret;
@@ -651,15 +695,20 @@ static int rt6_score_route(struct rt6_info *rt, int oif,
 
 	m = rt6_check_dev(rt, oif);
 	if (!m && (strict & RT6_LOOKUP_F_IFACE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return RT6_NUD_FAIL_HARD;
+}
 #ifdef CONFIG_IPV6_ROUTER_PREF
 	m |= IPV6_DECODE_PREF(IPV6_EXTRACT_PREF(rt->rt6i_flags)) << 2;
 #endif
 	if (strict & RT6_LOOKUP_F_REACHABLE) {
 		int n = rt6_check_neigh(rt);
 		if (n < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return n;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return m;
 }
 
@@ -682,6 +731,7 @@ static struct rt6_info *find_match(struct rt6_info *rt, int oif, int strict,
 
 	m = rt6_score_route(rt, oif, strict);
 	if (m == RT6_NUD_FAIL_DO_RR) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		match_do_rr = true;
 		m = 0; /* lowest valid score */
 	} else if (m == RT6_NUD_FAIL_HARD) {
@@ -713,6 +763,7 @@ static struct rt6_info *find_rr_leaf(struct fib6_node *fn,
 	cont = NULL;
 	for (rt = rr_head; rt; rt = rt->dst.rt6_next) {
 		if (rt->rt6i_metric != metric) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cont = rt;
 			break;
 		}
@@ -721,20 +772,29 @@ static struct rt6_info *find_rr_leaf(struct fib6_node *fn,
 	}
 
 	for (rt = fn->leaf; rt && rt != rr_head; rt = rt->dst.rt6_next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rt->rt6i_metric != metric) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cont = rt;
 			break;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		match = find_match(rt, oif, strict, &mpri, match, do_rr);
 	}
 
 	if (match || !cont)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return match;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (rt = cont; rt; rt = rt->dst.rt6_next)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		match = find_match(rt, oif, strict, &mpri, match, do_rr);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return match;
 }
 
@@ -755,11 +815,17 @@ static struct rt6_info *rt6_select(struct fib6_node *fn, int oif, int strict)
 		struct rt6_info *next = rt0->dst.rt6_next;
 
 		/* no entries matched; do round-robin */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!next || next->rt6i_metric != rt0->rt6i_metric)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			next = fn->leaf;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (next != rt0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fn->rr_ptr = next;
+}
 	}
 
 	net = dev_net(rt0->dst.dev);
@@ -768,6 +834,7 @@ static struct rt6_info *rt6_select(struct fib6_node *fn, int oif, int strict)
 
 static bool rt6_is_gw_or_nonexthop(const struct rt6_info *rt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (rt->rt6i_flags & (RTF_NONEXTHOP | RTF_GATEWAY));
 }
 
@@ -907,6 +974,7 @@ struct rt6_info *rt6_lookup(struct net *net, const struct in6_addr *daddr,
 		.daddr = *daddr,
 	};
 	struct dst_entry *dst;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int flags = strict ? RT6_LOOKUP_F_IFACE : 0;
 
 	if (saddr) {
@@ -990,7 +1058,9 @@ static struct rt6_info *ip6_rt_cache_alloc(struct rt6_info *ort,
 	 */
 
 	if (ort->rt6i_flags & (RTF_CACHE | RTF_PCPU))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ort = (struct rt6_info *)ort->dst.from;
+}
 
 	rcu_read_lock();
 	dev = ip6_rt_get_dev_rcu(ort);
@@ -1031,7 +1101,9 @@ static struct rt6_info *ip6_rt_pcpu_alloc(struct rt6_info *rt)
 	pcpu_rt = __ip6_dst_alloc(dev_net(dev), dev, rt->dst.flags);
 	rcu_read_unlock();
 	if (!pcpu_rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	ip6_rt_copy_init(pcpu_rt, rt);
 	pcpu_rt->rt6i_protocol = rt->rt6i_protocol;
 	pcpu_rt->rt6i_flags |= RTF_PCPU;
@@ -1060,6 +1132,7 @@ static struct rt6_info *rt6_make_pcpu_route(struct rt6_info *rt)
 
 	pcpu_rt = ip6_rt_pcpu_alloc(rt);
 	if (!pcpu_rt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct net *net = dev_net(rt->dst.dev);
 
 		dst_hold(&net->ipv6.ip6_null_entry->dst);
@@ -1109,16 +1182,22 @@ struct rt6_info *ip6_pol_route(struct net *net, struct fib6_table *table,
 	saved_fn = fn;
 
 	if (fl6->flowi6_flags & FLOWI_FLAG_SKIP_NH_OIF)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		oif = 0;
+}
 
 redo_rt6_select:
 	rt = rt6_select(fn, oif, strict);
 	if (rt->rt6i_nsiblings)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt = rt6_multipath_select(rt, fl6, oif, strict);
+}
 	if (rt == net->ipv6.ip6_null_entry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fn = fib6_backtrack(fn, &fl6->saddr);
 		if (fn)
 			goto redo_rt6_select;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (strict & RT6_LOOKUP_F_REACHABLE) {
 			/* also consider unreachable route */
 			strict &= ~RT6_LOOKUP_F_REACHABLE;
@@ -1129,6 +1208,7 @@ struct rt6_info *ip6_pol_route(struct net *net, struct fib6_table *table,
 
 
 	if (rt == net->ipv6.ip6_null_entry || (rt->rt6i_flags & RTF_CACHE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_use(&rt->dst, jiffies);
 		read_unlock_bh(&table->tb6_lock);
 
@@ -1158,10 +1238,12 @@ struct rt6_info *ip6_pol_route(struct net *net, struct fib6_table *table,
 			 */
 			rt6_uncached_list_add(uncached_rt);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uncached_rt = net->ipv6.ip6_null_entry;
 			dst_hold(&uncached_rt->dst);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		trace_fib6_table_lookup(net, uncached_rt, table->tb6_id, fl6);
 		return uncached_rt;
 
@@ -1197,6 +1279,7 @@ EXPORT_SYMBOL_GPL(ip6_pol_route);
 static struct rt6_info *ip6_pol_route_input(struct net *net, struct fib6_table *table,
 					    struct flowi6 *fl6, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ip6_pol_route(net, table, fl6->flowi6_iif, fl6, flags);
 }
 
@@ -1204,6 +1287,7 @@ struct dst_entry *ip6_route_input_lookup(struct net *net,
 					 struct net_device *dev,
 					 struct flowi6 *fl6, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rt6_need_strict(&fl6->daddr) && dev->type != ARPHRD_PIMREG)
 		flags |= RT6_LOOKUP_F_IFACE;
 
@@ -1214,6 +1298,7 @@ EXPORT_SYMBOL_GPL(ip6_route_input_lookup);
 static void ip6_multipath_l3_keys(const struct sk_buff *skb,
 				  struct flow_keys *keys)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6hdr *outer_iph = ipv6_hdr(skb);
 	const struct ipv6hdr *key_iph = outer_iph;
 	const struct ipv6hdr *inner_iph;
@@ -1223,6 +1308,7 @@ static void ip6_multipath_l3_keys(const struct sk_buff *skb,
 	if (likely(outer_iph->nexthdr != IPPROTO_ICMPV6))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	icmph = icmp6_hdr(skb);
 	if (icmph->icmp6_type != ICMPV6_DEST_UNREACH &&
 	    icmph->icmp6_type != ICMPV6_PKT_TOOBIG &&
@@ -1236,6 +1322,7 @@ static void ip6_multipath_l3_keys(const struct sk_buff *skb,
 	if (!inner_iph)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_iph = inner_iph;
 out:
 	memset(keys, 0, sizeof(*keys));
@@ -1256,11 +1343,13 @@ u32 rt6_multipath_hash(const struct flowi6 *fl6, const struct sk_buff *skb)
 		return flow_hash_from_keys(&hash_keys);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return get_hash_from_flowi6(fl6);
 }
 
 void ip6_route_input(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6hdr *iph = ipv6_hdr(skb);
 	struct net *net = dev_net(skb->dev);
 	int flags = RT6_LOOKUP_F_HAS_SADDR;
@@ -1299,7 +1388,9 @@ struct dst_entry *ip6_route_output_flags(struct net *net, const struct sock *sk,
 
 		dst = l3mdev_link_scope_lookup(net, fl6);
 		if (dst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return dst;
+}
 	}
 
 	fl6->flowi6_iif = LOOPBACK_IFINDEX;
@@ -1327,6 +1418,7 @@ struct dst_entry *ip6_blackhole_route(struct net *net, struct dst_entry *dst_ori
 	rt = dst_alloc(&ip6_dst_blackhole_ops, loopback_dev, 1,
 		       DST_OBSOLETE_DEAD, 0);
 	if (rt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt6_info_init(rt);
 
 		new = &rt->dst;
@@ -1367,10 +1459,14 @@ static struct dst_entry *rt6_check(struct rt6_info *rt, u32 cookie)
 	u32 rt_cookie = 0;
 
 	if (!rt6_get_cookie_safe(rt, &rt_cookie) || rt_cookie != cookie)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (rt6_check_expired(rt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	return &rt->dst;
 }
@@ -1410,6 +1506,7 @@ static struct dst_entry *ip6_negative_advice(struct dst_entry *dst)
 	struct rt6_info *rt = (struct rt6_info *) dst;
 
 	if (rt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rt->rt6i_flags & RTF_CACHE) {
 			if (rt6_check_expired(rt)) {
 				ip6_del_rt(rt);
@@ -1431,6 +1528,7 @@ static void ip6_link_failure(struct sk_buff *skb)
 
 	rt = (struct rt6_info *) skb_dst(skb);
 	if (rt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rt->rt6i_flags & RTF_CACHE) {
 			if (dst_hold_safe(&rt->dst))
 				ip6_del_rt(rt);
@@ -1448,6 +1546,7 @@ static void ip6_link_failure(struct sk_buff *skb)
 
 static void rt6_do_update_pmtu(struct rt6_info *rt, u32 mtu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(rt->dst.dev);
 
 	rt->rt6i_flags |= RTF_MODIFIED;
@@ -1457,6 +1556,7 @@ static void rt6_do_update_pmtu(struct rt6_info *rt, u32 mtu)
 
 static bool rt6_cache_allowed_for_pmtu(const struct rt6_info *rt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !(rt->rt6i_flags & RTF_CACHE) &&
 		(rt->rt6i_flags & RTF_PCPU ||
 		 rcu_access_pointer(rt->rt6i_node));
@@ -1469,7 +1569,9 @@ static void __ip6_rt_update_pmtu(struct dst_entry *dst, const struct sock *sk,
 	struct rt6_info *rt6 = (struct rt6_info *)dst;
 
 	if (rt6->rt6i_flags & RTF_LOCAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (dst_metric_locked(dst, RTAX_MTU))
 		return;
@@ -1515,6 +1617,7 @@ static void __ip6_rt_update_pmtu(struct dst_entry *dst, const struct sock *sk,
 static void ip6_rt_update_pmtu(struct dst_entry *dst, struct sock *sk,
 			       struct sk_buff *skb, u32 mtu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__ip6_rt_update_pmtu(dst, sk, skb ? ipv6_hdr(skb) : NULL, mtu);
 }
 
@@ -1527,6 +1630,7 @@ void ip6_update_pmtu(struct sk_buff *skb, struct net *net, __be32 mtu,
 
 	memset(&fl6, 0, sizeof(fl6));
 	fl6.flowi6_oif = oif;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fl6.flowi6_mark = mark ? mark : IP6_REPLY_MARK(net, skb->mark);
 	fl6.daddr = iph->daddr;
 	fl6.saddr = iph->saddr;
@@ -1548,6 +1652,7 @@ void ip6_sk_update_pmtu(struct sk_buff *skb, struct sock *sk, __be32 mtu)
 			sk->sk_bound_dev_if, sk->sk_mark, sk->sk_uid);
 
 	dst = __sk_dst_get(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dst || !dst->obsolete ||
 	    dst->ops->check(dst, inet6_sk(sk)->dst_cookie))
 		return;
@@ -1662,6 +1767,7 @@ EXPORT_SYMBOL_GPL(ip6_redirect);
 void ip6_redirect_no_header(struct sk_buff *skb, struct net *net, int oif,
 			    u32 mark)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6hdr *iph = ipv6_hdr(skb);
 	const struct rd_msg *msg = (struct rd_msg *)icmp6_hdr(skb);
 	struct dst_entry *dst;
@@ -1682,6 +1788,7 @@ void ip6_redirect_no_header(struct sk_buff *skb, struct net *net, int oif,
 
 void ip6_sk_redirect(struct sk_buff *skb, struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ip6_redirect(skb, sock_net(sk), sk->sk_bound_dev_if, sk->sk_mark,
 		     sk->sk_uid);
 }
@@ -1696,7 +1803,9 @@ static unsigned int ip6_default_advmss(const struct dst_entry *dst)
 	mtu -= sizeof(struct ipv6hdr) + sizeof(struct tcphdr);
 
 	if (mtu < net->ipv6.sysctl.ip6_rt_min_advmss)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mtu = net->ipv6.sysctl.ip6_rt_min_advmss;
+}
 
 	/*
 	 * Maximal non-jumbo IPv6 payload is IPV6_MAXPLEN and
@@ -1705,7 +1814,9 @@ static unsigned int ip6_default_advmss(const struct dst_entry *dst)
 	 * rely only on pmtu discovery"
 	 */
 	if (mtu > IPV6_MAXPLEN - sizeof(struct tcphdr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mtu = IPV6_MAXPLEN;
+}
 	return mtu;
 }
 
@@ -1718,16 +1829,19 @@ static unsigned int ip6_mtu(const struct dst_entry *dst)
 	if (mtu)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mtu = dst_metric_raw(dst, RTAX_MTU);
 	if (mtu)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mtu = IPV6_MIN_MTU;
 
 	rcu_read_lock();
 	idev = __in6_dev_get(dst->dev);
 	if (idev)
 		mtu = idev->cnf.mtu6;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 out:
@@ -1745,10 +1859,13 @@ struct dst_entry *icmp6_dst_alloc(struct net_device *dev,
 	struct net *net = dev_net(dev);
 
 	if (unlikely(!idev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENODEV);
+}
 
 	rt = ip6_dst_alloc(net, dev, 0);
 	if (unlikely(!rt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		in6_dev_put(idev);
 		dst = ERR_PTR(-ENOMEM);
 		goto out;
@@ -1776,6 +1893,7 @@ struct dst_entry *icmp6_dst_alloc(struct net_device *dev,
 
 static int ip6_dst_gc(struct dst_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = container_of(ops, struct net, ipv6.ip6_dst_ops);
 	int rt_min_interval = net->ipv6.sysctl.ip6_rt_gc_min_interval;
 	int rt_max_size = net->ipv6.sysctl.ip6_rt_max_size;
@@ -1808,21 +1926,30 @@ static int ip6_convert_metrics(struct mx6_config *mxc,
 	u32 *mp;
 
 	if (!cfg->fc_mx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mp = kzalloc(sizeof(u32) * RTAX_MAX, GFP_KERNEL);
 	if (unlikely(!mp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nla_for_each_attr(nla, cfg->fc_mx, cfg->fc_mx_len, remaining) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int type = nla_type(nla);
 		u32 val;
 
 		if (!type)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unlikely(type > RTAX_MAX))
 			goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (type == RTAX_CC_ALGO) {
 			char tmp[TCP_CA_NAME_MAX];
 
@@ -1831,22 +1958,31 @@ static int ip6_convert_metrics(struct mx6_config *mxc,
 			if (val == TCP_CA_UNSPEC)
 				goto err;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = nla_get_u32(nla);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (type == RTAX_HOPLIMIT && val > 255)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			val = 255;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (type == RTAX_FEATURES && (val & ~RTAX_FEATURE_MASK))
 			goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mp[type - 1] = val;
 		__set_bit(type - 1, mxc->mx_valid);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ecn_ca) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__set_bit(RTAX_FEATURES - 1, mxc->mx_valid);
 		mp[RTAX_FEATURES - 1] |= DST_FEATURE_ECN_CA;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mxc->mx = mp;
 	return 0;
  err:
@@ -1869,7 +2005,9 @@ static struct rt6_info *ip6_nh_lookup_table(struct net *net,
 
 	table = fib6_get_table(net, cfg->fc_table);
 	if (!table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (!ipv6_addr_any(&cfg->fc_prefsrc))
 		flags |= RT6_LOOKUP_F_HAS_SADDR;
@@ -1898,26 +2036,31 @@ static struct rt6_info *ip6_route_info_create(struct fib6_config *cfg,
 
 	/* RTF_PCPU is an internal flag; can not be set by userspace */
 	if (cfg->fc_flags & RTF_PCPU) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NL_SET_ERR_MSG(extack, "Userspace can not set RTF_PCPU");
 		goto out;
 	}
 
 	if (cfg->fc_dst_len > 128) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NL_SET_ERR_MSG(extack, "Invalid prefix length");
 		goto out;
 	}
 	if (cfg->fc_src_len > 128) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NL_SET_ERR_MSG(extack, "Invalid source address length");
 		goto out;
 	}
 #ifndef CONFIG_IPV6_SUBTREES
 	if (cfg->fc_src_len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NL_SET_ERR_MSG(extack,
 			       "Specifying source address requires IPV6_SUBTREES to be enabled");
 		goto out;
 	}
 #endif
 	if (cfg->fc_ifindex) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENODEV;
 		dev = dev_get_by_index(net, cfg->fc_ifindex);
 		if (!dev)
@@ -1928,13 +2071,18 @@ static struct rt6_info *ip6_route_info_create(struct fib6_config *cfg,
 	}
 
 	if (cfg->fc_metric == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cfg->fc_metric = IP6_RT_PRIO_USER;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENOBUFS;
 	if (cfg->fc_nlinfo.nlh &&
 	    !(cfg->fc_nlinfo.nlh->nlmsg_flags & NLM_F_CREATE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table = fib6_get_table(net, cfg->fc_table);
 		if (!table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn("NLM_F_CREATE should be specified when creating new route\n");
 			table = fib6_new_table(net, cfg->fc_table);
 		}
@@ -1949,6 +2097,7 @@ static struct rt6_info *ip6_route_info_create(struct fib6_config *cfg,
 			   (cfg->fc_flags & RTF_ADDRCONF) ? 0 : DST_NOCOUNT);
 
 	if (!rt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOMEM;
 		goto out;
 	}
@@ -1968,7 +2117,9 @@ static struct rt6_info *ip6_route_info_create(struct fib6_config *cfg,
 	if (addr_type & IPV6_ADDR_MULTICAST)
 		rt->dst.input = ip6_mc_input;
 	else if (cfg->fc_flags & RTF_LOCAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt->dst.input = ip6_input;
+}
 	else
 		rt->dst.input = ip6_forward;
 
@@ -1982,12 +2133,16 @@ static struct rt6_info *ip6_route_info_create(struct fib6_config *cfg,
 					   &lwtstate, extack);
 		if (err)
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt->dst.lwtstate = lwtstate_get(lwtstate);
 		if (lwtunnel_output_redirect(rt->dst.lwtstate)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rt->dst.lwtstate->orig_output = rt->dst.output;
 			rt->dst.output = lwtunnel_output;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (lwtunnel_input_redirect(rt->dst.lwtstate)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rt->dst.lwtstate->orig_input = rt->dst.input;
 			rt->dst.input = lwtunnel_input;
 		}
@@ -1996,7 +2151,9 @@ static struct rt6_info *ip6_route_info_create(struct fib6_config *cfg,
 	ipv6_addr_prefix(&rt->rt6i_dst.addr, &cfg->fc_dst, cfg->fc_dst_len);
 	rt->rt6i_dst.plen = cfg->fc_dst_len;
 	if (rt->rt6i_dst.plen == 128)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt->dst.flags |= DST_HOST;
+}
 
 #ifdef CONFIG_IPV6_SUBTREES
 	ipv6_addr_prefix(&rt->rt6i_src.addr, &cfg->fc_src, cfg->fc_src_len);
@@ -2014,18 +2171,23 @@ static struct rt6_info *ip6_route_info_create(struct fib6_config *cfg,
 	     !(cfg->fc_flags & RTF_LOCAL))) {
 		/* hold loopback dev/idev if we haven't done so. */
 		if (dev != net->loopback_dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev_put(dev);
 				in6_dev_put(idev);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev = net->loopback_dev;
 			dev_hold(dev);
 			idev = in6_dev_get(dev);
 			if (!idev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -ENODEV;
 				goto out;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt->rt6i_flags = RTF_REJECT|RTF_NONEXTHOP;
 		switch (cfg->fc_type) {
 		case RTN_BLACKHOLE:
@@ -2067,9 +2229,11 @@ static struct rt6_info *ip6_route_info_create(struct fib6_config *cfg,
 		if (ipv6_chk_addr_and_flags(net, gw_addr,
 					    gwa_type & IPV6_ADDR_LINKLOCAL ?
 					    dev : NULL, 0, 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack, "Invalid gateway address");
 			goto out;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt->rt6i_gateway = *gw_addr;
 
 		if (gwa_type != (IPV6_ADDR_LINKLOCAL|IPV6_ADDR_UNICAST)) {
@@ -2086,69 +2250,94 @@ static struct rt6_info *ip6_route_info_create(struct fib6_config *cfg,
 			 */
 			if (!(gwa_type & (IPV6_ADDR_UNICAST |
 					  IPV6_ADDR_MAPPED))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				NL_SET_ERR_MSG(extack,
 					       "Invalid gateway address");
 				goto out;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (cfg->fc_table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				grt = ip6_nh_lookup_table(net, cfg, gw_addr);
 
 				if (grt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					if (grt->rt6i_flags & RTF_GATEWAY ||
 					    (dev && dev != grt->dst.dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						ip6_rt_put(grt);
 						grt = NULL;
 					}
 				}
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!grt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				grt = rt6_lookup(net, gw_addr, NULL,
 						 cfg->fc_ifindex, 1);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EHOSTUNREACH;
 			if (!grt)
 				goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (dev != grt->dst.dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ip6_rt_put(grt);
 					goto out;
 				}
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dev = grt->dst.dev;
 				idev = grt->rt6i_idev;
 				dev_hold(dev);
 				in6_dev_hold(grt->rt6i_idev);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!(grt->rt6i_flags & RTF_GATEWAY))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ip6_rt_put(grt);
 
 			if (err)
 				goto out;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		if (!dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack, "Egress device not specified");
 			goto out;
 		} else if (dev->flags & IFF_LOOPBACK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack,
 				       "Egress device can not be loopback device for this route");
 			goto out;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENODEV;
 	if (!dev)
 		goto out;
 
 	if (!ipv6_addr_any(&cfg->fc_prefsrc)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ipv6_chk_addr(net, &cfg->fc_prefsrc, dev, 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			NL_SET_ERR_MSG(extack, "Invalid source address");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
 			goto out;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt->rt6i_prefsrc.addr = cfg->fc_prefsrc;
 		rt->rt6i_prefsrc.plen = 128;
 	} else
@@ -2166,12 +2355,21 @@ static struct rt6_info *ip6_route_info_create(struct fib6_config *cfg,
 	return rt;
 out:
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_put(dev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		in6_dev_put(idev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_release_immediate(&rt->dst);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(err);
 }
 
@@ -2184,6 +2382,7 @@ int ip6_route_add(struct fib6_config *cfg,
 
 	rt = ip6_route_info_create(cfg, extack);
 	if (IS_ERR(rt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(rt);
 		rt = NULL;
 		goto out;
@@ -2200,8 +2399,11 @@ int ip6_route_add(struct fib6_config *cfg,
 	return err;
 out:
 	if (rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_release_immediate(&rt->dst);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -2212,6 +2414,7 @@ static int __ip6_del_rt(struct rt6_info *rt, struct nl_info *info)
 	struct net *net = dev_net(rt->dst.dev);
 
 	if (rt == net->ipv6.ip6_null_entry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOENT;
 		goto out;
 	}
@@ -2244,6 +2447,7 @@ static int __ip6_del_rt_siblings(struct rt6_info *rt, struct fib6_config *cfg)
 
 	if (rt == net->ipv6.ip6_null_entry)
 		goto out_put;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	table = rt->rt6i_table;
 	write_lock_bh(&table->tb6_lock);
 
@@ -2296,6 +2500,7 @@ static int ip6_route_del(struct fib6_config *cfg,
 
 	table = fib6_get_table(cfg->fc_nlinfo.nl_net, cfg->fc_table);
 	if (!table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NL_SET_ERR_MSG(extack, "FIB table does not exist");
 		return err;
 	}
@@ -2352,6 +2557,7 @@ static void rt6_do_redirect(struct dst_entry *dst, struct sock *sk, struct sk_bu
 	optlen -= sizeof(*msg);
 
 	if (optlen < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_dbg_ratelimited("rt6_do_redirect: packet too short\n");
 		return;
 	}
@@ -2482,7 +2688,9 @@ static void ip6_rt_copy_init(struct rt6_info *rt, struct rt6_info *ort)
 	rt->dst.error = ort->dst.error;
 	rt->rt6i_idev = ort->rt6i_idev;
 	if (rt->rt6i_idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		in6_dev_hold(rt->rt6i_idev);
+}
 	rt->dst.lastuse = jiffies;
 	rt->rt6i_gateway = ort->rt6i_gateway;
 	rt->rt6i_flags = ort->rt6i_flags;
@@ -2566,6 +2774,7 @@ static struct rt6_info *rt6_add_route_info(struct net *net,
 
 struct rt6_info *rt6_get_dflt_router(const struct in6_addr *addr, struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 tb_id = l3mdev_fib_table(dev) ? : RT6_TABLE_DFLT;
 	struct rt6_info *rt;
 	struct fib6_table *table;
@@ -2644,6 +2853,7 @@ void rt6_purge_dflt_routers(struct net *net)
 
 	rcu_read_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (h = 0; h < FIB6_TABLE_HASHSZ; h++) {
 		head = &net->ipv6.fib_table_hash[h];
 		hlist_for_each_entry_rcu(table, head, tb6_hlist) {
@@ -2659,6 +2869,7 @@ static void rtmsg_to_fib6_config(struct net *net,
 				 struct in6_rtmsg *rtmsg,
 				 struct fib6_config *cfg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(cfg, 0, sizeof(*cfg));
 
 	cfg->fc_table = l3mdev_fib_table_by_index(net, rtmsg->rtmsg_ifindex) ?
@@ -2743,22 +2954,26 @@ static int ip6_pkt_drop(struct sk_buff *skb, u8 code, int ipstats_mib_noroutes)
 
 static int ip6_pkt_discard(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ip6_pkt_drop(skb, ICMPV6_NOROUTE, IPSTATS_MIB_INNOROUTES);
 }
 
 static int ip6_pkt_discard_out(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb->dev = skb_dst(skb)->dev;
 	return ip6_pkt_drop(skb, ICMPV6_NOROUTE, IPSTATS_MIB_OUTNOROUTES);
 }
 
 static int ip6_pkt_prohibit(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ip6_pkt_drop(skb, ICMPV6_ADM_PROHIBITED, IPSTATS_MIB_INNOROUTES);
 }
 
 static int ip6_pkt_prohibit_out(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb->dev = skb_dst(skb)->dev;
 	return ip6_pkt_drop(skb, ICMPV6_ADM_PROHIBITED, IPSTATS_MIB_OUTNOROUTES);
 }
@@ -2778,8 +2993,11 @@ struct rt6_info *addrconf_dst_alloc(struct inet6_dev *idev,
 
 	rt = ip6_dst_alloc(net, dev, DST_NOCOUNT);
 	if (!rt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	in6_dev_hold(idev);
 
 	rt->dst.flags |= DST_HOST;
@@ -2790,7 +3008,9 @@ struct rt6_info *addrconf_dst_alloc(struct inet6_dev *idev,
 	rt->rt6i_protocol = RTPROT_KERNEL;
 	rt->rt6i_flags = RTF_UP | RTF_NONEXTHOP;
 	if (anycast)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rt->rt6i_flags |= RTF_ANYCAST;
+}
 	else
 		rt->rt6i_flags |= RTF_LOCAL;
 
@@ -2816,6 +3036,7 @@ static int fib6_remove_prefsrc(struct rt6_info *rt, void *arg)
 	struct net *net = ((struct arg_dev_net_ip *)arg)->net;
 	struct in6_addr *addr = ((struct arg_dev_net_ip *)arg)->addr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (((void *)rt->dst.dev == dev || !dev) &&
 	    rt != net->ipv6.ip6_null_entry &&
 	    ipv6_addr_equal(addr, &rt->rt6i_prefsrc.addr)) {
@@ -2827,6 +3048,7 @@ static int fib6_remove_prefsrc(struct rt6_info *rt, void *arg)
 
 void rt6_remove_prefsrc(struct inet6_ifaddr *ifp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(ifp->idev->dev);
 	struct arg_dev_net_ip adni = {
 		.dev = ifp->idev->dev,
@@ -2854,6 +3076,7 @@ static int fib6_clean_tohost(struct rt6_info *rt, void *arg)
 
 void rt6_clean_tohost(struct net *net, struct in6_addr *gateway)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fib6_clean_all(net, fib6_clean_tohost, gateway);
 }
 
@@ -2875,6 +3098,7 @@ static int fib6_ifdown(struct rt6_info *rt, void *arg)
 	     !rt->rt6i_idev->cnf.ignore_routes_with_linkdown))
 		return -1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -2908,7 +3132,9 @@ static int rt6_mtu_change_route(struct rt6_info *rt, void *p_arg)
 
 	idev = __in6_dev_get(arg->dev);
 	if (!idev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* For administrative MTU increase, there is no way to discover
 	   IPv6 PMTU increase, so PMTU increase should be updated here.
@@ -2983,6 +3209,7 @@ static int rtm_to_fib6_config(struct sk_buff *skb, struct nlmsghdr *nlh,
 	if (err < 0)
 		goto errout;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EINVAL;
 	rtm = nlmsg_data(nlh);
 	memset(cfg, 0, sizeof(*cfg));
@@ -3104,6 +3331,7 @@ static void ip6_print_replace_route_err(struct list_head *rt6_nh_list)
 {
 	struct rt6_nh *nh;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(nh, rt6_nh_list, next) {
 		pr_warn("IPV6: multipath route replace failed (check consistency of installed routes): %pI6c nexthop %pI6c ifi %d\n",
 		        &nh->r_cfg.fc_dst, &nh->r_cfg.fc_gateway,
@@ -3117,6 +3345,7 @@ static int ip6_route_info_append(struct list_head *rt6_nh_list,
 	struct rt6_nh *nh;
 	int err = -EEXIST;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(nh, rt6_nh_list, next) {
 		/* check if rt6_info already exists */
 		if (rt6_duplicate_nexthop(nh->rt6_info, rt))
@@ -3174,6 +3403,7 @@ static int ip6_route_multipath_add(struct fib6_config *cfg,
 	int attrlen;
 	int err = 1;
 	int nhn = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int replace = (cfg->fc_nlinfo.nlh &&
 		       (cfg->fc_nlinfo.nlh->nlmsg_flags & NLM_F_REPLACE));
 	LIST_HEAD(rt6_nh_list);
@@ -3336,7 +3566,9 @@ static int inet6_rtm_delroute(struct sk_buff *skb, struct nlmsghdr *nlh,
 
 	err = rtm_to_fib6_config(skb, nlh, &cfg, extack);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (cfg.fc_mp)
 		return ip6_route_multipath_del(&cfg, extack);
@@ -3354,7 +3586,9 @@ static int inet6_rtm_newroute(struct sk_buff *skb, struct nlmsghdr *nlh,
 
 	err = rtm_to_fib6_config(skb, nlh, &cfg, extack);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (cfg.fc_mp)
 		return ip6_route_multipath_add(&cfg, extack);
@@ -3367,6 +3601,7 @@ static size_t rt6_nlmsg_size(struct rt6_info *rt)
 	int nexthop_len = 0;
 
 	if (rt->rt6i_nsiblings) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nexthop_len = nla_total_size(0)	 /* RTA_MULTIPATH */
 			    + NLA_ALIGN(sizeof(struct rtnexthop))
 			    + nla_total_size(16) /* RTA_GATEWAY */
@@ -3398,16 +3633,21 @@ static int rt6_nexthop_info(struct sk_buff *skb, struct rt6_info *rt,
 	if (!netif_running(rt->dst.dev) || !netif_carrier_ok(rt->dst.dev)) {
 		*flags |= RTNH_F_LINKDOWN;
 		if (rt->rt6i_idev->cnf.ignore_routes_with_linkdown)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*flags |= RTNH_F_DEAD;
+}
 	}
 
 	if (rt->rt6i_flags & RTF_GATEWAY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (nla_put_in6_addr(skb, RTA_GATEWAY, &rt->rt6i_gateway) < 0)
 			goto nla_put_failure;
 	}
 
 	if (rt->rt6i_nh_flags & RTNH_F_OFFLOAD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*flags |= RTNH_F_OFFLOAD;
+}
 
 	/* not needed for multipath encoding b/c it has a rtnexthop struct */
 	if (!skip_oif && rt->dst.dev &&
@@ -3418,6 +3658,7 @@ static int rt6_nexthop_info(struct sk_buff *skb, struct rt6_info *rt,
 	    lwtunnel_fill_encap(skb, rt->dst.lwtstate) < 0)
 		goto nla_put_failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 nla_put_failure:
@@ -3434,6 +3675,7 @@ static int rt6_add_nexthop(struct sk_buff *skb, struct rt6_info *rt)
 	if (!rtnh)
 		goto nla_put_failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtnh->rtnh_hops = 0;
 	rtnh->rtnh_ifindex = rt->dst.dev ? rt->dst.dev->ifindex : 0;
 
@@ -3465,8 +3707,11 @@ static int rt6_fill_node(struct net *net,
 
 	nlh = nlmsg_put(skb, portid, seq, type, sizeof(*rtm), flags);
 	if (!nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtm = nlmsg_data(nlh);
 	rtm->rtm_family = AF_INET6;
 	rtm->rtm_dst_len = rt->rt6i_dst.plen;
@@ -3480,6 +3725,7 @@ static int rt6_fill_node(struct net *net,
 	if (nla_put_u32(skb, RTA_TABLE, table))
 		goto nla_put_failure;
 	if (rt->rt6i_flags & RTF_REJECT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (rt->dst.error) {
 		case -EINVAL:
 			rtm->rtm_type = RTN_BLACKHOLE;
@@ -3498,9 +3744,13 @@ static int rt6_fill_node(struct net *net,
 	else if (rt->rt6i_flags & RTF_LOCAL)
 		rtm->rtm_type = RTN_LOCAL;
 	else if (rt->rt6i_flags & RTF_ANYCAST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtm->rtm_type = RTN_ANYCAST;
+}
 	else if (rt->dst.dev && (rt->dst.dev->flags & IFF_LOOPBACK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtm->rtm_type = RTN_LOCAL;
+}
 	else
 		rtm->rtm_type = RTN_UNICAST;
 	rtm->rtm_flags = 0;
@@ -3508,11 +3758,15 @@ static int rt6_fill_node(struct net *net,
 	rtm->rtm_protocol = rt->rt6i_protocol;
 
 	if (rt->rt6i_flags & RTF_CACHE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtm->rtm_flags |= RTM_F_CLONED;
+}
 
 	if (dst) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (nla_put_in6_addr(skb, RTA_DST, dst))
 			goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtm->rtm_dst_len = 128;
 	} else if (rtm->rtm_dst_len)
 		if (nla_put_in6_addr(skb, RTA_DST, &rt->rt6i_dst.addr))
@@ -3553,9 +3807,12 @@ static int rt6_fill_node(struct net *net,
 			goto nla_put_failure;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(metrics, dst_metrics_ptr(&rt->dst), sizeof(metrics));
 	if (rt->rt6i_pmtu)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		metrics[RTAX_MTU - 1] = rt->rt6i_pmtu;
+}
 	if (rtnetlink_put_metrics(skb, metrics) < 0)
 		goto nla_put_failure;
 
@@ -3573,15 +3830,19 @@ static int rt6_fill_node(struct net *net,
 		if (!mp)
 			goto nla_put_failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (rt6_add_nexthop(skb, rt) < 0)
 			goto nla_put_failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_for_each_entry_safe(sibling, next_sibling,
 					 &rt->rt6i_siblings, rt6i_siblings) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (rt6_add_nexthop(skb, sibling) < 0)
 				goto nla_put_failure;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nla_nest_end(skb, mp);
 	} else {
 		if (rt6_nexthop_info(skb, rt, &rtm->rtm_flags, false) < 0)
@@ -3611,7 +3872,9 @@ int rt6_dump_route(struct rt6_info *rt, void *p_arg)
 	struct net *net = arg->net;
 
 	if (rt == net->ipv6.ip6_null_entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (nlmsg_len(arg->cb->nlh) >= sizeof(struct rtmsg)) {
 		struct rtmsg *rtm = nlmsg_data(arg->cb->nlh);
@@ -3854,6 +4117,7 @@ static int rt6_stats_seq_show(struct seq_file *seq, void *v)
 
 static int rt6_stats_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open_net(inode, file, rt6_stats_seq_show);
 }
 
@@ -3875,7 +4139,9 @@ int ipv6_sysctl_rtcache_flush(struct ctl_table *ctl, int write,
 	struct net *net;
 	int delay;
 	if (!write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	net = (struct net *)ctl->extra1;
 	delay = net->ipv6.sysctl.flush_delay;
@@ -3981,7 +4247,9 @@ struct ctl_table * __net_init ipv6_route_sysctl_init(struct net *net)
 
 		/* Don't export sysctls to unprivileged users */
 		if (net->user_ns != &init_user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			table[0].procname = NULL;
+}
 	}
 
 	return table;
@@ -4095,10 +4363,13 @@ static struct pernet_operations ip6_route_net_ops = {
 
 static int __net_init ipv6_inetpeer_init(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_peer_base *bp = kmalloc(sizeof(*bp), GFP_KERNEL);
 
 	if (!bp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	inet_peer_base_init(bp);
 	net->ipv6.peers = bp;
 	return 0;
@@ -4185,6 +4456,7 @@ int __init ip6_route_init(void)
 	if (ret)
 		goto fib6_rules_init;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -ENOBUFS;
 	if (__rtnl_register(PF_INET6, RTM_NEWROUTE, inet6_rtm_newroute, NULL, 0) ||
 	    __rtnl_register(PF_INET6, RTM_DELROUTE, inet6_rtm_delroute, NULL, 0) ||
@@ -4227,6 +4499,7 @@ int __init ip6_route_init(void)
 
 void ip6_route_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_netdevice_notifier(&ip6_route_dev_notifier);
 	unregister_pernet_subsys(&ip6_route_net_late_ops);
 	fib6_rules_cleanup();
diff --git a/net/ipv6/seg6.c b/net/ipv6/seg6.c
index c814077..8ee903e 100644
--- a/net/ipv6/seg6.c
+++ b/net/ipv6/seg6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  SR-IPv6 implementation
  *
@@ -35,7 +37,9 @@ bool seg6_validate_srh(struct ipv6_sr_hdr *srh, int len)
 	unsigned int tlv_offset;
 
 	if (srh->type != IPV6_SRCRT_TYPE_4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	if (((srh->hdrlen + 1) << 3) != len)
 		return false;
@@ -161,6 +165,7 @@ static int seg6_genl_sethmac(struct sk_buff *skb, struct genl_info *info)
 
 static int seg6_genl_sethmac(struct sk_buff *skb, struct genl_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOTSUPP;
 }
 
@@ -168,6 +173,7 @@ static int seg6_genl_sethmac(struct sk_buff *skb, struct genl_info *info)
 
 static int seg6_genl_set_tunsrc(struct sk_buff *skb, struct genl_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = genl_info_net(info);
 	struct in6_addr *val, *t_old, *t_new;
 	struct seg6_pernet_data *sdata;
@@ -197,6 +203,7 @@ static int seg6_genl_set_tunsrc(struct sk_buff *skb, struct genl_info *info)
 
 static int seg6_genl_get_tunsrc(struct sk_buff *skb, struct genl_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = genl_info_net(info);
 	struct in6_addr *tun_src;
 	struct sk_buff *msg;
@@ -342,16 +349,19 @@ static int seg6_genl_dumphmac(struct sk_buff *skb, struct netlink_callback *cb)
 
 static int seg6_genl_dumphmac_start(struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int seg6_genl_dumphmac_done(struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int seg6_genl_dumphmac(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOTSUPP;
 }
 
@@ -363,12 +373,15 @@ static int __net_init seg6_net_init(struct net *net)
 
 	sdata = kzalloc(sizeof(*sdata), GFP_KERNEL);
 	if (!sdata)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	mutex_init(&sdata->lock);
 
 	sdata->tun_src = kzalloc(sizeof(*sdata->tun_src), GFP_KERNEL);
 	if (!sdata->tun_src) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(sdata);
 		return -ENOMEM;
 	}
@@ -384,6 +397,7 @@ static int __net_init seg6_net_init(struct net *net)
 
 static void __net_exit seg6_net_exit(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct seg6_pernet_data *sdata = seg6_pernet(net);
 
 #ifdef CONFIG_IPV6_SEG6_HMAC
diff --git a/net/ipv6/sysctl_net_ipv6.c b/net/ipv6/sysctl_net_ipv6.c
index f7051ba..6e5c9e5 100644
--- a/net/ipv6/sysctl_net_ipv6.c
+++ b/net/ipv6/sysctl_net_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * sysctl_net_ipv6.c: sysctl interface to net IPV6 subsystem.
@@ -181,6 +183,7 @@ static int __net_init ipv6_sysctl_net_init(struct net *net)
 	if (!net->ipv6.sysctl.icmp_hdr)
 		goto out_unregister_route_table;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 out:
 	return err;
@@ -244,6 +247,7 @@ int ipv6_sysctl_register(void)
 
 void ipv6_sysctl_unregister(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_net_sysctl_table(ip6_header);
 	unregister_pernet_subsys(&ipv6_sysctl_net_ops);
 }
diff --git a/net/ipv6/tcp_ipv6.c b/net/ipv6/tcp_ipv6.c
index 237cc61..f5f51c8 100644
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	TCP over IPv6
  *	Linux INET6 implementation
@@ -90,6 +92,7 @@ static struct tcp_md5sig_key *tcp_v6_md5_do_lookup(const struct sock *sk,
 
 static void inet6_sk_rx_dst_set(struct sock *sk, const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dst_entry *dst = skb_dst(skb);
 
 	if (dst && dst_hold_safe(dst)) {
@@ -132,21 +135,32 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 	struct inet_timewait_death_row *tcp_death_row = &sock_net(sk)->ipv4.tcp_death_row;
 
 	if (addr_len < SIN6_LEN_RFC2133)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (usin->sin6_family != AF_INET6)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(&fl6, 0, sizeof(fl6));
 
 	if (np->sndflow) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl6.flowlabel = usin->sin6_flowinfo&IPV6_FLOWINFO_MASK;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		IP6_ECN_flow_init(fl6.flowlabel);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fl6.flowlabel&IPV6_FLOWLABEL_MASK) {
 			struct ip6_flowlabel *flowlabel;
 			flowlabel = fl6_sock_lookup(sk, fl6.flowlabel);
 			if (!flowlabel)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fl6_sock_release(flowlabel);
 		}
 	}
@@ -156,9 +170,12 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 	 */
 
 	if (ipv6_addr_any(&usin->sin6_addr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ipv6_addr_v4mapped(&sk->sk_v6_rcv_saddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ipv6_addr_set_v4mapped(htonl(INADDR_LOOPBACK),
 					       &usin->sin6_addr);
+}
 		else
 			usin->sin6_addr = in6addr_loopback;
 	}
@@ -166,9 +183,12 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 	addr_type = ipv6_addr_type(&usin->sin6_addr);
 
 	if (addr_type & IPV6_ADDR_MULTICAST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENETUNREACH;
+}
 
 	if (addr_type&IPV6_ADDR_LINKLOCAL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (addr_len >= sizeof(struct sockaddr_in6) &&
 		    usin->sin6_scope_id) {
 			/* If interface is set while binding, indices
@@ -178,16 +198,20 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 			    sk->sk_bound_dev_if != usin->sin6_scope_id)
 				return -EINVAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk->sk_bound_dev_if = usin->sin6_scope_id;
 		}
 
 		/* Connect to link-local address requires an interface */
 		if (!sk->sk_bound_dev_if)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 	}
 
 	if (tp->rx_opt.ts_recent_stamp &&
 	    !ipv6_addr_equal(&sk->sk_v6_daddr, &usin->sin6_addr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tp->rx_opt.ts_recent = 0;
 		tp->rx_opt.ts_recent_stamp = 0;
 		tp->write_seq = 0;
@@ -222,6 +246,7 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 		err = tcp_v4_connect(sk, (struct sockaddr *)&sin, sizeof(sin));
 
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			icsk->icsk_ext_hdr_len = exthdrlen;
 			icsk->icsk_af_ops = &ipv6_specific;
 			sk->sk_backlog_rcv = tcp_v6_do_rcv;
@@ -236,7 +261,9 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 	}
 
 	if (!ipv6_addr_any(&sk->sk_v6_rcv_saddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		saddr = &sk->sk_v6_rcv_saddr;
+}
 
 	fl6.flowi6_proto = IPPROTO_TCP;
 	fl6.daddr = sk->sk_v6_daddr;
@@ -254,11 +281,13 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 
 	dst = ip6_dst_lookup_flow(sk, &fl6, final_p);
 	if (IS_ERR(dst)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(dst);
 		goto failure;
 	}
 
 	if (!saddr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		saddr = &fl6.saddr;
 		sk->sk_v6_rcv_saddr = *saddr;
 	}
@@ -272,8 +301,10 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 
 	icsk->icsk_ext_hdr_len = 0;
 	if (opt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		icsk->icsk_ext_hdr_len = opt->opt_flen +
 					 opt->opt_nflen;
+}
 
 	tp->rx_opt.mss_clamp = IPV6_MIN_MTU - sizeof(struct tcphdr) - sizeof(struct ipv6hdr);
 
@@ -298,7 +329,9 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 	}
 
 	if (tcp_fastopen_defer_connect(sk, &err))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	if (err)
 		goto late_failure;
 
@@ -306,6 +339,7 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 	if (err)
 		goto late_failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 late_failure:
@@ -321,7 +355,9 @@ static void tcp_v6_mtu_reduced(struct sock *sk)
 	struct dst_entry *dst;
 
 	if ((1 << sk->sk_state) & (TCPF_LISTEN | TCPF_CLOSE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	dst = inet6_csk_update_pmtu(sk, tcp_sk(sk)->mtu_info);
 	if (!dst)
@@ -460,6 +496,7 @@ static int tcp_v6_send_synack(const struct sock *sk, struct dst_entry *dst,
 			      struct tcp_fastopen_cookie *foc,
 			      enum tcp_synack_type synack_type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_request_sock *ireq = inet_rsk(req);
 	struct ipv6_pinfo *np = inet6_sk(sk);
 	struct ipv6_txoptions *opt;
@@ -480,8 +517,11 @@ static int tcp_v6_send_synack(const struct sock *sk, struct dst_entry *dst,
 
 		fl6->daddr = ireq->ir_v6_rmt_addr;
 		if (np->repflow && ireq->pktopts)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fl6->flowlabel = ip6_flowlabel(ipv6_hdr(ireq->pktopts));
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock();
 		opt = ireq->ipv6_opt;
 		if (!opt)
@@ -523,7 +563,9 @@ static int tcp_v6_parse_md5_keys(struct sock *sk, int optname,
 	u8 prefixlen;
 
 	if (optlen < sizeof(cmd))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (copy_from_user(&cmd, optval, sizeof(cmd)))
 		return -EFAULT;
@@ -575,6 +617,7 @@ static int tcp_v6_md5_hash_headers(struct tcp_md5sig_pool *hp,
 	/* 1. TCP pseudo-header (RFC2460) */
 	bp->saddr = *saddr;
 	bp->daddr = *daddr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bp->protocol = cpu_to_be32(IPPROTO_TCP);
 	bp->len = cpu_to_be32(nbytes);
 
@@ -598,6 +641,7 @@ static int tcp_v6_md5_hash_hdr(char *md5_hash, const struct tcp_md5sig_key *key,
 	hp = tcp_get_md5sig_pool();
 	if (!hp)
 		goto clear_hash_noput;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	req = hp->md5_req;
 
 	if (crypto_ahash_init(req))
@@ -631,6 +675,7 @@ static int tcp_v6_md5_hash_skb(char *md5_hash,
 	const struct tcphdr *th = tcp_hdr(skb);
 
 	if (sk) { /* valid for establish/request sockets */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		saddr = &sk->sk_v6_rcv_saddr;
 		daddr = &sk->sk_v6_daddr;
 	} else {
@@ -685,15 +730,23 @@ static bool tcp_v6_inbound_md5_hash(const struct sock *sk,
 
 	/* We've parsed the options - do we have a hash? */
 	if (!hash_expected && !hash_location)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (hash_expected && !hash_location) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPMD5NOTFOUND);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!hash_expected && hash_location) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPMD5UNEXPECTED);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
 	}
 
@@ -702,12 +755,16 @@ static bool tcp_v6_inbound_md5_hash(const struct sock *sk,
 				      hash_expected,
 				      NULL, skb);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (genhash || memcmp(hash_location, newhash, 16) != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPMD5FAILURE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_info_ratelimited("MD5 Hash %s for [%pI6c]:%u->[%pI6c]:%u\n",
 				     genhash ? "failed" : "mismatch",
 				     &ip6h->saddr, ntohs(th->source),
 				     &ip6h->daddr, ntohs(th->dest));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
 	}
 #endif
@@ -718,6 +775,7 @@ static void tcp_v6_init_req(struct request_sock *req,
 			    const struct sock *sk_listener,
 			    struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_request_sock *ireq = inet_rsk(req);
 	const struct ipv6_pinfo *np = inet6_sk(sk_listener);
 
@@ -734,6 +792,7 @@ static void tcp_v6_init_req(struct request_sock *req,
 	     np->rxopt.bits.rxinfo ||
 	     np->rxopt.bits.rxoinfo || np->rxopt.bits.rxhlim ||
 	     np->rxopt.bits.rxohlim || np->repflow)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		refcount_inc(&skb->users);
 		ireq->pktopts = skb;
 	}
@@ -778,6 +837,7 @@ static void tcp_v6_send_response(const struct sock *sk, struct sk_buff *skb, u32
 				 int oif, struct tcp_md5sig_key *key, int rst,
 				 u8 tclass, __be32 label)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcphdr *th = tcp_hdr(skb);
 	struct tcphdr *t1;
 	struct sk_buff *buff;
@@ -789,10 +849,14 @@ static void tcp_v6_send_response(const struct sock *sk, struct sk_buff *skb, u32
 	__be32 *topt;
 
 	if (tsecr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tot_len += TCPOLEN_TSTAMP_ALIGNED;
+}
 #ifdef CONFIG_TCP_MD5SIG
 	if (key)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tot_len += TCPOLEN_MD5SIG_ALIGNED;
+}
 #endif
 
 	buff = alloc_skb(MAX_HEADER + sizeof(struct ipv6hdr) + tot_len,
@@ -819,14 +883,18 @@ static void tcp_v6_send_response(const struct sock *sk, struct sk_buff *skb, u32
 	topt = (__be32 *)(t1 + 1);
 
 	if (tsecr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*topt++ = htonl((TCPOPT_NOP << 24) | (TCPOPT_NOP << 16) |
 				(TCPOPT_TIMESTAMP << 8) | TCPOLEN_TIMESTAMP);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*topt++ = htonl(tsval);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*topt++ = htonl(tsecr);
 	}
 
 #ifdef CONFIG_TCP_MD5SIG
 	if (key) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*topt++ = htonl((TCPOPT_NOP << 24) | (TCPOPT_NOP << 16) |
 				(TCPOPT_MD5SIG << 8) | TCPOLEN_MD5SIG);
 		tcp_v6_md5_hash_hdr((__u8 *)topt, key,
@@ -835,6 +903,7 @@ static void tcp_v6_send_response(const struct sock *sk, struct sk_buff *skb, u32
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(&fl6, 0, sizeof(fl6));
 	fl6.daddr = ipv6_hdr(skb)->saddr;
 	fl6.saddr = ipv6_hdr(skb)->daddr;
@@ -849,9 +918,13 @@ static void tcp_v6_send_response(const struct sock *sk, struct sk_buff *skb, u32
 	if (rt6_need_strict(&fl6.daddr) && !oif)
 		fl6.flowi6_oif = tcp_v6_iif(skb);
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!oif && netif_index_is_l3_master(net, skb->skb_iif))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			oif = skb->skb_iif;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl6.flowi6_oif = oif;
 	}
 
@@ -867,19 +940,23 @@ static void tcp_v6_send_response(const struct sock *sk, struct sk_buff *skb, u32
 	 */
 	dst = ip6_dst_lookup_flow(ctl_sk, &fl6, NULL);
 	if (!IS_ERR(dst)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb_dst_set(buff, dst);
 		ip6_xmit(ctl_sk, buff, &fl6, fl6.flowi6_mark, NULL, tclass);
 		TCP_INC_STATS(net, TCP_MIB_OUTSEGS);
 		if (rst)
 			TCP_INC_STATS(net, TCP_MIB_OUTRSTS);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree_skb(buff);
 }
 
 static void tcp_v6_send_reset(const struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct tcphdr *th = tcp_hdr(skb);
 	u32 seq = 0, ack_seq = 0;
 	struct tcp_md5sig_key *key = NULL;
@@ -893,18 +970,23 @@ static void tcp_v6_send_reset(const struct sock *sk, struct sk_buff *skb)
 	int oif;
 
 	if (th->rst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* If sk not NULL, it means we did a successful lookup and incoming
 	 * route had to be correct. prequeue might have dropped our dst.
 	 */
 	if (!sk && !ipv6_unicast_destination(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 #ifdef CONFIG_TCP_MD5SIG
 	rcu_read_lock();
 	hash_location = tcp_parse_md5sig_option(th);
 	if (sk && sk_fullsock(sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key = tcp_v6_md5_do_lookup(sk, &ipv6h->saddr);
 	} else if (hash_location) {
 		/*
@@ -923,18 +1005,23 @@ static void tcp_v6_send_reset(const struct sock *sk, struct sk_buff *skb)
 		if (!sk1)
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key = tcp_v6_md5_do_lookup(sk1, &ipv6h->saddr);
 		if (!key)
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		genhash = tcp_v6_md5_hash_skb(newhash, key, NULL, skb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (genhash || memcmp(hash_location, newhash, 16) != 0)
 			goto out;
 	}
 #endif
 
 	if (th->ack)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq = ntohl(th->ack_seq);
+}
 	else
 		ack_seq = ntohl(th->seq) + th->syn + th->fin + skb->len -
 			  (th->doff << 2);
@@ -953,12 +1040,14 @@ static void tcp_v6_send_ack(const struct sock *sk, struct sk_buff *skb, u32 seq,
 			    struct tcp_md5sig_key *key, u8 tclass,
 			    __be32 label)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_v6_send_response(sk, skb, seq, ack, win, tsval, tsecr, oif, key, 0,
 			     tclass, label);
 }
 
 static void tcp_v6_timewait_ack(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_timewait_sock *tw = inet_twsk(sk);
 	struct tcp_timewait_sock *tcptw = tcp_twsk(sk);
 
@@ -999,7 +1088,9 @@ static struct sock *tcp_v6_cookie_check(struct sock *sk, struct sk_buff *skb)
 	const struct tcphdr *th = tcp_hdr(skb);
 
 	if (!th->syn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk = cookie_v6_check(sk, skb);
+}
 #endif
 	return sk;
 }
@@ -1058,8 +1149,11 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *
 					     req_unhash, own_req);
 
 		if (!newsk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		newtcp6sk = (struct tcp6_sock *)newsk;
 		inet_sk(newsk)->pinet6 = &newtcp6sk->inet6;
 
@@ -1067,6 +1161,7 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *
 		newnp = inet6_sk(newsk);
 		newtp = tcp_sk(newsk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(newnp, np, sizeof(struct ipv6_pinfo));
 
 		newnp->saddr = newsk->sk_v6_rcv_saddr;
@@ -1086,7 +1181,9 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *
 		newnp->mcast_hops  = ipv6_hdr(skb)->hop_limit;
 		newnp->rcv_flowinfo = ip6_flowinfo(ipv6_hdr(skb));
 		if (np->repflow)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			newnp->flow_label = ip6_flowlabel(ipv6_hdr(skb));
+}
 
 		/*
 		 * No need to charge this sock to the relevant IPv6 refcnt debug socks count
@@ -1103,6 +1200,7 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *
 		return newsk;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ireq = inet_rsk(req);
 
 	if (sk_acceptq_is_full(sk))
@@ -1135,6 +1233,7 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *
 	newinet = inet_sk(newsk);
 	newnp = inet6_sk(newsk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(newnp, np, sizeof(struct ipv6_pinfo));
 
 	newsk->sk_v6_daddr = ireq->ir_v6_rmt_addr;
@@ -1160,7 +1259,9 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *
 	newnp->mcast_hops = ipv6_hdr(skb)->hop_limit;
 	newnp->rcv_flowinfo = ip6_flowinfo(ipv6_hdr(skb));
 	if (np->repflow)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		newnp->flow_label = ip6_flowlabel(ipv6_hdr(skb));
+}
 
 	/* Clone native IPv6 options from listening socket (if any)
 
@@ -1172,13 +1273,17 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *
 	if (!opt)
 		opt = rcu_dereference(np->opt);
 	if (opt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opt = ipv6_dup_options(newsk, opt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		RCU_INIT_POINTER(newnp->opt, opt);
 	}
 	inet_csk(newsk)->icsk_ext_hdr_len = 0;
 	if (opt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_csk(newsk)->icsk_ext_hdr_len = opt->opt_nflen +
 						    opt->opt_flen;
+}
 
 	tcp_ca_openreq_child(newsk, dst);
 
@@ -1206,12 +1311,14 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *
 #endif
 
 	if (__inet_inherit_port(sk, newsk) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_csk_prepare_forced_close(newsk);
 		tcp_done(newsk);
 		goto out;
 	}
 	*own_req = inet_ehash_nolisten(newsk, req_to_sk(req_unhash));
 	if (*own_req) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcp_move_syn(newtp, req);
 
 		/* Clone pktoptions received with SYN, if we own the req */
@@ -1221,12 +1328,14 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *
 			consume_skb(ireq->pktopts);
 			ireq->pktopts = NULL;
 			if (newnp->pktoptions) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tcp_v6_restore_cb(newnp->pktoptions);
 				skb_set_owner_r(newnp->pktoptions, newsk);
 			}
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return newsk;
 
 out_overflow:
@@ -1261,7 +1370,9 @@ static int tcp_v6_do_rcv(struct sock *sk, struct sk_buff *skb)
 	 */
 
 	if (skb->protocol == htons(ETH_P_IP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return tcp_v4_do_rcv(sk, skb);
+}
 
 	/*
 	 *	socket locking is here for SMP purposes as backlog rcv
@@ -1282,7 +1393,9 @@ static int tcp_v6_do_rcv(struct sock *sk, struct sk_buff *skb)
 					       --ANK (980728)
 	 */
 	if (np->rxopt.all)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		opt_skb = skb_clone(skb, sk_gfp_mask(sk, GFP_ATOMIC));
+}
 
 	if (sk->sk_state == TCP_ESTABLISHED) { /* Fast path */
 		struct dst_entry *dst = sk->sk_rx_dst;
@@ -1292,6 +1405,7 @@ static int tcp_v6_do_rcv(struct sock *sk, struct sk_buff *skb)
 		if (dst) {
 			if (inet_sk(sk)->rx_dst_ifindex != skb->skb_iif ||
 			    dst->ops->check(dst, np->rx_dst_cookie) == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dst_release(dst);
 				sk->sk_rx_dst = NULL;
 			}
@@ -1300,6 +1414,7 @@ static int tcp_v6_do_rcv(struct sock *sk, struct sk_buff *skb)
 		tcp_rcv_established(sk, skb, tcp_hdr(skb));
 		if (opt_skb)
 			goto ipv6_pktoptions;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 
@@ -1313,30 +1428,42 @@ static int tcp_v6_do_rcv(struct sock *sk, struct sk_buff *skb)
 			goto discard;
 
 		if (nsk != sk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (tcp_child_process(sk, nsk, skb))
 				goto reset;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (opt_skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__kfree_skb(opt_skb);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
 		}
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_rps_save_rxhash(sk, skb);
+}
 
 	if (tcp_rcv_state_process(sk, skb))
 		goto reset;
 	if (opt_skb)
 		goto ipv6_pktoptions;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 reset:
 	tcp_v6_send_reset(sk, skb);
 discard:
 	if (opt_skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__kfree_skb(opt_skb);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree_skb(skb);
 	return 0;
 csum_err:
 	TCP_INC_STATS(sock_net(sk), TCP_MIB_CSUMERRORS);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	TCP_INC_STATS(sock_net(sk), TCP_MIB_INERRS);
 	goto discard;
 
@@ -1352,24 +1479,42 @@ static int tcp_v6_do_rcv(struct sock *sk, struct sk_buff *skb)
 	tp = tcp_sk(sk);
 	if (TCP_SKB_CB(opt_skb)->end_seq == tp->rcv_nxt &&
 	    !((1 << sk->sk_state) & (TCPF_CLOSE | TCPF_LISTEN))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (np->rxopt.bits.rxinfo || np->rxopt.bits.rxoinfo)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			np->mcast_oif = tcp_v6_iif(opt_skb);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (np->rxopt.bits.rxhlim || np->rxopt.bits.rxohlim)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			np->mcast_hops = ipv6_hdr(opt_skb)->hop_limit;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (np->rxopt.bits.rxflow || np->rxopt.bits.rxtclass)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			np->rcv_flowinfo = ip6_flowinfo(ipv6_hdr(opt_skb));
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (np->repflow)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			np->flow_label = ip6_flowlabel(ipv6_hdr(opt_skb));
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ipv6_opt_accepted(sk, opt_skb, &TCP_SKB_CB(opt_skb)->header.h6)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb_set_owner_r(opt_skb, sk);
 			tcp_v6_restore_cb(opt_skb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opt_skb = xchg(&np->pktoptions, opt_skb);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__kfree_skb(opt_skb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opt_skb = xchg(&np->pktoptions, NULL);
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree_skb(opt_skb);
 	return 0;
 }
@@ -1444,19 +1589,23 @@ static int tcp_v6_rcv(struct sk_buff *skb)
 		goto do_time_wait;
 
 	if (sk->sk_state == TCP_NEW_SYN_RECV) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct request_sock *req = inet_reqsk(sk);
 		struct sock *nsk;
 
 		sk = req->rsk_listener;
 		if (tcp_v6_inbound_md5_hash(sk, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_drops_add(sk, skb);
 			reqsk_put(req);
 			goto discard_it;
 		}
 		if (unlikely(sk->sk_state != TCP_LISTEN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inet_csk_reqsk_queue_drop_and_put(sk, req);
 			goto lookup;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_hold(sk);
 		refcounted = true;
 		nsk = NULL;
@@ -1467,13 +1616,16 @@ static int tcp_v6_rcv(struct sk_buff *skb)
 			nsk = tcp_check_req(sk, skb, req, false);
 		}
 		if (!nsk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			reqsk_put(req);
 			goto discard_and_relse;
 		}
 		if (nsk == sk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			reqsk_put(req);
 			tcp_v6_restore_cb(skb);
 		} else if (tcp_child_process(sk, nsk, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tcp_v6_send_reset(nsk, skb);
 			goto discard_and_relse;
 		} else {
@@ -1482,6 +1634,7 @@ static int tcp_v6_rcv(struct sk_buff *skb)
 		}
 	}
 	if (hdr->hop_limit < inet6_sk(sk)->min_hopcount) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__NET_INC_STATS(net, LINUX_MIB_TCPMINTTLDROP);
 		goto discard_and_relse;
 	}
@@ -1515,6 +1668,7 @@ static int tcp_v6_rcv(struct sk_buff *skb)
 	} else if (tcp_add_backlog(sk, skb)) {
 		goto discard_and_relse;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bh_unlock_sock(sk);
 
 put_and_return:
@@ -1544,22 +1698,28 @@ static int tcp_v6_rcv(struct sk_buff *skb)
 discard_and_relse:
 	sk_drops_add(sk, skb);
 	if (refcounted)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_put(sk);
+}
 	goto discard_it;
 
 do_time_wait:
 	if (!xfrm6_policy_check(NULL, XFRM_POLICY_IN, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_twsk_put(inet_twsk(sk));
 		goto discard_it;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcp_v6_fill_cb(skb, hdr, th);
 
 	if (tcp_checksum_complete(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inet_twsk_put(inet_twsk(sk));
 		goto csum_error;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (tcp_timewait_state_process(inet_twsk(sk), skb, th)) {
 	case TCP_TW_SYN:
 	{
@@ -1572,6 +1732,7 @@ static int tcp_v6_rcv(struct sk_buff *skb)
 					    ntohs(th->dest), tcp_v6_iif(skb),
 					    sdif);
 		if (sk2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			struct inet_timewait_sock *tw = inet_twsk(sk);
 			inet_twsk_deschedule_put(tw);
 			sk = sk2;
@@ -1601,7 +1762,9 @@ static void tcp_v6_early_demux(struct sk_buff *skb)
 	struct sock *sk;
 
 	if (skb->pkt_type != PACKET_HOST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!pskb_may_pull(skb, skb_transport_offset(skb) + sizeof(struct tcphdr)))
 		return;
@@ -1701,6 +1864,7 @@ static const struct tcp_sock_af_ops tcp_sock_ipv6_mapped_specific = {
  */
 static int tcp_v6_init_sock(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inet_connection_sock *icsk = inet_csk(sk);
 
 	tcp_init_sock(sk);
@@ -1730,7 +1894,9 @@ static void get_openreq6(struct seq_file *seq,
 	const struct in6_addr *dest = &inet_rsk(req)->ir_v6_rmt_addr;
 
 	if (ttd < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ttd = 0;
+}
 
 	seq_printf(seq,
 		   "%4d: %08X%08X%08X%08X:%04X %08X%08X%08X%08X:%04X "
@@ -1769,6 +1935,7 @@ static void get_tcp6_sock(struct seq_file *seq, struct sock *sp, int i)
 
 	dest  = &sp->sk_v6_daddr;
 	src   = &sp->sk_v6_rcv_saddr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	destp = ntohs(inet->inet_dport);
 	srcp  = ntohs(inet->inet_sport);
 
@@ -1834,6 +2001,7 @@ static void get_timewait6_sock(struct seq_file *seq,
 
 	dest = &tw->tw_v6_daddr;
 	src  = &tw->tw_v6_rcv_saddr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	destp = ntohs(tw->tw_dport);
 	srcp  = ntohs(tw->tw_sport);
 
@@ -1856,6 +2024,7 @@ static int tcp6_seq_show(struct seq_file *seq, void *v)
 	struct sock *sk = v;
 
 	if (v == SEQ_START_TOKEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_puts(seq,
 			 "  sl  "
 			 "local_address                         "
@@ -2020,6 +2189,7 @@ int __init tcpv6_init(void)
 
 void tcpv6_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&tcpv6_net_ops);
 	inet6_unregister_protosw(&tcpv6_protosw);
 	inet6_del_protocol(&tcpv6_protocol, IPPROTO_TCP);
diff --git a/net/ipv6/tcpv6_offload.c b/net/ipv6/tcpv6_offload.c
index 278e49c..8601828 100644
--- a/net/ipv6/tcpv6_offload.c
+++ b/net/ipv6/tcpv6_offload.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPV6 GSO/GRO offload support
  *	Linux INET6 implementation
@@ -31,6 +33,7 @@ static struct sk_buff **tcp6_gro_receive(struct sk_buff **head,
 
 static int tcp6_gro_complete(struct sk_buff *skb, int thoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6hdr *iph = ipv6_hdr(skb);
 	struct tcphdr *th = tcp_hdr(skb);
 
@@ -47,7 +50,9 @@ static struct sk_buff *tcp6_gso_segment(struct sk_buff *skb,
 	struct tcphdr *th;
 
 	if (!(skb_shinfo(skb)->gso_type & SKB_GSO_TCPV6))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	if (!pskb_may_pull(skb, sizeof(*th)))
 		return ERR_PTR(-EINVAL);
diff --git a/net/ipv6/tunnel6.c b/net/ipv6/tunnel6.c
index dae25ca..a5a2b23 100644
--- a/net/ipv6/tunnel6.c
+++ b/net/ipv6/tunnel6.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C)2003,2004 USAGI/WIDE Project
  *
diff --git a/net/ipv6/udp.c b/net/ipv6/udp.c
index 40d7234..7acf6b8 100644
--- a/net/ipv6/udp.c
+++ b/net/ipv6/udp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	UDP over IPv6
  *	Linux INET6 implementation
@@ -77,6 +79,7 @@ static u32 udp6_ehashfn(const struct net *net,
 
 	u32 lhash, fhash;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net_get_random_once(&udp6_ehash_secret,
 			    sizeof(udp6_ehash_secret));
 	net_get_random_once(&udp_ipv6_hash_secret,
@@ -139,40 +142,58 @@ static int compute_score(struct sock *sk, struct net *net,
 	    sk->sk_family != PF_INET6)
 		return -1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	score = 0;
 	inet = inet_sk(sk);
 
 	if (inet->inet_dport) {
 		if (inet->inet_dport != sport)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		score++;
 	}
 
 	if (!ipv6_addr_any(&sk->sk_v6_rcv_saddr)) {
 		if (!ipv6_addr_equal(&sk->sk_v6_rcv_saddr, daddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
 		score++;
 	}
 
 	if (!ipv6_addr_any(&sk->sk_v6_daddr)) {
 		if (!ipv6_addr_equal(&sk->sk_v6_daddr, saddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
 		score++;
 	}
 
 	if (sk->sk_bound_dev_if || exact_dif) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bool dev_match = (sk->sk_bound_dev_if == dif ||
 				  sk->sk_bound_dev_if == sdif);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (exact_dif && !dev_match)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sk->sk_bound_dev_if && dev_match)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			score++;
+}
 	}
 
 	if (sk->sk_incoming_cpu == raw_smp_processor_id())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		score++;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return score;
 }
 
@@ -189,6 +210,7 @@ static struct sock *udp6_lib_lookup2(struct net *net,
 
 	result = NULL;
 	badness = -1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	udp_portaddr_for_each_entry_rcu(sk, &hslot2->head) {
 		score = compute_score(sk, net, saddr, sport,
 				      daddr, hnum, dif, sdif, exact_dif);
@@ -232,12 +254,14 @@ struct sock *__udp6_lib_lookup(struct net *net,
 	u32 hash = 0;
 
 	if (hslot->count > 10) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hash2 = udp6_portaddr_hash(net, daddr, hnum);
 		slot2 = hash2 & udptable->mask;
 		hslot2 = &udptable->hash2[slot2];
 		if (hslot->count < hslot2->count)
 			goto begin;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result = udp6_lib_lookup2(net, saddr, sport,
 					  daddr, hnum, dif, sdif, exact_dif,
 					  hslot2, skb);
@@ -247,17 +271,22 @@ struct sock *__udp6_lib_lookup(struct net *net,
 			slot2 = hash2 & udptable->mask;
 			/* avoid searching the same slot again. */
 			if (unlikely(slot2 == old_slot2))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return result;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hslot2 = &udptable->hash2[slot2];
 			if (hslot->count < hslot2->count)
 				goto begin;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			result = udp6_lib_lookup2(net, saddr, sport,
 						  daddr, hnum, dif, sdif,
 						  exact_dif, hslot2,
 						  skb);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
 	}
 begin:
@@ -269,23 +298,33 @@ struct sock *__udp6_lib_lookup(struct net *net,
 		if (score > badness) {
 			reuseport = sk->sk_reuseport;
 			if (reuseport) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				hash = udp6_ehashfn(net, daddr, hnum,
 						    saddr, sport);
 				result = reuseport_select_sock(sk, hash, skb,
 							sizeof(struct udphdr));
 				if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return result;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				matches = 1;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			result = sk;
 			badness = score;
 		} else if (score == badness && reuseport) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			matches++;
 			if (reciprocal_scale(hash, matches) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				result = sk;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hash = next_pseudo_random32(hash);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return result;
 }
 EXPORT_SYMBOL_GPL(__udp6_lib_lookup);
@@ -294,6 +333,7 @@ static struct sock *__udp6_lib_lookup_skb(struct sk_buff *skb,
 					  __be16 sport, __be16 dport,
 					  struct udp_table *udptable)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6hdr *iph = ipv6_hdr(skb);
 
 	return __udp6_lib_lookup(dev_net(skb->dev), &iph->saddr, sport,
@@ -304,6 +344,7 @@ static struct sock *__udp6_lib_lookup_skb(struct sk_buff *skb,
 struct sock *udp6_lib_lookup_skb(struct sk_buff *skb,
 				 __be16 sport, __be16 dport)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6hdr *iph = ipv6_hdr(skb);
 
 	return __udp6_lib_lookup(dev_net(skb->dev), &iph->saddr, sport,
@@ -338,6 +379,7 @@ EXPORT_SYMBOL_GPL(udp6_lib_lookup);
  */
 static int udp6_skb_len(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return unlikely(inet6_is_jumbogram(skb)) ? skb->len : udp_skb_len(skb);
 }
 
@@ -360,10 +402,14 @@ int udpv6_recvmsg(struct sock *sk, struct msghdr *msg, size_t len,
 	int is_udp4;
 
 	if (flags & MSG_ERRQUEUE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ipv6_recv_error(sk, msg, len, addr_len);
+}
 
 	if (np->rxpmtu && np->rxopt.bits.rxpmtu)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ipv6_recv_rxpmtu(sk, msg, len, addr_len);
+}
 
 try_again:
 	peeking = flags & MSG_PEEK;
@@ -372,13 +418,20 @@ int udpv6_recvmsg(struct sock *sk, struct msghdr *msg, size_t len,
 	if (!skb)
 		return err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ulen = udp6_skb_len(skb);
 	copied = len;
 	if (copied > ulen - off)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		copied = ulen - off;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (copied < ulen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msg->msg_flags |= MSG_TRUNC;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	is_udp4 = (skb->protocol == htons(ETH_P_IP));
 
 	/*
@@ -387,84 +440,120 @@ int udpv6_recvmsg(struct sock *sk, struct msghdr *msg, size_t len,
 	 * coverage checksum (UDP-Lite), do it before the copy.
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (copied < ulen || peeking ||
 	    (is_udplite && UDP_SKB_CB(skb)->partial_cov)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		checksum_valid = udp_skb_csum_unnecessary(skb) ||
 				!__udp_lib_checksum_complete(skb);
 		if (!checksum_valid)
 			goto csum_copy_err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (checksum_valid || udp_skb_csum_unnecessary(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (udp_skb_is_linear(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = copy_linear_skb(skb, copied, off, &msg->msg_iter);
+}
 		else
 			err = skb_copy_datagram_msg(skb, off, msg, copied);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = skb_copy_and_csum_datagram_msg(skb, off, msg);
 		if (err == -EINVAL)
 			goto csum_copy_err;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(err)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!peeked) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atomic_inc(&sk->sk_drops);
 			if (is_udp4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				UDP_INC_STATS(sock_net(sk), UDP_MIB_INERRORS,
 					      is_udplite);
+}
 			else
 				UDP6_INC_STATS(sock_net(sk), UDP_MIB_INERRORS,
 					       is_udplite);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
 		return err;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!peeked) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (is_udp4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			UDP_INC_STATS(sock_net(sk), UDP_MIB_INDATAGRAMS,
 				      is_udplite);
+}
 		else
 			UDP6_INC_STATS(sock_net(sk), UDP_MIB_INDATAGRAMS,
 				       is_udplite);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock_recv_ts_and_drops(msg, sk, skb);
 
 	/* Copy the address. */
 	if (msg->msg_name) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DECLARE_SOCKADDR(struct sockaddr_in6 *, sin6, msg->msg_name);
 		sin6->sin6_family = AF_INET6;
 		sin6->sin6_port = udp_hdr(skb)->source;
 		sin6->sin6_flowinfo = 0;
 
 		if (is_udp4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ipv6_addr_set_v4mapped(ip_hdr(skb)->saddr,
 					       &sin6->sin6_addr);
 			sin6->sin6_scope_id = 0;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sin6->sin6_addr = ipv6_hdr(skb)->saddr;
 			sin6->sin6_scope_id =
 				ipv6_iface_scope_id(&sin6->sin6_addr,
 						    inet6_iif(skb));
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*addr_len = sizeof(*sin6);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (np->rxopt.all)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ip6_datagram_recv_common_ctl(sk, msg, skb);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (is_udp4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (inet->cmsg_flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ip_cmsg_recv_offset(msg, sk, skb,
 					    sizeof(struct udphdr), off);
+}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (np->rxopt.all)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ip6_datagram_recv_specific_ctl(sk, msg, skb);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = copied;
 	if (flags & MSG_TRUNC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = ulen;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_consume_udp(sk, skb, peeking ? -err : err);
 	return err;
 
@@ -1496,6 +1585,7 @@ static struct inet6_protocol udpv6_protocol = {
 #ifdef CONFIG_PROC_FS
 int udp6_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (v == SEQ_START_TOKEN) {
 		seq_puts(seq, IPV6_SEQ_DGRAM_HEADER);
 	} else {
@@ -1599,6 +1689,7 @@ int __init udpv6_init(void)
 
 void udpv6_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet6_unregister_protosw(&udpv6_protosw);
 	inet6_del_protocol(&udpv6_protocol, IPPROTO_UDP);
 }
diff --git a/net/ipv6/udp_offload.c b/net/ipv6/udp_offload.c
index 2a04dc9..db93137 100644
--- a/net/ipv6/udp_offload.c
+++ b/net/ipv6/udp_offload.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	IPV6 GSO/GRO offload support
  *	Linux INET6 implementation
@@ -20,6 +22,7 @@
 static struct sk_buff *udp6_ufo_fragment(struct sk_buff *skb,
 					 netdev_features_t features)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sk_buff *segs = ERR_PTR(-EINVAL);
 	unsigned int mss;
 	unsigned int unfrag_ip6hlen, unfrag_len;
@@ -114,6 +117,7 @@ static struct sk_buff *udp6_ufo_fragment(struct sk_buff *skb,
 static struct sk_buff **udp6_gro_receive(struct sk_buff **head,
 					 struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct udphdr *uh = udp_gro_udphdr(skb);
 
 	if (unlikely(!uh))
@@ -141,6 +145,7 @@ static struct sk_buff **udp6_gro_receive(struct sk_buff **head,
 
 static int udp6_gro_complete(struct sk_buff *skb, int nhoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6hdr *ipv6h = ipv6_hdr(skb);
 	struct udphdr *uh = (struct udphdr *)(skb->data + nhoff);
 
@@ -170,5 +175,6 @@ int udpv6_offload_init(void)
 
 int udpv6_offload_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return inet6_del_offload(&udpv6_offload, IPPROTO_UDP);
 }
diff --git a/net/ipv6/udplite.c b/net/ipv6/udplite.c
index 2784cc3..0870a97 100644
--- a/net/ipv6/udplite.c
+++ b/net/ipv6/udplite.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  UDPLITEv6   An implementation of the UDP-Lite protocol over IPv6.
  *              See also net/ipv4/udplite.c
@@ -16,6 +18,7 @@
 
 static int udplitev6_rcv(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __udp6_lib_rcv(skb, &udplite_table, IPPROTO_UDPLITE);
 }
 
@@ -23,6 +26,7 @@ static void udplitev6_err(struct sk_buff *skb,
 			  struct inet6_skb_parm *opt,
 			  u8 type, u8 code, int offset, __be32 info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__udp6_lib_err(skb, opt, type, code, offset, info, &udplite_table);
 }
 
@@ -87,6 +91,7 @@ int __init udplitev6_init(void)
 
 void udplitev6_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inet6_unregister_protosw(&udplite6_protosw);
 	inet6_del_protocol(&udplitev6_protocol, IPPROTO_UDPLITE);
 }
@@ -133,6 +138,7 @@ int __init udplite6_proc_init(void)
 
 void udplite6_proc_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&udplite6_net_ops);
 }
 #endif
diff --git a/net/ipv6/xfrm6_policy.c b/net/ipv6/xfrm6_policy.c
index 17e95a0..8d9e2d6 100644
--- a/net/ipv6/xfrm6_policy.c
+++ b/net/ipv6/xfrm6_policy.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * xfrm6_policy.c: based on xfrm4_policy.c
@@ -39,6 +41,7 @@ static struct dst_entry *xfrm6_dst_lookup(struct net *net, int tos, int oif,
 	fl6.flowi6_oif = l3mdev_master_ifindex_by_index(net, oif);
 	fl6.flowi6_flags = FLOWI_FLAG_SKIP_NH_OIF;
 	fl6.flowi6_mark = mark;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&fl6.daddr, daddr, sizeof(fl6.daddr));
 	if (saddr)
 		memcpy(&fl6.saddr, saddr, sizeof(fl6.saddr));
@@ -63,7 +66,9 @@ static int xfrm6_get_saddr(struct net *net, int oif,
 
 	dst = xfrm6_dst_lookup(net, 0, oif, NULL, daddr, mark);
 	if (IS_ERR(dst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EHOSTUNREACH;
+}
 
 	dev = ip6_dst_idev(dst)->dev;
 	ipv6_dev_get_saddr(dev_net(dev), dev, &daddr->in6, 0, &saddr->in6);
@@ -73,12 +78,14 @@ static int xfrm6_get_saddr(struct net *net, int oif,
 
 static int xfrm6_get_tos(const struct flowi *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int xfrm6_init_path(struct xfrm_dst *path, struct dst_entry *dst,
 			   int nfheader_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dst->ops->family == AF_INET6) {
 		struct rt6_info *rt = (struct rt6_info *)dst;
 		path->path_cookie = rt6_get_cookie(rt);
@@ -99,6 +106,7 @@ static int xfrm6_fill_dst(struct xfrm_dst *xdst, struct net_device *dev,
 
 	xdst->u.rt6.rt6i_idev = in6_dev_get(dev);
 	if (!xdst->u.rt6.rt6i_idev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_put(dev);
 		return -ENODEV;
 	}
@@ -131,13 +139,16 @@ _decode_session6(struct sk_buff *skb, struct flowi *fl, int reverse)
 	u8 nexthdr;
 
 	if (!nhoff)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nhoff = offsetof(struct ipv6hdr, nexthdr);
+}
 
 	nexthdr = nh[nhoff];
 
 	if (skb_dst(skb))
 		oif = skb_dst(skb)->dev->ifindex;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(fl6, 0, sizeof(struct flowi6));
 	fl6->flowi6_mark = skb->mark;
 	fl6->flowi6_oif = reverse ? skb->skb_iif : oif;
@@ -147,6 +158,7 @@ _decode_session6(struct sk_buff *skb, struct flowi *fl, int reverse)
 
 	while (nh + offset + 1 < skb->data ||
 	       pskb_may_pull(skb, nh + offset + 1 - skb->data)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nh = skb_network_header(skb);
 		exthdr = (struct ipv6_opt_hdr *)(nh + offset);
 
@@ -188,6 +200,7 @@ _decode_session6(struct sk_buff *skb, struct flowi *fl, int reverse)
 				fl6->fl6_icmp_type = icmp[0];
 				fl6->fl6_icmp_code = icmp[1];
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fl6->flowi6_proto = nexthdr;
 			return;
 
@@ -241,7 +254,9 @@ static void xfrm6_dst_destroy(struct dst_entry *dst)
 	struct xfrm_dst *xdst = (struct xfrm_dst *)dst;
 
 	if (likely(xdst->u.rt6.rt6i_idev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		in6_dev_put(xdst->u.rt6.rt6i_idev);
+}
 	dst_destroy_metrics_generic(dst);
 	xfrm_dst_destroy(xdst);
 }
@@ -252,7 +267,9 @@ static void xfrm6_dst_ifdown(struct dst_entry *dst, struct net_device *dev,
 	struct xfrm_dst *xdst;
 
 	if (!unregister)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	xdst = (struct xfrm_dst *)dst;
 	if (xdst->u.rt6.rt6i_idev->dev == dev) {
@@ -302,6 +319,7 @@ static int __init xfrm6_policy_init(void)
 
 static void xfrm6_policy_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xfrm_policy_unregister_afinfo(&xfrm6_policy_afinfo);
 }
 
@@ -324,6 +342,7 @@ static int __net_init xfrm6_net_sysctl_init(struct net *net)
 
 	table = xfrm6_policy_table;
 	if (!net_eq(net, &init_net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table = kmemdup(table, sizeof(xfrm6_policy_table), GFP_KERNEL);
 		if (!table)
 			goto err_alloc;
@@ -340,7 +359,9 @@ static int __net_init xfrm6_net_sysctl_init(struct net *net)
 
 err_reg:
 	if (!net_eq(net, &init_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(table);
+}
 err_alloc:
 	return -ENOMEM;
 }
@@ -350,7 +371,9 @@ static void __net_exit xfrm6_net_sysctl_exit(struct net *net)
 	struct ctl_table *table;
 
 	if (!net->ipv6.sysctl.xfrm6_hdr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	table = net->ipv6.sysctl.xfrm6_hdr->ctl_table_arg;
 	unregister_net_sysctl_table(net->ipv6.sysctl.xfrm6_hdr);
@@ -376,12 +399,17 @@ static int __net_init xfrm6_net_init(struct net *net)
 	       sizeof(xfrm6_dst_ops_template));
 	ret = dst_entries_init(&net->xfrm.xfrm6_dst_ops);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = xfrm6_net_sysctl_init(net);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst_entries_destroy(&net->xfrm.xfrm6_dst_ops);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -423,6 +451,7 @@ int __init xfrm6_init(void)
 
 void xfrm6_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&xfrm6_net_ops);
 	xfrm6_protocol_fini();
 	xfrm6_policy_fini();
diff --git a/net/ipv6/xfrm6_protocol.c b/net/ipv6/xfrm6_protocol.c
index b2dc8ce..732ef60 100644
--- a/net/ipv6/xfrm6_protocol.c
+++ b/net/ipv6/xfrm6_protocol.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* xfrm6_protocol.c - Generic xfrm protocol multiplexer for ipv6.
  *
  * Copyright (C) 2013 secunet Security Networks AG
@@ -29,6 +31,7 @@ static DEFINE_MUTEX(xfrm6_protocol_mutex);
 
 static inline struct xfrm6_protocol __rcu **proto_handlers(u8 protocol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (protocol) {
 	case IPPROTO_ESP:
 		return &esp6_handlers;
@@ -53,7 +56,9 @@ int xfrm6_rcv_cb(struct sk_buff *skb, u8 protocol, int err)
 	struct xfrm6_protocol __rcu **head = proto_handlers(protocol);
 
 	if (!head)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	for_each_protocol_rcu(*proto_handlers(protocol), handler)
 		if ((ret = handler->cb_handler(skb, err)) <= 0)
@@ -70,6 +75,7 @@ static int xfrm6_esp_rcv(struct sk_buff *skb)
 
 	XFRM_TUNNEL_SKB_CB(skb)->tunnel.ip6 = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(esp6_handlers, handler)
 		if ((ret = handler->handler(skb)) != -EINVAL)
 			return ret;
@@ -85,6 +91,7 @@ static void xfrm6_esp_err(struct sk_buff *skb, struct inet6_skb_parm *opt,
 {
 	struct xfrm6_protocol *handler;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(esp6_handlers, handler)
 		if (!handler->err_handler(skb, opt, type, code, offset, info))
 			break;
@@ -97,6 +104,7 @@ static int xfrm6_ah_rcv(struct sk_buff *skb)
 
 	XFRM_TUNNEL_SKB_CB(skb)->tunnel.ip6 = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(ah6_handlers, handler)
 		if ((ret = handler->handler(skb)) != -EINVAL)
 			return ret;
@@ -112,6 +120,7 @@ static void xfrm6_ah_err(struct sk_buff *skb, struct inet6_skb_parm *opt,
 {
 	struct xfrm6_protocol *handler;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(ah6_handlers, handler)
 		if (!handler->err_handler(skb, opt, type, code, offset, info))
 			break;
@@ -124,6 +133,7 @@ static int xfrm6_ipcomp_rcv(struct sk_buff *skb)
 
 	XFRM_TUNNEL_SKB_CB(skb)->tunnel.ip6 = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(ipcomp6_handlers, handler)
 		if ((ret = handler->handler(skb)) != -EINVAL)
 			return ret;
@@ -139,6 +149,7 @@ static void xfrm6_ipcomp_err(struct sk_buff *skb, struct inet6_skb_parm *opt,
 {
 	struct xfrm6_protocol *handler;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_protocol_rcu(ipcomp6_handlers, handler)
 		if (!handler->err_handler(skb, opt, type, code, offset, info))
 			break;
@@ -169,6 +180,7 @@ static const struct xfrm_input_afinfo xfrm6_input_afinfo = {
 
 static inline const struct inet6_protocol *netproto(unsigned char protocol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (protocol) {
 	case IPPROTO_ESP:
 		return &esp6_protocol;
@@ -190,6 +202,7 @@ int xfrm6_protocol_register(struct xfrm6_protocol *handler,
 	int ret = -EEXIST;
 	int priority = handler->priority;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!proto_handlers(protocol) || !netproto(protocol))
 		return -EINVAL;
 
@@ -235,6 +248,7 @@ int xfrm6_protocol_deregister(struct xfrm6_protocol *handler,
 	struct xfrm6_protocol *t;
 	int ret = -ENOENT;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!proto_handlers(protocol) || !netproto(protocol))
 		return -EINVAL;
 
@@ -274,5 +288,6 @@ int __init xfrm6_protocol_init(void)
 
 void xfrm6_protocol_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xfrm_input_unregister_afinfo(&xfrm6_input_afinfo);
 }
diff --git a/net/ipv6/xfrm6_state.c b/net/ipv6/xfrm6_state.c
index b15075a..c35dd71 100644
--- a/net/ipv6/xfrm6_state.c
+++ b/net/ipv6/xfrm6_state.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * xfrm6_state.c: based on xfrm4_state.c
@@ -31,6 +33,7 @@ __xfrm6_init_tempsel(struct xfrm_selector *sel, const struct flowi *fl)
 	*(struct in6_addr *)&sel->daddr = fl6->daddr;
 	*(struct in6_addr *)&sel->saddr = fl6->saddr;
 	sel->dport = xfrm_flowi_dport(fl, &fl6->uli);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sel->dport_mask = htons(0xffff);
 	sel->sport = xfrm_flowi_sport(fl, &fl6->uli);
 	sel->sport_mask = htons(0xffff);
@@ -45,6 +48,7 @@ static void
 xfrm6_init_temprop(struct xfrm_state *x, const struct xfrm_tmpl *tmpl,
 		   const xfrm_address_t *daddr, const xfrm_address_t *saddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	x->id = tmpl->id;
 	if (ipv6_addr_any((struct in6_addr *)&x->id.daddr))
 		memcpy(&x->id.daddr, daddr, sizeof(x->sel.daddr));
@@ -66,6 +70,7 @@ __xfrm6_sort(void **dst, void **src, int n, int (*cmp)(void *p), int maxclass)
 
 	memset(count, 0, sizeof(count));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < n; i++) {
 		int c;
 		class[i] = c = cmp(src[i]);
@@ -117,6 +122,7 @@ static int __xfrm6_state_sort_cmp(void *p)
 static int
 __xfrm6_state_sort(struct xfrm_state **dst, struct xfrm_state **src, int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __xfrm6_sort((void **)dst, (void **)src, n,
 			    __xfrm6_state_sort_cmp, 6);
 }
@@ -150,12 +156,14 @@ static int __xfrm6_tmpl_sort_cmp(void *p)
 static int
 __xfrm6_tmpl_sort(struct xfrm_tmpl **dst, struct xfrm_tmpl **src, int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __xfrm6_sort((void **)dst, (void **)src, n,
 			    __xfrm6_tmpl_sort_cmp, 5);
 }
 
 int xfrm6_extract_header(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ipv6hdr *iph = ipv6_hdr(skb);
 
 	XFRM_MODE_SKB_CB(skb)->ihl = sizeof(*iph);
@@ -194,6 +202,7 @@ int __init xfrm6_state_init(void)
 
 void xfrm6_state_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xfrm_state_unregister_afinfo(&xfrm6_state_afinfo);
 }
 
diff --git a/net/l3mdev/l3mdev.c b/net/l3mdev/l3mdev.c
index 8da86ce..754f38fc 100644
--- a/net/l3mdev/l3mdev.c
+++ b/net/l3mdev/l3mdev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/l3mdev/l3mdev.c - L3 master device implementation
  * Copyright (c) 2015 Cumulus Networks
diff --git a/net/llc/llc_core.c b/net/llc/llc_core.c
index 8904126..c8913e5 100644
--- a/net/llc/llc_core.c
+++ b/net/llc/llc_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * llc_core.c - Minimum needed routines for sap handling and module init/exit
  *
diff --git a/net/netfilter/core.c b/net/netfilter/core.c
index 52cd290..9f54ef5 100644
--- a/net/netfilter/core.c
+++ b/net/netfilter/core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* netfilter.c: look after the filters for various protocols.
  * Heavily influenced by the old firewall.c by David Bonn and Alan Cox.
  *
@@ -49,6 +51,7 @@ EXPORT_SYMBOL_GPL(nf_register_afinfo);
 
 void nf_unregister_afinfo(const struct nf_afinfo *afinfo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&afinfo_mutex);
 	RCU_INIT_POINTER(nf_afinfo[afinfo->family], NULL);
 	mutex_unlock(&afinfo_mutex);
@@ -77,11 +80,15 @@ static struct nf_hook_entries *allocate_hook_entries_size(u16 num)
 		       sizeof(struct nf_hook_ops *) * num;
 
 	if (num == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	e = kvzalloc(alloc, GFP_KERNEL);
 	if (e)
 		e->num_hook_entries = num;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return e;
 }
 
@@ -89,6 +96,7 @@ static unsigned int accept_all(void *priv,
 			       struct sk_buff *skb,
 			       const struct nf_hook_state *state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NF_ACCEPT; /* ACCEPT makes nf_hook_slow call next hook */
 }
 
@@ -111,6 +119,7 @@ nf_hook_entries_grow(const struct nf_hook_entries *old,
 	old_entries = old ? old->num_hook_entries : 0;
 
 	if (old) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		orig_ops = nf_hook_entries_get_hook_ops(old);
 
 		for (i = 0; i < old_entries; i++) {
@@ -120,18 +129,24 @@ nf_hook_entries_grow(const struct nf_hook_entries *old,
 	}
 
 	if (alloc_entries > MAX_HOOK_COUNT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-E2BIG);
+}
 
 	new = allocate_hook_entries_size(alloc_entries);
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	new_ops = nf_hook_entries_get_hook_ops(new);
 
 	i = 0;
 	nhooks = 0;
 	while (i < old_entries) {
 		if (orig_ops[i] == &dummy_ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			++i;
 			continue;
 		}
@@ -154,6 +169,7 @@ nf_hook_entries_grow(const struct nf_hook_entries *old,
 		new->hooks[nhooks].priv = reg->priv;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return new;
 }
 
@@ -173,7 +189,9 @@ static void hooks_validate(const struct nf_hook_entries *hooks)
 		WARN_ON(orig_ops[i]->priority < prio);
 
 		if (orig_ops[i]->priority > prio)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			prio = orig_ops[i]->priority;
+}
 	}
 #endif
 }
@@ -202,8 +220,11 @@ static void *__nf_hook_entries_try_shrink(struct nf_hook_entries __rcu **pp)
 
 	old = nf_entry_dereference(*pp);
 	if (WARN_ON_ONCE(!old))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	orig_ops = nf_hook_entries_get_hook_ops(old);
 	for (i = 0; i < old->num_hook_entries; i++) {
 		if (orig_ops[i] == &dummy_ops)
@@ -216,13 +237,18 @@ static void *__nf_hook_entries_try_shrink(struct nf_hook_entries __rcu **pp)
 		goto out_assign;
 
 	if (skip == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	hook_entries -= skip;
 	new = allocate_hook_entries_size(hook_entries);
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	new_ops = nf_hook_entries_get_hook_ops(new);
 	for (i = 0, j = 0; i < old->num_hook_entries; i++) {
 		if (orig_ops[i] == &dummy_ops)
@@ -244,8 +270,11 @@ static struct nf_hook_entries __rcu **nf_hook_entry_head(struct net *net, const
 
 #ifdef CONFIG_NETFILTER_INGRESS
 	if (reg->hooknum == NF_NETDEV_INGRESS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (reg->dev && dev_net(reg->dev) == net)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return &reg->dev->nf_hooks_ingress;
+}
 	}
 #endif
 	WARN_ON_ONCE(1);
@@ -269,7 +298,9 @@ int nf_register_net_hook(struct net *net, const struct nf_hook_ops *reg)
 
 	pp = nf_hook_entry_head(net, reg);
 	if (!pp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&nf_hook_mutex);
 
@@ -281,12 +312,16 @@ int nf_register_net_hook(struct net *net, const struct nf_hook_ops *reg)
 
 	mutex_unlock(&nf_hook_mutex);
 	if (IS_ERR(new_hooks))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(new_hooks);
+}
 
 	hooks_validate(new_hooks);
 #ifdef CONFIG_NETFILTER_INGRESS
 	if (reg->pf == NFPROTO_NETDEV && reg->hooknum == NF_NETDEV_INGRESS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_inc_ingress_queue();
+}
 #endif
 #ifdef HAVE_JUMP_LABEL
 	static_key_slow_inc(&nf_hooks_needed[reg->pf][reg->hooknum]);
@@ -327,12 +362,15 @@ static void __nf_unregister_net_hook(struct nf_hook_entries *old,
 	if (found) {
 #ifdef CONFIG_NETFILTER_INGRESS
 		if (unreg->pf == NFPROTO_NETDEV && unreg->hooknum == NF_NETDEV_INGRESS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net_dec_ingress_queue();
+}
 #endif
 #ifdef HAVE_JUMP_LABEL
 		static_key_slow_dec(&nf_hooks_needed[unreg->pf][unreg->hooknum]);
 #endif
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ONCE(1, "hook not found, pf %d num %d", unreg->pf, unreg->hooknum);
 	}
 }
@@ -345,12 +383,15 @@ void nf_unregister_net_hook(struct net *net, const struct nf_hook_ops *reg)
 
 	pp = nf_hook_entry_head(net, reg);
 	if (!pp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	mutex_lock(&nf_hook_mutex);
 
 	p = nf_entry_dereference(*pp);
 	if (WARN_ON_ONCE(!p)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&nf_hook_mutex);
 		return;
 	}
@@ -360,14 +401,18 @@ void nf_unregister_net_hook(struct net *net, const struct nf_hook_ops *reg)
 	p = __nf_hook_entries_try_shrink(pp);
 	mutex_unlock(&nf_hook_mutex);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	synchronize_net();
 
 	/* other cpu might still process nfqueue verdict that used reg */
 	nfq = nf_queue_nf_hook_drop(net);
 	if (nfq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		synchronize_net();
+}
 	kvfree(p);
 }
 EXPORT_SYMBOL(nf_unregister_net_hook);
@@ -383,11 +428,15 @@ int nf_register_net_hooks(struct net *net, const struct nf_hook_ops *reg,
 		if (err)
 			goto err;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 
 err:
 	if (i > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nf_unregister_net_hooks(net, reg, i);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 EXPORT_SYMBOL(nf_register_net_hooks);
@@ -443,7 +492,9 @@ void nf_unregister_net_hooks(struct net *net, const struct nf_hook_ops *reg,
 			 */
 			nfq = nf_queue_nf_hook_drop(net);
 			if (nfq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				synchronize_net();
+}
 
 			for (i = 0; i < j; i++)
 				kvfree(to_free[i]);
@@ -472,12 +523,16 @@ int nf_hook_slow(struct sk_buff *skb, struct nf_hook_state *state,
 			kfree_skb(skb);
 			ret = NF_DROP_GETERR(verdict);
 			if (ret == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EPERM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
 		case NF_QUEUE:
 			ret = nf_queue(skb, state, e, s, verdict);
 			if (ret == 1)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
 		default:
 			/* Implicit handling for NF_STOLEN, as well as any other
@@ -487,6 +542,7 @@ int nf_hook_slow(struct sk_buff *skb, struct nf_hook_state *state,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 EXPORT_SYMBOL(nf_hook_slow);
@@ -494,6 +550,7 @@ EXPORT_SYMBOL(nf_hook_slow);
 
 int skb_make_writable(struct sk_buff *skb, unsigned int writable_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (writable_len > skb->len)
 		return 0;
 
@@ -532,10 +589,15 @@ void nf_ct_attach(struct sk_buff *new, const struct sk_buff *skb)
 	void (*attach)(struct sk_buff *, const struct sk_buff *);
 
 	if (skb->_nfct) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		attach = rcu_dereference(ip_ct_attach);
 		if (attach)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			attach(new, skb);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 	}
 }
@@ -582,13 +644,18 @@ static int __net_init netfilter_net_init(struct net *net)
 	net->nf.proc_netfilter = proc_net_mkdir(net, "netfilter",
 						net->proc_net);
 	if (!net->nf.proc_netfilter) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!net_eq(net, &init_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("cannot create netfilter proc entry");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -614,6 +681,7 @@ int __init netfilter_init(void)
 	if (ret < 0)
 		goto err_pernet;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 err_pernet:
 	unregister_pernet_subsys(&netfilter_net_ops);
diff --git a/net/netfilter/ipset/ip_set_bitmap_ip.c b/net/netfilter/ipset/ip_set_bitmap_ip.c
index 4783eff..edd32b9 100644
--- a/net/netfilter/ipset/ip_set_bitmap_ip.c
+++ b/net/netfilter/ipset/ip_set_bitmap_ip.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2000-2002 Joakim Axelsson <gozem@linux.nu>
  *                         Patrick Schaaf <bof@bof.de>
  * Copyright (C) 2003-2013 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
diff --git a/net/netfilter/ipset/ip_set_bitmap_ipmac.c b/net/netfilter/ipset/ip_set_bitmap_ipmac.c
index 9a065f6..da38bbf 100644
--- a/net/netfilter/ipset/ip_set_bitmap_ipmac.c
+++ b/net/netfilter/ipset/ip_set_bitmap_ipmac.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2000-2002 Joakim Axelsson <gozem@linux.nu>
  *                         Patrick Schaaf <bof@bof.de>
  *			   Martin Josefsson <gandalf@wlug.westbo.se>
diff --git a/net/netfilter/ipset/ip_set_bitmap_port.c b/net/netfilter/ipset/ip_set_bitmap_port.c
index 7f0c733..d4c4982 100644
--- a/net/netfilter/ipset/ip_set_bitmap_port.c
+++ b/net/netfilter/ipset/ip_set_bitmap_port.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2003-2013 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
  *
  * This program is free software; you can redistribute it and/or modify
diff --git a/net/netfilter/ipset/ip_set_core.c b/net/netfilter/ipset/ip_set_core.c
index cf84f7b..97135ac 100644
--- a/net/netfilter/ipset/ip_set_core.c
+++ b/net/netfilter/ipset/ip_set_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2000-2002 Joakim Axelsson <gozem@linux.nu>
  *                         Patrick Schaaf <bof@bof.de>
  * Copyright (C) 2003-2013 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
diff --git a/net/netfilter/ipset/ip_set_hash_ip.c b/net/netfilter/ipset/ip_set_hash_ip.c
index 613eb21..b463392 100644
--- a/net/netfilter/ipset/ip_set_hash_ip.c
+++ b/net/netfilter/ipset/ip_set_hash_ip.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2003-2013 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
  *
  * This program is free software; you can redistribute it and/or modify
diff --git a/net/netfilter/ipset/ip_set_hash_ipport.c b/net/netfilter/ipset/ip_set_hash_ipport.c
index ddb8039..467ae9a 100644
--- a/net/netfilter/ipset/ip_set_hash_ipport.c
+++ b/net/netfilter/ipset/ip_set_hash_ipport.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2003-2013 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
  *
  * This program is free software; you can redistribute it and/or modify
diff --git a/net/netfilter/ipset/ip_set_hash_ipportip.c b/net/netfilter/ipset/ip_set_hash_ipportip.c
index a7f4d7a..d442dcc 100644
--- a/net/netfilter/ipset/ip_set_hash_ipportip.c
+++ b/net/netfilter/ipset/ip_set_hash_ipportip.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2003-2013 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
  *
  * This program is free software; you can redistribute it and/or modify
diff --git a/net/netfilter/ipset/ip_set_hash_ipportnet.c b/net/netfilter/ipset/ip_set_hash_ipportnet.c
index a2f19b9..21b2c42 100644
--- a/net/netfilter/ipset/ip_set_hash_ipportnet.c
+++ b/net/netfilter/ipset/ip_set_hash_ipportnet.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2003-2013 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
  *
  * This program is free software; you can redistribute it and/or modify
diff --git a/net/netfilter/ipset/ip_set_hash_net.c b/net/netfilter/ipset/ip_set_hash_net.c
index 1c67a17..fae57e0 100644
--- a/net/netfilter/ipset/ip_set_hash_net.c
+++ b/net/netfilter/ipset/ip_set_hash_net.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2003-2013 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
  *
  * This program is free software; you can redistribute it and/or modify
diff --git a/net/netfilter/ipset/ip_set_hash_netiface.c b/net/netfilter/ipset/ip_set_hash_netiface.c
index d417074..8071d9c 100644
--- a/net/netfilter/ipset/ip_set_hash_netiface.c
+++ b/net/netfilter/ipset/ip_set_hash_netiface.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2011-2013 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
  *
  * This program is free software; you can redistribute it and/or modify
diff --git a/net/netfilter/ipset/ip_set_hash_netport.c b/net/netfilter/ipset/ip_set_hash_netport.c
index e6ef382..74dfbc5 100644
--- a/net/netfilter/ipset/ip_set_hash_netport.c
+++ b/net/netfilter/ipset/ip_set_hash_netport.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2003-2013 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
  *
  * This program is free software; you can redistribute it and/or modify
diff --git a/net/netfilter/ipset/ip_set_list_set.c b/net/netfilter/ipset/ip_set_list_set.c
index 178d4eb..f4ed85d 100644
--- a/net/netfilter/ipset/ip_set_list_set.c
+++ b/net/netfilter/ipset/ip_set_list_set.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2008-2013 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
  *
  * This program is free software; you can redistribute it and/or modify
diff --git a/net/netfilter/ipvs/ip_vs_app.c b/net/netfilter/ipvs/ip_vs_app.c
index 299edc6..1ecab53 100644
--- a/net/netfilter/ipvs/ip_vs_app.c
+++ b/net/netfilter/ipvs/ip_vs_app.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ip_vs_app.c: Application module support for IPVS
  *
diff --git a/net/netfilter/ipvs/ip_vs_conn.c b/net/netfilter/ipvs/ip_vs_conn.c
index 3d2ac71a..8a9a70e 100644
--- a/net/netfilter/ipvs/ip_vs_conn.c
+++ b/net/netfilter/ipvs/ip_vs_conn.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS         An implementation of the IP virtual server support for the
  *              LINUX operating system.  IPVS is now implemented as a module
diff --git a/net/netfilter/ipvs/ip_vs_core.c b/net/netfilter/ipvs/ip_vs_core.c
index 5cb7cac..6a95e62 100644
--- a/net/netfilter/ipvs/ip_vs_core.c
+++ b/net/netfilter/ipvs/ip_vs_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS         An implementation of the IP virtual server support for the
  *              LINUX operating system.  IPVS is now implemented as a module
diff --git a/net/netfilter/ipvs/ip_vs_ctl.c b/net/netfilter/ipvs/ip_vs_ctl.c
index b3245f9..a2c3dfa 100644
--- a/net/netfilter/ipvs/ip_vs_ctl.c
+++ b/net/netfilter/ipvs/ip_vs_ctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS         An implementation of the IP virtual server support for the
  *              LINUX operating system.  IPVS is now implemented as a module
diff --git a/net/netfilter/ipvs/ip_vs_dh.c b/net/netfilter/ipvs/ip_vs_dh.c
index 75f798f..de86c50 100644
--- a/net/netfilter/ipvs/ip_vs_dh.c
+++ b/net/netfilter/ipvs/ip_vs_dh.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS:        Destination Hashing scheduling module
  *
diff --git a/net/netfilter/ipvs/ip_vs_est.c b/net/netfilter/ipvs/ip_vs_est.c
index 457c6c1..7c72a49 100644
--- a/net/netfilter/ipvs/ip_vs_est.c
+++ b/net/netfilter/ipvs/ip_vs_est.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ip_vs_est.c: simple rate estimator for IPVS
  *
diff --git a/net/netfilter/ipvs/ip_vs_fo.c b/net/netfilter/ipvs/ip_vs_fo.c
index e09874d..9d4e7d3 100644
--- a/net/netfilter/ipvs/ip_vs_fo.c
+++ b/net/netfilter/ipvs/ip_vs_fo.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS:        Weighted Fail Over module
  *
diff --git a/net/netfilter/ipvs/ip_vs_ftp.c b/net/netfilter/ipvs/ip_vs_ftp.c
index 3e17d32..dbb5dc0 100644
--- a/net/netfilter/ipvs/ip_vs_ftp.c
+++ b/net/netfilter/ipvs/ip_vs_ftp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ip_vs_ftp.c: IPVS ftp application module
  *
diff --git a/net/netfilter/ipvs/ip_vs_lblc.c b/net/netfilter/ipvs/ip_vs_lblc.c
index b6aa4a9..54e8bd0 100644
--- a/net/netfilter/ipvs/ip_vs_lblc.c
+++ b/net/netfilter/ipvs/ip_vs_lblc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS:        Locality-Based Least-Connection scheduling module
  *
diff --git a/net/netfilter/ipvs/ip_vs_lblcr.c b/net/netfilter/ipvs/ip_vs_lblcr.c
index c13ff57..b9e1623 100644
--- a/net/netfilter/ipvs/ip_vs_lblcr.c
+++ b/net/netfilter/ipvs/ip_vs_lblcr.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS:        Locality-Based Least-Connection with Replication scheduler
  *
diff --git a/net/netfilter/ipvs/ip_vs_lc.c b/net/netfilter/ipvs/ip_vs_lc.c
index 19a0769..f0eac41 100644
--- a/net/netfilter/ipvs/ip_vs_lc.c
+++ b/net/netfilter/ipvs/ip_vs_lc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS:        Least-Connection Scheduling module
  *
diff --git a/net/netfilter/ipvs/ip_vs_nq.c b/net/netfilter/ipvs/ip_vs_nq.c
index 7d9d4ac..ac1a7df 100644
--- a/net/netfilter/ipvs/ip_vs_nq.c
+++ b/net/netfilter/ipvs/ip_vs_nq.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS:        Never Queue scheduling module
  *
diff --git a/net/netfilter/ipvs/ip_vs_ovf.c b/net/netfilter/ipvs/ip_vs_ovf.c
index f7d62c3..10158d5 100644
--- a/net/netfilter/ipvs/ip_vs_ovf.c
+++ b/net/netfilter/ipvs/ip_vs_ovf.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS:        Overflow-Connection Scheduling module
  *
diff --git a/net/netfilter/ipvs/ip_vs_proto.c b/net/netfilter/ipvs/ip_vs_proto.c
index ca880a3..85a0005 100644
--- a/net/netfilter/ipvs/ip_vs_proto.c
+++ b/net/netfilter/ipvs/ip_vs_proto.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ip_vs_proto.c: transport protocol load balancing support for IPVS
  *
diff --git a/net/netfilter/ipvs/ip_vs_proto_sctp.c b/net/netfilter/ipvs/ip_vs_proto_sctp.c
index eff7569..bb05c86 100644
--- a/net/netfilter/ipvs/ip_vs_proto_sctp.c
+++ b/net/netfilter/ipvs/ip_vs_proto_sctp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/kernel.h>
 #include <linux/ip.h>
diff --git a/net/netfilter/ipvs/ip_vs_proto_tcp.c b/net/netfilter/ipvs/ip_vs_proto_tcp.c
index 121a321..9d831c8 100644
--- a/net/netfilter/ipvs/ip_vs_proto_tcp.c
+++ b/net/netfilter/ipvs/ip_vs_proto_tcp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ip_vs_proto_tcp.c:	TCP load balancing support for IPVS
  *
diff --git a/net/netfilter/ipvs/ip_vs_proto_udp.c b/net/netfilter/ipvs/ip_vs_proto_udp.c
index 30e11cd..bba9f09 100644
--- a/net/netfilter/ipvs/ip_vs_proto_udp.c
+++ b/net/netfilter/ipvs/ip_vs_proto_udp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ip_vs_proto_udp.c:	UDP load balancing support for IPVS
  *
diff --git a/net/netfilter/ipvs/ip_vs_rr.c b/net/netfilter/ipvs/ip_vs_rr.c
index ee0530d1..4ef8dd4 100644
--- a/net/netfilter/ipvs/ip_vs_rr.c
+++ b/net/netfilter/ipvs/ip_vs_rr.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS:        Round-Robin Scheduling module
  *
diff --git a/net/netfilter/ipvs/ip_vs_sched.c b/net/netfilter/ipvs/ip_vs_sched.c
index a2ff7d7..fcf2635 100644
--- a/net/netfilter/ipvs/ip_vs_sched.c
+++ b/net/netfilter/ipvs/ip_vs_sched.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS         An implementation of the IP virtual server support for the
  *              LINUX operating system.  IPVS is now implemented as a module
diff --git a/net/netfilter/ipvs/ip_vs_sed.c b/net/netfilter/ipvs/ip_vs_sed.c
index ab23cf2..0e2ffb5 100644
--- a/net/netfilter/ipvs/ip_vs_sed.c
+++ b/net/netfilter/ipvs/ip_vs_sed.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS:        Shortest Expected Delay scheduling module
  *
diff --git a/net/netfilter/ipvs/ip_vs_sh.c b/net/netfilter/ipvs/ip_vs_sh.c
index 16aaac6..009b823 100644
--- a/net/netfilter/ipvs/ip_vs_sh.c
+++ b/net/netfilter/ipvs/ip_vs_sh.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS:        Source Hashing scheduling module
  *
diff --git a/net/netfilter/ipvs/ip_vs_sync.c b/net/netfilter/ipvs/ip_vs_sync.c
index 13f7408..375b7dc 100644
--- a/net/netfilter/ipvs/ip_vs_sync.c
+++ b/net/netfilter/ipvs/ip_vs_sync.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * IPVS         An implementation of the IP virtual server support for the
diff --git a/net/netfilter/ipvs/ip_vs_wlc.c b/net/netfilter/ipvs/ip_vs_wlc.c
index 6add39e..04ccd46 100644
--- a/net/netfilter/ipvs/ip_vs_wlc.c
+++ b/net/netfilter/ipvs/ip_vs_wlc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS:        Weighted Least-Connection Scheduling module
  *
diff --git a/net/netfilter/ipvs/ip_vs_wrr.c b/net/netfilter/ipvs/ip_vs_wrr.c
index 62258dd..f2d6e85 100644
--- a/net/netfilter/ipvs/ip_vs_wrr.c
+++ b/net/netfilter/ipvs/ip_vs_wrr.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IPVS:        Weighted Round-Robin Scheduling module
  *
diff --git a/net/netfilter/nf_conntrack_acct.c b/net/netfilter/nf_conntrack_acct.c
index 8669167..a2a27ee 100644
--- a/net/netfilter/nf_conntrack_acct.c
+++ b/net/netfilter/nf_conntrack_acct.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Accouting handling for netfilter. */
 
 /*
@@ -44,7 +46,9 @@ seq_print_acct(struct seq_file *s, const struct nf_conn *ct, int dir)
 
 	acct = nf_conn_acct_find(ct);
 	if (!acct)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	counter = acct->counter;
 	seq_printf(s, "packets=%llu bytes=%llu ",
@@ -75,14 +79,18 @@ static int nf_conntrack_acct_init_sysctl(struct net *net)
 
 	/* Don't export sysctls to unprivileged users */
 	if (net->user_ns != &init_user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table[0].procname = NULL;
+}
 
 	net->ct.acct_sysctl_header = register_net_sysctl(net, "net/netfilter",
 							 table);
 	if (!net->ct.acct_sysctl_header) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "nf_conntrack_acct: can't register to sysctl.\n");
 		goto out_register;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_register:
@@ -125,11 +133,14 @@ int nf_conntrack_acct_init(void)
 {
 	int ret = nf_ct_extend_register(&acct_extend);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("nf_conntrack_acct: Unable to register extension\n");
+}
 	return ret;
 }
 
 void nf_conntrack_acct_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_ct_extend_unregister(&acct_extend);
 }
diff --git a/net/netfilter/nf_conntrack_amanda.c b/net/netfilter/nf_conntrack_amanda.c
index 20edd58..5540ca9 100644
--- a/net/netfilter/nf_conntrack_amanda.c
+++ b/net/netfilter/nf_conntrack_amanda.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Amanda extension for IP connection tracking
  *
  * (C) 2002 by Brian J. Murrell <netfilter@interlinx.bc.ca>
diff --git a/net/netfilter/nf_conntrack_core.c b/net/netfilter/nf_conntrack_core.c
index 0113039..6b165bd 100644
--- a/net/netfilter/nf_conntrack_core.c
+++ b/net/netfilter/nf_conntrack_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Connection state tracking for netfilter.  This is separated from,
    but required by, the NAT layer; it can also be used by an iptables
    extension. */
@@ -105,7 +107,9 @@ void nf_conntrack_lock(spinlock_t *lock) __acquires(lock)
 	 * It pairs with the smp_store_release() in nf_conntrack_all_unlock()
 	 */
 	if (likely(smp_load_acquire(&nf_conntrack_locks_all) == false))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* fast path failed, unlock */
 	spin_unlock(lock);
@@ -123,6 +127,7 @@ EXPORT_SYMBOL_GPL(nf_conntrack_lock);
 
 static void nf_conntrack_double_unlock(unsigned int h1, unsigned int h2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	h1 %= CONNTRACK_LOCKS;
 	h2 %= CONNTRACK_LOCKS;
 	spin_unlock(&nf_conntrack_locks[h1]);
@@ -134,6 +139,7 @@ static void nf_conntrack_double_unlock(unsigned int h1, unsigned int h2)
 static bool nf_conntrack_double_lock(struct net *net, unsigned int h1,
 				     unsigned int h2, unsigned int sequence)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	h1 %= CONNTRACK_LOCKS;
 	h2 %= CONNTRACK_LOCKS;
 	if (h1 <= h2) {
@@ -161,6 +167,7 @@ static void nf_conntrack_all_lock(void)
 
 	nf_conntrack_locks_all = true;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < CONNTRACK_LOCKS; i++) {
 		spin_lock(&nf_conntrack_locks[i]);
 
@@ -197,6 +204,7 @@ static u32 hash_conntrack_raw(const struct nf_conntrack_tuple *tuple,
 	unsigned int n;
 	u32 seed;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	get_random_once(&nf_conntrack_hash_rnd, sizeof(nf_conntrack_hash_rnd));
 
 	/* The direction must be ignored, so we hash everything up to the
@@ -212,6 +220,7 @@ static u32 hash_conntrack_raw(const struct nf_conntrack_tuple *tuple,
 
 static u32 scale_hash(u32 hash)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return reciprocal_scale(hash, nf_conntrack_htable_size);
 }
 
@@ -219,12 +228,14 @@ static u32 __hash_conntrack(const struct net *net,
 			    const struct nf_conntrack_tuple *tuple,
 			    unsigned int size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return reciprocal_scale(hash_conntrack_raw(tuple, net), size);
 }
 
 static u32 hash_conntrack(const struct net *net,
 			  const struct nf_conntrack_tuple *tuple)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scale_hash(hash_conntrack_raw(tuple, net));
 }
 
@@ -239,6 +250,7 @@ nf_ct_get_tuple(const struct sk_buff *skb,
 		const struct nf_conntrack_l3proto *l3proto,
 		const struct nf_conntrack_l4proto *l4proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(tuple, 0, sizeof(*tuple));
 
 	tuple->src.l3num = l3num;
@@ -267,6 +279,7 @@ bool nf_ct_get_tuplepr(const struct sk_buff *skb, unsigned int nhoff,
 	l3proto = __nf_ct_l3proto_find(l3num);
 	ret = l3proto->get_l4proto(skb, nhoff, &protoff, &protonum);
 	if (ret != NF_ACCEPT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		return false;
 	}
@@ -287,6 +300,7 @@ nf_ct_invert_tuple(struct nf_conntrack_tuple *inverse,
 		   const struct nf_conntrack_l3proto *l3proto,
 		   const struct nf_conntrack_l4proto *l4proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(inverse, 0, sizeof(*inverse));
 
 	inverse->src.l3num = orig->src.l3num;
@@ -303,6 +317,7 @@ EXPORT_SYMBOL_GPL(nf_ct_invert_tuple);
 static void
 clean_from_lists(struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("clean_from_lists(%p)\n", ct);
 	hlist_nulls_del_rcu(&ct->tuplehash[IP_CT_DIR_ORIGINAL].hnnode);
 	hlist_nulls_del_rcu(&ct->tuplehash[IP_CT_DIR_REPLY].hnnode);
@@ -365,20 +380,27 @@ struct nf_conn *nf_ct_tmpl_alloc(struct net *net,
 	struct nf_conn *tmpl, *p;
 
 	if (ARCH_KMALLOC_MINALIGN <= NFCT_INFOMASK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tmpl = kzalloc(sizeof(*tmpl) + NFCT_INFOMASK, flags);
 		if (!tmpl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = tmpl;
 		tmpl = (struct nf_conn *)NFCT_ALIGN((unsigned long)p);
 		if (tmpl != p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tmpl = (struct nf_conn *)NFCT_ALIGN((unsigned long)p);
 			tmpl->proto.tmpl_padto = (char *)tmpl - (char *)p;
 		}
 	} else {
 		tmpl = kzalloc(sizeof(*tmpl), flags);
 		if (!tmpl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
 	}
 
 	tmpl->status = IPS_TEMPLATE;
@@ -396,7 +418,9 @@ void nf_ct_tmpl_free(struct nf_conn *tmpl)
 	nf_ct_ext_free(tmpl);
 
 	if (ARCH_KMALLOC_MINALIGN <= NFCT_INFOMASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree((char *)tmpl - tmpl->proto.tmpl_padto);
+}
 	else
 		kfree(tmpl);
 }
@@ -408,6 +432,7 @@ destroy_conntrack(struct nf_conntrack *nfct)
 	struct nf_conn *ct = (struct nf_conn *)nfct;
 	const struct nf_conntrack_l4proto *l4proto;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("destroy_conntrack(%p)\n", ct);
 	WARN_ON(atomic_read(&nfct->use) != 0);
 
@@ -415,10 +440,14 @@ destroy_conntrack(struct nf_conntrack *nfct)
 		nf_ct_tmpl_free(ct);
 		return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	l4proto = __nf_ct_l4proto_find(nf_ct_l3num(ct), nf_ct_protonum(ct));
 	if (l4proto->destroy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		l4proto->destroy(ct);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_bh_disable();
 	/* Expectations will have been removed in clean_from_lists,
 	 * except TFTP can create an expectation on the first packet,
@@ -432,14 +461,18 @@ destroy_conntrack(struct nf_conntrack *nfct)
 	local_bh_enable();
 
 	if (ct->master)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nf_ct_put(ct->master);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("destroy_conntrack: returning ct=%p to slab\n", ct);
 	nf_conntrack_free(ct);
 }
 
 static void nf_ct_delete_from_lists(struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = nf_ct_net(ct);
 	unsigned int hash, reply_hash;
 	unsigned int sequence;
@@ -468,7 +501,9 @@ bool nf_ct_delete(struct nf_conn *ct, u32 portid, int report)
 	struct nf_conn_tstamp *tstamp;
 
 	if (test_and_set_bit(IPS_DYING_BIT, &ct->status))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	tstamp = nf_conn_tstamp_find(ct);
 	if (tstamp && tstamp->stop == 0)
@@ -497,6 +532,7 @@ nf_ct_key_equal(struct nf_conntrack_tuple_hash *h,
 		const struct nf_conntrack_zone *zone,
 		const struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn *ct = nf_ct_tuplehash_to_ctrack(h);
 
 	/* A conntrack can be recreated with the equal tuple,
@@ -511,6 +547,7 @@ nf_ct_key_equal(struct nf_conntrack_tuple_hash *h,
 /* caller must hold rcu readlock and none of the nf_conntrack_locks */
 static void nf_ct_gc_expired(struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!atomic_inc_not_zero(&ct->ct_general.use))
 		return;
 
@@ -607,6 +644,7 @@ static void __nf_conntrack_hash_insert(struct nf_conn *ct,
 				       unsigned int hash,
 				       unsigned int reply_hash)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_nulls_add_head_rcu(&ct->tuplehash[IP_CT_DIR_ORIGINAL].hnnode,
 			   &nf_conntrack_hash[hash]);
 	hlist_nulls_add_head_rcu(&ct->tuplehash[IP_CT_DIR_REPLY].hnnode,
@@ -627,6 +665,7 @@ nf_conntrack_hash_check_insert(struct nf_conn *ct)
 
 	local_bh_disable();
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sequence = read_seqcount_begin(&nf_conntrack_generation);
 		hash = hash_conntrack(net,
 				      &ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple);
@@ -672,6 +711,7 @@ static inline void nf_ct_acct_update(struct nf_conn *ct,
 	if (acct) {
 		struct nf_conn_counter *counter = acct->counter;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic64_inc(&counter[CTINFO2DIR(ctinfo)].packets);
 		atomic64_add(len, &counter[CTINFO2DIR(ctinfo)].bytes);
 	}
@@ -842,6 +882,7 @@ int
 nf_conntrack_tuple_taken(const struct nf_conntrack_tuple *tuple,
 			 const struct nf_conn *ignored_conntrack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = nf_ct_net(ignored_conntrack);
 	const struct nf_conntrack_zone *zone;
 	struct nf_conntrack_tuple_hash *h;
@@ -898,6 +939,7 @@ static unsigned int early_drop_list(struct net *net,
 	unsigned int drops = 0;
 	struct nf_conn *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_nulls_for_each_entry_rcu(h, n, head, hnnode) {
 		tmp = nf_ct_tuplehash_to_ctrack(h);
 
@@ -936,6 +978,7 @@ static noinline int early_drop(struct net *net, unsigned int _hash)
 {
 	unsigned int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < NF_CT_EVICTION_RANGE; i++) {
 		struct hlist_nulls_head *ct_hash;
 		unsigned int hash, hsize, drops;
@@ -958,6 +1001,7 @@ static noinline int early_drop(struct net *net, unsigned int _hash)
 
 static bool gc_worker_skip_ct(const struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !nf_ct_is_confirmed(ct) || nf_ct_is_dying(ct);
 }
 
@@ -965,6 +1009,7 @@ static bool gc_worker_can_early_drop(const struct nf_conn *ct)
 {
 	const struct nf_conntrack_l4proto *l4proto;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_bit(IPS_ASSURED_BIT, &ct->status))
 		return true;
 
@@ -977,6 +1022,7 @@ static bool gc_worker_can_early_drop(const struct nf_conn *ct)
 
 static void gc_worker(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int min_interval = max(HZ / GC_MAX_BUCKETS_DIV, 1u);
 	unsigned int i, goal, buckets = 0, expired_count = 0;
 	unsigned int nf_conntrack_max95 = 0;
@@ -984,12 +1030,15 @@ static void gc_worker(struct work_struct *work)
 	unsigned int ratio, scanned = 0;
 	unsigned long next_run;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	gc_work = container_of(work, struct conntrack_gc_work, dwork.work);
 
 	goal = nf_conntrack_htable_size / GC_MAX_BUCKETS_DIV;
 	i = gc_work->last_bucket;
 	if (gc_work->early_drop)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nf_conntrack_max95 = nf_conntrack_max / 100u * 95u;
+}
 
 	do {
 		struct nf_conntrack_tuple_hash *h;
@@ -1003,7 +1052,9 @@ static void gc_worker(struct work_struct *work)
 
 		nf_conntrack_get_ht(&ct_hash, &hashsz);
 		if (i >= hashsz)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			i = 0;
+}
 
 		hlist_nulls_for_each_entry_rcu(h, n, &ct_hash[i], hnnode) {
 			struct net *net;
@@ -1012,14 +1063,17 @@ static void gc_worker(struct work_struct *work)
 
 			scanned++;
 			if (nf_ct_is_expired(tmp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				nf_ct_gc_expired(tmp);
 				expired_count++;
 				continue;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (nf_conntrack_max95 == 0 || gc_worker_skip_ct(tmp))
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net = nf_ct_net(tmp);
 			if (atomic_read(&net->ct.count) < nf_conntrack_max95)
 				continue;
@@ -1028,14 +1082,20 @@ static void gc_worker(struct work_struct *work)
 			if (!atomic_inc_not_zero(&tmp->ct_general.use))
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (gc_worker_skip_ct(tmp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				nf_ct_put(tmp);
 				continue;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (gc_worker_can_early_drop(tmp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				nf_ct_kill(tmp);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nf_ct_put(tmp);
 		}
 
@@ -1048,7 +1108,9 @@ static void gc_worker(struct work_struct *work)
 	} while (++buckets < goal);
 
 	if (gc_work->exiting)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * Eviction will normally happen from the packet path, and not
@@ -1069,10 +1131,12 @@ static void gc_worker(struct work_struct *work)
 	 */
 	ratio = scanned ? expired_count * 100 / scanned : 0;
 	if (ratio > GC_EVICT_RATIO) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gc_work->next_gc_run = min_interval;
 	} else {
 		unsigned int max = GC_MAX_SCAN_JIFFIES / GC_MAX_BUCKETS_DIV;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUILD_BUG_ON((GC_MAX_SCAN_JIFFIES / GC_MAX_BUCKETS_DIV) == 0);
 
 		gc_work->next_gc_run += min_interval;
@@ -1154,12 +1218,14 @@ struct nf_conn *nf_conntrack_alloc(struct net *net,
 				   const struct nf_conntrack_tuple *repl,
 				   gfp_t gfp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __nf_conntrack_alloc(net, zone, orig, repl, gfp, 0);
 }
 EXPORT_SYMBOL_GPL(nf_conntrack_alloc);
 
 void nf_conntrack_free(struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = nf_ct_net(ct);
 
 	/* A freed object has refcnt == 0, that's
@@ -1197,6 +1263,7 @@ init_conntrack(struct net *net, struct nf_conn *tmpl,
 	unsigned int *timeouts;
 
 	if (!nf_ct_invert_tuple(&repl_tuple, tuple, l3proto, l4proto)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("Can't invert tuple.\n");
 		return NULL;
 	}
@@ -1307,6 +1374,7 @@ resolve_normal_ct(struct net *net, struct nf_conn *tmpl,
 	if (!nf_ct_get_tuple(skb, skb_network_offset(skb),
 			     dataoff, l3num, protonum, net, &tuple, l3proto,
 			     l4proto)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("Can't get tuple\n");
 		return 0;
 	}
@@ -1359,6 +1427,7 @@ nf_conntrack_in(struct net *net, u_int8_t pf, unsigned int hooknum,
 	int ret;
 
 	tmpl = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tmpl || ctinfo == IP_CT_UNTRACKED) {
 		/* Previously seen (loopback or untracked)?  Ignore. */
 		if ((tmpl && !nf_ct_is_template(tmpl)) ||
@@ -1470,6 +1539,7 @@ EXPORT_SYMBOL_GPL(nf_ct_invert_tuplepr);
 void nf_conntrack_alter_reply(struct nf_conn *ct,
 			      const struct nf_conntrack_tuple *newreply)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_help *help = nfct_help(ct);
 
 	/* Should be unconfirmed, so not in hash table yet */
@@ -1495,6 +1565,7 @@ void __nf_ct_refresh_acct(struct nf_conn *ct,
 			  unsigned long extra_jiffies,
 			  int do_acct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!skb);
 
 	/* Only update if this is not a fixed timeout */
@@ -1516,6 +1587,7 @@ bool nf_ct_kill_acct(struct nf_conn *ct,
 		     enum ip_conntrack_info ctinfo,
 		     const struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_ct_acct_update(ct, ctinfo, skb->len);
 
 	return nf_ct_delete(ct, 0, 0);
@@ -1534,6 +1606,7 @@ EXPORT_SYMBOL_GPL(nf_ct_kill_acct);
 int nf_ct_port_tuple_to_nlattr(struct sk_buff *skb,
 			       const struct nf_conntrack_tuple *tuple)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put_be16(skb, CTA_PROTO_SRC_PORT, tuple->src.u.tcp.port) ||
 	    nla_put_be16(skb, CTA_PROTO_DST_PORT, tuple->dst.u.tcp.port))
 		goto nla_put_failure;
@@ -1553,6 +1626,7 @@ EXPORT_SYMBOL_GPL(nf_ct_port_nla_policy);
 int nf_ct_port_nlattr_to_tuple(struct nlattr *tb[],
 			       struct nf_conntrack_tuple *t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tb[CTA_PROTO_SRC_PORT] || !tb[CTA_PROTO_DST_PORT])
 		return -EINVAL;
 
@@ -1578,6 +1652,7 @@ static void nf_conntrack_attach(struct sk_buff *nskb, const struct sk_buff *skb)
 
 	/* This ICMP is in reverse direction to the packet which caused it */
 	ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL)
 		ctinfo = IP_CT_RELATED_REPLY;
 	else
@@ -1604,18 +1679,22 @@ get_next_corpse(int (*iter)(struct nf_conn *i, void *data),
 		nf_conntrack_lock(lockp);
 		if (*bucket < nf_conntrack_htable_size) {
 			hlist_nulls_for_each_entry(h, n, &nf_conntrack_hash[*bucket], hnnode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (NF_CT_DIRECTION(h) != IP_CT_DIR_ORIGINAL)
 					continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ct = nf_ct_tuplehash_to_ctrack(h);
 				if (iter(ct, data))
 					goto found;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(lockp);
 		local_bh_enable();
 		cond_resched();
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 found:
 	atomic_inc(&ct->ct_general.use);
@@ -1633,11 +1712,13 @@ static void nf_ct_iterate_cleanup(int (*iter)(struct nf_conn *i, void *data),
 	might_sleep();
 
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sequence = read_seqcount_begin(&nf_conntrack_generation);
 
 		while ((ct = get_next_corpse(iter, data, &bucket)) != NULL) {
 			/* Time to push up daises... */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nf_ct_delete(ct, portid, report);
 			nf_ct_put(ct);
 			cond_resched();
@@ -1645,6 +1726,7 @@ static void nf_ct_iterate_cleanup(int (*iter)(struct nf_conn *i, void *data),
 
 		if (!read_seqcount_retry(&nf_conntrack_generation, sequence))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bucket = 0;
 	}
 }
@@ -1660,7 +1742,9 @@ static int iter_net_only(struct nf_conn *i, void *data)
 	struct iter_data *d = data;
 
 	if (!net_eq(d->net, nf_ct_net(i)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return d->iter(i, d->data);
 }
@@ -1670,6 +1754,7 @@ __nf_ct_unconfirmed_destroy(struct net *net)
 {
 	int cpu;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(cpu) {
 		struct nf_conntrack_tuple_hash *h;
 		struct hlist_nulls_node *n;
@@ -1698,6 +1783,7 @@ void nf_ct_unconfirmed_destroy(struct net *net)
 	might_sleep();
 
 	if (atomic_read(&net->ct.count) > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__nf_ct_unconfirmed_destroy(net);
 		nf_queue_nf_hook_drop(net);
 		synchronize_net();
@@ -1716,6 +1802,7 @@ void nf_ct_iterate_cleanup_net(struct net *net,
 	if (atomic_read(&net->ct.count) == 0)
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	d.iter = iter;
 	d.data = data;
 	d.net = net;
@@ -1741,6 +1828,7 @@ nf_ct_iterate_destroy(int (*iter)(struct nf_conn *i, void *data), void *data)
 	struct net *net;
 
 	rtnl_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_net(net) {
 		if (atomic_read(&net->ct.count) == 0)
 			continue;
@@ -1768,11 +1856,13 @@ EXPORT_SYMBOL_GPL(nf_ct_iterate_destroy);
 
 static int kill_all(struct nf_conn *i, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return net_eq(nf_ct_net(i), data);
 }
 
 void nf_ct_free_hashtable(void *hash, unsigned int size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (is_vmalloc_addr(hash))
 		vfree(hash);
 	else
@@ -1783,12 +1873,14 @@ EXPORT_SYMBOL_GPL(nf_ct_free_hashtable);
 
 void nf_conntrack_cleanup_start(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	conntrack_gc_work.exiting = true;
 	RCU_INIT_POINTER(ip_ct_attach, NULL);
 }
 
 void nf_conntrack_cleanup_end(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(nf_ct_destroy, NULL);
 
 	cancel_delayed_work_sync(&conntrack_gc_work.dwork);
@@ -1835,9 +1927,12 @@ void nf_conntrack_cleanup_net_list(struct list_head *net_exit_list)
 	list_for_each_entry(net, net_exit_list, exit_list) {
 		nf_ct_iterate_cleanup(kill_all, net, 0, 0);
 		if (atomic_read(&net->ct.count) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			busy = 1;
+}
 	}
 	if (busy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		schedule();
 		goto i_see_dead_people;
 	}
@@ -1861,24 +1956,32 @@ void *nf_ct_alloc_hashtable(unsigned int *sizep, int nulls)
 	size_t sz;
 
 	if (*sizep > (UINT_MAX / sizeof(struct hlist_nulls_head)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(sizeof(struct hlist_nulls_head) != sizeof(struct hlist_head));
 	nr_slots = *sizep = roundup(*sizep, PAGE_SIZE / sizeof(struct hlist_nulls_head));
 
 	if (nr_slots > (UINT_MAX / sizeof(struct hlist_nulls_head)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	sz = nr_slots * sizeof(struct hlist_nulls_head);
 	hash = (void *)__get_free_pages(GFP_KERNEL | __GFP_NOWARN | __GFP_ZERO,
 					get_order(sz));
 	if (!hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hash = vzalloc(sz);
+}
 
 	if (hash && nulls)
 		for (i = 0; i < nr_slots; i++)
 			INIT_HLIST_NULLS_HEAD(&hash[i], i);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hash;
 }
 EXPORT_SYMBOL_GPL(nf_ct_alloc_hashtable);
@@ -1892,7 +1995,9 @@ int nf_conntrack_hash_resize(unsigned int hashsize)
 	struct nf_conn *ct;
 
 	if (!hashsize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	hash = nf_ct_alloc_hashtable(&hashsize, 1);
 	if (!hash)
@@ -1946,7 +2051,9 @@ int nf_conntrack_set_hashsize(const char *val, struct kernel_param *kp)
 	int rc;
 
 	if (current->nsproxy->net_ns != &init_net)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	/* On boot, we can set this without any fancy locking. */
 	if (!nf_conntrack_htable_size)
@@ -2002,6 +2109,7 @@ int nf_conntrack_init_start(void)
 	/* struct nf_ct_ext uses u8 to store offsets/size */
 	BUILD_BUG_ON(total_extension_size() > 255u);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seqcount_init(&nf_conntrack_generation);
 
 	for (i = 0; i < CONNTRACK_LOCKS; i++)
@@ -2017,11 +2125,15 @@ int nf_conntrack_init_start(void)
 			= (((totalram_pages << PAGE_SHIFT) / 16384)
 			   / sizeof(struct hlist_head));
 		if (totalram_pages > (4 * (1024 * 1024 * 1024 / PAGE_SIZE)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nf_conntrack_htable_size = 65536;
+}
 		else if (totalram_pages > (1024 * 1024 * 1024 / PAGE_SIZE))
 			nf_conntrack_htable_size = 16384;
 		if (nf_conntrack_htable_size < 32)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nf_conntrack_htable_size = 32;
+}
 
 		/* Use a max. factor of four by default to get the same max as
 		 * with the old struct list_heads. When a table size is given
@@ -2032,7 +2144,9 @@ int nf_conntrack_init_start(void)
 
 	nf_conntrack_hash = nf_ct_alloc_hashtable(&nf_conntrack_htable_size, 1);
 	if (!nf_conntrack_hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	nf_conntrack_max = max_factor * nf_conntrack_htable_size;
 
@@ -2130,7 +2244,9 @@ int nf_conntrack_init_net(struct net *net)
 	int ret = -ENOMEM;
 	int cpu;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IP_CT_UNTRACKED == IP_CT_NUMBER);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&net->ct.count, 0);
 
 	net->ct.pcpu_lists = alloc_percpu(struct ct_pcpu);
@@ -2167,6 +2283,7 @@ int nf_conntrack_init_net(struct net *net)
 	ret = nf_conntrack_proto_pernet_init(net);
 	if (ret < 0)
 		goto err_proto;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_proto:
diff --git a/net/netfilter/nf_conntrack_ecache.c b/net/netfilter/nf_conntrack_ecache.c
index caac41a..ac6efc6 100644
--- a/net/netfilter/nf_conntrack_ecache.c
+++ b/net/netfilter/nf_conntrack_ecache.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Event cache for netfilter. */
 
 /*
diff --git a/net/netfilter/nf_conntrack_expect.c b/net/netfilter/nf_conntrack_expect.c
index 64778f9..1b68d22 100644
--- a/net/netfilter/nf_conntrack_expect.c
+++ b/net/netfilter/nf_conntrack_expect.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Expectation handling for nf_conntrack. */
 
 /* (C) 1999-2001 Paul `Rusty' Russell
@@ -48,6 +50,7 @@ static unsigned int nf_ct_expect_hashrnd __read_mostly;
 void nf_ct_unlink_expect_report(struct nf_conntrack_expect *exp,
 				u32 portid, int report)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_help *master_help = nfct_help(exp->master);
 	struct net *net = nf_ct_exp_net(exp);
 
@@ -81,6 +84,7 @@ static unsigned int nf_ct_expect_dst_hash(const struct net *n, const struct nf_c
 {
 	unsigned int hash, seed;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	get_random_once(&nf_ct_expect_hashrnd, sizeof(nf_ct_expect_hashrnd));
 
 	seed = nf_ct_expect_hashrnd ^ net_hash_mix(n);
@@ -98,6 +102,7 @@ nf_ct_exp_equal(const struct nf_conntrack_tuple *tuple,
 		const struct nf_conntrack_zone *zone,
 		const struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nf_ct_tuple_mask_cmp(tuple, &i->tuple, &i->mask) &&
 	       net_eq(net, nf_ct_net(i->master)) &&
 	       nf_ct_zone_equal_any(i->master, zone);
@@ -105,6 +110,7 @@ nf_ct_exp_equal(const struct nf_conntrack_tuple *tuple,
 
 bool nf_ct_remove_expect(struct nf_conntrack_expect *exp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (del_timer(&exp->timeout)) {
 		nf_ct_unlink_expect(exp);
 		nf_ct_expect_put(exp);
@@ -123,7 +129,9 @@ __nf_ct_expect_find(struct net *net,
 	unsigned int h;
 
 	if (!net->ct.expect_count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	h = nf_ct_expect_dst_hash(net, tuple);
 	hlist_for_each_entry_rcu(i, &nf_ct_expect_hash[h], hnode) {
@@ -144,6 +152,7 @@ nf_ct_expect_find_get(struct net *net,
 
 	rcu_read_lock();
 	i = __nf_ct_expect_find(net, zone, tuple);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (i && !refcount_inc_not_zero(&i->use))
 		i = NULL;
 	rcu_read_unlock();
@@ -163,7 +172,9 @@ nf_ct_find_expectation(struct net *net,
 	unsigned int h;
 
 	if (!net->ct.expect_count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	h = nf_ct_expect_dst_hash(net, tuple);
 	hlist_for_each_entry(i, &nf_ct_expect_hash[h], hnode) {
@@ -212,6 +223,7 @@ nf_ct_find_expectation(struct net *net,
 /* delete all expectations for this conntrack */
 void nf_ct_remove_expectations(struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_help *help = nfct_help(ct);
 	struct nf_conntrack_expect *exp;
 	struct hlist_node *next;
@@ -239,6 +251,7 @@ static inline int expect_clash(const struct nf_conntrack_expect *a,
 
 	intersect_mask.src.u.all = a->mask.src.u.all & b->mask.src.u.all;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (count = 0; count < NF_CT_TUPLE_L3SIZE; count++){
 		intersect_mask.src.u3.all[count] =
 			a->mask.src.u3.all[count] & b->mask.src.u3.all[count];
@@ -252,6 +265,7 @@ static inline int expect_clash(const struct nf_conntrack_expect *a,
 static inline int expect_matches(const struct nf_conntrack_expect *a,
 				 const struct nf_conntrack_expect *b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return a->master == b->master && a->class == b->class &&
 	       nf_ct_tuple_equal(&a->tuple, &b->tuple) &&
 	       nf_ct_tuple_mask_equal(&a->mask, &b->mask) &&
@@ -262,6 +276,7 @@ static inline int expect_matches(const struct nf_conntrack_expect *a,
 /* Generally a bad idea to call this: could have matched already. */
 void nf_ct_unexpect_related(struct nf_conntrack_expect *exp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&nf_conntrack_expect_lock);
 	nf_ct_remove_expect(exp);
 	spin_unlock_bh(&nf_conntrack_expect_lock);
@@ -277,7 +292,9 @@ struct nf_conntrack_expect *nf_ct_expect_alloc(struct nf_conn *me)
 
 	new = kmem_cache_alloc(nf_ct_expect_cachep, GFP_ATOMIC);
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	new->master = me;
 	refcount_set(&new->use, 1);
@@ -294,7 +311,9 @@ void nf_ct_expect_init(struct nf_conntrack_expect *exp, unsigned int class,
 	int len;
 
 	if (family == AF_INET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = 4;
+}
 	else
 		len = 16;
 
@@ -347,12 +366,14 @@ static void nf_ct_expect_free_rcu(struct rcu_head *head)
 {
 	struct nf_conntrack_expect *exp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	exp = container_of(head, struct nf_conntrack_expect, rcu);
 	kmem_cache_free(nf_ct_expect_cachep, exp);
 }
 
 void nf_ct_expect_put(struct nf_conntrack_expect *exp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (refcount_dec_and_test(&exp->use))
 		call_rcu(&exp->rcu, nf_ct_expect_free_rcu);
 }
@@ -360,6 +381,7 @@ EXPORT_SYMBOL_GPL(nf_ct_expect_put);
 
 static void nf_ct_expect_insert(struct nf_conntrack_expect *exp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_help *master_help = nfct_help(exp->master);
 	struct nf_conntrack_helper *helper;
 	struct net *net = nf_ct_exp_net(exp);
@@ -391,6 +413,7 @@ static void nf_ct_expect_insert(struct nf_conntrack_expect *exp)
 static void evict_oldest_expect(struct nf_conn *master,
 				struct nf_conntrack_expect *new)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_help *master_help = nfct_help(master);
 	struct nf_conntrack_expect *exp, *last = NULL;
 
@@ -416,6 +439,7 @@ static inline int __nf_ct_expect_check(struct nf_conntrack_expect *expect)
 	int ret = 0;
 
 	if (!master_help) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ESHUTDOWN;
 		goto out;
 	}
@@ -463,6 +487,7 @@ int nf_ct_expect_related_report(struct nf_conntrack_expect *expect,
 	if (ret < 0)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_ct_expect_insert(expect);
 
 	spin_unlock_bh(&nf_conntrack_expect_lock);
@@ -483,6 +508,7 @@ void nf_ct_expect_iterate_destroy(bool (*iter)(struct nf_conntrack_expect *e, vo
 
 	spin_lock_bh(&nf_conntrack_expect_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nf_ct_expect_hsize; i++) {
 		hlist_for_each_entry_safe(exp, next,
 					  &nf_ct_expect_hash[i],
@@ -509,6 +535,7 @@ void nf_ct_expect_iterate_net(struct net *net,
 
 	spin_lock_bh(&nf_conntrack_expect_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nf_ct_expect_hsize; i++) {
 		hlist_for_each_entry_safe(exp, next,
 					  &nf_ct_expect_hash[i],
@@ -539,6 +566,7 @@ static struct hlist_node *ct_expect_get_first(struct seq_file *seq)
 	struct ct_expect_iter_state *st = seq->private;
 	struct hlist_node *n;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (st->bucket = 0; st->bucket < nf_ct_expect_hsize; st->bucket++) {
 		n = rcu_dereference(hlist_first_rcu(&nf_ct_expect_hash[st->bucket]));
 		if (n)
@@ -552,6 +580,7 @@ static struct hlist_node *ct_expect_get_next(struct seq_file *seq,
 {
 	struct ct_expect_iter_state *st = seq->private;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	head = rcu_dereference(hlist_next_rcu(head));
 	while (head == NULL) {
 		if (++st->bucket >= nf_ct_expect_hsize)
@@ -563,6 +592,7 @@ static struct hlist_node *ct_expect_get_next(struct seq_file *seq,
 
 static struct hlist_node *ct_expect_get_idx(struct seq_file *seq, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hlist_node *head = ct_expect_get_first(seq);
 
 	if (head)
@@ -574,12 +604,14 @@ static struct hlist_node *ct_expect_get_idx(struct seq_file *seq, loff_t pos)
 static void *exp_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	return ct_expect_get_idx(seq, *pos);
 }
 
 static void *exp_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	(*pos)++;
 	return ct_expect_get_next(seq, v);
 }
@@ -587,6 +619,7 @@ static void *exp_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 static void exp_seq_stop(struct seq_file *seq, void *v)
 	__releases(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -597,6 +630,7 @@ static int exp_seq_show(struct seq_file *s, void *v)
 	struct hlist_node *n = v;
 	char *delim = "";
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	expect = hlist_entry(n, struct nf_conntrack_expect, hnode);
 
 	if (expect->timeout.function)
@@ -645,6 +679,7 @@ static const struct seq_operations exp_seq_ops = {
 
 static int exp_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &exp_seq_ops,
 			sizeof(struct ct_expect_iter_state));
 }
@@ -668,7 +703,9 @@ static int exp_proc_init(struct net *net)
 	proc = proc_create("nf_conntrack_expect", 0440, net->proc_net,
 			   &exp_file_ops);
 	if (!proc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	root_uid = make_kuid(net->user_ns, 0);
 	root_gid = make_kgid(net->user_ns, 0);
@@ -703,26 +740,33 @@ int nf_conntrack_expect_init(void)
 	if (!nf_ct_expect_hsize) {
 		nf_ct_expect_hsize = nf_conntrack_htable_size / 256;
 		if (!nf_ct_expect_hsize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nf_ct_expect_hsize = 1;
+}
 	}
 	nf_ct_expect_max = nf_ct_expect_hsize * 4;
 	nf_ct_expect_cachep = kmem_cache_create("nf_conntrack_expect",
 				sizeof(struct nf_conntrack_expect),
 				0, 0, NULL);
 	if (!nf_ct_expect_cachep)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	nf_ct_expect_hash = nf_ct_alloc_hashtable(&nf_ct_expect_hsize, 0);
 	if (!nf_ct_expect_hash) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kmem_cache_destroy(nf_ct_expect_cachep);
 		return -ENOMEM;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 void nf_conntrack_expect_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_barrier(); /* Wait for call_rcu() before destroy */
 	kmem_cache_destroy(nf_ct_expect_cachep);
 	nf_ct_free_hashtable(nf_ct_expect_hash, nf_ct_expect_hsize);
diff --git a/net/netfilter/nf_conntrack_extend.c b/net/netfilter/nf_conntrack_extend.c
index 9fe0ddc..1137ba7 100644
--- a/net/netfilter/nf_conntrack_extend.c
+++ b/net/netfilter/nf_conntrack_extend.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Structure dynamic extension infrastructure
  * Copyright (C) 2004 Rusty Russell IBM Corporation
  * Copyright (C) 2007 Netfilter Core Team <coreteam@netfilter.org>
@@ -26,6 +28,7 @@ void nf_ct_ext_destroy(struct nf_conn *ct)
 	struct nf_ct_ext_type *t;
 
 	for (i = 0; i < NF_CT_EXT_NUM; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock();
 		t = rcu_dereference(nf_ct_ext_types[i]);
 
@@ -35,6 +38,7 @@ void nf_ct_ext_destroy(struct nf_conn *ct)
 		 */
 		if (t && t->destroy)
 			t->destroy(ct);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 	}
 }
@@ -53,15 +57,20 @@ void *nf_ct_ext_add(struct nf_conn *ct, enum nf_ct_ext_id id, gfp_t gfp)
 
 	if (old) {
 		if (__nf_ct_ext_exist(old, id))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
 		oldlen = old->len;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		oldlen = sizeof(*new);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	t = rcu_dereference(nf_ct_ext_types[id]);
 	if (!t) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		return NULL;
 	}
@@ -73,13 +82,17 @@ void *nf_ct_ext_add(struct nf_conn *ct, enum nf_ct_ext_id id, gfp_t gfp)
 	alloc = max(newlen, NF_CT_EXT_PREALLOC);
 	new = __krealloc(old, alloc, gfp);
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (!old) {
 		memset(new->offset, 0, sizeof(new->offset));
 		ct->ext = new;
 	} else if (new != old) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_rcu(old, rcu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_assign_pointer(ct->ext, new);
 	}
 
@@ -97,6 +110,7 @@ int nf_ct_extend_register(const struct nf_ct_ext_type *type)
 
 	mutex_lock(&nf_ct_ext_type_mutex);
 	if (nf_ct_ext_types[type->id]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EBUSY;
 		goto out;
 	}
@@ -111,6 +125,7 @@ EXPORT_SYMBOL_GPL(nf_ct_extend_register);
 /* This MUST be called in process context. */
 void nf_ct_extend_unregister(const struct nf_ct_ext_type *type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&nf_ct_ext_type_mutex);
 	RCU_INIT_POINTER(nf_ct_ext_types[type->id], NULL);
 	mutex_unlock(&nf_ct_ext_type_mutex);
diff --git a/net/netfilter/nf_conntrack_ftp.c b/net/netfilter/nf_conntrack_ftp.c
index f0e9a75..9f3ca04 100644
--- a/net/netfilter/nf_conntrack_ftp.c
+++ b/net/netfilter/nf_conntrack_ftp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* FTP extension for connection tracking. */
 
 /* (C) 1999-2001 Paul `Rusty' Russell
@@ -114,6 +116,7 @@ static int
 get_ipv6_addr(const char *src, size_t dlen, struct in6_addr *dst, u_int8_t term)
 {
 	const char *end;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = in6_pton(src, min_t(size_t, dlen, 0xffff), (u8 *)dst, term, &end);
 	if (ret > 0)
 		return (int)(end - src);
@@ -161,7 +164,9 @@ static int try_rfc959(const char *data, size_t dlen,
 
 	length = try_number(data, dlen, array, 6, ',', term);
 	if (length == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	cmd->u3.ip =  htonl((array[0] << 24) | (array[1] << 16) |
 				    (array[2] << 8) | array[3]);
@@ -184,6 +189,7 @@ static int try_rfc1123(const char *data, size_t dlen,
 		       unsigned int *offset)
 {
 	int i;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < dlen; i++)
 		if (isdigit(data[i]))
 			break;
@@ -203,6 +209,7 @@ static int get_port(const char *data, int start, size_t dlen, char delim,
 	u_int16_t tmp_port = 0;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = start; i < dlen; i++) {
 		/* Finished? */
 		if (data[i] == delim) {
@@ -232,6 +239,7 @@ static int try_eprt(const char *data, size_t dlen, struct nf_conntrack_man *cmd,
 	/* First character is delimiter, then "1" for IPv4 or "2" for IPv6,
 	   then delimiter again. */
 	if (dlen <= 3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("EPRT: too short\n");
 		return 0;
 	}
@@ -300,6 +308,7 @@ static int find_pattern(const char *data, size_t dlen,
 {
 	size_t i = plen;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("find_pattern `%s': dlen = %zu\n", pattern, dlen);
 
 	if (dlen <= plen) {
@@ -339,6 +348,7 @@ static int find_nl_seq(u32 seq, const struct nf_ct_ftp_master *info, int dir)
 {
 	unsigned int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < info->seq_aft_nl_num[dir]; i++)
 		if (info->seq_aft_nl[dir][i] == seq)
 			return 1;
@@ -382,6 +392,7 @@ static int help(struct sk_buff *skb,
 	const char *fb_ptr;
 	int ret;
 	u32 seq;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int dir = CTINFO2DIR(ctinfo);
 	unsigned int uninitialized_var(matchlen), uninitialized_var(matchoff);
 	struct nf_ct_ftp_master *ct_ftp_info = nfct_help_data(ct);
@@ -548,6 +559,7 @@ static int help(struct sk_buff *skb,
 
 static int nf_ct_ftp_from_nlattr(struct nlattr *attr, struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_ct_ftp_master *ftp = nfct_help_data(ct);
 
 	/* This conntrack has been injected from user-space, always pick up
@@ -569,6 +581,7 @@ static const struct nf_conntrack_expect_policy ftp_exp_policy = {
 /* don't make this __exit, since it's called from __init ! */
 static void nf_conntrack_ftp_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_conntrack_helpers_unregister(ftp, ports_c * 2);
 	kfree(ftp_buffer);
 }
@@ -577,11 +590,14 @@ static int __init nf_conntrack_ftp_init(void)
 {
 	int i, ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	NF_CT_HELPER_BUILD_BUG_ON(sizeof(struct nf_ct_ftp_master));
 
 	ftp_buffer = kmalloc(65536, GFP_KERNEL);
 	if (!ftp_buffer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (ports_c == 0)
 		ports[ports_c++] = FTP_PORT;
@@ -599,11 +615,13 @@ static int __init nf_conntrack_ftp_init(void)
 
 	ret = nf_conntrack_helpers_register(ftp, ports_c * 2);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to register helpers\n");
 		kfree(ftp_buffer);
 		return ret;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
diff --git a/net/netfilter/nf_conntrack_h323_main.c b/net/netfilter/nf_conntrack_h323_main.c
index f71f0d2..d5c01ff 100644
--- a/net/netfilter/nf_conntrack_h323_main.c
+++ b/net/netfilter/nf_conntrack_h323_main.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * H.323 connection tracking helper
  *
diff --git a/net/netfilter/nf_conntrack_helper.c b/net/netfilter/nf_conntrack_helper.c
index 551a1ed..9dd4b50 100644
--- a/net/netfilter/nf_conntrack_helper.c
+++ b/net/netfilter/nf_conntrack_helper.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Helper handling for netfilter. */
 
 /* (C) 1999-2001 Paul `Rusty' Russell
@@ -68,15 +70,19 @@ static int nf_conntrack_helper_init_sysctl(struct net *net)
 
 	/* Don't export sysctls to unprivileged users */
 	if (net->user_ns != &init_user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table[0].procname = NULL;
+}
 
 	net->ct.helper_sysctl_header =
 		register_net_sysctl(net, "net/netfilter", table);
 
 	if (!net->ct.helper_sysctl_header) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("nf_conntrack_helper: can't register to sysctl.\n");
 		goto out_register;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_register:
@@ -136,6 +142,7 @@ __nf_conntrack_helper_find(const char *name, u16 l3num, u8 protonum)
 	struct nf_conntrack_helper *h;
 	unsigned int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nf_ct_helper_hsize; i++) {
 		hlist_for_each_entry_rcu(h, &nf_ct_helper_hash[i], hnode) {
 			if (strcmp(h->name, name))
@@ -163,6 +170,7 @@ nf_conntrack_helper_try_module_get(const char *name, u16 l3num, u8 protonum)
 	h = __nf_conntrack_helper_find(name, l3num, protonum);
 #ifdef CONFIG_MODULES
 	if (h == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		if (request_module("nfct-helper-%s", name) == 0) {
 			rcu_read_lock();
@@ -187,6 +195,7 @@ EXPORT_SYMBOL_GPL(nf_conntrack_helper_try_module_get);
 
 void nf_conntrack_helper_put(struct nf_conntrack_helper *helper)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	refcount_dec(&helper->refcnt);
 	module_put(helper->me);
 }
@@ -200,7 +209,9 @@ nf_ct_helper_ext_add(struct nf_conn *ct,
 
 	help = nf_ct_ext_add(ct, NF_CT_EXT_HELPER, gfp);
 	if (help)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INIT_HLIST_HEAD(&help->expectations);
+}
 	else
 		pr_debug("failed to add helper extension area");
 	return help;
@@ -210,6 +221,7 @@ EXPORT_SYMBOL_GPL(nf_ct_helper_ext_add);
 static struct nf_conntrack_helper *
 nf_ct_lookup_helper(struct nf_conn *ct, struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!net->ct.sysctl_auto_assign_helper) {
 		if (net->ct.auto_assign_helper_warned)
 			return NULL;
@@ -287,6 +299,7 @@ EXPORT_SYMBOL_GPL(__nf_ct_try_assign_helper);
 /* appropriate ct lock protecting must be taken by caller */
 static int unhelp(struct nf_conn *ct, void *me)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_help *help = nfct_help(ct);
 
 	if (help && rcu_dereference_raw(help->helper) == me) {
@@ -300,6 +313,7 @@ static int unhelp(struct nf_conn *ct, void *me)
 
 void nf_ct_helper_destroy(struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_help *help = nfct_help(ct);
 	struct nf_conntrack_helper *helper;
 
@@ -316,6 +330,7 @@ static LIST_HEAD(nf_ct_helper_expectfn_list);
 
 void nf_ct_helper_expectfn_register(struct nf_ct_helper_expectfn *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&nf_conntrack_expect_lock);
 	list_add_rcu(&n->head, &nf_ct_helper_expectfn_list);
 	spin_unlock_bh(&nf_conntrack_expect_lock);
@@ -324,6 +339,7 @@ EXPORT_SYMBOL_GPL(nf_ct_helper_expectfn_register);
 
 void nf_ct_helper_expectfn_unregister(struct nf_ct_helper_expectfn *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&nf_conntrack_expect_lock);
 	list_del_rcu(&n->head);
 	spin_unlock_bh(&nf_conntrack_expect_lock);
@@ -337,6 +353,7 @@ nf_ct_helper_expectfn_find_by_name(const char *name)
 	struct nf_ct_helper_expectfn *cur;
 	bool found = false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(cur, &nf_ct_helper_expectfn_list, head) {
 		if (!strcmp(cur->name, name)) {
 			found = true;
@@ -354,6 +371,7 @@ nf_ct_helper_expectfn_find_by_symbol(const void *symbol)
 	struct nf_ct_helper_expectfn *cur;
 	bool found = false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(cur, &nf_ct_helper_expectfn_list, head) {
 		if (cur->expectfn == symbol) {
 			found = true;
@@ -403,7 +421,9 @@ int nf_conntrack_helper_register(struct nf_conntrack_helper *me)
 	BUG_ON(strlen(me->name) > NF_CT_HELPER_NAME_LEN - 1);
 
 	if (me->expect_policy->max_expected > NF_CT_EXPECT_MAX_CNT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&nf_ct_helper_mutex);
 	for (i = 0; i < nf_ct_helper_hsize; i++) {
@@ -412,6 +432,7 @@ int nf_conntrack_helper_register(struct nf_conntrack_helper *me)
 			    (cur->tuple.src.l3num == NFPROTO_UNSPEC ||
 			     cur->tuple.src.l3num == me->tuple.src.l3num) &&
 			    cur->tuple.dst.protonum == me->tuple.dst.protonum) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EEXIST;
 				goto out;
 			}
@@ -423,11 +444,13 @@ int nf_conntrack_helper_register(struct nf_conntrack_helper *me)
 		hlist_for_each_entry(cur, &nf_ct_helper_hash[h], hnode) {
 			if (nf_ct_tuple_src_mask_cmp(&cur->tuple, &me->tuple,
 						     &mask)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EEXIST;
 				goto out;
 			}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	refcount_set(&me->refcnt, 1);
 	hlist_add_head_rcu(&me->hnode, &nf_ct_helper_hash[h]);
 	nf_ct_helper_count++;
@@ -439,6 +462,7 @@ EXPORT_SYMBOL_GPL(nf_conntrack_helper_register);
 
 static bool expect_iter_me(struct nf_conntrack_expect *exp, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_help *help = nfct_help(exp->master);
 	const struct nf_conntrack_helper *me = data;
 	const struct nf_conntrack_helper *this;
@@ -453,6 +477,7 @@ static bool expect_iter_me(struct nf_conntrack_expect *exp, void *data)
 
 void nf_conntrack_helper_unregister(struct nf_conntrack_helper *me)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&nf_ct_helper_mutex);
 	hlist_del_rcu(&me->hnode);
 	nf_ct_helper_count--;
@@ -508,10 +533,14 @@ int nf_conntrack_helpers_register(struct nf_conntrack_helper *helper,
 			goto err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 err:
 	if (i > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nf_conntrack_helpers_unregister(helper, i);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 EXPORT_SYMBOL_GPL(nf_conntrack_helpers_register);
@@ -519,6 +548,7 @@ EXPORT_SYMBOL_GPL(nf_conntrack_helpers_register);
 void nf_conntrack_helpers_unregister(struct nf_conntrack_helper *helper,
 				unsigned int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (n-- > 0)
 		nf_conntrack_helper_unregister(&helper[n]);
 }
@@ -549,14 +579,18 @@ int nf_conntrack_helper_init(void)
 	nf_ct_helper_hash =
 		nf_ct_alloc_hashtable(&nf_ct_helper_hsize, 0);
 	if (!nf_ct_helper_hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ret = nf_ct_extend_register(&helper_extend);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("nf_ct_helper: Unable to register helper extension.\n");
 		goto out_extend;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 out_extend:
 	nf_ct_free_hashtable(nf_ct_helper_hash, nf_ct_helper_hsize);
@@ -565,6 +599,7 @@ int nf_conntrack_helper_init(void)
 
 void nf_conntrack_helper_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_ct_extend_unregister(&helper_extend);
 	nf_ct_free_hashtable(nf_ct_helper_hash, nf_ct_helper_hsize);
 }
diff --git a/net/netfilter/nf_conntrack_irc.c b/net/netfilter/nf_conntrack_irc.c
index 5523acc..aa7644f 100644
--- a/net/netfilter/nf_conntrack_irc.c
+++ b/net/netfilter/nf_conntrack_irc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* IRC extension for IP connection tracking, Version 1.21
  * (C) 2000-2002 by Harald Welte <laforge@gnumonks.org>
  * based on RR's ip_conntrack_ftp.c
@@ -114,6 +116,7 @@ static int help(struct sk_buff *skb, unsigned int protoff,
 	struct tcphdr _tcph;
 	const char *data_limit;
 	char *data, *ib_ptr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int dir = CTINFO2DIR(ctinfo);
 	struct nf_conntrack_expect *exp;
 	struct nf_conntrack_tuple *tuple;
@@ -239,11 +242,13 @@ static int __init nf_conntrack_irc_init(void)
 	int i, ret;
 
 	if (max_dcc_channels < 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("max_dcc_channels must not be zero\n");
 		return -EINVAL;
 	}
 
 	if (max_dcc_channels > NF_CT_EXPECT_MAX_CNT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("max_dcc_channels must not be more than %u\n",
 		       NF_CT_EXPECT_MAX_CNT);
 		return -EINVAL;
@@ -254,7 +259,9 @@ static int __init nf_conntrack_irc_init(void)
 
 	irc_buffer = kmalloc(65536, GFP_KERNEL);
 	if (!irc_buffer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/* If no port given, default to standard irc port */
 	if (ports_c == 0)
@@ -268,11 +275,13 @@ static int __init nf_conntrack_irc_init(void)
 
 	ret = nf_conntrack_helpers_register(&irc[0], ports_c);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to register helpers\n");
 		kfree(irc_buffer);
 		return ret;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -280,6 +289,7 @@ static int __init nf_conntrack_irc_init(void)
  * it is needed by the init function */
 static void nf_conntrack_irc_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_conntrack_helpers_unregister(irc, ports_c);
 	kfree(irc_buffer);
 }
diff --git a/net/netfilter/nf_conntrack_labels.c b/net/netfilter/nf_conntrack_labels.c
index adf2198..423e6f6 100644
--- a/net/netfilter/nf_conntrack_labels.c
+++ b/net/netfilter/nf_conntrack_labels.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * test/set flag bits stored in conntrack extension area.
  *
diff --git a/net/netfilter/nf_conntrack_netbios_ns.c b/net/netfilter/nf_conntrack_netbios_ns.c
index 496ce17..209a0d6 100644
--- a/net/netfilter/nf_conntrack_netbios_ns.c
+++ b/net/netfilter/nf_conntrack_netbios_ns.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *      NetBIOS name service broadcast connection tracking helper
  *
diff --git a/net/netfilter/nf_conntrack_netlink.c b/net/netfilter/nf_conntrack_netlink.c
index de4053d..1985ab4 100644
--- a/net/netfilter/nf_conntrack_netlink.c
+++ b/net/netfilter/nf_conntrack_netlink.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Connection tracking via netlink socket. Allows for user space
  * protocol helpers and general trouble making from userspace.
  *
@@ -70,6 +72,7 @@ static int ctnetlink_dump_tuples_proto(struct sk_buff *skb,
 	nest_parms = nla_nest_start(skb, CTA_TUPLE_PROTO | NLA_F_NESTED);
 	if (!nest_parms)
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put_u8(skb, CTA_PROTO_NUM, tuple->dst.protonum))
 		goto nla_put_failure;
 
@@ -95,6 +98,7 @@ static int ctnetlink_dump_tuples_ip(struct sk_buff *skb,
 	if (!nest_parms)
 		goto nla_put_failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (likely(l3proto->tuple_to_nlattr))
 		ret = l3proto->tuple_to_nlattr(skb, tuple);
 
@@ -118,6 +122,7 @@ static int ctnetlink_dump_tuples(struct sk_buff *skb,
 	ret = ctnetlink_dump_tuples_ip(skb, tuple, l3proto);
 
 	if (ret >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		l4proto = __nf_ct_l4proto_find(tuple->src.l3num,
 					       tuple->dst.protonum);
 		ret = ctnetlink_dump_tuples_proto(skb, tuple, l4proto);
@@ -129,6 +134,7 @@ static int ctnetlink_dump_tuples(struct sk_buff *skb,
 static int ctnetlink_dump_zone_id(struct sk_buff *skb, int attrtype,
 				  const struct nf_conntrack_zone *zone, int dir)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (zone->id == NF_CT_DEFAULT_ZONE_ID || zone->dir != dir)
 		return 0;
 	if (nla_put_be16(skb, attrtype, htons(zone->id)))
@@ -141,6 +147,7 @@ static int ctnetlink_dump_zone_id(struct sk_buff *skb, int attrtype,
 
 static int ctnetlink_dump_status(struct sk_buff *skb, const struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put_be32(skb, CTA_STATUS, htonl(ct->status)))
 		goto nla_put_failure;
 	return 0;
@@ -151,6 +158,7 @@ static int ctnetlink_dump_status(struct sk_buff *skb, const struct nf_conn *ct)
 
 static int ctnetlink_dump_timeout(struct sk_buff *skb, const struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	long timeout = nf_ct_expires(ct) / HZ;
 
 	if (nla_put_be32(skb, CTA_TIMEOUT, htonl(timeout)))
@@ -169,7 +177,9 @@ static int ctnetlink_dump_protoinfo(struct sk_buff *skb, struct nf_conn *ct)
 
 	l4proto = __nf_ct_l4proto_find(nf_ct_l3num(ct), nf_ct_protonum(ct));
 	if (!l4proto->to_nlattr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	nest_proto = nla_nest_start(skb, CTA_PROTOINFO | NLA_F_NESTED);
 	if (!nest_proto)
@@ -193,7 +203,9 @@ static int ctnetlink_dump_helpinfo(struct sk_buff *skb,
 	struct nf_conntrack_helper *helper;
 
 	if (!help)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	helper = rcu_dereference(help->helper);
 	if (!helper)
@@ -220,6 +232,7 @@ static int
 dump_counters(struct sk_buff *skb, struct nf_conn_acct *acct,
 	      enum ip_conntrack_dir dir, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enum ctattr_type attr = dir ? CTA_COUNTERS_REPLY: CTA_COUNTERS_ORIG;
 	struct nf_conn_counter *counter = acct->counter;
 	struct nlattr *nest_count;
@@ -254,6 +267,7 @@ dump_counters(struct sk_buff *skb, struct nf_conn_acct *acct,
 static int
 ctnetlink_dump_acct(struct sk_buff *skb, const struct nf_conn *ct, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_acct *acct = nf_conn_acct_find(ct);
 
 	if (!acct)
@@ -275,7 +289,9 @@ ctnetlink_dump_timestamp(struct sk_buff *skb, const struct nf_conn *ct)
 
 	tstamp = nf_conn_tstamp_find(ct);
 	if (!tstamp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	nest_count = nla_nest_start(skb, CTA_TIMESTAMP | NLA_F_NESTED);
 	if (!nest_count)
@@ -318,7 +334,9 @@ static int ctnetlink_dump_secctx(struct sk_buff *skb, const struct nf_conn *ct)
 
 	ret = security_secid_to_secctx(ct->secmark, &secctx, &len);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = -1;
 	nest_secctx = nla_nest_start(skb, CTA_SECCTX | NLA_F_NESTED);
@@ -379,7 +397,9 @@ static int ctnetlink_dump_master(struct sk_buff *skb, const struct nf_conn *ct)
 	struct nlattr *nest_parms;
 
 	if (!(ct->status & IPS_EXPECTED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	nest_parms = nla_nest_start(skb, CTA_TUPLE_MASTER | NLA_F_NESTED);
 	if (!nest_parms)
@@ -421,6 +441,7 @@ dump_ct_seq_adj(struct sk_buff *skb, const struct nf_ct_seqadj *seq, int type)
 
 static int ctnetlink_dump_ct_seq_adj(struct sk_buff *skb, struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_seqadj *seqadj = nfct_seqadj(ct);
 	struct nf_ct_seqadj *seq;
 
@@ -445,6 +466,7 @@ static int ctnetlink_dump_ct_seq_adj(struct sk_buff *skb, struct nf_conn *ct)
 
 static int ctnetlink_dump_id(struct sk_buff *skb, const struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put_be32(skb, CTA_ID, htonl((unsigned long)ct)))
 		goto nla_put_failure;
 	return 0;
@@ -455,6 +477,7 @@ static int ctnetlink_dump_id(struct sk_buff *skb, const struct nf_conn *ct)
 
 static int ctnetlink_dump_use(struct sk_buff *skb, const struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put_be32(skb, CTA_USE, htonl(atomic_read(&ct->ct_general.use))))
 		goto nla_put_failure;
 	return 0;
@@ -471,6 +494,7 @@ ctnetlink_fill_info(struct sk_buff *skb, u32 portid, u32 seq, u32 type,
 	struct nlmsghdr *nlh;
 	struct nfgenmsg *nfmsg;
 	struct nlattr *nest_parms;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int flags = portid ? NLM_F_MULTI : 0, event;
 
 	event = nfnl_msg_type(NFNL_SUBSYS_CTNETLINK, IPCTNL_MSG_CT_NEW);
@@ -551,6 +575,7 @@ static inline size_t ctnetlink_proto_size(const struct nf_conn *ct)
 
 static inline size_t ctnetlink_acct_size(const struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!nf_ct_ext_exist(ct, NF_CT_EXT_ACCT))
 		return 0;
 	return 2 * nla_total_size(0) /* CTA_COUNTERS_ORIG|REPL */
@@ -566,7 +591,9 @@ static inline int ctnetlink_secctx_size(const struct nf_conn *ct)
 
 	ret = security_secid_to_secctx(ct->secmark, NULL, &len);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return nla_total_size(0) /* CTA_SECCTX */
 	       + nla_total_size(sizeof(char) * len); /* CTA_SECCTX_NAME */
@@ -756,6 +783,7 @@ ctnetlink_conntrack_event(unsigned int events, struct nf_ct_event *item)
 
 static int ctnetlink_done(struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cb->args[1])
 		nf_ct_put((struct nf_conn *)cb->args[1]);
 	kfree(cb->data);
@@ -793,7 +821,9 @@ static int ctnetlink_filter_match(struct nf_conn *ct, void *data)
 	struct ctnetlink_filter *filter = data;
 
 	if (filter == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 #ifdef CONFIG_NF_CONNTRACK_MARK
 	if ((ct->mark & filter->mark.mask) == filter->mark.val)
@@ -806,6 +836,7 @@ static int ctnetlink_filter_match(struct nf_conn *ct, void *data)
 static int
 ctnetlink_dump_table(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct nf_conn *ct, *last;
 	struct nf_conntrack_tuple_hash *h;
@@ -912,7 +943,9 @@ static int ctnetlink_parse_tuple_ip(struct nlattr *attr,
 
 	ret = nla_parse_nested(tb, CTA_IP_MAX, attr, NULL, NULL);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	rcu_read_lock();
 	l3proto = __nf_ct_l3proto_find(tuple->src.l3num);
@@ -943,7 +976,9 @@ static int ctnetlink_parse_tuple_proto(struct nlattr *attr,
 	ret = nla_parse_nested(tb, CTA_PROTO_MAX, attr, proto_nla_policy,
 			       NULL);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (!tb[CTA_PROTO_NUM])
 		return -EINVAL;
@@ -968,6 +1003,7 @@ static int
 ctnetlink_parse_zone(const struct nlattr *attr,
 		     struct nf_conntrack_zone *zone)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_ct_zone_init(zone, NF_CT_DEFAULT_ZONE_ID,
 			NF_CT_DEFAULT_ZONE_DIR, 0);
 #ifdef CONFIG_NF_CONNTRACK_ZONES
@@ -987,7 +1023,9 @@ ctnetlink_parse_tuple_zone(struct nlattr *attr, enum ctattr_type type,
 	int ret;
 
 	if (zone->id != NF_CT_DEFAULT_ZONE_ID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ret = ctnetlink_parse_zone(attr, zone);
 	if (ret < 0)
@@ -1020,7 +1058,9 @@ ctnetlink_parse_tuple(const struct nlattr * const cda[],
 	err = nla_parse_nested(tb, CTA_TUPLE_MAX, cda[type], tuple_nla_policy,
 			       NULL);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (!tb[CTA_TUPLE_IP])
 		return -EINVAL;
@@ -1070,7 +1110,9 @@ static int ctnetlink_parse_help(const struct nlattr *attr, char **helper_name,
 
 	err = nla_parse_nested(tb, CTA_HELP_MAX, attr, help_nla_policy, NULL);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (!tb[CTA_HELP_NAME])
 		return -EINVAL;
@@ -1111,6 +1153,7 @@ static int ctnetlink_flush_conntrack(struct net *net,
 {
 	struct ctnetlink_filter *filter = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cda[CTA_MARK] && cda[CTA_MARK_MASK]) {
 		filter = ctnetlink_alloc_filter(cda);
 		if (IS_ERR(filter))
@@ -1140,7 +1183,9 @@ static int ctnetlink_del_conntrack(struct net *net, struct sock *ctnl,
 
 	err = ctnetlink_parse_zone(cda[CTA_ZONE], &zone);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (cda[CTA_TUPLE_ORIG])
 		err = ctnetlink_parse_tuple(cda, &tuple, CTA_TUPLE_ORIG,
@@ -1198,6 +1243,7 @@ static int ctnetlink_get_conntrack(struct net *net, struct sock *ctnl,
 			.done = ctnetlink_done,
 		};
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cda[CTA_MARK] && cda[CTA_MARK_MASK]) {
 			struct ctnetlink_filter *filter;
 
@@ -1262,6 +1308,7 @@ static int ctnetlink_get_conntrack(struct net *net, struct sock *ctnl,
 
 static int ctnetlink_done_list(struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cb->args[1])
 		nf_ct_put((struct nf_conn *)cb->args[1]);
 	return 0;
@@ -1281,7 +1328,9 @@ ctnetlink_dump_list(struct sk_buff *skb, struct netlink_callback *cb, bool dying
 	struct net *net = sock_net(skb->sk);
 
 	if (cb->args[2])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	last = (struct nf_conn *)cb->args[1];
 
@@ -1336,6 +1385,7 @@ ctnetlink_dump_list(struct sk_buff *skb, struct netlink_callback *cb, bool dying
 static int
 ctnetlink_dump_dying(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ctnetlink_dump_list(skb, cb, true);
 }
 
@@ -1345,6 +1395,7 @@ static int ctnetlink_get_ct_dying(struct net *net, struct sock *ctnl,
 				  const struct nlattr * const cda[],
 				  struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nlh->nlmsg_flags & NLM_F_DUMP) {
 		struct netlink_dump_control c = {
 			.dump = ctnetlink_dump_dying,
@@ -1359,6 +1410,7 @@ static int ctnetlink_get_ct_dying(struct net *net, struct sock *ctnl,
 static int
 ctnetlink_dump_unconfirmed(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ctnetlink_dump_list(skb, cb, false);
 }
 
@@ -1368,6 +1420,7 @@ static int ctnetlink_get_ct_unconfirmed(struct net *net, struct sock *ctnl,
 					const struct nlattr * const cda[],
 					struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nlh->nlmsg_flags & NLM_F_DUMP) {
 		struct netlink_dump_control c = {
 			.dump = ctnetlink_dump_unconfirmed,
@@ -1388,6 +1441,7 @@ ctnetlink_parse_nat_setup(struct nf_conn *ct,
 	typeof(nfnetlink_parse_nat_setup_hook) parse_nat_setup;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	parse_nat_setup = rcu_dereference(nfnetlink_parse_nat_setup_hook);
 	if (!parse_nat_setup) {
 #ifdef CONFIG_MODULES
@@ -1436,6 +1490,7 @@ __ctnetlink_change_status(struct nf_conn *ct, unsigned long on,
 	on &= ~IPS_UNCHANGEABLE_MASK;
 	off &= ~IPS_UNCHANGEABLE_MASK;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (bit = 0; bit < __IPS_MAX_BIT; bit++) {
 		if (on & (1 << bit))
 			set_bit(bit, &ct->status);
@@ -1448,6 +1503,7 @@ static int
 ctnetlink_change_status(struct nf_conn *ct, const struct nlattr * const cda[])
 {
 	unsigned long d;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int status = ntohl(nla_get_be32(cda[CTA_STATUS]));
 	d = ct->status ^ status;
 
@@ -1473,6 +1529,7 @@ ctnetlink_setup_nat(struct nf_conn *ct, const struct nlattr * const cda[])
 #ifdef CONFIG_NF_NAT_NEEDED
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!cda[CTA_NAT_DST] && !cda[CTA_NAT_SRC])
 		return 0;
 
@@ -1502,7 +1559,9 @@ static int ctnetlink_change_helper(struct nf_conn *ct,
 
 	err = ctnetlink_parse_help(cda[CTA_HELP], &helpname, &helpinfo);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/* don't change helper of sibling connections */
 	if (ct->master) {
@@ -1560,6 +1619,7 @@ static int ctnetlink_change_helper(struct nf_conn *ct,
 static int ctnetlink_change_timeout(struct nf_conn *ct,
 				    const struct nlattr * const cda[])
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u_int32_t timeout = ntohl(nla_get_be32(cda[CTA_TIMEOUT]));
 
 	ct->timeout = nfct_time_stamp + timeout * HZ;
@@ -1587,7 +1647,9 @@ static int ctnetlink_change_protoinfo(struct nf_conn *ct,
 	err = nla_parse_nested(tb, CTA_PROTOINFO_MAX, attr, protoinfo_policy,
 			       NULL);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	rcu_read_lock();
 	l4proto = __nf_ct_l4proto_find(nf_ct_l3num(ct), nf_ct_protonum(ct));
@@ -1612,7 +1674,9 @@ static int change_seq_adj(struct nf_ct_seqadj *seq,
 
 	err = nla_parse_nested(cda, CTA_SEQADJ_MAX, attr, seqadj_policy, NULL);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (!cda[CTA_SEQADJ_CORRECTION_POS])
 		return -EINVAL;
@@ -1639,6 +1703,7 @@ static int
 ctnetlink_change_seq_adj(struct nf_conn *ct,
 			 const struct nlattr * const cda[])
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_seqadj *seqadj = nfct_seqadj(ct);
 	int ret = 0;
 
@@ -1765,7 +1830,9 @@ ctnetlink_create_conntrack(struct net *net,
 
 	ct = nf_conntrack_alloc(net, zone, otuple, rtuple, GFP_ATOMIC);
 	if (IS_ERR(ct))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	if (!cda[CTA_TIMEOUT])
 		goto err1;
@@ -1918,7 +1985,9 @@ static int ctnetlink_new_conntrack(struct net *net, struct sock *ctnl,
 
 	err = ctnetlink_parse_zone(cda[CTA_ZONE], &zone);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (cda[CTA_TUPLE_ORIG]) {
 		err = ctnetlink_parse_tuple(cda, &otuple, CTA_TUPLE_ORIG,
@@ -2006,6 +2075,7 @@ ctnetlink_ct_stat_cpu_fill_info(struct sk_buff *skb, u32 portid, u32 seq,
 {
 	struct nlmsghdr *nlh;
 	struct nfgenmsg *nfmsg;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int flags = portid ? NLM_F_MULTI : 0, event;
 
 	event = nfnl_msg_type(NFNL_SUBSYS_CTNETLINK,
@@ -2048,7 +2118,9 @@ ctnetlink_ct_stat_cpu_dump(struct sk_buff *skb, struct netlink_callback *cb)
 	struct net *net = sock_net(skb->sk);
 
 	if (cb->args[0] == nr_cpu_ids)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	for (cpu = cb->args[0]; cpu < nr_cpu_ids; cpu++) {
 		const struct ip_conntrack_stat *st;
@@ -2074,6 +2146,7 @@ static int ctnetlink_stat_ct_cpu(struct net *net, struct sock *ctnl,
 				 const struct nlattr * const cda[],
 				 struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nlh->nlmsg_flags & NLM_F_DUMP) {
 		struct netlink_dump_control c = {
 			.dump = ctnetlink_ct_stat_cpu_dump,
@@ -2090,6 +2163,7 @@ ctnetlink_stat_ct_fill_info(struct sk_buff *skb, u32 portid, u32 seq, u32 type,
 {
 	struct nlmsghdr *nlh;
 	struct nfgenmsg *nfmsg;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int flags = portid ? NLM_F_MULTI : 0, event;
 	unsigned int nr_conntracks = atomic_read(&net->ct.count);
 
@@ -2125,7 +2199,9 @@ static int ctnetlink_stat_ct(struct net *net, struct sock *ctnl,
 
 	skb2 = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
 	if (skb2 == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	err = ctnetlink_stat_ct_fill_info(skb2, NETLINK_CB(skb).portid,
 					  nlh->nlmsg_seq,
@@ -2461,6 +2537,7 @@ static int ctnetlink_exp_dump_tuple(struct sk_buff *skb,
 	nest_parms = nla_nest_start(skb, type | NLA_F_NESTED);
 	if (!nest_parms)
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ctnetlink_dump_tuples(skb, tuple) < 0)
 		goto nla_put_failure;
 	nla_nest_end(skb, nest_parms);
@@ -2482,6 +2559,7 @@ static int ctnetlink_exp_dump_mask(struct sk_buff *skb,
 	int ret;
 
 	memset(&m, 0xFF, sizeof(m));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&m.src.u3, &mask->src.u3, sizeof(m.src.u3));
 	m.src.u.all = mask->src.u.all;
 	m.dst.protonum = tuple->dst.protonum;
@@ -2527,7 +2605,9 @@ ctnetlink_exp_dump_expect(struct sk_buff *skb,
 	struct nf_ct_helper_expectfn *expfn;
 
 	if (timeout < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		timeout = 0;
+}
 
 	if (ctnetlink_exp_dump_tuple(skb, &exp->tuple, CTA_EXPECT_TUPLE) < 0)
 		goto nla_put_failure;
@@ -2590,6 +2670,7 @@ ctnetlink_exp_fill_info(struct sk_buff *skb, u32 portid, u32 seq,
 {
 	struct nlmsghdr *nlh;
 	struct nfgenmsg *nfmsg;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int flags = portid ? NLM_F_MULTI : 0;
 
 	event = nfnl_msg_type(NFNL_SUBSYS_CTNETLINK_EXP, event);
@@ -2671,6 +2752,7 @@ ctnetlink_expect_event(unsigned int events, struct nf_exp_event *item)
 #endif
 static int ctnetlink_exp_done(struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cb->args[1])
 		nf_ct_expect_put((struct nf_conntrack_expect *)cb->args[1]);
 	return 0;
@@ -2679,6 +2761,7 @@ static int ctnetlink_exp_done(struct netlink_callback *cb)
 static int
 ctnetlink_exp_dump_table(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct nf_conntrack_expect *exp, *last;
 	struct nfgenmsg *nfmsg = nlmsg_data(cb->nlh);
@@ -2735,7 +2818,9 @@ ctnetlink_exp_ct_dump_table(struct sk_buff *skb, struct netlink_callback *cb)
 	u_int8_t l3proto = nfmsg->nfgen_family;
 
 	if (cb->args[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	rcu_read_lock();
 	last = (struct nf_conntrack_expect *)cb->args[1];
@@ -2792,7 +2877,9 @@ static int ctnetlink_dump_exp_ct(struct net *net, struct sock *ctnl,
 	err = ctnetlink_parse_tuple(cda, &tuple, CTA_EXPECT_MASTER,
 				    u3, NULL);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = ctnetlink_parse_zone(cda[CTA_EXPECT_ZONE], &zone);
 	if (err < 0)
@@ -2831,6 +2918,7 @@ static int ctnetlink_get_expect(struct net *net, struct sock *ctnl,
 	int err;
 
 	if (nlh->nlmsg_flags & NLM_F_DUMP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cda[CTA_EXPECT_MASTER])
 			return ctnetlink_dump_exp_ct(net, ctnl, skb, nlh, cda,
 						     extack);
@@ -2911,6 +2999,7 @@ static bool expect_iter_name(struct nf_conntrack_expect *exp, void *data)
 
 static bool expect_iter_all(struct nf_conntrack_expect *exp, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 
@@ -2980,6 +3069,7 @@ static int
 ctnetlink_change_expect(struct nf_conntrack_expect *x,
 			const struct nlattr * const cda[])
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (cda[CTA_EXPECT_TIMEOUT]) {
 		if (!del_timer(&x->timeout))
 			return -ETIME;
@@ -3009,7 +3099,9 @@ ctnetlink_parse_expect_nat(const struct nlattr *attr,
 	err = nla_parse_nested(tb, CTA_EXPECT_NAT_MAX, attr,
 			       exp_nat_nla_policy, NULL);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (!tb[CTA_EXPECT_NAT_DIR] || !tb[CTA_EXPECT_NAT_TUPLE])
 		return -EINVAL;
@@ -3043,7 +3135,9 @@ ctnetlink_alloc_expect(const struct nlattr * const cda[], struct nf_conn *ct,
 
 	help = nfct_help(ct);
 	if (!help)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EOPNOTSUPP);
+}
 
 	if (cda[CTA_EXPECT_CLASS] && helper) {
 		class = ntohl(nla_get_be32(cda[CTA_EXPECT_CLASS]));
@@ -3109,7 +3203,9 @@ ctnetlink_create_expect(struct net *net,
 	err = ctnetlink_parse_tuple(cda, &tuple, CTA_EXPECT_TUPLE,
 				    u3, NULL);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	err = ctnetlink_parse_tuple(cda, &mask, CTA_EXPECT_MASK,
 				    u3, NULL);
 	if (err < 0)
@@ -3220,6 +3316,7 @@ ctnetlink_exp_stat_fill_info(struct sk_buff *skb, u32 portid, u32 seq, int cpu,
 {
 	struct nlmsghdr *nlh;
 	struct nfgenmsg *nfmsg;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int flags = portid ? NLM_F_MULTI : 0, event;
 
 	event = nfnl_msg_type(NFNL_SUBSYS_CTNETLINK,
@@ -3254,7 +3351,9 @@ ctnetlink_exp_stat_cpu_dump(struct sk_buff *skb, struct netlink_callback *cb)
 	struct net *net = sock_net(skb->sk);
 
 	if (cb->args[0] == nr_cpu_ids)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	for (cpu = cb->args[0]; cpu < nr_cpu_ids; cpu++) {
 		const struct ip_conntrack_stat *st;
@@ -3279,6 +3378,7 @@ static int ctnetlink_stat_exp_cpu(struct net *net, struct sock *ctnl,
 				  const struct nlattr * const cda[],
 				  struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nlh->nlmsg_flags & NLM_F_DUMP) {
 		struct netlink_dump_control c = {
 			.dump = ctnetlink_exp_stat_cpu_dump,
@@ -3404,18 +3504,21 @@ static int __init ctnetlink_init(void)
 	pr_info("ctnetlink v%s: registering with nfnetlink.\n", version);
 	ret = nfnetlink_subsys_register(&ctnl_subsys);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("ctnetlink_init: cannot register with nfnetlink.\n");
 		goto err_out;
 	}
 
 	ret = nfnetlink_subsys_register(&ctnl_exp_subsys);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("ctnetlink_init: cannot register exp with nfnetlink.\n");
 		goto err_unreg_subsys;
 	}
 
 	ret = register_pernet_subsys(&ctnetlink_net_ops);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("ctnetlink_init: cannot register pernet operations\n");
 		goto err_unreg_exp_subsys;
 	}
@@ -3435,6 +3538,7 @@ static int __init ctnetlink_init(void)
 
 static void __exit ctnetlink_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_info("ctnetlink: unregistering from nfnetlink.\n");
 
 	unregister_pernet_subsys(&ctnetlink_net_ops);
diff --git a/net/netfilter/nf_conntrack_pptp.c b/net/netfilter/nf_conntrack_pptp.c
index 11562f2..e0df8cf 100644
--- a/net/netfilter/nf_conntrack_pptp.c
+++ b/net/netfilter/nf_conntrack_pptp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Connection tracking support for PPTP (Point to Point Tunneling Protocol).
  * PPTP is a a protocol for creating virtual private networks.
diff --git a/net/netfilter/nf_conntrack_proto.c b/net/netfilter/nf_conntrack_proto.c
index b3e489c..cda96a5 100644
--- a/net/netfilter/nf_conntrack_proto.c
+++ b/net/netfilter/nf_conntrack_proto.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* L3/L4 protocol support for nf_conntrack. */
 
 /* (C) 1999-2001 Paul `Rusty' Russell
@@ -44,9 +46,12 @@ nf_ct_register_sysctl(struct net *net,
 	if (*header == NULL) {
 		*header = register_net_sysctl(net, path, table);
 		if (*header == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -56,7 +61,9 @@ nf_ct_unregister_sysctl(struct ctl_table_header **header,
 			unsigned int users)
 {
 	if (users > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	unregister_net_sysctl_table(*header);
 	kfree(*table);
@@ -68,6 +75,7 @@ nf_ct_unregister_sysctl(struct ctl_table_header **header,
 const struct nf_conntrack_l4proto *
 __nf_ct_l4proto_find(u_int16_t l3proto, u_int8_t l4proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(l3proto >= NFPROTO_NUMPROTO || nf_ct_protos[l3proto] == NULL))
 		return &nf_conntrack_l4proto_generic;
 
@@ -85,7 +93,10 @@ nf_ct_l3proto_find_get(u_int16_t l3proto)
 	rcu_read_lock();
 	p = __nf_ct_l3proto_find(l3proto);
 	if (!try_module_get(p->me))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = &nf_conntrack_l3proto_generic;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	return p;
@@ -100,13 +111,16 @@ nf_ct_l3proto_try_module_get(unsigned short l3proto)
 
 retry:	p = nf_ct_l3proto_find_get(l3proto);
 	if (p == &nf_conntrack_l3proto_generic) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = request_module("nf_conntrack-%d", l3proto);
 		if (!ret)
 			goto retry;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPROTOTYPE;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL_GPL(nf_ct_l3proto_try_module_get);
@@ -130,6 +144,7 @@ int nf_ct_netns_get(struct net *net, u8 nfproto)
 	const struct nf_conntrack_l3proto *l3proto;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	ret = nf_ct_l3proto_try_module_get(nfproto);
@@ -156,6 +171,7 @@ void nf_ct_netns_put(struct net *net, u8 nfproto)
 {
 	const struct nf_conntrack_l3proto *l3proto;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	/* same as nf_conntrack_netns_get(), reference assumed */
@@ -181,7 +197,9 @@ nf_ct_l4proto_find_get(u_int16_t l3num, u_int8_t l4num)
 	rcu_read_lock();
 	p = __nf_ct_l4proto_find(l3num, l4num);
 	if (!try_module_get(p->me))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = &nf_conntrack_l4proto_generic;
+}
 	rcu_read_unlock();
 
 	return p;
@@ -190,12 +208,14 @@ EXPORT_SYMBOL_GPL(nf_ct_l4proto_find_get);
 
 void nf_ct_l4proto_put(const struct nf_conntrack_l4proto *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	module_put(p->me);
 }
 EXPORT_SYMBOL_GPL(nf_ct_l4proto_put);
 
 static int kill_l3proto(struct nf_conn *i, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nf_ct_l3num(i) == ((const struct nf_conntrack_l3proto *)data)->l3proto;
 }
 
@@ -203,6 +223,7 @@ static int kill_l4proto(struct nf_conn *i, void *data)
 {
 	const struct nf_conntrack_l4proto *l4proto;
 	l4proto = data;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nf_ct_protonum(i) == l4proto->l4proto &&
 	       nf_ct_l3num(i) == l4proto->l3proto;
 }
@@ -213,15 +234,20 @@ int nf_ct_l3proto_register(const struct nf_conntrack_l3proto *proto)
 	struct nf_conntrack_l3proto *old;
 
 	if (proto->l3proto >= NFPROTO_NUMPROTO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 #if IS_ENABLED(CONFIG_NF_CT_NETLINK)
 	if (proto->tuple_to_nlattr && proto->nla_size == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 #endif
 	mutex_lock(&nf_ct_proto_mutex);
 	old = rcu_dereference_protected(nf_ct_l3protos[proto->l3proto],
 					lockdep_is_held(&nf_ct_proto_mutex));
 	if (old != &nf_conntrack_l3proto_generic) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EBUSY;
 		goto out_unlock;
 	}
@@ -237,6 +263,7 @@ EXPORT_SYMBOL_GPL(nf_ct_l3proto_register);
 
 void nf_ct_l3proto_unregister(const struct nf_conntrack_l3proto *proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(proto->l3proto >= NFPROTO_NUMPROTO);
 
 	mutex_lock(&nf_ct_proto_mutex);
@@ -263,6 +290,7 @@ static struct nf_proto_net *nf_ct_l4proto_net(struct net *net,
 		/* ... and loadable protocols use dynamic per-net */
 		return net_generic(net, *l4proto->net_id);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -280,7 +308,9 @@ int nf_ct_l4proto_register_sysctl(struct net *net,
 					    "net/netfilter",
 					    pn->ctl_table);
 		if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!pn->users) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kfree(pn->ctl_table);
 				pn->ctl_table = NULL;
 			}
@@ -310,7 +340,9 @@ int nf_ct_l4proto_register_one(struct nf_conntrack_l4proto *l4proto)
 	int ret = 0;
 
 	if (l4proto->l3proto >= ARRAY_SIZE(nf_ct_protos))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	if ((l4proto->to_nlattr && !l4proto->nlattr_size) ||
 	    (l4proto->tuple_to_nlattr && !l4proto->nlattr_tuple_size))
@@ -326,6 +358,7 @@ int nf_ct_l4proto_register_one(struct nf_conntrack_l4proto *l4proto)
 				      sizeof(struct nf_conntrack_l4proto *),
 				      GFP_KERNEL);
 		if (proto_array == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ENOMEM;
 			goto out_unlock;
 		}
@@ -344,6 +377,7 @@ int nf_ct_l4proto_register_one(struct nf_conntrack_l4proto *l4proto)
 			nf_ct_protos[l4proto->l3proto][l4proto->l4proto],
 			lockdep_is_held(&nf_ct_proto_mutex)
 			) != &nf_conntrack_l4proto_generic) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EBUSY;
 		goto out_unlock;
 	}
@@ -391,6 +425,7 @@ EXPORT_SYMBOL_GPL(nf_ct_l4proto_pernet_register_one);
 static void __nf_ct_l4proto_unregister_one(const struct nf_conntrack_l4proto *l4proto)
 
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(l4proto->l3proto >= ARRAY_SIZE(nf_ct_protos));
 
 	BUG_ON(rcu_dereference_protected(
@@ -403,6 +438,7 @@ static void __nf_ct_l4proto_unregister_one(const struct nf_conntrack_l4proto *l4
 
 void nf_ct_l4proto_unregister_one(const struct nf_conntrack_l4proto *l4proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&nf_ct_proto_mutex);
 	__nf_ct_l4proto_unregister_one(l4proto);
 	mutex_unlock(&nf_ct_proto_mutex);
@@ -417,7 +453,9 @@ void nf_ct_l4proto_pernet_unregister_one(struct net *net,
 	struct nf_proto_net *pn = nf_ct_l4proto_net(net, l4proto);
 
 	if (pn == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	pn->users--;
 	nf_ct_l4proto_unregister_sysctl(net, pn, l4proto);
@@ -436,6 +474,7 @@ int nf_ct_l4proto_register(struct nf_conntrack_l4proto *l4proto[],
 			break;
 	}
 	if (i != num_proto) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ver = l4proto[i]->l3proto == PF_INET6 ? 6 : 4;
 		pr_err("nf_conntrack_ipv%d: can't register l4 %d proto.\n",
 		       ver, l4proto[i]->l4proto);
@@ -458,6 +497,7 @@ int nf_ct_l4proto_pernet_register(struct net *net,
 			break;
 	}
 	if (i != num_proto) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("nf_conntrack_proto_%d %d: pernet registration failed\n",
 		       l4proto[i]->l4proto,
 		       l4proto[i]->l3proto == PF_INET6 ? 6 : 4);
@@ -470,6 +510,7 @@ EXPORT_SYMBOL_GPL(nf_ct_l4proto_pernet_register);
 void nf_ct_l4proto_unregister(struct nf_conntrack_l4proto *l4proto[],
 			      unsigned int num_proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&nf_ct_proto_mutex);
 	while (num_proto-- != 0)
 		__nf_ct_l4proto_unregister_one(l4proto[num_proto]);
@@ -499,12 +540,16 @@ int nf_conntrack_proto_pernet_init(struct net *net)
 	err = nf_conntrack_l4proto_generic.init_net(net,
 					nf_conntrack_l4proto_generic.l3proto);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	err = nf_ct_l4proto_register_sysctl(net,
 					    pn,
 					    &nf_conntrack_l4proto_generic);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	pn->users++;
 	return 0;
diff --git a/net/netfilter/nf_conntrack_proto_dccp.c b/net/netfilter/nf_conntrack_proto_dccp.c
index 0f5a4d7..a0373f8 100644
--- a/net/netfilter/nf_conntrack_proto_dccp.c
+++ b/net/netfilter/nf_conntrack_proto_dccp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * DCCP connection tracking protocol helper
  *
diff --git a/net/netfilter/nf_conntrack_proto_generic.c b/net/netfilter/nf_conntrack_proto_generic.c
index 9cd4070..903682b 100644
--- a/net/netfilter/nf_conntrack_proto_generic.c
+++ b/net/netfilter/nf_conntrack_proto_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>
  *
@@ -16,6 +18,7 @@ static unsigned int nf_ct_generic_timeout __read_mostly = 600*HZ;
 
 static bool nf_generic_should_process(u8 proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (proto) {
 #ifdef CONFIG_NF_CT_PROTO_GRE_MODULE
 	case IPPROTO_GRE:
@@ -35,6 +38,7 @@ static bool generic_pkt_to_tuple(const struct sk_buff *skb,
 				 unsigned int dataoff,
 				 struct net *net, struct nf_conntrack_tuple *tuple)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tuple->src.u.all = 0;
 	tuple->dst.u.all = 0;
 
@@ -44,6 +48,7 @@ static bool generic_pkt_to_tuple(const struct sk_buff *skb,
 static bool generic_invert_tuple(struct nf_conntrack_tuple *tuple,
 				 const struct nf_conntrack_tuple *orig)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tuple->src.u.all = 0;
 	tuple->dst.u.all = 0;
 
@@ -52,6 +57,7 @@ static bool generic_invert_tuple(struct nf_conntrack_tuple *tuple,
 
 static unsigned int *generic_get_timeouts(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &(generic_pernet(net)->timeout);
 }
 
@@ -63,6 +69,7 @@ static int generic_packet(struct nf_conn *ct,
 			  u_int8_t pf,
 			  unsigned int *timeout)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_ct_refresh_acct(ct, ctinfo, skb, *timeout);
 	return NF_ACCEPT;
 }
@@ -75,8 +82,10 @@ static bool generic_new(struct nf_conn *ct, const struct sk_buff *skb,
 
 	ret = nf_generic_should_process(nf_ct_protonum(ct));
 	if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn_once("conntrack: generic helper won't handle protocol %d. Please consider loading the specific helper module.\n",
 			     nf_ct_protonum(ct));
+}
 	return ret;
 }
 
@@ -142,7 +151,9 @@ static int generic_kmemdup_sysctl_table(struct nf_proto_net *pn,
 				sizeof(generic_sysctl_table),
 				GFP_KERNEL);
 	if (!pn->ctl_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	pn->ctl_table[0].data = &gn->timeout;
 #endif
@@ -151,6 +162,7 @@ static int generic_kmemdup_sysctl_table(struct nf_proto_net *pn,
 
 static int generic_init_net(struct net *net, u_int16_t proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_generic_net *gn = generic_pernet(net);
 	struct nf_proto_net *pn = &gn->pn;
 
diff --git a/net/netfilter/nf_conntrack_proto_gre.c b/net/netfilter/nf_conntrack_proto_gre.c
index 09a9048..443d638 100644
--- a/net/netfilter/nf_conntrack_proto_gre.c
+++ b/net/netfilter/nf_conntrack_proto_gre.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ip_conntrack_proto_gre.c - Version 3.0
  *
diff --git a/net/netfilter/nf_conntrack_proto_sctp.c b/net/netfilter/nf_conntrack_proto_sctp.c
index 6303a88..9831294 100644
--- a/net/netfilter/nf_conntrack_proto_sctp.c
+++ b/net/netfilter/nf_conntrack_proto_sctp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Connection tracking protocol helper module for SCTP.
  *
diff --git a/net/netfilter/nf_conntrack_proto_tcp.c b/net/netfilter/nf_conntrack_proto_tcp.c
index cba1c6f..6fc73d4 100644
--- a/net/netfilter/nf_conntrack_proto_tcp.c
+++ b/net/netfilter/nf_conntrack_proto_tcp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>
  * (C) 2002-2013 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
@@ -285,7 +287,9 @@ static bool tcp_pkt_to_tuple(const struct sk_buff *skb, unsigned int dataoff,
 	/* Actually only need first 4 bytes to get ports. */
 	hp = skb_header_pointer(skb, dataoff, 4, &_hdr);
 	if (hp == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	tuple->src.u.tcp.port = hp->source;
 	tuple->dst.u.tcp.port = hp->dest;
@@ -296,6 +300,7 @@ static bool tcp_pkt_to_tuple(const struct sk_buff *skb, unsigned int dataoff,
 static bool tcp_invert_tuple(struct nf_conntrack_tuple *tuple,
 			     const struct nf_conntrack_tuple *orig)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tuple->src.u.tcp.port = orig->dst.u.tcp.port;
 	tuple->dst.u.tcp.port = orig->src.u.tcp.port;
 	return true;
@@ -305,12 +310,14 @@ static bool tcp_invert_tuple(struct nf_conntrack_tuple *tuple,
 /* Print out the private part of the conntrack. */
 static void tcp_print_conntrack(struct seq_file *s, struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_printf(s, "%s ", tcp_conntrack_names[ct->proto.tcp.state]);
 }
 #endif
 
 static unsigned int get_conntrack_index(const struct tcphdr *tcph)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tcph->rst) return TCP_RST_SET;
 	else if (tcph->syn) return (tcph->ack ? TCP_SYNACK_SET : TCP_SYN_SET);
 	else if (tcph->fin) return TCP_FIN_SET;
@@ -377,7 +384,9 @@ static void tcp_options(const struct sk_buff *skb,
 	int length = (tcph->doff*4) - sizeof(struct tcphdr);
 
 	if (!length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	ptr = skb_header_pointer(skb, dataoff + sizeof(struct tcphdr),
 				 length, buff);
@@ -433,7 +442,9 @@ static void tcp_sack(const struct sk_buff *skb, unsigned int dataoff,
 	__u32 tmp;
 
 	if (!length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	ptr = skb_header_pointer(skb, dataoff + sizeof(struct tcphdr),
 				 length, buff);
@@ -496,6 +507,7 @@ static bool tcp_in_window(const struct nf_conn *ct,
 			  const struct tcphdr *tcph,
 			  u_int8_t pf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = nf_ct_net(ct);
 	struct nf_tcp_net *tn = tcp_pernet(net);
 	struct ip_ct_tcp_state *sender = &state->seen[dir];
@@ -753,6 +765,7 @@ static int tcp_error(struct net *net, struct nf_conn *tmpl,
 	/* Smaller that minimal TCP header? */
 	th = skb_header_pointer(skb, dataoff, sizeof(_tcph), &_tcph);
 	if (th == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (LOG_INVALID(net, IPPROTO_TCP))
 			nf_log_packet(net, pf, 0, skb, NULL, NULL, NULL,
 				"nf_ct_tcp: short packet ");
@@ -1100,6 +1113,7 @@ static bool tcp_new(struct nf_conn *ct, const struct sk_buff *skb,
 	const struct ip_ct_tcp_state *receiver = &ct->proto.tcp.seen[1];
 
 	th = skb_header_pointer(skb, dataoff, sizeof(_tcph), &_tcph);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(th == NULL);
 
 	/* Don't need lock here: this conntrack not in circulation yet */
@@ -1165,6 +1179,7 @@ static bool tcp_new(struct nf_conn *ct, const struct sk_buff *skb,
 
 static bool tcp_can_early_drop(const struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (ct->proto.tcp.state) {
 	case TCP_CONNTRACK_FIN_WAIT:
 	case TCP_CONNTRACK_LAST_ACK:
@@ -1195,6 +1210,7 @@ static int tcp_to_nlattr(struct sk_buff *skb, struct nlattr *nla,
 	if (!nest_parms)
 		goto nla_put_failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put_u8(skb, CTA_PROTOINFO_TCP_STATE, ct->proto.tcp.state) ||
 	    nla_put_u8(skb, CTA_PROTOINFO_TCP_WSCALE_ORIGINAL,
 		       ct->proto.tcp.seen[0].td_scale) ||
@@ -1239,7 +1255,9 @@ static int nlattr_to_tcp(struct nlattr *cda[], struct nf_conn *ct)
 	/* updates could not contain anything about the private
 	 * protocol info, in that case skip the parsing */
 	if (!pattr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	err = nla_parse_nested(tb, CTA_PROTOINFO_TCP_MAX, pattr,
 			       tcp_nla_policy, NULL);
@@ -1284,6 +1302,7 @@ static int nlattr_to_tcp(struct nlattr *cda[], struct nf_conn *ct)
 
 static int tcp_nlattr_size(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nla_total_size(0)	   /* CTA_PROTOINFO_TCP */
 		+ nla_policy_len(tcp_nla_policy, CTA_PROTOINFO_TCP_MAX + 1);
 }
@@ -1495,13 +1514,17 @@ static int tcp_kmemdup_sysctl_table(struct nf_proto_net *pn,
 {
 #ifdef CONFIG_SYSCTL
 	if (pn->ctl_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	pn->ctl_table = kmemdup(tcp_sysctl_table,
 				sizeof(tcp_sysctl_table),
 				GFP_KERNEL);
 	if (!pn->ctl_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	pn->ctl_table[0].data = &tn->timeouts[TCP_CONNTRACK_SYN_SENT];
 	pn->ctl_table[1].data = &tn->timeouts[TCP_CONNTRACK_SYN_RECV];
@@ -1522,6 +1545,7 @@ static int tcp_kmemdup_sysctl_table(struct nf_proto_net *pn,
 
 static int tcp_init_net(struct net *net, u_int16_t proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_tcp_net *tn = tcp_pernet(net);
 	struct nf_proto_net *pn = &tn->pn;
 
diff --git a/net/netfilter/nf_conntrack_proto_udp.c b/net/netfilter/nf_conntrack_proto_udp.c
index 8af734c..f77534f 100644
--- a/net/netfilter/nf_conntrack_proto_udp.c
+++ b/net/netfilter/nf_conntrack_proto_udp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>
  * (C) 2006-2012 Patrick McHardy <kaber@trash.net>
@@ -47,7 +49,9 @@ static bool udp_pkt_to_tuple(const struct sk_buff *skb,
 	/* Actually only need first 4 bytes to get ports. */
 	hp = skb_header_pointer(skb, dataoff, 4, &_hdr);
 	if (hp == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	tuple->src.u.udp.port = hp->source;
 	tuple->dst.u.udp.port = hp->dest;
@@ -58,6 +62,7 @@ static bool udp_pkt_to_tuple(const struct sk_buff *skb,
 static bool udp_invert_tuple(struct nf_conntrack_tuple *tuple,
 			     const struct nf_conntrack_tuple *orig)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tuple->src.u.udp.port = orig->dst.u.udp.port;
 	tuple->dst.u.udp.port = orig->src.u.udp.port;
 	return true;
@@ -65,6 +70,7 @@ static bool udp_invert_tuple(struct nf_conntrack_tuple *tuple,
 
 static unsigned int *udp_get_timeouts(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return udp_pernet(net)->timeouts;
 }
 
@@ -95,6 +101,7 @@ static int udp_packet(struct nf_conn *ct,
 static bool udp_new(struct nf_conn *ct, const struct sk_buff *skb,
 		    unsigned int dataoff, unsigned int *timeouts)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 
@@ -162,6 +169,7 @@ static int udp_error(struct net *net, struct nf_conn *tmpl, struct sk_buff *skb,
 	/* Header is too small? */
 	hdr = skb_header_pointer(skb, dataoff, sizeof(_hdr), &_hdr);
 	if (hdr == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (LOG_INVALID(net, IPPROTO_UDP))
 			nf_log_packet(net, pf, 0, skb, NULL, NULL, NULL,
 				      "nf_ct_udp: short packet ");
@@ -267,12 +275,16 @@ static int udp_kmemdup_sysctl_table(struct nf_proto_net *pn,
 {
 #ifdef CONFIG_SYSCTL
 	if (pn->ctl_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	pn->ctl_table = kmemdup(udp_sysctl_table,
 				sizeof(udp_sysctl_table),
 				GFP_KERNEL);
 	if (!pn->ctl_table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	pn->ctl_table[0].data = &un->timeouts[UDP_CT_UNREPLIED];
 	pn->ctl_table[1].data = &un->timeouts[UDP_CT_REPLIED];
 #endif
@@ -281,6 +293,7 @@ static int udp_kmemdup_sysctl_table(struct nf_proto_net *pn,
 
 static int udp_init_net(struct net *net, u_int16_t proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_udp_net *un = udp_pernet(net);
 	struct nf_proto_net *pn = &un->pn;
 
diff --git a/net/netfilter/nf_conntrack_sane.c b/net/netfilter/nf_conntrack_sane.c
index ae457f3..75e5a70 100644
--- a/net/netfilter/nf_conntrack_sane.c
+++ b/net/netfilter/nf_conntrack_sane.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SANE connection tracking helper
  * (SANE = Scanner Access Now Easy)
  * For documentation about the SANE network protocol see
diff --git a/net/netfilter/nf_conntrack_seqadj.c b/net/netfilter/nf_conntrack_seqadj.c
index a975efd..ed800da 100644
--- a/net/netfilter/nf_conntrack_seqadj.c
+++ b/net/netfilter/nf_conntrack_seqadj.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/types.h>
 #include <linux/netfilter.h>
 #include <net/tcp.h>
@@ -9,6 +11,7 @@
 int nf_ct_seqadj_init(struct nf_conn *ct, enum ip_conntrack_info ctinfo,
 		      s32 off)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	struct nf_conn_seqadj *seqadj;
 	struct nf_ct_seqadj *this_way;
@@ -29,6 +32,7 @@ EXPORT_SYMBOL_GPL(nf_ct_seqadj_init);
 int nf_ct_seqadj_set(struct nf_conn *ct, enum ip_conntrack_info ctinfo,
 		     __be32 seq, s32 off)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_seqadj *seqadj = nfct_seqadj(ct);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	struct nf_ct_seqadj *this_way;
@@ -63,7 +67,9 @@ void nf_ct_tcp_seqadj_set(struct sk_buff *skb,
 	const struct tcphdr *th;
 
 	if (nf_ct_protonum(ct) != IPPROTO_TCP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	th = (struct tcphdr *)(skb_network_header(skb) + ip_hdrlen(skb));
 	nf_ct_seqadj_set(ct, ctinfo, th->seq, off);
@@ -77,6 +83,7 @@ static void nf_ct_sack_block_adjust(struct sk_buff *skb,
 				    unsigned int sackend,
 				    struct nf_ct_seqadj *seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (sackoff < sackend) {
 		struct tcp_sack_block_wire *sack;
 		__be32 new_start_seq, new_end_seq;
@@ -126,7 +133,9 @@ static unsigned int nf_ct_sack_adjust(struct sk_buff *skb,
 	optend = protoff + tcph->doff * 4;
 
 	if (!skb_make_writable(skb, optend))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	dir = CTINFO2DIR(ctinfo);
 
@@ -163,6 +172,7 @@ int nf_ct_seq_adjust(struct sk_buff *skb,
 		     struct nf_conn *ct, enum ip_conntrack_info ctinfo,
 		     unsigned int protoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	struct tcphdr *tcph;
 	__be32 newseq, newack;
@@ -219,6 +229,7 @@ s32 nf_ct_seq_offset(const struct nf_conn *ct,
 		     enum ip_conntrack_dir dir,
 		     u32 seq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_seqadj *seqadj = nfct_seqadj(ct);
 	struct nf_ct_seqadj *this_way;
 
@@ -244,5 +255,6 @@ int nf_conntrack_seqadj_init(void)
 
 void nf_conntrack_seqadj_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_ct_extend_unregister(&nf_ct_seqadj_extend);
 }
diff --git a/net/netfilter/nf_conntrack_sip.c b/net/netfilter/nf_conntrack_sip.c
index 4dbb5ba..b16c3af 100644
--- a/net/netfilter/nf_conntrack_sip.c
+++ b/net/netfilter/nf_conntrack_sip.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SIP extension for IP connection tracking.
  *
  * (C) 2005 by Christian Hentschel <chentschel@arnet.com.ar>
@@ -62,6 +64,7 @@ static int string_len(const struct nf_conn *ct, const char *dptr,
 {
 	int len = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (dptr < limit && isalpha(*dptr)) {
 		dptr++;
 		len++;
@@ -73,6 +76,7 @@ static int digits_len(const struct nf_conn *ct, const char *dptr,
 		      const char *limit, int *shift)
 {
 	int len = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (dptr < limit && isdigit(*dptr)) {
 		dptr++;
 		len++;
@@ -82,6 +86,7 @@ static int digits_len(const struct nf_conn *ct, const char *dptr,
 
 static int iswordc(const char c)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (isalnum(c) || c == '!' || c == '"' || c == '%' ||
 	    (c >= '(' && c <= '+') || c == ':' || c == '<' || c == '>' ||
 	    c == '?' || (c >= '[' && c <= ']') || c == '_' || c == '`' ||
@@ -94,6 +99,7 @@ static int iswordc(const char c)
 static int word_len(const char *dptr, const char *limit)
 {
 	int len = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (dptr < limit && iswordc(*dptr)) {
 		dptr++;
 		len++;
@@ -108,6 +114,7 @@ static int callid_len(const struct nf_conn *ct, const char *dptr,
 
 	len = word_len(dptr, limit);
 	dptr += len;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!len || dptr == limit || *dptr != '@')
 		return len;
 	dptr++;
@@ -123,6 +130,7 @@ static int callid_len(const struct nf_conn *ct, const char *dptr,
 static int media_len(const struct nf_conn *ct, const char *dptr,
 		     const char *limit, int *shift)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int len = string_len(ct, dptr, limit, shift);
 
 	dptr += len;
@@ -142,7 +150,9 @@ static int sip_parse_addr(const struct nf_conn *ct, const char *cp,
 	int ret;
 
 	if (!ct)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	memset(addr, 0, sizeof(*addr));
 	switch (nf_ct_l3num(ct)) {
@@ -183,6 +193,7 @@ static int epaddr_len(const struct nf_conn *ct, const char *dptr,
 	const char *aux = dptr;
 
 	if (!sip_parse_addr(ct, dptr, &dptr, &addr, limit, true)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("ip: %s parse failed.!\n", dptr);
 		return 0;
 	}
@@ -241,7 +252,9 @@ int ct_sip_parse_request(const struct nf_conn *ct,
 	/* Skip method and following whitespace */
 	mlen = string_len(ct, dptr, limit, NULL);
 	if (!mlen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	dptr += mlen;
 	if (++dptr >= limit)
 		return 0;
@@ -329,6 +342,7 @@ static const char *sip_follow_continuation(const char *dptr, const char *limit)
 
 static const char *sip_skip_whitespace(const char *dptr, const char *limit)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (; dptr < limit; dptr++) {
 		if (*dptr == ' ' || *dptr == '\t')
 			continue;
@@ -344,6 +358,7 @@ static const char *sip_skip_whitespace(const char *dptr, const char *limit)
 static const char *ct_sip_header_search(const char *dptr, const char *limit,
 					const char *needle, unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (limit -= len; dptr < limit; dptr++) {
 		if (*dptr == '\r' || *dptr == '\n') {
 			dptr = sip_follow_continuation(dptr, limit);
@@ -367,6 +382,7 @@ int ct_sip_get_header(const struct nf_conn *ct, const char *dptr,
 	const char *start = dptr, *limit = dptr + datalen;
 	int shift = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (dptr += dataoff; dptr < limit; dptr++) {
 		/* Find beginning of line */
 		if (*dptr != '\r' && *dptr != '\n')
@@ -439,7 +455,9 @@ static int ct_sip_next_header(const struct nf_conn *ct, const char *dptr,
 
 	dptr = ct_sip_header_search(dptr, limit, ",", strlen(","));
 	if (!dptr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	dptr = ct_sip_header_search(dptr, limit, hdr->search, hdr->slen);
 	if (!dptr)
@@ -463,6 +481,7 @@ static int ct_sip_walk_headers(const struct nf_conn *ct, const char *dptr,
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (in_header && *in_header) {
 		while (1) {
 			ret = ct_sip_next_header(ct, dptr, dataoff, datalen,
@@ -506,6 +525,7 @@ int ct_sip_parse_header_uri(const struct nf_conn *ct, const char *dptr,
 	unsigned int p;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = ct_sip_walk_headers(ct, dptr, dataoff ? *dataoff : 0, datalen,
 				  type, in_header, matchoff, matchlen);
 	WARN_ON(ret < 0);
@@ -540,7 +560,9 @@ static int ct_sip_parse_param(const struct nf_conn *ct, const char *dptr,
 
 	limit = ct_sip_header_search(dptr + dataoff, limit, ",", strlen(","));
 	if (!limit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		limit = dptr + datalen;
+}
 
 	start = ct_sip_header_search(dptr + dataoff, limit, name, strlen(name));
 	if (!start)
@@ -568,7 +590,9 @@ int ct_sip_parse_address_param(const struct nf_conn *ct, const char *dptr,
 
 	limit = ct_sip_header_search(dptr + dataoff, limit, ",", strlen(","));
 	if (!limit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		limit = dptr + datalen;
+}
 
 	start = ct_sip_header_search(dptr + dataoff, limit, name, strlen(name));
 	if (!start)
@@ -596,7 +620,9 @@ int ct_sip_parse_numerical_param(const struct nf_conn *ct, const char *dptr,
 
 	limit = ct_sip_header_search(dptr + dataoff, limit, ",", strlen(","));
 	if (!limit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		limit = dptr + datalen;
+}
 
 	start = ct_sip_header_search(dptr + dataoff, limit, name, strlen(name));
 	if (!start)
@@ -622,6 +648,7 @@ static int ct_sip_parse_transport(struct nf_conn *ct, const char *dptr,
 
 	if (ct_sip_parse_param(ct, dptr, dataoff, datalen, "transport=",
 			       &matchoff, &matchlen)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!strncasecmp(dptr + matchoff, "TCP", strlen("TCP")))
 			*proto = IPPROTO_TCP;
 		else if (!strncasecmp(dptr + matchoff, "UDP", strlen("UDP")))
@@ -671,6 +698,7 @@ static int sdp_addr_len(const struct nf_conn *ct, const char *dptr,
 	const char *aux = dptr;
 
 	if (!sdp_parse_addr(ct, dptr, &dptr, &addr, limit)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("ip: %s parse failed.!\n", dptr);
 		return 0;
 	}
@@ -705,6 +733,7 @@ static const struct sip_header ct_sdp_hdrs_v6[] = {
 static const char *ct_sdp_header_search(const char *dptr, const char *limit,
 					const char *needle, unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (limit -= len; dptr < limit; dptr++) {
 		if (*dptr == '\r' || *dptr == '\n')
 			break;
@@ -728,6 +757,7 @@ int ct_sip_get_sdp_header(const struct nf_conn *ct, const char *dptr,
 	const char *start = dptr, *limit = dptr + datalen;
 	int shift = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hdrs = nf_ct_l3num(ct) == NFPROTO_IPV4 ? ct_sdp_hdrs_v4 : ct_sdp_hdrs_v6;
 	hdr = &hdrs[type];
 	thdr = &hdrs[term];
@@ -784,7 +814,9 @@ static int ct_sip_parse_sdp_addr(const struct nf_conn *ct, const char *dptr,
 	ret = ct_sip_get_sdp_header(ct, dptr, dataoff, datalen, type, term,
 				    matchoff, matchlen);
 	if (ret <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (!sdp_parse_addr(ct, dptr + *matchoff, NULL, addr,
 			    dptr + *matchoff + *matchlen))
@@ -797,6 +829,7 @@ static int refresh_signalling_expectation(struct nf_conn *ct,
 					  u8 proto, __be16 port,
 					  unsigned int expires)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_help *help = nfct_help(ct);
 	struct nf_conntrack_expect *exp;
 	struct hlist_node *next;
@@ -821,6 +854,7 @@ static int refresh_signalling_expectation(struct nf_conn *ct,
 
 static void flush_expectations(struct nf_conn *ct, bool media)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_help *help = nfct_help(ct);
 	struct nf_conntrack_expect *exp;
 	struct hlist_node *next;
@@ -848,6 +882,7 @@ static int set_expected_rtp_rtcp(struct sk_buff *skb, unsigned int protoff,
 	enum ip_conntrack_info ctinfo;
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
 	struct net *net = nf_ct_net(ct);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	union nf_inet_addr *saddr;
 	struct nf_conntrack_tuple tuple;
@@ -965,6 +1000,7 @@ static const struct sdp_media_type *sdp_media_type(const char *dptr,
 	const struct sdp_media_type *t;
 	unsigned int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(sdp_media_types); i++) {
 		t = &sdp_media_types[i];
 		if (matchlen < t->len ||
@@ -993,6 +1029,7 @@ static int process_sdp(struct sk_buff *skb, unsigned int protoff,
 	const struct sdp_media_type *t;
 	int ret = NF_ACCEPT;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hooks = rcu_dereference(nf_nat_sip_hooks);
 
 	/* Find beginning of session description */
@@ -1093,6 +1130,7 @@ static int process_invite_response(struct sk_buff *skb, unsigned int protoff,
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
 	struct nf_ct_sip_master *ct_sip_info = nfct_help_data(ct);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((code >= 100 && code <= 199) ||
 	    (code >= 200 && code <= 299))
 		return process_sdp(skb, protoff, dataoff, dptr, datalen, cseq);
@@ -1110,6 +1148,7 @@ static int process_update_response(struct sk_buff *skb, unsigned int protoff,
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
 	struct nf_ct_sip_master *ct_sip_info = nfct_help_data(ct);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((code >= 100 && code <= 199) ||
 	    (code >= 200 && code <= 299))
 		return process_sdp(skb, protoff, dataoff, dptr, datalen, cseq);
@@ -1127,6 +1166,7 @@ static int process_prack_response(struct sk_buff *skb, unsigned int protoff,
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
 	struct nf_ct_sip_master *ct_sip_info = nfct_help_data(ct);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((code >= 100 && code <= 199) ||
 	    (code >= 200 && code <= 299))
 		return process_sdp(skb, protoff, dataoff, dptr, datalen, cseq);
@@ -1148,7 +1188,9 @@ static int process_invite_request(struct sk_buff *skb, unsigned int protoff,
 	flush_expectations(ct, true);
 	ret = process_sdp(skb, protoff, dataoff, dptr, datalen, cseq);
 	if (ret == NF_ACCEPT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ct_sip_info->invite_cseq = cseq;
+}
 	return ret;
 }
 
@@ -1176,6 +1218,7 @@ static int process_register_request(struct sk_buff *skb, unsigned int protoff,
 	enum ip_conntrack_info ctinfo;
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
 	struct nf_ct_sip_master *ct_sip_info = nfct_help_data(ct);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	unsigned int matchoff, matchlen;
 	struct nf_conntrack_expect *exp;
@@ -1274,6 +1317,7 @@ static int process_register_response(struct sk_buff *skb, unsigned int protoff,
 	enum ip_conntrack_info ctinfo;
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
 	struct nf_ct_sip_master *ct_sip_info = nfct_help_data(ct);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	union nf_inet_addr addr;
 	__be16 port;
@@ -1362,7 +1406,9 @@ static int process_sip_response(struct sk_buff *skb, unsigned int protoff,
 	unsigned int code, cseq, i;
 
 	if (*datalen < strlen("SIP/2.0 200"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NF_ACCEPT;
+}
 	code = simple_strtoul(*dptr + strlen("SIP/2.0 "), NULL, 10);
 	if (!code) {
 		nf_ct_helper_log(skb, ct, "cannot get code");
@@ -1403,6 +1449,7 @@ static int process_sip_request(struct sk_buff *skb, unsigned int protoff,
 	enum ip_conntrack_info ctinfo;
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
 	struct nf_ct_sip_master *ct_sip_info = nfct_help_data(ct);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	unsigned int matchoff, matchlen;
 	unsigned int cseq, i;
@@ -1460,7 +1507,9 @@ static int process_sip_msg(struct sk_buff *skb, struct nf_conn *ct,
 	int ret;
 
 	if (strncasecmp(*dptr, "SIP/2.0 ", strlen("SIP/2.0 ")) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = process_sip_request(skb, protoff, dataoff, dptr, datalen);
+}
 	else
 		ret = process_sip_response(skb, protoff, dataoff, dptr, datalen);
 
@@ -1569,7 +1618,9 @@ static int sip_help_udp(struct sk_buff *skb, unsigned int protoff,
 	/* No Data ? */
 	dataoff = protoff + sizeof(struct udphdr);
 	if (dataoff >= skb->len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NF_ACCEPT;
+}
 
 	nf_ct_refresh(ct, skb, sip_timeout * HZ);
 
@@ -1611,6 +1662,7 @@ static const struct nf_conntrack_expect_policy sip_exp_policy[SIP_EXPECT_MAX + 1
 
 static void nf_conntrack_sip_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_conntrack_helpers_unregister(sip, ports_c * 4);
 }
 
@@ -1618,6 +1670,7 @@ static int __init nf_conntrack_sip_init(void)
 {
 	int i, ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	NF_CT_HELPER_BUILD_BUG_ON(sizeof(struct nf_ct_sip_master));
 
 	if (ports_c == 0)
@@ -1644,9 +1697,11 @@ static int __init nf_conntrack_sip_init(void)
 
 	ret = nf_conntrack_helpers_register(sip, ports_c * 4);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to register helpers\n");
 		return ret;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
diff --git a/net/netfilter/nf_conntrack_snmp.c b/net/netfilter/nf_conntrack_snmp.c
index 87b95a2..0af23d0 100644
--- a/net/netfilter/nf_conntrack_snmp.c
+++ b/net/netfilter/nf_conntrack_snmp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *      SNMP service broadcast connection tracking helper
  *
diff --git a/net/netfilter/nf_conntrack_standalone.c b/net/netfilter/nf_conntrack_standalone.c
index 5a101ca..7736d75 100644
--- a/net/netfilter/nf_conntrack_standalone.c
+++ b/net/netfilter/nf_conntrack_standalone.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>
  * (C) 2005-2012 Patrick McHardy <kaber@trash.net>
@@ -41,6 +43,7 @@ print_tuple(struct seq_file *s, const struct nf_conntrack_tuple *tuple,
             const struct nf_conntrack_l3proto *l3proto,
             const struct nf_conntrack_l4proto *l4proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (l3proto->l3proto) {
 	case NFPROTO_IPV4:
 		seq_printf(s, "src=%pI4 dst=%pI4 ",
@@ -129,6 +132,7 @@ static struct hlist_nulls_node *ct_get_next(struct seq_file *seq,
 {
 	struct ct_iter_state *st = seq->private;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	head = rcu_dereference(hlist_nulls_next_rcu(head));
 	while (is_a_nulls(head)) {
 		if (likely(get_nulls_value(head) == st->bucket)) {
@@ -143,6 +147,7 @@ static struct hlist_nulls_node *ct_get_next(struct seq_file *seq,
 
 static struct hlist_nulls_node *ct_get_idx(struct seq_file *seq, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hlist_nulls_node *head = ct_get_first(seq);
 
 	if (head)
@@ -165,6 +170,7 @@ static void *ct_seq_start(struct seq_file *seq, loff_t *pos)
 
 static void *ct_seq_next(struct seq_file *s, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	(*pos)++;
 	return ct_get_next(s, v);
 }
@@ -172,6 +178,7 @@ static void *ct_seq_next(struct seq_file *s, void *v, loff_t *pos)
 static void ct_seq_stop(struct seq_file *s, void *v)
 	__releases(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -184,7 +191,9 @@ static void ct_show_secctx(struct seq_file *s, const struct nf_conn *ct)
 
 	ret = security_secid_to_secctx(ct->secmark, &secctx, &len);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	seq_printf(s, "secctx=%s ", secctx);
 
@@ -254,6 +263,7 @@ ct_show_delta_time(struct seq_file *s, const struct nf_conn *ct)
 
 static const char* l3proto_name(u16 proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (proto) {
 	case AF_INET: return "ipv4";
 	case AF_INET6: return "ipv6";
@@ -264,6 +274,7 @@ static const char* l3proto_name(u16 proto)
 
 static const char* l4proto_name(u16 proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (proto) {
 	case IPPROTO_ICMP: return "icmp";
 	case IPPROTO_TCP: return "tcp";
@@ -287,6 +298,7 @@ static int ct_seq_show(struct seq_file *s, void *v)
 	struct net *net = seq_file_net(s);
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!ct);
 	if (unlikely(!atomic_inc_not_zero(&ct->ct_general.use)))
 		return 0;
@@ -373,6 +385,7 @@ static const struct seq_operations ct_seq_ops = {
 
 static int ct_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &ct_seq_ops,
 			sizeof(struct ct_iter_state));
 }
@@ -387,6 +400,7 @@ static const struct file_operations ct_file_ops = {
 
 static void *ct_cpu_seq_start(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = seq_file_net(seq);
 	int cpu;
 
@@ -405,6 +419,7 @@ static void *ct_cpu_seq_start(struct seq_file *seq, loff_t *pos)
 
 static void *ct_cpu_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = seq_file_net(seq);
 	int cpu;
 
@@ -424,6 +439,7 @@ static void ct_cpu_seq_stop(struct seq_file *seq, void *v)
 
 static int ct_cpu_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = seq_file_net(seq);
 	unsigned int nr_conntracks = atomic_read(&net->ct.count);
 	const struct ip_conntrack_stat *st = v;
@@ -466,6 +482,7 @@ static const struct seq_operations ct_cpu_seq_ops = {
 
 static int ct_cpu_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &ct_cpu_seq_ops,
 			    sizeof(struct seq_net_private));
 }
@@ -497,6 +514,7 @@ static int nf_conntrack_standalone_init_proc(struct net *net)
 			  &ct_cpu_seq_fops);
 	if (!pde)
 		goto out_stat_nf_conntrack;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_stat_nf_conntrack:
@@ -538,6 +556,7 @@ nf_conntrack_hash_sysctl(struct ctl_table *table, int write,
 	int ret;
 
 	ret = proc_dointvec(table, write, buffer, lenp, ppos);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret < 0 || !write)
 		return ret;
 
@@ -625,7 +644,9 @@ static int nf_conntrack_standalone_init_sysctl(struct net *net)
 
 	/* Don't export sysctls to unprivileged users */
 	if (net->user_ns != &init_user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table[0].procname = NULL;
+}
 
 	if (!net_eq(&init_net, net))
 		table[2].mode = 0444;
@@ -634,6 +655,7 @@ static int nf_conntrack_standalone_init_sysctl(struct net *net)
 	if (!net->ct.sysctl_header)
 		goto out_unregister_netfilter;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_unregister_netfilter:
@@ -679,6 +701,7 @@ static int nf_conntrack_pernet_init(struct net *net)
 	if (ret < 0)
 		goto out_sysctl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_sysctl:
@@ -711,13 +734,16 @@ static int __init nf_conntrack_standalone_init(void)
 	if (ret < 0)
 		goto out_start;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(SKB_NFCT_PTRMASK != NFCT_PTRMASK);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(NFCT_INFOMASK <= IP_CT_NUMBER);
 
 #ifdef CONFIG_SYSCTL
 	nf_ct_netfilter_header =
 		register_net_sysctl(&init_net, "net", nf_ct_netfilter_table);
 	if (!nf_ct_netfilter_header) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("nf_conntrack: can't register to sysctl.\n");
 		ret = -ENOMEM;
 		goto out_sysctl;
@@ -745,6 +771,7 @@ static int __init nf_conntrack_standalone_init(void)
 
 static void __exit nf_conntrack_standalone_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_conntrack_cleanup_start();
 	unregister_pernet_subsys(&nf_conntrack_net_ops);
 #ifdef CONFIG_SYSCTL
diff --git a/net/netfilter/nf_conntrack_tftp.c b/net/netfilter/nf_conntrack_tftp.c
index 0ec6779..2cd7f4b 100644
--- a/net/netfilter/nf_conntrack_tftp.c
+++ b/net/netfilter/nf_conntrack_tftp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 2001-2002 Magnus Boden <mb@ozaba.mine.nu>
  * (C) 2006-2012 Patrick McHardy <kaber@trash.net>
  * This program is free software; you can redistribute it and/or modify
diff --git a/net/netfilter/nf_conntrack_timeout.c b/net/netfilter/nf_conntrack_timeout.c
index 46aee65..6056ea7 100644
--- a/net/netfilter/nf_conntrack_timeout.c
+++ b/net/netfilter/nf_conntrack_timeout.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2012 by Pablo Neira Ayuso <pablo@netfilter.org>
  * (C) 2012 by Vyatta Inc. <http://www.vyatta.com>
diff --git a/net/netfilter/nf_conntrack_timestamp.c b/net/netfilter/nf_conntrack_timestamp.c
index 4c4734b..a5ae964 100644
--- a/net/netfilter/nf_conntrack_timestamp.c
+++ b/net/netfilter/nf_conntrack_timestamp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2010 Pablo Neira Ayuso <pablo@netfilter.org>
  *
diff --git a/net/netfilter/nf_log.c b/net/netfilter/nf_log.c
index 8bb152a..ff76910 100644
--- a/net/netfilter/nf_log.c
+++ b/net/netfilter/nf_log.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/kernel.h>
 #include <linux/init.h>
 #include <linux/module.h>
@@ -29,6 +31,7 @@ static struct nf_logger *__find_logger(int pf, const char *str_logger)
 	struct nf_logger *log;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < NF_LOG_TYPE_MAX; i++) {
 		if (loggers[pf][i] == NULL)
 			continue;
@@ -46,7 +49,9 @@ int nf_log_set(struct net *net, u_int8_t pf, const struct nf_logger *logger)
 	const struct nf_logger *log;
 
 	if (pf == NFPROTO_UNSPEC || pf >= ARRAY_SIZE(net->nf.nf_loggers))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	mutex_lock(&nf_log_mutex);
 	log = nft_log_dereference(net->nf.nf_loggers[pf]);
@@ -81,13 +86,16 @@ int nf_log_register(u_int8_t pf, struct nf_logger *logger)
 	int ret = 0;
 
 	if (pf >= ARRAY_SIZE(init_net.nf.nf_loggers))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&nf_log_mutex);
 
 	if (pf == NFPROTO_UNSPEC) {
 		for (i = NFPROTO_UNSPEC; i < NFPROTO_NUMPROTO; i++) {
 			if (rcu_access_pointer(loggers[i][logger->type])) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EEXIST;
 				goto unlock;
 			}
@@ -96,6 +104,7 @@ int nf_log_register(u_int8_t pf, struct nf_logger *logger)
 			rcu_assign_pointer(loggers[i][logger->type], logger);
 	} else {
 		if (rcu_access_pointer(loggers[pf][logger->type])) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EEXIST;
 			goto unlock;
 		}
@@ -114,6 +123,7 @@ void nf_log_unregister(struct nf_logger *logger)
 	int i;
 
 	mutex_lock(&nf_log_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < NFPROTO_NUMPROTO; i++) {
 		log = nft_log_dereference(loggers[i][logger->type]);
 		if (log == logger)
@@ -127,6 +137,7 @@ EXPORT_SYMBOL(nf_log_unregister);
 int nf_log_bind_pf(struct net *net, u_int8_t pf,
 		   const struct nf_logger *logger)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pf >= ARRAY_SIZE(net->nf.nf_loggers))
 		return -EINVAL;
 	mutex_lock(&nf_log_mutex);
@@ -142,6 +153,7 @@ EXPORT_SYMBOL(nf_log_bind_pf);
 
 void nf_log_unbind_pf(struct net *net, u_int8_t pf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pf >= ARRAY_SIZE(net->nf.nf_loggers))
 		return;
 	mutex_lock(&nf_log_mutex);
@@ -153,8 +165,10 @@ EXPORT_SYMBOL(nf_log_unbind_pf);
 void nf_logger_request_module(int pf, enum nf_log_type type)
 {
 	if (loggers[pf][type] == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		request_module("nf-logger-%u-%u", pf, type);
 }
+}
 EXPORT_SYMBOL_GPL(nf_logger_request_module);
 
 int nf_logger_find_get(int pf, enum nf_log_type type)
@@ -163,6 +177,7 @@ int nf_logger_find_get(int pf, enum nf_log_type type)
 	int ret = -ENOENT;
 
 	if (pf == NFPROTO_INET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = nf_logger_find_get(NFPROTO_IPV4, type);
 		if (ret < 0)
 			return ret;
@@ -197,6 +212,7 @@ void nf_logger_put(int pf, enum nf_log_type type)
 	struct nf_logger *logger;
 
 	if (pf == NFPROTO_INET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nf_logger_put(NFPROTO_IPV4, type);
 		nf_logger_put(NFPROTO_IPV6, type);
 		return;
@@ -226,7 +242,9 @@ void nf_log_packet(struct net *net,
 
 	rcu_read_lock();
 	if (loginfo != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		logger = rcu_dereference(loggers[pf][loginfo->type]);
+}
 	else
 		logger = rcu_dereference(net->nf.nf_loggers[pf]);
 
@@ -253,6 +271,7 @@ void nf_log_trace(struct net *net,
 	const struct nf_logger *logger;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	logger = rcu_dereference(net->nf.nf_loggers[pf]);
 	if (logger) {
 		va_start(args, fmt);
@@ -282,6 +301,7 @@ __printf(2, 3) int nf_log_buf_add(struct nf_log_buf *m, const char *f, ...)
 		len = vsnprintf(m->buf + m->count, S_SIZE - m->count, f, args);
 		va_end(args);
 		if (likely(m->count + len < S_SIZE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			m->count += len;
 			return 0;
 		}
@@ -294,6 +314,7 @@ EXPORT_SYMBOL_GPL(nf_log_buf_add);
 
 struct nf_log_buf *nf_log_buf_open(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_log_buf *m = kmalloc(sizeof(*m), GFP_ATOMIC);
 
 	if (unlikely(!m)) {
@@ -309,6 +330,7 @@ EXPORT_SYMBOL_GPL(nf_log_buf_open);
 
 void nf_log_buf_close(struct nf_log_buf *m)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	m->buf[m->count] = 0;
 	printk("%s\n", m->buf);
 
@@ -324,6 +346,7 @@ EXPORT_SYMBOL_GPL(nf_log_buf_close);
 #ifdef CONFIG_PROC_FS
 static void *seq_start(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = seq_file_net(seq);
 
 	mutex_lock(&nf_log_mutex);
@@ -336,6 +359,7 @@ static void *seq_start(struct seq_file *seq, loff_t *pos)
 
 static void *seq_next(struct seq_file *s, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = seq_file_net(s);
 
 	(*pos)++;
@@ -348,6 +372,7 @@ static void *seq_next(struct seq_file *s, void *v, loff_t *pos)
 
 static void seq_stop(struct seq_file *s, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&nf_log_mutex);
 }
 
@@ -358,6 +383,7 @@ static int seq_show(struct seq_file *s, void *v)
 	int i;
 	struct net *net = seq_file_net(s);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	logger = nft_log_dereference(net->nf.nf_loggers[*pos]);
 
 	if (!logger)
@@ -397,6 +423,7 @@ static const struct seq_operations nflog_seq_ops = {
 
 static int nflog_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &nflog_seq_ops,
 			    sizeof(struct seq_net_private));
 }
@@ -443,7 +470,9 @@ static int nf_log_proc_dostring(struct ctl_table *table, int write,
 		tmp.data = buf;
 		r = proc_dostring(&tmp, write, buffer, lenp, ppos);
 		if (r)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return r;
+}
 
 		if (!strcmp(buf, "NONE")) {
 			nf_log_unbind_pf(net, tindex);
@@ -478,6 +507,7 @@ static int netfilter_log_sysctl_init(struct net *net)
 
 	table = nf_log_sysctl_table;
 	if (!net_eq(net, &init_net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table = kmemdup(nf_log_sysctl_table,
 				 sizeof(nf_log_sysctl_table),
 				 GFP_KERNEL);
@@ -511,11 +541,14 @@ static int netfilter_log_sysctl_init(struct net *net)
 	if (!net->nf.nf_log_dir_header)
 		goto err_reg;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_reg:
 	if (!net_eq(net, &init_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(table);
+}
 	else
 		unregister_net_sysctl_table(nf_log_sysctl_fhdr);
 err_freg:
@@ -558,6 +591,7 @@ static int __net_init nf_log_net_init(struct net *net)
 	if (ret < 0)
 		goto out_sysctl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_sysctl:
diff --git a/net/netfilter/nf_log_common.c b/net/netfilter/nf_log_common.c
index dc61399..b88545f 100644
--- a/net/netfilter/nf_log_common.c
+++ b/net/netfilter/nf_log_common.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>
  *
@@ -64,7 +66,9 @@ int nf_log_dump_tcp_header(struct nf_log_buf *m, const struct sk_buff *skb,
 	nf_log_buf_add(m, "PROTO=TCP ");
 
 	if (fragment)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Max length: 25 "INCOMPLETE [65535 bytes] " */
 	th = skb_header_pointer(skb, offset, sizeof(_tcph), &_tcph);
diff --git a/net/netfilter/nf_nat_amanda.c b/net/netfilter/nf_nat_amanda.c
index e4d61a7..62c8b95 100644
--- a/net/netfilter/nf_nat_amanda.c
+++ b/net/netfilter/nf_nat_amanda.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Amanda extension for TCP NAT alteration.
  * (C) 2002 by Brian J. Murrell <netfilter@interlinx.bc.ca>
  * based on a copy of HW's ip_nat_irc.c as well as other modules
diff --git a/net/netfilter/nf_nat_core.c b/net/netfilter/nf_nat_core.c
index af8345f..3cb3f8e 100644
--- a/net/netfilter/nf_nat_core.c
+++ b/net/netfilter/nf_nat_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2006 Netfilter Core Team <coreteam@netfilter.org>
@@ -45,12 +47,14 @@ static unsigned int nf_nat_hash_rnd __read_mostly;
 inline const struct nf_nat_l3proto *
 __nf_nat_l3proto_find(u8 family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rcu_dereference(nf_nat_l3protos[family]);
 }
 
 inline const struct nf_nat_l4proto *
 __nf_nat_l4proto_find(u8 family, u8 protonum)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rcu_dereference(nf_nat_l4protos[family][protonum]);
 }
 EXPORT_SYMBOL_GPL(__nf_nat_l4proto_find);
@@ -67,7 +71,9 @@ static void __nf_nat_decode_session(struct sk_buff *skb, struct flowi *fl)
 
 	ct = nf_ct_get(skb, &ctinfo);
 	if (ct == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	family = nf_ct_l3num(ct);
 	l3proto = __nf_nat_l3proto_find(family);
@@ -92,7 +98,9 @@ int nf_xfrm_me_harder(struct net *net, struct sk_buff *skb, unsigned int family)
 
 	err = xfrm_decode_session(skb, &fl, family);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	dst = skb_dst(skb);
 	if (dst->xfrm)
@@ -122,6 +130,7 @@ hash_by_src(const struct net *n, const struct nf_conntrack_tuple *tuple)
 {
 	unsigned int hash;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	get_random_once(&nf_nat_hash_rnd, sizeof(nf_nat_hash_rnd));
 
 	/* Original src, to ensure we map it consistently if poss. */
@@ -179,6 +188,7 @@ same_src(const struct nf_conn *ct,
 	const struct nf_conntrack_tuple *t;
 
 	t = &ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (t->dst.protonum == tuple->dst.protonum &&
 		nf_inet_addr_cmp(&t->src.u3, &tuple->src.u3) &&
 		t->src.u.all == tuple->src.u.all);
@@ -194,6 +204,7 @@ find_appropriate_src(struct net *net,
 		     struct nf_conntrack_tuple *result,
 		     const struct nf_nat_range *range)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int h = hash_by_src(net, tuple);
 	const struct nf_conn *ct;
 
@@ -234,7 +245,9 @@ find_best_ips_proto(const struct nf_conntrack_zone *zone,
 
 	/* No IP mapping?  Do nothing. */
 	if (!(range->flags & NF_NAT_RANGE_MAP_IPS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (maniptype == NF_NAT_MANIP_SRC)
 		var_ipp = &tuple->src.u3;
@@ -366,6 +379,7 @@ get_unique_tuple(struct nf_conntrack_tuple *tuple,
 
 struct nf_conn_nat *nf_ct_nat_ext_add(struct nf_conn *ct)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nf_conn_nat *nat = nfct_nat(ct);
 	if (nat)
 		return nat;
@@ -382,6 +396,7 @@ nf_nat_setup_info(struct nf_conn *ct,
 		  const struct nf_nat_range *range,
 		  enum nf_nat_manip_type maniptype)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = nf_ct_net(ct);
 	struct nf_conntrack_tuple curr_tuple, new_tuple;
 
@@ -468,6 +483,7 @@ __nf_nat_alloc_null_binding(struct nf_conn *ct, enum nf_nat_manip_type manip)
 unsigned int
 nf_nat_alloc_null_binding(struct nf_conn *ct, unsigned int hooknum)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __nf_nat_alloc_null_binding(ct, HOOK2MANIP(hooknum));
 }
 EXPORT_SYMBOL_GPL(nf_nat_alloc_null_binding);
@@ -480,6 +496,7 @@ unsigned int nf_nat_packet(struct nf_conn *ct,
 {
 	const struct nf_nat_l3proto *l3proto;
 	const struct nf_nat_l4proto *l4proto;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	unsigned long statusbit;
 	enum nf_nat_manip_type mtype = HOOK2MANIP(hooknum);
@@ -520,6 +537,7 @@ static int nf_nat_proto_remove(struct nf_conn *i, void *data)
 {
 	const struct nf_nat_proto_clean *clean = data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((clean->l3proto && nf_ct_l3num(i) != clean->l3proto) ||
 	    (clean->l4proto && nf_ct_protonum(i) != clean->l4proto))
 		return 0;
@@ -539,6 +557,7 @@ static void __nf_nat_cleanup_conntrack(struct nf_conn *ct)
 
 static int nf_nat_proto_clean(struct nf_conn *ct, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nf_nat_proto_remove(ct, data))
 		return 1;
 
@@ -588,9 +607,11 @@ int nf_nat_l4proto_register(u8 l3proto, const struct nf_nat_l4proto *l4proto)
 
 	mutex_lock(&nf_nat_proto_mutex);
 	if (nf_nat_l4protos[l3proto] == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		l4protos = kmalloc(IPPROTO_MAX * sizeof(struct nf_nat_l4proto *),
 				   GFP_KERNEL);
 		if (l4protos == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ENOMEM;
 			goto out;
 		}
@@ -610,6 +631,7 @@ int nf_nat_l4proto_register(u8 l3proto, const struct nf_nat_l4proto *l4proto)
 			nf_nat_l4protos[l3proto][l4proto->l4proto],
 			lockdep_is_held(&nf_nat_proto_mutex)
 			) != &nf_nat_l4proto_unknown) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EBUSY;
 		goto out;
 	}
@@ -623,6 +645,7 @@ EXPORT_SYMBOL_GPL(nf_nat_l4proto_register);
 /* No one stores the protocol anywhere; simply delete it. */
 void nf_nat_l4proto_unregister(u8 l3proto, const struct nf_nat_l4proto *l4proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&nf_nat_proto_mutex);
 	RCU_INIT_POINTER(nf_nat_l4protos[l3proto][l4proto->l4proto],
 			 &nf_nat_l4proto_unknown);
@@ -639,7 +662,9 @@ int nf_nat_l3proto_register(const struct nf_nat_l3proto *l3proto)
 
 	err = nf_ct_l3proto_try_module_get(l3proto->l3proto);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	mutex_lock(&nf_nat_proto_mutex);
 	RCU_INIT_POINTER(nf_nat_l4protos[l3proto->l3proto][IPPROTO_TCP],
@@ -667,6 +692,7 @@ EXPORT_SYMBOL_GPL(nf_nat_l3proto_register);
 
 void nf_nat_l3proto_unregister(const struct nf_nat_l3proto *l3proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&nf_nat_proto_mutex);
 	RCU_INIT_POINTER(nf_nat_l3protos[l3proto->l3proto], NULL);
 	mutex_unlock(&nf_nat_proto_mutex);
@@ -681,8 +707,10 @@ EXPORT_SYMBOL_GPL(nf_nat_l3proto_unregister);
 static void nf_nat_cleanup_conntrack(struct nf_conn *ct)
 {
 	if (ct->status & IPS_SRC_NAT_DONE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__nf_nat_cleanup_conntrack(ct);
 }
+}
 
 static struct nf_ct_ext_type nat_extend __read_mostly = {
 	.len		= sizeof(struct nf_conn_nat),
@@ -712,7 +740,9 @@ static int nfnetlink_parse_nat_proto(struct nlattr *attr,
 	err = nla_parse_nested(tb, CTA_PROTONAT_MAX, attr,
 			       protonat_nla_policy, NULL);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	l4proto = __nf_nat_l4proto_find(nf_ct_l3num(ct), nf_ct_protonum(ct));
 	if (l4proto->nlattr_to_range)
@@ -741,7 +771,9 @@ nfnetlink_parse_nat(const struct nlattr *nat,
 
 	err = nla_parse_nested(tb, CTA_NAT_MAX, nat, nat_nla_policy, NULL);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = l3proto->nlattr_to_range(tb, range);
 	if (err < 0)
@@ -808,14 +840,19 @@ static int __init nf_nat_init(void)
 	/* Leave them the same for the moment. */
 	nf_nat_htable_size = nf_conntrack_htable_size;
 	if (nf_nat_htable_size < CONNTRACK_LOCKS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nf_nat_htable_size = CONNTRACK_LOCKS;
+}
 
 	nf_nat_bysource = nf_ct_alloc_hashtable(&nf_nat_htable_size, 0);
 	if (!nf_nat_bysource)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ret = nf_ct_extend_register(&nat_extend);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nf_ct_free_hashtable(nf_nat_bysource, nf_nat_htable_size);
 		printk(KERN_ERR "nf_nat_core: Unable to register extension\n");
 		return ret;
@@ -845,6 +882,7 @@ static void __exit nf_nat_cleanup(void)
 
 	nf_ct_extend_unregister(&nat_extend);
 	nf_ct_helper_expectfn_unregister(&follow_master_nat);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(nfnetlink_parse_nat_setup_hook, NULL);
 #ifdef CONFIG_XFRM
 	RCU_INIT_POINTER(nf_nat_decode_session_hook, NULL);
diff --git a/net/netfilter/nf_nat_ftp.c b/net/netfilter/nf_nat_ftp.c
index e84a578..a21745f 100644
--- a/net/netfilter/nf_nat_ftp.c
+++ b/net/netfilter/nf_nat_ftp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* FTP extension for TCP NAT alteration. */
 
 /* (C) 1999-2001 Paul `Rusty' Russell
@@ -30,6 +32,7 @@ static int nf_nat_ftp_fmt_cmd(struct nf_conn *ct, enum nf_ct_ftp_type type,
 			      char *buffer, size_t buflen,
 			      union nf_inet_addr *addr, u16 port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (type) {
 	case NF_CT_FTP_PORT:
 	case NF_CT_FTP_PASV:
@@ -66,6 +69,7 @@ static unsigned int nf_nat_ftp(struct sk_buff *skb,
 {
 	union nf_inet_addr newaddr;
 	u_int16_t port;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int dir = CTINFO2DIR(ctinfo);
 	struct nf_conn *ct = exp->master;
 	char buffer[sizeof("|1||65535|") + INET6_ADDRSTRLEN];
@@ -122,6 +126,7 @@ static unsigned int nf_nat_ftp(struct sk_buff *skb,
 
 static void __exit nf_nat_ftp_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(nf_nat_ftp_hook, NULL);
 	synchronize_rcu();
 }
@@ -136,6 +141,7 @@ static int __init nf_nat_ftp_init(void)
 /* Prior to 2.6.11, we had a ports param.  No longer, but don't break users. */
 static int warn_set(const char *val, struct kernel_param *kp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	printk(KERN_INFO KBUILD_MODNAME
 	       ": kernel >= 2.6.10 only uses 'ports' for conntrack modules\n");
 	return 0;
diff --git a/net/netfilter/nf_nat_irc.c b/net/netfilter/nf_nat_irc.c
index 0648cb0..c1c0d24 100644
--- a/net/netfilter/nf_nat_irc.c
+++ b/net/netfilter/nf_nat_irc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* IRC extension for TCP NAT alteration.
  *
  * (C) 2000-2001 by Harald Welte <laforge@gnumonks.org>
@@ -94,6 +96,7 @@ static unsigned int help(struct sk_buff *skb,
 
 static void __exit nf_nat_irc_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(nf_nat_irc_hook, NULL);
 	synchronize_rcu();
 }
@@ -108,6 +111,7 @@ static int __init nf_nat_irc_init(void)
 /* Prior to 2.6.11, we had a ports param.  No longer, but don't break users. */
 static int warn_set(const char *val, struct kernel_param *kp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	printk(KERN_INFO KBUILD_MODNAME
 	       ": kernel >= 2.6.10 only uses 'ports' for conntrack modules\n");
 	return 0;
diff --git a/net/netfilter/nf_nat_sip.c b/net/netfilter/nf_nat_sip.c
index 791fac4..6adde29 100644
--- a/net/netfilter/nf_nat_sip.c
+++ b/net/netfilter/nf_nat_sip.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SIP extension for NAT alteration.
  *
  * (C) 2005 by Christian Hentschel <chentschel@arnet.com.ar>
@@ -41,6 +43,7 @@ static unsigned int mangle_packet(struct sk_buff *skb, unsigned int protoff,
 	unsigned int baseoff;
 
 	if (nf_ct_protonum(ct) == IPPROTO_TCP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		th = (struct tcphdr *)(skb->data + protoff);
 		baseoff = protoff + th->doff * 4;
 		matchoff += dataoff - baseoff;
@@ -68,6 +71,7 @@ static unsigned int mangle_packet(struct sk_buff *skb, unsigned int protoff,
 static int sip_sprintf_addr(const struct nf_conn *ct, char *buffer,
 			    const union nf_inet_addr *addr, bool delim)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nf_ct_l3num(ct) == NFPROTO_IPV4)
 		return sprintf(buffer, "%pI4", &addr->ip);
 	else {
@@ -81,6 +85,7 @@ static int sip_sprintf_addr(const struct nf_conn *ct, char *buffer,
 static int sip_sprintf_addr_port(const struct nf_conn *ct, char *buffer,
 				 const union nf_inet_addr *addr, u16 port)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nf_ct_l3num(ct) == NFPROTO_IPV4)
 		return sprintf(buffer, "%pI4:%u", &addr->ip, port);
 	else
@@ -95,6 +100,7 @@ static int map_addr(struct sk_buff *skb, unsigned int protoff,
 {
 	enum ip_conntrack_info ctinfo;
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	struct nf_ct_sip_master *ct_sip_info = nfct_help_data(ct);
 	char buffer[INET6_ADDRSTRLEN + sizeof("[]:nnnnn")];
@@ -146,6 +152,7 @@ static unsigned int nf_nat_sip(struct sk_buff *skb, unsigned int protoff,
 {
 	enum ip_conntrack_info ctinfo;
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	struct nf_ct_sip_master *ct_sip_info = nfct_help_data(ct);
 	unsigned int coff, matchoff, matchlen;
@@ -305,6 +312,7 @@ static void nf_nat_sip_seq_adjust(struct sk_buff *skb, unsigned int protoff,
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
 	const struct tcphdr *th;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nf_ct_protonum(ct) != IPPROTO_TCP || off == 0)
 		return;
 
@@ -347,6 +355,7 @@ static unsigned int nf_nat_sip_expect(struct sk_buff *skb, unsigned int protoff,
 {
 	enum ip_conntrack_info ctinfo;
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	struct nf_ct_sip_master *ct_sip_info = nfct_help_data(ct);
 	union nf_inet_addr newaddr;
@@ -547,6 +556,7 @@ static unsigned int nf_nat_sdp_media(struct sk_buff *skb, unsigned int protoff,
 {
 	enum ip_conntrack_info ctinfo;
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	u_int16_t port;
 
@@ -625,6 +635,7 @@ static struct nf_ct_helper_expectfn sip_nat = {
 
 static void __exit nf_nat_sip_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(nf_nat_sip_hooks, NULL);
 
 	nf_ct_helper_expectfn_unregister(&sip_nat);
diff --git a/net/netfilter/nf_nat_tftp.c b/net/netfilter/nf_nat_tftp.c
index 7f67e1d..37a8785 100644
--- a/net/netfilter/nf_nat_tftp.c
+++ b/net/netfilter/nf_nat_tftp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 2001-2002 Magnus Boden <mb@ozaba.mine.nu>
  *
  * This program is free software; you can redistribute it and/or modify
diff --git a/net/netfilter/nf_queue.c b/net/netfilter/nf_queue.c
index f7e2195..87c14c7 100644
--- a/net/netfilter/nf_queue.c
+++ b/net/netfilter/nf_queue.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Rusty Russell (C)2000 -- This code is GPL.
  * Patrick McHardy (c) 2006-2012
@@ -40,6 +42,7 @@ EXPORT_SYMBOL(nf_register_queue_handler);
 /* The caller must flush their queue before this */
 void nf_unregister_queue_handler(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(net->nf.queue_handler, NULL);
 }
 EXPORT_SYMBOL(nf_unregister_queue_handler);
@@ -50,7 +53,9 @@ void nf_queue_entry_release_refs(struct nf_queue_entry *entry)
 
 	/* Release those devices we held, or Alexey will kill me. */
 	if (state->in)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_put(state->in);
+}
 	if (state->out)
 		dev_put(state->out);
 	if (state->sk)
@@ -76,7 +81,9 @@ void nf_queue_entry_get_refs(struct nf_queue_entry *entry)
 	struct nf_hook_state *state = &entry->state;
 
 	if (state->in)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_hold(state->in);
+}
 	if (state->out)
 		dev_hold(state->out);
 	if (state->sk)
@@ -105,6 +112,7 @@ unsigned int nf_queue_nf_hook_drop(struct net *net)
 	qh = rcu_dereference(net->nf.queue_handler);
 	if (qh)
 		count = qh->nf_hook_drop(net);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	return count;
@@ -171,6 +179,7 @@ int nf_queue(struct sk_buff *skb, struct nf_hook_state *state,
 
 	ret = __nf_queue(skb, state, entries, index, verdict >> NF_VERDICT_QBITS);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ret == -ESRCH &&
 		    (verdict & NF_VERDICT_FLAG_QUEUE_BYPASS))
 			return 1;
@@ -188,6 +197,7 @@ static unsigned int nf_iterate(struct sk_buff *skb,
 	const struct nf_hook_entry *hook;
 	unsigned int verdict, i = *index;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (i < hooks->num_hook_entries) {
 		hook = &hooks->hooks[i];
 repeat:
@@ -219,6 +229,7 @@ void nf_reinject(struct nf_queue_entry *entry, unsigned int verdict)
 	net = entry->state.net;
 	pf = entry->state.pf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hooks = rcu_dereference(net->nf.hooks[pf][entry->state.hook]);
 
 	nf_queue_entry_release_refs(entry);
diff --git a/net/netfilter/nf_sockopt.c b/net/netfilter/nf_sockopt.c
index 46cb378..803ad6d 100644
--- a/net/netfilter/nf_sockopt.c
+++ b/net/netfilter/nf_sockopt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/kernel.h>
 #include <linux/init.h>
@@ -34,6 +36,7 @@ int nf_register_sockopt(struct nf_sockopt_ops *reg)
 				reg->set_optmin, reg->set_optmax)
 			|| overlap(ops->get_optmin, ops->get_optmax,
 				   reg->get_optmin, reg->get_optmax))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_debug("nf_sock overlap: %u-%u/%u-%u v %u-%u/%u-%u\n",
 				ops->set_optmin, ops->set_optmax,
 				ops->get_optmin, ops->get_optmax,
@@ -53,6 +56,7 @@ EXPORT_SYMBOL(nf_register_sockopt);
 
 void nf_unregister_sockopt(struct nf_sockopt_ops *reg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&nf_sockopt_mutex);
 	list_del(&reg->list);
 	mutex_unlock(&nf_sockopt_mutex);
@@ -65,6 +69,7 @@ static struct nf_sockopt_ops *nf_sockopt_find(struct sock *sk, u_int8_t pf,
 	struct nf_sockopt_ops *ops;
 
 	mutex_lock(&nf_sockopt_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(ops, &nf_sockopts, list) {
 		if (ops->pf == pf) {
 			if (!try_module_get(ops->owner))
@@ -98,7 +103,9 @@ static int nf_sockopt(struct sock *sk, u_int8_t pf, int val,
 
 	ops = nf_sockopt_find(sk, pf, val, get);
 	if (IS_ERR(ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(ops);
+}
 
 	if (get)
 		ret = ops->get(sk, val, opt, len);
@@ -112,6 +119,7 @@ static int nf_sockopt(struct sock *sk, u_int8_t pf, int val,
 int nf_setsockopt(struct sock *sk, u_int8_t pf, int val, char __user *opt,
 		  unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nf_sockopt(sk, pf, val, opt, &len, 0);
 }
 EXPORT_SYMBOL(nf_setsockopt);
@@ -119,6 +127,7 @@ EXPORT_SYMBOL(nf_setsockopt);
 int nf_getsockopt(struct sock *sk, u_int8_t pf, int val, char __user *opt,
 		  int *len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nf_sockopt(sk, pf, val, opt, len, 1);
 }
 EXPORT_SYMBOL(nf_getsockopt);
@@ -132,7 +141,9 @@ static int compat_nf_sockopt(struct sock *sk, u_int8_t pf, int val,
 
 	ops = nf_sockopt_find(sk, pf, val, get);
 	if (IS_ERR(ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(ops);
+}
 
 	if (get) {
 		if (ops->compat_get)
@@ -153,6 +164,7 @@ static int compat_nf_sockopt(struct sock *sk, u_int8_t pf, int val,
 int compat_nf_setsockopt(struct sock *sk, u_int8_t pf,
 		int val, char __user *opt, unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return compat_nf_sockopt(sk, pf, val, opt, &len, 0);
 }
 EXPORT_SYMBOL(compat_nf_setsockopt);
@@ -160,6 +172,7 @@ EXPORT_SYMBOL(compat_nf_setsockopt);
 int compat_nf_getsockopt(struct sock *sk, u_int8_t pf,
 		int val, char __user *opt, int *len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return compat_nf_sockopt(sk, pf, val, opt, len, 1);
 }
 EXPORT_SYMBOL(compat_nf_getsockopt);
diff --git a/net/netfilter/nf_synproxy_core.c b/net/netfilter/nf_synproxy_core.c
index 49bd8bb..f130f94 100644
--- a/net/netfilter/nf_synproxy_core.c
+++ b/net/netfilter/nf_synproxy_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2013 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/nf_tables_api.c b/net/netfilter/nf_tables_api.c
index 5b504aa..0c42f5e 100644
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2007-2009 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/nf_tables_core.c b/net/netfilter/nf_tables_core.c
index dfd0bf3..8b8fdec 100644
--- a/net/netfilter/nf_tables_core.c
+++ b/net/netfilter/nf_tables_core.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/nf_tables_inet.c b/net/netfilter/nf_tables_inet.c
index f713cc2..f2e7b50 100644
--- a/net/netfilter/nf_tables_inet.c
+++ b/net/netfilter/nf_tables_inet.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2012-2014 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/nf_tables_netdev.c b/net/netfilter/nf_tables_netdev.c
index 4034329..fb4e50d 100644
--- a/net/netfilter/nf_tables_netdev.c
+++ b/net/netfilter/nf_tables_netdev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2015 Pablo Neira Ayuso <pablo@netfilter.org>
  *
diff --git a/net/netfilter/nfnetlink.c b/net/netfilter/nfnetlink.c
index 733d3e4..3417226 100644
--- a/net/netfilter/nfnetlink.c
+++ b/net/netfilter/nfnetlink.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Netfilter messages via netlink socket. Allows for user space
  * protocol helpers and general trouble making from userspace.
  *
@@ -80,6 +82,7 @@ int nfnetlink_subsys_register(const struct nfnetlink_subsystem *n)
 {
 	nfnl_lock(n->subsys_id);
 	if (table[n->subsys_id].subsys) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nfnl_unlock(n->subsys_id);
 		return -EBUSY;
 	}
@@ -92,6 +95,7 @@ EXPORT_SYMBOL_GPL(nfnetlink_subsys_register);
 
 int nfnetlink_subsys_unregister(const struct nfnetlink_subsystem *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nfnl_lock(n->subsys_id);
 	table[n->subsys_id].subsys = NULL;
 	nfnl_unlock(n->subsys_id);
@@ -105,7 +109,9 @@ static inline const struct nfnetlink_subsystem *nfnetlink_get_subsys(u16 type)
 	u8 subsys_id = NFNL_SUBSYS_ID(type);
 
 	if (subsys_id >= NFNL_SUBSYS_COUNT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	return rcu_dereference(table[subsys_id].subsys);
 }
@@ -116,13 +122,16 @@ nfnetlink_find_client(u16 type, const struct nfnetlink_subsystem *ss)
 	u8 cb_id = NFNL_MSG_TYPE(type);
 
 	if (cb_id >= ss->cb_count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	return &ss->cb[cb_id];
 }
 
 int nfnetlink_has_listeners(struct net *net, unsigned int group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return netlink_has_listeners(net->nfnl, group);
 }
 EXPORT_SYMBOL_GPL(nfnetlink_has_listeners);
@@ -130,12 +139,14 @@ EXPORT_SYMBOL_GPL(nfnetlink_has_listeners);
 int nfnetlink_send(struct sk_buff *skb, struct net *net, u32 portid,
 		   unsigned int group, int echo, gfp_t flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nlmsg_notify(net->nfnl, skb, portid, group, echo, flags);
 }
 EXPORT_SYMBOL_GPL(nfnetlink_send);
 
 int nfnetlink_set_err(struct net *net, u32 portid, u32 group, int error)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return netlink_set_err(net->nfnl, portid, group, error);
 }
 EXPORT_SYMBOL_GPL(nfnetlink_set_err);
@@ -143,6 +154,7 @@ EXPORT_SYMBOL_GPL(nfnetlink_set_err);
 int nfnetlink_unicast(struct sk_buff *skb, struct net *net, u32 portid,
 		      int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return netlink_unicast(net->nfnl, skb, portid, flags);
 }
 EXPORT_SYMBOL_GPL(nfnetlink_unicast);
@@ -151,6 +163,7 @@ EXPORT_SYMBOL_GPL(nfnetlink_unicast);
 static int nfnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh,
 			     struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	const struct nfnl_callback *nc;
 	const struct nfnetlink_subsystem *ss;
@@ -238,7 +251,9 @@ static int nfnl_err_add(struct list_head *list, struct nlmsghdr *nlh, int err,
 
 	nfnl_err = kmalloc(sizeof(struct nfnl_err), GFP_KERNEL);
 	if (nfnl_err == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	nfnl_err->nlh = nlh;
 	nfnl_err->err = err;
@@ -250,6 +265,7 @@ static int nfnl_err_add(struct list_head *list, struct nlmsghdr *nlh, int err,
 
 static void nfnl_err_del(struct nfnl_err *nfnl_err)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_del(&nfnl_err->head);
 	kfree(nfnl_err);
 }
@@ -258,6 +274,7 @@ static void nfnl_err_reset(struct list_head *err_list)
 {
 	struct nfnl_err *nfnl_err, *next;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(nfnl_err, next, err_list, head)
 		nfnl_err_del(nfnl_err);
 }
@@ -266,6 +283,7 @@ static void nfnl_err_deliver(struct list_head *err_list, struct sk_buff *skb)
 {
 	struct nfnl_err *nfnl_err, *next;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(nfnl_err, next, err_list, head) {
 		netlink_ack(skb, nfnl_err->nlh, nfnl_err->err,
 			    &nfnl_err->extack);
@@ -292,7 +310,9 @@ static void nfnetlink_rcv_batch(struct sk_buff *skb, struct nlmsghdr *nlh,
 	int err;
 
 	if (subsys_id >= NFNL_SUBSYS_COUNT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return netlink_ack(skb, nlh, -EINVAL, NULL);
+}
 replay:
 	status = 0;
 
@@ -459,6 +479,7 @@ static const struct nla_policy nfnl_batch_policy[NFNL_BATCH_MAX + 1] = {
 
 static void nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int min_len = nlmsg_total_size(sizeof(struct nfgenmsg));
 	struct nlattr *attr = (void *)nlh + min_len;
 	struct nlattr *cda[NFNL_BATCH_MAX + 1];
@@ -497,6 +518,7 @@ static void nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
 
 static void nfnetlink_rcv(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nlmsghdr *nlh = nlmsg_hdr(skb);
 
 	if (skb->len < NLMSG_HDRLEN ||
@@ -521,6 +543,7 @@ static int nfnetlink_bind(struct net *net, int group)
 	const struct nfnetlink_subsystem *ss;
 	int type;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (group <= NFNLGRP_NONE || group > NFNLGRP_MAX)
 		return 0;
 
@@ -548,7 +571,9 @@ static int __net_init nfnetlink_net_init(struct net *net)
 
 	nfnl = netlink_kernel_create(net, NETLINK_NETFILTER, &cfg);
 	if (!nfnl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	net->nfnl_stash = nfnl;
 	rcu_assign_pointer(net->nfnl, nfnl);
 	return 0;
@@ -586,6 +611,7 @@ static int __init nfnetlink_init(void)
 
 static void __exit nfnetlink_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_info("Removing netfilter NETLINK layer.\n");
 	unregister_pernet_subsys(&nfnetlink_net_ops);
 }
diff --git a/net/netfilter/nfnetlink_acct.c b/net/netfilter/nfnetlink_acct.c
index c45e6d4..fbb52c3 100644
--- a/net/netfilter/nfnetlink_acct.c
+++ b/net/netfilter/nfnetlink_acct.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2011 Pablo Neira Ayuso <pablo@netfilter.org>
  * (C) 2011 Intra2net AG <http://www.intra2net.com>
diff --git a/net/netfilter/nfnetlink_cthelper.c b/net/netfilter/nfnetlink_cthelper.c
index d33ce6d..73b63fb 100644
--- a/net/netfilter/nfnetlink_cthelper.c
+++ b/net/netfilter/nfnetlink_cthelper.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2012 Pablo Neira Ayuso <pablo@netfilter.org>
  *
diff --git a/net/netfilter/nfnetlink_cttimeout.c b/net/netfilter/nfnetlink_cttimeout.c
index 32b1c0b..bf86f52 100644
--- a/net/netfilter/nfnetlink_cttimeout.c
+++ b/net/netfilter/nfnetlink_cttimeout.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2012 by Pablo Neira Ayuso <pablo@netfilter.org>
  * (C) 2012 by Vyatta Inc. <http://www.vyatta.com>
diff --git a/net/netfilter/nfnetlink_log.c b/net/netfilter/nfnetlink_log.c
index cad6498..22553a5 100644
--- a/net/netfilter/nfnetlink_log.c
+++ b/net/netfilter/nfnetlink_log.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * This is a module which is used for logging packets to userspace via
  * nfetlink.
@@ -97,6 +99,7 @@ static struct nfnl_log_net *nfnl_log_pernet(struct net *net)
 
 static inline u_int8_t instance_hashfn(u_int16_t group_num)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ((group_num & 0xff) % INSTANCE_BUCKETS);
 }
 
@@ -107,6 +110,7 @@ __instance_lookup(struct nfnl_log_net *log, u_int16_t group_num)
 	struct nfulnl_instance *inst;
 
 	head = &log->instance_table[instance_hashfn(group_num)];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry_rcu(inst, head, hlist) {
 		if (inst->group_num == group_num)
 			return inst;
@@ -117,6 +121,7 @@ __instance_lookup(struct nfnl_log_net *log, u_int16_t group_num)
 static inline void
 instance_get(struct nfulnl_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	refcount_inc(&inst->use);
 }
 
@@ -127,6 +132,7 @@ instance_lookup_get(struct nfnl_log_net *log, u_int16_t group_num)
 
 	rcu_read_lock_bh();
 	inst = __instance_lookup(log, group_num);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (inst && !refcount_inc_not_zero(&inst->use))
 		inst = NULL;
 	rcu_read_unlock_bh();
@@ -147,6 +153,7 @@ static void nfulnl_instance_free_rcu(struct rcu_head *head)
 static void
 instance_put(struct nfulnl_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (inst && refcount_dec_and_test(&inst->use))
 		call_rcu_bh(&inst->rcu, nfulnl_instance_free_rcu);
 }
@@ -163,6 +170,7 @@ instance_create(struct net *net, u_int16_t group_num,
 
 	spin_lock_bh(&log->instances_lock);
 	if (__instance_lookup(log, group_num)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EEXIST;
 		goto out_unlock;
 	}
@@ -238,6 +246,7 @@ static inline void
 instance_destroy(struct nfnl_log_net *log,
 		 struct nfulnl_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&log->instances_lock);
 	__instance_destroy(inst);
 	spin_unlock_bh(&log->instances_lock);
@@ -283,7 +292,9 @@ nfulnl_set_nlbufsiz(struct nfulnl_instance *inst, u_int32_t nlbufsiz)
 
 	spin_lock_bh(&inst->lock);
 	if (nlbufsiz < NFULNL_NLBUFSIZ_DEFAULT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status = -ERANGE;
+}
 	else if (nlbufsiz > 131072)
 		status = -ERANGE;
 	else {
@@ -298,6 +309,7 @@ nfulnl_set_nlbufsiz(struct nfulnl_instance *inst, u_int32_t nlbufsiz)
 static void
 nfulnl_set_timeout(struct nfulnl_instance *inst, u_int32_t timeout)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&inst->lock);
 	inst->flushtimeout = timeout;
 	spin_unlock_bh(&inst->lock);
@@ -306,6 +318,7 @@ nfulnl_set_timeout(struct nfulnl_instance *inst, u_int32_t timeout)
 static void
 nfulnl_set_qthresh(struct nfulnl_instance *inst, u_int32_t qthresh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&inst->lock);
 	inst->qthreshold = qthresh;
 	spin_unlock_bh(&inst->lock);
@@ -314,6 +327,7 @@ nfulnl_set_qthresh(struct nfulnl_instance *inst, u_int32_t qthresh)
 static int
 nfulnl_set_flags(struct nfulnl_instance *inst, u_int16_t flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&inst->lock);
 	inst->flags = flags;
 	spin_unlock_bh(&inst->lock);
@@ -331,6 +345,7 @@ nfulnl_alloc_skb(struct net *net, u32 peer_portid, unsigned int inst_size,
 	/* alloc skb which should be big enough for a whole multipart
 	 * message.  WARNING: has to be <= 128k due to slab restrictions */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	n = max(inst_size, pkt_size);
 	skb = alloc_skb(n, GFP_ATOMIC | __GFP_NOWARN);
 	if (!skb) {
@@ -348,6 +363,7 @@ nfulnl_alloc_skb(struct net *net, u32 peer_portid, unsigned int inst_size,
 static void
 __nfulnl_send(struct nfulnl_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (inst->qlen > 1) {
 		struct nlmsghdr *nlh = nlmsg_put(inst->skb, 0, 0,
 						 NLMSG_DONE,
@@ -383,7 +399,9 @@ nfulnl_timer(unsigned long data)
 
 	spin_lock_bh(&inst->lock);
 	if (inst->skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__nfulnl_send(inst);
+}
 	spin_unlock_bh(&inst->lock);
 	instance_put(inst);
 }
@@ -414,7 +432,9 @@ __build_packet_message(struct nfnl_log_net *log,
 			nfnl_msg_type(NFNL_SUBSYS_ULOG, NFULNL_MSG_PACKET),
 			sizeof(struct nfgenmsg), 0);
 	if (!nlh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 	nfmsg = nlmsg_data(nlh);
 	nfmsg->nfgen_family = pf;
 	nfmsg->version = NFNETLINK_V0;
@@ -639,6 +659,7 @@ nfulnl_log_packet(struct net *net,
 	struct nf_conn *ct = NULL;
 	enum ip_conntrack_info uninitialized_var(ctinfo);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (li_user && li_user->type == NF_LOG_TYPE_ULOG)
 		li = li_user;
 	else
@@ -774,16 +795,22 @@ nfulnl_rcv_nl_event(struct notifier_block *this,
 
 		/* destroy all instances for this portid */
 		spin_lock_bh(&log->instances_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for  (i = 0; i < INSTANCE_BUCKETS; i++) {
 			struct hlist_node *t2;
 			struct nfulnl_instance *inst;
 			struct hlist_head *head = &log->instance_table[i];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hlist_for_each_entry_safe(inst, t2, head, hlist) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (n->portid == inst->peer_portid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					__instance_destroy(inst);
+}
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_bh(&log->instances_lock);
 	}
 	return NOTIFY_DONE;
@@ -798,6 +825,7 @@ static int nfulnl_recv_unsupp(struct net *net, struct sock *ctnl,
 			      const struct nlattr * const nfqa[],
 			      struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOTSUPP;
 }
 
@@ -822,6 +850,7 @@ static int nfulnl_recv_config(struct net *net, struct sock *ctnl,
 			      const struct nlattr * const nfula[],
 			      struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nfgenmsg *nfmsg = nlmsg_data(nlh);
 	u_int16_t group_num = ntohs(nfmsg->res_id);
 	struct nfulnl_instance *inst;
@@ -965,7 +994,9 @@ static struct hlist_node *get_first(struct net *net, struct iter_state *st)
 {
 	struct nfnl_log_net *log;
 	if (!st)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	log = nfnl_log_pernet(net);
 
@@ -981,6 +1012,7 @@ static struct hlist_node *get_first(struct net *net, struct iter_state *st)
 static struct hlist_node *get_next(struct net *net, struct iter_state *st,
 				   struct hlist_node *h)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	h = rcu_dereference_bh(hlist_next_rcu(h));
 	while (!h) {
 		struct nfnl_log_net *log;
@@ -1003,20 +1035,24 @@ static struct hlist_node *get_idx(struct net *net, struct iter_state *st,
 	head = get_first(net, st);
 
 	if (head)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (pos && (head = get_next(net, st, head)))
 			pos--;
+}
 	return pos ? NULL : head;
 }
 
 static void *seq_start(struct seq_file *s, loff_t *pos)
 	__acquires(rcu_bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock_bh();
 	return get_idx(seq_file_net(s), s->private, *pos);
 }
 
 static void *seq_next(struct seq_file *s, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	(*pos)++;
 	return get_next(seq_file_net(s), s->private, v);
 }
@@ -1024,6 +1060,7 @@ static void *seq_next(struct seq_file *s, void *v, loff_t *pos)
 static void seq_stop(struct seq_file *s, void *v)
 	__releases(rcu_bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock_bh();
 }
 
@@ -1049,6 +1086,7 @@ static const struct seq_operations nful_seq_ops = {
 
 static int nful_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &nful_seq_ops,
 			    sizeof(struct iter_state));
 }
@@ -1081,7 +1119,9 @@ static int __net_init nfnl_log_net_init(struct net *net)
 	proc = proc_create("nfnetlink_log", 0440,
 			   net->nf.proc_netfilter, &nful_file_ops);
 	if (!proc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	root_uid = make_kuid(net->user_ns, 0);
 	root_gid = make_kgid(net->user_ns, 0);
@@ -1112,6 +1152,7 @@ static int __init nfnetlink_log_init(void)
 
 	status = register_pernet_subsys(&nfnl_log_net_ops);
 	if (status < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to register pernet ops\n");
 		goto out;
 	}
@@ -1119,16 +1160,19 @@ static int __init nfnetlink_log_init(void)
 	netlink_register_notifier(&nfulnl_rtnl_notifier);
 	status = nfnetlink_subsys_register(&nfulnl_subsys);
 	if (status < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to create netlink socket\n");
 		goto cleanup_netlink_notifier;
 	}
 
 	status = nf_log_register(NFPROTO_UNSPEC, &nfulnl_logger);
 	if (status < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("failed to register logger\n");
 		goto cleanup_subsys;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return status;
 
 cleanup_subsys:
@@ -1142,6 +1186,7 @@ static int __init nfnetlink_log_init(void)
 
 static void __exit nfnetlink_log_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nfnetlink_subsys_unregister(&nfulnl_subsys);
 	netlink_unregister_notifier(&nfulnl_rtnl_notifier);
 	unregister_pernet_subsys(&nfnl_log_net_ops);
diff --git a/net/netfilter/nfnetlink_queue.c b/net/netfilter/nfnetlink_queue.c
index c979662..de8dbef 100644
--- a/net/netfilter/nfnetlink_queue.c
+++ b/net/netfilter/nfnetlink_queue.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * This is a module which is used for queueing packets and communicating with
  * userspace via nfnetlink.
diff --git a/net/netfilter/nft_compat.c b/net/netfilter/nft_compat.c
index b89f4f6..4345bea 100644
--- a/net/netfilter/nft_compat.c
+++ b/net/netfilter/nft_compat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2012-2013 by Pablo Neira Ayuso <pablo@netfilter.org>
  *
diff --git a/net/netfilter/nft_counter.c b/net/netfilter/nft_counter.c
index eefe3b4..4d93642 100644
--- a/net/netfilter/nft_counter.c
+++ b/net/netfilter/nft_counter.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008-2009 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/nft_ct.c b/net/netfilter/nft_ct.c
index bd0975d..cfc928a 100644
--- a/net/netfilter/nft_ct.c
+++ b/net/netfilter/nft_ct.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008-2009 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2016 Pablo Neira Ayuso <pablo@netfilter.org>
diff --git a/net/netfilter/nft_dup_netdev.c b/net/netfilter/nft_dup_netdev.c
index 2cc1e0ef..ccc24c7 100644
--- a/net/netfilter/nft_dup_netdev.c
+++ b/net/netfilter/nft_dup_netdev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2015 Pablo Neira Ayuso <pablo@netfilter.org>
  *
diff --git a/net/netfilter/nft_exthdr.c b/net/netfilter/nft_exthdr.c
index a0a93d9..d180574 100644
--- a/net/netfilter/nft_exthdr.c
+++ b/net/netfilter/nft_exthdr.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/nft_fwd_netdev.c b/net/netfilter/nft_fwd_netdev.c
index ce13a50..14a65b0 100644
--- a/net/netfilter/nft_fwd_netdev.c
+++ b/net/netfilter/nft_fwd_netdev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2015 Pablo Neira Ayuso <pablo@netfilter.org>
  *
diff --git a/net/netfilter/nft_hash.c b/net/netfilter/nft_hash.c
index 24f2f75..816c2a6 100644
--- a/net/netfilter/nft_hash.c
+++ b/net/netfilter/nft_hash.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2016 Laura Garcia <nevola@gmail.com>
  *
diff --git a/net/netfilter/nft_limit.c b/net/netfilter/nft_limit.c
index a9fc298..9e8eb3f 100644
--- a/net/netfilter/nft_limit.c
+++ b/net/netfilter/nft_limit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008-2009 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/nft_log.c b/net/netfilter/nft_log.c
index 6f6e644..faf9991 100644
--- a/net/netfilter/nft_log.c
+++ b/net/netfilter/nft_log.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008-2009 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2012-2014 Pablo Neira Ayuso <pablo@netfilter.org>
diff --git a/net/netfilter/nft_meta.c b/net/netfilter/nft_meta.c
index 5a60eb2..492043e 100644
--- a/net/netfilter/nft_meta.c
+++ b/net/netfilter/nft_meta.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008-2009 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/nft_nat.c b/net/netfilter/nft_nat.c
index ed548d0..3a7176a 100644
--- a/net/netfilter/nft_nat.c
+++ b/net/netfilter/nft_nat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008-2009 Patrick McHardy <kaber@trash.net>
  * Copyright (c) 2012 Pablo Neira Ayuso <pablo@netfilter.org>
diff --git a/net/netfilter/nft_queue.c b/net/netfilter/nft_queue.c
index 9861365..6a1504e 100644
--- a/net/netfilter/nft_queue.c
+++ b/net/netfilter/nft_queue.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2013 Eric Leblond <eric@regit.org>
  *
diff --git a/net/netfilter/nft_reject_inet.c b/net/netfilter/nft_reject_inet.c
index 5a7fb5f..550d180 100644
--- a/net/netfilter/nft_reject_inet.c
+++ b/net/netfilter/nft_reject_inet.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2014 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/x_tables.c b/net/netfilter/x_tables.c
index 60c9215..e32a84e 100644
--- a/net/netfilter/x_tables.c
+++ b/net/netfilter/x_tables.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * x_tables core - Backend for {ip,ip6,arp}_tables
  *
@@ -102,11 +104,15 @@ xt_register_targets(struct xt_target *target, unsigned int n)
 		if (err)
 			goto err;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 
 err:
 	if (i > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xt_unregister_targets(target, i);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 EXPORT_SYMBOL(xt_register_targets);
@@ -114,6 +120,7 @@ EXPORT_SYMBOL(xt_register_targets);
 void
 xt_unregister_targets(struct xt_target *target, unsigned int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (n-- > 0)
 		xt_unregister_target(&target[n]);
 }
@@ -152,11 +159,15 @@ xt_register_matches(struct xt_match *match, unsigned int n)
 		if (err)
 			goto err;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 
 err:
 	if (i > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xt_unregister_matches(match, i);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 EXPORT_SYMBOL(xt_register_matches);
@@ -164,6 +175,7 @@ EXPORT_SYMBOL(xt_register_matches);
 void
 xt_unregister_matches(struct xt_match *match, unsigned int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (n-- > 0)
 		xt_unregister_match(&match[n]);
 }
@@ -183,6 +195,7 @@ struct xt_match *xt_find_match(u8 af, const char *name, u8 revision)
 	int err = -ENOENT;
 
 	mutex_lock(&xt[af].mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(m, &xt[af].match, list) {
 		if (strcmp(m->name, name) == 0) {
 			if (m->revision == revision) {
@@ -210,7 +223,9 @@ xt_request_find_match(uint8_t nfproto, const char *name, uint8_t revision)
 	struct xt_match *match;
 
 	if (strnlen(name, XT_EXTENSION_MAXNAMELEN) == XT_EXTENSION_MAXNAMELEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	match = xt_find_match(nfproto, name, revision);
 	if (IS_ERR(match)) {
@@ -237,15 +252,19 @@ struct xt_target *xt_find_target(u8 af, const char *name, u8 revision)
 					return t;
 				}
 			} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EPROTOTYPE; /* Found something. */
+}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&xt[af].mutex);
 
 	if (af != NFPROTO_UNSPEC)
 		/* Try searching again in the family-independent list */
 		return xt_find_target(NFPROTO_UNSPEC, name, revision);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(err);
 }
 EXPORT_SYMBOL(xt_find_target);
@@ -255,14 +274,18 @@ struct xt_target *xt_request_find_target(u8 af, const char *name, u8 revision)
 	struct xt_target *target;
 
 	if (strnlen(name, XT_EXTENSION_MAXNAMELEN) == XT_EXTENSION_MAXNAMELEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	target = xt_find_target(af, name, revision);
 	if (IS_ERR(target)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		request_module("%st_%s", xt_prefix[af], name);
 		target = xt_find_target(af, name, revision);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return target;
 }
 EXPORT_SYMBOL_GPL(xt_request_find_target);
@@ -272,6 +295,7 @@ static int xt_obj_to_user(u16 __user *psize, u16 size,
 			  void __user *pname, const char *name,
 			  u8 __user *prev, u8 rev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (put_user(size, psize))
 		return -EFAULT;
 	if (copy_to_user(pname, name, strlen(name) + 1))
@@ -290,6 +314,7 @@ static int xt_obj_to_user(u16 __user *psize, u16 size,
 int xt_data_to_user(void __user *dst, const void *src,
 		    int usersize, int size, int aligned_size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	usersize = usersize ? : size;
 	if (copy_to_user(dst, src, usersize))
 		return -EFAULT;
@@ -310,6 +335,7 @@ EXPORT_SYMBOL_GPL(xt_data_to_user);
 int xt_match_to_user(const struct xt_entry_match *m,
 		     struct xt_entry_match __user *u)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return XT_OBJ_TO_USER(u, m, match, 0) ||
 	       XT_DATA_TO_USER(u, m, match);
 }
@@ -318,6 +344,7 @@ EXPORT_SYMBOL_GPL(xt_match_to_user);
 int xt_target_to_user(const struct xt_entry_target *t,
 		      struct xt_entry_target __user *u)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return XT_OBJ_TO_USER(u, t, target, 0) ||
 	       XT_DATA_TO_USER(u, t, target);
 }
@@ -328,6 +355,7 @@ static int match_revfn(u8 af, const char *name, u8 revision, int *bestp)
 	const struct xt_match *m;
 	int have_rev = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(m, &xt[af].match, list) {
 		if (strcmp(m->name, name) == 0) {
 			if (m->revision > *bestp)
@@ -348,6 +376,7 @@ static int target_revfn(u8 af, const char *name, u8 revision, int *bestp)
 	const struct xt_target *t;
 	int have_rev = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(t, &xt[af].target, list) {
 		if (strcmp(t->name, name) == 0) {
 			if (t->revision > *bestp)
@@ -371,7 +400,9 @@ int xt_find_revision(u8 af, const char *name, u8 revision, int target,
 
 	mutex_lock(&xt[af].mutex);
 	if (target == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		have_rev = target_revfn(af, name, revision, &best);
+}
 	else
 		have_rev = match_revfn(af, name, revision, &best);
 	mutex_unlock(&xt[af].mutex);
@@ -405,6 +436,7 @@ textify_hooks(char *buf, size_t size, unsigned int mask, uint8_t nfproto)
 	bool np = false;
 	int res;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	names = (nfproto == NFPROTO_ARP) ? arp_names : inetbr_names;
 	max   = (nfproto == NFPROTO_ARP) ? ARRAY_SIZE(arp_names) :
 	                                   ARRAY_SIZE(inetbr_names);
@@ -496,26 +528,44 @@ static int xt_check_entry_match(const char *match, const char *target,
 	int length = target - match;
 
 	if (length == 0) /* no matches */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pos = (struct xt_entry_match *)match;
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((unsigned long)pos % alignment)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (length < (int)sizeof(struct xt_entry_match))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pos->u.match_size < sizeof(struct xt_entry_match))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pos->u.match_size > length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		length -= pos->u.match_size;
 		pos = ((void *)((char *)(pos) + (pos)->u.match_size));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while (length > 0);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -525,6 +575,7 @@ int xt_compat_add_offset(u_int8_t af, unsigned int offset, int delta)
 	struct xt_af *xp = &xt[af];
 
 	if (!xp->compat_tab) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!xp->number)
 			return -EINVAL;
 		xp->compat_tab = vmalloc(sizeof(struct compat_delta) * xp->number);
@@ -547,6 +598,7 @@ EXPORT_SYMBOL_GPL(xt_compat_add_offset);
 
 void xt_compat_flush_offsets(u_int8_t af)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (xt[af].compat_tab) {
 		vfree(xt[af].compat_tab);
 		xt[af].compat_tab = NULL;
@@ -561,6 +613,7 @@ int xt_compat_calc_jump(u_int8_t af, unsigned int offset)
 	struct compat_delta *tmp = xt[af].compat_tab;
 	int mid, left = 0, right = xt[af].cur - 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (left <= right) {
 		mid = (left + right) >> 1;
 		if (offset > tmp[mid].offset)
@@ -576,6 +629,7 @@ EXPORT_SYMBOL_GPL(xt_compat_calc_jump);
 
 void xt_compat_init_offsets(u_int8_t af, unsigned int number)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt[af].number = number;
 	xt[af].cur = 0;
 }
@@ -583,6 +637,7 @@ EXPORT_SYMBOL(xt_compat_init_offsets);
 
 int xt_compat_match_offset(const struct xt_match *match)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u_int16_t csize = match->compatsize ? : match->matchsize;
 	return XT_ALIGN(match->matchsize) - COMPAT_XT_ALIGN(csize);
 }
@@ -598,6 +653,7 @@ void xt_compat_match_from_user(struct xt_entry_match *m, void **dstptr,
 	char name[sizeof(m->u.user.name)];
 
 	m = *dstptr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(m, cm, sizeof(*cm));
 	if (match->compat_from_user)
 		match->compat_from_user(m->data, cm->data);
@@ -632,6 +688,7 @@ int xt_compat_match_to_user(const struct xt_entry_match *m,
 	int off = xt_compat_match_offset(match);
 	u_int16_t msize = m->u.user.match_size - off;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (XT_OBJ_TO_USER(cm, m, match, msize))
 		return -EFAULT;
 
@@ -664,7 +721,9 @@ int xt_compat_check_entry_offsets(const void *base, const char *elems,
 	const char *e = base;
 
 	if (target_offset < size_of_base_struct)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (target_offset + sizeof(*t) > next_offset)
 		return -EINVAL;
@@ -746,17 +805,25 @@ int xt_check_entry_offsets(const void *base,
 
 	/* target start is within the ip/ip6/arpt_entry struct */
 	if (target_offset < size_of_base_struct)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (target_offset + sizeof(*t) > next_offset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	t = (void *)(e + target_offset);
 	if (t->u.target_size < sizeof(*t))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (target_offset + t->u.target_size > next_offset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (strcmp(t->u.user.name, XT_STANDARD_TARGET) == 0 &&
 	    XT_ALIGN(target_offset + sizeof(struct xt_standard_target)) != next_offset)
@@ -793,6 +860,7 @@ bool xt_find_jump_offset(const unsigned int *offsets,
 {
 	int m, low = 0, hi = size;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (hi > low) {
 		m = (low + hi) / 2u;
 
@@ -814,6 +882,7 @@ int xt_check_target(struct xt_tgchk_param *par,
 	int ret;
 
 	if (XT_ALIGN(par->target->targetsize) != size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s_tables: %s.%u target: invalid size "
 		       "%u (kernel) != (user) %u\n",
 		       xt_prefix[par->family], par->target->name,
@@ -823,6 +892,7 @@ int xt_check_target(struct xt_tgchk_param *par,
 	}
 	if (par->target->table != NULL &&
 	    strcmp(par->target->table, par->table) != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s_tables: %s target: only valid in %s table, not %s\n",
 		       xt_prefix[par->family], par->target->name,
 		       par->target->table, par->table);
@@ -841,19 +911,25 @@ int xt_check_target(struct xt_tgchk_param *par,
 		return -EINVAL;
 	}
 	if (par->target->proto && (par->target->proto != proto || inv_proto)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s_tables: %s target: only valid for protocol %u\n",
 		       xt_prefix[par->family], par->target->name,
 		       par->target->proto);
 		return -EINVAL;
 	}
 	if (par->target->checkentry != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = par->target->checkentry(par);
 		if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (ret > 0)
 			/* Flag up potential errors. */
 			return -EIO;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL_GPL(xt_check_target);
@@ -891,7 +967,9 @@ void *xt_copy_counters_from_user(const void __user *user, unsigned int len,
 		struct compat_xt_counters_info compat_tmp;
 
 		if (len <= sizeof(compat_tmp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-EINVAL);
+}
 
 		len -= sizeof(compat_tmp);
 		if (copy_from_user(&compat_tmp, user, sizeof(compat_tmp)) != 0)
@@ -935,6 +1013,7 @@ EXPORT_SYMBOL_GPL(xt_copy_counters_from_user);
 #ifdef CONFIG_COMPAT
 int xt_compat_target_offset(const struct xt_target *target)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u_int16_t csize = target->compatsize ? : target->targetsize;
 	return XT_ALIGN(target->targetsize) - COMPAT_XT_ALIGN(csize);
 }
@@ -950,6 +1029,7 @@ void xt_compat_target_from_user(struct xt_entry_target *t, void **dstptr,
 	char name[sizeof(t->u.user.name)];
 
 	t = *dstptr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(t, ct, sizeof(*ct));
 	if (target->compat_from_user)
 		target->compat_from_user(t->data, ct->data);
@@ -978,6 +1058,7 @@ int xt_compat_target_to_user(const struct xt_entry_target *t,
 	int off = xt_compat_target_offset(target);
 	u_int16_t tsize = t->u.user.target_size - off;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (XT_OBJ_TO_USER(ct, t, target, tsize))
 		return -EFAULT;
 
@@ -1002,16 +1083,23 @@ struct xt_table_info *xt_alloc_table_info(unsigned int size)
 	size_t sz = sizeof(*info) + size;
 
 	if (sz < sizeof(*info))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/* Pedantry: prevent them from hitting BUG() in vmalloc.c --RR */
 	if ((size >> PAGE_SHIFT) + 2 > totalram_pages)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	info = kvmalloc(sz, GFP_KERNEL);
 	if (!info)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(info, 0, sizeof(*info));
 	info->size = size;
 	return info;
@@ -1023,6 +1111,7 @@ void xt_free_table_info(struct xt_table_info *info)
 	int cpu;
 
 	if (info->jumpstack != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_possible_cpu(cpu)
 			kvfree(info->jumpstack[cpu]);
 		kvfree(info->jumpstack);
@@ -1039,6 +1128,7 @@ struct xt_table *xt_find_table_lock(struct net *net, u_int8_t af,
 	struct xt_table *t, *found = NULL;
 
 	mutex_lock(&xt[af].mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(t, &net->xt.tables[af], list)
 		if (strcmp(t->name, name) == 0 && try_module_get(t->me))
 			return t;
@@ -1084,6 +1174,7 @@ EXPORT_SYMBOL_GPL(xt_find_table_lock);
 
 void xt_table_unlock(struct xt_table *table)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&xt[table->af].mutex);
 }
 EXPORT_SYMBOL_GPL(xt_table_unlock);
@@ -1091,12 +1182,14 @@ EXPORT_SYMBOL_GPL(xt_table_unlock);
 #ifdef CONFIG_COMPAT
 void xt_compat_lock(u_int8_t af)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&xt[af].compat_mutex);
 }
 EXPORT_SYMBOL_GPL(xt_compat_lock);
 
 void xt_compat_unlock(u_int8_t af)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&xt[af].compat_mutex);
 }
 EXPORT_SYMBOL_GPL(xt_compat_unlock);
@@ -1115,15 +1208,21 @@ static int xt_jumpstack_alloc(struct xt_table_info *i)
 
 	size = sizeof(void **) * nr_cpu_ids;
 	if (size > PAGE_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i->jumpstack = kvzalloc(size, GFP_KERNEL);
+}
 	else
 		i->jumpstack = kzalloc(size, GFP_KERNEL);
 	if (i->jumpstack == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/* ruleset without jumps -- no stack needed */
 	if (i->stacksize == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Jumpstack needs to be able to record two full callchains, one
 	 * from the first rule set traversal, plus one table reentrancy
@@ -1148,6 +1247,7 @@ static int xt_jumpstack_alloc(struct xt_table_info *i)
 			return -ENOMEM;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1162,6 +1262,7 @@ xt_replace_table(struct xt_table *table,
 
 	ret = xt_jumpstack_alloc(newinfo);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*error = ret;
 		return NULL;
 	}
@@ -1172,6 +1273,7 @@ xt_replace_table(struct xt_table *table,
 
 	/* Check inside lock: is the old number correct? */
 	if (num_counters != private->number) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("num_counters != table->private->number (%u/%u)\n",
 			 num_counters, private->number);
 		local_bh_enable();
@@ -1197,6 +1299,7 @@ xt_replace_table(struct xt_table *table,
 
 #ifdef CONFIG_AUDIT
 	if (audit_enabled) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		audit_log(current->audit_context, GFP_KERNEL,
 			  AUDIT_NETFILTER_CFG,
 			  "table=%s family=%u entries=%u",
@@ -1204,6 +1307,7 @@ xt_replace_table(struct xt_table *table,
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return private;
 }
 EXPORT_SYMBOL_GPL(xt_replace_table);
@@ -1220,6 +1324,7 @@ struct xt_table *xt_register_table(struct net *net,
 	/* Don't add one object to multiple lists. */
 	table = kmemdup(input_table, sizeof(struct xt_table), GFP_KERNEL);
 	if (!table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOMEM;
 		goto out;
 	}
@@ -1228,6 +1333,7 @@ struct xt_table *xt_register_table(struct net *net,
 	/* Don't autoload: we'd eat our tail... */
 	list_for_each_entry(t, &net->xt.tables[table->af], list) {
 		if (strcmp(t->name, table->name) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EEXIST;
 			goto unlock;
 		}
@@ -1240,6 +1346,7 @@ struct xt_table *xt_register_table(struct net *net,
 		goto unlock;
 
 	private = table->private;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("table->private->number = %u\n", private->number);
 
 	/* save number of initial entries */
@@ -1305,6 +1412,7 @@ static void xt_table_seq_stop(struct seq_file *seq, void *v)
 
 static int xt_table_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct xt_table *table = list_entry(v, struct xt_table, list);
 
 	if (*table->name)
@@ -1327,6 +1435,7 @@ static int xt_table_open(struct inode *inode, struct file *file)
 	ret = seq_open_net(inode, file, &xt_table_seq_ops,
 			   sizeof(struct xt_names_priv));
 	if (!ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		priv = ((struct seq_file *)file->private_data)->private;
 		priv->af = (unsigned long)PDE_DATA(inode);
 	}
@@ -1404,6 +1513,7 @@ static void *xt_mttg_seq_start(struct seq_file *seq, loff_t *pos,
 	unsigned int j;
 
 	trav->class = MTTG_TRAV_INIT;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (j = 0; j < *pos; ++j)
 		if (xt_mttg_seq_next(seq, NULL, NULL, is_target) == NULL)
 			return NULL;
@@ -1426,11 +1536,13 @@ static void xt_mttg_seq_stop(struct seq_file *seq, void *v)
 
 static void *xt_match_seq_start(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return xt_mttg_seq_start(seq, pos, false);
 }
 
 static void *xt_match_seq_next(struct seq_file *seq, void *v, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return xt_mttg_seq_next(seq, v, ppos, false);
 }
 
@@ -1463,7 +1575,9 @@ static int xt_match_open(struct inode *inode, struct file *file)
 	struct nf_mttg_trav *trav;
 	trav = __seq_open_private(file, &xt_match_seq_ops, sizeof(*trav));
 	if (!trav)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	trav->nfproto = (unsigned long)PDE_DATA(inode);
 	return 0;
@@ -1479,11 +1593,13 @@ static const struct file_operations xt_match_ops = {
 
 static void *xt_target_seq_start(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return xt_mttg_seq_start(seq, pos, true);
 }
 
 static void *xt_target_seq_next(struct seq_file *seq, void *v, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return xt_mttg_seq_next(seq, v, ppos, true);
 }
 
@@ -1516,7 +1632,9 @@ static int xt_target_open(struct inode *inode, struct file *file)
 	struct nf_mttg_trav *trav;
 	trav = __seq_open_private(file, &xt_target_seq_ops, sizeof(*trav));
 	if (!trav)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	trav->nfproto = (unsigned long)PDE_DATA(inode);
 	return 0;
@@ -1553,11 +1671,15 @@ xt_hook_ops_alloc(const struct xt_table *table, nf_hookfn *fn)
 	struct nf_hook_ops *ops;
 
 	if (!num_hooks)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	ops = kcalloc(num_hooks, sizeof(*ops), GFP_KERNEL);
 	if (ops == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	for (i = 0, hooknum = 0; i < num_hooks && hook_mask != 0;
 	     hook_mask >>= 1, ++hooknum) {
@@ -1570,6 +1692,7 @@ xt_hook_ops_alloc(const struct xt_table *table, nf_hookfn *fn)
 		++i;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ops;
 }
 EXPORT_SYMBOL_GPL(xt_hook_ops_alloc);
@@ -1584,7 +1707,9 @@ int xt_proto_init(struct net *net, u_int8_t af)
 #endif
 
 	if (af >= ARRAY_SIZE(xt_prefix))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 
 #ifdef CONFIG_PROC_FS
@@ -1600,6 +1725,7 @@ int xt_proto_init(struct net *net, u_int8_t af)
 	if (uid_valid(root_uid) && gid_valid(root_gid))
 		proc_set_user(proc, root_uid, root_gid);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	strlcpy(buf, xt_prefix[af], sizeof(buf));
 	strlcat(buf, FORMAT_MATCHES, sizeof(buf));
 	proc = proc_create_data(buf, 0440, net->proc_net, &xt_match_ops,
@@ -1609,6 +1735,7 @@ int xt_proto_init(struct net *net, u_int8_t af)
 	if (uid_valid(root_uid) && gid_valid(root_gid))
 		proc_set_user(proc, root_uid, root_gid);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	strlcpy(buf, xt_prefix[af], sizeof(buf));
 	strlcat(buf, FORMAT_TARGETS, sizeof(buf));
 	proc = proc_create_data(buf, 0440, net->proc_net, &xt_target_ops,
@@ -1619,6 +1746,7 @@ int xt_proto_init(struct net *net, u_int8_t af)
 		proc_set_user(proc, root_uid, root_gid);
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 #ifdef CONFIG_PROC_FS
@@ -1680,23 +1808,33 @@ EXPORT_SYMBOL_GPL(xt_proto_fini);
 bool xt_percpu_counter_alloc(struct xt_percpu_counter_alloc_state *state,
 			     struct xt_counters *counter)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(XT_PCPU_BLOCK_SIZE < (sizeof(*counter) * 2));
 
 	if (nr_cpu_ids <= 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!state->mem) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		state->mem = __alloc_percpu(XT_PCPU_BLOCK_SIZE,
 					    XT_PCPU_BLOCK_SIZE);
 		if (!state->mem)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	counter->pcnt = (__force unsigned long)(state->mem + state->off);
 	state->off += sizeof(*counter);
 	if (state->off > (XT_PCPU_BLOCK_SIZE - sizeof(*counter))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		state->mem = NULL;
 		state->off = 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 EXPORT_SYMBOL_GPL(xt_percpu_counter_alloc);
@@ -1705,6 +1843,7 @@ void xt_percpu_counter_free(struct xt_counters *counters)
 {
 	unsigned long pcnt = counters->pcnt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nr_cpu_ids > 1 && (pcnt & (XT_PCPU_BLOCK_SIZE - 1)) == 0)
 		free_percpu((void __percpu *)pcnt);
 }
@@ -1734,7 +1873,9 @@ static int __init xt_init(void)
 
 	xt = kmalloc(sizeof(struct xt_af) * NFPROTO_NUMPROTO, GFP_KERNEL);
 	if (!xt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	for (i = 0; i < NFPROTO_NUMPROTO; i++) {
 		mutex_init(&xt[i].mutex);
@@ -1747,12 +1888,16 @@ static int __init xt_init(void)
 	}
 	rv = register_pernet_subsys(&xt_net_ops);
 	if (rv < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(xt);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rv;
 }
 
 static void __exit xt_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_pernet_subsys(&xt_net_ops);
 	kfree(xt);
 }
diff --git a/net/netfilter/xt_CHECKSUM.c b/net/netfilter/xt_CHECKSUM.c
index 0f642ef..e9dd0c3 100644
--- a/net/netfilter/xt_CHECKSUM.c
+++ b/net/netfilter/xt_CHECKSUM.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* iptables module for the packet checksum mangling
  *
  * (C) 2002 by Harald Welte <laforge@netfilter.org>
diff --git a/net/netfilter/xt_CLASSIFY.c b/net/netfilter/xt_CLASSIFY.c
index af9c4da..5447514 100644
--- a/net/netfilter/xt_CLASSIFY.c
+++ b/net/netfilter/xt_CLASSIFY.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * This is a module which is used for setting the skb->priority field
  * of an skb for qdisc classification.
diff --git a/net/netfilter/xt_CT.c b/net/netfilter/xt_CT.c
index 5a152e2..3b0c2da 100644
--- a/net/netfilter/xt_CT.c
+++ b/net/netfilter/xt_CT.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2010 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/xt_DSCP.c b/net/netfilter/xt_DSCP.c
index 3f83d38..7f2a3a2 100644
--- a/net/netfilter/xt_DSCP.c
+++ b/net/netfilter/xt_DSCP.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* x_tables module for setting the IPv4/IPv6 DSCP field, Version 1.8
  *
  * (C) 2002 by Harald Welte <laforge@netfilter.org>
diff --git a/net/netfilter/xt_HL.c b/net/netfilter/xt_HL.c
index 1535e87..3b0dc48 100644
--- a/net/netfilter/xt_HL.c
+++ b/net/netfilter/xt_HL.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * TTL modification target for IP tables
  * (C) 2000,2005 by Harald Welte <laforge@netfilter.org>
diff --git a/net/netfilter/xt_HMARK.c b/net/netfilter/xt_HMARK.c
index 60e6dbe..948ffd1 100644
--- a/net/netfilter/xt_HMARK.c
+++ b/net/netfilter/xt_HMARK.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * xt_HMARK - Netfilter module to set mark by means of hashing
  *
diff --git a/net/netfilter/xt_IDLETIMER.c b/net/netfilter/xt_IDLETIMER.c
index daf45da..d404747 100644
--- a/net/netfilter/xt_IDLETIMER.c
+++ b/net/netfilter/xt_IDLETIMER.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/net/netfilter/xt_IDLETIMER.c
  *
diff --git a/net/netfilter/xt_LOG.c b/net/netfilter/xt_LOG.c
index c3b2017e..1c5dffe 100644
--- a/net/netfilter/xt_LOG.c
+++ b/net/netfilter/xt_LOG.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * This is a module which is used for logging packets.
  */
@@ -48,6 +50,7 @@ static int log_tg_check(const struct xt_tgchk_param *par)
 {
 	const struct xt_log_info *loginfo = par->targinfo;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (par->family != NFPROTO_IPV4 && par->family != NFPROTO_IPV6)
 		return -EINVAL;
 
@@ -66,6 +69,7 @@ static int log_tg_check(const struct xt_tgchk_param *par)
 
 static void log_tg_destroy(const struct xt_tgdtor_param *par)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_logger_put(par->family, NF_LOG_TYPE_LOG);
 }
 
@@ -99,6 +103,7 @@ static int __init log_tg_init(void)
 
 static void __exit log_tg_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_targets(log_tg_regs, ARRAY_SIZE(log_tg_regs));
 }
 
diff --git a/net/netfilter/xt_NETMAP.c b/net/netfilter/xt_NETMAP.c
index 58aa9dd..2c8b8fc 100644
--- a/net/netfilter/xt_NETMAP.c
+++ b/net/netfilter/xt_NETMAP.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2000-2001 Svenning Soerensen <svenning@post5.tele.dk>
  * Copyright (c) 2011 Patrick McHardy <kaber@trash.net>
diff --git a/net/netfilter/xt_NFLOG.c b/net/netfilter/xt_NFLOG.c
index c7f8958..4d71578 100644
--- a/net/netfilter/xt_NFLOG.c
+++ b/net/netfilter/xt_NFLOG.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2006 Patrick McHardy <kaber@trash.net>
  *
@@ -35,7 +37,9 @@ nflog_tg(struct sk_buff *skb, const struct xt_action_param *par)
 	li.u.ulog.flags	     = 0;
 
 	if (info->flags & XT_NFLOG_F_COPY_LEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		li.u.ulog.flags |= NF_LOG_F_COPY_LEN;
+}
 
 	nfulnl_log_packet(net, xt_family(par), xt_hooknum(par), skb,
 			  xt_in(par), xt_out(par), &li, info->prefix);
@@ -47,7 +51,9 @@ static int nflog_tg_check(const struct xt_tgchk_param *par)
 	const struct xt_nflog_info *info = par->targinfo;
 
 	if (info->flags & ~XT_NFLOG_MASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (info->prefix[sizeof(info->prefix) - 1] != '\0')
 		return -EINVAL;
 	return 0;
@@ -70,6 +76,7 @@ static int __init nflog_tg_init(void)
 
 static void __exit nflog_tg_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_target(&nflog_tg_reg);
 }
 
diff --git a/net/netfilter/xt_NFQUEUE.c b/net/netfilter/xt_NFQUEUE.c
index a360b99..680fc6e 100644
--- a/net/netfilter/xt_NFQUEUE.c
+++ b/net/netfilter/xt_NFQUEUE.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* iptables module for using new netfilter netlink queue
  *
  * (C) 2005 by Harald Welte <laforge@netfilter.org>
diff --git a/net/netfilter/xt_RATEEST.c b/net/netfilter/xt_RATEEST.c
index 141c295..bdb5a9a 100644
--- a/net/netfilter/xt_RATEEST.c
+++ b/net/netfilter/xt_RATEEST.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2007 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/xt_REDIRECT.c b/net/netfilter/xt_REDIRECT.c
index 98a4c6d..b2b5342 100644
--- a/net/netfilter/xt_REDIRECT.c
+++ b/net/netfilter/xt_REDIRECT.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2006 Netfilter Core Team <coreteam@netfilter.org>
diff --git a/net/netfilter/xt_TCPMSS.c b/net/netfilter/xt_TCPMSS.c
index 9dae4d6..85aad81 100644
--- a/net/netfilter/xt_TCPMSS.c
+++ b/net/netfilter/xt_TCPMSS.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * This is a module which is used for setting the MSS option in TCP packets.
  *
@@ -62,6 +64,7 @@ static u_int32_t tcpmss_reverse_mtu(struct net *net,
 		memset(fl6, 0, sizeof(*fl6));
 		fl6->daddr = ipv6_hdr(skb)->saddr;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ai = nf_get_afinfo(family);
 	if (ai != NULL)
 		ai->route(net, (struct dst_entry **)&rt, &fl, false);
@@ -90,7 +93,9 @@ tcpmss_mangle_packet(struct sk_buff *skb,
 
 	/* This is a fragment, no TCP header is available */
 	if (par->fragoff != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!skb_make_writable(skb, skb->len))
 		return -1;
@@ -346,6 +351,7 @@ static int __init tcpmss_tg_init(void)
 
 static void __exit tcpmss_tg_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_targets(tcpmss_tg_reg, ARRAY_SIZE(tcpmss_tg_reg));
 }
 
diff --git a/net/netfilter/xt_TCPOPTSTRIP.c b/net/netfilter/xt_TCPOPTSTRIP.c
index eb92bff..c814a82 100644
--- a/net/netfilter/xt_TCPOPTSTRIP.c
+++ b/net/netfilter/xt_TCPOPTSTRIP.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * A module for stripping a specific TCP option from TCP packets.
  *
diff --git a/net/netfilter/xt_TEE.c b/net/netfilter/xt_TEE.c
index 86b0580..a2ac8f3 100644
--- a/net/netfilter/xt_TEE.c
+++ b/net/netfilter/xt_TEE.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	"TEE" target extension for Xtables
  *	Copyright © Sebastian Claßen, 2007
diff --git a/net/netfilter/xt_TPROXY.c b/net/netfilter/xt_TPROXY.c
index 17d7705..b8d4701 100644
--- a/net/netfilter/xt_TPROXY.c
+++ b/net/netfilter/xt_TPROXY.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Transparent proxy support for Linux/iptables
  *
diff --git a/net/netfilter/xt_TRACE.c b/net/netfilter/xt_TRACE.c
index 858d189..34113ab 100644
--- a/net/netfilter/xt_TRACE.c
+++ b/net/netfilter/xt_TRACE.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* This is a module which is used to mark packets for tracing.
  */
 #include <linux/module.h>
diff --git a/net/netfilter/xt_addrtype.c b/net/netfilter/xt_addrtype.c
index 3b2be2a..6a3b408 100644
--- a/net/netfilter/xt_addrtype.c
+++ b/net/netfilter/xt_addrtype.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  iptables module to match inet_addr_type() of an ip.
  *
@@ -45,7 +47,9 @@ static u32 match_lookup_rt6(struct net *net, const struct net_device *dev,
 	memset(&flow, 0, sizeof(flow));
 	flow.daddr = *addr;
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flow.flowi6_oif = dev->ifindex;
+}
 
 	afinfo = nf_get_afinfo(NFPROTO_IPV6);
 	if (afinfo != NULL) {
@@ -80,6 +84,7 @@ static u32 match_lookup_rt6(struct net *net, const struct net_device *dev,
 static bool match_type6(struct net *net, const struct net_device *dev,
 				const struct in6_addr *addr, u16 mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int addr_type = ipv6_addr_type(addr);
 
 	if ((mask & XT_ADDRTYPE_MULTICAST) &&
@@ -100,6 +105,7 @@ static bool
 addrtype_mt6(struct net *net, const struct net_device *dev,
 	const struct sk_buff *skb, const struct xt_addrtype_info_v1 *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct ipv6hdr *iph = ipv6_hdr(skb);
 	bool ret = true;
 
@@ -116,12 +122,14 @@ addrtype_mt6(struct net *net, const struct net_device *dev,
 static inline bool match_type(struct net *net, const struct net_device *dev,
 			      __be32 addr, u_int16_t mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !!(mask & (1 << inet_dev_addr_type(net, dev, addr)));
 }
 
 static bool
 addrtype_mt_v0(const struct sk_buff *skb, struct xt_action_param *par)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xt_net(par);
 	const struct xt_addrtype_info *info = par->matchinfo;
 	const struct iphdr *iph = ip_hdr(skb);
@@ -140,6 +148,7 @@ addrtype_mt_v0(const struct sk_buff *skb, struct xt_action_param *par)
 static bool
 addrtype_mt_v1(const struct sk_buff *skb, struct xt_action_param *par)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xt_net(par);
 	const struct xt_addrtype_info_v1 *info = par->matchinfo;
 	const struct iphdr *iph;
@@ -238,6 +247,7 @@ static int __init addrtype_mt_init(void)
 
 static void __exit addrtype_mt_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_matches(addrtype_mt_reg, ARRAY_SIZE(addrtype_mt_reg));
 }
 
diff --git a/net/netfilter/xt_bpf.c b/net/netfilter/xt_bpf.c
index 5185ff0..3be3222 100644
--- a/net/netfilter/xt_bpf.c
+++ b/net/netfilter/xt_bpf.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Xtables module to match packets using a BPF filter.
  * Copyright 2013 Google Inc.
  * Written by Willem de Bruijn <willemb@google.com>
diff --git a/net/netfilter/xt_cgroup.c b/net/netfilter/xt_cgroup.c
index 891f4e7..71892ed 100644
--- a/net/netfilter/xt_cgroup.c
+++ b/net/netfilter/xt_cgroup.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Xtables module to match the process control group.
  *
diff --git a/net/netfilter/xt_cluster.c b/net/netfilter/xt_cluster.c
index 57ef175..71068fc 100644
--- a/net/netfilter/xt_cluster.c
+++ b/net/netfilter/xt_cluster.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2008-2009 Pablo Neira Ayuso <pablo@netfilter.org>
  *
diff --git a/net/netfilter/xt_comment.c b/net/netfilter/xt_comment.c
index 5c861d2..2419965 100644
--- a/net/netfilter/xt_comment.c
+++ b/net/netfilter/xt_comment.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Implements a dummy match to allow attaching comments to rules
  *
diff --git a/net/netfilter/xt_connbytes.c b/net/netfilter/xt_connbytes.c
index cad0b7b..76e8d0d 100644
--- a/net/netfilter/xt_connbytes.c
+++ b/net/netfilter/xt_connbytes.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match connection tracking byte counter.
  * GPL (C) 2002 Martin Devera (devik@cdi.cz).
  */
diff --git a/net/netfilter/xt_connlabel.c b/net/netfilter/xt_connlabel.c
index 2337287..ad62f20 100644
--- a/net/netfilter/xt_connlabel.c
+++ b/net/netfilter/xt_connlabel.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2013 Astaro GmbH & Co KG
  *
diff --git a/net/netfilter/xt_connlimit.c b/net/netfilter/xt_connlimit.c
index ffa8eec..fac2abd 100644
--- a/net/netfilter/xt_connlimit.c
+++ b/net/netfilter/xt_connlimit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * netfilter module to limit the number of parallel tcp
  * connections per IP address.
diff --git a/net/netfilter/xt_connmark.c b/net/netfilter/xt_connmark.c
index ec377cc..e8ef113 100644
--- a/net/netfilter/xt_connmark.c
+++ b/net/netfilter/xt_connmark.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	xt_connmark - Netfilter module to operate on connection marks
  *
diff --git a/net/netfilter/xt_conntrack.c b/net/netfilter/xt_conntrack.c
index 39cf1d0..ebda6f9 100644
--- a/net/netfilter/xt_conntrack.c
+++ b/net/netfilter/xt_conntrack.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	xt_conntrack - Netfilter module to match connection tracking
  *	information. (Superset of Rusty's minimalistic state match.)
@@ -30,6 +32,7 @@ conntrack_addrcmp(const union nf_inet_addr *kaddr,
                   const union nf_inet_addr *uaddr,
                   const union nf_inet_addr *umask, unsigned int l3proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (l3proto == NFPROTO_IPV4)
 		return ((kaddr->ip ^ uaddr->ip) & umask->ip) == 0;
 	else if (l3proto == NFPROTO_IPV6)
@@ -44,6 +47,7 @@ conntrack_mt_origsrc(const struct nf_conn *ct,
                      const struct xt_conntrack_mtinfo2 *info,
 		     u_int8_t family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return conntrack_addrcmp(&ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3,
 	       &info->origsrc_addr, &info->origsrc_mask, family);
 }
@@ -53,6 +57,7 @@ conntrack_mt_origdst(const struct nf_conn *ct,
                      const struct xt_conntrack_mtinfo2 *info,
 		     u_int8_t family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return conntrack_addrcmp(&ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u3,
 	       &info->origdst_addr, &info->origdst_mask, family);
 }
@@ -62,6 +67,7 @@ conntrack_mt_replsrc(const struct nf_conn *ct,
                      const struct xt_conntrack_mtinfo2 *info,
 		     u_int8_t family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return conntrack_addrcmp(&ct->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3,
 	       &info->replsrc_addr, &info->replsrc_mask, family);
 }
@@ -71,6 +77,7 @@ conntrack_mt_repldst(const struct nf_conn *ct,
                      const struct xt_conntrack_mtinfo2 *info,
 		     u_int8_t family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return conntrack_addrcmp(&ct->tuplehash[IP_CT_DIR_REPLY].tuple.dst.u3,
 	       &info->repldst_addr, &info->repldst_mask, family);
 }
@@ -116,6 +123,7 @@ ct_proto_port_check(const struct xt_conntrack_mtinfo2 *info,
 static inline bool
 port_match(u16 min, u16 max, u16 port, bool invert)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (port >= min && port <= max) ^ invert;
 }
 
@@ -173,7 +181,9 @@ conntrack_mt(const struct sk_buff *skb, struct xt_action_param *par,
 	ct = nf_ct_get(skb, &ctinfo);
 
 	if (ct)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		statebit = XT_CONNTRACK_STATE_BIT(ctinfo);
+}
 	else if (ctinfo == IP_CT_UNTRACKED)
 		statebit = XT_CONNTRACK_STATE_UNTRACKED;
 	else
@@ -272,13 +282,16 @@ static int conntrack_mt_check(const struct xt_mtchk_param *par)
 
 	ret = nf_ct_netns_get(par->net, par->family);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("cannot load conntrack support for proto=%u\n",
 			par->family);
+}
 	return ret;
 }
 
 static void conntrack_mt_destroy(const struct xt_mtdtor_param *par)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_ct_netns_put(par->net, par->family);
 }
 
@@ -323,6 +336,7 @@ static int __init conntrack_mt_init(void)
 
 static void __exit conntrack_mt_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_matches(conntrack_mt_reg, ARRAY_SIZE(conntrack_mt_reg));
 }
 
diff --git a/net/netfilter/xt_cpu.c b/net/netfilter/xt_cpu.c
index c7a2e54..d5e0b55 100644
--- a/net/netfilter/xt_cpu.c
+++ b/net/netfilter/xt_cpu.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match running CPU */
 
 /*
diff --git a/net/netfilter/xt_dccp.c b/net/netfilter/xt_dccp.c
index b63d2a3..6647eb0 100644
--- a/net/netfilter/xt_dccp.c
+++ b/net/netfilter/xt_dccp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * iptables module for DCCP protocol header matching
  *
diff --git a/net/netfilter/xt_devgroup.c b/net/netfilter/xt_devgroup.c
index 96ebe1c..7351891 100644
--- a/net/netfilter/xt_devgroup.c
+++ b/net/netfilter/xt_devgroup.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2011 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/xt_dscp.c b/net/netfilter/xt_dscp.c
index 236ac80..a376773 100644
--- a/net/netfilter/xt_dscp.c
+++ b/net/netfilter/xt_dscp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* IP tables module for matching the value of the IPv4/IPv6 DSCP field
  *
  * (C) 2002 by Harald Welte <laforge@netfilter.org>
diff --git a/net/netfilter/xt_ecn.c b/net/netfilter/xt_ecn.c
index 3c831a8..4a309e7 100644
--- a/net/netfilter/xt_ecn.c
+++ b/net/netfilter/xt_ecn.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Xtables module for matching the value of the IPv4/IPv6 and TCP ECN bits
  *
diff --git a/net/netfilter/xt_esp.c b/net/netfilter/xt_esp.c
index 171ba82..f2e077f 100644
--- a/net/netfilter/xt_esp.c
+++ b/net/netfilter/xt_esp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match ESP parameters. */
 
 /* (C) 1999-2000 Yon Uriarte <yon@astaro.de>
diff --git a/net/netfilter/xt_hashlimit.c b/net/netfilter/xt_hashlimit.c
index 5da8746..a46c456 100644
--- a/net/netfilter/xt_hashlimit.c
+++ b/net/netfilter/xt_hashlimit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	xt_hashlimit - Netfilter module to limit the number of packets per time
  *	separately for each hashbucket (sourceip/sourceport/dstip/dstport)
diff --git a/net/netfilter/xt_helper.c b/net/netfilter/xt_helper.c
index 38a7815..7bb487b 100644
--- a/net/netfilter/xt_helper.c
+++ b/net/netfilter/xt_helper.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* iptables module to match on related connections */
 /*
  * (C) 2001 Martin Josefsson <gandalf@wlug.westbo.se>
diff --git a/net/netfilter/xt_hl.c b/net/netfilter/xt_hl.c
index 0039511..2deba7f 100644
--- a/net/netfilter/xt_hl.c
+++ b/net/netfilter/xt_hl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * IP tables module for matching the value of the TTL
  * (C) 2000,2001 by Harald Welte <laforge@netfilter.org>
diff --git a/net/netfilter/xt_ipcomp.c b/net/netfilter/xt_ipcomp.c
index 000e703..bea7e55 100644
--- a/net/netfilter/xt_ipcomp.c
+++ b/net/netfilter/xt_ipcomp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*  Kernel module to match IPComp parameters for IPv4 and IPv6
  *
  *  Copyright (C) 2013 WindRiver
diff --git a/net/netfilter/xt_iprange.c b/net/netfilter/xt_iprange.c
index b46626c..ed08e01 100644
--- a/net/netfilter/xt_iprange.c
+++ b/net/netfilter/xt_iprange.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	xt_iprange - Netfilter module to match IP address ranges
  *
diff --git a/net/netfilter/xt_ipvs.c b/net/netfilter/xt_ipvs.c
index 42540d2..ee0383a 100644
--- a/net/netfilter/xt_ipvs.c
+++ b/net/netfilter/xt_ipvs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	xt_ipvs - kernel module to match IPVS connection properties
  *
diff --git a/net/netfilter/xt_l2tp.c b/net/netfilter/xt_l2tp.c
index 8aee572..427930f 100644
--- a/net/netfilter/xt_l2tp.c
+++ b/net/netfilter/xt_l2tp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match L2TP header parameters. */
 
 /* (C) 2013      James Chapman <jchapman@katalix.com>
diff --git a/net/netfilter/xt_length.c b/net/netfilter/xt_length.c
index 176e557..d79438b 100644
--- a/net/netfilter/xt_length.c
+++ b/net/netfilter/xt_length.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match packet length. */
 /* (C) 1999-2001 James Morris <jmorros@intercode.com.au>
  *
diff --git a/net/netfilter/xt_limit.c b/net/netfilter/xt_limit.c
index d27b5f1..d477e210 100644
--- a/net/netfilter/xt_limit.c
+++ b/net/netfilter/xt_limit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999 Jérôme de Vivie <devivie@info.enserb.u-bordeaux.fr>
  * (C) 1999 Hervé Eychenne <eychenne@info.enserb.u-bordeaux.fr>
  * (C) 2006-2012 Patrick McHardy <kaber@trash.net>
diff --git a/net/netfilter/xt_mac.c b/net/netfilter/xt_mac.c
index d5b4fd4..0fba27a 100644
--- a/net/netfilter/xt_mac.c
+++ b/net/netfilter/xt_mac.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match MAC address parameters. */
 
 /* (C) 1999-2001 Paul `Rusty' Russell
diff --git a/net/netfilter/xt_mark.c b/net/netfilter/xt_mark.c
index ebd41dc..66149c1 100644
--- a/net/netfilter/xt_mark.c
+++ b/net/netfilter/xt_mark.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	xt_mark - Netfilter module to match NFMARK value
  *
@@ -66,17 +68,22 @@ static int __init mark_mt_init(void)
 
 	ret = xt_register_target(&mark_tg_reg);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	ret = xt_register_match(&mark_mt_reg);
 	if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xt_unregister_target(&mark_tg_reg);
 		return ret;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void __exit mark_mt_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_match(&mark_mt_reg);
 	xt_unregister_target(&mark_tg_reg);
 }
diff --git a/net/netfilter/xt_multiport.c b/net/netfilter/xt_multiport.c
index 1cde0e4..9d6088e 100644
--- a/net/netfilter/xt_multiport.c
+++ b/net/netfilter/xt_multiport.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match one of a list of TCP/UDP(-Lite)/SCTP/DCCP ports:
    ports are in the same place so we can treat them as equal. */
 
diff --git a/net/netfilter/xt_nat.c b/net/netfilter/xt_nat.c
index 0fd14d1..4680852 100644
--- a/net/netfilter/xt_nat.c
+++ b/net/netfilter/xt_nat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 1999-2001 Paul `Rusty' Russell
  * (C) 2002-2006 Netfilter Core Team <coreteam@netfilter.org>
@@ -19,6 +21,7 @@ static int xt_nat_checkentry_v0(const struct xt_tgchk_param *par)
 	const struct nf_nat_ipv4_multi_range_compat *mr = par->targinfo;
 
 	if (mr->rangesize != 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("%s: multiple ranges no longer supported\n",
 			par->target->name);
 		return -EINVAL;
@@ -28,17 +31,20 @@ static int xt_nat_checkentry_v0(const struct xt_tgchk_param *par)
 
 static int xt_nat_checkentry(const struct xt_tgchk_param *par)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nf_ct_netns_get(par->net, par->family);
 }
 
 static void xt_nat_destroy(const struct xt_tgdtor_param *par)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_ct_netns_put(par->net, par->family);
 }
 
 static void xt_nat_convert_range(struct nf_nat_range *dst,
 				 const struct nf_nat_ipv4_range *src)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(&dst->min_addr, 0, sizeof(dst->min_addr));
 	memset(&dst->max_addr, 0, sizeof(dst->max_addr));
 
@@ -58,6 +64,7 @@ xt_snat_target_v0(struct sk_buff *skb, const struct xt_action_param *par)
 	struct nf_conn *ct;
 
 	ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!(ct != NULL &&
 		 (ctinfo == IP_CT_NEW || ctinfo == IP_CT_RELATED ||
 		  ctinfo == IP_CT_RELATED_REPLY)));
@@ -75,6 +82,7 @@ xt_dnat_target_v0(struct sk_buff *skb, const struct xt_action_param *par)
 	struct nf_conn *ct;
 
 	ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!(ct != NULL &&
 		 (ctinfo == IP_CT_NEW || ctinfo == IP_CT_RELATED)));
 
@@ -90,6 +98,7 @@ xt_snat_target_v1(struct sk_buff *skb, const struct xt_action_param *par)
 	struct nf_conn *ct;
 
 	ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!(ct != NULL &&
 		 (ctinfo == IP_CT_NEW || ctinfo == IP_CT_RELATED ||
 		  ctinfo == IP_CT_RELATED_REPLY)));
@@ -105,6 +114,7 @@ xt_dnat_target_v1(struct sk_buff *skb, const struct xt_action_param *par)
 	struct nf_conn *ct;
 
 	ct = nf_ct_get(skb, &ctinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!(ct != NULL &&
 		 (ctinfo == IP_CT_NEW || ctinfo == IP_CT_RELATED)));
 
@@ -172,6 +182,7 @@ static int __init xt_nat_init(void)
 
 static void __exit xt_nat_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_targets(xt_nat_target_reg, ARRAY_SIZE(xt_nat_target_reg));
 }
 
diff --git a/net/netfilter/xt_nfacct.c b/net/netfilter/xt_nfacct.c
index cc0518f..cf76e5f 100644
--- a/net/netfilter/xt_nfacct.c
+++ b/net/netfilter/xt_nfacct.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2011 Pablo Neira Ayuso <pablo@netfilter.org>
  * (C) 2011 Intra2net AG <http://www.intra2net.com>
diff --git a/net/netfilter/xt_osf.c b/net/netfilter/xt_osf.c
index a34f314..65a0ff9 100644
--- a/net/netfilter/xt_osf.c
+++ b/net/netfilter/xt_osf.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2003+ Evgeniy Polyakov <zbr@ioremap.net>
  *
diff --git a/net/netfilter/xt_owner.c b/net/netfilter/xt_owner.c
index 3d705c6..a850d18 100644
--- a/net/netfilter/xt_owner.c
+++ b/net/netfilter/xt_owner.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Kernel module to match various things tied to sockets associated with
  * locally generated outgoing packets.
diff --git a/net/netfilter/xt_physdev.c b/net/netfilter/xt_physdev.c
index bb33598..fd4869f 100644
--- a/net/netfilter/xt_physdev.c
+++ b/net/netfilter/xt_physdev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match the bridge port in and
  * out device for IP packets coming into contact with a bridge. */
 
diff --git a/net/netfilter/xt_pkttype.c b/net/netfilter/xt_pkttype.c
index 1ef9915..55bc22d 100644
--- a/net/netfilter/xt_pkttype.c
+++ b/net/netfilter/xt_pkttype.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* (C) 1999-2001 Michal Ludvig <michal@logix.cz>
  *
  * This program is free software; you can redistribute it and/or modify
diff --git a/net/netfilter/xt_policy.c b/net/netfilter/xt_policy.c
index 2b4ab18..aeedb3e 100644
--- a/net/netfilter/xt_policy.c
+++ b/net/netfilter/xt_policy.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* IP tables module for matching IPsec policy
  *
  * Copyright (c) 2004,2005 Patrick McHardy, <kaber@trash.net>
@@ -25,6 +27,7 @@ static inline bool
 xt_addr_cmp(const union nf_inet_addr *a1, const union nf_inet_addr *m,
 	    const union nf_inet_addr *a2, unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (family) {
 	case NFPROTO_IPV4:
 		return ((a1->ip ^ a2->ip) & m->ip) == 0;
@@ -43,6 +46,7 @@ match_xfrm_state(const struct xfrm_state *x, const struct xt_policy_elem *e,
 				  ^ e->invert.x))
 #define MATCH(x,y)		(!e->match.x || ((e->x == (y)) ^ e->invert.x))
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return MATCH_ADDR(saddr, smask, &x->props.saddr) &&
 	       MATCH_ADDR(daddr, dmask, &x->id.daddr) &&
 	       MATCH(proto, x->id.proto) &&
@@ -61,7 +65,9 @@ match_policy_in(const struct sk_buff *skb, const struct xt_policy_info *info,
 	int i, pos;
 
 	if (sp == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 	if (strict && info->len != sp->len)
 		return 0;
 
@@ -91,7 +97,9 @@ match_policy_out(const struct sk_buff *skb, const struct xt_policy_info *info,
 	int i, pos;
 
 	if (dst->xfrm == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	for (i = 0; dst && dst->xfrm; dst = dst->child, i++) {
 		pos = strict ? i : 0;
@@ -116,7 +124,9 @@ policy_mt(const struct sk_buff *skb, struct xt_action_param *par)
 	int ret;
 
 	if (info->flags & XT_POLICY_MATCH_IN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = match_policy_in(skb, info, xt_family(par));
+}
 	else
 		ret = match_policy_out(skb, info, xt_family(par));
 
@@ -133,6 +143,7 @@ static int policy_mt_check(const struct xt_mtchk_param *par)
 	const struct xt_policy_info *info = par->matchinfo;
 
 	if (!(info->flags & (XT_POLICY_MATCH_IN|XT_POLICY_MATCH_OUT))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("neither incoming nor outgoing policy selected\n");
 		return -EINVAL;
 	}
@@ -179,6 +190,7 @@ static int __init policy_mt_init(void)
 
 static void __exit policy_mt_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_matches(policy_mt_reg, ARRAY_SIZE(policy_mt_reg));
 }
 
diff --git a/net/netfilter/xt_quota.c b/net/netfilter/xt_quota.c
index 10d61a6..cff5cfc 100644
--- a/net/netfilter/xt_quota.c
+++ b/net/netfilter/xt_quota.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * netfilter module to enforce network quotas
  *
diff --git a/net/netfilter/xt_rateest.c b/net/netfilter/xt_rateest.c
index 755d2f6..667e48a 100644
--- a/net/netfilter/xt_rateest.c
+++ b/net/netfilter/xt_rateest.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 2007 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/xt_realm.c b/net/netfilter/xt_realm.c
index 459a7b2..f843d22 100644
--- a/net/netfilter/xt_realm.c
+++ b/net/netfilter/xt_realm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* IP tables module for matching the routing realm
  *
  * (C) 2003 by Sampsa Ranta <sampsa@netsonic.fi>
diff --git a/net/netfilter/xt_recent.c b/net/netfilter/xt_recent.c
index 245fa35..f3fb1a4 100644
--- a/net/netfilter/xt_recent.c
+++ b/net/netfilter/xt_recent.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2006 Patrick McHardy <kaber@trash.net>
  * Copyright © CC Computer Consultants GmbH, 2007 - 2008
diff --git a/net/netfilter/xt_sctp.c b/net/netfilter/xt_sctp.c
index 2d2fa1d..5f0145d 100644
--- a/net/netfilter/xt_sctp.c
+++ b/net/netfilter/xt_sctp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 #include <linux/module.h>
 #include <linux/skbuff.h>
diff --git a/net/netfilter/xt_set.c b/net/netfilter/xt_set.c
index 6428570..dc4341b 100644
--- a/net/netfilter/xt_set.c
+++ b/net/netfilter/xt_set.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Copyright (C) 2000-2002 Joakim Axelsson <gozem@linux.nu>
  *                         Patrick Schaaf <bof@bof.de>
  *                         Martin Josefsson <gandalf@wlug.westbo.se>
diff --git a/net/netfilter/xt_state.c b/net/netfilter/xt_state.c
index 5fbd791..9d19913 100644
--- a/net/netfilter/xt_state.c
+++ b/net/netfilter/xt_state.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match connection tracking information. */
 
 /* (C) 1999-2001 Paul `Rusty' Russell
@@ -29,7 +31,9 @@ state_mt(const struct sk_buff *skb, struct xt_action_param *par)
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
 
 	if (ct)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		statebit = XT_STATE_BIT(ctinfo);
+}
 	else if (ctinfo == IP_CT_UNTRACKED)
 		statebit = XT_STATE_UNTRACKED;
 	else
@@ -44,13 +48,16 @@ static int state_mt_check(const struct xt_mtchk_param *par)
 
 	ret = nf_ct_netns_get(par->net, par->family);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("cannot load conntrack support for proto=%u\n",
 			par->family);
+}
 	return ret;
 }
 
 static void state_mt_destroy(const struct xt_mtdtor_param *par)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nf_ct_netns_put(par->net, par->family);
 }
 
@@ -71,6 +78,7 @@ static int __init state_mt_init(void)
 
 static void __exit state_mt_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_match(&state_mt_reg);
 }
 
diff --git a/net/netfilter/xt_statistic.c b/net/netfilter/xt_statistic.c
index 11de55e..32a51c4 100644
--- a/net/netfilter/xt_statistic.c
+++ b/net/netfilter/xt_statistic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2006 Patrick McHardy <kaber@trash.net>
  *
diff --git a/net/netfilter/xt_string.c b/net/netfilter/xt_string.c
index 423293e..f3bdf7b 100644
--- a/net/netfilter/xt_string.c
+++ b/net/netfilter/xt_string.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* String matching match for iptables
  *
  * (C) 2005 Pablo Neira Ayuso <pablo@eurodev.net>
diff --git a/net/netfilter/xt_tcpmss.c b/net/netfilter/xt_tcpmss.c
index c53d4d1..cd8847f 100644
--- a/net/netfilter/xt_tcpmss.c
+++ b/net/netfilter/xt_tcpmss.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel module to match TCP MSS values. */
 
 /* Copyright (C) 2000 Marc Boucher <marc@mbsi.ca>
diff --git a/net/netfilter/xt_tcpudp.c b/net/netfilter/xt_tcpudp.c
index ade024c..673ac41 100644
--- a/net/netfilter/xt_tcpudp.c
+++ b/net/netfilter/xt_tcpudp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 #include <linux/types.h>
 #include <linux/module.h>
@@ -24,6 +26,7 @@ MODULE_ALIAS("ip6t_tcp");
 static inline bool
 port_match(u_int16_t min, u_int16_t max, u_int16_t port, bool invert)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (port >= min && port <= max) ^ invert;
 }
 
@@ -40,6 +43,7 @@ tcp_find_option(u_int8_t option,
 	u_int8_t _opt[60 - sizeof(struct tcphdr)];
 	unsigned int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("finding option\n");
 
 	if (!optlen)
@@ -133,7 +137,9 @@ static bool udp_mt(const struct sk_buff *skb, struct xt_action_param *par)
 
 	/* Must not be a fragment. */
 	if (par->fragoff != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	uh = skb_header_pointer(skb, par->thoff, sizeof(_udph), &_udph);
 	if (uh == NULL) {
@@ -224,6 +230,7 @@ static int __init tcpudp_mt_init(void)
 
 static void __exit tcpudp_mt_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xt_unregister_matches(tcpudp_mt_reg, ARRAY_SIZE(tcpudp_mt_reg));
 }
 
diff --git a/net/netfilter/xt_time.c b/net/netfilter/xt_time.c
index 1b01eec..d3d442a 100644
--- a/net/netfilter/xt_time.c
+++ b/net/netfilter/xt_time.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	xt_time
  *	Copyright © CC Computer Consultants GmbH, 2007
diff --git a/net/netfilter/xt_u32.c b/net/netfilter/xt_u32.c
index a95b5034..0403fdf 100644
--- a/net/netfilter/xt_u32.c
+++ b/net/netfilter/xt_u32.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	xt_u32 - kernel module to match u32 packet content
  *
diff --git a/net/netlabel/netlabel_calipso.c b/net/netlabel/netlabel_calipso.c
index d177dd0..6317d8b 100644
--- a/net/netlabel/netlabel_calipso.c
+++ b/net/netlabel/netlabel_calipso.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NetLabel CALIPSO/IPv6 Support
  *
@@ -89,7 +91,9 @@ static int netlbl_calipso_add_pass(struct genl_info *info,
 
 	doi_def = kmalloc(sizeof(*doi_def), GFP_KERNEL);
 	if (!doi_def)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	doi_def->type = CALIPSO_MAP_PASS;
 	doi_def->doi = nla_get_u32(info->attrs[NLBL_CALIPSO_A_DOI]);
 	ret_val = calipso_doi_add(doi_def, audit_info);
@@ -150,6 +154,7 @@ static int netlbl_calipso_list(struct sk_buff *skb, struct genl_info *info)
 	struct calipso_doi *doi_def;
 
 	if (!info->attrs[NLBL_CALIPSO_A_DOI]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = -EINVAL;
 		goto list_failure;
 	}
@@ -214,6 +219,7 @@ static int netlbl_calipso_listall_cb(struct calipso_doi *doi_def, void *arg)
 	if (!data)
 		goto listall_cb_failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret_val = nla_put_u32(cb_arg->skb, NLBL_CALIPSO_A_DOI, doi_def->doi);
 	if (ret_val != 0)
 		goto listall_cb_failure;
@@ -299,7 +305,9 @@ static int netlbl_calipso_remove(struct sk_buff *skb, struct genl_info *info)
 	u32 skip_chain = 0;
 
 	if (!info->attrs[NLBL_CALIPSO_A_DOI])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	netlbl_netlink_auditinfo(skb, &audit_info);
 	cb_arg.doi = nla_get_u32(info->attrs[NLBL_CALIPSO_A_DOI]);
@@ -416,7 +424,9 @@ int calipso_doi_add(struct calipso_doi *doi_def,
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = ops->doi_add(doi_def, audit_info);
+}
 	return ret_val;
 }
 
@@ -430,6 +440,7 @@ int calipso_doi_add(struct calipso_doi *doi_def,
  */
 void calipso_doi_free(struct calipso_doi *doi_def)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
@@ -453,7 +464,9 @@ int calipso_doi_remove(u32 doi, struct netlbl_audit *audit_info)
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = ops->doi_remove(doi, audit_info);
+}
 	return ret_val;
 }
 
@@ -473,7 +486,9 @@ struct calipso_doi *calipso_doi_getdef(u32 doi)
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = ops->doi_getdef(doi);
+}
 	return ret_val;
 }
 
@@ -487,6 +502,7 @@ struct calipso_doi *calipso_doi_getdef(u32 doi)
  */
 void calipso_doi_putdef(struct calipso_doi *doi_def)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
@@ -514,7 +530,9 @@ int calipso_doi_walk(u32 *skip_cnt,
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = ops->doi_walk(skip_cnt, callback, cb_arg);
+}
 	return ret_val;
 }
 
@@ -536,7 +554,9 @@ int calipso_sock_getattr(struct sock *sk, struct netlbl_lsm_secattr *secattr)
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = ops->sock_getattr(sk, secattr);
+}
 	return ret_val;
 }
 
@@ -562,7 +582,9 @@ int calipso_sock_setattr(struct sock *sk,
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = ops->sock_setattr(sk, doi_def, secattr);
+}
 	return ret_val;
 }
 
@@ -576,6 +598,7 @@ int calipso_sock_setattr(struct sock *sk,
  */
 void calipso_sock_delattr(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
@@ -602,7 +625,9 @@ int calipso_req_setattr(struct request_sock *req,
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = ops->req_setattr(req, doi_def, secattr);
+}
 	return ret_val;
 }
 
@@ -616,6 +641,7 @@ int calipso_req_setattr(struct request_sock *req,
  */
 void calipso_req_delattr(struct request_sock *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
@@ -637,7 +663,9 @@ unsigned char *calipso_optptr(const struct sk_buff *skb)
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = ops->skbuff_optptr(skb);
+}
 	return ret_val;
 }
 
@@ -658,7 +686,9 @@ int calipso_getattr(const unsigned char *calipso,
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = ops->opt_getattr(calipso, secattr);
+}
 	return ret_val;
 }
 
@@ -681,7 +711,9 @@ int calipso_skbuff_setattr(struct sk_buff *skb,
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = ops->skbuff_setattr(skb, doi_def, secattr);
+}
 	return ret_val;
 }
 
@@ -700,7 +732,9 @@ int calipso_skbuff_delattr(struct sk_buff *skb)
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = ops->skbuff_delattr(skb);
+}
 	return ret_val;
 }
 
@@ -714,6 +748,7 @@ int calipso_skbuff_delattr(struct sk_buff *skb)
  */
 void calipso_cache_invalidate(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
@@ -738,6 +773,8 @@ int calipso_cache_add(const unsigned char *calipso_ptr,
 	const struct netlbl_calipso_ops *ops = netlbl_calipso_ops_get();
 
 	if (ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = ops->cache_add(calipso_ptr, secattr);
+}
 	return ret_val;
 }
diff --git a/net/netlabel/netlabel_cipso_v4.c b/net/netlabel/netlabel_cipso_v4.c
index 9aacf2d..0a886dd 100644
--- a/net/netlabel/netlabel_cipso_v4.c
+++ b/net/netlabel/netlabel_cipso_v4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NetLabel CIPSO/IPv4 Support
  *
@@ -340,7 +342,9 @@ static int netlbl_cipsov4_add_pass(struct genl_info *info,
 	struct cipso_v4_doi *doi_def = NULL;
 
 	if (!info->attrs[NLBL_CIPSOV4_A_TAGLST])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	doi_def = kmalloc(sizeof(*doi_def), GFP_KERNEL);
 	if (doi_def == NULL)
@@ -379,7 +383,9 @@ static int netlbl_cipsov4_add_local(struct genl_info *info,
 	struct cipso_v4_doi *doi_def = NULL;
 
 	if (!info->attrs[NLBL_CIPSOV4_A_TAGLST])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	doi_def = kmalloc(sizeof(*doi_def), GFP_KERNEL);
 	if (doi_def == NULL)
@@ -468,6 +474,7 @@ static int netlbl_cipsov4_list(struct sk_buff *skb, struct genl_info *info)
 	u32 iter;
 
 	if (!info->attrs[NLBL_CIPSOV4_A_DOI]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = -EINVAL;
 		goto list_failure;
 	}
@@ -625,6 +632,7 @@ static int netlbl_cipsov4_listall_cb(struct cipso_v4_doi *doi_def, void *arg)
 	if (data == NULL)
 		goto listall_cb_failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret_val = nla_put_u32(cb_arg->skb, NLBL_CIPSOV4_A_DOI, doi_def->doi);
 	if (ret_val != 0)
 		goto listall_cb_failure;
@@ -710,7 +718,9 @@ static int netlbl_cipsov4_remove(struct sk_buff *skb, struct genl_info *info)
 	u32 skip_chain = 0;
 
 	if (!info->attrs[NLBL_CIPSOV4_A_DOI])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	netlbl_netlink_auditinfo(skb, &audit_info);
 	cb_arg.doi = nla_get_u32(info->attrs[NLBL_CIPSOV4_A_DOI]);
diff --git a/net/netlabel/netlabel_domainhash.c b/net/netlabel/netlabel_domainhash.c
index 41d0e95..af0cac1 100644
--- a/net/netlabel/netlabel_domainhash.c
+++ b/net/netlabel/netlabel_domainhash.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NetLabel Domain Hash Table
  *
@@ -85,6 +87,7 @@ static void netlbl_domhsh_free_entry(struct rcu_head *entry)
 	struct netlbl_af6list *tmp6;
 #endif /* IPv6 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ptr = container_of(entry, struct netlbl_dom_map, rcu);
 	if (ptr->def.type == NETLBL_NLTYPE_ADDRSELECT) {
 		netlbl_af4list_foreach_safe(iter4, tmp4,
@@ -124,6 +127,7 @@ static u32 netlbl_domhsh_hash(const char *key)
 	/* This is taken (with slight modification) from
 	 * security/selinux/ss/symtab.c:symhash() */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (iter = 0, val = 0, len = strlen(key); iter < len; iter++)
 		val = (val << 4 | (val >> (8 * sizeof(u32) - 4))) ^ key[iter];
 	return val & (netlbl_domhsh_rcu_deref(netlbl_domhsh)->size - 1);
@@ -131,6 +135,7 @@ static u32 netlbl_domhsh_hash(const char *key)
 
 static bool netlbl_family_match(u16 f1, u16 f2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (f1 == f2) || (f1 == AF_UNSPEC) || (f2 == AF_UNSPEC);
 }
 
@@ -155,8 +160,11 @@ static struct netlbl_dom_map *netlbl_domhsh_search(const char *domain,
 	struct netlbl_dom_map *iter;
 
 	if (domain != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bkt = netlbl_domhsh_hash(domain);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bkt_list = &netlbl_domhsh_rcu_deref(netlbl_domhsh)->tbl[bkt];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_for_each_entry_rcu(iter, bkt_list, list)
 			if (iter->valid &&
 			    netlbl_family_match(iter->family, family) &&
@@ -164,6 +172,7 @@ static struct netlbl_dom_map *netlbl_domhsh_search(const char *domain,
 				return iter;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -188,18 +197,25 @@ static struct netlbl_dom_map *netlbl_domhsh_search_def(const char *domain,
 
 	entry = netlbl_domhsh_search(domain, family);
 	if (entry != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return entry;
+}
 	if (family == AF_INET || family == AF_UNSPEC) {
 		entry = netlbl_domhsh_rcu_deref(netlbl_domhsh_def_ipv4);
 		if (entry != NULL && entry->valid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return entry;
+}
 	}
 	if (family == AF_INET6 || family == AF_UNSPEC) {
 		entry = netlbl_domhsh_rcu_deref(netlbl_domhsh_def_ipv6);
 		if (entry != NULL && entry->valid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return entry;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -234,6 +250,7 @@ static void netlbl_domhsh_audit_add(struct netlbl_dom_map *entry,
 				 entry->domain ? entry->domain : "(default)");
 		if (addr4 != NULL) {
 			struct netlbl_domaddr4_map *map4;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			map4 = netlbl_domhsh_addr4_entry(addr4);
 			type = map4->def.type;
 			cipsov4 = map4->def.cipso;
@@ -242,6 +259,7 @@ static void netlbl_domhsh_audit_add(struct netlbl_dom_map *entry,
 #if IS_ENABLED(CONFIG_IPV6)
 		} else if (addr6 != NULL) {
 			struct netlbl_domaddr6_map *map6;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			map6 = netlbl_domhsh_addr6_entry(addr6);
 			type = map6->def.type;
 			calipso = map6->def.calipso;
@@ -249,27 +267,32 @@ static void netlbl_domhsh_audit_add(struct netlbl_dom_map *entry,
 						  &addr6->addr, &addr6->mask);
 #endif /* IPv6 */
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			type = entry->def.type;
 			cipsov4 = entry->def.cipso;
 			calipso = entry->def.calipso;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (type) {
 		case NETLBL_NLTYPE_UNLABELED:
 			audit_log_format(audit_buf, " nlbl_protocol=unlbl");
 			break;
 		case NETLBL_NLTYPE_CIPSOV4:
 			BUG_ON(cipsov4 == NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			audit_log_format(audit_buf,
 					 " nlbl_protocol=cipsov4 cipso_doi=%u",
 					 cipsov4->doi);
 			break;
 		case NETLBL_NLTYPE_CALIPSO:
 			BUG_ON(calipso == NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			audit_log_format(audit_buf,
 					 " nlbl_protocol=calipso calipso_doi=%u",
 					 calipso->doi);
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		audit_log_format(audit_buf, " res=%u", result == 0 ? 1 : 0);
 		audit_log_end(audit_buf);
 	}
@@ -293,7 +316,9 @@ static int netlbl_domhsh_validate(const struct netlbl_dom_map *entry)
 #endif /* IPv6 */
 
 	if (entry == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (entry->family != AF_INET && entry->family != AF_INET6 &&
 	    (entry->family != AF_UNSPEC ||
@@ -318,15 +343,20 @@ static int netlbl_domhsh_validate(const struct netlbl_dom_map *entry)
 		break;
 	case NETLBL_NLTYPE_ADDRSELECT:
 		netlbl_af4list_foreach(iter4, &entry->def.addrsel->list4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			map4 = netlbl_domhsh_addr4_entry(iter4);
 			switch (map4->def.type) {
 			case NETLBL_NLTYPE_UNLABELED:
 				if (map4->def.cipso != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -EINVAL;
+}
 				break;
 			case NETLBL_NLTYPE_CIPSOV4:
 				if (map4->def.cipso == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -EINVAL;
+}
 				break;
 			default:
 				return -EINVAL;
@@ -334,15 +364,20 @@ static int netlbl_domhsh_validate(const struct netlbl_dom_map *entry)
 		}
 #if IS_ENABLED(CONFIG_IPV6)
 		netlbl_af6list_foreach(iter6, &entry->def.addrsel->list6) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			map6 = netlbl_domhsh_addr6_entry(iter6);
 			switch (map6->def.type) {
 			case NETLBL_NLTYPE_UNLABELED:
 				if (map6->def.calipso != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -EINVAL;
+}
 				break;
 			case NETLBL_NLTYPE_CALIPSO:
 				if (map6->def.calipso == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -EINVAL;
+}
 				break;
 			default:
 				return -EINVAL;
@@ -354,6 +389,7 @@ static int netlbl_domhsh_validate(const struct netlbl_dom_map *entry)
 		return -EINVAL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -377,22 +413,29 @@ int __init netlbl_domhsh_init(u32 size)
 	struct netlbl_domhsh_tbl *hsh_tbl;
 
 	if (size == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hsh_tbl = kmalloc(sizeof(*hsh_tbl), GFP_KERNEL);
 	if (hsh_tbl == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	hsh_tbl->size = 1 << size;
 	hsh_tbl->tbl = kcalloc(hsh_tbl->size,
 			       sizeof(struct list_head),
 			       GFP_KERNEL);
 	if (hsh_tbl->tbl == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(hsh_tbl);
 		return -ENOMEM;
 	}
 	for (iter = 0; iter < hsh_tbl->size; iter++)
 		INIT_LIST_HEAD(&hsh_tbl->tbl[iter]);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&netlbl_domhsh_lock);
 	rcu_assign_pointer(netlbl_domhsh, hsh_tbl);
 	spin_unlock(&netlbl_domhsh_lock);
@@ -428,7 +471,9 @@ int netlbl_domhsh_add(struct netlbl_dom_map *entry,
 
 	ret_val = netlbl_domhsh_validate(entry);
 	if (ret_val != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret_val;
+}
 
 	/* XXX - we can remove this RCU read lock as the spinlock protects the
 	 *       entire function, but before we do we need to fixup the
@@ -437,7 +482,9 @@ int netlbl_domhsh_add(struct netlbl_dom_map *entry,
 	rcu_read_lock();
 	spin_lock(&netlbl_domhsh_lock);
 	if (entry->domain != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		entry_old = netlbl_domhsh_search(entry->domain, entry->family);
+}
 	else
 		entry_old = netlbl_domhsh_search_def(entry->domain,
 						     entry->family);
@@ -445,6 +492,7 @@ int netlbl_domhsh_add(struct netlbl_dom_map *entry,
 		entry->valid = 1;
 
 		if (entry->domain != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			u32 bkt = netlbl_domhsh_hash(entry->domain);
 			list_add_tail_rcu(&entry->list,
 				    &rcu_dereference(netlbl_domhsh)->tbl[bkt]);
@@ -462,11 +510,13 @@ int netlbl_domhsh_add(struct netlbl_dom_map *entry,
 			case AF_UNSPEC:
 				if (entry->def.type !=
 				    NETLBL_NLTYPE_UNLABELED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ret_val = -EINVAL;
 					goto add_return;
 				}
 				entry_b = kzalloc(sizeof(*entry_b), GFP_ATOMIC);
 				if (entry_b == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ret_val = -ENOMEM;
 					goto add_return;
 				}
@@ -488,6 +538,7 @@ int netlbl_domhsh_add(struct netlbl_dom_map *entry,
 		}
 
 		if (entry->def.type == NETLBL_NLTYPE_ADDRSELECT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			netlbl_af4list_foreach_rcu(iter4,
 						   &entry->def.addrsel->list4)
 				netlbl_domhsh_audit_add(entry, iter4, NULL,
@@ -515,6 +566,7 @@ int netlbl_domhsh_add(struct netlbl_dom_map *entry,
 			if (netlbl_af4list_search_exact(iter4->addr,
 							iter4->mask,
 							old_list4)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret_val = -EEXIST;
 				goto add_return;
 			}
@@ -523,13 +575,16 @@ int netlbl_domhsh_add(struct netlbl_dom_map *entry,
 			if (netlbl_af6list_search_exact(&iter6->addr,
 							&iter6->mask,
 							old_list6)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret_val = -EEXIST;
 				goto add_return;
 			}
 #endif /* IPv6 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netlbl_af4list_foreach_safe(iter4, tmp4,
 					    &entry->def.addrsel->list4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			netlbl_af4list_remove_entry(iter4);
 			iter4->valid = 1;
 			ret_val = netlbl_af4list_add(iter4, old_list4);
@@ -541,6 +596,7 @@ int netlbl_domhsh_add(struct netlbl_dom_map *entry,
 #if IS_ENABLED(CONFIG_IPV6)
 		netlbl_af6list_foreach_safe(iter6, tmp6,
 					    &entry->def.addrsel->list6) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			netlbl_af6list_remove_entry(iter6);
 			iter6->valid = 1;
 			ret_val = netlbl_af6list_add(iter6, old_list6);
@@ -551,7 +607,9 @@ int netlbl_domhsh_add(struct netlbl_dom_map *entry,
 		}
 #endif /* IPv6 */
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = -EINVAL;
+}
 
 add_return:
 	spin_unlock(&netlbl_domhsh_lock);
@@ -595,7 +653,9 @@ int netlbl_domhsh_remove_entry(struct netlbl_dom_map *entry,
 	struct audit_buffer *audit_buf;
 
 	if (entry == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	spin_lock(&netlbl_domhsh_lock);
 	if (entry->valid) {
@@ -686,7 +746,9 @@ int netlbl_domhsh_remove_af4(const char *domain,
 	rcu_read_lock();
 
 	if (domain)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		entry_map = netlbl_domhsh_search(domain, AF_INET);
+}
 	else
 		entry_map = netlbl_domhsh_search_def(domain, AF_INET);
 	if (entry_map == NULL ||
@@ -753,7 +815,9 @@ int netlbl_domhsh_remove_af6(const char *domain,
 	rcu_read_lock();
 
 	if (domain)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		entry_map = netlbl_domhsh_search(domain, AF_INET6);
+}
 	else
 		entry_map = netlbl_domhsh_search_def(domain, AF_INET6);
 	if (entry_map == NULL ||
@@ -812,6 +876,7 @@ int netlbl_domhsh_remove(const char *domain, u16 family,
 
 	rcu_read_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (family == AF_INET || family == AF_UNSPEC) {
 		if (domain)
 			entry = netlbl_domhsh_search(domain, AF_INET);
@@ -852,6 +917,7 @@ int netlbl_domhsh_remove(const char *domain, u16 family,
  */
 int netlbl_domhsh_remove_default(u16 family, struct netlbl_audit *audit_info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return netlbl_domhsh_remove(NULL, family, audit_info);
 }
 
@@ -869,6 +935,7 @@ int netlbl_domhsh_remove_default(u16 family, struct netlbl_audit *audit_info)
  */
 struct netlbl_dom_map *netlbl_domhsh_getentry(const char *domain, u16 family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (family == AF_UNSPEC)
 		return NULL;
 	return netlbl_domhsh_search_def(domain, family);
@@ -893,7 +960,9 @@ struct netlbl_dommap_def *netlbl_domhsh_getentry_af4(const char *domain,
 
 	dom_iter = netlbl_domhsh_search_def(domain, AF_INET);
 	if (dom_iter == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (dom_iter->def.type != NETLBL_NLTYPE_ADDRSELECT)
 		return &dom_iter->def;
@@ -923,7 +992,9 @@ struct netlbl_dommap_def *netlbl_domhsh_getentry_af6(const char *domain,
 
 	dom_iter = netlbl_domhsh_search_def(domain, AF_INET6);
 	if (dom_iter == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (dom_iter->def.type != NETLBL_NLTYPE_ADDRSELECT)
 		return &dom_iter->def;
diff --git a/net/netlabel/netlabel_kapi.c b/net/netlabel/netlabel_kapi.c
index ea7c670..1384164 100644
--- a/net/netlabel/netlabel_kapi.c
+++ b/net/netlabel/netlabel_kapi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NetLabel Kernel API
  *
@@ -73,6 +75,7 @@ int netlbl_cfg_map_del(const char *domain,
 		       const void *mask,
 		       struct netlbl_audit *audit_info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (addr == NULL && mask == NULL) {
 		return netlbl_domhsh_remove(domain, family, audit_info);
 	} else if (addr != NULL && mask != NULL) {
@@ -120,7 +123,9 @@ int netlbl_cfg_unlbl_map_add(const char *domain,
 
 	entry = kzalloc(sizeof(*entry), GFP_ATOMIC);
 	if (entry == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	if (domain != NULL) {
 		entry->domain = kstrdup(domain, GFP_ATOMIC);
 		if (entry->domain == NULL)
@@ -302,6 +307,7 @@ int netlbl_cfg_unlbl_static_del(struct net *net,
 int netlbl_cfg_cipsov4_add(struct cipso_v4_doi *doi_def,
 			   struct netlbl_audit *audit_info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cipso_v4_doi_add(doi_def, audit_info);
 }
 
@@ -317,6 +323,7 @@ int netlbl_cfg_cipsov4_add(struct cipso_v4_doi *doi_def,
  */
 void netlbl_cfg_cipsov4_del(u32 doi, struct netlbl_audit *audit_info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cipso_v4_doi_remove(doi, audit_info);
 }
 
@@ -348,7 +355,9 @@ int netlbl_cfg_cipsov4_map_add(u32 doi,
 
 	doi_def = cipso_v4_doi_getdef(doi);
 	if (doi_def == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	entry = kzalloc(sizeof(*entry), GFP_ATOMIC);
 	if (entry == NULL)
@@ -474,7 +483,9 @@ int netlbl_cfg_calipso_map_add(u32 doi,
 
 	doi_def = calipso_doi_getdef(doi);
 	if (doi_def == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	entry = kzalloc(sizeof(*entry), GFP_ATOMIC);
 	if (entry == NULL)
@@ -575,6 +586,7 @@ static struct netlbl_lsm_catmap *_netlbl_catmap_getnode(
 
 	if (iter == NULL)
 		goto catmap_getnode_alloc;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (offset < iter->startbit)
 		goto catmap_getnode_walk;
 	while (iter && offset >= (iter->startbit + NETLBL_CATMAP_SIZE)) {
@@ -628,7 +640,9 @@ int netlbl_catmap_walk(struct netlbl_lsm_catmap *catmap, u32 offset)
 
 	iter = _netlbl_catmap_getnode(&catmap, offset, _CM_F_WALK, 0);
 	if (iter == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 	if (offset > iter->startbit) {
 		offset -= iter->startbit;
 		idx = offset / NETLBL_CATMAP_MAPSIZE;
@@ -685,7 +699,9 @@ int netlbl_catmap_walkrng(struct netlbl_lsm_catmap *catmap, u32 offset)
 
 	iter = _netlbl_catmap_getnode(&catmap, offset, _CM_F_WALK, 0);
 	if (iter == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 	if (offset > iter->startbit) {
 		offset -= iter->startbit;
 		idx = offset / NETLBL_CATMAP_MAPSIZE;
@@ -746,7 +762,9 @@ int netlbl_catmap_getlong(struct netlbl_lsm_catmap *catmap,
 
 	/* only allow aligned offsets */
 	if ((off & (BITS_PER_LONG - 1)) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (off < catmap->startbit) {
 		off = catmap->startbit;
@@ -789,7 +807,9 @@ int netlbl_catmap_setbit(struct netlbl_lsm_catmap **catmap,
 
 	iter = _netlbl_catmap_getnode(catmap, bit, _CM_F_ALLOC, flags);
 	if (iter == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	bit -= iter->startbit;
 	idx = bit / NETLBL_CATMAP_MAPSIZE;
@@ -819,6 +839,7 @@ int netlbl_catmap_setrng(struct netlbl_lsm_catmap **catmap,
 	int rc = 0;
 	u32 spot = start;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (rc == 0 && spot <= end) {
 		if (((spot & (BITS_PER_LONG - 1)) == 0) &&
 		    ((end - spot) > BITS_PER_LONG)) {
@@ -857,7 +878,9 @@ int netlbl_catmap_setlong(struct netlbl_lsm_catmap **catmap,
 
 	/* only allow aligned offsets */
 	if ((offset & (BITS_PER_LONG - 1)) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	iter = _netlbl_catmap_getnode(catmap, offset, _CM_F_ALLOC, flags);
 	if (iter == NULL)
@@ -898,6 +921,7 @@ int netlbl_bitmap_walk(const unsigned char *bitmap, u32 bitmap_len,
 	bit_spot = offset;
 	bitmask = 0x80 >> (offset % 8);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (bit_spot < bitmap_len) {
 		if ((state && (byte & bitmask) == bitmask) ||
 		    (state == 0 && (byte & bitmask) == 0))
@@ -934,7 +958,9 @@ void netlbl_bitmap_setbit(unsigned char *bitmap, u32 bit, u8 state)
 	byte_spot = bit / 8;
 	bitmask = 0x80 >> (bit % 8);
 	if (state)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bitmap[byte_spot] |= bitmask;
+}
 	else
 		bitmap[byte_spot] &= ~bitmask;
 }
@@ -989,6 +1015,7 @@ int netlbl_sock_setattr(struct sock *sk,
 	rcu_read_lock();
 	dom_entry = netlbl_domhsh_getentry(secattr->domain, family);
 	if (dom_entry == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret_val = -ENOENT;
 		goto socket_setattr_return;
 	}
@@ -1049,6 +1076,7 @@ int netlbl_sock_setattr(struct sock *sk,
  */
 void netlbl_sock_delattr(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (sk->sk_family) {
 	case AF_INET:
 		cipso_v4_sock_delattr(sk);
@@ -1256,6 +1284,7 @@ int netlbl_req_setattr(struct request_sock *req,
 */
 void netlbl_req_delattr(struct request_sock *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (req->rsk_ops->family) {
 	case AF_INET:
 		cipso_v4_req_delattr(req);
@@ -1399,6 +1428,7 @@ int netlbl_skbuff_getattr(const struct sk_buff *skb,
  */
 void netlbl_skbuff_err(struct sk_buff *skb, u16 family, int error, int gateway)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (family) {
 	case AF_INET:
 		if (cipso_v4_optptr(skb))
@@ -1418,6 +1448,7 @@ void netlbl_skbuff_err(struct sk_buff *skb, u16 family, int error, int gateway)
  */
 void netlbl_cache_invalidate(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cipso_v4_cache_invalidate();
 #if IS_ENABLED(CONFIG_IPV6)
 	calipso_cache_invalidate();
@@ -1442,7 +1473,9 @@ int netlbl_cache_add(const struct sk_buff *skb, u16 family,
 	unsigned char *ptr;
 
 	if ((secattr->flags & NETLBL_SECATTR_CACHE) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMSG;
+}
 
 	switch (family) {
 	case AF_INET:
@@ -1480,6 +1513,7 @@ int netlbl_cache_add(const struct sk_buff *skb, u16 family,
 struct audit_buffer *netlbl_audit_start(int type,
 					struct netlbl_audit *audit_info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return netlbl_audit_start_common(type, audit_info);
 }
 EXPORT_SYMBOL(netlbl_audit_start);
diff --git a/net/netlabel/netlabel_mgmt.c b/net/netlabel/netlabel_mgmt.c
index 21e0095..8c04976 100644
--- a/net/netlabel/netlabel_mgmt.c
+++ b/net/netlabel/netlabel_mgmt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NetLabel Management Support
  *
@@ -100,7 +102,9 @@ static int netlbl_mgmt_add_common(struct genl_info *info,
 	struct netlbl_dom_map *entry = kzalloc(sizeof(*entry), GFP_KERNEL);
 
 	if (!entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	entry->def.type = nla_get_u32(info->attrs[NLBL_MGMT_A_PROTOCOL]);
 	if (info->attrs[NLBL_MGMT_A_DOMAIN]) {
 		size_t tmp_size = nla_len(info->attrs[NLBL_MGMT_A_DOMAIN]);
diff --git a/net/netlabel/netlabel_unlabeled.c b/net/netlabel/netlabel_unlabeled.c
index 22dc1b9..c5a02b6 100644
--- a/net/netlabel/netlabel_unlabeled.c
+++ b/net/netlabel/netlabel_unlabeled.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NetLabel Unlabeled Support
  *
@@ -168,6 +170,7 @@ static void netlbl_unlhsh_free_iface(struct rcu_head *entry)
 	struct netlbl_af6list *tmp6;
 #endif /* IPv6 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iface = container_of(entry, struct netlbl_unlhsh_iface, rcu);
 
 	/* no need for locks here since we are the only one with access to this
@@ -199,6 +202,7 @@ static void netlbl_unlhsh_free_iface(struct rcu_head *entry)
  */
 static u32 netlbl_unlhsh_hash(int ifindex)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ifindex & (netlbl_unlhsh_rcu_deref(netlbl_unlhsh)->size - 1);
 }
 
@@ -220,6 +224,7 @@ static struct netlbl_unlhsh_iface *netlbl_unlhsh_search_iface(int ifindex)
 	struct netlbl_unlhsh_iface *iter;
 
 	bkt = netlbl_unlhsh_hash(ifindex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bkt_list = &netlbl_unlhsh_rcu_deref(netlbl_unlhsh)->tbl[bkt];
 	list_for_each_entry_rcu(iter, bkt_list, list)
 		if (iter->valid && iter->ifindex == ifindex)
@@ -251,7 +256,9 @@ static int netlbl_unlhsh_add_addr4(struct netlbl_unlhsh_iface *iface,
 
 	entry = kzalloc(sizeof(*entry), GFP_ATOMIC);
 	if (entry == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	entry->list.addr = addr->s_addr & mask->s_addr;
 	entry->list.mask = mask->s_addr;
@@ -291,7 +298,9 @@ static int netlbl_unlhsh_add_addr6(struct netlbl_unlhsh_iface *iface,
 
 	entry = kzalloc(sizeof(*entry), GFP_ATOMIC);
 	if (entry == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	entry->list.addr = *addr;
 	entry->list.addr.s6_addr32[0] &= mask->s6_addr32[0];
@@ -329,7 +338,9 @@ static struct netlbl_unlhsh_iface *netlbl_unlhsh_add_iface(int ifindex)
 
 	iface = kzalloc(sizeof(*iface), GFP_ATOMIC);
 	if (iface == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	iface->ifindex = ifindex;
 	INIT_LIST_HEAD(&iface->addr4_list);
@@ -1424,22 +1435,29 @@ int __init netlbl_unlabel_init(u32 size)
 	struct netlbl_unlhsh_tbl *hsh_tbl;
 
 	if (size == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hsh_tbl = kmalloc(sizeof(*hsh_tbl), GFP_KERNEL);
 	if (hsh_tbl == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	hsh_tbl->size = 1 << size;
 	hsh_tbl->tbl = kcalloc(hsh_tbl->size,
 			       sizeof(struct list_head),
 			       GFP_KERNEL);
 	if (hsh_tbl->tbl == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(hsh_tbl);
 		return -ENOMEM;
 	}
 	for (iter = 0; iter < hsh_tbl->size; iter++)
 		INIT_LIST_HEAD(&hsh_tbl->tbl[iter]);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&netlbl_unlhsh_lock);
 	rcu_assign_pointer(netlbl_unlhsh, hsh_tbl);
 	spin_unlock(&netlbl_unlhsh_lock);
@@ -1469,7 +1487,9 @@ int netlbl_unlabel_getattr(const struct sk_buff *skb,
 	rcu_read_lock();
 	iface = netlbl_unlhsh_search_iface(skb->skb_iif);
 	if (iface == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iface = rcu_dereference(netlbl_unlhsh_def);
+}
 	if (iface == NULL || !iface->valid)
 		goto unlabel_getattr_nolabel;
 	switch (family) {
@@ -1539,12 +1559,16 @@ int __init netlbl_unlabel_defconf(void)
 
 	entry = kzalloc(sizeof(*entry), GFP_KERNEL);
 	if (entry == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	entry->family = AF_UNSPEC;
 	entry->def.type = NETLBL_NLTYPE_UNLABELED;
 	ret_val = netlbl_domhsh_add_default(entry, &audit_info);
 	if (ret_val != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret_val;
+}
 
 	netlbl_unlabel_acceptflg_set(1, &audit_info);
 
diff --git a/net/netlabel/netlabel_user.c b/net/netlabel/netlabel_user.c
index 58495f4..a3f0c3f 100644
--- a/net/netlabel/netlabel_user.c
+++ b/net/netlabel/netlabel_user.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NetLabel NETLINK Interface
  *
@@ -66,15 +68,21 @@ int __init netlbl_netlink_init(void)
 
 	ret_val = netlbl_mgmt_genl_init();
 	if (ret_val != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret_val;
+}
 
 	ret_val = netlbl_cipsov4_genl_init();
 	if (ret_val != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret_val;
+}
 
 	ret_val = netlbl_calipso_genl_init();
 	if (ret_val != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret_val;
+}
 
 	return netlbl_unlabel_genl_init();
 }
@@ -102,11 +110,16 @@ struct audit_buffer *netlbl_audit_start_common(int type,
 	u32 secctx_len;
 
 	if (audit_enabled == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	audit_buf = audit_log_start(current->audit_context, GFP_ATOMIC, type);
 	if (audit_buf == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	audit_log_format(audit_buf, "netlabel: auid=%u ses=%u",
 			 from_kuid(&init_user_ns, audit_info->loginuid),
@@ -116,9 +129,11 @@ struct audit_buffer *netlbl_audit_start_common(int type,
 	    security_secid_to_secctx(audit_info->secid,
 				     &secctx,
 				     &secctx_len) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		audit_log_format(audit_buf, " subj=%s", secctx);
 		security_release_secctx(secctx, secctx_len);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return audit_buf;
 }
diff --git a/net/netlink/af_netlink.c b/net/netlink/af_netlink.c
index 533fd05..1d30a8a 100644
--- a/net/netlink/af_netlink.c
+++ b/net/netlink/af_netlink.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NETLINK      Kernel-user communication protocol.
  *
@@ -159,6 +161,7 @@ static inline u32 netlink_group_mask(u32 group)
 static struct sk_buff *netlink_to_full_skb(const struct sk_buff *skb,
 					   gfp_t gfp_mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int len = skb_end_offset(skb);
 	struct sk_buff *new;
 
@@ -176,6 +179,7 @@ static struct sk_buff *netlink_to_full_skb(const struct sk_buff *skb,
 
 int netlink_add_tap(struct netlink_tap *nt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(nt->dev->type != ARPHRD_NETLINK))
 		return -EINVAL;
 
@@ -196,6 +200,7 @@ static int __netlink_remove_tap(struct netlink_tap *nt)
 
 	spin_lock(&netlink_tap_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(tmp, &netlink_tap_all, list) {
 		if (nt == tmp) {
 			list_del_rcu(&nt->list);
@@ -255,7 +260,9 @@ static int __netlink_deliver_tap_skb(struct sk_buff *skb,
 	int ret = -ENOMEM;
 
 	if (!net_eq(dev_net(dev), sock_net(sk)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	dev_hold(dev);
 
@@ -284,7 +291,9 @@ static void __netlink_deliver_tap(struct sk_buff *skb)
 	struct netlink_tap *tmp;
 
 	if (!netlink_filter_tap(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	list_for_each_entry_rcu(tmp, &netlink_tap_all, list) {
 		ret = __netlink_deliver_tap_skb(skb, tmp->dev);
@@ -295,11 +304,15 @@ static void __netlink_deliver_tap(struct sk_buff *skb)
 
 static void netlink_deliver_tap(struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 
 	if (unlikely(!list_empty(&netlink_tap_all)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__netlink_deliver_tap(skb);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -312,6 +325,7 @@ static void netlink_deliver_tap_kernel(struct sock *dst, struct sock *src,
 
 static void netlink_overrun(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netlink_sock *nlk = nlk_sk(sk);
 
 	if (!(nlk->flags & NETLINK_F_RECV_NO_ENOBUFS)) {
@@ -326,6 +340,7 @@ static void netlink_overrun(struct sock *sk)
 
 static void netlink_rcv_wake(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netlink_sock *nlk = nlk_sk(sk);
 
 	if (skb_queue_empty(&sk->sk_receive_queue))
@@ -337,10 +352,12 @@ static void netlink_rcv_wake(struct sock *sk)
 static void netlink_skb_destructor(struct sk_buff *skb)
 {
 	if (is_vmalloc_addr(skb->head)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!skb->cloned ||
 		    !atomic_dec_return(&(skb_shinfo(skb)->dataref)))
 			vfree(skb->head);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb->head = NULL;
 	}
 	if (skb->sk != NULL)
@@ -358,11 +375,16 @@ static void netlink_skb_set_owner_r(struct sk_buff *skb, struct sock *sk)
 
 static void netlink_sock_destruct(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netlink_sock *nlk = nlk_sk(sk);
 
 	if (nlk->cb_running) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (nlk->cb.done)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nlk->cb.done(&nlk->cb);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		module_put(nlk->cb.module);
 		kfree_skb(nlk->cb.skb);
 	}
@@ -370,6 +392,7 @@ static void netlink_sock_destruct(struct sock *sk)
 	skb_queue_purge(&sk->sk_receive_queue);
 
 	if (!sock_flag(sk, SOCK_DEAD)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "Freeing alive netlink socket %p\n", sk);
 		return;
 	}
@@ -381,6 +404,7 @@ static void netlink_sock_destruct(struct sock *sk)
 
 static void netlink_sock_destruct_work(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netlink_sock *nlk = container_of(work, struct netlink_sock,
 						work);
 
@@ -401,19 +425,25 @@ void netlink_table_grab(void)
 	write_lock_irq(&nl_table_lock);
 
 	if (atomic_read(&nl_table_users)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DECLARE_WAITQUEUE(wait, current);
 
 		add_wait_queue_exclusive(&nl_table_wait, &wait);
 		for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_current_state(TASK_UNINTERRUPTIBLE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (atomic_read(&nl_table_users) == 0)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			write_unlock_irq(&nl_table_lock);
 			schedule();
 			write_lock_irq(&nl_table_lock);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__set_current_state(TASK_RUNNING);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		remove_wait_queue(&nl_table_wait, &wait);
 	}
 }
@@ -421,6 +451,7 @@ void netlink_table_grab(void)
 void netlink_table_ungrab(void)
 	__releases(nl_table_lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_unlock_irq(&nl_table_lock);
 	wake_up(&nl_table_wait);
 }
@@ -465,6 +496,7 @@ static inline int netlink_compare(struct rhashtable_compare_arg *arg,
 static void netlink_compare_arg_init(struct netlink_compare_arg *arg,
 				     struct net *net, u32 portid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(arg, 0, sizeof(*arg));
 	write_pnet(&arg->pnet, net);
 	arg->portid = portid;
@@ -498,7 +530,10 @@ static struct sock *netlink_lookup(struct net *net, int protocol, u32 portid)
 	rcu_read_lock();
 	sk = __netlink_lookup(table, portid, net);
 	if (sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_hold(sk);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	return sk;
@@ -516,9 +551,12 @@ netlink_update_listeners(struct sock *sk)
 
 	listeners = nl_deref_protected(tbl->listeners);
 	if (!listeners)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for (i = 0; i < NLGRPLONGS(tbl->groups); i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask = 0;
 		sk_for_each_bound(sk, &tbl->mc_list) {
 			if (i < NLGRPLONGS(nlk_sk(sk)->ngroups))
@@ -541,6 +579,7 @@ static int netlink_insert(struct sock *sk, u32 portid)
 	if (nlk_sk(sk)->bound)
 		goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENOMEM;
 	if (BITS_PER_LONG > 32 &&
 	    unlikely(atomic_read(&table->hash.nelems) >= UINT_MAX))
@@ -555,9 +594,15 @@ static int netlink_insert(struct sock *sk, u32 portid)
 		 * from here, it must not escape to the caller.
 		 */
 		if (unlikely(err == -EBUSY))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EOVERFLOW;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err == -EEXIST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EADDRINUSE;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_put(sk);
 		goto err;
 	}
@@ -584,11 +629,14 @@ static void netlink_remove(struct sock *sk)
 
 	netlink_table_grab();
 	if (nlk_sk(sk)->subscriptions) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__sk_del_bind_node(sk);
 		netlink_update_listeners(sk);
 	}
 	if (sk->sk_protocol == NETLINK_GENERIC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_inc(&genl_sk_destructing_cnt);
+}
 	netlink_table_ungrab();
 }
 
@@ -609,7 +657,9 @@ static int __netlink_create(struct net *net, struct socket *sock,
 
 	sk = sk_alloc(net, PF_NETLINK, GFP_KERNEL, &netlink_proto, kern);
 	if (!sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	sock_init_data(sock, sk);
 
@@ -619,6 +669,7 @@ static int __netlink_create(struct net *net, struct socket *sock,
 	} else {
 		nlk->cb_mutex = &nlk->cb_def_mutex;
 		mutex_init(nlk->cb_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lockdep_set_class_and_name(nlk->cb_mutex,
 					   nlk_cb_mutex_keys + protocol,
 					   nlk_cb_mutex_key_strings[protocol]);
@@ -643,14 +694,19 @@ static int netlink_create(struct net *net, struct socket *sock, int protocol,
 	sock->state = SS_UNCONNECTED;
 
 	if (sock->type != SOCK_RAW && sock->type != SOCK_DGRAM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESOCKTNOSUPPORT;
+}
 
 	if (protocol < 0 || protocol >= MAX_LINKS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPROTONOSUPPORT;
+}
 
 	netlink_lock_table();
 #ifdef CONFIG_MODULES
 	if (!nl_table[protocol].registered) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netlink_unlock_table();
 		request_module("net-pf-%d-proto-%d", PF_NETLINK, protocol);
 		netlink_lock_table();
@@ -673,6 +729,7 @@ static int netlink_create(struct net *net, struct socket *sock, int protocol,
 	if (err < 0)
 		goto out_module;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_bh_disable();
 	sock_prot_inuse_add(net, &netlink_proto, 1);
 	local_bh_enable();
@@ -691,6 +748,7 @@ static int netlink_create(struct net *net, struct socket *sock, int protocol,
 
 static void deferred_put_nlk_sk(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netlink_sock *nlk = container_of(head, struct netlink_sock, rcu);
 	struct sock *sk = &nlk->sk;
 
@@ -698,10 +756,14 @@ static void deferred_put_nlk_sk(struct rcu_head *head)
 	nlk->groups = NULL;
 
 	if (!refcount_dec_and_test(&sk->sk_refcnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (nlk->cb_running && nlk->cb.done) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INIT_WORK(&nlk->work, netlink_sock_destruct_work);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		schedule_work(&nlk->work);
 		return;
 	}
@@ -715,7 +777,9 @@ static int netlink_release(struct socket *sock)
 	struct netlink_sock *nlk;
 
 	if (!sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	netlink_remove(sk);
 	sock_orphan(sk);
@@ -732,9 +796,14 @@ static int netlink_release(struct socket *sock)
 	if (nlk->netlink_unbind) {
 		int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < nlk->ngroups; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (test_bit(i, nlk->groups))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				nlk->netlink_unbind(sock_net(sk), i + 1);
+}
+}
 	}
 	if (sk->sk_protocol == NETLINK_GENERIC &&
 	    atomic_dec_return(&genl_sk_destructing_cnt) == 0)
@@ -763,9 +832,13 @@ static int netlink_release(struct socket *sock)
 		if (--nl_table[sk->sk_protocol].registered == 0) {
 			struct listeners *old;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			old = nl_deref_protected(nl_table[sk->sk_protocol].listeners);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			RCU_INIT_POINTER(nl_table[sk->sk_protocol].listeners, NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree_rcu(old, rcu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nl_table[sk->sk_protocol].module = NULL;
 			nl_table[sk->sk_protocol].bind = NULL;
 			nl_table[sk->sk_protocol].unbind = NULL;
@@ -775,6 +848,7 @@ static int netlink_release(struct socket *sock)
 		netlink_table_ungrab();
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_bh_disable();
 	sock_prot_inuse_add(sock_net(sk), &netlink_proto, -1);
 	local_bh_enable();
@@ -802,8 +876,11 @@ static int netlink_autobind(struct socket *sock)
 		if (rover == -4096)
 			/* rover will be in range [S32_MIN, -4097] */
 			rover = S32_MIN + prandom_u32_max(-4096 - S32_MIN);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (rover >= -4096)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rover = -4097;
+}
 		portid = rover--;
 		goto retry;
 	}
@@ -814,7 +891,9 @@ static int netlink_autobind(struct socket *sock)
 
 	/* If 2 threads race to autobind, that is fine.  */
 	if (err == -EBUSY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
+}
 
 	return err;
 }
@@ -895,10 +974,13 @@ static inline int netlink_allowed(const struct socket *sock, unsigned int flag)
 static void
 netlink_update_subscriptions(struct sock *sk, unsigned int subscriptions)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netlink_sock *nlk = nlk_sk(sk);
 
 	if (nlk->subscriptions && !subscriptions)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__sk_del_bind_node(sk);
+}
 	else if (!nlk->subscriptions && subscriptions)
 		sk_add_bind_node(sk, &nl_table[sk->sk_protocol].mc_list);
 	nlk->subscriptions = subscriptions;
@@ -906,6 +988,7 @@ netlink_update_subscriptions(struct sock *sk, unsigned int subscriptions)
 
 static int netlink_realloc_groups(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netlink_sock *nlk = nlk_sk(sk);
 	unsigned int groups;
 	unsigned long *new_groups;
@@ -915,6 +998,7 @@ static int netlink_realloc_groups(struct sock *sk)
 
 	groups = nl_table[sk->sk_protocol].groups;
 	if (!nl_table[sk->sk_protocol].registered) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOENT;
 		goto out_unlock;
 	}
@@ -924,6 +1008,7 @@ static int netlink_realloc_groups(struct sock *sk)
 
 	new_groups = krealloc(nlk->groups, NLGRPSZ(groups), GFP_ATOMIC);
 	if (new_groups == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOMEM;
 		goto out_unlock;
 	}
@@ -940,6 +1025,7 @@ static int netlink_realloc_groups(struct sock *sk)
 static void netlink_undo_bind(int group, long unsigned int groups,
 			      struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netlink_sock *nlk = nlk_sk(sk);
 	int undo;
 
@@ -963,18 +1049,26 @@ static int netlink_bind(struct socket *sock, struct sockaddr *addr,
 	bool bound;
 
 	if (addr_len < sizeof(struct sockaddr_nl))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (nladdr->nl_family != AF_NETLINK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* Only superuser is allowed to listen multicasts */
 	if (groups) {
 		if (!netlink_allowed(sock, NL_CFG_F_NONROOT_RECV))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 		err = netlink_realloc_groups(sk);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	}
 
 	bound = nlk->bound;
@@ -983,7 +1077,9 @@ static int netlink_bind(struct socket *sock, struct sockaddr *addr,
 		smp_rmb();
 
 		if (nladdr->nl_pid != nlk->portid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 	}
 
 	netlink_lock_table();
@@ -996,6 +1092,7 @@ static int netlink_bind(struct socket *sock, struct sockaddr *addr,
 			err = nlk->netlink_bind(net, group + 1);
 			if (!err)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			netlink_undo_bind(group, groups, sk);
 			goto unlock;
 		}
@@ -1009,6 +1106,7 @@ static int netlink_bind(struct socket *sock, struct sockaddr *addr,
 			netlink_insert(sk, nladdr->nl_pid) :
 			netlink_autobind(sock);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			netlink_undo_bind(nlk->ngroups, groups, sk);
 			goto unlock;
 		}
@@ -1042,7 +1140,9 @@ static int netlink_connect(struct socket *sock, struct sockaddr *addr,
 	struct sockaddr_nl *nladdr = (struct sockaddr_nl *)addr;
 
 	if (alen < sizeof(addr->sa_family))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (addr->sa_family == AF_UNSPEC) {
 		sk->sk_state	= NETLINK_UNCONNECTED;
@@ -1077,6 +1177,7 @@ static int netlink_getname(struct socket *sock, struct sockaddr *addr,
 {
 	struct sock *sk = sock->sk;
 	struct netlink_sock *nlk = nlk_sk(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DECLARE_SOCKADDR(struct sockaddr_nl *, nladdr, addr);
 
 	nladdr->nl_family = AF_NETLINK;
@@ -1084,6 +1185,7 @@ static int netlink_getname(struct socket *sock, struct sockaddr *addr,
 	*addr_len = sizeof(*nladdr);
 
 	if (peer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nladdr->nl_pid = nlk->dst_portid;
 		nladdr->nl_groups = netlink_group_mask(nlk->dst_group);
 	} else {
@@ -1110,20 +1212,25 @@ static struct sock *netlink_getsockbyportid(struct sock *ssk, u32 portid)
 
 	sock = netlink_lookup(sock_net(ssk), ssk->sk_protocol, portid);
 	if (!sock)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ECONNREFUSED);
+}
 
 	/* Don't bother queuing skb if kernel socket has no input function */
 	nlk = nlk_sk(sock);
 	if (sock->sk_state == NETLINK_CONNECTED &&
 	    nlk->dst_portid != nlk_sk(ssk)->portid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_put(sock);
 		return ERR_PTR(-ECONNREFUSED);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sock;
 }
 
 struct sock *netlink_getsockbyfilp(struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(filp);
 	struct sock *sock;
 
@@ -1147,19 +1254,26 @@ static struct sk_buff *netlink_alloc_large_skb(unsigned int size,
 	if (size <= NLMSG_GOODSIZE || broadcast)
 		return alloc_skb(size, GFP_KERNEL);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size = SKB_DATA_ALIGN(size) +
 	       SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 
 	data = vmalloc(size);
 	if (data == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb = __build_skb(data, size);
 	if (skb == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vfree(data);
+}
 	else
 		skb->destructor = netlink_skb_destructor;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb;
 }
 
@@ -1182,16 +1296,23 @@ int netlink_attachskb(struct sock *sk, struct sk_buff *skb,
 
 	if ((atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf ||
 	     test_bit(NETLINK_S_CONGESTED, &nlk->state))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DECLARE_WAITQUEUE(wait, current);
 		if (!*timeo) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!ssk || netlink_is_kernel(ssk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				netlink_overrun(sk);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sock_put(sk);
 			kfree_skb(skb);
 			return -EAGAIN;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__set_current_state(TASK_INTERRUPTIBLE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_wait_queue(&nlk->wait, &wait);
 
 		if ((atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf ||
@@ -1199,14 +1320,18 @@ int netlink_attachskb(struct sock *sk, struct sk_buff *skb,
 		    !sock_flag(sk, SOCK_DEAD))
 			*timeo = schedule_timeout(*timeo);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__set_current_state(TASK_RUNNING);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		remove_wait_queue(&nlk->wait, &wait);
 		sock_put(sk);
 
 		if (signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree_skb(skb);
 			return sock_intr_errno(*timeo);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
 	}
 	netlink_skb_set_owner_r(skb, sk);
@@ -1234,6 +1359,7 @@ int netlink_sendskb(struct sock *sk, struct sk_buff *skb)
 
 void netlink_detachskb(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree_skb(skb);
 	sock_put(sk);
 }
@@ -1245,12 +1371,18 @@ static struct sk_buff *netlink_trim(struct sk_buff *skb, gfp_t allocation)
 	WARN_ON(skb->sk != NULL);
 	delta = skb->end - skb->tail;
 	if (is_vmalloc_addr(skb->head) || delta * 2 < skb->truesize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return skb;
+}
 
 	if (skb_shared(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct sk_buff *nskb = skb_clone(skb, allocation);
 		if (!nskb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return skb;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		consume_skb(skb);
 		skb = nskb;
 	}
@@ -1276,6 +1408,7 @@ static int netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb,
 		nlk->netlink_rcv(skb);
 		consume_skb(skb);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
 	}
 	sock_put(sk);
@@ -1295,6 +1428,7 @@ int netlink_unicast(struct sock *ssk, struct sk_buff *skb,
 retry:
 	sk = netlink_getsockbyportid(ssk, portid);
 	if (IS_ERR(sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
 		return PTR_ERR(sk);
 	}
@@ -1302,6 +1436,7 @@ int netlink_unicast(struct sock *ssk, struct sk_buff *skb,
 		return netlink_unicast_kernel(sk, skb, ssk);
 
 	if (sk_filter(sk, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = skb->len;
 		kfree_skb(skb);
 		sock_put(sk);
@@ -1312,7 +1447,9 @@ int netlink_unicast(struct sock *ssk, struct sk_buff *skb,
 	if (err == 1)
 		goto retry;
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return netlink_sendskb(sk, skb);
 }
@@ -1325,12 +1462,14 @@ int netlink_has_listeners(struct sock *sk, unsigned int group)
 
 	BUG_ON(!netlink_is_kernel(sk));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	listeners = rcu_dereference(nl_table[sk->sk_protocol].listeners);
 
 	if (listeners && group - 1 < nl_table[sk->sk_protocol].groups)
 		res = test_bit(group - 1, listeners->masks);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	return res;
@@ -1339,6 +1478,7 @@ EXPORT_SYMBOL_GPL(netlink_has_listeners);
 
 static int netlink_broadcast_deliver(struct sock *sk, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netlink_sock *nlk = nlk_sk(sk);
 
 	if (atomic_read(&sk->sk_rmem_alloc) <= sk->sk_rcvbuf &&
@@ -1347,6 +1487,7 @@ static int netlink_broadcast_deliver(struct sock *sk, struct sk_buff *skb)
 		__netlink_sendskb(sk, skb);
 		return atomic_read(&sk->sk_rmem_alloc) > (sk->sk_rcvbuf >> 1);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -1;
 }
 
@@ -1368,36 +1509,49 @@ struct netlink_broadcast_data {
 static void do_one_broadcast(struct sock *sk,
 				    struct netlink_broadcast_data *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netlink_sock *nlk = nlk_sk(sk);
 	int val;
 
 	if (p->exclude_sk == sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (nlk->portid == p->portid || p->group - 1 >= nlk->ngroups ||
 	    !test_bit(p->group - 1, nlk->groups))
 		return;
 
 	if (!net_eq(sock_net(sk), p->net)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(nlk->flags & NETLINK_F_LISTEN_ALL_NSID))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!peernet_has_id(sock_net(sk), p->net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!file_ns_capable(sk->sk_socket->file, p->net->user_ns,
 				     CAP_NET_BROADCAST))
 			return;
 	}
 
 	if (p->failure) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netlink_overrun(sk);
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock_hold(sk);
 	if (p->skb2 == NULL) {
 		if (skb_shared(p->skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p->skb2 = skb_clone(p->skb, p->allocation);
 		} else {
 			p->skb2 = skb_get(p->skb);
@@ -1409,31 +1563,41 @@ static void do_one_broadcast(struct sock *sk,
 		}
 	}
 	if (p->skb2 == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netlink_overrun(sk);
 		/* Clone failed. Notify ALL listeners. */
 		p->failure = 1;
 		if (nlk->flags & NETLINK_F_BROADCAST_SEND_ERROR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p->delivery_failure = 1;
+}
 		goto out;
 	}
 	if (p->tx_filter && p->tx_filter(sk, p->skb2, p->tx_data)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(p->skb2);
 		p->skb2 = NULL;
 		goto out;
 	}
 	if (sk_filter(sk, p->skb2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(p->skb2);
 		p->skb2 = NULL;
 		goto out;
 	}
 	NETLINK_CB(p->skb2).nsid = peernet2id(sock_net(sk), p->net);
 	if (NETLINK_CB(p->skb2).nsid != NETNSA_NSID_NOT_ASSIGNED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NETLINK_CB(p->skb2).nsid_is_set = true;
+}
 	val = netlink_broadcast_deliver(sk, p->skb2);
 	if (val < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netlink_overrun(sk);
 		if (nlk->flags & NETLINK_F_BROADCAST_SEND_ERROR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p->delivery_failure = 1;
+}
 	} else {
 		p->congested |= val;
 		p->delivered = 1;
@@ -1448,6 +1612,7 @@ int netlink_broadcast_filtered(struct sock *ssk, struct sk_buff *skb, u32 portid
 	int (*filter)(struct sock *dsk, struct sk_buff *skb, void *data),
 	void *filter_data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(ssk);
 	struct netlink_broadcast_data info;
 	struct sock *sk;
@@ -1480,6 +1645,7 @@ int netlink_broadcast_filtered(struct sock *ssk, struct sk_buff *skb, u32 portid
 	netlink_unlock_table();
 
 	if (info.delivery_failure) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(info.skb2);
 		return -ENOBUFS;
 	}
@@ -1487,9 +1653,13 @@ int netlink_broadcast_filtered(struct sock *ssk, struct sk_buff *skb, u32 portid
 
 	if (info.delivered) {
 		if (info.congested && gfpflags_allow_blocking(allocation))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			yield();
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ESRCH;
 }
 EXPORT_SYMBOL(netlink_broadcast_filtered);
@@ -1511,6 +1681,7 @@ struct netlink_set_err_data {
 
 static int do_one_set_err(struct sock *sk, struct netlink_set_err_data *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netlink_sock *nlk = nlk_sk(sk);
 	int ret = 0;
 
@@ -1559,6 +1730,7 @@ int netlink_set_err(struct sock *ssk, u32 portid, u32 group, int code)
 
 	read_lock(&nl_table_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_for_each_bound(sk, &nl_table[ssk->sk_protocol].mc_list)
 		ret += do_one_set_err(sk, &info);
 
@@ -1574,6 +1746,7 @@ static void netlink_update_socket_mc(struct netlink_sock *nlk,
 {
 	int old, new = !!is_new, subscriptions;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	old = test_bit(group - 1, nlk->groups);
 	subscriptions = nlk->subscriptions - old + new;
 	if (new)
@@ -1593,7 +1766,9 @@ static int netlink_setsockopt(struct socket *sock, int level, int optname,
 	int err;
 
 	if (level != SOL_NETLINK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOPROTOOPT;
+}
 
 	if (optlen >= sizeof(int) &&
 	    get_user(val, (unsigned int __user *)optval))
@@ -1605,76 +1780,114 @@ static int netlink_setsockopt(struct socket *sock, int level, int optname,
 			nlk->flags |= NETLINK_F_RECV_PKTINFO;
 		else
 			nlk->flags &= ~NETLINK_F_RECV_PKTINFO;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		break;
 	case NETLINK_ADD_MEMBERSHIP:
 	case NETLINK_DROP_MEMBERSHIP: {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!netlink_allowed(sock, NL_CFG_F_NONROOT_RECV))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = netlink_realloc_groups(sk);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!val || val - 1 >= nlk->ngroups)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (optname == NETLINK_ADD_MEMBERSHIP && nlk->netlink_bind) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = nlk->netlink_bind(sock_net(sk), val);
 			if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return err;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netlink_table_grab();
 		netlink_update_socket_mc(nlk, val,
 					 optname == NETLINK_ADD_MEMBERSHIP);
 		netlink_table_ungrab();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (optname == NETLINK_DROP_MEMBERSHIP && nlk->netlink_unbind)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nlk->netlink_unbind(sock_net(sk), val);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		break;
 	}
 	case NETLINK_BROADCAST_ERROR:
 		if (val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nlk->flags |= NETLINK_F_BROADCAST_SEND_ERROR;
+}
 		else
 			nlk->flags &= ~NETLINK_F_BROADCAST_SEND_ERROR;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		break;
 	case NETLINK_NO_ENOBUFS:
 		if (val) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nlk->flags |= NETLINK_F_RECV_NO_ENOBUFS;
 			clear_bit(NETLINK_S_CONGESTED, &nlk->state);
 			wake_up_interruptible(&nlk->wait);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nlk->flags &= ~NETLINK_F_RECV_NO_ENOBUFS;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		break;
 	case NETLINK_LISTEN_ALL_NSID:
 		if (!ns_capable(sock_net(sk)->user_ns, CAP_NET_BROADCAST))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nlk->flags |= NETLINK_F_LISTEN_ALL_NSID;
+}
 		else
 			nlk->flags &= ~NETLINK_F_LISTEN_ALL_NSID;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		break;
 	case NETLINK_CAP_ACK:
 		if (val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nlk->flags |= NETLINK_F_CAP_ACK;
+}
 		else
 			nlk->flags &= ~NETLINK_F_CAP_ACK;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		break;
 	case NETLINK_EXT_ACK:
 		if (val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			nlk->flags |= NETLINK_F_EXT_ACK;
+}
 		else
 			nlk->flags &= ~NETLINK_F_EXT_ACK;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		break;
 	default:
 		err = -ENOPROTOOPT;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -1686,7 +1899,9 @@ static int netlink_getsockopt(struct socket *sock, int level, int optname,
 	int len, val, err;
 
 	if (level != SOL_NETLINK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOPROTOOPT;
+}
 
 	if (get_user(len, optlen))
 		return -EFAULT;
@@ -1782,6 +1997,7 @@ static void netlink_cmsg_recv_pktinfo(struct msghdr *msg, struct sk_buff *skb)
 static void netlink_cmsg_listen_all_nsid(struct sock *sk, struct msghdr *msg,
 					 struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!NETLINK_CB(skb).nsid_is_set)
 		return;
 
@@ -1802,13 +2018,18 @@ static int netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
 	u32 netlink_skb_flags = 0;
 
 	if (msg->msg_flags&MSG_OOB)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	err = scm_send(sock, msg, &scm, true);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (msg->msg_namelen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		if (addr->nl_family != AF_NETLINK)
 			goto out;
@@ -1818,6 +2039,7 @@ static int netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
 		if ((dst_group || dst_portid) &&
 		    !netlink_allowed(sock, NL_CFG_F_NONROOT_SEND))
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netlink_skb_flags |= NETLINK_SKB_DST;
 	} else {
 		dst_portid = nlk->dst_portid;
@@ -1833,9 +2055,11 @@ static int netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
 		smp_rmb();
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EMSGSIZE;
 	if (len > sk->sk_sndbuf - 32)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENOBUFS;
 	skb = netlink_alloc_large_skb(len, dst_group);
 	if (skb == NULL)
@@ -1848,17 +2072,20 @@ static int netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
 
 	err = -EFAULT;
 	if (memcpy_from_msg(skb_put(skb, len), msg, len)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
 		goto out;
 	}
 
 	err = security_netlink_send(sk, skb);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
 		goto out;
 	}
 
 	if (dst_group) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		refcount_inc(&skb->users);
 		netlink_broadcast(sk, skb, dst_portid, dst_group, GFP_KERNEL);
 	}
@@ -1881,14 +2108,18 @@ static int netlink_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 	int err, ret;
 
 	if (flags&MSG_OOB)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	copied = 0;
 
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (skb == NULL)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	data_skb = skb;
 
 #ifdef CONFIG_COMPAT_NETLINK_MESSAGES
@@ -1923,6 +2154,7 @@ static int netlink_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 	err = skb_copy_datagram_msg(data_skb, 0, msg, copied);
 
 	if (msg->msg_name) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		DECLARE_SOCKADDR(struct sockaddr_nl *, addr, msg->msg_name);
 		addr->nl_family = AF_NETLINK;
 		addr->nl_pad    = 0;
@@ -1934,8 +2166,11 @@ static int netlink_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 	if (nlk->flags & NETLINK_F_RECV_PKTINFO)
 		netlink_cmsg_recv_pktinfo(msg, skb);
 	if (nlk->flags & NETLINK_F_LISTEN_ALL_NSID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netlink_cmsg_listen_all_nsid(sk, msg, skb);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(&scm, 0, sizeof(scm));
 	scm.creds = *NETLINK_CREDS(skb);
 	if (flags & MSG_TRUNC)
@@ -1947,6 +2182,7 @@ static int netlink_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 	    atomic_read(&sk->sk_rmem_alloc) <= sk->sk_rcvbuf / 2) {
 		ret = netlink_dump(sk);
 		if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk->sk_err = -ret;
 			sk->sk_error_report(sk);
 		}
@@ -1960,6 +2196,7 @@ static int netlink_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 
 static void netlink_data_ready(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG();
 }
 
@@ -1983,10 +2220,14 @@ __netlink_kernel_create(struct net *net, int unit, struct module *module,
 	BUG_ON(!nl_table);
 
 	if (unit < 0 || unit >= MAX_LINKS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (sock_create_lite(PF_NETLINK, SOCK_DGRAM, unit, &sock))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (__netlink_create(net, sock, cb_mutex, unit, 1) < 0)
 		goto out_sock_release_nosk;
@@ -1994,7 +2235,9 @@ __netlink_kernel_create(struct net *net, int unit, struct module *module,
 	sk = sock->sk;
 
 	if (!cfg || cfg->groups < 32)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		groups = 32;
+}
 	else
 		groups = cfg->groups;
 
@@ -2009,6 +2252,7 @@ __netlink_kernel_create(struct net *net, int unit, struct module *module,
 	if (netlink_insert(sk, 0))
 		goto out_sock_release;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nlk = nlk_sk(sk);
 	nlk->flags |= NETLINK_F_KERNEL_SOCKET;
 
@@ -2023,7 +2267,9 @@ __netlink_kernel_create(struct net *net, int unit, struct module *module,
 			nl_table[unit].unbind = cfg->unbind;
 			nl_table[unit].flags = cfg->flags;
 			if (cfg->compare)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				nl_table[unit].compare = cfg->compare;
+}
 		}
 		nl_table[unit].registered = 1;
 	} else {
@@ -2048,7 +2294,9 @@ void
 netlink_kernel_release(struct sock *sk)
 {
 	if (sk == NULL || sk->sk_socket == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	sock_release(sk->sk_socket);
 }
@@ -2060,16 +2308,25 @@ int __netlink_change_ngroups(struct sock *sk, unsigned int groups)
 	struct netlink_table *tbl = &nl_table[sk->sk_protocol];
 
 	if (groups < 32)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		groups = 32;
+}
 
 	if (NLGRPSZ(tbl->groups) < NLGRPSZ(groups)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new = kzalloc(sizeof(*new) + NLGRPSZ(groups), GFP_ATOMIC);
 		if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		old = nl_deref_protected(tbl->listeners);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(new->masks, old->masks, NLGRPSZ(tbl->groups));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_assign_pointer(tbl->listeners, new);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_rcu(old, rcu);
 	}
 	tbl->groups = groups;
@@ -2105,6 +2362,7 @@ void __netlink_clear_multicast_users(struct sock *ksk, unsigned int group)
 	struct sock *sk;
 	struct netlink_table *tbl = &nl_table[ksk->sk_protocol];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_for_each_bound(sk, &tbl->mc_list)
 		netlink_update_socket_mc(nlk_sk(sk), group, 0);
 }
@@ -2134,6 +2392,7 @@ EXPORT_SYMBOL(__nlmsg_put);
 
 static int netlink_dump(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct netlink_sock *nlk = nlk_sk(sk);
 	struct netlink_callback *cb;
 	struct sk_buff *skb = NULL;
@@ -2145,6 +2404,7 @@ static int netlink_dump(struct sock *sk)
 
 	mutex_lock(nlk->cb_mutex);
 	if (!nlk->cb_running) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		goto errout_skb;
 	}
@@ -2167,6 +2427,7 @@ static int netlink_dump(struct sock *sk)
 				__GFP_NOWARN | __GFP_NORETRY);
 	}
 	if (!skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alloc_size = alloc_min_size;
 		skb = alloc_skb(alloc_size, GFP_KERNEL);
 	}
@@ -2194,9 +2455,12 @@ static int netlink_dump(struct sock *sk)
 		mutex_unlock(nlk->cb_mutex);
 
 		if (sk_filter(sk, skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree_skb(skb);
+}
 		else
 			__netlink_sendskb(sk, skb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 
@@ -2211,12 +2475,16 @@ static int netlink_dump(struct sock *sk)
 	       sizeof(nlk->dump_done_errno));
 
 	if (sk_filter(sk, skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
+}
 	else
 		__netlink_sendskb(sk, skb);
 
 	if (cb->done)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cb->done(cb);
+}
 
 	nlk->cb_running = false;
 	module = cb->module;
@@ -2245,19 +2513,23 @@ int __netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
 
 	sk = netlink_lookup(sock_net(ssk), ssk->sk_protocol, NETLINK_CB(skb).portid);
 	if (sk == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ECONNREFUSED;
 		goto error_free;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nlk = nlk_sk(sk);
 	mutex_lock(nlk->cb_mutex);
 	/* A dump is in progress... */
 	if (nlk->cb_running) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EBUSY;
 		goto error_unlock;
 	}
 	/* add reference of module which cb->dump belongs to */
 	if (!try_module_get(control->module)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EPROTONOSUPPORT;
 		goto error_unlock;
 	}
@@ -2274,6 +2546,7 @@ int __netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
 	cb->skb = skb;
 
 	if (cb->start) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = cb->start(cb);
 		if (ret)
 			goto error_unlock;
@@ -2289,7 +2562,9 @@ int __netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
 	sock_put(sk);
 
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	/* We successfully started a dump, by returning -EINTR we
 	 * signal not to send ACK even if it was requested.
@@ -2327,20 +2602,31 @@ void netlink_ack(struct sk_buff *in_skb, struct nlmsghdr *nlh, int err,
 		else
 			flags |= NLM_F_CAPPED;
 		if (nlk_has_extack && extack) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (extack->_msg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tlvlen += nla_total_size(strlen(extack->_msg) + 1);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (extack->bad_attr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tlvlen += nla_total_size(sizeof(u32));
+}
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= NLM_F_CAPPED;
 
 		if (nlk_has_extack && extack && extack->cookie_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tlvlen += nla_total_size(extack->cookie_len);
+}
 	}
 
 	if (tlvlen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= NLM_F_ACK_TLVS;
+}
 
 	skb = nlmsg_new(payload + tlvlen, GFP_KERNEL);
 	if (!skb) {
@@ -2350,10 +2636,12 @@ void netlink_ack(struct sk_buff *in_skb, struct nlmsghdr *nlh, int err,
 				    in_skb->sk->sk_protocol,
 				    NETLINK_CB(in_skb).portid);
 		if (sk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk->sk_err = ENOBUFS;
 			sk->sk_error_report(sk);
 			sock_put(sk);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -2364,10 +2652,14 @@ void netlink_ack(struct sk_buff *in_skb, struct nlmsghdr *nlh, int err,
 	memcpy(&errmsg->msg, nlh, payload > sizeof(*errmsg) ? nlh->nlmsg_len : sizeof(*nlh));
 
 	if (nlk_has_extack && extack) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (extack->_msg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				WARN_ON(nla_put_string(skb, NLMSGERR_ATTR_MSG,
 						       extack->_msg));
+}
 			if (extack->bad_attr &&
 			    !WARN_ON((u8 *)extack->bad_attr < in_skb->data ||
 				     (u8 *)extack->bad_attr >= in_skb->data +
@@ -2376,10 +2668,13 @@ void netlink_ack(struct sk_buff *in_skb, struct nlmsghdr *nlh, int err,
 						    (u8 *)extack->bad_attr -
 						    in_skb->data));
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (extack->cookie_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				WARN_ON(nla_put(skb, NLMSGERR_ATTR_COOKIE,
 						extack->cookie_len,
 						extack->cookie));
+}
 		}
 	}
 
@@ -2405,7 +2700,9 @@ int netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *,
 		err = 0;
 
 		if (nlh->nlmsg_len < NLMSG_HDRLEN || skb->len < nlh->nlmsg_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
 		/* Only requests are handled by the kernel */
 		if (!(nlh->nlmsg_flags & NLM_F_REQUEST))
@@ -2430,6 +2727,7 @@ int netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *,
 		skb_pull(skb, msglen);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(netlink_rcv_skb);
@@ -2452,6 +2750,7 @@ int nlmsg_notify(struct sock *sk, struct sk_buff *skb, u32 portid,
 		int exclude_portid = 0;
 
 		if (report) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			refcount_inc(&skb->users);
 			exclude_portid = portid;
 		}
@@ -2465,8 +2764,11 @@ int nlmsg_notify(struct sock *sk, struct sk_buff *skb, u32 portid,
 		int err2;
 
 		err2 = nlmsg_unicast(sk, skb, portid);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!err || err == -ESRCH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = err2;
+}
 	}
 
 	return err;
@@ -2487,6 +2789,7 @@ static int netlink_walk_start(struct nl_seq_iter *iter)
 	err = rhashtable_walk_init(&nl_table[iter->link].hash, &iter->hti,
 				   GFP_KERNEL);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iter->link = MAX_LINKS;
 		return err;
 	}
@@ -2497,6 +2800,7 @@ static int netlink_walk_start(struct nl_seq_iter *iter)
 
 static void netlink_walk_stop(struct nl_seq_iter *iter)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rhashtable_walk_stop(&iter->hti);
 	rhashtable_walk_exit(&iter->hti);
 }
@@ -2513,6 +2817,7 @@ static void *__netlink_seq_next(struct seq_file *seq)
 			nlk = rhashtable_walk_next(&iter->hti);
 
 			if (IS_ERR(nlk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (PTR_ERR(nlk) == -EAGAIN)
 					continue;
 
@@ -2546,7 +2851,9 @@ static void *netlink_seq_start(struct seq_file *seq, loff_t *posp)
 
 	err = netlink_walk_start(iter);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(err);
+}
 
 	for (pos = *posp; pos && obj && !IS_ERR(obj); pos--)
 		obj = __netlink_seq_next(seq);
@@ -2556,6 +2863,7 @@ static void *netlink_seq_start(struct seq_file *seq, loff_t *posp)
 
 static void *netlink_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	++*pos;
 	return __netlink_seq_next(seq);
 }
@@ -2565,7 +2873,9 @@ static void netlink_seq_stop(struct seq_file *seq, void *v)
 	struct nl_seq_iter *iter = seq->private;
 
 	if (iter->link >= MAX_LINKS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	netlink_walk_stop(iter);
 }
@@ -2573,6 +2883,7 @@ static void netlink_seq_stop(struct seq_file *seq, void *v)
 
 static int netlink_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (v == SEQ_START_TOKEN) {
 		seq_puts(seq,
 			 "sk       Eth Pid    Groups   "
@@ -2608,6 +2919,7 @@ static const struct seq_operations netlink_seq_ops = {
 
 static int netlink_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &netlink_seq_ops,
 				sizeof(struct nl_seq_iter));
 }
@@ -2630,6 +2942,7 @@ EXPORT_SYMBOL(netlink_register_notifier);
 
 int netlink_unregister_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return blocking_notifier_chain_unregister(&netlink_chain, nb);
 }
 EXPORT_SYMBOL(netlink_unregister_notifier);
@@ -2665,7 +2978,9 @@ static int __net_init netlink_net_init(struct net *net)
 {
 #ifdef CONFIG_PROC_FS
 	if (!proc_create("netlink", 0, net->proc_net, &netlink_seq_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 #endif
 	return 0;
 }
@@ -2684,7 +2999,9 @@ static void __init netlink_add_usersock_entry(void)
 
 	listeners = kzalloc(sizeof(*listeners) + NLGRPSZ(groups), GFP_KERNEL);
 	if (!listeners)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("netlink_add_usersock_entry: Cannot allocate listeners\n");
+}
 
 	netlink_table_grab();
 
@@ -2727,6 +3044,7 @@ static int __init netlink_proto_init(void)
 	if (err != 0)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(sizeof(struct netlink_skb_parms) > FIELD_SIZEOF(struct sk_buff, cb));
 
 	nl_table = kcalloc(MAX_LINKS, sizeof(*nl_table), GFP_KERNEL);
@@ -2736,13 +3054,16 @@ static int __init netlink_proto_init(void)
 	for (i = 0; i < MAX_LINKS; i++) {
 		if (rhashtable_init(&nl_table[i].hash,
 				    &netlink_rhashtable_params) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			while (--i > 0)
 				rhashtable_destroy(&nl_table[i].hash);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(nl_table);
 			goto panic;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_LIST_HEAD(&netlink_tap_all);
 
 	netlink_add_usersock_entry();
diff --git a/net/netlink/diag.c b/net/netlink/diag.c
index 8faa20b..aa293fc 100644
--- a/net/netlink/diag.c
+++ b/net/netlink/diag.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/module.h>
 
 #include <net/sock.h>
diff --git a/net/netlink/genetlink.c b/net/netlink/genetlink.c
index d444daf..ee493ba 100644
--- a/net/netlink/genetlink.c
+++ b/net/netlink/genetlink.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * NETLINK      Generic Netlink Family
@@ -102,8 +104,11 @@ static const struct genl_family *genl_family_find_byname(char *name)
 
 	idr_for_each_entry(&genl_fam_idr, family, id)
 		if (strcmp(family->name, name) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return family;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -114,8 +119,11 @@ static const struct genl_ops *genl_get_cmd(u8 cmd,
 
 	for (i = 0; i < family->n_ops; i++)
 		if (family->ops[i].cmd == cmd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return &family->ops[i];
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -137,12 +145,14 @@ static int genl_allocate_reserve_groups(int n_groups, int *first_id)
 						mc_groups_longs * BITS_PER_LONG,
 						start);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fits = true;
 		for (i = id;
 		     i < min_t(int, id + n_groups,
 			       mc_groups_longs * BITS_PER_LONG);
 		     i++) {
 			if (test_bit(i, mc_groups)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				start = i;
 				fits = false;
 				break;
@@ -155,20 +165,32 @@ static int genl_allocate_reserve_groups(int n_groups, int *first_id)
 			size_t nlen = new_longs * sizeof(unsigned long);
 
 			if (mc_groups == &mc_group_start) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				new_groups = kzalloc(nlen, GFP_KERNEL);
 				if (!new_groups)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				mc_groups = new_groups;
 				*mc_groups = mc_group_start;
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				new_groups = krealloc(mc_groups, nlen,
 						      GFP_KERNEL);
 				if (!new_groups)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				mc_groups = new_groups;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				for (i = 0; i < BITS_TO_LONGS(n_groups); i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					mc_groups[mc_groups_longs + i] = 0;
+}
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mc_groups_longs = new_longs;
 		}
 	} while (!fits);
@@ -189,15 +211,21 @@ static int genl_validate_assign_mc_groups(struct genl_family *family)
 	bool groups_allocated = false;
 
 	if (!n_groups)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	for (i = 0; i < n_groups; i++) {
 		const struct genl_multicast_group *grp = &family->mcgrps[i];
 
 		if (WARN_ON(grp->name[0] == '\0'))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 		if (WARN_ON(memchr(grp->name, '\0', GENL_NAMSIZ) == NULL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 	}
 
 	/* special-case our own group and hacks */
@@ -205,33 +233,44 @@ static int genl_validate_assign_mc_groups(struct genl_family *family)
 		first_id = GENL_ID_CTRL;
 		BUG_ON(n_groups != 1);
 	} else if (strcmp(family->name, "NET_DM") == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		first_id = 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(n_groups != 1);
 	} else if (family->id == GENL_ID_VFS_DQUOT) {
 		first_id = GENL_ID_VFS_DQUOT;
 		BUG_ON(n_groups != 1);
 	} else if (family->id == GENL_ID_PMCRAID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		first_id = GENL_ID_PMCRAID;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(n_groups != 1);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		groups_allocated = true;
 		err = genl_allocate_reserve_groups(n_groups, &first_id);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	}
 
 	family->mcgrp_offset = first_id;
 
 	/* if still initializing, can't and don't need to to realloc bitmaps */
 	if (!init_net.genl_sock)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (family->netnsok) {
 		struct net *net;
 
 		netlink_table_grab();
 		rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_net_rcu(net) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = __netlink_change_ngroups(net->genl_sock,
 					mc_groups_longs * BITS_PER_LONG);
 			if (err) {
@@ -244,6 +283,7 @@ static int genl_validate_assign_mc_groups(struct genl_family *family)
 				break;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		netlink_table_ungrab();
 	} else {
@@ -252,10 +292,14 @@ static int genl_validate_assign_mc_groups(struct genl_family *family)
 	}
 
 	if (groups_allocated && err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < family->n_mcgrps; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			clear_bit(family->mcgrp_offset + i, mc_groups);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -266,6 +310,7 @@ static void genl_unregister_mc_groups(const struct genl_family *family)
 
 	netlink_table_grab();
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_net_rcu(net) {
 		for (i = 0; i < family->n_mcgrps; i++)
 			__netlink_clear_multicast_users(
@@ -291,19 +336,28 @@ static int genl_validate_ops(const struct genl_family *family)
 	int i, j;
 
 	if (WARN_ON(n_ops && !ops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!n_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	for (i = 0; i < n_ops; i++) {
 		if (ops[i].dumpit == NULL && ops[i].doit == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 		for (j = i + 1; j < n_ops; j++)
 			if (ops[i].cmd == ops[j].cmd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -326,11 +380,14 @@ int genl_register_family(struct genl_family *family)
 
 	err = genl_validate_ops(family);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	genl_lock_all();
 
 	if (genl_family_find_byname(family->name)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EEXIST;
 		goto errout_locked;
 	}
@@ -346,8 +403,10 @@ int genl_register_family(struct genl_family *family)
 		/* and this needs to be special for initial family lookups */
 		start = end = GENL_ID_CTRL;
 	} else if (strcmp(family->name, "pmcraid") == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = end = GENL_ID_PMCRAID;
 	} else if (strcmp(family->name, "VFS_DQUOT") == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = end = GENL_ID_VFS_DQUOT;
 	}
 
@@ -355,6 +414,7 @@ int genl_register_family(struct genl_family *family)
 		family->attrbuf = kmalloc((family->maxattr+1) *
 					sizeof(struct nlattr *), GFP_KERNEL);
 		if (family->attrbuf == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENOMEM;
 			goto errout_locked;
 		}
@@ -364,6 +424,7 @@ int genl_register_family(struct genl_family *family)
 	family->id = idr_alloc(&genl_fam_idr, family,
 			       start, end + 1, GFP_KERNEL);
 	if (family->id < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = family->id;
 		goto errout_locked;
 	}
@@ -380,6 +441,7 @@ int genl_register_family(struct genl_family *family)
 		genl_ctrl_event(CTRL_CMD_NEWMCAST_GRP, family,
 				&family->mcgrps[i], family->mcgrp_offset + i);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 errout_remove:
@@ -401,6 +463,7 @@ EXPORT_SYMBOL(genl_register_family);
  */
 int genl_unregister_family(const struct genl_family *family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	genl_lock_all();
 
 	if (!genl_family_find_byid(family->id)) {
@@ -445,8 +508,11 @@ void *genlmsg_put(struct sk_buff *skb, u32 portid, u32 seq,
 	nlh = nlmsg_put(skb, portid, seq, family->id, GENL_HDRLEN +
 			family->hdrsize, flags);
 	if (nlh == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hdr = nlmsg_data(nlh);
 	hdr->cmd = cmd;
 	hdr->version = family->version;
@@ -463,6 +529,7 @@ static int genl_lock_start(struct netlink_callback *cb)
 	int rc = 0;
 
 	if (ops->start) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		genl_lock();
 		rc = ops->start(cb);
 		genl_unlock();
@@ -489,6 +556,7 @@ static int genl_lock_done(struct netlink_callback *cb)
 	int rc = 0;
 
 	if (ops->done) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		genl_lock();
 		rc = ops->done(cb);
 		genl_unlock();
@@ -510,15 +578,21 @@ static int genl_family_rcv_msg(const struct genl_family *family,
 
 	/* this family doesn't exist in this netns */
 	if (!family->netnsok && !net_eq(net, &init_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	hdrlen = GENL_HDRLEN + family->hdrsize;
 	if (nlh->nlmsg_len < nlmsg_msg_size(hdrlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ops = genl_get_cmd(hdr->cmd, family);
 	if (ops == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	if ((ops->flags & GENL_ADMIN_PERM) &&
 	    !netlink_capable(skb, CAP_NET_ADMIN))
@@ -532,8 +606,11 @@ static int genl_family_rcv_msg(const struct genl_family *family,
 		int rc;
 
 		if (ops->dumpit == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EOPNOTSUPP;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!family->parallel_ops) {
 			struct netlink_dump_control c = {
 				.module = family->module,
@@ -559,17 +636,23 @@ static int genl_family_rcv_msg(const struct genl_family *family,
 			rc = __netlink_dump_start(net->genl_sock, skb, nlh, &c);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
 	}
 
 	if (ops->doit == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	if (family->maxattr && family->parallel_ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		attrbuf = kmalloc((family->maxattr+1) *
 					sizeof(struct nlattr *), GFP_KERNEL);
 		if (attrbuf == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	} else
 		attrbuf = family->attrbuf;
 
@@ -591,6 +674,7 @@ static int genl_family_rcv_msg(const struct genl_family *family,
 	memset(&info.user_ptr, 0, sizeof(info.user_ptr));
 
 	if (family->pre_doit) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = family->pre_doit(ops, skb, &info);
 		if (err)
 			goto out;
@@ -599,12 +683,17 @@ static int genl_family_rcv_msg(const struct genl_family *family,
 	err = ops->doit(skb, &info);
 
 	if (family->post_doit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		family->post_doit(ops, skb, &info);
+}
 
 out:
 	if (family->parallel_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(attrbuf);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -616,7 +705,9 @@ static int genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh,
 
 	family = genl_family_find_byid(nlh->nlmsg_type);
 	if (family == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	if (!family->parallel_ops)
 		genl_lock();
@@ -626,6 +717,7 @@ static int genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh,
 	if (!family->parallel_ops)
 		genl_unlock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -649,7 +741,9 @@ static int ctrl_fill_info(const struct genl_family *family, u32 portid, u32 seq,
 
 	hdr = genlmsg_put(skb, portid, seq, &genl_ctrl, flags, cmd);
 	if (hdr == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	if (nla_put_string(skb, CTRL_ATTR_FAMILY_NAME, family->name) ||
 	    nla_put_u16(skb, CTRL_ATTR_FAMILY_ID, family->id) ||
@@ -740,7 +834,9 @@ static int ctrl_fill_mcgrp_info(const struct genl_family *family,
 
 	hdr = genlmsg_put(skb, portid, seq, &genl_ctrl, flags, cmd);
 	if (hdr == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	if (nla_put_string(skb, CTRL_ATTR_FAMILY_NAME, family->name) ||
 	    nla_put_u16(skb, CTRL_ATTR_FAMILY_ID, family->id))
@@ -778,6 +874,7 @@ static int ctrl_dumpfamily(struct sk_buff *skb, struct netlink_callback *cb)
 	int fams_to_skip = cb->args[0];
 	unsigned int id;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	idr_for_each_entry(&genl_fam_idr, rt, id) {
 		if (!rt->netnsok && !net_eq(net, &init_net))
 			continue;
@@ -805,14 +902,18 @@ static struct sk_buff *ctrl_build_family_msg(const struct genl_family *family,
 
 	skb = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
 	if (skb == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOBUFS);
+}
 
 	err = ctrl_fill_info(family, portid, seq, 0, skb, cmd);
 	if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nlmsg_free(skb);
 		return ERR_PTR(err);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb;
 }
 
@@ -826,15 +927,19 @@ ctrl_build_mcgrp_msg(const struct genl_family *family,
 
 	skb = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
 	if (skb == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOBUFS);
+}
 
 	err = ctrl_fill_mcgrp_info(family, grp, grp_id, portid,
 				   seq, 0, skb, cmd);
 	if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nlmsg_free(skb);
 		return ERR_PTR(err);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb;
 }
 
@@ -851,6 +956,7 @@ static int ctrl_getfamily(struct sk_buff *skb, struct genl_info *info)
 	int err = -EINVAL;
 
 	if (info->attrs[CTRL_ATTR_FAMILY_ID]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		u16 id = nla_get_u16(info->attrs[CTRL_ATTR_FAMILY_ID]);
 		res = genl_family_find_byid(id);
 		err = -ENOENT;
@@ -876,18 +982,25 @@ static int ctrl_getfamily(struct sk_buff *skb, struct genl_info *info)
 	}
 
 	if (res == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!res->netnsok && !net_eq(genl_info_net(info), &init_net)) {
 		/* family doesn't exist here */
 		return -ENOENT;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	msg = ctrl_build_family_msg(res, info->snd_portid, info->snd_seq,
 				    CTRL_CMD_NEWFAMILY);
 	if (IS_ERR(msg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(msg);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return genlmsg_reply(msg, info);
 }
 
@@ -899,7 +1012,9 @@ static int genl_ctrl_event(int event, const struct genl_family *family,
 
 	/* genl is still initialising */
 	if (!init_net.genl_sock)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	switch (event) {
 	case CTRL_CMD_NEWFAMILY:
@@ -917,18 +1032,22 @@ static int genl_ctrl_event(int event, const struct genl_family *family,
 	}
 
 	if (IS_ERR(msg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(msg);
+}
 
 	if (!family->netnsok) {
 		genlmsg_multicast_netns(&genl_ctrl, &init_net, msg, 0,
 					0, GFP_KERNEL);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock();
 		genlmsg_multicast_allns(&genl_ctrl, msg, 0,
 					0, GFP_ATOMIC);
 		rcu_read_unlock();
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -966,6 +1085,7 @@ static int genl_bind(struct net *net, int group)
 
 	down_read(&cb_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	idr_for_each_entry(&genl_fam_idr, f, id) {
 		if (group >= f->mcgrp_offset &&
 		    group < f->mcgrp_offset + f->n_mcgrps) {
@@ -992,6 +1112,7 @@ static void genl_unbind(struct net *net, int group)
 
 	down_read(&cb_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	idr_for_each_entry(&genl_fam_idr, f, id) {
 		if (group >= f->mcgrp_offset &&
 		    group < f->mcgrp_offset + f->n_mcgrps) {
@@ -1018,10 +1139,14 @@ static int __net_init genl_pernet_init(struct net *net)
 	net->genl_sock = netlink_kernel_create(net, NETLINK_GENERIC, &cfg);
 
 	if (!net->genl_sock && net_eq(net, &init_net))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("GENL: Cannot initialize generic netlink\n");
+}
 
 	if (!net->genl_sock)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
@@ -1069,6 +1194,7 @@ subsys_initcall(genl_init);
  */
 struct nlattr **genl_family_attrbuf(const struct genl_family *family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!WARN_ON(family->parallel_ops))
 		lockdep_assert_held(&genl_mutex);
 
@@ -1085,17 +1211,21 @@ static int genlmsg_mcast(struct sk_buff *skb, u32 portid, unsigned long group,
 
 	for_each_net_rcu(net) {
 		if (prev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tmp = skb_clone(skb, flags);
 			if (!tmp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -ENOMEM;
 				goto error;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = nlmsg_multicast(prev->genl_sock, tmp,
 					      portid, group, flags);
 			if (err)
 				goto error;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prev = net;
 	}
 
@@ -1110,7 +1240,9 @@ int genlmsg_multicast_allns(const struct genl_family *family,
 			    unsigned int group, gfp_t flags)
 {
 	if (WARN_ON_ONCE(group >= family->n_mcgrps))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	group = family->mcgrp_offset + group;
 	return genlmsg_mcast(skb, portid, group, flags);
 }
@@ -1119,6 +1251,7 @@ EXPORT_SYMBOL(genlmsg_multicast_allns);
 void genl_notify(const struct genl_family *family, struct sk_buff *skb,
 		 struct genl_info *info, u32 group, gfp_t flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = genl_info_net(info);
 	struct sock *sk = net->genl_sock;
 	int report = 0;
diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index f4a0587..351777d 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket
@@ -251,6 +253,7 @@ static int packet_direct_xmit(struct sk_buff *skb)
 	struct netdev_queue *txq;
 	int ret = NETDEV_TX_BUSY;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(!netif_running(dev) ||
 		     !netif_carrier_ok(dev)))
 		goto drop;
@@ -286,6 +289,7 @@ static struct net_device *packet_cached_dev_get(struct packet_sock *po)
 	struct net_device *dev;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev = rcu_dereference(po->cached_dev);
 	if (likely(dev))
 		dev_hold(dev);
@@ -302,16 +306,19 @@ static void packet_cached_dev_assign(struct packet_sock *po,
 
 static void packet_cached_dev_reset(struct packet_sock *po)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	RCU_INIT_POINTER(po->cached_dev, NULL);
 }
 
 static bool packet_use_direct_xmit(const struct packet_sock *po)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return po->xmit == packet_direct_xmit;
 }
 
 static u16 __packet_pick_tx_queue(struct net_device *dev, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (u16) raw_smp_processor_id() % dev->real_num_tx_queues;
 }
 
@@ -321,6 +328,7 @@ static void packet_pick_tx_queue(struct net_device *dev, struct sk_buff *skb)
 	u16 queue_index;
 
 	if (ops->ndo_select_queue) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		queue_index = ops->ndo_select_queue(dev, skb, NULL,
 						    __packet_pick_tx_queue);
 		queue_index = netdev_cap_txqueue(dev, queue_index);
@@ -337,14 +345,18 @@ static void packet_pick_tx_queue(struct net_device *dev, struct sk_buff *skb)
  */
 static void register_prot_hook(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct packet_sock *po = pkt_sk(sk);
 
 	if (!po->running) {
 		if (po->fanout)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__fanout_link(sk, po);
+}
 		else
 			dev_add_pack(&po->prot_hook);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_hold(sk);
 		po->running = 1;
 	}
@@ -359,18 +371,23 @@ static void register_prot_hook(struct sock *sk)
  */
 static void __unregister_prot_hook(struct sock *sk, bool sync)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct packet_sock *po = pkt_sk(sk);
 
 	po->running = 0;
 
 	if (po->fanout)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__fanout_unlink(sk, po);
+}
 	else
 		__dev_remove_pack(&po->prot_hook);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__sock_put(sk);
 
 	if (sync) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&po->bind_lock);
 		synchronize_net();
 		spin_lock(&po->bind_lock);
@@ -379,6 +396,7 @@ static void __unregister_prot_hook(struct sock *sk, bool sync)
 
 static void unregister_prot_hook(struct sock *sk, bool sync)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct packet_sock *po = pkt_sk(sk);
 
 	if (po->running)
@@ -387,6 +405,7 @@ static void unregister_prot_hook(struct sock *sk, bool sync)
 
 static inline struct page * __pure pgv_to_page(void *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (is_vmalloc_addr(addr))
 		return vmalloc_to_page(addr);
 	return virt_to_page(addr);
@@ -445,6 +464,7 @@ static int __packet_get_status(struct packet_sock *po, void *frame)
 static __u32 tpacket_get_timestamp(struct sk_buff *skb, struct timespec *ts,
 				   unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct skb_shared_hwtstamps *shhwtstamps = skb_hwtstamps(skb);
 
 	if (shhwtstamps &&
@@ -466,7 +486,9 @@ static __u32 __packet_set_timestamp(struct packet_sock *po, void *frame,
 	__u32 ts_status;
 
 	if (!(ts_status = tpacket_get_timestamp(skb, &ts, po->tp_tstamp)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	h.raw = frame;
 	switch (po->tp_version) {
@@ -509,7 +531,9 @@ static void *packet_lookup_frame(struct packet_sock *po,
 		(frame_offset * rb->frame_size);
 
 	if (status != __packet_get_status(po, h.raw))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	return h.raw;
 }
@@ -518,11 +542,13 @@ static void *packet_current_frame(struct packet_sock *po,
 		struct packet_ring_buffer *rb,
 		int status)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return packet_lookup_frame(po, rb, rb->head, status);
 }
 
 static void prb_del_retire_blk_timer(struct tpacket_kbdq_core *pkc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	del_timer_sync(&pkc->retire_blk_timer);
 }
 
@@ -544,6 +570,7 @@ static void prb_init_blk_timer(struct packet_sock *po,
 		struct tpacket_kbdq_core *pkc,
 		void (*func) (unsigned long))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	init_timer(&pkc->retire_blk_timer);
 	pkc->retire_blk_timer.data = (long)po;
 	pkc->retire_blk_timer.function = func;
@@ -569,6 +596,7 @@ static int prb_calc_retire_blk_tmo(struct packet_sock *po,
 	rtnl_lock();
 	dev = __dev_get_by_index(sock_net(&po->sk), po->ifindex);
 	if (unlikely(!dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rtnl_unlock();
 		return DEFAULT_PRB_RETIRE_TOV;
 	}
@@ -603,6 +631,7 @@ static int prb_calc_retire_blk_tmo(struct packet_sock *po,
 static void prb_init_ft_ops(struct tpacket_kbdq_core *p1,
 			union tpacket_req_u *req_u)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	p1->feature_req_word = req_u->req3.tp_feature_req_word;
 }
 
@@ -627,7 +656,9 @@ static void init_prb_bdqc(struct packet_sock *po,
 	p1->last_kactive_blk_num = 0;
 	po->stats.stats3.tp_freeze_q_cnt = 0;
 	if (req_u->req3.tp_retire_blk_tov)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p1->retire_blk_tov = req_u->req3.tp_retire_blk_tov;
+}
 	else
 		p1->retire_blk_tov = prb_calc_retire_blk_tmo(po,
 						req_u->req3.tp_block_size);
@@ -645,6 +676,7 @@ static void init_prb_bdqc(struct packet_sock *po,
  */
 static void _prb_refresh_rx_retire_blk_timer(struct tpacket_kbdq_core *pkc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mod_timer(&pkc->retire_blk_timer,
 			jiffies + pkc->tov_in_jiffies);
 	pkc->last_kactive_blk_num = pkc->kactive_blk_num;
@@ -768,6 +800,7 @@ static void prb_flush_block(struct tpacket_kbdq_core *pkc1,
 
 	/* Now update the block status. */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BLOCK_STATUS(pbd1) = status;
 
 	/* Flush the block header */
@@ -800,7 +833,9 @@ static void prb_close_block(struct tpacket_kbdq_core *pkc1,
 	struct sock *sk = &po->sk;
 
 	if (po->stats.stats3.tp_drops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		status |= TP_STATUS_LOSING;
+}
 
 	last_pkt = (struct tpacket3_hdr *)pkc1->prev;
 	last_pkt->tp_next_offset = 0;
@@ -833,6 +868,7 @@ static void prb_close_block(struct tpacket_kbdq_core *pkc1,
 
 static void prb_thaw_queue(struct tpacket_kbdq_core *pkc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pkc->reset_pending_on_curr_blk = 0;
 }
 
@@ -906,6 +942,7 @@ static void prb_open_block(struct tpacket_kbdq_core *pkc1,
 static void prb_freeze_queue(struct tpacket_kbdq_core *pkc,
 				  struct packet_sock *po)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pkc->reset_pending_on_curr_blk = 1;
 	po->stats.stats3.tp_freeze_q_cnt++;
 }
@@ -930,6 +967,7 @@ static void *prb_dispatch_next_block(struct tpacket_kbdq_core *pkc,
 
 	/* 2. If this block is currently in_use then freeze the queue */
 	if (TP_STATUS_USER & BLOCK_STATUS(pbd)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prb_freeze_queue(pkc, po);
 		return NULL;
 	}
@@ -972,11 +1010,13 @@ static void prb_retire_current_block(struct tpacket_kbdq_core *pkc,
 
 static int prb_curr_blk_in_use(struct tpacket_block_desc *pbd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return TP_STATUS_USER & BLOCK_STATUS(pbd);
 }
 
 static int prb_queue_frozen(struct tpacket_kbdq_core *pkc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pkc->reset_pending_on_curr_blk;
 }
 
@@ -989,18 +1029,21 @@ static void prb_clear_blk_fill_status(struct packet_ring_buffer *rb)
 static void prb_fill_rxhash(struct tpacket_kbdq_core *pkc,
 			struct tpacket3_hdr *ppd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ppd->hv1.tp_rxhash = skb_get_hash(pkc->skb);
 }
 
 static void prb_clear_rxhash(struct tpacket_kbdq_core *pkc,
 			struct tpacket3_hdr *ppd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ppd->hv1.tp_rxhash = 0;
 }
 
 static void prb_fill_vlan_info(struct tpacket_kbdq_core *pkc,
 			struct tpacket3_hdr *ppd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (skb_vlan_tag_present(pkc->skb)) {
 		ppd->hv1.tp_vlan_tci = skb_vlan_tag_get(pkc->skb);
 		ppd->hv1.tp_vlan_tpid = ntohs(pkc->skb->vlan_proto);
@@ -1015,6 +1058,7 @@ static void prb_fill_vlan_info(struct tpacket_kbdq_core *pkc,
 static void prb_run_all_ft_ops(struct tpacket_kbdq_core *pkc,
 			struct tpacket3_hdr *ppd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ppd->hv1.tp_padding = 0;
 	prb_fill_vlan_info(pkc, ppd);
 
@@ -1133,7 +1177,9 @@ static void *prb_lookup_block(struct packet_sock *po,
 	struct tpacket_block_desc *pbd = GET_PBLOCK_DESC(pkc, idx);
 
 	if (status != BLOCK_STATUS(pbd))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	return pbd;
 }
 
@@ -1141,7 +1187,9 @@ static int prb_previous_blk_num(struct packet_ring_buffer *rb)
 {
 	unsigned int prev;
 	if (rb->prb_bdqc.kactive_blk_num)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prev = rb->prb_bdqc.kactive_blk_num-1;
+}
 	else
 		prev = rb->prb_bdqc.knum_blocks-1;
 	return prev;
@@ -1152,6 +1200,7 @@ static void *__prb_previous_block(struct packet_sock *po,
 					 struct packet_ring_buffer *rb,
 					 int status)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int previous = prb_previous_blk_num(rb);
 	return prb_lookup_block(po, rb, previous, status);
 }
@@ -1160,6 +1209,7 @@ static void *packet_previous_rx_frame(struct packet_sock *po,
 					     struct packet_ring_buffer *rb,
 					     int status)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (po->tp_version <= TPACKET_V2)
 		return packet_previous_frame(po, rb, status);
 
@@ -1169,6 +1219,7 @@ static void *packet_previous_rx_frame(struct packet_sock *po,
 static void packet_increment_rx_head(struct packet_sock *po,
 					    struct packet_ring_buffer *rb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (po->tp_version) {
 	case TPACKET_V1:
 	case TPACKET_V2:
@@ -1185,22 +1236,26 @@ static void *packet_previous_frame(struct packet_sock *po,
 		struct packet_ring_buffer *rb,
 		int status)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int previous = rb->head ? rb->head - 1 : rb->frame_max;
 	return packet_lookup_frame(po, rb, previous, status);
 }
 
 static void packet_increment_head(struct packet_ring_buffer *buff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	buff->head = buff->head != buff->frame_max ? buff->head+1 : 0;
 }
 
 static void packet_inc_pending(struct packet_ring_buffer *rb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	this_cpu_inc(*rb->pending_refcnt);
 }
 
 static void packet_dec_pending(struct packet_ring_buffer *rb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	this_cpu_dec(*rb->pending_refcnt);
 }
 
@@ -1211,7 +1266,9 @@ static unsigned int packet_read_pending(const struct packet_ring_buffer *rb)
 
 	/* We don't use pending refcount in rx_ring. */
 	if (rb->pending_refcnt == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	for_each_possible_cpu(cpu)
 		refcnt += *per_cpu_ptr(rb->pending_refcnt, cpu);
@@ -1225,7 +1282,9 @@ static int packet_alloc_pending(struct packet_sock *po)
 
 	po->tx_ring.pending_refcnt = alloc_percpu(unsigned int);
 	if (unlikely(po->tx_ring.pending_refcnt == NULL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOBUFS;
+}
 
 	return 0;
 }
@@ -1247,7 +1306,9 @@ static bool __tpacket_has_room(struct packet_sock *po, int pow_off)
 	len = po->rx_ring.frame_max + 1;
 	idx = po->rx_ring.head;
 	if (pow_off)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		idx += len >> pow_off;
+}
 	if (idx >= len)
 		idx -= len;
 	return packet_lookup_frame(po, &po->rx_ring, idx, TP_STATUS_KERNEL);
@@ -1260,7 +1321,9 @@ static bool __tpacket_v3_has_room(struct packet_sock *po, int pow_off)
 	len = po->rx_ring.prb_bdqc.knum_blocks;
 	idx = po->rx_ring.prb_bdqc.kactive_blk_num;
 	if (pow_off)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		idx += len >> pow_off;
+}
 	if (idx >= len)
 		idx -= len;
 	return prb_lookup_block(po, &po->rx_ring, idx, TP_STATUS_KERNEL);
@@ -1272,6 +1335,7 @@ static int __packet_rcv_has_room(struct packet_sock *po, struct sk_buff *skb)
 	int ret = ROOM_NONE;
 
 	if (po->prot_hook.func != tpacket_rcv) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int avail = sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)
 					  - (skb ? skb->truesize : 0);
 		if (avail > (sk->sk_rcvbuf >> ROOM_POW_OFF))
@@ -1306,7 +1370,9 @@ static int packet_rcv_has_room(struct packet_sock *po, struct sk_buff *skb)
 	ret = __packet_rcv_has_room(po, skb);
 	has_room = ret == ROOM_NORMAL;
 	if (po->pressure == has_room)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		po->pressure = !has_room;
+}
 	spin_unlock_bh(&po->sk.sk_receive_queue.lock);
 
 	return ret;
@@ -1320,10 +1386,12 @@ static void packet_sock_destruct(struct sock *sk)
 	WARN_ON(refcount_read(&sk->sk_wmem_alloc));
 
 	if (!sock_flag(sk, SOCK_DEAD)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Attempt to release alive packet socket: %p\n", sk);
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_refcnt_debug_dec(sk);
 }
 
@@ -1333,6 +1401,7 @@ static bool fanout_flow_is_huge(struct packet_sock *po, struct sk_buff *skb)
 	int i, count = 0;
 
 	rxhash = skb_get_hash(skb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ROLLOVER_HLEN; i++)
 		if (po->rollover->history[i] == rxhash)
 			count++;
@@ -1345,6 +1414,7 @@ static unsigned int fanout_demux_hash(struct packet_fanout *f,
 				      struct sk_buff *skb,
 				      unsigned int num)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return reciprocal_scale(__skb_get_hash_symmetric(skb), num);
 }
 
@@ -1352,6 +1422,7 @@ static unsigned int fanout_demux_lb(struct packet_fanout *f,
 				    struct sk_buff *skb,
 				    unsigned int num)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int val = atomic_inc_return(&f->rr_cur);
 
 	return val % num;
@@ -1361,6 +1432,7 @@ static unsigned int fanout_demux_cpu(struct packet_fanout *f,
 				     struct sk_buff *skb,
 				     unsigned int num)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return smp_processor_id() % num;
 }
 
@@ -1368,6 +1440,7 @@ static unsigned int fanout_demux_rnd(struct packet_fanout *f,
 				     struct sk_buff *skb,
 				     unsigned int num)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return prandom_u32_max(num);
 }
 
@@ -1382,6 +1455,7 @@ static unsigned int fanout_demux_rollover(struct packet_fanout *f,
 	po = pkt_sk(f->arr[idx]);
 
 	if (try_self) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		room = packet_rcv_has_room(po, skb);
 		if (room == ROOM_NORMAL ||
 		    (room == ROOM_LOW && !fanout_flow_is_huge(po, skb)))
@@ -1414,6 +1488,7 @@ static unsigned int fanout_demux_qm(struct packet_fanout *f,
 				    struct sk_buff *skb,
 				    unsigned int num)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb_get_queue_mapping(skb) % num;
 }
 
@@ -1425,6 +1500,7 @@ static unsigned int fanout_demux_bpf(struct packet_fanout *f,
 	unsigned int ret = 0;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	prog = rcu_dereference(f->bpf_prog);
 	if (prog)
 		ret = bpf_prog_run_clear_cb(prog, skb) % num;
@@ -1435,6 +1511,7 @@ static unsigned int fanout_demux_bpf(struct packet_fanout *f,
 
 static bool fanout_has_flag(struct packet_fanout *f, u16 flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return f->flags & (flag >> 8);
 }
 
@@ -1442,6 +1519,7 @@ static int packet_rcv_fanout(struct sk_buff *skb, struct net_device *dev,
 			     struct packet_type *pt, struct net_device *orig_dev)
 {
 	struct packet_fanout *f = pt->af_packet_priv;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int num = READ_ONCE(f->num_members);
 	struct net *net = read_pnet(&f->net);
 	struct packet_sock *po;
@@ -1504,7 +1582,9 @@ static void __fanout_link(struct sock *sk, struct packet_sock *po)
 	smp_wmb();
 	f->num_members++;
 	if (f->num_members == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_add_pack(&f->prot_hook);
+}
 	spin_unlock(&f->lock);
 }
 
@@ -1514,6 +1594,7 @@ static void __fanout_unlink(struct sock *sk, struct packet_sock *po)
 	int i;
 
 	spin_lock(&f->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < f->num_members; i++) {
 		if (f->arr[i] == sk)
 			break;
@@ -1528,6 +1609,7 @@ static void __fanout_unlink(struct sock *sk, struct packet_sock *po)
 
 static bool match_fanout_group(struct packet_type *ptype, struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sk->sk_family != PF_PACKET)
 		return false;
 
@@ -1536,6 +1618,7 @@ static bool match_fanout_group(struct packet_type *ptype, struct sock *sk)
 
 static void fanout_init_data(struct packet_fanout *f)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (f->type) {
 	case PACKET_FANOUT_LB:
 		atomic_set(&f->rr_cur, 0);
@@ -1552,6 +1635,7 @@ static void __fanout_set_data_bpf(struct packet_fanout *f, struct bpf_prog *new)
 	struct bpf_prog *old;
 
 	spin_lock(&f->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	old = rcu_dereference_protected(f->bpf_prog, lockdep_is_held(&f->lock));
 	rcu_assign_pointer(f->bpf_prog, new);
 	spin_unlock(&f->lock);
@@ -1570,7 +1654,9 @@ static int fanout_set_data_cbpf(struct packet_sock *po, char __user *data,
 	int ret;
 
 	if (sock_flag(&po->sk, SOCK_FILTER_LOCKED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 	if (len != sizeof(fprog))
 		return -EINVAL;
 	if (copy_from_user(&fprog, data, len))
@@ -1591,7 +1677,9 @@ static int fanout_set_data_ebpf(struct packet_sock *po, char __user *data,
 	u32 fd;
 
 	if (sock_flag(&po->sk, SOCK_FILTER_LOCKED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 	if (len != sizeof(fd))
 		return -EINVAL;
 	if (copy_from_user(&fd, data, len))
@@ -1608,6 +1696,7 @@ static int fanout_set_data_ebpf(struct packet_sock *po, char __user *data,
 static int fanout_set_data(struct packet_sock *po, char __user *data,
 			   unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (po->fanout->type) {
 	case PACKET_FANOUT_CBPF:
 		return fanout_set_data_cbpf(po, data, len);
@@ -1620,6 +1709,7 @@ static int fanout_set_data(struct packet_sock *po, char __user *data,
 
 static void fanout_release_data(struct packet_fanout *f)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (f->type) {
 	case PACKET_FANOUT_CBPF:
 	case PACKET_FANOUT_EBPF:
@@ -1631,6 +1721,7 @@ static bool __fanout_id_is_free(struct sock *sk, u16 candidate_id)
 {
 	struct packet_fanout *f;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(f, &fanout_list, list) {
 		if (f->id == candidate_id &&
 		    read_pnet(&f->net) == sock_net(sk)) {
@@ -1645,6 +1736,7 @@ static bool fanout_find_new_id(struct sock *sk, u16 *new_id)
 	u16 id = fanout_next_id;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (__fanout_id_is_free(sk, id)) {
 			*new_id = id;
 			fanout_next_id = id + 1;
@@ -1781,16 +1873,20 @@ static int fanout_add(struct sock *sk, u16 id, u16 type_flags)
  */
 static struct packet_fanout *fanout_release(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct packet_sock *po = pkt_sk(sk);
 	struct packet_fanout *f;
 
 	mutex_lock(&fanout_mutex);
 	f = po->fanout;
 	if (f) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		po->fanout = NULL;
 
 		if (refcount_dec_and_test(&f->sk_ref))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			list_del(&f->list);
+}
 		else
 			f = NULL;
 	}
@@ -1844,6 +1940,7 @@ static int packet_rcv_spkt(struct sk_buff *skb, struct net_device *dev,
 	if (skb->pkt_type == PACKET_LOOPBACK)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!net_eq(dev_net(dev), sock_net(sk)))
 		goto out;
 
@@ -1893,6 +1990,7 @@ static int packet_sendmsg_spkt(struct socket *sock, struct msghdr *msg,
 			       size_t len)
 {
 	struct sock *sk = sock->sk;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DECLARE_SOCKADDR(struct sockaddr_pkt *, saddr, msg->msg_name);
 	struct sk_buff *skb = NULL;
 	struct net_device *dev;
@@ -2025,6 +2123,7 @@ static unsigned int run_filter(struct sk_buff *skb,
 	filter = rcu_dereference(sk->sk_filter);
 	if (filter != NULL)
 		res = bpf_prog_run_clear_cb(filter->prog, skb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	return res;
@@ -2036,7 +2135,9 @@ static int packet_rcv_vnet(struct msghdr *msg, const struct sk_buff *skb,
 	struct virtio_net_hdr vnet_hdr;
 
 	if (*len < sizeof(vnet_hdr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	*len -= sizeof(vnet_hdr);
 
 	if (virtio_net_hdr_from_skb(skb, &vnet_hdr, vio_le(), true))
@@ -2088,7 +2189,9 @@ static int packet_rcv(struct sk_buff *skb, struct net_device *dev,
 		 * never delivered to user.
 		 */
 		if (sk->sk_type != SOCK_DGRAM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb_push(skb, skb->data - skb_mac_header(skb));
+}
 		else if (skb->pkt_type == PACKET_OUTGOING) {
 			/* Special case: outgoing packets have ll header at head */
 			skb_pull(skb, skb_network_offset(skb));
@@ -2101,31 +2204,41 @@ static int packet_rcv(struct sk_buff *skb, struct net_device *dev,
 	if (!res)
 		goto drop_n_restore;
 	if (snaplen > res)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		snaplen = res;
+}
 
 	if (atomic_read(&sk->sk_rmem_alloc) >= sk->sk_rcvbuf)
 		goto drop_n_acct;
 
 	if (skb_shared(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct sk_buff *nskb = skb_clone(skb, GFP_ATOMIC);
 		if (nskb == NULL)
 			goto drop_n_acct;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (skb_head != skb->data) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb->data = skb_head;
 			skb->len = skb_len;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		consume_skb(skb);
 		skb = nskb;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock_skb_cb_check_size(sizeof(*PACKET_SKB_CB(skb)) + MAX_ADDR_LEN - 8);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sll = &PACKET_SKB_CB(skb)->sa.ll;
 	sll->sll_hatype = dev->type;
 	sll->sll_pkttype = skb->pkt_type;
 	if (unlikely(po->origdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sll->sll_ifindex = orig_dev->ifindex;
+}
 	else
 		sll->sll_ifindex = dev->ifindex;
 
@@ -2163,14 +2276,18 @@ static int packet_rcv(struct sk_buff *skb, struct net_device *dev,
 
 drop_n_restore:
 	if (skb_head != skb->data && skb_shared(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb->data = skb_head;
 		skb->len = skb_len;
 	}
 drop:
 	if (!is_drop_n_account)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		consume_skb(skb);
+}
 	else
 		kfree_skb(skb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -2844,6 +2961,7 @@ static int packet_snd(struct socket *sock, struct msghdr *msg, size_t len)
 	 */
 
 	if (likely(saddr == NULL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev	= packet_cached_dev_get(po);
 		proto	= po->num;
 		addr	= NULL;
@@ -2868,25 +2986,33 @@ static int packet_snd(struct socket *sock, struct msghdr *msg, size_t len)
 	sockc.tsflags = sk->sk_tsflags;
 	sockc.mark = sk->sk_mark;
 	if (msg->msg_controllen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sock_cmsg_send(sk, msg, &sockc);
 		if (unlikely(err))
 			goto out_unlock;
 	}
 
 	if (sock->type == SOCK_RAW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		reserve = dev->hard_header_len;
+}
 	if (po->has_vnet_hdr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = packet_snd_vnet_parse(msg, &len, &vnet_hdr);
 		if (err)
 			goto out_unlock;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		has_vnet_hdr = true;
 	}
 
 	if (unlikely(sock_flag(sk, SOCK_NOFCS))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!netif_supports_nofcs(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EPROTONOSUPPORT;
 			goto out_unlock;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		extra_len = 4; /* We're doing our own CRC */
 	}
 
@@ -2921,6 +3047,7 @@ static int packet_snd(struct socket *sock, struct msghdr *msg, size_t len)
 
 	if (sock->type == SOCK_RAW &&
 	    !dev_validate_header(dev, skb->data, len)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		goto out_free;
 	}
@@ -2929,6 +3056,7 @@ static int packet_snd(struct socket *sock, struct msghdr *msg, size_t len)
 
 	if (!vnet_hdr.gso_type && (len > dev->mtu + reserve + extra_len) &&
 	    !packet_extra_vlan_len_allowed(dev, skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EMSGSIZE;
 		goto out_free;
 	}
@@ -2939,21 +3067,26 @@ static int packet_snd(struct socket *sock, struct msghdr *msg, size_t len)
 	skb->mark = sockc.mark;
 
 	if (has_vnet_hdr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = virtio_net_hdr_to_skb(skb, &vnet_hdr, vio_le());
 		if (err)
 			goto out_free;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len += sizeof(vnet_hdr);
 	}
 
 	skb_probe_transport_header(skb, reserve);
 
 	if (unlikely(extra_len == 4))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb->no_fcs = 1;
+}
 
 	err = po->xmit(skb);
 	if (err > 0 && (err = net_xmit_errno(err)) != 0)
 		goto out_unlock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dev_put(dev);
 
 	return len;
@@ -2962,7 +3095,9 @@ static int packet_snd(struct socket *sock, struct msghdr *msg, size_t len)
 	kfree_skb(skb);
 out_unlock:
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_put(dev);
+}
 out:
 	return err;
 }
@@ -2973,7 +3108,9 @@ static int packet_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
 	struct packet_sock *po = pkt_sk(sk);
 
 	if (po->tx_ring.pg_vec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return tpacket_snd(po, msg);
+}
 	else
 		return packet_snd(sock, msg, len);
 }
@@ -2992,8 +3129,11 @@ static int packet_release(struct socket *sock)
 	union tpacket_req_u req_u;
 
 	if (!sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	net = sock_net(sk);
 	po = pkt_sk(sk);
 
@@ -3010,19 +3150,23 @@ static int packet_release(struct socket *sock)
 	packet_cached_dev_reset(po);
 
 	if (po->prot_hook.dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_put(po->prot_hook.dev);
 		po->prot_hook.dev = NULL;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&po->bind_lock);
 
 	packet_flush_mclist(sk);
 
 	if (po->rx_ring.pg_vec) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(&req_u, 0, sizeof(req_u));
 		packet_set_ring(sk, &req_u, 1, 0);
 	}
 
 	if (po->tx_ring.pg_vec) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(&req_u, 0, sizeof(req_u));
 		packet_set_ring(sk, &req_u, 1, 1);
 	}
@@ -3032,6 +3176,7 @@ static int packet_release(struct socket *sock)
 	synchronize_net();
 
 	if (f) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(po->rollover);
 		fanout_release_data(f);
 		kfree(f);
@@ -3046,6 +3191,7 @@ static int packet_release(struct socket *sock)
 
 	skb_queue_purge(&sk->sk_receive_queue);
 	packet_free_pending(po);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_refcnt_debug_release(sk);
 
 	sock_put(sk);
@@ -3059,6 +3205,7 @@ static int packet_release(struct socket *sock)
 static int packet_do_bind(struct sock *sk, const char *name, int ifindex,
 			  __be16 proto)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct packet_sock *po = pkt_sk(sk);
 	struct net_device *dev_curr;
 	__be16 proto_curr;
@@ -3072,26 +3219,32 @@ static int packet_do_bind(struct sock *sk, const char *name, int ifindex,
 	rcu_read_lock();
 
 	if (po->fanout) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EINVAL;
 		goto out_unlock;
 	}
 
 	if (name) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev = dev_get_by_name_rcu(sock_net(sk), name);
 		if (!dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ENODEV;
 			goto out_unlock;
 		}
 	} else if (ifindex) {
 		dev = dev_get_by_index_rcu(sock_net(sk), ifindex);
 		if (!dev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ENODEV;
 			goto out_unlock;
 		}
 	}
 
 	if (dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_hold(dev);
+}
 
 	proto_curr = po->prot_hook.type;
 	dev_curr = po->prot_hook.dev;
@@ -3100,6 +3253,7 @@ static int packet_do_bind(struct sock *sk, const char *name, int ifindex,
 
 	if (need_rehook) {
 		if (po->running) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock();
 			/* prevents packet_notifier() from calling
 			 * register_prot_hook()
@@ -3118,6 +3272,7 @@ static int packet_do_bind(struct sock *sk, const char *name, int ifindex,
 		po->prot_hook.type = proto;
 
 		if (unlikely(unlisted)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_put(dev);
 			po->prot_hook.dev = NULL;
 			po->ifindex = -1;
@@ -3129,7 +3284,9 @@ static int packet_do_bind(struct sock *sk, const char *name, int ifindex,
 		}
 	}
 	if (dev_curr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_put(dev_curr);
+}
 
 	if (proto == 0 || !need_rehook)
 		goto out_unlock;
@@ -3137,9 +3294,12 @@ static int packet_do_bind(struct sock *sk, const char *name, int ifindex,
 	if (!unlisted && (!dev || (dev->flags & IFF_UP))) {
 		register_prot_hook(sk);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk->sk_err = ENETDOWN;
 		if (!sock_flag(sk, SOCK_DEAD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk->sk_error_report(sk);
+}
 	}
 
 out_unlock:
@@ -3164,7 +3324,9 @@ static int packet_bind_spkt(struct socket *sock, struct sockaddr *uaddr,
 	 */
 
 	if (addr_len != sizeof(struct sockaddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	/* uaddr->sa_data comes from the userspace, it's not guaranteed to be
 	 * zero-terminated.
 	 */
@@ -3184,9 +3346,13 @@ static int packet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len
 	 */
 
 	if (addr_len < sizeof(struct sockaddr_ll))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (sll->sll_family != AF_PACKET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	return packet_do_bind(sk, NULL, sll->sll_ifindex,
 			      sll->sll_protocol ? : pkt_sk(sk)->num);
@@ -3211,7 +3377,9 @@ static int packet_create(struct net *net, struct socket *sock, int protocol,
 	int err;
 
 	if (!ns_capable(net->user_ns, CAP_NET_RAW))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 	if (sock->type != SOCK_DGRAM && sock->type != SOCK_RAW &&
 	    sock->type != SOCK_PACKET)
 		return -ESOCKTNOSUPPORT;
@@ -3225,7 +3393,9 @@ static int packet_create(struct net *net, struct socket *sock, int protocol,
 
 	sock->ops = &packet_ops;
 	if (sock->type == SOCK_PACKET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock->ops = &packet_ops_spkt;
+}
 
 	sock_init_data(sock, sk);
 
@@ -3238,9 +3408,11 @@ static int packet_create(struct net *net, struct socket *sock, int protocol,
 	if (err)
 		goto out2;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	packet_cached_dev_reset(po);
 
 	sk->sk_destruct = packet_sock_destruct;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_refcnt_debug_inc(sk);
 
 	/*
@@ -3253,7 +3425,9 @@ static int packet_create(struct net *net, struct socket *sock, int protocol,
 	po->prot_hook.func = packet_rcv;
 
 	if (sock->type == SOCK_PACKET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		po->prot_hook.func = packet_rcv_spkt;
+}
 
 	po->prot_hook.af_packet_priv = sk;
 
@@ -3302,6 +3476,7 @@ static int packet_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 #endif
 
 	if (flags & MSG_ERRQUEUE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sock_recv_errqueue(sk, msg, len,
 					 SOL_PACKET, PACKET_TX_TIMESTAMP);
 		goto out;
@@ -3328,12 +3503,16 @@ static int packet_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 		goto out;
 
 	if (pkt_sk(sk)->pressure)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		packet_rcv_has_room(pkt_sk(sk), NULL);
+}
 
 	if (pkt_sk(sk)->has_vnet_hdr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = packet_rcv_vnet(msg, skb, &len);
 		if (err)
 			goto out_free;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vnet_hdr_len = sizeof(struct virtio_net_hdr);
 	}
 
@@ -3343,6 +3522,7 @@ static int packet_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 	 */
 	copied = skb->len;
 	if (copied > len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		copied = len;
 		msg->msg_flags |= MSG_TRUNC;
 	}
@@ -3367,7 +3547,9 @@ static int packet_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 		 * in, we fill it in now.
 		 */
 		if (sock->type == SOCK_PACKET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__sockaddr_check_size(sizeof(struct sockaddr_pkt));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			msg->msg_namelen = sizeof(struct sockaddr_pkt);
 		} else {
 			struct sockaddr_ll *sll = &PACKET_SKB_CB(skb)->sa.ll;
@@ -3375,6 +3557,7 @@ static int packet_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 			msg->msg_namelen = sll->sll_halen +
 				offsetof(struct sockaddr_ll, sll_addr);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(msg->msg_name, &PACKET_SKB_CB(skb)->sa,
 		       msg->msg_namelen);
 	}
@@ -3384,7 +3567,9 @@ static int packet_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 
 		aux.tp_status = TP_STATUS_USER;
 		if (skb->ip_summed == CHECKSUM_PARTIAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			aux.tp_status |= TP_STATUS_CSUMNOTREADY;
+}
 		else if (skb->pkt_type != PACKET_OUTGOING &&
 			 (skb->ip_summed == CHECKSUM_COMPLETE ||
 			  skb_csum_unnecessary(skb)))
@@ -3395,7 +3580,9 @@ static int packet_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 		aux.tp_mac = 0;
 		aux.tp_net = skb_network_offset(skb);
 		if (skb_vlan_tag_present(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			aux.tp_vlan_tci = skb_vlan_tag_get(skb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			aux.tp_vlan_tpid = ntohs(skb->vlan_proto);
 			aux.tp_status |= TP_STATUS_VLAN_VALID | TP_STATUS_VLAN_TPID_VALID;
 		} else {
@@ -3424,7 +3611,9 @@ static int packet_getname_spkt(struct socket *sock, struct sockaddr *uaddr,
 	struct sock *sk	= sock->sk;
 
 	if (peer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	uaddr->sa_family = AF_PACKET;
 	memset(uaddr->sa_data, 0, sizeof(uaddr->sa_data));
@@ -3444,6 +3633,7 @@ static int packet_getname(struct socket *sock, struct sockaddr *uaddr,
 	struct net_device *dev;
 	struct sock *sk = sock->sk;
 	struct packet_sock *po = pkt_sk(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DECLARE_SOCKADDR(struct sockaddr_ll *, sll, uaddr);
 
 	if (peer)
@@ -3472,6 +3662,7 @@ static int packet_getname(struct socket *sock, struct sockaddr *uaddr,
 static int packet_dev_mc(struct net_device *dev, struct packet_mclist *i,
 			 int what)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (i->type) {
 	case PACKET_MR_MULTICAST:
 		if (i->alen != dev->addr_len)
@@ -3504,6 +3695,7 @@ static void packet_dev_mclist_delete(struct net_device *dev,
 {
 	struct packet_mclist *ml;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((ml = *mlp) != NULL) {
 		if (ml->ifindex == dev->ifindex) {
 			packet_dev_mc(dev, ml, -1);
@@ -3516,6 +3708,7 @@ static void packet_dev_mclist_delete(struct net_device *dev,
 
 static int packet_mc_add(struct sock *sk, struct packet_mreq_max *mreq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct packet_sock *po = pkt_sk(sk);
 	struct packet_mclist *ml, *i;
 	struct net_device *dev;
@@ -3575,6 +3768,7 @@ static int packet_mc_drop(struct sock *sk, struct packet_mreq_max *mreq)
 
 	rtnl_lock();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (mlp = &pkt_sk(sk)->mclist; (ml = *mlp) != NULL; mlp = &ml->next) {
 		if (ml->ifindex == mreq->mr_ifindex &&
 		    ml->type == mreq->mr_type &&
@@ -3597,22 +3791,31 @@ static int packet_mc_drop(struct sock *sk, struct packet_mreq_max *mreq)
 
 static void packet_flush_mclist(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct packet_sock *po = pkt_sk(sk);
 	struct packet_mclist *ml;
 
 	if (!po->mclist)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtnl_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((ml = po->mclist) != NULL) {
 		struct net_device *dev;
 
 		po->mclist = ml->next;
 		dev = __dev_get_by_index(sock_net(sk), ml->ifindex);
 		if (dev != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			packet_dev_mc(dev, ml, -1);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(ml);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rtnl_unlock();
 }
 
@@ -3624,7 +3827,9 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 	int ret;
 
 	if (level != SOL_PACKET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOPROTOOPT;
+}
 
 	switch (optname) {
 	case PACKET_ADD_MEMBERSHIP:
@@ -3634,17 +3839,32 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		int len = optlen;
 		memset(&mreq, 0, sizeof(mreq));
 		if (len < sizeof(struct packet_mreq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (len > sizeof(mreq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			len = sizeof(mreq);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&mreq, optval, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (len < (mreq.mr_alen + offsetof(struct packet_mreq, mr_address)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (optname == PACKET_ADD_MEMBERSHIP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = packet_mc_add(sk, &mreq);
+}
 		else
 			ret = packet_mc_drop(sk, &mreq);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	}
 
@@ -3664,10 +3884,17 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 			len = sizeof(req_u.req3);
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (optlen < len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&req_u.req, optval, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return packet_set_ring(sk, &req_u, 0,
 			optname == PACKET_TX_RING);
 	}
@@ -3676,10 +3903,16 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		int val;
 
 		if (optlen != sizeof(val))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&val, optval, sizeof(val)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pkt_sk(sk)->copy_thresh = val;
 		return 0;
 	}
@@ -3688,9 +3921,15 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		int val;
 
 		if (optlen != sizeof(val))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&val, optval, sizeof(val)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (val) {
 		case TPACKET_V1:
 		case TPACKET_V2:
@@ -3699,13 +3938,18 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		default:
 			return -EINVAL;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lock_sock(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (po->rx_ring.pg_vec || po->tx_ring.pg_vec) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EBUSY;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			po->tp_version = val;
 			ret = 0;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		release_sock(sk);
 		return ret;
 	}
@@ -3714,18 +3958,31 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		unsigned int val;
 
 		if (optlen != sizeof(val))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&val, optval, sizeof(val)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (val > INT_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lock_sock(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (po->rx_ring.pg_vec || po->tx_ring.pg_vec) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EBUSY;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			po->tp_reserve = val;
 			ret = 0;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		release_sock(sk);
 		return ret;
 	}
@@ -3734,11 +3991,20 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		unsigned int val;
 
 		if (optlen != sizeof(val))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (po->rx_ring.pg_vec || po->tx_ring.pg_vec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EBUSY;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&val, optval, sizeof(val)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		po->tp_loss = !!val;
 		return 0;
 	}
@@ -3747,9 +4013,13 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		int val;
 
 		if (optlen < sizeof(val))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 		if (copy_from_user(&val, optval, sizeof(val)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
 		po->auxdata = !!val;
 		return 0;
@@ -3759,10 +4029,16 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		int val;
 
 		if (optlen < sizeof(val))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&val, optval, sizeof(val)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		po->origdev = !!val;
 		return 0;
 	}
@@ -3771,14 +4047,26 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		int val;
 
 		if (sock->type != SOCK_RAW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (po->rx_ring.pg_vec || po->tx_ring.pg_vec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EBUSY;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (optlen < sizeof(val))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&val, optval, sizeof(val)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		po->has_vnet_hdr = !!val;
 		return 0;
 	}
@@ -3787,10 +4075,16 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		int val;
 
 		if (optlen != sizeof(val))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&val, optval, sizeof(val)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		po->tp_tstamp = val;
 		return 0;
 	}
@@ -3799,17 +4093,27 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		int val;
 
 		if (optlen != sizeof(val))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&val, optval, sizeof(val)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return fanout_add(sk, val & 0xffff, val >> 16);
 	}
 	case PACKET_FANOUT_DATA:
 	{
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!po->fanout)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return fanout_set_data(po, optval, optlen);
 	}
 	case PACKET_TX_HAS_OFF:
@@ -3817,11 +4121,20 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		unsigned int val;
 
 		if (optlen != sizeof(val))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (po->rx_ring.pg_vec || po->tx_ring.pg_vec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EBUSY;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&val, optval, sizeof(val)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		po->tp_tx_has_off = !!val;
 		return 0;
 	}
@@ -3830,10 +4143,16 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 		int val;
 
 		if (optlen != sizeof(val))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&val, optval, sizeof(val)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		po->xmit = val ? packet_direct_xmit : dev_queue_xmit;
 		return 0;
 	}
@@ -3854,7 +4173,9 @@ static int packet_getsockopt(struct socket *sock, int level, int optname,
 	struct tpacket_rollover_stats rstats;
 
 	if (level != SOL_PACKET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOPROTOOPT;
+}
 
 	if (get_user(len, optlen))
 		return -EFAULT;
@@ -3962,6 +4283,7 @@ static int packet_getsockopt(struct socket *sock, int level, int optname,
 static int compat_packet_setsockopt(struct socket *sock, int level, int optname,
 				    char __user *optval, unsigned int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct packet_sock *po = pkt_sk(sock->sk);
 
 	if (level != SOL_PACKET)
@@ -3988,43 +4310,61 @@ static int packet_notifier(struct notifier_block *this,
 
 	rcu_read_lock();
 	sk_for_each_rcu(sk, &net->packet.sklist) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct packet_sock *po = pkt_sk(sk);
 
 		switch (msg) {
 		case NETDEV_UNREGISTER:
 			if (po->mclist)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				packet_dev_mclist_delete(dev, &po->mclist);
+}
 			/* fallthrough */
 
 		case NETDEV_DOWN:
 			if (dev->ifindex == po->ifindex) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_lock(&po->bind_lock);
 				if (po->running) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					__unregister_prot_hook(sk, false);
 					sk->sk_err = ENETDOWN;
 					if (!sock_flag(sk, SOCK_DEAD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						sk->sk_error_report(sk);
+}
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (msg == NETDEV_UNREGISTER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					packet_cached_dev_reset(po);
 					po->ifindex = -1;
 					if (po->prot_hook.dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						dev_put(po->prot_hook.dev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					po->prot_hook.dev = NULL;
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&po->bind_lock);
 			}
 			break;
 		case NETDEV_UP:
 			if (dev->ifindex == po->ifindex) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_lock(&po->bind_lock);
 				if (po->num)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					register_prot_hook(sk);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&po->bind_lock);
 			}
 			break;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	return NOTIFY_DONE;
 }
@@ -4038,6 +4378,7 @@ static int packet_ioctl(struct socket *sock, unsigned int cmd,
 	switch (cmd) {
 	case SIOCOUTQ:
 	{
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int amount = sk_wmem_alloc_get(sk);
 
 		return put_user(amount, (int __user *)arg);
@@ -4092,18 +4433,26 @@ static unsigned int packet_poll(struct file *file, struct socket *sock,
 
 	spin_lock_bh(&sk->sk_receive_queue.lock);
 	if (po->rx_ring.pg_vec) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!packet_previous_rx_frame(po, &po->rx_ring,
 			TP_STATUS_KERNEL))
 			mask |= POLLIN | POLLRDNORM;
 	}
 	if (po->pressure && __packet_rcv_has_room(po, NULL) == ROOM_NORMAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		po->pressure = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&sk->sk_receive_queue.lock);
 	spin_lock_bh(&sk->sk_write_queue.lock);
 	if (po->tx_ring.pg_vec) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (packet_current_frame(po, &po->tx_ring, TP_STATUS_AVAILABLE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mask |= POLLOUT | POLLWRNORM;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&sk->sk_write_queue.lock);
 	return mask;
 }
@@ -4120,8 +4469,10 @@ static void packet_mm_open(struct vm_area_struct *vma)
 	struct sock *sk = sock->sk;
 
 	if (sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_inc(&pkt_sk(sk)->mapped);
 }
+}
 
 static void packet_mm_close(struct vm_area_struct *vma)
 {
@@ -4130,8 +4481,10 @@ static void packet_mm_close(struct vm_area_struct *vma)
 	struct sock *sk = sock->sk;
 
 	if (sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_dec(&pkt_sk(sk)->mapped);
 }
+}
 
 static const struct vm_operations_struct packet_mmap_ops = {
 	.open	=	packet_mm_open,
@@ -4143,6 +4496,7 @@ static void free_pg_vec(struct pgv *pg_vec, unsigned int order,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < len; i++) {
 		if (likely(pg_vec[i].buffer)) {
 			if (is_vmalloc_addr(pg_vec[i].buffer))
@@ -4164,7 +4518,9 @@ static char *alloc_one_pg_vec_page(unsigned long order)
 
 	buffer = (char *) __get_free_pages(gfp_flags, order);
 	if (buffer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return buffer;
+}
 
 	/* __get_free_pages failed, fall back to vmalloc */
 	buffer = vzalloc((1 << order) * PAGE_SIZE);
@@ -4191,6 +4547,7 @@ static struct pgv *alloc_pg_vec(struct tpacket_req *req, int order)
 	if (unlikely(!pg_vec))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < block_nr; i++) {
 		pg_vec[i].buffer = alloc_one_pg_vec_page(order);
 		if (unlikely(!pg_vec[i].buffer))
@@ -4221,6 +4578,7 @@ static int packet_set_ring(struct sock *sk, union tpacket_req_u *req_u,
 
 	lock_sock(sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rb = tx_ring ? &po->tx_ring : &po->rx_ring;
 	rb_queue = tx_ring ? &sk->sk_write_queue : &sk->sk_receive_queue;
 
@@ -4374,7 +4732,9 @@ static int packet_mmap(struct file *file, struct socket *sock,
 	int i;
 
 	if (vma->vm_pgoff)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&po->pg_vec_lock);
 
@@ -4484,6 +4844,7 @@ static struct notifier_block packet_netdev_notifier = {
 static void *packet_seq_start(struct seq_file *seq, loff_t *pos)
 	__acquires(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = seq_file_net(seq);
 
 	rcu_read_lock();
@@ -4492,6 +4853,7 @@ static void *packet_seq_start(struct seq_file *seq, loff_t *pos)
 
 static void *packet_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = seq_file_net(seq);
 	return seq_hlist_next_rcu(v, &net->packet.sklist, pos);
 }
@@ -4499,11 +4861,13 @@ static void *packet_seq_next(struct seq_file *seq, void *v, loff_t *pos)
 static void packet_seq_stop(struct seq_file *seq, void *v)
 	__releases(RCU)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
 static int packet_seq_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (v == SEQ_START_TOKEN)
 		seq_puts(seq, "sk       RefCnt Type Proto  Iface R Rmem   User   Inode\n");
 	else {
@@ -4535,6 +4899,7 @@ static const struct seq_operations packet_seq_ops = {
 
 static int packet_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &packet_seq_ops,
 			    sizeof(struct seq_net_private));
 }
@@ -4555,7 +4920,9 @@ static int __net_init packet_net_init(struct net *net)
 	INIT_HLIST_HEAD(&net->packet.sklist);
 
 	if (!proc_create("packet", 0, net->proc_net, &packet_seq_fops))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
@@ -4573,6 +4940,7 @@ static struct pernet_operations packet_net_ops = {
 
 static void __exit packet_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_netdevice_notifier(&packet_netdev_notifier);
 	unregister_pernet_subsys(&packet_net_ops);
 	sock_unregister(PF_PACKET);
diff --git a/net/packet/diag.c b/net/packet/diag.c
index 7ef1c88..3c4008d 100644
--- a/net/packet/diag.c
+++ b/net/packet/diag.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/module.h>
 #include <linux/sock_diag.h>
 #include <linux/net.h>
diff --git a/net/sched/act_api.c b/net/sched/act_api.c
index 8f2c635..d7dfa79 100644
--- a/net/sched/act_api.c
+++ b/net/sched/act_api.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/act_api.c	Packet action API.
  *
@@ -33,7 +35,9 @@ static int tcf_action_goto_chain_init(struct tc_action *a, struct tcf_proto *tp)
 	u32 chain_index = a->tcfa_action & TC_ACT_EXT_VAL_MASK;
 
 	if (!tp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	a->goto_chain = tcf_chain_get(tp->chain->block, chain_index, true);
 	if (!a->goto_chain)
 		return -ENOMEM;
@@ -42,6 +46,7 @@ static int tcf_action_goto_chain_init(struct tc_action *a, struct tcf_proto *tp)
 
 static void tcf_action_goto_chain_fini(struct tc_action *a)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcf_chain_put(a->goto_chain);
 }
 
@@ -50,6 +55,7 @@ static void tcf_action_goto_chain_exec(const struct tc_action *a,
 {
 	const struct tcf_chain *chain = a->goto_chain;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	res->goto_tp = rcu_dereference_bh(chain->filter_chain);
 }
 
@@ -60,6 +66,7 @@ static void tcf_action_goto_chain_exec(const struct tc_action *a,
  */
 static void free_tcf(struct tc_action *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	free_percpu(p->cpu_bstats);
 	free_percpu(p->cpu_qstats);
 
@@ -75,6 +82,7 @@ static void free_tcf(struct tc_action *p)
 
 static void tcf_idr_remove(struct tcf_idrinfo *idrinfo, struct tc_action *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&idrinfo->lock);
 	idr_remove_ext(&idrinfo->action_idr, p->tcfa_index);
 	spin_unlock_bh(&idrinfo->lock);
@@ -86,6 +94,7 @@ int __tcf_idr_release(struct tc_action *p, bool bind, bool strict)
 {
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 
 	if (p) {
@@ -122,6 +131,7 @@ static int tcf_dump_walker(struct tcf_idrinfo *idrinfo, struct sk_buff *skb,
 
 	s_i = cb->args[0];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	idr_for_each_entry_ext(idr, p, id) {
 		index++;
 		if (index < s_i)
@@ -176,6 +186,7 @@ static int tcf_del_walker(struct tcf_idrinfo *idrinfo, struct sk_buff *skb,
 	nest = nla_nest_start(skb, 0);
 	if (nest == NULL)
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put_string(skb, TCA_KIND, ops->kind))
 		goto nla_put_failure;
 
@@ -205,6 +216,7 @@ int tcf_generic_walker(struct tc_action_net *tn, struct sk_buff *skb,
 	struct tcf_idrinfo *idrinfo = tn->idrinfo;
 
 	if (type == RTM_DELACTION) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return tcf_del_walker(idrinfo, skb, ops);
 	} else if (type == RTM_GETACTION) {
 		return tcf_dump_walker(idrinfo, skb, cb);
@@ -232,6 +244,7 @@ int tcf_idr_search(struct tc_action_net *tn, struct tc_action **a, u32 index)
 	struct tc_action *p = tcf_idr_lookup(index, idrinfo);
 
 	if (p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*a = p;
 		return 1;
 	}
@@ -245,6 +258,7 @@ bool tcf_idr_check(struct tc_action_net *tn, u32 index, struct tc_action **a,
 	struct tcf_idrinfo *idrinfo = tn->idrinfo;
 	struct tc_action *p = tcf_idr_lookup(index, idrinfo);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (index && p) {
 		if (bind)
 			p->tcfa_bindcnt++;
@@ -258,6 +272,7 @@ EXPORT_SYMBOL(tcf_idr_check);
 
 void tcf_idr_cleanup(struct tc_action *a, struct nlattr *est)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (est)
 		gen_kill_estimator(&a->tcfa_rate_est);
 	free_tcf(a);
@@ -268,6 +283,7 @@ int tcf_idr_create(struct tc_action_net *tn, u32 index, struct nlattr *est,
 		   struct tc_action **a, const struct tc_action_ops *ops,
 		   int bind, bool cpustats)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tc_action *p = kzalloc(ops->size, GFP_KERNEL);
 	struct tcf_idrinfo *idrinfo = tn->idrinfo;
 	struct idr *idr = &idrinfo->action_idr;
@@ -360,11 +376,17 @@ void tcf_idrinfo_destroy(const struct tc_action_ops *ops,
 	unsigned long id = 1;
 
 	idr_for_each_entry_ext(idr, p, id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = __tcf_idr_release(p, false, true);
 		if (ret == ACT_P_DELETED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			module_put(ops->owner);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 	}
 	idr_destroy(&idrinfo->action_idr);
 }
@@ -380,7 +402,9 @@ int tcf_register_action(struct tc_action_ops *act,
 	int ret;
 
 	if (!act->act || !act->dump || !act->init || !act->walk || !act->lookup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* We have to register pernet ops before making the action ops visible,
 	 * otherwise tcf_action_init_1() could get a partially initialized
@@ -388,11 +412,14 @@ int tcf_register_action(struct tc_action_ops *act,
 	 */
 	ret = register_pernet_subsys(ops);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	write_lock(&act_mod_lock);
 	list_for_each_entry(a, &act_base, head) {
 		if (act->type == a->type || (strcmp(act->kind, a->kind) == 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			write_unlock(&act_mod_lock);
 			unregister_pernet_subsys(ops);
 			return -EEXIST;
@@ -412,6 +439,7 @@ int tcf_unregister_action(struct tc_action_ops *act,
 	int err = -ENOENT;
 
 	write_lock(&act_mod_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(a, &act_base, head) {
 		if (a == act) {
 			list_del(&act->head);
@@ -432,6 +460,7 @@ static struct tc_action_ops *tc_lookup_action_n(char *kind)
 	struct tc_action_ops *a, *res = NULL;
 
 	if (kind) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_lock(&act_mod_lock);
 		list_for_each_entry(a, &act_base, head) {
 			if (strcmp(kind, a->kind) == 0) {
@@ -451,6 +480,7 @@ static struct tc_action_ops *tc_lookup_action(struct nlattr *kind)
 	struct tc_action_ops *a, *res = NULL;
 
 	if (kind) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_lock(&act_mod_lock);
 		list_for_each_entry(a, &act_base, head) {
 			if (nla_strcmp(kind, a->kind) == 0) {
@@ -475,7 +505,9 @@ int tcf_action_exec(struct sk_buff *skb, struct tc_action **actions,
 	int ret = TC_ACT_OK;
 
 	if (skb_skip_tc_classify(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return TC_ACT_OK;
+}
 
 restart_act_graph:
 	for (i = 0; i < nr_actions; i++) {
@@ -520,6 +552,7 @@ int tcf_action_destroy(struct list_head *actions, int bind)
 	struct tc_action *a, *tmp;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(a, tmp, actions, list) {
 		ops = a->ops;
 		ret = __tcf_idr_release(a, bind, true);
@@ -534,6 +567,7 @@ int tcf_action_destroy(struct list_head *actions, int bind)
 int
 tcf_action_dump_old(struct sk_buff *skb, struct tc_action *a, int bind, int ref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return a->ops->dump(skb, a, bind, ref);
 }
 
@@ -546,6 +580,7 @@ tcf_action_dump_1(struct sk_buff *skb, struct tc_action *a, int bind, int ref)
 
 	if (nla_put_string(skb, TCA_KIND, a->ops->kind))
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tcf_action_copy_stats(skb, a, 0))
 		goto nla_put_failure;
 	if (a->act_cookie) {
@@ -576,6 +611,7 @@ int tcf_action_dump(struct sk_buff *skb, struct list_head *actions,
 	int err = -EINVAL;
 	struct nlattr *nest;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(a, actions, list) {
 		nest = nla_nest_start(skb, a->order);
 		if (nest == NULL)
@@ -597,6 +633,7 @@ int tcf_action_dump(struct sk_buff *skb, struct list_head *actions,
 
 static struct tc_cookie *nla_memdup_cookie(struct nlattr **tb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tc_cookie *c = kzalloc(sizeof(*c), GFP_KERNEL);
 	if (!c)
 		return NULL;
@@ -624,6 +661,7 @@ struct tc_action *tcf_action_init_1(struct net *net, struct tcf_proto *tp,
 	int err;
 
 	if (name == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = nla_parse_nested(tb, TCA_ACT_MAX, nla, NULL, NULL);
 		if (err < 0)
 			goto err_out;
@@ -726,7 +764,9 @@ static void cleanup_a(struct list_head *actions, int ovr)
 	struct tc_action *a;
 
 	if (!ovr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	list_for_each_entry(a, actions, list)
 		a->tcfa_refcnt--;
@@ -743,7 +783,9 @@ int tcf_action_init(struct net *net, struct tcf_proto *tp, struct nlattr *nla,
 
 	err = nla_parse_nested(tb, TCA_ACT_MAX_PRIO, nla, NULL, NULL);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	for (i = 1; i <= TCA_ACT_MAX_PRIO && tb[i]; i++) {
 		act = tcf_action_init_1(net, tp, tb[i], est, name, ovr, bind);
@@ -824,6 +866,7 @@ static int tca_get_fill(struct sk_buff *skb, struct list_head *actions,
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(*t), flags);
 	if (!nlh)
 		goto out_nlmsg_trim;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	t = nlmsg_data(nlh);
 	t->tca_family = AF_UNSPEC;
 	t->tca__pad1 = 0;
@@ -854,7 +897,9 @@ tcf_get_notify(struct net *net, u32 portid, struct nlmsghdr *n,
 
 	skb = alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOBUFS;
+}
 	if (tca_get_fill(skb, actions, portid, n->nlmsg_seq, 0, event,
 			 0, 0) <= 0) {
 		kfree_skb(skb);
@@ -877,6 +922,7 @@ static struct tc_action *tcf_action_get_1(struct net *net, struct nlattr *nla,
 	if (err < 0)
 		goto err_out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EINVAL;
 	if (tb[TCA_ACT_INDEX] == NULL ||
 	    nla_len(tb[TCA_ACT_INDEX]) < sizeof(index))
@@ -916,6 +962,7 @@ static int tca_action_flush(struct net *net, struct nlattr *nla,
 
 	skb = alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);
 	if (!skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("tca_action_flush: failed skb alloc\n");
 		return err;
 	}
@@ -977,7 +1024,9 @@ tcf_del_notify(struct net *net, struct nlmsghdr *n, struct list_head *actions,
 
 	skb = alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOBUFS;
+}
 
 	if (tca_get_fill(skb, actions, portid, n->nlmsg_seq, 0, RTM_DELACTION,
 			 0, 1) <= 0) {
@@ -1010,7 +1059,9 @@ tca_action_gd(struct net *net, struct nlattr *nla, struct nlmsghdr *n,
 
 	ret = nla_parse_nested(tb, TCA_ACT_MAX_PRIO, nla, NULL, NULL);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (event == RTM_DELACTION && n->nlmsg_flags & NLM_F_ROOT) {
 		if (tb[1] != NULL)
@@ -1052,7 +1103,9 @@ tcf_add_notify(struct net *net, struct nlmsghdr *n, struct list_head *actions,
 
 	skb = alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOBUFS;
+}
 
 	if (tca_get_fill(skb, actions, portid, n->nlmsg_seq, n->nlmsg_flags,
 			 RTM_NEWACTION, 0, 0) <= 0) {
@@ -1075,7 +1128,9 @@ static int tcf_action_add(struct net *net, struct nlattr *nla,
 
 	ret = tcf_action_init(net, NULL, nla, NULL, NULL, ovr, 0, &actions);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	return tcf_add_notify(net, n, &actions, portid);
 }
@@ -1090,6 +1145,7 @@ static const struct nla_policy tcaa_policy[TCA_ROOT_MAX + 1] = {
 static int tc_ctl_action(struct sk_buff *skb, struct nlmsghdr *n,
 			 struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct nlattr *tca[TCA_ROOT_MAX + 1];
 	u32 portid = skb ? NETLINK_CB(skb).portid : 0;
@@ -1148,7 +1204,9 @@ static struct nlattr *find_dump_kind(struct nlattr **nla)
 
 	tb1 = nla[TCA_ACT_TAB];
 	if (tb1 == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (nla_parse(tb, TCA_ACT_MAX_PRIO, nla_data(tb1),
 		      NLMSG_ALIGN(nla_len(tb1)), NULL, NULL) < 0)
@@ -1165,6 +1223,7 @@ static struct nlattr *find_dump_kind(struct nlattr **nla)
 
 static int tc_dump_action(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct nlmsghdr *nlh;
 	unsigned char *b = skb_tail_pointer(skb);
diff --git a/net/sched/act_bpf.c b/net/sched/act_bpf.c
index c0c707e..9ddc996 100644
--- a/net/sched/act_bpf.c
+++ b/net/sched/act_bpf.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2015 Jiri Pirko <jiri@resnulli.us>
  *
diff --git a/net/sched/act_csum.c b/net/sched/act_csum.c
index d836f99..453f379 100644
--- a/net/sched/act_csum.c
+++ b/net/sched/act_csum.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Checksum updating actions
  *
diff --git a/net/sched/act_gact.c b/net/sched/act_gact.c
index a0ac42b..7c55fb1 100644
--- a/net/sched/act_gact.c
+++ b/net/sched/act_gact.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/act_gact.c		Generic actions
  *
diff --git a/net/sched/act_ipt.c b/net/sched/act_ipt.c
index d9e399a..5966592 100644
--- a/net/sched/act_ipt.c
+++ b/net/sched/act_ipt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/act_ipt.c		iptables target interface
  *
diff --git a/net/sched/act_mirred.c b/net/sched/act_mirred.c
index 6ce8de3..02be443 100644
--- a/net/sched/act_mirred.c
+++ b/net/sched/act_mirred.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/act_mirred.c	packet mirroring and redirect actions
  *
diff --git a/net/sched/act_nat.c b/net/sched/act_nat.c
index c365d01..2ef1ed9 100644
--- a/net/sched/act_nat.c
+++ b/net/sched/act_nat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Stateless NAT actions
  *
diff --git a/net/sched/act_pedit.c b/net/sched/act_pedit.c
index 491fe5de..30c81ff 100644
--- a/net/sched/act_pedit.c
+++ b/net/sched/act_pedit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/act_pedit.c	Generic packet editor
  *
diff --git a/net/sched/act_police.c b/net/sched/act_police.c
index 3bb2ebf..2d6ee2f 100644
--- a/net/sched/act_police.c
+++ b/net/sched/act_police.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/act_police.c	Input police filter
  *
diff --git a/net/sched/act_simple.c b/net/sched/act_simple.c
index e7b57e5..bb42751 100644
--- a/net/sched/act_simple.c
+++ b/net/sched/act_simple.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/act_simple.c	Simple example of an action
  *
diff --git a/net/sched/act_skbedit.c b/net/sched/act_skbedit.c
index 59949d6..f2d782a 100644
--- a/net/sched/act_skbedit.c
+++ b/net/sched/act_skbedit.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2008, Intel Corporation.
  *
diff --git a/net/sched/cls_api.c b/net/sched/cls_api.c
index 934c239..c2ef097 100644
--- a/net/sched/cls_api.c
+++ b/net/sched/cls_api.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/cls_api.c	Packet classifier API.
  *
@@ -44,6 +46,7 @@ static const struct tcf_proto_ops *tcf_proto_lookup_ops(const char *kind)
 	const struct tcf_proto_ops *t, *res = NULL;
 
 	if (kind) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_lock(&cls_mod_lock);
 		list_for_each_entry(t, &tcf_proto_base, head) {
 			if (strcmp(kind, t->kind) == 0) {
@@ -91,6 +94,7 @@ int unregister_tcf_proto_ops(struct tcf_proto_ops *ops)
 	flush_workqueue(tc_filter_wq);
 
 	write_lock(&cls_mod_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(t, &tcf_proto_base, head) {
 		if (t == ops) {
 			list_del(&t->head);
@@ -105,6 +109,7 @@ EXPORT_SYMBOL(unregister_tcf_proto_ops);
 
 bool tcf_queue_work(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return queue_work(tc_filter_wq, work);
 }
 EXPORT_SYMBOL(tcf_queue_work);
@@ -116,7 +121,9 @@ static inline u32 tcf_auto_prio(struct tcf_proto *tp)
 	u32 first = TC_H_MAKE(0xC0000000U, 0U);
 
 	if (tp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		first = tp->prio - 1;
+}
 
 	return TC_H_MAJ(first);
 }
@@ -130,7 +137,9 @@ static struct tcf_proto *tcf_proto_create(const char *kind, u32 protocol,
 
 	tp = kzalloc(sizeof(*tp), GFP_KERNEL);
 	if (!tp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOBUFS);
+}
 
 	err = -ENOENT;
 	tp->ops = tcf_proto_lookup_ops(kind);
@@ -175,6 +184,7 @@ static struct tcf_proto *tcf_proto_create(const char *kind, u32 protocol,
 
 static void tcf_proto_destroy(struct tcf_proto *tp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tp->ops->destroy(tp);
 	module_put(tp->ops->owner);
 	kfree_rcu(tp, rcu);
@@ -187,7 +197,9 @@ static struct tcf_chain *tcf_chain_create(struct tcf_block *block,
 
 	chain = kzalloc(sizeof(*chain), GFP_KERNEL);
 	if (!chain)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	list_add_tail(&chain->list, &block->chain_list);
 	chain->block = block;
 	chain->index = chain_index;
@@ -197,6 +209,7 @@ static struct tcf_chain *tcf_chain_create(struct tcf_block *block,
 
 static void tcf_chain_flush(struct tcf_chain *chain)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcf_proto *tp = rtnl_dereference(chain->filter_chain);
 
 	if (chain->p_filter_chain)
@@ -216,11 +229,14 @@ static void tcf_chain_destroy(struct tcf_chain *chain)
 	list_del(&chain->list);
 	kfree(chain);
 	if (list_empty(&block->chain_list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(block);
 }
+}
 
 static void tcf_chain_hold(struct tcf_chain *chain)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	++chain->refcnt;
 }
 
@@ -229,6 +245,7 @@ struct tcf_chain *tcf_chain_get(struct tcf_block *block, u32 chain_index,
 {
 	struct tcf_chain *chain;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(chain, &block->chain_list, list) {
 		if (chain->index == chain_index) {
 			tcf_chain_hold(chain);
@@ -242,6 +259,7 @@ EXPORT_SYMBOL(tcf_chain_get);
 
 void tcf_chain_put(struct tcf_chain *chain)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (--chain->refcnt == 0)
 		tcf_chain_destroy(chain);
 }
@@ -251,12 +269,14 @@ static void
 tcf_chain_filter_chain_ptr_set(struct tcf_chain *chain,
 			       struct tcf_proto __rcu **p_filter_chain)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	chain->p_filter_chain = p_filter_chain;
 }
 
 int tcf_block_get(struct tcf_block **p_block,
 		  struct tcf_proto __rcu **p_filter_chain)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcf_block *block = kzalloc(sizeof(*block), GFP_KERNEL);
 	struct tcf_chain *chain;
 	int err;
@@ -288,7 +308,9 @@ void tcf_block_put(struct tcf_block *block)
 	struct tcf_chain *chain, *tmp;
 
 	if (!block)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Hold a refcnt for all chains, so that they don't disappear
 	 * while we are iterating.
@@ -316,6 +338,7 @@ EXPORT_SYMBOL(tcf_block_put);
 int tcf_classify(struct sk_buff *skb, const struct tcf_proto *tp,
 		 struct tcf_result *res, bool compat_mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__be16 protocol = tc_skb_protocol(skb);
 #ifdef CONFIG_NET_CLS_ACT
 	const int max_reclassify_loop = 4;
@@ -370,6 +393,7 @@ struct tcf_chain_info {
 
 static struct tcf_proto *tcf_chain_tp_prev(struct tcf_chain_info *chain_info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rtnl_dereference(*chain_info->pprev);
 }
 
@@ -377,6 +401,7 @@ static void tcf_chain_tp_insert(struct tcf_chain *chain,
 				struct tcf_chain_info *chain_info,
 				struct tcf_proto *tp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (chain->p_filter_chain &&
 	    *chain_info->pprev == chain->filter_chain)
 		rcu_assign_pointer(*chain->p_filter_chain, tp);
@@ -389,6 +414,7 @@ static void tcf_chain_tp_remove(struct tcf_chain *chain,
 				struct tcf_chain_info *chain_info,
 				struct tcf_proto *tp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcf_proto *next = rtnl_dereference(chain_info->next);
 
 	if (chain->p_filter_chain && tp == chain->filter_chain)
@@ -435,6 +461,7 @@ static int tcf_fill_node(struct net *net, struct sk_buff *skb,
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(*tcm), flags);
 	if (!nlh)
 		goto out_nlmsg_trim;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcm = nlmsg_data(nlh);
 	tcm->tcm_family = AF_UNSPEC;
 	tcm->tcm__pad1 = 0;
@@ -466,6 +493,7 @@ static int tfilter_notify(struct net *net, struct sk_buff *oskb,
 			  void *fh, int event, bool unicast)
 {
 	struct sk_buff *skb;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 portid = oskb ? NETLINK_CB(oskb).portid : 0;
 
 	skb = alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);
@@ -490,6 +518,7 @@ static int tfilter_del_notify(struct net *net, struct sk_buff *oskb,
 			      void *fh, bool unicast, bool *last)
 {
 	struct sk_buff *skb;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 portid = oskb ? NETLINK_CB(oskb).portid : 0;
 	int err;
 
@@ -522,6 +551,7 @@ static void tfilter_notify_chain(struct net *net, struct sk_buff *oskb,
 {
 	struct tcf_proto *tp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (tp = rtnl_dereference(chain->filter_chain);
 	     tp; tp = rtnl_dereference(tp->next))
 		tfilter_notify(net, oskb, n, tp, 0, event, false);
@@ -532,6 +562,7 @@ static void tfilter_notify_chain(struct net *net, struct sk_buff *oskb,
 static int tc_ctl_tfilter(struct sk_buff *skb, struct nlmsghdr *n,
 			  struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct nlattr *tca[TCA_MAX + 1];
 	struct tcmsg *t;
@@ -774,6 +805,7 @@ static bool tcf_chain_dump(struct tcf_chain *chain, struct sk_buff *skb,
 			   struct netlink_callback *cb,
 			   long index_start, long *p_index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct tcmsg *tcm = nlmsg_data(cb->nlh);
 	struct tcf_dump_args arg;
@@ -820,6 +852,7 @@ static bool tcf_chain_dump(struct tcf_chain *chain, struct sk_buff *skb,
 /* called with RTNL */
 static int tc_dump_tfilter(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct nlattr *tca[TCA_MAX + 1];
 	struct net_device *dev;
@@ -886,6 +919,7 @@ void tcf_exts_destroy(struct tcf_exts *exts)
 #ifdef CONFIG_NET_CLS_ACT
 	LIST_HEAD(actions);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ASSERT_RTNL();
 	tcf_exts_to_list(exts, &actions);
 	tcf_action_destroy(&actions, TCA_ACT_UNBIND);
@@ -902,6 +936,7 @@ int tcf_exts_validate(struct net *net, struct tcf_proto *tp, struct nlattr **tb,
 	{
 		struct tc_action *act;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (exts->police && tb[exts->police]) {
 			act = tcf_action_init_1(net, tp, tb[exts->police],
 						rate_tlv, "police", ovr,
@@ -951,6 +986,7 @@ EXPORT_SYMBOL(tcf_exts_change);
 #ifdef CONFIG_NET_CLS_ACT
 static struct tc_action *tcf_exts_first_act(struct tcf_exts *exts)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (exts->nr_actions == 0)
 		return NULL;
 	else
@@ -963,6 +999,7 @@ int tcf_exts_dump(struct sk_buff *skb, struct tcf_exts *exts)
 #ifdef CONFIG_NET_CLS_ACT
 	struct nlattr *nest;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (exts->action && tcf_exts_has_actions(exts)) {
 		/*
 		 * again for backward compatible mode - we want
@@ -1021,7 +1058,9 @@ int tcf_exts_get_dev(struct net_device *dev, struct tcf_exts *exts,
 	LIST_HEAD(actions);
 
 	if (!tcf_exts_has_actions(exts))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	tcf_exts_to_list(exts, &actions);
 	list_for_each_entry(a, &actions, list) {
@@ -1041,7 +1080,9 @@ static int __init tc_filter_init(void)
 {
 	tc_filter_wq = alloc_ordered_workqueue("tc_filter_workqueue", 0);
 	if (!tc_filter_wq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	rtnl_register(PF_UNSPEC, RTM_NEWTFILTER, tc_ctl_tfilter, NULL, 0);
 	rtnl_register(PF_UNSPEC, RTM_DELTFILTER, tc_ctl_tfilter, NULL, 0);
diff --git a/net/sched/cls_basic.c b/net/sched/cls_basic.c
index e43c56d..3e235bd 100644
--- a/net/sched/cls_basic.c
+++ b/net/sched/cls_basic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/cls_basic.c	Basic Packet Classifier.
  *
diff --git a/net/sched/cls_bpf.c b/net/sched/cls_bpf.c
index 3a49953..c387f11 100644
--- a/net/sched/cls_bpf.c
+++ b/net/sched/cls_bpf.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Berkeley Packet Filter based traffic classifier
  *
diff --git a/net/sched/cls_cgroup.c b/net/sched/cls_cgroup.c
index 309d589..0c1d08c 100644
--- a/net/sched/cls_cgroup.c
+++ b/net/sched/cls_cgroup.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/cls_cgroup.c	Control Group Classifier
  *
diff --git a/net/sched/cls_flow.c b/net/sched/cls_flow.c
index 85f765c..4922297 100644
--- a/net/sched/cls_flow.c
+++ b/net/sched/cls_flow.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/cls_flow.c		Generic flow classifier
  *
diff --git a/net/sched/cls_fw.c b/net/sched/cls_fw.c
index 7f45e5a..2bbba41 100644
--- a/net/sched/cls_fw.c
+++ b/net/sched/cls_fw.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/cls_fw.c	Classifier mapping ipchains' fwmark to traffic class.
  *
diff --git a/net/sched/cls_matchall.c b/net/sched/cls_matchall.c
index 3684153..577525c 100644
--- a/net/sched/cls_matchall.c
+++ b/net/sched/cls_matchall.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/cls_matchll.c		Match-all classifier
  *
diff --git a/net/sched/cls_route.c b/net/sched/cls_route.c
index ac9a5b8..bda1ace 100644
--- a/net/sched/cls_route.c
+++ b/net/sched/cls_route.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/cls_route.c	ROUTE4 classifier.
  *
diff --git a/net/sched/cls_rsvp.h b/net/sched/cls_rsvp.h
index cf325625..bf6b015 100644
--- a/net/sched/cls_rsvp.h
+++ b/net/sched/cls_rsvp.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/cls_rsvp.h	Template file for RSVPv[46] classifiers.
  *
diff --git a/net/sched/cls_tcindex.c b/net/sched/cls_tcindex.c
index a76937e..0b0dee5 100644
--- a/net/sched/cls_tcindex.c
+++ b/net/sched/cls_tcindex.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/cls_tcindex.c	Packet classifier for skb->tc_index
  *
diff --git a/net/sched/cls_u32.c b/net/sched/cls_u32.c
index b58eccb..37b5526 100644
--- a/net/sched/cls_u32.c
+++ b/net/sched/cls_u32.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/cls_u32.c	Ugly (or Universal) 32bit key Packet Classifier.
  *
diff --git a/net/sched/em_cmp.c b/net/sched/em_cmp.c
index 1c8360a..48f92d2 100644
--- a/net/sched/em_cmp.c
+++ b/net/sched/em_cmp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/em_cmp.c	Simple packet data comparison ematch
  *
diff --git a/net/sched/em_ipset.c b/net/sched/em_ipset.c
index c1b23e3..a1860b5 100644
--- a/net/sched/em_ipset.c
+++ b/net/sched/em_ipset.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/em_ipset.c	ipset ematch
  *
diff --git a/net/sched/em_meta.c b/net/sched/em_meta.c
index d6e9711..46bce53 100644
--- a/net/sched/em_meta.c
+++ b/net/sched/em_meta.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/em_meta.c	Metadata ematch
  *
diff --git a/net/sched/em_nbyte.c b/net/sched/em_nbyte.c
index df3110d..473b52f 100644
--- a/net/sched/em_nbyte.c
+++ b/net/sched/em_nbyte.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/em_nbyte.c	N-Byte ematch
  *
diff --git a/net/sched/em_text.c b/net/sched/em_text.c
index 73e2ed5..704a274 100644
--- a/net/sched/em_text.c
+++ b/net/sched/em_text.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/em_text.c	Textsearch ematch
  *
diff --git a/net/sched/em_u32.c b/net/sched/em_u32.c
index 797bdb8..481a888 100644
--- a/net/sched/em_u32.c
+++ b/net/sched/em_u32.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/em_u32.c	U32 Ematch
  *
diff --git a/net/sched/ematch.c b/net/sched/ematch.c
index 03b677b..057f586 100644
--- a/net/sched/ematch.c
+++ b/net/sched/ematch.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/ematch.c		Extended Match API
  *
@@ -98,6 +100,7 @@ static struct tcf_ematch_ops *tcf_em_lookup(u16 kind)
 	struct tcf_ematch_ops *e = NULL;
 
 	read_lock(&ematch_mod_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(e, &ematch_ops, link) {
 		if (kind == e->kind) {
 			if (!try_module_get(e->owner))
@@ -129,7 +132,9 @@ int tcf_em_register(struct tcf_ematch_ops *ops)
 	struct tcf_ematch_ops *e;
 
 	if (ops->match == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	write_lock(&ematch_mod_lock);
 	list_for_each_entry(e, &ematch_ops, link)
@@ -157,6 +162,7 @@ EXPORT_SYMBOL(tcf_em_register);
  */
 void tcf_em_unregister(struct tcf_ematch_ops *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_lock(&ematch_mod_lock);
 	list_del(&ops->link);
 	write_unlock(&ematch_mod_lock);
@@ -166,6 +172,7 @@ EXPORT_SYMBOL(tcf_em_unregister);
 static inline struct tcf_ematch *tcf_em_get_match(struct tcf_ematch_tree *tree,
 						  int index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &tree->matches[index];
 }
 
@@ -183,6 +190,7 @@ static int tcf_em_validate(struct tcf_proto *tp,
 	if (!TCF_EM_REL_VALID(em_hdr->flags))
 		goto errout;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (em_hdr->kind == TCF_EM_CONTAINER) {
 		/* Special ematch called "container", carries an index
 		 * referencing an external ematch sequence.
@@ -312,7 +320,9 @@ int tcf_em_tree_validate(struct tcf_proto *tp, struct nlattr *nla,
 
 	memset(tree, 0, sizeof(*tree));
 	if (!nla)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	err = nla_parse_nested(tb, TCA_EMATCH_TREE_MAX, nla, em_policy, NULL);
 	if (err < 0)
@@ -401,7 +411,9 @@ void tcf_em_tree_destroy(struct tcf_ematch_tree *tree)
 	int i;
 
 	if (tree->matches == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for (i = 0; i < tree->hdr.nmatches; i++) {
 		struct tcf_ematch *em = tcf_em_get_match(tree, i);
@@ -444,6 +456,7 @@ int tcf_em_tree_dump(struct sk_buff *skb, struct tcf_ematch_tree *tree, int tlv)
 	if (top_start == NULL)
 		goto nla_put_failure;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put(skb, TCA_EMATCH_TREE_HDR, sizeof(tree->hdr), &tree->hdr))
 		goto nla_put_failure;
 
@@ -490,6 +503,7 @@ EXPORT_SYMBOL(tcf_em_tree_dump);
 static inline int tcf_em_match(struct sk_buff *skb, struct tcf_ematch *em,
 			       struct tcf_pkt_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int r = em->ops->match(skb, em, info);
 
 	return tcf_em_is_inverted(em) ? !r : r;
diff --git a/net/sched/sch_api.c b/net/sched/sch_api.c
index 22bc6fc..60bc6d0 100644
--- a/net/sched/sch_api.c
+++ b/net/sched/sch_api.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/sch_api.c	Packet scheduler API.
  *
@@ -180,6 +182,7 @@ int unregister_qdisc(struct Qdisc_ops *qops)
 	int err = -ENOENT;
 
 	write_lock(&qdisc_mod_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (qp = &qdisc_base; (q = *qp) != NULL; qp = &q->next)
 		if (q == qops)
 			break;
@@ -196,6 +199,7 @@ EXPORT_SYMBOL(unregister_qdisc);
 /* Get default qdisc if not otherwise specified */
 void qdisc_get_default(char *name, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_lock(&qdisc_mod_lock);
 	strlcpy(name, default_qdisc_ops->id, len);
 	read_unlock(&qdisc_mod_lock);
@@ -205,6 +209,7 @@ static struct Qdisc_ops *qdisc_lookup_default(const char *name)
 {
 	struct Qdisc_ops *q = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (q = qdisc_base; q; q = q->next) {
 		if (!strcmp(name, q->id)) {
 			if (!try_module_get(q->owner))
@@ -222,7 +227,9 @@ int qdisc_set_default(const char *name)
 	const struct Qdisc_ops *ops;
 
 	if (!capable(CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	write_lock(&qdisc_mod_lock);
 	ops = qdisc_lookup_default(name);
@@ -264,7 +271,9 @@ static struct Qdisc *qdisc_match_from_root(struct Qdisc *root, u32 handle)
 	struct Qdisc *q;
 
 	if (!qdisc_dev(root))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (root->handle == handle ? root : NULL);
+}
 
 	if (!(root->flags & TCQ_F_BUILTIN) &&
 	    root->handle == handle)
@@ -280,10 +289,14 @@ static struct Qdisc *qdisc_match_from_root(struct Qdisc *root, u32 handle)
 void qdisc_hash_add(struct Qdisc *q, bool invisible)
 {
 	if ((q->parent != TC_H_ROOT) && !(q->flags & TCQ_F_INGRESS)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ASSERT_RTNL();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hash_add_rcu(qdisc_dev(q)->qdisc_hash, &q->hash, q->handle);
 		if (invisible)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			q->flags |= TCQ_F_INVISIBLE;
+}
 	}
 }
 EXPORT_SYMBOL(qdisc_hash_add);
@@ -291,7 +304,9 @@ EXPORT_SYMBOL(qdisc_hash_add);
 void qdisc_hash_del(struct Qdisc *q)
 {
 	if ((q->parent != TC_H_ROOT) && !(q->flags & TCQ_F_INGRESS)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ASSERT_RTNL();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hash_del_rcu(&q->hash);
 	}
 }
@@ -302,7 +317,9 @@ struct Qdisc *qdisc_lookup(struct net_device *dev, u32 handle)
 	struct Qdisc *q;
 
 	if (!handle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	q = qdisc_match_from_root(dev->qdisc, handle);
 	if (q)
 		goto out;
@@ -322,7 +339,9 @@ static struct Qdisc *qdisc_leaf(struct Qdisc *p, u32 classid)
 	const struct Qdisc_class_ops *cops = p->ops->cl_ops;
 
 	if (cops == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	cl = cops->find(p, classid);
 
 	if (cl == 0)
@@ -338,6 +357,7 @@ static struct Qdisc_ops *qdisc_lookup_ops(struct nlattr *kind)
 	struct Qdisc_ops *q = NULL;
 
 	if (kind) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_lock(&qdisc_mod_lock);
 		for (q = qdisc_base; q; q = q->next) {
 			if (nla_strcmp(kind, q->id) == 0) {
@@ -397,6 +417,7 @@ struct qdisc_rate_table *qdisc_get_rtab(struct tc_ratespec *r,
 {
 	struct qdisc_rate_table *rtab;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (tab == NULL || r->rate == 0 || r->cell_log == 0 ||
 	    nla_len(tab) != TC_RTAB_SIZE)
 		return NULL;
@@ -427,6 +448,7 @@ void qdisc_put_rtab(struct qdisc_rate_table *tab)
 {
 	struct qdisc_rate_table *rtab, **rtabp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!tab || --tab->refcnt)
 		return;
 
@@ -460,7 +482,9 @@ static struct qdisc_size_table *qdisc_get_stab(struct nlattr *opt)
 
 	err = nla_parse_nested(tb, TCA_STAB_MAX, opt, stab_policy, NULL);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(err);
+}
 	if (!tb[TCA_STAB_BASE])
 		return ERR_PTR(-EINVAL);
 
@@ -501,15 +525,20 @@ static struct qdisc_size_table *qdisc_get_stab(struct nlattr *opt)
 
 static void stab_kfree_rcu(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(container_of(head, struct qdisc_size_table, rcu));
 }
 
 void qdisc_put_stab(struct qdisc_size_table *tab)
 {
 	if (!tab)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (--tab->refcnt == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del(&tab->list);
 		call_rcu_bh(&tab->rcu, stab_kfree_rcu);
 	}
@@ -523,6 +552,7 @@ static int qdisc_dump_stab(struct sk_buff *skb, struct qdisc_size_table *stab)
 	nest = nla_nest_start(skb, TCA_STAB);
 	if (nest == NULL)
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nla_put(skb, TCA_STAB_BASE, sizeof(stab->szopts), &stab->szopts))
 		goto nla_put_failure;
 	nla_nest_end(skb, nest);
@@ -542,6 +572,7 @@ void __qdisc_calculate_pkt_len(struct sk_buff *skb,
 	if (unlikely(!stab->szopts.tsize))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	slot = pkt_len + stab->szopts.cell_align;
 	if (unlikely(slot < 0))
 		slot = 0;
@@ -564,6 +595,7 @@ EXPORT_SYMBOL(__qdisc_calculate_pkt_len);
 
 void qdisc_warn_nonwc(const char *txt, struct Qdisc *qdisc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(qdisc->flags & TCQ_F_WARN_NONWC)) {
 		pr_warn("%s: %s qdisc %X: is non-work-conserving?\n",
 			txt, qdisc->ops->id, qdisc->handle >> 16);
@@ -574,6 +606,7 @@ EXPORT_SYMBOL(qdisc_warn_nonwc);
 
 static enum hrtimer_restart qdisc_watchdog(struct hrtimer *timer)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct qdisc_watchdog *wd = container_of(timer, struct qdisc_watchdog,
 						 timer);
 
@@ -586,6 +619,7 @@ static enum hrtimer_restart qdisc_watchdog(struct hrtimer *timer)
 
 void qdisc_watchdog_init(struct qdisc_watchdog *wd, struct Qdisc *qdisc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hrtimer_init(&wd->timer, CLOCK_MONOTONIC, HRTIMER_MODE_ABS_PINNED);
 	wd->timer.function = qdisc_watchdog;
 	wd->qdisc = qdisc;
@@ -594,6 +628,7 @@ EXPORT_SYMBOL(qdisc_watchdog_init);
 
 void qdisc_watchdog_schedule_ns(struct qdisc_watchdog *wd, u64 expires)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(__QDISC_STATE_DEACTIVATED,
 		     &qdisc_root_sleeping(wd->qdisc)->state))
 		return;
@@ -610,6 +645,7 @@ EXPORT_SYMBOL(qdisc_watchdog_schedule_ns);
 
 void qdisc_watchdog_cancel(struct qdisc_watchdog *wd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hrtimer_cancel(&wd->timer);
 }
 EXPORT_SYMBOL(qdisc_watchdog_cancel);
@@ -622,6 +658,7 @@ static struct hlist_head *qdisc_class_hash_alloc(unsigned int n)
 	h = kvmalloc_array(n, sizeof(struct hlist_head), GFP_KERNEL);
 
 	if (h != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < n; i++)
 			INIT_HLIST_HEAD(&h[i]);
 	}
@@ -638,7 +675,9 @@ void qdisc_class_hash_grow(struct Qdisc *sch, struct Qdisc_class_hash *clhash)
 
 	/* Rehash when load factor exceeds 0.75 */
 	if (clhash->hashelems * 4 <= clhash->hashsize * 3)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	nsize = clhash->hashsize * 2;
 	nmask = nsize - 1;
 	nhash = qdisc_class_hash_alloc(nsize);
@@ -670,7 +709,9 @@ int qdisc_class_hash_init(struct Qdisc_class_hash *clhash)
 
 	clhash->hash = qdisc_class_hash_alloc(size);
 	if (clhash->hash == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	clhash->hashsize  = size;
 	clhash->hashmask  = size - 1;
 	clhash->hashelems = 0;
@@ -680,6 +721,7 @@ EXPORT_SYMBOL(qdisc_class_hash_init);
 
 void qdisc_class_hash_destroy(struct Qdisc_class_hash *clhash)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kvfree(clhash->hash);
 }
 EXPORT_SYMBOL(qdisc_class_hash_destroy);
@@ -699,6 +741,7 @@ EXPORT_SYMBOL(qdisc_class_hash_insert);
 void qdisc_class_hash_remove(struct Qdisc_class_hash *clhash,
 			     struct Qdisc_class_common *cl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_del(&cl->hnode);
 	clhash->hashelems--;
 }
@@ -713,6 +756,7 @@ static u32 qdisc_alloc_handle(struct net_device *dev)
 	static u32 autohandle = TC_H_MAKE(0x80000000U, 0);
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		autohandle += TC_H_MAKE(0x10000U, 0);
 		if (autohandle == TC_H_MAKE(TC_H_ROOT, 0))
 			autohandle = TC_H_MAKE(0x80000000U, 0);
@@ -733,6 +777,7 @@ void qdisc_tree_reduce_backlog(struct Qdisc *sch, unsigned int n,
 	bool notify;
 	int drops;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (n == 0 && len == 0)
 		return;
 	drops = max_t(int, n, 0);
@@ -785,6 +830,7 @@ static int tc_fill_qdisc(struct sk_buff *skb, struct Qdisc *q, u32 clid,
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(*tcm), flags);
 	if (!nlh)
 		goto out_nlmsg_trim;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcm = nlmsg_data(nlh);
 	tcm->tcm_family = AF_UNSPEC;
 	tcm->tcm__pad1 = 0;
@@ -835,6 +881,7 @@ static int tc_fill_qdisc(struct sk_buff *skb, struct Qdisc *q, u32 clid,
 
 static bool tc_qdisc_dump_ignore(struct Qdisc *q, bool dump_invisible)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (q->flags & TCQ_F_BUILTIN)
 		return true;
 	if ((q->flags & TCQ_F_INVISIBLE) && !dump_invisible)
@@ -848,6 +895,7 @@ static int qdisc_notify(struct net *net, struct sk_buff *oskb,
 			struct Qdisc *old, struct Qdisc *new)
 {
 	struct sk_buff *skb;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 portid = oskb ? NETLINK_CB(oskb).portid : 0;
 
 	skb = alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);
@@ -878,6 +926,7 @@ static void notify_and_destroy(struct net *net, struct sk_buff *skb,
 			       struct nlmsghdr *n, u32 clid,
 			       struct Qdisc *old, struct Qdisc *new)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (new || old)
 		qdisc_notify(net, skb, n, clid, old, new);
 
@@ -907,6 +956,7 @@ static int qdisc_graft(struct net_device *dev, struct Qdisc *parent,
 
 		ingress = 0;
 		num_q = dev->num_tx_queues;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((q && q->flags & TCQ_F_INGRESS) ||
 		    (new && new->flags & TCQ_F_INGRESS)) {
 			num_q = 1;
@@ -1139,6 +1189,7 @@ static int qdisc_change(struct Qdisc *sch, struct nlattr **tca)
 	int err = 0;
 
 	if (tca[TCA_OPTIONS]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sch->ops->change == NULL)
 			return -EINVAL;
 		err = sch->ops->change(sch, tca[TCA_OPTIONS]);
@@ -1186,7 +1237,9 @@ static int check_loop(struct Qdisc *q, struct Qdisc *p, int depth)
 	struct check_loop_arg	arg;
 
 	if (q->ops->cl_ops == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	arg.w.stop = arg.w.skip = arg.w.count = 0;
 	arg.w.fn = check_loop_fn;
@@ -1205,6 +1258,7 @@ check_loop_fn(struct Qdisc *q, unsigned long cl, struct qdisc_walker *w)
 
 	leaf = cops->leaf(q, cl);
 	if (leaf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (leaf == arg->p || arg->depth > 7)
 			return -ELOOP;
 		return check_loop(leaf, arg->p, arg->depth + 1);
@@ -1219,6 +1273,7 @@ check_loop_fn(struct Qdisc *q, unsigned long cl, struct qdisc_walker *w)
 static int tc_get_qdisc(struct sk_buff *skb, struct nlmsghdr *n,
 			struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct tcmsg *tcm = nlmsg_data(n);
 	struct nlattr *tca[TCA_MAX + 1];
@@ -1289,6 +1344,7 @@ static int tc_get_qdisc(struct sk_buff *skb, struct nlmsghdr *n,
 static int tc_modify_qdisc(struct sk_buff *skb, struct nlmsghdr *n,
 			   struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct tcmsg *tcm;
 	struct nlattr *tca[TCA_MAX + 1];
@@ -1451,7 +1507,9 @@ static int tc_dump_qdisc_root(struct Qdisc *root, struct sk_buff *skb,
 	int b;
 
 	if (!root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	q = root;
 	if (q_idx < s_q_idx) {
@@ -1497,6 +1555,7 @@ static int tc_dump_qdisc_root(struct Qdisc *root, struct sk_buff *skb,
 
 static int tc_dump_qdisc(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	int idx, q_idx;
 	int s_idx, s_q_idx;
@@ -1567,6 +1626,7 @@ static int tc_fill_tclass(struct sk_buff *skb, struct Qdisc *q,
 	nlh = nlmsg_put(skb, portid, seq, event, sizeof(*tcm), flags);
 	if (!nlh)
 		goto out_nlmsg_trim;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tcm = nlmsg_data(nlh);
 	tcm->tcm_family = AF_UNSPEC;
 	tcm->tcm__pad1 = 0;
@@ -1604,6 +1664,7 @@ static int tclass_notify(struct net *net, struct sk_buff *oskb,
 			 unsigned long cl, int event)
 {
 	struct sk_buff *skb;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 portid = oskb ? NETLINK_CB(oskb).portid : 0;
 
 	skb = alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);
@@ -1624,6 +1685,7 @@ static int tclass_del_notify(struct net *net,
 			     struct sk_buff *oskb, struct nlmsghdr *n,
 			     struct Qdisc *q, unsigned long cl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 portid = oskb ? NETLINK_CB(oskb).portid : 0;
 	struct sk_buff *skb;
 	int err = 0;
@@ -1664,6 +1726,7 @@ static int tcf_node_bind(struct tcf_proto *tp, void *n, struct tcf_walker *arg)
 	struct tcf_bind_args *a = (void *)arg;
 
 	if (tp->ops->bind_class) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tcf_tree_lock(tp);
 		tp->ops->bind_class(n, a->classid, a->cl);
 		tcf_tree_unlock(tp);
@@ -1681,7 +1744,9 @@ static void tc_bind_tclass(struct Qdisc *q, u32 portid, u32 clid,
 
 	cl = cops->find(q, portid);
 	if (!cl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	block = cops->tcf_block(q, cl);
 	if (!block)
 		return;
@@ -1712,6 +1777,7 @@ static void tc_bind_tclass(struct Qdisc *q, u32 portid, u32 clid,
 static int tc_ctl_tclass(struct sk_buff *skb, struct nlmsghdr *n,
 			 struct netlink_ext_ack *extack)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = sock_net(skb->sk);
 	struct tcmsg *tcm = nlmsg_data(n);
 	struct nlattr *tca[TCA_MAX + 1];
@@ -1893,7 +1959,9 @@ static int tc_dump_tclass_root(struct Qdisc *root, struct sk_buff *skb,
 	int b;
 
 	if (!root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (tc_dump_tclass_qdisc(root, skb, tcm, cb, t_p, s_t) < 0)
 		return -1;
@@ -1917,6 +1985,7 @@ static int tc_dump_tclass_root(struct Qdisc *root, struct sk_buff *skb,
 
 static int tc_dump_tclass(struct sk_buff *skb, struct netlink_callback *cb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tcmsg *tcm = nlmsg_data(cb->nlh);
 	struct net *net = sock_net(skb->sk);
 	struct netdev_queue *dev_queue;
@@ -1951,6 +2020,7 @@ static int tc_dump_tclass(struct sk_buff *skb, struct netlink_callback *cb)
 #ifdef CONFIG_PROC_FS
 static int psched_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_printf(seq, "%08x %08x %08x %08x\n",
 		   (u32)NSEC_PER_USEC, (u32)PSCHED_TICKS2NS(1),
 		   1000000,
@@ -1961,6 +2031,7 @@ static int psched_show(struct seq_file *seq, void *v)
 
 static int psched_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, psched_show, NULL);
 }
 
@@ -1978,7 +2049,9 @@ static int __net_init psched_net_init(struct net *net)
 
 	e = proc_create("psched", 0, net->proc_net, &psched_fops);
 	if (e == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
@@ -2009,6 +2082,7 @@ static int __init pktsched_init(void)
 
 	err = register_pernet_subsys(&psched_net_ops);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("pktsched_init: "
 		       "cannot initialize per netns operations\n");
 		return err;
diff --git a/net/sched/sch_blackhole.c b/net/sched/sch_blackhole.c
index c98a61e..b8096e8 100644
--- a/net/sched/sch_blackhole.c
+++ b/net/sched/sch_blackhole.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/sch_blackhole.c	Black hole queue
  *
@@ -20,12 +22,14 @@
 static int blackhole_enqueue(struct sk_buff *skb, struct Qdisc *sch,
 			     struct sk_buff **to_free)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	qdisc_drop(skb, sch, to_free);
 	return NET_XMIT_SUCCESS;
 }
 
 static struct sk_buff *blackhole_dequeue(struct Qdisc *sch)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
diff --git a/net/sched/sch_generic.c b/net/sched/sch_generic.c
index bf8c81e..bbfc5ac 100644
--- a/net/sched/sch_generic.c
+++ b/net/sched/sch_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/sched/sch_generic.c	Generic packet scheduler routines.
  *
@@ -48,6 +50,7 @@ EXPORT_SYMBOL(default_qdisc_ops);
 
 static inline int dev_requeue_skb(struct sk_buff *skb, struct Qdisc *q)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	q->gso_skb = skb;
 	q->qstats.requeues++;
 	qdisc_qstats_backlog_inc(q, skb);
@@ -62,6 +65,7 @@ static void try_bulk_dequeue_skb(struct Qdisc *q,
 				 const struct netdev_queue *txq,
 				 int *packets)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int bytelimit = qdisc_avail_bulklimit(txq) - skb->len;
 
 	while (bytelimit > 0) {
@@ -85,6 +89,7 @@ static void try_bulk_dequeue_skb_slow(struct Qdisc *q,
 				      struct sk_buff *skb,
 				      int *packets)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int mapping = skb_get_queue_mapping(skb);
 	struct sk_buff *nskb;
 	int cnt = 0;
@@ -122,11 +127,14 @@ static struct sk_buff *dequeue_skb(struct Qdisc *q, bool *validate,
 		/* check the reason of requeuing without tx lock first */
 		txq = skb_get_tx_queue(txq->dev, skb);
 		if (!netif_xmit_frozen_or_stopped(txq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			q->gso_skb = NULL;
 			qdisc_qstats_backlog_dec(q, skb);
 			q->q.qlen--;
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skb = NULL;
+}
 		goto trace;
 	}
 	*validate = true;
@@ -135,11 +143,13 @@ static struct sk_buff *dequeue_skb(struct Qdisc *q, bool *validate,
 		/* check the reason of requeuing without tx lock first */
 		txq = skb_get_tx_queue(txq->dev, skb);
 		if (!netif_xmit_frozen_or_stopped(txq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			q->skb_bad_txq = NULL;
 			qdisc_qstats_backlog_dec(q, skb);
 			q->q.qlen--;
 			goto bulk;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		skb = NULL;
 		goto trace;
 	}
@@ -149,7 +159,9 @@ static struct sk_buff *dequeue_skb(struct Qdisc *q, bool *validate,
 	if (skb) {
 bulk:
 		if (qdisc_may_bulk(q))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			try_bulk_dequeue_skb(q, skb, txq, packets);
+}
 		else
 			try_bulk_dequeue_skb_slow(q, skb, packets);
 	}
@@ -187,9 +199,11 @@ int sch_direct_xmit(struct sk_buff *skb, struct Qdisc *q,
 
 		HARD_TX_UNLOCK(dev, txq);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(root_lock);
 		return qdisc_qlen(q);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(root_lock);
 
 	if (dev_xmit_complete(ret)) {
@@ -198,14 +212,19 @@ int sch_direct_xmit(struct sk_buff *skb, struct Qdisc *q,
 	} else {
 		/* Driver returned NETDEV_TX_BUSY - requeue skb */
 		if (unlikely(ret != NETDEV_TX_BUSY))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			net_warn_ratelimited("BUG %s code %d qlen %d\n",
 					     dev->name, ret, q->q.qlen);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = dev_requeue_skb(skb, q);
 	}
 
 	if (ret && netif_xmit_frozen_or_stopped(txq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 0;
+}
 
 	return ret;
 }
@@ -240,8 +259,11 @@ static inline int qdisc_restart(struct Qdisc *q, int *packets)
 	/* Dequeue packet */
 	skb = dequeue_skb(q, &validate, packets);
 	if (unlikely(!skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	root_lock = qdisc_lock(q);
 	dev = qdisc_dev(q);
 	txq = skb_get_tx_queue(dev, skb);
@@ -261,12 +283,15 @@ void __qdisc_run(struct Qdisc *q)
 		 * 2. another process needs the CPU;
 		 */
 		quota -= packets;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (quota <= 0 || need_resched()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__netif_schedule(q);
 			break;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	qdisc_run_end(q);
 }
 
@@ -276,7 +301,9 @@ unsigned long dev_trans_start(struct net_device *dev)
 	unsigned int i;
 
 	if (is_vlan_dev(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev = vlan_dev_real_dev(dev);
+}
 	res = netdev_get_tx_queue(dev, 0)->trans_start;
 	for (i = 1; i < dev->num_tx_queues; i++) {
 		val = netdev_get_tx_queue(dev, i)->trans_start;
@@ -294,6 +321,7 @@ static void dev_watchdog(unsigned long arg)
 
 	netif_tx_lock(dev);
 	if (!qdisc_tx_is_noop(dev)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (netif_device_present(dev) &&
 		    netif_running(dev) &&
 		    netif_carrier_ok(dev)) {
@@ -334,8 +362,11 @@ static void dev_watchdog(unsigned long arg)
 void __netdev_watchdog_up(struct net_device *dev)
 {
 	if (dev->netdev_ops->ndo_tx_timeout) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dev->watchdog_timeo <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->watchdog_timeo = 5*HZ;
+}
 		if (!mod_timer(&dev->watchdog_timer,
 			       round_jiffies(jiffies + dev->watchdog_timeo)))
 			dev_hold(dev);
@@ -351,7 +382,9 @@ static void dev_watchdog_down(struct net_device *dev)
 {
 	netif_tx_lock_bh(dev);
 	if (del_timer(&dev->watchdog_timer))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_put(dev);
+}
 	netif_tx_unlock_bh(dev);
 }
 
@@ -365,11 +398,15 @@ void netif_carrier_on(struct net_device *dev)
 {
 	if (test_and_clear_bit(__LINK_STATE_NOCARRIER, &dev->state)) {
 		if (dev->reg_state == NETREG_UNINITIALIZED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 		atomic_inc(&dev->carrier_changes);
 		linkwatch_fire_event(dev);
 		if (netif_running(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__netdev_watchdog_up(dev);
+}
 	}
 }
 EXPORT_SYMBOL(netif_carrier_on);
@@ -384,7 +421,9 @@ void netif_carrier_off(struct net_device *dev)
 {
 	if (!test_and_set_bit(__LINK_STATE_NOCARRIER, &dev->state)) {
 		if (dev->reg_state == NETREG_UNINITIALIZED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
+}
 		atomic_inc(&dev->carrier_changes);
 		linkwatch_fire_event(dev);
 	}
@@ -399,6 +438,7 @@ EXPORT_SYMBOL(netif_carrier_off);
 static int noop_enqueue(struct sk_buff *skb, struct Qdisc *qdisc,
 			struct sk_buff **to_free)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__qdisc_drop(skb, to_free);
 	return NET_XMIT_CN;
 }
@@ -490,6 +530,7 @@ static inline struct qdisc_skb_head *band2list(struct pfifo_fast_priv *priv,
 static int pfifo_fast_enqueue(struct sk_buff *skb, struct Qdisc *qdisc,
 			      struct sk_buff **to_free)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (qdisc->q.qlen < qdisc_dev(qdisc)->tx_queue_len) {
 		int band = prio2band[skb->priority & TC_PRIO_MAX];
 		struct pfifo_fast_priv *priv = qdisc_priv(qdisc);
@@ -505,6 +546,7 @@ static int pfifo_fast_enqueue(struct sk_buff *skb, struct Qdisc *qdisc,
 
 static struct sk_buff *pfifo_fast_dequeue(struct Qdisc *qdisc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pfifo_fast_priv *priv = qdisc_priv(qdisc);
 	int band = bitmap2band[priv->bitmap];
 
@@ -529,6 +571,7 @@ static struct sk_buff *pfifo_fast_dequeue(struct Qdisc *qdisc)
 
 static struct sk_buff *pfifo_fast_peek(struct Qdisc *qdisc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pfifo_fast_priv *priv = qdisc_priv(qdisc);
 	int band = bitmap2band[priv->bitmap];
 
@@ -546,6 +589,7 @@ static void pfifo_fast_reset(struct Qdisc *qdisc)
 	int prio;
 	struct pfifo_fast_priv *priv = qdisc_priv(qdisc);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (prio = 0; prio < PFIFO_FAST_BANDS; prio++)
 		__qdisc_reset_queue(band2list(priv, prio));
 
@@ -558,6 +602,7 @@ static int pfifo_fast_dump(struct Qdisc *qdisc, struct sk_buff *skb)
 {
 	struct tc_prio_qopt opt = { .bands = PFIFO_FAST_BANDS };
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(&opt.priomap, prio2band, TC_PRIO_MAX + 1);
 	if (nla_put(skb, TCA_OPTIONS, sizeof(opt), &opt))
 		goto nla_put_failure;
@@ -573,7 +618,9 @@ static int pfifo_fast_init(struct Qdisc *qdisc, struct nlattr *opt)
 	struct pfifo_fast_priv *priv = qdisc_priv(qdisc);
 
 	for (prio = 0; prio < PFIFO_FAST_BANDS; prio++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		qdisc_skb_head_init(band2list(priv, prio));
+}
 
 	/* Can by-pass the queue discipline */
 	qdisc->flags |= TCQ_F_CAN_BYPASS;
@@ -613,22 +660,28 @@ struct Qdisc *qdisc_alloc(struct netdev_queue *dev_queue,
 	sch = (struct Qdisc *) QDISC_ALIGN((unsigned long) p);
 	/* if we got non aligned memory, ask more and do alignment ourself */
 	if (sch != p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(p);
 		p = kzalloc_node(size + QDISC_ALIGNTO - 1, GFP_KERNEL,
 				 netdev_queue_numa_node_read(dev_queue));
 		if (!p)
 			goto errout;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sch = (struct Qdisc *) QDISC_ALIGN((unsigned long) p);
 		sch->padded = (char *) sch - (char *) p;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	qdisc_skb_head_init(&sch->q);
 	spin_lock_init(&sch->q.lock);
 
 	spin_lock_init(&sch->busylock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_class(&sch->busylock,
 			  dev->qdisc_tx_busylock ?: &qdisc_tx_busylock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seqcount_init(&sch->running);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_class(&sch->running,
 			  dev->qdisc_running_key ?: &qdisc_running_key);
 
@@ -651,18 +704,24 @@ struct Qdisc *qdisc_create_dflt(struct netdev_queue *dev_queue,
 	struct Qdisc *sch;
 
 	if (!try_module_get(ops->owner))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	sch = qdisc_alloc(dev_queue, ops);
 	if (IS_ERR(sch)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		module_put(ops->owner);
 		return NULL;
 	}
 	sch->parent = parentid;
 
 	if (!ops->init || ops->init(sch, NULL) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sch;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	qdisc_destroy(sch);
 	return NULL;
 }
@@ -675,12 +734,15 @@ void qdisc_reset(struct Qdisc *qdisc)
 	const struct Qdisc_ops *ops = qdisc->ops;
 
 	if (ops->reset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ops->reset(qdisc);
+}
 
 	kfree_skb(qdisc->skb_bad_txq);
 	qdisc->skb_bad_txq = NULL;
 
 	if (qdisc->gso_skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb_list(qdisc->gso_skb);
 		qdisc->gso_skb = NULL;
 	}
@@ -691,9 +753,11 @@ EXPORT_SYMBOL(qdisc_reset);
 
 static void qdisc_rcu_free(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct Qdisc *qdisc = container_of(head, struct Qdisc, rcu_head);
 
 	if (qdisc_is_percpu_stats(qdisc)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		free_percpu(qdisc->cpu_bstats);
 		free_percpu(qdisc->cpu_qstats);
 	}
@@ -716,9 +780,13 @@ void qdisc_destroy(struct Qdisc *qdisc)
 #endif
 	gen_kill_estimator(&qdisc->rate_est);
 	if (ops->reset)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ops->reset(qdisc);
+}
 	if (ops->destroy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ops->destroy(qdisc);
+}
 
 	module_put(ops->owner);
 	dev_put(qdisc_dev(qdisc));
@@ -767,10 +835,13 @@ static void attach_one_default_qdisc(struct net_device *dev,
 	const struct Qdisc_ops *ops = default_qdisc_ops;
 
 	if (dev->priv_flags & IFF_NO_QUEUE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ops = &noqueue_qdisc_ops;
+}
 
 	qdisc = qdisc_create_dflt(dev_queue, ops, TC_H_ROOT);
 	if (!qdisc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		netdev_info(dev, "activation failed\n");
 		return;
 	}
@@ -792,8 +863,10 @@ static void attach_default_qdiscs(struct net_device *dev)
 		dev->qdisc = txq->qdisc_sleeping;
 		qdisc_refcount_inc(dev->qdisc);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		qdisc = qdisc_create_dflt(txq, &mq_qdisc_ops, TC_H_ROOT);
 		if (qdisc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev->qdisc = qdisc;
 			qdisc->ops->attach(qdisc);
 		}
@@ -840,7 +913,9 @@ void dev_activate(struct net_device *dev)
 	need_watchdog = 0;
 	netdev_for_each_tx_queue(dev, transition_one_qdisc, &need_watchdog);
 	if (dev_ingress_queue(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		transition_one_qdisc(dev, dev_ingress_queue(dev), NULL);
+}
 
 	if (need_watchdog) {
 		netif_trans_update(dev);
@@ -858,6 +933,7 @@ static void dev_deactivate_queue(struct net_device *dev,
 
 	qdisc = rtnl_dereference(dev_queue->qdisc);
 	if (qdisc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_bh(qdisc_lock(qdisc));
 
 		if (!(qdisc->flags & TCQ_F_BUILTIN))
@@ -892,8 +968,11 @@ static bool some_qdisc_is_busy(struct net_device *dev)
 		spin_unlock_bh(root_lock);
 
 		if (val)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -913,8 +992,10 @@ void dev_deactivate_many(struct list_head *head)
 		netdev_for_each_tx_queue(dev, dev_deactivate_queue,
 					 &noop_qdisc);
 		if (dev_ingress_queue(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dev_deactivate_queue(dev, dev_ingress_queue(dev),
 					     &noop_qdisc);
+}
 
 		dev_watchdog_down(dev);
 		sync_needed |= !dev->dismantle;
@@ -925,7 +1006,9 @@ void dev_deactivate_many(struct list_head *head)
 	 * Caller will call synchronize_net() for us
 	 */
 	if (sync_needed)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		synchronize_net();
+}
 
 	/* Wait for outstanding qdisc_run calls. */
 	list_for_each_entry(dev, head, close_list)
@@ -958,7 +1041,9 @@ void dev_init_scheduler(struct net_device *dev)
 	dev->qdisc = &noop_qdisc;
 	netdev_for_each_tx_queue(dev, dev_init_scheduler_queue, &noop_qdisc);
 	if (dev_ingress_queue(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dev_init_scheduler_queue(dev, dev_ingress_queue(dev), &noop_qdisc);
+}
 
 	setup_timer(&dev->watchdog_timer, dev_watchdog, (unsigned long)dev);
 }
@@ -982,7 +1067,9 @@ void dev_shutdown(struct net_device *dev)
 {
 	netdev_for_each_tx_queue(dev, shutdown_scheduler_queue, &noop_qdisc);
 	if (dev_ingress_queue(dev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shutdown_scheduler_queue(dev, dev_ingress_queue(dev), &noop_qdisc);
+}
 	qdisc_destroy(dev->qdisc);
 	dev->qdisc = &noop_qdisc;
 
@@ -993,6 +1080,7 @@ void psched_ratecfg_precompute(struct psched_ratecfg *r,
 			       const struct tc_ratespec *conf,
 			       u64 rate64)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(r, 0, sizeof(*r));
 	r->overhead = conf->overhead;
 	r->rate_bytes_ps = max_t(u64, conf->rate, rate64);
diff --git a/net/socket.c b/net/socket.c
index 43d2f17..d779d3a 100644
--- a/net/socket.c
+++ b/net/socket.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NET		An implementation of the SOCKET network access protocol.
  *
@@ -188,11 +190,17 @@ static DEFINE_PER_CPU(int, sockets_in_use);
 int move_addr_to_kernel(void __user *uaddr, int ulen, struct sockaddr_storage *kaddr)
 {
 	if (ulen < 0 || ulen > sizeof(struct sockaddr_storage))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (ulen == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (copy_from_user(kaddr, uaddr, ulen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	return audit_sockaddr(ulen, kaddr);
 }
 
@@ -222,16 +230,26 @@ static int move_addr_to_user(struct sockaddr_storage *kaddr, int klen,
 	BUG_ON(klen > sizeof(struct sockaddr_storage));
 	err = get_user(len, ulen);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	if (len > klen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = klen;
+}
 	if (len < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (len) {
 		if (audit_sockaddr(klen, kaddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 		if (copy_to_user(uaddr, kaddr, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 	}
 	/*
 	 *      "fromlen shall refer to the value before truncation.."
@@ -249,9 +267,13 @@ static struct inode *sock_alloc_inode(struct super_block *sb)
 
 	ei = kmem_cache_alloc(sock_inode_cachep, GFP_KERNEL);
 	if (!ei)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	wq = kmalloc(sizeof(*wq), GFP_KERNEL);
 	if (!wq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kmem_cache_free(sock_inode_cachep, ei);
 		return NULL;
 	}
@@ -322,6 +344,7 @@ static int sockfs_xattr_get(const struct xattr_handler *handler,
 			    struct dentry *dentry, struct inode *inode,
 			    const char *suffix, void *value, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (value) {
 		if (dentry->d_name.len + 1 > size)
 			return -ERANGE;
@@ -407,7 +430,9 @@ struct file *sock_alloc_file(struct socket *sock, int flags, const char *dname)
 	}
 	path.dentry = d_alloc_pseudo(sock_mnt->mnt_sb, &name);
 	if (unlikely(!path.dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 	path.mnt = mntget(sock_mnt);
 
 	d_instantiate(path.dentry, SOCK_INODE(sock));
@@ -433,7 +458,9 @@ static int sock_map_fd(struct socket *sock, int flags)
 	struct file *newfile;
 	int fd = get_unused_fd_flags(flags);
 	if (unlikely(fd < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return fd;
+}
 
 	newfile = sock_alloc_file(sock, flags, NULL);
 	if (likely(!IS_ERR(newfile))) {
@@ -441,6 +468,7 @@ static int sock_map_fd(struct socket *sock, int flags)
 		return fd;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	put_unused_fd(fd);
 	return PTR_ERR(newfile);
 }
@@ -475,6 +503,7 @@ struct socket *sockfd_lookup(int fd, int *err)
 
 	file = fget(fd);
 	if (!file) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*err = -EBADF;
 		return NULL;
 	}
@@ -493,6 +522,7 @@ static struct socket *sockfd_lookup_light(int fd, int *err, int *fput_needed)
 
 	*err = -EBADF;
 	if (f.file) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock = sock_from_file(f.file, err);
 		if (likely(sock)) {
 			*fput_needed = f.flags;
@@ -500,6 +530,7 @@ static struct socket *sockfd_lookup_light(int fd, int *err, int *fput_needed)
 		}
 		fdput(f);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -511,7 +542,9 @@ static ssize_t sockfs_listxattr(struct dentry *dentry, char *buffer,
 
 	len = security_inode_listsecurity(d_inode(dentry), buffer, size);
 	if (len < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return len;
+}
 	used += len;
 	if (buffer) {
 		if (size < used)
@@ -533,6 +566,7 @@ static ssize_t sockfs_listxattr(struct dentry *dentry, char *buffer,
 
 static int sockfs_setattr(struct dentry *dentry, struct iattr *iattr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int err = simple_setattr(dentry, iattr);
 
 	if (!err && (iattr->ia_valid & ATTR_UID)) {
@@ -564,8 +598,11 @@ struct socket *sock_alloc(void)
 
 	inode = new_inode_pseudo(sock_mnt->mnt_sb);
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock = SOCKET_I(inode);
 
 	inode->i_ino = get_next_ino();
@@ -599,7 +636,9 @@ void sock_release(struct socket *sock)
 	}
 
 	if (rcu_dereference_protected(sock->wq, 1)->fasync_list)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s: fasync list not empty!\n", __func__);
+}
 
 	this_cpu_sub(sockets_in_use, 1);
 	if (!sock->file) {
@@ -615,7 +654,9 @@ void __sock_tx_timestamp(__u16 tsflags, __u8 *tx_flags)
 	u8 flags = *tx_flags;
 
 	if (tsflags & SOF_TIMESTAMPING_TX_HARDWARE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= SKBTX_HW_TSTAMP;
+}
 
 	if (tsflags & SOF_TIMESTAMPING_TX_SOFTWARE)
 		flags |= SKBTX_SW_TSTAMP;
@@ -646,6 +687,7 @@ EXPORT_SYMBOL(sock_sendmsg);
 int kernel_sendmsg(struct socket *sock, struct msghdr *msg,
 		   struct kvec *vec, size_t num, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iov_iter_kvec(&msg->msg_iter, WRITE | ITER_KVEC, vec, num, size);
 	return sock_sendmsg(sock, msg);
 }
@@ -657,7 +699,9 @@ int kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg,
 	struct socket *sock = sk->sk_socket;
 
 	if (!sock->ops->sendmsg_locked)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sock_no_sendmsg_locked(sk, msg, size);
+}
 
 	iov_iter_kvec(&msg->msg_iter, WRITE | ITER_KVEC, vec, num, size);
 
@@ -685,6 +729,7 @@ static bool skb_is_err_queue(const struct sk_buff *skb)
  */
 static bool skb_is_swtx_tstamp(const struct sk_buff *skb, int false_tstamp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb->tstamp && !false_tstamp && skb_is_err_queue(skb);
 }
 
@@ -694,7 +739,9 @@ static void put_ts_pktinfo(struct msghdr *msg, struct sk_buff *skb)
 	struct net_device *orig_dev;
 
 	if (!skb_mac_header_was_set(skb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	memset(&ts_pktinfo, 0, sizeof(ts_pktinfo));
 
@@ -715,6 +762,7 @@ static void put_ts_pktinfo(struct msghdr *msg, struct sk_buff *skb)
 void __sock_recv_timestamp(struct msghdr *msg, struct sock *sk,
 	struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int need_software_tstamp = sock_flag(sk, SOCK_RCVTSTAMP);
 	struct scm_timestamping tss;
 	int empty = 1, false_tstamp = 0;
@@ -773,7 +821,9 @@ void __sock_recv_wifi_status(struct msghdr *msg, struct sock *sk,
 	int ack;
 
 	if (!sock_flag(sk, SOCK_WIFI_STATUS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (!skb->wifi_acked_valid)
 		return;
 
@@ -786,6 +836,7 @@ EXPORT_SYMBOL_GPL(__sock_recv_wifi_status);
 static inline void sock_recv_drops(struct msghdr *msg, struct sock *sk,
 				   struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sock_flag(sk, SOCK_RXQ_OVFL) && skb && SOCK_SKB_CB(skb)->dropcount)
 		put_cmsg(msg, SOL_SOCKET, SO_RXQ_OVFL,
 			sizeof(__u32), &SOCK_SKB_CB(skb)->dropcount);
@@ -794,6 +845,7 @@ static inline void sock_recv_drops(struct msghdr *msg, struct sock *sk,
 void __sock_recv_ts_and_drops(struct msghdr *msg, struct sock *sk,
 	struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock_recv_timestamp(msg, sk, skb);
 	sock_recv_drops(msg, sk, skb);
 }
@@ -831,6 +883,7 @@ EXPORT_SYMBOL(sock_recvmsg);
 int kernel_recvmsg(struct socket *sock, struct msghdr *msg,
 		   struct kvec *vec, size_t num, size_t size, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mm_segment_t oldfs = get_fs();
 	int result;
 
@@ -850,6 +903,7 @@ static ssize_t sock_sendpage(struct file *file, struct page *page,
 
 	sock = file->private_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flags = (file->f_flags & O_NONBLOCK) ? MSG_DONTWAIT : 0;
 	/* more is a combination of MSG_MORE and MSG_SENDPAGE_NOTLAST */
 	flags |= more;
@@ -864,7 +918,9 @@ static ssize_t sock_splice_read(struct file *file, loff_t *ppos,
 	struct socket *sock = file->private_data;
 
 	if (unlikely(!sock->ops->splice_read))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	return sock->ops->splice_read(sock, ppos, pipe, len, flags);
 }
@@ -881,10 +937,14 @@ static ssize_t sock_read_iter(struct kiocb *iocb, struct iov_iter *to)
 		msg.msg_flags = MSG_DONTWAIT;
 
 	if (iocb->ki_pos != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESPIPE;
+}
 
 	if (!iov_iter_count(to))	/* Match SYS5 behaviour */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	res = sock_recvmsg(sock, &msg, msg.msg_flags);
 	*to = msg.msg_iter;
@@ -900,13 +960,17 @@ static ssize_t sock_write_iter(struct kiocb *iocb, struct iov_iter *from)
 	ssize_t res;
 
 	if (iocb->ki_pos != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESPIPE;
+}
 
 	if (file->f_flags & O_NONBLOCK)
 		msg.msg_flags = MSG_DONTWAIT;
 
 	if (sock->type == SOCK_SEQPACKET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msg.msg_flags |= MSG_EOR;
+}
 
 	res = sock_sendmsg(sock, &msg);
 	*from = msg.msg_iter;
@@ -945,6 +1009,7 @@ static int (*dlci_ioctl_hook) (unsigned int, void __user *);
 
 void dlci_ioctl_set(int (*hook) (unsigned int, void __user *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&dlci_ioctl_mutex);
 	dlci_ioctl_hook = hook;
 	mutex_unlock(&dlci_ioctl_mutex);
@@ -976,6 +1041,7 @@ static long sock_do_ioctl(struct net *net, struct socket *sock,
 
 static struct ns_common *get_net_ns(struct ns_common *ns)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &get_net(container_of(ns, struct net, ns))->ns;
 }
 
@@ -991,6 +1057,7 @@ static long sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
 	sk = sock->sk;
 	net = sock_net(sk);
 	if (cmd >= SIOCDEVPRIVATE && cmd <= (SIOCDEVPRIVATE + 15)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = dev_ioctl(net, cmd, argp);
 	} else
 #ifdef CONFIG_WEXT_CORE
@@ -1004,6 +1071,7 @@ static long sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
 			err = -EFAULT;
 			if (get_user(pid, (int __user *)argp))
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = f_setown(sock->file, pid, 1);
 			break;
 		case FIOGETOWN:
@@ -1017,33 +1085,51 @@ static long sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
 		case SIOCBRDELBR:
 			err = -ENOPKG;
 			if (!br_ioctl_hook)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				request_module("bridge");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mutex_lock(&br_ioctl_mutex);
 			if (br_ioctl_hook)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = br_ioctl_hook(net, cmd, argp);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mutex_unlock(&br_ioctl_mutex);
 			break;
 		case SIOCGIFVLAN:
 		case SIOCSIFVLAN:
 			err = -ENOPKG;
 			if (!vlan_ioctl_hook)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				request_module("8021q");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mutex_lock(&vlan_ioctl_mutex);
 			if (vlan_ioctl_hook)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = vlan_ioctl_hook(net, argp);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mutex_unlock(&vlan_ioctl_mutex);
 			break;
 		case SIOCADDDLCI:
 		case SIOCDELDLCI:
 			err = -ENOPKG;
 			if (!dlci_ioctl_hook)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				request_module("dlci");
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mutex_lock(&dlci_ioctl_mutex);
 			if (dlci_ioctl_hook)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = dlci_ioctl_hook(cmd, argp);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mutex_unlock(&dlci_ioctl_mutex);
 			break;
 		case SIOCGSKNS:
@@ -1051,6 +1137,7 @@ static long sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
 			if (!ns_capable(net->user_ns, CAP_NET_ADMIN))
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = open_related_ns(&net->ns, get_net_ns);
 			break;
 		default:
@@ -1071,6 +1158,7 @@ int sock_create_lite(int family, int type, int protocol, struct socket **res)
 
 	sock = sock_alloc();
 	if (!sock) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOMEM;
 		goto out;
 	}
@@ -1107,7 +1195,9 @@ static unsigned int sock_poll(struct file *file, poll_table *wait)
 
 		/* once, only if requested by syscall */
 		if (wait && (wait->_key & POLL_BUSY_LOOP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_busy_loop(sock->sk, 1);
+}
 	}
 
 	return busy_flag | sock->ops->poll(file, sock, wait);
@@ -1144,7 +1234,9 @@ static int sock_fasync(int fd, struct file *filp, int on)
 	struct socket_wq *wq;
 
 	if (sk == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	lock_sock(sk);
 	wq = rcu_dereference_protected(sock->wq, lockdep_sock_is_held(sk));
@@ -1163,6 +1255,7 @@ static int sock_fasync(int fd, struct file *filp, int on)
 
 int sock_wake_async(struct socket_wq *wq, int how, int band)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!wq || !wq->fasync_list)
 		return -1;
 
@@ -1198,9 +1291,13 @@ int __sock_create(struct net *net, int family, int type, int protocol,
 	 *      Check protocol is in range
 	 */
 	if (family < 0 || family >= NPROTO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 	if (type < 0 || type >= SOCK_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* Compatibility.
 
@@ -1208,6 +1305,7 @@ int __sock_create(struct net *net, int family, int type, int protocol,
 	   deadlock in module load.
 	 */
 	if (family == PF_INET && type == SOCK_PACKET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info_once("%s uses obsolete (PF_INET,SOCK_PACKET)\n",
 			     current->comm);
 		family = PF_PACKET;
@@ -1215,7 +1313,9 @@ int __sock_create(struct net *net, int family, int type, int protocol,
 
 	err = security_socket_create(family, type, protocol, kern);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/*
 	 *	Allocate the socket and allow the family to set things up. if
@@ -1224,7 +1324,9 @@ int __sock_create(struct net *net, int family, int type, int protocol,
 	 */
 	sock = sock_alloc();
 	if (!sock) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		net_warn_ratelimited("socket: no more sockets\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENFILE;	/* Not exactly a match, but its the
 				   closest posix thing */
 	}
@@ -1239,9 +1341,12 @@ int __sock_create(struct net *net, int family, int type, int protocol,
 	 * Otherwise module support will break!
 	 */
 	if (rcu_access_pointer(net_families[family]) == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		request_module("net-pf-%d", family);
+}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	pf = rcu_dereference(net_families[family]);
 	err = -EAFNOSUPPORT;
@@ -1320,13 +1425,19 @@ SYSCALL_DEFINE3(socket, int, family, int, type, int, protocol)
 	BUILD_BUG_ON(SOCK_CLOEXEC & SOCK_TYPE_MASK);
 	BUILD_BUG_ON(SOCK_NONBLOCK & SOCK_TYPE_MASK);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flags = type & ~SOCK_TYPE_MASK;
 	if (flags & ~(SOCK_CLOEXEC | SOCK_NONBLOCK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	type &= SOCK_TYPE_MASK;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (SOCK_NONBLOCK != O_NONBLOCK && (flags & SOCK_NONBLOCK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = (flags & ~SOCK_NONBLOCK) | O_NONBLOCK;
+}
 
 	retval = sock_create(family, type, protocol, &sock);
 	if (retval < 0)
@@ -1359,11 +1470,16 @@ SYSCALL_DEFINE4(socketpair, int, family, int, type, int, protocol,
 
 	flags = type & ~SOCK_TYPE_MASK;
 	if (flags & ~(SOCK_CLOEXEC | SOCK_NONBLOCK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	type &= SOCK_TYPE_MASK;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (SOCK_NONBLOCK != O_NONBLOCK && (flags & SOCK_NONBLOCK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = (flags & ~SOCK_NONBLOCK) | O_NONBLOCK;
+}
 
 	/*
 	 * Obtain the first socket and check if the underlying protocol
@@ -1384,24 +1500,28 @@ SYSCALL_DEFINE4(socketpair, int, family, int, type, int, protocol,
 
 	fd1 = get_unused_fd_flags(flags);
 	if (unlikely(fd1 < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = fd1;
 		goto out_release_both;
 	}
 
 	fd2 = get_unused_fd_flags(flags);
 	if (unlikely(fd2 < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = fd2;
 		goto out_put_unused_1;
 	}
 
 	newfile1 = sock_alloc_file(sock1, flags, NULL);
 	if (IS_ERR(newfile1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(newfile1);
 		goto out_put_unused_both;
 	}
 
 	newfile2 = sock_alloc_file(sock2, flags, NULL);
 	if (IS_ERR(newfile2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(newfile2);
 		goto out_fput_1;
 	}
@@ -1497,7 +1617,9 @@ SYSCALL_DEFINE2(listen, int, fd, int, backlog)
 	if (sock) {
 		somaxconn = sock_net(sock->sk)->core.sysctl_somaxconn;
 		if ((unsigned int)backlog > somaxconn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			backlog = somaxconn;
+}
 
 		err = security_socket_listen(sock, backlog);
 		if (!err)
@@ -1529,10 +1651,15 @@ SYSCALL_DEFINE4(accept4, int, fd, struct sockaddr __user *, upeer_sockaddr,
 	struct sockaddr_storage address;
 
 	if (flags & ~(SOCK_CLOEXEC | SOCK_NONBLOCK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (SOCK_NONBLOCK != O_NONBLOCK && (flags & SOCK_NONBLOCK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = (flags & ~SOCK_NONBLOCK) | O_NONBLOCK;
+}
 
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (!sock)
@@ -1554,12 +1681,14 @@ SYSCALL_DEFINE4(accept4, int, fd, struct sockaddr __user *, upeer_sockaddr,
 
 	newfd = get_unused_fd_flags(flags);
 	if (unlikely(newfd < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = newfd;
 		sock_release(newsock);
 		goto out_put;
 	}
 	newfile = sock_alloc_file(newsock, flags, sock->sk->sk_prot_creator->name);
 	if (IS_ERR(newfile)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(newfile);
 		put_unused_fd(newfd);
 		sock_release(newsock);
@@ -1577,6 +1706,7 @@ SYSCALL_DEFINE4(accept4, int, fd, struct sockaddr __user *, upeer_sockaddr,
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
 					  &len, 2) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ECONNABORTED;
 			goto out_fd;
 		}
@@ -1693,6 +1823,7 @@ SYSCALL_DEFINE3(getpeername, int, fd, struct sockaddr __user *, usockaddr,
 	if (sock != NULL) {
 		err = security_socket_getpeername(sock);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fput_light(sock->file, fput_needed);
 			return err;
 		}
@@ -1727,7 +1858,9 @@ SYSCALL_DEFINE6(sendto, int, fd, void __user *, buff, size_t, len,
 
 	err = import_single_range(WRITE, buff, len, &iov, &msg.msg_iter);
 	if (unlikely(err))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (!sock)
 		goto out;
@@ -1761,6 +1894,7 @@ SYSCALL_DEFINE6(sendto, int, fd, void __user *, buff, size_t, len,
 SYSCALL_DEFINE4(send, int, fd, void __user *, buff, size_t, len,
 		unsigned int, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sys_sendto(fd, buff, len, flags, NULL, 0);
 }
 
@@ -1783,7 +1917,9 @@ SYSCALL_DEFINE6(recvfrom, int, fd, void __user *, ubuf, size_t, size,
 
 	err = import_single_range(READ, ubuf, size, &iov, &msg.msg_iter);
 	if (unlikely(err))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (!sock)
 		goto out;
@@ -1804,7 +1940,9 @@ SYSCALL_DEFINE6(recvfrom, int, fd, void __user *, ubuf, size_t, size,
 		err2 = move_addr_to_user(&address,
 					 msg.msg_namelen, addr, addr_len);
 		if (err2 < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = err2;
+}
 	}
 
 	fput_light(sock->file, fput_needed);
@@ -1819,6 +1957,7 @@ SYSCALL_DEFINE6(recvfrom, int, fd, void __user *, ubuf, size_t, size,
 SYSCALL_DEFINE4(recv, int, fd, void __user *, ubuf, size_t, size,
 		unsigned int, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sys_recvfrom(fd, ubuf, size, flags, NULL, NULL);
 }
 
@@ -1834,7 +1973,9 @@ SYSCALL_DEFINE5(setsockopt, int, fd, int, level, int, optname,
 	struct socket *sock;
 
 	if (optlen < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (sock != NULL) {
@@ -1927,7 +2068,9 @@ static int copy_msghdr_from_user(struct msghdr *kmsg,
 	ssize_t err;
 
 	if (copy_from_user(&msg, umsg, sizeof(*umsg)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	kmsg->msg_control = (void __force *)msg.msg_control;
 	kmsg->msg_controllen = msg.msg_controllen;
@@ -1938,10 +2081,14 @@ static int copy_msghdr_from_user(struct msghdr *kmsg,
 		kmsg->msg_namelen = 0;
 
 	if (kmsg->msg_namelen < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (kmsg->msg_namelen > sizeof(struct sockaddr_storage))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kmsg->msg_namelen = sizeof(struct sockaddr_storage);
+}
 
 	if (save_addr)
 		*save_addr = msg.msg_name;
@@ -1952,7 +2099,9 @@ static int copy_msghdr_from_user(struct msghdr *kmsg,
 						  kmsg->msg_namelen,
 						  kmsg->msg_name);
 			if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return err;
+}
 		}
 	} else {
 		kmsg->msg_name = NULL;
@@ -1960,7 +2109,9 @@ static int copy_msghdr_from_user(struct msghdr *kmsg,
 	}
 
 	if (msg.msg_iovlen > UIO_MAXIOV)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMSGSIZE;
+}
 
 	kmsg->msg_iocb = NULL;
 
@@ -1988,12 +2139,17 @@ static int ___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg,
 	msg_sys->msg_name = &address;
 
 	if (MSG_CMSG_COMPAT & flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = get_compat_msghdr(msg_sys, msg_compat, NULL, &iov);
+}
 	else
 		err = copy_msghdr_from_user(msg_sys, msg, NULL, &iov);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENOBUFS;
 
 	if (msg_sys->msg_controllen > INT_MAX)
@@ -2006,16 +2162,20 @@ static int ___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg,
 						     sizeof(ctl));
 		if (err)
 			goto out_freeiov;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ctl_buf = msg_sys->msg_control;
 		ctl_len = msg_sys->msg_controllen;
 	} else if (ctl_len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUILD_BUG_ON(sizeof(struct cmsghdr) !=
 			     CMSG_ALIGN(sizeof(struct cmsghdr)));
 		if (ctl_len > sizeof(ctl)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ctl_buf = sock_kmalloc(sock->sk, ctl_len, GFP_KERNEL);
 			if (ctl_buf == NULL)
 				goto out_freeiov;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EFAULT;
 		/*
 		 * Careful! Before this, msg_sys->msg_control contains a user pointer.
@@ -2042,6 +2202,7 @@ static int ___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg,
 	    used_address->name_len == msg_sys->msg_namelen &&
 	    !memcmp(&used_address->name, msg_sys->msg_name,
 		    used_address->name_len)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sock_sendmsg_nosec(sock, msg_sys);
 		goto out_freectl;
 	}
@@ -2053,13 +2214,17 @@ static int ___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg,
 	if (used_address && err >= 0) {
 		used_address->name_len = msg_sys->msg_namelen;
 		if (msg_sys->msg_name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(&used_address->name, msg_sys->msg_name,
 			       used_address->name_len);
+}
 	}
 
 out_freectl:
 	if (ctl_buf != ctl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_kfree_s(sock->sk, ctl_buf, ctl_len);
+}
 out_freeiov:
 	kfree(iov);
 	return err;
@@ -2089,7 +2254,9 @@ long __sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned flags)
 SYSCALL_DEFINE3(sendmsg, int, fd, struct user_msghdr __user *, msg, unsigned int, flags)
 {
 	if (flags & MSG_CMSG_COMPAT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	return __sys_sendmsg(fd, msg, flags);
 }
 
@@ -2109,13 +2276,18 @@ int __sys_sendmmsg(int fd, struct mmsghdr __user *mmsg, unsigned int vlen,
 	unsigned int oflags = flags;
 
 	if (vlen > UIO_MAXIOV)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vlen = UIO_MAXIOV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	datagrams = 0;
 
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (!sock)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	used_address.name_len = UINT_MAX;
 	entry = mmsg;
@@ -2125,13 +2297,17 @@ int __sys_sendmmsg(int fd, struct mmsghdr __user *mmsg, unsigned int vlen,
 
 	while (datagrams < vlen) {
 		if (datagrams == vlen - 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flags = oflags;
+}
 
 		if (MSG_CMSG_COMPAT & flags) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = ___sys_sendmsg(sock, (struct user_msghdr __user *)compat_entry,
 					     &msg_sys, flags, &used_address, MSG_EOR);
 			if (err < 0)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = __put_user(err, &compat_entry->msg_len);
 			++compat_entry;
 		} else {
@@ -2156,8 +2332,11 @@ int __sys_sendmmsg(int fd, struct mmsghdr __user *mmsg, unsigned int vlen,
 
 	/* We only return an error if no datagrams were able to be sent */
 	if (datagrams != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return datagrams;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -2165,7 +2344,9 @@ SYSCALL_DEFINE4(sendmmsg, int, fd, struct mmsghdr __user *, mmsg,
 		unsigned int, vlen, unsigned int, flags)
 {
 	if (flags & MSG_CMSG_COMPAT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	return __sys_sendmmsg(fd, mmsg, vlen, flags);
 }
 
@@ -2190,11 +2371,15 @@ static int ___sys_recvmsg(struct socket *sock, struct user_msghdr __user *msg,
 	msg_sys->msg_name = &addr;
 
 	if (MSG_CMSG_COMPAT & flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = get_compat_msghdr(msg_sys, msg_compat, &uaddr, &iov);
+}
 	else
 		err = copy_msghdr_from_user(msg_sys, msg, &uaddr, &iov);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	cmsg_ptr = (unsigned long)msg_sys->msg_control;
 	msg_sys->msg_flags = flags & (MSG_CMSG_CLOEXEC|MSG_CMSG_COMPAT);
@@ -2207,6 +2392,7 @@ static int ___sys_recvmsg(struct socket *sock, struct user_msghdr __user *msg,
 	err = (nosec ? sock_recvmsg_nosec : sock_recvmsg)(sock, msg_sys, flags);
 	if (err < 0)
 		goto out_freeiov;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	len = err;
 
 	if (uaddr != NULL) {
@@ -2221,13 +2407,16 @@ static int ___sys_recvmsg(struct socket *sock, struct user_msghdr __user *msg,
 	if (err)
 		goto out_freeiov;
 	if (MSG_CMSG_COMPAT & flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = __put_user((unsigned long)msg_sys->msg_control - cmsg_ptr,
 				 &msg_compat->msg_controllen);
+}
 	else
 		err = __put_user((unsigned long)msg_sys->msg_control - cmsg_ptr,
 				 &msg->msg_controllen);
 	if (err)
 		goto out_freeiov;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = len;
 
 out_freeiov:
@@ -2260,7 +2449,9 @@ SYSCALL_DEFINE3(recvmsg, int, fd, struct user_msghdr __user *, msg,
 		unsigned int, flags)
 {
 	if (flags & MSG_CMSG_COMPAT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	return __sys_recvmsg(fd, msg, flags);
 }
 
@@ -2385,7 +2576,9 @@ SYSCALL_DEFINE5(recvmmsg, int, fd, struct mmsghdr __user *, mmsg,
 	struct timespec timeout_sys;
 
 	if (flags & MSG_CMSG_COMPAT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!timeout)
 		return __sys_recvmmsg(fd, mmsg, vlen, flags, NULL);
@@ -2429,6 +2622,7 @@ SYSCALL_DEFINE2(socketcall, int, call, unsigned long __user *, args)
 	int err;
 	unsigned int len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (call < 1 || call > SYS_SENDMMSG)
 		return -EINVAL;
 
@@ -2543,10 +2737,12 @@ int sock_register(const struct net_proto_family *ops)
 	int err;
 
 	if (ops->family >= NPROTO) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("protocol %d >= NPROTO(%d)\n", ops->family, NPROTO);
 		return -ENOBUFS;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&net_family_lock);
 	if (rcu_dereference_protected(net_families[ops->family],
 				      lockdep_is_held(&net_family_lock)))
@@ -2555,6 +2751,7 @@ int sock_register(const struct net_proto_family *ops)
 		rcu_assign_pointer(net_families[ops->family], ops);
 		err = 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&net_family_lock);
 
 	pr_info("NET: Registered protocol family %d\n", ops->family);
@@ -2577,6 +2774,7 @@ EXPORT_SYMBOL(sock_register);
  */
 void sock_unregister(int family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(family < 0 || family >= NPROTO);
 
 	spin_lock(&net_family_lock);
@@ -2615,6 +2813,7 @@ static int __init sock_init(void)
 		goto out_fs;
 	sock_mnt = kern_mount(&sock_fs_type);
 	if (IS_ERR(sock_mnt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(sock_mnt);
 		goto out_mount;
 	}
@@ -2656,6 +2855,7 @@ void socket_seq_show(struct seq_file *seq)
 	int cpu;
 	int counter = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(cpu)
 	    counter += per_cpu(sockets_in_use, cpu);
 
@@ -2671,6 +2871,7 @@ void socket_seq_show(struct seq_file *seq)
 static int do_siocgstamp(struct net *net, struct socket *sock,
 			 unsigned int cmd, void __user *up)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mm_segment_t old_fs = get_fs();
 	struct timeval ktv;
 	int err;
@@ -2687,6 +2888,7 @@ static int do_siocgstamp(struct net *net, struct socket *sock,
 static int do_siocgstampns(struct net *net, struct socket *sock,
 			   unsigned int cmd, void __user *up)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mm_segment_t old_fs = get_fs();
 	struct timespec kts;
 	int err;
@@ -2707,7 +2909,9 @@ static int dev_ifname32(struct net *net, struct compat_ifreq __user *uifr32)
 
 	uifr = compat_alloc_user_space(sizeof(struct ifreq));
 	if (copy_in_user(uifr, uifr32, sizeof(struct compat_ifreq)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	err = dev_ioctl(net, SIOCGIFNAME, uifr);
 	if (err)
@@ -2730,7 +2934,9 @@ static int dev_ifconf(struct net *net, struct compat_ifconf __user *uifc32)
 	int err;
 
 	if (copy_from_user(&ifc32, uifc32, sizeof(struct compat_ifconf)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	memset(&ifc, 0, sizeof(ifc));
 	if (ifc32.ifcbuf == 0) {
@@ -3101,6 +3307,7 @@ static int routing_ioctl(struct net *net, struct socket *sock,
 	u32 rtdev;
 	mm_segment_t old_fs = get_fs();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sock && sock->sk && sock->sk->sk_family == AF_INET6) { /* ipv6 */
 		struct in6_rtmsg32 __user *ur6 = argp;
 		ret = copy_from_user(&r6.rtmsg_dst, &(ur6->rtmsg_dst),
@@ -3156,7 +3363,9 @@ static int old_bridge_ioctl(compat_ulong_t __user *argp)
 	compat_ulong_t tmp;
 
 	if (get_user(tmp, argp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	if (tmp == BRCTL_GET_VERSION)
 		return BRCTL_VERSION + 1;
 	return -EINVAL;
@@ -3165,6 +3374,7 @@ static int old_bridge_ioctl(compat_ulong_t __user *argp)
 static int compat_sock_ioctl_trans(struct file *file, struct socket *sock,
 			 unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	void __user *argp = compat_ptr(arg);
 	struct sock *sk = sock->sk;
 	struct net *net = sock_net(sk);
@@ -3275,7 +3485,9 @@ static long compat_sock_ioctl(struct file *file, unsigned int cmd,
 	net = sock_net(sk);
 
 	if (sock->ops->compat_ioctl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = sock->ops->compat_ioctl(sock, cmd, arg);
+}
 
 	if (ret == -ENOIOCTLCMD &&
 	    (cmd >= SIOCIWFIRST && cmd <= SIOCIWLAST))
@@ -3290,12 +3502,14 @@ static long compat_sock_ioctl(struct file *file, unsigned int cmd,
 
 int kernel_bind(struct socket *sock, struct sockaddr *addr, int addrlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sock->ops->bind(sock, addr, addrlen);
 }
 EXPORT_SYMBOL(kernel_bind);
 
 int kernel_listen(struct socket *sock, int backlog)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sock->ops->listen(sock, backlog);
 }
 EXPORT_SYMBOL(kernel_listen);
@@ -3310,6 +3524,7 @@ int kernel_accept(struct socket *sock, struct socket **newsock, int flags)
 	if (err < 0)
 		goto done;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = sock->ops->accept(sock, *newsock, flags, true);
 	if (err < 0) {
 		sock_release(*newsock);
@@ -3328,6 +3543,7 @@ EXPORT_SYMBOL(kernel_accept);
 int kernel_connect(struct socket *sock, struct sockaddr *addr, int addrlen,
 		   int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sock->ops->connect(sock, addr, addrlen, flags);
 }
 EXPORT_SYMBOL(kernel_connect);
@@ -3335,6 +3551,7 @@ EXPORT_SYMBOL(kernel_connect);
 int kernel_getsockname(struct socket *sock, struct sockaddr *addr,
 			 int *addrlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sock->ops->getname(sock, addr, addrlen, 0);
 }
 EXPORT_SYMBOL(kernel_getsockname);
@@ -3342,6 +3559,7 @@ EXPORT_SYMBOL(kernel_getsockname);
 int kernel_getpeername(struct socket *sock, struct sockaddr *addr,
 			 int *addrlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sock->ops->getname(sock, addr, addrlen, 1);
 }
 EXPORT_SYMBOL(kernel_getpeername);
@@ -3349,6 +3567,7 @@ EXPORT_SYMBOL(kernel_getpeername);
 int kernel_getsockopt(struct socket *sock, int level, int optname,
 			char *optval, int *optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mm_segment_t oldfs = get_fs();
 	char __user *uoptval;
 	int __user *uoptlen;
@@ -3371,6 +3590,7 @@ EXPORT_SYMBOL(kernel_getsockopt);
 int kernel_setsockopt(struct socket *sock, int level, int optname,
 			char *optval, unsigned int optlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mm_segment_t oldfs = get_fs();
 	char __user *uoptval;
 	int err;
@@ -3391,6 +3611,7 @@ EXPORT_SYMBOL(kernel_setsockopt);
 int kernel_sendpage(struct socket *sock, struct page *page, int offset,
 		    size_t size, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sock->ops->sendpage)
 		return sock->ops->sendpage(sock, page, offset, size, flags);
 
@@ -3404,8 +3625,10 @@ int kernel_sendpage_locked(struct sock *sk, struct page *page, int offset,
 	struct socket *sock = sk->sk_socket;
 
 	if (sock->ops->sendpage_locked)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sock->ops->sendpage_locked(sk, page, offset, size,
 						  flags);
+}
 
 	return sock_no_sendpage_locked(sk, page, offset, size, flags);
 }
@@ -3413,6 +3636,7 @@ EXPORT_SYMBOL(kernel_sendpage_locked);
 
 int kernel_sock_ioctl(struct socket *sock, int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mm_segment_t oldfs = get_fs();
 	int err;
 
@@ -3426,6 +3650,7 @@ EXPORT_SYMBOL(kernel_sock_ioctl);
 
 int kernel_sock_shutdown(struct socket *sock, enum sock_shutdown_cmd how)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sock->ops->shutdown(sock, how);
 }
 EXPORT_SYMBOL(kernel_sock_shutdown);
@@ -3446,7 +3671,9 @@ u32 kernel_sock_ip_overhead(struct sock *sk)
 #endif /* IS_ENABLED(CONFIG_IPV6) */
 
 	if (!sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return overhead;
+}
 
 	switch (sk->sk_family) {
 	case AF_INET:
diff --git a/net/switchdev/switchdev.c b/net/switchdev/switchdev.c
index 0531b41..1c5430d 100644
--- a/net/switchdev/switchdev.c
+++ b/net/switchdev/switchdev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * net/switchdev/switchdev.c - Switch device API
  * Copyright (c) 2014-2015 Jiri Pirko <jiri@resnulli.us>
diff --git a/net/sysctl_net.c b/net/sysctl_net.c
index 9aed6fe..7512a72 100644
--- a/net/sysctl_net.c
+++ b/net/sysctl_net.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* -*- linux-c -*-
  * sysctl_net.c: sysctl interface to net subsystem.
  *
diff --git a/net/unix/af_unix.c b/net/unix/af_unix.c
index 7f46bab..b0a80e6 100644
--- a/net/unix/af_unix.c
+++ b/net/unix/af_unix.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NET4:	Implementation of BSD Unix domain sockets.
  *
@@ -151,6 +153,7 @@ static inline void unix_set_secdata(struct scm_cookie *scm, struct sk_buff *skb)
 
 static inline bool unix_secdata_eq(struct scm_cookie *scm, struct sk_buff *skb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (scm->secid == UNIXCB(skb).secid);
 }
 #else
@@ -184,6 +187,7 @@ static inline unsigned int unix_hash_fold(__wsum n)
 
 static inline int unix_our_peer(struct sock *sk, struct sock *osk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return unix_peer(osk) == sk;
 }
 
@@ -204,7 +208,10 @@ struct sock *unix_peer_get(struct sock *s)
 	unix_state_lock(s);
 	peer = unix_peer(s);
 	if (peer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_hold(peer);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unix_state_unlock(s);
 	return peer;
 }
@@ -226,9 +233,13 @@ static inline void unix_release_addr(struct unix_address *addr)
 static int unix_mkname(struct sockaddr_un *sunaddr, int len, unsigned int *hashp)
 {
 	if (len <= sizeof(short) || len > sizeof(*sunaddr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (!sunaddr || sunaddr->sun_family != AF_UNIX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (sunaddr->sun_path[0]) {
 		/*
 		 * This may look like an off by one error but it is a bit more
@@ -259,6 +270,7 @@ static void __unix_insert_socket(struct hlist_head *list, struct sock *sk)
 
 static inline void unix_remove_socket(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&unix_table_lock);
 	__unix_remove_socket(sk);
 	spin_unlock(&unix_table_lock);
@@ -266,6 +278,7 @@ static inline void unix_remove_socket(struct sock *sk)
 
 static inline void unix_insert_socket(struct hlist_head *list, struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&unix_table_lock);
 	__unix_insert_socket(list, sk);
 	spin_unlock(&unix_table_lock);
@@ -278,6 +291,7 @@ static struct sock *__unix_find_socket_byname(struct net *net,
 	struct sock *s;
 
 	sk_for_each(s, &unix_socket_table[hash ^ type]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct unix_sock *u = unix_sk(s);
 
 		if (!net_eq(sock_net(s), net))
@@ -287,6 +301,7 @@ static struct sock *__unix_find_socket_byname(struct net *net,
 		    !memcmp(u->addr->name, sunname, len))
 			goto found;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	s = NULL;
 found:
 	return s;
@@ -302,7 +317,10 @@ static inline struct sock *unix_find_socket_byname(struct net *net,
 	spin_lock(&unix_table_lock);
 	s = __unix_find_socket_byname(net, sunname, len, type, hash);
 	if (s)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_hold(s);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&unix_table_lock);
 	return s;
 }
@@ -317,10 +335,12 @@ static struct sock *unix_find_socket_byinode(struct inode *i)
 		struct dentry *dentry = unix_sk(s)->path.dentry;
 
 		if (dentry && d_backing_inode(dentry) == i) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sock_hold(s);
 			goto found;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	s = NULL;
 found:
 	spin_unlock(&unix_table_lock);
@@ -358,6 +378,7 @@ static int unix_dgram_peer_wake_relay(wait_queue_entry_t *q, unsigned mode, int
 	struct unix_sock *u;
 	wait_queue_head_t *u_sleep;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u = container_of(q, struct unix_sock, peer_wake);
 
 	__remove_wait_queue(&unix_sk(u->peer_wake.private)->peer_wait,
@@ -383,6 +404,7 @@ static int unix_dgram_peer_wake_connect(struct sock *sk, struct sock *other)
 	spin_lock(&u_other->peer_wait.lock);
 
 	if (!u->peer_wake.private) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		u->peer_wake.private = other;
 		__add_wait_queue(&u_other->peer_wait, &u->peer_wake);
 
@@ -403,16 +425,19 @@ static void unix_dgram_peer_wake_disconnect(struct sock *sk,
 	spin_lock(&u_other->peer_wait.lock);
 
 	if (u->peer_wake.private == other) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__remove_wait_queue(&u_other->peer_wait, &u->peer_wake);
 		u->peer_wake.private = NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&u_other->peer_wait.lock);
 }
 
 static void unix_dgram_peer_wake_disconnect_wakeup(struct sock *sk,
 						   struct sock *other)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unix_dgram_peer_wake_disconnect(sk, other);
 	wake_up_interruptible_poll(sk_sleep(sk),
 				   POLLOUT |
@@ -431,7 +456,9 @@ static int unix_dgram_peer_wake_me(struct sock *sk, struct sock *other)
 	connected = unix_dgram_peer_wake_connect(sk, other);
 
 	if (unix_recvq_full(other))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	if (connected)
 		unix_dgram_peer_wake_disconnect(sk, other);
@@ -457,6 +484,7 @@ static void unix_write_space(struct sock *sk)
 				POLLOUT | POLLWRNORM | POLLWRBAND);
 		sk_wake_async(sk, SOCK_WAKE_SPACE, POLL_OUT);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -466,6 +494,7 @@ static void unix_write_space(struct sock *sk)
  * may receive messages only from that peer. */
 static void unix_dgram_disconnected(struct sock *sk, struct sock *other)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!skb_queue_empty(&sk->sk_receive_queue)) {
 		skb_queue_purge(&sk->sk_receive_queue);
 		wake_up_interruptible_all(&unix_sk(sk)->peer_wait);
@@ -483,6 +512,7 @@ static void unix_dgram_disconnected(struct sock *sk, struct sock *other)
 
 static void unix_sock_destructor(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct unix_sock *u = unix_sk(sk);
 
 	skb_queue_purge(&sk->sk_receive_queue);
@@ -491,6 +521,7 @@ static void unix_sock_destructor(struct sock *sk)
 	WARN_ON(!sk_unhashed(sk));
 	WARN_ON(sk->sk_socket);
 	if (!sock_flag(sk, SOCK_DEAD)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("Attempt to release alive unix socket: %p\n", sk);
 		return;
 	}
@@ -498,6 +529,7 @@ static void unix_sock_destructor(struct sock *sk)
 	if (u->addr)
 		unix_release_addr(u->addr);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_long_dec(&unix_nr_socks);
 	local_bh_disable();
 	sock_prot_inuse_add(sock_net(sk), sk->sk_prot, -1);
@@ -510,6 +542,7 @@ static void unix_sock_destructor(struct sock *sk)
 
 static void unix_release_sock(struct sock *sk, int embrion)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct unix_sock *u = unix_sk(sk);
 	struct path path;
 	struct sock *skpair;
@@ -535,11 +568,13 @@ static void unix_release_sock(struct sock *sk, int embrion)
 
 	if (skpair != NULL) {
 		if (sk->sk_type == SOCK_STREAM || sk->sk_type == SOCK_SEQPACKET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_state_lock(skpair);
 			/* No more writes */
 			skpair->sk_shutdown = SHUTDOWN_MASK;
 			if (!skb_queue_empty(&sk->sk_receive_queue) || embrion)
 				skpair->sk_err = ECONNRESET;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_state_unlock(skpair);
 			skpair->sk_state_change(skpair);
 			sk_wake_async(skpair, SOCK_WAKE_WAITD, POLL_HUP);
@@ -554,7 +589,9 @@ static void unix_release_sock(struct sock *sk, int embrion)
 
 	while ((skb = skb_dequeue(&sk->sk_receive_queue)) != NULL) {
 		if (state == TCP_LISTEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_release_sock(skb->sk, 1);
+}
 		/* passed fds are erased in the kfree_skb hook	      */
 		UNIXCB(skb).consumed = skb->len;
 		kfree_skb(skb);
@@ -579,14 +616,18 @@ static void unix_release_sock(struct sock *sk, int embrion)
 	 */
 
 	if (unix_tot_inflight)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_gc();		/* Garbage collect fds */
 }
+}
 
 static void init_peercred(struct sock *sk)
 {
 	put_pid(sk->sk_peer_pid);
 	if (sk->sk_peer_cred)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_cred(sk->sk_peer_cred);
+}
 	sk->sk_peer_pid  = get_pid(task_tgid(current));
 	sk->sk_peer_cred = get_current_cred();
 }
@@ -595,7 +636,9 @@ static void copy_peercred(struct sock *sk, struct sock *peersk)
 {
 	put_pid(sk->sk_peer_pid);
 	if (sk->sk_peer_cred)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_cred(sk->sk_peer_cred);
+}
 	sk->sk_peer_pid  = get_pid(peersk->sk_peer_pid);
 	sk->sk_peer_cred = get_cred(peersk->sk_peer_cred);
 }
@@ -610,9 +653,11 @@ static int unix_listen(struct socket *sock, int backlog)
 	err = -EOPNOTSUPP;
 	if (sock->type != SOCK_STREAM && sock->type != SOCK_SEQPACKET)
 		goto out;	/* Only stream/seqpacket sockets accept */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EINVAL;
 	if (!u->addr)
 		goto out;	/* No listens on an unbound socket */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unix_state_lock(sk);
 	if (sk->sk_state != TCP_CLOSE && sk->sk_state != TCP_LISTEN)
 		goto out_unlock;
@@ -660,6 +705,7 @@ static int unix_seqpacket_recvmsg(struct socket *, struct msghdr *, size_t,
 
 static int unix_set_peek_off(struct sock *sk, int val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct unix_sock *u = unix_sk(sk);
 
 	if (mutex_lock_interruptible(&u->iolock))
@@ -767,6 +813,7 @@ static struct sock *unix_create1(struct net *net, struct socket *sock, int kern)
 		goto out;
 
 	sock_init_data(sock, sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_class(&sk->sk_receive_queue.lock,
 				&af_unix_sk_receive_queue_lock_key);
 
@@ -778,17 +825,22 @@ static struct sock *unix_create1(struct net *net, struct socket *sock, int kern)
 	u->path.dentry = NULL;
 	u->path.mnt = NULL;
 	spin_lock_init(&u->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_long_set(&u->inflight, 0);
 	INIT_LIST_HEAD(&u->link);
 	mutex_init(&u->iolock); /* single task reading lock */
 	mutex_init(&u->bindlock); /* single task binding lock */
 	init_waitqueue_head(&u->peer_wait);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	init_waitqueue_func_entry(&u->peer_wake, unix_dgram_peer_wake_relay);
 	unix_insert_socket(unix_sockets_unbound(sk), sk);
 out:
 	if (sk == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_long_dec(&unix_nr_socks);
+}
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		local_bh_disable();
 		sock_prot_inuse_add(sock_net(sk), sk->sk_prot, 1);
 		local_bh_enable();
@@ -800,7 +852,9 @@ static int unix_create(struct net *net, struct socket *sock, int protocol,
 		       int kern)
 {
 	if (protocol && protocol != PF_UNIX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPROTONOSUPPORT;
+}
 
 	sock->state = SS_UNCONNECTED;
 
@@ -832,7 +886,9 @@ static int unix_release(struct socket *sock)
 	struct sock *sk = sock->sk;
 
 	if (!sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	unix_release_sock(sk, 0);
 	sock->sk = NULL;
@@ -852,12 +908,16 @@ static int unix_autobind(struct socket *sock)
 
 	err = mutex_lock_interruptible(&u->bindlock);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 	if (u->addr)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENOMEM;
 	addr = kzalloc(sizeof(*addr) + sizeof(short) + 16, GFP_KERNEL);
 	if (!addr)
@@ -875,6 +935,7 @@ static int unix_autobind(struct socket *sock)
 
 	if (__unix_find_socket_byname(net, addr->name, addr->len, sock->type,
 				      addr->hash)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&unix_table_lock);
 		/*
 		 * __unix_find_socket_byname() may take long time if many names
@@ -883,6 +944,7 @@ static int unix_autobind(struct socket *sock)
 		cond_resched();
 		/* Give up if all names seems to be in use. */
 		if (retries++ == 0xFFFFF) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENOSPC;
 			kfree(addr);
 			goto out;
@@ -919,6 +981,7 @@ static struct sock *unix_find_other(struct net *net,
 		if (err)
 			goto put_fail;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ECONNREFUSED;
 		if (!S_ISSOCK(inode->i_mode))
 			goto put_fail;
@@ -933,20 +996,25 @@ static struct sock *unix_find_other(struct net *net,
 
 		err = -EPROTOTYPE;
 		if (u->sk_type != type) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sock_put(u);
 			goto fail;
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ECONNREFUSED;
 		u = unix_find_socket_byname(net, sunname, len, type, hash);
 		if (u) {
 			struct dentry *dentry;
 			dentry = unix_sk(u)->path.dentry;
 			if (dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				touch_atime(&unix_sk(u)->path);
+}
 		} else
 			goto fail;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return u;
 
 put_fail:
@@ -968,7 +1036,9 @@ static int unix_mknod(const char *sun_path, umode_t mode, struct path *res)
 	dentry = kern_path_create(AT_FDCWD, sun_path, &path, 0);
 	err = PTR_ERR(dentry);
 	if (IS_ERR(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/*
 	 * All right, let's create it.
@@ -1004,6 +1074,7 @@ static int unix_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 		goto out;
 
 	if (addr_len == sizeof(short)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = unix_autobind(sock);
 		goto out;
 	}
@@ -1011,6 +1082,7 @@ static int unix_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 	err = unix_mkname(sunaddr, addr_len, &hash);
 	if (err < 0)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	addr_len = err;
 
 	if (sun_path[0]) {
@@ -1018,8 +1090,11 @@ static int unix_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 		       (SOCK_INODE(sock)->i_mode & ~current_umask());
 		err = unix_mknod(sun_path, mode, &path);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (err == -EEXIST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EADDRINUSE;
+}
 			goto out;
 		}
 	}
@@ -1028,10 +1103,12 @@ static int unix_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 	if (err)
 		goto out_put;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EINVAL;
 	if (u->addr)
 		goto out_up;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENOMEM;
 	addr = kmalloc(sizeof(*addr)+addr_len, GFP_KERNEL);
 	if (!addr)
@@ -1049,10 +1126,12 @@ static int unix_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 		u->path = path;
 		list = &unix_socket_table[hash];
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&unix_table_lock);
 		err = -EADDRINUSE;
 		if (__unix_find_socket_byname(net, sunaddr, addr_len,
 					      sk->sk_type, hash)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_release_addr(addr);
 			goto out_unlock;
 		}
@@ -1060,6 +1139,7 @@ static int unix_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 		list = &unix_socket_table[addr->hash];
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 	__unix_remove_socket(sk);
 	u->addr = addr;
@@ -1071,7 +1151,9 @@ static int unix_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 	mutex_unlock(&u->bindlock);
 out_put:
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		path_put(&path);
+}
 out:
 	return err;
 }
@@ -1079,13 +1161,16 @@ static int unix_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 static void unix_state_double_lock(struct sock *sk1, struct sock *sk2)
 {
 	if (unlikely(sk1 == sk2) || !sk2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_lock(sk1);
 		return;
 	}
 	if (sk1 < sk2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_lock(sk1);
 		unix_state_lock_nested(sk2);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_lock(sk2);
 		unix_state_lock_nested(sk1);
 	}
@@ -1094,9 +1179,11 @@ static void unix_state_double_lock(struct sock *sk1, struct sock *sk2)
 static void unix_state_double_unlock(struct sock *sk1, struct sock *sk2)
 {
 	if (unlikely(sk1 == sk2) || !sk2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_unlock(sk1);
 		return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unix_state_unlock(sk1);
 	unix_state_unlock(sk2);
 }
@@ -1119,6 +1206,7 @@ static int unix_dgram_connect(struct socket *sock, struct sockaddr *addr,
 		err = unix_mkname(sunaddr, alen, &hash);
 		if (err < 0)
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alen = err;
 
 		if (test_bit(SOCK_PASSCRED, &sock->flags) &&
@@ -1134,6 +1222,7 @@ static int unix_dgram_connect(struct socket *sock, struct sockaddr *addr,
 
 		/* Apparently VFS overslept socket death. Retry. */
 		if (sock_flag(other, SOCK_DEAD)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_state_double_unlock(sk, other);
 			sock_put(other);
 			goto restart;
@@ -1159,6 +1248,7 @@ static int unix_dgram_connect(struct socket *sock, struct sockaddr *addr,
 	 * If it was connected, reconnect.
 	 */
 	if (unix_peer(sk)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct sock *old_peer = unix_peer(sk);
 		unix_peer(sk) = other;
 		unix_dgram_peer_wake_disconnect_wakeup(sk, old_peer);
@@ -1166,12 +1256,16 @@ static int unix_dgram_connect(struct socket *sock, struct sockaddr *addr,
 		unix_state_double_unlock(sk, other);
 
 		if (other != old_peer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_dgram_disconnected(sk, old_peer);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_put(old_peer);
 	} else {
 		unix_peer(sk) = other;
 		unix_state_double_unlock(sk, other);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_unlock:
@@ -1183,6 +1277,7 @@ static int unix_dgram_connect(struct socket *sock, struct sockaddr *addr,
 
 static long unix_wait_for_peer(struct sock *other, long timeo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct unix_sock *u = unix_sk(other);
 	int sched;
 	DEFINE_WAIT(wait);
@@ -1220,6 +1315,7 @@ static int unix_stream_connect(struct socket *sock, struct sockaddr *uaddr,
 	err = unix_mkname(sunaddr, addr_len, &hash);
 	if (err < 0)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	addr_len = err;
 
 	if (test_bit(SOCK_PASSCRED, &sock->flags) && !u->addr &&
@@ -1256,6 +1352,7 @@ static int unix_stream_connect(struct socket *sock, struct sockaddr *uaddr,
 
 	/* Apparently VFS overslept socket death. Retry. */
 	if (sock_flag(other, SOCK_DEAD)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_unlock(other);
 		sock_put(other);
 		goto restart;
@@ -1268,15 +1365,18 @@ static int unix_stream_connect(struct socket *sock, struct sockaddr *uaddr,
 		goto out_unlock;
 
 	if (unix_recvq_full(other)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EAGAIN;
 		if (!timeo)
 			goto out_unlock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		timeo = unix_wait_for_peer(other, timeo);
 
 		err = sock_intr_errno(timeo);
 		if (signal_pending(current))
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_put(other);
 		goto restart;
 	}
@@ -1310,6 +1410,7 @@ static int unix_stream_connect(struct socket *sock, struct sockaddr *uaddr,
 	unix_state_lock_nested(sk);
 
 	if (sk->sk_state != st) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_unlock(sk);
 		unix_state_unlock(other);
 		sock_put(other);
@@ -1318,12 +1419,14 @@ static int unix_stream_connect(struct socket *sock, struct sockaddr *uaddr,
 
 	err = security_unix_stream_connect(sk, other, newsk);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_unlock(sk);
 		goto out_unlock;
 	}
 
 	/* The way is open! Fastly set all the necessary fields... */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock_hold(sk);
 	unix_peer(newsk)	= sk;
 	newsk->sk_state		= TCP_ESTABLISHED;
@@ -1331,6 +1434,7 @@ static int unix_stream_connect(struct socket *sock, struct sockaddr *uaddr,
 	init_peercred(newsk);
 	newu = unix_sk(newsk);
 	RCU_INIT_POINTER(newsk->sk_wq, &newu->peer_wq);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	otheru = unix_sk(other);
 
 	/* copy address information from listening to new sock*/
@@ -1366,14 +1470,18 @@ static int unix_stream_connect(struct socket *sock, struct sockaddr *uaddr,
 
 out_unlock:
 	if (other)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_unlock(other);
+}
 
 out:
 	kfree_skb(skb);
 	if (newsk)
 		unix_release_sock(newsk, 0);
 	if (other)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_put(other);
+}
 	return err;
 }
 
@@ -1402,10 +1510,14 @@ static void unix_sock_inherit_flags(const struct socket *old,
 				    struct socket *new)
 {
 	if (test_bit(SOCK_PASSCRED, &old->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_bit(SOCK_PASSCRED, &new->flags);
+}
 	if (test_bit(SOCK_PASSSEC, &old->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_bit(SOCK_PASSSEC, &new->flags);
 }
+}
 
 static int unix_accept(struct socket *sock, struct socket *newsock, int flags,
 		       bool kern)
@@ -1431,7 +1543,9 @@ static int unix_accept(struct socket *sock, struct socket *newsock, int flags,
 	if (!skb) {
 		/* This means receive shutdown. */
 		if (err == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINVAL;
+}
 		goto out;
 	}
 
@@ -1456,6 +1570,7 @@ static int unix_getname(struct socket *sock, struct sockaddr *uaddr, int *uaddr_
 {
 	struct sock *sk = sock->sk;
 	struct unix_sock *u;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DECLARE_SOCKADDR(struct sockaddr_un *, sunaddr, uaddr);
 	int err = 0;
 
@@ -1465,11 +1580,14 @@ static int unix_getname(struct socket *sock, struct sockaddr *uaddr, int *uaddr_
 		err = -ENOTCONN;
 		if (!sk)
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_hold(sk);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u = unix_sk(sk);
 	unix_state_lock(sk);
 	if (!u->addr) {
@@ -1482,6 +1600,7 @@ static int unix_getname(struct socket *sock, struct sockaddr *uaddr, int *uaddr_
 		*uaddr_len = addr->len;
 		memcpy(sunaddr, addr->name, *uaddr_len);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unix_state_unlock(sk);
 	sock_put(sk);
 out:
@@ -1505,7 +1624,9 @@ static void unix_destruct_scm(struct sk_buff *skb)
 	memset(&scm, 0, sizeof(scm));
 	scm.pid  = UNIXCB(skb).pid;
 	if (UNIXCB(skb).fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_detach_fds(&scm, skb);
+}
 
 	/* Alas, it calls VFS */
 	/* So fscking what? fput() had been SMP-safe since the last Summer */
@@ -1524,7 +1645,10 @@ static inline bool too_many_unix_fds(struct task_struct *p)
 	struct user_struct *user = current_user();
 
 	if (unlikely(user->unix_inflight > task_rlimit(p, RLIMIT_NOFILE)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return !capable(CAP_SYS_RESOURCE) && !capable(CAP_SYS_ADMIN);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -1533,7 +1657,9 @@ static int unix_attach_fds(struct scm_cookie *scm, struct sk_buff *skb)
 	int i;
 
 	if (too_many_unix_fds(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ETOOMANYREFS;
+}
 
 	/*
 	 * Need to duplicate file references for the sake of garbage
@@ -1542,10 +1668,13 @@ static int unix_attach_fds(struct scm_cookie *scm, struct sk_buff *skb)
 	 */
 	UNIXCB(skb).fp = scm_fp_dup(scm->fp);
 	if (!UNIXCB(skb).fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	for (i = scm->fp->count - 1; i >= 0; i--)
 		unix_inflight(scm->fp->user, scm->fp->fp[i]);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1582,7 +1711,9 @@ static void maybe_add_creds(struct sk_buff *skb, const struct socket *sock,
 			    const struct sock *other)
 {
 	if (UNIXCB(skb).pid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (unix_passcred_enabled(sock, other)) {
 		UNIXCB(skb).pid  = get_pid(task_tgid(current));
 		current_uid_gid(&UNIXCB(skb).uid, &UNIXCB(skb).gid);
@@ -1598,7 +1729,9 @@ static int maybe_init_creds(struct scm_cookie *scm,
 
 	err = scm_send(socket, &msg, scm, false);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (unix_passcred_enabled(socket, other)) {
 		scm->pid = get_pid(task_tgid(current));
@@ -1612,6 +1745,7 @@ static bool unix_skb_scm_eq(struct sk_buff *skb,
 {
 	const struct unix_skb_parms *u = &UNIXCB(skb);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return u->pid == scm->pid &&
 	       uid_eq(u->uid, scm->creds.uid) &&
 	       gid_eq(u->gid, scm->creds.gid) &&
@@ -1642,18 +1776,23 @@ static int unix_dgram_sendmsg(struct socket *sock, struct msghdr *msg,
 	wait_for_unix_gc();
 	err = scm_send(sock, msg, &scm, false);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = -EOPNOTSUPP;
 	if (msg->msg_flags&MSG_OOB)
 		goto out;
 
 	if (msg->msg_namelen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = unix_mkname(sunaddr, msg->msg_namelen, &hash);
 		if (err < 0)
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		namelen = err;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sunaddr = NULL;
 		err = -ENOTCONN;
 		other = unix_peer_get(sk);
@@ -1670,11 +1809,13 @@ static int unix_dgram_sendmsg(struct socket *sock, struct msghdr *msg,
 		goto out;
 
 	if (len > SKB_MAX_ALLOC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		data_len = min_t(size_t,
 				 len - SKB_MAX_ALLOC,
 				 MAX_SKB_FRAGS * PAGE_SIZE);
 		data_len = PAGE_ALIGN(data_len);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUILD_BUG_ON(SKB_MAX_ALLOC < PAGE_SIZE);
 	}
 
@@ -1699,10 +1840,12 @@ static int unix_dgram_sendmsg(struct socket *sock, struct msghdr *msg,
 
 restart:
 	if (!other) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ECONNRESET;
 		if (sunaddr == NULL)
 			goto out_free;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		other = unix_find_other(net, sunaddr, namelen, sk->sk_type,
 					hash, &err);
 		if (other == NULL)
@@ -1715,6 +1858,7 @@ static int unix_dgram_sendmsg(struct socket *sock, struct msghdr *msg,
 		goto out_free;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk_locked = 0;
 	unix_state_lock(other);
 restart_locked:
@@ -1731,10 +1875,14 @@ static int unix_dgram_sendmsg(struct socket *sock, struct msghdr *msg,
 		sock_put(other);
 
 		if (!sk_locked)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_state_lock(sk);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		if (unix_peer(sk) == other) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_peer(sk) = NULL;
 			unix_dgram_peer_wake_disconnect_wakeup(sk, other);
 
@@ -1744,9 +1892,11 @@ static int unix_dgram_sendmsg(struct socket *sock, struct msghdr *msg,
 			sock_put(other);
 			err = -ECONNREFUSED;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_state_unlock(sk);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		other = NULL;
 		if (err)
 			goto out_free;
@@ -1769,7 +1919,9 @@ static int unix_dgram_sendmsg(struct socket *sock, struct msghdr *msg,
 	 */
 	if (other != sk &&
 	    unlikely(unix_peer(other) != sk && unix_recvq_full(other))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (timeo) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			timeo = unix_wait_for_peer(other, timeo);
 
 			err = sock_intr_errno(timeo);
@@ -1779,29 +1931,39 @@ static int unix_dgram_sendmsg(struct socket *sock, struct msghdr *msg,
 			goto restart;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!sk_locked) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_state_unlock(other);
 			unix_state_double_lock(sk, other);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unix_peer(sk) != other ||
 		    unix_dgram_peer_wake_me(sk, other)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EAGAIN;
 			sk_locked = 1;
 			goto out_unlock;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!sk_locked) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_locked = 1;
 			goto restart_locked;
 		}
 	}
 
 	if (unlikely(sk_locked))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_unlock(sk);
+}
 
 	if (sock_flag(other, SOCK_RCVTSTAMP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__net_timestamp(skb);
+}
 	maybe_add_creds(skb, sock, other);
 	skb_queue_tail(&other->sk_receive_queue, skb);
 	unix_state_unlock(other);
@@ -1812,13 +1974,18 @@ static int unix_dgram_sendmsg(struct socket *sock, struct msghdr *msg,
 
 out_unlock:
 	if (sk_locked)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_unlock(sk);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unix_state_unlock(other);
 out_free:
 	kfree_skb(skb);
 out:
 	if (other)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_put(other);
+}
 	scm_destroy(&scm);
 	return err;
 }
@@ -1843,13 +2010,16 @@ static int unix_stream_sendmsg(struct socket *sock, struct msghdr *msg,
 	wait_for_unix_gc();
 	err = scm_send(sock, msg, &scm, false);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = -EOPNOTSUPP;
 	if (msg->msg_flags&MSG_OOB)
 		goto out_err;
 
 	if (msg->msg_namelen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sk->sk_state == TCP_ESTABLISHED ? -EISCONN : -EOPNOTSUPP;
 		goto out_err;
 	} else {
@@ -1884,9 +2054,11 @@ static int unix_stream_sendmsg(struct socket *sock, struct msghdr *msg,
 		/* Only send the fds in the first buffer */
 		err = unix_scm_to_skb(&scm, skb, !fds_sent);
 		if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree_skb(skb);
 			goto out_err;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fds_sent = true;
 
 		skb_put(skb, size - data_len);
@@ -1894,10 +2066,12 @@ static int unix_stream_sendmsg(struct socket *sock, struct msghdr *msg,
 		skb->len = size;
 		err = skb_copy_datagram_from_iter(skb, 0, &msg->msg_iter, size);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree_skb(skb);
 			goto out_err;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_lock(other);
 
 		if (sock_flag(other, SOCK_DEAD) ||
@@ -1920,7 +2094,9 @@ static int unix_stream_sendmsg(struct socket *sock, struct msghdr *msg,
 	kfree_skb(skb);
 pipe_err:
 	if (sent == 0 && !(msg->msg_flags&MSG_NOSIGNAL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		send_sig(SIGPIPE, current, 0);
+}
 	err = -EPIPE;
 out_err:
 	scm_destroy(&scm);
@@ -1938,7 +2114,9 @@ static ssize_t unix_stream_sendpage(struct socket *socket, struct page *page,
 	struct sk_buff *skb, *newskb = NULL, *tail = NULL;
 
 	if (flags & MSG_OOB)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	other = unix_peer(sk);
 	if (!other || sk->sk_state != TCP_ESTABLISHED)
@@ -2051,7 +2229,9 @@ static int unix_seqpacket_sendmsg(struct socket *sock, struct msghdr *msg,
 
 	err = sock_error(sk);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (sk->sk_state != TCP_ESTABLISHED)
 		return -ENOTCONN;
@@ -2068,17 +2248,22 @@ static int unix_seqpacket_recvmsg(struct socket *sock, struct msghdr *msg,
 	struct sock *sk = sock->sk;
 
 	if (sk->sk_state != TCP_ESTABLISHED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTCONN;
+}
 
 	return unix_dgram_recvmsg(sock, msg, size, flags);
 }
 
 static void unix_copy_addr(struct msghdr *msg, struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct unix_sock *u = unix_sk(sk);
 
 	if (u->addr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msg->msg_namelen = u->addr->len;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(msg->msg_name, u->addr->name, u->addr->len);
 	}
 }
@@ -2117,35 +2302,49 @@ static int unix_dgram_recvmsg(struct socket *sock, struct msghdr *msg,
 		 !__skb_wait_for_more_packets(sk, &err, &timeo, last));
 
 	if (!skb) { /* implies iolock unlocked */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_lock(sk);
 		/* Signal EOF on disconnected non-blocking SEQPACKET socket. */
 		if (sk->sk_type == SOCK_SEQPACKET && err == -EAGAIN &&
 		    (sk->sk_shutdown & RCV_SHUTDOWN))
 			err = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_unlock(sk);
 		goto out;
 	}
 
 	if (wq_has_sleeper(&u->peer_wait))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wake_up_interruptible_sync_poll(&u->peer_wait,
 						POLLOUT | POLLWRNORM |
 						POLLWRBAND);
+}
 
 	if (msg->msg_name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_copy_addr(msg, skb->sk);
+}
 
 	if (size > skb->len - skip)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		size = skb->len - skip;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (size < skb->len - skip)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		msg->msg_flags |= MSG_TRUNC;
+}
 
 	err = skb_copy_datagram_msg(skb, skip, msg, size);
 	if (err)
 		goto out_free;
 
 	if (sock_flag(sk, SOCK_RCVTSTAMP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__sock_recv_timestamp(msg, sk, skb);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(&scm, 0, sizeof(scm));
 
 	scm_set_cred(&scm, UNIXCB(skb).pid, UNIXCB(skb).uid, UNIXCB(skb).gid);
@@ -2153,7 +2352,9 @@ static int unix_dgram_recvmsg(struct socket *sock, struct msghdr *msg,
 
 	if (!(flags & MSG_PEEK)) {
 		if (UNIXCB(skb).fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_detach_fds(&scm, skb);
+}
 
 		sk_peek_offset_bwd(sk, skb->len);
 	} else {
@@ -2170,10 +2371,13 @@ static int unix_dgram_recvmsg(struct socket *sock, struct msghdr *msg,
 
 		*/
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sk_peek_offset_fwd(sk, size);
 
 		if (UNIXCB(skb).fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			scm.fp = scm_fp_dup(UNIXCB(skb).fp);
+}
 	}
 	err = (flags & MSG_TRUNC) ? skb->len - skip : size;
 
@@ -2216,6 +2420,7 @@ static long unix_stream_data_wait(struct sock *sk, long timeo,
 			timeo = freezable_schedule_timeout(timeo);
 		else
 			timeo = schedule_timeout(timeo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_lock(sk);
 
 		if (sock_flag(sk, SOCK_DEAD))
@@ -2264,11 +2469,13 @@ static int unix_stream_read_generic(struct unix_stream_read_state *state,
 	unsigned int last_len;
 
 	if (unlikely(sk->sk_state != TCP_ESTABLISHED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		goto out;
 	}
 
 	if (unlikely(flags & MSG_OOB)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EOPNOTSUPP;
 		goto out;
 	}
@@ -2293,6 +2500,7 @@ static int unix_stream_read_generic(struct unix_stream_read_state *state,
 redo:
 		unix_state_lock(sk);
 		if (sock_flag(sk, SOCK_DEAD)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ECONNRESET;
 			goto unlock;
 		}
@@ -2313,8 +2521,10 @@ static int unix_stream_read_generic(struct unix_stream_read_state *state,
 			if (sk->sk_shutdown & RCV_SHUTDOWN)
 				goto unlock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_state_unlock(sk);
 			if (!timeo) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EAGAIN;
 				break;
 			}
@@ -2325,6 +2535,7 @@ static int unix_stream_read_generic(struct unix_stream_read_state *state,
 						      last_len, freezable);
 
 			if (signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = sock_intr_errno(timeo);
 				scm_destroy(&scm);
 				goto out;
@@ -2338,6 +2549,7 @@ static int unix_stream_read_generic(struct unix_stream_read_state *state,
 		}
 
 		while (skip >= unix_skb_len(skb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skip -= unix_skb_len(skb);
 			last = skb;
 			last_len = skb->len;
@@ -2346,6 +2558,7 @@ static int unix_stream_read_generic(struct unix_stream_read_state *state,
 				goto again;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_unlock(sk);
 
 		if (check_creds) {
@@ -2361,6 +2574,7 @@ static int unix_stream_read_generic(struct unix_stream_read_state *state,
 
 		/* Copy address just once */
 		if (state->msg && state->msg->msg_name) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			DECLARE_SOCKADDR(struct sockaddr_un *, sunaddr,
 					 state->msg->msg_name);
 			unix_copy_addr(state->msg, skb->sk);
@@ -2374,8 +2588,11 @@ static int unix_stream_read_generic(struct unix_stream_read_state *state,
 		/* skb is only safe to use if !drop_skb */
 		consume_skb(skb);
 		if (chunk < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (copied == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copied = -EFAULT;
+}
 			break;
 		}
 		copied += chunk;
@@ -2414,13 +2631,17 @@ static int unix_stream_read_generic(struct unix_stream_read_state *state,
 			/* It is questionable, see note in unix_dgram_recvmsg.
 			 */
 			if (UNIXCB(skb).fp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				scm.fp = scm_fp_dup(UNIXCB(skb).fp);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sk_peek_offset_fwd(sk, chunk);
 
 			if (UNIXCB(skb).fp)
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skip = 0;
 			last = skb;
 			last_len = skb->len;
@@ -2428,6 +2649,7 @@ static int unix_stream_read_generic(struct unix_stream_read_state *state,
 			skb = skb_peek_next(skb, &sk->sk_receive_queue);
 			if (skb)
 				goto again;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unix_state_unlock(sk);
 			break;
 		}
@@ -2471,6 +2693,7 @@ static int unix_stream_splice_actor(struct sk_buff *skb,
 				    int skip, int chunk,
 				    struct unix_stream_read_state *state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return skb_splice_bits(skb, state->socket->sk,
 			       UNIXCB(skb).consumed + skip,
 			       state->pipe, chunk, state->splice_flags);
@@ -2489,7 +2712,9 @@ static ssize_t unix_stream_splice_read(struct socket *sock,  loff_t *ppos,
 	};
 
 	if (unlikely(*ppos))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESPIPE;
+}
 
 	if (sock->file->f_flags & O_NONBLOCK ||
 	    flags & SPLICE_F_NONBLOCK)
@@ -2504,7 +2729,9 @@ static int unix_shutdown(struct socket *sock, int mode)
 	struct sock *other;
 
 	if (mode < SHUT_RD || mode > SHUT_RDWR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	/* This maps:
 	 * SHUT_RD   (0) -> RCV_SHUTDOWN  (1)
 	 * SHUT_WR   (1) -> SEND_SHUTDOWN (2)
@@ -2516,7 +2743,10 @@ static int unix_shutdown(struct socket *sock, int mode)
 	sk->sk_shutdown |= mode;
 	other = unix_peer(sk);
 	if (other)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sock_hold(other);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unix_state_unlock(sk);
 	sk->sk_state_change(sk);
 
@@ -2526,9 +2756,12 @@ static int unix_shutdown(struct socket *sock, int mode)
 		int peer_mode = 0;
 
 		if (mode&RCV_SHUTDOWN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			peer_mode |= SEND_SHUTDOWN;
+}
 		if (mode&SEND_SHUTDOWN)
 			peer_mode |= RCV_SHUTDOWN;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_lock(other);
 		other->sk_shutdown |= peer_mode;
 		unix_state_unlock(other);
@@ -2541,6 +2774,7 @@ static int unix_shutdown(struct socket *sock, int mode)
 	if (other)
 		sock_put(other);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -2550,7 +2784,9 @@ long unix_inq_len(struct sock *sk)
 	long amount = 0;
 
 	if (sk->sk_state == TCP_LISTEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	spin_lock(&sk->sk_receive_queue.lock);
 	if (sk->sk_type == SOCK_STREAM ||
@@ -2570,6 +2806,7 @@ EXPORT_SYMBOL_GPL(unix_inq_len);
 
 long unix_outq_len(struct sock *sk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sk_wmem_alloc_get(sk);
 }
 EXPORT_SYMBOL_GPL(unix_outq_len);
@@ -2581,7 +2818,9 @@ static int unix_open_file(struct sock *sk)
 	int fd;
 
 	if (!ns_capable(sock_net(sk)->user_ns, CAP_NET_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	unix_state_lock(sk);
 	path = unix_sk(sk)->path;
@@ -2620,12 +2859,15 @@ static int unix_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
 	switch (cmd) {
 	case SIOCOUTQ:
 		amount = unix_outq_len(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = put_user(amount, (int __user *)arg);
 		break;
 	case SIOCINQ:
 		amount = unix_inq_len(sk);
 		if (amount < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = amount;
+}
 		else
 			err = put_user(amount, (int __user *)arg);
 		break;
@@ -2649,7 +2891,9 @@ static unsigned int unix_poll(struct file *file, struct socket *sock, poll_table
 
 	/* exceptional events? */
 	if (sk->sk_err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLERR;
+}
 	if (sk->sk_shutdown == SHUTDOWN_MASK)
 		mask |= POLLHUP;
 	if (sk->sk_shutdown & RCV_SHUTDOWN)
@@ -2689,45 +2933,66 @@ static unsigned int unix_dgram_poll(struct file *file, struct socket *sock,
 			(sock_flag(sk, SOCK_SELECT_ERR_QUEUE) ? POLLPRI : 0);
 
 	if (sk->sk_shutdown & RCV_SHUTDOWN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLRDHUP | POLLIN | POLLRDNORM;
+}
 	if (sk->sk_shutdown == SHUTDOWN_MASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLHUP;
+}
 
 	/* readable? */
 	if (!skb_queue_empty(&sk->sk_receive_queue))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLIN | POLLRDNORM;
+}
 
 	/* Connection-based need to check for termination and startup */
 	if (sk->sk_type == SOCK_SEQPACKET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sk->sk_state == TCP_CLOSE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mask |= POLLHUP;
+}
 		/* connection hasn't started yet? */
 		if (sk->sk_state == TCP_SYN_SENT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return mask;
+}
 	}
 
 	/* No write status requested, avoid expensive OUT tests. */
 	if (!(poll_requested_events(wait) & (POLLWRBAND|POLLWRNORM|POLLOUT)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return mask;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	writable = unix_writable(sk);
 	if (writable) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_lock(sk);
 
 		other = unix_peer(sk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (other && unix_peer(other) != sk &&
 		    unix_recvq_full(other) &&
 		    unix_dgram_peer_wake_me(sk, other))
 			writable = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_state_unlock(sk);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (writable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= POLLOUT | POLLWRNORM | POLLWRBAND;
+}
 	else
 		sk_set_bit(SOCKWQ_ASYNC_NOSPACE, sk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mask;
 }
 
@@ -2746,6 +3011,7 @@ static struct sock *unix_from_bucket(struct seq_file *seq, loff_t *pos)
 	struct sock *sk;
 	unsigned long count = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (sk = sk_head(&unix_socket_table[bucket]); sk; sk = sk_next(sk)) {
 		if (sock_net(sk) != seq_file_net(seq))
 			continue;
@@ -2863,6 +3129,7 @@ static const struct seq_operations unix_seq_ops = {
 
 static int unix_seq_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_net(inode, file, &unix_seq_ops,
 			    sizeof(struct seq_net_private));
 }
@@ -2894,6 +3161,7 @@ static int __net_init unix_net_init(struct net *net)
 
 #ifdef CONFIG_PROC_FS
 	if (!proc_create("unix", 0, net->proc_net, &unix_seq_fops)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_sysctl_unregister(net);
 		goto out;
 	}
@@ -2918,10 +3186,12 @@ static int __init af_unix_init(void)
 {
 	int rc = -1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(sizeof(struct unix_skb_parms) > FIELD_SIZEOF(struct sk_buff, cb));
 
 	rc = proto_register(&unix_proto, 1);
 	if (rc != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_crit("%s: Cannot create unix_sock SLAB cache!\n", __func__);
 		goto out;
 	}
@@ -2934,6 +3204,7 @@ static int __init af_unix_init(void)
 
 static void __exit af_unix_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock_unregister(PF_UNIX);
 	proto_unregister(&unix_proto);
 	unregister_pernet_subsys(&unix_net_ops);
diff --git a/net/unix/diag.c b/net/unix/diag.c
index 384c84e..611e480 100644
--- a/net/unix/diag.c
+++ b/net/unix/diag.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/types.h>
 #include <linux/spinlock.h>
 #include <linux/sock_diag.h>
diff --git a/net/unix/garbage.c b/net/unix/garbage.c
index c36757e..1473dd7 100644
--- a/net/unix/garbage.c
+++ b/net/unix/garbage.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NET3:	Garbage Collector For AF_UNIX sockets
  *
@@ -102,12 +104,15 @@ struct sock *unix_get_socket(struct file *filp)
 
 	/* Socket ? */
 	if (S_ISSOCK(inode->i_mode) && !(filp->f_mode & FMODE_PATH)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct socket *sock = SOCKET_I(inode);
 		struct sock *s = sock->sk;
 
 		/* PF_UNIX ? */
 		if (s && sock->ops && sock->ops->family == PF_UNIX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			u_sock = s;
+}
 	}
 	return u_sock;
 }
@@ -123,12 +128,14 @@ void unix_inflight(struct user_struct *user, struct file *fp)
 	spin_lock(&unix_gc_lock);
 
 	if (s) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct unix_sock *u = unix_sk(s);
 
 		if (atomic_long_inc_return(&u->inflight) == 1) {
 			BUG_ON(!list_empty(&u->link));
 			list_add_tail(&u->link, &gc_inflight_list);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BUG_ON(list_empty(&u->link));
 		}
 		unix_tot_inflight++;
@@ -144,6 +151,7 @@ void unix_notinflight(struct user_struct *user, struct file *fp)
 	spin_lock(&unix_gc_lock);
 
 	if (s) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct unix_sock *u = unix_sk(s);
 
 		BUG_ON(!atomic_long_read(&u->inflight));
@@ -164,6 +172,7 @@ static void scan_inflight(struct sock *x, void (*func)(struct unix_sock *),
 	struct sk_buff *next;
 
 	spin_lock(&x->sk_receive_queue.lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skb_queue_walk_safe(&x->sk_receive_queue, skb, next) {
 		/* Do we have file descriptors ? */
 		if (UNIXCB(skb).fp) {
@@ -202,6 +211,7 @@ static void scan_inflight(struct sock *x, void (*func)(struct unix_sock *),
 static void scan_children(struct sock *x, void (*func)(struct unix_sock *),
 			  struct sk_buff_head *hitlist)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (x->sk_state != TCP_LISTEN) {
 		scan_inflight(x, func, hitlist);
 	} else {
@@ -235,16 +245,19 @@ static void scan_children(struct sock *x, void (*func)(struct unix_sock *),
 
 static void dec_inflight(struct unix_sock *usk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_long_dec(&usk->inflight);
 }
 
 static void inc_inflight(struct unix_sock *usk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_long_inc(&usk->inflight);
 }
 
 static void inc_inflight_move_tail(struct unix_sock *u)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_long_inc(&u->inflight);
 	/* If this still might be part of a cycle, move it to the end
 	 * of the list, so that it's checked even if it was already
@@ -263,7 +276,9 @@ void wait_for_unix_gc(void)
 	 * force a garbage collect right now.
 	 */
 	if (unix_tot_inflight > UNIX_INFLIGHT_TRIGGER_GC && !gc_in_progress)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unix_gc();
+}
 	wait_event(unix_gc_wait, gc_in_progress == false);
 }
 
@@ -282,6 +297,7 @@ void unix_gc(void)
 	if (gc_in_progress)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	gc_in_progress = true;
 	/* First, select candidates for garbage collection.  Only
 	 * in-flight sockets are considered, and from those only ones
diff --git a/net/unix/sysctl_net_unix.c b/net/unix/sysctl_net_unix.c
index b3d5150..2b4a9c5 100644
--- a/net/unix/sysctl_net_unix.c
+++ b/net/unix/sysctl_net_unix.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * NET4:	Sysctl interface to net af_unix subsystem.
  *
@@ -36,13 +38,16 @@ int __net_init unix_sysctl_register(struct net *net)
 
 	/* Don't export sysctls to unprivileged users */
 	if (net->user_ns != &init_user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table[0].procname = NULL;
+}
 
 	table[0].data = &net->unx.sysctl_max_dgram_qlen;
 	net->unx.ctl = register_net_sysctl(net, "net/unix", table);
 	if (net->unx.ctl == NULL)
 		goto err_reg;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_reg:
diff --git a/net/vmw_vsock/hyperv_transport.c b/net/vmw_vsock/hyperv_transport.c
index 2c63f7b..80ebfdd 100644
--- a/net/vmw_vsock/hyperv_transport.c
+++ b/net/vmw_vsock/hyperv_transport.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Hyper-V transport for vsock
  *
diff --git a/net/vmw_vsock/virtio_transport.c b/net/vmw_vsock/virtio_transport.c
index 403d86e80..bced961 100644
--- a/net/vmw_vsock/virtio_transport.c
+++ b/net/vmw_vsock/virtio_transport.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * virtio transport for vsock
  *
diff --git a/net/xfrm/xfrm_device.c b/net/xfrm/xfrm_device.c
index 30e5746..a629ab6 100644
--- a/net/xfrm/xfrm_device.c
+++ b/net/xfrm/xfrm_device.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * xfrm_device.c - IPsec device offloading code.
  *
@@ -145,7 +147,9 @@ EXPORT_SYMBOL_GPL(xfrm_dev_offload_ok);
 static int xfrm_dev_register(struct net_device *dev)
 {
 	if ((dev->features & NETIF_F_HW_ESP) && !dev->xfrmdev_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NOTIFY_BAD;
+}
 	if ((dev->features & NETIF_F_HW_ESP_TX_CSUM) &&
 	    !(dev->features & NETIF_F_HW_ESP))
 		return NOTIFY_BAD;
@@ -161,6 +165,7 @@ static int xfrm_dev_unregister(struct net_device *dev)
 
 static int xfrm_dev_feat_change(struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((dev->features & NETIF_F_HW_ESP) && !dev->xfrmdev_ops)
 		return NOTIFY_BAD;
 	else if (!(dev->features & NETIF_F_HW_ESP))
@@ -176,7 +181,9 @@ static int xfrm_dev_feat_change(struct net_device *dev)
 static int xfrm_dev_down(struct net_device *dev)
 {
 	if (dev->features & NETIF_F_HW_ESP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xfrm_dev_state_flush(dev_net(dev), dev, true);
+}
 
 	xfrm_policy_cache_flush();
 	return NOTIFY_DONE;
@@ -184,6 +191,7 @@ static int xfrm_dev_down(struct net_device *dev)
 
 static int xfrm_dev_event(struct notifier_block *this, unsigned long event, void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net_device *dev = netdev_notifier_info_to_dev(ptr);
 
 	switch (event) {
@@ -199,6 +207,7 @@ static int xfrm_dev_event(struct notifier_block *this, unsigned long event, void
 	case NETDEV_DOWN:
 		return xfrm_dev_down(dev);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NOTIFY_DONE;
 }
 
diff --git a/net/xfrm/xfrm_hash.c b/net/xfrm/xfrm_hash.c
index 2ad33ce..0d049a3 100644
--- a/net/xfrm/xfrm_hash.c
+++ b/net/xfrm/xfrm_hash.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /* xfrm_hash.c: Common hash table code.
  *
@@ -19,8 +21,11 @@ struct hlist_head *xfrm_hash_alloc(unsigned int sz)
 
 	if (sz <= PAGE_SIZE)
 		n = kzalloc(sz, GFP_KERNEL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (hashdist)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		n = vzalloc(sz);
+}
 	else
 		n = (struct hlist_head *)
 			__get_free_pages(GFP_KERNEL | __GFP_NOWARN | __GFP_ZERO,
@@ -33,8 +38,11 @@ void xfrm_hash_free(struct hlist_head *n, unsigned int sz)
 {
 	if (sz <= PAGE_SIZE)
 		kfree(n);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (hashdist)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vfree(n);
+}
 	else
 		free_pages((unsigned long)n, get_order(sz));
 }
diff --git a/net/xfrm/xfrm_input.c b/net/xfrm/xfrm_input.c
index 3f6f6f8..dd14bb6 100644
--- a/net/xfrm/xfrm_input.c
+++ b/net/xfrm/xfrm_input.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * xfrm_input.c
@@ -46,13 +48,19 @@ int xfrm_input_register_afinfo(const struct xfrm_input_afinfo *afinfo)
 	int err = 0;
 
 	if (WARN_ON(afinfo->family >= ARRAY_SIZE(xfrm_input_afinfo)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&xfrm_input_afinfo_lock);
 	if (unlikely(xfrm_input_afinfo[afinfo->family] != NULL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EEXIST;
+}
 	else
 		rcu_assign_pointer(xfrm_input_afinfo[afinfo->family], afinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&xfrm_input_afinfo_lock);
 	return err;
 }
@@ -64,6 +72,7 @@ int xfrm_input_unregister_afinfo(const struct xfrm_input_afinfo *afinfo)
 
 	spin_lock_bh(&xfrm_input_afinfo_lock);
 	if (likely(xfrm_input_afinfo[afinfo->family] != NULL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unlikely(xfrm_input_afinfo[afinfo->family] != afinfo))
 			err = -EINVAL;
 		else
@@ -79,6 +88,7 @@ static const struct xfrm_input_afinfo *xfrm_input_get_afinfo(unsigned int family
 {
 	const struct xfrm_input_afinfo *afinfo;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON_ONCE(family >= ARRAY_SIZE(xfrm_input_afinfo)))
 		return NULL;
 
@@ -96,7 +106,9 @@ static int xfrm_rcv_cb(struct sk_buff *skb, unsigned int family, u8 protocol,
 	const struct xfrm_input_afinfo *afinfo = xfrm_input_get_afinfo(family);
 
 	if (!afinfo)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
 	ret = afinfo->callback(skb, protocol, err);
 	rcu_read_unlock();
@@ -107,6 +119,7 @@ static int xfrm_rcv_cb(struct sk_buff *skb, unsigned int family, u8 protocol,
 void __secpath_destroy(struct sec_path *sp)
 {
 	int i;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < sp->len; i++)
 		xfrm_state_put(sp->xvec[i]);
 	kmem_cache_free(secpath_cachep, sp);
@@ -119,7 +132,9 @@ struct sec_path *secpath_dup(struct sec_path *src)
 
 	sp = kmem_cache_alloc(secpath_cachep, GFP_ATOMIC);
 	if (!sp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	sp->len = 0;
 	sp->olen = 0;
@@ -200,7 +215,9 @@ int xfrm_prepare_input(struct xfrm_state *x, struct sk_buff *skb)
 
 	err = x->outer_mode->afinfo->extract_input(x, skb);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	if (x->sel.family == AF_UNSPEC) {
 		inner_mode = xfrm_ip2inner_mode(x, XFRM_MODE_SKB_CB(skb)->protocol);
@@ -215,6 +232,7 @@ EXPORT_SYMBOL(xfrm_prepare_input);
 
 int xfrm_input(struct sk_buff *skb, int nexthdr, __be32 spi, int encap_type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(skb->dev);
 	int err;
 	__be32 seq;
@@ -489,6 +507,7 @@ EXPORT_SYMBOL(xfrm_input);
 
 int xfrm_input_resume(struct sk_buff *skb, int nexthdr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return xfrm_input(skb, nexthdr, 0, -1);
 }
 EXPORT_SYMBOL(xfrm_input_resume);
@@ -502,6 +521,7 @@ static void xfrm_trans_reinject(unsigned long data)
 	__skb_queue_head_init(&queue);
 	skb_queue_splice_init(&trans->queue, &queue);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((skb = __skb_dequeue(&queue)))
 		XFRM_TRANS_SKB_CB(skb)->finish(dev_net(skb->dev), NULL, skb);
 }
@@ -512,6 +532,7 @@ int xfrm_trans_queue(struct sk_buff *skb,
 {
 	struct xfrm_trans_tasklet *trans;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	trans = this_cpu_ptr(&xfrm_trans_tasklet);
 
 	if (skb_queue_len(&trans->queue) >= netdev_max_backlog)
@@ -532,7 +553,9 @@ void __init xfrm_input_init(void)
 	init_dummy_netdev(&xfrm_napi_dev);
 	err = gro_cells_init(&gro_cells, &xfrm_napi_dev);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gro_cells.cells = NULL;
+}
 
 	secpath_cachep = kmem_cache_create("secpath_cache",
 					   sizeof(struct sec_path),
diff --git a/net/xfrm/xfrm_policy.c b/net/xfrm/xfrm_policy.c
index 22f5da6..e413a8a 100644
--- a/net/xfrm/xfrm_policy.c
+++ b/net/xfrm/xfrm_policy.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * xfrm_policy.c
  *
@@ -65,6 +67,7 @@ static struct xfrm_policy *__xfrm_policy_unlink(struct xfrm_policy *pol,
 
 static inline bool xfrm_pol_hold_rcu(struct xfrm_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return refcount_inc_not_zero(&policy->refcnt);
 }
 
@@ -73,6 +76,7 @@ __xfrm4_selector_match(const struct xfrm_selector *sel, const struct flowi *fl)
 {
 	const struct flowi4 *fl4 = &fl->u.ip4;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return  addr4_match(fl4->daddr, sel->daddr.a4, sel->prefixlen_d) &&
 		addr4_match(fl4->saddr, sel->saddr.a4, sel->prefixlen_s) &&
 		!((xfrm_flowi_dport(fl, &fl4->uli) ^ sel->dport) & sel->dport_mask) &&
@@ -86,6 +90,7 @@ __xfrm6_selector_match(const struct xfrm_selector *sel, const struct flowi *fl)
 {
 	const struct flowi6 *fl6 = &fl->u.ip6;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return  addr_match(&fl6->daddr, &sel->daddr, sel->prefixlen_d) &&
 		addr_match(&fl6->saddr, &sel->saddr, sel->prefixlen_s) &&
 		!((xfrm_flowi_dport(fl, &fl6->uli) ^ sel->dport) & sel->dport_mask) &&
@@ -97,6 +102,7 @@ __xfrm6_selector_match(const struct xfrm_selector *sel, const struct flowi *fl)
 bool xfrm_selector_match(const struct xfrm_selector *sel, const struct flowi *fl,
 			 unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (family) {
 	case AF_INET:
 		return __xfrm4_selector_match(sel, fl);
@@ -111,11 +117,17 @@ static const struct xfrm_policy_afinfo *xfrm_policy_get_afinfo(unsigned short fa
 	const struct xfrm_policy_afinfo *afinfo;
 
 	if (unlikely(family >= ARRAY_SIZE(xfrm_policy_afinfo)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	afinfo = rcu_dereference(xfrm_policy_afinfo[family]);
 	if (unlikely(!afinfo))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return afinfo;
 }
 
@@ -129,7 +141,9 @@ struct dst_entry *__xfrm_dst_lookup(struct net *net, int tos, int oif,
 
 	afinfo = xfrm_policy_get_afinfo(family);
 	if (unlikely(afinfo == NULL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EAFNOSUPPORT);
+}
 
 	dst = afinfo->dst_lookup(net, tos, oif, saddr, daddr, mark);
 
@@ -145,6 +159,7 @@ static inline struct dst_entry *xfrm_dst_lookup(struct xfrm_state *x,
 						xfrm_address_t *prev_daddr,
 						int family, u32 mark)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xs_net(x);
 	xfrm_address_t *saddr = &x->props.saddr;
 	xfrm_address_t *daddr = &x->id.daddr;
@@ -173,6 +188,7 @@ static inline struct dst_entry *xfrm_dst_lookup(struct xfrm_state *x,
 
 static inline unsigned long make_jiffies(long secs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (secs >= (MAX_SCHEDULE_TIMEOUT-1)/HZ)
 		return MAX_SCHEDULE_TIMEOUT-1;
 	else
@@ -192,6 +208,7 @@ static void xfrm_policy_timer(unsigned long data)
 	if (unlikely(xp->walk.dead))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dir = xfrm_policy_id2dir(xp->index);
 
 	if (xp->lft.hard_add_expires_seconds) {
@@ -260,6 +277,7 @@ struct xfrm_policy *xfrm_policy_alloc(struct net *net, gfp_t gfp)
 	policy = kzalloc(sizeof(struct xfrm_policy), gfp);
 
 	if (policy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_pnet(&policy->xp_net, net);
 		INIT_LIST_HEAD(&policy->walk.all);
 		INIT_HLIST_NODE(&policy->bydst);
@@ -278,6 +296,7 @@ EXPORT_SYMBOL(xfrm_policy_alloc);
 
 static void xfrm_policy_destroy_rcu(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct xfrm_policy *policy = container_of(head, struct xfrm_policy, rcu);
 
 	security_xfrm_policy_free(policy->security);
@@ -288,6 +307,7 @@ static void xfrm_policy_destroy_rcu(struct rcu_head *head)
 
 void xfrm_policy_destroy(struct xfrm_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!policy->walk.dead);
 
 	if (del_timer(&policy->timer) || del_timer(&policy->polq.hold_timer))
@@ -303,6 +323,7 @@ EXPORT_SYMBOL(xfrm_policy_destroy);
 
 static void xfrm_policy_kill(struct xfrm_policy *policy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	policy->walk.dead = 1;
 
 	atomic_inc(&policy->genid);
@@ -321,6 +342,7 @@ static unsigned int xfrm_policy_hashmax __read_mostly = 1 * 1024 * 1024;
 
 static inline unsigned int idx_hash(struct net *net, u32 index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __idx_hash(index, net->xfrm.policy_idx_hmask);
 }
 
@@ -329,6 +351,7 @@ static void __get_hash_thresh(struct net *net,
 			      unsigned short family, int dir,
 			      u8 *dbits, u8 *sbits)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (family) {
 	case AF_INET:
 		*dbits = net->xfrm.policy_bydst[dir].dbits4;
@@ -359,7 +382,9 @@ static struct hlist_head *policy_hash_bysel(struct net *net,
 	hash = __sel_hash(sel, family, hmask, dbits, sbits);
 
 	if (hash == hmask + 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return &net->xfrm.policy_inexact[dir];
+}
 
 	return rcu_dereference_check(net->xfrm.policy_bydst[dir].table,
 		     lockdep_is_held(&net->xfrm.xfrm_policy_lock)) + hash;
@@ -378,6 +403,7 @@ static struct hlist_head *policy_hash_direct(struct net *net,
 	__get_hash_thresh(net, family, dir, &dbits, &sbits);
 	hash = __addr_hash(daddr, saddr, family, hmask, dbits, sbits);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rcu_dereference_check(net->xfrm.policy_bydst[dir].table,
 		     lockdep_is_held(&net->xfrm.xfrm_policy_lock)) + hash;
 }
@@ -426,6 +452,7 @@ static void xfrm_idx_hash_transfer(struct hlist_head *list,
 	struct hlist_node *tmp;
 	struct xfrm_policy *pol;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry_safe(pol, tmp, list, byidx) {
 		unsigned int h;
 
@@ -436,6 +463,7 @@ static void xfrm_idx_hash_transfer(struct hlist_head *list,
 
 static unsigned long xfrm_new_hash_mask(unsigned int old_hmask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ((old_hmask + 1) << 1) - 1;
 }
 
@@ -449,7 +477,9 @@ static void xfrm_bydst_resize(struct net *net, int dir)
 	int i;
 
 	if (!ndst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_bh(&net->xfrm.xfrm_policy_lock);
 	write_seqcount_begin(&xfrm_policy_hash_generation);
@@ -484,7 +514,9 @@ static void xfrm_byidx_resize(struct net *net, int total)
 	int i;
 
 	if (!nidx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock_bh(&net->xfrm.xfrm_policy_lock);
 
@@ -505,7 +537,9 @@ static inline int xfrm_bydst_should_resize(struct net *net, int dir, int *total)
 	unsigned int hmask = net->xfrm.policy_bydst[dir].hmask;
 
 	if (total)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*total += cnt;
+}
 
 	if ((hmask + 1) < xfrm_policy_hashmax &&
 	    cnt > hmask)
@@ -527,6 +561,7 @@ static inline int xfrm_byidx_should_resize(struct net *net, int total)
 
 void xfrm_spd_getinfo(struct net *net, struct xfrmk_spdinfo *si)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	si->incnt = net->xfrm.policy_count[XFRM_POLICY_IN];
 	si->outcnt = net->xfrm.policy_count[XFRM_POLICY_OUT];
 	si->fwdcnt = net->xfrm.policy_count[XFRM_POLICY_FWD];
@@ -541,6 +576,7 @@ EXPORT_SYMBOL(xfrm_spd_getinfo);
 static DEFINE_MUTEX(hash_resize_mutex);
 static void xfrm_hash_resize(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = container_of(work, struct net, xfrm.policy_hash_work);
 	int dir, total;
 
@@ -559,6 +595,7 @@ static void xfrm_hash_resize(struct work_struct *work)
 
 static void xfrm_hash_rebuild(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = container_of(work, struct net,
 				       xfrm.policy_hthresh.work);
 	unsigned int hmask;
@@ -638,6 +675,7 @@ static void xfrm_hash_rebuild(struct work_struct *work)
 
 void xfrm_policy_hash_rebuild(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	schedule_work(&net->xfrm.policy_hthresh.work);
 }
 EXPORT_SYMBOL(xfrm_policy_hash_rebuild);
@@ -655,6 +693,7 @@ static u32 xfrm_gen_index(struct net *net, int dir, u32 index)
 		int found;
 
 		if (!index) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			idx = (idx_generator | dir);
 			idx_generator += 8;
 		} else {
@@ -684,6 +723,7 @@ static inline int selector_cmp(struct xfrm_selector *s1, struct xfrm_selector *s
 	int len = sizeof(struct xfrm_selector) / sizeof(u32);
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < len; i++) {
 		if (p1[i] != p2[i])
 			return 1;
@@ -699,7 +739,9 @@ static void xfrm_policy_requeue(struct xfrm_policy *old,
 	struct sk_buff_head list;
 
 	if (skb_queue_empty(&pq->hold_queue))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	__skb_queue_head_init(&list);
 
@@ -724,6 +766,7 @@ static bool xfrm_policy_mark_match(struct xfrm_policy *policy,
 {
 	u32 mark = policy->mark.v & policy->mark.m;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (policy->mark.v == pol->mark.v && policy->mark.m == pol->mark.m)
 		return true;
 
@@ -736,6 +779,7 @@ static bool xfrm_policy_mark_match(struct xfrm_policy *policy,
 
 int xfrm_policy_insert(int dir, struct xfrm_policy *policy, int excl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xp_net(policy);
 	struct xfrm_policy *pol;
 	struct xfrm_policy *delpol;
@@ -811,6 +855,7 @@ struct xfrm_policy *xfrm_policy_bysel_ctx(struct net *net, u32 mark, u8 type,
 	spin_lock_bh(&net->xfrm.xfrm_policy_lock);
 	chain = policy_hash_bysel(net, sel, sel->family, dir);
 	ret = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry(pol, chain, bydst) {
 		if (pol->type == type &&
 		    (mark & pol->mark.m) == pol->mark.v &&
@@ -846,7 +891,9 @@ struct xfrm_policy *xfrm_policy_byid(struct net *net, u32 mark, u8 type,
 
 	*err = -ENOENT;
 	if (xfrm_policy_id2dir(id) != dir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	*err = 0;
 	spin_lock_bh(&net->xfrm.xfrm_policy_lock);
@@ -919,6 +966,7 @@ xfrm_policy_flush_secctx_check(struct net *net, u8 type, bool task_valid)
 static inline int
 xfrm_policy_flush_secctx_check(struct net *net, u8 type, bool task_valid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 #endif
@@ -940,8 +988,10 @@ int xfrm_policy_flush(struct net *net, u8 type, bool task_valid)
 	again1:
 		hlist_for_each_entry(pol,
 				     &net->xfrm.policy_inexact[dir], bydst) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (pol->type != type)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__xfrm_policy_unlink(pol, dir);
 			spin_unlock_bh(&net->xfrm.xfrm_policy_lock);
 			cnt++;
@@ -959,8 +1009,10 @@ int xfrm_policy_flush(struct net *net, u8 type, bool task_valid)
 			hlist_for_each_entry(pol,
 					     net->xfrm.policy_bydst[dir].table + i,
 					     bydst) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (pol->type != type)
 					continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__xfrm_policy_unlink(pol, dir);
 				spin_unlock_bh(&net->xfrm.xfrm_policy_lock);
 				cnt++;
@@ -975,7 +1027,9 @@ int xfrm_policy_flush(struct net *net, u8 type, bool task_valid)
 
 	}
 	if (!cnt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ESRCH;
+}
 out:
 	spin_unlock_bh(&net->xfrm.xfrm_policy_lock);
 	return err;
@@ -1032,6 +1086,7 @@ EXPORT_SYMBOL(xfrm_policy_walk);
 
 void xfrm_policy_walk_init(struct xfrm_policy_walk *walk, u8 type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_LIST_HEAD(&walk->walk.all);
 	walk->walk.dead = 1;
 	walk->type = type;
@@ -1041,6 +1096,7 @@ EXPORT_SYMBOL(xfrm_policy_walk_init);
 
 void xfrm_policy_walk_done(struct xfrm_policy_walk *walk, struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (list_empty(&walk->walk.all))
 		return;
 
@@ -1089,6 +1145,7 @@ static struct xfrm_policy *xfrm_policy_lookup_bytype(struct net *net, u8 type,
 
 	daddr = xfrm_flowi_daddr(fl, family);
 	saddr = xfrm_flowi_saddr(fl, family);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(!daddr || !saddr))
 		return NULL;
 
@@ -1203,6 +1260,7 @@ static struct xfrm_policy *xfrm_sk_policy_lookup(const struct sock *sk, int dir,
 
 static void __xfrm_policy_link(struct xfrm_policy *pol, int dir)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xp_net(pol);
 
 	list_add(&pol->walk.all, &net->xfrm.policy_all);
@@ -1213,6 +1271,7 @@ static void __xfrm_policy_link(struct xfrm_policy *pol, int dir)
 static struct xfrm_policy *__xfrm_policy_unlink(struct xfrm_policy *pol,
 						int dir)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xp_net(pol);
 
 	if (list_empty(&pol->walk.all))
@@ -1232,16 +1291,19 @@ static struct xfrm_policy *__xfrm_policy_unlink(struct xfrm_policy *pol,
 
 static void xfrm_sk_policy_link(struct xfrm_policy *pol, int dir)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__xfrm_policy_link(pol, XFRM_POLICY_MAX + dir);
 }
 
 static void xfrm_sk_policy_unlink(struct xfrm_policy *pol, int dir)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__xfrm_policy_unlink(pol, XFRM_POLICY_MAX + dir);
 }
 
 int xfrm_policy_delete(struct xfrm_policy *pol, int dir)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xp_net(pol);
 
 	spin_lock_bh(&net->xfrm.xfrm_policy_lock);
@@ -1257,6 +1319,7 @@ EXPORT_SYMBOL(xfrm_policy_delete);
 
 int xfrm_sk_policy_insert(struct sock *sk, int dir, struct xfrm_policy *pol)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xp_net(pol);
 	struct xfrm_policy *old_pol;
 
@@ -1293,6 +1356,7 @@ int xfrm_sk_policy_insert(struct sock *sk, int dir, struct xfrm_policy *pol)
 
 static struct xfrm_policy *clone_policy(const struct xfrm_policy *old, int dir)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct xfrm_policy *newp = xfrm_policy_alloc(xp_net(old), GFP_ATOMIC);
 	struct net *net = xp_net(old);
 
@@ -1329,6 +1393,7 @@ int __xfrm_sk_clone_policy(struct sock *sk, const struct sock *osk)
 	int i, ret = 0;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < 2; i++) {
 		p = rcu_dereference(osk->sk_policy[i]);
 		if (p) {
@@ -1352,7 +1417,9 @@ xfrm_get_saddr(struct net *net, int oif, xfrm_address_t *local,
 	const struct xfrm_policy_afinfo *afinfo = xfrm_policy_get_afinfo(family);
 
 	if (unlikely(afinfo == NULL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	err = afinfo->get_saddr(net, oif, local, remote, mark);
 	rcu_read_unlock();
 	return err;
@@ -1364,6 +1431,7 @@ static int
 xfrm_tmpl_resolve_one(struct xfrm_policy *policy, const struct flowi *fl,
 		      struct xfrm_state **xfrm, unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xp_net(policy);
 	int nx;
 	int i, error;
@@ -1423,6 +1491,7 @@ xfrm_tmpl_resolve(struct xfrm_policy **pols, int npols, const struct flowi *fl,
 		  struct xfrm_state **xfrm, unsigned short family)
 {
 	struct xfrm_state *tp[XFRM_MAX_DEPTH];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct xfrm_state **tpp = (npols > 1) ? tp : xfrm;
 	int cnx = 0;
 	int error;
@@ -1462,6 +1531,7 @@ static int xfrm_get_tos(const struct flowi *fl, int family)
 	int tos = 0;
 
 	afinfo = xfrm_policy_get_afinfo(family);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tos = afinfo ? afinfo->get_tos(fl) : 0;
 
 	rcu_read_unlock();
@@ -1471,6 +1541,7 @@ static int xfrm_get_tos(const struct flowi *fl, int family)
 
 static inline struct xfrm_dst *xfrm_alloc_dst(struct net *net, int family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct xfrm_policy_afinfo *afinfo = xfrm_policy_get_afinfo(family);
 	struct dst_ops *dst_ops;
 	struct xfrm_dst *xdst;
@@ -1548,6 +1619,7 @@ static struct dst_entry *xfrm_bundle_create(struct xfrm_policy *policy,
 					    const struct flowi *fl,
 					    struct dst_entry *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xp_net(policy);
 	unsigned long now = jiffies;
 	struct net_device *dev;
@@ -1674,6 +1746,7 @@ static int xfrm_expand_policies(const struct flowi *fl, u16 family,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (*num_pols == 0 || !pols[0]) {
 		*num_pols = 0;
 		*num_xfrms = 0;
@@ -1714,6 +1787,7 @@ static int xfrm_expand_policies(const struct flowi *fl, u16 family,
 
 static void xfrm_last_dst_update(struct xfrm_dst *xdst, struct xfrm_dst *old)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	this_cpu_write(xfrm_last_dst, xdst);
 	if (old)
 		dst_release(&old->u.dst);
@@ -1723,6 +1797,7 @@ static void __xfrm_pcpu_work_fn(void)
 {
 	struct xfrm_dst *old;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	old = this_cpu_read(xfrm_last_dst);
 	if (old && !xfrm_bundle_ok(old))
 		xfrm_last_dst_update(NULL, old);
@@ -1730,6 +1805,7 @@ static void __xfrm_pcpu_work_fn(void)
 
 static void xfrm_pcpu_work_fn(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_bh_disable();
 	rcu_read_lock();
 	__xfrm_pcpu_work_fn();
@@ -1745,53 +1821,72 @@ void xfrm_policy_cache_flush(void)
 
 	might_sleep();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_bh_disable();
 	rcu_read_lock();
 	for_each_possible_cpu(cpu) {
 		old = per_cpu(xfrm_last_dst, cpu);
 		if (old && !xfrm_bundle_ok(old)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (smp_processor_id() == cpu) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__xfrm_pcpu_work_fn();
 				continue;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			found = true;
 			break;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	local_bh_enable();
 
 	if (!found)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	get_online_cpus();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(cpu) {
 		bool bundle_release;
 
 		rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		old = per_cpu(xfrm_last_dst, cpu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bundle_release = old && !xfrm_bundle_ok(old);
 		rcu_read_unlock();
 
 		if (!bundle_release)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cpu_online(cpu)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			schedule_work_on(cpu, &xfrm_pcpu_work[cpu]);
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		old = per_cpu(xfrm_last_dst, cpu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (old && !xfrm_bundle_ok(old)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			per_cpu(xfrm_last_dst, cpu) = NULL;
 			dst_release(&old->u.dst);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	put_online_cpus();
 }
 
@@ -1803,7 +1898,9 @@ static bool xfrm_xdst_can_reuse(struct xfrm_dst *xdst,
 	int i;
 
 	if (xdst->num_xfrms != num)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	for (i = 0; i < num; i++) {
 		if (!dst || dst->xfrm != xfrm[i])
@@ -1819,6 +1916,7 @@ xfrm_resolve_and_create_bundle(struct xfrm_policy **pols, int num_pols,
 			       const struct flowi *fl, u16 family,
 			       struct dst_entry *dst_orig)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xp_net(pols[0]);
 	struct xfrm_state *xfrm[XFRM_MAX_DEPTH];
 	struct xfrm_dst *xdst, *old;
@@ -1880,6 +1978,7 @@ static void xfrm_policy_queue_process(unsigned long arg)
 	spin_lock(&pq->hold_queue.lock);
 	skb = skb_peek(&pq->hold_queue);
 	if (!skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&pq->hold_queue.lock);
 		goto out;
 	}
@@ -1951,6 +2050,7 @@ static int xdst_queue_output(struct net *net, struct sock *sk, struct sk_buff *s
 	struct xfrm_policy_queue *pq = &pol->polq;
 
 	if (unlikely(skb_fclone_busy(sk, skb))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_skb(skb);
 		return 0;
 	}
@@ -1998,7 +2098,9 @@ static struct xfrm_dst *xfrm_create_dummy_bundle(struct net *net,
 
 	xdst = xfrm_alloc_dst(net, family);
 	if (IS_ERR(xdst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return xdst;
+}
 
 	if (!(xflo->flags & XFRM_LOOKUP_QUEUE) ||
 	    net->xfrm.sysctl_larval_drop ||
@@ -2058,6 +2160,7 @@ xfrm_bundle_lookup(struct net *net, const struct flowi *fl, u16 family, u8 dir,
 					   &num_pols, &num_xfrms);
 	if (err < 0)
 		goto inc_error;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (num_pols == 0)
 		return NULL;
 	if (num_xfrms <= 0)
@@ -2105,6 +2208,7 @@ xfrm_bundle_lookup(struct net *net, const struct flowi *fl, u16 family, u8 dir,
 static struct dst_entry *make_blackhole(struct net *net, u16 family,
 					struct dst_entry *dst_orig)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct xfrm_policy_afinfo *afinfo = xfrm_policy_get_afinfo(family);
 	struct dst_entry *ret;
 
@@ -2141,6 +2245,7 @@ struct dst_entry *xfrm_lookup(struct net *net, struct dst_entry *dst_orig,
 
 	sk = sk_const_to_full_sk(sk);
 	if (sk && sk->sk_policy[XFRM_POLICY_OUT]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		num_pols = 1;
 		pols[0] = xfrm_sk_policy_lookup(sk, XFRM_POLICY_OUT, fl, family);
 		err = xfrm_expand_policies(fl, family, pols,
@@ -2148,12 +2253,16 @@ struct dst_entry *xfrm_lookup(struct net *net, struct dst_entry *dst_orig,
 		if (err < 0)
 			goto dropdst;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (num_pols) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (num_xfrms <= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				drop_pols = num_pols;
 				goto no_transform;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			local_bh_disable();
 			xdst = xfrm_resolve_and_create_bundle(
 					pols, num_pols, fl,
@@ -2161,15 +2270,18 @@ struct dst_entry *xfrm_lookup(struct net *net, struct dst_entry *dst_orig,
 			local_bh_enable();
 
 			if (IS_ERR(xdst)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				xfrm_pols_put(pols, num_pols);
 				err = PTR_ERR(xdst);
 				goto dropdst;
 			} else if (xdst == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				num_xfrms = 0;
 				drop_pols = num_pols;
 				goto no_transform;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			route = xdst->route;
 		}
 	}
@@ -2185,21 +2297,28 @@ struct dst_entry *xfrm_lookup(struct net *net, struct dst_entry *dst_orig,
 		    !net->xfrm.policy_count[XFRM_POLICY_OUT])
 			goto nopol;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xdst = xfrm_bundle_lookup(net, fl, family, dir, &xflo);
 		if (xdst == NULL)
 			goto nopol;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (IS_ERR(xdst)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(xdst);
 			goto dropdst;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		num_pols = xdst->num_pols;
 		num_xfrms = xdst->num_xfrms;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(pols, xdst->pols, sizeof(struct xfrm_policy *) * num_pols);
 		route = xdst->route;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dst = &xdst->u.dst;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (route == NULL && num_xfrms > 0) {
 		/* The only case when xfrm_bundle_lookup() returns a
 		 * bundle with null route, is when the template could
@@ -2208,11 +2327,13 @@ struct dst_entry *xfrm_lookup(struct net *net, struct dst_entry *dst_orig,
 		 * have the xfrm_state's. We need to wait for KM to
 		 * negotiate new SA's or bail out with error.*/
 		if (net->xfrm.sysctl_larval_drop) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			XFRM_INC_STATS(net, LINUX_MIB_XFRMOUTNOSTATES);
 			err = -EREMOTE;
 			goto error;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EAGAIN;
 
 		XFRM_INC_STATS(net, LINUX_MIB_XFRMOUTNOSTATES);
@@ -2223,15 +2344,21 @@ struct dst_entry *xfrm_lookup(struct net *net, struct dst_entry *dst_orig,
 	if (num_pols == 0)
 		goto nopol;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((flags & XFRM_LOOKUP_ICMP) &&
 	    !(pols[0]->flags & XFRM_POLICY_ICMP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOENT;
 		goto error;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < num_pols; i++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pols[i]->curlft.use_time = get_seconds();
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (num_xfrms < 0) {
 		/* Prohibit the flow */
 		XFRM_INC_STATS(net, LINUX_MIB_XFRMOUTPOLBLOCK);
@@ -2250,13 +2377,16 @@ struct dst_entry *xfrm_lookup(struct net *net, struct dst_entry *dst_orig,
 	if (dst && dst->xfrm &&
 	    dst->xfrm->props.mode == XFRM_MODE_TUNNEL)
 		dst->flags |= DST_XFRM_TUNNEL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dst;
 
 nopol:
 	if (!(flags & XFRM_LOOKUP_ICMP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dst = dst_orig;
 		goto ok;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENOENT;
 error:
 	dst_release(dst);
@@ -2280,8 +2410,11 @@ struct dst_entry *xfrm_lookup_route(struct net *net, struct dst_entry *dst_orig,
 					    XFRM_LOOKUP_KEEP_DST_REF);
 
 	if (IS_ERR(dst) && PTR_ERR(dst) == -EREMOTE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return make_blackhole(net, dst_orig->ops->family, dst_orig);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dst;
 }
 EXPORT_SYMBOL(xfrm_lookup_route);
@@ -2291,6 +2424,7 @@ xfrm_secpath_reject(int idx, struct sk_buff *skb, const struct flowi *fl)
 {
 	struct xfrm_state *x;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!skb->sp || idx < 0 || idx >= skb->sp->len)
 		return 0;
 	x = skb->sp->xvec[idx];
@@ -2309,6 +2443,7 @@ static inline int
 xfrm_state_ok(const struct xfrm_tmpl *tmpl, const struct xfrm_state *x,
 	      unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (xfrm_state_kern(x))
 		return tmpl->optional && !xfrm_state_addr_cmp(tmpl, x, tmpl->encap_family);
 	return	x->id.proto == tmpl->id.proto &&
@@ -2335,6 +2470,7 @@ xfrm_policy_ok(const struct xfrm_tmpl *tmpl, const struct sec_path *sp, int star
 	int idx = start;
 
 	if (tmpl->optional) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tmpl->mode == XFRM_MODE_TRANSPORT)
 			return start;
 	} else
@@ -2358,7 +2494,9 @@ int __xfrm_decode_session(struct sk_buff *skb, struct flowi *fl,
 	int err;
 
 	if (unlikely(afinfo == NULL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
 	afinfo->decode_session(skb, fl, reverse);
 	err = security_xfrm_decode_session(skb, &fl->flowi_secid);
@@ -2369,6 +2507,7 @@ EXPORT_SYMBOL(__xfrm_decode_session);
 
 static inline int secpath_has_nontransport(const struct sec_path *sp, int k, int *idxp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (; k < sp->len; k++) {
 		if (sp->xvec[k]->props.mode != XFRM_MODE_TRANSPORT) {
 			*idxp = k;
@@ -2382,6 +2521,7 @@ static inline int secpath_has_nontransport(const struct sec_path *sp, int k, int
 int __xfrm_policy_check(struct sock *sk, int dir, struct sk_buff *skb,
 			unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(skb->dev);
 	struct xfrm_policy *pol;
 	struct xfrm_policy *pols[XFRM_POLICY_TYPE_MAX];
@@ -2530,6 +2670,7 @@ EXPORT_SYMBOL(__xfrm_policy_check);
 
 int __xfrm_route_forward(struct sk_buff *skb, unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = dev_net(skb->dev);
 	struct flowi fl;
 	struct dst_entry *dst;
@@ -2585,11 +2726,13 @@ static struct dst_entry *xfrm_dst_check(struct dst_entry *dst, u32 cookie)
 
 static int stale_bundle(struct dst_entry *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !xfrm_bundle_ok((struct xfrm_dst *)dst);
 }
 
 void xfrm_dst_ifdown(struct dst_entry *dst, struct net_device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((dst = dst->child) && dst->xfrm && dst->dev == dev) {
 		dst->dev = dev_net(dev)->loopback_dev;
 		dev_hold(dst->dev);
@@ -2605,6 +2748,7 @@ static void xfrm_link_failure(struct sk_buff *skb)
 
 static struct dst_entry *xfrm_negative_advice(struct dst_entry *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dst) {
 		if (dst->obsolete) {
 			dst_release(dst);
@@ -2629,7 +2773,9 @@ static void xfrm_init_pmtu(struct dst_entry *dst)
 		xdst->route_mtu_cached = route_mtu_cached;
 
 		if (pmtu > route_mtu_cached)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pmtu = route_mtu_cached;
+}
 
 		dst_metric_set(dst, RTAX_MTU, pmtu);
 	} while ((dst = dst->next));
@@ -2706,11 +2852,13 @@ static int xfrm_bundle_ok(struct xfrm_dst *first)
 
 static unsigned int xfrm_default_advmss(const struct dst_entry *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dst_metric_advmss(dst->path);
 }
 
 static unsigned int xfrm_mtu(const struct dst_entry *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int mtu = dst_metric_raw(dst, RTAX_MTU);
 
 	return mtu ? : dst_mtu(dst->path);
@@ -2721,6 +2869,7 @@ static const void *xfrm_get_dst_nexthop(const struct dst_entry *dst,
 {
 	const struct dst_entry *path = dst->path;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (; dst != path; dst = dst->child) {
 		const struct xfrm_state *xfrm = dst->xfrm;
 
@@ -2741,7 +2890,9 @@ static struct neighbour *xfrm_neigh_lookup(const struct dst_entry *dst,
 	const struct dst_entry *path = dst->path;
 
 	if (!skb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		daddr = xfrm_get_dst_nexthop(dst, daddr);
+}
 	return path->ops->neigh_lookup(path, skb, daddr);
 }
 
@@ -2758,11 +2909,16 @@ int xfrm_policy_register_afinfo(const struct xfrm_policy_afinfo *afinfo, int fam
 	int err = 0;
 
 	if (WARN_ON(family >= ARRAY_SIZE(xfrm_policy_afinfo)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&xfrm_policy_afinfo_lock);
 	if (unlikely(xfrm_policy_afinfo[family] != NULL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EEXIST;
+}
 	else {
 		struct dst_ops *dst_ops = afinfo->dst_ops;
 		if (likely(dst_ops->kmem_cachep == NULL))
@@ -2783,6 +2939,7 @@ int xfrm_policy_register_afinfo(const struct xfrm_policy_afinfo *afinfo, int fam
 			dst_ops->confirm_neigh = xfrm_confirm_neigh;
 		rcu_assign_pointer(xfrm_policy_afinfo[family], afinfo);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&xfrm_policy_afinfo_lock);
 
 	return err;
@@ -2794,6 +2951,7 @@ void xfrm_policy_unregister_afinfo(const struct xfrm_policy_afinfo *afinfo)
 	struct dst_ops *dst_ops = afinfo->dst_ops;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ARRAY_SIZE(xfrm_policy_afinfo); i++) {
 		if (xfrm_policy_afinfo[i] != afinfo)
 			continue;
@@ -2831,6 +2989,7 @@ static void xfrm_statistics_fini(struct net *net)
 #else
 static int __net_init xfrm_statistics_init(struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -2850,6 +3009,7 @@ static int __net_init xfrm_policy_init(struct net *net)
 					   0, SLAB_HWCACHE_ALIGN|SLAB_PANIC,
 					   NULL);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hmask = 8 - 1;
 	sz = (hmask+1) * sizeof(struct hlist_head);
 
@@ -2887,6 +3047,7 @@ static int __net_init xfrm_policy_init(struct net *net)
 	INIT_WORK(&net->xfrm.policy_hthresh.work, xfrm_hash_rebuild);
 	if (net_eq(net, &init_net))
 		xfrm_dev_init();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_bydst:
@@ -2896,6 +3057,7 @@ static int __net_init xfrm_policy_init(struct net *net)
 		htab = &net->xfrm.policy_bydst[dir];
 		xfrm_hash_free(htab->table, sz);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	xfrm_hash_free(net->xfrm.policy_byidx, sz);
 out_byidx:
 	return -ENOMEM;
@@ -2952,6 +3114,7 @@ static int __net_init xfrm_net_init(struct net *net)
 	if (rv < 0)
 		goto out_sysctl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_sysctl:
@@ -3001,8 +3164,10 @@ static void xfrm_audit_common_policyinfo(struct xfrm_policy *xp,
 	struct xfrm_selector *sel = &xp->selector;
 
 	if (ctx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		audit_log_format(audit_buf, " sec_alg=%u sec_doi=%u sec_obj=%s",
 				 ctx->ctx_alg, ctx->ctx_doi, ctx->ctx_str);
+}
 
 	switch (sel->family) {
 	case AF_INET:
@@ -3034,7 +3199,9 @@ void xfrm_audit_policy_add(struct xfrm_policy *xp, int result, bool task_valid)
 
 	audit_buf = xfrm_audit_start("SPD-add");
 	if (audit_buf == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	xfrm_audit_helper_usrinfo(task_valid, audit_buf);
 	audit_log_format(audit_buf, " res=%u", result);
 	xfrm_audit_common_policyinfo(xp, audit_buf);
@@ -3049,7 +3216,9 @@ void xfrm_audit_policy_delete(struct xfrm_policy *xp, int result,
 
 	audit_buf = xfrm_audit_start("SPD-delete");
 	if (audit_buf == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	xfrm_audit_helper_usrinfo(task_valid, audit_buf);
 	audit_log_format(audit_buf, " res=%u", result);
 	xfrm_audit_common_policyinfo(xp, audit_buf);
diff --git a/net/xfrm/xfrm_proc.c b/net/xfrm/xfrm_proc.c
index ba2b539..74390c1 100644
--- a/net/xfrm/xfrm_proc.c
+++ b/net/xfrm/xfrm_proc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * xfrm_proc.c
  *
diff --git a/net/xfrm/xfrm_state.c b/net/xfrm/xfrm_state.c
index 58be0e7..ecdb47d 100644
--- a/net/xfrm/xfrm_state.c
+++ b/net/xfrm/xfrm_state.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * xfrm_state.c
  *
@@ -48,6 +50,7 @@ static HLIST_HEAD(xfrm_state_gc_list);
 
 static inline bool xfrm_state_hold_rcu(struct xfrm_state __rcu *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return refcount_inc_not_zero(&x->refcnt);
 }
 
@@ -57,6 +60,7 @@ static inline unsigned int xfrm_dst_hash(struct net *net,
 					 u32 reqid,
 					 unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __xfrm_dst_hash(daddr, saddr, reqid, family, net->xfrm.state_hmask);
 }
 
@@ -65,6 +69,7 @@ static inline unsigned int xfrm_src_hash(struct net *net,
 					 const xfrm_address_t *saddr,
 					 unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __xfrm_src_hash(daddr, saddr, family, net->xfrm.state_hmask);
 }
 
@@ -72,6 +77,7 @@ static inline unsigned int
 xfrm_spi_hash(struct net *net, const xfrm_address_t *daddr,
 	      __be32 spi, u8 proto, unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __xfrm_spi_hash(daddr, spi, proto, family, net->xfrm.state_hmask);
 }
 
@@ -84,6 +90,7 @@ static void xfrm_hash_transfer(struct hlist_head *list,
 	struct hlist_node *tmp;
 	struct xfrm_state *x;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry_safe(x, tmp, list, bydst) {
 		unsigned int h;
 
@@ -108,11 +115,13 @@ static void xfrm_hash_transfer(struct hlist_head *list,
 
 static unsigned long xfrm_hash_new_size(unsigned int state_hmask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ((state_hmask + 1) << 1) * sizeof(struct hlist_head);
 }
 
 static void xfrm_hash_resize(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = container_of(work, struct net, xfrm.state_hash_work);
 	struct hlist_head *ndst, *nsrc, *nspi, *odst, *osrc, *ospi;
 	unsigned long nsize, osize;
@@ -178,6 +187,7 @@ void km_state_expired(struct xfrm_state *x, int hard, u32 portid);
 static DEFINE_SPINLOCK(xfrm_type_lock);
 int xfrm_register_type(const struct xfrm_type *type, unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct xfrm_state_afinfo *afinfo = xfrm_state_get_afinfo(family);
 	const struct xfrm_type **typemap;
 	int err = 0;
@@ -199,6 +209,7 @@ EXPORT_SYMBOL(xfrm_register_type);
 
 int xfrm_unregister_type(const struct xfrm_type *type, unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct xfrm_state_afinfo *afinfo = xfrm_state_get_afinfo(family);
 	const struct xfrm_type **typemap;
 	int err = 0;
@@ -248,6 +259,7 @@ static const struct xfrm_type *xfrm_get_type(u8 proto, unsigned short family)
 
 static void xfrm_put_type(const struct xfrm_type *type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	module_put(type->owner);
 }
 
@@ -255,6 +267,7 @@ static DEFINE_SPINLOCK(xfrm_type_offload_lock);
 int xfrm_register_type_offload(const struct xfrm_type_offload *type,
 			       unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct xfrm_state_afinfo *afinfo = xfrm_state_get_afinfo(family);
 	const struct xfrm_type_offload **typemap;
 	int err = 0;
@@ -277,6 +290,7 @@ EXPORT_SYMBOL(xfrm_register_type_offload);
 int xfrm_unregister_type_offload(const struct xfrm_type_offload *type,
 				 unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct xfrm_state_afinfo *afinfo = xfrm_state_get_afinfo(family);
 	const struct xfrm_type_offload **typemap;
 	int err = 0;
@@ -326,6 +340,7 @@ xfrm_get_type_offload(u8 proto, unsigned short family, bool try_load)
 
 static void xfrm_put_type_offload(const struct xfrm_type_offload *type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	module_put(type->owner);
 }
 
@@ -337,7 +352,9 @@ int xfrm_register_mode(struct xfrm_mode *mode, int family)
 	int err;
 
 	if (unlikely(mode->encap >= XFRM_MODE_MAX))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	afinfo = xfrm_state_get_afinfo(family);
 	if (unlikely(afinfo == NULL))
@@ -371,7 +388,9 @@ int xfrm_unregister_mode(struct xfrm_mode *mode, int family)
 	int err;
 
 	if (unlikely(mode->encap >= XFRM_MODE_MAX))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	afinfo = xfrm_state_get_afinfo(family);
 	if (unlikely(afinfo == NULL))
@@ -399,7 +418,9 @@ static struct xfrm_mode *xfrm_get_mode(unsigned int encap, int family)
 	int modload_attempted = 0;
 
 	if (unlikely(encap >= XFRM_MODE_MAX))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 retry:
 	afinfo = xfrm_state_get_afinfo(family);
@@ -422,11 +443,13 @@ static struct xfrm_mode *xfrm_get_mode(unsigned int encap, int family)
 
 static void xfrm_put_mode(struct xfrm_mode *mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	module_put(mode->owner);
 }
 
 static void xfrm_state_gc_destroy(struct xfrm_state *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tasklet_hrtimer_cancel(&x->mtimer);
 	del_timer_sync(&x->rtimer);
 	kfree(x->aead);
@@ -466,12 +489,14 @@ static void xfrm_state_gc_task(struct work_struct *work)
 
 	synchronize_rcu();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry_safe(x, tmp, &gc_list, gclist)
 		xfrm_state_gc_destroy(x);
 }
 
 static enum hrtimer_restart xfrm_timer_handler(struct hrtimer *me)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct tasklet_hrtimer *thr = container_of(me, struct tasklet_hrtimer, timer);
 	struct xfrm_state *x = container_of(thr, struct xfrm_state, mtimer);
 	unsigned long now = get_seconds();
@@ -566,6 +591,7 @@ struct xfrm_state *xfrm_state_alloc(struct net *net)
 	x = kzalloc(sizeof(struct xfrm_state), GFP_ATOMIC);
 
 	if (x) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_pnet(&x->xs_net, net);
 		refcount_set(&x->refcnt, 1);
 		atomic_set(&x->tunnel_users, 0);
@@ -594,6 +620,7 @@ EXPORT_SYMBOL(xfrm_state_alloc);
 
 void __xfrm_state_destroy(struct xfrm_state *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(x->km.state != XFRM_STATE_DEAD);
 
 	spin_lock_bh(&xfrm_state_gc_lock);
@@ -605,6 +632,7 @@ EXPORT_SYMBOL(__xfrm_state_destroy);
 
 int __xfrm_state_delete(struct xfrm_state *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xs_net(x);
 	int err = -ESRCH;
 
@@ -692,12 +720,14 @@ xfrm_dev_state_flush_secctx_check(struct net *net, struct net_device *dev, bool
 static inline int
 xfrm_state_flush_secctx_check(struct net *net, u8 proto, bool task_valid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static inline int
 xfrm_dev_state_flush_secctx_check(struct net *net, struct net_device *dev, bool task_valid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 #endif
@@ -711,23 +741,30 @@ int xfrm_state_flush(struct net *net, u8 proto, bool task_valid)
 	if (err)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ESRCH;
 	for (i = 0; i <= net->xfrm.state_hmask; i++) {
 		struct xfrm_state *x;
 restart:
 		hlist_for_each_entry(x, net->xfrm.state_bydst+i, bydst) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!xfrm_state_kern(x) &&
 			    xfrm_id_proto_match(x->id.proto, proto)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				xfrm_state_hold(x);
 				spin_unlock_bh(&net->xfrm.xfrm_state_lock);
 
 				err = xfrm_state_delete(x);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				xfrm_audit_state_delete(x, err ? 0 : 1,
 							task_valid);
 				xfrm_state_put(x);
 				if (!err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					cnt++;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_lock_bh(&net->xfrm.xfrm_state_lock);
 				goto restart;
 			}
@@ -736,6 +773,7 @@ int xfrm_state_flush(struct net *net, u8 proto, bool task_valid)
 out:
 	spin_unlock_bh(&net->xfrm.xfrm_state_lock);
 	if (cnt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		xfrm_policy_cache_flush();
 	}
@@ -752,6 +790,7 @@ int xfrm_dev_state_flush(struct net *net, struct net_device *dev, bool task_vali
 	if (err)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ESRCH;
 	for (i = 0; i <= net->xfrm.state_hmask; i++) {
 		struct xfrm_state *x;
@@ -787,6 +826,7 @@ EXPORT_SYMBOL(xfrm_dev_state_flush);
 
 void xfrm_sad_getinfo(struct net *net, struct xfrmk_sadinfo *si)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&net->xfrm.xfrm_state_lock);
 	si->sadcnt = net->xfrm.state_num;
 	si->sadhcnt = net->xfrm.state_hmask;
@@ -801,6 +841,7 @@ xfrm_init_tempstate(struct xfrm_state *x, const struct flowi *fl,
 		    const xfrm_address_t *daddr, const xfrm_address_t *saddr,
 		    unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct xfrm_state_afinfo *afinfo = xfrm_state_afinfo_get_rcu(family);
 
 	if (!afinfo)
@@ -821,6 +862,7 @@ static struct xfrm_state *__xfrm_state_lookup(struct net *net, u32 mark,
 					      __be32 spi, u8 proto,
 					      unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int h = xfrm_spi_hash(net, daddr, spi, proto, family);
 	struct xfrm_state *x;
 
@@ -846,6 +888,7 @@ static struct xfrm_state *__xfrm_state_lookup_byaddr(struct net *net, u32 mark,
 						     const xfrm_address_t *saddr,
 						     u8 proto, unsigned short family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int h = xfrm_src_hash(net, daddr, saddr, family);
 	struct xfrm_state *x;
 
@@ -869,6 +912,7 @@ static struct xfrm_state *__xfrm_state_lookup_byaddr(struct net *net, u32 mark,
 static inline struct xfrm_state *
 __xfrm_state_locate(struct xfrm_state *x, int use_spi, int family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xs_net(x);
 	u32 mark = x->mark.v & x->mark.m;
 
@@ -884,6 +928,7 @@ __xfrm_state_locate(struct xfrm_state *x, int use_spi, int family)
 
 static void xfrm_hash_grow_check(struct net *net, int have_hash_collision)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (have_hash_collision &&
 	    (net->xfrm.state_hmask + 1) < xfrm_state_hashmax &&
 	    net->xfrm.state_num > net->xfrm.state_hmask)
@@ -951,6 +996,7 @@ xfrm_state_find(const xfrm_address_t *daddr, const xfrm_address_t *saddr,
 
 	rcu_read_lock();
 	h = xfrm_dst_hash(net, daddr, saddr, tmpl->reqid, encap_family);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry_rcu(x, net->xfrm.state_bydst + h, bydst) {
 		if (x->props.family == encap_family &&
 		    x->props.reqid == tmpl->reqid &&
@@ -1076,6 +1122,7 @@ xfrm_stateonly_find(struct net *net, u32 mark,
 
 	spin_lock_bh(&net->xfrm.xfrm_state_lock);
 	h = xfrm_dst_hash(net, daddr, saddr, reqid, family);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry(x, net->xfrm.state_bydst+h, bydst) {
 		if (x->props.family == family &&
 		    x->props.reqid == reqid &&
@@ -1106,6 +1153,7 @@ struct xfrm_state *xfrm_state_lookup_byspi(struct net *net, __be32 spi,
 	struct xfrm_state_walk *w;
 
 	spin_lock_bh(&net->xfrm.xfrm_state_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(w, &net->xfrm.state_all, all) {
 		x = container_of(w, struct xfrm_state, km);
 		if (x->props.family != family ||
@@ -1123,6 +1171,7 @@ EXPORT_SYMBOL(xfrm_state_lookup_byspi);
 
 static void __xfrm_state_insert(struct xfrm_state *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xs_net(x);
 	unsigned int h;
 
@@ -1154,6 +1203,7 @@ static void __xfrm_state_insert(struct xfrm_state *x)
 /* net->xfrm.xfrm_state_lock is held */
 static void __xfrm_state_bump_genids(struct xfrm_state *xnew)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xs_net(xnew);
 	unsigned short family = xnew->props.family;
 	u32 reqid = xnew->props.reqid;
@@ -1174,6 +1224,7 @@ static void __xfrm_state_bump_genids(struct xfrm_state *xnew)
 
 void xfrm_state_insert(struct xfrm_state *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xs_net(x);
 
 	spin_lock_bh(&net->xfrm.xfrm_state_lock);
@@ -1192,6 +1243,7 @@ static struct xfrm_state *__find_acq_core(struct net *net,
 					  const xfrm_address_t *saddr,
 					  int create)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int h = xfrm_dst_hash(net, daddr, saddr, reqid, family);
 	struct xfrm_state *x;
 	u32 mark = m->v & m->m;
@@ -1264,6 +1316,7 @@ static struct xfrm_state *__xfrm_find_acq_byseq(struct net *net, u32 mark, u32 s
 
 int xfrm_state_add(struct xfrm_state *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xs_net(x);
 	struct xfrm_state *x1, *to_put;
 	int family;
@@ -1505,6 +1558,7 @@ int xfrm_state_update(struct xfrm_state *x)
 	if (!x1)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (xfrm_state_kern(x1)) {
 		to_put = x1;
 		err = -EEXIST;
@@ -1563,6 +1617,7 @@ EXPORT_SYMBOL(xfrm_state_update);
 
 int xfrm_state_check_expire(struct xfrm_state *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!x->curlft.use_time)
 		x->curlft.use_time = get_seconds();
 
@@ -1679,6 +1734,7 @@ static struct xfrm_state *__xfrm_find_acq_byseq(struct net *net, u32 mark, u32 s
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i <= net->xfrm.state_hmask; i++) {
 		struct xfrm_state *x;
 
@@ -1711,6 +1767,7 @@ u32 xfrm_get_acqseq(void)
 	static atomic_t acqseq;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = atomic_inc_return(&acqseq);
 	} while (!res);
 
@@ -1720,6 +1777,7 @@ EXPORT_SYMBOL(xfrm_get_acqseq);
 
 int verify_spi_info(u8 proto, u32 min, u32 max)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (proto) {
 	case IPPROTO_AH:
 	case IPPROTO_ESP:
@@ -1744,6 +1802,7 @@ EXPORT_SYMBOL(verify_spi_info);
 
 int xfrm_alloc_spi(struct xfrm_state *x, u32 low, u32 high)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct net *net = xs_net(x);
 	unsigned int h;
 	struct xfrm_state *x0;
@@ -1800,6 +1859,7 @@ EXPORT_SYMBOL(xfrm_alloc_spi);
 static bool __xfrm_state_filter_match(struct xfrm_state *x,
 				      struct xfrm_address_filter *filter)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (filter) {
 		if ((filter->family == AF_INET ||
 		     filter->family == AF_INET6) &&
@@ -1822,6 +1882,7 @@ int xfrm_state_walk(struct net *net, struct xfrm_state_walk *walk,
 	struct xfrm_state_walk *x;
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (walk->seq != 0 && list_empty(&walk->all))
 		return 0;
 
@@ -1859,6 +1920,7 @@ EXPORT_SYMBOL(xfrm_state_walk);
 void xfrm_state_walk_init(struct xfrm_state_walk *walk, u8 proto,
 			  struct xfrm_address_filter *filter)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_LIST_HEAD(&walk->all);
 	walk->proto = proto;
 	walk->state = XFRM_STATE_DEAD;
@@ -1869,6 +1931,7 @@ EXPORT_SYMBOL(xfrm_state_walk_init);
 
 void xfrm_state_walk_done(struct xfrm_state_walk *walk, struct net *net)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(walk->filter);
 
 	if (list_empty(&walk->all))
@@ -1887,6 +1950,7 @@ static void xfrm_replay_timer_handler(unsigned long data)
 	spin_lock(&x->lock);
 
 	if (x->km.state == XFRM_STATE_VALID) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (xfrm_aevent_is_on(xs_net(x)))
 			x->repl->notify(x, XFRM_REPLAY_TIMEOUT);
 		else
@@ -1903,6 +1967,7 @@ void km_policy_notify(struct xfrm_policy *xp, int dir, const struct km_event *c)
 	struct xfrm_mgr *km;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(km, &xfrm_km_list, list)
 		if (km->notify_policy)
 			km->notify_policy(xp, dir, c);
@@ -1913,6 +1978,7 @@ void km_state_notify(struct xfrm_state *x, const struct km_event *c)
 {
 	struct xfrm_mgr *km;
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(km, &xfrm_km_list, list)
 		if (km->notify)
 			km->notify(x, c);
@@ -1943,6 +2009,7 @@ int km_query(struct xfrm_state *x, struct xfrm_tmpl *t, struct xfrm_policy *pol)
 	struct xfrm_mgr *km;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(km, &xfrm_km_list, list) {
 		acqret = km->acquire(x, t, pol);
 		if (!acqret)
@@ -1959,6 +2026,7 @@ int km_new_mapping(struct xfrm_state *x, xfrm_address_t *ipaddr, __be16 sport)
 	struct xfrm_mgr *km;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(km, &xfrm_km_list, list) {
 		if (km->new_mapping)
 			err = km->new_mapping(x, ipaddr, sport);
@@ -2013,6 +2081,7 @@ int km_report(struct net *net, u8 proto, struct xfrm_selector *sel, xfrm_address
 	struct xfrm_mgr *km;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(km, &xfrm_km_list, list) {
 		if (km->report) {
 			ret = km->report(net, proto, sel, addr);
@@ -2031,6 +2100,7 @@ bool km_is_alive(const struct km_event *c)
 	bool is_alive = false;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(km, &xfrm_km_list, list) {
 		if (km->is_alive && km->is_alive(c)) {
 			is_alive = true;
@@ -2050,6 +2120,7 @@ int xfrm_user_policy(struct sock *sk, int optname, u8 __user *optval, int optlen
 	struct xfrm_mgr *km;
 	struct xfrm_policy *pol = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (optlen <= 0 || optlen > PAGE_SIZE)
 		return -EMSGSIZE;
 
@@ -2083,6 +2154,7 @@ static DEFINE_SPINLOCK(xfrm_km_lock);
 
 int xfrm_register_km(struct xfrm_mgr *km)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&xfrm_km_lock);
 	list_add_tail_rcu(&km->list, &xfrm_km_list);
 	spin_unlock_bh(&xfrm_km_lock);
@@ -2092,6 +2164,7 @@ EXPORT_SYMBOL(xfrm_register_km);
 
 int xfrm_unregister_km(struct xfrm_mgr *km)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&xfrm_km_lock);
 	list_del_rcu(&km->list);
 	spin_unlock_bh(&xfrm_km_lock);
@@ -2105,13 +2178,19 @@ int xfrm_state_register_afinfo(struct xfrm_state_afinfo *afinfo)
 	int err = 0;
 
 	if (WARN_ON(afinfo->family >= NPROTO))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAFNOSUPPORT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_bh(&xfrm_state_afinfo_lock);
 	if (unlikely(xfrm_state_afinfo[afinfo->family] != NULL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EEXIST;
+}
 	else
 		rcu_assign_pointer(xfrm_state_afinfo[afinfo->family], afinfo);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_bh(&xfrm_state_afinfo_lock);
 	return err;
 }
@@ -2121,6 +2200,7 @@ int xfrm_state_unregister_afinfo(struct xfrm_state_afinfo *afinfo)
 {
 	int err = 0, family = afinfo->family;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(family >= NPROTO))
 		return -EAFNOSUPPORT;
 
@@ -2139,6 +2219,7 @@ EXPORT_SYMBOL(xfrm_state_unregister_afinfo);
 
 struct xfrm_state_afinfo *xfrm_state_afinfo_get_rcu(unsigned int family)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(family >= NPROTO))
 		return NULL;
 
@@ -2149,7 +2230,9 @@ struct xfrm_state_afinfo *xfrm_state_get_afinfo(unsigned int family)
 {
 	struct xfrm_state_afinfo *afinfo;
 	if (unlikely(family >= NPROTO))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	rcu_read_lock();
 	afinfo = rcu_dereference(xfrm_state_afinfo[family]);
 	if (unlikely(!afinfo))
@@ -2160,6 +2243,7 @@ struct xfrm_state_afinfo *xfrm_state_get_afinfo(unsigned int family)
 /* Temporarily located here until net/xfrm/xfrm_tunnel.c is created */
 void xfrm_state_delete_tunnel(struct xfrm_state *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (x->tunnel) {
 		struct xfrm_state *t = x->tunnel;
 
@@ -2174,6 +2258,7 @@ EXPORT_SYMBOL(xfrm_state_delete_tunnel);
 
 int xfrm_state_mtu(struct xfrm_state *x, int mtu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct xfrm_type *type = READ_ONCE(x->type);
 
 	if (x->km.state == XFRM_STATE_VALID &&
@@ -2195,6 +2280,7 @@ int __xfrm_init_state(struct xfrm_state *x, bool init_replay, bool offload)
 	if (!afinfo)
 		goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 	if (afinfo->init_flags)
 		err = afinfo->init_flags(x);
@@ -2276,6 +2362,7 @@ EXPORT_SYMBOL(__xfrm_init_state);
 
 int xfrm_init_state(struct xfrm_state *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __xfrm_init_state(x, true, false);
 }
 
@@ -2337,6 +2424,7 @@ static void xfrm_audit_helper_sainfo(struct xfrm_state *x,
 				     struct audit_buffer *audit_buf)
 {
 	struct xfrm_sec_ctx *ctx = x->security;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	u32 spi = ntohl(x->id.spi);
 
 	if (ctx)
@@ -2387,7 +2475,9 @@ void xfrm_audit_state_add(struct xfrm_state *x, int result, bool task_valid)
 
 	audit_buf = xfrm_audit_start("SAD-add");
 	if (audit_buf == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	xfrm_audit_helper_usrinfo(task_valid, audit_buf);
 	xfrm_audit_helper_sainfo(x, audit_buf);
 	audit_log_format(audit_buf, " res=%u", result);
@@ -2401,7 +2491,9 @@ void xfrm_audit_state_delete(struct xfrm_state *x, int result, bool task_valid)
 
 	audit_buf = xfrm_audit_start("SAD-delete");
 	if (audit_buf == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	xfrm_audit_helper_usrinfo(task_valid, audit_buf);
 	xfrm_audit_helper_sainfo(x, audit_buf);
 	audit_log_format(audit_buf, " res=%u", result);
@@ -2417,7 +2509,9 @@ void xfrm_audit_state_replay_overflow(struct xfrm_state *x,
 
 	audit_buf = xfrm_audit_start("SA-replay-overflow");
 	if (audit_buf == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	xfrm_audit_helper_pktinfo(skb, x->props.family, audit_buf);
 	/* don't record the sequence number because it's inherent in this kind
 	 * of audit message */
@@ -2435,7 +2529,9 @@ void xfrm_audit_state_replay(struct xfrm_state *x,
 
 	audit_buf = xfrm_audit_start("SA-replayed-pkt");
 	if (audit_buf == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	xfrm_audit_helper_pktinfo(skb, x->props.family, audit_buf);
 	spi = ntohl(x->id.spi);
 	audit_log_format(audit_buf, " spi=%u(0x%x) seqno=%u",
@@ -2450,7 +2546,9 @@ void xfrm_audit_state_notfound_simple(struct sk_buff *skb, u16 family)
 
 	audit_buf = xfrm_audit_start("SA-notfound");
 	if (audit_buf == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	xfrm_audit_helper_pktinfo(skb, family, audit_buf);
 	audit_log_end(audit_buf);
 }
@@ -2464,7 +2562,9 @@ void xfrm_audit_state_notfound(struct sk_buff *skb, u16 family,
 
 	audit_buf = xfrm_audit_start("SA-notfound");
 	if (audit_buf == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	xfrm_audit_helper_pktinfo(skb, family, audit_buf);
 	spi = ntohl(net_spi);
 	audit_log_format(audit_buf, " spi=%u(0x%x) seqno=%u",
@@ -2482,7 +2582,9 @@ void xfrm_audit_state_icvfail(struct xfrm_state *x,
 
 	audit_buf = xfrm_audit_start("SA-icv-failure");
 	if (audit_buf == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	xfrm_audit_helper_pktinfo(skb, x->props.family, audit_buf);
 	if (xfrm_parse_spi(skb, proto, &net_spi, &net_seq) == 0) {
 		u32 spi = ntohl(net_spi);
diff --git a/net/xfrm/xfrm_sysctl.c b/net/xfrm/xfrm_sysctl.c
index 0c6c5ef..3bb2d27 100644
--- a/net/xfrm/xfrm_sysctl.c
+++ b/net/xfrm/xfrm_sysctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/sysctl.h>
 #include <linux/slab.h>
@@ -57,11 +59,14 @@ int __net_init xfrm_sysctl_init(struct net *net)
 
 	/* Don't export sysctls to unprivileged users */
 	if (net->user_ns != &init_user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		table[0].procname = NULL;
+}
 
 	net->xfrm.sysctl_hdr = register_net_sysctl(net, "net/core", table);
 	if (!net->xfrm.sysctl_hdr)
 		goto out_register;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_register:
-- 
2.7.4

