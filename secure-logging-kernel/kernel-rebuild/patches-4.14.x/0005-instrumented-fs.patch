From e01c110dbb2c272ede4c4eadfa17cec0bad7e94e Mon Sep 17 00:00:00 2001
From: Yiwen Li <detectivelyw@gmail.com>
Date: Wed, 5 Jun 2019 16:55:56 -0400
Subject: [PATCH 5/5] instrumented fs.

---
 fs/9p/v9fs.c                       |   2 +
 fs/aio.c                           |  43 ++++
 fs/anon_inodes.c                   |  15 ++
 fs/attr.c                          |  35 +++
 fs/bad_inode.c                     |  26 ++
 fs/binfmt_elf.c                    |  80 ++++++
 fs/binfmt_misc.c                   |   7 +
 fs/binfmt_script.c                 |  25 ++
 fs/block_dev.c                     | 156 ++++++++++++
 fs/buffer.c                        | 162 ++++++++++++
 fs/cachefiles/main.c               |   2 +
 fs/char_dev.c                      |  16 ++
 fs/cifs/cache.c                    |   2 +
 fs/cifs/cifs_debug.c               |   2 +
 fs/cifs/cifsfs.c                   |   2 +
 fs/compat_ioctl.c                  |  30 +++
 fs/coredump.c                      |  82 ++++++
 fs/crypto/crypto.c                 |   2 +
 fs/dax.c                           |   2 +
 fs/dcache.c                        | 315 +++++++++++++++++++++++
 fs/debugfs/file.c                  |  67 +++++
 fs/debugfs/inode.c                 |  63 +++++
 fs/devpts/inode.c                  |  50 ++++
 fs/direct-io.c                     |  28 ++
 fs/efivarfs/super.c                |  23 ++
 fs/eventfd.c                       |  68 +++++
 fs/eventpoll.c                     | 150 +++++++++++
 fs/exec.c                          | 171 +++++++++++++
 fs/exportfs/expfs.c                |  52 ++++
 fs/ext4/block_validity.c           |  11 +
 fs/ext4/extents_status.c           |  31 +++
 fs/ext4/mballoc.c                  |  99 ++++++++
 fs/ext4/page-io.c                  |  23 ++
 fs/ext4/super.c                    | 145 +++++++++++
 fs/ext4/sysfs.c                    |  23 ++
 fs/fat/cache.c                     |  24 ++
 fs/fat/inode.c                     |  64 +++++
 fs/fat/namei_msdos.c               |  18 ++
 fs/fat/namei_vfat.c                |  39 +++
 fs/fcntl.c                         |  74 ++++++
 fs/file.c                          |  75 ++++++
 fs/file_table.c                    |  27 ++
 fs/filesystems.c                   |  20 ++
 fs/fs-writeback.c                  |  55 ++++
 fs/fs_pin.c                        |  17 ++
 fs/fs_struct.c                     |   7 +
 fs/fscache/cookie.c                |   2 +
 fs/fscache/main.c                  |   2 +
 fs/fscache/netfs.c                 |   2 +
 fs/fscache/proc.c                  |   2 +
 fs/fuse/control.c                  |   2 +
 fs/fuse/cuse.c                     |   2 +
 fs/fuse/dev.c                      |   2 +
 fs/fuse/inode.c                    |   2 +
 fs/hugetlbfs/inode.c               | 114 +++++++++
 fs/inode.c                         | 171 +++++++++++++
 fs/internal.h                      |   2 +
 fs/ioctl.c                         |  37 +++
 fs/isofs/compress.c                |   8 +
 fs/isofs/inode.c                   |  44 ++++
 fs/jbd2/journal.c                  |  88 +++++++
 fs/jbd2/revoke.c                   |  23 ++
 fs/jbd2/transaction.c              |  60 +++++
 fs/kernfs/dir.c                    | 137 ++++++++++
 fs/kernfs/file.c                   |  76 ++++++
 fs/kernfs/inode.c                  |  24 ++
 fs/kernfs/kernfs-internal.h        |   2 +
 fs/kernfs/mount.c                  |  22 ++
 fs/kernfs/symlink.c                |  19 ++
 fs/libfs.c                         |  93 +++++++
 fs/locks.c                         | 188 ++++++++++++++
 fs/mbcache.c                       |  20 ++
 fs/mount.h                         |   2 +
 fs/mpage.c                         |  42 +++
 fs/namei.c                         | 505 +++++++++++++++++++++++++++++++++++++
 fs/namespace.c                     | 351 ++++++++++++++++++++++++++
 fs/nls/nls_ascii.c                 |   6 +
 fs/nls/nls_base.c                  |  21 ++
 fs/nls/nls_cp437.c                 |   6 +
 fs/nls/nls_iso8859-1.c             |   6 +
 fs/nls/nls_utf8.c                  |   6 +
 fs/notify/dnotify/dnotify.c        |  27 ++
 fs/notify/fanotify/fanotify_user.c |   2 +
 fs/notify/fsnotify.c               |  56 ++++
 fs/notify/fsnotify.h               |   2 +
 fs/notify/group.c                  |   8 +
 fs/notify/inotify/inotify.h        |   2 +
 fs/notify/inotify/inotify_user.c   |  79 ++++++
 fs/notify/mark.c                   |  67 +++++
 fs/notify/notification.c           |   6 +
 fs/nsfs.c                          |  20 ++
 fs/open.c                          | 108 +++++++-
 fs/overlayfs/copy_up.c             |   2 +
 fs/overlayfs/dir.c                 |   2 +
 fs/overlayfs/inode.c               |   2 +
 fs/overlayfs/namei.c               |   2 +
 fs/overlayfs/overlayfs.h           |   2 +
 fs/overlayfs/ovl_entry.h           |   2 +
 fs/overlayfs/readdir.c             |   2 +
 fs/overlayfs/super.c               |   2 +
 fs/overlayfs/util.c                |   2 +
 fs/pipe.c                          |  94 +++++++
 fs/pnode.c                         |  97 +++++++
 fs/pnode.h                         |   2 +
 fs/posix_acl.c                     |  80 ++++++
 fs/proc/array.c                    |  17 ++
 fs/proc/base.c                     | 197 +++++++++++++++
 fs/proc/cmdline.c                  |   2 +
 fs/proc/consoles.c                 |   2 +
 fs/proc/cpuinfo.c                  |   2 +
 fs/proc/devices.c                  |   6 +
 fs/proc/fd.c                       |  33 +++
 fs/proc/fd.h                       |   2 +
 fs/proc/generic.c                  |  55 ++++
 fs/proc/inode.c                    |  53 ++++
 fs/proc/internal.h                 |   2 +
 fs/proc/interrupts.c               |   5 +
 fs/proc/kcore.c                    |  33 +++
 fs/proc/kmsg.c                     |   4 +
 fs/proc/loadavg.c                  |   2 +
 fs/proc/meminfo.c                  |   4 +
 fs/proc/namespaces.c               |  12 +
 fs/proc/page.c                     |   7 +
 fs/proc/proc_net.c                 |  15 ++
 fs/proc/proc_sysctl.c              | 165 ++++++++++++
 fs/proc/proc_tty.c                 |  15 ++
 fs/proc/root.c                     |  24 ++
 fs/proc/self.c                     |  10 +
 fs/proc/softirqs.c                 |   4 +
 fs/proc/stat.c                     |   2 +
 fs/proc/task_mmu.c                 |  75 ++++++
 fs/proc/thread_self.c              |   8 +
 fs/proc/uptime.c                   |   2 +
 fs/proc/version.c                  |   2 +
 fs/proc_namespace.c                |  18 ++
 fs/pstore/inode.c                  |   2 +
 fs/quota/dquot.c                   | 102 ++++++++
 fs/quota/netlink.c                 |   5 +
 fs/ramfs/inode.c                   |  16 ++
 fs/read_write.c                    | 214 ++++++++++++++++
 fs/readdir.c                       |  40 ++-
 fs/select.c                        |  83 ++++++
 fs/seq_file.c                      |  45 ++++
 fs/signalfd.c                      |  13 +
 fs/splice.c                        | 128 ++++++++++
 fs/squashfs/super.c                |   2 +
 fs/stat.c                          |  49 ++++
 fs/statfs.c                        |  57 ++++-
 fs/super.c                         | 114 +++++++++
 fs/sync.c                          |  18 ++
 fs/sysfs/dir.c                     |  16 ++
 fs/sysfs/file.c                    |  47 ++++
 fs/sysfs/group.c                   |  40 +++
 fs/sysfs/mount.c                   |  10 +
 fs/sysfs/symlink.c                 |  23 ++
 fs/timerfd.c                       |  71 ++++++
 fs/tracefs/inode.c                 |  51 ++++
 fs/udf/super.c                     |   2 +
 fs/utimes.c                        |  18 ++
 fs/xattr.c                         | 136 ++++++++++
 fs/xfs/kmem.h                      |   2 +
 fs/xfs/libxfs/xfs_da_btree.c       |   2 +
 fs/xfs/libxfs/xfs_defer.c          |   2 +
 fs/xfs/libxfs/xfs_dir2_block.c     |   2 +
 fs/xfs/xfs_buf.c                   |   2 +
 fs/xfs/xfs_dquot.c                 |   2 +
 fs/xfs/xfs_mru_cache.c             |   2 +
 fs/xfs/xfs_stats.c                 |   2 +
 fs/xfs/xfs_super.c                 |   2 +
 fs/xfs/xfs_sysctl.c                |   2 +
 fs/xfs/xfs_sysfs.h                 |   2 +
 fs/xfs/xfs_trace.h                 |   2 +
 fs/xfs/xfs_trans_bmap.c            |   2 +
 fs/xfs/xfs_trans_extfree.c         |   2 +
 fs/xfs/xfs_trans_refcount.c        |   2 +
 fs/xfs/xfs_trans_rmap.c            |   2 +
 176 files changed, 7294 insertions(+), 5 deletions(-)

diff --git a/fs/9p/v9fs.c b/fs/9p/v9fs.c
index 8fb89dd..c28111b 100644
--- a/fs/9p/v9fs.c
+++ b/fs/9p/v9fs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/9p/v9fs.c
  *
diff --git a/fs/aio.c b/fs/aio.c
index 5a24872..019179a 100644
--- a/fs/aio.c
+++ b/fs/aio.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	An async IO implementation for Linux
  *	Written by Benjamin LaHaise <bcrl@kvack.org>
@@ -209,7 +211,9 @@ static struct file *aio_private_file(struct kioctx *ctx, loff_t nr_pages)
 	struct path path;
 	struct inode *inode = alloc_anon_inode(aio_mnt->mnt_sb);
 	if (IS_ERR(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(inode);
+}
 
 	inode->i_mapping->a_ops = &aio_ctx_aops;
 	inode->i_mapping->private_data = ctx;
@@ -217,6 +221,7 @@ static struct file *aio_private_file(struct kioctx *ctx, loff_t nr_pages)
 
 	path.dentry = d_alloc_pseudo(aio_mnt->mnt_sb, &this);
 	if (!path.dentry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iput(inode);
 		return ERR_PTR(-ENOMEM);
 	}
@@ -225,6 +230,7 @@ static struct file *aio_private_file(struct kioctx *ctx, loff_t nr_pages)
 	d_instantiate(path.dentry, inode);
 	file = alloc_file(&path, FMODE_READ | FMODE_WRITE, &aio_ring_fops);
 	if (IS_ERR(file)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		path_put(&path);
 		return file;
 	}
@@ -260,11 +266,14 @@ static int __init aio_setup(void)
 	};
 	aio_mnt = kern_mount(&aio_fs);
 	if (IS_ERR(aio_mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Failed to create aio fs mount.");
+}
 
 	kiocb_cachep = KMEM_CACHE(aio_kiocb, SLAB_HWCACHE_ALIGN|SLAB_PANIC);
 	kioctx_cachep = KMEM_CACHE(kioctx,SLAB_HWCACHE_ALIGN|SLAB_PANIC);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("sizeof(struct page) = %zu\n", sizeof(struct page));
 
 	return 0;
@@ -301,6 +310,7 @@ static void aio_free_ring(struct kioctx *ctx)
 
 	for (i = 0; i < ctx->nr_pages; i++) {
 		struct page *page;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("pid(%d) [%d] page->count=%d\n", current->pid, i,
 				page_count(ctx->ring_pages[i]));
 		page = ctx->ring_pages[i];
@@ -311,6 +321,7 @@ static void aio_free_ring(struct kioctx *ctx)
 	}
 
 	if (ctx->ring_pages && ctx->ring_pages != ctx->internal_pages) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(ctx->ring_pages);
 		ctx->ring_pages = NULL;
 	}
@@ -325,6 +336,7 @@ static int aio_ring_mremap(struct vm_area_struct *vma)
 
 	spin_lock(&mm->ioctx_lock);
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	table = rcu_dereference(mm->ioctx_table);
 	for (i = 0; i < table->nr; i++) {
 		struct kioctx *ctx;
@@ -379,7 +391,9 @@ static int aio_migratepage(struct address_space *mapping, struct page *new,
 	 * migration workflow of MIGRATE_SYNC_NO_COPY.
 	 */
 	if (mode == MIGRATE_SYNC_NO_COPY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	rc = 0;
 
@@ -466,10 +480,13 @@ static int aio_setup_ring(struct kioctx *ctx, unsigned int nr_events)
 
 	nr_pages = PFN_UP(size);
 	if (nr_pages < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	file = aio_private_file(ctx, nr_pages);
 	if (IS_ERR(file)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ctx->aio_ring_file = NULL;
 		return -ENOMEM;
 	}
@@ -480,9 +497,11 @@ static int aio_setup_ring(struct kioctx *ctx, unsigned int nr_events)
 
 	ctx->ring_pages = ctx->internal_pages;
 	if (nr_pages > AIO_RING_PAGES) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ctx->ring_pages = kcalloc(nr_pages, sizeof(struct page *),
 					  GFP_KERNEL);
 		if (!ctx->ring_pages) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_aio_ring_file(ctx);
 			return -ENOMEM;
 		}
@@ -494,6 +513,7 @@ static int aio_setup_ring(struct kioctx *ctx, unsigned int nr_events)
 					   i, GFP_HIGHUSER | __GFP_ZERO);
 		if (!page)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("pid(%d) page[%d]->count=%d\n",
 			 current->pid, i, page_count(page));
 		SetPageUptodate(page);
@@ -504,14 +524,17 @@ static int aio_setup_ring(struct kioctx *ctx, unsigned int nr_events)
 	ctx->nr_pages = i;
 
 	if (unlikely(i != nr_pages)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		aio_free_ring(ctx);
 		return -ENOMEM;
 	}
 
 	ctx->mmap_size = nr_pages * PAGE_SIZE;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("attempting mmap of %lu bytes\n", ctx->mmap_size);
 
 	if (down_write_killable(&mm->mmap_sem)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ctx->mmap_size = 0;
 		aio_free_ring(ctx);
 		return -EINTR;
@@ -522,11 +545,13 @@ static int aio_setup_ring(struct kioctx *ctx, unsigned int nr_events)
 				       MAP_SHARED, 0, &unused, NULL);
 	up_write(&mm->mmap_sem);
 	if (IS_ERR((void *)ctx->mmap_base)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ctx->mmap_size = 0;
 		aio_free_ring(ctx);
 		return -ENOMEM;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("mmap address: 0x%08lx\n", ctx->mmap_base);
 
 	ctx->user_id = ctx->mmap_base;
@@ -540,7 +565,9 @@ static int aio_setup_ring(struct kioctx *ctx, unsigned int nr_events)
 	ring->compat_features = AIO_RING_COMPAT_FEATURES;
 	ring->incompat_features = AIO_RING_INCOMPAT_FEATURES;
 	ring->header_length = sizeof(struct aio_ring);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kunmap_atomic(ring);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flush_dcache_page(ctx->ring_pages[0]);
 
 	return 0;
@@ -552,6 +579,7 @@ static int aio_setup_ring(struct kioctx *ctx, unsigned int nr_events)
 
 void kiocb_set_cancel_fn(struct kiocb *iocb, kiocb_cancel_fn *cancel)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aio_kiocb *req = container_of(iocb, struct aio_kiocb, common);
 	struct kioctx *ctx = req->ki_ctx;
 	unsigned long flags;
@@ -578,6 +606,7 @@ static int kiocb_cancel(struct aio_kiocb *kiocb)
 
 	cancel = ACCESS_ONCE(kiocb->ki_cancel);
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!cancel || cancel == KIOCB_CANCELLED)
 			return -EINVAL;
 
@@ -592,6 +621,7 @@ static void free_ioctx(struct work_struct *work)
 {
 	struct kioctx *ctx = container_of(work, struct kioctx, free_work);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("freeing %p\n", ctx);
 
 	aio_free_ring(ctx);
@@ -603,6 +633,7 @@ static void free_ioctx(struct work_struct *work)
 
 static void free_ioctx_reqs(struct percpu_ref *ref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kioctx *ctx = container_of(ref, struct kioctx, reqs);
 
 	/* At this point we know that there are no any in-flight requests */
@@ -620,12 +651,14 @@ static void free_ioctx_reqs(struct percpu_ref *ref)
  */
 static void free_ioctx_users(struct percpu_ref *ref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kioctx *ctx = container_of(ref, struct kioctx, users);
 	struct aio_kiocb *req;
 
 	spin_lock_irq(&ctx->ctx_lock);
 
 	while (!list_empty(&ctx->active_reqs)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		req = list_first_entry(&ctx->active_reqs,
 				       struct aio_kiocb, ki_list);
 
@@ -633,6 +666,7 @@ static void free_ioctx_users(struct percpu_ref *ref)
 		kiocb_cancel(req);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(&ctx->ctx_lock);
 
 	percpu_ref_kill(&ctx->reqs);
@@ -648,6 +682,7 @@ static int ioctx_add_table(struct kioctx *ctx, struct mm_struct *mm)
 	spin_lock(&mm->ioctx_lock);
 	table = rcu_dereference_raw(mm->ioctx_table);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		if (table)
 			for (i = 0; i < table->nr; i++)
@@ -662,6 +697,7 @@ static int ioctx_add_table(struct kioctx *ctx, struct mm_struct *mm)
 					 */
 					ring = kmap_atomic(ctx->ring_pages[0]);
 					ring->id = ctx->id;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					kunmap_atomic(ring);
 					return 0;
 				}
@@ -672,7 +708,9 @@ static int ioctx_add_table(struct kioctx *ctx, struct mm_struct *mm)
 		table = kzalloc(sizeof(*table) + sizeof(struct kioctx *) *
 				new_nr, GFP_KERNEL);
 		if (!table)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
 		table->nr = new_nr;
 
@@ -688,6 +726,7 @@ static int ioctx_add_table(struct kioctx *ctx, struct mm_struct *mm)
 			rcu_assign_pointer(mm->ioctx_table, table);
 			kfree_rcu(old, rcu);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(table);
 			table = old;
 		}
@@ -696,11 +735,15 @@ static int ioctx_add_table(struct kioctx *ctx, struct mm_struct *mm)
 
 static void aio_nr_sub(unsigned nr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&aio_nr_lock);
 	if (WARN_ON(aio_nr - nr > aio_nr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		aio_nr = 0;
+}
 	else
 		aio_nr -= nr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&aio_nr_lock);
 }
 
diff --git a/fs/anon_inodes.c b/fs/anon_inodes.c
index 3168ee4..055143b 100644
--- a/fs/anon_inodes.c
+++ b/fs/anon_inodes.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  fs/anon_inodes.c
  *
@@ -30,6 +32,7 @@ static struct inode *anon_inode_inode;
  */
 static char *anon_inodefs_dname(struct dentry *dentry, char *buffer, int buflen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dynamic_dname(dentry, buffer, buflen, "anon_inode:%s",
 				dentry->d_name.name);
 }
@@ -76,10 +79,14 @@ struct file *anon_inode_getfile(const char *name,
 	struct file *file;
 
 	if (IS_ERR(anon_inode_inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENODEV);
+}
 
 	if (fops->owner && !try_module_get(fops->owner))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 
 	/*
 	 * Link the inode to a directory entry by creating a unique name
@@ -144,11 +151,15 @@ int anon_inode_getfd(const char *name, const struct file_operations *fops,
 
 	error = get_unused_fd_flags(flags);
 	if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fd = error;
 
 	file = anon_inode_getfile(name, fops, priv, flags);
 	if (IS_ERR(file)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = PTR_ERR(file);
 		goto err_put_unused_fd;
 	}
@@ -166,11 +177,15 @@ static int __init anon_inode_init(void)
 {
 	anon_inode_mnt = kern_mount(&anon_inode_fs_type);
 	if (IS_ERR(anon_inode_mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("anon_inode_init() kernel mount failed (%ld)\n", PTR_ERR(anon_inode_mnt));
+}
 
 	anon_inode_inode = alloc_anon_inode(anon_inode_mnt->mnt_sb);
 	if (IS_ERR(anon_inode_inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("anon_inode_init() inode allocation failed (%ld)\n", PTR_ERR(anon_inode_inode));
+}
 
 	return 0;
 }
diff --git a/fs/attr.c b/fs/attr.c
index 12ffdb6..738b1d3 100644
--- a/fs/attr.c
+++ b/fs/attr.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/attr.c
@@ -34,6 +36,7 @@
  */
 int setattr_prepare(struct dentry *dentry, struct iattr *attr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	unsigned int ia_valid = attr->ia_valid;
 
@@ -44,7 +47,9 @@ int setattr_prepare(struct dentry *dentry, struct iattr *attr)
 	if (ia_valid & ATTR_SIZE) {
 		int error = inode_newsize_ok(inode, attr->ia_size);
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 	}
 
 	/* If force is set do it anyway. */
@@ -68,7 +73,9 @@ int setattr_prepare(struct dentry *dentry, struct iattr *attr)
 	/* Make sure a caller can chmod. */
 	if (ia_valid & ATTR_MODE) {
 		if (!inode_owner_or_capable(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 		/* Also check the setgid bit! */
 		if (!in_group_p((ia_valid & ATTR_GID) ? attr->ia_gid :
 				inode->i_gid) &&
@@ -79,7 +86,9 @@ int setattr_prepare(struct dentry *dentry, struct iattr *attr)
 	/* Check for setting the inode time. */
 	if (ia_valid & (ATTR_MTIME_SET | ATTR_ATIME_SET | ATTR_TIMES_SET)) {
 		if (!inode_owner_or_capable(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 	}
 
 kill_priv:
@@ -89,9 +98,12 @@ int setattr_prepare(struct dentry *dentry, struct iattr *attr)
 
 		error = security_inode_killpriv(dentry);
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(setattr_prepare);
@@ -128,9 +140,12 @@ int inode_newsize_ok(const struct inode *inode, loff_t offset)
 		 * blocks.
 		 */
 		if (IS_SWAPFILE(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ETXTBSY;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 out_sig:
 	send_sig(SIGXFSZ, current, 0);
@@ -214,7 +229,9 @@ int notify_change(struct dentry * dentry, struct iattr * attr, struct inode **de
 
 	if (ia_valid & (ATTR_MODE | ATTR_UID | ATTR_GID | ATTR_TIMES_SET)) {
 		if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 	}
 
 	/*
@@ -223,12 +240,17 @@ int notify_change(struct dentry * dentry, struct iattr * attr, struct inode **de
 	 */
 	if (ia_valid & ATTR_TOUCH) {
 		if (IS_IMMUTABLE(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 
 		if (!inode_owner_or_capable(inode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = inode_permission(inode, MAY_WRITE);
 			if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return error;
+}
 		}
 	}
 
@@ -249,7 +271,9 @@ int notify_change(struct dentry * dentry, struct iattr * attr, struct inode **de
 	if (ia_valid & ATTR_KILL_PRIV) {
 		error = security_inode_need_killpriv(dentry);
 		if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 		if (error == 0)
 			ia_valid = attr->ia_valid &= ~ATTR_KILL_PRIV;
 	}
@@ -281,7 +305,9 @@ int notify_change(struct dentry * dentry, struct iattr * attr, struct inode **de
 		}
 	}
 	if (!(attr->ia_valid & ~(ATTR_KILL_SUID | ATTR_KILL_SGID)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * Verify that uid/gid changes are valid in the target
@@ -298,16 +324,24 @@ int notify_change(struct dentry * dentry, struct iattr * attr, struct inode **de
 	 * gids unless those uids & gids are being made valid.
 	 */
 	if (!(ia_valid & ATTR_UID) && !uid_valid(inode->i_uid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOVERFLOW;
+}
 	if (!(ia_valid & ATTR_GID) && !gid_valid(inode->i_gid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOVERFLOW;
+}
 
 	error = security_inode_setattr(dentry, attr);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	error = try_break_deleg(inode, delegated_inode);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	if (inode->i_op->setattr)
 		error = inode->i_op->setattr(dentry, attr);
@@ -320,6 +354,7 @@ int notify_change(struct dentry * dentry, struct iattr * attr, struct inode **de
 		evm_inode_post_setattr(dentry, ia_valid);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 EXPORT_SYMBOL(notify_change);
diff --git a/fs/bad_inode.c b/fs/bad_inode.c
index 213b51d..4df3b53f 100644
--- a/fs/bad_inode.c
+++ b/fs/bad_inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/bad_inode.c
@@ -18,6 +20,7 @@
 
 static int bad_file_open(struct inode *inode, struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
@@ -29,46 +32,54 @@ static const struct file_operations bad_file_ops =
 static int bad_inode_create (struct inode *dir, struct dentry *dentry,
 		umode_t mode, bool excl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static struct dentry *bad_inode_lookup(struct inode *dir,
 			struct dentry *dentry, unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(-EIO);
 }
 
 static int bad_inode_link (struct dentry *old_dentry, struct inode *dir,
 		struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static int bad_inode_unlink(struct inode *dir, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static int bad_inode_symlink (struct inode *dir, struct dentry *dentry,
 		const char *symname)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static int bad_inode_mkdir(struct inode *dir, struct dentry *dentry,
 			umode_t mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static int bad_inode_rmdir (struct inode *dir, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static int bad_inode_mknod (struct inode *dir, struct dentry *dentry,
 			umode_t mode, dev_t rdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
@@ -76,34 +87,40 @@ static int bad_inode_rename2(struct inode *old_dir, struct dentry *old_dentry,
 			     struct inode *new_dir, struct dentry *new_dentry,
 			     unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static int bad_inode_readlink(struct dentry *dentry, char __user *buffer,
 		int buflen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static int bad_inode_permission(struct inode *inode, int mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static int bad_inode_getattr(const struct path *path, struct kstat *stat,
 			     u32 request_mask, unsigned int query_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static int bad_inode_setattr(struct dentry *direntry, struct iattr *attrs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static ssize_t bad_inode_listxattr(struct dentry *dentry, char *buffer,
 			size_t buffer_size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
@@ -111,11 +128,13 @@ static const char *bad_inode_get_link(struct dentry *dentry,
 				      struct inode *inode,
 				      struct delayed_call *done)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(-EIO);
 }
 
 static struct posix_acl *bad_inode_get_acl(struct inode *inode, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(-EIO);
 }
 
@@ -123,12 +142,14 @@ static int bad_inode_fiemap(struct inode *inode,
 			    struct fiemap_extent_info *fieinfo, u64 start,
 			    u64 len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static int bad_inode_update_time(struct inode *inode, struct timespec *time,
 				 int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
@@ -136,18 +157,21 @@ static int bad_inode_atomic_open(struct inode *inode, struct dentry *dentry,
 				 struct file *file, unsigned int open_flag,
 				 umode_t create_mode, int *opened)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static int bad_inode_tmpfile(struct inode *inode, struct dentry *dentry,
 			     umode_t mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
 static int bad_inode_set_acl(struct inode *inode, struct posix_acl *acl,
 			     int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EIO;
 }
 
@@ -197,6 +221,7 @@ static const struct inode_operations bad_inode_ops =
  
 void make_bad_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	remove_inode_hash(inode);
 
 	inode->i_mode = S_IFREG;
@@ -236,6 +261,7 @@ EXPORT_SYMBOL(is_bad_inode);
  */
 void iget_failed(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	make_bad_inode(inode);
 	unlock_new_inode(inode);
 	iput(inode);
diff --git a/fs/binfmt_elf.c b/fs/binfmt_elf.c
index 73b01e4..461988e 100644
--- a/fs/binfmt_elf.c
+++ b/fs/binfmt_elf.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/fs/binfmt_elf.c
  *
@@ -108,7 +110,9 @@ static int set_brk(unsigned long start, unsigned long end, int prot)
 		int error = vm_brk_flags(start, end - start,
 				prot & PROT_EXEC ? VM_EXEC : 0);
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 	}
 	current->mm->start_brk = current->mm->brk = end;
 	return 0;
@@ -127,8 +131,11 @@ static int padzero(unsigned long elf_bss)
 	if (nbyte) {
 		nbyte = ELF_MIN_ALIGN - nbyte;
 		if (clear_user((void __user *) elf_bss, nbyte))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -192,11 +199,14 @@ create_elf_tables(struct linux_binprm *bprm, struct elfhdr *exec,
 	 */
 	u_platform = NULL;
 	if (k_platform) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		size_t len = strlen(k_platform) + 1;
 
 		u_platform = (elf_addr_t __user *)STACK_ALLOC(p, len);
 		if (__copy_to_user(u_platform, k_platform, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 	}
 
 	/*
@@ -205,11 +215,14 @@ create_elf_tables(struct linux_binprm *bprm, struct elfhdr *exec,
 	 */
 	u_base_platform = NULL;
 	if (k_base_platform) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		size_t len = strlen(k_base_platform) + 1;
 
 		u_base_platform = (elf_addr_t __user *)STACK_ALLOC(p, len);
 		if (__copy_to_user(u_base_platform, k_base_platform, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 	}
 
 	/*
@@ -219,7 +232,9 @@ create_elf_tables(struct linux_binprm *bprm, struct elfhdr *exec,
 	u_rand_bytes = (elf_addr_t __user *)
 		       STACK_ALLOC(p, sizeof(k_rand_bytes));
 	if (__copy_to_user(u_rand_bytes, k_rand_bytes, sizeof(k_rand_bytes)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	/* Create the ELF interpreter info */
 	elf_info = (elf_addr_t *)current->mm->saved_auxv;
@@ -258,15 +273,19 @@ create_elf_tables(struct linux_binprm *bprm, struct elfhdr *exec,
 	NEW_AUX_ENT(AT_HWCAP2, ELF_HWCAP2);
 #endif
 	NEW_AUX_ENT(AT_EXECFN, bprm->exec);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (k_platform) {
 		NEW_AUX_ENT(AT_PLATFORM,
 			    (elf_addr_t)(unsigned long)u_platform);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (k_base_platform) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NEW_AUX_ENT(AT_BASE_PLATFORM,
 			    (elf_addr_t)(unsigned long)u_base_platform);
 	}
 	if (bprm->interp_flags & BINPRM_FLAGS_EXECFD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		NEW_AUX_ENT(AT_EXECFD, bprm->interp_data);
 	}
 #undef NEW_AUX_ENT
@@ -297,25 +316,35 @@ create_elf_tables(struct linux_binprm *bprm, struct elfhdr *exec,
 	 */
 	vma = find_extend_vma(current->mm, bprm->p);
 	if (!vma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	/* Now, let's put argc (and argv, envp if appropriate) on the stack */
 	if (__put_user(argc, sp++))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	/* Populate list of argv pointers back to argv strings. */
 	p = current->mm->arg_end = current->mm->arg_start;
 	while (argc-- > 0) {
 		size_t len;
 		if (__put_user((elf_addr_t)p, sp++))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 		len = strnlen_user((void __user *)p, MAX_ARG_STRLEN);
 		if (!len || len > MAX_ARG_STRLEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 		p += len;
 	}
 	if (__put_user(0, sp++))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	current->mm->arg_end = p;
 
 	/* Populate list of envp pointers back to envp strings. */
@@ -323,19 +352,27 @@ create_elf_tables(struct linux_binprm *bprm, struct elfhdr *exec,
 	while (envc-- > 0) {
 		size_t len;
 		if (__put_user((elf_addr_t)p, sp++))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 		len = strnlen_user((void __user *)p, MAX_ARG_STRLEN);
 		if (!len || len > MAX_ARG_STRLEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 		p += len;
 	}
 	if (__put_user(0, sp++))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	current->mm->env_end = p;
 
 	/* Put the elf_info on the stack in the right place.  */
 	if (copy_to_user(sp, elf_info, ei_index * sizeof(elf_addr_t)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	return 0;
 }
 
@@ -354,7 +391,9 @@ static unsigned long elf_map(struct file *filep, unsigned long addr,
 	/* mmap() will return -EINVAL if given a zero size, but a
 	 * segment with zero filesize is perfectly valid */
 	if (!size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return addr;
+}
 
 	/*
 	* total_size is the size of the ELF (interpreter) image.
@@ -372,6 +411,7 @@ static unsigned long elf_map(struct file *filep, unsigned long addr,
 	} else
 		map_addr = vm_mmap(filep, addr, size, prot, type, off);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return(map_addr);
 }
 
@@ -383,13 +423,18 @@ static unsigned long total_mapping_size(struct elf_phdr *cmds, int nr)
 
 	for (i = 0; i < nr; i++) {
 		if (cmds[i].p_type == PT_LOAD) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			last_idx = i;
 			if (first_idx == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				first_idx = i;
+}
 		}
 	}
 	if (first_idx == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	return cmds[last_idx].p_vaddr + cmds[last_idx].p_memsz -
 				ELF_PAGESTART(cmds[first_idx].p_vaddr);
@@ -435,6 +480,7 @@ static struct elf_phdr *load_elf_phdrs(struct elfhdr *elf_ex,
 	/* Read in the program headers */
 	retval = kernel_read(elf_file, elf_phdata, size, &pos);
 	if (retval != size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = (retval < 0) ? retval : -EIO;
 		goto out;
 	}
@@ -443,6 +489,7 @@ static struct elf_phdr *load_elf_phdrs(struct elfhdr *elf_ex,
 	err = 0;
 out:
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(elf_phdata);
 		elf_phdata = NULL;
 	}
@@ -549,10 +596,12 @@ static unsigned long load_elf_interp(struct elfhdr *interp_elf_ex,
 	total_size = total_mapping_size(interp_elf_phdata,
 					interp_elf_ex->e_phnum);
 	if (!total_size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EINVAL;
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	eppnt = interp_elf_phdata;
 	for (i = 0; i < interp_elf_ex->e_phnum; i++, eppnt++) {
 		if (eppnt->p_type == PT_LOAD) {
@@ -562,14 +611,18 @@ static unsigned long load_elf_interp(struct elfhdr *interp_elf_ex,
 			unsigned long k, map_addr;
 
 			if (eppnt->p_flags & PF_R)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		    		elf_prot = PROT_READ;
+}
 			if (eppnt->p_flags & PF_W)
 				elf_prot |= PROT_WRITE;
 			if (eppnt->p_flags & PF_X)
 				elf_prot |= PROT_EXEC;
 			vaddr = eppnt->p_vaddr;
 			if (interp_elf_ex->e_type == ET_EXEC || load_addr_set)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				elf_type |= MAP_FIXED;
+}
 			else if (no_base && interp_elf_ex->e_type == ET_DYN)
 				load_addr = -vaddr;
 
@@ -578,6 +631,7 @@ static unsigned long load_elf_interp(struct elfhdr *interp_elf_ex,
 			total_size = 0;
 			if (!*interp_map_addr)
 				*interp_map_addr = map_addr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = map_addr;
 			if (BAD_ADDR(map_addr))
 				goto out;
@@ -598,6 +652,7 @@ static unsigned long load_elf_interp(struct elfhdr *interp_elf_ex,
 			    eppnt->p_filesz > eppnt->p_memsz ||
 			    eppnt->p_memsz > TASK_SIZE ||
 			    TASK_SIZE - eppnt->p_memsz < k) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				error = -ENOMEM;
 				goto out;
 			}
@@ -608,7 +663,9 @@ static unsigned long load_elf_interp(struct elfhdr *interp_elf_ex,
 			 */
 			k = load_addr + eppnt->p_vaddr + eppnt->p_filesz;
 			if (k > elf_bss)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				elf_bss = k;
+}
 
 			/*
 			 * Do the same thing for the memory mapping - between
@@ -616,6 +673,7 @@ static unsigned long load_elf_interp(struct elfhdr *interp_elf_ex,
 			 */
 			k = load_addr + eppnt->p_vaddr + eppnt->p_memsz;
 			if (k > last_bss) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				last_bss = k;
 				bss_prot = elf_prot;
 			}
@@ -628,6 +686,7 @@ static unsigned long load_elf_interp(struct elfhdr *interp_elf_ex,
 	 * up to the end of the page.
 	 */
 	if (padzero(elf_bss)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EFAULT;
 		goto out;
 	}
@@ -646,6 +705,7 @@ static unsigned long load_elf_interp(struct elfhdr *interp_elf_ex,
 			goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = load_addr;
 out:
 	return error;
@@ -665,6 +725,7 @@ static unsigned long randomize_stack_top(unsigned long stack_top)
 	unsigned long random_variable = 0;
 
 	if (current->flags & PF_RANDOMIZE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		random_variable = get_random_long();
 		random_variable &= STACK_RND_MASK;
 		random_variable <<= PAGE_SHIFT;
@@ -1414,6 +1475,7 @@ static int writenote(struct memelfnote *men, struct coredump_params *cprm)
 	en.n_descsz = men->datasz;
 	en.n_type = men->type;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dump_emit(cprm, &en, sizeof(en)) &&
 	    dump_emit(cprm, men->name, en.n_namesz) && dump_align(cprm, 4) &&
 	    dump_emit(cprm, men->data, men->datasz) && dump_align(cprm, 4);
@@ -1422,6 +1484,7 @@ static int writenote(struct memelfnote *men, struct coredump_params *cprm)
 static void fill_elf_header(struct elfhdr *elf, int segs,
 			    u16 machine, u32 flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(elf, 0, sizeof(*elf));
 
 	memcpy(elf->e_ident, ELFMAG, SELFMAG);
@@ -1444,6 +1507,7 @@ static void fill_elf_header(struct elfhdr *elf, int segs,
 
 static void fill_elf_note_phdr(struct elf_phdr *phdr, int sz, loff_t offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	phdr->p_type = PT_NOTE;
 	phdr->p_offset = offset;
 	phdr->p_vaddr = 0;
@@ -1458,6 +1522,7 @@ static void fill_elf_note_phdr(struct elf_phdr *phdr, int sz, loff_t offset)
 static void fill_note(struct memelfnote *note, const char *name, int type, 
 		unsigned int sz, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	note->name = name;
 	note->type = type;
 	note->datasz = sz;
@@ -1472,6 +1537,7 @@ static void fill_note(struct memelfnote *note, const char *name, int type,
 static void fill_prstatus(struct elf_prstatus *prstatus,
 		struct task_struct *p, long signr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	prstatus->pr_info.si_signo = prstatus->pr_cursig = signr;
 	prstatus->pr_sigpend = p->pending.signal.sig[0];
 	prstatus->pr_sighold = p->blocked.sig[0];
@@ -1514,7 +1580,9 @@ static int fill_psinfo(struct elf_prpsinfo *psinfo, struct task_struct *p,
 
 	len = mm->arg_end - mm->arg_start;
 	if (len >= ELF_PRARGSZ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = ELF_PRARGSZ-1;
+}
 	if (copy_from_user(&psinfo->pr_psargs,
 		           (const char __user *)mm->arg_start, len))
 		return -EFAULT;
@@ -1559,6 +1627,7 @@ static void fill_auxv_note(struct memelfnote *note, struct mm_struct *mm)
 static void fill_siginfo_note(struct memelfnote *note, user_siginfo_t *csigdata,
 		const siginfo_t *siginfo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mm_segment_t old_fs = get_fs();
 	set_fs(KERNEL_DS);
 	copy_siginfo_to_user((user_siginfo_t __user *) csigdata, siginfo);
@@ -1682,6 +1751,7 @@ struct elf_note_info {
 static void do_thread_regset_writeback(struct task_struct *task,
 				       const struct user_regset *regset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (regset->writeback)
 		regset->writeback(task, regset, 1);
 }
@@ -1759,6 +1829,7 @@ static int fill_note_info(struct elfhdr *elf, int phdrs,
 			  struct elf_note_info *info,
 			  const siginfo_t *siginfo, struct pt_regs *regs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct task_struct *dump_task = current;
 	const struct user_regset_view *view = task_user_regset_view(dump_task);
 	struct elf_thread_core_info *t;
@@ -1852,6 +1923,7 @@ static int fill_note_info(struct elfhdr *elf, int phdrs,
 
 static size_t get_note_info_size(struct elf_note_info *info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return info->size;
 }
 
@@ -1869,7 +1941,9 @@ static int write_note_info(struct elf_note_info *info,
 		int i;
 
 		if (!writenote(&t->notes[0], cprm))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
 		if (first && !writenote(&info->psinfo, cprm))
 			return 0;
@@ -1896,6 +1970,7 @@ static int write_note_info(struct elf_note_info *info,
 static void free_note_info(struct elf_note_info *info)
 {
 	struct elf_thread_core_info *threads = info->thread;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (threads) {
 		unsigned int i;
 		struct elf_thread_core_info *t = threads;
@@ -2141,7 +2216,9 @@ static struct vm_area_struct *first_vma(struct task_struct *tsk,
 	struct vm_area_struct *ret = tsk->mm->mmap;
 
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return gate_vma;
 }
 /*
@@ -2155,7 +2232,9 @@ static struct vm_area_struct *next_vma(struct vm_area_struct *this_vma,
 
 	ret = this_vma->vm_next;
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	if (this_vma == gate_vma)
 		return NULL;
 	return gate_vma;
@@ -2164,6 +2243,7 @@ static struct vm_area_struct *next_vma(struct vm_area_struct *this_vma,
 static void fill_extnum_info(struct elfhdr *elf, struct elf_shdr *shdr4extnum,
 			     elf_addr_t e_shoff, int segs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	elf->e_shoff = e_shoff;
 	elf->e_shentsize = sizeof(*shdr4extnum);
 	elf->e_shnum = 1;
diff --git a/fs/binfmt_misc.c b/fs/binfmt_misc.c
index a7c5a98..f37720b 100644
--- a/fs/binfmt_misc.c
+++ b/fs/binfmt_misc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * binfmt_misc.c
  *
@@ -692,7 +694,9 @@ static ssize_t bm_register_write(struct file *file, const char __user *buffer,
 	e = create_entry(buffer, count);
 
 	if (IS_ERR(e))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(e);
+}
 
 	inode_lock(d_inode(root));
 	dentry = lookup_one_len(e->name, root, strlen(e->name));
@@ -764,6 +768,7 @@ static const struct file_operations bm_register_operations = {
 static ssize_t
 bm_status_read(struct file *file, char __user *buf, size_t nbytes, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	char *s = enabled ? "enabled\n" : "disabled\n";
 
 	return simple_read_from_buffer(buf, nbytes, ppos, s, strlen(s));
@@ -772,6 +777,7 @@ bm_status_read(struct file *file, char __user *buf, size_t nbytes, loff_t *ppos)
 static ssize_t bm_status_write(struct file *file, const char __user *buffer,
 		size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int res = parse_command(buffer, count);
 	struct dentry *root;
 
@@ -858,6 +864,7 @@ static int __init init_misc_binfmt(void)
 
 static void __exit exit_misc_binfmt(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_binfmt(&misc_format);
 	unregister_filesystem(&bm_fs_type);
 }
diff --git a/fs/binfmt_script.c b/fs/binfmt_script.c
index 7cde3f4..04a7fc54 100644
--- a/fs/binfmt_script.c
+++ b/fs/binfmt_script.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/binfmt_script.c
  *
@@ -22,7 +24,9 @@ static int load_script(struct linux_binprm *bprm)
 	int retval;
 
 	if ((bprm->buf[0] != '#') || (bprm->buf[1] != '!'))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOEXEC;
+}
 
 	/*
 	 * If the script filename will be inaccessible after exec, typically
@@ -31,7 +35,9 @@ static int load_script(struct linux_binprm *bprm)
 	 * this file).
 	 */
 	if (bprm->interp_flags & BINPRM_FLAGS_PATH_INACCESSIBLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	/*
 	 * This section does the #! interpretation.
@@ -44,7 +50,9 @@ static int load_script(struct linux_binprm *bprm)
 
 	bprm->buf[BINPRM_BUF_SIZE - 1] = '\0';
 	if ((cp = strchr(bprm->buf, '\n')) == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cp = bprm->buf+BINPRM_BUF_SIZE-1;
+}
 	*cp = '\0';
 	while (cp > bprm->buf) {
 		cp--;
@@ -55,7 +63,9 @@ static int load_script(struct linux_binprm *bprm)
 	}
 	for (cp = bprm->buf+2; (*cp == ' ') || (*cp == '\t'); cp++);
 	if (*cp == '\0')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOEXEC; /* No interpreter name found */
+}
 	i_name = cp;
 	i_arg = NULL;
 	for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++)
@@ -76,36 +86,50 @@ static int load_script(struct linux_binprm *bprm)
 	 */
 	retval = remove_arg_zero(bprm);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 	retval = copy_strings_kernel(1, &bprm->interp, bprm);
 	if (retval < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 	bprm->argc++;
 	if (i_arg) {
 		retval = copy_strings_kernel(1, &i_arg, bprm);
 		if (retval < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
 		bprm->argc++;
 	}
 	retval = copy_strings_kernel(1, &i_name, bprm);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 	bprm->argc++;
 	retval = bprm_change_interp(i_name, bprm);
 	if (retval < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	/*
 	 * OK, now restart the process with the interpreter's dentry.
 	 */
 	file = open_exec(i_name);
 	if (IS_ERR(file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(file);
+}
 
 	bprm->file = file;
 	retval = prepare_binprm(bprm);
 	if (retval < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 	return search_binary_handler(bprm);
 }
 
@@ -122,6 +146,7 @@ static int __init init_script_binfmt(void)
 
 static void __exit exit_script_binfmt(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_binfmt(&script_format);
 }
 
diff --git a/fs/block_dev.c b/fs/block_dev.c
index 789f55e..de47806 100644
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/block_dev.c
  *
@@ -62,6 +64,7 @@ void __vfs_msg(struct super_block *sb, const char *prefix, const char *fmt, ...)
 	va_start(args, fmt);
 	vaf.fmt = fmt;
 	vaf.va = &args;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	printk_ratelimited("%sVFS (%s): %pV\n", prefix, sb->s_id, &vaf);
 	va_end(args);
 }
@@ -73,16 +76,20 @@ static void bdev_write_inode(struct block_device *bdev)
 
 	spin_lock(&inode->i_lock);
 	while (inode->i_state & I_DIRTY) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&inode->i_lock);
 		ret = write_inode_now(inode, true);
 		if (ret) {
 			char name[BDEVNAME_SIZE];
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn_ratelimited("VFS: Dirty inode writeback failed "
 					    "for block device %s (err=%d).\n",
 					    bdevname(bdev, name), ret);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&inode->i_lock);
 }
 
@@ -92,7 +99,9 @@ void kill_bdev(struct block_device *bdev)
 	struct address_space *mapping = bdev->bd_inode->i_mapping;
 
 	if (mapping->nrpages == 0 && mapping->nrexceptional == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	invalidate_bh_lrus();
 	truncate_inode_pages(mapping, 0);
@@ -105,6 +114,7 @@ void invalidate_bdev(struct block_device *bdev)
 	struct address_space *mapping = bdev->bd_inode->i_mapping;
 
 	if (mapping->nrpages) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		invalidate_bh_lrus();
 		lru_add_drain_all();	/* make sure all lru add caches are flushed */
 		invalidate_mapping_pages(mapping, 0, -1);
@@ -140,6 +150,7 @@ EXPORT_SYMBOL(set_blocksize);
 
 int sb_set_blocksize(struct super_block *sb, int size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (set_blocksize(sb->s_bdev, size))
 		return 0;
 	/* If we get here, we know size is power of two
@@ -153,6 +164,7 @@ EXPORT_SYMBOL(sb_set_blocksize);
 
 int sb_min_blocksize(struct super_block *sb, int size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int minsize = bdev_logical_block_size(sb->s_bdev);
 	if (size < minsize)
 		size = minsize;
@@ -182,7 +194,9 @@ static unsigned int dio_bio_write_op(struct kiocb *iocb)
 
 	/* avoid the need for a I/O completion work item */
 	if (iocb->ki_flags & IOCB_DSYNC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		op |= REQ_FUA;
+}
 	return op;
 }
 
@@ -291,6 +305,7 @@ static void blkdev_bio_end_io(struct bio *bio)
 	struct blkdev_dio *dio = bio->bi_private;
 	bool should_dirty = dio->should_dirty;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dio->multi_bio && !atomic_dec_and_test(&dio->ref)) {
 		if (bio->bi_status && !dio->bio.bi_status)
 			dio->bio.bi_status = bio->bi_status;
@@ -337,6 +352,7 @@ __blkdev_direct_IO(struct kiocb *iocb, struct iov_iter *iter, int nr_pages)
 	struct blk_plug plug;
 	struct blkdev_dio *dio;
 	struct bio *bio;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bool is_read = (iov_iter_rw(iter) == READ), is_sync;
 	loff_t pos = iocb->ki_pos;
 	blk_qc_t qc = BLK_QC_T_NONE;
@@ -435,7 +451,9 @@ blkdev_direct_IO(struct kiocb *iocb, struct iov_iter *iter)
 
 	nr_pages = iov_iter_npages(iter, BIO_MAX_PAGES + 1);
 	if (!nr_pages)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (is_sync_kiocb(iocb) && nr_pages <= BIO_MAX_PAGES)
 		return __blkdev_direct_IO_simple(iocb, iter, nr_pages);
 
@@ -446,7 +464,9 @@ static __init int blkdev_init(void)
 {
 	blkdev_dio_pool = bioset_create(4, offsetof(struct blkdev_dio, bio), BIOSET_NEED_BVECS);
 	if (!blkdev_dio_pool)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 module_init(blkdev_init);
@@ -454,9 +474,13 @@ module_init(blkdev_init);
 int __sync_blockdev(struct block_device *bdev, int wait)
 {
 	if (!bdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (!wait)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return filemap_flush(bdev->bd_inode->i_mapping);
+}
 	return filemap_write_and_wait(bdev->bd_inode->i_mapping);
 }
 
@@ -479,6 +503,7 @@ int fsync_bdev(struct block_device *bdev)
 {
 	struct super_block *sb = get_super(bdev);
 	if (sb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int res = sync_filesystem(sb);
 		drop_super(sb);
 		return res;
@@ -554,6 +579,7 @@ int thaw_bdev(struct block_device *bdev, struct super_block *sb)
 	if (!bdev->bd_fsfreeze_count)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = 0;
 	if (--bdev->bd_fsfreeze_count > 0)
 		goto out;
@@ -575,6 +601,7 @@ EXPORT_SYMBOL(thaw_bdev);
 
 static int blkdev_writepage(struct page *page, struct writeback_control *wbc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return block_write_full_page(page, blkdev_get_block, wbc);
 }
 
@@ -593,6 +620,7 @@ static int blkdev_write_begin(struct file *file, struct address_space *mapping,
 			loff_t pos, unsigned len, unsigned flags,
 			struct page **pagep, void **fsdata)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return block_write_begin(mapping, pos, len, flags, pagep,
 				 blkdev_get_block);
 }
@@ -617,6 +645,7 @@ static int blkdev_write_end(struct file *file, struct address_space *mapping,
  */
 static loff_t block_llseek(struct file *file, loff_t offset, int whence)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *bd_inode = bdev_file_inode(file);
 	loff_t retval;
 
@@ -628,6 +657,7 @@ static loff_t block_llseek(struct file *file, loff_t offset, int whence)
 	
 int blkdev_fsync(struct file *filp, loff_t start, loff_t end, int datasync)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *bd_inode = bdev_file_inode(filp);
 	struct block_device *bdev = I_BDEV(bd_inode);
 	int error;
@@ -672,11 +702,15 @@ int bdev_read_page(struct block_device *bdev, sector_t sector,
 	int result = -EOPNOTSUPP;
 
 	if (!ops->rw_page || bdev_get_integrity(bdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
 	result = blk_queue_enter(bdev->bd_queue, false);
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 	result = ops->rw_page(bdev, sector + get_start_sect(bdev), page, false);
 	blk_queue_exit(bdev->bd_queue);
 	return result;
@@ -708,6 +742,7 @@ int bdev_write_page(struct block_device *bdev, sector_t sector,
 	int result;
 	const struct block_device_operations *ops = bdev->bd_disk->fops;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ops->rw_page || bdev_get_integrity(bdev))
 		return -EOPNOTSUPP;
 	result = blk_queue_enter(bdev->bd_queue, false);
@@ -738,12 +773,15 @@ static struct inode *bdev_alloc_inode(struct super_block *sb)
 {
 	struct bdev_inode *ei = kmem_cache_alloc(bdev_cachep, GFP_KERNEL);
 	if (!ei)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	return &ei->vfs_inode;
 }
 
 static void bdev_i_callback(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = container_of(head, struct inode, i_rcu);
 	struct bdev_inode *bdi = BDEV_I(inode);
 
@@ -774,6 +812,7 @@ static void init_once(void *foo)
 
 static void bdev_evict_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct block_device *bdev = &BDEV_I(inode)->bdev;
 	truncate_inode_pages_final(&inode->i_data);
 	invalidate_inode_buffers(inode); /* is it needed here? */
@@ -827,10 +866,14 @@ void __init bdev_cache_init(void)
 			init_once);
 	err = register_filesystem(&bd_type);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Cannot register bdev pseudo-fs");
+}
 	bd_mnt = kern_mount(&bd_type);
 	if (IS_ERR(bd_mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Cannot create bdev pseudo-fs");
+}
 	blockdev_superblock = bd_mnt->mnt_sb;   /* For writeback */
 }
 
@@ -867,6 +910,7 @@ void bdev_unhash_inode(dev_t dev)
 
 	inode = ilookup5(blockdev_superblock, hash(dev), bdev_test, &dev);
 	if (inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		remove_inode_hash(inode);
 		iput(inode);
 	}
@@ -881,7 +925,9 @@ struct block_device *bdget(dev_t dev)
 			bdev_test, bdev_set, &dev);
 
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	bdev = &BDEV_I(inode)->bdev;
 
@@ -902,6 +948,7 @@ struct block_device *bdget(dev_t dev)
 		spin_unlock(&bdev_lock);
 		unlock_new_inode(inode);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bdev;
 }
 
@@ -926,6 +973,7 @@ long nr_blockdev_pages(void)
 	list_for_each_entry(bdev, &all_bdevs, bd_list) {
 		ret += bdev->bd_inode->i_mapping->nrpages;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&bdev_lock);
 	return ret;
 }
@@ -948,6 +996,7 @@ static struct block_device *bd_acquire(struct inode *inode)
 		spin_unlock(&bdev_lock);
 		return bdev;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&bdev_lock);
 
 	/*
@@ -957,10 +1006,13 @@ static struct block_device *bd_acquire(struct inode *inode)
 	 * reestablished under the same device number.
 	 */
 	if (bdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bd_forget(inode);
+}
 
 	bdev = bdget(inode->i_rdev);
 	if (bdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&bdev_lock);
 		if (!inode->i_bdev) {
 			/*
@@ -973,8 +1025,10 @@ static struct block_device *bd_acquire(struct inode *inode)
 			inode->i_bdev = bdev;
 			inode->i_mapping = bdev->bd_inode->i_mapping;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&bdev_lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bdev;
 }
 
@@ -986,14 +1040,18 @@ void bd_forget(struct inode *inode)
 
 	spin_lock(&bdev_lock);
 	if (!sb_is_blkdev_sb(inode->i_sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bdev = inode->i_bdev;
+}
 	inode->i_bdev = NULL;
 	inode->i_mapping = &inode->i_data;
 	spin_unlock(&bdev_lock);
 
 	if (bdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bdput(bdev);
 }
+}
 
 /**
  * bd_may_claim - test whether a block device can be claimed
@@ -1012,6 +1070,7 @@ void bd_forget(struct inode *inode)
 static bool bd_may_claim(struct block_device *bdev, struct block_device *whole,
 			 void *holder)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (bdev->bd_holder == holder)
 		return true;	 /* already a holder */
 	else if (bdev->bd_holder != NULL)
@@ -1100,6 +1159,7 @@ static struct block_device *bd_start_claiming(struct block_device *bdev,
 	struct block_device *whole;
 	int partno, err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	/*
@@ -1155,6 +1215,7 @@ static struct bd_holder_disk *bd_find_holder_disk(struct block_device *bdev,
 {
 	struct bd_holder_disk *holder;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(holder, &bdev->bd_holder_disks, list)
 		if (holder->disk == disk)
 			return holder;
@@ -1163,11 +1224,13 @@ static struct bd_holder_disk *bd_find_holder_disk(struct block_device *bdev,
 
 static int add_symlink(struct kobject *from, struct kobject *to)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sysfs_create_link(from, to, kobject_name(to));
 }
 
 static void del_symlink(struct kobject *from, struct kobject *to)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sysfs_remove_link(from, kobject_name(to));
 }
 
@@ -1206,6 +1269,7 @@ int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk)
 
 	mutex_lock(&bdev->bd_mutex);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(!bdev->bd_holder);
 
 	/* FIXME: remove the following once add_disk() handles errors */
@@ -1272,6 +1336,7 @@ void bd_unlink_disk_holder(struct block_device *bdev, struct gendisk *disk)
 
 	holder = bd_find_holder_disk(bdev, disk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!WARN_ON_ONCE(holder == NULL) && !--holder->refcnt) {
 		del_symlink(disk->slave_dir, &part_to_dev(bdev->bd_part)->kobj);
 		del_symlink(bdev->bd_part->holder_dir,
@@ -1305,10 +1370,14 @@ static void flush_disk(struct block_device *bdev, bool kill_dirty)
 	}
 
 	if (!bdev->bd_disk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (disk_part_scan_enabled(bdev->bd_disk))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bdev->bd_invalidated = 1;
 }
+}
 
 /**
  * check_disk_size_change - checks for disk size change and adjusts bdev size.
@@ -1325,6 +1394,7 @@ void check_disk_size_change(struct gendisk *disk, struct block_device *bdev)
 	disk_size = (loff_t)get_capacity(disk) << 9;
 	bdev_size = i_size_read(bdev->bd_inode);
 	if (disk_size != bdev_size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_INFO
 		       "%s: detected capacity change from %lld to %lld\n",
 		       disk->disk_name, bdev_size, disk_size);
@@ -1348,7 +1418,9 @@ int revalidate_disk(struct gendisk *disk)
 	int ret = 0;
 
 	if (disk->fops->revalidate_disk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = disk->fops->revalidate_disk(disk);
+}
 	bdev = bdget_disk(disk, 0);
 	if (!bdev)
 		return ret;
@@ -1380,11 +1452,14 @@ int check_disk_change(struct block_device *bdev)
 	events = disk_clear_events(disk, DISK_EVENT_MEDIA_CHANGE |
 				   DISK_EVENT_EJECT_REQUEST);
 	if (!(events & DISK_EVENT_MEDIA_CHANGE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	flush_disk(bdev, true);
 	if (bdops->revalidate_disk)
 		bdops->revalidate_disk(bdev->bd_disk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -1425,15 +1500,20 @@ static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)
 	int perm = 0;
 
 	if (mode & FMODE_READ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		perm |= MAY_READ;
+}
 	if (mode & FMODE_WRITE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		perm |= MAY_WRITE;
+}
 	/*
 	 * hooks: /n/, see "layering violations".
 	 */
 	if (!for_part) {
 		ret = devcgroup_inode_permission(bdev->bd_inode, perm);
 		if (ret != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bdput(bdev);
 			return ret;
 		}
@@ -1441,6 +1521,7 @@ static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)
 
  restart:
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -ENXIO;
 	disk = get_gendisk(bdev->bd_dev, &partno);
 	if (!disk)
@@ -1456,11 +1537,13 @@ static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)
 		bdev->bd_partno = partno;
 
 		if (!partno) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ENXIO;
 			bdev->bd_part = disk_get_part(disk, partno);
 			if (!bdev->bd_part)
 				goto out_clear;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = 0;
 			if (disk->fops->open) {
 				ret = disk->fops->open(bdev, mode);
@@ -1493,8 +1576,11 @@ static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)
 			if (bdev->bd_invalidated) {
 				if (!ret)
 					rescan_partitions(disk, bdev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				else if (ret == -ENOMEDIUM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					invalidate_partitions(disk, bdev);
+}
 			}
 
 			if (ret)
@@ -1505,34 +1591,50 @@ static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)
 			ret = -ENOMEM;
 			if (!whole)
 				goto out_clear;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BUG_ON(for_part);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = __blkdev_get(whole, mode, 1);
 			if (ret)
 				goto out_clear;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bdev->bd_contains = whole;
 			bdev->bd_part = disk_get_part(disk, partno);
 			if (!(disk->flags & GENHD_FL_UP) ||
 			    !bdev->bd_part || !bdev->bd_part->nr_sects) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -ENXIO;
 				goto out_clear;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bd_set_size(bdev, (loff_t)bdev->bd_part->nr_sects << 9);
 		}
 
 		if (bdev->bd_bdi == &noop_backing_dev_info)
 			bdev->bd_bdi = bdi_get(disk->queue->backing_dev_info);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (bdev->bd_contains == bdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = 0;
 			if (bdev->bd_disk->fops->open)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = bdev->bd_disk->fops->open(bdev, mode);
+}
 			/* the same as first opener case, read comment there */
 			if (bdev->bd_invalidated) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					rescan_partitions(bdev->bd_disk, bdev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				else if (ret == -ENOMEDIUM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					invalidate_partitions(bdev->bd_disk, bdev);
+}
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ret)
 				goto out_unlock_bdev;
 		}
@@ -1542,7 +1644,9 @@ static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)
 	}
 	bdev->bd_openers++;
 	if (for_part)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bdev->bd_part_count++;
+}
 	mutex_unlock(&bdev->bd_mutex);
 	disk_unblock_events(disk);
 	return 0;
@@ -1553,7 +1657,9 @@ static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)
 	bdev->bd_part = NULL;
 	bdev->bd_queue = NULL;
 	if (bdev != bdev->bd_contains)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__blkdev_put(bdev->bd_contains, mode, 1);
+}
 	bdev->bd_contains = NULL;
  out_unlock_bdev:
 	mutex_unlock(&bdev->bd_mutex);
@@ -1593,8 +1699,10 @@ int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder)
 	WARN_ON_ONCE((mode & FMODE_EXCL) && !holder);
 
 	if ((mode & FMODE_EXCL) && holder) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		whole = bd_start_claiming(bdev, holder);
 		if (IS_ERR(whole)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bdput(bdev);
 			return PTR_ERR(whole);
 		}
@@ -1610,6 +1718,7 @@ int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder)
 		spin_lock(&bdev_lock);
 
 		if (!res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BUG_ON(!bd_may_claim(bdev, whole, holder));
 			/*
 			 * Note that for a whole device bd_holders
@@ -1625,6 +1734,7 @@ int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder)
 
 		/* tell others that we're done */
 		BUG_ON(whole->bd_claiming != holder);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		whole->bd_claiming = NULL;
 		wake_up_bit(&whole->bd_claiming, 0);
 
@@ -1639,14 +1749,17 @@ int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder)
 		 */
 		if (!res && (mode & FMODE_WRITE) && !bdev->bd_write_holder &&
 		    (disk->flags & GENHD_FL_BLOCK_EVENTS_ON_EXCL_WRITE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bdev->bd_write_holder = true;
 			disk_block_events(disk);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&bdev->bd_mutex);
 		bdput(whole);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return res;
 }
 EXPORT_SYMBOL(blkdev_get);
@@ -1676,7 +1789,9 @@ struct block_device *blkdev_get_by_path(const char *path, fmode_t mode,
 
 	bdev = lookup_bdev(path);
 	if (IS_ERR(bdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return bdev;
+}
 
 	err = blkdev_get(bdev, mode, holder);
 	if (err)
@@ -1720,7 +1835,9 @@ struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode, void *holder)
 
 	bdev = bdget(dev);
 	if (!bdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	err = blkdev_get(bdev, mode, holder);
 	if (err)
@@ -1745,15 +1862,23 @@ static int blkdev_open(struct inode * inode, struct file * filp)
 	filp->f_mode |= FMODE_NOWAIT;
 
 	if (filp->f_flags & O_NDELAY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		filp->f_mode |= FMODE_NDELAY;
+}
 	if (filp->f_flags & O_EXCL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		filp->f_mode |= FMODE_EXCL;
+}
 	if ((filp->f_flags & O_ACCMODE) == 3)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		filp->f_mode |= FMODE_WRITE_IOCTL;
+}
 
 	bdev = bd_acquire(inode);
 	if (bdev == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	filp->f_mapping = bdev->bd_inode->i_mapping;
 	filp->f_wb_err = filemap_sample_wb_err(filp->f_mapping);
@@ -1768,7 +1893,9 @@ static void __blkdev_put(struct block_device *bdev, fmode_t mode, int for_part)
 
 	mutex_lock_nested(&bdev->bd_mutex, for_part);
 	if (for_part)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bdev->bd_part_count--;
+}
 
 	if (!--bdev->bd_openers) {
 		WARN_ON_ONCE(bdev->bd_holders);
@@ -1779,7 +1906,9 @@ static void __blkdev_put(struct block_device *bdev, fmode_t mode, int for_part)
 	}
 	if (bdev->bd_contains == bdev) {
 		if (disk->fops->release)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			disk->fops->release(disk, mode);
+}
 	}
 	if (!bdev->bd_openers) {
 		struct module *owner = disk->fops->owner;
@@ -1788,7 +1917,9 @@ static void __blkdev_put(struct block_device *bdev, fmode_t mode, int for_part)
 		bdev->bd_part = NULL;
 		bdev->bd_disk = NULL;
 		if (bdev != bdev->bd_contains)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			victim = bdev->bd_contains;
+}
 		bdev->bd_contains = NULL;
 
 		put_disk(disk);
@@ -1797,8 +1928,10 @@ static void __blkdev_put(struct block_device *bdev, fmode_t mode, int for_part)
 	mutex_unlock(&bdev->bd_mutex);
 	bdput(bdev);
 	if (victim)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__blkdev_put(victim, mode, 1);
 }
+}
 
 void blkdev_put(struct block_device *bdev, fmode_t mode)
 {
@@ -1814,15 +1947,23 @@ void blkdev_put(struct block_device *bdev, fmode_t mode)
 		 */
 		spin_lock(&bdev_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON_ONCE(--bdev->bd_holders < 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON_ONCE(--bdev->bd_contains->bd_holders < 0);
 
 		/* bd_contains might point to self, check in a separate step */
 		if ((bdev_free = !bdev->bd_holders))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bdev->bd_holder = NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!bdev->bd_contains->bd_holders)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bdev->bd_contains->bd_holder = NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&bdev_lock);
 
 		/*
@@ -1830,6 +1971,7 @@ void blkdev_put(struct block_device *bdev, fmode_t mode)
 		 * unblock evpoll if it was a write holder.
 		 */
 		if (bdev_free && bdev->bd_write_holder) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			disk_unblock_events(bdev->bd_disk);
 			bdev->bd_write_holder = false;
 		}
@@ -1850,6 +1992,7 @@ EXPORT_SYMBOL(blkdev_put);
 
 static int blkdev_close(struct inode * inode, struct file * filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct block_device *bdev = I_BDEV(bdev_file_inode(filp));
 	blkdev_put(bdev, filp->f_mode);
 	return 0;
@@ -1857,6 +2000,7 @@ static int blkdev_close(struct inode * inode, struct file * filp)
 
 static long block_ioctl(struct file *file, unsigned cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct block_device *bdev = I_BDEV(bdev_file_inode(file));
 	fmode_t mode = file->f_mode;
 
@@ -1865,7 +2009,9 @@ static long block_ioctl(struct file *file, unsigned cmd, unsigned long arg)
 	 * to updated it before every ioctl.
 	 */
 	if (file->f_flags & O_NDELAY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mode |= FMODE_NDELAY;
+}
 	else
 		mode &= ~FMODE_NDELAY;
 
@@ -1888,7 +2034,9 @@ ssize_t blkdev_write_iter(struct kiocb *iocb, struct iov_iter *from)
 	ssize_t ret;
 
 	if (bdev_read_only(I_BDEV(bd_inode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	if (!iov_iter_count(from))
 		return 0;
@@ -1918,7 +2066,9 @@ ssize_t blkdev_read_iter(struct kiocb *iocb, struct iov_iter *to)
 	loff_t pos = iocb->ki_pos;
 
 	if (pos >= size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	size -= pos;
 	iov_iter_truncate(to, size);
@@ -1935,7 +2085,9 @@ static int blkdev_releasepage(struct page *page, gfp_t wait)
 	struct super_block *super = BDEV_I(page->mapping->host)->bdev.bd_super;
 
 	if (super && super->s_op->bdev_try_to_free_page)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return super->s_op->bdev_try_to_free_page(super, page, wait);
+}
 
 	return try_to_free_buffers(page);
 }
@@ -1944,6 +2096,7 @@ static int blkdev_writepages(struct address_space *mapping,
 			     struct writeback_control *wbc)
 {
 	if (dax_mapping(mapping)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct block_device *bdev = I_BDEV(mapping->host);
 
 		return dax_writeback_mapping_range(mapping, bdev, wbc);
@@ -1970,6 +2123,7 @@ static const struct address_space_operations def_blk_aops = {
 static long blkdev_fallocate(struct file *file, int mode, loff_t start,
 			     loff_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct block_device *bdev = I_BDEV(bdev_file_inode(file));
 	struct address_space *mapping;
 	loff_t end = start + len - 1;
@@ -2076,6 +2230,7 @@ struct block_device *lookup_bdev(const char *pathname)
 	struct path path;
 	int error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pathname || !*pathname)
 		return ERR_PTR(-EINVAL);
 
@@ -2129,6 +2284,7 @@ void iterate_bdevs(void (*func)(struct block_device *, void *), void *arg)
 	struct inode *inode, *old_inode = NULL;
 
 	spin_lock(&blockdev_superblock->s_inode_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(inode, &blockdev_superblock->s_inodes, i_sb_list) {
 		struct address_space *mapping = inode->i_mapping;
 		struct block_device *bdev;
diff --git a/fs/buffer.c b/fs/buffer.c
index b96f3b9..a82f950 100644
--- a/fs/buffer.c
+++ b/fs/buffer.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/buffer.c
  *
@@ -55,6 +57,7 @@ static int submit_bh_wbc(int op, int op_flags, struct buffer_head *bh,
 
 void init_buffer(struct buffer_head *bh, bh_end_io_t *handler, void *private)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bh->b_end_io = handler;
 	bh->b_private = private;
 }
@@ -62,6 +65,7 @@ EXPORT_SYMBOL(init_buffer);
 
 inline void touch_buffer(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	trace_block_touch_buffer(bh);
 	mark_page_accessed(bh->b_page);
 }
@@ -69,6 +73,7 @@ EXPORT_SYMBOL(touch_buffer);
 
 void __lock_buffer(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	wait_on_bit_lock_io(&bh->b_state, BH_Lock, TASK_UNINTERRUPTIBLE);
 }
 EXPORT_SYMBOL(__lock_buffer);
@@ -93,6 +98,7 @@ void buffer_check_dirty_writeback(struct page *page,
 	*dirty = false;
 	*writeback = false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!PageLocked(page));
 
 	if (!page_has_buffers(page))
@@ -122,6 +128,7 @@ EXPORT_SYMBOL(buffer_check_dirty_writeback);
  */
 void __wait_on_buffer(struct buffer_head * bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	wait_on_bit_io(&bh->b_state, BH_Lock, TASK_UNINTERRUPTIBLE);
 }
 EXPORT_SYMBOL(__wait_on_buffer);
@@ -129,6 +136,7 @@ EXPORT_SYMBOL(__wait_on_buffer);
 static void
 __clear_page_buffers(struct page *page)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ClearPagePrivate(page);
 	set_page_private(page, 0);
 	put_page(page);
@@ -136,6 +144,7 @@ __clear_page_buffers(struct page *page)
 
 static void buffer_io_error(struct buffer_head *bh, char *msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_bit(BH_Quiet, &bh->b_state))
 		printk_ratelimited(KERN_ERR
 			"Buffer I/O error on dev %pg, logical block %llu%s\n",
@@ -152,6 +161,7 @@ static void buffer_io_error(struct buffer_head *bh, char *msg)
  */
 static void __end_buffer_read_notouch(struct buffer_head *bh, int uptodate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (uptodate) {
 		set_buffer_uptodate(bh);
 	} else {
@@ -167,6 +177,7 @@ static void __end_buffer_read_notouch(struct buffer_head *bh, int uptodate)
  */
 void end_buffer_read_sync(struct buffer_head *bh, int uptodate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__end_buffer_read_notouch(bh, uptodate);
 	put_bh(bh);
 }
@@ -174,6 +185,7 @@ EXPORT_SYMBOL(end_buffer_read_sync);
 
 void end_buffer_write_sync(struct buffer_head *bh, int uptodate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (uptodate) {
 		set_buffer_uptodate(bh);
 	} else {
@@ -214,6 +226,7 @@ __find_get_block_slow(struct block_device *bdev, sector_t block)
 	if (!page)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&bd_mapping->private_lock);
 	if (!page_has_buffers(page))
 		goto out_unlock;
@@ -263,6 +276,7 @@ static void free_more_memory(void)
 	wakeup_flusher_threads(1024, WB_REASON_FREE_MORE_MEM);
 	yield();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_online_node(nid) {
 
 		z = first_zones_zonelist(node_zonelist(nid, GFP_NOFS),
@@ -289,8 +303,10 @@ static void end_buffer_async_read(struct buffer_head *bh, int uptodate)
 
 	page = bh->b_page;
 	if (uptodate) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_buffer_uptodate(bh);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clear_buffer_uptodate(bh);
 		buffer_io_error(bh, ", async page read");
 		SetPageError(page);
@@ -309,8 +325,11 @@ static void end_buffer_async_read(struct buffer_head *bh, int uptodate)
 	tmp = bh;
 	do {
 		if (!buffer_uptodate(tmp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			page_uptodate = 0;
+}
 		if (buffer_async_read(tmp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BUG_ON(!buffer_locked(tmp));
 			goto still_busy;
 		}
@@ -324,13 +343,17 @@ static void end_buffer_async_read(struct buffer_head *bh, int uptodate)
 	 * uptodate then we can set the page uptodate.
 	 */
 	if (page_uptodate && !PageError(page))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		SetPageUptodate(page);
+}
 	unlock_page(page);
 	return;
 
 still_busy:
 	bit_spin_unlock(BH_Uptodate_Lock, &first->b_state);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	local_irq_restore(flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return;
 }
 
@@ -345,6 +368,7 @@ void end_buffer_async_write(struct buffer_head *bh, int uptodate)
 	struct buffer_head *tmp;
 	struct page *page;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!buffer_async_write(bh));
 
 	page = bh->b_page;
@@ -413,12 +437,14 @@ static void mark_buffer_async_read(struct buffer_head *bh)
 static void mark_buffer_async_write_endio(struct buffer_head *bh,
 					  bh_end_io_t *handler)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bh->b_end_io = handler;
 	set_buffer_async_write(bh);
 }
 
 void mark_buffer_async_write(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mark_buffer_async_write_endio(bh, end_buffer_async_write);
 }
 EXPORT_SYMBOL(mark_buffer_async_write);
@@ -478,6 +504,7 @@ EXPORT_SYMBOL(mark_buffer_async_write);
  */
 static void __remove_assoc_queue(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_del_init(&bh->b_assoc_buffers);
 	WARN_ON(!bh->b_assoc_map);
 	bh->b_assoc_map = NULL;
@@ -525,12 +552,14 @@ static int osync_buffers_list(spinlock_t *lock, struct list_head *list)
 
 static void do_thaw_one(struct super_block *sb, void *unused)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (sb->s_bdev && !thaw_bdev(sb->s_bdev, sb))
 		printk(KERN_WARNING "Emergency Thaw on %pg\n", sb->s_bdev);
 }
 
 static void do_thaw_all(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iterate_supers(do_thaw_one, NULL);
 	kfree(work);
 	printk(KERN_WARNING "Emergency Thaw complete\n");
@@ -547,6 +576,7 @@ void emergency_thaw_all(void)
 
 	work = kmalloc(sizeof(*work), GFP_ATOMIC);
 	if (work) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INIT_WORK(work, do_thaw_all);
 		schedule_work(work);
 	}
@@ -567,6 +597,7 @@ int sync_mapping_buffers(struct address_space *mapping)
 {
 	struct address_space *buffer_mapping = mapping->private_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (buffer_mapping == NULL || list_empty(&mapping->private_list))
 		return 0;
 
@@ -584,6 +615,7 @@ EXPORT_SYMBOL(sync_mapping_buffers);
 void write_boundary_block(struct block_device *bdev,
 			sector_t bblock, unsigned blocksize)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct buffer_head *bh = __find_get_block(bdev, bblock + 1, blocksize);
 	if (bh) {
 		if (buffer_dirty(bh))
@@ -599,6 +631,7 @@ void mark_buffer_dirty_inode(struct buffer_head *bh, struct inode *inode)
 
 	mark_buffer_dirty(bh);
 	if (!mapping->private_data) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mapping->private_data = buffer_mapping;
 	} else {
 		BUG_ON(mapping->private_data != buffer_mapping);
@@ -627,6 +660,7 @@ static void __set_page_dirty(struct page *page, struct address_space *mapping,
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&mapping->tree_lock, flags);
 	if (page->mapping) {	/* Race with truncate? */
 		WARN_ON_ONCE(warn && !PageUptodate(page));
@@ -668,7 +702,9 @@ int __set_page_dirty_buffers(struct page *page)
 	struct address_space *mapping = page_mapping(page);
 
 	if (unlikely(!mapping))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return !TestSetPageDirty(page);
+}
 
 	spin_lock(&mapping->private_lock);
 	if (page_has_buffers(page)) {
@@ -731,6 +767,7 @@ static int fsync_buffers_list(spinlock_t *lock, struct list_head *list)
 	blk_start_plug(&plug);
 
 	spin_lock(lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!list_empty(list)) {
 		bh = BH_ENTRY(list->next);
 		mapping = bh->b_assoc_map;
@@ -815,8 +852,10 @@ void invalidate_inode_buffers(struct inode *inode)
 		struct address_space *buffer_mapping = mapping->private_data;
 
 		spin_lock(&buffer_mapping->private_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (!list_empty(list))
 			__remove_assoc_queue(BH_ENTRY(list->next));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&buffer_mapping->private_lock);
 	}
 }
@@ -838,6 +877,7 @@ int remove_inode_buffers(struct inode *inode)
 		struct address_space *buffer_mapping = mapping->private_data;
 
 		spin_lock(&buffer_mapping->private_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (!list_empty(list)) {
 			struct buffer_head *bh = BH_ENTRY(list->next);
 			if (buffer_dirty(bh)) {
@@ -883,6 +923,7 @@ struct buffer_head *alloc_page_buffers(struct page *page, unsigned long size,
 		/* Link the buffer to its page */
 		set_bh_page(bh, page, offset);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return head;
 /*
  * In case anything failed, we just free everything we got.
@@ -890,9 +931,11 @@ struct buffer_head *alloc_page_buffers(struct page *page, unsigned long size,
 no_grow:
 	if (head) {
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bh = head;
 			head = head->b_this_page;
 			free_buffer_head(bh);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (head);
 	}
 
@@ -903,7 +946,9 @@ struct buffer_head *alloc_page_buffers(struct page *page, unsigned long size,
 	 * partially complete buffers, so all were released above.
 	 */
 	if (!retry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/* We're _really_ low on memory. Now we just
 	 * wait for old buffer heads to become free due to
@@ -923,6 +968,7 @@ link_dev_buffers(struct page *page, struct buffer_head *head)
 
 	bh = head;
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tail = bh;
 		bh = bh->b_this_page;
 	} while (bh);
@@ -936,6 +982,7 @@ static sector_t blkdev_max_block(struct block_device *bdev, unsigned int size)
 	loff_t sz = i_size_read(bdev->bd_inode);
 
 	if (sz) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unsigned int sizebits = blksize_bits(size);
 		retval = (sz >> sizebits);
 	}
@@ -949,6 +996,7 @@ static sector_t
 init_page_buffers(struct page *page, struct block_device *bdev,
 			sector_t block, int size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct buffer_head *head = page_buffers(page);
 	struct buffer_head *bh = head;
 	int uptodate = PageUptodate(page);
@@ -1002,7 +1050,9 @@ grow_dev_page(struct block_device *bdev, sector_t block,
 
 	page = find_or_create_page(inode->i_mapping, index, gfp_mask);
 	if (!page)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	BUG_ON(!PageLocked(page));
 
@@ -1055,6 +1105,7 @@ grow_buffers(struct block_device *bdev, sector_t block, int size, gfp_t gfp)
 
 	sizebits = -1;
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sizebits++;
 	} while ((size << sizebits) < PAGE_SIZE);
 
@@ -1145,6 +1196,7 @@ __getblk_slow(struct block_device *bdev, sector_t block,
  */
 void mark_buffer_dirty(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(!buffer_uptodate(bh));
 
 	trace_block_dirty_buffer(bh);
@@ -1180,6 +1232,7 @@ EXPORT_SYMBOL(mark_buffer_dirty);
 
 void mark_buffer_write_io_error(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	set_buffer_write_io_error(bh);
 	/* FIXME: do we need to set this in both places? */
 	if (bh->b_page && bh->b_page->mapping)
@@ -1198,6 +1251,7 @@ EXPORT_SYMBOL(mark_buffer_write_io_error);
  */
 void __brelse(struct buffer_head * buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atomic_read(&buf->b_count)) {
 		put_bh(buf);
 		return;
@@ -1212,6 +1266,7 @@ EXPORT_SYMBOL(__brelse);
  */
 void __bforget(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clear_buffer_dirty(bh);
 	if (bh->b_assoc_map) {
 		struct address_space *buffer_mapping = bh->b_page->mapping;
@@ -1227,6 +1282,7 @@ EXPORT_SYMBOL(__bforget);
 
 static struct buffer_head *__bread_slow(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lock_buffer(bh);
 	if (buffer_uptodate(bh)) {
 		unlock_buffer(bh);
@@ -1292,6 +1348,7 @@ static void bh_lru_install(struct buffer_head *bh)
 	int i;
 
 	check_irqs_on();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bh_lru_lock();
 
 	b = this_cpu_ptr(&bh_lrus);
@@ -1318,6 +1375,7 @@ lookup_bh_lru(struct block_device *bdev, sector_t block, unsigned size)
 	unsigned int i;
 
 	check_irqs_on();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bh_lru_lock();
 	for (i = 0; i < BH_LRU_SIZE; i++) {
 		struct buffer_head *bh = __this_cpu_read(bh_lrus.bhs[i]);
@@ -1349,6 +1407,7 @@ lookup_bh_lru(struct block_device *bdev, sector_t block, unsigned size)
 struct buffer_head *
 __find_get_block(struct block_device *bdev, sector_t block, unsigned size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct buffer_head *bh = lookup_bh_lru(bdev, block, size);
 
 	if (bh == NULL) {
@@ -1375,6 +1434,7 @@ struct buffer_head *
 __getblk_gfp(struct block_device *bdev, sector_t block,
 	     unsigned size, gfp_t gfp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct buffer_head *bh = __find_get_block(bdev, block, size);
 
 	might_sleep();
@@ -1389,6 +1449,7 @@ EXPORT_SYMBOL(__getblk_gfp);
  */
 void __breadahead(struct block_device *bdev, sector_t block, unsigned size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct buffer_head *bh = __getblk(bdev, block, size);
 	if (likely(bh)) {
 		ll_rw_block(REQ_OP_READ, REQ_RAHEAD, 1, &bh);
@@ -1413,6 +1474,7 @@ struct buffer_head *
 __bread_gfp(struct block_device *bdev, sector_t block,
 		   unsigned size, gfp_t gfp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct buffer_head *bh = __getblk_gfp(bdev, block, size, gfp);
 
 	if (likely(bh) && !buffer_uptodate(bh))
@@ -1428,6 +1490,7 @@ EXPORT_SYMBOL(__bread_gfp);
  */
 static void invalidate_bh_lru(void *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bh_lru *b = &get_cpu_var(bh_lrus);
 	int i;
 
@@ -1445,9 +1508,12 @@ static bool has_bh_in_lru(int cpu, void *dummy)
 	
 	for (i = 0; i < BH_LRU_SIZE; i++) {
 		if (b->bhs[i])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1462,6 +1528,7 @@ void set_bh_page(struct buffer_head *bh,
 {
 	bh->b_page = page;
 	BUG_ON(offset >= PAGE_SIZE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (PageHighMem(page))
 		/*
 		 * This catches illegal uses and preserves the offset:
@@ -1494,6 +1561,7 @@ static void discard_buffer(struct buffer_head * bh)
 				      (b_state & ~BUFFER_FLAGS_DISCARD));
 		if (b_state_old == b_state)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		b_state = b_state_old;
 	}
 	unlock_buffer(bh);
@@ -1548,6 +1616,7 @@ void block_invalidatepage(struct page *page, unsigned int offset,
 		 */
 		if (offset <= curr_off)
 			discard_buffer(bh);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		curr_off = next_off;
 		bh = next;
 	} while (bh != head);
@@ -1586,13 +1655,22 @@ void create_empty_buffers(struct page *page,
 
 	spin_lock(&page->mapping->private_lock);
 	if (PageUptodate(page) || PageDirty(page)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bh = head;
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (PageDirty(page))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				set_buffer_dirty(bh);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (PageUptodate(page))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				set_buffer_uptodate(bh);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bh = bh->b_this_page;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (bh != head);
 	}
 	attach_page_buffers(page, head);
@@ -1633,6 +1711,7 @@ void clean_bdev_aliases(struct block_device *bdev, sector_t block, sector_t len)
 
 	end = (block + len - 1) >> (PAGE_SHIFT - bd_inode->i_blkbits);
 	pagevec_init(&pvec, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (pagevec_lookup_range(&pvec, bd_mapping, &index, end)) {
 		count = pagevec_count(&pvec);
 		for (i = 0; i < count; i++) {
@@ -1762,6 +1841,7 @@ int __block_write_full_page(struct inode *inode, struct page *page,
 	 * handle any aliases from the underlying blockdev's mapping.
 	 */
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (block > last_block) {
 			/*
 			 * mapped buffers outside i_size will occur, because
@@ -1899,6 +1979,7 @@ void page_zero_new_buffers(struct page *page, unsigned from, unsigned to)
 	unsigned int block_start, block_end;
 	struct buffer_head *head, *bh;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!PageLocked(page));
 	if (!page_has_buffers(page))
 		return;
@@ -1997,6 +2078,7 @@ int __block_write_begin_int(struct page *page, loff_t pos, unsigned len,
 	unsigned blocksize, bbits;
 	struct buffer_head *bh, *head, *wait[2], **wait_bh=wait;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!PageLocked(page));
 	BUG_ON(from > PAGE_SIZE);
 	BUG_ON(to > PAGE_SIZE);
@@ -2073,6 +2155,7 @@ int __block_write_begin_int(struct page *page, loff_t pos, unsigned len,
 int __block_write_begin(struct page *page, loff_t pos, unsigned len,
 		get_block_t *get_block)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __block_write_begin_int(page, pos, len, get_block, NULL);
 }
 EXPORT_SYMBOL(__block_write_begin);
@@ -2085,6 +2168,7 @@ static int __block_commit_write(struct inode *inode, struct page *page,
 	unsigned blocksize;
 	struct buffer_head *bh, *head;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bh = head = page_buffers(page);
 	blocksize = bh->b_size;
 
@@ -2130,7 +2214,9 @@ int block_write_begin(struct address_space *mapping, loff_t pos, unsigned len,
 
 	page = grab_cache_page_write_begin(mapping, index, flags);
 	if (!page)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	status = __block_write_begin(page, pos, len, get_block);
 	if (unlikely(status)) {
@@ -2198,6 +2284,7 @@ int generic_write_end(struct file *file, struct address_space *mapping,
 	 * page writeout could otherwise come in and zero beyond i_size.
 	 */
 	if (pos+copied > inode->i_size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i_size_write(inode, pos+copied);
 		i_size_changed = 1;
 	}
@@ -2236,7 +2323,9 @@ int block_is_partially_uptodate(struct page *page, unsigned long from,
 	int ret = 1;
 
 	if (!page_has_buffers(page))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	head = page_buffers(page);
 	blocksize = head->b_size;
@@ -2303,12 +2392,17 @@ int block_read_full_page(struct page *page, get_block_t *get_block)
 				WARN_ON(bh->b_size != blocksize);
 				err = get_block(inode, iblock, bh, 0);
 				if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					SetPageError(page);
+}
 			}
 			if (!buffer_mapped(bh)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				zero_user(page, i * blocksize, blocksize);
 				if (!err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					set_buffer_uptodate(bh);
+}
 				continue;
 			}
 			/*
@@ -2322,7 +2416,9 @@ int block_read_full_page(struct page *page, get_block_t *get_block)
 	} while (i++, iblock++, (bh = bh->b_this_page) != head);
 
 	if (fully_mapped)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		SetPageMappedToDisk(page);
+}
 
 	if (!nr) {
 		/*
@@ -2330,7 +2426,10 @@ int block_read_full_page(struct page *page, get_block_t *get_block)
 		 * as well. But not if get_block() returned an error.
 		 */
 		if (!PageError(page))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			SetPageUptodate(page);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unlock_page(page);
 		return 0;
 	}
@@ -2350,10 +2449,13 @@ int block_read_full_page(struct page *page, get_block_t *get_block)
 	for (i = 0; i < nr; i++) {
 		bh = arr[i];
 		if (buffer_uptodate(bh))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			end_buffer_async_read(bh, 1);
+}
 		else
 			submit_bh(REQ_OP_READ, 0, bh);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(block_read_full_page);
@@ -2373,6 +2475,7 @@ int generic_cont_expand_simple(struct inode *inode, loff_t size)
 	if (err)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = pagecache_write_begin(NULL, mapping, size, 0,
 				    AOP_FLAG_CONT_EXPAND, &page, &fsdata);
 	if (err)
@@ -2401,6 +2504,7 @@ static int cont_expand_zero(struct file *file, struct address_space *mapping,
 	index = pos >> PAGE_SHIFT;
 	offset = pos & ~PAGE_MASK;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (index > (curidx = (curpos = *bytes)>>PAGE_SHIFT)) {
 		zerofrom = curpos & ~PAGE_MASK;
 		if (zerofrom & (blocksize-1)) {
@@ -2474,7 +2578,9 @@ int cont_write_begin(struct file *file, struct address_space *mapping,
 
 	err = cont_expand_zero(file, mapping, pos, bytes);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	zerofrom = *bytes & ~PAGE_MASK;
 	if (pos+len > *bytes && zerofrom & (blocksize-1)) {
@@ -2558,6 +2664,7 @@ EXPORT_SYMBOL(block_page_mkwrite);
  */
 static void end_buffer_read_nobh(struct buffer_head *bh, int uptodate)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__end_buffer_read_notouch(bh, uptodate);
 }
 
@@ -2570,6 +2677,7 @@ static void attach_nobh_buffers(struct page *page, struct buffer_head *head)
 {
 	struct buffer_head *bh;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!PageLocked(page));
 
 	spin_lock(&page->mapping->private_lock);
@@ -2615,7 +2723,9 @@ int nobh_write_begin(struct address_space *mapping,
 
 	page = grab_cache_page_write_begin(mapping, index, flags);
 	if (!page)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	*pagep = page;
 	*fsdata = NULL;
 
@@ -2738,6 +2848,7 @@ int nobh_write_end(struct file *file, struct address_space *mapping,
 	struct inode *inode = page->mapping->host;
 	struct buffer_head *head = fsdata;
 	struct buffer_head *bh;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(fsdata != NULL && page_has_buffers(page));
 
 	if (unlikely(copied < len) && head)
@@ -2836,7 +2947,9 @@ int nobh_truncate_page(struct address_space *mapping,
 
 	/* Block boundary? Nothing to do */
 	if (!length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	length = blocksize - length;
 	iblock = (sector_t)index << (PAGE_SHIFT - inode->i_blkbits);
@@ -2914,7 +3027,9 @@ int block_truncate_page(struct address_space *mapping,
 
 	/* Block boundary? Nothing to do */
 	if (!length)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	length = blocksize - length;
 	iblock = (sector_t)index << (PAGE_SHIFT - inode->i_blkbits);
@@ -2985,8 +3100,10 @@ int block_write_full_page(struct page *page, get_block_t *get_block,
 
 	/* Is the page fully inside i_size? */
 	if (page->index < end_index)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return __block_write_full_page(inode, page, get_block, wbc,
 					       end_buffer_async_write);
+}
 
 	/* Is the page fully outside i_size? (truncate in progress) */
 	offset = i_size & (PAGE_SIZE-1);
@@ -3032,7 +3149,9 @@ static void end_bio_bh_io_sync(struct bio *bio)
 	struct buffer_head *bh = bio->bi_private;
 
 	if (unlikely(bio_flagged(bio, BIO_QUIET)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_bit(BH_Quiet, &bh->b_state);
+}
 
 	bh->b_end_io(bh, !bio->bi_status);
 	bio_put(bio);
@@ -3060,13 +3179,18 @@ void guard_bio_eod(int op, struct bio *bio)
 	rcu_read_lock();
 	part = __disk_get_part(bio->bi_disk, bio->bi_partno);
 	if (part)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		maxsector = part_nr_sects_read(part);
+}
 	else
 		maxsector = get_capacity(bio->bi_disk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	if (!maxsector)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * If the *whole* IO is past the end of the device,
@@ -3074,11 +3198,15 @@ void guard_bio_eod(int op, struct bio *bio)
 	 * an EIO.
 	 */
 	if (unlikely(bio->bi_iter.bi_sector >= maxsector))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	maxsector -= bio->bi_iter.bi_sector;
 	if (likely((bio->bi_iter.bi_size >> 9) <= maxsector))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Uhhuh. We've got a bio that straddles the device size! */
 	truncated_bytes = bio->bi_iter.bi_size - (maxsector << 9);
@@ -3089,6 +3217,7 @@ void guard_bio_eod(int op, struct bio *bio)
 
 	/* ..and clear the end of the buffer for reads */
 	if (op == REQ_OP_READ) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		zero_user(bvec->bv_page, bvec->bv_offset + bvec->bv_len,
 				truncated_bytes);
 	}
@@ -3109,7 +3238,9 @@ static int submit_bh_wbc(int op, int op_flags, struct buffer_head *bh,
 	 * Only clear out a write error when rewriting
 	 */
 	if (test_set_buffer_req(bh) && (op == REQ_OP_WRITE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clear_buffer_write_io_error(bh);
+}
 
 	/*
 	 * from here on down, it's all bio -- do the initial mapping,
@@ -3118,6 +3249,7 @@ static int submit_bh_wbc(int op, int op_flags, struct buffer_head *bh,
 	bio = bio_alloc(GFP_NOIO, 1);
 
 	if (wbc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wbc_init_bio(wbc, bio);
 		wbc_account_io(wbc, bh->b_page, bh->b_size);
 	}
@@ -3136,9 +3268,13 @@ static int submit_bh_wbc(int op, int op_flags, struct buffer_head *bh,
 	guard_bio_eod(op, bio);
 
 	if (buffer_meta(bh))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		op_flags |= REQ_META;
+}
 	if (buffer_prio(bh))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		op_flags |= REQ_PRIO;
+}
 	bio_set_op_attrs(bio, op, op_flags);
 
 	submit_bio(bio);
@@ -3181,6 +3317,7 @@ void ll_rw_block(int op, int op_flags,  int nr, struct buffer_head *bhs[])
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nr; i++) {
 		struct buffer_head *bh = bhs[i];
 
@@ -3208,6 +3345,7 @@ EXPORT_SYMBOL(ll_rw_block);
 
 void write_dirty_buffer(struct buffer_head *bh, int op_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lock_buffer(bh);
 	if (!test_clear_buffer_dirty(bh)) {
 		unlock_buffer(bh);
@@ -3228,6 +3366,7 @@ int __sync_dirty_buffer(struct buffer_head *bh, int op_flags)
 {
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(atomic_read(&bh->b_count) < 1);
 	lock_buffer(bh);
 	if (test_clear_buffer_dirty(bh)) {
@@ -3246,6 +3385,7 @@ EXPORT_SYMBOL(__sync_dirty_buffer);
 
 int sync_dirty_buffer(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __sync_dirty_buffer(bh, REQ_SYNC);
 }
 EXPORT_SYMBOL(sync_dirty_buffer);
@@ -3293,7 +3433,10 @@ drop_buffers(struct page *page, struct buffer_head **buffers_to_free)
 		struct buffer_head *next = bh->b_this_page;
 
 		if (bh->b_assoc_map)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__remove_assoc_queue(bh);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bh = next;
 	} while (bh != head);
 	*buffers_to_free = head;
@@ -3311,13 +3454,17 @@ int try_to_free_buffers(struct page *page)
 
 	BUG_ON(!PageLocked(page));
 	if (PageWriteback(page))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (mapping == NULL) {		/* can this still happen? */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = drop_buffers(page, &buffers_to_free);
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&mapping->private_lock);
 	ret = drop_buffers(page, &buffers_to_free);
 
@@ -3337,6 +3484,7 @@ int try_to_free_buffers(struct page *page)
 	 */
 	if (ret)
 		cancel_dirty_page(page);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&mapping->private_lock);
 out:
 	if (buffers_to_free) {
@@ -3348,6 +3496,7 @@ int try_to_free_buffers(struct page *page)
 			bh = next;
 		} while (bh != buffers_to_free);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL(try_to_free_buffers);
@@ -3364,7 +3513,9 @@ SYSCALL_DEFINE2(bdflush, int, func, long, data)
 	static int msg_count;
 
 	if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	if (msg_count < 5) {
 		msg_count++;
@@ -3405,10 +3556,15 @@ static void recalc_bh_state(void)
 	int tot = 0;
 
 	if (__this_cpu_inc_return(bh_accounting.ratelimit) - 1 < 4096)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__this_cpu_write(bh_accounting.ratelimit, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_online_cpu(i)
 		tot += per_cpu(bh_accounting, i).nr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	buffer_heads_over_limit = (tot > max_buffer_heads);
 }
 
@@ -3440,6 +3596,7 @@ EXPORT_SYMBOL(free_buffer_head);
 static int buffer_exit_cpu_dead(unsigned int cpu)
 {
 	int i;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bh_lru *b = &per_cpu(bh_lrus, cpu);
 
 	for (i = 0; i < BH_LRU_SIZE; i++) {
@@ -3460,6 +3617,7 @@ static int buffer_exit_cpu_dead(unsigned int cpu)
  */
 int bh_uptodate_or_lock(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!buffer_uptodate(bh)) {
 		lock_buffer(bh);
 		if (!buffer_uptodate(bh))
@@ -3478,6 +3636,7 @@ EXPORT_SYMBOL(bh_uptodate_or_lock);
  */
 int bh_submit_read(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!buffer_locked(bh));
 
 	if (buffer_uptodate(bh)) {
@@ -3503,6 +3662,7 @@ EXPORT_SYMBOL(bh_submit_read);
 static loff_t
 page_seek_hole_data(struct page *page, loff_t lastoff, int whence)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	loff_t offset = page_offset(page);
 	struct buffer_head *bh, *head;
 	bool seek_data = whence == SEEK_DATA;
@@ -3551,7 +3711,9 @@ page_cache_seek_hole_data(struct inode *inode, loff_t offset, loff_t length,
 	struct pagevec pvec;
 
 	if (length <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	pagevec_init(&pvec, 0);
 
diff --git a/fs/cachefiles/main.c b/fs/cachefiles/main.c
index 711f13d..8e62cac 100644
--- a/fs/cachefiles/main.c
+++ b/fs/cachefiles/main.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Network filesystem caching backend to use cache files on a premounted
  * filesystem
  *
diff --git a/fs/char_dev.c b/fs/char_dev.c
index a65e4a5..62c2ac9 100644
--- a/fs/char_dev.c
+++ b/fs/char_dev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/char_dev.c
@@ -489,7 +491,9 @@ int cdev_add(struct cdev *p, dev_t dev, unsigned count)
 	error = kobj_map(cdev_map, dev, count, NULL,
 			 exact_match, exact_lock, p);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	kobject_get(p->kobj.parent);
 
@@ -543,13 +547,18 @@ int cdev_device_add(struct cdev *cdev, struct device *dev)
 
 		rc = cdev_add(cdev, dev->devt, 1);
 		if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return rc;
+}
 	}
 
 	rc = device_add(dev);
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cdev_del(cdev);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 }
 
@@ -570,6 +579,7 @@ int cdev_device_add(struct cdev *cdev, struct device *dev)
  */
 void cdev_device_del(struct cdev *cdev, struct device *dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	device_del(dev);
 	if (dev->devt)
 		cdev_del(cdev);
@@ -577,6 +587,7 @@ void cdev_device_del(struct cdev *cdev, struct device *dev)
 
 static void cdev_unmap(dev_t dev, unsigned count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kobj_unmap(cdev_map, dev, count);
 }
 
@@ -593,6 +604,7 @@ static void cdev_unmap(dev_t dev, unsigned count)
  */
 void cdev_del(struct cdev *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cdev_unmap(p->dev, p->count);
 	kobject_put(&p->kobj);
 }
@@ -600,6 +612,7 @@ void cdev_del(struct cdev *p)
 
 static void cdev_default_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cdev *p = container_of(kobj, struct cdev, kobj);
 	struct kobject *parent = kobj->parent;
 
@@ -609,6 +622,7 @@ static void cdev_default_release(struct kobject *kobj)
 
 static void cdev_dynamic_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cdev *p = container_of(kobj, struct cdev, kobj);
 	struct kobject *parent = kobj->parent;
 
@@ -650,6 +664,7 @@ struct cdev *cdev_alloc(void)
  */
 void cdev_init(struct cdev *cdev, const struct file_operations *fops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(cdev, 0, sizeof *cdev);
 	INIT_LIST_HEAD(&cdev->list);
 	kobject_init(&cdev->kobj, &ktype_cdev_default);
@@ -658,6 +673,7 @@ void cdev_init(struct cdev *cdev, const struct file_operations *fops)
 
 static struct kobject *base_probe(dev_t dev, int *part, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (request_module("char-major-%d-%d", MAJOR(dev), MINOR(dev)) > 0)
 		/* Make old-style 2.4 aliases work */
 		request_module("char-major-%d", MAJOR(dev));
diff --git a/fs/cifs/cache.c b/fs/cifs/cache.c
index 2c14020..41adb4c 100644
--- a/fs/cifs/cache.c
+++ b/fs/cifs/cache.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *   fs/cifs/cache.c - CIFS filesystem cache index structure definitions
  *
diff --git a/fs/cifs/cifs_debug.c b/fs/cifs/cifs_debug.c
index cbb9534..9118c68 100644
--- a/fs/cifs/cifs_debug.c
+++ b/fs/cifs/cifs_debug.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *   fs/cifs_debug.c
  *
diff --git a/fs/cifs/cifsfs.c b/fs/cifs/cifsfs.c
index 8c8b75d..c5876c7 100644
--- a/fs/cifs/cifsfs.c
+++ b/fs/cifs/cifsfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *   fs/cifs/cifsfs.c
  *
diff --git a/fs/compat_ioctl.c b/fs/compat_ioctl.c
index bd5d91e..f5bd383 100644
--- a/fs/compat_ioctl.c
+++ b/fs/compat_ioctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * ioctl32.c: Conversion between 32bit and 64bit native ioctls.
@@ -132,7 +134,9 @@ static int do_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 
 	err = security_file_ioctl(file, cmd, arg);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return vfs_ioctl(file, cmd, arg);
 }
@@ -144,7 +148,9 @@ static int w_long(struct file *file,
 	unsigned long __user *valp = compat_alloc_user_space(sizeof(*valp));
 
 	if (valp == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	err = do_ioctl(file, cmd, (unsigned long)valp);
 	if (err)
 		return err;
@@ -203,7 +209,9 @@ static int do_video_stillpicture(struct file *file,
 	err  = get_user(fp, &up->iFrame);
 	err |= get_user(size, &up->size);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	up_native =
 		compat_alloc_user_space(sizeof(struct video_still_picture));
@@ -233,7 +241,9 @@ static int do_video_set_spu_palette(struct file *file,
 	err  = get_user(palp, &up->palette);
 	err |= get_user(length, &up->length);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	up_native = compat_alloc_user_space(sizeof(struct video_spu_palette));
 	err  = put_user(compat_ptr(palp), &up_native->palette);
@@ -411,7 +421,9 @@ static int sg_grt_trans(struct file *file,
 	r = compat_alloc_user_space(sizeof(sg_req_info_t)*SG_MAX_QUEUE);
 	err = do_ioctl(file, cmd, (unsigned long)r);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	for (i = 0; i < SG_MAX_QUEUE; i++) {
 		void __user *ptr;
 		int d;
@@ -438,6 +450,7 @@ struct sock_fprog32 {
 static int ppp_sock_fprog_ioctl_trans(struct file *file,
 		unsigned int cmd, struct sock_fprog32 __user *u_fprog32)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct sock_fprog __user *u_fprog64 = compat_alloc_user_space(sizeof(struct sock_fprog));
 	void __user *fptr64;
 	u32 fptr32;
@@ -483,6 +496,7 @@ static int ppp_gidle(struct file *file, unsigned int cmd,
 
 	idle = compat_alloc_user_space(sizeof(*idle));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = do_ioctl(file, PPPIOCGIDLE, (unsigned long) idle);
 
 	if (!err) {
@@ -505,7 +519,9 @@ static int ppp_scompress(struct file *file, unsigned int cmd,
 	odata = compat_alloc_user_space(sizeof(*odata));
 
 	if (get_user(data, &odata32->ptr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	datap = compat_ptr(data);
 	if (put_user(datap, &odata->ptr))
@@ -642,7 +658,9 @@ static int serial_struct_ioctl(struct file *file,
 	unsigned char *iomem_base;
 
 	if (ss == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
         if (cmd == TIOCSSERIAL) {
 		if (copy_in_user(ss, ss32, offsetof(SS32, iomem_base)) ||
 		    get_user(udata, &ss32->iomem_base))
@@ -710,7 +728,9 @@ static int do_i2c_rdwr_ioctl(struct file *file,
 	int				i;
 
 	if (get_user(nmsgs, &udata->nmsgs))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	if (nmsgs > I2C_RDWR_IOCTL_MAX_MSGS)
 		return -EINVAL;
 
@@ -748,7 +768,9 @@ static int do_i2c_smbus_ioctl(struct file *file,
 
 	tdata = compat_alloc_user_space(sizeof(*tdata));
 	if (tdata == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	memset(&v, 0, sizeof(v));
 	if (copy_from_user(&v.data32, udata, sizeof(v.data32)))
@@ -769,6 +791,7 @@ static int do_i2c_smbus_ioctl(struct file *file,
 static int rtc_ioctl(struct file *file,
 		unsigned cmd, void __user *argp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long __user *valp = compat_alloc_user_space(sizeof(*valp));
 	int ret;
 
@@ -812,6 +835,7 @@ struct space_resv_32 {
 static int compat_ioctl_preallocate(struct file *file,
 			struct space_resv_32    __user *p32)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct space_resv	__user *p = compat_alloc_user_space(sizeof(*p));
 
 	if (copy_in_user(&p->l_type,	&p32->l_type,	sizeof(s16)) ||
@@ -1441,6 +1465,7 @@ IGNORE_IOCTL(FBIOGCURSOR32)
 static long do_ioctl_trans(unsigned int cmd,
 		 unsigned long arg, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	void __user *argp = compat_ptr(arg);
 
 	switch (cmd) {
@@ -1521,6 +1546,7 @@ static int compat_ioctl_check_table(unsigned int xcmd)
 	int i;
 	const int max = ARRAY_SIZE(ioctl_pointer) - 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(max >= (1 << 16));
 
 	/* guess initial offset into table, assuming a
@@ -1626,9 +1652,13 @@ static int __init init_sys32_ioctl_cmp(const void *p, const void *q)
 	a = *(unsigned int *)p;
 	b = *(unsigned int *)q;
 	if (a > b)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	if (a < b)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 	return 0;
 }
 
diff --git a/fs/coredump.c b/fs/coredump.c
index 52c63d6..f237f70 100644
--- a/fs/coredump.c
+++ b/fs/coredump.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/slab.h>
 #include <linux/file.h>
@@ -68,10 +70,14 @@ static int expand_corename(struct core_name *cn, int size)
 	char *corename = krealloc(cn->corename, size, GFP_KERNEL);
 
 	if (!corename)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (size > core_name_size) /* racy but harmless */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		core_name_size = size;
+}
 
 	cn->size = ksize(corename);
 	cn->corename = corename;
@@ -96,9 +102,11 @@ static __printf(2, 0) int cn_vprintf(struct core_name *cn, const char *fmt,
 		return 0;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!expand_corename(cn, cn->size + need - free + 1))
 		goto again;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOMEM;
 }
 
@@ -160,7 +168,9 @@ static int cn_print_exe_file(struct core_name *cn)
 
 	exe_file = get_mm_exe_file(current->mm);
 	if (!exe_file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return cn_esc_printf(cn, "%s (path unknown)", current->comm);
+}
 
 	pathbuf = kmalloc(PATH_MAX, GFP_KERNEL);
 	if (!pathbuf) {
@@ -198,11 +208,15 @@ static int format_corename(struct core_name *cn, struct coredump_params *cprm)
 	cn->used = 0;
 	cn->corename = NULL;
 	if (expand_corename(cn, core_name_size))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	cn->corename[0] = '\0';
 
 	if (ispipe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		++pat_ptr;
+}
 
 	/* Repeat as long as we have more pattern to process and more output
 	   space */
@@ -210,6 +224,7 @@ static int format_corename(struct core_name *cn, struct coredump_params *cprm)
 		if (*pat_ptr != '%') {
 			err = cn_printf(cn, "%c", *pat_ptr++);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			switch (*++pat_ptr) {
 			/* single % at the end, drop that */
 			case 0:
@@ -288,11 +303,14 @@ static int format_corename(struct core_name *cn, struct coredump_params *cprm)
 			default:
 				break;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			++pat_ptr;
 		}
 
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	}
 
 out:
@@ -302,10 +320,14 @@ static int format_corename(struct core_name *cn, struct coredump_params *cprm)
 	 * and core_uses_pid is set, then .%pid will be appended to
 	 * the filename. Do not do this for piped commands. */
 	if (!ispipe && !pid_in_pattern && core_uses_pid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = cn_printf(cn, ".%d", task_tgid_vnr(current));
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ispipe;
 }
 
@@ -322,6 +344,7 @@ static int zap_process(struct task_struct *start, int exit_code, int flags)
 	for_each_thread(start, t) {
 		task_clear_jobctl_pending(t, JOBCTL_PENDING_MASK);
 		if (t != current && t->mm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sigaddset(&t->pending.signal, SIGKILL);
 			signal_wake_up(t, 1);
 			nr++;
@@ -347,7 +370,9 @@ static int zap_threads(struct task_struct *tsk, struct mm_struct *mm,
 	}
 	spin_unlock_irq(&tsk->sighand->siglock);
 	if (unlikely(nr < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return nr;
+}
 
 	tsk->flags |= PF_DUMPCORE;
 	if (atomic_read(&mm->mm_users) == nr + 1)
@@ -383,16 +408,23 @@ static int zap_threads(struct task_struct *tsk, struct mm_struct *mm,
 	 *	next_thread().
 	 */
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_process(g) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (g == tsk->group_leader)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (g->flags & PF_KTHREAD)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_thread(g, p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (unlikely(!p->mm))
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (unlikely(p->mm == mm)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				lock_task_sighand(p, &flags);
 				nr += zap_process(p, exit_code,
 							SIGNAL_GROUP_EXIT);
@@ -401,6 +433,7 @@ static int zap_threads(struct task_struct *tsk, struct mm_struct *mm,
 			break;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 done:
 	atomic_set(&core_state->nr_threads, nr);
@@ -409,6 +442,7 @@ static int zap_threads(struct task_struct *tsk, struct mm_struct *mm,
 
 static int coredump_wait(int exit_code, struct core_state *core_state)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct task_struct *tsk = current;
 	struct mm_struct *mm = tsk->mm;
 	int core_waiters = -EBUSY;
@@ -418,7 +452,9 @@ static int coredump_wait(int exit_code, struct core_state *core_state)
 	core_state->dumper.next = NULL;
 
 	if (down_write_killable(&mm->mmap_sem))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINTR;
+}
 
 	if (!mm->core_state)
 		core_waiters = zap_threads(tsk, mm, core_state, exit_code);
@@ -436,12 +472,15 @@ static int coredump_wait(int exit_code, struct core_state *core_state)
 		 * fpu etc) gets copied to the memory.
 		 */
 		ptr = core_state->dumper.next;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (ptr != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			wait_task_inactive(ptr->task, 0);
 			ptr = ptr->next;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return core_waiters;
 }
 
@@ -452,13 +491,16 @@ static void coredump_finish(struct mm_struct *mm, bool core_dumped)
 
 	spin_lock_irq(&current->sighand->siglock);
 	if (core_dumped && !__fatal_signal_pending(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		current->signal->group_exit_code |= 0x80;
+}
 	current->signal->group_exit_task = NULL;
 	current->signal->flags = SIGNAL_GROUP_EXIT;
 	spin_unlock_irq(&current->sighand->siglock);
 
 	next = mm->core_state->dumper.next;
 	while ((curr = next) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next = curr->next;
 		task = curr->task;
 		/*
@@ -524,7 +566,9 @@ static int umh_pipe_setup(struct subprocess_info *info, struct cred *new)
 	struct coredump_params *cp = (struct coredump_params *)info->data;
 	int err = create_pipe_files(files, 0);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	cp->file = files[1];
 
@@ -600,11 +644,13 @@ void do_coredump(const siginfo_t *siginfo)
 		struct subprocess_info *sub_info;
 
 		if (ispipe < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_WARNING "format_corename failed\n");
 			printk(KERN_WARNING "Aborting core\n");
 			goto fail_unlock;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cprm.limit == 1) {
 			/* See umh_pipe_setup() which sets RLIMIT_CORE = 1.
 			 *
@@ -627,9 +673,11 @@ void do_coredump(const siginfo_t *siginfo)
 			printk(KERN_WARNING "Aborting core\n");
 			goto fail_unlock;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cprm.limit = RLIM_INFINITY;
 
 		dump_count = atomic_inc_return(&core_dump_count);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (core_pipe_limit && (core_pipe_limit < dump_count)) {
 			printk(KERN_WARNING "Pid %d(%s) over core_pipe_limit\n",
 			       task_tgid_vnr(current), current->comm);
@@ -637,23 +685,30 @@ void do_coredump(const siginfo_t *siginfo)
 			goto fail_dropcount;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		helper_argv = argv_split(GFP_KERNEL, cn.corename, NULL);
 		if (!helper_argv) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_WARNING "%s failed to allocate memory\n",
 			       __func__);
 			goto fail_dropcount;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENOMEM;
 		sub_info = call_usermodehelper_setup(helper_argv[0],
 						helper_argv, NULL, GFP_KERNEL,
 						umh_pipe_setup, NULL, &cprm);
 		if (sub_info)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = call_usermodehelper_exec(sub_info,
 							  UMH_WAIT_EXEC);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		argv_free(helper_argv);
 		if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_INFO "Core dump to |%s pipe failed\n",
 			       cn.corename);
 			goto close_fail;
@@ -666,6 +721,7 @@ void do_coredump(const siginfo_t *siginfo)
 		if (cprm.limit < binfmt->min_coredump)
 			goto fail_unlock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (need_suid_safe && cn.corename[0] != '/') {
 			printk(KERN_WARNING "Pid %d(%s) can only dump core "\
 				"to fully qualified path!\n",
@@ -719,14 +775,18 @@ void do_coredump(const siginfo_t *siginfo)
 				cn.corename, open_flags, 0600);
 			path_put(&root);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cprm.file = filp_open(cn.corename, open_flags, 0600);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (IS_ERR(cprm.file))
 			goto fail_unlock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode = file_inode(cprm.file);
 		if (inode->i_nlink > 1)
 			goto close_fail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (d_unhashed(cprm.file->f_path.dentry))
 			goto close_fail;
 		/*
@@ -743,33 +803,49 @@ void do_coredump(const siginfo_t *siginfo)
 		 */
 		if (!uid_eq(inode->i_uid, current_fsuid()))
 			goto close_fail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((inode->i_mode & 0677) != 0600)
 			goto close_fail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(cprm.file->f_mode & FMODE_CAN_WRITE))
 			goto close_fail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (do_truncate(cprm.file->f_path.dentry, 0, 0, cprm.file))
 			goto close_fail;
 	}
 
 	/* get us an unshared descriptor table; almost always a no-op */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = unshare_files(&displaced);
 	if (retval)
 		goto close_fail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (displaced)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_files_struct(displaced);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dump_interrupted()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		file_start_write(cprm.file);
 		core_dumped = binfmt->core_dump(&cprm);
 		file_end_write(cprm.file);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ispipe && core_pipe_limit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wait_for_dump_helpers(cprm.file);
+}
 close_fail:
 	if (cprm.file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		filp_close(cprm.file, NULL);
+}
 fail_dropcount:
 	if (ispipe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_dec(&core_dump_count);
+}
 fail_unlock:
 	kfree(cn.corename);
 	coredump_finish(mm, core_dumped);
@@ -791,7 +867,9 @@ int dump_emit(struct coredump_params *cprm, const void *addr, int nr)
 	loff_t pos = file->f_pos;
 	ssize_t n;
 	if (cprm->written + nr > cprm->limit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	while (nr) {
 		if (dump_interrupted())
 			return 0;
@@ -811,6 +889,7 @@ int dump_skip(struct coredump_params *cprm, size_t nr)
 {
 	static char zeroes[PAGE_SIZE];
 	struct file *file = cprm->file;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (file->f_op->llseek && file->f_op->llseek != no_llseek) {
 		if (dump_interrupted() ||
 		    file->f_op->llseek(file, nr, SEEK_CUR) < 0)
@@ -832,7 +911,9 @@ int dump_align(struct coredump_params *cprm, int align)
 {
 	unsigned mod = cprm->pos & (align - 1);
 	if (align & (align - 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return mod ? dump_skip(cprm, align - mod) : 1;
 }
 EXPORT_SYMBOL(dump_align);
@@ -847,6 +928,7 @@ void dump_truncate(struct coredump_params *cprm)
 	struct file *file = cprm->file;
 	loff_t offset;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (file->f_op->llseek && file->f_op->llseek != no_llseek) {
 		offset = file->f_op->llseek(file, 0, SEEK_CUR);
 		if (i_size_read(file->f_mapping->host) < offset)
diff --git a/fs/crypto/crypto.c b/fs/crypto/crypto.c
index d262a93..4fc1a78 100644
--- a/fs/crypto/crypto.c
+++ b/fs/crypto/crypto.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * This contains encryption functions for per-file encryption.
  *
diff --git a/fs/dax.c b/fs/dax.c
index 191306c..9f64ce4 100644
--- a/fs/dax.c
+++ b/fs/dax.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/dax.c - Direct Access filesystem code
  * Copyright (c) 2013-2014 Intel Corporation
diff --git a/fs/dcache.c b/fs/dcache.c
index b8d999a..4a9be7b 100644
--- a/fs/dcache.c
+++ b/fs/dcache.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/dcache.c
  *
@@ -151,6 +153,7 @@ static long get_nr_dentry(void)
 {
 	int i;
 	long sum = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(i)
 		sum += per_cpu(nr_dentry, i);
 	return sum < 0 ? 0 : sum;
@@ -160,6 +163,7 @@ static long get_nr_dentry_unused(void)
 {
 	int i;
 	long sum = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(i)
 		sum += per_cpu(nr_dentry_unused, i);
 	return sum < 0 ? 0 : sum;
@@ -168,6 +172,7 @@ static long get_nr_dentry_unused(void)
 int proc_nr_dentry(struct ctl_table *table, int write, void __user *buffer,
 		   size_t *lenp, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dentry_stat.nr_dentry = get_nr_dentry();
 	dentry_stat.nr_unused = get_nr_dentry_unused();
 	return proc_doulongvec_minmax(table, write, buffer, lenp, ppos);
@@ -200,12 +205,16 @@ static inline int dentry_string_cmp(const unsigned char *cs, const unsigned char
 		if (tcount < sizeof(unsigned long))
 			break;
 		if (unlikely(a != b))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
+}
 		cs += sizeof(unsigned long);
 		ct += sizeof(unsigned long);
 		tcount -= sizeof(unsigned long);
 		if (!tcount)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	}
 	mask = bytemask_from_count(tcount);
 	return unlikely(!!((a ^ b) & mask));
@@ -284,8 +293,10 @@ static inline int dname_external(const struct dentry *dentry)
 
 void take_dentry_name_snapshot(struct name_snapshot *name, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&dentry->d_lock);
 	if (unlikely(dname_external(dentry))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct external_name *p = external_name(dentry);
 		atomic_inc(&p->u.count);
 		spin_unlock(&dentry->d_lock);
@@ -302,6 +313,7 @@ void release_dentry_name_snapshot(struct name_snapshot *name)
 {
 	if (unlikely(name->name != name->inline_name)) {
 		struct external_name *p;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = container_of(name->name, struct external_name, name[0]);
 		if (unlikely(atomic_dec_and_test(&p->u.count)))
 			kfree_rcu(p, u.head);
@@ -316,6 +328,7 @@ static inline void __d_set_inode_and_type(struct dentry *dentry,
 	unsigned flags;
 
 	dentry->d_inode = inode;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flags = READ_ONCE(dentry->d_flags);
 	flags &= ~(DCACHE_ENTRY_TYPE | DCACHE_FALLTHRU);
 	flags |= type_flags;
@@ -324,6 +337,7 @@ static inline void __d_set_inode_and_type(struct dentry *dentry,
 
 static inline void __d_clear_type_and_inode(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned flags = READ_ONCE(dentry->d_flags);
 
 	flags &= ~(DCACHE_ENTRY_TYPE | DCACHE_FALLTHRU);
@@ -335,6 +349,7 @@ static void dentry_free(struct dentry *dentry)
 {
 	WARN_ON(!hlist_unhashed(&dentry->d_u.d_alias));
 	if (unlikely(dname_external(dentry))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct external_name *p = external_name(dentry);
 		if (likely(atomic_dec_and_test(&p->u.count))) {
 			call_rcu(&dentry->d_u.d_rcu, __d_free_external);
@@ -360,17 +375,24 @@ static void dentry_unlink_inode(struct dentry * dentry)
 	bool hashed = !d_unhashed(dentry);
 
 	if (hashed)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		raw_write_seqcount_begin(&dentry->d_seq);
+}
 	__d_clear_type_and_inode(dentry);
 	hlist_del_init(&dentry->d_u.d_alias);
 	if (hashed)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		raw_write_seqcount_end(&dentry->d_seq);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&dentry->d_lock);
 	spin_unlock(&inode->i_lock);
 	if (!inode->i_nlink)
 		fsnotify_inoderemove(inode);
 	if (dentry->d_op && dentry->d_op->d_iput)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dentry->d_op->d_iput(dentry, inode);
+}
 	else
 		iput(inode);
 }
@@ -430,6 +452,7 @@ static void d_shrink_add(struct dentry *dentry, struct list_head *list)
  */
 static void d_lru_isolate(struct list_lru_one *lru, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	D_FLAG_VERIFY(dentry, DCACHE_LRU_LIST);
 	dentry->d_flags &= ~DCACHE_LRU_LIST;
 	this_cpu_dec(nr_dentry_unused);
@@ -439,6 +462,7 @@ static void d_lru_isolate(struct list_lru_one *lru, struct dentry *dentry)
 static void d_lru_shrink_move(struct list_lru_one *lru, struct dentry *dentry,
 			      struct list_head *list)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	D_FLAG_VERIFY(dentry, DCACHE_LRU_LIST);
 	dentry->d_flags |= DCACHE_SHRINK_LIST;
 	list_lru_isolate_move(lru, &dentry->d_lru, list);
@@ -480,7 +504,9 @@ void __d_drop(struct dentry *dentry)
 		 * d_obtain_alias, which are always IS_ROOT:
 		 */
 		if (unlikely(IS_ROOT(dentry)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			b = &dentry->d_sb->s_anon;
+}
 		else
 			b = d_hash(dentry->d_name.hash);
 
@@ -496,6 +522,7 @@ EXPORT_SYMBOL(__d_drop);
 
 void d_drop(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&dentry->d_lock);
 	__d_drop(dentry);
 	spin_unlock(&dentry->d_lock);
@@ -511,7 +538,9 @@ static inline void dentry_unlist(struct dentry *dentry, struct dentry *parent)
 	 */
 	dentry->d_flags |= DCACHE_DENTRY_KILLED;
 	if (unlikely(list_empty(&dentry->d_child)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	__list_del_entry(&dentry->d_child);
 	/*
 	 * Cursors can move around the list of children.  While we'd been
@@ -533,6 +562,7 @@ static inline void dentry_unlist(struct dentry *dentry, struct dentry *parent)
 	 * cursors.
 	 */
 	while (dentry->d_child.next != &parent->d_subdirs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next = list_entry(dentry->d_child.next, struct dentry, d_child);
 		if (likely(!(next->d_flags & DCACHE_DENTRY_CURSOR)))
 			break;
@@ -545,7 +575,9 @@ static void __dentry_kill(struct dentry *dentry)
 	struct dentry *parent = NULL;
 	bool can_free = true;
 	if (!IS_ROOT(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = dentry->d_parent;
+}
 
 	/*
 	 * The dentry is now unrecoverably dead to the world.
@@ -567,7 +599,9 @@ static void __dentry_kill(struct dentry *dentry)
 	__d_drop(dentry);
 	dentry_unlist(dentry, parent);
 	if (parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&parent->d_lock);
+}
 	if (dentry->d_inode)
 		dentry_unlink_inode(dentry);
 	else
@@ -576,11 +610,14 @@ static void __dentry_kill(struct dentry *dentry)
 	if (dentry->d_op && dentry->d_op->d_release)
 		dentry->d_op->d_release(dentry);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&dentry->d_lock);
 	if (dentry->d_flags & DCACHE_SHRINK_LIST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dentry->d_flags |= DCACHE_MAY_FREE;
 		can_free = false;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&dentry->d_lock);
 	if (likely(can_free))
 		dentry_free(dentry);
@@ -602,10 +639,14 @@ static struct dentry *dentry_kill(struct dentry *dentry)
 		goto failed;
 
 	if (!IS_ROOT(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = dentry->d_parent;
 		if (unlikely(!spin_trylock(&parent->d_lock))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&inode->i_lock);
+}
 			goto failed;
 		}
 	}
@@ -622,11 +663,18 @@ static inline struct dentry *lock_parent(struct dentry *dentry)
 {
 	struct dentry *parent = dentry->d_parent;
 	if (IS_ROOT(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	if (unlikely(dentry->d_lockref.count < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	if (likely(spin_trylock(&parent->d_lock)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return parent;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	spin_unlock(&dentry->d_lock);
 again:
@@ -641,14 +689,19 @@ static inline struct dentry *lock_parent(struct dentry *dentry)
 	 * for checking if it's still our child.
 	 */
 	if (unlikely(parent != dentry->d_parent)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&parent->d_lock);
 		goto again;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	if (parent != dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_nested(&dentry->d_lock, DENTRY_D_LOCK_NESTED);
+}
 	else
 		parent = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return parent;
 }
 
@@ -684,12 +737,15 @@ static inline bool fast_dput(struct dentry *dentry)
 	 * get the lock, and then check the count again.
 	 */
 	if (unlikely(ret < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&dentry->d_lock);
 		if (dentry->d_lockref.count > 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dentry->d_lockref.count--;
 			spin_unlock(&dentry->d_lock);
 			return 1;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 
@@ -697,7 +753,9 @@ static inline bool fast_dput(struct dentry *dentry)
 	 * If we weren't the last ref, we're done.
 	 */
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/*
 	 * Careful, careful. The reference count went down
@@ -726,7 +784,9 @@ static inline bool fast_dput(struct dentry *dentry)
 
 	/* Nothing to do? Dropping the reference was all we needed? */
 	if (d_flags == (DCACHE_REFERENCED | DCACHE_LRU_LIST) && !d_unhashed(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/*
 	 * Not the fast normal case? Get the lock. We've already decremented
@@ -742,6 +802,7 @@ static inline bool fast_dput(struct dentry *dentry)
 	 * don't need to do anything else.
 	 */
 	if (dentry->d_lockref.count) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&dentry->d_lock);
 		return 1;
 	}
@@ -785,13 +846,17 @@ static inline bool fast_dput(struct dentry *dentry)
 void dput(struct dentry *dentry)
 {
 	if (unlikely(!dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 repeat:
 	might_sleep();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	if (likely(fast_dput(dentry))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		return;
 	}
@@ -855,7 +920,10 @@ struct dentry *dget_parent(struct dentry *dentry)
 	rcu_read_unlock();
 	if (likely(gotref)) {
 		if (likely(ret == ACCESS_ONCE(dentry->d_parent)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dput(ret);
 	}
 
@@ -868,12 +936,16 @@ struct dentry *dget_parent(struct dentry *dentry)
 	ret = dentry->d_parent;
 	spin_lock(&ret->d_lock);
 	if (unlikely(ret != dentry->d_parent)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&ret->d_lock);
 		rcu_read_unlock();
 		goto repeat;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!ret->d_lockref.count);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret->d_lockref.count++;
 	spin_unlock(&ret->d_lock);
 	return ret;
@@ -901,30 +973,40 @@ static struct dentry *__d_find_alias(struct inode *inode)
 again:
 	discon_alias = NULL;
 	hlist_for_each_entry(alias, &inode->i_dentry, d_u.d_alias) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&alias->d_lock);
  		if (S_ISDIR(inode->i_mode) || !d_unhashed(alias)) {
 			if (IS_ROOT(alias) &&
 			    (alias->d_flags & DCACHE_DISCONNECTED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				discon_alias = alias;
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__dget_dlock(alias);
 				spin_unlock(&alias->d_lock);
 				return alias;
 			}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&alias->d_lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (discon_alias) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alias = discon_alias;
 		spin_lock(&alias->d_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (S_ISDIR(inode->i_mode) || !d_unhashed(alias)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__dget_dlock(alias);
 			spin_unlock(&alias->d_lock);
 			return alias;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&alias->d_lock);
 		goto again;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -933,6 +1015,7 @@ struct dentry *d_find_alias(struct inode *inode)
 	struct dentry *de = NULL;
 
 	if (!hlist_empty(&inode->i_dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 		de = __d_find_alias(inode);
 		spin_unlock(&inode->i_lock);
@@ -951,6 +1034,7 @@ void d_prune_aliases(struct inode *inode)
 restart:
 	spin_lock(&inode->i_lock);
 	hlist_for_each_entry(dentry, &inode->i_dentry, d_u.d_alias) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&dentry->d_lock);
 		if (!dentry->d_lockref.count) {
 			struct dentry *parent = lock_parent(dentry);
@@ -959,11 +1043,16 @@ void d_prune_aliases(struct inode *inode)
 				dput(parent);
 				goto restart;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&parent->d_lock);
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&dentry->d_lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&inode->i_lock);
 }
 EXPORT_SYMBOL(d_prune_aliases);
@@ -990,9 +1079,12 @@ static void shrink_dentry_list(struct list_head *list)
 		 * the LRU because of laziness during lookup. Do not free it.
 		 */
 		if (dentry->d_lockref.count > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&dentry->d_lock);
 			if (parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&parent->d_lock);
+}
 			continue;
 		}
 
@@ -1001,18 +1093,26 @@ static void shrink_dentry_list(struct list_head *list)
 			bool can_free = dentry->d_flags & DCACHE_MAY_FREE;
 			spin_unlock(&dentry->d_lock);
 			if (parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&parent->d_lock);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (can_free)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dentry_free(dentry);
+}
 			continue;
 		}
 
 		inode = dentry->d_inode;
 		if (inode && unlikely(!spin_trylock(&inode->i_lock))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			d_shrink_add(dentry, list);
 			spin_unlock(&dentry->d_lock);
 			if (parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&parent->d_lock);
+}
 			continue;
 		}
 
@@ -1028,17 +1128,24 @@ static void shrink_dentry_list(struct list_head *list)
 		while (dentry && !lockref_put_or_lock(&dentry->d_lockref)) {
 			parent = lock_parent(dentry);
 			if (dentry->d_lockref.count != 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dentry->d_lockref.count--;
 				spin_unlock(&dentry->d_lock);
 				if (parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					spin_unlock(&parent->d_lock);
+}
 				break;
 			}
 			inode = dentry->d_inode;	/* can't be NULL */
 			if (unlikely(!spin_trylock(&inode->i_lock))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&dentry->d_lock);
 				if (parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					spin_unlock(&parent->d_lock);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cpu_relax();
 				continue;
 			}
@@ -1052,6 +1159,7 @@ static enum lru_status dentry_lru_isolate(struct list_head *item,
 		struct list_lru_one *lru, spinlock_t *lru_lock, void *arg)
 {
 	struct list_head *freeable = arg;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dentry	*dentry = container_of(item, struct dentry, d_lru);
 
 
@@ -1133,6 +1241,7 @@ static enum lru_status dentry_lru_isolate_shrink(struct list_head *item,
 		struct list_lru_one *lru, spinlock_t *lru_lock, void *arg)
 {
 	struct list_head *freeable = arg;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dentry	*dentry = container_of(item, struct dentry, d_lru);
 
 	/*
@@ -1252,12 +1361,17 @@ static void d_walk(struct dentry *parent, void *data,
 		}
 
 		if (!list_empty(&dentry->d_subdirs)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&this_parent->d_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_release(&dentry->d_lock.dep_map, 1, _RET_IP_);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			this_parent = dentry;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_acquire(&this_parent->d_lock.dep_map, 0, 1, _RET_IP_);
 			goto repeat;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&dentry->d_lock);
 	}
 	/*
@@ -1282,11 +1396,13 @@ static void d_walk(struct dentry *parent, void *data,
 				goto ascend;
 			child = list_entry(next, struct dentry, d_child);
 		} while (unlikely(child->d_flags & DCACHE_DENTRY_KILLED));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		goto resume;
 	}
 	if (need_seqretry(&rename_lock, seq))
 		goto rename_retry;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	if (finish)
 		finish(data);
@@ -1299,9 +1415,14 @@ static void d_walk(struct dentry *parent, void *data,
 rename_retry:
 	spin_unlock(&this_parent->d_lock);
 	rcu_read_unlock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(seq & 1);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!retry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq = 1;
 	goto again;
 }
@@ -1317,7 +1438,9 @@ static enum d_walk_ret path_check_mount(void *data, struct dentry *dentry)
 	struct path path = { .mnt = info->mnt, .dentry = dentry };
 
 	if (likely(!d_mountpoint(dentry)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return D_WALK_CONTINUE;
+}
 	if (__path_is_mountpoint(&path)) {
 		info->mounted = 1;
 		return D_WALK_QUIT;
@@ -1362,19 +1485,24 @@ int d_set_mounted(struct dentry *dentry)
 		/* Need exclusion wrt. d_invalidate() */
 		spin_lock(&p->d_lock);
 		if (unlikely(d_unhashed(p))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&p->d_lock);
 			goto out;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&p->d_lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&dentry->d_lock);
 	if (!d_unlinked(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EBUSY;
 		if (!d_mountpoint(dentry)) {
 			dentry->d_flags |= DCACHE_MOUNTED;
 			ret = 0;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
  	spin_unlock(&dentry->d_lock);
 out:
 	write_sequnlock(&rename_lock);
@@ -1411,6 +1539,7 @@ static enum d_walk_ret select_collect(void *_data, struct dentry *dentry)
 		goto out;
 
 	if (dentry->d_flags & DCACHE_SHRINK_LIST) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		data->found++;
 	} else {
 		if (dentry->d_flags & DCACHE_LRU_LIST)
@@ -1460,11 +1589,15 @@ static enum d_walk_ret umount_check(void *_data, struct dentry *dentry)
 {
 	/* it has busy descendents; complain about those instead */
 	if (!list_empty(&dentry->d_subdirs))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return D_WALK_CONTINUE;
+}
 
 	/* root with refcount 1 is fine */
 	if (dentry == _data && dentry->d_lockref.count == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return D_WALK_CONTINUE;
+}
 
 	printk(KERN_ERR "BUG: Dentry %p{i=%lx,n=%pd} "
 			" still in use (%d) [unmount of %s %s]\n",
@@ -1475,6 +1608,7 @@ static enum d_walk_ret umount_check(void *_data, struct dentry *dentry)
 		       dentry->d_lockref.count,
 		       dentry->d_sb->s_type->name,
 		       dentry->d_sb->s_id);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(1);
 	return D_WALK_CONTINUE;
 }
@@ -1501,6 +1635,7 @@ void shrink_dcache_for_umount(struct super_block *sb)
 	do_one_tree(dentry);
 
 	while (!hlist_bl_empty(&sb->s_anon)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dentry = dget(hlist_bl_entry(hlist_bl_first(&sb->s_anon), struct dentry, d_hash));
 		do_one_tree(dentry);
 	}
@@ -1515,6 +1650,7 @@ static enum d_walk_ret detach_and_collect(void *_data, struct dentry *dentry)
 	struct detach_data *data = _data;
 
 	if (d_mountpoint(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__dget_dlock(dentry);
 		data->mountpoint = dentry;
 		return D_WALK_QUIT;
@@ -1548,13 +1684,16 @@ void d_invalidate(struct dentry *dentry)
 	 */
 	spin_lock(&dentry->d_lock);
 	if (d_unhashed(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&dentry->d_lock);
 		return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&dentry->d_lock);
 
 	/* Negative dentries can be dropped without further checks */
 	if (!dentry->d_inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		d_drop(dentry);
 		return;
 	}
@@ -1575,6 +1714,7 @@ void d_invalidate(struct dentry *dentry)
 			return;
 
 		if (data.mountpoint) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			detach_mounts(data.mountpoint);
 			dput(data.mountpoint);
 		}
@@ -1601,7 +1741,9 @@ struct dentry *__d_alloc(struct super_block *sb, const struct qstr *name)
 
 	dentry = kmem_cache_alloc(dentry_cache, GFP_KERNEL);
 	if (!dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/*
 	 * We guarantee that the inline name is always NUL-terminated.
@@ -1611,6 +1753,7 @@ struct dentry *__d_alloc(struct super_block *sb, const struct qstr *name)
 	 */
 	dentry->d_iname[DNAME_INLINE_LEN-1] = 0;
 	if (unlikely(!name)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		name = &slash_name;
 		dname = dentry->d_iname;
 	} else if (name->len > DNAME_INLINE_LEN-1) {
@@ -1618,14 +1761,18 @@ struct dentry *__d_alloc(struct super_block *sb, const struct qstr *name)
 		struct external_name *p = kmalloc(size + name->len,
 						  GFP_KERNEL_ACCOUNT);
 		if (!p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kmem_cache_free(dentry_cache, dentry); 
 			return NULL;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_set(&p->u.count, 1);
 		dname = p->name;
 		if (IS_ENABLED(CONFIG_DCACHE_WORD_ACCESS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kasan_unpoison_shadow(dname,
 				round_up(name->len + 1,	sizeof(unsigned long)));
+}
 	} else  {
 		dname = dentry->d_iname;
 	}	
@@ -1642,6 +1789,7 @@ struct dentry *__d_alloc(struct super_block *sb, const struct qstr *name)
 	dentry->d_lockref.count = 1;
 	dentry->d_flags = 0;
 	spin_lock_init(&dentry->d_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seqcount_init(&dentry->d_seq);
 	dentry->d_inode = NULL;
 	dentry->d_parent = dentry;
@@ -1656,10 +1804,15 @@ struct dentry *__d_alloc(struct super_block *sb, const struct qstr *name)
 	d_set_d_op(dentry, dentry->d_sb->s_d_op);
 
 	if (dentry->d_op && dentry->d_op->d_init) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = dentry->d_op->d_init(dentry);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (dname_external(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kfree(external_name(dentry));
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kmem_cache_free(dentry_cache, dentry);
 			return NULL;
 		}
@@ -1683,7 +1836,9 @@ struct dentry *d_alloc(struct dentry * parent, const struct qstr *name)
 {
 	struct dentry *dentry = __d_alloc(parent->d_sb, name);
 	if (!dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	dentry->d_flags |= DCACHE_RCUACCESS;
 	spin_lock(&parent->d_lock);
 	/*
@@ -1744,15 +1899,21 @@ void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op)
 				DCACHE_OP_REAL));
 	dentry->d_op = op;
 	if (!op)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (op->d_hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dentry->d_flags |= DCACHE_OP_HASH;
+}
 	if (op->d_compare)
 		dentry->d_flags |= DCACHE_OP_COMPARE;
 	if (op->d_revalidate)
 		dentry->d_flags |= DCACHE_OP_REVALIDATE;
 	if (op->d_weak_revalidate)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dentry->d_flags |= DCACHE_OP_WEAK_REVALIDATE;
+}
 	if (op->d_delete)
 		dentry->d_flags |= DCACHE_OP_DELETE;
 	if (op->d_prune)
@@ -1773,6 +1934,7 @@ EXPORT_SYMBOL(d_set_d_op);
  */
 void d_set_fallthru(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&dentry->d_lock);
 	dentry->d_flags |= DCACHE_FALLTHRU;
 	spin_unlock(&dentry->d_lock);
@@ -1784,13 +1946,18 @@ static unsigned d_flags_for_inode(struct inode *inode)
 	unsigned add_flags = DCACHE_REGULAR_TYPE;
 
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return DCACHE_MISS_TYPE;
+}
 
 	if (S_ISDIR(inode->i_mode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_flags = DCACHE_DIRECTORY_TYPE;
 		if (unlikely(!(inode->i_opflags & IOP_LOOKUP))) {
 			if (unlikely(!inode->i_op->lookup))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				add_flags = DCACHE_AUTODIR_TYPE;
+}
 			else
 				inode->i_opflags |= IOP_LOOKUP;
 		}
@@ -1799,6 +1966,7 @@ static unsigned d_flags_for_inode(struct inode *inode)
 
 	if (unlikely(!(inode->i_opflags & IOP_NOFOLLOW))) {
 		if (unlikely(inode->i_op->get_link)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			add_flags = DCACHE_SYMLINK_TYPE;
 			goto type_determined;
 		}
@@ -1806,11 +1974,14 @@ static unsigned d_flags_for_inode(struct inode *inode)
 	}
 
 	if (unlikely(!S_ISREG(inode->i_mode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_flags = DCACHE_SPECIAL_TYPE;
+}
 
 type_determined:
 	if (unlikely(IS_AUTOMOUNT(inode)))
 		add_flags |= DCACHE_NEED_AUTOMOUNT;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return add_flags;
 }
 
@@ -1866,6 +2037,7 @@ EXPORT_SYMBOL(d_instantiate);
  */
 int d_instantiate_no_diralias(struct dentry *entry, struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!hlist_unhashed(&entry->d_u.d_alias));
 
 	security_d_instantiate(entry, inode);
@@ -1902,7 +2074,9 @@ static struct dentry * __d_find_any_alias(struct inode *inode)
 	struct dentry *alias;
 
 	if (hlist_empty(&inode->i_dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	alias = hlist_entry(inode->i_dentry.first, struct dentry, d_u.d_alias);
 	__dget(alias);
 	return alias;
@@ -1933,7 +2107,9 @@ static struct dentry *__d_obtain_alias(struct inode *inode, int disconnected)
 	unsigned add_flags;
 
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ESTALE);
+}
 	if (IS_ERR(inode))
 		return ERR_CAST(inode);
 
@@ -1998,6 +2174,7 @@ static struct dentry *__d_obtain_alias(struct inode *inode, int disconnected)
  */
 struct dentry *d_obtain_alias(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __d_obtain_alias(inode, 1);
 }
 EXPORT_SYMBOL(d_obtain_alias);
@@ -2019,6 +2196,7 @@ EXPORT_SYMBOL(d_obtain_alias);
  */
 struct dentry *d_obtain_root(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __d_obtain_alias(inode, 0);
 }
 EXPORT_SYMBOL(d_obtain_root);
@@ -2050,6 +2228,7 @@ struct dentry *d_add_ci(struct dentry *dentry, struct inode *inode,
 	 */
 	found = d_hash_and_lookup(dentry->d_parent, name);
 	if (found) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iput(inode);
 		return found;
 	}
@@ -2083,7 +2262,9 @@ static inline bool d_same_name(const struct dentry *dentry,
 {
 	if (likely(!(parent->d_flags & DCACHE_OP_COMPARE))) {
 		if (dentry->d_name.len != name->len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
 		return dentry_cmp(dentry, name->name, name->len) == 0;
 	}
 	return parent->d_op->d_compare(dentry,
@@ -2186,6 +2367,7 @@ struct dentry *__d_lookup_rcu(const struct dentry *parent,
 			tname = dentry->d_name.name;
 			/* we want a consistent (name,len) pair */
 			if (read_seqcount_retry(&dentry->d_seq, seq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cpu_relax();
 				goto seqretry;
 			}
@@ -2201,6 +2383,7 @@ struct dentry *__d_lookup_rcu(const struct dentry *parent,
 		*seqp = seq;
 		return dentry;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -2221,6 +2404,7 @@ struct dentry *d_lookup(const struct dentry *parent, const struct qstr *name)
 	unsigned seq;
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq = read_seqbegin(&rename_lock);
 		dentry = __d_lookup(parent, name);
 		if (dentry)
@@ -2280,6 +2464,7 @@ struct dentry *__d_lookup(const struct dentry *parent, const struct qstr *name)
 		if (dentry->d_name.hash != hash)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&dentry->d_lock);
 		if (dentry->d_parent != parent)
 			goto next;
@@ -2296,6 +2481,7 @@ struct dentry *__d_lookup(const struct dentry *parent, const struct qstr *name)
 next:
 		spin_unlock(&dentry->d_lock);
  	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
  	rcu_read_unlock();
 
  	return found;
@@ -2317,9 +2503,12 @@ struct dentry *d_hash_and_lookup(struct dentry *dir, struct qstr *name)
 	 */
 	name->hash = full_name_hash(dir, name->name, name->len);
 	if (dir->d_flags & DCACHE_OP_HASH) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int err = dir->d_op->d_hash(dir, name);
 		if (unlikely(err < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(err);
+}
 	}
 	return d_lookup(dir, name);
 }
@@ -2359,6 +2548,7 @@ void d_delete(struct dentry * dentry)
 	isdir = S_ISDIR(inode->i_mode);
 	if (dentry->d_lockref.count == 1) {
 		if (!spin_trylock(&inode->i_lock)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&dentry->d_lock);
 			cpu_relax();
 			goto again;
@@ -2372,6 +2562,7 @@ void d_delete(struct dentry * dentry)
 	if (!d_unhashed(dentry))
 		__d_drop(dentry);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&dentry->d_lock);
 
 	fsnotify_nameremove(dentry, isdir);
@@ -2396,6 +2587,7 @@ static void __d_rehash(struct dentry *entry)
  
 void d_rehash(struct dentry * entry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&entry->d_lock);
 	__d_rehash(entry);
 	spin_unlock(&entry->d_lock);
@@ -2409,6 +2601,7 @@ static inline unsigned start_dir_add(struct inode *dir)
 		unsigned n = dir->i_dir_seq;
 		if (!(n & 1) && cmpxchg(&dir->i_dir_seq, n, n + 1) == n)
 			return n;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpu_relax();
 	}
 }
@@ -2425,6 +2618,7 @@ static void d_wait_lookup(struct dentry *dentry)
 		add_wait_queue(dentry->d_wait, &wait);
 		do {
 			set_current_state(TASK_UNINTERRUPTIBLE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&dentry->d_lock);
 			schedule();
 			spin_lock(&dentry->d_lock);
@@ -2444,7 +2638,9 @@ struct dentry *d_alloc_parallel(struct dentry *parent,
 	unsigned seq, r_seq, d_seq;
 
 	if (unlikely(!new))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 retry:
 	rcu_read_lock();
@@ -2453,24 +2649,29 @@ struct dentry *d_alloc_parallel(struct dentry *parent,
 	dentry = __d_lookup_rcu(parent, name, &d_seq);
 	if (unlikely(dentry)) {
 		if (!lockref_get_not_dead(&dentry->d_lockref)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock();
 			goto retry;
 		}
 		if (read_seqcount_retry(&dentry->d_seq, d_seq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock();
 			dput(dentry);
 			goto retry;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		dput(new);
 		return dentry;
 	}
 	if (unlikely(read_seqretry(&rename_lock, r_seq))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		goto retry;
 	}
 	hlist_bl_lock(b);
 	if (unlikely(parent->d_inode->i_dir_seq != seq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hlist_bl_unlock(b);
 		rcu_read_unlock();
 		goto retry;
@@ -2489,13 +2690,16 @@ struct dentry *d_alloc_parallel(struct dentry *parent,
 			continue;
 		if (!d_same_name(dentry, parent, name))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hlist_bl_unlock(b);
 		/* now we can try to grab a reference */
 		if (!lockref_get_not_dead(&dentry->d_lockref)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock();
 			goto retry;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		/*
 		 * somebody is likely to be still doing lookup for it;
@@ -2518,10 +2722,12 @@ struct dentry *d_alloc_parallel(struct dentry *parent,
 		if (unlikely(!d_same_name(dentry, parent, name)))
 			goto mismatch;
 		/* OK, it *is* a hashed match; return it */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&dentry->d_lock);
 		dput(new);
 		return dentry;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	/* we can't take ->d_lock here; it's OK, though. */
 	new->d_flags |= DCACHE_PAR_LOOKUP;
@@ -2573,11 +2779,16 @@ static inline void __d_add(struct dentry *dentry, struct inode *inode)
 	}
 	__d_rehash(dentry);
 	if (dir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		end_dir_add(dir, n);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&dentry->d_lock);
 	if (inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&inode->i_lock);
 }
+}
 
 /**
  * d_add - add dentry to hash queues
@@ -2615,6 +2826,7 @@ struct dentry *d_exact_alias(struct dentry *entry, struct inode *inode)
 	unsigned int hash = entry->d_name.hash;
 
 	spin_lock(&inode->i_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry(alias, &inode->i_dentry, d_u.d_alias) {
 		/*
 		 * Don't need alias->d_lock here, because aliases with
@@ -2660,6 +2872,7 @@ EXPORT_SYMBOL(d_exact_alias);
  */
 void dentry_update_name_case(struct dentry *dentry, const struct qstr *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!inode_is_locked(dentry->d_parent->d_inode));
 	BUG_ON(dentry->d_name.len != name->len); /* d_lookup gives this */
 
@@ -2673,6 +2886,7 @@ EXPORT_SYMBOL(dentry_update_name_case);
 
 static void swap_names(struct dentry *dentry, struct dentry *target)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(dname_external(target))) {
 		if (unlikely(dname_external(dentry))) {
 			/*
@@ -2718,7 +2932,9 @@ static void copy_name(struct dentry *dentry, struct dentry *target)
 {
 	struct external_name *old_name = NULL;
 	if (unlikely(dname_external(dentry)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		old_name = external_name(dentry);
+}
 	if (unlikely(dname_external(target))) {
 		atomic_inc(&external_name(target)->u.count);
 		dentry->d_name = target->d_name;
@@ -2729,8 +2945,10 @@ static void copy_name(struct dentry *dentry, struct dentry *target)
 		dentry->d_name.hash_len = target->d_name.hash_len;
 	}
 	if (old_name && likely(atomic_dec_and_test(&old_name->u.count)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_rcu(old_name, u.head);
 }
+}
 
 static void dentry_lock_for_move(struct dentry *dentry, struct dentry *target)
 {
@@ -2741,10 +2959,13 @@ static void dentry_lock_for_move(struct dentry *dentry, struct dentry *target)
 		spin_lock(&target->d_parent->d_lock);
 	else {
 		if (d_ancestor(dentry->d_parent, target->d_parent)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock(&dentry->d_parent->d_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock_nested(&target->d_parent->d_lock,
 						DENTRY_D_LOCK_NESTED);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock(&target->d_parent->d_lock);
 			spin_lock_nested(&dentry->d_parent->d_lock,
 						DENTRY_D_LOCK_NESTED);
@@ -2762,9 +2983,14 @@ static void dentry_lock_for_move(struct dentry *dentry, struct dentry *target)
 static void dentry_unlock_for_move(struct dentry *dentry, struct dentry *target)
 {
 	if (target->d_parent != dentry->d_parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&dentry->d_parent->d_lock);
+}
 	if (target->d_parent != target)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&target->d_parent->d_lock);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&target->d_lock);
 	spin_unlock(&dentry->d_lock);
 }
@@ -2800,18 +3026,22 @@ static void __d_move(struct dentry *dentry, struct dentry *target,
 	struct inode *dir = NULL;
 	unsigned n;
 	if (!dentry->d_inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_WARNING "VFS: moving negative dcache entry\n");
+}
 
 	BUG_ON(d_ancestor(dentry, target));
 	BUG_ON(d_ancestor(target, dentry));
 
 	dentry_lock_for_move(dentry, target);
 	if (unlikely(d_in_lookup(target))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dir = target->d_parent->d_inode;
 		n = start_dir_add(dir);
 		__d_lookup_done(target);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_seqcount_begin(&dentry->d_seq);
 	write_seqcount_begin_nested(&target->d_seq, DENTRY_D_LOCK_NESTED);
 
@@ -2822,14 +3052,18 @@ static void __d_move(struct dentry *dentry, struct dentry *target,
 
 	/* Switch the names.. */
 	if (exchange)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		swap_names(dentry, target);
+}
 	else
 		copy_name(dentry, target);
 
 	/* rehash in new place(s) */
 	__d_rehash(dentry);
 	if (exchange)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__d_rehash(target);
+}
 
 	/* ... and switch them in the tree */
 	if (IS_ROOT(dentry)) {
@@ -2845,15 +3079,20 @@ static void __d_move(struct dentry *dentry, struct dentry *target,
 		list_move(&target->d_child, &target->d_parent->d_subdirs);
 		list_move(&dentry->d_child, &dentry->d_parent->d_subdirs);
 		if (exchange)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fsnotify_update_flags(target);
+}
 		fsnotify_update_flags(dentry);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_seqcount_end(&target->d_seq);
 	write_seqcount_end(&dentry->d_seq);
 
 	if (dir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		end_dir_add(dir, n);
+}
 	dentry_unlock_for_move(dentry, target);
 }
 
@@ -2881,6 +3120,7 @@ EXPORT_SYMBOL(d_move);
  */
 void d_exchange(struct dentry *dentry1, struct dentry *dentry2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_seqlock(&rename_lock);
 
 	WARN_ON(!dentry1->d_inode);
@@ -2907,8 +3147,11 @@ struct dentry *d_ancestor(struct dentry *p1, struct dentry *p2)
 
 	for (p = p2; !IS_ROOT(p); p = p->d_parent) {
 		if (p->d_parent == p1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return p;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -2976,7 +3219,9 @@ static int __d_unalias(struct inode *inode,
 struct dentry *d_splice_alias(struct inode *inode, struct dentry *dentry)
 {
 	if (IS_ERR(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(inode);
+}
 
 	BUG_ON(!d_unhashed(dentry));
 
@@ -2992,9 +3237,11 @@ struct dentry *d_splice_alias(struct inode *inode, struct dentry *dentry)
 			spin_unlock(&inode->i_lock);
 			write_seqlock(&rename_lock);
 			if (unlikely(d_ancestor(new, dentry))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				write_sequnlock(&rename_lock);
 				dput(new);
 				new = ERR_PTR(-ELOOP);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pr_warn_ratelimited(
 					"VFS: Lookup of '%s' in %s %s"
 					" would have caused loop\n",
@@ -3002,16 +3249,20 @@ struct dentry *d_splice_alias(struct inode *inode, struct dentry *dentry)
 					inode->i_sb->s_type->name,
 					inode->i_sb->s_id);
 			} else if (!IS_ROOT(new)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				int err = __d_unalias(inode, dentry, new);
 				write_sequnlock(&rename_lock);
 				if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					dput(new);
 					new = ERR_PTR(err);
 				}
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__d_move(new, dentry, false);
 				write_sequnlock(&rename_lock);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			iput(inode);
 			return new;
 		}
@@ -3026,8 +3277,11 @@ static int prepend(char **buffer, int *buflen, const char *str, int namelen)
 {
 	*buflen -= namelen;
 	if (*buflen < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENAMETOOLONG;
+}
 	*buffer -= namelen;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(*buffer, str, namelen);
 	return 0;
 }
@@ -3056,11 +3310,14 @@ static int prepend_name(char **buffer, int *buflen, const struct qstr *name)
 	u32 dlen = ACCESS_ONCE(name->len);
 	char *p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	smp_read_barrier_depends();
 
 	*buflen -= dlen + 1;
 	if (*buflen < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENAMETOOLONG;
+}
 	p = *buffer -= dlen + 1;
 	*p++ = '/';
 	while (dlen--) {
@@ -3069,6 +3326,7 @@ static int prepend_name(char **buffer, int *buflen, const struct qstr *name)
 			break;
 		*p++ = c;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -3121,6 +3379,7 @@ static int prepend_path(const struct path *path,
 			struct mount *parent = ACCESS_ONCE(mnt->mnt_parent);
 			/* Escaped? */
 			if (dentry != vfsmnt->mnt_root) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				bptr = *buffer;
 				blen = *buflen;
 				error = 3;
@@ -3137,25 +3396,33 @@ static int prepend_path(const struct path *path,
 				error = is_mounted(vfsmnt) ? 1 : 2;
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = dentry->d_parent;
 		prefetch(parent);
 		error = prepend_name(&bptr, &blen, &dentry->d_name);
 		if (error)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dentry = parent;
 	}
 	if (!(seq & 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
+}
 	if (need_seqretry(&rename_lock, seq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq = 1;
 		goto restart;
 	}
 	done_seqretry(&rename_lock, seq);
 
 	if (!(m_seq & 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
+}
 	if (need_seqretry(&mount_lock, m_seq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		m_seq = 1;
 		goto restart_mnt;
 	}
@@ -3163,7 +3430,9 @@ static int prepend_path(const struct path *path,
 
 	if (error >= 0 && bptr == *buffer) {
 		if (--blen < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -ENAMETOOLONG;
+}
 		else
 			*--bptr = '/';
 	}
@@ -3201,7 +3470,9 @@ char *__d_path(const struct path *path,
 	if (error < 0)
 		return ERR_PTR(error);
 	if (error > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	return res;
 }
 
@@ -3216,7 +3487,9 @@ char *d_absolute_path(const struct path *path,
 	error = prepend_path(path, &root, &res, &buflen);
 
 	if (error > 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EINVAL;
+}
 	if (error < 0)
 		return ERR_PTR(error);
 	return res;
@@ -3231,9 +3504,12 @@ static int path_with_deleted(const struct path *path,
 {
 	prepend(buf, buflen, "\0", 1);
 	if (d_unlinked(path->dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int error = prepend(buf, buflen, " (deleted)", 10);
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 	}
 
 	return prepend_path(path, root, buf, buflen);
@@ -3241,6 +3517,7 @@ static int path_with_deleted(const struct path *path,
 
 static int prepend_unreachable(char **buffer, int *buflen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return prepend(buffer, buflen, "(unreachable)", 13);
 }
 
@@ -3291,13 +3568,16 @@ char *d_path(const struct path *path, char *buf, int buflen)
 	    (!IS_ROOT(path->dentry) || path->dentry != path->mnt->mnt_root))
 		return path->dentry->d_op->d_dname(path->dentry, buf, buflen);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	get_fs_root_rcu(current->fs, &root);
 	error = path_with_deleted(path, &root, &res, &buflen);
 	rcu_read_unlock();
 
 	if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = ERR_PTR(error);
+}
 	return res;
 }
 EXPORT_SYMBOL(d_path);
@@ -3317,7 +3597,9 @@ char *dynamic_dname(struct dentry *dentry, char *buffer, int buflen,
 	va_end(args);
 
 	if (sz > sizeof(temp) || sz > buflen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENAMETOOLONG);
+}
 
 	buffer += buflen - sz;
 	return memcpy(buffer, temp, sz);
@@ -3348,6 +3630,7 @@ static char *__dentry_path(struct dentry *d, char *buf, int buflen)
 	if (buflen < 2)
 		goto Elong;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 restart:
 	dentry = d;
@@ -3370,14 +3653,18 @@ static char *__dentry_path(struct dentry *d, char *buf, int buflen)
 		dentry = parent;
 	}
 	if (!(seq & 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
+}
 	if (need_seqretry(&rename_lock, seq)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq = 1;
 		goto restart;
 	}
 	done_seqretry(&rename_lock, seq);
 	if (error)
 		goto Elong;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 Elong:
 	return ERR_PTR(-ENAMETOOLONG);
@@ -3385,6 +3672,7 @@ static char *__dentry_path(struct dentry *d, char *buf, int buflen)
 
 char *dentry_path_raw(struct dentry *dentry, char *buf, int buflen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __dentry_path(dentry, buf, buflen);
 }
 EXPORT_SYMBOL(dentry_path_raw);
@@ -3395,14 +3683,19 @@ char *dentry_path(struct dentry *dentry, char *buf, int buflen)
 	char *retval;
 
 	if (d_unlinked(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = buf + buflen;
 		if (prepend(&p, &buflen, "//deleted", 10) != 0)
 			goto Elong;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		buflen++;
 	}
 	retval = __dentry_path(dentry, buf, buflen);
 	if (!IS_ERR(retval) && p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*p = '/';	/* restore '/' overriden with '\0' */
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 Elong:
 	return ERR_PTR(-ENAMETOOLONG);
@@ -3445,8 +3738,11 @@ SYSCALL_DEFINE2(getcwd, char __user *, buf, unsigned long, size)
 	char *page = __getname();
 
 	if (!page)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	get_fs_root_and_pwd_rcu(current->fs, &root, &pwd);
 
@@ -3465,19 +3761,24 @@ SYSCALL_DEFINE2(getcwd, char __user *, buf, unsigned long, size)
 
 		/* Unreachable from current root */
 		if (error > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = prepend_unreachable(&cwd, &buflen);
 			if (error)
 				goto out;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ERANGE;
 		len = PATH_MAX + page - cwd;
 		if (len <= size) {
 			error = len;
 			if (copy_to_user(buf, cwd, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				error = -EFAULT;
+}
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 	}
 
@@ -3508,7 +3809,9 @@ bool is_subdir(struct dentry *new_dentry, struct dentry *old_dentry)
 	unsigned seq;
 
 	if (new_dentry == old_dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	do {
 		/* for restarting inner loop in case of seq retry */
@@ -3519,12 +3822,16 @@ bool is_subdir(struct dentry *new_dentry, struct dentry *old_dentry)
 		 */
 		rcu_read_lock();
 		if (d_ancestor(old_dentry, new_dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			result = true;
+}
 		else
 			result = false;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 	} while (read_seqretry(&rename_lock, seq));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return result;
 }
 
@@ -3533,13 +3840,16 @@ static enum d_walk_ret d_genocide_kill(void *data, struct dentry *dentry)
 	struct dentry *root = data;
 	if (dentry != root) {
 		if (d_unhashed(dentry) || !dentry->d_inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return D_WALK_SKIP;
+}
 
 		if (!(dentry->d_flags & DCACHE_GENOCIDE)) {
 			dentry->d_flags |= DCACHE_GENOCIDE;
 			dentry->d_lockref.count--;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return D_WALK_CONTINUE;
 }
 
@@ -3567,6 +3877,7 @@ EXPORT_SYMBOL(d_tmpfile);
 static __initdata unsigned long dhash_entries;
 static int __init set_dhash_entries(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!str)
 		return 0;
 	dhash_entries = simple_strtoul(str, &str, 0);
@@ -3580,7 +3891,9 @@ static void __init dcache_init_early(void)
 	 * hash allocation until vmalloc space is available.
 	 */
 	if (hashdist)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	dentry_hashtable =
 		alloc_large_system_hash("Dentry cache",
@@ -3606,7 +3919,9 @@ static void __init dcache_init(void)
 
 	/* Hash may have been set up in dcache_init_early */
 	if (!hashdist)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	dentry_hashtable =
 		alloc_large_system_hash("Dentry cache",
diff --git a/fs/debugfs/file.c b/fs/debugfs/file.c
index 6dabc4a..8cef35c 100644
--- a/fs/debugfs/file.c
+++ b/fs/debugfs/file.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  file.c - part of debugfs, a tiny little debug file system
  *
@@ -32,12 +34,14 @@ struct poll_table_struct;
 static ssize_t default_read_file(struct file *file, char __user *buf,
 				 size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static ssize_t default_write_file(struct file *file, const char __user *buf,
 				   size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return count;
 }
 
@@ -75,7 +79,9 @@ int debugfs_use_file_start(const struct dentry *dentry, int *srcu_idx)
 	*srcu_idx = srcu_read_lock(&debugfs_srcu);
 	barrier();
 	if (d_unlinked(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
+}
 	return 0;
 }
 EXPORT_SYMBOL_GPL(debugfs_use_file_start);
@@ -91,6 +97,7 @@ EXPORT_SYMBOL_GPL(debugfs_use_file_start);
  */
 void debugfs_use_file_finish(int srcu_idx) __releases(&debugfs_srcu)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	srcu_read_unlock(&debugfs_srcu, srcu_idx);
 }
 EXPORT_SYMBOL_GPL(debugfs_use_file_finish);
@@ -105,6 +112,7 @@ static int open_proxy_open(struct inode *inode, struct file *filp)
 
 	r = debugfs_use_file_start(dentry, &srcu_idx);
 	if (r) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		r = -ENOENT;
 		goto out;
 	}
@@ -178,6 +186,7 @@ static unsigned int full_proxy_poll(struct file *filp,
 	unsigned int r = 0;
 
 	if (debugfs_use_file_start(dentry, &srcu_idx)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		debugfs_use_file_finish(srcu_idx);
 		return POLLHUP;
 	}
@@ -220,10 +229,14 @@ static void __full_proxy_fops_init(struct file_operations *proxy_fops,
 	if (real_fops->write)
 		proxy_fops->write = full_proxy_write;
 	if (real_fops->poll)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		proxy_fops->poll = full_proxy_poll;
+}
 	if (real_fops->unlocked_ioctl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		proxy_fops->unlocked_ioctl = full_proxy_unlocked_ioctl;
 }
+}
 
 static int full_proxy_open(struct inode *inode, struct file *filp)
 {
@@ -234,10 +247,12 @@ static int full_proxy_open(struct inode *inode, struct file *filp)
 
 	r = debugfs_use_file_start(dentry, &srcu_idx);
 	if (r) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		r = -ENOENT;
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	real_fops = debugfs_real_fops(filp);
 	real_fops = fops_get(real_fops);
 	if (!real_fops) {
@@ -250,6 +265,7 @@ static int full_proxy_open(struct inode *inode, struct file *filp)
 
 	proxy_fops = kzalloc(sizeof(*proxy_fops), GFP_KERNEL);
 	if (!proxy_fops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		r = -ENOMEM;
 		goto free_proxy;
 	}
@@ -259,6 +275,7 @@ static int full_proxy_open(struct inode *inode, struct file *filp)
 	if (real_fops->open) {
 		r = real_fops->open(inode, filp);
 		if (r) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			replace_fops(filp, d_inode(dentry)->i_fop);
 			goto free_proxy;
 		} else if (filp->f_op != proxy_fops) {
@@ -272,6 +289,7 @@ static int full_proxy_open(struct inode *inode, struct file *filp)
 	goto out;
 free_proxy:
 	kfree(proxy_fops);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fops_put(real_fops);
 out:
 	debugfs_use_file_finish(srcu_idx);
@@ -290,7 +308,9 @@ ssize_t debugfs_attr_read(struct file *file, char __user *buf,
 
 	ret = debugfs_use_file_start(F_DENTRY(file), &srcu_idx);
 	if (likely(!ret))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = simple_attr_read(file, buf, len, ppos);
+}
 	debugfs_use_file_finish(srcu_idx);
 	return ret;
 }
@@ -304,7 +324,9 @@ ssize_t debugfs_attr_write(struct file *file, const char __user *buf,
 
 	ret = debugfs_use_file_start(F_DENTRY(file), &srcu_idx);
 	if (likely(!ret))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = simple_attr_write(file, buf, len, ppos);
+}
 	debugfs_use_file_finish(srcu_idx);
 	return ret;
 }
@@ -318,23 +340,29 @@ static struct dentry *debugfs_create_mode_unsafe(const char *name, umode_t mode,
 {
 	/* if there are no write bits set, make read only */
 	if (!(mode & S_IWUGO))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return debugfs_create_file_unsafe(name, mode, parent, value,
 						fops_ro);
+}
 	/* if there are no read bits set, make write only */
 	if (!(mode & S_IRUGO))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return debugfs_create_file_unsafe(name, mode, parent, value,
 						fops_wo);
+}
 
 	return debugfs_create_file_unsafe(name, mode, parent, value, fops);
 }
 
 static int debugfs_u8_set(void *data, u64 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*(u8 *)data = val;
 	return 0;
 }
 static int debugfs_u8_get(void *data, u64 *val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*val = *(u8 *)data;
 	return 0;
 }
@@ -369,6 +397,7 @@ DEFINE_DEBUGFS_ATTRIBUTE(fops_u8_wo, NULL, debugfs_u8_set, "%llu\n");
 struct dentry *debugfs_create_u8(const char *name, umode_t mode,
 				 struct dentry *parent, u8 *value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return debugfs_create_mode_unsafe(name, mode, parent, value, &fops_u8,
 				   &fops_u8_ro, &fops_u8_wo);
 }
@@ -376,11 +405,13 @@ EXPORT_SYMBOL_GPL(debugfs_create_u8);
 
 static int debugfs_u16_set(void *data, u64 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*(u16 *)data = val;
 	return 0;
 }
 static int debugfs_u16_get(void *data, u64 *val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*val = *(u16 *)data;
 	return 0;
 }
@@ -415,6 +446,7 @@ DEFINE_DEBUGFS_ATTRIBUTE(fops_u16_wo, NULL, debugfs_u16_set, "%llu\n");
 struct dentry *debugfs_create_u16(const char *name, umode_t mode,
 				  struct dentry *parent, u16 *value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return debugfs_create_mode_unsafe(name, mode, parent, value, &fops_u16,
 				   &fops_u16_ro, &fops_u16_wo);
 }
@@ -422,11 +454,13 @@ EXPORT_SYMBOL_GPL(debugfs_create_u16);
 
 static int debugfs_u32_set(void *data, u64 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*(u32 *)data = val;
 	return 0;
 }
 static int debugfs_u32_get(void *data, u64 *val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*val = *(u32 *)data;
 	return 0;
 }
@@ -461,6 +495,7 @@ DEFINE_DEBUGFS_ATTRIBUTE(fops_u32_wo, NULL, debugfs_u32_set, "%llu\n");
 struct dentry *debugfs_create_u32(const char *name, umode_t mode,
 				 struct dentry *parent, u32 *value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return debugfs_create_mode_unsafe(name, mode, parent, value, &fops_u32,
 				   &fops_u32_ro, &fops_u32_wo);
 }
@@ -468,12 +503,14 @@ EXPORT_SYMBOL_GPL(debugfs_create_u32);
 
 static int debugfs_u64_set(void *data, u64 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*(u64 *)data = val;
 	return 0;
 }
 
 static int debugfs_u64_get(void *data, u64 *val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*val = *(u64 *)data;
 	return 0;
 }
@@ -515,12 +552,14 @@ EXPORT_SYMBOL_GPL(debugfs_create_u64);
 
 static int debugfs_ulong_set(void *data, u64 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*(unsigned long *)data = val;
 	return 0;
 }
 
 static int debugfs_ulong_get(void *data, u64 *val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*val = *(unsigned long *)data;
 	return 0;
 }
@@ -557,6 +596,7 @@ DEFINE_DEBUGFS_ATTRIBUTE(fops_ulong_wo, NULL, debugfs_ulong_set, "%llu\n");
 struct dentry *debugfs_create_ulong(const char *name, umode_t mode,
 				    struct dentry *parent, unsigned long *value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return debugfs_create_mode_unsafe(name, mode, parent, value,
 					&fops_ulong, &fops_ulong_ro,
 					&fops_ulong_wo);
@@ -603,6 +643,7 @@ DEFINE_DEBUGFS_ATTRIBUTE(fops_x64_wo, NULL, debugfs_u64_set, "0x%016llx\n");
 struct dentry *debugfs_create_x8(const char *name, umode_t mode,
 				 struct dentry *parent, u8 *value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return debugfs_create_mode_unsafe(name, mode, parent, value, &fops_x8,
 				   &fops_x8_ro, &fops_x8_wo);
 }
@@ -621,6 +662,7 @@ EXPORT_SYMBOL_GPL(debugfs_create_x8);
 struct dentry *debugfs_create_x16(const char *name, umode_t mode,
 				 struct dentry *parent, u16 *value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return debugfs_create_mode_unsafe(name, mode, parent, value, &fops_x16,
 				   &fops_x16_ro, &fops_x16_wo);
 }
@@ -639,6 +681,7 @@ EXPORT_SYMBOL_GPL(debugfs_create_x16);
 struct dentry *debugfs_create_x32(const char *name, umode_t mode,
 				 struct dentry *parent, u32 *value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return debugfs_create_mode_unsafe(name, mode, parent, value, &fops_x32,
 				   &fops_x32_ro, &fops_x32_wo);
 }
@@ -657,6 +700,7 @@ EXPORT_SYMBOL_GPL(debugfs_create_x32);
 struct dentry *debugfs_create_x64(const char *name, umode_t mode,
 				 struct dentry *parent, u64 *value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return debugfs_create_mode_unsafe(name, mode, parent, value, &fops_x64,
 				   &fops_x64_ro, &fops_x64_wo);
 }
@@ -665,11 +709,13 @@ EXPORT_SYMBOL_GPL(debugfs_create_x64);
 
 static int debugfs_size_t_set(void *data, u64 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*(size_t *)data = val;
 	return 0;
 }
 static int debugfs_size_t_get(void *data, u64 *val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*val = *(size_t *)data;
 	return 0;
 }
@@ -691,6 +737,7 @@ DEFINE_DEBUGFS_ATTRIBUTE(fops_size_t_wo, NULL, debugfs_size_t_set, "%llu\n");
 struct dentry *debugfs_create_size_t(const char *name, umode_t mode,
 				     struct dentry *parent, size_t *value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return debugfs_create_mode_unsafe(name, mode, parent, value,
 					&fops_size_t, &fops_size_t_ro,
 					&fops_size_t_wo);
@@ -699,11 +746,13 @@ EXPORT_SYMBOL_GPL(debugfs_create_size_t);
 
 static int debugfs_atomic_t_set(void *data, u64 val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set((atomic_t *)data, val);
 	return 0;
 }
 static int debugfs_atomic_t_get(void *data, u64 *val)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*val = atomic_read((atomic_t *)data);
 	return 0;
 }
@@ -728,6 +777,7 @@ DEFINE_DEBUGFS_ATTRIBUTE(fops_atomic_t_wo, NULL, debugfs_atomic_t_set,
 struct dentry *debugfs_create_atomic_t(const char *name, umode_t mode,
 				 struct dentry *parent, atomic_t *value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return debugfs_create_mode_unsafe(name, mode, parent, value,
 					&fops_atomic_t, &fops_atomic_t_ro,
 					&fops_atomic_t_wo);
@@ -743,7 +793,9 @@ ssize_t debugfs_read_file_bool(struct file *file, char __user *user_buf,
 
 	r = debugfs_use_file_start(F_DENTRY(file), &srcu_idx);
 	if (likely(!r))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		val = *(bool *)file->private_data;
+}
 	debugfs_use_file_finish(srcu_idx);
 	if (r)
 		return r;
@@ -767,6 +819,7 @@ ssize_t debugfs_write_file_bool(struct file *file, const char __user *user_buf,
 	int r, srcu_idx;
 	bool *val = file->private_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	buf_size = min(count, (sizeof(buf)-1));
 	if (copy_from_user(buf, user_buf, buf_size))
 		return -EFAULT;
@@ -845,8 +898,10 @@ static ssize_t read_file_blob(struct file *file, char __user *user_buf,
 
 	r = debugfs_use_file_start(F_DENTRY(file), &srcu_idx);
 	if (likely(!r))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		r = simple_read_from_buffer(user_buf, count, ppos, blob->data,
 					blob->size);
+}
 	debugfs_use_file_finish(srcu_idx);
 	return r;
 }
@@ -885,6 +940,7 @@ struct dentry *debugfs_create_blob(const char *name, umode_t mode,
 				   struct dentry *parent,
 				   struct debugfs_blob_wrapper *blob)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return debugfs_create_file_unsafe(name, mode, parent, blob, &fops_blob);
 }
 EXPORT_SYMBOL_GPL(debugfs_create_blob);
@@ -899,6 +955,7 @@ static size_t u32_format_array(char *buf, size_t bufsize,
 {
 	size_t ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (--array_size >= 0) {
 		size_t len;
 		char term = array_size ? ' ' : '\n';
@@ -926,7 +983,9 @@ static int u32_array_open(struct inode *inode, struct file *file)
 	size = elements*11;
 	buf = kmalloc(size+1, GFP_KERNEL);
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	buf[size] = 0;
 
 	file->private_data = buf;
@@ -938,6 +997,7 @@ static int u32_array_open(struct inode *inode, struct file *file)
 static ssize_t u32_array_read(struct file *file, char __user *buf, size_t len,
 			      loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size_t size = strlen(file->private_data);
 
 	return simple_read_from_buffer(buf, len, ppos,
@@ -946,6 +1006,7 @@ static ssize_t u32_array_read(struct file *file, char __user *buf, size_t len,
 
 static int u32_array_release(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(file->private_data);
 
 	return 0;
@@ -982,6 +1043,7 @@ struct dentry *debugfs_create_u32_array(const char *name, umode_t mode,
 					    struct dentry *parent,
 					    u32 *array, u32 elements)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct array_data *data = kmalloc(sizeof(*data), GFP_KERNEL);
 
 	if (data == NULL)
@@ -1023,6 +1085,7 @@ void debugfs_print_regs32(struct seq_file *s, const struct debugfs_reg32 *regs,
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < nregs; i++, regs++) {
 		if (prefix)
 			seq_printf(s, "%s", prefix);
@@ -1044,6 +1107,7 @@ static int debugfs_show_regset32(struct seq_file *s, void *data)
 
 static int debugfs_open_regset32(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, debugfs_show_regset32, inode->i_private);
 }
 
@@ -1083,6 +1147,7 @@ struct dentry *debugfs_create_regset32(const char *name, umode_t mode,
 				       struct dentry *parent,
 				       struct debugfs_regset32 *regset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return debugfs_create_file(name, mode, parent, regset, &fops_regset32);
 }
 EXPORT_SYMBOL_GPL(debugfs_create_regset32);
@@ -1127,7 +1192,9 @@ struct dentry *debugfs_create_devm_seqfile(struct device *dev, const char *name,
 	struct debugfs_devm_entry *entry;
 
 	if (IS_ERR(parent))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 
 	entry = devm_kzalloc(dev, sizeof(*entry), GFP_KERNEL);
 	if (!entry)
diff --git a/fs/debugfs/inode.c b/fs/debugfs/inode.c
index c59f015..8ed737b 100644
--- a/fs/debugfs/inode.c
+++ b/fs/debugfs/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  inode.c - part of debugfs, a tiny little debug file system
  *
@@ -86,30 +88,47 @@ static int debugfs_parse_options(char *data, struct debugfs_mount_opts *opts)
 	opts->mode = DEBUGFS_DEFAULT_MODE;
 
 	while ((p = strsep(&data, ",")) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!*p)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		token = match_token(p, tokens, args);
 		switch (token) {
 		case Opt_uid:
 			if (match_int(&args[0], &option))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uid = make_kuid(current_user_ns(), option);
 			if (!uid_valid(uid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opts->uid = uid;
 			break;
 		case Opt_gid:
 			if (match_int(&args[0], &option))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gid = make_kgid(current_user_ns(), option);
 			if (!gid_valid(gid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opts->gid = gid;
 			break;
 		case Opt_mode:
 			if (match_octal(&args[0], &option))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opts->mode = option & S_IALLUGO;
 			break;
 		/*
@@ -119,6 +138,7 @@ static int debugfs_parse_options(char *data, struct debugfs_mount_opts *opts)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -165,13 +185,16 @@ static int debugfs_show_options(struct seq_file *m, struct dentry *root)
 		seq_printf(m, ",gid=%u",
 			   from_kgid_munged(&init_user_ns, opts->gid));
 	if (opts->mode != DEBUGFS_DEFAULT_MODE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_printf(m, ",mode=%o", opts->mode);
+}
 
 	return 0;
 }
 
 static void debugfs_evict_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	truncate_inode_pages_final(&inode->i_data);
 	clear_inode(inode);
 	if (S_ISLNK(inode->i_mode))
@@ -206,6 +229,7 @@ static int debug_fill_super(struct super_block *sb, void *data, int silent)
 	fsi = kzalloc(sizeof(struct debugfs_fs_info), GFP_KERNEL);
 	sb->s_fs_info = fsi;
 	if (!fsi) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOMEM;
 		goto fail;
 	}
@@ -263,7 +287,9 @@ struct dentry *debugfs_lookup(const char *name, struct dentry *parent)
 	struct dentry *dentry;
 
 	if (IS_ERR(parent))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (!parent)
 		parent = debugfs_mount->mnt_root;
@@ -287,15 +313,20 @@ static struct dentry *start_creating(const char *name, struct dentry *parent)
 	struct dentry *dentry;
 	int error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("debugfs: creating file '%s'\n",name);
 
 	if (IS_ERR(parent))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return parent;
+}
 
 	error = simple_pin_fs(&debug_fs_type, &debugfs_mount,
 			      &debugfs_mount_count);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(error);
+}
 
 	/* If the parent is not specified, we create it in the root.
 	 * We need the root dentry to do this, which is in the super
@@ -305,23 +336,28 @@ static struct dentry *start_creating(const char *name, struct dentry *parent)
 	if (!parent)
 		parent = debugfs_mount->mnt_root;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_lock(d_inode(parent));
 	dentry = lookup_one_len(name, parent, strlen(name));
 	if (!IS_ERR(dentry) && d_really_is_positive(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dput(dentry);
 		dentry = ERR_PTR(-EEXIST);
 	}
 
 	if (IS_ERR(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_unlock(d_inode(parent));
 		simple_release_fs(&debugfs_mount, &debugfs_mount_count);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dentry;
 }
 
 static struct dentry *failed_creating(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_unlock(d_inode(dentry->d_parent));
 	dput(dentry);
 	simple_release_fs(&debugfs_mount, &debugfs_mount_count);
@@ -348,11 +384,15 @@ static struct dentry *__debugfs_create_file(const char *name, umode_t mode,
 	dentry = start_creating(name, parent);
 
 	if (IS_ERR(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	inode = debugfs_get_inode(dentry->d_sb);
 	if (unlikely(!inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return failed_creating(dentry);
+}
 
 	inode->i_mode = mode;
 	inode->i_private = data;
@@ -474,6 +514,7 @@ struct dentry *debugfs_create_file_size(const char *name, umode_t mode,
 					const struct file_operations *fops,
 					loff_t file_size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dentry *de = debugfs_create_file(name, mode, parent, data, fops);
 
 	if (de)
@@ -506,11 +547,15 @@ struct dentry *debugfs_create_dir(const char *name, struct dentry *parent)
 	struct inode *inode;
 
 	if (IS_ERR(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	inode = debugfs_get_inode(dentry->d_sb);
 	if (unlikely(!inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return failed_creating(dentry);
+}
 
 	inode->i_mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;
 	inode->i_op = &simple_dir_inode_operations;
@@ -545,11 +590,15 @@ struct dentry *debugfs_create_automount(const char *name,
 	struct inode *inode;
 
 	if (IS_ERR(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	inode = debugfs_get_inode(dentry->d_sb);
 	if (unlikely(!inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return failed_creating(dentry);
+}
 
 	make_empty_dir_inode(inode);
 	inode->i_flags |= S_AUTOMOUNT;
@@ -594,16 +643,20 @@ struct dentry *debugfs_create_symlink(const char *name, struct dentry *parent,
 	struct inode *inode;
 	char *link = kstrdup(target, GFP_KERNEL);
 	if (!link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	dentry = start_creating(name, parent);
 	if (IS_ERR(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(link);
 		return NULL;
 	}
 
 	inode = debugfs_get_inode(dentry->d_sb);
 	if (unlikely(!inode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(link);
 		return failed_creating(dentry);
 	}
@@ -620,6 +673,7 @@ static int __debugfs_remove(struct dentry *dentry, struct dentry *parent)
 	int ret = 0;
 
 	if (simple_positive(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dget(dentry);
 		if (d_is_dir(dentry))
 			ret = simple_rmdir(d_inode(parent), dentry);
@@ -652,7 +706,9 @@ void debugfs_remove(struct dentry *dentry)
 	int ret;
 
 	if (IS_ERR_OR_NULL(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	parent = dentry->d_parent;
 	inode_lock(d_inode(parent));
@@ -683,7 +739,9 @@ void debugfs_remove_recursive(struct dentry *dentry)
 	struct dentry *child, *parent;
 
 	if (IS_ERR_OR_NULL(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	parent = dentry;
  down:
@@ -818,14 +876,19 @@ static int __init debugfs_init(void)
 
 	retval = sysfs_create_mount_point(kernel_kobj, "debug");
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	retval = register_filesystem(&debug_fs_type);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_remove_mount_point(kernel_kobj, "debug");
+}
 	else
 		debugfs_registered = true;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 core_initcall(debugfs_init);
diff --git a/fs/devpts/inode.c b/fs/devpts/inode.c
index e31d6ed..221de08 100644
--- a/fs/devpts/inode.c
+++ b/fs/devpts/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* -*- linux-c -*- --------------------------------------------------------- *
  *
  * linux/fs/devpts/inode.c
@@ -130,6 +132,7 @@ struct pts_fs_info {
 
 static inline struct pts_fs_info *DEVPTS_SB(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sb->s_fs_info;
 }
 
@@ -140,12 +143,16 @@ static int devpts_ptmx_path(struct path *path)
 
 	/* Has the devpts filesystem already been found? */
 	if (path->mnt->mnt_sb->s_magic == DEVPTS_SUPER_MAGIC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Is a devpts filesystem at "pts" in the same directory? */
 	err = path_pts(path);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	/* Is the path the root of a devpts filesystem? */
 	sb = path->mnt->mnt_sb;
@@ -153,6 +160,7 @@ static int devpts_ptmx_path(struct path *path)
 	    (path->mnt->mnt_root != sb->s_root))
 		return -ENODEV;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -167,6 +175,7 @@ struct vfsmount *devpts_mntget(struct file *filp, struct pts_fs_info *fsi)
 	err = devpts_ptmx_path(&path);
 	dput(path.dentry);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mntput(path.mnt);
 		return ERR_PTR(err);
 	}
@@ -253,30 +262,44 @@ static int parse_mount_options(char *data, int op, struct pts_mount_opts *opts)
 		switch (token) {
 		case Opt_uid:
 			if (match_int(&args[0], &option))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uid = make_kuid(current_user_ns(), option);
 			if (!uid_valid(uid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opts->uid = uid;
 			opts->setuid = 1;
 			break;
 		case Opt_gid:
 			if (match_int(&args[0], &option))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 			gid = make_kgid(current_user_ns(), option);
 			if (!gid_valid(gid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 			opts->gid = gid;
 			opts->setgid = 1;
 			break;
 		case Opt_mode:
 			if (match_octal(&args[0], &option))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 			opts->mode = option & S_IALLUGO;
 			break;
 		case Opt_ptmxmode:
 			if (match_octal(&args[0], &option))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 			opts->ptmxmode = option & S_IALLUGO;
 			break;
 		case Opt_newinstance:
@@ -285,6 +308,7 @@ static int parse_mount_options(char *data, int op, struct pts_mount_opts *opts)
 			if (match_int(&args[0], &option) ||
 			    option < 0 || option > NR_UNIX98_PTY_MAX)
 				return -EINVAL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opts->max = option;
 			break;
 		default:
@@ -293,6 +317,7 @@ static int parse_mount_options(char *data, int op, struct pts_mount_opts *opts)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -312,12 +337,14 @@ static int mknod_ptmx(struct super_block *sb)
 
 	/* If we have already created ptmx node, return */
 	if (fsi->ptmx_dentry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = 0;
 		goto out;
 	}
 
 	dentry = d_alloc_name(root, "ptmx");
 	if (!dentry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Unable to alloc dentry for ptmx node\n");
 		goto out;
 	}
@@ -327,6 +354,7 @@ static int mknod_ptmx(struct super_block *sb)
 	 */
 	inode = new_inode(sb);
 	if (!inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("Unable to alloc inode for ptmx node\n");
 		dput(dentry);
 		goto out;
@@ -353,6 +381,7 @@ static void update_ptmx_mode(struct pts_fs_info *fsi)
 {
 	struct inode *inode;
 	if (fsi->ptmx_dentry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode = d_inode(fsi->ptmx_dentry);
 		inode->i_mode = S_IFCHR|fsi->mount_opts.ptmxmode;
 	}
@@ -391,7 +420,9 @@ static int devpts_show_options(struct seq_file *seq, struct dentry *root)
 	seq_printf(seq, ",mode=%03o", opts->mode);
 	seq_printf(seq, ",ptmxmode=%03o", opts->ptmxmode);
 	if (opts->max < NR_UNIX98_PTY_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_printf(seq, ",max=%d", opts->max);
+}
 
 	return 0;
 }
@@ -408,8 +439,11 @@ static void *new_pts_fs_info(struct super_block *sb)
 
 	fsi = kzalloc(sizeof(struct pts_fs_info), GFP_KERNEL);
 	if (!fsi)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ida_init(&fsi->allocated_ptys);
 	fsi->mount_opts.mode = DEVPTS_DEFAULT_MODE;
 	fsi->mount_opts.ptmxmode = DEVPTS_DEFAULT_PTMX_MODE;
@@ -440,6 +474,7 @@ devpts_fill_super(struct super_block *s, void *data, int silent)
 	if (error)
 		goto fail;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -ENOMEM;
 	inode = new_inode(s);
 	if (!inode)
@@ -453,6 +488,7 @@ devpts_fill_super(struct super_block *s, void *data, int silent)
 
 	s->s_root = d_make_root(inode);
 	if (!s->s_root) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("get root dentry failed\n");
 		goto fail;
 	}
@@ -461,6 +497,7 @@ devpts_fill_super(struct super_block *s, void *data, int silent)
 	if (error)
 		goto fail_dput;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 fail_dput:
 	dput(s->s_root);
@@ -483,6 +520,7 @@ static struct dentry *devpts_mount(struct file_system_type *fs_type,
 
 static void devpts_kill_sb(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pts_fs_info *fsi = DEVPTS_SB(sb);
 
 	if (fsi)
@@ -510,24 +548,30 @@ int devpts_new_index(struct pts_fs_info *fsi)
 
 retry:
 	if (!ida_pre_get(&fsi->allocated_ptys, GFP_KERNEL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	mutex_lock(&allocated_ptys_lock);
 	if (pty_count >= (pty_limit -
 			  (fsi->mount_opts.reserve ? 0 : pty_reserve))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&allocated_ptys_lock);
 		return -ENOSPC;
 	}
 
 	ida_ret = ida_get_new(&fsi->allocated_ptys, &index);
 	if (ida_ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&allocated_ptys_lock);
 		if (ida_ret == -EAGAIN)
 			goto retry;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EIO;
 	}
 
 	if (index >= fsi->mount_opts.max) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ida_remove(&fsi->allocated_ptys, index);
 		mutex_unlock(&allocated_ptys_lock);
 		return -ENOSPC;
@@ -568,7 +612,9 @@ struct dentry *devpts_pty_new(struct pts_fs_info *fsi, int index, void *priv)
 
 	inode = new_inode(sb);
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	inode->i_ino = index + 3;
 	inode->i_uid = opts->setuid ? opts->uid : current_fsuid();
@@ -584,10 +630,12 @@ struct dentry *devpts_pty_new(struct pts_fs_info *fsi, int index, void *priv)
 		d_add(dentry, inode);
 		fsnotify_create(d_inode(root), dentry);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iput(inode);
 		dentry = ERR_PTR(-ENOMEM);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dentry;
 }
 
@@ -600,7 +648,9 @@ struct dentry *devpts_pty_new(struct pts_fs_info *fsi, int index, void *priv)
 void *devpts_get_priv(struct dentry *dentry)
 {
 	if (dentry->d_sb->s_magic != DEVPTS_SUPER_MAGIC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	return dentry->d_fsdata;
 }
 
diff --git a/fs/direct-io.c b/fs/direct-io.c
index b53e66d..9ad6448 100644
--- a/fs/direct-io.c
+++ b/fs/direct-io.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/direct-io.c
  *
@@ -157,6 +159,7 @@ static struct kmem_cache *dio_cache __read_mostly;
  */
 static inline unsigned dio_pages_present(struct dio_submit *sdio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sdio->tail - sdio->head;
 }
 
@@ -170,6 +173,7 @@ static inline int dio_refill_pages(struct dio *dio, struct dio_submit *sdio)
 	ret = iov_iter_get_pages(sdio->iter, dio->pages, LONG_MAX, DIO_PAGES,
 				&sdio->from);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret < 0 && sdio->blocks_available && (dio->op == REQ_OP_WRITE)) {
 		struct page *page = ZERO_PAGE(0);
 		/*
@@ -208,6 +212,7 @@ static inline int dio_refill_pages(struct dio *dio, struct dio_submit *sdio)
 static inline struct page *dio_get_page(struct dio *dio,
 					struct dio_submit *sdio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dio_pages_present(sdio) == 0) {
 		int ret;
 
@@ -244,7 +249,9 @@ static ssize_t dio_complete(struct dio *dio, ssize_t ret, unsigned int flags)
 	 * to preserve through this call.
 	 */
 	if (ret == -EIOCBQUEUED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 0;
+}
 
 	if (dio->result) {
 		transferred = dio->result;
@@ -315,6 +322,7 @@ static ssize_t dio_complete(struct dio *dio, ssize_t ret, unsigned int flags)
 
 static void dio_aio_complete_work(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dio *dio = container_of(work, struct dio, complete_work);
 
 	dio_complete(dio, 0, DIO_COMPLETE_ASYNC | DIO_COMPLETE_INVALIDATE);
@@ -335,6 +343,7 @@ static void dio_bio_end_aio(struct bio *bio)
 	/* cleanup the bio */
 	dio_bio_complete(dio, bio);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dio->bio_lock, flags);
 	remaining = --dio->refcount;
 	if (remaining == 1 && dio->waiter)
@@ -376,6 +385,7 @@ static void dio_bio_end_io(struct bio *bio)
 	struct dio *dio = bio->bi_private;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dio->bio_lock, flags);
 	bio->bi_private = dio->bio_list;
 	dio->bio_list = bio;
@@ -397,7 +407,9 @@ void dio_end_io(struct bio *bio)
 	struct dio *dio = bio->bi_private;
 
 	if (dio->is_async)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dio_bio_end_aio(bio);
+}
 	else
 		dio_bio_end_io(bio);
 }
@@ -416,6 +428,7 @@ dio_bio_alloc(struct dio *dio, struct dio_submit *sdio,
 	 */
 	bio = bio_alloc(GFP_KERNEL, nr_vecs);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bio_set_dev(bio, bdev);
 	bio->bi_iter.bi_sector = first_sector;
 	bio_set_op_attrs(bio, dio->op, dio->op_flags);
@@ -444,6 +457,7 @@ static inline void dio_bio_submit(struct dio *dio, struct dio_submit *sdio)
 
 	bio->bi_private = dio;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dio->bio_lock, flags);
 	dio->refcount++;
 	spin_unlock_irqrestore(&dio->bio_lock, flags);
@@ -469,6 +483,7 @@ static inline void dio_bio_submit(struct dio *dio, struct dio_submit *sdio)
  */
 static inline void dio_cleanup(struct dio *dio, struct dio_submit *sdio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (sdio->head < sdio->tail)
 		put_page(dio->pages[sdio->head++]);
 }
@@ -484,6 +499,7 @@ static struct bio *dio_await_one(struct dio *dio)
 	unsigned long flags;
 	struct bio *bio = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&dio->bio_lock, flags);
 
 	/*
@@ -521,6 +537,7 @@ static blk_status_t dio_bio_complete(struct dio *dio, struct bio *bio)
 	blk_status_t err = bio->bi_status;
 
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err == BLK_STS_AGAIN && (bio->bi_opf & REQ_NOWAIT))
 			dio->io_error = -EAGAIN;
 		else
@@ -554,6 +571,7 @@ static void dio_await_completion(struct dio *dio)
 {
 	struct bio *bio;
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bio = dio_await_one(dio);
 		if (bio)
 			dio_bio_complete(dio, bio);
@@ -572,6 +590,7 @@ static inline int dio_bio_reap(struct dio *dio, struct dio_submit *sdio)
 	int ret = 0;
 
 	if (sdio->reap_counter++ >= 64) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (dio->bio_list) {
 			unsigned long flags;
 			struct bio *bio;
@@ -603,7 +622,9 @@ int sb_init_dio_done_wq(struct super_block *sb)
 						      WQ_MEM_RECLAIM, 0,
 						      sb->s_id);
 	if (!wq)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	/*
 	 * This has to be atomic as more DIOs can race to create the workqueue
 	 */
@@ -619,7 +640,9 @@ static int dio_set_defer_completion(struct dio *dio)
 	struct super_block *sb = dio->inode->i_sb;
 
 	if (dio->defer_completion)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	dio->defer_completion = true;
 	if (!sb->s_dio_done_wq)
 		return sb_init_dio_done_wq(sb);
@@ -665,6 +688,7 @@ static int get_more_blocks(struct dio *dio, struct dio_submit *sdio,
 	 */
 	ret = dio->page_errors;
 	if (ret == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(sdio->block_in_file >= sdio->final_block_in_request);
 		fs_startblk = sdio->block_in_file >> sdio->blkfactor;
 		fs_endblk = (sdio->final_block_in_request - 1) >>
@@ -716,6 +740,7 @@ static inline int dio_new_bio(struct dio *dio, struct dio_submit *sdio,
 	ret = dio_bio_reap(dio, sdio);
 	if (ret)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sector = start_sector << (sdio->blkbits - 9);
 	nr_pages = min(sdio->pages_in_io, BIO_MAX_PAGES);
 	BUG_ON(nr_pages <= 0);
@@ -903,6 +928,7 @@ static inline void dio_zero_block(struct dio *dio, struct dio_submit *sdio,
 	struct page *page;
 
 	sdio->start_zero_done = 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!sdio->blkfactor || !buffer_new(map_bh))
 		return;
 
@@ -952,6 +978,7 @@ static int do_direct_IO(struct dio *dio, struct dio_submit *sdio,
 	const unsigned i_blkbits = blkbits + sdio->blkfactor;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (sdio->block_in_file < sdio->final_block_in_request) {
 		struct page *page;
 		size_t from, to;
@@ -1171,6 +1198,7 @@ do_blockdev_direct_IO(struct kiocb *iocb, struct inode *inode,
 	 */
 
 	if (align & blocksize_mask) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (bdev)
 			blkbits = blksize_bits(bdev_logical_block_size(bdev));
 		blocksize_mask = (1 << blkbits) - 1;
diff --git a/fs/efivarfs/super.c b/fs/efivarfs/super.c
index 5b68e42..cf3a734 100644
--- a/fs/efivarfs/super.c
+++ b/fs/efivarfs/super.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2012 Red Hat, Inc.
  * Copyright (C) 2012 Jeremy Kerr <jeremy.kerr@canonical.com>
@@ -22,6 +24,7 @@ LIST_HEAD(efivarfs_list);
 
 static void efivarfs_evict_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clear_inode(inode);
 }
 
@@ -51,7 +54,9 @@ static int efivarfs_d_compare(const struct dentry *dentry,
 	int guid = len - EFI_VARIABLE_GUID_LEN;
 
 	if (name->len != len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/* Case-sensitive compare for the variable name */
 	if (memcmp(str, name->name, guid))
@@ -68,7 +73,9 @@ static int efivarfs_d_hash(const struct dentry *dentry, struct qstr *qstr)
 	unsigned int len = qstr->len;
 
 	if (!efivarfs_valid_name(s, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	while (len-- > EFI_VARIABLE_GUID_LEN)
 		hash = partial_name_hash(*s++, hash);
@@ -98,7 +105,9 @@ static struct dentry *efivarfs_alloc_dentry(struct dentry *parent, char *name)
 
 	err = efivarfs_d_hash(parent, &q);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(err);
+}
 
 	d = d_alloc(parent, &q);
 	if (d)
@@ -122,7 +131,9 @@ static int efivarfs_callback(efi_char16_t *name16, efi_guid_t vendor,
 
 	entry = kzalloc(sizeof(*entry), GFP_KERNEL);
 	if (!entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	memcpy(entry->var.VariableName, name16, name_size);
 	memcpy(&(entry->var.VendorGuid), &vendor, sizeof(efi_guid_t));
@@ -183,6 +194,7 @@ static int efivarfs_callback(efi_char16_t *name16, efi_guid_t vendor,
 
 static int efivarfs_destroy(struct efivar_entry *entry, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int err = efivar_entry_remove(entry);
 
 	if (err)
@@ -209,7 +221,9 @@ static int efivarfs_fill_super(struct super_block *sb, void *data, int silent)
 
 	inode = efivarfs_get_inode(sb, NULL, S_IFDIR | 0755, 0, true);
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	inode->i_op = &efivarfs_dir_inode_operations;
 
 	root = d_make_root(inode);
@@ -229,11 +243,13 @@ static int efivarfs_fill_super(struct super_block *sb, void *data, int silent)
 static struct dentry *efivarfs_mount(struct file_system_type *fs_type,
 				    int flags, const char *dev_name, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mount_single(fs_type, flags, data, efivarfs_fill_super);
 }
 
 static void efivarfs_kill_sb(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kill_litter_super(sb);
 	efivarfs_sb = NULL;
 
@@ -251,16 +267,23 @@ static struct file_system_type efivarfs_type = {
 static __init int efivarfs_init(void)
 {
 	if (!efi_enabled(EFI_RUNTIME_SERVICES))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!efivars_kobject())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return register_filesystem(&efivarfs_type);
 }
 
 static __exit void efivarfs_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_filesystem(&efivarfs_type);
 }
 
diff --git a/fs/eventfd.c b/fs/eventfd.c
index 2fb4ead..c0a6b67 100644
--- a/fs/eventfd.c
+++ b/fs/eventfd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  fs/eventfd.c
  *
@@ -55,6 +57,7 @@ __u64 eventfd_signal(struct eventfd_ctx *ctx, __u64 n)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ctx->wqh.lock, flags);
 	if (ULLONG_MAX - ctx->count < n)
 		n = ULLONG_MAX - ctx->count;
@@ -74,6 +77,7 @@ static void eventfd_free_ctx(struct eventfd_ctx *ctx)
 
 static void eventfd_free(struct kref *kref)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct eventfd_ctx *ctx = container_of(kref, struct eventfd_ctx, kref);
 
 	eventfd_free_ctx(ctx);
@@ -87,6 +91,7 @@ static void eventfd_free(struct kref *kref)
  */
 struct eventfd_ctx *eventfd_ctx_get(struct eventfd_ctx *ctx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kref_get(&ctx->kref);
 	return ctx;
 }
@@ -163,9 +168,13 @@ static unsigned int eventfd_poll(struct file *file, poll_table *wait)
 	count = READ_ONCE(ctx->count);
 
 	if (count > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		events |= POLLIN;
+}
 	if (count == ULLONG_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		events |= POLLERR;
+}
 	if (ULLONG_MAX - 1 > count)
 		events |= POLLOUT;
 
@@ -196,6 +205,7 @@ int eventfd_ctx_remove_wait_queue(struct eventfd_ctx *ctx, wait_queue_entry_t *w
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ctx->wqh.lock, flags);
 	eventfd_ctx_do_read(ctx, cnt);
 	__remove_wait_queue(&ctx->wqh, wait);
@@ -230,24 +240,36 @@ ssize_t eventfd_ctx_read(struct eventfd_ctx *ctx, int no_wait, __u64 *cnt)
 	*cnt = 0;
 	res = -EAGAIN;
 	if (ctx->count > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (!no_wait) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__add_wait_queue(&ctx->wqh, &wait);
 		for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_current_state(TASK_INTERRUPTIBLE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ctx->count > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				res = 0;
 				break;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				res = -ERESTARTSYS;
 				break;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irq(&ctx->wqh.lock);
 			schedule();
 			spin_lock_irq(&ctx->wqh.lock);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__remove_wait_queue(&ctx->wqh, &wait);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__set_current_state(TASK_RUNNING);
 	}
 	if (likely(res == 0)) {
@@ -255,6 +277,7 @@ ssize_t eventfd_ctx_read(struct eventfd_ctx *ctx, int no_wait, __u64 *cnt)
 		if (waitqueue_active(&ctx->wqh))
 			wake_up_locked_poll(&ctx->wqh, POLLOUT);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(&ctx->wqh.lock);
 
 	return res;
@@ -269,10 +292,14 @@ static ssize_t eventfd_read(struct file *file, char __user *buf, size_t count,
 	__u64 cnt;
 
 	if (count < sizeof(cnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	res = eventfd_ctx_read(ctx, file->f_flags & O_NONBLOCK, &cnt);
 	if (res < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return res;
+}
 
 	return put_user(cnt, (__u64 __user *) buf) ? -EFAULT : sizeof(cnt);
 }
@@ -286,32 +313,51 @@ static ssize_t eventfd_write(struct file *file, const char __user *buf, size_t c
 	DECLARE_WAITQUEUE(wait, current);
 
 	if (count < sizeof(ucnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (copy_from_user(&ucnt, buf, sizeof(ucnt)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	if (ucnt == ULLONG_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&ctx->wqh.lock);
 	res = -EAGAIN;
 	if (ULLONG_MAX - ctx->count > ucnt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = sizeof(ucnt);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (!(file->f_flags & O_NONBLOCK)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__add_wait_queue(&ctx->wqh, &wait);
 		for (res = 0;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			set_current_state(TASK_INTERRUPTIBLE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ULLONG_MAX - ctx->count > ucnt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				res = sizeof(ucnt);
 				break;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				res = -ERESTARTSYS;
 				break;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irq(&ctx->wqh.lock);
 			schedule();
 			spin_lock_irq(&ctx->wqh.lock);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__remove_wait_queue(&ctx->wqh, &wait);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__set_current_state(TASK_RUNNING);
 	}
 	if (likely(res > 0)) {
@@ -319,6 +365,7 @@ static ssize_t eventfd_write(struct file *file, const char __user *buf, size_t c
 		if (waitqueue_active(&ctx->wqh))
 			wake_up_locked_poll(&ctx->wqh, POLLIN);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(&ctx->wqh.lock);
 
 	return res;
@@ -363,7 +410,9 @@ struct file *eventfd_fget(int fd)
 
 	file = fget(fd);
 	if (!file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EBADF);
+}
 	if (file->f_op != &eventfd_fops) {
 		fput(file);
 		return ERR_PTR(-EINVAL);
@@ -387,7 +436,9 @@ struct eventfd_ctx *eventfd_ctx_fdget(int fd)
 	struct eventfd_ctx *ctx;
 	struct fd f = fdget(fd);
 	if (!f.file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EBADF);
+}
 	ctx = eventfd_ctx_fileget(f.file);
 	fdput(f);
 	return ctx;
@@ -406,7 +457,9 @@ EXPORT_SYMBOL_GPL(eventfd_ctx_fdget);
 struct eventfd_ctx *eventfd_ctx_fileget(struct file *file)
 {
 	if (file->f_op != &eventfd_fops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	return eventfd_ctx_get(file->private_data);
 }
@@ -433,15 +486,22 @@ struct file *eventfd_file_create(unsigned int count, int flags)
 
 	/* Check the EFD_* constants for consistency.  */
 	BUILD_BUG_ON(EFD_CLOEXEC != O_CLOEXEC);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(EFD_NONBLOCK != O_NONBLOCK);
 
 	if (flags & ~EFD_FLAGS_SET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ctx = kmalloc(sizeof(*ctx), GFP_KERNEL);
 	if (!ctx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kref_init(&ctx->kref);
 	init_waitqueue_head(&ctx->wqh);
 	ctx->count = count;
@@ -450,8 +510,11 @@ struct file *eventfd_file_create(unsigned int count, int flags)
 	file = anon_inode_getfile("[eventfd]", &eventfd_fops, ctx,
 				  O_RDWR | (flags & EFD_SHARED_FCNTL_FLAGS));
 	if (IS_ERR(file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		eventfd_free_ctx(ctx);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return file;
 }
 
@@ -462,11 +525,15 @@ SYSCALL_DEFINE2(eventfd2, unsigned int, count, int, flags)
 
 	error = get_unused_fd_flags(flags & EFD_SHARED_FCNTL_FLAGS);
 	if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fd = error;
 
 	file = eventfd_file_create(count, flags);
 	if (IS_ERR(file)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = PTR_ERR(file);
 		goto err_put_unused_fd;
 	}
@@ -482,6 +549,7 @@ SYSCALL_DEFINE2(eventfd2, unsigned int, count, int, flags)
 
 SYSCALL_DEFINE1(eventfd, unsigned int, count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sys_eventfd2(count, 0);
 }
 
diff --git a/fs/eventpoll.c b/fs/eventpoll.c
index 2fabd19..63c3aab 100644
--- a/fs/eventpoll.c
+++ b/fs/eventpoll.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  fs/eventpoll.c (Efficient event retrieval implementation)
  *  Copyright (C) 2001,...,2009	 Davide Libenzi
@@ -322,6 +324,7 @@ static const struct file_operations eventpoll_fops;
 
 static inline int is_file_epoll(struct file *f)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return f->f_op == &eventpoll_fops;
 }
 
@@ -344,11 +347,13 @@ static inline int ep_cmp_ffd(struct epoll_filefd *p1,
 /* Tells us if the item is currently linked */
 static inline int ep_is_linked(struct list_head *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !list_empty(p);
 }
 
 static inline struct eppoll_entry *ep_pwq_from_wait(wait_queue_entry_t *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return container_of(p, struct eppoll_entry, wait);
 }
 
@@ -367,12 +372,14 @@ static inline struct epitem *ep_item_from_epqueue(poll_table *p)
 /* Tells if the epoll_ctl(2) operation needs an event copy from userspace */
 static inline int ep_op_has_event(int op)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return op != EPOLL_CTL_DEL;
 }
 
 /* Initialize the poll safe wake up structure */
 static void ep_nested_calls_init(struct nested_calls *ncalls)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_LIST_HEAD(&ncalls->tasks_call_list);
 	spin_lock_init(&ncalls->lock);
 }
@@ -395,6 +402,7 @@ static bool ep_busy_loop_end(void *p, unsigned long start_time)
 {
 	struct eventpoll *ep = p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ep_events_available(ep) || busy_loop_timeout(start_time);
 }
 #endif /* CONFIG_NET_RX_BUSY_POLL */
@@ -411,7 +419,9 @@ static void ep_busy_loop(struct eventpoll *ep, int nonblock)
 	unsigned int napi_id = READ_ONCE(ep->napi_id);
 
 	if ((napi_id >= MIN_NAPI_ID) && net_busy_loop_on())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		napi_busy_loop(napi_id, nonblock ? NULL : ep_busy_loop_end, ep);
+}
 #endif
 }
 
@@ -419,7 +429,9 @@ static inline void ep_reset_busy_poll_napi_id(struct eventpoll *ep)
 {
 #ifdef CONFIG_NET_RX_BUSY_POLL
 	if (ep->napi_id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ep->napi_id = 0;
+}
 #endif
 }
 
@@ -438,14 +450,21 @@ static inline void ep_set_busy_poll_napi_id(struct epitem *epi)
 	if (!net_busy_loop_on())
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sock = sock_from_file(epi->ffd.file, &err);
 	if (!sock)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sk = sock->sk;
 	if (!sk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	napi_id = READ_ONCE(sk->sk_napi_id);
 	ep = epi->ep;
 
@@ -454,7 +473,9 @@ static inline void ep_set_busy_poll_napi_id(struct epitem *epi)
 	 * Nothing to do if we already have this ID
 	 */
 	if (napi_id < MIN_NAPI_ID || napi_id == ep->napi_id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* record NAPI ID for use in next busy poll */
 	ep->napi_id = napi_id;
@@ -495,6 +516,7 @@ static int ep_call_nested(struct nested_calls *ncalls, int max_nests,
 	 * very much limited.
 	 */
 	list_for_each_entry(tncur, lsthead, llink) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (tncur->ctx == ctx &&
 		    (tncur->cookie == cookie || ++call_nests > max_nests)) {
 			/*
@@ -564,12 +586,14 @@ static inline void ep_wake_up_nested(wait_queue_head_t *wqueue,
 static inline void ep_wake_up_nested(wait_queue_head_t *wqueue,
 				     unsigned long events, int subclass)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	wake_up_poll(wqueue, events);
 }
 #endif
 
 static int ep_poll_wakeup_proc(void *priv, void *cookie, int call_nests)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ep_wake_up_nested((wait_queue_head_t *) cookie, POLLIN,
 			  1 + call_nests);
 	return 0;
@@ -587,6 +611,7 @@ static int ep_poll_wakeup_proc(void *priv, void *cookie, int call_nests)
  */
 static void ep_poll_safewake(wait_queue_head_t *wq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int this_cpu = get_cpu();
 
 	ep_call_nested(&poll_safewake_ncalls, EP_MAX_NESTS,
@@ -609,6 +634,7 @@ static void ep_remove_wait_queue(struct eppoll_entry *pwq)
 	whead = smp_load_acquire(&pwq->whead);
 	if (whead)
 		remove_wait_queue(whead, &pwq->wait);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -640,11 +666,14 @@ static inline struct wakeup_source *ep_wakeup_source(struct epitem *epi)
 /* call only when ep->mtx is held */
 static inline void ep_pm_stay_awake(struct epitem *epi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct wakeup_source *ws = ep_wakeup_source(epi);
 
 	if (ws)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__pm_stay_awake(ws);
 }
+}
 
 static inline bool ep_has_wakeup_source(struct epitem *epi)
 {
@@ -659,7 +688,10 @@ static inline void ep_pm_stay_awake_rcu(struct epitem *epi)
 	rcu_read_lock();
 	ws = rcu_dereference(epi->ws);
 	if (ws)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__pm_stay_awake(ws);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -750,10 +782,15 @@ static int ep_scan_ready_list(struct eventpoll *ep,
 		 * the ->poll() wait list (delayed after we release the lock).
 		 */
 		if (waitqueue_active(&ep->wq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			wake_up_locked(&ep->wq);
+}
 		if (waitqueue_active(&ep->poll_wait))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pwake++;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&ep->lock, flags);
 
 	if (!ep_locked)
@@ -761,13 +798,16 @@ static int ep_scan_ready_list(struct eventpoll *ep,
 
 	/* We have to call this outside the lock */
 	if (pwake)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ep_poll_safewake(&ep->poll_wait);
+}
 
 	return error;
 }
 
 static void epi_rcu_free(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct epitem *epi = container_of(head, struct epitem, rcu);
 	kmem_cache_free(epi_cache, epi);
 }
@@ -801,6 +841,7 @@ static int ep_remove(struct eventpoll *ep, struct epitem *epi)
 	spin_lock_irqsave(&ep->lock, flags);
 	if (ep_is_linked(&epi->rdllink))
 		list_del_init(&epi->rdllink);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&ep->lock, flags);
 
 	wakeup_source_unregister(ep_wakeup_source(epi));
@@ -825,7 +866,9 @@ static void ep_free(struct eventpoll *ep)
 
 	/* We need to release all tasks waiting for these file */
 	if (waitqueue_active(&ep->poll_wait))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ep_poll_safewake(&ep->poll_wait);
+}
 
 	/*
 	 * We need to lock this because we could be hit by
@@ -841,6 +884,7 @@ static void ep_free(struct eventpoll *ep)
 	 * Walks through the whole tree by unregistering poll callbacks.
 	 */
 	for (rbp = rb_first_cached(&ep->rbr); rbp; rbp = rb_next(rbp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		epi = rb_entry(rbp, struct epitem, rbn);
 
 		ep_unregister_pollwait(ep, epi);
@@ -857,6 +901,7 @@ static void ep_free(struct eventpoll *ep)
 	 */
 	mutex_lock(&ep->mtx);
 	while ((rbp = rb_first_cached(&ep->rbr)) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		epi = rb_entry(rbp, struct epitem, rbn);
 		ep_remove(ep, epi);
 		cond_resched();
@@ -896,8 +941,11 @@ static int ep_read_events_proc(struct eventpoll *ep, struct list_head *head,
 	init_poll_funcptr(&pt, NULL);
 
 	list_for_each_entry_safe(epi, tmp, head, rdllink) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ep_item_poll(epi, &pt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return POLLIN | POLLRDNORM;
+}
 		else {
 			/*
 			 * Item has been dropped into the ready list by the poll
@@ -909,6 +957,7 @@ static int ep_read_events_proc(struct eventpoll *ep, struct list_head *head,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -963,6 +1012,7 @@ static void ep_show_fdinfo(struct seq_file *m, struct file *f)
 	struct rb_node *rbp;
 
 	mutex_lock(&ep->mtx);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (rbp = rb_first_cached(&ep->rbr); rbp; rbp = rb_next(rbp)) {
 		struct epitem *epi = rb_entry(rbp, struct epitem, rbn);
 		struct inode *inode = file_inode(epi->ffd.file);
@@ -1067,6 +1117,7 @@ static struct epitem *ep_find(struct eventpoll *ep, struct file *file, int fd)
 
 	ep_set_ffd(&ffd, file, fd);
 	for (rbp = ep->rbr.rb_root.rb_node; rbp; ) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		epi = rb_entry(rbp, struct epitem, rbn);
 		kcmp = ep_cmp_ffd(&ffd, &epi->ffd);
 		if (kcmp > 0)
@@ -1074,6 +1125,7 @@ static struct epitem *ep_find(struct eventpoll *ep, struct file *file, int fd)
 		else if (kcmp < 0)
 			rbp = rbp->rb_left;
 		else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			epir = epi;
 			break;
 		}
@@ -1196,14 +1248,19 @@ static int ep_poll_callback(wait_queue_entry_t *wait, unsigned mode, int sync, v
 	if (waitqueue_active(&ep->wq)) {
 		if ((epi->event.events & EPOLLEXCLUSIVE) &&
 					!((unsigned long)key & POLLFREE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			switch ((unsigned long)key & EPOLLINOUT_BITS) {
 			case POLLIN:
 				if (epi->event.events & POLLIN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ewake = 1;
+}
 				break;
 			case POLLOUT:
 				if (epi->event.events & POLLOUT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ewake = 1;
+}
 				break;
 			case 0:
 				ewake = 1;
@@ -1213,17 +1270,23 @@ static int ep_poll_callback(wait_queue_entry_t *wait, unsigned mode, int sync, v
 		wake_up_locked(&ep->wq);
 	}
 	if (waitqueue_active(&ep->poll_wait))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pwake++;
+}
 
 out_unlock:
 	spin_unlock_irqrestore(&ep->lock, flags);
 
 	/* We have to call this outside the lock */
 	if (pwake)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ep_poll_safewake(&ep->poll_wait);
+}
 
 	if (!(epi->event.events & EPOLLEXCLUSIVE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ewake = 1;
+}
 
 	if ((unsigned long)key & POLLFREE) {
 		/*
@@ -1251,6 +1314,7 @@ static int ep_poll_callback(wait_queue_entry_t *wait, unsigned mode, int sync, v
 static void ep_ptable_queue_proc(struct file *file, wait_queue_head_t *whead,
 				 poll_table *pt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct epitem *epi = ep_item_from_epqueue(pt);
 	struct eppoll_entry *pwq;
 
@@ -1259,7 +1323,9 @@ static void ep_ptable_queue_proc(struct file *file, wait_queue_head_t *whead,
 		pwq->whead = whead;
 		pwq->base = epi;
 		if (epi->event.events & EPOLLEXCLUSIVE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			add_wait_queue_exclusive(whead, &pwq->wait);
+}
 		else
 			add_wait_queue(whead, &pwq->wait);
 		list_add_tail(&pwq->llink, &epi->pwqlist);
@@ -1278,7 +1344,9 @@ static void ep_rbtree_insert(struct eventpoll *ep, struct epitem *epi)
 	bool leftmost = true;
 
 	while (*p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = *p;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		epic = rb_entry(parent, struct epitem, rbn);
 		kcmp = ep_cmp_ffd(&epi->ffd, &epic->ffd);
 		if (kcmp > 0) {
@@ -1323,6 +1391,7 @@ static void path_count_init(void)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < PATH_ARR_SIZE; i++)
 		path_count[i] = 0;
 }
@@ -1336,6 +1405,7 @@ static int reverse_path_check_proc(void *priv, void *cookie, int call_nests)
 
 	/* CTL_DEL can remove links here, but that can't increase our count */
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(epi, &file->f_ep_links, fllink) {
 		child_file = epi->ep->file;
 		if (is_file_epoll(child_file)) {
@@ -1395,6 +1465,7 @@ static int ep_create_wakeup_source(struct epitem *epi)
 	struct wakeup_source *ws;
 
 	if (!epi->ep->ws) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		epi->ep->ws = wakeup_source_register("eventpoll");
 		if (!epi->ep->ws)
 			return -ENOMEM;
@@ -1413,6 +1484,7 @@ static int ep_create_wakeup_source(struct epitem *epi)
 /* rare code path, only used when EPOLL_CTL_MOD removes a wakeup source */
 static noinline void ep_destroy_wakeup_source(struct epitem *epi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct wakeup_source *ws = ep_wakeup_source(epi);
 
 	RCU_INIT_POINTER(epi->ws, NULL);
@@ -1440,9 +1512,13 @@ static int ep_insert(struct eventpoll *ep, struct epoll_event *event,
 
 	user_watches = atomic_long_read(&ep->user->epoll_watches);
 	if (unlikely(user_watches >= max_user_watches))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSPC;
+}
 	if (!(epi = kmem_cache_alloc(epi_cache, GFP_KERNEL)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/* Item initialization follow here ... */
 	INIT_LIST_HEAD(&epi->rdllink);
@@ -1454,10 +1530,12 @@ static int ep_insert(struct eventpoll *ep, struct epoll_event *event,
 	epi->nwait = 0;
 	epi->next = EP_UNACTIVE_PTR;
 	if (epi->event.events & EPOLLWAKEUP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = ep_create_wakeup_source(epi);
 		if (error)
 			goto error_create_wakeup_source;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		RCU_INIT_POINTER(epi->ws, NULL);
 	}
 
@@ -1514,17 +1592,23 @@ static int ep_insert(struct eventpoll *ep, struct epoll_event *event,
 		if (waitqueue_active(&ep->wq))
 			wake_up_locked(&ep->wq);
 		if (waitqueue_active(&ep->poll_wait))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pwake++;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&ep->lock, flags);
 
 	atomic_long_inc(&ep->user->epoll_watches);
 
 	/* We have to call this outside the lock */
 	if (pwake)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ep_poll_safewake(&ep->poll_wait);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 error_remove_epi:
@@ -1544,8 +1628,12 @@ static int ep_insert(struct eventpoll *ep, struct epoll_event *event,
 	 * And ep_insert() is called with "mtx" held.
 	 */
 	spin_lock_irqsave(&ep->lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ep_is_linked(&epi->rdllink))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del_init(&epi->rdllink);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&ep->lock, flags);
 
 	wakeup_source_unregister(ep_wakeup_source(epi));
@@ -1576,9 +1664,13 @@ static int ep_modify(struct eventpoll *ep, struct epitem *epi, struct epoll_even
 	epi->event.events = event->events; /* need barrier below */
 	epi->event.data = event->data; /* protected by mtx */
 	if (epi->event.events & EPOLLWAKEUP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ep_has_wakeup_source(epi))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ep_create_wakeup_source(epi);
+}
 	} else if (ep_has_wakeup_source(epi)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ep_destroy_wakeup_source(epi);
 	}
 
@@ -1613,6 +1705,7 @@ static int ep_modify(struct eventpoll *ep, struct epitem *epi, struct epoll_even
 	 * list, push it inside.
 	 */
 	if (revents & event->events) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irq(&ep->lock);
 		if (!ep_is_linked(&epi->rdllink)) {
 			list_add_tail(&epi->rdllink, &ep->rdllist);
@@ -1622,14 +1715,19 @@ static int ep_modify(struct eventpoll *ep, struct epitem *epi, struct epoll_even
 			if (waitqueue_active(&ep->wq))
 				wake_up_locked(&ep->wq);
 			if (waitqueue_active(&ep->poll_wait))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pwake++;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irq(&ep->lock);
 	}
 
 	/* We have to call this outside the lock */
 	if (pwake)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ep_poll_safewake(&ep->poll_wait);
+}
 
 	return 0;
 }
@@ -1667,8 +1765,12 @@ static int ep_send_events_proc(struct eventpoll *ep, struct list_head *head,
 		 */
 		ws = ep_wakeup_source(epi);
 		if (ws) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ws->active)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__pm_stay_awake(ep->ws);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__pm_relax(ws);
 		}
 
@@ -1685,8 +1787,10 @@ static int ep_send_events_proc(struct eventpoll *ep, struct list_head *head,
 		if (revents) {
 			if (__put_user(revents, &uevent->events) ||
 			    __put_user(epi->event.data, &uevent->data)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				list_add(&epi->rdllink, head);
 				ep_pm_stay_awake(epi);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return eventcnt ? eventcnt : -EFAULT;
 			}
 			eventcnt++;
@@ -1711,6 +1815,7 @@ static int ep_send_events_proc(struct eventpoll *ep, struct list_head *head,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return eventcnt;
 }
 
@@ -1815,23 +1920,29 @@ static int ep_poll(struct eventpoll *ep, struct epoll_event __user *events,
 			 * repeatedly.
 			 */
 			if (fatal_signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				res = -EINTR;
 				break;
 			}
 			if (ep_events_available(ep) || timed_out)
 				break;
 			if (signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				res = -EINTR;
 				break;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irqrestore(&ep->lock, flags);
 			if (!schedule_hrtimeout_range(to, slack, HRTIMER_MODE_ABS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				timed_out = 1;
+}
 
 			spin_lock_irqsave(&ep->lock, flags);
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__remove_wait_queue(&ep->wq, &wait);
 		__set_current_state(TASK_RUNNING);
 	}
@@ -1880,6 +1991,7 @@ static int ep_loop_check_proc(void *priv, void *cookie, int call_nests)
 	mutex_lock_nested(&ep->mtx, call_nests + 1);
 	ep->visited = 1;
 	list_add(&ep->visited_list_link, &visited_list);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (rbp = rb_first_cached(&ep->rbr); rbp; rbp = rb_next(rbp)) {
 		epi = rb_entry(rbp, struct epitem, rbn);
 		if (unlikely(is_file_epoll(epi->ffd.file))) {
@@ -1963,25 +2075,31 @@ SYSCALL_DEFINE1(epoll_create1, int, flags)
 	BUILD_BUG_ON(EPOLL_CLOEXEC != O_CLOEXEC);
 
 	if (flags & ~EPOLL_CLOEXEC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	/*
 	 * Create the internal data structure ("struct eventpoll").
 	 */
 	error = ep_alloc(&ep);
 	if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	/*
 	 * Creates all the items needed to setup an eventpoll file. That is,
 	 * a file structure and a free file descriptor.
 	 */
 	fd = get_unused_fd_flags(O_RDWR | (flags & O_CLOEXEC));
 	if (fd < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = fd;
 		goto out_free_ep;
 	}
 	file = anon_inode_getfile("[eventpoll]", &eventpoll_fops, ep,
 				 O_RDWR | (flags & O_CLOEXEC));
 	if (IS_ERR(file)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = PTR_ERR(file);
 		goto out_free_fd;
 	}
@@ -1999,7 +2117,9 @@ SYSCALL_DEFINE1(epoll_create1, int, flags)
 SYSCALL_DEFINE1(epoll_create, int, size)
 {
 	if (size <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	return sys_epoll_create1(0);
 }
@@ -2025,6 +2145,7 @@ SYSCALL_DEFINE4(epoll_ctl, int, epfd, int, op, int, fd,
 	    copy_from_user(&epds, event, sizeof(struct epoll_event)))
 		goto error_return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EBADF;
 	f = fdget(epfd);
 	if (!f.file)
@@ -2059,8 +2180,10 @@ SYSCALL_DEFINE4(epoll_ctl, int, epfd, int, op, int, fd,
 	 * Also, we do not currently supported nested exclusive wakeups.
 	 */
 	if (ep_op_has_event(op) && (epds.events & EPOLLEXCLUSIVE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (op == EPOLL_CTL_MOD)
 			goto error_tgt_fput;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (op == EPOLL_CTL_ADD && (is_file_epoll(tf.file) ||
 				(epds.events & ~EPOLLEXCLUSIVE_OK_BITS)))
 			goto error_tgt_fput;
@@ -2091,20 +2214,26 @@ SYSCALL_DEFINE4(epoll_ctl, int, epfd, int, op, int, fd,
 	if (op == EPOLL_CTL_ADD) {
 		if (!list_empty(&f.file->f_ep_links) ||
 						is_file_epoll(tf.file)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			full_check = 1;
 			mutex_unlock(&ep->mtx);
 			mutex_lock(&epmutex);
 			if (is_file_epoll(tf.file)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				error = -ELOOP;
 				if (ep_loop_check(ep, tf.file) != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					clear_tfile_check_list();
 					goto error_tgt_fput;
 				}
 			} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				list_add(&tf.file->f_tfile_llink,
 							&tfile_check_list);
+}
 			mutex_lock_nested(&ep->mtx, 0);
 			if (is_file_epoll(tf.file)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				tep = tf.file->private_data;
 				mutex_lock_nested(&tep->mtx, 1);
 			}
@@ -2125,9 +2254,13 @@ SYSCALL_DEFINE4(epoll_ctl, int, epfd, int, op, int, fd,
 			epds.events |= POLLERR | POLLHUP;
 			error = ep_insert(ep, &epds, tf.file, fd, full_check);
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -EEXIST;
+}
 		if (full_check)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			clear_tfile_check_list();
+}
 		break;
 	case EPOLL_CTL_DEL:
 		if (epi)
@@ -2142,16 +2275,22 @@ SYSCALL_DEFINE4(epoll_ctl, int, epfd, int, op, int, fd,
 				error = ep_modify(ep, epi, &epds);
 			}
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -ENOENT;
+}
 		break;
 	}
 	if (tep != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&tep->mtx);
+}
 	mutex_unlock(&ep->mtx);
 
 error_tgt_fput:
 	if (full_check)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&epmutex);
+}
 
 	fdput(tf);
 error_fput:
@@ -2174,16 +2313,22 @@ SYSCALL_DEFINE4(epoll_wait, int, epfd, struct epoll_event __user *, events,
 
 	/* The maximum number of event must be greater than zero */
 	if (maxevents <= 0 || maxevents > EP_MAX_EVENTS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* Verify that the area passed by the user is writeable */
 	if (!access_ok(VERIFY_WRITE, events, maxevents * sizeof(struct epoll_event)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	/* Get the "struct file *" for the eventpoll file */
 	f = fdget(epfd);
 	if (!f.file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	/*
 	 * We have to check that the file structure underneath the fd
@@ -2224,9 +2369,13 @@ SYSCALL_DEFINE6(epoll_pwait, int, epfd, struct epoll_event __user *, events,
 	 */
 	if (sigmask) {
 		if (sigsetsize != sizeof(sigset_t))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 		if (copy_from_user(&ksigmask, sigmask, sizeof(ksigmask)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 		sigsaved = current->blocked;
 		set_current_blocked(&ksigmask);
 	}
@@ -2267,6 +2416,7 @@ COMPAT_SYSCALL_DEFINE6(epoll_pwait, int, epfd,
 	 * we apply it here.
 	 */
 	if (sigmask) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sigsetsize != sizeof(compat_sigset_t))
 			return -EINVAL;
 		if (copy_from_user(&csigmask, sigmask, sizeof(csigmask)))
diff --git a/fs/exec.c b/fs/exec.c
index 0da4d74..0229dd8 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/exec.c
  *
@@ -81,7 +83,9 @@ void __register_binfmt(struct linux_binfmt * fmt, int insert)
 {
 	BUG_ON(!fmt);
 	if (WARN_ON(!fmt->load_binary))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	write_lock(&binfmt_lock);
 	insert ? list_add(&fmt->lh, &formats) :
 		 list_add_tail(&fmt->lh, &formats);
@@ -92,6 +96,7 @@ EXPORT_SYMBOL(__register_binfmt);
 
 void unregister_binfmt(struct linux_binfmt * fmt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_lock(&binfmt_lock);
 	list_del(&fmt->lh);
 	write_unlock(&binfmt_lock);
@@ -133,30 +138,38 @@ SYSCALL_DEFINE1(uselib, const char __user *, library)
 	if (IS_ERR(tmp))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	file = do_filp_open(AT_FDCWD, tmp, &uselib_flags);
 	putname(tmp);
 	error = PTR_ERR(file);
 	if (IS_ERR(file))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EINVAL;
 	if (!S_ISREG(file_inode(file)->i_mode))
 		goto exit;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EACCES;
 	if (path_noexec(&file->f_path))
 		goto exit;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fsnotify_open(file);
 
 	error = -ENOEXEC;
 
 	read_lock(&binfmt_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(fmt, &formats, lh) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!fmt->load_shlib)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!try_module_get(fmt->module))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_unlock(&binfmt_lock);
 		error = fmt->load_shlib(file);
 		read_lock(&binfmt_lock);
@@ -164,6 +177,7 @@ SYSCALL_DEFINE1(uselib, const char __user *, library)
 		if (error != -ENOEXEC)
 			break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock(&binfmt_lock);
 exit:
 	fput(file);
@@ -185,7 +199,9 @@ static void acct_arg_size(struct linux_binprm *bprm, unsigned long pages)
 	long diff = (long)(pages - bprm->vma_pages);
 
 	if (!mm || !diff)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	bprm->vma_pages = pages;
 	add_mm_counter(mm, MM_ANONPAGES, diff);
@@ -207,7 +223,9 @@ static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
 #endif
 
 	if (write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gup_flags |= FOLL_WRITE;
+}
 
 	/*
 	 * We are doing an exec().  'current' is the process
@@ -216,7 +234,9 @@ static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
 	ret = get_user_pages_remote(current, bprm->mm, pos, 1, gup_flags,
 			&page, NULL, NULL);
 	if (ret <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (write) {
 		unsigned long size = bprm->vma->vm_end - bprm->vma->vm_start;
@@ -281,6 +301,7 @@ static void free_arg_pages(struct linux_binprm *bprm)
 static void flush_arg_page(struct linux_binprm *bprm, unsigned long pos,
 		struct page *page)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flush_cache_page(bprm->vma, pos, page_to_pfn(page));
 }
 
@@ -292,9 +313,12 @@ static int __bprm_mm_init(struct linux_binprm *bprm)
 
 	bprm->vma = vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);
 	if (!vma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (down_write_killable(&mm->mmap_sem)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINTR;
 		goto err_free;
 	}
@@ -415,14 +439,17 @@ static int bprm_mm_init(struct linux_binprm *bprm)
 	if (err)
 		goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err:
 	if (mm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bprm->mm = NULL;
 		mmdrop(mm);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -447,15 +474,21 @@ static const char __user *get_user_arg_ptr(struct user_arg_ptr argv, int nr)
 		compat_uptr_t compat;
 
 		if (get_user(compat, argv.ptr.compat + nr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-EFAULT);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return compat_ptr(compat);
 	}
 #endif
 
 	if (get_user(native, argv.ptr.native + nr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EFAULT);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return native;
 }
 
@@ -474,17 +507,24 @@ static int count(struct user_arg_ptr argv, int max)
 				break;
 
 			if (IS_ERR(p))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EFAULT;
+}
 
 			if (i >= max)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -E2BIG;
+}
 			++i;
 
 			if (fatal_signal_pending(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -ERESTARTNOHAND;
+}
 			cond_resched();
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return i;
 }
 
@@ -515,6 +555,7 @@ static int copy_strings(int argc, struct user_arg_ptr argv,
 		if (!len)
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -E2BIG;
 		if (!valid_arg_len(bprm, len))
 			goto out;
@@ -528,6 +569,7 @@ static int copy_strings(int argc, struct user_arg_ptr argv,
 			int offset, bytes_to_copy;
 
 			if (fatal_signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -ERESTARTNOHAND;
 				goto out;
 			}
@@ -535,11 +577,16 @@ static int copy_strings(int argc, struct user_arg_ptr argv,
 
 			offset = pos % PAGE_SIZE;
 			if (offset == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				offset = PAGE_SIZE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bytes_to_copy = offset;
 			if (bytes_to_copy > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				bytes_to_copy = len;
+}
 
 			offset -= bytes_to_copy;
 			pos -= bytes_to_copy;
@@ -551,29 +598,35 @@ static int copy_strings(int argc, struct user_arg_ptr argv,
 
 				page = get_arg_page(bprm, pos, 1);
 				if (!page) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ret = -E2BIG;
 					goto out;
 				}
 
 				if (kmapped_page) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					flush_kernel_dcache_page(kmapped_page);
 					kunmap(kmapped_page);
 					put_arg_page(kmapped_page);
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kmapped_page = page;
 				kaddr = kmap(kmapped_page);
 				kpos = pos & PAGE_MASK;
 				flush_arg_page(bprm, kpos, kmapped_page);
 			}
 			if (copy_from_user(kaddr+offset, str, bytes_to_copy)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EFAULT;
 				goto out;
 			}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = 0;
 out:
 	if (kmapped_page) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flush_kernel_dcache_page(kmapped_page);
 		kunmap(kmapped_page);
 		put_arg_page(kmapped_page);
@@ -632,13 +685,17 @@ static int shift_arg_pages(struct vm_area_struct *vma, unsigned long shift)
 	 * and where we are
 	 */
 	if (vma != find_vma(mm, new_start))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	/*
 	 * cover the whole range: [new_start, old_end)
 	 */
 	if (vma_adjust(vma, new_start, old_end, vma->vm_pgoff, NULL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/*
 	 * move the page tables downwards, on failure we rely on
@@ -728,11 +785,15 @@ int setup_arg_pages(struct linux_binprm *bprm,
 #endif
 
 	if (bprm->loader)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bprm->loader -= stack_shift;
+}
 	bprm->exec -= stack_shift;
 
 	if (down_write_killable(&mm->mmap_sem))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINTR;
+}
 
 	vm_flags = VM_STACK_FLAGS;
 
@@ -742,9 +803,13 @@ int setup_arg_pages(struct linux_binprm *bprm,
 	 * (arch default) otherwise.
 	 */
 	if (unlikely(executable_stack == EXSTACK_ENABLE_X))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vm_flags |= VM_EXEC;
+}
 	else if (executable_stack == EXSTACK_DISABLE_X)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vm_flags &= ~VM_EXEC;
+}
 	vm_flags |= mm->def_flags;
 	vm_flags |= VM_STACK_INCOMPLETE_SETUP;
 
@@ -778,14 +843,18 @@ int setup_arg_pages(struct linux_binprm *bprm,
 		stack_base = vma->vm_end + stack_expand;
 #else
 	if (stack_size + stack_expand > rlim_stack)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		stack_base = vma->vm_end - rlim_stack;
+}
 	else
 		stack_base = vma->vm_start - stack_expand;
 #endif
 	current->mm->start_stack = bprm->p;
 	ret = expand_stack(vma, stack_base);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EFAULT;
+}
 
 out_unlock:
 	up_write(&mm->mmap_sem);
@@ -840,16 +909,23 @@ static struct file *do_open_execat(int fd, struct filename *name, int flags)
 	};
 
 	if ((flags & ~(AT_SYMLINK_NOFOLLOW | AT_EMPTY_PATH)) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 	if (flags & AT_SYMLINK_NOFOLLOW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		open_exec_flags.lookup_flags &= ~LOOKUP_FOLLOW;
+}
 	if (flags & AT_EMPTY_PATH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		open_exec_flags.lookup_flags |= LOOKUP_EMPTY;
+}
 
 	file = do_filp_open(fd, name, &open_exec_flags);
 	if (IS_ERR(file))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EACCES;
 	if (!S_ISREG(file_inode(file)->i_mode))
 		goto exit;
@@ -892,6 +968,7 @@ int kernel_read_file(struct file *file, void **buf, loff_t *size,
 	ssize_t bytes = 0;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!S_ISREG(file_inode(file)->i_mode) || max_size < 0)
 		return -EINVAL;
 
@@ -961,6 +1038,7 @@ int kernel_read_file_from_path(const char *path, void **buf, loff_t *size,
 	struct file *file;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!path || !*path)
 		return -EINVAL;
 
@@ -977,6 +1055,7 @@ EXPORT_SYMBOL_GPL(kernel_read_file_from_path);
 int kernel_read_file_from_fd(int fd, void **buf, loff_t *size, loff_t max_size,
 			     enum kernel_read_file_id id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fd f = fdget(fd);
 	int ret = -EBADF;
 
@@ -992,6 +1071,7 @@ EXPORT_SYMBOL_GPL(kernel_read_file_from_fd);
 
 ssize_t read_code(struct file *file, unsigned long addr, loff_t pos, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ssize_t res = vfs_read(file, (void __user *)addr, len, &pos);
 	if (res > 0)
 		flush_icache_range(addr, addr + len);
@@ -1019,10 +1099,12 @@ static int exec_mmap(struct mm_struct *mm)
 		 */
 		down_read(&old_mm->mmap_sem);
 		if (unlikely(old_mm->core_state)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up_read(&old_mm->mmap_sem);
 			return -EINTR;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	task_lock(tsk);
 	active_mm = tsk->active_mm;
 	tsk->mm = mm;
@@ -1078,12 +1160,15 @@ static int de_thread(struct task_struct *tsk)
 
 	while (sig->notify_count) {
 		__set_current_state(TASK_KILLABLE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irq(lock);
 		schedule();
 		if (unlikely(__fatal_signal_pending(tsk)))
 			goto killed;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irq(lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(lock);
 
 	/*
@@ -1104,7 +1189,9 @@ static int de_thread(struct task_struct *tsk)
 			sig->notify_count = -1;
 			if (likely(leader->exit_state))
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__set_current_state(TASK_KILLABLE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			write_unlock_irq(&tasklist_lock);
 			cgroup_threadgroup_change_end(tsk);
 			schedule();
@@ -1162,7 +1249,10 @@ static int de_thread(struct task_struct *tsk)
 		 * the tracer wont't block again waiting for this thread.
 		 */
 		if (unlikely(leader->ptrace))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__wake_up_parent(leader, leader->parent);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_unlock_irq(&tasklist_lock);
 		cgroup_threadgroup_change_end(tsk);
 
@@ -1189,14 +1279,19 @@ static int de_thread(struct task_struct *tsk)
 		 */
 		newsighand = kmem_cache_alloc(sighand_cachep, GFP_KERNEL);
 		if (!newsighand)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_set(&newsighand->count, 1);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(newsighand->action, oldsighand->action,
 		       sizeof(newsighand->action));
 
 		write_lock_irq(&tasklist_lock);
 		spin_lock(&oldsighand->siglock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_assign_pointer(tsk->sighand, newsighand);
 		spin_unlock(&oldsighand->siglock);
 		write_unlock_irq(&tasklist_lock);
@@ -1205,6 +1300,7 @@ static int de_thread(struct task_struct *tsk)
 	}
 
 	BUG_ON(!thread_group_leader(tsk));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 killed:
@@ -1218,6 +1314,7 @@ static int de_thread(struct task_struct *tsk)
 
 char *__get_task_comm(char *buf, size_t buf_size, struct task_struct *tsk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	task_lock(tsk);
 	strncpy(buf, tsk->comm, buf_size);
 	task_unlock(tsk);
@@ -1232,6 +1329,7 @@ EXPORT_SYMBOL_GPL(__get_task_comm);
 
 void __set_task_comm(struct task_struct *tsk, const char *buf, bool exec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	task_lock(tsk);
 	trace_task_rename(tsk, buf);
 	strlcpy(tsk->comm, buf, sizeof(tsk->comm));
@@ -1302,6 +1400,7 @@ EXPORT_SYMBOL(flush_old_exec);
 
 void would_dump(struct linux_binprm *bprm, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	if (inode_permission(inode, MAY_READ) < 0) {
 		struct user_namespace *old, *user_ns;
@@ -1309,11 +1408,14 @@ void would_dump(struct linux_binprm *bprm, struct file *file)
 
 		/* Ensure mm->user_ns contains the executable */
 		user_ns = old = bprm->mm->user_ns;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while ((user_ns != &init_user_ns) &&
 		       !privileged_wrt_inode_uidgid(user_ns, inode))
 			user_ns = user_ns->parent;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (old != user_ns) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bprm->mm->user_ns = get_user_ns(user_ns);
 			put_user_ns(old);
 		}
@@ -1342,7 +1444,9 @@ void setup_new_exec(struct linux_binprm * bprm)
 		 * needing to clean up the change on failure.
 		 */
 		if (current->signal->rlim[RLIMIT_STACK].rlim_cur > _STK_LIM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			current->signal->rlim[RLIMIT_STACK].rlim_cur = _STK_LIM;
+}
 	}
 
 	arch_pick_mmap_layout(current->mm);
@@ -1387,18 +1491,24 @@ EXPORT_SYMBOL(setup_new_exec);
 int prepare_bprm_creds(struct linux_binprm *bprm)
 {
 	if (mutex_lock_interruptible(&current->signal->cred_guard_mutex))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ERESTARTNOINTR;
+}
 
 	bprm->cred = prepare_exec_creds();
 	if (likely(bprm->cred))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&current->signal->cred_guard_mutex);
 	return -ENOMEM;
 }
 
 static void free_bprm(struct linux_binprm *bprm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	free_arg_pages(bprm);
 	if (bprm->cred) {
 		mutex_unlock(&current->signal->cred_guard_mutex);
@@ -1418,10 +1528,14 @@ int bprm_change_interp(const char *interp, struct linux_binprm *bprm)
 {
 	/* If a binfmt changed the interp, free it first. */
 	if (bprm->interp != bprm->filename)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(bprm->interp);
+}
 	bprm->interp = kstrdup(interp, GFP_KERNEL);
 	if (!bprm->interp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 EXPORT_SYMBOL(bprm_change_interp);
@@ -1443,7 +1557,9 @@ void install_exec_creds(struct linux_binprm *bprm)
 	 * by commit_creds() above
 	 */
 	if (get_dumpable(current->mm) != SUID_DUMP_USER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		perf_event_exit_task(current);
+}
 	/*
 	 * cred_guard_mutex must be held at least to this point to prevent
 	 * ptrace_attach() from altering our determination of the task's
@@ -1461,6 +1577,7 @@ EXPORT_SYMBOL(install_exec_creds);
  */
 static void check_unsafe_exec(struct linux_binprm *bprm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct task_struct *p = current, *t;
 	unsigned n_fs;
 
@@ -1472,8 +1589,11 @@ static void check_unsafe_exec(struct linux_binprm *bprm)
 	 * mess up.
 	 */
 	if (task_no_new_privs(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bprm->unsafe |= LSM_UNSAFE_NO_NEW_PRIVS;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	t = p;
 	n_fs = 1;
 	spin_lock(&p->fs->lock);
@@ -1482,6 +1602,7 @@ static void check_unsafe_exec(struct linux_binprm *bprm)
 		if (t->fs == p->fs)
 			n_fs++;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	if (p->fs->users > n_fs)
@@ -1511,12 +1632,17 @@ static void bprm_fill_uid(struct linux_binprm *bprm)
 		return;
 
 	if (task_no_new_privs(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	inode = bprm->file->f_path.dentry->d_inode;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mode = READ_ONCE(inode->i_mode);
 	if (!(mode & (S_ISUID|S_ISGID)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Be careful if suid/sgid is set */
 	inode_lock(inode);
@@ -1538,6 +1664,7 @@ static void bprm_fill_uid(struct linux_binprm *bprm)
 	}
 
 	if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bprm->per_clear |= PER_CLEAR_ON_SETID;
 		bprm->cred->egid = gid;
 	}
@@ -1559,7 +1686,9 @@ int prepare_binprm(struct linux_binprm *bprm)
 	/* fill in binprm security blob */
 	retval = security_bprm_set_creds(bprm);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 	bprm->called_set_creds = 1;
 
 	memset(bprm->buf, 0, BINPRM_BUF_SIZE);
@@ -1581,12 +1710,15 @@ int remove_arg_zero(struct linux_binprm *bprm)
 	struct page *page;
 
 	if (!bprm->argc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	do {
 		offset = bprm->p & ~PAGE_MASK;
 		page = get_arg_page(bprm, bprm->p, 0);
 		if (!page) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EFAULT;
 			goto out;
 		}
@@ -1596,7 +1728,9 @@ int remove_arg_zero(struct linux_binprm *bprm)
 				offset++, bprm->p++)
 			;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kunmap_atomic(kaddr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_arg_page(page);
 	} while (offset == PAGE_SIZE);
 
@@ -1621,18 +1755,24 @@ int search_binary_handler(struct linux_binprm *bprm)
 
 	/* This allows 4 levels of binfmt rewrites before failing hard. */
 	if (bprm->recursion_depth > 5)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ELOOP;
+}
 
 	retval = security_bprm_check(bprm);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = -ENOENT;
  retry:
 	read_lock(&binfmt_lock);
 	list_for_each_entry(fmt, &formats, lh) {
 		if (!try_module_get(fmt->module))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_unlock(&binfmt_lock);
 		bprm->recursion_depth++;
 		retval = fmt->load_binary(bprm);
@@ -1646,22 +1786,30 @@ int search_binary_handler(struct linux_binprm *bprm)
 			return retval;
 		}
 		if (retval != -ENOEXEC || !bprm->file) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			read_unlock(&binfmt_lock);
 			return retval;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock(&binfmt_lock);
 
 	if (need_retry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (printable(bprm->buf[0]) && printable(bprm->buf[1]) &&
 		    printable(bprm->buf[2]) && printable(bprm->buf[3]))
 			return retval;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (request_module("binfmt-%04x", *(ushort *)(bprm->buf + 2)) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		need_retry = false;
 		goto retry;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 EXPORT_SYMBOL(search_binary_handler);
@@ -1703,7 +1851,9 @@ static int do_execveat_common(int fd, struct filename *filename,
 	int retval;
 
 	if (IS_ERR(filename))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(filename);
+}
 
 	/*
 	 * We move the actual failure in case of RLIMIT_NPROC excess from
@@ -1713,6 +1863,7 @@ static int do_execveat_common(int fd, struct filename *filename,
 	 */
 	if ((current->flags & PF_NPROC_EXCEEDED) &&
 	    atomic_read(&current_user()->processes) > rlimit(RLIMIT_NPROC)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EAGAIN;
 		goto out_ret;
 	}
@@ -1725,6 +1876,7 @@ static int do_execveat_common(int fd, struct filename *filename,
 	if (retval)
 		goto out_ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = -ENOMEM;
 	bprm = kzalloc(sizeof(*bprm), GFP_KERNEL);
 	if (!bprm)
@@ -1748,12 +1900,17 @@ static int do_execveat_common(int fd, struct filename *filename,
 	if (fd == AT_FDCWD || filename->name[0] == '/') {
 		bprm->filename = filename->name;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (filename->name[0] == '\0')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pathbuf = kasprintf(GFP_KERNEL, "/dev/fd/%d", fd);
+}
 		else
 			pathbuf = kasprintf(GFP_KERNEL, "/dev/fd/%d/%s",
 					    fd, filename->name);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!pathbuf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -ENOMEM;
 			goto out_unmark;
 		}
@@ -1763,7 +1920,10 @@ static int do_execveat_common(int fd, struct filename *filename,
 		 * current->files (due to unshare_files above).
 		 */
 		if (close_on_exec(fd, rcu_dereference_raw(current->files->fdt)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bprm->interp_flags |= BINPRM_FLAGS_PATH_INACCESSIBLE;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bprm->filename = pathbuf;
 	}
 	bprm->interp = bprm->filename;
@@ -1814,10 +1974,12 @@ static int do_execveat_common(int fd, struct filename *filename,
 	putname(filename);
 	if (displaced)
 		put_files_struct(displaced);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 
 out:
 	if (bprm->mm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acct_arg_size(bprm, 0);
 		mmput(bprm->mm);
 	}
@@ -1832,7 +1994,9 @@ static int do_execveat_common(int fd, struct filename *filename,
 
 out_files:
 	if (displaced)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		reset_files_struct(displaced);
+}
 out_ret:
 	putname(filename);
 	return retval;
@@ -1896,7 +2060,9 @@ void set_binfmt(struct linux_binfmt *new)
 	struct mm_struct *mm = current->mm;
 
 	if (mm->binfmt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		module_put(mm->binfmt->module);
+}
 
 	mm->binfmt = new;
 	if (new)
@@ -1912,7 +2078,9 @@ void set_dumpable(struct mm_struct *mm, int value)
 	unsigned long old, new;
 
 	if (WARN_ON((unsigned)value > SUID_DUMP_ROOT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	do {
 		old = ACCESS_ONCE(mm->flags);
@@ -1934,6 +2102,7 @@ SYSCALL_DEFINE5(execveat,
 		const char __user *const __user *, envp,
 		int, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int lookup_flags = (flags & AT_EMPTY_PATH) ? LOOKUP_EMPTY : 0;
 
 	return do_execveat(fd,
@@ -1946,6 +2115,7 @@ COMPAT_SYSCALL_DEFINE3(execve, const char __user *, filename,
 	const compat_uptr_t __user *, argv,
 	const compat_uptr_t __user *, envp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return compat_do_execve(getname(filename), argv, envp);
 }
 
@@ -1955,6 +2125,7 @@ COMPAT_SYSCALL_DEFINE5(execveat, int, fd,
 		       const compat_uptr_t __user *, envp,
 		       int,  flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int lookup_flags = (flags & AT_EMPTY_PATH) ? LOOKUP_EMPTY : 0;
 
 	return compat_do_execveat(fd,
diff --git a/fs/exportfs/expfs.c b/fs/exportfs/expfs.c
index 329a5d1..c1a5ab1 100644
--- a/fs/exportfs/expfs.c
+++ b/fs/exportfs/expfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) Neil Brown 2002
  * Copyright (C) Christoph Hellwig 2007
@@ -30,7 +32,9 @@ static int exportfs_get_name(struct vfsmount *mnt, struct dentry *dir,
 	struct path path = {.mnt = mnt, .dentry = dir};
 
 	if (nop->get_name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return nop->get_name(dir, name, child);
+}
 	else
 		return get_name(&path, name, child);
 }
@@ -47,31 +51,46 @@ find_acceptable_alias(struct dentry *result,
 	struct inode *inode;
 
 	if (acceptable(context, result))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode = result->d_inode;
 	spin_lock(&inode->i_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry(dentry, &inode->i_dentry, d_u.d_alias) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dget(dentry);
 		spin_unlock(&inode->i_lock);
 		if (toput)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dput(toput);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dentry != result && acceptable(context, dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dput(result);
 			return dentry;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 		toput = dentry;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&inode->i_lock);
 
 	if (toput)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dput(toput);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
 static bool dentry_connected(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dget(dentry);
 	while (dentry->d_flags & DCACHE_DISCONNECTED) {
 		struct dentry *parent = dget_parent(dentry);
@@ -89,6 +108,7 @@ static bool dentry_connected(struct dentry *dentry)
 
 static void clear_disconnected(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dget(dentry);
 	while (dentry->d_flags & DCACHE_DISCONNECTED) {
 		struct dentry *parent = dget_parent(dentry);
@@ -127,7 +147,9 @@ static struct dentry *reconnect_one(struct vfsmount *mnt,
 	parent = ERR_PTR(-EACCES);
 	inode_lock(dentry->d_inode);
 	if (mnt->mnt_sb->s_export_op->get_parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = mnt->mnt_sb->s_export_op->get_parent(dentry);
+}
 	inode_unlock(dentry->d_inode);
 
 	if (IS_ERR(parent)) {
@@ -213,6 +235,7 @@ reconnect_path(struct vfsmount *mnt, struct dentry *target_dir, char *nbuf)
 
 	dentry = dget(target_dir);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (dentry->d_flags & DCACHE_DISCONNECTED) {
 		BUG_ON(dentry == mnt->mnt_sb->s_root);
 
@@ -274,6 +297,7 @@ static int filldir_one(struct dir_context *ctx, const char *name, int len,
  */
 static int get_name(const struct path *path, char *name, struct dentry *child)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct cred *cred = current_cred();
 	struct inode *dir = path->dentry->d_inode;
 	int error;
@@ -359,6 +383,7 @@ static int export_encode_fh(struct inode *inode, struct fid *fid,
 	int len = *max_len;
 	int type = FILEID_INO32_GEN;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (parent && (len < 4)) {
 		*max_len = 4;
 		return FILEID_INVALID;
@@ -388,6 +413,7 @@ int exportfs_encode_inode_fh(struct inode *inode, struct fid *fid,
 	if (nop && nop->encode_fh)
 		return nop->encode_fh(inode, fid->raw, max_len, parent);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return export_encode_fh(inode, fid, max_len, parent);
 }
 EXPORT_SYMBOL_GPL(exportfs_encode_inode_fh);
@@ -400,6 +426,7 @@ int exportfs_encode_fh(struct dentry *dentry, struct fid *fid, int *max_len,
 	struct inode *inode = dentry->d_inode, *parent = NULL;
 
 	if (connectable && !S_ISDIR(inode->i_mode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		p = dget_parent(dentry);
 		/*
 		 * note that while p might've ceased to be our parent already,
@@ -428,12 +455,18 @@ struct dentry *exportfs_decode_fh(struct vfsmount *mnt, struct fid *fid,
 	 * Try to get any dentry for the given file handle from the filesystem.
 	 */
 	if (!nop || !nop->fh_to_dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ESTALE);
+}
 	result = nop->fh_to_dentry(mnt->mnt_sb, fid, fh_len, fileid_type);
 	if (PTR_ERR(result) == -ENOMEM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(result);
+}
 	if (IS_ERR_OR_NULL(result))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ESTALE);
+}
 
 	if (d_is_dir(result)) {
 		/*
@@ -445,16 +478,20 @@ struct dentry *exportfs_decode_fh(struct vfsmount *mnt, struct fid *fid,
 		 * filesystem root.
 		 */
 		if (result->d_flags & DCACHE_DISCONNECTED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = reconnect_path(mnt, result, nbuf);
 			if (err)
 				goto err_result;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!acceptable(context, result)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EACCES;
 			goto err_result;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
 	} else {
 		/*
@@ -473,7 +510,9 @@ struct dentry *exportfs_decode_fh(struct vfsmount *mnt, struct fid *fid,
 		 */
 		alias = find_acceptable_alias(result, acceptable, context);
 		if (alias)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return alias;
+}
 
 		/*
 		 * Try to extract a dentry for the parent directory from the
@@ -483,10 +522,12 @@ struct dentry *exportfs_decode_fh(struct vfsmount *mnt, struct fid *fid,
 		if (!nop->fh_to_parent)
 			goto err_result;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		target_dir = nop->fh_to_parent(mnt->mnt_sb, fid,
 				fh_len, fileid_type);
 		if (!target_dir)
 			goto err_result;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(target_dir);
 		if (IS_ERR(target_dir))
 			goto err_result;
@@ -498,6 +539,7 @@ struct dentry *exportfs_decode_fh(struct vfsmount *mnt, struct fid *fid,
 		 */
 		err = reconnect_path(mnt, target_dir, nbuf);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dput(target_dir);
 			goto err_result;
 		}
@@ -509,16 +551,21 @@ struct dentry *exportfs_decode_fh(struct vfsmount *mnt, struct fid *fid,
 		 */
 		err = exportfs_get_name(mnt, target_dir, nbuf, result);
 		if (!err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inode_lock(target_dir->d_inode);
 			nresult = lookup_one_len(nbuf, target_dir,
 						 strlen(nbuf));
 			inode_unlock(target_dir->d_inode);
 			if (!IS_ERR(nresult)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (nresult->d_inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					dput(result);
 					result = nresult;
 				} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					dput(nresult);
+}
 			}
 		}
 
@@ -534,17 +581,22 @@ struct dentry *exportfs_decode_fh(struct vfsmount *mnt, struct fid *fid,
 		 */
 		alias = find_acceptable_alias(result, acceptable, context);
 		if (!alias) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EACCES;
 			goto err_result;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return alias;
 	}
 
  err_result:
 	dput(result);
 	if (err != -ENOMEM)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ESTALE;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(err);
 }
 EXPORT_SYMBOL_GPL(exportfs_decode_fh);
diff --git a/fs/ext4/block_validity.c b/fs/ext4/block_validity.c
index bee888e..baa913e 100644
--- a/fs/ext4/block_validity.c
+++ b/fs/ext4/block_validity.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/ext4/block_validity.c
@@ -32,18 +34,22 @@ int __init ext4_init_system_zone(void)
 {
 	ext4_system_zone_cachep = KMEM_CACHE(ext4_system_zone, 0);
 	if (ext4_system_zone_cachep == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
 void ext4_exit_system_zone(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_destroy(ext4_system_zone_cachep);
 }
 
 static inline int can_merge(struct ext4_system_zone *entry1,
 		     struct ext4_system_zone *entry2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((entry1->start_blk + entry1->count) == entry2->start_blk)
 		return 1;
 	return 0;
@@ -62,6 +68,7 @@ static int add_system_zone(struct ext4_sb_info *sbi,
 	struct rb_node **n = &sbi->system_blks.rb_node, *node;
 	struct rb_node *parent = NULL, *new_node = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (*n) {
 		parent = *n;
 		entry = rb_entry(parent, struct ext4_system_zone, node);
@@ -127,6 +134,7 @@ static void debug_print_tree(struct ext4_sb_info *sbi)
 
 	printk(KERN_INFO "System zones: ");
 	node = rb_first(&sbi->system_blks);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (node) {
 		entry = rb_entry(node, struct ext4_system_zone, node);
 		printk(KERN_CONT "%s%llu-%llu", first ? "" : ", ",
@@ -139,6 +147,7 @@ static void debug_print_tree(struct ext4_sb_info *sbi)
 
 int ext4_setup_system_zone(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ext4_group_t ngroups = ext4_get_groups_count(sb);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	struct ext4_group_desc *gdp;
@@ -182,6 +191,7 @@ void ext4_release_system_zone(struct super_block *sb)
 {
 	struct ext4_system_zone	*entry, *n;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rbtree_postorder_for_each_entry_safe(entry, n,
 			&EXT4_SB(sb)->system_blks, node)
 		kmem_cache_free(ext4_system_zone_cachep, entry);
@@ -223,6 +233,7 @@ int ext4_data_block_valid(struct ext4_sb_info *sbi, ext4_fsblk_t start_blk,
 int ext4_check_blockref(const char *function, unsigned int line,
 			struct inode *inode, __le32 *p, unsigned int max)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_super_block *es = EXT4_SB(inode->i_sb)->s_es;
 	__le32 *bref = p;
 	unsigned int blk;
diff --git a/fs/ext4/extents_status.c b/fs/ext4/extents_status.c
index 763ef18..8c28892 100644
--- a/fs/ext4/extents_status.c
+++ b/fs/ext4/extents_status.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  fs/ext4/extents_status.c
@@ -156,18 +158,22 @@ int __init ext4_init_es(void)
 					   sizeof(struct extent_status),
 					   0, (SLAB_RECLAIM_ACCOUNT), NULL);
 	if (ext4_es_cachep == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
 void ext4_exit_es(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ext4_es_cachep)
 		kmem_cache_destroy(ext4_es_cachep);
 }
 
 void ext4_es_init_tree(struct ext4_es_tree *tree)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tree->root = RB_ROOT;
 	tree->cache_es = NULL;
 }
@@ -197,6 +203,7 @@ static void ext4_es_print_tree(struct inode *inode)
 
 static inline ext4_lblk_t ext4_es_end(struct extent_status *es)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(es->es_lblk + es->es_len < es->es_lblk);
 	return es->es_lblk + es->es_len - 1;
 }
@@ -211,6 +218,7 @@ static struct extent_status *__es_tree_search(struct rb_root *root,
 	struct rb_node *node = root->rb_node;
 	struct extent_status *es = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (node) {
 		es = rb_entry(node, struct extent_status, rb_node);
 		if (lblk < es->es_lblk)
@@ -250,6 +258,7 @@ void ext4_es_find_delayed_extent_range(struct inode *inode,
 	struct extent_status *es1 = NULL;
 	struct rb_node *node;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(es == NULL);
 	BUG_ON(end < lblk);
 	trace_ext4_es_find_delayed_extent_range_enter(inode, lblk);
@@ -298,6 +307,7 @@ void ext4_es_find_delayed_extent_range(struct inode *inode,
 
 static void ext4_es_list_add(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_inode_info *ei = EXT4_I(inode);
 	struct ext4_sb_info *sbi = EXT4_SB(inode->i_sb);
 
@@ -314,6 +324,7 @@ static void ext4_es_list_add(struct inode *inode)
 
 static void ext4_es_list_del(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_inode_info *ei = EXT4_I(inode);
 	struct ext4_sb_info *sbi = EXT4_SB(inode->i_sb);
 
@@ -333,7 +344,9 @@ ext4_es_alloc_extent(struct inode *inode, ext4_lblk_t lblk, ext4_lblk_t len,
 	struct extent_status *es;
 	es = kmem_cache_alloc(ext4_es_cachep, GFP_ATOMIC);
 	if (es == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	es->es_lblk = lblk;
 	es->es_len = len;
 	es->es_pblk = pblk;
@@ -356,6 +369,7 @@ ext4_es_alloc_extent(struct inode *inode, ext4_lblk_t lblk, ext4_lblk_t len,
 
 static void ext4_es_free_extent(struct inode *inode, struct extent_status *es)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	EXT4_I(inode)->i_es_all_nr--;
 	percpu_counter_dec(&EXT4_SB(inode->i_sb)->s_es_stats.es_stats_all_cnt);
 
@@ -381,6 +395,7 @@ static void ext4_es_free_extent(struct inode *inode, struct extent_status *es)
 static int ext4_es_can_be_merged(struct extent_status *es1,
 				 struct extent_status *es2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ext4_es_type(es1) != ext4_es_type(es2))
 		return 0;
 
@@ -413,6 +428,7 @@ static int ext4_es_can_be_merged(struct extent_status *es1,
 static struct extent_status *
 ext4_es_try_to_merge_left(struct inode *inode, struct extent_status *es)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_es_tree *tree = &EXT4_I(inode)->i_es_tree;
 	struct extent_status *es1;
 	struct rb_node *node;
@@ -437,6 +453,7 @@ ext4_es_try_to_merge_left(struct inode *inode, struct extent_status *es)
 static struct extent_status *
 ext4_es_try_to_merge_right(struct inode *inode, struct extent_status *es)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_es_tree *tree = &EXT4_I(inode)->i_es_tree;
 	struct extent_status *es1;
 	struct rb_node *node;
@@ -632,6 +649,7 @@ static inline void ext4_es_insert_extent_check(struct inode *inode,
 
 static int __es_insert_extent(struct inode *inode, struct extent_status *newes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_es_tree *tree = &EXT4_I(inode)->i_es_tree;
 	struct rb_node **p = &tree->root.rb_node;
 	struct rb_node *parent = NULL;
@@ -696,6 +714,7 @@ int ext4_es_insert_extent(struct inode *inode, ext4_lblk_t lblk,
 	ext4_lblk_t end = lblk + len - 1;
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	es_debug("add [%u/%u) %llu %x to extent status tree of inode %lu\n",
 		 lblk, len, pblk, status, inode->i_ino);
 
@@ -758,7 +777,9 @@ void ext4_es_cache_extent(struct inode *inode, ext4_lblk_t lblk,
 	trace_ext4_es_cache_extent(inode, &newes);
 
 	if (!len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	BUG_ON(end < lblk);
 
@@ -787,6 +808,7 @@ int ext4_es_lookup_extent(struct inode *inode, ext4_lblk_t lblk,
 	int found = 0;
 
 	trace_ext4_es_lookup_extent_enter(inode, lblk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	es_debug("lookup extent in block %u\n", lblk);
 
 	tree = &EXT4_I(inode)->i_es_tree;
@@ -840,6 +862,7 @@ int ext4_es_lookup_extent(struct inode *inode, ext4_lblk_t lblk,
 static int __es_remove_extent(struct inode *inode, ext4_lblk_t lblk,
 			      ext4_lblk_t end)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_es_tree *tree = &EXT4_I(inode)->i_es_tree;
 	struct rb_node *node;
 	struct extent_status *es;
@@ -949,6 +972,7 @@ int ext4_es_remove_extent(struct inode *inode, ext4_lblk_t lblk,
 	int err = 0;
 
 	trace_ext4_es_remove_extent(inode, lblk, len);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	es_debug("remove [%u/%u) from extent status tree of inode %lu\n",
 		 lblk, len, inode->i_ino);
 
@@ -1064,6 +1088,7 @@ static unsigned long ext4_es_count(struct shrinker *shrink,
 	unsigned long nr;
 	struct ext4_sb_info *sbi;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sbi = container_of(shrink, struct ext4_sb_info, s_es_shrinker);
 	nr = percpu_counter_read_positive(&sbi->s_es_stats.es_stats_shk_cnt);
 	trace_ext4_es_shrink_count(sbi->s_sb, sc->nr_to_scan, nr);
@@ -1073,6 +1098,7 @@ static unsigned long ext4_es_count(struct shrinker *shrink,
 static unsigned long ext4_es_scan(struct shrinker *shrink,
 				  struct shrink_control *sc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = container_of(shrink,
 					struct ext4_sb_info, s_es_shrinker);
 	int nr_to_scan = sc->nr_to_scan;
@@ -1092,6 +1118,7 @@ static unsigned long ext4_es_scan(struct shrinker *shrink,
 
 int ext4_seq_es_shrinker_info_show(struct seq_file *seq, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB((struct super_block *) seq->private);
 	struct ext4_es_stats *es_stats = &sbi->s_es_stats;
 	struct ext4_inode_info *ei, *max = NULL;
@@ -1172,6 +1199,7 @@ int ext4_es_register_shrinker(struct ext4_sb_info *sbi)
 
 void ext4_es_unregister_shrinker(struct ext4_sb_info *sbi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	percpu_counter_destroy(&sbi->s_es_stats.es_stats_all_cnt);
 	percpu_counter_destroy(&sbi->s_es_stats.es_stats_shk_cnt);
 	unregister_shrinker(&sbi->s_es_shrinker);
@@ -1196,6 +1224,7 @@ static int es_do_reclaim_extents(struct ext4_inode_info *ei, ext4_lblk_t end,
 	es = __es_tree_search(&tree->root, ei->i_es_shrink_lblk);
 	if (!es)
 		goto out_wrap;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	node = &es->rb_node;
 	while (*nr_to_scan > 0) {
 		if (es->es_lblk > end) {
@@ -1240,7 +1269,9 @@ static int es_reclaim_extents(struct ext4_inode_info *ei, int *nr_to_scan)
 				      DEFAULT_RATELIMIT_BURST);
 
 	if (ei->i_es_shk_nr == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (ext4_test_inode_state(inode, EXT4_STATE_EXT_PRECACHED) &&
 	    __ratelimit(&_rs))
diff --git a/fs/ext4/mballoc.c b/fs/ext4/mballoc.c
index 7010856..0f2c533 100644
--- a/fs/ext4/mballoc.c
+++ b/fs/ext4/mballoc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2003-2006, Cluster File Systems, Inc, info@clusterfs.com
  * Written by Alex Tomas <alex@clusterfs.com>
@@ -394,18 +396,21 @@ static inline int mb_test_bit(int bit, void *addr)
 
 static inline void mb_set_bit(int bit, void *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	addr = mb_correct_addr_and_bit(&bit, addr);
 	ext4_set_bit(bit, addr);
 }
 
 static inline void mb_clear_bit(int bit, void *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	addr = mb_correct_addr_and_bit(&bit, addr);
 	ext4_clear_bit(bit, addr);
 }
 
 static inline int mb_test_and_clear_bit(int bit, void *addr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	addr = mb_correct_addr_and_bit(&bit, addr);
 	return ext4_test_and_clear_bit(bit, addr);
 }
@@ -419,7 +424,9 @@ static inline int mb_find_next_zero_bit(void *addr, int max, int start)
 
 	ret = ext4_find_next_zero_bit(addr, tmpmax, start) - fix;
 	if (ret > max)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return max;
+}
 	return ret;
 }
 
@@ -432,7 +439,9 @@ static inline int mb_find_next_bit(void *addr, int max, int start)
 
 	ret = ext4_find_next_bit(addr, tmpmax, start) - fix;
 	if (ret > max)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return max;
+}
 	return ret;
 }
 
@@ -440,6 +449,7 @@ static void *mb_find_buddy(struct ext4_buddy *e4b, int order, int *max)
 {
 	char *bb;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(e4b->bd_bitmap == e4b->bd_buddy);
 	BUG_ON(max == NULL);
 
@@ -524,15 +534,18 @@ static void mb_cmp_bitmaps(struct ext4_buddy *e4b, void *bitmap)
 static inline void mb_free_blocks_double(struct inode *inode,
 				struct ext4_buddy *e4b, int first, int count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return;
 }
 static inline void mb_mark_used_double(struct ext4_buddy *e4b,
 						int first, int count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return;
 }
 static inline void mb_cmp_bitmaps(struct ext4_buddy *e4b, void *bitmap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return;
 }
 #endif
@@ -663,6 +676,7 @@ static void ext4_mb_mark_free_simple(struct super_block *sb,
 				void *buddy, ext4_grpblk_t first, ext4_grpblk_t len,
 					struct ext4_group_info *grp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	ext4_grpblk_t min;
 	ext4_grpblk_t max;
@@ -708,6 +722,7 @@ mb_set_largest_free_order(struct super_block *sb, struct ext4_group_info *grp)
 	grp->bb_largest_free_order = -1; /* uninit */
 
 	bits = sb->s_blocksize_bits + 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = bits; i >= 0; i--) {
 		if (grp->bb_counters[i] > 0) {
 			grp->bb_largest_free_order = i;
@@ -720,6 +735,7 @@ static noinline_for_stack
 void ext4_mb_generate_buddy(struct super_block *sb,
 				void *buddy, void *bitmap, ext4_group_t group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_group_info *grp = ext4_get_group_info(sb, group);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	ext4_grpblk_t max = EXT4_CLUSTERS_PER_GROUP(sb);
@@ -781,6 +797,7 @@ static void mb_regenerate_buddy(struct ext4_buddy *e4b)
 	int order = 1;
 	void *buddy;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((buddy = mb_find_buddy(e4b, order++, &count))) {
 		ext4_set_bits(buddy, 0, count);
 	}
@@ -831,6 +848,7 @@ static int ext4_mb_init_cache(struct page *page, char *incore, gfp_t gfp)
 	char *bitmap;
 	struct ext4_group_info *grinfo;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mb_debug(1, "init page %lu\n", page->index);
 
 	inode = page->mapping->host;
@@ -983,6 +1001,7 @@ static int ext4_mb_init_cache(struct page *page, char *incore, gfp_t gfp)
 static int ext4_mb_get_buddy_page_lock(struct super_block *sb,
 		ext4_group_t group, struct ext4_buddy *e4b, gfp_t gfp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = EXT4_SB(sb)->s_buddy_cache;
 	int block, pnum, poff;
 	int blocks_per_page;
@@ -1024,6 +1043,7 @@ static int ext4_mb_get_buddy_page_lock(struct super_block *sb,
 
 static void ext4_mb_put_buddy_page_lock(struct ext4_buddy *e4b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (e4b->bd_bitmap_page) {
 		unlock_page(e4b->bd_bitmap_page);
 		put_page(e4b->bd_bitmap_page);
@@ -1048,6 +1068,7 @@ int ext4_mb_init_group(struct super_block *sb, ext4_group_t group, gfp_t gfp)
 	struct page *page;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 	mb_debug(1, "init group %u\n", group);
 	this_grp = ext4_get_group_info(sb, group);
@@ -1120,6 +1141,7 @@ ext4_mb_load_buddy_gfp(struct super_block *sb, ext4_group_t group,
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	struct inode *inode = sbi->s_buddy_cache;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 	mb_debug(1, "load group %u\n", group);
 
@@ -1249,11 +1271,13 @@ ext4_mb_load_buddy_gfp(struct super_block *sb, ext4_group_t group,
 static int ext4_mb_load_buddy(struct super_block *sb, ext4_group_t group,
 			      struct ext4_buddy *e4b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ext4_mb_load_buddy_gfp(sb, group, e4b, GFP_NOFS);
 }
 
 static void ext4_mb_unload_buddy(struct ext4_buddy *e4b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (e4b->bd_bitmap_page)
 		put_page(e4b->bd_bitmap_page);
 	if (e4b->bd_buddy_page)
@@ -1267,6 +1291,7 @@ static int mb_find_order_for_block(struct ext4_buddy *e4b, int block)
 	int bb_incr = 1 << (e4b->bd_blkbits - 1);
 	void *bb;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(e4b->bd_bitmap == e4b->bd_buddy);
 	BUG_ON(block >= (1 << (e4b->bd_blkbits + 3)));
 
@@ -1289,6 +1314,7 @@ static void mb_clear_bits(void *bm, int cur, int len)
 	__u32 *addr;
 
 	len = cur + len;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (cur < len) {
 		if ((cur & 31) == 0 && (len - cur) >= 32) {
 			/* fast path: clear whole word at once */
@@ -1311,6 +1337,7 @@ static int mb_test_and_clear_bits(void *bm, int cur, int len)
 	int zero_bit = -1;
 
 	len = cur + len;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (cur < len) {
 		if ((cur & 31) == 0 && (len - cur) >= 32) {
 			/* fast path: clear whole word at once */
@@ -1334,6 +1361,7 @@ void ext4_set_bits(void *bm, int cur, int len)
 	__u32 *addr;
 
 	len = cur + len;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (cur < len) {
 		if ((cur & 31) == 0 && (len - cur) >= 32) {
 			/* fast path: set whole word at once */
@@ -1352,6 +1380,7 @@ void ext4_set_bits(void *bm, int cur, int len)
 
 static inline int mb_buddy_adjust_border(int* bit, void* bitmap, int side)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mb_test_bit(*bit + side, bitmap)) {
 		mb_clear_bit(*bit, bitmap);
 		(*bit) -= side;
@@ -1370,6 +1399,7 @@ static void mb_buddy_mark_free(struct ext4_buddy *e4b, int first, int last)
 	int order = 1;
 	void *buddy = mb_find_buddy(e4b, order, &max);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (buddy) {
 		void *buddy2;
 
@@ -1430,6 +1460,7 @@ static void mb_free_blocks(struct inode *inode, struct ext4_buddy *e4b,
 	int last = first + count - 1;
 	struct super_block *sb = e4b->bd_sb;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(count == 0))
 		return;
 	BUG_ON(last >= (sb->s_blocksize << 3));
@@ -1512,6 +1543,7 @@ static int mb_find_extent(struct ext4_buddy *e4b, int block,
 	int max, order;
 	void *buddy;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	assert_spin_locked(ext4_group_lock_ptr(e4b->bd_sb, e4b->bd_group));
 	BUG_ON(ex == NULL);
 
@@ -1580,6 +1612,7 @@ static int mb_mark_used(struct ext4_buddy *e4b, struct ext4_free_extent *ex)
 	int len0 = len;
 	void *buddy;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(start + len > (e4b->bd_sb->s_blocksize << 3));
 	BUG_ON(e4b->bd_group != ex->fe_group);
 	assert_spin_locked(ext4_group_lock_ptr(e4b->bd_sb, e4b->bd_group));
@@ -1649,6 +1682,7 @@ static int mb_mark_used(struct ext4_buddy *e4b, struct ext4_free_extent *ex)
 static void ext4_mb_use_best_found(struct ext4_allocation_context *ac,
 					struct ext4_buddy *e4b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(ac->ac_sb);
 	int ret;
 
@@ -1695,6 +1729,7 @@ static void ext4_mb_check_limits(struct ext4_allocation_context *ac,
 					struct ext4_buddy *e4b,
 					int finish_group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(ac->ac_sb);
 	struct ext4_free_extent *bex = &ac->ac_b_ex;
 	struct ext4_free_extent *gex = &ac->ac_g_ex;
@@ -1748,6 +1783,7 @@ static void ext4_mb_measure_extent(struct ext4_allocation_context *ac,
 	struct ext4_free_extent *bex = &ac->ac_b_ex;
 	struct ext4_free_extent *gex = &ac->ac_g_ex;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(ex->fe_len <= 0);
 	BUG_ON(ex->fe_len > EXT4_CLUSTERS_PER_GROUP(ac->ac_sb));
 	BUG_ON(ex->fe_start >= EXT4_CLUSTERS_PER_GROUP(ac->ac_sb));
@@ -1809,6 +1845,7 @@ int ext4_mb_try_best_found(struct ext4_allocation_context *ac,
 	int max;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(ex.fe_len <= 0);
 	err = ext4_mb_load_buddy(ac->ac_sb, group, e4b);
 	if (err)
@@ -1840,7 +1877,9 @@ int ext4_mb_find_by_goal(struct ext4_allocation_context *ac,
 	struct ext4_free_extent ex;
 
 	if (!(ac->ac_flags & EXT4_MB_HINT_TRY_GOAL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (grp->bb_free == 0)
 		return 0;
 
@@ -1907,6 +1946,7 @@ void ext4_mb_simple_scan_group(struct ext4_allocation_context *ac,
 	int k;
 	int max;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(ac->ac_2order <= 0);
 	for (i = ac->ac_2order; i <= sb->s_blocksize_bits + 1; i++) {
 		if (grp->bb_counters[i] == 0)
@@ -1951,6 +1991,7 @@ void ext4_mb_complex_scan_group(struct ext4_allocation_context *ac,
 	int free;
 
 	free = e4b->bd_info->bb_free;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(free <= 0);
 
 	i = e4b->bd_info->bb_first_free;
@@ -2012,6 +2053,7 @@ void ext4_mb_scan_aligned(struct ext4_allocation_context *ac,
 	ext4_grpblk_t i;
 	int max;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(sbi->s_stripe == 0);
 
 	/* find first stripe-aligned block in group */
@@ -2049,6 +2091,7 @@ static int ext4_mb_good_group(struct ext4_allocation_context *ac,
 	int flex_size = ext4_flex_bg_size(EXT4_SB(ac->ac_sb));
 	struct ext4_group_info *grp = ext4_get_group_info(ac->ac_sb, group);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(cr < 0 || cr >= 4);
 
 	free = grp->bb_free;
@@ -2121,7 +2164,9 @@ ext4_mb_regular_allocator(struct ext4_allocation_context *ac)
 	ngroups = ext4_get_groups_count(sb);
 	/* non-extent files are limited to low blocks/groups */
 	if (!(ext4_test_inode_flag(ac->ac_inode, EXT4_INODE_EXTENTS)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ngroups = sbi->s_blockfile_groups;
+}
 
 	BUG_ON(ac->ac_status == AC_STATUS_FOUND);
 
@@ -2269,6 +2314,7 @@ static void *ext4_mb_seq_groups_start(struct seq_file *seq, loff_t *pos)
 	struct super_block *sb = seq->private;
 	ext4_group_t group;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (*pos < 0 || *pos >= ext4_get_groups_count(sb))
 		return NULL;
 	group = *pos + 1;
@@ -2281,6 +2327,7 @@ static void *ext4_mb_seq_groups_next(struct seq_file *seq, void *v, loff_t *pos)
 	ext4_group_t group;
 
 	++*pos;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (*pos < 0 || *pos >= ext4_get_groups_count(sb))
 		return NULL;
 	group = *pos + 1;
@@ -2295,6 +2342,7 @@ static int ext4_mb_seq_groups_show(struct seq_file *seq, void *v)
 	int err, buddy_loaded = 0;
 	struct ext4_buddy e4b;
 	struct ext4_group_info *grinfo;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned char blocksize_bits = min_t(unsigned char,
 					     sb->s_blocksize_bits,
 					     EXT4_MAX_BLOCK_LOG_SIZE);
@@ -2351,6 +2399,7 @@ static const struct seq_operations ext4_mb_seq_groups_ops = {
 
 static int ext4_mb_seq_groups_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct super_block *sb = PDE_DATA(inode);
 	int rc;
 
@@ -2375,6 +2424,7 @@ static struct kmem_cache *get_groupinfo_cache(int blocksize_bits)
 	int cache_index = blocksize_bits - EXT4_MIN_BLOCK_LOG_SIZE;
 	struct kmem_cache *cachep = ext4_groupinfo_caches[cache_index];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!cachep);
 	return cachep;
 }
@@ -2385,6 +2435,7 @@ static struct kmem_cache *get_groupinfo_cache(int blocksize_bits)
  */
 int ext4_mb_alloc_groupinfo(struct super_block *sb, ext4_group_t ngroups)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	unsigned size;
 	struct ext4_group_info ***new_groupinfo;
@@ -2497,6 +2548,7 @@ int ext4_mb_add_groupinfo(struct super_block *sb, ext4_group_t group,
 
 static int ext4_mb_init_backend(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ext4_group_t ngroups = ext4_get_groups_count(sb);
 	ext4_group_t i;
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
@@ -2548,6 +2600,7 @@ static void ext4_groupinfo_destroy_slabs(void)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < NR_GRPINFO_CACHES; i++) {
 		if (ext4_groupinfo_caches[i])
 			kmem_cache_destroy(ext4_groupinfo_caches[i]);
@@ -2559,6 +2612,7 @@ static int ext4_groupinfo_create_slab(size_t size)
 {
 	static DEFINE_MUTEX(ext4_grpinfo_slab_create_mutex);
 	int slab_size;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int blocksize_bits = order_base_2(size);
 	int cache_index = blocksize_bits - EXT4_MIN_BLOCK_LOG_SIZE;
 	struct kmem_cache *cachep;
@@ -2596,6 +2650,7 @@ static int ext4_groupinfo_create_slab(size_t size)
 
 int ext4_mb_init(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	unsigned i, j;
 	unsigned offset, offset_incr;
@@ -2714,6 +2769,7 @@ static void ext4_mb_cleanup_pa(struct ext4_group_info *grp)
 	struct list_head *cur, *tmp;
 	int count = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_safe(cur, tmp, &grp->bb_prealloc_list) {
 		pa = list_entry(cur, struct ext4_prealloc_space, pa_group_list);
 		list_del(&pa->pa_group_list);
@@ -2727,6 +2783,7 @@ static void ext4_mb_cleanup_pa(struct ext4_group_info *grp)
 
 int ext4_mb_release(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ext4_group_t ngroups = ext4_get_groups_count(sb);
 	ext4_group_t i;
 	int num_meta_group_infos;
@@ -2796,6 +2853,7 @@ static inline int ext4_issue_discard(struct super_block *sb,
 	trace_ext4_discard_blocks(sb,
 			(unsigned long long) discard_block, count);
 	if (biop) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return __blkdev_issue_discard(sb->s_bdev,
 			(sector_t)discard_block << (sb->s_blocksize_bits - 9),
 			(sector_t)count << (sb->s_blocksize_bits - 9),
@@ -2811,6 +2869,7 @@ static void ext4_free_data_in_buddy(struct super_block *sb,
 	struct ext4_group_info *db;
 	int err, count = 0, count2 = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mb_debug(1, "gonna free %u blocks in group %u (0x%p):",
 		 entry->efd_count, entry->efd_group, entry);
 
@@ -2860,6 +2919,7 @@ static void ext4_free_data_in_buddy(struct super_block *sb,
  */
 void ext4_process_freed_data(struct super_block *sb, tid_t commit_tid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	struct ext4_free_data *entry, *tmp;
 	struct bio *discard_bio = NULL;
@@ -2911,11 +2971,14 @@ int __init ext4_init_mballoc(void)
 	ext4_pspace_cachep = KMEM_CACHE(ext4_prealloc_space,
 					SLAB_RECLAIM_ACCOUNT);
 	if (ext4_pspace_cachep == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ext4_ac_cachep = KMEM_CACHE(ext4_allocation_context,
 				    SLAB_RECLAIM_ACCOUNT);
 	if (ext4_ac_cachep == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kmem_cache_destroy(ext4_pspace_cachep);
 		return -ENOMEM;
 	}
@@ -2923,10 +2986,12 @@ int __init ext4_init_mballoc(void)
 	ext4_free_data_cachep = KMEM_CACHE(ext4_free_data,
 					   SLAB_RECLAIM_ACCOUNT);
 	if (ext4_free_data_cachep == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kmem_cache_destroy(ext4_pspace_cachep);
 		kmem_cache_destroy(ext4_ac_cachep);
 		return -ENOMEM;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -2960,6 +3025,7 @@ ext4_mb_mark_diskspace_used(struct ext4_allocation_context *ac,
 	ext4_fsblk_t block;
 	int err, len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(ac->ac_status != AC_STATUS_FOUND);
 	BUG_ON(ac->ac_b_ex.fe_len <= 0);
 
@@ -3075,6 +3141,7 @@ static void ext4_mb_normalize_group_request(struct ext4_allocation_context *ac)
 	struct super_block *sb = ac->ac_sb;
 	struct ext4_locality_group *lg = ac->ac_lg;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(lg == NULL);
 	ac->ac_g_ex.fe_len = EXT4_SB(sb)->s_mb_group_prealloc;
 	mb_debug(1, "#%u: goal %u blocks for locality group\n",
@@ -3089,6 +3156,7 @@ static noinline_for_stack void
 ext4_mb_normalize_request(struct ext4_allocation_context *ac,
 				struct ext4_allocation_request *ar)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(ac->ac_sb);
 	int bsbits, max;
 	ext4_lblk_t end;
@@ -3282,6 +3350,7 @@ ext4_mb_normalize_request(struct ext4_allocation_context *ac,
 
 static void ext4_mb_collect_stats(struct ext4_allocation_context *ac)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(ac->ac_sb);
 
 	if (sbi->s_mb_stats && ac->ac_g_ex.fe_len > 1) {
@@ -3316,6 +3385,7 @@ static void ext4_discard_allocated_blocks(struct ext4_allocation_context *ac)
 	int err;
 
 	if (pa == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ac->ac_f_ex.fe_len == 0)
 			return;
 		err = ext4_mb_load_buddy(ac->ac_sb, ac->ac_f_ex.fe_group, &e4b);
@@ -3345,6 +3415,7 @@ static void ext4_discard_allocated_blocks(struct ext4_allocation_context *ac)
 static void ext4_mb_use_inode_pa(struct ext4_allocation_context *ac,
 				struct ext4_prealloc_space *pa)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(ac->ac_sb);
 	ext4_fsblk_t start;
 	ext4_fsblk_t end;
@@ -3407,6 +3478,7 @@ ext4_mb_check_group_pa(ext4_fsblk_t goal_block,
 	ext4_fsblk_t cur_distance, new_distance;
 
 	if (cpa == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_inc(&pa->pa_count);
 		return pa;
 	}
@@ -3428,6 +3500,7 @@ ext4_mb_check_group_pa(ext4_fsblk_t goal_block,
 static noinline_for_stack int
 ext4_mb_use_preallocated(struct ext4_allocation_context *ac)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(ac->ac_sb);
 	int order, i;
 	struct ext4_inode_info *ei = EXT4_I(ac->ac_inode);
@@ -3527,6 +3600,7 @@ static void ext4_mb_generate_from_freelist(struct super_block *sb, void *bitmap,
 	grp = ext4_get_group_info(sb, group);
 	n = rb_first(&(grp->bb_free_root));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (n) {
 		entry = rb_entry(n, struct ext4_free_data, efd_node);
 		ext4_set_bits(bitmap, entry->efd_start_cluster, entry->efd_count);
@@ -3544,6 +3618,7 @@ static noinline_for_stack
 void ext4_mb_generate_from_pa(struct super_block *sb, void *bitmap,
 					ext4_group_t group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_group_info *grp = ext4_get_group_info(sb, group);
 	struct ext4_prealloc_space *pa;
 	struct list_head *cur;
@@ -3579,6 +3654,7 @@ void ext4_mb_generate_from_pa(struct super_block *sb, void *bitmap,
 static void ext4_mb_pa_callback(struct rcu_head *head)
 {
 	struct ext4_prealloc_space *pa;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pa = container_of(head, struct ext4_prealloc_space, u.pa_rcu);
 
 	BUG_ON(atomic_read(&pa->pa_count));
@@ -3598,6 +3674,7 @@ static void ext4_mb_put_pa(struct ext4_allocation_context *ac,
 
 	/* in this short window concurrent discard can set pa_deleted */
 	spin_lock(&pa->pa_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!atomic_dec_and_test(&pa->pa_count) || pa->pa_free != 0) {
 		spin_unlock(&pa->pa_lock);
 		return;
@@ -3806,7 +3883,9 @@ static int ext4_mb_new_preallocation(struct ext4_allocation_context *ac)
 	int err;
 
 	if (ac->ac_flags & EXT4_MB_HINT_GROUP_ALLOC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = ext4_mb_new_group_pa(ac);
+}
 	else
 		err = ext4_mb_new_inode_pa(ac);
 	return err;
@@ -3834,6 +3913,7 @@ ext4_mb_release_inode_pa(struct ext4_buddy *e4b, struct buffer_head *bitmap_bh,
 	int err = 0;
 	int free = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(pa->pa_deleted == 0);
 	ext4_get_group_no_and_offset(sb, pa->pa_pstart, &group, &bit);
 	grp_blk_start = pa->pa_pstart - EXT4_C2B(sbi, bit);
@@ -3884,6 +3964,7 @@ ext4_mb_release_group_pa(struct ext4_buddy *e4b,
 	ext4_grpblk_t bit;
 
 	trace_ext4_mb_release_group_pa(sb, pa);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(pa->pa_deleted == 0);
 	ext4_get_group_no_and_offset(sb, pa->pa_pstart, &group, &bit);
 	BUG_ON(group != e4b->bd_group && pa->pa_len != 0);
@@ -3907,6 +3988,7 @@ static noinline_for_stack int
 ext4_mb_discard_group_preallocations(struct super_block *sb,
 					ext4_group_t group, int needed)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_group_info *grp = ext4_get_group_info(sb, group);
 	struct buffer_head *bitmap_bh = NULL;
 	struct ext4_prealloc_space *pa, *tmp;
@@ -4017,6 +4099,7 @@ ext4_mb_discard_group_preallocations(struct super_block *sb,
  */
 void ext4_discard_preallocations(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_inode_info *ei = EXT4_I(inode);
 	struct super_block *sb = inode->i_sb;
 	struct buffer_head *bitmap_bh = NULL;
@@ -4180,6 +4263,7 @@ static void ext4_mb_show_ac(struct ext4_allocation_context *ac)
 #else
 static inline void ext4_mb_show_ac(struct ext4_allocation_context *ac)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return;
 }
 #endif
@@ -4193,6 +4277,7 @@ static inline void ext4_mb_show_ac(struct ext4_allocation_context *ac)
  */
 static void ext4_mb_group_or_file(struct ext4_allocation_context *ac)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(ac->ac_sb);
 	int bsbits = ac->ac_sb->s_blocksize_bits;
 	loff_t size, isize;
@@ -4258,7 +4343,9 @@ ext4_mb_initialize_context(struct ext4_allocation_context *ac,
 
 	/* just a dirty hack to filter too big requests  */
 	if (len >= EXT4_CLUSTERS_PER_GROUP(sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = EXT4_CLUSTERS_PER_GROUP(sb);
+}
 
 	/* start searching from the goal */
 	goal = ar->goal;
@@ -4304,6 +4391,7 @@ ext4_mb_discard_lg_preallocations(struct super_block *sb,
 	struct list_head discard_list;
 	struct ext4_prealloc_space *pa, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mb_debug(1, "discard locality group preallocation\n");
 
 	INIT_LIST_HEAD(&discard_list);
@@ -4431,6 +4519,7 @@ static void ext4_mb_add_n_trim(struct ext4_allocation_context *ac)
  */
 static int ext4_mb_release_context(struct ext4_allocation_context *ac)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(ac->ac_sb);
 	struct ext4_prealloc_space *pa = ac->ac_pa;
 	if (pa) {
@@ -4476,6 +4565,7 @@ static int ext4_mb_discard_preallocations(struct super_block *sb, int needed)
 	int freed = 0;
 
 	trace_ext4_mb_discard_preallocations(sb, needed);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < ngroups && needed > 0; i++) {
 		ret = ext4_mb_discard_group_preallocations(sb, i, needed);
 		freed += ret;
@@ -4501,6 +4591,7 @@ ext4_fsblk_t ext4_mb_new_blocks(handle_t *handle,
 	unsigned int inquota = 0;
 	unsigned int reserv_clstrs = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 	sb = ar->inode->i_sb;
 	sbi = EXT4_SB(sb);
@@ -4632,6 +4723,7 @@ static void ext4_try_merge_freed_extent(struct ext4_sb_info *sbi,
 					struct ext4_free_data *new_entry,
 					struct rb_root *entry_rb_root)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((entry->efd_tid != new_entry->efd_tid) ||
 	    (entry->efd_group != new_entry->efd_group))
 		return;
@@ -4665,6 +4757,7 @@ ext4_mb_free_metadata(handle_t *handle, struct ext4_buddy *e4b,
 	struct rb_node **n = &db->bb_free_root.rb_node, *node;
 	struct rb_node *parent = NULL, *new_node;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!ext4_handle_valid(handle));
 	BUG_ON(e4b->bd_bitmap_page == NULL);
 	BUG_ON(e4b->bd_buddy_page == NULL);
@@ -4747,6 +4840,7 @@ void ext4_free_blocks(handle_t *handle, struct inode *inode,
 	int err = 0;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 	if (bh) {
 		if (block)
@@ -4997,6 +5091,7 @@ int ext4_group_add_blocks(handle_t *handle, struct super_block *sb,
 	int err = 0, ret, blk_free_count;
 	ext4_grpblk_t blocks_freed;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ext4_debug("Adding block(s) %llu-%llu\n", block, block + count - 1);
 
 	if (count == 0)
@@ -5131,6 +5226,7 @@ __acquires(bitlock)
 
 	trace_ext4_trim_extent(sb, group, start, count);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	assert_spin_locked(ext4_group_lock_ptr(sb, group));
 
 	ex.fe_start = start;
@@ -5181,6 +5277,7 @@ ext4_trim_all_free(struct super_block *sb, ext4_group_t group,
 
 	ret = ext4_mb_load_buddy(sb, group, &e4b);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ext4_warning(sb, "Error %d loading buddy information for %u",
 			     ret, group);
 		return ret;
@@ -5349,7 +5446,9 @@ ext4_mballoc_query_range(
 
 	error = ext4_mb_load_buddy(sb, group, &e4b);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	bitmap = e4b.bd_bitmap;
 
 	ext4_lock_group(sb, group);
diff --git a/fs/ext4/page-io.c b/fs/ext4/page-io.c
index db75901..4dcf61b 100644
--- a/fs/ext4/page-io.c
+++ b/fs/ext4/page-io.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * linux/fs/ext4/page-io.c
@@ -36,12 +38,15 @@ int __init ext4_init_pageio(void)
 {
 	io_end_cachep = KMEM_CACHE(ext4_io_end, SLAB_RECLAIM_ACCOUNT);
 	if (io_end_cachep == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
 void ext4_exit_pageio(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_destroy(io_end_cachep);
 }
 
@@ -54,6 +59,7 @@ void ext4_exit_pageio(void)
  */
 static void buffer_io_error(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	printk_ratelimited(KERN_ERR "Buffer I/O error on device %pg, logical block %llu\n",
 		       bh->b_bdev,
 			(unsigned long long)bh->b_blocknr);
@@ -64,6 +70,7 @@ static void ext4_finish_bio(struct bio *bio)
 	int i;
 	struct bio_vec *bvec;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bio_for_each_segment_all(bvec, bio, i) {
 		struct page *page = bvec->bv_page;
 #ifdef CONFIG_EXT4_FS_ENCRYPTION
@@ -124,6 +131,7 @@ static void ext4_release_io_end(ext4_io_end_t *io_end)
 {
 	struct bio *bio, *next_bio;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!list_empty(&io_end->list));
 	BUG_ON(io_end->flag & EXT4_IO_END_UNWRITTEN);
 	WARN_ON(io_end->handle);
@@ -152,6 +160,7 @@ static int ext4_end_io(ext4_io_end_t *io)
 	handle_t *handle = io->handle;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ext4_debug("ext4_end_io_nolock: io 0x%p from inode %lu,list->next 0x%p,"
 		   "list->prev 0x%p\n",
 		   io, inode->i_ino, io->list.next, io->list.prev);
@@ -196,6 +205,7 @@ static void dump_completed_IO(struct inode *inode, struct list_head *head)
 /* Add the io_end to per-inode completed end_io list. */
 static void ext4_add_complete_io(ext4_io_end_t *io_end)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_inode_info *ei = EXT4_I(io_end->inode);
 	struct ext4_sb_info *sbi = EXT4_SB(io_end->inode->i_sb);
 	struct workqueue_struct *wq;
@@ -221,6 +231,7 @@ static int ext4_do_flush_completed_IO(struct inode *inode,
 	struct ext4_inode_info *ei = EXT4_I(inode);
 	int err, ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&ei->i_completed_io_lock, flags);
 	dump_completed_IO(inode, head);
 	list_replace_init(head, &unwritten);
@@ -243,6 +254,7 @@ static int ext4_do_flush_completed_IO(struct inode *inode,
  */
 void ext4_end_io_rsv_work(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_inode_info *ei = container_of(work, struct ext4_inode_info,
 						  i_rsv_conversion_work);
 	ext4_do_flush_completed_IO(&ei->vfs_inode, &ei->i_rsv_conversion_list);
@@ -250,6 +262,7 @@ void ext4_end_io_rsv_work(struct work_struct *work)
 
 ext4_io_end_t *ext4_init_io_end(struct inode *inode, gfp_t flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ext4_io_end_t *io = kmem_cache_zalloc(io_end_cachep, flags);
 	if (io) {
 		io->inode = inode;
@@ -261,6 +274,7 @@ ext4_io_end_t *ext4_init_io_end(struct inode *inode, gfp_t flags)
 
 void ext4_put_io_end_defer(ext4_io_end_t *io_end)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atomic_dec_and_test(&io_end->count)) {
 		if (!(io_end->flag & EXT4_IO_END_UNWRITTEN) || !io_end->size) {
 			ext4_release_io_end(io_end);
@@ -275,6 +289,7 @@ int ext4_put_io_end(ext4_io_end_t *io_end)
 	int err = 0;
 
 	if (atomic_dec_and_test(&io_end->count)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (io_end->flag & EXT4_IO_END_UNWRITTEN) {
 			err = ext4_convert_unwritten_extents(io_end->handle,
 						io_end->inode, io_end->offset,
@@ -289,6 +304,7 @@ int ext4_put_io_end(ext4_io_end_t *io_end)
 
 ext4_io_end_t *ext4_get_io_end(ext4_io_end_t *io_end)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_inc(&io_end->count);
 	return io_end;
 }
@@ -300,6 +316,7 @@ static void ext4_end_bio(struct bio *bio)
 	sector_t bi_sector = bio->bi_iter.bi_sector;
 	char b[BDEVNAME_SIZE];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ONCE(!io_end, "io_end is NULL: %s: sector %Lu len %u err %d\n",
 		      bio_devname(bio, b),
 		      (long long) bio->bi_iter.bi_sector,
@@ -349,6 +366,7 @@ void ext4_io_submit(struct ext4_io_submit *io)
 	struct bio *bio = io->io_bio;
 
 	if (bio) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int io_op_flags = io->io_wbc->sync_mode == WB_SYNC_ALL ?
 				  REQ_SYNC : 0;
 		io->io_bio->bi_write_hint = io->io_end->inode->i_write_hint;
@@ -361,6 +379,7 @@ void ext4_io_submit(struct ext4_io_submit *io)
 void ext4_io_submit_init(struct ext4_io_submit *io,
 			 struct writeback_control *wbc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	io->io_wbc = wbc;
 	io->io_bio = NULL;
 	io->io_end = NULL;
@@ -373,7 +392,9 @@ static int io_submit_init_bio(struct ext4_io_submit *io,
 
 	bio = bio_alloc(GFP_NOIO, BIO_MAX_PAGES);
 	if (!bio)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	wbc_init_bio(io->io_wbc, bio);
 	bio->bi_iter.bi_sector = bh->b_blocknr * (bh->b_size >> 9);
 	bio_set_dev(bio, bh->b_bdev);
@@ -391,6 +412,7 @@ static int io_submit_add_bh(struct ext4_io_submit *io,
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (io->io_bio && bh->b_blocknr != io->io_next_block) {
 submit_and_retry:
 		ext4_io_submit(io);
@@ -423,6 +445,7 @@ int ext4_bio_write_page(struct ext4_io_submit *io,
 	int nr_submitted = 0;
 	int nr_to_submit = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!PageLocked(page));
 	BUG_ON(PageWriteback(page));
 
diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index 16d247f..a80fc6b 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/ext4/super.c
  *
@@ -143,6 +145,7 @@ MODULE_ALIAS("ext3");
 static int ext4_verify_csum_type(struct super_block *sb,
 				 struct ext4_super_block *es)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ext4_has_feature_metadata_csum(sb))
 		return 1;
 
@@ -152,6 +155,7 @@ static int ext4_verify_csum_type(struct super_block *sb,
 static __le32 ext4_superblock_csum(struct super_block *sb,
 				   struct ext4_super_block *es)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	int offset = offsetof(struct ext4_super_block, s_checksum);
 	__u32 csum;
@@ -164,6 +168,7 @@ static __le32 ext4_superblock_csum(struct super_block *sb,
 static int ext4_superblock_csum_verify(struct super_block *sb,
 				       struct ext4_super_block *es)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ext4_has_metadata_csum(sb))
 		return 1;
 
@@ -172,6 +177,7 @@ static int ext4_superblock_csum_verify(struct super_block *sb,
 
 void ext4_superblock_csum_set(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_super_block *es = EXT4_SB(sb)->s_es;
 
 	if (!ext4_has_metadata_csum(sb))
@@ -186,7 +192,9 @@ void *ext4_kvmalloc(size_t size, gfp_t flags)
 
 	ret = kmalloc(size, flags | __GFP_NOWARN);
 	if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = __vmalloc(size, flags, PAGE_KERNEL);
+}
 	return ret;
 }
 
@@ -196,7 +204,9 @@ void *ext4_kvzalloc(size_t size, gfp_t flags)
 
 	ret = kzalloc(size, flags | __GFP_NOWARN);
 	if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = __vmalloc(size, flags | __GFP_ZERO, PAGE_KERNEL);
+}
 	return ret;
 }
 
@@ -259,6 +269,7 @@ __u32 ext4_itable_unused_count(struct super_block *sb,
 void ext4_block_bitmap_set(struct super_block *sb,
 			   struct ext4_group_desc *bg, ext4_fsblk_t blk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bg->bg_block_bitmap_lo = cpu_to_le32((u32)blk);
 	if (EXT4_DESC_SIZE(sb) >= EXT4_MIN_DESC_SIZE_64BIT)
 		bg->bg_block_bitmap_hi = cpu_to_le32(blk >> 32);
@@ -267,6 +278,7 @@ void ext4_block_bitmap_set(struct super_block *sb,
 void ext4_inode_bitmap_set(struct super_block *sb,
 			   struct ext4_group_desc *bg, ext4_fsblk_t blk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bg->bg_inode_bitmap_lo  = cpu_to_le32((u32)blk);
 	if (EXT4_DESC_SIZE(sb) >= EXT4_MIN_DESC_SIZE_64BIT)
 		bg->bg_inode_bitmap_hi = cpu_to_le32(blk >> 32);
@@ -275,6 +287,7 @@ void ext4_inode_bitmap_set(struct super_block *sb,
 void ext4_inode_table_set(struct super_block *sb,
 			  struct ext4_group_desc *bg, ext4_fsblk_t blk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bg->bg_inode_table_lo = cpu_to_le32((u32)blk);
 	if (EXT4_DESC_SIZE(sb) >= EXT4_MIN_DESC_SIZE_64BIT)
 		bg->bg_inode_table_hi = cpu_to_le32(blk >> 32);
@@ -283,6 +296,7 @@ void ext4_inode_table_set(struct super_block *sb,
 void ext4_free_group_clusters_set(struct super_block *sb,
 				  struct ext4_group_desc *bg, __u32 count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bg->bg_free_blocks_count_lo = cpu_to_le16((__u16)count);
 	if (EXT4_DESC_SIZE(sb) >= EXT4_MIN_DESC_SIZE_64BIT)
 		bg->bg_free_blocks_count_hi = cpu_to_le16(count >> 16);
@@ -291,6 +305,7 @@ void ext4_free_group_clusters_set(struct super_block *sb,
 void ext4_free_inodes_set(struct super_block *sb,
 			  struct ext4_group_desc *bg, __u32 count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bg->bg_free_inodes_count_lo = cpu_to_le16((__u16)count);
 	if (EXT4_DESC_SIZE(sb) >= EXT4_MIN_DESC_SIZE_64BIT)
 		bg->bg_free_inodes_count_hi = cpu_to_le16(count >> 16);
@@ -299,6 +314,7 @@ void ext4_free_inodes_set(struct super_block *sb,
 void ext4_used_dirs_set(struct super_block *sb,
 			  struct ext4_group_desc *bg, __u32 count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bg->bg_used_dirs_count_lo = cpu_to_le16((__u16)count);
 	if (EXT4_DESC_SIZE(sb) >= EXT4_MIN_DESC_SIZE_64BIT)
 		bg->bg_used_dirs_count_hi = cpu_to_le16(count >> 16);
@@ -307,6 +323,7 @@ void ext4_used_dirs_set(struct super_block *sb,
 void ext4_itable_unused_set(struct super_block *sb,
 			  struct ext4_group_desc *bg, __u32 count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bg->bg_itable_unused_lo = cpu_to_le16((__u16)count);
 	if (EXT4_DESC_SIZE(sb) >= EXT4_MIN_DESC_SIZE_64BIT)
 		bg->bg_itable_unused_hi = cpu_to_le16(count >> 16);
@@ -316,6 +333,7 @@ void ext4_itable_unused_set(struct super_block *sb,
 static void __save_error_info(struct super_block *sb, const char *func,
 			    unsigned int line)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_super_block *es = EXT4_SB(sb)->s_es;
 
 	EXT4_SB(sb)->s_mount_state |= EXT4_ERROR_FS;
@@ -345,6 +363,7 @@ static void __save_error_info(struct super_block *sb, const char *func,
 static void save_error_info(struct super_block *sb, const char *func,
 			    unsigned int line)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__save_error_info(sb, func, line);
 	ext4_commit_super(sb, 1);
 }
@@ -372,6 +391,7 @@ static void ext4_journal_commit_callback(journal_t *journal, transaction_t *txn)
 	int				error = is_journal_aborted(journal);
 	struct ext4_journal_cb_entry	*jce;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(txn->t_state == T_FINISHED);
 
 	ext4_process_freed_data(sb, txn->t_tid);
@@ -405,6 +425,7 @@ static void ext4_journal_commit_callback(journal_t *journal, transaction_t *txn)
 
 static void ext4_handle_error(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sb_rdonly(sb))
 		return;
 
@@ -444,7 +465,9 @@ void __ext4_error(struct super_block *sb, const char *function,
 	va_list args;
 
 	if (unlikely(ext4_forced_shutdown(EXT4_SB(sb))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (ext4_error_ratelimit(sb)) {
 		va_start(args, fmt);
@@ -468,7 +491,9 @@ void __ext4_error_inode(struct inode *inode, const char *function,
 	struct ext4_super_block *es = EXT4_SB(inode->i_sb)->s_es;
 
 	if (unlikely(ext4_forced_shutdown(EXT4_SB(inode->i_sb))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	es->s_last_error_ino = cpu_to_le32(inode->i_ino);
 	es->s_last_error_block = cpu_to_le64(block);
@@ -503,7 +528,9 @@ void __ext4_error_file(struct file *file, const char *function,
 	char pathname[80], *path;
 
 	if (unlikely(ext4_forced_shutdown(EXT4_SB(inode->i_sb))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	es = EXT4_SB(inode->i_sb)->s_es;
 	es->s_last_error_ino = cpu_to_le32(inode->i_ino);
@@ -582,7 +609,9 @@ void __ext4_std_error(struct super_block *sb, const char *function,
 	const char *errstr;
 
 	if (unlikely(ext4_forced_shutdown(EXT4_SB(sb))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* Special case: if the error is EROFS, and we're not already
 	 * inside a transaction, then there's really no point in logging
@@ -617,7 +646,9 @@ void __ext4_abort(struct super_block *sb, const char *function,
 	va_list args;
 
 	if (unlikely(ext4_forced_shutdown(EXT4_SB(sb))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	save_error_info(sb, function, line);
 	va_start(args, fmt);
@@ -655,7 +686,9 @@ void __ext4_msg(struct super_block *sb,
 	va_list args;
 
 	if (!___ratelimit(&(EXT4_SB(sb)->s_msg_ratelimit_state), "EXT4-fs"))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	va_start(args, fmt);
 	vaf.fmt = fmt;
@@ -675,7 +708,9 @@ void __ext4_warning(struct super_block *sb, const char *function,
 	va_list args;
 
 	if (!ext4_warning_ratelimit(sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	va_start(args, fmt);
 	vaf.fmt = fmt;
@@ -692,7 +727,9 @@ void __ext4_warning_inode(const struct inode *inode, const char *function,
 	va_list args;
 
 	if (!ext4_warning_ratelimit(inode->i_sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	va_start(args, fmt);
 	vaf.fmt = fmt;
@@ -715,7 +752,9 @@ __acquires(bitlock)
 	struct ext4_super_block *es = EXT4_SB(sb)->s_es;
 
 	if (unlikely(ext4_forced_shutdown(EXT4_SB(sb))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	es->s_last_error_ino = cpu_to_le32(ino);
 	es->s_last_error_block = cpu_to_le64(block);
@@ -761,6 +800,7 @@ __acquires(bitlock)
 
 void ext4_update_dynamic_rev(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_super_block *es = EXT4_SB(sb)->s_es;
 
 	if (le32_to_cpu(es->s_rev_level) > EXT4_GOOD_OLD_REV)
@@ -795,6 +835,7 @@ static struct block_device *ext4_blkdev_get(dev_t dev, struct super_block *sb)
 	bdev = blkdev_get_by_dev(dev, FMODE_READ|FMODE_WRITE|FMODE_EXCL, sb);
 	if (IS_ERR(bdev))
 		goto fail;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return bdev;
 
 fail:
@@ -808,6 +849,7 @@ static struct block_device *ext4_blkdev_get(dev_t dev, struct super_block *sb)
  */
 static void ext4_blkdev_put(struct block_device *bdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	blkdev_put(bdev, FMODE_READ|FMODE_WRITE|FMODE_EXCL);
 }
 
@@ -816,6 +858,7 @@ static void ext4_blkdev_remove(struct ext4_sb_info *sbi)
 	struct block_device *bdev;
 	bdev = sbi->journal_bdev;
 	if (bdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ext4_blkdev_put(bdev);
 		sbi->journal_bdev = NULL;
 	}
@@ -823,6 +866,7 @@ static void ext4_blkdev_remove(struct ext4_sb_info *sbi)
 
 static inline struct inode *orphan_list_entry(struct list_head *l)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &list_entry(l, struct ext4_inode_info, i_orphan)->vfs_inode;
 }
 
@@ -834,6 +878,7 @@ static void dump_orphan_list(struct super_block *sb, struct ext4_sb_info *sbi)
 		 le32_to_cpu(sbi->s_es->s_last_orphan));
 
 	printk(KERN_ERR "sb_info orphan list:\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each(l, &sbi->s_orphan) {
 		struct inode *inode = orphan_list_entry(l);
 		printk(KERN_ERR "  "
@@ -863,6 +908,7 @@ static inline void ext4_quota_off_umount(struct super_block *sb)
 
 static void ext4_put_super(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	struct ext4_super_block *es = sbi->s_es;
 	int aborted = 0;
@@ -966,7 +1012,9 @@ static struct inode *ext4_alloc_inode(struct super_block *sb)
 
 	ei = kmem_cache_alloc(ext4_inode_cachep, GFP_NOFS);
 	if (!ei)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	ei->vfs_inode.i_version = 1;
 	spin_lock_init(&ei->i_raw_lock);
@@ -998,6 +1046,7 @@ static struct inode *ext4_alloc_inode(struct super_block *sb)
 
 static int ext4_drop_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int drop = generic_drop_inode(inode);
 
 	trace_ext4_drop_inode(inode, drop);
@@ -1006,12 +1055,14 @@ static int ext4_drop_inode(struct inode *inode)
 
 static void ext4_i_callback(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = container_of(head, struct inode, i_rcu);
 	kmem_cache_free(ext4_inode_cachep, EXT4_I(inode));
 }
 
 static void ext4_destroy_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!list_empty(&(EXT4_I(inode)->i_orphan))) {
 		ext4_msg(inode->i_sb, KERN_ERR,
 			 "Inode %lu (%p): orphan list check failed!",
@@ -1029,6 +1080,7 @@ static void init_once(void *foo)
 	struct ext4_inode_info *ei = (struct ext4_inode_info *) foo;
 
 	INIT_LIST_HEAD(&ei->i_orphan);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	init_rwsem(&ei->xattr_sem);
 	init_rwsem(&ei->i_data_sem);
 	init_rwsem(&ei->i_mmap_sem);
@@ -1043,7 +1095,9 @@ static int __init init_inodecache(void)
 						SLAB_MEM_SPREAD|SLAB_ACCOUNT),
 					     init_once);
 	if (ext4_inode_cachep == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
@@ -1059,6 +1113,7 @@ static void destroy_inodecache(void)
 
 void ext4_clear_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	invalidate_inode_buffers(inode);
 	clear_inode(inode);
 	dquot_drop(inode);
@@ -1080,6 +1135,7 @@ static struct inode *ext4_nfs_get_inode(struct super_block *sb,
 {
 	struct inode *inode;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ino < EXT4_FIRST_INO(sb) && ino != EXT4_ROOT_INO)
 		return ERR_PTR(-ESTALE);
 	if (ino > le32_to_cpu(EXT4_SB(sb)->s_es->s_inodes_count))
@@ -1107,6 +1163,7 @@ static struct inode *ext4_nfs_get_inode(struct super_block *sb,
 static struct dentry *ext4_fh_to_dentry(struct super_block *sb, struct fid *fid,
 					int fh_len, int fh_type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return generic_fh_to_dentry(sb, fid, fh_len, fh_type,
 				    ext4_nfs_get_inode);
 }
@@ -1114,6 +1171,7 @@ static struct dentry *ext4_fh_to_dentry(struct super_block *sb, struct fid *fid,
 static struct dentry *ext4_fh_to_parent(struct super_block *sb, struct fid *fid,
 					int fh_len, int fh_type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return generic_fh_to_parent(sb, fid, fh_len, fh_type,
 				    ext4_nfs_get_inode);
 }
@@ -1127,6 +1185,7 @@ static struct dentry *ext4_fh_to_parent(struct super_block *sb, struct fid *fid,
 static int bdev_try_to_free_page(struct super_block *sb, struct page *page,
 				 gfp_t wait)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	journal_t *journal = EXT4_SB(sb)->s_journal;
 
 	WARN_ON(PageChecked(page));
@@ -1271,6 +1330,7 @@ static int ext4_get_next_id(struct super_block *sb, struct kqid *qid);
 
 static struct dquot **ext4_get_dquots(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return EXT4_I(inode)->i_dquot;
 }
 
@@ -1446,6 +1506,7 @@ static ext4_fsblk_t get_sb_block(void **data)
 	ext4_fsblk_t	sb_block;
 	char		*options = (char *) *data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!options || strncmp(options, "sb=", 3) != 0)
 		return 1;	/* Default location */
 
@@ -1472,6 +1533,7 @@ static const char deprecated_msg[] =
 #ifdef CONFIG_QUOTA
 static int set_qf_name(struct super_block *sb, int qtype, substring_t *args)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	char *qname;
 	int ret = -1;
@@ -1519,6 +1581,7 @@ static int set_qf_name(struct super_block *sb, int qtype, substring_t *args)
 static int clear_qf_name(struct super_block *sb, int qtype)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 
 	if (sb_any_quota_loaded(sb) &&
@@ -1648,6 +1711,7 @@ static int handle_mount_opt(struct super_block *sb, char *opt, int token,
 			    substring_t *args, unsigned long *journal_devnum,
 			    unsigned int *journal_ioprio, int is_remount)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	const struct mount_opts *m;
 	kuid_t uid;
@@ -1900,6 +1964,7 @@ static int parse_options(char *options, struct super_block *sb,
 			 unsigned int *journal_ioprio,
 			 int is_remount)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	char *p;
 	substring_t args[MAX_OPT_ARGS];
@@ -2000,6 +2065,7 @@ static const char *token2str(int token)
 {
 	const struct match_token *t;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (t = tokens; t->token != Opt_err; t++)
 		if (t->token == token && !strchr(t->pattern, '='))
 			break;
@@ -2014,6 +2080,7 @@ static const char *token2str(int token)
 static int _ext4_show_options(struct seq_file *seq, struct super_block *sb,
 			      int nodefs)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	struct ext4_super_block *es = sbi->s_es;
 	int def_errors, def_mount_opt = nodefs ? 0 : sbi->s_def_mount_opt;
@@ -2092,6 +2159,7 @@ static int _ext4_show_options(struct seq_file *seq, struct super_block *sb,
 
 static int ext4_show_options(struct seq_file *seq, struct dentry *root)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return _ext4_show_options(seq, root->d_sb, 0);
 }
 
@@ -2100,6 +2168,7 @@ int ext4_seq_options_show(struct seq_file *seq, void *offset)
 	struct super_block *sb = seq->private;
 	int rc;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_puts(seq, sb_rdonly(sb) ? "ro" : "rw");
 	rc = _ext4_show_options(seq, sb, 1);
 	seq_puts(seq, "\n");
@@ -2109,6 +2178,7 @@ int ext4_seq_options_show(struct seq_file *seq, void *offset)
 static int ext4_setup_super(struct super_block *sb, struct ext4_super_block *es,
 			    int read_only)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	int res = 0;
 
@@ -2165,6 +2235,7 @@ static int ext4_setup_super(struct super_block *sb, struct ext4_super_block *es,
 
 int ext4_alloc_flex_bg_array(struct super_block *sb, ext4_group_t ngroup)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	struct flex_groups *new_groups;
 	int size;
@@ -2197,6 +2268,7 @@ int ext4_alloc_flex_bg_array(struct super_block *sb, ext4_group_t ngroup)
 
 static int ext4_fill_flex_info(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	struct ext4_group_desc *gdp = NULL;
 	ext4_group_t flex_group;
@@ -2249,8 +2321,10 @@ static __le16 ext4_group_desc_csum(struct super_block *sb, __u32 block_group,
 				     sizeof(dummy_csum));
 		offset += sizeof(dummy_csum);
 		if (offset < sbi->s_desc_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			csum32 = ext4_chksum(sbi, csum32, (__u8 *)gdp + offset,
 					     sbi->s_desc_size - offset);
+}
 
 		crc = csum32 & 0xFFFF;
 		goto out;
@@ -2278,6 +2352,7 @@ static __le16 ext4_group_desc_csum(struct super_block *sb, __u32 block_group,
 int ext4_group_desc_csum_verify(struct super_block *sb, __u32 block_group,
 				struct ext4_group_desc *gdp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ext4_has_group_desc_csum(sb) &&
 	    (gdp->bg_checksum != ext4_group_desc_csum(sb, block_group, gdp)))
 		return 0;
@@ -2288,6 +2363,7 @@ int ext4_group_desc_csum_verify(struct super_block *sb, __u32 block_group,
 void ext4_group_desc_csum_set(struct super_block *sb, __u32 block_group,
 			      struct ext4_group_desc *gdp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ext4_has_group_desc_csum(sb))
 		return;
 	gdp->bg_checksum = ext4_group_desc_csum(sb, block_group, gdp);
@@ -2298,6 +2374,7 @@ static int ext4_check_descriptors(struct super_block *sb,
 				  ext4_fsblk_t sb_block,
 				  ext4_group_t *first_not_zeroed)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	ext4_fsblk_t first_block = le32_to_cpu(sbi->s_es->s_first_data_block);
 	ext4_fsblk_t last_block;
@@ -2410,6 +2487,7 @@ static void ext4_orphan_cleanup(struct super_block *sb,
 #endif
 	if (!es->s_last_orphan) {
 		jbd_debug(4, "no orphan inodes to clean up\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -2608,6 +2686,7 @@ static loff_t ext4_max_bitmap_size(int bits, int has_huge_files)
 	 * number of 512-byte sectors of the file.
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!has_huge_files || sizeof(blkcnt_t) < sizeof(u64)) {
 		/*
 		 * !has_huge_files or CONFIG_LBDAF not enabled implies that
@@ -2656,6 +2735,7 @@ static loff_t ext4_max_bitmap_size(int bits, int has_huge_files)
 static ext4_fsblk_t descriptor_loc(struct super_block *sb,
 				   ext4_fsblk_t logical_sb_block, int nr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	ext4_group_t bg, first_meta_bg;
 	int has_super = 0;
@@ -2699,6 +2779,7 @@ static unsigned long ext4_get_stripe_size(struct ext4_sb_info *sbi)
 			le32_to_cpu(sbi->s_es->s_raid_stripe_width);
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sbi->s_stripe && sbi->s_stripe <= sbi->s_blocks_per_group)
 		ret = sbi->s_stripe;
 	else if (stripe_width && stripe_width <= sbi->s_blocks_per_group)
@@ -2726,6 +2807,7 @@ static unsigned long ext4_get_stripe_size(struct ext4_sb_info *sbi)
  */
 static int ext4_feature_set_ok(struct super_block *sb, int readonly)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ext4_has_unknown_ext4_incompat_features(sb)) {
 		ext4_msg(sb, KERN_ERR,
 			"Couldn't mount because of "
@@ -2848,6 +2930,7 @@ static int ext4_run_li_request(struct ext4_li_request *elr)
 	sb = elr->lr_super;
 	ngroups = EXT4_SB(sb)->s_groups_count;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (group = elr->lr_next_group; group < ngroups; group++) {
 		gdp = ext4_get_group_desc(sb, group, NULL);
 		if (!gdp) {
@@ -2886,7 +2969,9 @@ static void ext4_remove_li_request(struct ext4_li_request *elr)
 	struct ext4_sb_info *sbi;
 
 	if (!elr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	sbi = elr->lr_sbi;
 
@@ -2897,6 +2982,7 @@ static void ext4_remove_li_request(struct ext4_li_request *elr)
 
 static void ext4_unregister_li_request(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&ext4_li_mtx);
 	if (!ext4_li_info) {
 		mutex_unlock(&ext4_li_mtx);
@@ -2927,6 +3013,7 @@ static int ext4_lazyinit_thread(void *arg)
 	struct ext4_li_request *elr;
 	unsigned long next_wakeup, cur;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(NULL == eli);
 
 cont_thread:
@@ -3027,6 +3114,7 @@ static void ext4_clear_request_list(void)
 	struct ext4_li_request *elr;
 
 	mutex_lock(&ext4_li_info->li_list_mtx);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_safe(pos, n, &ext4_li_info->li_request_list) {
 		elr = list_entry(pos, struct ext4_li_request,
 				 lr_request);
@@ -3037,6 +3125,7 @@ static void ext4_clear_request_list(void)
 
 static int ext4_run_lazyinit_thread(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ext4_lazyinit_task = kthread_run(ext4_lazyinit_thread,
 					 ext4_li_info, "ext4lazyinit");
 	if (IS_ERR(ext4_lazyinit_task)) {
@@ -3064,6 +3153,7 @@ static ext4_group_t ext4_has_uninit_itable(struct super_block *sb)
 	ext4_group_t group, ngroups = EXT4_SB(sb)->s_groups_count;
 	struct ext4_group_desc *gdp = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (group = 0; group < ngroups; group++) {
 		gdp = ext4_get_group_desc(sb, group, NULL);
 		if (!gdp)
@@ -3082,7 +3172,9 @@ static int ext4_li_info_new(void)
 
 	eli = kzalloc(sizeof(*eli), GFP_KERNEL);
 	if (!eli)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	INIT_LIST_HEAD(&eli->li_request_list);
 	mutex_init(&eli->li_list_mtx);
@@ -3097,6 +3189,7 @@ static int ext4_li_info_new(void)
 static struct ext4_li_request *ext4_li_request_new(struct super_block *sb,
 					    ext4_group_t start)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	struct ext4_li_request *elr;
 
@@ -3121,6 +3214,7 @@ static struct ext4_li_request *ext4_li_request_new(struct super_block *sb,
 int ext4_register_li_request(struct super_block *sb,
 			     ext4_group_t first_not_zeroed)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	struct ext4_li_request *elr = NULL;
 	ext4_group_t ngroups = EXT4_SB(sb)->s_groups_count;
@@ -3249,6 +3343,7 @@ static int set_journal_csum_feature_set(struct super_block *sb)
 static int count_overhead(struct super_block *sb, ext4_group_t grp,
 			  char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info	*sbi = EXT4_SB(sb);
 	struct ext4_group_desc	*gdp;
 	ext4_fsblk_t		first_block, last_block, b;
@@ -3309,6 +3404,7 @@ static int count_overhead(struct super_block *sb, ext4_group_t grp,
  */
 int ext4_calculate_overhead(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	struct ext4_super_block *es = sbi->s_es;
 	struct inode *j_inode;
@@ -3378,7 +3474,9 @@ static void ext4_set_resv_clusters(struct super_block *sb)
 	 * to keep ext2/3 backward compatibility.
 	 */
 	if (!ext4_has_feature_extents(sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	/*
 	 * By default we reserve 2% or 4096 clusters, whichever is smaller.
 	 * This should cover the situations where we can not afford to run
@@ -3398,6 +3496,7 @@ static void ext4_set_resv_clusters(struct super_block *sb)
 
 static int ext4_fill_super(struct super_block *sb, void *data, int silent)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dax_device *dax_dev = fs_dax_get_by_bdev(sb->s_bdev);
 	char *orig_data = kstrdup(data, GFP_KERNEL);
 	struct buffer_head *bh;
@@ -4417,6 +4516,7 @@ static int ext4_fill_super(struct super_block *sb, void *data, int silent)
  */
 static void ext4_init_journal_params(struct super_block *sb, journal_t *journal)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 
 	journal->j_commit_interval = sbi->s_commit_interval;
@@ -4447,6 +4547,7 @@ static struct inode *ext4_get_journal_inode(struct super_block *sb,
 	 */
 	journal_inode = ext4_iget(sb, journal_inum);
 	if (IS_ERR(journal_inode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ext4_msg(sb, KERN_ERR, "no journal found");
 		return NULL;
 	}
@@ -4473,6 +4574,7 @@ static journal_t *ext4_get_journal(struct super_block *sb,
 	struct inode *journal_inode;
 	journal_t *journal;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!ext4_has_feature_journal(sb));
 
 	journal_inode = ext4_get_journal_inode(sb, journal_inum);
@@ -4503,6 +4605,7 @@ static journal_t *ext4_get_dev_journal(struct super_block *sb,
 	struct ext4_super_block *es;
 	struct block_device *bdev;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!ext4_has_feature_journal(sb));
 
 	bdev = ext4_blkdev_get(j_dev, sb);
@@ -4595,6 +4698,7 @@ static int ext4_load_journal(struct super_block *sb,
 	int err = 0;
 	int really_read_only;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!ext4_has_feature_journal(sb));
 
 	if (journal_devnum &&
@@ -4679,6 +4783,7 @@ static int ext4_load_journal(struct super_block *sb,
 
 static int ext4_commit_super(struct super_block *sb, int sync)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_super_block *es = EXT4_SB(sb)->s_es;
 	struct buffer_head *sbh = EXT4_SB(sb)->s_sbh;
 	int error = 0;
@@ -4758,6 +4863,7 @@ static int ext4_commit_super(struct super_block *sb, int sync)
 static void ext4_mark_recovery_complete(struct super_block *sb,
 					struct ext4_super_block *es)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	journal_t *journal = EXT4_SB(sb)->s_journal;
 
 	if (!ext4_has_feature_journal(sb)) {
@@ -4789,6 +4895,7 @@ static void ext4_clear_journal_err(struct super_block *sb,
 	int j_errno;
 	const char *errstr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!ext4_has_feature_journal(sb));
 
 	journal = EXT4_SB(sb)->s_journal;
@@ -4825,7 +4932,9 @@ int ext4_force_commit(struct super_block *sb)
 	journal_t *journal;
 
 	if (sb_rdonly(sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	journal = EXT4_SB(sb)->s_journal;
 	return ext4_journal_force_commit(journal);
@@ -4839,7 +4948,9 @@ static int ext4_sync_fs(struct super_block *sb, int wait)
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 
 	if (unlikely(ext4_forced_shutdown(EXT4_SB(sb))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	trace_ext4_sync_fs(sb, wait);
 	flush_workqueue(sbi->rsv_conversion_wq);
@@ -4890,7 +5001,9 @@ static int ext4_freeze(struct super_block *sb)
 	journal_t *journal;
 
 	if (sb_rdonly(sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	journal = EXT4_SB(sb)->s_journal;
 
@@ -4924,6 +5037,7 @@ static int ext4_freeze(struct super_block *sb)
  */
 static int ext4_unfreeze(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sb_rdonly(sb) || ext4_forced_shutdown(EXT4_SB(sb)))
 		return 0;
 
@@ -4978,6 +5092,7 @@ static int ext4_remount(struct super_block *sb, int *flags, char *data)
 	old_opts.s_max_batch_time = sbi->s_max_batch_time;
 #ifdef CONFIG_QUOTA
 	old_opts.s_jquota_fmt = sbi->s_jquota_fmt;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < EXT4_MAXQUOTAS; i++)
 		if (sbi->s_qf_names[i]) {
 			old_opts.s_qf_names[i] = kstrdup(sbi->s_qf_names[i],
@@ -5221,7 +5336,9 @@ static int ext4_statfs_project(struct super_block *sb,
 	qid = make_kqid_projid(projid);
 	dquot = dqget(sb, qid);
 	if (IS_ERR(dquot))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(dquot);
+}
 	spin_lock(&dquot->dq_dqb_lock);
 
 	limit = (dquot->dq_dqb.dqb_bsoftlimit ?
@@ -5262,7 +5379,9 @@ static int ext4_statfs(struct dentry *dentry, struct kstatfs *buf)
 	resv_blocks = EXT4_C2B(sbi, atomic64_read(&sbi->s_resv_clusters));
 
 	if (!test_opt(sb, MINIX_DF))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		overhead = sbi->s_overhead;
+}
 
 	buf->f_type = EXT4_SUPER_MAGIC;
 	buf->f_bsize = sb->s_blocksize;
@@ -5300,6 +5419,7 @@ static int ext4_statfs(struct dentry *dentry, struct kstatfs *buf)
  */
 static inline struct inode *dquot_to_inode(struct dquot *dquot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sb_dqopt(dquot->dq_sb)->files[dquot->dq_id.type];
 }
 
@@ -5310,6 +5430,7 @@ static int ext4_write_dquot(struct dquot *dquot)
 	struct inode *inode;
 
 	inode = dquot_to_inode(dquot);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	handle = ext4_journal_start(inode, EXT4_HT_QUOTA,
 				    EXT4_QUOTA_TRANS_BLOCKS(dquot->dq_sb));
 	if (IS_ERR(handle))
@@ -5326,6 +5447,7 @@ static int ext4_acquire_dquot(struct dquot *dquot)
 	int ret, err;
 	handle_t *handle;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	handle = ext4_journal_start(dquot_to_inode(dquot), EXT4_HT_QUOTA,
 				    EXT4_QUOTA_INIT_BLOCKS(dquot->dq_sb));
 	if (IS_ERR(handle))
@@ -5342,6 +5464,7 @@ static int ext4_release_dquot(struct dquot *dquot)
 	int ret, err;
 	handle_t *handle;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	handle = ext4_journal_start(dquot_to_inode(dquot), EXT4_HT_QUOTA,
 				    EXT4_QUOTA_DEL_BLOCKS(dquot->dq_sb));
 	if (IS_ERR(handle)) {
@@ -5379,7 +5502,9 @@ static int ext4_write_info(struct super_block *sb, int type)
 	/* Data block + inode block */
 	handle = ext4_journal_start(d_inode(sb->s_root), EXT4_HT_QUOTA, 2);
 	if (IS_ERR(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(handle);
+}
 	ret = dquot_commit_info(sb, type);
 	err = ext4_journal_stop(handle);
 	if (!ret)
@@ -5393,12 +5518,14 @@ static int ext4_write_info(struct super_block *sb, int type)
  */
 static int ext4_quota_on_mount(struct super_block *sb, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dquot_quota_on_mount(sb, EXT4_SB(sb)->s_qf_names[type],
 					EXT4_SB(sb)->s_jquota_fmt, type);
 }
 
 static void lockdep_set_quota_inode(struct inode *inode, int subclass)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_inode_info *ei = EXT4_I(inode);
 
 	/* The first argument of lockdep_set_subclass has to be
@@ -5420,7 +5547,9 @@ static int ext4_quota_on(struct super_block *sb, int type, int format_id,
 	int err;
 
 	if (!test_opt(sb, QUOTA))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* Quotafile not on the same filesystem? */
 	if (path->dentry->d_sb != sb)
@@ -5498,6 +5627,7 @@ static int ext4_quota_enable(struct super_block *sb, int type, int format_id,
 		le32_to_cpu(EXT4_SB(sb)->s_es->s_prj_quota_inum)
 	};
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!ext4_has_feature_quota(sb));
 
 	if (!qf_inums[type])
@@ -5536,6 +5666,7 @@ static int ext4_enable_quotas(struct super_block *sb)
 	};
 
 	sb_dqopt(sb)->flags |= DQUOT_QUOTA_SYS_FILE | DQUOT_NOLIST_DIRTY;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (type = 0; type < EXT4_MAXQUOTAS; type++) {
 		if (qf_inums[type]) {
 			err = ext4_quota_enable(sb, type, QFMT_VFS_V1,
@@ -5558,6 +5689,7 @@ static int ext4_enable_quotas(struct super_block *sb)
 
 static int ext4_quota_off(struct super_block *sb, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = sb_dqopt(sb)->files[type];
 	handle_t *handle;
 	int err;
@@ -5605,6 +5737,7 @@ static int ext4_quota_off(struct super_block *sb, int type)
 static ssize_t ext4_quota_read(struct super_block *sb, int type, char *data,
 			       size_t len, loff_t off)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = sb_dqopt(sb)->files[type];
 	ext4_lblk_t blk = off >> EXT4_BLOCK_SIZE_BITS(sb);
 	int offset = off & (sb->s_blocksize - 1);
@@ -5642,6 +5775,7 @@ static ssize_t ext4_quota_read(struct super_block *sb, int type, char *data,
 static ssize_t ext4_quota_write(struct super_block *sb, int type,
 				const char *data, size_t len, loff_t off)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = sb_dqopt(sb)->files[type];
 	ext4_lblk_t blk = off >> EXT4_BLOCK_SIZE_BITS(sb);
 	int err, offset = off & (sb->s_blocksize - 1);
@@ -5702,7 +5836,9 @@ static int ext4_get_next_id(struct super_block *sb, struct kqid *qid)
 	const struct quota_format_ops	*ops;
 
 	if (!sb_has_quota_loaded(sb, qid->type))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
 	ops = sb_dqopt(sb)->ops[qid->type];
 	if (!ops || !ops->get_next_id)
 		return -ENOSYS;
@@ -5713,6 +5849,7 @@ static int ext4_get_next_id(struct super_block *sb, struct kqid *qid)
 static struct dentry *ext4_mount(struct file_system_type *fs_type, int flags,
 		       const char *dev_name, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mount_bdev(fs_type, flags, dev_name, data, ext4_fill_super);
 }
 
@@ -5721,17 +5858,21 @@ static inline void register_as_ext2(void)
 {
 	int err = register_filesystem(&ext2_fs_type);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_WARNING
 		       "EXT4-fs: Unable to register as ext2 (%d)\n", err);
 }
+}
 
 static inline void unregister_as_ext2(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_filesystem(&ext2_fs_type);
 }
 
 static inline int ext2_feature_set_ok(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ext4_has_unknown_ext2_incompat_features(sb))
 		return 0;
 	if (sb_rdonly(sb))
@@ -5800,7 +5941,9 @@ static int __init ext4_init_fs(void)
 
 	err = ext4_init_es();
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = ext4_init_pageio();
 	if (err)
@@ -5826,6 +5969,7 @@ static int __init ext4_init_fs(void)
 	if (err)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 out:
 	unregister_as_ext2();
@@ -5847,6 +5991,7 @@ static int __init ext4_init_fs(void)
 
 static void __exit ext4_exit_fs(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ext4_destroy_lazyinit_thread();
 	unregister_as_ext2();
 	unregister_as_ext3();
diff --git a/fs/ext4/sysfs.c b/fs/ext4/sysfs.c
index e21afd5..ec18bda 100644
--- a/fs/ext4/sysfs.c
+++ b/fs/ext4/sysfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/ext4/sysfs.c
@@ -54,7 +56,9 @@ static ssize_t session_write_kbytes_show(struct ext4_attr *a,
 	struct super_block *sb = sbi->s_buddy_cache->i_sb;
 
 	if (!sb->s_bdev->bd_part)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return snprintf(buf, PAGE_SIZE, "0\n");
+}
 	return snprintf(buf, PAGE_SIZE, "%lu\n",
 			(part_stat_read(sb->s_bdev->bd_part, sectors[1]) -
 			 sbi->s_sectors_written_start) >> 1);
@@ -66,7 +70,9 @@ static ssize_t lifetime_write_kbytes_show(struct ext4_attr *a,
 	struct super_block *sb = sbi->s_buddy_cache->i_sb;
 
 	if (!sb->s_bdev->bd_part)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return snprintf(buf, PAGE_SIZE, "0\n");
+}
 	return snprintf(buf, PAGE_SIZE, "%llu\n",
 			(unsigned long long)(sbi->s_kbytes_written +
 			((part_stat_read(sb->s_bdev->bd_part, sectors[1]) -
@@ -82,7 +88,9 @@ static ssize_t inode_readahead_blks_store(struct ext4_attr *a,
 
 	ret = kstrtoul(skip_spaces(buf), 0, &t);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (t && (!is_power_of_2(t) || t > 0x40000000))
 		return -EINVAL;
@@ -101,6 +109,7 @@ static ssize_t reserved_clusters_store(struct ext4_attr *a,
 	int ret;
 
 	ret = kstrtoull(skip_spaces(buf), 0, &val);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret || val >= clusters)
 		return -EINVAL;
 
@@ -115,7 +124,9 @@ static ssize_t trigger_test_error(struct ext4_attr *a,
 	int len = count;
 
 	if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	if (len && buf[len-1] == '\n')
 		len--;
@@ -242,6 +253,7 @@ static struct attribute *ext4_feat_attrs[] = {
 
 static void *calc_ptr(struct ext4_attr *a, struct ext4_sb_info *sbi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (a->attr_ptr) {
 	case ptr_explicit:
 		return a->u.explicit_ptr;
@@ -256,6 +268,7 @@ static void *calc_ptr(struct ext4_attr *a, struct ext4_sb_info *sbi)
 static ssize_t ext4_attr_show(struct kobject *kobj,
 			      struct attribute *attr, char *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = container_of(kobj, struct ext4_sb_info,
 						s_kobj);
 	struct ext4_attr *a = container_of(attr, struct ext4_attr, attr);
@@ -296,6 +309,7 @@ static ssize_t ext4_attr_store(struct kobject *kobj,
 			       struct attribute *attr,
 			       const char *buf, size_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = container_of(kobj, struct ext4_sb_info,
 						s_kobj);
 	struct ext4_attr *a = container_of(attr, struct ext4_attr, attr);
@@ -324,6 +338,7 @@ static ssize_t ext4_attr_store(struct kobject *kobj,
 
 static void ext4_sb_release(struct kobject *kobj)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = container_of(kobj, struct ext4_sb_info,
 						s_kobj);
 	complete(&sbi->s_kobj_unregister);
@@ -388,6 +403,7 @@ static const struct ext4_proc_files {
 
 int ext4_register_sysfs(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	const struct ext4_proc_files *p;
 	int err;
@@ -412,6 +428,7 @@ int ext4_register_sysfs(struct super_block *sb)
 
 void ext4_unregister_sysfs(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	const struct ext4_proc_files *p;
 
@@ -431,19 +448,25 @@ int __init ext4_init_sysfs(void)
 	ext4_kset.kobj.parent = fs_kobj;
 	ret = kset_register(&ext4_kset);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = kobject_init_and_add(&ext4_feat, &ext4_feat_ktype,
 				   NULL, "features");
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kset_unregister(&ext4_kset);
+}
 	else
 		ext4_proc_root = proc_mkdir(proc_dirname, NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 void ext4_exit_sysfs(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kobject_put(&ext4_feat);
 	kset_unregister(&ext4_kset);
 	remove_proc_entry(proc_dirname, NULL);
diff --git a/fs/fat/cache.c b/fs/fat/cache.c
index e9bed49..d494c5a 100644
--- a/fs/fat/cache.c
+++ b/fs/fat/cache.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/fat/cache.c
@@ -31,6 +33,7 @@ struct fat_cache_id {
 
 static inline int fat_max_cache(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return FAT_MAX_CACHE;
 }
 
@@ -50,22 +53,27 @@ int __init fat_cache_init(void)
 				0, SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD,
 				init_once);
 	if (fat_cache_cachep == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
 void fat_cache_destroy(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_destroy(fat_cache_cachep);
 }
 
 static inline struct fat_cache *fat_cache_alloc(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return kmem_cache_alloc(fat_cache_cachep, GFP_NOFS);
 }
 
 static inline void fat_cache_free(struct fat_cache *cache)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!list_empty(&cache->cache_list));
 	kmem_cache_free(fat_cache_cachep, cache);
 }
@@ -73,6 +81,7 @@ static inline void fat_cache_free(struct fat_cache *cache)
 static inline void fat_cache_update_lru(struct inode *inode,
 					struct fat_cache *cache)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (MSDOS_I(inode)->cache_lru.next != &cache->cache_list)
 		list_move(&cache->cache_list, &MSDOS_I(inode)->cache_lru);
 }
@@ -87,6 +96,7 @@ static int fat_cache_lookup(struct inode *inode, int fclus,
 	int offset = -1;
 
 	spin_lock(&MSDOS_I(inode)->cache_lru_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(p, &MSDOS_I(inode)->cache_lru, cache_list) {
 		/* Find the cache of "fclus" or nearest cache. */
 		if (p->fcluster <= fclus && hit->fcluster < p->fcluster) {
@@ -119,6 +129,7 @@ static struct fat_cache *fat_cache_merge(struct inode *inode,
 {
 	struct fat_cache *p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(p, &MSDOS_I(inode)->cache_lru, cache_list) {
 		/* Find the same part as "new" in cluster-chain. */
 		if (p->fcluster == new->fcluster) {
@@ -136,7 +147,9 @@ static void fat_cache_add(struct inode *inode, struct fat_cache_id *new)
 	struct fat_cache *cache, *tmp;
 
 	if (new->fcluster == -1) /* dummy cache */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	spin_lock(&MSDOS_I(inode)->cache_lru_lock);
 	if (new->id != FAT_CACHE_VALID &&
@@ -185,6 +198,7 @@ static void fat_cache_add(struct inode *inode, struct fat_cache_id *new)
  */
 static void __fat_cache_inval_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_inode_info *i = MSDOS_I(inode);
 	struct fat_cache *cache;
 
@@ -203,6 +217,7 @@ static void __fat_cache_inval_inode(struct inode *inode)
 
 void fat_cache_inval_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&MSDOS_I(inode)->cache_lru_lock);
 	__fat_cache_inval_inode(inode);
 	spin_unlock(&MSDOS_I(inode)->cache_lru_lock);
@@ -210,12 +225,14 @@ void fat_cache_inval_inode(struct inode *inode)
 
 static inline int cache_contiguous(struct fat_cache_id *cid, int dclus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cid->nr_contig++;
 	return ((cid->dcluster + cid->nr_contig) == dclus);
 }
 
 static inline void cache_init(struct fat_cache_id *cid, int fclus, int dclus)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cid->id = FAT_CACHE_VALID;
 	cid->fcluster = fclus;
 	cid->dcluster = dclus;
@@ -230,6 +247,7 @@ int fat_get_cluster(struct inode *inode, int cluster, int *fclus, int *dclus)
 	struct fat_cache_id cid;
 	int nr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(MSDOS_I(inode)->i_start == 0);
 
 	*fclus = 0;
@@ -289,7 +307,9 @@ static int fat_bmap_cluster(struct inode *inode, int cluster)
 	int ret, fclus, dclus;
 
 	if (MSDOS_I(inode)->i_start == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = fat_get_cluster(inode, cluster, &fclus, &dclus);
 	if (ret < 0)
@@ -314,7 +334,9 @@ int fat_get_mapped_cluster(struct inode *inode, sector_t sector,
 	offset  = sector & (sbi->sec_per_clus - 1);
 	cluster = fat_bmap_cluster(inode, cluster);
 	if (cluster < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return cluster;
+}
 	else if (cluster) {
 		*bmap = fat_clus_to_blknr(sbi, cluster) + offset;
 		*mapped_blocks = sbi->sec_per_clus - offset;
@@ -334,6 +356,7 @@ static int is_exceed_eof(struct inode *inode, sector_t sector,
 
 	*last_block = (i_size_read(inode) + (blocksize - 1)) >> blocksize_bits;
 	if (sector >= *last_block) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!create)
 			return 1;
 
@@ -353,6 +376,7 @@ static int is_exceed_eof(struct inode *inode, sector_t sector,
 int fat_bmap(struct inode *inode, sector_t sector, sector_t *phys,
 	     unsigned long *mapped_blocks, int create, bool from_bmap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(inode->i_sb);
 	sector_t last_block;
 
diff --git a/fs/fat/inode.c b/fs/fat/inode.c
index c7a4dee..644458d 100644
--- a/fs/fat/inode.c
+++ b/fs/fat/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/fat/inode.c
  *
@@ -99,7 +101,9 @@ int fat_add_cluster(struct inode *inode)
 
 	err = fat_alloc_clusters(inode, &cluster, 1);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	/* FIXME: this cluster should be added after data of this
 	 * cluster is writed */
 	err = fat_chain_add(inode, cluster, 1);
@@ -120,7 +124,9 @@ static inline int __fat_get_block(struct inode *inode, sector_t iblock,
 
 	err = fat_bmap(inode, iblock, &phys, &mapped_blocks, create, false);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	if (phys) {
 		map_bh(bh_result, sb, phys);
 		*max_blocks = min(mapped_blocks, *max_blocks);
@@ -175,30 +181,36 @@ static int fat_get_block(struct inode *inode, sector_t iblock,
 
 	err = __fat_get_block(inode, iblock, &max_blocks, bh_result, create);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	bh_result->b_size = max_blocks << sb->s_blocksize_bits;
 	return 0;
 }
 
 static int fat_writepage(struct page *page, struct writeback_control *wbc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return block_write_full_page(page, fat_get_block, wbc);
 }
 
 static int fat_writepages(struct address_space *mapping,
 			  struct writeback_control *wbc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mpage_writepages(mapping, wbc, fat_get_block);
 }
 
 static int fat_readpage(struct file *file, struct page *page)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mpage_readpage(page, fat_get_block);
 }
 
 static int fat_readpages(struct file *file, struct address_space *mapping,
 			 struct list_head *pages, unsigned nr_pages)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mpage_readpages(mapping, pages, nr_pages, fat_get_block);
 }
 
@@ -207,6 +219,7 @@ static void fat_write_failed(struct address_space *mapping, loff_t to)
 	struct inode *inode = mapping->host;
 
 	if (to > inode->i_size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		truncate_pagecache(inode, inode->i_size);
 		fat_truncate_blocks(inode, inode->i_size);
 	}
@@ -223,7 +236,9 @@ static int fat_write_begin(struct file *file, struct address_space *mapping,
 				pagep, fsdata, fat_get_block,
 				&MSDOS_I(mapping->host)->mmu_private);
 	if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fat_write_failed(mapping, pos + len);
+}
 	return err;
 }
 
@@ -235,7 +250,9 @@ static int fat_write_end(struct file *file, struct address_space *mapping,
 	int err;
 	err = generic_write_end(file, mapping, pos, len, copied, pagep, fsdata);
 	if (err < len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fat_write_failed(mapping, pos + len);
+}
 	if (!(err < 0) && !(MSDOS_I(inode)->i_attrs & ATTR_ARCH)) {
 		inode->i_mtime = inode->i_ctime = current_time(inode);
 		MSDOS_I(inode)->i_attrs |= ATTR_ARCH;
@@ -253,6 +270,7 @@ static ssize_t fat_direct_IO(struct kiocb *iocb, struct iov_iter *iter)
 	loff_t offset = iocb->ki_pos;
 	ssize_t ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (iov_iter_rw(iter) == WRITE) {
 		/*
 		 * FIXME: blockdev_direct_IO() doesn't use ->write_begin(),
@@ -288,6 +306,7 @@ static int fat_get_block_bmap(struct inode *inode, sector_t iblock,
 	sector_t bmap;
 	unsigned long mapped_blocks;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(create != 0);
 
 	err = fat_bmap(inode, iblock, &bmap, &mapped_blocks, create, true);
@@ -325,6 +344,7 @@ static sector_t _fat_bmap(struct address_space *mapping, sector_t block)
  */
 int fat_block_truncate_page(struct inode *inode, loff_t from)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return block_truncate_page(inode->i_mapping, from, fat_get_block);
 }
 
@@ -365,6 +385,7 @@ static const struct address_space_operations fat_aops = {
 
 static void fat_hash_init(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(sb);
 	int i;
 
@@ -375,11 +396,13 @@ static void fat_hash_init(struct super_block *sb)
 
 static inline unsigned long fat_hash(loff_t i_pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hash_32(i_pos, FAT_HASH_BITS);
 }
 
 static void dir_hash_init(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(sb);
 	int i;
 
@@ -390,6 +413,7 @@ static void dir_hash_init(struct super_block *sb)
 
 void fat_attach(struct inode *inode, loff_t i_pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(inode->i_sb);
 
 	if (inode->i_ino != MSDOS_ROOT_INO) {
@@ -419,6 +443,7 @@ EXPORT_SYMBOL_GPL(fat_attach);
 
 void fat_detach(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(inode->i_sb);
 	spin_lock(&sbi->inode_hash_lock);
 	MSDOS_I(inode)->i_pos = 0;
@@ -435,6 +460,7 @@ EXPORT_SYMBOL_GPL(fat_detach);
 
 struct inode *fat_iget(struct super_block *sb, loff_t i_pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(sb);
 	struct hlist_head *head = sbi->inode_hashtable + fat_hash(i_pos);
 	struct msdos_inode_info *i;
@@ -457,6 +483,7 @@ static int is_exec(unsigned char *extension)
 {
 	unsigned char exe_extensions[] = "EXECOMBAT", *walk;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (walk = exe_extensions; *walk; walk += 3)
 		if (!strncmp(extension, walk, 3))
 			return 1;
@@ -465,6 +492,7 @@ static int is_exec(unsigned char *extension)
 
 static int fat_calc_dir_size(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(inode->i_sb);
 	int ret, fclus, dclus;
 
@@ -501,6 +529,7 @@ static int fat_validate_dir(struct inode *dir)
 /* doesn't deal with root inode */
 int fat_fill_inode(struct inode *inode, struct msdos_dir_entry *de)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(inode->i_sb);
 	int error;
 
@@ -564,12 +593,14 @@ int fat_fill_inode(struct inode *inode, struct msdos_dir_entry *de)
 
 static inline void fat_lock_build_inode(struct msdos_sb_info *sbi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sbi->options.nfs == FAT_NFS_NOSTALE_RO)
 		mutex_lock(&sbi->nfs_build_inode_lock);
 }
 
 static inline void fat_unlock_build_inode(struct msdos_sb_info *sbi)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sbi->options.nfs == FAT_NFS_NOSTALE_RO)
 		mutex_unlock(&sbi->nfs_build_inode_lock);
 }
@@ -584,6 +615,7 @@ struct inode *fat_build_inode(struct super_block *sb,
 	inode = fat_iget(sb, i_pos);
 	if (inode)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode = new_inode(sb);
 	if (!inode) {
 		inode = ERR_PTR(-ENOMEM);
@@ -636,6 +668,7 @@ static void fat_free_eofblocks(struct inode *inode)
 
 static void fat_evict_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	truncate_inode_pages_final(&inode->i_data);
 	if (!inode->i_nlink) {
 		inode->i_size = 0;
@@ -698,6 +731,7 @@ static void fat_set_state(struct super_block *sb,
 
 static void delayed_free(struct rcu_head *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = container_of(p, struct msdos_sb_info, rcu);
 	unload_nls(sbi->nls_disk);
 	unload_nls(sbi->nls_io);
@@ -708,6 +742,7 @@ static void delayed_free(struct rcu_head *p)
 
 static void fat_put_super(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(sb);
 
 	fat_set_state(sb, 0, 0);
@@ -725,7 +760,9 @@ static struct inode *fat_alloc_inode(struct super_block *sb)
 	struct msdos_inode_info *ei;
 	ei = kmem_cache_alloc(fat_inode_cachep, GFP_NOFS);
 	if (!ei)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	init_rwsem(&ei->truncate_lock);
 	return &ei->vfs_inode;
@@ -733,12 +770,14 @@ static struct inode *fat_alloc_inode(struct super_block *sb)
 
 static void fat_i_callback(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = container_of(head, struct inode, i_rcu);
 	kmem_cache_free(fat_inode_cachep, MSDOS_I(inode));
 }
 
 static void fat_destroy_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_rcu(&inode->i_rcu, fat_i_callback);
 }
 
@@ -746,6 +785,7 @@ static void init_once(void *foo)
 {
 	struct msdos_inode_info *ei = (struct msdos_inode_info *)foo;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_init(&ei->cache_lru_lock);
 	ei->nr_caches = 0;
 	ei->cache_valid_id = FAT_CACHE_VALID + 1;
@@ -763,7 +803,9 @@ static int __init fat_init_inodecache(void)
 						SLAB_MEM_SPREAD|SLAB_ACCOUNT),
 					     init_once);
 	if (fat_inode_cachep == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
@@ -781,6 +823,7 @@ static int fat_remount(struct super_block *sb, int *flags, char *data)
 {
 	bool new_rdonly;
 	struct msdos_sb_info *sbi = MSDOS_SB(sb);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*flags |= MS_NODIRATIME | (sbi->options.isvfat ? 0 : MS_NOATIME);
 
 	sync_filesystem(sb);
@@ -833,7 +876,9 @@ static int __fat_write_inode(struct inode *inode, int wait)
 	int err, offset;
 
 	if (inode->i_ino == MSDOS_ROOT_INO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 retry:
 	i_pos = fat_i_pos_read(sbi, inode);
@@ -890,13 +935,16 @@ static int fat_write_inode(struct inode *inode, struct writeback_control *wbc)
 		err = fat_clusters_flush(sb);
 		mutex_unlock(&MSDOS_SB(sb)->s_lock);
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = __fat_write_inode(inode, wbc->sync_mode == WB_SYNC_ALL);
+}
 
 	return err;
 }
 
 int fat_sync_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __fat_write_inode(inode, 1);
 }
 
@@ -917,6 +965,7 @@ static const struct super_operations fat_sops = {
 
 static int fat_show_options(struct seq_file *m, struct dentry *root)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(root->d_sb);
 	struct fat_mount_options *opts = &sbi->options;
 	int isvfat = opts->isvfat;
@@ -1112,6 +1161,7 @@ static int parse_options(struct super_block *sb, char *options, int is_vfat,
 
 	opts->isvfat = is_vfat;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	opts->fs_uid = current_uid();
 	opts->fs_gid = current_gid();
 	opts->fs_fmask = opts->fs_dmask = current_umask();
@@ -1371,6 +1421,7 @@ static void fat_dummy_inode_init(struct inode *inode)
 
 static int fat_read_root(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(inode->i_sb);
 	int error;
 
@@ -1406,6 +1457,7 @@ static int fat_read_root(struct inode *inode)
 
 static unsigned long calc_fat_clusters(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(sb);
 
 	/* Divide first to avoid overflow */
@@ -1419,6 +1471,7 @@ static unsigned long calc_fat_clusters(struct super_block *sb)
 
 static bool fat_bpb_is_zero(struct fat_boot_sector *b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (get_unaligned_le16(&b->sector_size))
 		return false;
 	if (b->sec_per_clus)
@@ -1469,6 +1522,7 @@ static int fat_read_bpb(struct super_block *sb, struct fat_boot_sector *b,
 
 	/* Validate this looks like a FAT filesystem BPB */
 	if (!bpb->fat_reserved) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!silent)
 			fat_msg(sb, KERN_ERR,
 				"bogus number of reserved sectors");
@@ -1605,7 +1659,9 @@ int fat_fill_super(struct super_block *sb, void *data, int silent, int isvfat,
 	 */
 	sbi = kzalloc(sizeof(struct msdos_sb_info), GFP_KERNEL);
 	if (!sbi)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	sb->s_fs_info = sbi;
 
 	sb->s_flags |= MS_NODIRATIME;
@@ -1892,7 +1948,9 @@ static int writeback_inode(struct inode *inode)
 	*/
 	ret = sync_inode_metadata(inode, 0);
 	if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = filemap_fdatawrite(inode->i_mapping);
+}
 	return ret;
 }
 
@@ -1908,7 +1966,9 @@ int fat_flush_inodes(struct super_block *sb, struct inode *i1, struct inode *i2)
 {
 	int ret = 0;
 	if (!MSDOS_SB(sb)->options.flush)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (i1)
 		ret = writeback_inode(i1);
 	if (!ret && i2)
@@ -1927,12 +1987,15 @@ static int __init init_fat_fs(void)
 
 	err = fat_cache_init();
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = fat_init_inodecache();
 	if (err)
 		goto failed;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 failed:
@@ -1942,6 +2005,7 @@ static int __init init_fat_fs(void)
 
 static void __exit exit_fat_fs(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fat_cache_destroy();
 	fat_destroy_inodecache();
 }
diff --git a/fs/fat/namei_msdos.c b/fs/fat/namei_msdos.c
index 7d6a105..bc830a8 100644
--- a/fs/fat/namei_msdos.c
+++ b/fs/fat/namei_msdos.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/msdos/namei.c
  *
@@ -28,6 +30,7 @@ static int msdos_format_name(const unsigned char *name, int len,
 	int space;
 
 	if (name[0] == '.') {	/* dotfile because . and .. already done */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (opts->dotsOK) {
 			/* Get rid of dot - test for it elsewhere */
 			name++;
@@ -117,6 +120,7 @@ static int msdos_format_name(const unsigned char *name, int len,
 static int msdos_find(struct inode *dir, const unsigned char *name, int len,
 		      struct fat_slot_info *sinfo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(dir->i_sb);
 	unsigned char msdos_name[MSDOS_NAME];
 	int err;
@@ -148,6 +152,7 @@ static int msdos_find(struct inode *dir, const unsigned char *name, int len,
  */
 static int msdos_hash(const struct dentry *dentry, struct qstr *qstr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fat_mount_options *options = &MSDOS_SB(dentry->d_sb)->options;
 	unsigned char msdos_name[MSDOS_NAME];
 	int error;
@@ -165,6 +170,7 @@ static int msdos_hash(const struct dentry *dentry, struct qstr *qstr)
 static int msdos_cmp(const struct dentry *dentry,
 		unsigned int len, const char *str, const struct qstr *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fat_mount_options *options = &MSDOS_SB(dentry->d_sb)->options;
 	unsigned char a_msdos_name[MSDOS_NAME], b_msdos_name[MSDOS_NAME];
 	int error;
@@ -226,6 +232,7 @@ static int msdos_add_entry(struct inode *dir, const unsigned char *name,
 			   int is_dir, int is_hid, int cluster,
 			   struct timespec *ts, struct fat_slot_info *sinfo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(dir->i_sb);
 	struct msdos_dir_entry de;
 	__le16 time, date;
@@ -275,6 +282,7 @@ static int msdos_create(struct inode *dir, struct dentry *dentry, umode_t mode,
 				msdos_name, &MSDOS_SB(sb)->options);
 	if (err)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	is_hid = (dentry->d_name.name[0] == '.') && (msdos_name[0] != '.');
 	/* Have to do it due to foo vs. .foo conflicts */
 	if (!fat_scan(dir, msdos_name, &sinfo)) {
@@ -320,6 +328,7 @@ static int msdos_rmdir(struct inode *dir, struct dentry *dentry)
 	err = fat_dir_empty(inode);
 	if (err)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = msdos_find(dir, dentry->d_name.name, dentry->d_name.len, &sinfo);
 	if (err)
 		goto out;
@@ -356,6 +365,7 @@ static int msdos_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
 				msdos_name, &MSDOS_SB(sb)->options);
 	if (err)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	is_hid = (dentry->d_name.name[0] == '.') && (msdos_name[0] != '.');
 	/* foo vs .foo situation */
 	if (!fat_scan(dir, msdos_name, &sinfo)) {
@@ -402,6 +412,7 @@ static int msdos_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
 /***** Unlink a file */
 static int msdos_unlink(struct inode *dir, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	struct super_block *sb = inode->i_sb;
 	struct fat_slot_info sinfo;
@@ -445,6 +456,7 @@ static int do_msdos_rename(struct inode *old_dir, unsigned char *old_name,
 
 	err = fat_scan(old_dir, old_name, &old_sinfo);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EIO;
 		goto out;
 	}
@@ -604,7 +616,9 @@ static int msdos_rename(struct inode *old_dir, struct dentry *old_dentry,
 	int err, is_hid;
 
 	if (flags & ~RENAME_NOREPLACE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&MSDOS_SB(sb)->s_lock);
 
@@ -644,6 +658,7 @@ static const struct inode_operations msdos_dir_inode_operations = {
 
 static void setup(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	MSDOS_SB(sb)->dir_ops = &msdos_dir_inode_operations;
 	sb->s_d_op = &msdos_dentry_operations;
 	sb->s_flags |= MS_NOATIME;
@@ -651,6 +666,7 @@ static void setup(struct super_block *sb)
 
 static int msdos_fill_super(struct super_block *sb, void *data, int silent)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fat_fill_super(sb, data, silent, 0, setup);
 }
 
@@ -658,6 +674,7 @@ static struct dentry *msdos_mount(struct file_system_type *fs_type,
 			int flags, const char *dev_name,
 			void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mount_bdev(fs_type, flags, dev_name, data, msdos_fill_super);
 }
 
@@ -677,6 +694,7 @@ static int __init init_msdos_fs(void)
 
 static void __exit exit_msdos_fs(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_filesystem(&msdos_fs_type);
 }
 
diff --git a/fs/fat/namei_vfat.c b/fs/fat/namei_vfat.c
index 02c0666..e58629d 100644
--- a/fs/fat/namei_vfat.c
+++ b/fs/fat/namei_vfat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/vfat/namei.c
  *
@@ -25,12 +27,14 @@
 
 static inline unsigned long vfat_d_version(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (unsigned long) dentry->d_fsdata;
 }
 
 static inline void vfat_d_version_set(struct dentry *dentry,
 				      unsigned long version)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dentry->d_fsdata = (void *) version;
 }
 
@@ -47,13 +51,16 @@ static int vfat_revalidate_shortname(struct dentry *dentry)
 	int ret = 1;
 	spin_lock(&dentry->d_lock);
 	if (vfat_d_version(dentry) != d_inode(dentry->d_parent)->i_version)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 0;
+}
 	spin_unlock(&dentry->d_lock);
 	return ret;
 }
 
 static int vfat_revalidate(struct dentry *dentry, unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (flags & LOOKUP_RCU)
 		return -ECHILD;
 
@@ -65,6 +72,7 @@ static int vfat_revalidate(struct dentry *dentry, unsigned int flags)
 
 static int vfat_revalidate_ci(struct dentry *dentry, unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (flags & LOOKUP_RCU)
 		return -ECHILD;
 
@@ -102,6 +110,7 @@ static int vfat_revalidate_ci(struct dentry *dentry, unsigned int flags)
 /* returns the length of a struct qstr, ignoring trailing dots */
 static unsigned int __vfat_striptail_len(unsigned int len, const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (len && name[len - 1] == '.')
 		len--;
 	return len;
@@ -109,6 +118,7 @@ static unsigned int __vfat_striptail_len(unsigned int len, const char *name)
 
 static unsigned int vfat_striptail_len(const struct qstr *qstr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __vfat_striptail_len(qstr->len, qstr->name);
 }
 
@@ -120,6 +130,7 @@ static unsigned int vfat_striptail_len(const struct qstr *qstr)
  */
 static int vfat_hash(const struct dentry *dentry, struct qstr *qstr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	qstr->hash = full_name_hash(dentry, qstr->name, vfat_striptail_len(qstr));
 	return 0;
 }
@@ -132,6 +143,7 @@ static int vfat_hash(const struct dentry *dentry, struct qstr *qstr)
  */
 static int vfat_hashi(const struct dentry *dentry, struct qstr *qstr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nls_table *t = MSDOS_SB(dentry->d_sb)->nls_io;
 	const unsigned char *name;
 	unsigned int len;
@@ -154,6 +166,7 @@ static int vfat_hashi(const struct dentry *dentry, struct qstr *qstr)
 static int vfat_cmpi(const struct dentry *dentry,
 		unsigned int len, const char *str, const struct qstr *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct nls_table *t = MSDOS_SB(dentry->d_sb)->nls_io;
 	unsigned int alen, blen;
 
@@ -179,6 +192,7 @@ static int vfat_cmp(const struct dentry *dentry,
 	alen = vfat_striptail_len(name);
 	blen = __vfat_striptail_len(len, str);
 	if (alen == blen) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (strncmp(name->name, str, alen) == 0)
 			return 0;
 	}
@@ -201,6 +215,7 @@ static const struct dentry_operations vfat_dentry_ops = {
 
 static inline wchar_t vfat_bad_char(wchar_t w)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (w < 0x0020)
 	    || (w == '*') || (w == '?') || (w == '<') || (w == '>')
 	    || (w == '|') || (w == '"') || (w == ':') || (w == '/')
@@ -209,12 +224,14 @@ static inline wchar_t vfat_bad_char(wchar_t w)
 
 static inline wchar_t vfat_replace_char(wchar_t w)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (w == '[') || (w == ']') || (w == ';') || (w == ',')
 	    || (w == '+') || (w == '=');
 }
 
 static wchar_t vfat_skip_char(wchar_t w)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (w == '.') || (w == ' ');
 }
 
@@ -222,6 +239,7 @@ static inline int vfat_is_used_badchars(const wchar_t *s, int len)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < len; i++)
 		if (vfat_bad_char(s[i]))
 			return -EINVAL;
@@ -237,7 +255,9 @@ static int vfat_find_form(struct inode *dir, unsigned char *name)
 	struct fat_slot_info sinfo;
 	int err = fat_scan(dir, name, &sinfo);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 	brelse(sinfo.bh);
 	return 0;
 }
@@ -280,6 +300,7 @@ static inline int to_shortname_char(struct nls_table *nls,
 	int len;
 
 	if (vfat_skip_char(*src)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		info->valid = 0;
 		return 0;
 	}
@@ -327,6 +348,7 @@ static int vfat_create_shortname(struct inode *dir, struct nls_table *nls,
 				 wchar_t *uname, int ulen,
 				 unsigned char *name_res, unsigned char *lcase)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fat_mount_options *opts = &MSDOS_SB(dir->i_sb)->options;
 	wchar_t *ip, *ext_start, *end, *name_start;
 	unsigned char base[9], ext[4], buf[5], *p;
@@ -517,6 +539,7 @@ xlate_to_uni(const unsigned char *name, int len, unsigned char *outname,
 	int charlen;
 
 	if (utf8) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*outlen = utf8s_to_utf16s(name, len, UTF16_HOST_ENDIAN,
 				(wchar_t *) outname, FAT_LFN_LEN + 2);
 		if (*outlen < 0)
@@ -580,6 +603,7 @@ static int vfat_build_slots(struct inode *dir, const unsigned char *name,
 			    struct timespec *ts,
 			    struct msdos_dir_slot *slots, int *nr_slots)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct msdos_sb_info *sbi = MSDOS_SB(dir->i_sb);
 	struct fat_mount_options *opts = &sbi->options;
 	struct msdos_dir_slot *ps;
@@ -662,7 +686,9 @@ static int vfat_add_entry(struct inode *dir, const struct qstr *qname,
 
 	len = vfat_striptail_len(qname);
 	if (len == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	slots = kmalloc(sizeof(*slots) * MSDOS_SLOTS, GFP_NOFS);
 	if (slots == NULL)
@@ -691,6 +717,7 @@ static int vfat_add_entry(struct inode *dir, const struct qstr *qname,
 static int vfat_find(struct inode *dir, const struct qstr *qname,
 		     struct fat_slot_info *sinfo)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int len = vfat_striptail_len(qname);
 	if (len == 0)
 		return -ENOENT;
@@ -703,6 +730,7 @@ static int vfat_find(struct inode *dir, const struct qstr *qname,
  */
 static int vfat_d_anon_disconn(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return IS_ROOT(dentry) && (dentry->d_flags & DCACHE_DISCONNECTED);
 }
 
@@ -719,6 +747,7 @@ static struct dentry *vfat_lookup(struct inode *dir, struct dentry *dentry,
 
 	err = vfat_find(dir, &dentry->d_name, &sinfo);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err == -ENOENT) {
 			inode = NULL;
 			goto out;
@@ -781,6 +810,7 @@ static int vfat_create(struct inode *dir, struct dentry *dentry, umode_t mode,
 	err = vfat_add_entry(dir, &dentry->d_name, 0, 0, &ts, &sinfo);
 	if (err)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dir->i_version++;
 
 	inode = fat_build_inode(sb, sinfo.de, sinfo.i_pos);
@@ -801,6 +831,7 @@ static int vfat_create(struct inode *dir, struct dentry *dentry, umode_t mode,
 
 static int vfat_rmdir(struct inode *dir, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	struct super_block *sb = dir->i_sb;
 	struct fat_slot_info sinfo;
@@ -832,6 +863,7 @@ static int vfat_rmdir(struct inode *dir, struct dentry *dentry)
 
 static int vfat_unlink(struct inode *dir, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	struct super_block *sb = dir->i_sb;
 	struct fat_slot_info sinfo;
@@ -869,6 +901,7 @@ static int vfat_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
 	ts = current_time(dir);
 	cluster = fat_alloc_new_dir(dir, &ts);
 	if (cluster < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = cluster;
 		goto out;
 	}
@@ -916,7 +949,9 @@ static int vfat_rename(struct inode *old_dir, struct dentry *old_dentry,
 	struct super_block *sb = old_dir->i_sb;
 
 	if (flags & ~RENAME_NOREPLACE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	old_sinfo.bh = sinfo.bh = dotdot_bh = NULL;
 	old_inode = d_inode(old_dentry);
@@ -1047,6 +1082,7 @@ static const struct inode_operations vfat_dir_inode_operations = {
 
 static void setup(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	MSDOS_SB(sb)->dir_ops = &vfat_dir_inode_operations;
 	if (MSDOS_SB(sb)->options.name_check != 's')
 		sb->s_d_op = &vfat_ci_dentry_ops;
@@ -1056,6 +1092,7 @@ static void setup(struct super_block *sb)
 
 static int vfat_fill_super(struct super_block *sb, void *data, int silent)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fat_fill_super(sb, data, silent, 1, setup);
 }
 
@@ -1063,6 +1100,7 @@ static struct dentry *vfat_mount(struct file_system_type *fs_type,
 		       int flags, const char *dev_name,
 		       void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mount_bdev(fs_type, flags, dev_name, data, vfat_fill_super);
 }
 
@@ -1082,6 +1120,7 @@ static int __init init_vfat_fs(void)
 
 static void __exit exit_vfat_fs(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_filesystem(&vfat_fs_type);
 }
 
diff --git a/fs/fcntl.c b/fs/fcntl.c
index 0345a46..fe66b18 100644
--- a/fs/fcntl.c
+++ b/fs/fcntl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/fcntl.c
@@ -34,6 +36,7 @@
 
 static int setfl(int fd, struct file * filp, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode * inode = file_inode(filp);
 	int error = 0;
 
@@ -42,40 +45,60 @@ static int setfl(int fd, struct file * filp, unsigned long arg)
 	 * and the file is open for write.
 	 */
 	if (((arg ^ filp->f_flags) & O_APPEND) && IS_APPEND(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	/* O_NOATIME can only be set by the owner or superuser */
 	if ((arg & O_NOATIME) && !(filp->f_flags & O_NOATIME))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!inode_owner_or_capable(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
+}
 
 	/* required for strict SunOS emulation */
 	if (O_NONBLOCK != O_NDELAY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	       if (arg & O_NDELAY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		   arg |= O_NONBLOCK;
+}
+}
 
 	/* Pipe packetized mode is controlled by O_DIRECT flag */
 	if (!S_ISFIFO(inode->i_mode) && (arg & O_DIRECT)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!filp->f_mapping || !filp->f_mapping->a_ops ||
 			!filp->f_mapping->a_ops->direct_IO)
 				return -EINVAL;
 	}
 
 	if (filp->f_op->check_flags)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = filp->f_op->check_flags(arg);
+}
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	/*
 	 * ->fasync() is responsible for setting the FASYNC bit.
 	 */
 	if (((arg ^ filp->f_flags) & FASYNC) && filp->f_op->fasync) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = filp->f_op->fasync(fd, filp, (arg & FASYNC) != 0);
 		if (error < 0)
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (error > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = 0;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&filp->f_lock);
 	filp->f_flags = (arg & SETFL_MASK) | (filp->f_flags & ~SETFL_MASK);
 	spin_unlock(&filp->f_lock);
@@ -87,6 +110,7 @@ static int setfl(int fd, struct file * filp, unsigned long arg)
 static void f_modown(struct file *filp, struct pid *pid, enum pid_type type,
                      int force)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_lock_irq(&filp->f_owner.lock);
 	if (force || !filp->f_owner.pid) {
 		put_pid(filp->f_owner.pid);
@@ -105,6 +129,7 @@ static void f_modown(struct file *filp, struct pid *pid, enum pid_type type,
 void __f_setown(struct file *filp, struct pid *pid, enum pid_type type,
 		int force)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	security_file_set_fowner(filp);
 	f_modown(filp, pid, type, force);
 }
@@ -143,6 +168,7 @@ EXPORT_SYMBOL(f_setown);
 
 void f_delown(struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	f_modown(filp, NULL, PIDTYPE_PID, 1);
 }
 
@@ -152,7 +178,9 @@ pid_t f_getown(struct file *filp)
 	read_lock(&filp->f_owner.lock);
 	pid = pid_vnr(filp->f_owner.pid);
 	if (filp->f_owner.pid_type == PIDTYPE_PGID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pid = -pid;
+}
 	read_unlock(&filp->f_owner.lock);
 	return pid;
 }
@@ -167,7 +195,9 @@ static int f_setown_ex(struct file *filp, unsigned long arg)
 
 	ret = copy_from_user(&owner, owner_p, sizeof(owner));
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	switch (owner.type) {
 	case F_OWNER_TID:
@@ -254,12 +284,14 @@ static int f_getowner_uids(struct file *filp, unsigned long arg)
 #else
 static int f_getowner_uids(struct file *filp, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EINVAL;
 }
 #endif
 
 static bool rw_hint_valid(enum rw_hint hint)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (hint) {
 	case RWF_WRITE_LIFE_NOT_SET:
 	case RWH_WRITE_LIFE_NONE:
@@ -276,6 +308,7 @@ static bool rw_hint_valid(enum rw_hint hint)
 static long fcntl_rw_hint(struct file *file, unsigned int cmd,
 			  unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	u64 *argp = (u64 __user *)arg;
 	enum rw_hint hint;
@@ -352,10 +385,16 @@ static long do_fcntl(int fd, unsigned int cmd, unsigned long arg,
 #endif
 	case F_GETLK:
 		if (copy_from_user(&flock, argp, sizeof(flock)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = fcntl_getlk(filp, cmd, &flock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!err && copy_to_user(argp, &flock, sizeof(flock)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 		break;
 #if BITS_PER_LONG != 32
 	/* 32-bit arches must use fcntl64() */
@@ -366,7 +405,9 @@ static long do_fcntl(int fd, unsigned int cmd, unsigned long arg,
 	case F_SETLK:
 	case F_SETLKW:
 		if (copy_from_user(&flock, argp, sizeof(flock)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 		err = fcntl_setlk(fd, filp, cmd, &flock);
 		break;
 	case F_GETOWN:
@@ -378,6 +419,7 @@ static long do_fcntl(int fd, unsigned int cmd, unsigned long arg,
 		 * to fix this will be in libc.
 		 */
 		err = f_getown(filp);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		force_successful_syscall_return();
 		break;
 	case F_SETOWN:
@@ -400,6 +442,7 @@ static long do_fcntl(int fd, unsigned int cmd, unsigned long arg,
 		if (!valid_signal(arg)) {
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = 0;
 		filp->f_owner.signum = arg;
 		break;
@@ -429,6 +472,7 @@ static long do_fcntl(int fd, unsigned int cmd, unsigned long arg,
 	default:
 		break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -442,6 +486,7 @@ static int check_fcntl_cmd(unsigned cmd)
 	case F_GETFL:
 		return 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -533,7 +578,9 @@ static int get_compat_flock(struct flock *kfl, const struct compat_flock __user
 	struct compat_flock fl;
 
 	if (copy_from_user(&fl, ufl, sizeof(struct compat_flock)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	copy_flock_fields(kfl, &fl);
 	return 0;
 }
@@ -543,7 +590,9 @@ static int get_compat_flock64(struct flock *kfl, const struct compat_flock64 __u
 	struct compat_flock64 fl;
 
 	if (copy_from_user(&fl, ufl, sizeof(struct compat_flock64)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	copy_flock_fields(kfl, &fl);
 	return 0;
 }
@@ -555,7 +604,9 @@ static int put_compat_flock(const struct flock *kfl, struct compat_flock __user
 	memset(&fl, 0, sizeof(struct compat_flock));
 	copy_flock_fields(&fl, kfl);
 	if (copy_to_user(ufl, &fl, sizeof(struct compat_flock)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	return 0;
 }
 
@@ -563,6 +614,7 @@ static int put_compat_flock64(const struct flock *kfl, struct compat_flock64 __u
 {
 	struct compat_flock64 fl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(sizeof(kfl->l_start) > sizeof(ufl->l_start));
 	BUILD_BUG_ON(sizeof(kfl->l_len) > sizeof(ufl->l_len));
 
@@ -577,6 +629,7 @@ static int put_compat_flock64(const struct flock *kfl, struct compat_flock64 __u
 static unsigned int
 convert_fcntl_cmd(unsigned int cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (cmd) {
 	case F_GETLK64:
 		return F_GETLK;
@@ -600,6 +653,7 @@ convert_fcntl_cmd(unsigned int cmd)
  */
 static int fixup_compat_flock(struct flock *flock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (flock->l_start > COMPAT_OFF_T_MAX)
 		return -EOVERFLOW;
 	if (flock->l_len > COMPAT_OFF_T_MAX)
@@ -610,6 +664,7 @@ static int fixup_compat_flock(struct flock *flock)
 COMPAT_SYSCALL_DEFINE3(fcntl64, unsigned int, fd, unsigned int, cmd,
 		       compat_ulong_t, arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fd f = fdget_raw(fd);
 	struct flock flock;
 	long err = -EBADF;
@@ -675,6 +730,7 @@ COMPAT_SYSCALL_DEFINE3(fcntl64, unsigned int, fd, unsigned int, cmd,
 COMPAT_SYSCALL_DEFINE3(fcntl, unsigned int, fd, unsigned int, cmd,
 		       compat_ulong_t, arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (cmd) {
 	case F_GETLK64:
 	case F_SETLK64:
@@ -706,6 +762,7 @@ static inline int sigio_perm(struct task_struct *p,
 	int ret;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cred = __task_cred(p);
 	ret = ((uid_eq(fown->euid, GLOBAL_ROOT_UID) ||
 		uid_eq(fown->euid, cred->suid) || uid_eq(fown->euid, cred->uid) ||
@@ -726,7 +783,9 @@ static void send_sigio_to_task(struct task_struct *p,
 	int signum = ACCESS_ONCE(fown->signum);
 
 	if (!sigio_perm(p, fown, signum))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	switch (signum) {
 		siginfo_t si;
@@ -779,6 +838,7 @@ void send_sigio(struct fown_struct *fown, int fd, int band)
 
 	type = fown->pid_type;
 	if (type == PIDTYPE_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		group = 0;
 		type = PIDTYPE_PID;
 	}
@@ -799,6 +859,7 @@ void send_sigio(struct fown_struct *fown, int fd, int band)
 static void send_sigurg_to_task(struct task_struct *p,
 				struct fown_struct *fown, int group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sigio_perm(p, fown, SIGURG))
 		do_send_sig_info(SIGURG, SEND_SIG_PRIV, p, group);
 }
@@ -815,6 +876,7 @@ int send_sigurg(struct fown_struct *fown)
 
 	type = fown->pid_type;
 	if (type == PIDTYPE_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		group = 0;
 		type = PIDTYPE_PID;
 	}
@@ -861,9 +923,11 @@ int fasync_remove_entry(struct file *filp, struct fasync_struct **fapp)
 	spin_lock(&filp->f_lock);
 	spin_lock(&fasync_lock);
 	for (fp = fapp; (fa = *fp) != NULL; fp = &fa->fa_next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fa->fa_file != filp)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irq(&fa->fa_lock);
 		fa->fa_file = NULL;
 		spin_unlock_irq(&fa->fa_lock);
@@ -874,6 +938,7 @@ int fasync_remove_entry(struct file *filp, struct fasync_struct **fapp)
 		result = 1;
 		break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&fasync_lock);
 	spin_unlock(&filp->f_lock);
 	return result;
@@ -881,6 +946,7 @@ int fasync_remove_entry(struct file *filp, struct fasync_struct **fapp)
 
 struct fasync_struct *fasync_alloc(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return kmem_cache_alloc(fasync_cache, GFP_KERNEL);
 }
 
@@ -891,6 +957,7 @@ struct fasync_struct *fasync_alloc(void)
  */
 void fasync_free(struct fasync_struct *new)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_free(fasync_cache, new);
 }
 
@@ -907,6 +974,7 @@ struct fasync_struct *fasync_insert_entry(int fd, struct file *filp, struct fasy
 
 	spin_lock(&filp->f_lock);
 	spin_lock(&fasync_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (fp = fapp; (fa = *fp) != NULL; fp = &fa->fa_next) {
 		if (fa->fa_file != filp)
 			continue;
@@ -941,7 +1009,9 @@ static int fasync_add_entry(int fd, struct file *filp, struct fasync_struct **fa
 
 	new = fasync_alloc();
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/*
 	 * fasync_insert_entry() returns the old (update) entry if
@@ -968,6 +1038,7 @@ int fasync_helper(int fd, struct file * filp, int on, struct fasync_struct **fap
 {
 	if (!on)
 		return fasync_remove_entry(filp, fapp);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fasync_add_entry(fd, filp, fapp);
 }
 
@@ -978,6 +1049,7 @@ EXPORT_SYMBOL(fasync_helper);
  */
 static void kill_fasync_rcu(struct fasync_struct *fa, int sig, int band)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (fa) {
 		struct fown_struct *fown;
 		unsigned long flags;
@@ -1007,7 +1079,9 @@ void kill_fasync(struct fasync_struct **fp, int sig, int band)
 	 * the list is empty.
 	 */
 	if (*fp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kill_fasync_rcu(rcu_dereference(*fp), sig, band);
 		rcu_read_unlock();
 	}
diff --git a/fs/file.c b/fs/file.c
index 4eecbf4..4f4b980 100644
--- a/fs/file.c
+++ b/fs/file.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/file.c
@@ -111,8 +113,11 @@ static struct fdtable * alloc_fdtable(unsigned int nr)
 	 * bitmaps handling below becomes unpleasant, to put it mildly...
 	 */
 	if (unlikely(nr > sysctl_nr_open))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nr = ((sysctl_nr_open - 1) | (BITS_PER_LONG - 1)) + 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fdt = kmalloc(sizeof(struct fdtable), GFP_KERNEL_ACCOUNT);
 	if (!fdt)
 		goto out;
@@ -165,14 +170,18 @@ static int expand_fdtable(struct files_struct *files, unsigned int nr)
 	if (atomic_read(&files->count) > 1)
 		synchronize_sched();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&files->file_lock);
 	if (!new_fdt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	/*
 	 * extremely unlikely race - sysctl_nr_open decreased between the check in
 	 * caller and alloc_fdtable().  Cheaper to catch it here...
 	 */
 	if (unlikely(new_fdt->max_fds <= nr)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__free_fdtable(new_fdt);
 		return -EMFILE;
 	}
@@ -207,16 +216,22 @@ static int expand_files(struct files_struct *files, unsigned int nr)
 
 	/* Do we need to expand? */
 	if (nr < fdt->max_fds)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return expanded;
+}
 
 	/* Can we expand? */
 	if (nr >= sysctl_nr_open)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMFILE;
+}
 
 	if (unlikely(files->resize_in_progress)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&files->file_lock);
 		expanded = 1;
 		wait_event(files->resize_wait, !files->resize_in_progress);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&files->file_lock);
 		goto repeat;
 	}
@@ -286,6 +301,7 @@ struct files_struct *dup_fd(struct files_struct *oldf, int *errorp)
 	if (!newf)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&newf->count, 1);
 
 	spin_lock_init(&newf->file_lock);
@@ -307,19 +323,24 @@ struct files_struct *dup_fd(struct files_struct *oldf, int *errorp)
 	 * Check whether we need to allocate a larger fd array and fd set.
 	 */
 	while (unlikely(open_files > new_fdt->max_fds)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&oldf->file_lock);
 
 		if (new_fdt != &newf->fdtab)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__free_fdtable(new_fdt);
+}
 
 		new_fdt = alloc_fdtable(open_files - 1);
 		if (!new_fdt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*errorp = -ENOMEM;
 			goto out_release;
 		}
 
 		/* beyond sysctl_nr_open; nothing to do */
 		if (unlikely(new_fdt->max_fds < open_files)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__free_fdtable(new_fdt);
 			*errorp = -EMFILE;
 			goto out_release;
@@ -355,6 +376,7 @@ struct files_struct *dup_fd(struct files_struct *oldf, int *errorp)
 		}
 		rcu_assign_pointer(*new_fds++, f);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&oldf->file_lock);
 
 	/* clear the remainder */
@@ -410,6 +432,7 @@ struct files_struct *get_files_struct(struct task_struct *task)
 	files = task->files;
 	if (files)
 		atomic_inc(&files->count);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	task_unlock(task);
 
 	return files;
@@ -429,6 +452,7 @@ void put_files_struct(struct files_struct *files)
 
 void reset_files_struct(struct files_struct *files)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct task_struct *tsk = current;
 	struct files_struct *old;
 
@@ -444,6 +468,7 @@ void exit_files(struct task_struct *tsk)
 	struct files_struct * files = tsk->files;
 
 	if (files) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		task_lock(tsk);
 		tsk->files = NULL;
 		task_unlock(tsk);
@@ -472,9 +497,13 @@ static unsigned int find_next_fd(struct fdtable *fdt, unsigned int start)
 
 	bitbit = find_next_zero_bit(fdt->full_fds_bits, maxbit, bitbit) * BITS_PER_LONG;
 	if (bitbit > maxfd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return maxfd;
+}
 	if (bitbit > start)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = bitbit;
+}
 	return find_next_zero_bit(fdt->open_fds, maxfd, start);
 }
 
@@ -493,7 +522,9 @@ int __alloc_fd(struct files_struct *files,
 	fdt = files_fdtable(files);
 	fd = start;
 	if (fd < files->next_fd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fd = files->next_fd;
+}
 
 	if (fd < fdt->max_fds)
 		fd = find_next_fd(fdt, fd);
@@ -522,14 +553,18 @@ int __alloc_fd(struct files_struct *files,
 
 	__set_open_fd(fd, fdt);
 	if (flags & O_CLOEXEC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__set_close_on_exec(fd, fdt);
+}
 	else
 		__clear_close_on_exec(fd, fdt);
 	error = fd;
 #if 1
 	/* Sanity check */
 	if (rcu_access_pointer(fdt->fd[fd]) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_WARNING "alloc_fd: slot %d not NULL!\n", fd);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_assign_pointer(fdt->fd[fd], NULL);
 	}
 #endif
@@ -594,11 +629,15 @@ void __fd_install(struct files_struct *files, unsigned int fd,
 	struct fdtable *fdt;
 
 	might_sleep();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock_sched();
 
 	while (unlikely(files->resize_in_progress)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock_sched();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wait_event(files->resize_wait, !files->resize_in_progress);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock_sched();
 	}
 	/* coupled with smp_wmb() in expand_fdtable() */
@@ -631,6 +670,7 @@ int __close_fd(struct files_struct *files, unsigned fd)
 	file = fdt->fd[fd];
 	if (!file)
 		goto out_unlock;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_assign_pointer(fdt->fd[fd], NULL);
 	__clear_close_on_exec(fd, fdt);
 	__put_unused_fd(files, fd);
@@ -666,6 +706,7 @@ void do_close_on_exec(struct files_struct *files)
 			file = fdt->fd[fd];
 			if (!file)
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_assign_pointer(fdt->fd[fd], NULL);
 			__put_unused_fd(files, fd);
 			spin_unlock(&files->file_lock);
@@ -675,6 +716,7 @@ void do_close_on_exec(struct files_struct *files)
 		}
 
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&files->file_lock);
 }
 
@@ -692,10 +734,13 @@ static struct file *__fget(unsigned int fd, fmode_t mask)
 		 * we loop to catch the new file (or NULL pointer)
 		 */
 		if (file->f_mode & mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			file = NULL;
+}
 		else if (!get_file_rcu(file))
 			goto loop;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	return file;
@@ -737,12 +782,16 @@ static unsigned long __fget_light(unsigned int fd, fmode_t mask)
 	if (atomic_read(&files->count) == 1) {
 		file = __fcheck_files(files, fd);
 		if (!file || unlikely(file->f_mode & mask))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 		return (unsigned long)file;
 	} else {
 		file = __fget(fd, mask);
 		if (!file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 		return FDPUT_FPUT | (unsigned long)file;
 	}
 }
@@ -789,9 +838,12 @@ void set_close_on_exec(unsigned int fd, int flag)
 	spin_lock(&files->file_lock);
 	fdt = files_fdtable(files);
 	if (flag)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__set_close_on_exec(fd, fdt);
+}
 	else
 		__clear_close_on_exec(fd, fdt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&files->file_lock);
 }
 
@@ -836,9 +888,12 @@ __releases(&files->file_lock)
 	rcu_assign_pointer(fdt->fd[fd], file);
 	__set_open_fd(fd, fdt);
 	if (flags & O_CLOEXEC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__set_close_on_exec(fd, fdt);
+}
 	else
 		__clear_close_on_exec(fd, fdt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&files->file_lock);
 
 	if (tofree)
@@ -857,7 +912,9 @@ int replace_fd(unsigned fd, struct file *file, unsigned flags)
 	struct files_struct *files = current->files;
 
 	if (!file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return __close_fd(files, fd);
+}
 
 	if (fd >= rlimit(RLIMIT_NOFILE))
 		return -EBADF;
@@ -880,20 +937,28 @@ SYSCALL_DEFINE3(dup3, unsigned int, oldfd, unsigned int, newfd, int, flags)
 	struct files_struct *files = current->files;
 
 	if ((flags & ~O_CLOEXEC) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (unlikely(oldfd == newfd))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (newfd >= rlimit(RLIMIT_NOFILE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&files->file_lock);
 	err = expand_files(files, newfd);
 	file = fcheck(oldfd);
 	if (unlikely(!file))
 		goto Ebadf;
 	if (unlikely(err < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err == -EMFILE)
 			goto Ebadf;
 		goto out_unlock;
@@ -915,7 +980,10 @@ SYSCALL_DEFINE2(dup2, unsigned int, oldfd, unsigned int, newfd)
 
 		rcu_read_lock();
 		if (!fcheck_files(files, oldfd))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -EBADF;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		return retval;
 	}
@@ -941,12 +1009,15 @@ int f_dupfd(unsigned int from, struct file *file, unsigned flags)
 {
 	int err;
 	if (from >= rlimit(RLIMIT_NOFILE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	err = alloc_fd(from, flags);
 	if (err >= 0) {
 		get_file(file);
 		fd_install(err, file);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -957,7 +1028,10 @@ int iterate_fd(struct files_struct *files, unsigned n,
 	struct fdtable *fdt;
 	int res = 0;
 	if (!files)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&files->file_lock);
 	for (fdt = files_fdtable(files); n < fdt->max_fds; n++) {
 		struct file *file;
@@ -968,6 +1042,7 @@ int iterate_fd(struct files_struct *files, unsigned n,
 		if (res)
 			break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&files->file_lock);
 	return res;
 }
diff --git a/fs/file_table.c b/fs/file_table.c
index 61517f5..6fc2eea 100644
--- a/fs/file_table.c
+++ b/fs/file_table.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/file_table.c
  *
@@ -80,6 +82,7 @@ EXPORT_SYMBOL_GPL(get_max_files);
 int proc_nr_files(struct ctl_table *table, int write,
                      void __user *buffer, size_t *lenp, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	files_stat.nr_files = get_nr_files();
 	return proc_doulongvec_minmax(table, write, buffer, lenp, ppos);
 }
@@ -122,20 +125,25 @@ struct file *get_empty_filp(void)
 
 	f = kmem_cache_zalloc(filp_cachep, GFP_KERNEL);
 	if (unlikely(!f))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	percpu_counter_inc(&nr_files);
 	f->f_cred = get_cred(cred);
 	error = security_file_alloc(f);
 	if (unlikely(error)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		file_free(f);
 		return ERR_PTR(error);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_long_set(&f->f_count, 1);
 	rwlock_init(&f->f_owner.lock);
 	spin_lock_init(&f->f_lock);
 	mutex_init(&f->f_pos_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	eventpoll_init_file(f);
 	/* f->f_version: 0 */
 	return f;
@@ -143,9 +151,11 @@ struct file *get_empty_filp(void)
 over:
 	/* Ran out of filps - report that */
 	if (get_nr_files() > old_max) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("VFS: file-max limit %lu reached\n", get_max_files());
 		old_max = get_nr_files();
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(-ENFILE);
 }
 
@@ -163,7 +173,9 @@ struct file *alloc_file(const struct path *path, fmode_t mode,
 
 	file = get_empty_filp();
 	if (IS_ERR(file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return file;
+}
 
 	file->f_path = *path;
 	file->f_inode = path->dentry->d_inode;
@@ -178,7 +190,10 @@ struct file *alloc_file(const struct path *path, fmode_t mode,
 	file->f_mode = mode;
 	file->f_op = fop;
 	if ((mode & (FMODE_READ | FMODE_WRITE)) == FMODE_READ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i_readcount_inc(path->dentry->d_inode);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return file;
 }
 EXPORT_SYMBOL(alloc_file);
@@ -202,9 +217,13 @@ static void __fput(struct file *file)
 	locks_remove_file(file);
 
 	if (unlikely(file->f_flags & FASYNC)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (file->f_op->fasync)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			file->f_op->fasync(-1, file, 0);
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ima_file_free(file);
 	if (file->f_op->release)
 		file->f_op->release(inode, file);
@@ -216,7 +235,9 @@ static void __fput(struct file *file)
 	fops_put(file->f_op);
 	put_pid(file->f_owner.pid);
 	if ((file->f_mode & (FMODE_READ | FMODE_WRITE)) == FMODE_READ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i_readcount_dec(inode);
+}
 	if (file->f_mode & FMODE_WRITER) {
 		put_write_access(inode);
 		__mnt_drop_write(mnt);
@@ -232,6 +253,7 @@ static void __fput(struct file *file)
 static LLIST_HEAD(delayed_fput_list);
 static void delayed_fput(struct work_struct *unused)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct llist_node *node = llist_del_all(&delayed_fput_list);
 	struct file *f, *t;
 
@@ -264,12 +286,16 @@ static DECLARE_DELAYED_WORK(delayed_fput_work, delayed_fput);
 void fput(struct file *file)
 {
 	if (atomic_long_dec_and_test(&file->f_count)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct task_struct *task = current;
 
 		if (likely(!in_interrupt() && !(task->flags & PF_KTHREAD))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			init_task_work(&file->f_u.fu_rcuhead, ____fput);
 			if (!task_work_add(task, &file->f_u.fu_rcuhead, true))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return;
+}
 			/*
 			 * After this task has run exit_task_work(),
 			 * task_work_add() will fail.  Fall through to delayed
@@ -292,6 +318,7 @@ void fput(struct file *file)
  */
 void __fput_sync(struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atomic_long_dec_and_test(&file->f_count)) {
 		struct task_struct *task = current;
 		BUG_ON(!(task->flags & PF_KTHREAD));
diff --git a/fs/filesystems.c b/fs/filesystems.c
index f2728a4..4c4f595 100644
--- a/fs/filesystems.c
+++ b/fs/filesystems.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/filesystems.c
@@ -75,13 +77,18 @@ int register_filesystem(struct file_system_type * fs)
 
 	BUG_ON(strchr(fs->name, '.'));
 	if (fs->next)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 	write_lock(&file_systems_lock);
 	p = find_filesystem(fs->name, strlen(fs->name));
 	if (*p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = -EBUSY;
+}
 	else
 		*p = fs;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_unlock(&file_systems_lock);
 	return res;
 }
@@ -106,6 +113,7 @@ int unregister_filesystem(struct file_system_type * fs)
 
 	write_lock(&file_systems_lock);
 	tmp = &file_systems;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (*tmp) {
 		if (fs == *tmp) {
 			*tmp = fs->next;
@@ -133,7 +141,9 @@ static int fs_index(const char __user * __name)
 	name = getname(__name);
 	err = PTR_ERR(name);
 	if (IS_ERR(name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = -EINVAL;
 	read_lock(&file_systems_lock);
@@ -154,6 +164,7 @@ static int fs_name(unsigned int index, char __user * buf)
 	int len, res;
 
 	read_lock(&file_systems_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (tmp = file_systems; tmp; tmp = tmp->next, index--)
 		if (index <= 0 && try_module_get(tmp->owner))
 			break;
@@ -174,6 +185,7 @@ static int fs_maxindex(void)
 	int index;
 
 	read_lock(&file_systems_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (tmp = file_systems, index = 0 ; tmp ; tmp = tmp->next, index++)
 		;
 	read_unlock(&file_systems_lock);
@@ -211,6 +223,7 @@ int __init get_filesystem_list(char *buf)
 
 	read_lock(&file_systems_lock);
 	tmp = file_systems;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (tmp && len < PAGE_SIZE - 80) {
 		len += sprintf(buf+len, "%s\t%s\n",
 			(tmp->fs_flags & FS_REQUIRES_DEV) ? "" : "nodev",
@@ -234,6 +247,7 @@ static int filesystems_proc_show(struct seq_file *m, void *v)
 			tmp->name);
 		tmp = tmp->next;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock(&file_systems_lock);
 	return 0;
 }
@@ -265,7 +279,10 @@ static struct file_system_type *__get_fs_type(const char *name, int len)
 	read_lock(&file_systems_lock);
 	fs = *(find_filesystem(name, len));
 	if (fs && !try_module_get(fs->owner))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fs = NULL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock(&file_systems_lock);
 	return fs;
 }
@@ -278,11 +295,14 @@ struct file_system_type *get_fs_type(const char *name)
 
 	fs = __get_fs_type(name, len);
 	if (!fs && (request_module("fs-%.*s", len, name) == 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fs = __get_fs_type(name, len);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ONCE(!fs, "request_module fs-%.*s succeeded, but still no fs?\n", len, name);
 	}
 
 	if (dot && fs && !(fs->fs_flags & FS_HAS_SUBTYPE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_filesystem(fs);
 		fs = NULL;
 	}
diff --git a/fs/fs-writeback.c b/fs/fs-writeback.c
index 245c430..19922af 100644
--- a/fs/fs-writeback.c
+++ b/fs/fs-writeback.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/fs-writeback.c
  *
@@ -898,6 +900,7 @@ locked_inode_to_wb_and_lock_list(struct inode *inode)
 	__releases(&inode->i_lock)
 	__acquires(&wb->list_lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bdi_writeback *wb = inode_to_wb(inode);
 
 	spin_unlock(&inode->i_lock);
@@ -908,6 +911,7 @@ locked_inode_to_wb_and_lock_list(struct inode *inode)
 static struct bdi_writeback *inode_to_wb_and_lock_list(struct inode *inode)
 	__acquires(&wb->list_lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bdi_writeback *wb = inode_to_wb(inode);
 
 	spin_lock(&wb->list_lock);
@@ -916,6 +920,7 @@ static struct bdi_writeback *inode_to_wb_and_lock_list(struct inode *inode)
 
 static long wb_split_bdi_pages(struct bdi_writeback *wb, long nr_pages)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return nr_pages;
 }
 
@@ -923,6 +928,7 @@ static void bdi_split_work_to_wbs(struct backing_dev_info *bdi,
 				  struct wb_writeback_work *base_work,
 				  bool skip_if_busy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 
 	if (!skip_if_busy || !writeback_in_progress(&bdi->wb)) {
@@ -939,7 +945,9 @@ void wb_start_writeback(struct bdi_writeback *wb, long nr_pages,
 	struct wb_writeback_work *work;
 
 	if (!wb_has_dirty_io(wb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * This is WB_SYNC_NONE writeback, so if allocation fails just
@@ -1003,6 +1011,7 @@ void sb_mark_inode_writeback(struct inode *inode)
 	unsigned long flags;
 
 	if (list_empty(&inode->i_wb_list)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irqsave(&sb->s_inode_wblist_lock, flags);
 		if (list_empty(&inode->i_wb_list)) {
 			list_add_tail(&inode->i_wb_list, &sb->s_inodes_wb);
@@ -1021,6 +1030,7 @@ void sb_clear_inode_writeback(struct inode *inode)
 	unsigned long flags;
 
 	if (!list_empty(&inode->i_wb_list)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irqsave(&sb->s_inode_wblist_lock, flags);
 		if (!list_empty(&inode->i_wb_list)) {
 			list_del_init(&inode->i_wb_list);
@@ -1041,6 +1051,7 @@ void sb_clear_inode_writeback(struct inode *inode)
  */
 static void redirty_tail(struct inode *inode, struct bdi_writeback *wb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!list_empty(&wb->b_dirty)) {
 		struct inode *tail;
 
@@ -1056,11 +1067,13 @@ static void redirty_tail(struct inode *inode, struct bdi_writeback *wb)
  */
 static void requeue_io(struct inode *inode, struct bdi_writeback *wb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_io_list_move_locked(inode, wb, &wb->b_more_io);
 }
 
 static void inode_sync_complete(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode->i_state &= ~I_SYNC;
 	/* If inode is clean an unused, put it into LRU now... */
 	inode_add_lru(inode);
@@ -1071,6 +1084,7 @@ static void inode_sync_complete(struct inode *inode)
 
 static bool inode_dirtied_after(struct inode *inode, unsigned long t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bool ret = time_after(inode->dirtied_when, t);
 #ifndef CONFIG_64BIT
 	/*
@@ -1105,7 +1119,9 @@ static int move_expired_inodes(struct list_head *delaying_queue,
 	int moved = 0;
 
 	if ((flags & EXPIRE_DIRTY_ATIME) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		older_than_this = work->older_than_this;
+}
 	else if (!work->for_sync) {
 		expire_time = jiffies - (dirtytime_expire_interval * HZ);
 		older_than_this = &expire_time;
@@ -1160,6 +1176,7 @@ static void queue_io(struct bdi_writeback *wb, struct wb_writeback_work *work)
 {
 	int moved;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	assert_spin_locked(&wb->list_lock);
 	list_splice_init(&wb->b_more_io, &wb->b_io);
 	moved = move_expired_inodes(&wb->b_dirty, &wb->b_io, 0, work);
@@ -1174,6 +1191,7 @@ static int write_inode(struct inode *inode, struct writeback_control *wbc)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (inode->i_sb->s_op->write_inode && !is_bad_inode(inode)) {
 		trace_writeback_write_inode_start(inode, wbc);
 		ret = inode->i_sb->s_op->write_inode(inode, wbc);
@@ -1196,6 +1214,7 @@ static void __inode_wait_for_writeback(struct inode *inode)
 
 	wqh = bit_waitqueue(&inode->i_state, __I_SYNC);
 	while (inode->i_state & I_SYNC) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&inode->i_lock);
 		__wait_on_bit(wqh, &wq, bit_wait,
 			      TASK_UNINTERRUPTIBLE);
@@ -1208,6 +1227,7 @@ static void __inode_wait_for_writeback(struct inode *inode)
  */
 void inode_wait_for_writeback(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&inode->i_lock);
 	__inode_wait_for_writeback(inode);
 	spin_unlock(&inode->i_lock);
@@ -1221,6 +1241,7 @@ void inode_wait_for_writeback(struct inode *inode)
 static void inode_sleep_on_writeback(struct inode *inode)
 	__releases(inode->i_lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DEFINE_WAIT(wait);
 	wait_queue_head_t *wqh = bit_waitqueue(&inode->i_state, __I_SYNC);
 	int sleep;
@@ -1244,6 +1265,7 @@ static void inode_sleep_on_writeback(struct inode *inode)
 static void requeue_inode(struct inode *inode, struct bdi_writeback *wb,
 			  struct writeback_control *wbc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (inode->i_state & I_FREEING)
 		return;
 
@@ -1312,6 +1334,7 @@ __writeback_single_inode(struct inode *inode, struct writeback_control *wbc)
 	unsigned dirty;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!(inode->i_state & I_SYNC));
 
 	trace_writeback_single_inode_start(inode, wbc, nr_to_write);
@@ -1399,7 +1422,9 @@ static int writeback_single_inode(struct inode *inode,
 
 	spin_lock(&inode->i_lock);
 	if (!atomic_read(&inode->i_count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(!(inode->i_state & (I_WILL_FREE|I_FREEING)));
+}
 	else
 		WARN_ON(inode->i_state & I_WILL_FREE);
 
@@ -1506,6 +1531,7 @@ static long writeback_sb_inodes(struct super_block *sb,
 	long write_chunk;
 	long wrote = 0;  /* count both pages and inodes */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!list_empty(&wb->b_io)) {
 		struct inode *inode = wb_inode(wb->b_io.prev);
 		struct bdi_writeback *tmp_wb;
@@ -1636,6 +1662,7 @@ static long __writeback_inodes_wb(struct bdi_writeback *wb,
 	unsigned long start_time = jiffies;
 	long wrote = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!list_empty(&wb->b_io)) {
 		struct inode *inode = wb_inode(wb->b_io.prev);
 		struct super_block *sb = inode->i_sb;
@@ -1678,7 +1705,9 @@ static long writeback_inodes_wb(struct bdi_writeback *wb, long nr_pages,
 	blk_start_plug(&plug);
 	spin_lock(&wb->list_lock);
 	if (list_empty(&wb->b_io))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		queue_io(wb, &work);
+}
 	__writeback_inodes_wb(wb, &work);
 	spin_unlock(&wb->list_lock);
 	blk_finish_plug(&plug);
@@ -1806,6 +1835,7 @@ static struct wb_writeback_work *get_next_work_item(struct bdi_writeback *wb)
 
 	spin_lock_bh(&wb->work_lock);
 	if (!list_empty(&wb->work_list)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		work = list_entry(wb->work_list.next,
 				  struct wb_writeback_work, list);
 		list_del_init(&work->list);
@@ -1827,6 +1857,7 @@ static unsigned long get_nr_dirty_pages(void)
 
 static long wb_check_background_flush(struct bdi_writeback *wb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (wb_over_bg_thresh(wb)) {
 
 		struct wb_writeback_work work = {
@@ -1852,7 +1883,9 @@ static long wb_check_old_data_flush(struct bdi_writeback *wb)
 	 * When set to zero, disable periodic writeback
 	 */
 	if (!dirty_writeback_interval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	expired = wb->last_old_flush +
 			msecs_to_jiffies(dirty_writeback_interval * 10);
@@ -1886,6 +1919,7 @@ static long wb_do_writeback(struct bdi_writeback *wb)
 	long wrote = 0;
 
 	set_bit(WB_writeback_running, &wb->state);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((work = get_next_work_item(wb)) != NULL) {
 		trace_writeback_exec(wb, work);
 		wrote += wb_writeback(wb, work);
@@ -1908,6 +1942,7 @@ static long wb_do_writeback(struct bdi_writeback *wb)
  */
 void wb_workfn(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct bdi_writeback *wb = container_of(to_delayed_work(work),
 						struct bdi_writeback, dwork);
 	long pages_written;
@@ -1958,7 +1993,9 @@ void wakeup_flusher_threads(long nr_pages, enum wb_reason reason)
 	 * If we are expecting writeback progress we must submit plugged IO.
 	 */
 	if (blk_needs_flush_plug(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		blk_schedule_flush_plug(current);
+}
 
 	if (!nr_pages)
 		nr_pages = get_nr_dirty_pages();
@@ -2000,6 +2037,7 @@ static void wakeup_dirtytime_writeback(struct work_struct *w)
 	struct backing_dev_info *bdi;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_rcu(bdi, &bdi_list, bdi_list) {
 		struct bdi_writeback *wb;
 
@@ -2024,6 +2062,7 @@ int dirtytime_interval_handler(struct ctl_table *table, int write,
 	int ret;
 
 	ret = proc_dointvec_minmax(table, write, buffer, lenp, ppos);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret == 0 && write)
 		mod_delayed_work(system_wq, &dirtytime_work, 0);
 	return ret;
@@ -2031,6 +2070,7 @@ int dirtytime_interval_handler(struct ctl_table *table, int write,
 
 static noinline void block_dump___mark_inode_dirty(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (inode->i_ino || strcmp(inode->i_sb->s_id, "bdev")) {
 		struct dentry *dentry;
 		const char *name = "?";
@@ -2093,7 +2133,9 @@ void __mark_inode_dirty(struct inode *inode, int flags)
 		trace_writeback_dirty_inode_start(inode, flags);
 
 		if (sb->s_op->dirty_inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sb->s_op->dirty_inode(inode, flags);
+}
 
 		trace_writeback_dirty_inode(inode, flags);
 	}
@@ -2112,8 +2154,11 @@ void __mark_inode_dirty(struct inode *inode, int flags)
 		return;
 
 	if (unlikely(block_dump))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		block_dump___mark_inode_dirty(inode);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&inode->i_lock);
 	if (dirtytime && (inode->i_state & I_DIRTY_INODE))
 		goto out_unlock_inode;
@@ -2162,7 +2207,9 @@ void __mark_inode_dirty(struct inode *inode, int flags)
 
 			inode->dirtied_when = jiffies;
 			if (dirtytime)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				inode->dirtied_time_when = jiffies;
+}
 
 			if (inode->i_state & (I_DIRTY_INODE | I_DIRTY_PAGES))
 				dirty_list = &wb->b_dirty;
@@ -2182,7 +2229,10 @@ void __mark_inode_dirty(struct inode *inode, int flags)
 			 * later.
 			 */
 			if (bdi_cap_writeback_dirty(wb->bdi) && wakeup_bdi)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				wb_wakeup_delayed(wb);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return;
 		}
 	}
@@ -2303,6 +2353,7 @@ static void __writeback_inodes_sb_nr(struct super_block *sb, unsigned long nr,
 
 	if (!bdi_has_dirty_io(bdi) || bdi == &noop_backing_dev_info)
 		return;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!rwsem_is_locked(&sb->s_umount));
 
 	bdi_split_work_to_wbs(sb->s_bdi, &work, skip_if_busy);
@@ -2354,6 +2405,7 @@ EXPORT_SYMBOL(writeback_inodes_sb);
 bool try_to_writeback_inodes_sb_nr(struct super_block *sb, unsigned long nr,
 				   enum wb_reason reason)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!down_read_trylock(&sb->s_umount))
 		return false;
 
@@ -2373,6 +2425,7 @@ EXPORT_SYMBOL(try_to_writeback_inodes_sb_nr);
  */
 bool try_to_writeback_inodes_sb(struct super_block *sb, enum wb_reason reason)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return try_to_writeback_inodes_sb_nr(sb, get_nr_dirty_pages(), reason);
 }
 EXPORT_SYMBOL(try_to_writeback_inodes_sb);
@@ -2405,6 +2458,7 @@ void sync_inodes_sb(struct super_block *sb)
 	 */
 	if (bdi == &noop_backing_dev_info)
 		return;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!rwsem_is_locked(&sb->s_umount));
 
 	bdi_split_work_to_wbs(bdi, &work, false);
@@ -2454,6 +2508,7 @@ EXPORT_SYMBOL(write_inode_now);
  */
 int sync_inode(struct inode *inode, struct writeback_control *wbc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return writeback_single_inode(inode, wbc);
 }
 EXPORT_SYMBOL(sync_inode);
diff --git a/fs/fs_pin.c b/fs/fs_pin.c
index 0d285fd..c9512f5 100644
--- a/fs/fs_pin.c
+++ b/fs/fs_pin.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/fs.h>
 #include <linux/sched.h>
@@ -9,6 +11,7 @@ static DEFINE_SPINLOCK(pin_lock);
 
 void pin_remove(struct fs_pin *pin)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&pin_lock);
 	hlist_del_init(&pin->m_list);
 	hlist_del_init(&pin->s_list);
@@ -21,6 +24,7 @@ void pin_remove(struct fs_pin *pin)
 
 void pin_insert_group(struct fs_pin *pin, struct vfsmount *m, struct hlist_head *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&pin_lock);
 	if (p)
 		hlist_add_head(&pin->s_list, p);
@@ -30,6 +34,7 @@ void pin_insert_group(struct fs_pin *pin, struct vfsmount *m, struct hlist_head
 
 void pin_insert(struct fs_pin *pin, struct vfsmount *m)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pin_insert_group(pin, m, &m->mnt_sb->s_pins);
 }
 
@@ -38,10 +43,12 @@ void pin_kill(struct fs_pin *p)
 	wait_queue_entry_t wait;
 
 	if (!p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		return;
 	}
 	init_wait(&wait);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&p->wait.lock);
 	if (likely(!p->done)) {
 		p->done = -1;
@@ -50,14 +57,20 @@ void pin_kill(struct fs_pin *p)
 		p->kill(p);
 		return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (p->done > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irq(&p->wait.lock);
 		rcu_read_unlock();
 		return;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__add_wait_queue(&p->wait, &wait);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_current_state(TASK_UNINTERRUPTIBLE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irq(&p->wait.lock);
 		rcu_read_unlock();
 		schedule();
@@ -67,15 +80,18 @@ void pin_kill(struct fs_pin *p)
 		/* OK, we know p couldn't have been freed yet */
 		spin_lock_irq(&p->wait.lock);
 		if (p->done > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock_irq(&p->wait.lock);
 			break;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
 void mnt_pin_kill(struct mount *m)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		struct hlist_node *p;
 		rcu_read_lock();
@@ -95,6 +111,7 @@ void group_pin_kill(struct hlist_head *p)
 		rcu_read_lock();
 		q = ACCESS_ONCE(p->first);
 		if (!q) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock();
 			break;
 		}
diff --git a/fs/fs_struct.c b/fs/fs_struct.c
index be02507..447f60b 100644
--- a/fs/fs_struct.c
+++ b/fs/fs_struct.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/export.h>
 #include <linux/sched/signal.h>
 #include <linux/sched/task.h>
@@ -49,7 +51,9 @@ void set_fs_pwd(struct fs_struct *fs, const struct path *path)
 static inline int replace_path(struct path *p, const struct path *old, const struct path *new)
 {
 	if (likely(p->dentry != old->dentry || p->mnt != old->mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	*p = *new;
 	return 1;
 }
@@ -61,6 +65,7 @@ void chroot_fs_refs(const struct path *old_root, const struct path *new_root)
 	int count = 0;
 
 	read_lock(&tasklist_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	do_each_thread(g, p) {
 		task_lock(p);
 		fs = p->fs;
@@ -116,6 +121,7 @@ struct fs_struct *copy_fs_struct(struct fs_struct *old)
 		fs->users = 1;
 		fs->in_exec = 0;
 		spin_lock_init(&fs->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seqcount_init(&fs->seq);
 		fs->umask = old->umask;
 
@@ -131,6 +137,7 @@ struct fs_struct *copy_fs_struct(struct fs_struct *old)
 
 int unshare_fs_struct(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fs_struct *fs = current->fs;
 	struct fs_struct *new_fs = copy_fs_struct(fs);
 	int kill;
diff --git a/fs/fscache/cookie.c b/fs/fscache/cookie.c
index 40d6107..23e0a86 100644
--- a/fs/fscache/cookie.c
+++ b/fs/fscache/cookie.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* netfs cookie management
  *
  * Copyright (C) 2004-2007 Red Hat, Inc. All Rights Reserved.
diff --git a/fs/fscache/main.c b/fs/fscache/main.c
index b39d487..cd16090 100644
--- a/fs/fscache/main.c
+++ b/fs/fscache/main.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* General filesystem local caching manager
  *
  * Copyright (C) 2004-2007 Red Hat, Inc. All Rights Reserved.
diff --git a/fs/fscache/netfs.c b/fs/fscache/netfs.c
index a8aa00b..5862648 100644
--- a/fs/fscache/netfs.c
+++ b/fs/fscache/netfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* FS-Cache netfs (client) registration
  *
  * Copyright (C) 2008 Red Hat, Inc. All Rights Reserved.
diff --git a/fs/fscache/proc.c b/fs/fscache/proc.c
index 1d9e495..2bdd7ff 100644
--- a/fs/fscache/proc.c
+++ b/fs/fscache/proc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* FS-Cache statistics viewing interface
  *
  * Copyright (C) 2007 Red Hat, Inc. All Rights Reserved.
diff --git a/fs/fuse/control.c b/fs/fuse/control.c
index b9ea99c..1c22955 100644
--- a/fs/fuse/control.c
+++ b/fs/fuse/control.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
   FUSE: Filesystem in Userspace
   Copyright (C) 2001-2008  Miklos Szeredi <miklos@szeredi.hu>
diff --git a/fs/fuse/cuse.c b/fs/fuse/cuse.c
index e9e9780..627122b 100644
--- a/fs/fuse/cuse.c
+++ b/fs/fuse/cuse.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * CUSE: Character device in Userspace
  *
diff --git a/fs/fuse/dev.c b/fs/fuse/dev.c
index 13c65dd..a449520 100644
--- a/fs/fuse/dev.c
+++ b/fs/fuse/dev.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
   FUSE: Filesystem in Userspace
   Copyright (C) 2001-2008  Miklos Szeredi <miklos@szeredi.hu>
diff --git a/fs/fuse/inode.c b/fs/fuse/inode.c
index 94a745a..4c3f89f 100644
--- a/fs/fuse/inode.c
+++ b/fs/fuse/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
   FUSE: Filesystem in Userspace
   Copyright (C) 2001-2008  Miklos Szeredi <miklos@szeredi.hu>
diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c
index ed113ea..48cac41 100644
--- a/fs/hugetlbfs/inode.c
+++ b/fs/hugetlbfs/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * hugetlbpage-backed filesystem.  Based on ramfs.
  *
@@ -62,6 +64,7 @@ struct hugetlbfs_inode_info {
 
 static inline struct hugetlbfs_inode_info *HUGETLBFS_I(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return container_of(inode, struct hugetlbfs_inode_info, vfs_inode);
 }
 
@@ -89,12 +92,14 @@ static const match_table_t tokens = {
 static inline void hugetlb_set_vma_policy(struct vm_area_struct *vma,
 					struct inode *inode, pgoff_t index)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vma->vm_policy = mpol_shared_policy_lookup(&HUGETLBFS_I(inode)->policy,
 							index);
 }
 
 static inline void hugetlb_drop_vma_policy(struct vm_area_struct *vma)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mpol_cond_put(vma->vm_policy);
 }
 #else
@@ -112,6 +117,7 @@ static void huge_pagevec_release(struct pagevec *pvec)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < pagevec_count(pvec); ++i)
 		put_page(pvec->pages[i]);
 
@@ -120,6 +126,7 @@ static void huge_pagevec_release(struct pagevec *pvec)
 
 static int hugetlbfs_file_mmap(struct file *file, struct vm_area_struct *vma)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	loff_t len, vma_len;
 	int ret;
@@ -141,17 +148,24 @@ static int hugetlbfs_file_mmap(struct file *file, struct vm_area_struct *vma)
 	 * negative when represented as a (l)off_t.
 	 */
 	if (((loff_t)vma->vm_pgoff << PAGE_SHIFT) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (vma->vm_pgoff & (~huge_page_mask(h) >> PAGE_SHIFT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	vma_len = (loff_t)(vma->vm_end - vma->vm_start);
 	len = vma_len + ((loff_t)vma->vm_pgoff << PAGE_SHIFT);
 	/* check for overflow */
 	if (len < vma_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_lock(inode);
 	file_accessed(file);
 
@@ -162,9 +176,13 @@ static int hugetlbfs_file_mmap(struct file *file, struct vm_area_struct *vma)
 				vma->vm_flags))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (vma->vm_flags & VM_WRITE && inode->i_size < len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i_size_write(inode, len);
+}
 out:
 	inode_unlock(inode);
 
@@ -225,6 +243,7 @@ hugetlbfs_read_actor(struct page *page, unsigned long offset,
 	i = offset >> PAGE_SHIFT;
 	offset = offset & ~PAGE_MASK;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (size) {
 		size_t n;
 		chunksize = PAGE_SIZE;
@@ -260,6 +279,7 @@ static ssize_t hugetlbfs_read_iter(struct kiocb *iocb, struct iov_iter *to)
 	loff_t isize;
 	ssize_t retval = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (iov_iter_count(to)) {
 		struct page *page;
 		size_t nr, copied;
@@ -315,6 +335,7 @@ static int hugetlbfs_write_begin(struct file *file,
 			loff_t pos, unsigned len, unsigned flags,
 			struct page **pagep, void **fsdata)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EINVAL;
 }
 
@@ -322,12 +343,14 @@ static int hugetlbfs_write_end(struct file *file, struct address_space *mapping,
 			loff_t pos, unsigned len, unsigned copied,
 			struct page *page, void *fsdata)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG();
 	return -EINVAL;
 }
 
 static void remove_huge_page(struct page *page)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ClearPageDirty(page);
 	ClearPageUptodate(page);
 	delete_from_page_cache(page);
@@ -395,6 +418,7 @@ hugetlb_vmdelete_list(struct rb_root_cached *root, pgoff_t start, pgoff_t end)
 static void remove_inode_hugepages(struct inode *inode, loff_t lstart,
 				   loff_t lend)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hstate *h = hstate_inode(inode);
 	struct address_space *mapping = &inode->i_data;
 	const pgoff_t start = lstart >> huge_page_shift(h);
@@ -416,6 +440,7 @@ static void remove_inode_hugepages(struct inode *inode, loff_t lstart,
 		if (!pagevec_lookup_range(&pvec, mapping, &next, end - 1))
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = 0; i < pagevec_count(&pvec); ++i) {
 			struct page *page = pvec.pages[i];
 			u32 hash;
@@ -436,8 +461,10 @@ static void remove_inode_hugepages(struct inode *inode, loff_t lstart,
 			 * Getting here in a truncate operation is a bug.
 			 */
 			if (unlikely(page_mapped(page))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				BUG_ON(truncate_op);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				i_mmap_lock_write(mapping);
 				hugetlb_vmdelete_list(&mapping->i_mmap,
 					index * pages_per_huge_page(h),
@@ -445,6 +472,7 @@ static void remove_inode_hugepages(struct inode *inode, loff_t lstart,
 				i_mmap_unlock_write(mapping);
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lock_page(page);
 			/*
 			 * We must free the huge page and remove from page
@@ -459,14 +487,17 @@ static void remove_inode_hugepages(struct inode *inode, loff_t lstart,
 			remove_huge_page(page);
 			freed++;
 			if (!truncate_op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (unlikely(hugetlb_unreserve_pages(inode,
 							index, index + 1, 1)))
 					hugetlb_fix_reserve_counts(inode);
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unlock_page(page);
 			mutex_unlock(&hugetlb_fault_mutex_table[hash]);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		huge_pagevec_release(&pvec);
 		cond_resched();
 	}
@@ -493,6 +524,7 @@ static int hugetlb_vmtruncate(struct inode *inode, loff_t offset)
 	struct address_space *mapping = inode->i_mapping;
 	struct hstate *h = hstate_inode(inode);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(offset & ~huge_page_mask(h));
 	pgoff = offset >> PAGE_SHIFT;
 
@@ -507,6 +539,7 @@ static int hugetlb_vmtruncate(struct inode *inode, loff_t offset)
 
 static long hugetlbfs_punch_hole(struct inode *inode, loff_t offset, loff_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hstate *h = hstate_inode(inode);
 	loff_t hpage_size = huge_page_size(h);
 	loff_t hole_start, hole_end;
@@ -538,6 +571,7 @@ static long hugetlbfs_punch_hole(struct inode *inode, loff_t offset, loff_t len)
 static long hugetlbfs_fallocate(struct file *file, int mode, loff_t offset,
 				loff_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	struct address_space *mapping = inode->i_mapping;
 	struct hstate *h = hstate_inode(inode);
@@ -656,6 +690,7 @@ static long hugetlbfs_fallocate(struct file *file, int mode, loff_t offset,
 
 static int hugetlbfs_setattr(struct dentry *dentry, struct iattr *attr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	struct hstate *h = hstate_inode(inode);
 	int error;
@@ -719,12 +754,15 @@ static struct inode *hugetlbfs_get_inode(struct super_block *sb,
 
 	resv_map = resv_map_alloc();
 	if (!resv_map)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	inode = new_inode(sb);
 	if (inode) {
 		inode->i_ino = get_next_ino();
 		inode_init_owner(inode, dir, mode);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lockdep_set_class(&inode->i_mapping->i_mmap_rwsem,
 				&hugetlbfs_i_mmap_rwsem_key);
 		inode->i_mapping->a_ops = &hugetlbfs_aops;
@@ -750,10 +788,14 @@ static struct inode *hugetlbfs_get_inode(struct super_block *sb,
 			inode_nohighmem(inode);
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lockdep_annotate_inode_mutex_key(inode);
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kref_put(&resv_map->refs, resv_map_release);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return inode;
 }
 
@@ -768,6 +810,7 @@ static int hugetlbfs_mknod(struct inode *dir,
 
 	inode = hugetlbfs_get_inode(dir->i_sb, dir, mode, dev);
 	if (inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dir->i_ctime = dir->i_mtime = current_time(dir);
 		d_instantiate(dentry, inode);
 		dget(dentry);	/* Extra count - pin the dentry in core */
@@ -778,6 +821,7 @@ static int hugetlbfs_mknod(struct inode *dir,
 
 static int hugetlbfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int retval = hugetlbfs_mknod(dir, dentry, mode | S_IFDIR, 0);
 	if (!retval)
 		inc_nlink(dir);
@@ -786,6 +830,7 @@ static int hugetlbfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mod
 
 static int hugetlbfs_create(struct inode *dir, struct dentry *dentry, umode_t mode, bool excl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hugetlbfs_mknod(dir, dentry, mode | S_IFREG, 0);
 }
 
@@ -797,6 +842,7 @@ static int hugetlbfs_symlink(struct inode *dir,
 
 	inode = hugetlbfs_get_inode(dir->i_sb, dir, S_IFLNK|S_IRWXUGO, 0);
 	if (inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int l = strlen(symname)+1;
 		error = page_symlink(inode, symname, l);
 		if (!error) {
@@ -815,6 +861,7 @@ static int hugetlbfs_symlink(struct inode *dir,
  */
 static int hugetlbfs_set_page_dirty(struct page *page)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct page *head = compound_head(page);
 
 	SetPageDirty(head);
@@ -829,7 +876,9 @@ static int hugetlbfs_migrate_page(struct address_space *mapping,
 
 	rc = migrate_huge_page_move_mapping(mapping, newpage, page);
 	if (rc != MIGRATEPAGE_SUCCESS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rc;
+}
 	if (mode != MIGRATE_SYNC_NO_COPY)
 		migrate_page_copy(newpage, page);
 	else
@@ -846,7 +895,9 @@ static int hugetlbfs_error_remove_page(struct address_space *mapping,
 
 	remove_huge_page(page);
 	if (unlikely(hugetlb_unreserve_pages(inode, index, index + 1, 1)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hugetlb_fix_reserve_counts(inode);
+}
 
 	return 0;
 }
@@ -856,6 +907,7 @@ static int hugetlbfs_error_remove_page(struct address_space *mapping,
  */
 static int hugetlbfs_show_options(struct seq_file *m, struct dentry *root)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hugetlbfs_sb_info *sbinfo = HUGETLBFS_SB(root->d_sb);
 	struct hugepage_subpool *spool = sbinfo->spool;
 	unsigned long hpage_size = huge_page_size(sbinfo->hstate);
@@ -893,6 +945,7 @@ static int hugetlbfs_show_options(struct seq_file *m, struct dentry *root)
 
 static int hugetlbfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hugetlbfs_sb_info *sbinfo = HUGETLBFS_SB(dentry->d_sb);
 	struct hstate *h = hstate_inode(d_inode(dentry));
 
@@ -922,6 +975,7 @@ static int hugetlbfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 
 static void hugetlbfs_put_super(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hugetlbfs_sb_info *sbi = HUGETLBFS_SB(sb);
 
 	if (sbi) {
@@ -937,21 +991,26 @@ static void hugetlbfs_put_super(struct super_block *sb)
 static inline int hugetlbfs_dec_free_inodes(struct hugetlbfs_sb_info *sbinfo)
 {
 	if (sbinfo->free_inodes >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&sbinfo->stat_lock);
 		if (unlikely(!sbinfo->free_inodes)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&sbinfo->stat_lock);
 			return 0;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sbinfo->free_inodes--;
 		spin_unlock(&sbinfo->stat_lock);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
 static void hugetlbfs_inc_free_inodes(struct hugetlbfs_sb_info *sbinfo)
 {
 	if (sbinfo->free_inodes >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&sbinfo->stat_lock);
 		sbinfo->free_inodes++;
 		spin_unlock(&sbinfo->stat_lock);
@@ -963,13 +1022,17 @@ static struct kmem_cache *hugetlbfs_inode_cachep;
 
 static struct inode *hugetlbfs_alloc_inode(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hugetlbfs_sb_info *sbinfo = HUGETLBFS_SB(sb);
 	struct hugetlbfs_inode_info *p;
 
 	if (unlikely(!hugetlbfs_dec_free_inodes(sbinfo)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	p = kmem_cache_alloc(hugetlbfs_inode_cachep, GFP_KERNEL);
 	if (unlikely(!p)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hugetlbfs_inc_free_inodes(sbinfo);
 		return NULL;
 	}
@@ -1064,14 +1127,19 @@ hugetlbfs_size_to_hpages(struct hstate *h, unsigned long long size_opt,
 			 enum hugetlbfs_size_type val_type)
 {
 	if (val_type == NO_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (val_type == SIZE_PERCENT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		size_opt <<= huge_page_shift(h);
 		size_opt *= h->max_huge_pages;
 		do_div(size_opt, 100);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size_opt >>= huge_page_shift(h);
 	return size_opt;
 }
@@ -1086,7 +1154,9 @@ hugetlbfs_parse_options(char *options, struct hugetlbfs_config *pconfig)
 	enum hugetlbfs_size_type max_val_type = NO_SIZE, min_val_type = NO_SIZE;
 
 	if (!options)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	while ((p = strsep(&options, ",")) != NULL) {
 		int token;
@@ -1098,6 +1168,7 @@ hugetlbfs_parse_options(char *options, struct hugetlbfs_config *pconfig)
 		case Opt_uid:
 			if (match_int(&args[0], &option))
  				goto bad_val;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pconfig->uid = make_kuid(current_user_ns(), option);
 			if (!uid_valid(pconfig->uid))
 				goto bad_val;
@@ -1106,6 +1177,7 @@ hugetlbfs_parse_options(char *options, struct hugetlbfs_config *pconfig)
 		case Opt_gid:
 			if (match_int(&args[0], &option))
  				goto bad_val;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pconfig->gid = make_kgid(current_user_ns(), option);
 			if (!gid_valid(pconfig->gid))
 				goto bad_val;
@@ -1114,6 +1186,7 @@ hugetlbfs_parse_options(char *options, struct hugetlbfs_config *pconfig)
 		case Opt_mode:
 			if (match_octal(&args[0], &option))
  				goto bad_val;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pconfig->mode = option & 01777U;
 			break;
 
@@ -1121,10 +1194,13 @@ hugetlbfs_parse_options(char *options, struct hugetlbfs_config *pconfig)
 			/* memparse() will accept a K/M/G without a digit */
 			if (!isdigit(*args[0].from))
 				goto bad_val;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			max_size_opt = memparse(args[0].from, &rest);
 			max_val_type = SIZE_STD;
 			if (*rest == '%')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				max_val_type = SIZE_PERCENT;
+}
 			break;
 		}
 
@@ -1132,6 +1208,7 @@ hugetlbfs_parse_options(char *options, struct hugetlbfs_config *pconfig)
 			/* memparse() will accept a K/M/G without a digit */
 			if (!isdigit(*args[0].from))
 				goto bad_val;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pconfig->nr_inodes = memparse(args[0].from, &rest);
 			break;
 
@@ -1140,6 +1217,7 @@ hugetlbfs_parse_options(char *options, struct hugetlbfs_config *pconfig)
 			ps = memparse(args[0].from, &rest);
 			pconfig->hstate = size_to_hstate(ps);
 			if (!pconfig->hstate) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pr_err("Unsupported page size %lu MB\n",
 					ps >> 20);
 				return -EINVAL;
@@ -1151,10 +1229,13 @@ hugetlbfs_parse_options(char *options, struct hugetlbfs_config *pconfig)
 			/* memparse() will accept a K/M/G without a digit */
 			if (!isdigit(*args[0].from))
 				goto bad_val;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			min_size_opt = memparse(args[0].from, &rest);
 			min_val_type = SIZE_STD;
 			if (*rest == '%')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				min_val_type = SIZE_PERCENT;
+}
 			break;
 		}
 
@@ -1179,10 +1260,12 @@ hugetlbfs_parse_options(char *options, struct hugetlbfs_config *pconfig)
 	 */
 	if (max_val_type > NO_SIZE &&
 	    pconfig->min_hpages > pconfig->max_hpages) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("minimum size can not be greater than maximum size\n");
 		return -EINVAL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 bad_val:
@@ -1206,11 +1289,16 @@ hugetlbfs_fill_super(struct super_block *sb, void *data, int silent)
 	config.min_hpages = -1; /* No default minimum size */
 	ret = hugetlbfs_parse_options(data, &config);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sbinfo = kmalloc(sizeof(struct hugetlbfs_sb_info), GFP_KERNEL);
 	if (!sbinfo)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	sb->s_fs_info = sbinfo;
 	sbinfo->hstate = config.hstate;
 	spin_lock_init(&sbinfo->stat_lock);
@@ -1227,6 +1315,7 @@ hugetlbfs_fill_super(struct super_block *sb, void *data, int silent)
 	 * taken when the subpool is created.
 	 */
 	if (config.max_hpages != -1 || config.min_hpages != -1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sbinfo->spool = hugepage_new_subpool(config.hstate,
 							config.max_hpages,
 							config.min_hpages);
@@ -1242,6 +1331,7 @@ hugetlbfs_fill_super(struct super_block *sb, void *data, int silent)
 	sb->s_root = d_make_root(hugetlbfs_get_root(sb, &config));
 	if (!sb->s_root)
 		goto out_free;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 out_free:
 	kfree(sbinfo->spool);
@@ -1267,6 +1357,7 @@ static int can_do_hugetlb_shm(void)
 {
 	kgid_t shm_group;
 	shm_group = make_kgid(&init_user_ns, sysctl_hugetlb_shm_group);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return capable(CAP_IPC_LOCK) || in_group_p(shm_group);
 }
 
@@ -1275,7 +1366,9 @@ static int get_hstate_idx(int page_size_log)
 	struct hstate *h = hstate_sizelog(page_size_log);
 
 	if (!h)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 	return h - hstates;
 }
 
@@ -1291,6 +1384,7 @@ struct file *hugetlb_file_setup(const char *name, size_t size,
 				vm_flags_t acctflag, struct user_struct **user,
 				int creat_flags, int page_size_log)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct file *file = ERR_PTR(-ENOMEM);
 	struct inode *inode;
 	struct path path;
@@ -1300,20 +1394,28 @@ struct file *hugetlb_file_setup(const char *name, size_t size,
 
 	hstate_idx = get_hstate_idx(page_size_log);
 	if (hstate_idx < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENODEV);
+}
 
 	*user = NULL;
 	if (!hugetlbfs_vfsmount[hstate_idx])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 
 	if (creat_flags == HUGETLB_SHMFS_INODE && !can_do_hugetlb_shm()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*user = current_user();
 		if (user_shm_lock(size, *user)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			task_lock(current);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn_once("%s (%d): Using mlock ulimits for SHM_HUGETLB is deprecated\n",
 				current->comm, current->pid);
 			task_unlock(current);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*user = NULL;
 			return ERR_PTR(-EPERM);
 		}
@@ -1334,8 +1436,11 @@ struct file *hugetlb_file_setup(const char *name, size_t size,
 	if (!inode)
 		goto out_dentry;
 	if (creat_flags == HUGETLB_SHMFS_INODE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode->i_flags |= S_PRIVATE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	file = ERR_PTR(-ENOMEM);
 	if (hugetlb_reserve_pages(inode, 0,
 			size >> huge_page_shift(hstate_inode(inode)), NULL,
@@ -1351,6 +1456,7 @@ struct file *hugetlb_file_setup(const char *name, size_t size,
 	if (IS_ERR(file))
 		goto out_dentry; /* inode is already attached */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return file;
 
 out_inode:
@@ -1359,9 +1465,11 @@ struct file *hugetlb_file_setup(const char *name, size_t size,
 	path_put(&path);
 out_shm_unlock:
 	if (*user) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		user_shm_unlock(size, *user);
 		*user = NULL;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return file;
 }
 
@@ -1372,10 +1480,12 @@ static int __init init_hugetlbfs_fs(void)
 	int i;
 
 	if (!hugepages_supported()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("disabling because there are no supported hugepage sizes\n");
 		return -ENOTSUPP;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -ENOMEM;
 	hugetlbfs_inode_cachep = kmem_cache_create("hugetlbfs_inode_cache",
 					sizeof(struct hugetlbfs_inode_info),
@@ -1387,6 +1497,7 @@ static int __init init_hugetlbfs_fs(void)
 	if (error)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i = 0;
 	for_each_hstate(h) {
 		char buf[50];
@@ -1397,6 +1508,7 @@ static int __init init_hugetlbfs_fs(void)
 							buf);
 
 		if (IS_ERR(hugetlbfs_vfsmount[i])) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("Cannot mount internal hugetlbfs for "
 				"page size %uK", ps_kb);
 			error = PTR_ERR(hugetlbfs_vfsmount[i]);
@@ -1406,7 +1518,9 @@ static int __init init_hugetlbfs_fs(void)
 	}
 	/* Non default hstates are optional */
 	if (!IS_ERR_OR_NULL(hugetlbfs_vfsmount[default_hstate_idx]))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
  out:
 	kmem_cache_destroy(hugetlbfs_inode_cachep);
diff --git a/fs/inode.c b/fs/inode.c
index d1e35b5..bbecd7c 100644
--- a/fs/inode.c
+++ b/fs/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * (C) 1997 Linus Torvalds
  * (C) 1999 Andrea Arcangeli <andrea@suse.de> (dynamic inode allocation)
@@ -107,6 +109,7 @@ long get_nr_dirty_inodes(void)
 int proc_nr_inodes(struct ctl_table *table, int write,
 		   void __user *buffer, size_t *lenp, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inodes_stat.nr_inodes = get_nr_inodes();
 	inodes_stat.nr_unused = get_nr_inodes_unused();
 	return proc_doulongvec_minmax(table, write, buffer, lenp, ppos);
@@ -115,6 +118,7 @@ int proc_nr_inodes(struct ctl_table *table, int write,
 
 static int no_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENXIO;
 }
 
@@ -167,11 +171,14 @@ int inode_init_always(struct super_block *sb, struct inode *inode)
 	if (security_inode_alloc(inode))
 		goto out;
 	spin_lock_init(&inode->i_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_class(&inode->i_lock, &sb->s_type->i_lock_key);
 
 	init_rwsem(&inode->i_rwsem);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_class(&inode->i_rwsem, &sb->s_type->i_mutex_key);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&inode->i_dio_count, 0);
 
 	mapping->a_ops = &empty_aops;
@@ -210,16 +217,23 @@ static struct inode *alloc_inode(struct super_block *sb)
 		inode = kmem_cache_alloc(inode_cachep, GFP_KERNEL);
 
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (unlikely(inode_init_always(sb, inode))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (inode->i_sb->s_op->destroy_inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inode->i_sb->s_op->destroy_inode(inode);
+}
 		else
 			kmem_cache_free(inode_cachep, inode);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return inode;
 }
 
@@ -243,9 +257,13 @@ void __destroy_inode(struct inode *inode)
 
 #ifdef CONFIG_FS_POSIX_ACL
 	if (inode->i_acl && !is_uncached_acl(inode->i_acl))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		posix_acl_release(inode->i_acl);
+}
 	if (inode->i_default_acl && !is_uncached_acl(inode->i_default_acl))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		posix_acl_release(inode->i_default_acl);
+}
 #endif
 	this_cpu_dec(nr_inodes);
 }
@@ -315,11 +333,14 @@ EXPORT_SYMBOL(clear_nlink);
 void set_nlink(struct inode *inode, unsigned int nlink)
 {
 	if (!nlink) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clear_nlink(inode);
 	} else {
 		/* Yes, some filesystems do change nlink from zero to one */
 		if (inode->i_nlink == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atomic_long_dec(&inode->i_sb->s_remove_count);
+}
 
 		inode->__i_nlink = nlink;
 	}
@@ -347,6 +368,7 @@ EXPORT_SYMBOL(inc_nlink);
 
 void address_space_init_once(struct address_space *mapping)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(mapping, 0, sizeof(*mapping));
 	INIT_RADIX_TREE(&mapping->page_tree, GFP_ATOMIC | __GFP_ACCOUNT);
 	spin_lock_init(&mapping->tree_lock);
@@ -364,6 +386,7 @@ EXPORT_SYMBOL(address_space_init_once);
  */
 void inode_init_once(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(inode, 0, sizeof(*inode));
 	INIT_HLIST_NODE(&inode->i_hash);
 	INIT_LIST_HEAD(&inode->i_devices);
@@ -371,6 +394,7 @@ void inode_init_once(struct inode *inode)
 	INIT_LIST_HEAD(&inode->i_wb_list);
 	INIT_LIST_HEAD(&inode->i_lru);
 	address_space_init_once(&inode->i_data);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i_size_ordered_init(inode);
 }
 EXPORT_SYMBOL(inode_init_once);
@@ -401,6 +425,7 @@ EXPORT_SYMBOL(ihold);
 
 static void inode_lru_list_add(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (list_lru_add(&inode->i_sb->s_inode_lru, &inode->i_lru))
 		this_cpu_inc(nr_unused);
 	else
@@ -414,6 +439,7 @@ static void inode_lru_list_add(struct inode *inode)
  */
 void inode_add_lru(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(inode->i_state & (I_DIRTY_ALL | I_SYNC |
 				I_FREEING | I_WILL_FREE)) &&
 	    !atomic_read(&inode->i_count) && inode->i_sb->s_flags & MS_ACTIVE)
@@ -424,6 +450,7 @@ void inode_add_lru(struct inode *inode)
 static void inode_lru_list_del(struct inode *inode)
 {
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (list_lru_del(&inode->i_sb->s_inode_lru, &inode->i_lru))
 		this_cpu_dec(nr_unused);
 }
@@ -487,6 +514,7 @@ EXPORT_SYMBOL(__insert_inode_hash);
  */
 void __remove_inode_hash(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&inode_hash_lock);
 	spin_lock(&inode->i_lock);
 	hlist_del_init(&inode->i_hash);
@@ -506,6 +534,7 @@ void clear_inode(struct inode *inode)
 	spin_lock_irq(&inode->i_data.tree_lock);
 	BUG_ON(inode->i_data.nrpages);
 	BUG_ON(inode->i_data.nrexceptional);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(&inode->i_data.tree_lock);
 	BUG_ON(!list_empty(&inode->i_data.private_list));
 	BUG_ON(!(inode->i_state & I_FREEING));
@@ -565,6 +594,7 @@ static void evict(struct inode *inode)
 	spin_lock(&inode->i_lock);
 	wake_up_bit(&inode->i_state, __I_NEW);
 	BUG_ON(inode->i_state != (I_FREEING | I_CLEAR));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&inode->i_lock);
 
 	destroy_inode(inode);
@@ -582,6 +612,7 @@ static void dispose_list(struct list_head *head)
 	while (!list_empty(head)) {
 		struct inode *inode;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode = list_first_entry(head, struct inode, i_lru);
 		list_del_init(&inode->i_lru);
 
@@ -607,15 +638,19 @@ void evict_inodes(struct super_block *sb)
 again:
 	spin_lock(&sb->s_inode_list_lock);
 	list_for_each_entry_safe(inode, next, &sb->s_inodes, i_sb_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (atomic_read(&inode->i_count))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 		if (inode->i_state & (I_NEW | I_FREEING | I_WILL_FREE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&inode->i_lock);
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode->i_state |= I_FREEING;
 		inode_lru_list_del(inode);
 		spin_unlock(&inode->i_lock);
@@ -627,12 +662,14 @@ void evict_inodes(struct super_block *sb)
 		 * bit so we don't livelock.
 		 */
 		if (need_resched()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&sb->s_inode_list_lock);
 			cond_resched();
 			dispose_list(&dispose);
 			goto again;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sb->s_inode_list_lock);
 
 	dispose_list(&dispose);
@@ -656,6 +693,7 @@ int invalidate_inodes(struct super_block *sb, bool kill_dirty)
 	LIST_HEAD(dispose);
 
 	spin_lock(&sb->s_inode_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(inode, next, &sb->s_inodes, i_sb_list) {
 		spin_lock(&inode->i_lock);
 		if (inode->i_state & (I_NEW | I_FREEING | I_WILL_FREE)) {
@@ -704,6 +742,7 @@ static enum lru_status inode_lru_isolate(struct list_head *item,
 		struct list_lru_one *lru, spinlock_t *lru_lock, void *arg)
 {
 	struct list_head *freeable = arg;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode	*inode = container_of(item, struct inode, i_lru);
 
 	/*
@@ -794,8 +833,10 @@ static struct inode *find_inode(struct super_block *sb,
 			continue;
 		if (!test(inode, data))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 		if (inode->i_state & (I_FREEING|I_WILL_FREE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__wait_on_freeing_inode(inode);
 			goto repeat;
 		}
@@ -803,6 +844,7 @@ static struct inode *find_inode(struct super_block *sb,
 		spin_unlock(&inode->i_lock);
 		return inode;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -819,17 +861,22 @@ static struct inode *find_inode_fast(struct super_block *sb,
 	hlist_for_each_entry(inode, head, i_hash) {
 		if (inode->i_ino != ino)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (inode->i_sb != sb)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 		if (inode->i_state & (I_FREEING|I_WILL_FREE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__wait_on_freeing_inode(inode);
 			goto repeat;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__iget(inode);
 		spin_unlock(&inode->i_lock);
 		return inode;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -868,7 +915,9 @@ unsigned int get_next_ino(void)
 	res++;
 	/* get_next_ino should not provide a 0 inode number */
 	if (unlikely(!res))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res++;
+}
 	*p = res;
 	put_cpu_var(last_ino);
 	return res;
@@ -890,6 +939,7 @@ struct inode *new_inode_pseudo(struct super_block *sb)
 	struct inode *inode = alloc_inode(sb);
 
 	if (inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 		inode->i_state = 0;
 		spin_unlock(&inode->i_lock);
@@ -953,6 +1003,7 @@ EXPORT_SYMBOL(lockdep_annotate_inode_mutex_key);
  */
 void unlock_new_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_annotate_inode_mutex_key(inode);
 	spin_lock(&inode->i_lock);
 	WARN_ON(!(inode->i_state & I_NEW));
@@ -975,13 +1026,19 @@ EXPORT_SYMBOL(unlock_new_inode);
 void lock_two_nondirectories(struct inode *inode1, struct inode *inode2)
 {
 	if (inode1 > inode2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		swap(inode1, inode2);
+}
 
 	if (inode1 && !S_ISDIR(inode1->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_lock(inode1);
+}
 	if (inode2 && !S_ISDIR(inode2->i_mode) && inode2 != inode1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_lock_nested(inode2, I_MUTEX_NONDIR2);
 }
+}
 EXPORT_SYMBOL(lock_two_nondirectories);
 
 /**
@@ -992,10 +1049,14 @@ EXPORT_SYMBOL(lock_two_nondirectories);
 void unlock_two_nondirectories(struct inode *inode1, struct inode *inode2)
 {
 	if (inode1 && !S_ISDIR(inode1->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_unlock(inode1);
+}
 	if (inode2 && !S_ISDIR(inode2->i_mode) && inode2 != inode1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_unlock(inode2);
 }
+}
 EXPORT_SYMBOL(unlock_two_nondirectories);
 
 /**
@@ -1032,9 +1093,11 @@ struct inode *iget5_locked(struct super_block *sb, unsigned long hashval,
 	if (inode) {
 		wait_on_inode(inode);
 		if (unlikely(inode_unhashed(inode))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			iput(inode);
 			goto again;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return inode;
 	}
 
@@ -1049,6 +1112,7 @@ struct inode *iget5_locked(struct super_block *sb, unsigned long hashval,
 			if (set(inode, data))
 				goto set_failed;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_lock(&inode->i_lock);
 			inode->i_state = I_NEW;
 			hlist_add_head(&inode->i_hash, head);
@@ -1072,10 +1136,12 @@ struct inode *iget5_locked(struct super_block *sb, unsigned long hashval,
 		inode = old;
 		wait_on_inode(inode);
 		if (unlikely(inode_unhashed(inode))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			iput(inode);
 			goto again;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return inode;
 
 set_failed:
@@ -1107,11 +1173,14 @@ struct inode *iget_locked(struct super_block *sb, unsigned long ino)
 	inode = find_inode_fast(sb, head, ino);
 	spin_unlock(&inode_hash_lock);
 	if (inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wait_on_inode(inode);
 		if (unlikely(inode_unhashed(inode))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			iput(inode);
 			goto again;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return inode;
 	}
 
@@ -1147,10 +1216,12 @@ struct inode *iget_locked(struct super_block *sb, unsigned long ino)
 		inode = old;
 		wait_on_inode(inode);
 		if (unlikely(inode_unhashed(inode))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			iput(inode);
 			goto again;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return inode;
 }
 EXPORT_SYMBOL(iget_locked);
@@ -1164,6 +1235,7 @@ EXPORT_SYMBOL(iget_locked);
  */
 static int test_inode_iunique(struct super_block *sb, unsigned long ino)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hlist_head *b = inode_hashtable + hash(sb, ino);
 	struct inode *inode;
 
@@ -1206,6 +1278,7 @@ ino_t iunique(struct super_block *sb, ino_t max_reserved)
 
 	spin_lock(&iunique_lock);
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (counter <= max_reserved)
 			counter = max_reserved + 1;
 		res = counter++;
@@ -1218,11 +1291,13 @@ EXPORT_SYMBOL(iunique);
 
 struct inode *igrab(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&inode->i_lock);
 	if (!(inode->i_state & (I_FREEING|I_WILL_FREE))) {
 		__iget(inode);
 		spin_unlock(&inode->i_lock);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&inode->i_lock);
 		/*
 		 * Handle the case where s_op->clear_inode is not been
@@ -1291,6 +1366,7 @@ struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
 	if (inode) {
 		wait_on_inode(inode);
 		if (unlikely(inode_unhashed(inode))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			iput(inode);
 			goto again;
 		}
@@ -1309,6 +1385,7 @@ EXPORT_SYMBOL(ilookup5);
  */
 struct inode *ilookup(struct super_block *sb, unsigned long ino)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hlist_head *head = inode_hashtable + hash(sb, ino);
 	struct inode *inode;
 again:
@@ -1356,6 +1433,7 @@ struct inode *find_inode_nowait(struct super_block *sb,
 					     void *),
 				void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hlist_head *head = inode_hashtable + hash(sb, hashval);
 	struct inode *inode, *ret_inode = NULL;
 	int mval;
@@ -1383,6 +1461,7 @@ int insert_inode_locked(struct inode *inode)
 	ino_t ino = inode->i_ino;
 	struct hlist_head *head = inode_hashtable + hash(sb, ino);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		struct inode *old = NULL;
 		spin_lock(&inode_hash_lock);
@@ -1425,6 +1504,7 @@ int insert_inode_locked4(struct inode *inode, unsigned long hashval,
 	struct super_block *sb = inode->i_sb;
 	struct hlist_head *head = inode_hashtable + hash(sb, hashval);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		struct inode *old = NULL;
 
@@ -1493,23 +1573,29 @@ static void iput_final(struct inode *inode)
 		drop = generic_drop_inode(inode);
 
 	if (!drop && (sb->s_flags & MS_ACTIVE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_add_lru(inode);
 		spin_unlock(&inode->i_lock);
 		return;
 	}
 
 	if (!drop) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode->i_state |= I_WILL_FREE;
 		spin_unlock(&inode->i_lock);
 		write_inode_now(inode, 1);
 		spin_lock(&inode->i_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(inode->i_state & I_NEW);
 		inode->i_state &= ~I_WILL_FREE;
 	}
 
 	inode->i_state |= I_FREEING;
 	if (!list_empty(&inode->i_lru))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_lru_list_del(inode);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&inode->i_lock);
 
 	evict(inode);
@@ -1527,11 +1613,14 @@ static void iput_final(struct inode *inode)
 void iput(struct inode *inode)
 {
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	BUG_ON(inode->i_state & I_CLEAR);
 retry:
 	if (atomic_dec_and_lock(&inode->i_count, &inode->i_lock)) {
 		if (inode->i_nlink && (inode->i_state & I_DIRTY_TIME)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atomic_inc(&inode->i_count);
 			inode->i_state &= ~I_DIRTY_TIME;
 			spin_unlock(&inode->i_lock);
@@ -1559,7 +1648,9 @@ sector_t bmap(struct inode *inode, sector_t block)
 {
 	sector_t res = 0;
 	if (inode->i_mapping->a_ops->bmap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = inode->i_mapping->a_ops->bmap(inode->i_mapping, block);
+}
 	return res;
 }
 EXPORT_SYMBOL(bmap);
@@ -1576,7 +1667,9 @@ static void update_ovl_inode_times(struct dentry *dentry, struct inode *inode,
 	 * Nothing to do if in rcu or if non-overlayfs
 	 */
 	if (rcu || likely(!(dentry->d_flags & DCACHE_OP_REAL)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	upperdentry = d_real(dentry, NULL, 0, D_REAL_UPPER);
 
@@ -1585,6 +1678,7 @@ static void update_ovl_inode_times(struct dentry *dentry, struct inode *inode,
 	 * stale mtime/ctime.
 	 */
 	if (upperdentry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct inode *realinode = d_inode(upperdentry);
 
 		if ((!timespec_equal(&inode->i_mtime, &realinode->i_mtime) ||
@@ -1605,26 +1699,34 @@ static int relatime_need_update(const struct path *path, struct inode *inode,
 {
 
 	if (!(path->mnt->mnt_flags & MNT_RELATIME))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	update_ovl_inode_times(path->dentry, inode, rcu);
 	/*
 	 * Is mtime younger than atime? If yes, update atime:
 	 */
 	if (timespec_compare(&inode->i_mtime, &inode->i_atime) >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	/*
 	 * Is ctime younger than atime? If yes, update atime:
 	 */
 	if (timespec_compare(&inode->i_ctime, &inode->i_atime) >= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/*
 	 * Is the previous atime value older than a day? If yes,
 	 * update atime:
 	 */
 	if ((long)(now.tv_sec - inode->i_atime.tv_sec) >= 24*60*60)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	/*
 	 * Good, we can skip the atime update:
 	 */
@@ -1638,14 +1740,18 @@ int generic_update_time(struct inode *inode, struct timespec *time, int flags)
 	if (flags & S_ATIME)
 		inode->i_atime = *time;
 	if (flags & S_VERSION)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_inc_iversion(inode);
+}
 	if (flags & S_CTIME)
 		inode->i_ctime = *time;
 	if (flags & S_MTIME)
 		inode->i_mtime = *time;
 
 	if (!(inode->i_sb->s_flags & MS_LAZYTIME) || (flags & S_VERSION))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iflags |= I_DIRTY_SYNC;
+}
 	__mark_inode_dirty(inode, iflags);
 	return 0;
 }
@@ -1681,31 +1787,47 @@ bool __atime_needs_update(const struct path *path, struct inode *inode,
 	struct timespec now;
 
 	if (inode->i_flags & S_NOATIME)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/* Atime updates will likely cause i_uid and i_gid to be written
 	 * back improprely if their true value is unknown to the vfs.
 	 */
 	if (HAS_UNMAPPED_ID(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	if (IS_NOATIME(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if ((inode->i_sb->s_flags & MS_NODIRATIME) && S_ISDIR(inode->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	if (mnt->mnt_flags & MNT_NOATIME)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	if ((mnt->mnt_flags & MNT_NODIRATIME) && S_ISDIR(inode->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	now = current_time(inode);
 
 	if (!relatime_need_update(path, inode, now, rcu))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	if (timespec_equal(&inode->i_atime, &now))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	return true;
 }
@@ -1720,7 +1842,9 @@ void touch_atime(const struct path *path)
 		return;
 
 	if (!sb_start_write_trylock(inode->i_sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (__mnt_want_write(mnt) != 0)
 		goto skip_update;
@@ -1754,7 +1878,9 @@ int should_remove_suid(struct dentry *dentry)
 
 	/* suid always must be killed */
 	if (unlikely(mode & S_ISUID))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kill = ATTR_KILL_SUID;
+}
 
 	/*
 	 * sgid without any exec bits is just a mandatory locking mark; leave
@@ -1764,8 +1890,11 @@ int should_remove_suid(struct dentry *dentry)
 		kill |= ATTR_KILL_SGID;
 
 	if (unlikely(kill && !capable(CAP_FSETID) && S_ISREG(mode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return kill;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(should_remove_suid);
@@ -1777,19 +1906,27 @@ EXPORT_SYMBOL(should_remove_suid);
  */
 int dentry_needs_remove_privs(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	int mask = 0;
 	int ret;
 
 	if (IS_NOSEC(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	mask = should_remove_suid(dentry);
 	ret = security_inode_need_killpriv(dentry);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mask |= ATTR_KILL_PRIV;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mask;
 }
 
@@ -1818,16 +1955,23 @@ int file_remove_privs(struct file *file)
 
 	/* Fast path for nothing security related */
 	if (IS_NOSEC(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	kill = dentry_needs_remove_privs(dentry);
 	if (kill < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return kill;
+}
 	if (kill)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = __remove_privs(dentry, kill);
+}
 	if (!error)
 		inode_has_no_xattr(inode);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 EXPORT_SYMBOL(file_remove_privs);
@@ -1847,6 +1991,7 @@ EXPORT_SYMBOL(file_remove_privs);
 
 int file_update_time(struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	struct timespec now;
 	int sync_it = 0;
@@ -1854,24 +1999,34 @@ int file_update_time(struct file *file)
 
 	/* First try to exhaust all avenues to not sync */
 	if (IS_NOCMTIME(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	now = current_time(inode);
 	if (!timespec_equal(&inode->i_mtime, &now))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sync_it = S_MTIME;
+}
 
 	if (!timespec_equal(&inode->i_ctime, &now))
 		sync_it |= S_CTIME;
 
 	if (IS_I_VERSION(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sync_it |= S_VERSION;
+}
 
 	if (!sync_it)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Finally allowed to write? Takes lock. */
 	if (__mnt_want_write_file(file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = update_time(inode, &now, sync_it);
 	__mnt_drop_write_file(file);
@@ -1882,6 +2037,7 @@ EXPORT_SYMBOL(file_update_time);
 
 int inode_needs_sync(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_SYNC(inode))
 		return 1;
 	if (S_ISDIR(inode->i_mode) && IS_DIRSYNC(inode))
@@ -1917,6 +2073,7 @@ static void __wait_on_freeing_inode(struct inode *inode)
 static __initdata unsigned long ihash_entries;
 static int __init set_ihash_entries(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!str)
 		return 0;
 	ihash_entries = simple_strtoul(str, &str, 0);
@@ -1933,7 +2090,9 @@ void __init inode_init_early(void)
 	 * hash allocation until vmalloc space is available.
 	 */
 	if (hashdist)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	inode_hashtable =
 		alloc_large_system_hash("Inode-cache",
@@ -1959,7 +2118,9 @@ void __init inode_init(void)
 
 	/* Hash may have been set up in inode_init_early */
 	if (!hashdist)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	inode_hashtable =
 		alloc_large_system_hash("Inode-cache",
@@ -2025,11 +2186,16 @@ bool inode_owner_or_capable(const struct inode *inode)
 	struct user_namespace *ns;
 
 	if (uid_eq(current_fsuid(), inode->i_uid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	ns = current_user_ns();
 	if (kuid_has_mapping(ns, inode->i_uid) && ns_capable(ns, CAP_FOWNER))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 EXPORT_SYMBOL(inode_owner_or_capable);
@@ -2039,6 +2205,7 @@ EXPORT_SYMBOL(inode_owner_or_capable);
  */
 static void __inode_dio_wait(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	wait_queue_head_t *wq = bit_waitqueue(&inode->i_state, __I_DIO_WAKEUP);
 	DEFINE_WAIT_BIT(q, &inode->i_state, __I_DIO_WAKEUP);
 
@@ -2062,6 +2229,7 @@ static void __inode_dio_wait(struct inode *inode)
  */
 void inode_dio_wait(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atomic_read(&inode->i_dio_count))
 		__inode_dio_wait(inode);
 }
@@ -2088,6 +2256,7 @@ void inode_set_flags(struct inode *inode, unsigned int flags,
 {
 	unsigned int old_flags, new_flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(flags & ~mask);
 	do {
 		old_flags = ACCESS_ONCE(inode->i_flags);
@@ -2099,6 +2268,7 @@ EXPORT_SYMBOL(inode_set_flags);
 
 void inode_nohighmem(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mapping_set_gfp_mask(inode->i_mapping, GFP_USER);
 }
 EXPORT_SYMBOL(inode_nohighmem);
@@ -2118,6 +2288,7 @@ struct timespec current_time(struct inode *inode)
 	struct timespec now = current_kernel_time();
 
 	if (unlikely(!inode->i_sb)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN(1, "current_time() called with uninitialized super_block in the inode");
 		return now;
 	}
diff --git a/fs/internal.h b/fs/internal.h
index 48cee21..d77cb4c 100644
--- a/fs/internal.h
+++ b/fs/internal.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* fs/ internal definitions
  *
  * Copyright (C) 2006 Red Hat, Inc. All Rights Reserved.
diff --git a/fs/ioctl.c b/fs/ioctl.c
index 5ace7ef..6958aee 100644
--- a/fs/ioctl.c
+++ b/fs/ioctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/ioctl.c
@@ -45,7 +47,9 @@ long vfs_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 
 	error = filp->f_op->unlocked_ioctl(filp, cmd, arg);
 	if (error == -ENOIOCTLCMD)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOTTY;
+}
  out:
 	return error;
 }
@@ -57,7 +61,9 @@ static int ioctl_fibmap(struct file *filp, int __user *p)
 
 	/* do we support this mess? */
 	if (!mapping->a_ops->bmap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (!capable(CAP_SYS_RAWIO))
 		return -EPERM;
 	res = get_user(block, p);
@@ -93,6 +99,7 @@ int fiemap_fill_next_extent(struct fiemap_extent_info *fieinfo, u64 logical,
 
 	/* only count the extents */
 	if (fieinfo->fi_extents_max == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fieinfo->fi_extents_mapped++;
 		return (flags & FIEMAP_EXTENT_LAST) ? 1 : 0;
 	}
@@ -144,6 +151,7 @@ int fiemap_check_flags(struct fiemap_extent_info *fieinfo, u32 fs_flags)
 
 	incompat_flags = fieinfo->fi_flags & ~(FIEMAP_FLAGS_COMPAT & fs_flags);
 	if (incompat_flags) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fieinfo->fi_flags = incompat_flags;
 		return -EBADR;
 	}
@@ -159,7 +167,9 @@ static int fiemap_check_ranges(struct super_block *sb,
 	*new_len = len;
 
 	if (len == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (start > maxbytes)
 		return -EFBIG;
@@ -184,7 +194,9 @@ static int ioctl_fiemap(struct file *filp, unsigned long arg)
 	int error;
 
 	if (!inode->i_op->fiemap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	if (copy_from_user(&fiemap, ufiemap, sizeof(fiemap)))
 		return -EFAULT;
@@ -221,6 +233,7 @@ static int ioctl_fiemap(struct file *filp, unsigned long arg)
 static long ioctl_file_clone(struct file *dst_file, unsigned long srcfd,
 			     u64 off, u64 olen, u64 destoff)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fd src_file = fdget(srcfd);
 	int ret;
 
@@ -240,7 +253,9 @@ static long ioctl_file_clone_range(struct file *file, void __user *argp)
 	struct file_clone_range args;
 
 	if (copy_from_user(&args, argp, sizeof(args)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	return ioctl_file_clone(file, args.src_fd, args.src_offset,
 				args.src_length, args.dest_offset);
 }
@@ -249,11 +264,13 @@ static long ioctl_file_clone_range(struct file *file, void __user *argp)
 
 static inline sector_t logical_to_blk(struct inode *inode, loff_t offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (offset >> inode->i_blkbits);
 }
 
 static inline loff_t blk_to_logical(struct inode *inode, sector_t blk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (blk << inode->i_blkbits);
 }
 
@@ -291,7 +308,9 @@ int __generic_block_fiemap(struct inode *inode,
 
 	ret = fiemap_check_flags(fieinfo, FIEMAP_FLAG_SYNC);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	/*
 	 * Either the i_mutex or other appropriate locking needs to be held
@@ -459,6 +478,7 @@ EXPORT_SYMBOL(generic_block_fiemap);
  */
 int ioctl_preallocate(struct file *filp, void __user *argp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(filp);
 	struct space_resv sr;
 
@@ -484,6 +504,7 @@ int ioctl_preallocate(struct file *filp, void __user *argp)
 static int file_ioctl(struct file *filp, unsigned int cmd,
 		unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(filp);
 	int __user *p = (int __user *)arg;
 
@@ -507,7 +528,10 @@ static int ioctl_fionbio(struct file *filp, int __user *argp)
 
 	error = get_user(on, argp);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flag = O_NONBLOCK;
 #ifdef __sparc__
 	/* SunOS compatibility item. */
@@ -519,6 +543,7 @@ static int ioctl_fionbio(struct file *filp, int __user *argp)
 		filp->f_flags |= flag;
 	else
 		filp->f_flags &= ~flag;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&filp->f_lock);
 	return error;
 }
@@ -531,7 +556,9 @@ static int ioctl_fioasync(unsigned int fd, struct file *filp,
 
 	error = get_user(on, argp);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	flag = on ? FASYNC : 0;
 
 	/* Did FASYNC state change ? */
@@ -547,6 +574,7 @@ static int ioctl_fioasync(unsigned int fd, struct file *filp,
 
 static int ioctl_fsfreeze(struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct super_block *sb = file_inode(filp)->i_sb;
 
 	if (!capable(CAP_SYS_ADMIN))
@@ -564,6 +592,7 @@ static int ioctl_fsfreeze(struct file *filp)
 
 static int ioctl_fsthaw(struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct super_block *sb = file_inode(filp)->i_sb;
 
 	if (!capable(CAP_SYS_ADMIN))
@@ -584,6 +613,7 @@ static int ioctl_file_dedupe_range(struct file *file, void __user *arg)
 	u16 count;
 
 	if (get_user(count, &argp->dest_count)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EFAULT;
 		goto out;
 	}
@@ -649,11 +679,15 @@ int do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd,
 	case FIOQSIZE:
 		if (S_ISDIR(inode->i_mode) || S_ISREG(inode->i_mode) ||
 		    S_ISLNK(inode->i_mode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			loff_t res = inode_get_bytes(inode);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = copy_to_user(argp, &res, sizeof(res)) ?
 					-EFAULT : 0;
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -ENOTTY;
+}
 		break;
 
 	case FIFREEZE:
@@ -686,6 +720,7 @@ int do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd,
 			error = vfs_ioctl(filp, cmd, arg);
 		break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -695,7 +730,9 @@ SYSCALL_DEFINE3(ioctl, unsigned int, fd, unsigned int, cmd, unsigned long, arg)
 	struct fd f = fdget(fd);
 
 	if (!f.file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 	error = security_file_ioctl(f.file, cmd, arg);
 	if (!error)
 		error = do_vfs_ioctl(f.file, fd, cmd, arg);
diff --git a/fs/isofs/compress.c b/fs/isofs/compress.c
index 9bb2fe3..93b3898 100644
--- a/fs/isofs/compress.c
+++ b/fs/isofs/compress.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* -*- linux-c -*- ------------------------------------------------------- *
  *   
  *   Copyright 2001 H. Peter Anvin - All Rights Reserved
@@ -46,6 +48,7 @@ static loff_t zisofs_uncompress_block(struct inode *inode, loff_t block_start,
 				      struct page **pages, unsigned poffset,
 				      int *errp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int zisofs_block_shift = ISOFS_I(inode)->i_format_parm[1];
 	unsigned int bufsize = ISOFS_BUFFER_SIZE(inode);
 	unsigned int bufshift = ISOFS_BUFFER_BITS(inode);
@@ -213,6 +216,7 @@ static int zisofs_fill_pages(struct inode *inode, int full_page, int pcount,
 	int err;
 	loff_t ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!pages[full_page]);
 
 	/*
@@ -297,6 +301,7 @@ static int zisofs_fill_pages(struct inode *inode, int full_page, int pcount,
  */
 static int zisofs_readpage(struct file *file, struct page *page)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	struct address_space *mapping = inode->i_mapping;
 	int err;
@@ -369,12 +374,15 @@ int __init zisofs_init(void)
 {
 	zisofs_zlib_workspace = vmalloc(zlib_inflate_workspacesize());
 	if ( !zisofs_zlib_workspace )
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return 0;
 }
 
 void zisofs_cleanup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vfree(zisofs_zlib_workspace);
 }
diff --git a/fs/isofs/inode.c b/fs/isofs/inode.c
index 447a24d..e38a3e3 100644
--- a/fs/isofs/inode.c
+++ b/fs/isofs/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/isofs/inode.c
  *
@@ -45,6 +47,7 @@ static int isofs_dentry_cmp_ms(const struct dentry *dentry,
 
 static void isofs_put_super(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct isofs_sb_info *sbi = ISOFS_SB(sb);
 
 #ifdef CONFIG_JOLIET
@@ -67,18 +70,22 @@ static struct inode *isofs_alloc_inode(struct super_block *sb)
 	struct iso_inode_info *ei;
 	ei = kmem_cache_alloc(isofs_inode_cachep, GFP_KERNEL);
 	if (!ei)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	return &ei->vfs_inode;
 }
 
 static void isofs_i_callback(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = container_of(head, struct inode, i_rcu);
 	kmem_cache_free(isofs_inode_cachep, ISOFS_I(inode));
 }
 
 static void isofs_destroy_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_rcu(&inode->i_rcu, isofs_i_callback);
 }
 
@@ -97,7 +104,9 @@ static int __init init_inodecache(void)
 					SLAB_MEM_SPREAD|SLAB_ACCOUNT),
 					init_once);
 	if (!isofs_inode_cachep)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
@@ -113,6 +122,7 @@ static void destroy_inodecache(void)
 
 static int isofs_remount(struct super_block *sb, int *flags, char *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sync_filesystem(sb);
 	if (!(*flags & MS_RDONLY))
 		return -EROFS;
@@ -184,6 +194,7 @@ isofs_hashi_common(const struct dentry *dentry, struct qstr *qstr, int ms)
 	len = qstr->len;
 	name = qstr->name;
 	if (ms) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (len && name[len-1] == '.')
 			len--;
 	}
@@ -211,6 +222,7 @@ static int isofs_dentry_cmp_common(
 	alen = name->len;
 	blen = len;
 	if (ms) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (alen && name->name[alen-1] == '.')
 			alen--;
 		while (blen && str[blen-1] == '.')
@@ -231,6 +243,7 @@ static int isofs_dentry_cmp_common(
 static int
 isofs_hashi(const struct dentry *dentry, struct qstr *qstr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return isofs_hashi_common(dentry, qstr, 0);
 }
 
@@ -238,6 +251,7 @@ static int
 isofs_dentry_cmpi(const struct dentry *dentry,
 		unsigned int len, const char *str, const struct qstr *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return isofs_dentry_cmp_common(len, str, name, 0, 1);
 }
 
@@ -254,6 +268,7 @@ isofs_hash_common(const struct dentry *dentry, struct qstr *qstr, int ms)
 	len = qstr->len;
 	name = qstr->name;
 	if (ms) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (len && name[len-1] == '.')
 			len--;
 	}
@@ -266,12 +281,14 @@ isofs_hash_common(const struct dentry *dentry, struct qstr *qstr, int ms)
 static int
 isofs_hash_ms(const struct dentry *dentry, struct qstr *qstr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return isofs_hash_common(dentry, qstr, 1);
 }
 
 static int
 isofs_hashi_ms(const struct dentry *dentry, struct qstr *qstr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return isofs_hashi_common(dentry, qstr, 1);
 }
 
@@ -279,6 +296,7 @@ static int
 isofs_dentry_cmp_ms(const struct dentry *dentry,
 		unsigned int len, const char *str, const struct qstr *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return isofs_dentry_cmp_common(len, str, name, 1, 0);
 }
 
@@ -286,6 +304,7 @@ static int
 isofs_dentry_cmpi_ms(const struct dentry *dentry,
 		unsigned int len, const char *str, const struct qstr *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return isofs_dentry_cmp_common(len, str, name, 1, 1);
 }
 #endif
@@ -361,7 +380,9 @@ static int parse_options(char *options, struct iso9660_options *popt)
 	popt->session=-1;
 	popt->sbsector=-1;
 	if (!options)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	while ((p = strsep(&options, ",")) != NULL) {
 		int token;
@@ -483,6 +504,7 @@ static int parse_options(char *options, struct iso9660_options *popt)
  */
 static int isofs_show_options(struct seq_file *m, struct dentry *root)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct isofs_sb_info *sbi = ISOFS_SB(root->d_sb);
 
 	if (!sbi->s_rock)		seq_puts(m, ",norock");
@@ -555,6 +577,7 @@ static unsigned int isofs_get_last_session(struct super_block *sb, s32 session)
 		Te.cdte_format=CDROM_LBA;
 		i = ioctl_by_bdev(bdev, CDROMREADTOCENTRY, (unsigned long) &Te);
 		if (!i) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_DEBUG "ISOFS: Session %d start %d type %d\n",
 				session, Te.cdte_addr.lba,
 				Te.cdte_ctrl&CDROM_DATA_TRACK);
@@ -597,7 +620,9 @@ static bool rootdir_empty(struct super_block *sb, unsigned long block)
 
 	bh = sb_bread(sb, block);
 	if (!bh)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 	while (files < 3) {
 		de = (struct iso_directory_record *) (bh->b_data + offset);
 		de_len = *(unsigned char *) de;
@@ -635,7 +660,9 @@ static int isofs_fill_super(struct super_block *s, void *data, int silent)
 
 	sbi = kzalloc(sizeof(*sbi), GFP_KERNEL);
 	if (!sbi)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	s->s_fs_info = sbi;
 
 	if (!parse_options((char *)data, &opt))
@@ -1055,6 +1082,7 @@ int isofs_get_blocks(struct inode *inode, sector_t iblock,
 	error = -EIO;
 	rv = 0;
 	if (iblock != b_off) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_DEBUG "%s: block number too large\n", __func__);
 		goto abort;
 	}
@@ -1139,6 +1167,7 @@ static int isofs_get_block(struct inode *inode, sector_t iblock,
 	int ret;
 
 	if (create) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_DEBUG "%s: Kernel tries to allocate a block\n", __func__);
 		return -EROFS;
 	}
@@ -1156,12 +1185,15 @@ static int isofs_bmap(struct inode *inode, sector_t block)
 	dummy.b_blocknr = -1000;
 	error = isofs_get_block(inode, block, &dummy, 0);
 	if (!error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return dummy.b_blocknr;
+}
 	return 0;
 }
 
 struct buffer_head *isofs_bread(struct inode *inode, sector_t block)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sector_t blknr = isofs_bmap(inode, block);
 	if (!blknr)
 		return NULL;
@@ -1170,17 +1202,20 @@ struct buffer_head *isofs_bread(struct inode *inode, sector_t block)
 
 static int isofs_readpage(struct file *file, struct page *page)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mpage_readpage(page, isofs_get_block);
 }
 
 static int isofs_readpages(struct file *file, struct address_space *mapping,
 			struct list_head *pages, unsigned nr_pages)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mpage_readpages(mapping, pages, nr_pages, isofs_get_block);
 }
 
 static sector_t _isofs_bmap(struct address_space *mapping, sector_t block)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return generic_block_bmap(mapping,block,isofs_get_block);
 }
 
@@ -1217,6 +1252,7 @@ static int isofs_read_level3_size(struct inode *inode)
 		unsigned int de_len;
 
 		if (!bh) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			bh = sb_bread(inode->i_sb, block);
 			if (!bh)
 				goto out_noread;
@@ -1313,6 +1349,7 @@ static int isofs_read_inode(struct inode *inode, int relocated)
 	if (!bh)
 		goto out_badread;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	offset = ei->i_iget5_offset;
 
 	de = (struct iso_directory_record *) (bh->b_data + offset);
@@ -1496,6 +1533,7 @@ struct isofs_iget5_callback_data {
 
 static int isofs_iget5_test(struct inode *ino, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct iso_inode_info *i = ISOFS_I(ino);
 	struct isofs_iget5_callback_data *d =
 		(struct isofs_iget5_callback_data*)data;
@@ -1505,6 +1543,7 @@ static int isofs_iget5_test(struct inode *ino, void *data)
 
 static int isofs_iget5_set(struct inode *ino, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct iso_inode_info *i = ISOFS_I(ino);
 	struct isofs_iget5_callback_data *d =
 		(struct isofs_iget5_callback_data*)data;
@@ -1528,7 +1567,9 @@ struct inode *__isofs_iget(struct super_block *sb,
 	long ret;
 
 	if (offset >= 1ul << sb->s_blocksize_bits)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	data.block = block;
 	data.offset = offset;
@@ -1557,6 +1598,7 @@ struct inode *__isofs_iget(struct super_block *sb,
 static struct dentry *isofs_mount(struct file_system_type *fs_type,
 	int flags, const char *dev_name, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mount_bdev(fs_type, flags, dev_name, data, isofs_fill_super);
 }
 
@@ -1583,6 +1625,7 @@ static int __init init_iso9660_fs(void)
 	err = register_filesystem(&iso9660_fs_type);
 	if (err)
 		goto out2;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 out2:
 #ifdef CONFIG_ZISOFS
@@ -1596,6 +1639,7 @@ static int __init init_iso9660_fs(void)
 
 static void __exit exit_iso9660_fs(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
         unregister_filesystem(&iso9660_fs_type);
 #ifdef CONFIG_ZISOFS
 	zisofs_cleanup();
diff --git a/fs/jbd2/journal.c b/fs/jbd2/journal.c
index 7d5ef3b..d4fe754 100644
--- a/fs/jbd2/journal.c
+++ b/fs/jbd2/journal.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/fs/jbd2/journal.c
  *
@@ -126,6 +128,7 @@ EXPORT_SYMBOL(__jbd2_debug);
 /* Checksumming functions */
 static int jbd2_verify_csum_type(journal_t *j, journal_superblock_t *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!jbd2_journal_has_csum_v2or3_feature(j))
 		return 1;
 
@@ -142,11 +145,13 @@ static __be32 jbd2_superblock_csum(journal_t *j, journal_superblock_t *sb)
 	csum = jbd2_chksum(j, ~0, (char *)sb, sizeof(journal_superblock_t));
 	sb->s_checksum = old_csum;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cpu_to_be32(csum);
 }
 
 static int jbd2_superblock_csum_verify(journal_t *j, journal_superblock_t *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!jbd2_journal_has_csum_v2or3(j))
 		return 1;
 
@@ -155,6 +160,7 @@ static int jbd2_superblock_csum_verify(journal_t *j, journal_superblock_t *sb)
 
 static void jbd2_superblock_csum_set(journal_t *j, journal_superblock_t *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!jbd2_journal_has_csum_v2or3(j))
 		return;
 
@@ -297,6 +303,7 @@ static int jbd2_journal_start_thread(journal_t *journal)
 {
 	struct task_struct *t;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	t = kthread_run(kjournald2, journal, "jbd2/%s",
 			journal->j_devname);
 	if (IS_ERR(t))
@@ -308,6 +315,7 @@ static int jbd2_journal_start_thread(journal_t *journal)
 
 static void journal_kill_thread(journal_t *journal)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_lock(&journal->j_state_lock);
 	journal->j_flags |= JBD2_UNMOUNT;
 
@@ -562,6 +570,7 @@ static int __jbd2_journal_force_commit(journal_t *journal)
 	int need_to_start = 0, ret = 0;
 
 	read_lock(&journal->j_state_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (journal->j_running_transaction && !current->journal_info) {
 		transaction = journal->j_running_transaction;
 		if (!tid_geq(journal->j_commit_request, transaction->t_tid))
@@ -612,6 +621,7 @@ int jbd2_journal_force_commit(journal_t *journal)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	J_ASSERT(!current->journal_info);
 	ret = __jbd2_journal_force_commit(journal);
 	if (ret > 0)
@@ -636,7 +646,9 @@ int jbd2_journal_start_commit(journal_t *journal, tid_t *ptid)
 		/* There's a running transaction and we've just made sure
 		 * it's commit has been scheduled. */
 		if (ptid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*ptid = tid;
+}
 		ret = 1;
 	} else if (journal->j_committing_transaction) {
 		/*
@@ -663,7 +675,9 @@ int jbd2_trans_will_send_data_barrier(journal_t *journal, tid_t tid)
 	transaction_t *commit_trans;
 
 	if (!(journal->j_flags & JBD2_BARRIER))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	read_lock(&journal->j_state_lock);
 	/* Transaction already committed? */
 	if (tid_geq(journal->j_commit_sequence, tid))
@@ -778,6 +792,7 @@ int jbd2_journal_next_log_block(journal_t *journal, unsigned long long *retp)
 	unsigned long blocknr;
 
 	write_lock(&journal->j_state_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	J_ASSERT(journal->j_free > 1);
 
 	blocknr = journal->j_head;
@@ -803,6 +818,7 @@ int jbd2_journal_bmap(journal_t *journal, unsigned long blocknr,
 	unsigned long long ret;
 
 	if (journal->j_inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = bmap(journal->j_inode, blocknr);
 		if (ret)
 			*retp = ret;
@@ -841,7 +857,9 @@ jbd2_journal_get_descriptor_buffer(transaction_t *transaction, int type)
 	err = jbd2_journal_next_log_block(journal, &blocknr);
 
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	bh = __getblk(journal->j_dev, blocknr, journal->j_blocksize);
 	if (!bh)
@@ -864,7 +882,9 @@ void jbd2_descriptor_block_csum_set(journal_t *j, struct buffer_head *bh)
 	__u32 csum;
 
 	if (!jbd2_journal_has_csum_v2or3(j))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	tail = (struct jbd2_journal_block_tail *)(bh->b_data + j->j_blocksize -
 			sizeof(struct jbd2_journal_block_tail));
@@ -893,6 +913,7 @@ int jbd2_journal_get_log_tail(journal_t *journal, tid_t *tid,
 	spin_lock(&journal->j_list_lock);
 	transaction = journal->j_checkpoint_transactions;
 	if (transaction) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*tid = transaction->t_tid;
 		*block = transaction->t_log_start;
 	} else if ((transaction = journal->j_committing_transaction) != NULL) {
@@ -927,6 +948,7 @@ int __jbd2_update_log_tail(journal_t *journal, tid_t tid, unsigned long block)
 	unsigned long freed;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!mutex_is_locked(&journal->j_checkpoint_mutex));
 
 	/*
@@ -967,6 +989,7 @@ int __jbd2_update_log_tail(journal_t *journal, tid_t tid, unsigned long block)
  */
 void jbd2_update_log_tail(journal_t *journal, tid_t tid, unsigned long block)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock_io(&journal->j_checkpoint_mutex);
 	if (tid_gt(tid, journal->j_tail_sequence))
 		__jbd2_update_log_tail(journal, tid, block);
@@ -982,11 +1005,13 @@ struct jbd2_stats_proc_session {
 
 static void *jbd2_seq_info_start(struct seq_file *seq, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return *pos ? NULL : SEQ_START_TOKEN;
 }
 
 static void *jbd2_seq_info_next(struct seq_file *seq, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -995,7 +1020,9 @@ static int jbd2_seq_info_show(struct seq_file *seq, void *v)
 	struct jbd2_stats_proc_session *s = seq->private;
 
 	if (v != SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	seq_printf(seq, "%lu transactions (%lu requested), "
 		   "each up to %u blocks\n",
 		   s->stats->ts_tid, s->stats->ts_requested,
@@ -1040,6 +1067,7 @@ static const struct seq_operations jbd2_seq_info_ops = {
 
 static int jbd2_seq_info_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	journal_t *journal = PDE_DATA(inode);
 	struct jbd2_stats_proc_session *s;
 	int rc, size;
@@ -1091,6 +1119,7 @@ static struct proc_dir_entry *proc_jbd2_stats;
 
 static void jbd2_stats_proc_init(journal_t *journal)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	journal->j_proc_entry = proc_mkdir(journal->j_devname, proc_jbd2_stats);
 	if (journal->j_proc_entry) {
 		proc_create_data("info", S_IRUGO, journal->j_proc_entry,
@@ -1100,6 +1129,7 @@ static void jbd2_stats_proc_init(journal_t *journal)
 
 static void jbd2_stats_proc_exit(journal_t *journal)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	remove_proc_entry("info", journal->j_proc_entry);
 	remove_proc_entry(journal->j_devname, proc_jbd2_stats);
 }
@@ -1125,7 +1155,9 @@ static journal_t *journal_init_common(struct block_device *bdev,
 
 	journal = kzalloc(sizeof(*journal), GFP_KERNEL);
 	if (!journal)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	init_waitqueue_head(&journal->j_wait_transaction_locked);
 	init_waitqueue_head(&journal->j_wait_done_commit);
@@ -1218,7 +1250,9 @@ journal_t *jbd2_journal_init_dev(struct block_device *bdev,
 
 	journal = journal_init_common(bdev, fs_dev, start, len, blocksize);
 	if (!journal)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	bdevname(journal->j_dev, journal->j_devname);
 	strreplace(journal->j_devname, '/', '!');
@@ -1243,6 +1277,7 @@ journal_t *jbd2_journal_init_inode(struct inode *inode)
 
 	blocknr = bmap(inode, 0);
 	if (!blocknr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("%s: Cannot locate journal superblock\n",
 			__func__);
 		return NULL;
@@ -1291,6 +1326,7 @@ static int journal_reset(journal_t *journal)
 	journal_superblock_t *sb = journal->j_superblock;
 	unsigned long long first, last;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	first = be32_to_cpu(sb->s_first);
 	last = be32_to_cpu(sb->s_maxlen);
 	if (first + JBD2_MIN_JOURNAL_BLOCKS > last + 1) {
@@ -1351,7 +1387,9 @@ static int jbd2_write_superblock(journal_t *journal, int write_flags)
 
 	trace_jbd2_write_superblock(journal, write_flags);
 	if (!(journal->j_flags & JBD2_BARRIER))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_flags &= ~(REQ_FUA | REQ_PREFLUSH);
+}
 	lock_buffer(bh);
 	if (buffer_write_io_error(bh)) {
 		/*
@@ -1404,6 +1442,7 @@ int jbd2_journal_update_sb_log_tail(journal_t *journal, tid_t tail_tid,
 	journal_superblock_t *sb = journal->j_superblock;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!mutex_is_locked(&journal->j_checkpoint_mutex));
 	jbd_debug(1, "JBD2: updating superblock (start %lu, seq %u)\n",
 		  tail_block, tail_tid);
@@ -1437,6 +1476,7 @@ static void jbd2_mark_journal_empty(journal_t *journal, int write_op)
 {
 	journal_superblock_t *sb = journal->j_superblock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!mutex_is_locked(&journal->j_checkpoint_mutex));
 	read_lock(&journal->j_state_lock);
 	/* Is it already empty? */
@@ -1474,6 +1514,7 @@ void jbd2_journal_update_sb_errno(journal_t *journal)
 	read_lock(&journal->j_state_lock);
 	jbd_debug(1, "JBD2: updating superblock error (errno %d)\n",
 		  journal->j_errno);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sb->s_errno    = cpu_to_be32(journal->j_errno);
 	read_unlock(&journal->j_state_lock);
 
@@ -1493,6 +1534,7 @@ static int journal_get_superblock(journal_t *journal)
 
 	bh = journal->j_sb_buffer;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	J_ASSERT(bh != NULL);
 	if (!buffer_uptodate(bh)) {
 		ll_rw_block(REQ_OP_READ, 0, 1, &bh);
@@ -1609,7 +1651,9 @@ static int load_superblock(journal_t *journal)
 
 	err = journal_get_superblock(journal);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	sb = journal->j_superblock;
 
@@ -1638,7 +1682,9 @@ int jbd2_journal_load(journal_t *journal)
 
 	err = load_superblock(journal);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	sb = journal->j_superblock;
 	/* If this is a V2 superblock, then we have to check the
@@ -1706,7 +1752,9 @@ int jbd2_journal_destroy(journal_t *journal)
 
 	/* Force a final log commit */
 	if (journal->j_running_transaction)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		jbd2_journal_commit_transaction(journal);
+}
 
 	/* Force any old transactions to disk */
 
@@ -1781,6 +1829,7 @@ int jbd2_journal_check_used_features (journal_t *journal, unsigned long compat,
 {
 	journal_superblock_t *sb;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!compat && !ro && !incompat)
 		return 1;
 	/* Load journal superblock if it is not loaded yet. */
@@ -1814,6 +1863,7 @@ int jbd2_journal_check_used_features (journal_t *journal, unsigned long compat,
 int jbd2_journal_check_available_features (journal_t *journal, unsigned long compat,
 				      unsigned long ro, unsigned long incompat)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!compat && !ro && !incompat)
 		return 1;
 
@@ -1854,7 +1904,9 @@ int jbd2_journal_set_features (journal_t *journal, unsigned long compat,
 	journal_superblock_t *sb;
 
 	if (jbd2_journal_check_used_features(journal, compat, ro, incompat))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	if (!jbd2_journal_check_available_features(journal, compat, ro, incompat))
 		return 0;
@@ -1935,6 +1987,7 @@ void jbd2_journal_clear_features(journal_t *journal, unsigned long compat,
 
 	sb = journal->j_superblock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sb->s_feature_compat    &= ~cpu_to_be32(compat);
 	sb->s_feature_ro_compat &= ~cpu_to_be32(ro);
 	sb->s_feature_incompat  &= ~cpu_to_be32(incompat);
@@ -1959,6 +2012,7 @@ int jbd2_journal_flush(journal_t *journal)
 
 	/* Force everything buffered to the log... */
 	if (journal->j_running_transaction) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		transaction = journal->j_running_transaction;
 		__jbd2_log_start_commit(journal, transaction->t_tid);
 	} else if (journal->j_committing_transaction)
@@ -2033,6 +2087,7 @@ int jbd2_journal_wipe(journal_t *journal, int write)
 {
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	J_ASSERT (!(journal->j_flags & JBD2_LOADED));
 
 	err = load_superblock(journal);
@@ -2075,7 +2130,9 @@ void __jbd2_journal_abort_hard(journal_t *journal)
 	transaction_t *transaction;
 
 	if (journal->j_flags & JBD2_ABORT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	printk(KERN_ERR "Aborting journal on device %s.\n",
 	       journal->j_devname);
@@ -2092,6 +2149,7 @@ void __jbd2_journal_abort_hard(journal_t *journal)
  * but don't do any other IO. */
 static void __journal_abort_soft (journal_t *journal, int errno)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (journal->j_flags & JBD2_ABORT)
 		return;
 
@@ -2156,6 +2214,7 @@ static void __journal_abort_soft (journal_t *journal, int errno)
 
 void jbd2_journal_abort(journal_t *journal, int errno)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__journal_abort_soft(journal, errno);
 }
 
@@ -2176,7 +2235,9 @@ int jbd2_journal_errno(journal_t *journal)
 
 	read_lock(&journal->j_state_lock);
 	if (journal->j_flags & JBD2_ABORT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EROFS;
+}
 	else
 		err = journal->j_errno;
 	read_unlock(&journal->j_state_lock);
@@ -2196,7 +2257,9 @@ int jbd2_journal_clear_err(journal_t *journal)
 
 	write_lock(&journal->j_state_lock);
 	if (journal->j_flags & JBD2_ABORT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EROFS;
+}
 	else
 		journal->j_errno = 0;
 	write_unlock(&journal->j_state_lock);
@@ -2212,6 +2275,7 @@ int jbd2_journal_clear_err(journal_t *journal)
  */
 void jbd2_journal_ack_err(journal_t *journal)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_lock(&journal->j_state_lock);
 	if (journal->j_errno)
 		journal->j_flags |= JBD2_ACK_ERR;
@@ -2220,6 +2284,7 @@ void jbd2_journal_ack_err(journal_t *journal)
 
 int jbd2_journal_blocks_per_page(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1 << (PAGE_SHIFT - inode->i_sb->s_blocksize_bits);
 }
 
@@ -2231,7 +2296,9 @@ size_t journal_tag_bytes(journal_t *journal)
 	size_t sz;
 
 	if (jbd2_has_feature_csum3(journal))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sizeof(journal_block_tag3_t);
+}
 
 	sz = sizeof(journal_block_tag_t);
 
@@ -2272,6 +2339,7 @@ static void jbd2_journal_destroy_slabs(void)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < JBD2_MAX_SLABS; i++) {
 		if (jbd2_slab[i])
 			kmem_cache_destroy(jbd2_slab[i]);
@@ -2282,6 +2350,7 @@ static void jbd2_journal_destroy_slabs(void)
 static int jbd2_journal_create_slab(size_t size)
 {
 	static DEFINE_MUTEX(jbd2_slab_create_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int i = order_base_2(size) - 10;
 	size_t slab_size;
 
@@ -2312,6 +2381,7 @@ static int jbd2_journal_create_slab(size_t size)
 
 static struct kmem_cache *get_slab(size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int i = order_base_2(size) - 10;
 
 	BUG_ON(i >= JBD2_MAX_SLABS);
@@ -2325,6 +2395,7 @@ void *jbd2_alloc(size_t size, gfp_t flags)
 {
 	void *ptr;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(size & (size-1)); /* Must be a power of 2 */
 
 	if (size < PAGE_SIZE)
@@ -2341,6 +2412,7 @@ void *jbd2_alloc(size_t size, gfp_t flags)
 
 void jbd2_free(void *ptr, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (size < PAGE_SIZE)
 		kmem_cache_free(get_slab(size), ptr);
 	else
@@ -2367,6 +2439,7 @@ static int jbd2_journal_init_journal_head_cache(void)
 				NULL);		/* ctor */
 	retval = 0;
 	if (!jbd2_journal_head_cache) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -ENOMEM;
 		printk(KERN_EMERG "JBD2: no memory for journal_head cache\n");
 	}
@@ -2375,6 +2448,7 @@ static int jbd2_journal_init_journal_head_cache(void)
 
 static void jbd2_journal_destroy_journal_head_cache(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (jbd2_journal_head_cache) {
 		kmem_cache_destroy(jbd2_journal_head_cache);
 		jbd2_journal_head_cache = NULL;
@@ -2394,6 +2468,7 @@ static struct journal_head *journal_alloc_journal_head(void)
 	ret = kmem_cache_zalloc(jbd2_journal_head_cache, GFP_NOFS);
 	if (!ret) {
 		jbd_debug(1, "out of memory for journal_head\n");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_notice_ratelimited("ENOMEM in %s, retrying.\n", __func__);
 		ret = kmem_cache_zalloc(jbd2_journal_head_cache,
 				GFP_NOFS | __GFP_NOFAIL);
@@ -2498,6 +2573,7 @@ struct journal_head *jbd2_journal_grab_journal_head(struct buffer_head *bh)
 
 	jbd_lock_bh_journal_head(bh);
 	if (buffer_jbd(bh)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		jh = bh2jh(bh);
 		jh->b_jcount++;
 	}
@@ -2507,6 +2583,7 @@ struct journal_head *jbd2_journal_grab_journal_head(struct buffer_head *bh)
 
 static void __journal_remove_journal_head(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct journal_head *jh = bh2jh(bh);
 
 	J_ASSERT_JH(jh, jh->b_jcount >= 0);
@@ -2537,6 +2614,7 @@ static void __journal_remove_journal_head(struct buffer_head *bh)
  */
 void jbd2_journal_put_journal_head(struct journal_head *jh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct buffer_head *bh = jh2bh(jh);
 
 	jbd_lock_bh_journal_head(bh);
@@ -2555,6 +2633,7 @@ void jbd2_journal_put_journal_head(struct journal_head *jh)
  */
 void jbd2_journal_init_jbd_inode(struct jbd2_inode *jinode, struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	jinode->i_transaction = NULL;
 	jinode->i_next_transaction = NULL;
 	jinode->i_vfs_inode = inode;
@@ -2570,6 +2649,7 @@ void jbd2_journal_init_jbd_inode(struct jbd2_inode *jinode, struct inode *inode)
 void jbd2_journal_release_jbd_inode(journal_t *journal,
 				    struct jbd2_inode *jinode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!journal)
 		return;
 restart:
@@ -2605,6 +2685,7 @@ static void __init jbd2_create_jbd_stats_proc_entry(void)
 
 static void __exit jbd2_remove_jbd_stats_proc_entry(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (proc_jbd2_stats)
 		remove_proc_entry(JBD2_STATS_PROC_NAME, NULL);
 }
@@ -2622,20 +2703,24 @@ static int __init jbd2_journal_init_handle_cache(void)
 {
 	jbd2_handle_cache = KMEM_CACHE(jbd2_journal_handle, SLAB_TEMPORARY);
 	if (jbd2_handle_cache == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_EMERG "JBD2: failed to create handle cache\n");
 		return -ENOMEM;
 	}
 	jbd2_inode_cache = KMEM_CACHE(jbd2_inode, 0);
 	if (jbd2_inode_cache == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_EMERG "JBD2: failed to create inode cache\n");
 		kmem_cache_destroy(jbd2_handle_cache);
 		return -ENOMEM;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static void jbd2_journal_destroy_handle_cache(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (jbd2_handle_cache)
 		kmem_cache_destroy(jbd2_handle_cache);
 	if (jbd2_inode_cache)
@@ -2663,6 +2748,7 @@ static int __init journal_init_caches(void)
 
 static void jbd2_journal_destroy_caches(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	jbd2_journal_destroy_revoke_caches();
 	jbd2_journal_destroy_journal_head_cache();
 	jbd2_journal_destroy_handle_cache();
@@ -2674,12 +2760,14 @@ static int __init journal_init(void)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(sizeof(struct journal_superblock_s) != 1024);
 
 	ret = journal_init_caches();
 	if (ret == 0) {
 		jbd2_create_jbd_stats_proc_entry();
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		jbd2_journal_destroy_caches();
 	}
 	return ret;
diff --git a/fs/jbd2/revoke.c b/fs/jbd2/revoke.c
index f9aefcd..a36949a 100644
--- a/fs/jbd2/revoke.c
+++ b/fs/jbd2/revoke.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/fs/jbd2/revoke.c
  *
@@ -133,6 +135,7 @@ static void flush_descriptor(journal_t *, struct buffer_head *, int);
 
 static inline int hash(journal_t *journal, unsigned long long block)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hash_64(block, journal->j_revoke->hash_shift);
 }
 
@@ -144,7 +147,9 @@ static int insert_revoke_hash(journal_t *journal, unsigned long long blocknr,
 	gfp_t gfp_mask = GFP_NOFS;
 
 	if (journal_oom_retry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gfp_mask |= __GFP_NOFAIL;
+}
 	record = kmem_cache_alloc(jbd2_revoke_record_cache, gfp_mask);
 	if (!record)
 		return -ENOMEM;
@@ -170,6 +175,7 @@ static struct jbd2_revoke_record_s *find_revoke_record(journal_t *journal,
 
 	spin_lock(&journal->j_revoke_lock);
 	record = (struct jbd2_revoke_record_s *) hash_list->next;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (&(record->hash) != hash_list) {
 		if (record->blocknr == blocknr) {
 			spin_unlock(&journal->j_revoke_lock);
@@ -183,6 +189,7 @@ static struct jbd2_revoke_record_s *find_revoke_record(journal_t *journal,
 
 void jbd2_journal_destroy_revoke_caches(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (jbd2_revoke_record_cache) {
 		kmem_cache_destroy(jbd2_revoke_record_cache);
 		jbd2_revoke_record_cache = NULL;
@@ -207,6 +214,7 @@ int __init jbd2_journal_init_revoke_caches(void)
 					     SLAB_TEMPORARY);
 	if (!jbd2_revoke_table_cache)
 		goto table_cache_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 table_cache_failure:
 	jbd2_journal_destroy_revoke_caches();
@@ -224,6 +232,7 @@ static struct jbd2_revoke_table_s *jbd2_journal_init_revoke_table(int hash_size)
 	if (!table)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while((tmp >>= 1UL) != 0UL)
 		shift++;
 
@@ -249,6 +258,7 @@ static void jbd2_journal_destroy_revoke_table(struct jbd2_revoke_table_s *table)
 	int i;
 	struct list_head *hash_list;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < table->hash_size; i++) {
 		hash_list = &table->hash_table[i];
 		J_ASSERT(list_empty(hash_list));
@@ -261,6 +271,7 @@ static void jbd2_journal_destroy_revoke_table(struct jbd2_revoke_table_s *table)
 /* Initialise the revoke table for a given journal to a given size. */
 int jbd2_journal_init_revoke(journal_t *journal, int hash_size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	J_ASSERT(journal->j_revoke_table[0] == NULL);
 	J_ASSERT(is_power_of_2(hash_size));
 
@@ -288,6 +299,7 @@ int jbd2_journal_init_revoke(journal_t *journal, int hash_size)
 /* Destroy a journal's revoke table.  The table must already be empty! */
 void jbd2_journal_destroy_revoke(journal_t *journal)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	journal->j_revoke = NULL;
 	if (journal->j_revoke_table[0])
 		jbd2_journal_destroy_revoke_table(journal->j_revoke_table[0]);
@@ -330,6 +342,7 @@ int jbd2_journal_revoke(handle_t *handle, unsigned long long blocknr,
 	struct block_device *bdev;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep();
 	if (bh_in)
 		BUFFER_TRACE(bh_in, "enter");
@@ -428,6 +441,7 @@ int jbd2_journal_cancel_revoke(handle_t *handle, struct journal_head *jh)
 	 * not, we can't trust the revoke bit, and we need to do the
 	 * full search for a revoke record. */
 	if (test_set_buffer_revokevalid(bh)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		need_cancel = test_clear_buffer_revoked(bh);
 	} else {
 		need_cancel = 1;
@@ -479,6 +493,7 @@ void jbd2_clear_buffer_revoked_flags(journal_t *journal)
 	struct jbd2_revoke_table_s *revoke = journal->j_revoke;
 	int i = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < revoke->hash_size; i++) {
 		struct list_head *hash_list;
 		struct list_head *list_entry;
@@ -508,7 +523,9 @@ void jbd2_journal_switch_revoke_table(journal_t *journal)
 	int i;
 
 	if (journal->j_revoke == journal->j_revoke_table[0])
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		journal->j_revoke = journal->j_revoke_table[1];
+}
 	else
 		journal->j_revoke = journal->j_revoke_table[0];
 
@@ -577,7 +594,9 @@ static void write_one_revoke_record(transaction_t *transaction,
            jbd2_journal_write_revoke_records in order to free all of the
            revoke records: only the IO to the journal is omitted. */
 	if (is_journal_aborted(journal))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	descriptor = *descriptorp;
 	offset = *offsetp;
@@ -638,6 +657,7 @@ static void flush_descriptor(journal_t *journal,
 	jbd2_journal_revoke_header_t *header;
 
 	if (is_journal_aborted(journal)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_bh(descriptor);
 		return;
 	}
@@ -707,7 +727,9 @@ int jbd2_journal_test_revoke(journal_t *journal,
 
 	record = find_revoke_record(journal, blocknr);
 	if (!record)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (tid_gt(sequence, record->sequence))
 		return 0;
 	return 1;
@@ -727,6 +749,7 @@ void jbd2_journal_clear_revoke(journal_t *journal)
 
 	revoke = journal->j_revoke;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < revoke->hash_size; i++) {
 		hash_list = &revoke->hash_table[i];
 		while (!list_empty(hash_list)) {
diff --git a/fs/jbd2/transaction.c b/fs/jbd2/transaction.c
index c068181..e8d4041 100644
--- a/fs/jbd2/transaction.c
+++ b/fs/jbd2/transaction.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/fs/jbd2/transaction.c
  *
@@ -46,12 +48,16 @@ int __init jbd2_journal_init_transaction_cache(void)
 					SLAB_HWCACHE_ALIGN|SLAB_TEMPORARY,
 					NULL);
 	if (transaction_cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOMEM;
 }
 
 void jbd2_journal_destroy_transaction_cache(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (transaction_cache) {
 		kmem_cache_destroy(transaction_cache);
 		transaction_cache = NULL;
@@ -60,6 +66,7 @@ void jbd2_journal_destroy_transaction_cache(void)
 
 void jbd2_journal_free_transaction(transaction_t *transaction)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(ZERO_OR_NULL_PTR(transaction)))
 		return;
 	kmem_cache_free(transaction_cache, transaction);
@@ -83,6 +90,7 @@ void jbd2_journal_free_transaction(transaction_t *transaction)
 static transaction_t *
 jbd2_get_transaction(journal_t *journal, transaction_t *transaction)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	transaction->t_journal = journal;
 	transaction->t_state = T_RUNNING;
 	transaction->t_start_time = ktime_get();
@@ -150,6 +158,7 @@ static inline void update_t_max_wait(transaction_t *transaction,
 static void wait_transaction_locked(journal_t *journal)
 	__releases(journal->j_state_lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DEFINE_WAIT(wait);
 	int need_to_start;
 	tid_t tid = journal->j_running_transaction->t_tid;
@@ -167,6 +176,7 @@ static void wait_transaction_locked(journal_t *journal)
 
 static void sub_reserved_credits(journal_t *journal, int blocks)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_sub(blocks, &journal->j_reserved_credits);
 	wake_up(&journal->j_wait_reserved);
 }
@@ -189,6 +199,7 @@ static int add_transaction_credits(journal_t *journal, int blocks,
 	 * for the lock to be released.
 	 */
 	if (t->t_state == T_LOCKED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wait_transaction_locked(journal);
 		return 1;
 	}
@@ -282,7 +293,9 @@ static int start_this_handle(journal_t *journal, handle_t *handle,
 	unsigned long ts = jiffies;
 
 	if (handle->h_rsv_handle)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rsv_blocks = handle->h_rsv_handle->h_buffer_credits;
+}
 
 	/*
 	 * Limit the number of reserved credits to 1/2 of maximum transaction
@@ -400,6 +413,7 @@ static int start_this_handle(journal_t *journal, handle_t *handle,
 /* Allocate a new handle.  This should probably be in a slab... */
 static handle_t *new_handle(int nblocks)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	handle_t *handle = jbd2_alloc_handle(GFP_NOFS);
 	if (!handle)
 		return NULL;
@@ -413,6 +427,7 @@ handle_t *jbd2__journal_start(journal_t *journal, int nblocks, int rsv_blocks,
 			      gfp_t gfp_mask, unsigned int type,
 			      unsigned int line_no)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	handle_t *handle = journal_current_handle();
 	int err;
 
@@ -480,6 +495,7 @@ EXPORT_SYMBOL(jbd2__journal_start);
  */
 handle_t *jbd2_journal_start(journal_t *journal, int nblocks)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return jbd2__journal_start(journal, nblocks, 0, GFP_NOFS, 0, 0);
 }
 EXPORT_SYMBOL(jbd2_journal_start);
@@ -488,6 +504,7 @@ void jbd2_journal_free_reserved(handle_t *handle)
 {
 	journal_t *journal = handle->h_journal;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(!handle->h_reserved);
 	sub_reserved_credits(journal, handle->h_buffer_credits);
 	jbd2_free_handle(handle);
@@ -514,6 +531,7 @@ int jbd2_journal_start_reserved(handle_t *handle, unsigned int type,
 	journal_t *journal = handle->h_journal;
 	int ret = -EIO;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(!handle->h_reserved)) {
 		/* Someone passed in normal handle? Just stop it. */
 		jbd2_journal_stop(handle);
@@ -572,7 +590,9 @@ int jbd2_journal_extend(handle_t *handle, int nblocks)
 	int wanted;
 
 	if (is_handle_aborted(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EROFS;
+}
 	journal = transaction->t_journal;
 
 	result = 1;
@@ -650,7 +670,9 @@ int jbd2__journal_restart(handle_t *handle, int nblocks, gfp_t gfp_mask)
 	/* If we've had an abort of any type, don't even think about
 	 * actually doing the restart! */
 	if (is_handle_aborted(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	journal = transaction->t_journal;
 
 	/*
@@ -697,6 +719,7 @@ EXPORT_SYMBOL(jbd2__journal_restart);
 
 int jbd2_journal_restart(handle_t *handle, int nblocks)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return jbd2__journal_restart(handle, nblocks, GFP_NOFS);
 }
 EXPORT_SYMBOL(jbd2_journal_restart);
@@ -713,6 +736,7 @@ EXPORT_SYMBOL(jbd2_journal_restart);
  */
 void jbd2_journal_lock_updates(journal_t *journal)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DEFINE_WAIT(wait);
 
 	jbd2_might_wait_for_commit(journal);
@@ -770,6 +794,7 @@ void jbd2_journal_lock_updates(journal_t *journal)
  */
 void jbd2_journal_unlock_updates (journal_t *journal)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	J_ASSERT(journal->j_barrier_count != 0);
 
 	mutex_unlock(&journal->j_barrier);
@@ -781,6 +806,7 @@ void jbd2_journal_unlock_updates (journal_t *journal)
 
 static void warn_dirty_buffer(struct buffer_head *bh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	printk(KERN_WARNING
 	       "JBD2: Spotted dirty metadata buffer (dev = %pg, blocknr = %llu). "
 	       "There's a risk of filesystem corruption in case of system "
@@ -796,6 +822,7 @@ static void jbd2_freeze_jh_data(struct journal_head *jh)
 	char *source;
 	struct buffer_head *bh = jh2bh(jh);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	J_EXPECT_JH(jh, buffer_uptodate(bh), "Possible IO failure.\n");
 	page = bh->b_page;
 	offset = offset_in_page(bh->b_data);
@@ -834,7 +861,9 @@ do_get_write_access(handle_t *handle, struct journal_head *jh,
 	unsigned long start_lock, time_lock;
 
 	if (is_handle_aborted(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EROFS;
+}
 	journal = transaction->t_journal;
 
 	jbd_debug(5, "journal_head %p, force_copy %d\n", jh, force_copy);
@@ -1026,7 +1055,9 @@ static bool jbd2_write_access_granted(handle_t *handle, struct buffer_head *bh,
 
 	/* Dirty buffers require special handling... */
 	if (buffer_dirty(bh))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/*
 	 * RCU protects us from dereferencing freed pages. So the checks we do
@@ -1087,7 +1118,9 @@ int jbd2_journal_get_write_access(handle_t *handle, struct buffer_head *bh)
 	int rc;
 
 	if (jbd2_write_access_granted(handle, bh, false))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	jh = jbd2_journal_add_journal_head(bh);
 	/* We do not want to get caught playing with fields which the
@@ -1129,6 +1162,7 @@ int jbd2_journal_get_create_access(handle_t *handle, struct buffer_head *bh)
 	err = -EROFS;
 	if (is_handle_aborted(handle))
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	journal = transaction->t_journal;
 	err = 0;
 
@@ -1223,6 +1257,7 @@ int jbd2_journal_get_undo_access(handle_t *handle, struct buffer_head *bh)
 	struct journal_head *jh;
 	char *committed_data = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	JBUFFER_TRACE(jh, "entry");
 	if (jbd2_write_access_granted(handle, bh, true))
 		return 0;
@@ -1278,6 +1313,7 @@ int jbd2_journal_get_undo_access(handle_t *handle, struct buffer_head *bh)
 void jbd2_journal_set_triggers(struct buffer_head *bh,
 			       struct jbd2_buffer_trigger_type *type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct journal_head *jh = jbd2_journal_grab_journal_head(bh);
 
 	if (WARN_ON(!jh))
@@ -1289,6 +1325,7 @@ void jbd2_journal_set_triggers(struct buffer_head *bh,
 void jbd2_buffer_frozen_trigger(struct journal_head *jh, void *mapped_data,
 				struct jbd2_buffer_trigger_type *triggers)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct buffer_head *bh = jh2bh(jh);
 
 	if (!triggers || !triggers->t_frozen)
@@ -1300,6 +1337,7 @@ void jbd2_buffer_frozen_trigger(struct journal_head *jh, void *mapped_data,
 void jbd2_buffer_abort_trigger(struct journal_head *jh,
 			       struct jbd2_buffer_trigger_type *triggers)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!triggers || !triggers->t_abort)
 		return;
 
@@ -1337,7 +1375,9 @@ int jbd2_journal_dirty_metadata(handle_t *handle, struct buffer_head *bh)
 	int ret = 0;
 
 	if (is_handle_aborted(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EROFS;
+}
 	if (!buffer_jbd(bh)) {
 		ret = -EUCLEAN;
 		goto out;
@@ -1495,7 +1535,9 @@ int jbd2_journal_forget (handle_t *handle, struct buffer_head *bh)
 	int was_modified = 0;
 
 	if (is_handle_aborted(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EROFS;
+}
 	journal = transaction->t_journal;
 
 	BUFFER_TRACE(bh, "entry");
@@ -1804,6 +1846,7 @@ int jbd2_journal_stop(handle_t *handle)
 static inline void
 __blist_add_buffer(struct journal_head **list, struct journal_head *jh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!*list) {
 		jh->b_tnext = jh->b_tprev = jh;
 		*list = jh;
@@ -1828,6 +1871,7 @@ __blist_add_buffer(struct journal_head **list, struct journal_head *jh)
 static inline void
 __blist_del_buffer(struct journal_head **list, struct journal_head *jh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (*list == jh) {
 		*list = jh->b_tnext;
 		if (*list == jh)
@@ -1854,6 +1898,7 @@ static void __jbd2_journal_temp_unlink_buffer(struct journal_head *jh)
 	transaction_t *transaction;
 	struct buffer_head *bh = jh2bh(jh);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	J_ASSERT_JH(jh, jbd_is_locked_bh_state(bh));
 	transaction = jh->b_transaction;
 	if (transaction)
@@ -1899,6 +1944,7 @@ static void __jbd2_journal_temp_unlink_buffer(struct journal_head *jh)
  */
 static void __jbd2_journal_unfile_buffer(struct journal_head *jh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__jbd2_journal_temp_unlink_buffer(jh);
 	jh->b_transaction = NULL;
 	jbd2_journal_put_journal_head(jh);
@@ -1906,6 +1952,7 @@ static void __jbd2_journal_unfile_buffer(struct journal_head *jh)
 
 void jbd2_journal_unfile_buffer(journal_t *journal, struct journal_head *jh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct buffer_head *bh = jh2bh(jh);
 
 	/* Get reference so that buffer cannot be freed before we unlock it */
@@ -1930,6 +1977,7 @@ __journal_try_to_free_buffer(journal_t *journal, struct buffer_head *bh)
 
 	jh = bh2jh(bh);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (buffer_locked(bh) || buffer_dirty(bh))
 		goto out;
 
@@ -1992,6 +2040,7 @@ int jbd2_journal_try_to_free_buffers(journal_t *journal,
 	struct buffer_head *bh;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	J_ASSERT(PageLocked(page));
 
 	head = page_buffers(page);
@@ -2040,6 +2089,7 @@ static int __dispose_buffer(struct journal_head *jh, transaction_t *transaction)
 	struct buffer_head *bh = jh2bh(jh);
 
 	if (jh->b_cp_transaction) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		JBUFFER_TRACE(jh, "on running+cp transaction");
 		__jbd2_journal_temp_unlink_buffer(jh);
 		/*
@@ -2111,6 +2161,7 @@ static int journal_unmap_buffer(journal_t *journal, struct buffer_head *bh,
 	struct journal_head *jh;
 	int may_free = 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUFFER_TRACE(bh, "entry");
 
 	/*
@@ -2288,6 +2339,7 @@ int jbd2_journal_invalidatepage(journal_t *journal,
 	struct buffer_head *head, *bh, *next;
 	unsigned int stop = offset + length;
 	unsigned int curr_off = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int partial_page = (offset || length < PAGE_SIZE);
 	int may_free = 1;
 	int ret = 0;
@@ -2342,6 +2394,7 @@ void __jbd2_journal_file_buffer(struct journal_head *jh,
 	int was_dirty = 0;
 	struct buffer_head *bh = jh2bh(jh);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	J_ASSERT_JH(jh, jbd_is_locked_bh_state(bh));
 	assert_spin_locked(&transaction->t_journal->j_list_lock);
 
@@ -2404,6 +2457,7 @@ void __jbd2_journal_file_buffer(struct journal_head *jh,
 void jbd2_journal_file_buffer(struct journal_head *jh,
 				transaction_t *transaction, int jlist)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	jbd_lock_bh_state(jh2bh(jh));
 	spin_lock(&transaction->t_journal->j_list_lock);
 	__jbd2_journal_file_buffer(jh, transaction, jlist);
@@ -2427,6 +2481,7 @@ void __jbd2_journal_refile_buffer(struct journal_head *jh)
 	int was_dirty, jlist;
 	struct buffer_head *bh = jh2bh(jh);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	J_ASSERT_JH(jh, jbd_is_locked_bh_state(bh));
 	if (jh->b_transaction)
 		assert_spin_locked(&jh->b_transaction->t_journal->j_list_lock);
@@ -2472,6 +2527,7 @@ void __jbd2_journal_refile_buffer(struct journal_head *jh)
  */
 void jbd2_journal_refile_buffer(journal_t *journal, struct journal_head *jh)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct buffer_head *bh = jh2bh(jh);
 
 	/* Get reference so that buffer cannot be freed before we unlock it */
@@ -2494,7 +2550,9 @@ static int jbd2_journal_file_inode(handle_t *handle, struct jbd2_inode *jinode,
 	journal_t *journal;
 
 	if (is_handle_aborted(handle))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EROFS;
+}
 	journal = transaction->t_journal;
 
 	jbd_debug(4, "Adding inode %lu, tid:%d\n", jinode->i_vfs_inode->i_ino,
@@ -2553,12 +2611,14 @@ static int jbd2_journal_file_inode(handle_t *handle, struct jbd2_inode *jinode,
 
 int jbd2_journal_inode_add_write(handle_t *handle, struct jbd2_inode *jinode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return jbd2_journal_file_inode(handle, jinode,
 				       JI_WRITE_DATA | JI_WAIT_DATA);
 }
 
 int jbd2_journal_inode_add_wait(handle_t *handle, struct jbd2_inode *jinode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return jbd2_journal_file_inode(handle, jinode, JI_WAIT_DATA);
 }
 
diff --git a/fs/kernfs/dir.c b/fs/kernfs/dir.c
index 89d1dc1..dd31955 100644
--- a/fs/kernfs/dir.c
+++ b/fs/kernfs/dir.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/kernfs/dir.c - kernfs directory implementation
  *
@@ -27,6 +29,7 @@ static DEFINE_SPINLOCK(kernfs_idr_lock);	/* root->ino_idr */
 
 static bool kernfs_active(struct kernfs_node *kn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&kernfs_mutex);
 	return atomic_read(&kn->active) >= 0;
 }
@@ -43,7 +46,9 @@ static bool kernfs_lockdep(struct kernfs_node *kn)
 static int kernfs_name_locked(struct kernfs_node *kn, char *buf, size_t buflen)
 {
 	if (!kn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return strlcpy(buf, "(null)", buflen);
+}
 
 	return strlcpy(buf, kn->parent ? kn->name : "/", buflen);
 }
@@ -67,12 +72,15 @@ static struct kernfs_node *kernfs_common_ancestor(struct kernfs_node *a,
 	struct kernfs_root *ra = kernfs_root(a), *rb = kernfs_root(b);
 
 	if (ra != rb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	da = kernfs_depth(ra->kn, a);
 	db = kernfs_depth(rb->kn, b);
 
 	while (da > db) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		a = a->parent;
 		da--;
 	}
@@ -83,10 +91,12 @@ static struct kernfs_node *kernfs_common_ancestor(struct kernfs_node *a,
 
 	/* worst case b and a will be the same at root */
 	while (b != a) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		b = b->parent;
 		a = a->parent;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return a;
 }
 
@@ -130,17 +140,25 @@ static int kernfs_path_from_node_locked(struct kernfs_node *kn_to,
 	int i, j;
 
 	if (!kn_to)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return strlcpy(buf, "(null)", buflen);
+}
 
 	if (!kn_from)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kn_from = kernfs_root(kn_to)->kn;
+}
 
 	if (kn_from == kn_to)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return strlcpy(buf, "/", buflen);
+}
 
 	common = kernfs_common_ancestor(kn_from, kn_to);
 	if (WARN_ON(!common))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	depth_to = kernfs_depth(common, kn_to);
 	depth_from = kernfs_depth(common, kn_from);
@@ -148,14 +166,18 @@ static int kernfs_path_from_node_locked(struct kernfs_node *kn_to,
 	if (buf)
 		buf[0] = '\0';
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < depth_from; i++)
 		len += strlcpy(buf + len, parent_str,
 			       len < buflen ? buflen - len : 0);
 
 	/* Calculate how many bytes we need for the rest */
 	for (i = depth_to - 1; i >= 0; i--) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (kn = kn_to, j = 0; j < i; j++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kn = kn->parent;
+}
 		len += strlcpy(buf + len, "/",
 			       len < buflen ? buflen - len : 0);
 		len += strlcpy(buf + len, kn->name,
@@ -229,6 +251,7 @@ void pr_cont_kernfs_name(struct kernfs_node *kn)
 {
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&kernfs_rename_lock, flags);
 
 	kernfs_name_locked(kn, kernfs_pr_cont_buf, sizeof(kernfs_pr_cont_buf));
@@ -248,6 +271,7 @@ void pr_cont_kernfs_path(struct kernfs_node *kn)
 	unsigned long flags;
 	int sz;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&kernfs_rename_lock, flags);
 
 	sz = kernfs_path_from_node_locked(kn, NULL, kernfs_pr_cont_buf,
@@ -280,6 +304,7 @@ struct kernfs_node *kernfs_get_parent(struct kernfs_node *kn)
 	struct kernfs_node *parent;
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irqsave(&kernfs_rename_lock, flags);
 	parent = kn->parent;
 	kernfs_get(parent);
@@ -301,13 +326,18 @@ static unsigned int kernfs_name_hash(const char *name, const void *ns)
 	unsigned int len = strlen(name);
 	while (len--)
 		hash = partial_name_hash(*name++, hash);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hash = end_name_hash(hash);
 	hash &= 0x7fffffffU;
 	/* Reserve hash numbers 0, 1 and INT_MAX for magic directory entries */
 	if (hash < 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hash += 2;
+}
 	if (hash >= INT_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hash = INT_MAX - 1;
+}
 	return hash;
 }
 
@@ -315,13 +345,21 @@ static int kernfs_name_compare(unsigned int hash, const char *name,
 			       const void *ns, const struct kernfs_node *kn)
 {
 	if (hash < kn->hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 	if (hash > kn->hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	if (ns < kn->ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 	if (ns > kn->ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	return strcmp(name, kn->name);
 }
 
@@ -372,6 +410,7 @@ static int kernfs_link_sibling(struct kernfs_node *kn)
 	if (kernfs_type(kn) == KERNFS_DIR)
 		kn->parent->dir.subdirs++;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -389,7 +428,9 @@ static int kernfs_link_sibling(struct kernfs_node *kn)
 static bool kernfs_unlink_sibling(struct kernfs_node *kn)
 {
 	if (RB_EMPTY_NODE(&kn->rb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	if (kernfs_type(kn) == KERNFS_DIR)
 		kn->parent->dir.subdirs--;
@@ -412,13 +453,20 @@ static bool kernfs_unlink_sibling(struct kernfs_node *kn)
 struct kernfs_node *kernfs_get_active(struct kernfs_node *kn)
 {
 	if (unlikely(!kn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (!atomic_inc_unless_negative(&kn->active))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (kernfs_lockdep(kn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rwsem_acquire_read(&kn->dep_map, 0, 1, _RET_IP_);
+}
 	return kn;
 }
 
@@ -435,14 +483,22 @@ void kernfs_put_active(struct kernfs_node *kn)
 	int v;
 
 	if (unlikely(!kn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (kernfs_lockdep(kn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rwsem_release(&kn->dep_map, 1, _RET_IP_);
+}
 	v = atomic_dec_return(&kn->active);
 	if (likely(v != KN_DEACTIVATED_BIAS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	wake_up_all(&root->deactivate_waitq);
 }
 
@@ -459,23 +515,31 @@ static void kernfs_drain(struct kernfs_node *kn)
 {
 	struct kernfs_root *root = kernfs_root(kn);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&kernfs_mutex);
 	WARN_ON_ONCE(kernfs_active(kn));
 
 	mutex_unlock(&kernfs_mutex);
 
 	if (kernfs_lockdep(kn)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rwsem_acquire(&kn->dep_map, 0, 0, _RET_IP_);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (atomic_read(&kn->active) != KN_DEACTIVATED_BIAS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lock_contended(&kn->dep_map, _RET_IP_);
+}
 	}
 
 	/* but everyone should wait for draining */
 	wait_event(root->deactivate_waitq,
 		   atomic_read(&kn->active) == KN_DEACTIVATED_BIAS);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (kernfs_lockdep(kn)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lock_acquired(&kn->dep_map, _RET_IP_);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rwsem_release(&kn->dep_map, 1, _RET_IP_);
 	}
 
@@ -513,7 +577,9 @@ void kernfs_put(struct kernfs_node *kn)
 	 * depends on this to filter reused stale node
 	 */
 	if (!kn || !atomic_dec_and_test(&kn->count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	root = kernfs_root(kn);
  repeat:
 	/*
@@ -532,9 +598,12 @@ void kernfs_put(struct kernfs_node *kn)
 	kfree_const(kn->name);
 
 	if (kn->iattr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (kn->iattr->ia_secdata)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			security_release_secctx(kn->iattr->ia_secdata,
 						kn->iattr->ia_secdata_len);
+}
 		simple_xattrs_free(&kn->iattr->xattrs);
 	}
 	kfree(kn->iattr);
@@ -560,7 +629,9 @@ static int kernfs_dop_revalidate(struct dentry *dentry, unsigned int flags)
 	struct kernfs_node *kn;
 
 	if (flags & LOOKUP_RCU)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ECHILD;
+}
 
 	/* Always perform fresh lookup for negatives */
 	if (d_really_is_negative(dentry))
@@ -614,6 +685,7 @@ struct kernfs_node *kernfs_node_from_dentry(struct dentry *dentry)
 	if (dentry->d_sb->s_op == &kernfs_sops &&
 	    !d_really_is_negative(dentry))
 		return kernfs_dentry_node(dentry);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -628,7 +700,9 @@ static struct kernfs_node *__kernfs_new_node(struct kernfs_root *root,
 
 	name = kstrdup_const(name, GFP_KERNEL);
 	if (!name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	kn = kmem_cache_zalloc(kernfs_node_cache, GFP_KERNEL);
 	if (!kn)
@@ -639,7 +713,9 @@ static struct kernfs_node *__kernfs_new_node(struct kernfs_root *root,
 	cursor = idr_get_cursor(&root->ino_idr);
 	ret = idr_alloc_cyclic(&root->ino_idr, kn, 1, 0, GFP_ATOMIC);
 	if (ret >= 0 && ret < cursor)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		root->next_generation++;
+}
 	gen = root->next_generation;
 	spin_unlock(&kernfs_idr_lock);
 	idr_preload_end();
@@ -762,6 +838,7 @@ int kernfs_add_one(struct kernfs_node *kn)
 	if (kernfs_type(parent) != KERNFS_DIR)
 		goto out_unlock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -ENOENT;
 	if (parent->flags & KERNFS_EMPTY_DIR)
 		goto out_unlock;
@@ -794,6 +871,7 @@ int kernfs_add_one(struct kernfs_node *kn)
 	 */
 	if (!(kernfs_root(kn)->flags & KERNFS_ROOT_CREATE_DEACTIVATED))
 		kernfs_activate(kn);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_unlock:
@@ -818,9 +896,11 @@ static struct kernfs_node *kernfs_find_ns(struct kernfs_node *parent,
 	bool has_ns = kernfs_ns_enabled(parent);
 	unsigned int hash;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&kernfs_mutex);
 
 	if (has_ns != (bool)ns) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN(1, KERN_WARNING "kernfs: ns %s in '%s' for '%s'\n",
 		     has_ns ? "required" : "invalid", parent->name, name);
 		return NULL;
@@ -840,6 +920,7 @@ static struct kernfs_node *kernfs_find_ns(struct kernfs_node *parent,
 		else
 			return kn;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -850,6 +931,7 @@ static struct kernfs_node *kernfs_walk_ns(struct kernfs_node *parent,
 	size_t len;
 	char *p, *name;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&kernfs_mutex);
 
 	/* grab kernfs_rename_lock to piggy back on kernfs_pr_cont_buf */
@@ -939,7 +1021,9 @@ struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
 
 	root = kzalloc(sizeof(*root), GFP_KERNEL);
 	if (!root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	idr_init(&root->ino_idr);
 	INIT_LIST_HEAD(&root->supers);
@@ -948,6 +1032,7 @@ struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
 	kn = __kernfs_new_node(root, "", S_IFDIR | S_IRUGO | S_IXUGO,
 			       KERNFS_DIR);
 	if (!kn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		idr_destroy(&root->ino_idr);
 		kfree(root);
 		return ERR_PTR(-ENOMEM);
@@ -964,6 +1049,7 @@ struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
 	if (!(root->flags & KERNFS_ROOT_CREATE_DEACTIVATED))
 		kernfs_activate(kn);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return root;
 }
 
@@ -976,6 +1062,7 @@ struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
  */
 void kernfs_destroy_root(struct kernfs_root *root)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kernfs_remove(root->kn);	/* will also free @root */
 }
 
@@ -999,7 +1086,9 @@ struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
 	/* allocate */
 	kn = kernfs_new_node(parent, name, mode | S_IFDIR, KERNFS_DIR);
 	if (!kn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	kn->dir.root = parent->dir.root;
 	kn->ns = ns;
@@ -1008,8 +1097,11 @@ struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
 	/* link in */
 	rc = kernfs_add_one(kn);
 	if (!rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return kn;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kernfs_put(kn);
 	return ERR_PTR(rc);
 }
@@ -1030,7 +1122,9 @@ struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
 	/* allocate */
 	kn = kernfs_new_node(parent, name, S_IRUGO|S_IXUGO|S_IFDIR, KERNFS_DIR);
 	if (!kn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	kn->flags |= KERNFS_EMPTY_DIR;
 	kn->dir.root = parent->dir.root;
@@ -1040,8 +1134,11 @@ struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
 	/* link in */
 	rc = kernfs_add_one(kn);
 	if (!rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return kn;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kernfs_put(kn);
 	return ERR_PTR(rc);
 }
@@ -1065,6 +1162,7 @@ static struct dentry *kernfs_iop_lookup(struct inode *dir,
 
 	/* no such entry */
 	if (!kn || !kernfs_active(kn)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = NULL;
 		goto out_unlock;
 	}
@@ -1072,6 +1170,7 @@ static struct dentry *kernfs_iop_lookup(struct inode *dir,
 	/* attach dentry and inode */
 	inode = kernfs_get_inode(dir->i_sb, kn);
 	if (!inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = ERR_PTR(-ENOMEM);
 		goto out_unlock;
 	}
@@ -1091,10 +1190,14 @@ static int kernfs_iop_mkdir(struct inode *dir, struct dentry *dentry,
 	int ret;
 
 	if (!scops || !scops->mkdir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	if (!kernfs_get_active(parent))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	ret = scops->mkdir(parent, dentry->d_name.name, mode);
 
@@ -1104,6 +1207,7 @@ static int kernfs_iop_mkdir(struct inode *dir, struct dentry *dentry,
 
 static int kernfs_iop_rmdir(struct inode *dir, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kernfs_node *kn  = kernfs_dentry_node(dentry);
 	struct kernfs_syscall_ops *scops = kernfs_root(kn)->syscall_ops;
 	int ret;
@@ -1124,6 +1228,7 @@ static int kernfs_iop_rename(struct inode *old_dir, struct dentry *old_dentry,
 			     struct inode *new_dir, struct dentry *new_dentry,
 			     unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kernfs_node *kn = kernfs_dentry_node(old_dentry);
 	struct kernfs_node *new_parent = new_dir->i_private;
 	struct kernfs_syscall_ops *scops = kernfs_root(kn)->syscall_ops;
@@ -1198,6 +1303,7 @@ static struct kernfs_node *kernfs_next_descendant_post(struct kernfs_node *pos,
 {
 	struct rb_node *rbn;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&kernfs_mutex);
 
 	/* if first iteration, visit leftmost descendant which may be root */
@@ -1206,7 +1312,9 @@ static struct kernfs_node *kernfs_next_descendant_post(struct kernfs_node *pos,
 
 	/* if we visited @root, we're done */
 	if (pos == root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	/* if there's an unvisited sibling, visit its leftmost descendant */
 	rbn = rb_next(&pos->rb);
@@ -1255,6 +1363,7 @@ static void __kernfs_remove(struct kernfs_node *kn)
 {
 	struct kernfs_node *pos;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&kernfs_mutex);
 
 	/*
@@ -1263,8 +1372,11 @@ static void __kernfs_remove(struct kernfs_node *kn)
 	 * after removal.
 	 */
 	if (!kn || (kn->parent && RB_EMPTY_NODE(&kn->rb)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("kernfs %s: removing\n", kn->name);
 
 	/* prevent any new usage under @kn by deactivating all nodes */
@@ -1306,6 +1418,7 @@ static void __kernfs_remove(struct kernfs_node *kn)
 
 			/* update timestamps on the parent */
 			if (ps_iattr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ktime_get_real_ts(&ps_iattr->ia_iattr.ia_ctime);
 				ps_iattr->ia_iattr.ia_mtime =
 					ps_iattr->ia_iattr.ia_ctime;
@@ -1382,8 +1495,10 @@ void kernfs_unbreak_active_protection(struct kernfs_node *kn)
 	 */
 	atomic_inc(&kn->active);
 	if (kernfs_lockdep(kn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rwsem_acquire(&kn->dep_map, 0, 1, _RET_IP_);
 }
+}
 
 /**
  * kernfs_remove_self - remove a kernfs_node from its own method
@@ -1428,6 +1543,7 @@ bool kernfs_remove_self(struct kernfs_node *kn)
 	 * of kernfs_remove_self() finished.
 	 */
 	if (!(kn->flags & KERNFS_SUICIDAL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kn->flags |= KERNFS_SUICIDAL;
 		__kernfs_remove(kn);
 		kn->flags |= KERNFS_SUICIDED;
@@ -1477,6 +1593,7 @@ int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
 	struct kernfs_node *kn;
 
 	if (!parent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN(1, KERN_WARNING "kernfs: can not remove '%s', no directory\n",
 			name);
 		return -ENOENT;
@@ -1491,7 +1608,9 @@ int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
 	mutex_unlock(&kernfs_mutex);
 
 	if (kn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	else
 		return -ENOENT;
 }
@@ -1512,7 +1631,9 @@ int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
 
 	/* can't move or rename root */
 	if (!kn->parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&kernfs_mutex);
 
@@ -1592,7 +1713,9 @@ static struct kernfs_node *kernfs_dir_pos(const void *ns,
 			pos->parent == parent && hash == pos->hash;
 		kernfs_put(pos);
 		if (!valid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pos = NULL;
+}
 	}
 	if (!pos && (hash > 1) && (hash < INT_MAX)) {
 		struct rb_node *node = parent->dir.children.rb_node;
@@ -1601,17 +1724,23 @@ static struct kernfs_node *kernfs_dir_pos(const void *ns,
 
 			if (hash < pos->hash)
 				node = node->rb_left;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			else if (hash > pos->hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				node = node->rb_right;
+}
 			else
 				break;
 		}
 	}
 	/* Skip over entries which are dying/dead or in the wrong namespace */
 	while (pos && (!kernfs_active(pos) || pos->ns != ns)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct rb_node *node = rb_next(&pos->rb);
 		if (!node)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pos = NULL;
+}
 		else
 			pos = rb_to_kn(node);
 	}
@@ -1626,7 +1755,9 @@ static struct kernfs_node *kernfs_dir_next_pos(const void *ns,
 		do {
 			struct rb_node *node = rb_next(&pos->rb);
 			if (!node)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pos = NULL;
+}
 			else
 				pos = rb_to_kn(node);
 		} while (pos && (!kernfs_active(pos) || pos->ns != ns));
@@ -1642,11 +1773,15 @@ static int kernfs_fop_readdir(struct file *file, struct dir_context *ctx)
 	const void *ns = NULL;
 
 	if (!dir_emit_dots(file, ctx))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	mutex_lock(&kernfs_mutex);
 
 	if (kernfs_ns_enabled(parent))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ns = kernfs_info(dentry->d_sb)->ns;
+}
 
 	for (pos = kernfs_dir_pos(ns, parent, ctx->pos, pos);
 	     pos;
@@ -1662,7 +1797,9 @@ static int kernfs_fop_readdir(struct file *file, struct dir_context *ctx)
 
 		mutex_unlock(&kernfs_mutex);
 		if (!dir_emit(ctx, name, len, ino, type))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 		mutex_lock(&kernfs_mutex);
 	}
 	mutex_unlock(&kernfs_mutex);
diff --git a/fs/kernfs/file.c b/fs/kernfs/file.c
index d8f49c4..fbdccde 100644
--- a/fs/kernfs/file.c
+++ b/fs/kernfs/file.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/kernfs/file.c - kernfs file implementation
  *
@@ -63,6 +65,7 @@ static struct kernfs_open_file *kernfs_of(struct file *file)
  */
 static const struct kernfs_ops *kernfs_ops(struct kernfs_node *kn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (kn->flags & KERNFS_LOCKDEP)
 		lockdep_assert_held(kn);
 	return kn->attr.ops;
@@ -111,14 +114,19 @@ static void *kernfs_seq_start(struct seq_file *sf, loff_t *ppos)
 	 */
 	mutex_lock(&of->mutex);
 	if (!kernfs_get_active(of->kn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENODEV);
+}
 
 	ops = kernfs_ops(of->kn);
 	if (ops->seq_start) {
 		void *next = ops->seq_start(sf, ppos);
 		/* see the comment above kernfs_seq_stop_active() */
 		if (next == ERR_PTR(-ENODEV))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kernfs_seq_stop_active(sf, next);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return next;
 	} else {
 		/*
@@ -135,10 +143,14 @@ static void *kernfs_seq_next(struct seq_file *sf, void *v, loff_t *ppos)
 	const struct kernfs_ops *ops = kernfs_ops(of->kn);
 
 	if (ops->seq_next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		void *next = ops->seq_next(sf, v, ppos);
 		/* see the comment above kernfs_seq_stop_active() */
 		if (next == ERR_PTR(-ENODEV))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kernfs_seq_stop_active(sf, next);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return next;
 	} else {
 		/*
@@ -185,6 +197,7 @@ static ssize_t kernfs_file_direct_read(struct kernfs_open_file *of,
 				       char __user *user_buf, size_t count,
 				       loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ssize_t len = min_t(size_t, count, PAGE_SIZE);
 	const struct kernfs_ops *ops;
 	char *buf;
@@ -246,6 +259,7 @@ static ssize_t kernfs_file_direct_read(struct kernfs_open_file *of,
 static ssize_t kernfs_fop_read(struct file *file, char __user *user_buf,
 			       size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kernfs_open_file *of = kernfs_of(file);
 
 	if (of->kn->flags & KERNFS_HAS_SEQ_SHOW)
@@ -273,6 +287,7 @@ static ssize_t kernfs_fop_read(struct file *file, char __user *user_buf,
 static ssize_t kernfs_fop_write(struct file *file, const char __user *user_buf,
 				size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kernfs_open_file *of = kernfs_of(file);
 	const struct kernfs_ops *ops;
 	ssize_t len;
@@ -281,20 +296,28 @@ static ssize_t kernfs_fop_write(struct file *file, const char __user *user_buf,
 	if (of->atomic_write_len) {
 		len = count;
 		if (len > of->atomic_write_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -E2BIG;
+}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = min_t(size_t, count, PAGE_SIZE);
 	}
 
 	buf = of->prealloc_buf;
 	if (buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_lock(&of->prealloc_mutex);
+}
 	else
 		buf = kmalloc(len + 1, GFP_KERNEL);
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (copy_from_user(buf, user_buf, len)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = -EFAULT;
 		goto out_free;
 	}
@@ -306,6 +329,7 @@ static ssize_t kernfs_fop_write(struct file *file, const char __user *user_buf,
 	 */
 	mutex_lock(&of->mutex);
 	if (!kernfs_get_active(of->kn)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&of->mutex);
 		len = -ENODEV;
 		goto out_free;
@@ -325,9 +349,12 @@ static ssize_t kernfs_fop_write(struct file *file, const char __user *user_buf,
 
 out_free:
 	if (buf == of->prealloc_buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_unlock(&of->prealloc_mutex);
+}
 	else
 		kfree(buf);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return len;
 }
 
@@ -337,7 +364,9 @@ static void kernfs_vma_open(struct vm_area_struct *vma)
 	struct kernfs_open_file *of = kernfs_of(file);
 
 	if (!of->vm_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (!kernfs_get_active(of->kn))
 		return;
@@ -355,7 +384,9 @@ static int kernfs_vma_fault(struct vm_fault *vmf)
 	int ret;
 
 	if (!of->vm_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return VM_FAULT_SIGBUS;
+}
 
 	if (!kernfs_get_active(of->kn))
 		return VM_FAULT_SIGBUS;
@@ -375,7 +406,9 @@ static int kernfs_vma_page_mkwrite(struct vm_fault *vmf)
 	int ret;
 
 	if (!of->vm_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return VM_FAULT_SIGBUS;
+}
 
 	if (!kernfs_get_active(of->kn))
 		return VM_FAULT_SIGBUS;
@@ -398,7 +431,9 @@ static int kernfs_vma_access(struct vm_area_struct *vma, unsigned long addr,
 	int ret;
 
 	if (!of->vm_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!kernfs_get_active(of->kn))
 		return -EINVAL;
@@ -420,7 +455,9 @@ static int kernfs_vma_set_policy(struct vm_area_struct *vma,
 	int ret;
 
 	if (!of->vm_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!kernfs_get_active(of->kn))
 		return -EINVAL;
@@ -441,7 +478,9 @@ static struct mempolicy *kernfs_vma_get_policy(struct vm_area_struct *vma,
 	struct mempolicy *pol;
 
 	if (!of->vm_ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return vma->vm_policy;
+}
 
 	if (!kernfs_get_active(of->kn))
 		return vma->vm_policy;
@@ -469,6 +508,7 @@ static const struct vm_operations_struct kernfs_vm_ops = {
 
 static int kernfs_fop_mmap(struct file *file, struct vm_area_struct *vma)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kernfs_open_file *of = kernfs_of(file);
 	const struct kernfs_ops *ops;
 	int rc;
@@ -560,6 +600,7 @@ static int kernfs_get_open_node(struct kernfs_node *kn,
 		list_add_tail(&of->list, &on->files);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(&kernfs_open_node_lock);
 	mutex_unlock(&kernfs_open_file_mutex);
 
@@ -571,8 +612,11 @@ static int kernfs_get_open_node(struct kernfs_node *kn,
 	/* not there, initialize a new one and retry */
 	new_on = kmalloc(sizeof(*new_on), GFP_KERNEL);
 	if (!new_on)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&new_on->refcnt, 0);
 	atomic_set(&new_on->event, 1);
 	init_waitqueue_head(&new_on->poll);
@@ -608,6 +652,7 @@ static void kernfs_put_open_node(struct kernfs_node *kn,
 	else
 		on = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&kernfs_open_node_lock, flags);
 	mutex_unlock(&kernfs_open_file_mutex);
 
@@ -624,8 +669,11 @@ static int kernfs_fop_open(struct inode *inode, struct file *file)
 	int error = -EACCES;
 
 	if (!kernfs_get_active(kn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ops = kernfs_ops(kn);
 
 	has_read = ops->seq_show || ops->read || ops->mmap;
@@ -665,7 +713,9 @@ static int kernfs_fop_open(struct inode *inode, struct file *file)
 	 * look that way and give @of->mutex different static lockdep keys.
 	 */
 	if (has_mmap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_init(&of->mutex);
+}
 	else
 		mutex_init(&of->mutex);
 
@@ -687,11 +737,13 @@ static int kernfs_fop_open(struct inode *inode, struct file *file)
 	if (ops->prealloc && ops->seq_show)
 		goto err_free;
 	if (ops->prealloc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int len = of->atomic_write_len ?: PAGE_SIZE;
 		of->prealloc_buf = kmalloc(len + 1, GFP_KERNEL);
 		error = -ENOMEM;
 		if (!of->prealloc_buf)
 			goto err_free;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mutex_init(&of->prealloc_mutex);
 	}
 
@@ -791,28 +843,45 @@ void kernfs_drain_open_files(struct kernfs_node *kn)
 	struct kernfs_open_file *of;
 
 	if (!(kn->flags & (KERNFS_HAS_MMAP | KERNFS_HAS_RELEASE)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&kernfs_open_node_lock);
 	on = kn->attr.open;
 	if (on)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		atomic_inc(&on->refcnt);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(&kernfs_open_node_lock);
 	if (!on)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&kernfs_open_file_mutex);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(of, &on->files, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct inode *inode = file_inode(of->file);
 
 		if (kn->flags & KERNFS_HAS_MMAP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unmap_mapping_range(inode->i_mapping, 0, 0, 1);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (kn->flags & KERNFS_HAS_RELEASE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kernfs_release_file(kn, of);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&kernfs_open_file_mutex);
 
 	kernfs_put_open_node(kn, NULL);
@@ -834,6 +903,7 @@ void kernfs_drain_open_files(struct kernfs_node *kn)
  */
 static unsigned int kernfs_fop_poll(struct file *filp, poll_table *wait)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kernfs_open_file *of = kernfs_of(filp);
 	struct kernfs_node *kn = kernfs_dentry_node(filp->f_path.dentry);
 	struct kernfs_open_node *on = kn->attr.open;
@@ -848,6 +918,7 @@ static unsigned int kernfs_fop_poll(struct file *filp, poll_table *wait)
 	if (of->event != atomic_read(&on->event))
 		goto trigger;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return DEFAULT_POLLMASK;
 
  trigger:
@@ -935,6 +1006,7 @@ void kernfs_notify(struct kernfs_node *kn)
 	static DECLARE_WORK(kernfs_notify_work, kernfs_notify_workfn);
 	unsigned long flags;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON(kernfs_type(kn) != KERNFS_FILE))
 		return;
 
@@ -988,7 +1060,9 @@ struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
 
 	kn = kernfs_new_node(parent, name, (mode & S_IALLUGO) | S_IFREG, flags);
 	if (!kn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	kn->attr.ops = ops;
 	kn->attr.size = size;
@@ -1016,8 +1090,10 @@ struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
 
 	rc = kernfs_add_one(kn);
 	if (rc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kernfs_put(kn);
 		return ERR_PTR(rc);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return kn;
 }
diff --git a/fs/kernfs/inode.c b/fs/kernfs/inode.c
index a343039..1afc82d 100644
--- a/fs/kernfs/inode.c
+++ b/fs/kernfs/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/kernfs/inode.c - kernfs inode implementation
  *
@@ -45,6 +47,7 @@ static struct kernfs_iattrs *kernfs_iattrs(struct kernfs_node *kn)
 	kn->iattr = kzalloc(sizeof(struct kernfs_iattrs), GFP_KERNEL);
 	if (!kn->iattr)
 		goto out_unlock;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iattrs = &kn->iattr->ia_iattr;
 
 	/* assign default attributes */
@@ -71,16 +74,25 @@ static int __kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr)
 
 	attrs = kernfs_iattrs(kn);
 	if (!attrs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iattrs = &attrs->ia_iattr;
 
 	if (ia_valid & ATTR_UID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iattrs->ia_uid = iattr->ia_uid;
+}
 	if (ia_valid & ATTR_GID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iattrs->ia_gid = iattr->ia_gid;
+}
 	if (ia_valid & ATTR_ATIME)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iattrs->ia_atime = iattr->ia_atime;
+}
 	if (ia_valid & ATTR_MTIME)
 		iattrs->ia_mtime = iattr->ia_mtime;
 	if (ia_valid & ATTR_CTIME)
@@ -89,6 +101,7 @@ static int __kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr)
 		umode_t mode = iattr->ia_mode;
 		iattrs->ia_mode = kn->mode = mode;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -111,12 +124,15 @@ int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr)
 
 int kernfs_iop_setattr(struct dentry *dentry, struct iattr *iattr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	struct kernfs_node *kn = inode->i_private;
 	int error;
 
 	if (!kn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	mutex_lock(&kernfs_mutex);
 	error = setattr_prepare(dentry, iattr);
@@ -154,6 +170,7 @@ static int kernfs_node_setsecdata(struct kernfs_iattrs *attrs, void **secdata,
 
 ssize_t kernfs_iop_listxattr(struct dentry *dentry, char *buf, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kernfs_node *kn = kernfs_dentry_node(dentry);
 	struct kernfs_iattrs *attrs;
 
@@ -294,7 +311,9 @@ int kernfs_iop_permission(struct inode *inode, int mask)
 	struct kernfs_node *kn;
 
 	if (mask & MAY_NOT_BLOCK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ECHILD;
+}
 
 	kn = inode->i_private;
 
@@ -315,7 +334,9 @@ static int kernfs_xattr_get(const struct xattr_handler *handler,
 
 	attrs = kernfs_iattrs(kn);
 	if (!attrs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	return simple_xattr_get(&attrs->xattrs, name, value, size);
 }
@@ -325,6 +346,7 @@ static int kernfs_xattr_set(const struct xattr_handler *handler,
 			    const char *suffix, const void *value,
 			    size_t size, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const char *name = xattr_full_name(handler, suffix);
 	struct kernfs_node *kn = inode->i_private;
 	struct kernfs_iattrs *attrs;
@@ -355,7 +377,9 @@ static int kernfs_security_xattr_set(const struct xattr_handler *handler,
 
 	attrs = kernfs_iattrs(kn);
 	if (!attrs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	error = security_inode_setsecurity(inode, suffix, value, size, flags);
 	if (error)
diff --git a/fs/kernfs/kernfs-internal.h b/fs/kernfs/kernfs-internal.h
index 0f260dc..2162ad9 100644
--- a/fs/kernfs/kernfs-internal.h
+++ b/fs/kernfs/kernfs-internal.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/kernfs/kernfs-internal.h - kernfs internal header file
  *
diff --git a/fs/kernfs/mount.c b/fs/kernfs/mount.c
index 95a7c88..c6bea11 100644
--- a/fs/kernfs/mount.c
+++ b/fs/kernfs/mount.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/kernfs/mount.c - kernfs mount implementation
  *
@@ -27,6 +29,7 @@ static int kernfs_sop_remount_fs(struct super_block *sb, int *flags, char *data)
 	struct kernfs_root *root = kernfs_info(sb)->root;
 	struct kernfs_syscall_ops *scops = root->syscall_ops;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (scops && scops->remount_fs)
 		return scops->remount_fs(root, flags, data);
 	return 0;
@@ -39,6 +42,7 @@ static int kernfs_sop_show_options(struct seq_file *sf, struct dentry *dentry)
 
 	if (scops && scops->show_options)
 		return scops->show_options(sf, root);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -76,7 +80,9 @@ struct kernfs_node *kernfs_get_node_by_id(struct kernfs_root *root,
 
 	kn = kernfs_find_and_get_node_by_ino(root, id->ino);
 	if (!kn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	if (kn->id.generation != id->generation) {
 		kernfs_put(kn);
 		return NULL;
@@ -92,7 +98,9 @@ static struct inode *kernfs_fh_get_inode(struct super_block *sb,
 	struct kernfs_node *kn;
 
 	if (ino == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ESTALE);
+}
 
 	kn = kernfs_find_and_get_node_by_ino(info->root, ino);
 	if (!kn)
@@ -113,6 +121,7 @@ static struct inode *kernfs_fh_get_inode(struct super_block *sb,
 static struct dentry *kernfs_fh_to_dentry(struct super_block *sb, struct fid *fid,
 		int fh_len, int fh_type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return generic_fh_to_dentry(sb, fid, fh_len, fh_type,
 				    kernfs_fh_get_inode);
 }
@@ -120,12 +129,14 @@ static struct dentry *kernfs_fh_to_dentry(struct super_block *sb, struct fid *fi
 static struct dentry *kernfs_fh_to_parent(struct super_block *sb, struct fid *fid,
 		int fh_len, int fh_type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return generic_fh_to_parent(sb, fid, fh_len, fh_type,
 				    kernfs_fh_get_inode);
 }
 
 static struct dentry *kernfs_get_parent_dentry(struct dentry *child)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kernfs_node *kn = kernfs_dentry_node(child);
 
 	return d_obtain_alias(kernfs_get_inode(child->d_sb, kn->parent));
@@ -146,6 +157,7 @@ static const struct export_operations kernfs_export_ops = {
  */
 struct kernfs_root *kernfs_root_from_sb(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sb->s_op == &kernfs_sops)
 		return kernfs_info(sb)->root;
 	return NULL;
@@ -162,6 +174,7 @@ struct kernfs_root *kernfs_root_from_sb(struct super_block *sb)
 static struct kernfs_node *find_next_ancestor(struct kernfs_node *child,
 					      struct kernfs_node *parent)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (child == parent) {
 		pr_crit_once("BUG in find_next_ancestor: called with parent == child");
 		return NULL;
@@ -187,6 +200,7 @@ struct dentry *kernfs_node_dentry(struct kernfs_node *kn,
 	struct dentry *dentry;
 	struct kernfs_node *knparent = NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(sb->s_op != &kernfs_sops);
 
 	dentry = dget(sb->s_root);
@@ -241,6 +255,7 @@ static int kernfs_fill_super(struct super_block *sb, unsigned long magic)
 	inode = kernfs_get_inode(sb, info->root->kn);
 	mutex_unlock(&kernfs_mutex);
 	if (!inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("kernfs: could not get root inode\n");
 		return -ENOMEM;
 	}
@@ -248,6 +263,7 @@ static int kernfs_fill_super(struct super_block *sb, unsigned long magic)
 	/* instantiate and link root dentry */
 	root = d_make_root(inode);
 	if (!root) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_debug("%s: could not get root dentry!\n", __func__);
 		return -ENOMEM;
 	}
@@ -312,7 +328,9 @@ struct dentry *kernfs_mount_ns(struct file_system_type *fs_type, int flags,
 
 	info = kzalloc(sizeof(*info), GFP_KERNEL);
 	if (!info)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	info->root = root;
 	info->ns = ns;
@@ -322,7 +340,9 @@ struct dentry *kernfs_mount_ns(struct file_system_type *fs_type, int flags,
 	if (IS_ERR(sb) || sb->s_fs_info != info)
 		kfree(info);
 	if (IS_ERR(sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(sb);
+}
 
 	if (new_sb_created)
 		*new_sb_created = !sb->s_root;
@@ -332,6 +352,7 @@ struct dentry *kernfs_mount_ns(struct file_system_type *fs_type, int flags,
 
 		error = kernfs_fill_super(sb, magic);
 		if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			deactivate_locked_super(sb);
 			return ERR_PTR(error);
 		}
@@ -387,6 +408,7 @@ struct super_block *kernfs_pin_sb(struct kernfs_root *root, const void *ns)
 	struct super_block *sb = NULL;
 
 	mutex_lock(&kernfs_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(info, &root->supers, node) {
 		if (info->ns == ns) {
 			sb = info->sb;
diff --git a/fs/kernfs/symlink.c b/fs/kernfs/symlink.c
index 08ccabd..c13654d 100644
--- a/fs/kernfs/symlink.c
+++ b/fs/kernfs/symlink.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/kernfs/symlink.c - kernfs symlink implementation
  *
@@ -31,7 +33,9 @@ struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
 
 	kn = kernfs_new_node(parent, name, S_IFLNK|S_IRWXUGO, KERNFS_LINK);
 	if (!kn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	if (kernfs_ns_enabled(parent))
 		kn->ns = target->ns;
@@ -40,8 +44,11 @@ struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
 
 	error = kernfs_add_one(kn);
 	if (!error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return kn;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kernfs_put(kn);
 	return ERR_PTR(error);
 }
@@ -63,6 +70,7 @@ static int kernfs_get_target_path(struct kernfs_node *parent,
 		if (base == kn)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		strcpy(s, "../");
 		s += 3;
 		base = base->parent;
@@ -77,10 +85,14 @@ static int kernfs_get_target_path(struct kernfs_node *parent,
 
 	/* check limits */
 	if (len < 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	len--;
 	if ((s - path) + len > PATH_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENAMETOOLONG;
+}
 
 	/* reverse fillup of target string from target to base */
 	kn = target;
@@ -95,6 +107,7 @@ static int kernfs_get_target_path(struct kernfs_node *parent,
 		kn = kn->parent;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -120,15 +133,21 @@ static const char *kernfs_iop_get_link(struct dentry *dentry,
 	int error;
 
 	if (!dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ECHILD);
+}
 	body = kzalloc(PAGE_SIZE, GFP_KERNEL);
 	if (!body)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 	error = kernfs_getlink(inode, body);
 	if (unlikely(error < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(body);
 		return ERR_PTR(error);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	set_delayed_call(done, kfree_link, body);
 	return body;
 }
diff --git a/fs/libfs.c b/fs/libfs.c
index 3aabe55..a38acce 100644
--- a/fs/libfs.c
+++ b/fs/libfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *	fs/libfs.c
  *	Library for filesystems writers.
@@ -24,6 +26,7 @@
 int simple_getattr(const struct path *path, struct kstat *stat,
 		   u32 request_mask, unsigned int query_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(path->dentry);
 	generic_fillattr(inode, stat);
 	stat->blocks = inode->i_mapping->nrpages << (PAGE_SHIFT - 9);
@@ -62,7 +65,9 @@ EXPORT_SYMBOL(simple_dentry_operations);
 struct dentry *simple_lookup(struct inode *dir, struct dentry *dentry, unsigned int flags)
 {
 	if (dentry->d_name.len > NAME_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENAMETOOLONG);
+}
 	if (!dentry->d_sb->s_d_op)
 		d_set_d_op(dentry, &simple_dentry_operations);
 	d_add(dentry, NULL);
@@ -105,12 +110,15 @@ static struct dentry *next_positive(struct dentry *parent,
 	for (p = from->next; p != &parent->d_subdirs; p = p->next) {
 		struct dentry *d = list_entry(p, struct dentry, d_child);
 		if (!simple_positive(d)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			skipped = true;
 		} else if (!--i) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			res = d;
 			break;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	if (skipped) {
 		smp_rmb();
@@ -129,6 +137,7 @@ static void move_cursor(struct dentry *cursor, struct list_head *after)
 		n = *seq;
 		if (!(n & 1) && cmpxchg(seq, n, n + 1) == n)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpu_relax();
 	}
 	__list_del(cursor->d_child.prev, cursor->d_child.next);
@@ -137,6 +146,7 @@ static void move_cursor(struct dentry *cursor, struct list_head *after)
 	else
 		list_add_tail(&cursor->d_child, &parent->d_subdirs);
 	smp_store_release(seq, n + 2);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&parent->d_lock);
 }
 
@@ -161,10 +171,12 @@ loff_t dcache_dir_lseek(struct file *file, loff_t offset, int whence)
 
 			inode_lock_shared(dentry->d_inode);
 			to = next_positive(dentry, &dentry->d_subdirs, n);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			move_cursor(cursor, to ? &to->d_child : NULL);
 			inode_unlock_shared(dentry->d_inode);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return offset;
 }
 EXPORT_SYMBOL(dcache_dir_lseek);
@@ -190,7 +202,9 @@ int dcache_readdir(struct file *file, struct dir_context *ctx)
 	bool moved = false;
 
 	if (!dir_emit_dots(file, ctx))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (ctx->pos == 2)
 		p = &dentry->d_subdirs;
@@ -198,12 +212,14 @@ int dcache_readdir(struct file *file, struct dir_context *ctx)
 		if (!dir_emit(ctx, next->d_name.name, next->d_name.len,
 			      d_inode(next)->i_ino, dt_type(d_inode(next))))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		moved = true;
 		p = &next->d_child;
 		ctx->pos++;
 	}
 	if (moved)
 		move_cursor(cursor, p);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(dcache_readdir);
@@ -249,7 +265,9 @@ struct dentry *mount_pseudo_xattr(struct file_system_type *fs_type, char *name,
 	s = sget_userns(fs_type, NULL, set_anon_super, MS_KERNMOUNT|MS_NOUSER,
 			&init_user_ns, NULL);
 	if (IS_ERR(s))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(s);
+}
 
 	s->s_maxbytes = MAX_LFS_FILESIZE;
 	s->s_blocksize = PAGE_SIZE;
@@ -271,6 +289,7 @@ struct dentry *mount_pseudo_xattr(struct file_system_type *fs_type, char *name,
 	root->i_atime = root->i_mtime = root->i_ctime = current_time(root);
 	dentry = __d_alloc(s, &d_name);
 	if (!dentry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iput(root);
 		goto Enomem;
 	}
@@ -288,6 +307,7 @@ EXPORT_SYMBOL(mount_pseudo_xattr);
 
 int simple_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (inode->i_private)
 		file->private_data = inode->i_private;
 	return 0;
@@ -296,6 +316,7 @@ EXPORT_SYMBOL(simple_open);
 
 int simple_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(old_dentry);
 
 	inode->i_ctime = dir->i_ctime = dir->i_mtime = current_time(inode);
@@ -316,11 +337,14 @@ int simple_empty(struct dentry *dentry)
 	list_for_each_entry(child, &dentry->d_subdirs, d_child) {
 		spin_lock_nested(&child->d_lock, DENTRY_D_LOCK_NESTED);
 		if (simple_positive(child)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&child->d_lock);
 			goto out;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&child->d_lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = 1;
 out:
 	spin_unlock(&dentry->d_lock);
@@ -330,6 +354,7 @@ EXPORT_SYMBOL(simple_empty);
 
 int simple_unlink(struct inode *dir, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 
 	inode->i_ctime = dir->i_ctime = dir->i_mtime = current_time(inode);
@@ -341,6 +366,7 @@ EXPORT_SYMBOL(simple_unlink);
 
 int simple_rmdir(struct inode *dir, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!simple_empty(dentry))
 		return -ENOTEMPTY;
 
@@ -355,6 +381,7 @@ int simple_rename(struct inode *old_dir, struct dentry *old_dentry,
 		  struct inode *new_dir, struct dentry *new_dentry,
 		  unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(old_dentry);
 	int they_are_dirs = d_is_dir(old_dentry);
 
@@ -398,15 +425,20 @@ EXPORT_SYMBOL(simple_rename);
  */
 int simple_setattr(struct dentry *dentry, struct iattr *iattr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	int error;
 
 	error = setattr_prepare(dentry, iattr);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	if (iattr->ia_valid & ATTR_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		truncate_setsize(inode, iattr->ia_size);
+}
 	setattr_copy(inode, iattr);
 	mark_inode_dirty(inode);
 	return 0;
@@ -415,6 +447,7 @@ EXPORT_SYMBOL(simple_setattr);
 
 int simple_readpage(struct file *file, struct page *page)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clear_highpage(page);
 	flush_dcache_page(page);
 	SetPageUptodate(page);
@@ -434,7 +467,9 @@ int simple_write_begin(struct file *file, struct address_space *mapping,
 
 	page = grab_cache_page_write_begin(mapping, index, flags);
 	if (!page)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	*pagep = page;
 
@@ -479,6 +514,7 @@ int simple_write_end(struct file *file, struct address_space *mapping,
 
 	/* zero the stale part of the page if we did a short copy */
 	if (!PageUptodate(page)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copied < len) {
 			unsigned from = pos & (PAGE_SIZE - 1);
 
@@ -522,7 +558,9 @@ int simple_fill_super(struct super_block *s, unsigned long magic,
 
 	inode = new_inode(s);
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	/*
 	 * because the root inode is 1, the files array must not contain an
 	 * entry at index 1
@@ -535,22 +573,27 @@ int simple_fill_super(struct super_block *s, unsigned long magic,
 	set_nlink(inode, 2);
 	root = d_make_root(inode);
 	if (!root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	for (i = 0; !files->name || files->name[0]; i++, files++) {
 		if (!files->name)
 			continue;
 
 		/* warn if it tries to conflict with the root inode */
 		if (unlikely(i == 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_WARNING "%s: %s passed in a files array"
 				"with an index of 1!\n", __func__,
 				s->s_type->name);
+}
 
 		dentry = d_alloc_name(root, files->name);
 		if (!dentry)
 			goto out;
 		inode = new_inode(s);
 		if (!inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dput(dentry);
 			goto out;
 		}
@@ -577,10 +620,14 @@ int simple_pin_fs(struct file_system_type *type, struct vfsmount **mount, int *c
 	struct vfsmount *mnt = NULL;
 	spin_lock(&pin_fs_lock);
 	if (unlikely(!*mount)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&pin_fs_lock);
 		mnt = vfs_kern_mount(type, MS_KERNMOUNT, type->name, NULL);
 		if (IS_ERR(mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return PTR_ERR(mnt);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&pin_fs_lock);
 		if (!*mount)
 			*mount = mnt;
@@ -599,7 +646,9 @@ void simple_release_fs(struct vfsmount **mount, int *count)
 	spin_lock(&pin_fs_lock);
 	mnt = *mount;
 	if (!--*count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*mount = NULL;
+}
 	spin_unlock(&pin_fs_lock);
 	mntput(mnt);
 }
@@ -626,14 +675,22 @@ ssize_t simple_read_from_buffer(void __user *to, size_t count, loff_t *ppos,
 	size_t ret;
 
 	if (pos < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (pos >= available || !count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (count > available - pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = available - pos;
+}
 	ret = copy_to_user(to, from + pos, count);
 	if (ret == count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	count -= ret;
 	*ppos = pos + count;
 	return count;
@@ -661,7 +718,9 @@ ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
 	size_t res;
 
 	if (pos < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (pos >= available || !count)
 		return 0;
 	if (count > available - pos)
@@ -695,7 +754,9 @@ ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
 	loff_t pos = *ppos;
 
 	if (pos < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (pos >= available)
 		return 0;
 	if (count > available - pos)
@@ -718,6 +779,7 @@ void simple_transaction_set(struct file *file, size_t n)
 {
 	struct simple_transaction_argresp *ar = file->private_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(n > SIMPLE_TRANSACTION_LIMIT);
 
 	/*
@@ -735,7 +797,9 @@ char *simple_transaction_get(struct file *file, const char __user *buf, size_t s
 	static DEFINE_SPINLOCK(simple_transaction_lock);
 
 	if (size > SIMPLE_TRANSACTION_LIMIT - 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EFBIG);
+}
 
 	ar = (struct simple_transaction_argresp *)get_zeroed_page(GFP_KERNEL);
 	if (!ar)
@@ -766,13 +830,16 @@ ssize_t simple_transaction_read(struct file *file, char __user *buf, size_t size
 	struct simple_transaction_argresp *ar = file->private_data;
 
 	if (!ar)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return simple_read_from_buffer(buf, size, pos, ar->data, ar->size);
 }
 EXPORT_SYMBOL(simple_transaction_read);
 
 int simple_transaction_release(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	free_page((unsigned long)file->private_data);
 	return 0;
 }
@@ -800,7 +867,9 @@ int simple_attr_open(struct inode *inode, struct file *file,
 
 	attr = kmalloc(sizeof(*attr), GFP_KERNEL);
 	if (!attr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	attr->get = get;
 	attr->set = set;
@@ -816,6 +885,7 @@ EXPORT_SYMBOL_GPL(simple_attr_open);
 
 int simple_attr_release(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(file->private_data);
 	return 0;
 }
@@ -832,7 +902,9 @@ ssize_t simple_attr_read(struct file *file, char __user *buf,
 	attr = file->private_data;
 
 	if (!attr->get)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;
+}
 
 	ret = mutex_lock_interruptible(&attr->mutex);
 	if (ret)
@@ -868,7 +940,9 @@ ssize_t simple_attr_write(struct file *file, const char __user *buf,
 
 	attr = file->private_data;
 	if (!attr->set)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;
+}
 
 	ret = mutex_lock_interruptible(&attr->mutex);
 	if (ret)
@@ -909,7 +983,9 @@ struct dentry *generic_fh_to_dentry(struct super_block *sb, struct fid *fid,
 	struct inode *inode = NULL;
 
 	if (fh_len < 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	switch (fh_type) {
 	case FILEID_INO32_GEN:
@@ -942,7 +1018,9 @@ struct dentry *generic_fh_to_parent(struct super_block *sb, struct fid *fid,
 	struct inode *inode = NULL;
 
 	if (fh_len <= 2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	switch (fh_type) {
 	case FILEID_INO32_GEN_PARENT:
@@ -976,7 +1054,9 @@ int __generic_file_fsync(struct file *file, loff_t start, loff_t end,
 
 	err = file_write_and_wait_range(file, start, end);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	inode_lock(inode);
 	ret = sync_mapping_buffers(inode->i_mapping);
@@ -1017,7 +1097,9 @@ int generic_file_fsync(struct file *file, loff_t start, loff_t end,
 
 	err = __generic_file_fsync(file, start, end, datasync);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 	return blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL, NULL);
 }
 EXPORT_SYMBOL(generic_file_fsync);
@@ -1038,7 +1120,9 @@ int generic_check_addressable(unsigned blocksize_bits, u64 num_blocks)
 		last_fs_block >> (PAGE_SHIFT - blocksize_bits);
 
 	if (unlikely(num_blocks == 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if ((blocksize_bits < 9) || (blocksize_bits > PAGE_SHIFT))
 		return -EINVAL;
@@ -1073,6 +1157,7 @@ EXPORT_SYMBOL(kfree_link);
  */
 static int anon_set_page_dirty(struct page *page)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 };
 
@@ -1089,7 +1174,9 @@ struct inode *alloc_anon_inode(struct super_block *s)
 	struct inode *inode = new_inode_pseudo(s);
 
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	inode->i_ino = get_next_ino();
 	inode->i_mapping->a_ops = &anon_aops;
@@ -1124,6 +1211,7 @@ int
 simple_nosetlease(struct file *filp, long arg, struct file_lock **flp,
 		  void **priv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EINVAL;
 }
 EXPORT_SYMBOL(simple_nosetlease);
@@ -1145,6 +1233,7 @@ EXPORT_SYMBOL(simple_symlink_inode_operations);
  */
 static struct dentry *empty_dir_lookup(struct inode *dir, struct dentry *dentry, unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(-ENOENT);
 }
 
@@ -1158,11 +1247,13 @@ static int empty_dir_getattr(const struct path *path, struct kstat *stat,
 
 static int empty_dir_setattr(struct dentry *dentry, struct iattr *attr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EPERM;
 }
 
 static ssize_t empty_dir_listxattr(struct dentry *dentry, char *list, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EOPNOTSUPP;
 }
 
@@ -1182,6 +1273,7 @@ static loff_t empty_dir_llseek(struct file *file, loff_t offset, int whence)
 
 static int empty_dir_readdir(struct file *file, struct dir_context *ctx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dir_emit_dots(file, ctx);
 	return 0;
 }
@@ -1212,6 +1304,7 @@ void make_empty_dir_inode(struct inode *inode)
 
 bool is_empty_dir_inode(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (inode->i_fop == &empty_dir_operations) &&
 		(inode->i_op == &empty_dir_inode_operations);
 }
diff --git a/fs/locks.c b/fs/locks.c
index 1bd71c4..d5cc672 100644
--- a/fs/locks.c
+++ b/fs/locks.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/locks.c
  *
@@ -141,16 +143,19 @@
 
 static inline bool is_remote_lock(struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return likely(!(filp->f_path.dentry->d_sb->s_flags & MS_NOREMOTELOCK));
 }
 
 static bool lease_breaking(struct file_lock *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fl->fl_flags & (FL_UNLOCK_PENDING | FL_DOWNGRADE_PENDING);
 }
 
 static int target_leasetype(struct file_lock *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (fl->fl_flags & FL_UNLOCK_PENDING)
 		return F_UNLCK;
 	if (fl->fl_flags & FL_DOWNGRADE_PENDING)
@@ -236,7 +241,9 @@ locks_get_lock_context(struct inode *inode, int type)
 	 * free the context we just allocated.
 	 */
 	if (cmpxchg(&inode->i_flctx, NULL, ctx)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kmem_cache_free(flctx_cache, ctx);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ctx = smp_load_acquire(&inode->i_flctx);
 	}
 out:
@@ -249,6 +256,7 @@ locks_dump_ctx_list(struct list_head *list, char *list_type)
 {
 	struct file_lock *fl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(fl, list, fl_list) {
 		pr_warn("%s: fl_owner=%p fl_flags=0x%x fl_type=0x%x fl_pid=%u\n", list_type, fl->fl_owner, fl->fl_flags, fl->fl_type, fl->fl_pid);
 	}
@@ -262,6 +270,7 @@ locks_check_ctx_lists(struct inode *inode)
 	if (unlikely(!list_empty(&ctx->flc_flock) ||
 		     !list_empty(&ctx->flc_posix) ||
 		     !list_empty(&ctx->flc_lease))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_warn("Leaked locks on dev=0x%x:0x%x ino=0x%lx:\n",
 			MAJOR(inode->i_sb->s_dev), MINOR(inode->i_sb->s_dev),
 			inode->i_ino);
@@ -280,12 +289,14 @@ locks_check_ctx_file_list(struct file *filp, struct list_head *list,
 
 	list_for_each_entry(fl, list, fl_list)
 		if (fl->fl_file == filp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_warn("Leaked %s lock on dev=0x%x:0x%x ino=0x%lx "
 				" fl_owner=%p fl_flags=0x%x fl_type=0x%x fl_pid=%u\n",
 				list_type, MAJOR(inode->i_sb->s_dev),
 				MINOR(inode->i_sb->s_dev), inode->i_ino,
 				fl->fl_owner, fl->fl_flags, fl->fl_type, fl->fl_pid);
 }
+}
 
 void
 locks_free_lock_context(struct inode *inode)
@@ -300,6 +311,7 @@ locks_free_lock_context(struct inode *inode)
 
 static void locks_init_lock_heads(struct file_lock *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_HLIST_NODE(&fl->fl_link);
 	INIT_LIST_HEAD(&fl->fl_list);
 	INIT_LIST_HEAD(&fl->fl_block);
@@ -321,16 +333,23 @@ EXPORT_SYMBOL_GPL(locks_alloc_lock);
 void locks_release_private(struct file_lock *fl)
 {
 	if (fl->fl_ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fl->fl_ops->fl_release_private)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fl->fl_ops->fl_release_private(fl);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl->fl_ops = NULL;
 	}
 
 	if (fl->fl_lmops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fl->fl_lmops->lm_put_owner) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fl->fl_lmops->lm_put_owner(fl->fl_owner);
 			fl->fl_owner = NULL;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl->fl_lmops = NULL;
 	}
 }
@@ -363,6 +382,7 @@ locks_dispose_list(struct list_head *dispose)
 
 void locks_init_lock(struct file_lock *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(fl, 0, sizeof(struct file_lock));
 	locks_init_lock_heads(fl);
 }
@@ -385,8 +405,11 @@ void locks_copy_conflock(struct file_lock *new, struct file_lock *fl)
 	new->fl_ops = NULL;
 
 	if (fl->fl_lmops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fl->fl_lmops->lm_get_owner)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fl->fl_lmops->lm_get_owner(fl->fl_owner);
+}
 	}
 }
 EXPORT_SYMBOL(locks_copy_conflock);
@@ -402,8 +425,11 @@ void locks_copy_lock(struct file_lock *new, struct file_lock *fl)
 	new->fl_ops = fl->fl_ops;
 
 	if (fl->fl_ops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fl->fl_ops->fl_copy_lock)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fl->fl_ops->fl_copy_lock(new, fl);
+}
 	}
 }
 
@@ -411,7 +437,9 @@ EXPORT_SYMBOL(locks_copy_lock);
 
 static inline int flock_translate_cmd(int cmd) {
 	if (cmd & LOCK_MAND)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return cmd & (LOCK_MAND | LOCK_RW);
+}
 	switch (cmd) {
 	case LOCK_SH:
 		return F_RDLCK;
@@ -420,6 +448,7 @@ static inline int flock_translate_cmd(int cmd) {
 	case LOCK_UN:
 		return F_UNLCK;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EINVAL;
 }
 
@@ -431,11 +460,15 @@ flock_make_lock(struct file *filp, unsigned int cmd)
 	int type = flock_translate_cmd(cmd);
 
 	if (type < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(type);
+}
 	
 	fl = locks_alloc_lock();
 	if (fl == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	fl->fl_file = filp;
 	fl->fl_owner = filp;
@@ -458,6 +491,7 @@ static int assign_type(struct file_lock *fl, long type)
 	default:
 		return -EINVAL;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -478,21 +512,31 @@ static int flock64_to_posix_lock(struct file *filp, struct file_lock *fl,
 		return -EINVAL;
 	}
 	if (l->l_start > OFFSET_MAX - fl->fl_start)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOVERFLOW;
+}
 	fl->fl_start += l->l_start;
 	if (fl->fl_start < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* POSIX-1996 leaves the case l->l_len < 0 undefined;
 	   POSIX-2001 defines it. */
 	if (l->l_len > 0) {
 		if (l->l_len - 1 > OFFSET_MAX - fl->fl_start)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EOVERFLOW;
+}
 		fl->fl_end = fl->fl_start + l->l_len - 1;
 
 	} else if (l->l_len < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fl->fl_start + l->l_len < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl->fl_end = fl->fl_start - 1;
 		fl->fl_start += l->l_len;
 	} else
@@ -528,6 +572,7 @@ static int flock_to_posix_lock(struct file *filp, struct file_lock *fl,
 static bool
 lease_break_callback(struct file_lock *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kill_fasync(&fl->fl_fasync, SIGIO, POLL_MSG);
 	return false;
 }
@@ -544,7 +589,9 @@ lease_setup(struct file_lock *fl, void **priv)
 	 * Clear the pointer to indicate that it shouldn't be freed.
 	 */
 	if (!fasync_insert_entry(fa->fa_fd, filp, &fl->fl_fasync, fa))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*priv = NULL;
+}
 
 	__f_setown(filp, task_pid(current), PIDTYPE_PID, 0);
 }
@@ -560,6 +607,7 @@ static const struct lock_manager_operations lease_manager_ops = {
  */
 static int lease_init(struct file *filp, long type, struct file_lock *fl)
  {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (assign_type(fl, type) != 0)
 		return -EINVAL;
 
@@ -578,6 +626,7 @@ static int lease_init(struct file *filp, long type, struct file_lock *fl)
 /* Allocate a file_lock initialised to this type of lease */
 static struct file_lock *lease_alloc(struct file *filp, long type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct file_lock *fl = locks_alloc_lock();
 	int error = -ENOMEM;
 
@@ -596,6 +645,7 @@ static struct file_lock *lease_alloc(struct file *filp, long type)
  */
 static inline int locks_overlap(struct file_lock *fl1, struct file_lock *fl2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ((fl1->fl_end >= fl2->fl_start) &&
 		(fl2->fl_end >= fl1->fl_start));
 }
@@ -606,8 +656,10 @@ static inline int locks_overlap(struct file_lock *fl1, struct file_lock *fl2)
 static int posix_same_owner(struct file_lock *fl1, struct file_lock *fl2)
 {
 	if (fl1->fl_lmops && fl1->fl_lmops->lm_compare_owner)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return fl2->fl_lmops == fl1->fl_lmops &&
 			fl1->fl_lmops->lm_compare_owner(fl1, fl2);
+}
 	return fl1->fl_owner == fl2->fl_owner;
 }
 
@@ -616,8 +668,10 @@ static void locks_insert_global_locks(struct file_lock *fl)
 {
 	struct file_lock_list_struct *fll = this_cpu_ptr(&file_lock_list);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	percpu_rwsem_assert_held(&file_rwsem);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&fll->lock);
 	fl->fl_link_cpu = smp_processor_id();
 	hlist_add_head(&fl->fl_link, &fll->hlist);
@@ -629,6 +683,7 @@ static void locks_delete_global_locks(struct file_lock *fl)
 {
 	struct file_lock_list_struct *fll;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	percpu_rwsem_assert_held(&file_rwsem);
 
 	/*
@@ -637,7 +692,9 @@ static void locks_delete_global_locks(struct file_lock *fl)
 	 * also require that it be held.
 	 */
 	if (hlist_unhashed(&fl->fl_link))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	fll = per_cpu_ptr(&file_lock_list, fl->fl_link_cpu);
 	spin_lock(&fll->lock);
@@ -648,6 +705,7 @@ static void locks_delete_global_locks(struct file_lock *fl)
 static unsigned long
 posix_owner_key(struct file_lock *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (fl->fl_lmops && fl->fl_lmops->lm_owner_key)
 		return fl->fl_lmops->lm_owner_key(fl);
 	return (unsigned long)fl->fl_owner;
@@ -655,6 +713,7 @@ posix_owner_key(struct file_lock *fl)
 
 static void locks_insert_global_blocked(struct file_lock *waiter)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&blocked_lock_lock);
 
 	hash_add(blocked_hash, &waiter->fl_link, posix_owner_key(waiter));
@@ -662,6 +721,7 @@ static void locks_insert_global_blocked(struct file_lock *waiter)
 
 static void locks_delete_global_blocked(struct file_lock *waiter)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&blocked_lock_lock);
 
 	hash_del(&waiter->fl_link);
@@ -674,6 +734,7 @@ static void locks_delete_global_blocked(struct file_lock *waiter)
  */
 static void __locks_delete_block(struct file_lock *waiter)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	locks_delete_global_blocked(waiter);
 	list_del_init(&waiter->fl_block);
 	waiter->fl_next = NULL;
@@ -681,6 +742,7 @@ static void __locks_delete_block(struct file_lock *waiter)
 
 static void locks_delete_block(struct file_lock *waiter)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&blocked_lock_lock);
 	__locks_delete_block(waiter);
 	spin_unlock(&blocked_lock_lock);
@@ -699,6 +761,7 @@ static void locks_delete_block(struct file_lock *waiter)
 static void __locks_insert_block(struct file_lock *blocker,
 					struct file_lock *waiter)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(!list_empty(&waiter->fl_block));
 	waiter->fl_next = blocker;
 	list_add_tail(&waiter->fl_block, &blocker->fl_block);
@@ -710,6 +773,7 @@ static void __locks_insert_block(struct file_lock *blocker,
 static void locks_insert_block(struct file_lock *blocker,
 					struct file_lock *waiter)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&blocked_lock_lock);
 	__locks_insert_block(blocker, waiter);
 	spin_unlock(&blocked_lock_lock);
@@ -730,20 +794,29 @@ static void locks_wake_up_blocks(struct file_lock *blocker)
 	 * after acquiring the blocked_lock_lock.
 	 */
 	if (list_empty(&blocker->fl_block))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&blocked_lock_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!list_empty(&blocker->fl_block)) {
 		struct file_lock *waiter;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		waiter = list_first_entry(&blocker->fl_block,
 				struct file_lock, fl_block);
 		__locks_delete_block(waiter);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (waiter->fl_lmops && waiter->fl_lmops->lm_notify)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			waiter->fl_lmops->lm_notify(waiter);
+}
 		else
 			wake_up(&waiter->fl_wait);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&blocked_lock_lock);
 }
 
@@ -777,6 +850,7 @@ locks_delete_lock_ctx(struct file_lock *fl, struct list_head *dispose)
  */
 static int locks_conflict(struct file_lock *caller_fl, struct file_lock *sys_fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sys_fl->fl_type == F_WRLCK)
 		return 1;
 	if (caller_fl->fl_type == F_WRLCK)
@@ -793,12 +867,17 @@ static int posix_locks_conflict(struct file_lock *caller_fl, struct file_lock *s
 	 * each other.
 	 */
 	if (posix_same_owner(caller_fl, sys_fl))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (0);
+}
 
 	/* Check whether they overlap */
 	if (!locks_overlap(caller_fl, sys_fl))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (locks_conflict(caller_fl, sys_fl));
 }
 
@@ -825,6 +904,7 @@ posix_test_lock(struct file *filp, struct file_lock *fl)
 	struct file_lock_context *ctx;
 	struct inode *inode = locks_inode(filp);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ctx = smp_load_acquire(&inode->i_flctx);
 	if (!ctx || list_empty_careful(&ctx->flc_posix)) {
 		fl->fl_type = F_UNLCK;
@@ -885,6 +965,7 @@ static struct file_lock *what_owner_is_waiting_for(struct file_lock *block_fl)
 {
 	struct file_lock *fl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hash_for_each_possible(blocked_hash, fl, fl_link, posix_owner_key(block_fl)) {
 		if (posix_same_owner(fl, block_fl))
 			return fl->fl_next;
@@ -898,6 +979,7 @@ static int posix_locks_deadlock(struct file_lock *caller_fl,
 {
 	int i = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&blocked_lock_lock);
 
 	/*
@@ -934,15 +1016,21 @@ static int flock_lock_inode(struct inode *inode, struct file_lock *request)
 
 	ctx = locks_get_lock_context(inode, request->fl_type);
 	if (!ctx) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (request->fl_type != F_UNLCK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (request->fl_flags & FL_EXISTS) ? -ENOENT : 0;
 	}
 
 	if (!(request->fl_flags & FL_ACCESS) && (request->fl_type != F_UNLCK)) {
 		new_fl = locks_alloc_lock();
 		if (!new_fl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	}
 
 	percpu_down_read_preempt_disable(&file_rwsem);
@@ -955,6 +1043,7 @@ static int flock_lock_inode(struct inode *inode, struct file_lock *request)
 			continue;
 		if (request->fl_type == fl->fl_type)
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		found = true;
 		locks_delete_lock_ctx(fl, &dispose);
 		break;
@@ -962,17 +1051,22 @@ static int flock_lock_inode(struct inode *inode, struct file_lock *request)
 
 	if (request->fl_type == F_UNLCK) {
 		if ((request->fl_flags & FL_EXISTS) && !found)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -ENOENT;
+}
 		goto out;
 	}
 
 find_conflict:
 	list_for_each_entry(fl, &ctx->flc_flock, fl_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!flock_locks_conflict(request, fl))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EAGAIN;
 		if (!(request->fl_flags & FL_SLEEP))
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = FILE_LOCK_DEFERRED;
 		locks_insert_block(fl, request);
 		goto out;
@@ -988,7 +1082,9 @@ static int flock_lock_inode(struct inode *inode, struct file_lock *request)
 	spin_unlock(&ctx->flc_lock);
 	percpu_up_read_preempt_enable(&file_rwsem);
 	if (new_fl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		locks_free_lock(new_fl);
+}
 	locks_dispose_list(&dispose);
 	return error;
 }
@@ -1008,7 +1104,9 @@ static int posix_lock_inode(struct inode *inode, struct file_lock *request,
 
 	ctx = locks_get_lock_context(inode, request->fl_type);
 	if (!ctx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return (request->fl_type == F_UNLCK) ? 0 : -ENOMEM;
+}
 
 	/*
 	 * We may need two file_lock structures for this operation,
@@ -1034,8 +1132,12 @@ static int posix_lock_inode(struct inode *inode, struct file_lock *request,
 		list_for_each_entry(fl, &ctx->flc_posix, fl_list) {
 			if (!posix_locks_conflict(request, fl))
 				continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (conflock)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				locks_copy_conflock(conflock, fl);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -EAGAIN;
 			if (!(request->fl_flags & FL_SLEEP))
 				goto out;
@@ -1046,9 +1148,11 @@ static int posix_lock_inode(struct inode *inode, struct file_lock *request,
 			error = -EDEADLK;
 			spin_lock(&blocked_lock_lock);
 			if (likely(!posix_locks_deadlock(request, fl))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				error = FILE_LOCK_DEFERRED;
 				__locks_insert_block(fl, request);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&blocked_lock_lock);
 			goto out;
   		}
@@ -1098,9 +1202,11 @@ static int posix_lock_inode(struct inode *inode, struct file_lock *request,
 			else
 				request->fl_end = fl->fl_end;
 			if (added) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				locks_delete_lock_ctx(fl, &dispose);
 				continue;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			request = fl;
 			added = true;
 		} else {
@@ -1112,13 +1218,18 @@ static int posix_lock_inode(struct inode *inode, struct file_lock *request,
 			if (fl->fl_start > request->fl_end)
 				break;
 			if (request->fl_type == F_UNLCK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				added = true;
+}
 			if (fl->fl_start < request->fl_start)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				left = fl;
+}
 			/* If the next lock in the list has a higher end
 			 * address than the new one, insert the new one here.
 			 */
 			if (fl->fl_end > request->fl_end) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				right = fl;
 				break;
 			}
@@ -1140,6 +1251,7 @@ static int posix_lock_inode(struct inode *inode, struct file_lock *request,
 				error = -ENOLCK;
 				if (!new_fl)
 					goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				locks_copy_lock(new_fl, request);
 				request = new_fl;
 				new_fl = NULL;
@@ -1159,15 +1271,19 @@ static int posix_lock_inode(struct inode *inode, struct file_lock *request,
 	if (right && left == right && !new_fl2)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = 0;
 	if (!added) {
 		if (request->fl_type == F_UNLCK) {
 			if (request->fl_flags & FL_EXISTS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				error = -ENOENT;
+}
 			goto out;
 		}
 
 		if (!new_fl) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -ENOLCK;
 			goto out;
 		}
@@ -1240,6 +1356,7 @@ EXPORT_SYMBOL(posix_lock_file);
 static int posix_lock_inode_wait(struct inode *inode, struct file_lock *fl)
 {
 	int error;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	might_sleep ();
 	for (;;) {
 		error = posix_lock_inode(inode, fl, NULL);
@@ -1270,6 +1387,7 @@ int locks_mandatory_locked(struct file *file)
 	struct file_lock_context *ctx;
 	struct file_lock *fl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ctx = smp_load_acquire(&inode->i_flctx);
 	if (!ctx || list_empty_careful(&ctx->flc_posix))
 		return 0;
@@ -1311,6 +1429,7 @@ int locks_mandatory_area(struct inode *inode, struct file *filp, loff_t start,
 	fl.fl_pid = current->tgid;
 	fl.fl_file = filp;
 	fl.fl_flags = FL_POSIX | FL_ACCESS;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (filp && !(filp->f_flags & O_NONBLOCK))
 		sleep = true;
 	fl.fl_type = type;
@@ -1354,6 +1473,7 @@ EXPORT_SYMBOL(locks_mandatory_area);
 
 static void lease_clear_pending(struct file_lock *fl, int arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (arg) {
 	case F_UNLCK:
 		fl->fl_flags &= ~FL_UNLOCK_PENDING;
@@ -1366,6 +1486,7 @@ static void lease_clear_pending(struct file_lock *fl, int arg)
 /* We already had a lease on this file; just change its type */
 int lease_modify(struct file_lock *fl, int arg, struct list_head *dispose)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int error = assign_type(fl, arg);
 
 	if (error)
@@ -1390,6 +1511,7 @@ EXPORT_SYMBOL(lease_modify);
 
 static bool past_time(unsigned long then)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!then)
 		/* 0 is a special value meaning "this never expires": */
 		return false;
@@ -1401,6 +1523,7 @@ static void time_out_leases(struct inode *inode, struct list_head *dispose)
 	struct file_lock_context *ctx = inode->i_flctx;
 	struct file_lock *fl, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&ctx->flc_lock);
 
 	list_for_each_entry_safe(fl, tmp, &ctx->flc_lease, fl_list) {
@@ -1414,6 +1537,7 @@ static void time_out_leases(struct inode *inode, struct list_head *dispose)
 
 static bool leases_conflict(struct file_lock *lease, struct file_lock *breaker)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((breaker->fl_flags & FL_LAYOUT) != (lease->fl_flags & FL_LAYOUT))
 		return false;
 	if ((breaker->fl_flags & FL_DELEG) && (lease->fl_flags & FL_LEASE))
@@ -1427,6 +1551,7 @@ any_leases_conflict(struct inode *inode, struct file_lock *breaker)
 	struct file_lock_context *ctx = inode->i_flctx;
 	struct file_lock *fl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_assert_held(&ctx->flc_lock);
 
 	list_for_each_entry(fl, &ctx->flc_lease, fl_list) {
@@ -1458,6 +1583,7 @@ int __break_lease(struct inode *inode, unsigned int mode, unsigned int type)
 	int want_write = (mode & O_ACCMODE) != O_RDONLY;
 	LIST_HEAD(dispose);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	new_fl = lease_alloc(NULL, want_write ? F_WRLCK : F_RDLCK);
 	if (IS_ERR(new_fl))
 		return PTR_ERR(new_fl);
@@ -1568,6 +1694,7 @@ void lease_get_mtime(struct inode *inode, struct timespec *time)
 	struct file_lock_context *ctx;
 	struct file_lock *fl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ctx = smp_load_acquire(&inode->i_flctx);
 	if (ctx && !list_empty_careful(&ctx->flc_lease)) {
 		spin_lock(&ctx->flc_lock);
@@ -1617,6 +1744,7 @@ int fcntl_getlease(struct file *filp)
 	int type = F_UNLCK;
 	LIST_HEAD(dispose);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ctx = smp_load_acquire(&inode->i_flctx);
 	if (ctx && !list_empty_careful(&ctx->flc_lease)) {
 		percpu_down_read_preempt_disable(&file_rwsem);
@@ -1654,7 +1782,9 @@ check_conflicting_open(const struct dentry *dentry, const long arg, int flags)
 	struct inode *inode = dentry->d_inode;
 
 	if (flags & FL_LAYOUT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if ((arg == F_RDLCK) &&
 	    (atomic_read(&d_real_inode(dentry)->i_writecount) > 0))
@@ -1684,7 +1814,9 @@ generic_add_lease(struct file *filp, long arg, struct file_lock **flp, void **pr
 	/* Note that arg is never F_UNLCK here */
 	ctx = locks_get_lock_context(inode, arg);
 	if (!ctx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	/*
 	 * In the delegation case we need mutual exclusion with
@@ -1792,6 +1924,7 @@ static int generic_delete_lease(struct file *filp, void *owner)
 	struct file_lock_context *ctx;
 	LIST_HEAD(dispose);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ctx = smp_load_acquire(&inode->i_flctx);
 	if (!ctx) {
 		trace_generic_delete_lease(inode, NULL);
@@ -1830,6 +1963,7 @@ static int generic_delete_lease(struct file *filp, void *owner)
 int generic_setlease(struct file *filp, long arg, struct file_lock **flp,
 			void **priv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = locks_inode(filp);
 	int error;
 
@@ -1878,6 +2012,7 @@ EXPORT_SYMBOL(generic_setlease);
 int
 vfs_setlease(struct file *filp, long arg, struct file_lock **lease, void **priv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (filp->f_op->setlease && is_remote_lock(filp))
 		return filp->f_op->setlease(filp, arg, lease, priv);
 	else
@@ -1893,7 +2028,9 @@ static int do_fcntl_add_lease(unsigned int fd, struct file *filp, long arg)
 
 	fl = lease_alloc(filp, arg);
 	if (IS_ERR(fl))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(fl);
+}
 
 	new = fasync_alloc();
 	if (!new) {
@@ -1922,6 +2059,7 @@ static int do_fcntl_add_lease(unsigned int fd, struct file *filp, long arg)
  */
 int fcntl_setlease(unsigned int fd, struct file *filp, long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (arg == F_UNLCK)
 		return vfs_setlease(filp, F_UNLCK, NULL, (void **)&filp);
 	return do_fcntl_add_lease(fd, filp, arg);
@@ -1942,10 +2080,12 @@ static int flock_lock_inode_wait(struct inode *inode, struct file_lock *fl)
 		error = flock_lock_inode(inode, fl);
 		if (error != FILE_LOCK_DEFERRED)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = wait_event_interruptible(fl->fl_wait, !fl->fl_next);
 		if (!error)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		locks_delete_block(fl);
 		break;
 	}
@@ -2014,6 +2154,7 @@ SYSCALL_DEFINE2(flock, unsigned int, fd, unsigned int, cmd)
 
 	lock = flock_make_lock(f.file, cmd);
 	if (IS_ERR(lock)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = PTR_ERR(lock);
 		goto out_putf;
 	}
@@ -2051,6 +2192,7 @@ SYSCALL_DEFINE2(flock, unsigned int, fd, unsigned int, cmd)
  */
 int vfs_test_lock(struct file *filp, struct file_lock *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (filp->f_op->lock && is_remote_lock(filp))
 		return filp->f_op->lock(filp, F_GETLK, fl);
 	posix_test_lock(filp, fl);
@@ -2071,7 +2213,9 @@ static pid_t locks_translate_pid(struct file_lock *fl, struct pid_namespace *ns)
 	struct pid *pid;
 
 	if (IS_OFDLCK(fl))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 	if (IS_REMOTELCK(fl))
 		return fl->fl_pid;
 
@@ -2084,6 +2228,7 @@ static pid_t locks_translate_pid(struct file_lock *fl, struct pid_namespace *ns)
 
 static int posix_lock_to_flock(struct flock *flock, struct file_lock *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flock->l_pid = locks_translate_pid(fl, task_active_pid_ns(current));
 #if BITS_PER_LONG == 32
 	/*
@@ -2125,7 +2270,9 @@ int fcntl_getlk(struct file *filp, unsigned int cmd, struct flock *flock)
 
 	fl = locks_alloc_lock();
 	if (fl == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	error = -EINVAL;
 	if (flock->l_type != F_RDLCK && flock->l_type != F_WRLCK)
 		goto out;
@@ -2195,7 +2342,9 @@ int fcntl_getlk(struct file *filp, unsigned int cmd, struct flock *flock)
 int vfs_lock_file(struct file *filp, unsigned int cmd, struct file_lock *fl, struct file_lock *conf)
 {
 	if (filp->f_op->lock && is_remote_lock(filp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return filp->f_op->lock(filp, cmd, fl);
+}
 	else
 		return posix_lock_file(filp, fl, conf);
 }
@@ -2208,20 +2357,25 @@ static int do_lock_file_wait(struct file *filp, unsigned int cmd,
 
 	error = security_file_lock(filp, fl->fl_type);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	for (;;) {
 		error = vfs_lock_file(filp, cmd, fl, NULL);
 		if (error != FILE_LOCK_DEFERRED)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = wait_event_interruptible(fl->fl_wait, !fl->fl_next);
 		if (!error)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		locks_delete_block(fl);
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -2232,11 +2386,15 @@ check_fmode_for_setlk(struct file_lock *fl)
 	switch (fl->fl_type) {
 	case F_RDLCK:
 		if (!(fl->fl_file->f_mode & FMODE_READ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EBADF;
+}
 		break;
 	case F_WRLCK:
 		if (!(fl->fl_file->f_mode & FMODE_WRITE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EBADF;
+}
 	}
 	return 0;
 }
@@ -2253,12 +2411,15 @@ int fcntl_setlk(unsigned int fd, struct file *filp, unsigned int cmd,
 	int error;
 
 	if (file_lock == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOLCK;
+}
 
 	/* Don't allow mandatory locks on files that may be memory mapped
 	 * and shared.
 	 */
 	if (mandatory_lock(inode) && mapping_writably_mapped(filp->f_mapping)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EAGAIN;
 		goto out;
 	}
@@ -2281,6 +2442,7 @@ int fcntl_setlk(unsigned int fd, struct file *filp, unsigned int cmd,
 		if (flock->l_pid != 0)
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd = F_SETLK;
 		file_lock->fl_flags |= FL_OFDLCK;
 		file_lock->fl_owner = filp;
@@ -2290,6 +2452,7 @@ int fcntl_setlk(unsigned int fd, struct file *filp, unsigned int cmd,
 		if (flock->l_pid != 0)
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmd = F_SETLKW;
 		file_lock->fl_flags |= FL_OFDLCK;
 		file_lock->fl_owner = filp;
@@ -2316,8 +2479,10 @@ int fcntl_setlk(unsigned int fd, struct file *filp, unsigned int cmd,
 		f = fcheck(fd);
 		spin_unlock(&current->files->file_lock);
 		if (f != filp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			file_lock->fl_type = F_UNLCK;
 			error = do_lock_file_wait(filp, cmd, file_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			WARN_ON_ONCE(error);
 			error = -EBADF;
 		}
@@ -2493,7 +2658,9 @@ void locks_remove_posix(struct file *filp, fl_owner_t owner)
 	error = vfs_lock_file(filp, F_SETLK, &lock, NULL);
 
 	if (lock.fl_ops && lock.fl_ops->fl_release_private)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lock.fl_ops->fl_release_private(&lock);
+}
 	trace_locks_remove_posix(inode, &lock, error);
 }
 
@@ -2517,13 +2684,17 @@ locks_remove_flock(struct file *filp, struct file_lock_context *flctx)
 		return;
 
 	if (filp->f_op->flock && is_remote_lock(filp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		filp->f_op->flock(filp, F_SETLKW, &fl);
+}
 	else
 		flock_lock_inode(inode, &fl);
 
 	if (fl.fl_ops && fl.fl_ops->fl_release_private)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fl.fl_ops->fl_release_private(&fl);
 }
+}
 
 /* The i_flctx must be valid when calling into here */
 static void
@@ -2535,11 +2706,16 @@ locks_remove_lease(struct file *filp, struct file_lock_context *ctx)
 	if (list_empty(&ctx->flc_lease))
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	percpu_down_read_preempt_disable(&file_rwsem);
 	spin_lock(&ctx->flc_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(fl, tmp, &ctx->flc_lease, fl_list)
 		if (filp == fl->fl_file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lease_modify(fl, F_UNLCK, &dispose);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&ctx->flc_lock);
 	percpu_up_read_preempt_enable(&file_rwsem);
 
@@ -2555,7 +2731,9 @@ void locks_remove_file(struct file *filp)
 
 	ctx = smp_load_acquire(&locks_inode(filp)->i_flctx);
 	if (!ctx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* remove any OFD locks */
 	locks_remove_posix(filp, filp);
@@ -2586,7 +2764,9 @@ posix_unblock_lock(struct file_lock *waiter)
 
 	spin_lock(&blocked_lock_lock);
 	if (waiter->fl_next)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__locks_delete_block(waiter);
+}
 	else
 		status = -ENOENT;
 	spin_unlock(&blocked_lock_lock);
@@ -2603,6 +2783,7 @@ EXPORT_SYMBOL(posix_unblock_lock);
  */
 int vfs_cancel_lock(struct file *filp, struct file_lock *fl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (filp->f_op->lock && is_remote_lock(filp))
 		return filp->f_op->lock(filp, F_CANCELLK, fl);
 	return 0;
@@ -2633,7 +2814,9 @@ static void lock_get_status(struct seq_file *f, struct file_lock *fl,
 	 * called from __show_fd_info - skip lock entirely
 	 */
 	if (fl_pid == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (fl->fl_file != NULL)
 		inode = locks_inode(fl->fl_file);
@@ -2706,6 +2889,7 @@ static int locks_show(struct seq_file *f, void *v)
 	struct file_lock *fl, *bfl;
 	struct pid_namespace *proc_pidns = file_inode(f->file)->i_sb->s_fs_info;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fl = hlist_entry(v, struct file_lock, fl_link);
 
 	if (locks_translate_pid(fl, proc_pidns) == 0)
@@ -2725,6 +2909,7 @@ static void __show_fd_locks(struct seq_file *f,
 {
 	struct file_lock *fl;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(fl, head, fl_list) {
 
 		if (filp != fl->fl_file)
@@ -2742,6 +2927,7 @@ static void __show_fd_locks(struct seq_file *f,
 void show_fd_locks(struct seq_file *f,
 		  struct file *filp, struct files_struct *files)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = locks_inode(filp);
 	struct file_lock_context *ctx;
 	int id = 0;
@@ -2779,6 +2965,7 @@ static void *locks_next(struct seq_file *f, void *v, loff_t *pos)
 static void locks_stop(struct seq_file *f, void *v)
 	__releases(&blocked_lock_lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&blocked_lock_lock);
 	percpu_up_write(&file_rwsem);
 }
@@ -2792,6 +2979,7 @@ static const struct seq_operations locks_seq_operations = {
 
 static int locks_open(struct inode *inode, struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open_private(filp, &locks_seq_operations,
 					sizeof(struct locks_iterator));
 }
diff --git a/fs/mbcache.c b/fs/mbcache.c
index 49c5b25..e7a9536 100644
--- a/fs/mbcache.c
+++ b/fs/mbcache.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 #include <linux/spinlock.h>
 #include <linux/slab.h>
 #include <linux/list.h>
@@ -49,6 +51,7 @@ static unsigned long mb_cache_shrink(struct mb_cache *cache,
 static inline struct hlist_bl_head *mb_cache_entry_head(struct mb_cache *cache,
 							u32 key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &cache->c_hash[hash_32(key, cache->c_bucket_bits)];
 }
 
@@ -79,7 +82,9 @@ int mb_cache_entry_create(struct mb_cache *cache, gfp_t mask, u32 key,
 
 	/* Schedule background reclaim if there are too many entries */
 	if (cache->c_entry_count >= cache->c_max_entries)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		schedule_work(&cache->c_shrink_work);
+}
 	/* Do some sync reclaim if background reclaim cannot keep up */
 	if (cache->c_entry_count >= 2*cache->c_max_entries)
 		mb_cache_shrink(cache, SYNC_SHRINK_BATCH);
@@ -120,6 +125,7 @@ EXPORT_SYMBOL(mb_cache_entry_create);
 
 void __mb_cache_entry_free(struct mb_cache_entry *entry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_free(mb_entry_cache, entry);
 }
 EXPORT_SYMBOL(__mb_cache_entry_free);
@@ -134,6 +140,7 @@ static struct mb_cache_entry *__entry_find(struct mb_cache *cache,
 
 	head = mb_cache_entry_head(cache, key);
 	hlist_bl_lock(head);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (entry && !hlist_bl_unhashed(&entry->e_hash_list))
 		node = entry->e_hash_list.next;
 	else
@@ -167,6 +174,7 @@ static struct mb_cache_entry *__entry_find(struct mb_cache *cache,
 struct mb_cache_entry *mb_cache_entry_find_first(struct mb_cache *cache,
 						 u32 key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __entry_find(cache, NULL, key);
 }
 EXPORT_SYMBOL(mb_cache_entry_find_first);
@@ -184,6 +192,7 @@ EXPORT_SYMBOL(mb_cache_entry_find_first);
 struct mb_cache_entry *mb_cache_entry_find_next(struct mb_cache *cache,
 						struct mb_cache_entry *entry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __entry_find(cache, entry, entry->e_key);
 }
 EXPORT_SYMBOL(mb_cache_entry_find_next);
@@ -203,6 +212,7 @@ struct mb_cache_entry *mb_cache_entry_get(struct mb_cache *cache, u32 key,
 
 	head = mb_cache_entry_head(cache, key);
 	hlist_bl_lock(head);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_bl_for_each_entry(entry, node, head, e_hash_list) {
 		if (entry->e_key == key && entry->e_value == value) {
 			atomic_inc(&entry->e_refcnt);
@@ -231,6 +241,7 @@ void mb_cache_entry_delete(struct mb_cache *cache, u32 key, u64 value)
 
 	head = mb_cache_entry_head(cache, key);
 	hlist_bl_lock(head);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_bl_for_each_entry(entry, node, head, e_hash_list) {
 		if (entry->e_key == key && entry->e_value == value) {
 			/* We keep hash list reference to keep entry alive */
@@ -260,6 +271,7 @@ EXPORT_SYMBOL(mb_cache_entry_delete);
 void mb_cache_entry_touch(struct mb_cache *cache,
 			  struct mb_cache_entry *entry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	entry->e_referenced = 1;
 }
 EXPORT_SYMBOL(mb_cache_entry_touch);
@@ -267,6 +279,7 @@ EXPORT_SYMBOL(mb_cache_entry_touch);
 static unsigned long mb_cache_count(struct shrinker *shrink,
 				    struct shrink_control *sc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mb_cache *cache = container_of(shrink, struct mb_cache,
 					      c_shrink);
 
@@ -282,6 +295,7 @@ static unsigned long mb_cache_shrink(struct mb_cache *cache,
 	unsigned long shrunk = 0;
 
 	spin_lock(&cache->c_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (nr_to_scan-- && !list_empty(&cache->c_list)) {
 		entry = list_first_entry(&cache->c_list,
 					 struct mb_cache_entry, e_list);
@@ -317,6 +331,7 @@ static unsigned long mb_cache_shrink(struct mb_cache *cache,
 static unsigned long mb_cache_scan(struct shrinker *shrink,
 				   struct shrink_control *sc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mb_cache *cache = container_of(shrink, struct mb_cache,
 					      c_shrink);
 	return mb_cache_shrink(cache, sc->nr_to_scan);
@@ -327,6 +342,7 @@ static unsigned long mb_cache_scan(struct shrinker *shrink,
 
 static void mb_cache_shrink_worker(struct work_struct *work)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mb_cache *cache = container_of(work, struct mb_cache,
 					      c_shrink_work);
 	mb_cache_shrink(cache, cache->c_max_entries / SHRINK_DIVISOR);
@@ -347,6 +363,7 @@ struct mb_cache *mb_cache_create(int bucket_bits)
 	cache = kzalloc(sizeof(struct mb_cache), GFP_KERNEL);
 	if (!cache)
 		goto err_out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cache->c_bucket_bits = bucket_bits;
 	cache->c_max_entries = bucket_count << 4;
 	INIT_LIST_HEAD(&cache->c_list);
@@ -416,12 +433,15 @@ static int __init mbcache_init(void)
 				sizeof(struct mb_cache_entry), 0,
 				SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD, NULL);
 	if (!mb_entry_cache)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
 static void __exit mbcache_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_destroy(mb_entry_cache);
 }
 
diff --git a/fs/mount.h b/fs/mount.h
index f39bc9d..3946e7e 100644
--- a/fs/mount.h
+++ b/fs/mount.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SPDX-License-Identifier: GPL-2.0 */
 #include <linux/mount.h>
 #include <linux/seq_file.h>
diff --git a/fs/mpage.c b/fs/mpage.c
index b7e7f57..ee4632d 100644
--- a/fs/mpage.c
+++ b/fs/mpage.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * fs/mpage.c
@@ -49,6 +51,7 @@ static void mpage_end_io(struct bio *bio)
 	struct bio_vec *bv;
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bio_for_each_segment_all(bv, bio, i) {
 		struct page *page = bv->bv_page;
 		page_endio(page, op_is_write(bio_op(bio)),
@@ -60,6 +63,7 @@ static void mpage_end_io(struct bio *bio)
 
 static struct bio *mpage_bio_submit(int op, int op_flags, struct bio *bio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bio->bi_end_io = mpage_end_io;
 	bio_set_op_attrs(bio, op, op_flags);
 	guard_bio_eod(op, bio);
@@ -78,6 +82,7 @@ mpage_alloc(struct block_device *bdev,
 	gfp_flags &= GFP_KERNEL;
 	bio = bio_alloc(gfp_flags, nr_vecs);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (bio == NULL && (current->flags & PF_MEMALLOC)) {
 		while (!bio && (nr_vecs /= 2))
 			bio = bio_alloc(gfp_flags, nr_vecs);
@@ -171,7 +176,10 @@ do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,
 	last_block = block_in_file + nr_pages * blocks_per_page;
 	last_block_in_file = (i_size_read(inode) + blocksize - 1) >> blkbits;
 	if (last_block > last_block_in_file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		last_block = last_block_in_file;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	page_block = 0;
 
 	/*
@@ -183,8 +191,10 @@ do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,
 		unsigned map_offset = block_in_file - *first_logical_block;
 		unsigned last = nblocks - map_offset;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (relative_block = 0; ; relative_block++) {
 			if (relative_block == last) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				clear_buffer_mapped(map_bh);
 				break;
 			}
@@ -214,9 +224,13 @@ do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,
 		}
 
 		if (!buffer_mapped(map_bh)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fully_mapped = 0;
 			if (first_hole == blocks_per_page)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				first_hole = page_block;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			page_block++;
 			block_in_file++;
 			continue;
@@ -229,6 +243,7 @@ do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,
 		 * so readpage doesn't have to repeat the get_block call
 		 */
 		if (buffer_uptodate(map_bh)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			map_buffer_to_page(page, map_bh, page_block);
 			goto confused;
 		}
@@ -242,6 +257,7 @@ do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,
 		nblocks = map_bh->b_size >> blkbits;
 		for (relative_block = 0; ; relative_block++) {
 			if (relative_block == nblocks) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				clear_buffer_mapped(map_bh);
 				break;
 			} else if (page_block == blocks_per_page)
@@ -254,18 +270,22 @@ do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,
 	}
 
 	if (first_hole != blocks_per_page) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		zero_user_segment(page, first_hole << blkbits, PAGE_SIZE);
 		if (first_hole == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			SetPageUptodate(page);
 			unlock_page(page);
 			goto out;
 		}
 	} else if (fully_mapped) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		SetPageMappedToDisk(page);
 	}
 
 	if (fully_mapped && blocks_per_page == 1 && !PageUptodate(page) &&
 	    cleancache_get_page(page) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		SetPageUptodate(page);
 		goto confused;
 	}
@@ -274,7 +294,9 @@ do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,
 	 * This page will go to BIO.  Do we need to send this BIO off first?
 	 */
 	if (bio && (*last_block_in_bio != blocks[0] - 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bio = mpage_bio_submit(REQ_OP_READ, 0, bio);
+}
 
 alloc_new:
 	if (bio == NULL) {
@@ -289,14 +311,18 @@ do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,
 			goto confused;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	length = first_hole << blkbits;
 	if (bio_add_page(bio, page, length, 0) < length) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bio = mpage_bio_submit(REQ_OP_READ, 0, bio);
 		goto alloc_new;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	relative_block = block_in_file - *first_logical_block;
 	nblocks = map_bh->b_size >> blkbits;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((buffer_boundary(map_bh) && relative_block == nblocks) ||
 	    (first_hole != blocks_per_page))
 		bio = mpage_bio_submit(REQ_OP_READ, 0, bio);
@@ -307,9 +333,14 @@ do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,
 
 confused:
 	if (bio)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bio = mpage_bio_submit(REQ_OP_READ, 0, bio);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!PageUptodate(page))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	        block_read_full_page(page, get_block);
+}
 	else
 		unlock_page(page);
 	goto out;
@@ -390,7 +421,9 @@ mpage_readpages(struct address_space *mapping, struct list_head *pages,
 	}
 	BUG_ON(!list_empty(pages));
 	if (bio)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mpage_bio_submit(REQ_OP_READ, 0, bio);
+}
 	return 0;
 }
 EXPORT_SYMBOL(mpage_readpages);
@@ -411,7 +444,9 @@ int mpage_readpage(struct page *page, get_block_t get_block)
 	bio = do_mpage_readpage(bio, page, 1, &last_block_in_bio,
 			&map_bh, &first_logical_block, get_block, gfp);
 	if (bio)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mpage_bio_submit(REQ_OP_READ, 0, bio);
+}
 	return 0;
 }
 EXPORT_SYMBOL(mpage_readpage);
@@ -449,7 +484,9 @@ static void clean_buffers(struct page *page, unsigned first_unmapped)
 	unsigned buffer_counter = 0;
 	struct buffer_head *bh, *head;
 	if (!page_has_buffers(page))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	head = page_buffers(page);
 	bh = head;
 
@@ -476,6 +513,7 @@ static void clean_buffers(struct page *page, unsigned first_unmapped)
  */
 void clean_page_buffers(struct page *page)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	clean_buffers(page, ~0U);
 }
 
@@ -505,6 +543,7 @@ static int __mpage_writepage(struct page *page, struct writeback_control *wbc,
 	int op_flags = wbc_to_write_flags(wbc);
 
 	if (page_has_buffers(page)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct buffer_head *head = page_buffers(page);
 		struct buffer_head *bh = head;
 
@@ -704,7 +743,9 @@ mpage_writepages(struct address_space *mapping,
 	blk_start_plug(&plug);
 
 	if (!get_block)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = generic_writepages(mapping, wbc);
+}
 	else {
 		struct mpage_data mpd = {
 			.bio = NULL,
@@ -736,6 +777,7 @@ int mpage_writepage(struct page *page, get_block_t get_block,
 	};
 	int ret = __mpage_writepage(page, wbc, &mpd);
 	if (mpd.bio) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int op_flags = (wbc->sync_mode == WB_SYNC_ALL ?
 			  REQ_SYNC : 0);
 		mpage_bio_submit(REQ_OP_WRITE, op_flags, mpd.bio);
diff --git a/fs/namei.c b/fs/namei.c
index 62a0db6..646224f 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/namei.c
@@ -133,11 +135,15 @@ getname_flags(const char __user *filename, int flags, int *empty)
 
 	result = audit_reusename(filename);
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
 	result = __getname();
 	if (unlikely(!result))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	/*
 	 * First, try to embed the struct filename inside the names_cache
@@ -148,6 +154,7 @@ getname_flags(const char __user *filename, int flags, int *empty)
 
 	len = strncpy_from_user(kname, filename, EMBEDDED_NAME_MAX);
 	if (unlikely(len < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__putname(result);
 		return ERR_PTR(len);
 	}
@@ -169,17 +176,22 @@ getname_flags(const char __user *filename, int flags, int *empty)
 		 */
 		result = kzalloc(size, GFP_KERNEL);
 		if (unlikely(!result)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__putname(kname);
 			return ERR_PTR(-ENOMEM);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		result->name = kname;
 		len = strncpy_from_user(kname, filename, PATH_MAX);
 		if (unlikely(len < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__putname(kname);
 			kfree(result);
 			return ERR_PTR(len);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unlikely(len == PATH_MAX)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__putname(kname);
 			kfree(result);
 			return ERR_PTR(-ENAMETOOLONG);
@@ -217,7 +229,9 @@ getname_kernel(const char * filename)
 
 	result = __getname();
 	if (unlikely(!result))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	if (len <= EMBEDDED_NAME_MAX) {
 		result->name = (char *)result->iname;
@@ -226,12 +240,15 @@ getname_kernel(const char * filename)
 
 		tmp = kmalloc(sizeof(*tmp), GFP_KERNEL);
 		if (unlikely(!tmp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__putname(result);
 			return ERR_PTR(-ENOMEM);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tmp->name = (char *)result;
 		result = tmp;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__putname(result);
 		return ERR_PTR(-ENAMETOOLONG);
 	}
@@ -249,9 +266,12 @@ void putname(struct filename *name)
 	BUG_ON(name->refcnt <= 0);
 
 	if (--name->refcnt > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	if (name->name != name->iname) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__putname(name->name);
 		kfree(name);
 	} else
@@ -266,23 +286,32 @@ static int check_acl(struct inode *inode, int mask)
 	if (mask & MAY_NOT_BLOCK) {
 		acl = get_cached_acl_rcu(inode, ACL_TYPE_ACCESS);
 	        if (!acl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	                return -EAGAIN;
+}
 		/* no ->get_acl() calls in RCU mode... */
 		if (is_uncached_acl(acl))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ECHILD;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	        return posix_acl_permission(inode, acl, mask & ~MAY_NOT_BLOCK);
 	}
 
 	acl = get_acl(inode, ACL_TYPE_ACCESS);
 	if (IS_ERR(acl))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(acl);
+}
 	if (acl) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	        int error = posix_acl_permission(inode, acl, mask);
 	        posix_acl_release(acl);
 	        return error;
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EAGAIN;
 }
 
@@ -299,7 +328,9 @@ static int acl_permission_check(struct inode *inode, int mask)
 		if (IS_POSIXACL(inode) && (mode & S_IRWXG)) {
 			int error = check_acl(inode, mask);
 			if (error != -EAGAIN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return error;
+}
 		}
 
 		if (in_group_p(inode->i_gid))
@@ -310,7 +341,9 @@ static int acl_permission_check(struct inode *inode, int mask)
 	 * If the DACs are ok we don't need any capability check.
 	 */
 	if ((mask & ~mode & (MAY_READ | MAY_WRITE | MAY_EXEC)) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return -EACCES;
 }
 
@@ -337,7 +370,9 @@ int generic_permission(struct inode *inode, int mask)
 	 */
 	ret = acl_permission_check(inode, mask);
 	if (ret != -EACCES)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (S_ISDIR(inode->i_mode)) {
 		/* DACs are overridable for directories */
@@ -346,7 +381,9 @@ int generic_permission(struct inode *inode, int mask)
 						     CAP_DAC_READ_SEARCH))
 				return 0;
 		if (capable_wrt_inode_uidgid(inode, CAP_DAC_OVERRIDE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 		return -EACCES;
 	}
 
@@ -356,7 +393,9 @@ int generic_permission(struct inode *inode, int mask)
 	mask &= MAY_READ | MAY_WRITE | MAY_EXEC;
 	if (mask == MAY_READ)
 		if (capable_wrt_inode_uidgid(inode, CAP_DAC_READ_SEARCH))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	/*
 	 * Read/write DACs are always overridable.
 	 * Executable DACs are overridable when there is
@@ -364,8 +403,11 @@ int generic_permission(struct inode *inode, int mask)
 	 */
 	if (!(mask & MAY_EXEC) || (inode->i_mode & S_IXUGO))
 		if (capable_wrt_inode_uidgid(inode, CAP_DAC_OVERRIDE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EACCES;
 }
 EXPORT_SYMBOL(generic_permission);
@@ -411,7 +453,9 @@ int __inode_permission(struct inode *inode, int mask)
 		 * Nobody gets write access to an immutable file.
 		 */
 		if (IS_IMMUTABLE(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 
 		/*
 		 * Updating mtime will likely cause i_uid and i_gid to be
@@ -419,16 +463,22 @@ int __inode_permission(struct inode *inode, int mask)
 		 * to the vfs.
 		 */
 		if (HAS_UNMAPPED_ID(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EACCES;
+}
 	}
 
 	retval = do_inode_permission(inode, mask);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	retval = devcgroup_inode_permission(inode, mask);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	return security_inode_permission(inode, mask);
 }
@@ -449,8 +499,11 @@ static int sb_permission(struct super_block *sb, struct inode *inode, int mask)
 
 		/* Nobody gets write access to a read-only fs. */
 		if (sb_rdonly(sb) && (S_ISREG(mode) || S_ISDIR(mode) || S_ISLNK(mode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EROFS;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -471,7 +524,9 @@ int inode_permission(struct inode *inode, int mask)
 
 	retval = sb_permission(inode->i_sb, inode, mask);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 	return __inode_permission(inode, mask);
 }
 EXPORT_SYMBOL(inode_permission);
@@ -1755,7 +1810,9 @@ static inline int step_into(struct nameidata *nd, struct path *path,
 	/* make sure that d_is_symlink above matches inode */
 	if (nd->flags & LOOKUP_RCU) {
 		if (read_seqcount_retry(&path->dentry->d_seq, seq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ECHILD;
+}
 	}
 	return pick_link(nd, path, inode, seq);
 }
@@ -1775,12 +1832,15 @@ static int walk_component(struct nameidata *nd, int flags)
 		err = handle_dots(nd, nd->last_type);
 		if (!(flags & WALK_MORE) && nd->depth)
 			put_link(nd);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
 	}
 	err = lookup_fast(nd, &path, &inode, &seq);
 	if (unlikely(err <= 0)) {
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 		path.dentry = lookup_slow(&nd->last, nd->path.dentry,
 					  nd->flags);
 		if (IS_ERR(path.dentry))
@@ -1789,7 +1849,9 @@ static int walk_component(struct nameidata *nd, int flags)
 		path.mnt = nd->path.mnt;
 		err = follow_managed(&path, nd);
 		if (unlikely(err < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 
 		if (unlikely(d_is_negative(path.dentry))) {
 			path_to_nameidata(&path, nd);
@@ -2046,7 +2108,9 @@ static int link_path_walk(const char *name, struct nameidata *nd)
 	while (*name=='/')
 		name++;
 	if (!*name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* At this point we know we have a real path component. */
 	for(;;) {
@@ -2055,7 +2119,9 @@ static int link_path_walk(const char *name, struct nameidata *nd)
 
 		err = may_lookup(nd);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 
 		hash_len = hash_name(nd->path.dentry, name);
 
@@ -2063,6 +2129,7 @@ static int link_path_walk(const char *name, struct nameidata *nd)
 		if (name[0] == '.') switch (hashlen_len(hash_len)) {
 			case 2:
 				if (name[1] == '.') {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					type = LAST_DOTDOT;
 					nd->flags |= LOOKUP_JUMPED;
 				}
@@ -2077,7 +2144,10 @@ static int link_path_walk(const char *name, struct nameidata *nd)
 				struct qstr this = { { .hash_len = hash_len }, .name = name };
 				err = parent->d_op->d_hash(parent, &this);
 				if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return err;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				hash_len = this.hash_len;
 				name = this.name;
 			}
@@ -2101,11 +2171,15 @@ static int link_path_walk(const char *name, struct nameidata *nd)
 OK:
 			/* pathname body, done */
 			if (!nd->depth)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
 			name = nd->stack[nd->depth - 1].name;
 			/* trailing symlink, done */
 			if (!name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
 			/* last component of nested symlink */
 			err = walk_component(nd, WALK_FOLLOW);
 		} else {
@@ -2113,13 +2187,19 @@ static int link_path_walk(const char *name, struct nameidata *nd)
 			err = walk_component(nd, WALK_FOLLOW | WALK_MORE);
 		}
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			const char *s = get_link(nd);
 
 			if (IS_ERR(s))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return PTR_ERR(s);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = 0;
 			if (unlikely(!s)) {
 				/* jumped */
@@ -2133,8 +2213,11 @@ static int link_path_walk(const char *name, struct nameidata *nd)
 		if (unlikely(!d_can_lookup(nd->path.dentry))) {
 			if (nd->flags & LOOKUP_RCU) {
 				if (unlazy_walk(nd))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return -ECHILD;
+}
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOTDIR;
 		}
 	}
@@ -2154,17 +2237,22 @@ static const char *path_init(struct nameidata *nd, unsigned flags)
 		struct dentry *root = nd->root.dentry;
 		struct inode *inode = root->d_inode;
 		if (*s && unlikely(!d_can_lookup(root)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-ENOTDIR);
+}
 		nd->path = nd->root;
 		nd->inode = inode;
 		if (flags & LOOKUP_RCU) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_lock();
 			nd->seq = __read_seqcount_begin(&nd->path.dentry->d_seq);
 			nd->root_seq = nd->seq;
 			nd->m_seq = read_seqbegin(&mount_lock);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			path_get(&nd->path);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return s;
 	}
 
@@ -2174,11 +2262,17 @@ static const char *path_init(struct nameidata *nd, unsigned flags)
 
 	nd->m_seq = read_seqbegin(&mount_lock);
 	if (*s == '/') {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (flags & LOOKUP_RCU)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_lock();
+}
 		set_root(nd);
 		if (likely(!nd_jump_root(nd)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return s;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nd->root.mnt = NULL;
 		rcu_read_unlock();
 		return ERR_PTR(-ECHILD);
@@ -2199,6 +2293,7 @@ static const char *path_init(struct nameidata *nd, unsigned flags)
 			get_fs_pwd(current->fs, &nd->path);
 			nd->inode = nd->path.dentry->d_inode;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return s;
 	} else {
 		/* Caller must check execute permissions on the starting path component */
@@ -2206,12 +2301,15 @@ static const char *path_init(struct nameidata *nd, unsigned flags)
 		struct dentry *dentry;
 
 		if (!f.file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-EBADF);
+}
 
 		dentry = f.file->f_path.dentry;
 
 		if (*s) {
 			if (!d_can_lookup(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fdput(f);
 				return ERR_PTR(-ENOTDIR);
 			}
@@ -2219,10 +2317,12 @@ static const char *path_init(struct nameidata *nd, unsigned flags)
 
 		nd->path = f.file->f_path;
 		if (flags & LOOKUP_RCU) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_lock();
 			nd->inode = nd->path.dentry->d_inode;
 			nd->seq = read_seqcount_begin(&nd->path.dentry->d_seq);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			path_get(&nd->path);
 			nd->inode = nd->path.dentry->d_inode;
 		}
@@ -2236,7 +2336,9 @@ static const char *trailing_symlink(struct nameidata *nd)
 	const char *s;
 	int error = may_follow_link(nd);
 	if (unlikely(error))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(error);
+}
 	nd->flags |= LOOKUP_PARENT;
 	nd->stack[0].name = NULL;
 	s = get_link(nd);
@@ -2266,12 +2368,18 @@ static int handle_lookup_down(struct nameidata *nd)
 		 * if we simply redo everything in non-RCU mode
 		 */
 		if (unlikely(!__follow_mount_rcu(nd, &path, &inode, &seq)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ECHILD;
+}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dget(path.dentry);
 		err = follow_managed(&path, nd);
 		if (unlikely(err < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode = d_backing_inode(path.dentry);
 		seq = 0;
 	}
@@ -2288,11 +2396,14 @@ static int path_lookupat(struct nameidata *nd, unsigned flags, struct path *path
 	int err;
 
 	if (IS_ERR(s))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(s);
+}
 
 	if (unlikely(flags & LOOKUP_DOWN)) {
 		err = handle_lookup_down(nd);
 		if (unlikely(err < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			terminate_walk(nd);
 			return err;
 		}
@@ -2302,6 +2413,7 @@ static int path_lookupat(struct nameidata *nd, unsigned flags, struct path *path
 		&& ((err = lookup_last(nd)) > 0)) {
 		s = trailing_symlink(nd);
 		if (IS_ERR(s)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(s);
 			break;
 		}
@@ -2311,7 +2423,9 @@ static int path_lookupat(struct nameidata *nd, unsigned flags, struct path *path
 
 	if (!err && nd->flags & LOOKUP_DIRECTORY)
 		if (!d_can_lookup(nd->path.dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENOTDIR;
+}
 	if (!err) {
 		*path = nd->path;
 		nd->path.mnt = NULL;
@@ -2335,9 +2449,13 @@ static int filename_lookup(int dfd, struct filename *name, unsigned flags,
 	set_nameidata(&nd, dfd, name);
 	retval = path_lookupat(&nd, flags | LOOKUP_RCU, path);
 	if (unlikely(retval == -ECHILD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = path_lookupat(&nd, flags, path);
+}
 	if (unlikely(retval == -ESTALE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = path_lookupat(&nd, flags | LOOKUP_REVAL, path);
+}
 
 	if (likely(!retval))
 		audit_inode(name, path->dentry, flags & LOOKUP_PARENT);
@@ -2353,7 +2471,9 @@ static int path_parentat(struct nameidata *nd, unsigned flags,
 	const char *s = path_init(nd, flags);
 	int err;
 	if (IS_ERR(s))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(s);
+}
 	err = link_path_walk(s, nd);
 	if (!err)
 		err = complete_walk(nd);
@@ -2374,13 +2494,19 @@ static struct filename *filename_parentat(int dfd, struct filename *name,
 	struct nameidata nd;
 
 	if (IS_ERR(name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return name;
+}
 	set_nameidata(&nd, dfd, name);
 	retval = path_parentat(&nd, flags | LOOKUP_RCU, parent);
 	if (unlikely(retval == -ECHILD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = path_parentat(&nd, flags, parent);
+}
 	if (unlikely(retval == -ESTALE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = path_parentat(&nd, flags | LOOKUP_REVAL, parent);
+}
 	if (likely(!retval)) {
 		*last = nd.last;
 		*type = nd.last_type;
@@ -2404,7 +2530,9 @@ struct dentry *kern_path_locked(const char *name, struct path *path)
 	filename = filename_parentat(AT_FDCWD, getname_kernel(name), 0, path,
 				    &last, &type);
 	if (IS_ERR(filename))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(filename);
+}
 	if (unlikely(type != LAST_NORM)) {
 		path_put(path);
 		putname(filename);
@@ -2469,31 +2597,42 @@ struct dentry *lookup_one_len(const char *name, struct dentry *base, int len)
 	this.len = len;
 	this.hash = full_name_hash(base, name, len);
 	if (!len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EACCES);
+}
 
 	if (unlikely(name[0] == '.')) {
 		if (len < 2 || (len == 2 && name[1] == '.'))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-EACCES);
+}
 	}
 
 	while (len--) {
 		c = *(const unsigned char *)name++;
 		if (c == '/' || c == '\0')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-EACCES);
+}
 	}
 	/*
 	 * See if the low-level filesystem might want
 	 * to use its own hash..
 	 */
 	if (base->d_flags & DCACHE_OP_HASH) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int err = base->d_op->d_hash(base, &this);
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(err);
+}
 	}
 
 	err = inode_permission(base->d_inode, MAY_EXEC);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(err);
+}
 
 	return __lookup_hash(&this, base, 0);
 }
@@ -2523,35 +2662,47 @@ struct dentry *lookup_one_len_unlocked(const char *name,
 	this.len = len;
 	this.hash = full_name_hash(base, name, len);
 	if (!len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EACCES);
+}
 
 	if (unlikely(name[0] == '.')) {
 		if (len < 2 || (len == 2 && name[1] == '.'))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-EACCES);
+}
 	}
 
 	while (len--) {
 		c = *(const unsigned char *)name++;
 		if (c == '/' || c == '\0')
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-EACCES);
+}
 	}
 	/*
 	 * See if the low-level filesystem might want
 	 * to use its own hash..
 	 */
 	if (base->d_flags & DCACHE_OP_HASH) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int err = base->d_op->d_hash(base, &this);
 		if (err < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(err);
+}
 	}
 
 	err = inode_permission(base->d_inode, MAY_EXEC);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(err);
+}
 
 	ret = lookup_dcache(&this, base, 0);
 	if (!ret)
 		ret = lookup_slow(&this, base, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL(lookup_one_len_unlocked);
@@ -2568,14 +2719,18 @@ int path_pts(struct path *path)
 
 	ret = path_parent_directory(path);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	parent = path->dentry;
 	this.name = "pts";
 	this.len = 3;
 	child = d_hash_and_lookup(parent, &this);
 	if (!child)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	path->dentry = child;
 	dput(parent);
@@ -2625,7 +2780,9 @@ mountpoint_last(struct nameidata *nd)
 	/* If we're in rcuwalk, drop out of it to handle last component */
 	if (nd->flags & LOOKUP_RCU) {
 		if (unlazy_walk(nd))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ECHILD;
+}
 	}
 
 	nd->flags &= ~LOOKUP_PARENT;
@@ -2633,7 +2790,9 @@ mountpoint_last(struct nameidata *nd)
 	if (unlikely(nd->last_type != LAST_NORM)) {
 		error = handle_dots(nd, nd->last_type);
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 		path.dentry = dget(nd->path.dentry);
 	} else {
 		path.dentry = d_lookup(dir, &nd->last);
@@ -2647,10 +2806,13 @@ mountpoint_last(struct nameidata *nd)
 			path.dentry = lookup_slow(&nd->last, dir,
 					     nd->flags | LOOKUP_NO_REVAL);
 			if (IS_ERR(path.dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return PTR_ERR(path.dentry);
+}
 		}
 	}
 	if (d_is_negative(path.dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dput(path.dentry);
 		return -ENOENT;
 	}
@@ -2673,11 +2835,15 @@ path_mountpoint(struct nameidata *nd, unsigned flags, struct path *path)
 	const char *s = path_init(nd, flags);
 	int err;
 	if (IS_ERR(s))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(s);
+}
 	while (!(err = link_path_walk(s, nd)) &&
 		(err = mountpoint_last(nd)) > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		s = trailing_symlink(nd);
 		if (IS_ERR(s)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(s);
 			break;
 		}
@@ -2699,13 +2865,19 @@ filename_mountpoint(int dfd, struct filename *name, struct path *path,
 	struct nameidata nd;
 	int error;
 	if (IS_ERR(name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(name);
+}
 	set_nameidata(&nd, dfd, name);
 	error = path_mountpoint(&nd, flags | LOOKUP_RCU, path);
 	if (unlikely(error == -ECHILD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = path_mountpoint(&nd, flags, path);
+}
 	if (unlikely(error == -ESTALE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = path_mountpoint(&nd, flags | LOOKUP_REVAL, path);
+}
 	if (likely(!error))
 		audit_inode(name, path->dentry, 0);
 	restore_nameidata();
@@ -2738,6 +2910,7 @@ int
 kern_path_mountpoint(int dfd, const char *name, struct path *path,
 			unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return filename_mountpoint(dfd, getname_kernel(name), path, flags);
 }
 EXPORT_SYMBOL(kern_path_mountpoint);
@@ -2747,9 +2920,13 @@ int __check_sticky(struct inode *dir, struct inode *inode)
 	kuid_t fsuid = current_fsuid();
 
 	if (uid_eq(inode->i_uid, fsuid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	if (uid_eq(dir->i_uid, fsuid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return !capable_wrt_inode_uidgid(inode, CAP_FOWNER);
 }
 EXPORT_SYMBOL(__check_sticky);
@@ -2776,11 +2953,14 @@ EXPORT_SYMBOL(__check_sticky);
  */
 static int may_delete(struct inode *dir, struct dentry *victim, bool isdir)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_backing_inode(victim);
 	int error;
 
 	if (d_is_negative(victim))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 	BUG_ON(!inode);
 
 	BUG_ON(victim->d_parent->d_inode != dir);
@@ -2788,24 +2968,38 @@ static int may_delete(struct inode *dir, struct dentry *victim, bool isdir)
 
 	error = inode_permission(dir, MAY_WRITE | MAY_EXEC);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	if (IS_APPEND(dir))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	if (check_sticky(dir, inode) || IS_APPEND(inode) ||
 	    IS_IMMUTABLE(inode) || IS_SWAPFILE(inode) || HAS_UNMAPPED_ID(inode))
 		return -EPERM;
 	if (isdir) {
 		if (!d_is_dir(victim))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOTDIR;
+}
 		if (IS_ROOT(victim))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EBUSY;
+}
 	} else if (d_is_dir(victim))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EISDIR;
+}
 	if (IS_DEADDIR(dir))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 	if (victim->d_flags & DCACHE_NFSFS_RENAMED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 	return 0;
 }
 
@@ -2823,9 +3017,13 @@ static inline int may_create(struct inode *dir, struct dentry *child)
 	struct user_namespace *s_user_ns;
 	audit_inode_child(dir, child, AUDIT_TYPE_CHILD_CREATE);
 	if (child->d_inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EEXIST;
+}
 	if (IS_DEADDIR(dir))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 	s_user_ns = dir->i_sb->s_user_ns;
 	if (!kuid_has_mapping(s_user_ns, current_fsuid()) ||
 	    !kgid_has_mapping(s_user_ns, current_fsgid()))
@@ -2882,18 +3080,25 @@ int vfs_create(struct inode *dir, struct dentry *dentry, umode_t mode,
 {
 	int error = may_create(dir, dentry);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	if (!dir->i_op->create)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;	/* shouldn't it be ENOSYS? */
+}
 	mode &= S_IALLUGO;
 	mode |= S_IFREG;
 	error = security_inode_create(dir, dentry, mode);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	error = dir->i_op->create(dir, dentry, mode, want_excl);
 	if (!error)
 		fsnotify_create(dir, dentry);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 EXPORT_SYMBOL(vfs_create);
@@ -2911,19 +3116,25 @@ static int may_open(const struct path *path, int acc_mode, int flag)
 	int error;
 
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	switch (inode->i_mode & S_IFMT) {
 	case S_IFLNK:
 		return -ELOOP;
 	case S_IFDIR:
 		if (acc_mode & MAY_WRITE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EISDIR;
+}
 		break;
 	case S_IFBLK:
 	case S_IFCHR:
 		if (!may_open_dev(path))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EACCES;
+}
 		/*FALLTHRU*/
 	case S_IFIFO:
 	case S_IFSOCK:
@@ -2933,22 +3144,31 @@ static int may_open(const struct path *path, int acc_mode, int flag)
 
 	error = inode_permission(inode, MAY_OPEN | acc_mode);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	/*
 	 * An append-only file must be opened in append mode for writing.
 	 */
 	if (IS_APPEND(inode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if  ((flag & O_ACCMODE) != O_RDONLY && !(flag & O_APPEND))
 			return -EPERM;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (flag & O_TRUNC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 	}
 
 	/* O_NOATIME can only be set by the owner or superuser */
 	if (flag & O_NOATIME && !inode_owner_or_capable(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -2958,7 +3178,9 @@ static int handle_truncate(struct file *filp)
 	struct inode *inode = path->dentry->d_inode;
 	int error = get_write_access(inode);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	/*
 	 * Refuse to truncate files with mandatory locks held on them.
 	 */
@@ -2976,6 +3198,7 @@ static int handle_truncate(struct file *filp)
 
 static inline int open_to_namei_flags(int flag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((flag & O_ACCMODE) == 3)
 		flag--;
 	return flag;
@@ -2986,7 +3209,9 @@ static int may_o_create(const struct path *dir, struct dentry *dentry, umode_t m
 	struct user_namespace *s_user_ns;
 	int error = security_path_mknod(dir, dentry, mode, 0);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	s_user_ns = dir->dentry->d_sb->s_user_ns;
 	if (!kuid_has_mapping(s_user_ns, current_fsuid()) ||
@@ -2995,7 +3220,9 @@ static int may_o_create(const struct path *dir, struct dentry *dentry, umode_t m
 
 	error = inode_permission(dir->dentry->d_inode, MAY_WRITE | MAY_EXEC);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	return security_inode_create(dir->dentry->d_inode, dentry, mode);
 }
@@ -3024,7 +3251,9 @@ static int atomic_open(struct nameidata *nd, struct dentry *dentry,
 	int error;
 
 	if (!(~open_flag & (O_EXCL | O_CREAT)))	/* both O_EXCL and O_CREAT */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		open_flag &= ~O_TRUNC;
+}
 
 	if (nd->flags & LOOKUP_DIRECTORY)
 		open_flag |= O_DIRECTORY;
@@ -3104,7 +3333,9 @@ static int lookup_open(struct nameidata *nd, struct path *path,
 	DECLARE_WAIT_QUEUE_HEAD_ONSTACK(wq);
 
 	if (unlikely(IS_DEADDIR(dir_inode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	*opened &= ~FILE_CREATED;
 	dentry = d_lookup(dir, &nd->last);
@@ -3112,7 +3343,9 @@ static int lookup_open(struct nameidata *nd, struct path *path,
 		if (!dentry) {
 			dentry = d_alloc_parallel(dir, &nd->last, &wq);
 			if (IS_ERR(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return PTR_ERR(dentry);
+}
 		}
 		if (d_in_lookup(dentry))
 			break;
@@ -3120,8 +3353,10 @@ static int lookup_open(struct nameidata *nd, struct path *path,
 		error = d_revalidate(dentry, nd->flags);
 		if (likely(error > 0))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (error)
 			goto out_dput;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		d_invalidate(dentry);
 		dput(dentry);
 		dentry = NULL;
@@ -3144,6 +3379,7 @@ static int lookup_open(struct nameidata *nd, struct path *path,
 		if (!IS_POSIXACL(dir->d_inode))
 			mode &= ~current_umask();
 		if (unlikely(!got_write)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			create_error = -EROFS;
 			open_flag &= ~O_CREAT;
 			if (open_flag & (O_EXCL | O_TRUNC))
@@ -3167,10 +3403,15 @@ static int lookup_open(struct nameidata *nd, struct path *path,
 	}
 
 	if (dir_inode->i_op->atomic_open) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = atomic_open(nd, dentry, path, file, op, open_flag,
 				    mode, opened);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unlikely(error == -ENOENT) && create_error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = create_error;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
 	}
 
@@ -3184,6 +3425,7 @@ static int lookup_open(struct nameidata *nd, struct path *path,
 				error = PTR_ERR(res);
 				goto out_dput;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dput(dentry);
 			dentry = res;
 		}
@@ -3194,6 +3436,7 @@ static int lookup_open(struct nameidata *nd, struct path *path,
 		*opened |= FILE_CREATED;
 		audit_inode_child(dir_inode, dentry, AUDIT_TYPE_CHILD_CREATE);
 		if (!dir_inode->i_op->create) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -EACCES;
 			goto out_dput;
 		}
@@ -3204,6 +3447,7 @@ static int lookup_open(struct nameidata *nd, struct path *path,
 		fsnotify_create(dir_inode, dentry);
 	}
 	if (unlikely(create_error) && !dentry->d_inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = create_error;
 		goto out_dput;
 	}
@@ -3240,7 +3484,9 @@ static int do_last(struct nameidata *nd,
 	if (nd->last_type != LAST_NORM) {
 		error = handle_dots(nd, nd->last_type);
 		if (unlikely(error))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 		goto finish_open;
 	}
 
@@ -3253,7 +3499,9 @@ static int do_last(struct nameidata *nd,
 			goto finish_lookup;
 
 		if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 
 		BUG_ON(nd->inode != dir->d_inode);
 		BUG_ON(nd->flags & LOOKUP_RCU);
@@ -3266,18 +3514,24 @@ static int do_last(struct nameidata *nd,
 		 */
 		error = complete_walk(nd);
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 
 		audit_inode(nd->name, dir, LOOKUP_PARENT);
 		/* trailing slashes? */
 		if (unlikely(nd->last.name[nd->last.len]))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EISDIR;
+}
 	}
 
 	if (open_flag & (O_CREAT | O_TRUNC | O_WRONLY | O_RDWR)) {
 		error = mnt_want_write(nd->path.mnt);
 		if (!error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			got_write = true;
+}
 		/*
 		 * do _not_ fail yet - we might not need that or fail with
 		 * a different error; let lookup_open() decide; we'll be
@@ -3298,10 +3552,12 @@ static int do_last(struct nameidata *nd,
 		if (error)
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((*opened & FILE_CREATED) ||
 		    !S_ISREG(file_inode(file)->i_mode))
 			will_truncate = false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		audit_inode(nd->name, file->f_path.dentry, 0);
 		goto opened;
 	}
@@ -3327,7 +3583,9 @@ static int do_last(struct nameidata *nd,
 
 	error = follow_managed(&path, nd);
 	if (unlikely(error < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	if (unlikely(d_is_negative(path.dentry))) {
 		path_to_nameidata(&path, nd);
@@ -3349,26 +3607,34 @@ static int do_last(struct nameidata *nd,
 finish_lookup:
 	error = step_into(nd, &path, 0, inode, seq);
 	if (unlikely(error))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 finish_open:
 	/* Why this, you ask?  _Now_ we might have grown LOOKUP_JUMPED... */
 	error = complete_walk(nd);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	audit_inode(nd->name, nd->path.dentry, 0);
 	error = -EISDIR;
 	if ((open_flag & O_CREAT) && d_is_dir(nd->path.dentry))
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -ENOTDIR;
 	if ((nd->flags & LOOKUP_DIRECTORY) && !d_can_lookup(nd->path.dentry))
 		goto out;
 	if (!d_is_reg(nd->path.dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		will_truncate = false;
+}
 
 	if (will_truncate) {
 		error = mnt_want_write(nd->path.mnt);
 		if (error)
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		got_write = true;
 	}
 finish_open_created:
@@ -3383,18 +3649,24 @@ static int do_last(struct nameidata *nd,
 opened:
 	error = open_check_o_direct(file);
 	if (!error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = ima_file_check(file, op->acc_mode, *opened);
+}
 	if (!error && will_truncate)
 		error = handle_truncate(file);
 out:
 	if (unlikely(error) && (*opened & FILE_OPENED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fput(file);
+}
 	if (unlikely(error > 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(1);
 		error = -EINVAL;
 	}
 	if (got_write)
 		mnt_drop_write(nd->path.mnt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -3409,9 +3681,11 @@ struct dentry *vfs_tmpfile(struct dentry *dentry, umode_t mode, int open_flag)
 	error = inode_permission(dir, MAY_WRITE | MAY_EXEC);
 	if (error)
 		goto out_err;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EOPNOTSUPP;
 	if (!dir->i_op->tmpfile)
 		goto out_err;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -ENOMEM;
 	child = d_alloc(dentry, &slash_name);
 	if (unlikely(!child))
@@ -3419,15 +3693,18 @@ struct dentry *vfs_tmpfile(struct dentry *dentry, umode_t mode, int open_flag)
 	error = dir->i_op->tmpfile(dir, child, mode);
 	if (error)
 		goto out_err;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -ENOENT;
 	inode = child->d_inode;
 	if (unlikely(!inode))
 		goto out_err;
 	if (!(open_flag & O_EXCL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 		inode->i_state |= I_LINKABLE;
 		spin_unlock(&inode->i_lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return child;
 
 out_err:
@@ -3444,7 +3721,9 @@ static int do_tmpfile(struct nameidata *nd, unsigned flags,
 	struct path path;
 	int error = path_lookupat(nd, flags | LOOKUP_DIRECTORY, &path);
 	if (unlikely(error))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	error = mnt_want_write(path.mnt);
 	if (unlikely(error))
 		goto out;
@@ -3495,27 +3774,34 @@ static struct file *path_openat(struct nameidata *nd,
 
 	file = get_empty_filp();
 	if (IS_ERR(file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return file;
+}
 
 	file->f_flags = op->open_flag;
 
 	if (unlikely(file->f_flags & __O_TMPFILE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = do_tmpfile(nd, flags, op, file, &opened);
 		goto out2;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(file->f_flags & O_PATH)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = do_o_path(nd, flags, file);
 		if (!error)
 			opened |= FILE_OPENED;
 		goto out2;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	s = path_init(nd, flags);
 	if (IS_ERR(s)) {
 		put_filp(file);
 		return ERR_CAST(s);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!(error = link_path_walk(s, nd)) &&
 		(error = do_last(nd, file, op, &opened)) > 0) {
 		nd->flags &= ~(LOOKUP_OPEN|LOOKUP_CREATE|LOOKUP_EXCL);
@@ -3525,19 +3811,23 @@ static struct file *path_openat(struct nameidata *nd,
 			break;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	terminate_walk(nd);
 out2:
 	if (!(opened & FILE_OPENED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		BUG_ON(!error);
 		put_filp(file);
 	}
 	if (unlikely(error)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (error == -EOPENSTALE) {
 			if (flags & LOOKUP_RCU)
 				error = -ECHILD;
 			else
 				error = -ESTALE;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		file = ERR_PTR(error);
 	}
 	return file;
@@ -3555,7 +3845,9 @@ struct file *do_filp_open(int dfd, struct filename *pathname,
 	if (unlikely(filp == ERR_PTR(-ECHILD)))
 		filp = path_openat(&nd, op, flags);
 	if (unlikely(filp == ERR_PTR(-ESTALE)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		filp = path_openat(&nd, op, flags | LOOKUP_REVAL);
+}
 	restore_nameidata();
 	return filp;
 }
@@ -3571,6 +3863,7 @@ struct file *do_file_open_root(struct dentry *dentry, struct vfsmount *mnt,
 	nd.root.mnt = mnt;
 	nd.root.dentry = dentry;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (d_is_symlink(dentry) && op->intent & LOOKUP_OPEN)
 		return ERR_PTR(-ELOOP);
 
@@ -3592,6 +3885,7 @@ struct file *do_file_open_root(struct dentry *dentry, struct vfsmount *mnt,
 static struct dentry *filename_create(int dfd, struct filename *name,
 				struct path *path, unsigned int lookup_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dentry *dentry = ERR_PTR(-EEXIST);
 	struct qstr last;
 	int type;
@@ -3627,6 +3921,7 @@ static struct dentry *filename_create(int dfd, struct filename *name,
 	if (IS_ERR(dentry))
 		goto unlock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EEXIST;
 	if (d_is_positive(dentry))
 		goto fail;
@@ -3638,13 +3933,17 @@ static struct dentry *filename_create(int dfd, struct filename *name,
 	 * been asking for (non-existent) directory. -ENOENT for you.
 	 */
 	if (unlikely(!is_dir && last.name[last.len])) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOENT;
 		goto fail;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(err2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = err2;
 		goto fail;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	putname(name);
 	return dentry;
 fail:
@@ -3663,6 +3962,7 @@ static struct dentry *filename_create(int dfd, struct filename *name,
 struct dentry *kern_path_create(int dfd, const char *pathname,
 				struct path *path, unsigned int lookup_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return filename_create(dfd, getname_kernel(pathname),
 				path, lookup_flags);
 }
@@ -3680,6 +3980,7 @@ EXPORT_SYMBOL(done_path_create);
 inline struct dentry *user_path_create(int dfd, const char __user *pathname,
 				struct path *path, unsigned int lookup_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return filename_create(dfd, getname(pathname), path, lookup_flags);
 }
 EXPORT_SYMBOL(user_path_create);
@@ -3689,22 +3990,33 @@ int vfs_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev)
 	int error = may_create(dir, dentry);
 
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((S_ISCHR(mode) || S_ISBLK(mode)) && !capable(CAP_MKNOD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dir->i_op->mknod)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = devcgroup_inode_mknod(mode, dev);
 	if (error)
 		return error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = security_inode_mknod(dir, dentry, mode, dev);
 	if (error)
 		return error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = dir->i_op->mknod(dir, dentry, mode, dev);
 	if (!error)
 		fsnotify_create(dir, dentry);
@@ -3746,7 +4058,9 @@ SYSCALL_DEFINE4(mknodat, int, dfd, const char __user *, filename, umode_t, mode,
 		return PTR_ERR(dentry);
 
 	if (!IS_POSIXACL(path.dentry->d_inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mode &= ~current_umask();
+}
 	error = security_path_mknod(&path, dentry, mode, dev);
 	if (error)
 		goto out;
@@ -3770,6 +4084,7 @@ SYSCALL_DEFINE4(mknodat, int, dfd, const char __user *, filename, umode_t, mode,
 		lookup_flags |= LOOKUP_REVAL;
 		goto retry;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -3784,19 +4099,29 @@ int vfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
 	unsigned max_links = dir->i_sb->s_max_links;
 
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dir->i_op->mkdir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mode &= (S_IRWXUGO|S_ISVTX);
 	error = security_inode_mkdir(dir, dentry, mode);
 	if (error)
 		return error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (max_links && dir->i_nlink >= max_links)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EMLINK;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = dir->i_op->mkdir(dir, dentry, mode);
 	if (!error)
 		fsnotify_mkdir(dir, dentry);
@@ -3817,7 +4142,9 @@ SYSCALL_DEFINE3(mkdirat, int, dfd, const char __user *, pathname, umode_t, mode)
 		return PTR_ERR(dentry);
 
 	if (!IS_POSIXACL(path.dentry->d_inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mode &= ~current_umask();
+}
 	error = security_path_mkdir(&path, dentry, mode);
 	if (!error)
 		error = vfs_mkdir(path.dentry->d_inode, dentry, mode);
@@ -3826,6 +4153,7 @@ SYSCALL_DEFINE3(mkdirat, int, dfd, const char __user *, pathname, umode_t, mode)
 		lookup_flags |= LOOKUP_REVAL;
 		goto retry;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -3839,11 +4167,17 @@ int vfs_rmdir(struct inode *dir, struct dentry *dentry)
 	int error = may_delete(dir, dentry, 1);
 
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dir->i_op->rmdir)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dget(dentry);
 	inode_lock(dentry->d_inode);
 
@@ -3851,15 +4185,18 @@ int vfs_rmdir(struct inode *dir, struct dentry *dentry)
 	if (is_local_mountpoint(dentry))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = security_inode_rmdir(dir, dentry);
 	if (error)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	shrink_dcache_parent(dentry);
 	error = dir->i_op->rmdir(dir, dentry);
 	if (error)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dentry->d_inode->i_flags |= S_DEAD;
 	dont_mount(dentry);
 	detach_mounts(dentry);
@@ -3886,7 +4223,9 @@ static long do_rmdir(int dfd, const char __user *pathname)
 	name = filename_parentat(dfd, getname(pathname), lookup_flags,
 				&path, &last, &type);
 	if (IS_ERR(name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(name);
+}
 
 	switch (type) {
 	case LAST_DOTDOT:
@@ -3900,19 +4239,23 @@ static long do_rmdir(int dfd, const char __user *pathname)
 		goto exit1;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = mnt_want_write(path.mnt);
 	if (error)
 		goto exit1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_lock_nested(path.dentry->d_inode, I_MUTEX_PARENT);
 	dentry = __lookup_hash(&last, path.dentry, lookup_flags);
 	error = PTR_ERR(dentry);
 	if (IS_ERR(dentry))
 		goto exit2;
 	if (!dentry->d_inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOENT;
 		goto exit3;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = security_path_rmdir(&path, dentry);
 	if (error)
 		goto exit3;
@@ -3929,6 +4272,7 @@ static long do_rmdir(int dfd, const char __user *pathname)
 		lookup_flags |= LOOKUP_REVAL;
 		goto retry;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -3961,15 +4305,24 @@ int vfs_unlink(struct inode *dir, struct dentry *dentry, struct inode **delegate
 	int error = may_delete(dir, dentry, 0);
 
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dir->i_op->unlink)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_lock(target);
 	if (is_local_mountpoint(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EBUSY;
+}
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = security_inode_unlink(dir, dentry);
 		if (!error) {
 			error = try_break_deleg(target, delegated_inode);
@@ -3987,10 +4340,12 @@ int vfs_unlink(struct inode *dir, struct dentry *dentry, struct inode **delegate
 
 	/* We don't d_delete() NFS sillyrenamed files--they still exist. */
 	if (!error && !(dentry->d_flags & DCACHE_NFSFS_RENAMED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fsnotify_link_count(target);
 		d_delete(dentry);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 EXPORT_SYMBOL(vfs_unlink);
@@ -4016,12 +4371,15 @@ static long do_unlinkat(int dfd, const char __user *pathname)
 	name = filename_parentat(dfd, getname(pathname), lookup_flags,
 				&path, &last, &type);
 	if (IS_ERR(name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(name);
+}
 
 	error = -EISDIR;
 	if (type != LAST_NORM)
 		goto exit1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = mnt_want_write(path.mnt);
 	if (error)
 		goto exit1;
@@ -4049,10 +4407,12 @@ static long do_unlinkat(int dfd, const char __user *pathname)
 		iput(inode);	/* truncate the inode here */
 	inode = NULL;
 	if (delegated_inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = break_deleg_wait(&delegated_inode);
 		if (!error)
 			goto retry_deleg;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mnt_drop_write(path.mnt);
 exit1:
 	path_put(&path);
@@ -4062,13 +4422,18 @@ static long do_unlinkat(int dfd, const char __user *pathname)
 		inode = NULL;
 		goto retry;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 
 slashes:
 	if (d_is_negative(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOENT;
+}
 	else if (d_is_dir(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EISDIR;
+}
 	else
 		error = -ENOTDIR;
 	goto exit2;
@@ -4077,10 +4442,15 @@ static long do_unlinkat(int dfd, const char __user *pathname)
 SYSCALL_DEFINE3(unlinkat, int, dfd, const char __user *, pathname, int, flag)
 {
 	if ((flag & ~AT_REMOVEDIR) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (flag & AT_REMOVEDIR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return do_rmdir(dfd, pathname);
+}
 
 	return do_unlinkat(dfd, pathname);
 }
@@ -4095,15 +4465,22 @@ int vfs_symlink(struct inode *dir, struct dentry *dentry, const char *oldname)
 	int error = may_create(dir, dentry);
 
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dir->i_op->symlink)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = security_inode_symlink(dir, dentry, oldname);
 	if (error)
 		return error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = dir->i_op->symlink(dir, dentry, oldname);
 	if (!error)
 		fsnotify_create(dir, dentry);
@@ -4129,6 +4506,7 @@ SYSCALL_DEFINE3(symlinkat, const char __user *, oldname,
 	if (IS_ERR(dentry))
 		goto out_putname;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = security_path_symlink(&path, dentry, from->name);
 	if (!error)
 		error = vfs_symlink(path.dentry->d_inode, dentry, from->name);
@@ -4173,56 +4551,82 @@ int vfs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *new_de
 	int error;
 
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = may_create(dir, new_dentry);
 	if (error)
 		return error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dir->i_sb != inode->i_sb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EXDEV;
+}
 
 	/*
 	 * A link to an append-only or immutable file cannot be created.
 	 */
 	if (IS_APPEND(inode) || IS_IMMUTABLE(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 	/*
 	 * Updating the link count will likely cause i_uid and i_gid to
 	 * be writen back improperly if their true value is unknown to
 	 * the vfs.
 	 */
 	if (HAS_UNMAPPED_ID(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 	if (!dir->i_op->link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 	if (S_ISDIR(inode->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = security_inode_link(old_dentry, dir, new_dentry);
 	if (error)
 		return error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_lock(inode);
 	/* Make sure we don't allow creating hardlink to an unlinked file */
 	if (inode->i_nlink == 0 && !(inode->i_state & I_LINKABLE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error =  -ENOENT;
+}
 	else if (max_links && inode->i_nlink >= max_links)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EMLINK;
+}
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = try_break_deleg(inode, delegated_inode);
 		if (!error)
 			error = dir->i_op->link(old_dentry, dir, new_dentry);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!error && (inode->i_state & I_LINKABLE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 		inode->i_state &= ~I_LINKABLE;
 		spin_unlock(&inode->i_lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_unlock(inode);
 	if (!error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fsnotify_link(dir, inode, new_dentry);
+}
 	return error;
 }
 EXPORT_SYMBOL(vfs_link);
@@ -4246,31 +4650,40 @@ SYSCALL_DEFINE5(linkat, int, olddfd, const char __user *, oldname,
 	int error;
 
 	if ((flags & ~(AT_SYMLINK_FOLLOW | AT_EMPTY_PATH)) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	/*
 	 * To use null names we require CAP_DAC_READ_SEARCH
 	 * This ensures that not everyone will be able to create
 	 * handlink using the passed filedescriptor.
 	 */
 	if (flags & AT_EMPTY_PATH) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!capable(CAP_DAC_READ_SEARCH))
 			return -ENOENT;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		how = LOOKUP_EMPTY;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (flags & AT_SYMLINK_FOLLOW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		how |= LOOKUP_FOLLOW;
+}
 retry:
 	error = user_path_at(olddfd, oldname, how, &old_path);
 	if (error)
 		return error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	new_dentry = user_path_create(newdfd, newname, &new_path,
 					(how & LOOKUP_REVAL));
 	error = PTR_ERR(new_dentry);
 	if (IS_ERR(new_dentry))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EXDEV;
 	if (old_path.mnt != new_path.mnt)
 		goto out_dput;
@@ -4286,11 +4699,14 @@ SYSCALL_DEFINE5(linkat, int, olddfd, const char __user *, oldname,
 	if (delegated_inode) {
 		error = break_deleg_wait(&delegated_inode);
 		if (!error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			path_put(&old_path);
 			goto retry;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (retry_estale(error, how)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		path_put(&old_path);
 		how |= LOOKUP_REVAL;
 		goto retry;
@@ -4369,50 +4785,72 @@ int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 	struct name_snapshot old_name;
 
 	if (source == target)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = may_delete(old_dir, old_dentry, is_dir);
 	if (error)
 		return error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!target) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = may_create(new_dir, new_dentry);
 	} else {
 		new_is_dir = d_is_dir(new_dentry);
 
 		if (!(flags & RENAME_EXCHANGE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = may_delete(new_dir, new_dentry, is_dir);
+}
 		else
 			error = may_delete(new_dir, new_dentry, new_is_dir);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!old_dir->i_op->rename)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	/*
 	 * If we are going to change the parent - check write permissions,
 	 * we'll need to flip '..'.
 	 */
 	if (new_dir != old_dir) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (is_dir) {
 			error = inode_permission(source, MAY_WRITE);
 			if (error)
 				return error;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((flags & RENAME_EXCHANGE) && new_is_dir) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = inode_permission(target, MAY_WRITE);
 			if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return error;
+}
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = security_inode_rename(old_dir, old_dentry, new_dir, new_dentry,
 				      flags);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	take_dentry_name_snapshot(&old_name, old_dentry);
 	dget(new_dentry);
 	if (!is_dir || (flags & RENAME_EXCHANGE))
@@ -4420,42 +4858,57 @@ int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 	else if (target)
 		inode_lock(target);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EBUSY;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (is_local_mountpoint(old_dentry) || is_local_mountpoint(new_dentry))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (max_links && new_dir != old_dir) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EMLINK;
 		if (is_dir && !new_is_dir && new_dir->i_nlink >= max_links)
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((flags & RENAME_EXCHANGE) && !is_dir && new_is_dir &&
 		    old_dir->i_nlink >= max_links)
 			goto out;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (is_dir && !(flags & RENAME_EXCHANGE) && target)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shrink_dcache_parent(new_dentry);
+}
 	if (!is_dir) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = try_break_deleg(source, delegated_inode);
 		if (error)
 			goto out;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (target && !new_is_dir) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = try_break_deleg(target, delegated_inode);
 		if (error)
 			goto out;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = old_dir->i_op->rename(old_dir, old_dentry,
 				       new_dir, new_dentry, flags);
 	if (error)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(flags & RENAME_EXCHANGE) && target) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (is_dir)
 			target->i_flags |= S_DEAD;
 		dont_mount(new_dentry);
 		detach_mounts(new_dentry);
 	}
 	if (!(old_dir->i_sb->s_type->fs_flags & FS_RENAME_DOES_D_MOVE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(flags & RENAME_EXCHANGE))
 			d_move(old_dentry, new_dentry);
 		else
@@ -4463,7 +4916,9 @@ int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 	}
 out:
 	if (!is_dir || (flags & RENAME_EXCHANGE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unlock_two_nondirectories(source, target);
+}
 	else if (target)
 		inode_unlock(target);
 	dput(new_dentry);
@@ -4475,6 +4930,7 @@ int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 				      new_is_dir, NULL, new_dentry);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	release_dentry_name_snapshot(&old_name);
 
 	return error;
@@ -4497,46 +4953,64 @@ SYSCALL_DEFINE5(renameat2, int, olddfd, const char __user *, oldname,
 	int error;
 
 	if (flags & ~(RENAME_NOREPLACE | RENAME_EXCHANGE | RENAME_WHITEOUT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((flags & (RENAME_NOREPLACE | RENAME_WHITEOUT)) &&
 	    (flags & RENAME_EXCHANGE))
 		return -EINVAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((flags & RENAME_WHITEOUT) && !capable(CAP_MKNOD))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (flags & RENAME_EXCHANGE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		target_flags = 0;
+}
 
 retry:
 	from = filename_parentat(olddfd, getname(oldname), lookup_flags,
 				&old_path, &old_last, &old_type);
 	if (IS_ERR(from)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = PTR_ERR(from);
 		goto exit;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	to = filename_parentat(newdfd, getname(newname), lookup_flags,
 				&new_path, &new_last, &new_type);
 	if (IS_ERR(to)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = PTR_ERR(to);
 		goto exit1;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EXDEV;
 	if (old_path.mnt != new_path.mnt)
 		goto exit2;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EBUSY;
 	if (old_type != LAST_NORM)
 		goto exit2;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (flags & RENAME_NOREPLACE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EEXIST;
+}
 	if (new_type != LAST_NORM)
 		goto exit2;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = mnt_want_write(old_path.mnt);
 	if (error)
 		goto exit2;
@@ -4557,14 +5031,18 @@ SYSCALL_DEFINE5(renameat2, int, olddfd, const char __user *, oldname,
 	if (IS_ERR(new_dentry))
 		goto exit4;
 	error = -EEXIST;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((flags & RENAME_NOREPLACE) && d_is_positive(new_dentry))
 		goto exit5;
 	if (flags & RENAME_EXCHANGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOENT;
 		if (d_is_negative(new_dentry))
 			goto exit5;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!d_is_dir(new_dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -ENOTDIR;
 			if (new_last.name[new_last.len])
 				goto exit5;
@@ -4572,6 +5050,7 @@ SYSCALL_DEFINE5(renameat2, int, olddfd, const char __user *, oldname,
 	}
 	/* unless the source is a directory trailing slashes give -ENOTDIR */
 	if (!d_is_dir(old_dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOTDIR;
 		if (old_last.name[old_last.len])
 			goto exit5;
@@ -4584,10 +5063,13 @@ SYSCALL_DEFINE5(renameat2, int, olddfd, const char __user *, oldname,
 		goto exit5;
 	/* target should not be an ancestor of source */
 	if (!(flags & RENAME_EXCHANGE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENOTEMPTY;
+}
 	if (new_dentry == trap)
 		goto exit5;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = security_path_rename(&old_path, old_dentry,
 				     &new_path, new_dentry, flags);
 	if (error)
@@ -4606,10 +5088,13 @@ SYSCALL_DEFINE5(renameat2, int, olddfd, const char __user *, oldname,
 		if (!error)
 			goto retry_deleg;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mnt_drop_write(old_path.mnt);
 exit2:
 	if (retry_estale(error, lookup_flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		should_retry = true;
+}
 	path_put(&new_path);
 	putname(to);
 exit1:
@@ -4627,6 +5112,7 @@ SYSCALL_DEFINE5(renameat2, int, olddfd, const char __user *, oldname,
 SYSCALL_DEFINE4(renameat, int, olddfd, const char __user *, oldname,
 		int, newdfd, const char __user *, newname)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sys_renameat2(olddfd, oldname, newdfd, newname, 0);
 }
 
@@ -4641,9 +5127,13 @@ int vfs_whiteout(struct inode *dir, struct dentry *dentry)
 	if (error)
 		return error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!dir->i_op->mknod)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dir->i_op->mknod(dir, dentry,
 				S_IFCHR | WHITEOUT_MODE, WHITEOUT_DEV);
 }
@@ -4655,11 +5145,14 @@ int readlink_copy(char __user *buffer, int buflen, const char *link)
 	if (IS_ERR(link))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	len = strlen(link);
 	if (len > (unsigned) buflen)
 		len = buflen;
 	if (copy_to_user(buffer, link, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = -EFAULT;
+}
 out:
 	return len;
 }
@@ -4678,10 +5171,12 @@ static int generic_readlink(struct dentry *dentry, char __user *buffer,
 	int res;
 
 	if (!link) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		link = inode->i_op->get_link(dentry, inode, &done);
 		if (IS_ERR(link))
 			return PTR_ERR(link);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	res = readlink_copy(buffer, buflen, link);
 	do_delayed_call(&done);
 	return res;
@@ -4702,17 +5197,22 @@ int vfs_readlink(struct dentry *dentry, char __user *buffer, int buflen)
 	struct inode *inode = d_inode(dentry);
 
 	if (unlikely(!(inode->i_opflags & IOP_DEFAULT_READLINK))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unlikely(inode->i_op->readlink))
 			return inode->i_op->readlink(dentry, buffer, buflen);
 
 		if (!d_is_symlink(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 		inode->i_opflags |= IOP_DEFAULT_READLINK;
 		spin_unlock(&inode->i_lock);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return generic_readlink(dentry, buffer, buflen);
 }
 EXPORT_SYMBOL(vfs_readlink);
@@ -4734,6 +5234,7 @@ const char *vfs_get_link(struct dentry *dentry, struct delayed_call *done)
 	struct inode *inode = d_inode(dentry);
 
 	if (d_is_symlink(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = ERR_PTR(security_inode_readlink(dentry));
 		if (!res)
 			res = inode->i_op->get_link(dentry, inode, done);
@@ -4751,6 +5252,7 @@ const char *page_get_link(struct dentry *dentry, struct inode *inode,
 	struct address_space *mapping = inode->i_mapping;
 
 	if (!dentry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		page = find_get_page(mapping, 0);
 		if (!page)
 			return ERR_PTR(-ECHILD);
@@ -4774,6 +5276,7 @@ EXPORT_SYMBOL(page_get_link);
 
 void page_put_link(void *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	put_page(arg);
 }
 EXPORT_SYMBOL(page_put_link);
@@ -4800,7 +5303,9 @@ int __page_symlink(struct inode *inode, const char *symname, int len, int nofs)
 	int err;
 	unsigned int flags = 0;
 	if (nofs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= AOP_FLAG_NOFS;
+}
 
 retry:
 	err = pagecache_write_begin(NULL, mapping, 0, len-1,
diff --git a/fs/namespace.c b/fs/namespace.c
index adae9ff..964b9de 100644
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/namespace.c
  *
@@ -41,6 +43,7 @@ static unsigned int mp_hash_shift __read_mostly;
 static __initdata unsigned long mhash_entries;
 static int __init set_mhash_entries(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!str)
 		return 0;
 	mhash_entries = simple_strtoul(str, &str, 0);
@@ -51,6 +54,7 @@ __setup("mhash_entries=", set_mhash_entries);
 static __initdata unsigned long mphash_entries;
 static int __init set_mphash_entries(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!str)
 		return 0;
 	mphash_entries = simple_strtoul(str, &str, 0);
@@ -109,6 +113,7 @@ static int mnt_alloc_id(struct mount *mnt)
 	res = ida_get_new_above(&mnt_id_ida, mnt_id_start, &mnt->mnt_id);
 	if (!res)
 		mnt_id_start = mnt->mnt_id + 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&mnt_id_lock);
 	if (res == -EAGAIN)
 		goto retry;
@@ -123,6 +128,7 @@ static void mnt_free_id(struct mount *mnt)
 	ida_remove(&mnt_id_ida, id);
 	if (mnt_id_start > id)
 		mnt_id_start = id;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&mnt_id_lock);
 }
 
@@ -136,7 +142,9 @@ static int mnt_alloc_group_id(struct mount *mnt)
 	int res;
 
 	if (!ida_pre_get(&mnt_group_ida, GFP_KERNEL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	res = ida_get_new_above(&mnt_group_ida,
 				mnt_group_start,
@@ -144,6 +152,7 @@ static int mnt_alloc_group_id(struct mount *mnt)
 	if (!res)
 		mnt_group_start = mnt->mnt_group_id + 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return res;
 }
 
@@ -194,6 +203,7 @@ unsigned int mnt_get_count(struct mount *mnt)
 
 static void drop_mountpoint(struct fs_pin *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mount *m = container_of(p, struct mount, mnt_umount);
 	dput(m->mnt_ex_mountpoint);
 	pin_remove(p);
@@ -227,6 +237,7 @@ static struct mount *alloc_vfsmnt(const char *name)
 		mnt->mnt_writers = 0;
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INIT_HLIST_NODE(&mnt->mnt_hash);
 		INIT_LIST_HEAD(&mnt->mnt_child);
 		INIT_LIST_HEAD(&mnt->mnt_mounts);
@@ -239,6 +250,7 @@ static struct mount *alloc_vfsmnt(const char *name)
 		INIT_LIST_HEAD(&mnt->mnt_umounting);
 		init_fs_pin(&mnt->mnt_umount, drop_mountpoint);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mnt;
 
 #ifdef CONFIG_SMP
@@ -274,9 +286,13 @@ static struct mount *alloc_vfsmnt(const char *name)
 int __mnt_is_readonly(struct vfsmount *mnt)
 {
 	if (mnt->mnt_flags & MNT_READONLY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	if (sb_rdonly(mnt->mnt_sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	return 0;
 }
 EXPORT_SYMBOL_GPL(__mnt_is_readonly);
@@ -318,7 +334,9 @@ static unsigned int mnt_get_writers(struct mount *mnt)
 static int mnt_is_readonly(struct vfsmount *mnt)
 {
 	if (mnt->mnt_sb->s_readonly_remount)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	/* Order wrt setting s_flags/s_readonly_remount in do_remount() */
 	smp_rmb();
 	return __mnt_is_readonly(mnt);
@@ -342,6 +360,7 @@ static int mnt_is_readonly(struct vfsmount *mnt)
  */
 int __mnt_want_write(struct vfsmount *m)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mount *mnt = real_mount(m);
 	int ret = 0;
 
@@ -362,6 +381,7 @@ int __mnt_want_write(struct vfsmount *m)
 	 */
 	smp_rmb();
 	if (mnt_is_readonly(m)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mnt_dec_writers(mnt);
 		ret = -EROFS;
 	}
@@ -386,7 +406,9 @@ int mnt_want_write(struct vfsmount *m)
 	sb_start_write(m->mnt_sb);
 	ret = __mnt_want_write(m);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sb_end_write(m->mnt_sb);
+}
 	return ret;
 }
 EXPORT_SYMBOL_GPL(mnt_want_write);
@@ -407,7 +429,9 @@ int mnt_clone_write(struct vfsmount *mnt)
 {
 	/* superblock may be r/o */
 	if (__mnt_is_readonly(mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EROFS;
+}
 	preempt_disable();
 	mnt_inc_writers(real_mount(mnt));
 	preempt_enable();
@@ -449,7 +473,9 @@ int mnt_want_write_file_path(struct file *file)
 	sb_start_write(file->f_path.mnt->mnt_sb);
 	ret = __mnt_want_write_file(file);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sb_end_write(file->f_path.mnt->mnt_sb);
+}
 	return ret;
 }
 
@@ -460,7 +486,9 @@ static inline int may_write_real(struct file *file)
 
 	/* Writable file? */
 	if (file->f_mode & FMODE_WRITER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Not overlayfs? */
 	if (likely(!(dentry->d_flags & DCACHE_OP_REAL)))
@@ -494,6 +522,7 @@ int mnt_want_write_file(struct file *file)
 
 	ret = may_write_real(file);
 	if (!ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sb_start_write(file_inode(file)->i_sb);
 		ret = __mnt_want_write_file(file);
 		if (ret)
@@ -528,6 +557,7 @@ void __mnt_drop_write(struct vfsmount *mnt)
  */
 void mnt_drop_write(struct vfsmount *mnt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__mnt_drop_write(mnt);
 	sb_end_write(mnt->mnt_sb);
 }
@@ -545,6 +575,7 @@ void mnt_drop_write_file_path(struct file *file)
 
 void mnt_drop_write_file(struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__mnt_drop_write(file->f_path.mnt);
 	sb_end_write(file_inode(file)->i_sb);
 }
@@ -579,7 +610,9 @@ static int mnt_make_readonly(struct mount *mnt)
 	 * we're counting up here.
 	 */
 	if (mnt_get_writers(mnt) > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EBUSY;
+}
 	else
 		mnt->mnt.mnt_flags |= MNT_READONLY;
 	/*
@@ -594,6 +627,7 @@ static int mnt_make_readonly(struct mount *mnt)
 
 static void __mnt_unmake_readonly(struct mount *mnt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lock_mount_hash();
 	mnt->mnt.mnt_flags &= ~MNT_READONLY;
 	unlock_mount_hash();
@@ -606,7 +640,9 @@ int sb_prepare_remount_readonly(struct super_block *sb)
 
 	/* Racy optimization.  Recheck the counter under MNT_WRITE_HOLD */
 	if (atomic_long_read(&sb->s_remove_count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	lock_mount_hash();
 	list_for_each_entry(mnt, &sb->s_mounts, mnt_instance) {
@@ -614,13 +650,16 @@ int sb_prepare_remount_readonly(struct super_block *sb)
 			mnt->mnt.mnt_flags |= MNT_WRITE_HOLD;
 			smp_mb();
 			if (mnt_get_writers(mnt) > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err = -EBUSY;
 				break;
 			}
 		}
 	}
 	if (!err && atomic_long_read(&sb->s_remove_count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EBUSY;
+}
 
 	if (!err) {
 		sb->s_readonly_remount = 1;
@@ -654,17 +693,27 @@ int __legitimize_mnt(struct vfsmount *bastard, unsigned seq)
 {
 	struct mount *mnt;
 	if (read_seqretry(&mount_lock, seq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	if (bastard == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mnt = real_mount(bastard);
 	mnt_add_count(mnt, 1);
 	if (likely(!read_seqretry(&mount_lock, seq)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (bastard->mnt_flags & MNT_SYNC_UMOUNT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mnt_add_count(mnt, -1);
 		return 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -1;
 }
 
@@ -673,12 +722,17 @@ bool legitimize_mnt(struct vfsmount *bastard, unsigned seq)
 {
 	int res = __legitimize_mnt(bastard, seq);
 	if (likely(!res))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(res < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		mntput(bastard);
 		rcu_read_lock();
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -693,7 +747,10 @@ struct mount *__lookup_mnt(struct vfsmount *mnt, struct dentry *dentry)
 
 	hlist_for_each_entry_rcu(p, head, mnt_hash)
 		if (&p->mnt_parent->mnt == mnt && p->mnt_mountpoint == dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return p;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -721,10 +778,12 @@ struct vfsmount *lookup_mnt(const struct path *path)
 
 	rcu_read_lock();
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq = read_seqbegin(&mount_lock);
 		child_mnt = __lookup_mnt(path->mnt, path->dentry);
 		m = child_mnt ? &child_mnt->mnt : NULL;
 	} while (!legitimize_mnt(m, seq));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	return m;
 }
@@ -746,6 +805,7 @@ struct vfsmount *lookup_mnt(const struct path *path)
  */
 bool __is_local_mountpoint(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mnt_namespace *ns = current->nsproxy->mnt_ns;
 	struct mount *mnt;
 	bool is_covered = false;
@@ -773,11 +833,14 @@ static struct mountpoint *lookup_mountpoint(struct dentry *dentry)
 		if (mp->m_dentry == dentry) {
 			/* might be worth a WARN_ON() */
 			if (d_unlinked(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ERR_PTR(-ENOENT);
+}
 			mp->m_count++;
 			return mp;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -796,9 +859,13 @@ static struct mountpoint *get_mountpoint(struct dentry *dentry)
 	}
 
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new = kmalloc(sizeof(struct mountpoint), GFP_KERNEL);
+}
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 
 	/* Exactly one processes may set d_mounted */
@@ -833,6 +900,7 @@ static void put_mountpoint(struct mountpoint *mp)
 	if (!--mp->m_count) {
 		struct dentry *dentry = mp->m_dentry;
 		BUG_ON(!hlist_empty(&mp->m_list));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&dentry->d_lock);
 		dentry->d_flags &= ~DCACHE_MOUNTED;
 		spin_unlock(&dentry->d_lock);
@@ -996,12 +1064,16 @@ static struct mount *next_mnt(struct mount *p, struct mount *root)
 {
 	struct list_head *next = p->mnt_mounts.next;
 	if (next == &p->mnt_mounts) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (1) {
 			if (p == root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return NULL;
+}
 			next = p->mnt_child.next;
 			if (next != &p->mnt_parent->mnt_mounts)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p = p->mnt_parent;
 		}
 	}
@@ -1011,6 +1083,7 @@ static struct mount *next_mnt(struct mount *p, struct mount *root)
 static struct mount *skip_mnt_tree(struct mount *p)
 {
 	struct list_head *prev = p->mnt_mounts.prev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (prev != &p->mnt_mounts) {
 		p = list_entry(prev, struct mount, mnt_child);
 		prev = p->mnt_mounts.prev;
@@ -1025,17 +1098,22 @@ vfs_kern_mount(struct file_system_type *type, int flags, const char *name, void
 	struct dentry *root;
 
 	if (!type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENODEV);
+}
 
 	mnt = alloc_vfsmnt(name);
 	if (!mnt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	if (flags & SB_KERNMOUNT)
 		mnt->mnt.mnt_flags = MNT_INTERNAL;
 
 	root = mount_fs(type, flags, name, data);
 	if (IS_ERR(root)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mnt_free_id(mnt);
 		free_vfsmnt(mnt);
 		return ERR_CAST(root);
@@ -1076,7 +1154,9 @@ static struct mount *clone_mnt(struct mount *old, struct dentry *root,
 
 	mnt = alloc_vfsmnt(old->mnt_devname);
 	if (!mnt)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	if (flag & (CL_SLAVE | CL_PRIVATE | CL_SHARED_TO_SLAVE))
 		mnt->mnt_group_id = 0; /* not a peer of original */
@@ -1084,6 +1164,7 @@ static struct mount *clone_mnt(struct mount *old, struct dentry *root,
 		mnt->mnt_group_id = old->mnt_group_id;
 
 	if ((flag & CL_MAKE_SHARED) && !mnt->mnt_group_id) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = mnt_alloc_group_id(mnt);
 		if (err)
 			goto out_free;
@@ -1092,19 +1173,31 @@ static struct mount *clone_mnt(struct mount *old, struct dentry *root,
 	mnt->mnt.mnt_flags = old->mnt.mnt_flags & ~(MNT_WRITE_HOLD|MNT_MARKED);
 	/* Don't allow unprivileged users to change mount flags */
 	if (flag & CL_UNPRIVILEGED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mnt->mnt.mnt_flags |= MNT_LOCK_ATIME;
 
 		if (mnt->mnt.mnt_flags & MNT_READONLY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mnt->mnt.mnt_flags |= MNT_LOCK_READONLY;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (mnt->mnt.mnt_flags & MNT_NODEV)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mnt->mnt.mnt_flags |= MNT_LOCK_NODEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (mnt->mnt.mnt_flags & MNT_NOSUID)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mnt->mnt.mnt_flags |= MNT_LOCK_NOSUID;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (mnt->mnt.mnt_flags & MNT_NOEXEC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mnt->mnt.mnt_flags |= MNT_LOCK_NOEXEC;
+}
 	}
 
 	/* Don't allow unprivileged users to reveal what is under a mount */
@@ -1123,6 +1216,7 @@ static struct mount *clone_mnt(struct mount *old, struct dentry *root,
 
 	if ((flag & CL_SLAVE) ||
 	    ((flag & CL_SHARED_TO_SLAVE) && IS_MNT_SHARED(old))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_add(&mnt->mnt_slave, &old->mnt_slave_list);
 		mnt->mnt_master = old;
 		CLEAR_MNT_SHARED(mnt);
@@ -1136,15 +1230,20 @@ static struct mount *clone_mnt(struct mount *old, struct dentry *root,
 		CLEAR_MNT_SHARED(mnt);
 	}
 	if (flag & CL_MAKE_SHARED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_mnt_shared(mnt);
+}
 
 	/* stick the duplicate mount on the same expiry list
 	 * as the original if that was on one */
 	if (flag & CL_EXPIRE) {
 		if (!list_empty(&old->mnt_expire))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			list_add(&mnt->mnt_expire, &old->mnt_expire);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mnt;
 
  out_free:
@@ -1167,7 +1266,9 @@ static void cleanup_mnt(struct mount *mnt)
 	 */
 	WARN_ON(mnt_get_writers(mnt));
 	if (unlikely(mnt->mnt_pins.first))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mnt_pin_kill(mnt);
+}
 	fsnotify_vfsmount_delete(&mnt->mnt);
 	dput(mnt->mnt.mnt_root);
 	deactivate_super(mnt->mnt.mnt_sb);
@@ -1183,6 +1284,7 @@ static void __cleanup_mnt(struct rcu_head *head)
 static LLIST_HEAD(delayed_mntput_list);
 static void delayed_mntput(struct work_struct *unused)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct llist_node *node = llist_del_all(&delayed_mntput_list);
 	struct mount *m, *t;
 
@@ -1193,19 +1295,23 @@ static DECLARE_DELAYED_WORK(delayed_mntput_work, delayed_mntput);
 
 static void mntput_no_expire(struct mount *mnt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	mnt_add_count(mnt, -1);
 	if (likely(mnt->mnt_ns)) { /* shouldn't be the last one */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		return;
 	}
 	lock_mount_hash();
 	if (mnt_get_count(mnt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		unlock_mount_hash();
 		return;
 	}
 	if (unlikely(mnt->mnt.mnt_flags & MNT_DOOMED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		unlock_mount_hash();
 		return;
@@ -1217,21 +1323,31 @@ static void mntput_no_expire(struct mount *mnt)
 
 	if (unlikely(!list_empty(&mnt->mnt_mounts))) {
 		struct mount *p, *tmp;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_for_each_entry_safe(p, tmp, &mnt->mnt_mounts,  mnt_child) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			umount_mnt(p);
 		}
 	}
 	unlock_mount_hash();
 
 	if (likely(!(mnt->mnt.mnt_flags & MNT_INTERNAL))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct task_struct *task = current;
 		if (likely(!(task->flags & PF_KTHREAD))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			init_task_work(&mnt->mnt_rcu, __cleanup_mnt);
 			if (!task_work_add(task, &mnt->mnt_rcu, true))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return;
+}
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (llist_add(&mnt->mnt_llist, &delayed_mntput_list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			schedule_delayed_work(&delayed_mntput_work, 1);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 	cleanup_mnt(mnt);
@@ -1240,10 +1356,13 @@ static void mntput_no_expire(struct mount *mnt)
 void mntput(struct vfsmount *mnt)
 {
 	if (mnt) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct mount *m = real_mount(mnt);
 		/* avoid cacheline pingpong, hope gcc doesn't get "smart" */
 		if (unlikely(m->mnt_expiry_mark))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			m->mnt_expiry_mark = 0;
+}
 		mntput_no_expire(m);
 	}
 }
@@ -1273,7 +1392,9 @@ bool path_is_mountpoint(const struct path *path)
 	bool res;
 
 	if (!d_mountpoint(path->dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	rcu_read_lock();
 	do {
@@ -1291,7 +1412,9 @@ struct vfsmount *mnt_clone_internal(const struct path *path)
 	struct mount *p;
 	p = clone_mnt(real_mount(path->mnt), path->dentry, CL_PRIVATE);
 	if (IS_ERR(p))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(p);
+}
 	p->mnt.mnt_flags |= MNT_INTERNAL;
 	return &p->mnt;
 }
@@ -1306,7 +1429,9 @@ static void *m_start(struct seq_file *m, loff_t *pos)
 	if (p->cached_event == p->ns->event) {
 		void *v = p->cached_mount;
 		if (*pos == p->cached_index)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return v;
+}
 		if (*pos == p->cached_index + 1) {
 			v = seq_list_next(v, &p->ns->list, &p->cached_index);
 			return p->cached_mount = v;
@@ -1336,6 +1461,7 @@ static void m_stop(struct seq_file *m, void *v)
 static int m_show(struct seq_file *m, void *v)
 {
 	struct proc_mounts *p = m->private;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mount *r = list_entry(v, struct mount, mnt_list);
 	return p->show(m, &r->mnt);
 }
@@ -1358,6 +1484,7 @@ const struct seq_operations mounts_op = {
  */
 int may_umount_tree(struct vfsmount *m)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mount *mnt = real_mount(m);
 	int actual_refs = 0;
 	int minimum_refs = 0;
@@ -1399,7 +1526,9 @@ int may_umount(struct vfsmount *mnt)
 	down_read(&namespace_sem);
 	lock_mount_hash();
 	if (propagate_mount_busy(real_mount(mnt), 2))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 0;
+}
 	unlock_mount_hash();
 	up_read(&namespace_sem);
 	return ret;
@@ -1420,6 +1549,7 @@ static void namespace_unlock(void)
 	if (likely(hlist_empty(&head)))
 		return;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	synchronize_rcu();
 
 	group_pin_kill(&head);
@@ -1440,26 +1570,36 @@ static bool disconnect_mount(struct mount *mnt, enum umount_tree_flags how)
 {
 	/* Leaving mounts connected is only valid for lazy umounts */
 	if (how & UMOUNT_SYNC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	/* A mount without a parent has nothing to be connected to */
 	if (!mnt_has_parent(mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	/* Because the reference counting rules change when mounts are
 	 * unmounted and connected, umounted mounts may not be
 	 * connected to mounted mounts.
 	 */
 	if (!(mnt->mnt_parent->mnt.mnt_flags & MNT_UMOUNT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	/* Has it been requested that the mount remain connected? */
 	if (how & UMOUNT_CONNECTED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/* Is the mount locked such that it needs to remain connected? */
 	if (IS_MNT_LOCKED(mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/* By default disconnect the mount */
 	return true;
@@ -1533,7 +1673,9 @@ static int do_umount(struct mount *mnt, int flags)
 
 	retval = security_sb_umount(&mnt->mnt, flags);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 
 	/*
 	 * Allow userspace to request a mountpoint be expired rather than
@@ -1542,6 +1684,7 @@ static int do_umount(struct mount *mnt, int flags)
 	 *  (2) the usage count == 1 [parent vfsmount] + 1 [sys_umount]
 	 */
 	if (flags & MNT_EXPIRE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (&mnt->mnt == current->fs->root.mnt ||
 		    flags & (MNT_FORCE | MNT_DETACH))
 			return -EINVAL;
@@ -1552,13 +1695,18 @@ static int do_umount(struct mount *mnt, int flags)
 		 */
 		lock_mount_hash();
 		if (mnt_get_count(mnt) != 2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unlock_mount_hash();
 			return -EBUSY;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unlock_mount_hash();
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!xchg(&mnt->mnt_expiry_mark, 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EAGAIN;
+}
 	}
 
 	/*
@@ -1572,6 +1720,7 @@ static int do_umount(struct mount *mnt, int flags)
 	 */
 
 	if (flags & MNT_FORCE && sb->s_op->umount_begin) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sb->s_op->umount_begin(sb);
 	}
 
@@ -1590,10 +1739,16 @@ static int do_umount(struct mount *mnt, int flags)
 		 * we just try to remount it readonly.
 		 */
 		if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		down_write(&sb->s_umount);
 		if (!sb_rdonly(sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = do_remount_sb(sb, SB_RDONLY, NULL, 0);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up_write(&sb->s_umount);
 		return retval;
 	}
@@ -1605,6 +1760,7 @@ static int do_umount(struct mount *mnt, int flags)
 	if (flags & MNT_DETACH) {
 		if (!list_empty(&mnt->mnt_list))
 			umount_tree(mnt, UMOUNT_PROPAGATE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = 0;
 	} else {
 		shrink_submounts(mnt);
@@ -1612,6 +1768,7 @@ static int do_umount(struct mount *mnt, int flags)
 		if (!propagate_mount_busy(mnt, 2)) {
 			if (!list_empty(&mnt->mnt_list))
 				umount_tree(mnt, UMOUNT_PROPAGATE|UMOUNT_SYNC);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = 0;
 		}
 	}
@@ -1641,6 +1798,7 @@ void __detach_mounts(struct dentry *dentry)
 	if (IS_ERR_OR_NULL(mp))
 		goto out_unlock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	event++;
 	while (!hlist_empty(&mp->m_list)) {
 		mnt = hlist_entry(mp->m_list.first, struct mount, mnt_mp_list);
@@ -1688,13 +1846,19 @@ SYSCALL_DEFINE2(umount, char __user *, name, int, flags)
 	int lookup_flags = 0;
 
 	if (flags & ~(MNT_FORCE | MNT_DETACH | MNT_EXPIRE | UMOUNT_NOFOLLOW))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (!may_mount())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	if (!(flags & UMOUNT_NOFOLLOW))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lookup_flags |= LOOKUP_FOLLOW;
+}
 
 	retval = user_path_mountpoint_at(AT_FDCWD, name, lookup_flags, &path);
 	if (retval)
@@ -1707,6 +1871,7 @@ SYSCALL_DEFINE2(umount, char __user *, name, int, flags)
 		goto dput_and_out;
 	if (mnt->mnt.mnt_flags & MNT_LOCKED)
 		goto dput_and_out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = -EPERM;
 	if (flags & MNT_FORCE && !capable(CAP_SYS_ADMIN))
 		goto dput_and_out;
@@ -1727,6 +1892,7 @@ SYSCALL_DEFINE2(umount, char __user *, name, int, flags)
  */
 SYSCALL_DEFINE1(oldumount, char __user *, name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sys_umount(name, 0);
 }
 
@@ -1751,8 +1917,11 @@ static bool mnt_ns_loop(struct dentry *dentry)
 	 */
 	struct mnt_namespace *mnt_ns;
 	if (!is_mnt_ns_file(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mnt_ns = to_mnt_ns(get_proc_ns(dentry->d_inode));
 	return current->nsproxy->mnt_ns->seq >= mnt_ns->seq;
 }
@@ -1763,14 +1932,20 @@ struct mount *copy_tree(struct mount *mnt, struct dentry *dentry,
 	struct mount *res, *p, *q, *r, *parent;
 
 	if (!(flag & CL_COPY_UNBINDABLE) && IS_MNT_UNBINDABLE(mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	if (!(flag & CL_COPY_MNT_NS_FILE) && is_mnt_ns_file(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	res = q = clone_mnt(mnt, dentry, flag);
 	if (IS_ERR(q))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return q;
+}
 
 	q->mnt_mountpoint = mnt->mnt_mountpoint;
 
@@ -1783,11 +1958,13 @@ struct mount *copy_tree(struct mount *mnt, struct dentry *dentry,
 		for (s = r; s; s = next_mnt(s, r)) {
 			if (!(flag & CL_COPY_UNBINDABLE) &&
 			    IS_MNT_UNBINDABLE(s)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				s = skip_mnt_tree(s);
 				continue;
 			}
 			if (!(flag & CL_COPY_MNT_NS_FILE) &&
 			    is_mnt_ns_file(s->mnt.mnt_root)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				s = skip_mnt_tree(s);
 				continue;
 			}
@@ -1795,6 +1972,7 @@ struct mount *copy_tree(struct mount *mnt, struct dentry *dentry,
 				p = p->mnt_parent;
 				q = q->mnt_parent;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p = s;
 			parent = q;
 			q = clone_mnt(p, p->mnt.mnt_root, flag);
@@ -1806,13 +1984,16 @@ struct mount *copy_tree(struct mount *mnt, struct dentry *dentry,
 			unlock_mount_hash();
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return res;
 out:
 	if (res) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lock_mount_hash();
 		umount_tree(res, UMOUNT_SYNC);
 		unlock_mount_hash();
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return q;
 }
 
@@ -1823,7 +2004,9 @@ struct vfsmount *collect_mounts(const struct path *path)
 	struct mount *tree;
 	namespace_lock();
 	if (!check_mnt(real_mount(path->mnt)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tree = ERR_PTR(-EINVAL);
+}
 	else
 		tree = copy_tree(real_mount(path->mnt), path->dentry,
 				 CL_COPY_ALL | CL_PRIVATE);
@@ -1857,11 +2040,15 @@ struct vfsmount *clone_private_mount(const struct path *path)
 	struct mount *new_mnt;
 
 	if (IS_MNT_UNBINDABLE(old_mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	new_mnt = clone_mnt(old_mnt, path->dentry, CL_PRIVATE);
 	if (IS_ERR(new_mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(new_mnt);
+}
 
 	return &new_mnt->mnt;
 }
@@ -1873,7 +2060,9 @@ int iterate_mounts(int (*f)(struct vfsmount *, void *), void *arg,
 	struct mount *mnt;
 	int res = f(root, arg);
 	if (res)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return res;
+}
 	list_for_each_entry(mnt, &real_mount(root)->mnt_list, mnt_list) {
 		res = f(&mnt->mnt, arg);
 		if (res)
@@ -1886,6 +2075,7 @@ static void cleanup_group_ids(struct mount *mnt, struct mount *end)
 {
 	struct mount *p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (p = mnt; p != end; p = next_mnt(p, mnt)) {
 		if (p->mnt_group_id && !IS_MNT_SHARED(p))
 			mnt_release_group_id(p);
@@ -1900,17 +2090,20 @@ static int invent_group_ids(struct mount *mnt, bool recurse)
 		if (!p->mnt_group_id && !IS_MNT_SHARED(p)) {
 			int err = mnt_alloc_group_id(p);
 			if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cleanup_group_ids(mnt, p);
 				return err;
 			}
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 int count_mounts(struct mnt_namespace *ns, struct mount *mnt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int max = READ_ONCE(sysctl_mount_max);
 	unsigned int mounts = 0, old, pending, sum;
 	struct mount *p;
@@ -2011,7 +2204,9 @@ static int attach_recursive_mnt(struct mount *source_mnt,
 	 */
 	smp = get_mountpoint(source_mnt->mnt.mnt_root);
 	if (IS_ERR(smp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(smp);
+}
 
 	/* Is there space to add these mounts to the mount namespace? */
 	if (!parent_path) {
@@ -2048,7 +2243,10 @@ static int attach_recursive_mnt(struct mount *source_mnt,
 		q = __lookup_mnt(&child->mnt_parent->mnt,
 				 child->mnt_mountpoint);
 		if (q)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mnt_change_mountpoint(child, smp, q);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		commit_tree(child);
 	}
 	put_mountpoint(smp);
@@ -2058,10 +2256,12 @@ static int attach_recursive_mnt(struct mount *source_mnt,
 
  out_cleanup_ids:
 	while (!hlist_empty(&tree_list)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		child = hlist_entry(tree_list.first, struct mount, mnt_hash);
 		child->mnt_parent->mnt_ns->pending_mounts = 0;
 		umount_tree(child, UMOUNT_SYNC);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unlock_mount_hash();
 	cleanup_group_ids(source_mnt, NULL);
  out:
@@ -2081,6 +2281,7 @@ static struct mountpoint *lock_mount(struct path *path)
 retry:
 	inode_lock(dentry->d_inode);
 	if (unlikely(cant_mount(dentry))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_unlock(dentry->d_inode);
 		return ERR_PTR(-ENOENT);
 	}
@@ -2089,12 +2290,15 @@ static struct mountpoint *lock_mount(struct path *path)
 	if (likely(!mnt)) {
 		struct mountpoint *mp = get_mountpoint(dentry);
 		if (IS_ERR(mp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			namespace_unlock();
 			inode_unlock(dentry->d_inode);
 			return mp;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return mp;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	namespace_unlock();
 	inode_unlock(path->dentry->d_inode);
 	path_put(path);
@@ -2118,7 +2322,9 @@ static void unlock_mount(struct mountpoint *where)
 static int graft_tree(struct mount *mnt, struct mount *p, struct mountpoint *mp)
 {
 	if (mnt->mnt.mnt_sb->s_flags & SB_NOUSER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (d_is_dir(mp->m_dentry) !=
 	      d_is_dir(mnt->mnt.mnt_root))
@@ -2137,10 +2343,14 @@ static int flags_to_propagation_type(int ms_flags)
 
 	/* Fail if any non-propagation flags are set */
 	if (type & ~(MS_SHARED | MS_PRIVATE | MS_SLAVE | MS_UNBINDABLE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	/* Only one propagation flag should be set */
 	if (!is_power_of_2(type))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return type;
 }
 
@@ -2156,11 +2366,15 @@ static int do_change_type(struct path *path, int ms_flags)
 	int err = 0;
 
 	if (path->dentry != path->mnt->mnt_root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	type = flags_to_propagation_type(ms_flags);
 	if (!type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	namespace_lock();
 	if (type == MS_SHARED) {
@@ -2186,9 +2400,13 @@ static bool has_locked_children(struct mount *mnt, struct dentry *dentry)
 		if (!is_subdir(child->mnt_mountpoint, dentry))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (child->mnt.mnt_flags & MNT_LOCKED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return true;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return false;
 }
 
@@ -2203,11 +2421,16 @@ static int do_loopback(struct path *path, const char *old_name,
 	struct mountpoint *mp;
 	int err;
 	if (!old_name || !*old_name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	err = kern_path(old_name, LOOKUP_FOLLOW|LOOKUP_AUTOMOUNT, &old_path);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EINVAL;
 	if (mnt_ns_loop(old_path.dentry))
 		goto out;
@@ -2239,6 +2462,7 @@ static int do_loopback(struct path *path, const char *old_name,
 		mnt = clone_mnt(old, old_path.dentry, 0);
 
 	if (IS_ERR(mnt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(mnt);
 		goto out2;
 	}
@@ -2247,6 +2471,7 @@ static int do_loopback(struct path *path, const char *old_name,
 
 	err = graft_tree(mnt, parent, mp);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lock_mount_hash();
 		umount_tree(mnt, UMOUNT_SYNC);
 		unlock_mount_hash();
@@ -2264,14 +2489,19 @@ static int change_mount_flags(struct vfsmount *mnt, int ms_flags)
 	int readonly_request = 0;
 
 	if (ms_flags & MS_RDONLY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		readonly_request = 1;
+}
 	if (readonly_request == __mnt_is_readonly(mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (readonly_request)
 		error = mnt_make_readonly(real_mount(mnt));
 	else
 		__mnt_unmake_readonly(real_mount(mnt));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -2288,10 +2518,14 @@ static int do_remount(struct path *path, int ms_flags, int sb_flags,
 	struct mount *mnt = real_mount(path->mnt);
 
 	if (!check_mnt(mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (path->dentry != path->mnt->mnt_root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* Don't allow changing of locked mnt flags.
 	 *
@@ -2301,34 +2535,43 @@ static int do_remount(struct path *path, int ms_flags, int sb_flags,
 	 */
 	if ((mnt->mnt.mnt_flags & MNT_LOCK_READONLY) &&
 	    !(mnt_flags & MNT_READONLY)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
 	}
 	if ((mnt->mnt.mnt_flags & MNT_LOCK_NODEV) &&
 	    !(mnt_flags & MNT_NODEV)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
 	}
 	if ((mnt->mnt.mnt_flags & MNT_LOCK_NOSUID) &&
 	    !(mnt_flags & MNT_NOSUID)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
 	}
 	if ((mnt->mnt.mnt_flags & MNT_LOCK_NOEXEC) &&
 	    !(mnt_flags & MNT_NOEXEC)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
 	}
 	if ((mnt->mnt.mnt_flags & MNT_LOCK_ATIME) &&
 	    ((mnt->mnt.mnt_flags & MNT_ATIME_MASK) != (mnt_flags & MNT_ATIME_MASK))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
 	}
 
 	err = security_sb_remount(sb, data);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	down_write(&sb->s_umount);
 	if (ms_flags & MS_BIND)
 		err = change_mount_flags(path->mnt, ms_flags);
 	else if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EPERM;
+}
 	else
 		err = do_remount_sb(sb, sb_flags, data, 0);
 	if (!err) {
@@ -2345,6 +2588,7 @@ static int do_remount(struct path *path, int ms_flags, int sb_flags,
 static inline int tree_contains_unbindable(struct mount *mnt)
 {
 	struct mount *p;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (p = mnt; p; p = next_mnt(p, mnt)) {
 		if (IS_MNT_UNBINDABLE(p))
 			return 1;
@@ -2360,10 +2604,14 @@ static int do_move_mount(struct path *path, const char *old_name)
 	struct mountpoint *mp;
 	int err;
 	if (!old_name || !*old_name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	err = kern_path(old_name, LOOKUP_FOLLOW, &old_path);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	mp = lock_mount(path);
 	err = PTR_ERR(mp);
@@ -2380,6 +2628,7 @@ static int do_move_mount(struct path *path, const char *old_name)
 	if (old->mnt.mnt_flags & MNT_LOCKED)
 		goto out1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EINVAL;
 	if (old_path.dentry != old_path.mnt->mnt_root)
 		goto out1;
@@ -2401,10 +2650,13 @@ static int do_move_mount(struct path *path, const char *old_name)
 	 */
 	if (IS_MNT_SHARED(p) && tree_contains_unbindable(old))
 		goto out1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ELOOP;
 	for (; mnt_has_parent(p); p = p->mnt_parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (p == old)
 			goto out1;
+}
 
 	err = attach_recursive_mnt(old, real_mount(path->mnt), mp, &parent_path);
 	if (err)
@@ -2427,6 +2679,7 @@ static struct vfsmount *fs_set_subtype(struct vfsmount *mnt, const char *fstype)
 	int err;
 	const char *subtype = strchr(fstype, '.');
 	if (subtype) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		subtype++;
 		err = -EINVAL;
 		if (!subtype[0])
@@ -2458,7 +2711,9 @@ static int do_add_mount(struct mount *newmnt, struct path *path, int mnt_flags)
 
 	mp = lock_mount(path);
 	if (IS_ERR(mp))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(mp);
+}
 
 	parent = real_mount(path->mnt);
 	err = -EINVAL;
@@ -2477,6 +2732,7 @@ static int do_add_mount(struct mount *newmnt, struct path *path, int mnt_flags)
 	    path->mnt->mnt_root == path->dentry)
 		goto unlock;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EINVAL;
 	if (d_is_symlink(newmnt->mnt.mnt_root))
 		goto unlock;
@@ -2503,11 +2759,15 @@ static int do_new_mount(struct path *path, const char *fstype, int sb_flags,
 	int err;
 
 	if (!fstype)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	type = get_fs_type(fstype);
 	if (!type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	mnt = vfs_kern_mount(type, sb_flags, name, data);
 	if (!IS_ERR(mnt) && (type->fs_flags & FS_HAS_SUBTYPE) &&
@@ -2516,9 +2776,12 @@ static int do_new_mount(struct path *path, const char *fstype, int sb_flags,
 
 	put_filesystem(type);
 	if (IS_ERR(mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(mnt);
+}
 
 	if (mount_too_revealing(mnt, &mnt_flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mntput(mnt);
 		return -EPERM;
 	}
@@ -2526,11 +2789,13 @@ static int do_new_mount(struct path *path, const char *fstype, int sb_flags,
 	err = do_add_mount(real_mount(mnt), path, mnt_flags);
 	if (err)
 		mntput(mnt);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
 int finish_automount(struct vfsmount *m, struct path *path)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mount *mnt = real_mount(m);
 	int err;
 	/* The new mount record should have at least 2 refs to prevent it being
@@ -2566,6 +2831,7 @@ int finish_automount(struct vfsmount *m, struct path *path)
  */
 void mnt_set_expiry(struct vfsmount *mnt, struct list_head *expiry_list)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	namespace_lock();
 
 	list_add_tail(&real_mount(mnt)->mnt_expire, expiry_list);
@@ -2585,7 +2851,9 @@ void mark_mounts_for_expiry(struct list_head *mounts)
 	LIST_HEAD(graveyard);
 
 	if (list_empty(mounts))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	namespace_lock();
 	lock_mount_hash();
@@ -2630,6 +2898,7 @@ static int select_submounts(struct mount *parent, struct list_head *graveyard)
 resume:
 	while (next != &this_parent->mnt_mounts) {
 		struct list_head *tmp = next;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct mount *mnt = list_entry(tmp, struct mount, mnt_child);
 
 		next = tmp->next;
@@ -2639,11 +2908,14 @@ static int select_submounts(struct mount *parent, struct list_head *graveyard)
 		 * Descend a level if the d_mounts list is non-empty.
 		 */
 		if (!list_empty(&mnt->mnt_mounts)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			this_parent = mnt;
 			goto repeat;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!propagate_mount_busy(mnt, 1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			list_move_tail(&mnt->mnt_expire, graveyard);
 			found++;
 		}
@@ -2652,6 +2924,7 @@ static int select_submounts(struct mount *parent, struct list_head *graveyard)
 	 * All done at this level ... ascend and resume the search
 	 */
 	if (this_parent != parent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		next = this_parent->mnt_child.next;
 		this_parent = this_parent->mnt_parent;
 		goto resume;
@@ -2672,7 +2945,9 @@ static void shrink_submounts(struct mount *mnt)
 
 	/* extract submounts of 'mountpoint' from the expiration list */
 	while (select_submounts(mnt, &graveyard)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (!list_empty(&graveyard)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			m = list_first_entry(&graveyard, struct mount,
 						mnt_expire);
 			touch_mnt_namespace(m->mnt_ns);
@@ -2695,10 +2970,13 @@ static long exact_copy_from_user(void *to, const void __user * from,
 	char c;
 
 	if (!access_ok(VERIFY_READ, from, n))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return n;
+}
 
 	while (n) {
 		if (__get_user(c, f)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memset(t, 0, n);
 			break;
 		}
@@ -2716,11 +2994,16 @@ void *copy_mount_options(const void __user * data)
 	char *copy;
 
 	if (!data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	copy = kmalloc(PAGE_SIZE, GFP_KERNEL);
 	if (!copy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	/* We only care that *some* data at the address the user
 	 * gave us is valid.  Just in case, we'll zero
@@ -2729,15 +3012,19 @@ void *copy_mount_options(const void __user * data)
 	/* copy_from_user cannot cross TASK_SIZE ! */
 	size = TASK_SIZE - (unsigned long)data;
 	if (size > PAGE_SIZE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		size = PAGE_SIZE;
+}
 
 	i = size - exact_copy_from_user(copy, data, size);
 	if (!i) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(copy);
 		return ERR_PTR(-EFAULT);
 	}
 	if (i != PAGE_SIZE)
 		memset(copy + i, 0, PAGE_SIZE - i);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return copy;
 }
 
@@ -2769,14 +3056,18 @@ long do_mount(const char *dev_name, const char __user *dir_name,
 
 	/* Discard magic */
 	if ((flags & MS_MGC_MSK) == MS_MGC_VAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags &= ~MS_MGC_MSK;
+}
 
 	/* Basic sanity checks */
 	if (data_page)
 		((char *)data_page)[PAGE_SIZE - 1] = 0;
 
 	if (flags & MS_NOUSER)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* ... and get the mountpoint */
 	retval = user_path(dir_name, &path);
@@ -2786,15 +3077,21 @@ long do_mount(const char *dev_name, const char __user *dir_name,
 	retval = security_sb_mount(dev_name, &path,
 				   type_page, flags, data_page);
 	if (!retval && !may_mount())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EPERM;
+}
 	if (!retval && (flags & SB_MANDLOCK) && !may_mandlock())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EPERM;
+}
 	if (retval)
 		goto dput_out;
 
 	/* Default to relatime unless overriden */
 	if (!(flags & MS_NOATIME))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mnt_flags |= MNT_RELATIME;
+}
 
 	/* Separate the per-mountpoint flags */
 	if (flags & MS_NOSUID)
@@ -2804,9 +3101,13 @@ long do_mount(const char *dev_name, const char __user *dir_name,
 	if (flags & MS_NOEXEC)
 		mnt_flags |= MNT_NOEXEC;
 	if (flags & MS_NOATIME)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mnt_flags |= MNT_NOATIME;
+}
 	if (flags & MS_NODIRATIME)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mnt_flags |= MNT_NODIRATIME;
+}
 	if (flags & MS_STRICTATIME)
 		mnt_flags &= ~(MNT_RELATIME | MNT_NOATIME);
 	if (flags & SB_RDONLY)
@@ -2881,15 +3182,20 @@ static struct mnt_namespace *alloc_mnt_ns(struct user_namespace *user_ns)
 
 	ucounts = inc_mnt_namespaces(user_ns);
 	if (!ucounts)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOSPC);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	new_ns = kmalloc(sizeof(struct mnt_namespace), GFP_KERNEL);
 	if (!new_ns) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dec_mnt_namespaces(ucounts);
 		return ERR_PTR(-ENOMEM);
 	}
 	ret = ns_alloc_inum(&new_ns->ns);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(new_ns);
 		dec_mnt_namespaces(ucounts);
 		return ERR_PTR(ret);
@@ -2930,15 +3236,20 @@ struct mnt_namespace *copy_mnt_ns(unsigned long flags, struct mnt_namespace *ns,
 
 	new_ns = alloc_mnt_ns(user_ns);
 	if (IS_ERR(new_ns))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return new_ns;
+}
 
 	namespace_lock();
 	/* First pass: copy the tree topology */
 	copy_flags = CL_COPY_UNBINDABLE | CL_EXPIRE;
 	if (user_ns != ns->user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		copy_flags |= CL_SHARED_TO_SLAVE | CL_UNPRIVILEGED;
+}
 	new = copy_tree(old, old->mnt.mnt_root, copy_flags);
 	if (IS_ERR(new)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		namespace_unlock();
 		free_mnt_ns(new_ns);
 		return ERR_CAST(new);
@@ -2980,6 +3291,7 @@ struct mnt_namespace *copy_mnt_ns(unsigned long flags, struct mnt_namespace *ns,
 	if (pwdmnt)
 		mntput(pwdmnt);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return new_ns;
 }
 
@@ -2991,12 +3303,14 @@ static struct mnt_namespace *create_mnt_ns(struct vfsmount *m)
 {
 	struct mnt_namespace *new_ns = alloc_mnt_ns(&init_user_ns);
 	if (!IS_ERR(new_ns)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct mount *mnt = real_mount(m);
 		mnt->mnt_ns = new_ns;
 		new_ns->root = mnt;
 		new_ns->mounts++;
 		list_add(&mnt->mnt_list, &new_ns->list);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mntput(m);
 	}
 	return new_ns;
@@ -3011,7 +3325,9 @@ struct dentry *mount_subtree(struct vfsmount *mnt, const char *name)
 
 	ns = create_mnt_ns(mnt);
 	if (IS_ERR(ns))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(ns);
+}
 
 	err = vfs_path_lookup(mnt->mnt_root, mnt,
 			name, LOOKUP_FOLLOW|LOOKUP_AUTOMOUNT, &path);
@@ -3125,7 +3441,9 @@ SYSCALL_DEFINE2(pivot_root, const char __user *, new_root,
 	int error;
 
 	if (!may_mount())
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	error = user_path_dir(new_root, &new);
 	if (error)
@@ -3145,6 +3463,7 @@ SYSCALL_DEFINE2(pivot_root, const char __user *, new_root,
 	if (IS_ERR(old_mp))
 		goto out3;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EINVAL;
 	new_mnt = real_mount(new.mnt);
 	root_mnt = real_mount(root.mnt);
@@ -3157,12 +3476,15 @@ SYSCALL_DEFINE2(pivot_root, const char __user *, new_root,
 		goto out4;
 	if (new_mnt->mnt.mnt_flags & MNT_LOCKED)
 		goto out4;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -ENOENT;
 	if (d_unlinked(new.dentry))
 		goto out4;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EBUSY;
 	if (new_mnt == root_mnt || old_mnt == root_mnt)
 		goto out4; /* loop, on the same file system  */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EINVAL;
 	if (root.mnt->mnt_root != root.dentry)
 		goto out4; /* not a mountpoint */
@@ -3184,6 +3506,7 @@ SYSCALL_DEFINE2(pivot_root, const char __user *, new_root,
 	detach_mnt(new_mnt, &parent_path);
 	detach_mnt(root_mnt, &root_parent);
 	if (root_mnt->mnt.mnt_flags & MNT_LOCKED) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new_mnt->mnt.mnt_flags |= MNT_LOCKED;
 		root_mnt->mnt.mnt_flags &= ~MNT_LOCKED;
 	}
@@ -3223,15 +3546,21 @@ static void __init init_mount_tree(void)
 
 	type = get_fs_type("rootfs");
 	if (!type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Can't find rootfs type");
+}
 	mnt = vfs_kern_mount(type, 0, "rootfs", NULL);
 	put_filesystem(type);
 	if (IS_ERR(mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Can't create rootfs");
+}
 
 	ns = create_mnt_ns(mnt);
 	if (IS_ERR(ns))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Can't allocate initial namespace");
+}
 
 	init_task.nsproxy->mnt_ns = ns;
 	get_mnt_ns(ns);
@@ -3263,17 +3592,23 @@ void __init mnt_init(void)
 				&mp_hash_shift, &mp_hash_mask, 0, 0);
 
 	if (!mount_hashtable || !mountpoint_hashtable)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Failed to allocate mount hash table\n");
+}
 
 	kernfs_init();
 
 	err = sysfs_init();
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_WARNING "%s: sysfs_init error: %d\n",
 			__func__, err);
+}
 	fs_kobj = kobject_create_and_add("fs", NULL);
 	if (!fs_kobj)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_WARNING "%s: kobj create error\n", __func__);
+}
 	init_rootfs();
 	init_mount_tree();
 }
@@ -3281,7 +3616,9 @@ void __init mnt_init(void)
 void put_mnt_ns(struct mnt_namespace *ns)
 {
 	if (!atomic_dec_and_test(&ns->count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	drop_collected_mounts(&ns->root->mnt);
 	free_mnt_ns(ns);
 }
@@ -3314,6 +3651,7 @@ EXPORT_SYMBOL(kern_unmount);
 
 bool our_mnt(struct vfsmount *mnt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return check_mnt(real_mount(mnt));
 }
 
@@ -3328,6 +3666,7 @@ bool current_chrooted(void)
 	ns_root.mnt = &current->nsproxy->mnt_ns->root->mnt;
 	ns_root.dentry = ns_root.mnt->mnt_root;
 	path_get(&ns_root);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (d_mountpoint(ns_root.dentry) && follow_down_one(&ns_root))
 		;
 
@@ -3349,6 +3688,7 @@ static bool mnt_already_visible(struct mnt_namespace *ns, struct vfsmount *new,
 	bool visible = false;
 
 	down_read(&namespace_sem);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(mnt, &ns->list, mnt_list) {
 		struct mount *child;
 		int mnt_flags;
@@ -3411,19 +3751,26 @@ static bool mount_too_revealing(struct vfsmount *mnt, int *new_mnt_flags)
 	unsigned long s_iflags;
 
 	if (ns->user_ns == &init_user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	/* Can this filesystem be too revealing? */
 	s_iflags = mnt->mnt_sb->s_iflags;
 	if (!(s_iflags & SB_I_USERNS_VISIBLE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((s_iflags & required_iflags) != required_iflags) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ONCE(1, "Expected s_iflags to contain 0x%lx\n",
 			  required_iflags);
 		return true;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !mnt_already_visible(ns, mnt, new_mnt_flags);
 }
 
@@ -3451,6 +3798,7 @@ static struct ns_common *mntns_get(struct task_struct *task)
 		ns = &nsproxy->mnt_ns->ns;
 		get_mnt_ns(to_mnt_ns(ns));
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	task_unlock(task);
 
 	return ns;
@@ -3474,7 +3822,9 @@ static int mntns_install(struct nsproxy *nsproxy, struct ns_common *ns)
 		return -EPERM;
 
 	if (fs->users != 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	get_mnt_ns(mnt_ns);
 	old_mnt_ns = nsproxy->mnt_ns;
@@ -3502,6 +3852,7 @@ static int mntns_install(struct nsproxy *nsproxy, struct ns_common *ns)
 
 static struct user_namespace *mntns_owner(struct ns_common *ns)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return to_mnt_ns(ns)->user_ns;
 }
 
diff --git a/fs/nls/nls_ascii.c b/fs/nls/nls_ascii.c
index a262065..08d6790 100644
--- a/fs/nls/nls_ascii.c
+++ b/fs/nls/nls_ascii.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/fs/nls/nls_ascii.c
  *
@@ -124,7 +126,9 @@ static int uni2char(wchar_t uni, unsigned char *out, int boundlen)
 	unsigned char ch = (uni & 0xff00) >> 8;
 
 	if (boundlen <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENAMETOOLONG;
+}
 
 	uni2charset = page_uni2charset[ch];
 	if (uni2charset && uni2charset[cl])
@@ -136,6 +140,7 @@ static int uni2char(wchar_t uni, unsigned char *out, int boundlen)
 
 static int char2uni(const unsigned char *rawstring, int boundlen, wchar_t *uni)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*uni = charset2uni[*rawstring];
 	if (*uni == 0x0000)
 		return -EINVAL;
@@ -157,6 +162,7 @@ static int __init init_nls_ascii(void)
 
 static void __exit exit_nls_ascii(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_nls(&table);
 }
 
diff --git a/fs/nls/nls_base.c b/fs/nls/nls_base.c
index 52ccd34..4c6e6cb 100644
--- a/fs/nls/nls_base.c
+++ b/fs/nls/nls_base.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/fs/nls/nls_base.c
  *
@@ -61,6 +63,7 @@ int utf8_to_utf32(const u8 *s, int inlen, unicode_t *pu)
 	nc = 0;
 	c0 = *s;
 	l = c0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (t = utf8_table; t->cmask; t++) {
 		nc++;
 		if ((c0 & t->cmask) == t->cval) {
@@ -90,7 +93,9 @@ int utf32_to_utf8(unicode_t u, u8 *s, int maxout)
 	const struct utf8_table *t;
 
 	if (!s)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	l = u;
 	if (l > UNICODE_MAX || (l & SURROGATE_MASK) == SURROGATE_PAIR)
@@ -116,6 +121,7 @@ EXPORT_SYMBOL(utf32_to_utf8);
 
 static inline void put_utf16(wchar_t *s, unsigned c, enum utf16_endian endian)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (endian) {
 	default:
 		*s = (wchar_t) c;
@@ -137,6 +143,7 @@ int utf8s_to_utf16s(const u8 *s, int inlen, enum utf16_endian endian,
 	unicode_t u;
 
 	op = pwcs;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (inlen > 0 && maxout > 0 && *s) {
 		if (*s & 0x80) {
 			size = utf8_to_utf32(s, inlen, &u);
@@ -173,6 +180,7 @@ EXPORT_SYMBOL(utf8s_to_utf16s);
 
 static inline unsigned long get_utf16(unsigned c, enum utf16_endian endian)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (endian) {
 	default:
 		return c;
@@ -191,6 +199,7 @@ int utf16s_to_utf8s(const wchar_t *pwcs, int inlen, enum utf16_endian endian,
 	unsigned long u, v;
 
 	op = s;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (inlen > 0 && maxout > 0) {
 		u = get_utf16(*pwcs, endian);
 		if (!u)
@@ -237,12 +246,15 @@ int __register_nls(struct nls_table *nls, struct module *owner)
 	struct nls_table ** tmp = &tables;
 
 	if (nls->next)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 	nls->owner = owner;
 	spin_lock(&nls_lock);
 	while (*tmp) {
 		if (nls == *tmp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&nls_lock);
 			return -EBUSY;
 		}
@@ -260,6 +272,7 @@ int unregister_nls(struct nls_table * nls)
 	struct nls_table ** tmp = &tables;
 
 	spin_lock(&nls_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (*tmp) {
 		if (nls == *tmp) {
 			*tmp = nls->next;
@@ -276,6 +289,7 @@ static struct nls_table *find_nls(char *charset)
 {
 	struct nls_table *nls;
 	spin_lock(&nls_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (nls = tables; nls; nls = nls->next) {
 		if (!strcmp(nls->charset, charset))
 			break;
@@ -290,11 +304,13 @@ static struct nls_table *find_nls(char *charset)
 
 struct nls_table *load_nls(char *charset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return try_then_request_module(find_nls(charset), "nls_%s", charset);
 }
 
 void unload_nls(struct nls_table *nls)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nls)
 		module_put(nls->owner);
 }
@@ -502,7 +518,9 @@ static int uni2char(wchar_t uni, unsigned char *out, int boundlen)
 	unsigned char ch = (uni & 0xff00) >> 8;
 
 	if (boundlen <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENAMETOOLONG;
+}
 
 	uni2charset = page_uni2charset[ch];
 	if (uni2charset && uni2charset[cl])
@@ -514,6 +532,7 @@ static int uni2char(wchar_t uni, unsigned char *out, int boundlen)
 
 static int char2uni(const unsigned char *rawstring, int boundlen, wchar_t *uni)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*uni = charset2uni[*rawstring];
 	if (*uni == 0x0000)
 		return -EINVAL;
@@ -535,7 +554,9 @@ struct nls_table *load_nls_default(void)
 	
 	default_nls = load_nls(CONFIG_NLS_DEFAULT);
 	if (default_nls != NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return default_nls;
+}
 	else
 		return &default_table;
 }
diff --git a/fs/nls/nls_cp437.c b/fs/nls/nls_cp437.c
index 7ddb830..846c852 100644
--- a/fs/nls/nls_cp437.c
+++ b/fs/nls/nls_cp437.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/fs/nls/nls_cp437.c
  *
@@ -345,7 +347,9 @@ static int uni2char(wchar_t uni, unsigned char *out, int boundlen)
 	unsigned char ch = (uni & 0xff00) >> 8;
 
 	if (boundlen <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENAMETOOLONG;
+}
 
 	uni2charset = page_uni2charset[ch];
 	if (uni2charset && uni2charset[cl])
@@ -357,6 +361,7 @@ static int uni2char(wchar_t uni, unsigned char *out, int boundlen)
 
 static int char2uni(const unsigned char *rawstring, int boundlen, wchar_t *uni)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*uni = charset2uni[*rawstring];
 	if (*uni == 0x0000)
 		return -EINVAL;
@@ -378,6 +383,7 @@ static int __init init_nls_cp437(void)
 
 static void __exit exit_nls_cp437(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_nls(&table);
 }
 
diff --git a/fs/nls/nls_iso8859-1.c b/fs/nls/nls_iso8859-1.c
index 69ac020..30fc18f 100644
--- a/fs/nls/nls_iso8859-1.c
+++ b/fs/nls/nls_iso8859-1.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * linux/fs/nls/nls_iso8859-1.c
  *
@@ -215,7 +217,9 @@ static int uni2char(wchar_t uni, unsigned char *out, int boundlen)
 	unsigned char ch = (uni & 0xff00) >> 8;
 
 	if (boundlen <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENAMETOOLONG;
+}
 
 	uni2charset = page_uni2charset[ch];
 	if (uni2charset && uni2charset[cl])
@@ -227,6 +231,7 @@ static int uni2char(wchar_t uni, unsigned char *out, int boundlen)
 
 static int char2uni(const unsigned char *rawstring, int boundlen, wchar_t *uni)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*uni = charset2uni[*rawstring];
 	if (*uni == 0x0000)
 		return -EINVAL;
@@ -248,6 +253,7 @@ static int __init init_nls_iso8859_1(void)
 
 static void __exit exit_nls_iso8859_1(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unregister_nls(&table);
 }
 
diff --git a/fs/nls/nls_utf8.c b/fs/nls/nls_utf8.c
index afcfbc4..f3ba7d9 100644
--- a/fs/nls/nls_utf8.c
+++ b/fs/nls/nls_utf8.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Module for handling utf8 just like any other charset.
  * By Urban Widmark 2000
@@ -16,7 +18,9 @@ static int uni2char(wchar_t uni, unsigned char *out, int boundlen)
 	int n;
 
 	if (boundlen <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENAMETOOLONG;
+}
 
 	n = utf32_to_utf8(uni, out, boundlen);
 	if (n < 0) {
@@ -32,6 +36,7 @@ static int char2uni(const unsigned char *rawstring, int boundlen, wchar_t *uni)
 	unicode_t u;
 
 	n = utf8_to_utf32(rawstring, boundlen, &u);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (n < 0 || u > MAX_WCHAR_T) {
 		*uni = 0x003f;	/* ? */
 		return -EINVAL;
@@ -59,6 +64,7 @@ static int __init init_nls_utf8(void)
 
 static void __exit exit_nls_utf8(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
         unregister_nls(&table);
 }
 
diff --git a/fs/notify/dnotify/dnotify.c b/fs/notify/dnotify/dnotify.c
index 63a1ca4..37f9e4e 100644
--- a/fs/notify/dnotify/dnotify.c
+++ b/fs/notify/dnotify/dnotify.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Directory notifications for Linux.
  *
@@ -54,6 +56,7 @@ static void dnotify_recalc_inode_mask(struct fsnotify_mark *fsn_mark)
 {
 	__u32 new_mask = 0;
 	struct dnotify_struct *dn;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dnotify_mark *dn_mark  = container_of(fsn_mark,
 						     struct dnotify_mark,
 						     fsn_mark);
@@ -93,7 +96,9 @@ static int dnotify_handle_event(struct fsnotify_group *group,
 
 	/* not a dir, dnotify doesn't care */
 	if (!S_ISDIR(inode->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	BUG_ON(vfsmount_mark);
 
@@ -124,6 +129,7 @@ static int dnotify_handle_event(struct fsnotify_group *group,
 
 static void dnotify_free_mark(struct fsnotify_mark *fsn_mark)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dnotify_mark *dn_mark = container_of(fsn_mark,
 						    struct dnotify_mark,
 						    fsn_mark);
@@ -156,40 +162,55 @@ void dnotify_flush(struct file *filp, fl_owner_t id)
 
 	inode = file_inode(filp);
 	if (!S_ISDIR(inode->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	fsn_mark = fsnotify_find_mark(&inode->i_fsnotify_marks, dnotify_group);
 	if (!fsn_mark)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dn_mark = container_of(fsn_mark, struct dnotify_mark, fsn_mark);
 
 	mutex_lock(&dnotify_group->mark_mutex);
 
 	spin_lock(&fsn_mark->lock);
 	prev = &dn_mark->dn;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((dn = *prev) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((dn->dn_owner == id) && (dn->dn_filp == filp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*prev = dn->dn_next;
 			kmem_cache_free(dnotify_struct_cache, dn);
 			dnotify_recalc_inode_mask(fsn_mark);
 			break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		prev = &dn->dn_next;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&fsn_mark->lock);
 
 	/* nothing else could have found us thanks to the dnotify_groups
 	   mark_mutex */
 	if (dn_mark->dn == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fsnotify_detach_mark(fsn_mark);
 		free = true;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&dnotify_group->mark_mutex);
 
 	if (free)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fsnotify_free_mark(fsn_mark);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fsnotify_put_mark(fsn_mark);
 }
 
@@ -199,7 +220,9 @@ static __u32 convert_arg(unsigned long arg)
 	__u32 new_mask = FS_EVENT_ON_CHILD;
 
 	if (arg & DN_MULTISHOT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new_mask |= FS_DN_MULTISHOT;
+}
 	if (arg & DN_DELETE)
 		new_mask |= (FS_DELETE | FS_MOVED_FROM);
 	if (arg & DN_MODIFY)
@@ -228,6 +251,7 @@ static int attach_dn(struct dnotify_struct *dn, struct dnotify_mark *dn_mark,
 	struct dnotify_struct *odn;
 
 	odn = dn_mark->dn;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (odn != NULL) {
 		/* adding more events to existing dnofiy_struct? */
 		if ((odn->dn_owner == id) && (odn->dn_filp == filp)) {
@@ -269,6 +293,7 @@ int fcntl_dirnotify(int fd, struct file *filp, unsigned long arg)
 	dn = NULL;
 
 	if (!dir_notify_enable) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EINVAL;
 		goto out_err;
 	}
@@ -389,7 +414,9 @@ static int __init dnotify_init(void)
 
 	dnotify_group = fsnotify_alloc_group(&dnotify_fsnotify_ops);
 	if (IS_ERR(dnotify_group))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("unable to allocate fsnotify group for dnotify\n");
+}
 	return 0;
 }
 
diff --git a/fs/notify/fanotify/fanotify_user.c b/fs/notify/fanotify/fanotify_user.c
index 9752e72..af6c436 100644
--- a/fs/notify/fanotify/fanotify_user.c
+++ b/fs/notify/fanotify/fanotify_user.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/fanotify.h>
 #include <linux/fcntl.h>
diff --git a/fs/notify/fsnotify.c b/fs/notify/fsnotify.c
index 0747162..4528c12 100644
--- a/fs/notify/fsnotify.c
+++ b/fs/notify/fsnotify.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Copyright (C) 2008 Red Hat, Inc., Eric Paris <eparis@redhat.com>
  *
@@ -32,12 +34,14 @@
  */
 void __fsnotify_inode_delete(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fsnotify_clear_marks_by_inode(inode);
 }
 EXPORT_SYMBOL_GPL(__fsnotify_inode_delete);
 
 void __fsnotify_vfsmount_delete(struct vfsmount *mnt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fsnotify_clear_marks_by_mount(mnt);
 }
 
@@ -61,6 +65,7 @@ void fsnotify_unmount_inodes(struct super_block *sb)
 		 */
 		spin_lock(&inode->i_lock);
 		if (inode->i_state & (I_FREEING|I_WILL_FREE|I_NEW)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&inode->i_lock);
 			continue;
 		}
@@ -72,16 +77,20 @@ void fsnotify_unmount_inodes(struct super_block *sb)
 		 * unnecessarily violent and may in fact be illegal to do.
 		 */
 		if (!atomic_read(&inode->i_count)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&inode->i_lock);
 			continue;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__iget(inode);
 		spin_unlock(&inode->i_lock);
 		spin_unlock(&sb->s_inode_list_lock);
 
 		if (iput_inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			iput(iput_inode);
+}
 
 		/* for each watch, send FS_UNMOUNT and then remove it */
 		fsnotify(inode, FS_UNMOUNT, inode, FSNOTIFY_EVENT_INODE, NULL, 0);
@@ -92,11 +101,14 @@ void fsnotify_unmount_inodes(struct super_block *sb)
 
 		spin_lock(&sb->s_inode_list_lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sb->s_inode_list_lock);
 
 	if (iput_inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iput(iput_inode);
 }
+}
 
 /*
  * Given an inode, first check if we care what happens to our children.  Inotify
@@ -111,7 +123,9 @@ void __fsnotify_update_child_dentry_flags(struct inode *inode)
 	int watched;
 
 	if (!S_ISDIR(inode->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* determine if the children should tell inode about their events */
 	watched = fsnotify_inode_watches_children(inode);
@@ -135,10 +149,13 @@ void __fsnotify_update_child_dentry_flags(struct inode *inode)
 				child->d_flags |= DCACHE_FSNOTIFY_PARENT_WATCHED;
 			else
 				child->d_flags &= ~DCACHE_FSNOTIFY_PARENT_WATCHED;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spin_unlock(&child->d_lock);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&alias->d_lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&inode->i_lock);
 }
 
@@ -150,16 +167,22 @@ int __fsnotify_parent(const struct path *path, struct dentry *dentry, __u32 mask
 	int ret = 0;
 
 	if (!dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dentry = path->dentry;
+}
 
 	if (!(dentry->d_flags & DCACHE_FSNOTIFY_PARENT_WATCHED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	parent = dget_parent(dentry);
 	p_inode = parent->d_inode;
 
 	if (unlikely(!fsnotify_inode_watches_children(p_inode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__fsnotify_update_child_dentry_flags(p_inode);
+}
 	else if (p_inode->i_fsnotify_mask & mask) {
 		struct name_snapshot name;
 
@@ -169,11 +192,14 @@ int __fsnotify_parent(const struct path *path, struct dentry *dentry, __u32 mask
 
 		take_dentry_name_snapshot(&name, dentry);
 		if (path)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = fsnotify(p_inode, mask, path, FSNOTIFY_EVENT_PATH,
 				       name.name, 0);
+}
 		else
 			ret = fsnotify(p_inode, mask, dentry->d_inode, FSNOTIFY_EVENT_INODE,
 				       name.name, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		release_dentry_name_snapshot(&name);
 	}
 
@@ -195,6 +221,7 @@ static int send_to_group(struct inode *to_tell,
 	__u32 inode_test_mask = 0;
 	__u32 vfsmount_test_mask = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(!inode_mark && !vfsmount_mark)) {
 		BUG();
 		return 0;
@@ -287,30 +314,40 @@ int fsnotify(struct inode *to_tell, __u32 mask, const void *data, int data_is,
 	    !(mnt && test_mask & mnt->mnt_fsnotify_mask))
 		return 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iter_info.srcu_idx = srcu_read_lock(&fsnotify_mark_srcu);
 
 	if ((mask & FS_MODIFY) ||
 	    (test_mask & to_tell->i_fsnotify_mask)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_conn = srcu_dereference(to_tell->i_fsnotify_marks,
 					      &fsnotify_mark_srcu);
 		if (inode_conn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inode_node = srcu_dereference(inode_conn->list.first,
 						      &fsnotify_mark_srcu);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mnt && ((mask & FS_MODIFY) ||
 		    (test_mask & mnt->mnt_fsnotify_mask))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_conn = srcu_dereference(to_tell->i_fsnotify_marks,
 					      &fsnotify_mark_srcu);
 		if (inode_conn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inode_node = srcu_dereference(inode_conn->list.first,
 						      &fsnotify_mark_srcu);
+}
 		vfsmount_conn = srcu_dereference(mnt->mnt_fsnotify_marks,
 					         &fsnotify_mark_srcu);
 		if (vfsmount_conn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vfsmount_node = srcu_dereference(
 						vfsmount_conn->list.first,
 						&fsnotify_mark_srcu);
+}
 	}
 
 	/*
@@ -319,18 +356,22 @@ int fsnotify(struct inode *to_tell, __u32 mask, const void *data, int data_is,
 	 * That's why this traversal is so complicated...
 	 */
 	while (inode_node || vfsmount_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_group = NULL;
 		inode_mark = NULL;
 		vfsmount_group = NULL;
 		vfsmount_mark = NULL;
 
 		if (inode_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inode_mark = hlist_entry(srcu_dereference(inode_node, &fsnotify_mark_srcu),
 						 struct fsnotify_mark, obj_list);
 			inode_group = inode_mark->group;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (vfsmount_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vfsmount_mark = hlist_entry(srcu_dereference(vfsmount_node, &fsnotify_mark_srcu),
 						    struct fsnotify_mark, obj_list);
 			vfsmount_group = vfsmount_mark->group;
@@ -343,32 +384,44 @@ int fsnotify(struct inode *to_tell, __u32 mask, const void *data, int data_is,
 		iter_info.inode_mark = inode_mark;
 		iter_info.vfsmount_mark = vfsmount_mark;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (inode_group && vfsmount_group) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			int cmp = fsnotify_compare_groups(inode_group,
 							  vfsmount_group);
 			if (cmp > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				inode_group = NULL;
 				inode_mark = NULL;
 			} else if (cmp < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				vfsmount_group = NULL;
 				vfsmount_mark = NULL;
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = send_to_group(to_tell, inode_mark, vfsmount_mark, mask,
 				    data, data_is, cookie, file_name,
 				    &iter_info);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ret && (mask & ALL_FSNOTIFY_PERM_EVENTS))
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (inode_group)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inode_node = srcu_dereference(inode_node->next,
 						      &fsnotify_mark_srcu);
+}
 		if (vfsmount_group)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			vfsmount_node = srcu_dereference(vfsmount_node->next,
 							 &fsnotify_mark_srcu);
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = 0;
 out:
 	srcu_read_unlock(&fsnotify_mark_srcu, iter_info.srcu_idx);
@@ -383,11 +436,14 @@ static __init int fsnotify_init(void)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(hweight32(ALL_FSNOTIFY_EVENTS) != 23);
 
 	ret = init_srcu_struct(&fsnotify_mark_srcu);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("initializing fsnotify_mark_srcu");
+}
 
 	fsnotify_mark_connector_cachep = KMEM_CACHE(fsnotify_mark_connector,
 						    SLAB_PANIC);
diff --git a/fs/notify/fsnotify.h b/fs/notify/fsnotify.h
index 60f365d..4240e37 100644
--- a/fs/notify/fsnotify.h
+++ b/fs/notify/fsnotify.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __FS_NOTIFY_FSNOTIFY_H_
 #define __FS_NOTIFY_FSNOTIFY_H_
diff --git a/fs/notify/group.c b/fs/notify/group.c
index 32357534..c76f481 100644
--- a/fs/notify/group.c
+++ b/fs/notify/group.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Copyright (C) 2008 Red Hat, Inc., Eric Paris <eparis@redhat.com>
  *
@@ -33,6 +35,7 @@
  */
 static void fsnotify_final_destroy_group(struct fsnotify_group *group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (group->ops->free_group_priv)
 		group->ops->free_group_priv(group);
 
@@ -45,6 +48,7 @@ static void fsnotify_final_destroy_group(struct fsnotify_group *group)
  */
 void fsnotify_group_stop_queueing(struct fsnotify_group *group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&group->notification_lock);
 	group->shutdown = true;
 	spin_unlock(&group->notification_lock);
@@ -115,6 +119,7 @@ void fsnotify_get_group(struct fsnotify_group *group)
  */
 void fsnotify_put_group(struct fsnotify_group *group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (atomic_dec_and_test(&group->refcnt))
 		fsnotify_final_destroy_group(group);
 }
@@ -128,7 +133,9 @@ struct fsnotify_group *fsnotify_alloc_group(const struct fsnotify_ops *ops)
 
 	group = kzalloc(sizeof(struct fsnotify_group), GFP_KERNEL);
 	if (!group)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	/* set to 0 when there a no external references to this group */
 	atomic_set(&group->refcnt, 1);
@@ -152,5 +159,6 @@ int fsnotify_fasync(int fd, struct file *file, int on)
 {
 	struct fsnotify_group *group = file->private_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fasync_helper(fd, file, on, &group->fsn_fa) >= 0 ? 0 : -EIO;
 }
diff --git a/fs/notify/inotify/inotify.h b/fs/notify/inotify/inotify.h
index c00d2ca..f8f3834 100644
--- a/fs/notify/inotify/inotify.h
+++ b/fs/notify/inotify/inotify.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SPDX-License-Identifier: GPL-2.0 */
 #include <linux/fsnotify_backend.h>
 #include <linux/inotify.h>
diff --git a/fs/notify/inotify/inotify_user.c b/fs/notify/inotify/inotify_user.c
index 7cc7d3f..4ec453b 100644
--- a/fs/notify/inotify/inotify_user.c
+++ b/fs/notify/inotify/inotify_user.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/inotify_user.c - inotify support for userspace
  *
@@ -102,6 +104,7 @@ static inline __u32 inotify_arg_to_mask(u32 arg)
 
 static inline u32 inotify_mask_to_arg(__u32 mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mask & (IN_ALL_EVENTS | IN_ISDIR | IN_UNMOUNT | IN_IGNORED |
 		       IN_Q_OVERFLOW);
 }
@@ -115,7 +118,10 @@ static unsigned int inotify_poll(struct file *file, poll_table *wait)
 	poll_wait(file, &group->notification_waitq, wait);
 	spin_lock(&group->notification_lock);
 	if (!fsnotify_notify_queue_is_empty(group))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = POLLIN | POLLRDNORM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&group->notification_lock);
 
 	return ret;
@@ -127,7 +133,9 @@ static int round_event_name_len(struct fsnotify_event *fsn_event)
 
 	event = INOTIFY_E(fsn_event);
 	if (!event->name_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return roundup(event->name_len + 1, sizeof(struct inotify_event));
 }
 
@@ -145,7 +153,9 @@ static struct fsnotify_event *get_one_event(struct fsnotify_group *group,
 	struct fsnotify_event *event;
 
 	if (fsnotify_notify_queue_is_empty(group))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	event = fsnotify_peek_first_event(group);
 
@@ -178,6 +188,7 @@ static ssize_t copy_event_to_user(struct fsnotify_group *group,
 	size_t name_len;
 	size_t pad_name_len;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s: group=%p event=%p\n", __func__, group, fsn_event);
 
 	event = INOTIFY_E(fsn_event);
@@ -231,6 +242,7 @@ static ssize_t inotify_read(struct file *file, char __user *buf,
 	group = file->private_data;
 
 	add_wait_queue(&group->notification_waitq, &wait);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		spin_lock(&group->notification_lock);
 		kevent = get_one_event(group, count);
@@ -274,6 +286,7 @@ static int inotify_release(struct inode *ignored, struct file *file)
 {
 	struct fsnotify_group *group = file->private_data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s: group=%p\n", __func__, group);
 
 	/* free this group, matching get was inotify_init->fsnotify_obtain_group */
@@ -294,6 +307,7 @@ static long inotify_ioctl(struct file *file, unsigned int cmd,
 	group = file->private_data;
 	p = (void __user *) arg;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s: group=%p cmd=%u\n", __func__, group, cmd);
 
 	switch (cmd) {
@@ -333,11 +347,16 @@ static int inotify_find_inode(const char __user *dirname, struct path *path, uns
 
 	error = user_path_at(AT_FDCWD, dirname, flags, path);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	/* you can only watch an inode if you have read permissions on it */
 	error = inode_permission(path->dentry->d_inode, MAY_READ);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		path_put(path);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -356,6 +375,7 @@ static int inotify_add_to_idr(struct idr *idr, spinlock_t *idr_lock,
 		fsnotify_get_mark(&i_mark->fsn_mark);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(idr_lock);
 	idr_preload_end();
 	return ret < 0 ? ret : 0;
@@ -368,6 +388,7 @@ static struct inotify_inode_mark *inotify_idr_find_locked(struct fsnotify_group
 	spinlock_t *idr_lock = &group->inotify_data.idr_lock;
 	struct inotify_inode_mark *i_mark;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	assert_spin_locked(idr_lock);
 
 	i_mark = idr_find(idr, wd);
@@ -415,6 +436,7 @@ static void inotify_remove_from_idr(struct fsnotify_group *group,
 	 * if it wasn't....
 	 */
 	if (wd == -1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ONCE(1, "%s: i_mark=%p i_mark->wd=%d i_mark->group=%p\n",
 			__func__, i_mark, i_mark->wd, i_mark->fsn_mark.group);
 		goto out;
@@ -476,6 +498,7 @@ void inotify_ignored_and_remove_idr(struct fsnotify_mark *fsn_mark,
 	inotify_handle_event(group, NULL, fsn_mark, NULL, FS_IN_IGNORED,
 			     NULL, FSNOTIFY_EVENT_NONE, NULL, 0, NULL);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i_mark = container_of(fsn_mark, struct inotify_inode_mark, fsn_mark);
 	/* remove this mark from the idr */
 	inotify_remove_from_idr(group, i_mark);
@@ -498,16 +521,22 @@ static int inotify_update_existing_watch(struct fsnotify_group *group,
 
 	fsn_mark = fsnotify_find_mark(&inode->i_fsnotify_marks, group);
 	if (!fsn_mark)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	i_mark = container_of(fsn_mark, struct inotify_inode_mark, fsn_mark);
 
 	spin_lock(&fsn_mark->lock);
 	old_mask = fsn_mark->mask;
 	if (add)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fsn_mark->mask |= mask;
+}
 	else
 		fsn_mark->mask = mask;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	new_mask = fsn_mark->mask;
 	spin_unlock(&fsn_mark->lock);
 
@@ -519,7 +548,9 @@ static int inotify_update_existing_watch(struct fsnotify_group *group,
 
 		/* update the inode with this new fsn_mark */
 		if (dropped || do_inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fsnotify_recalc_mask(inode->i_fsnotify_marks);
+}
 
 	}
 
@@ -546,7 +577,9 @@ static int inotify_new_watch(struct fsnotify_group *group,
 
 	tmp_i_mark = kmem_cache_alloc(inotify_inode_mark_cachep, GFP_KERNEL);
 	if (unlikely(!tmp_i_mark))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	fsnotify_init_mark(&tmp_i_mark->fsn_mark, group);
 	tmp_i_mark->fsn_mark.mask = mask;
@@ -558,6 +591,7 @@ static int inotify_new_watch(struct fsnotify_group *group,
 
 	/* increment the number of watches the user has */
 	if (!inc_inotify_watches(group->inotify_data.ucounts)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inotify_remove_from_idr(group, tmp_i_mark);
 		ret = -ENOSPC;
 		goto out_err;
@@ -604,10 +638,14 @@ static struct fsnotify_group *inotify_new_group(unsigned int max_events)
 
 	group = fsnotify_alloc_group(&inotify_fsnotify_ops);
 	if (IS_ERR(group))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return group;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	oevent = kmalloc(sizeof(struct inotify_event_info), GFP_KERNEL);
 	if (unlikely(!oevent)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fsnotify_destroy_group(group);
 		return ERR_PTR(-ENOMEM);
 	}
@@ -620,16 +658,19 @@ static struct fsnotify_group *inotify_new_group(unsigned int max_events)
 	group->max_events = max_events;
 
 	spin_lock_init(&group->inotify_data.idr_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	idr_init(&group->inotify_data.idr);
 	group->inotify_data.ucounts = inc_ucount(current_user_ns(),
 						 current_euid(),
 						 UCOUNT_INOTIFY_INSTANCES);
 
 	if (!group->inotify_data.ucounts) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fsnotify_destroy_group(group);
 		return ERR_PTR(-EMFILE);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return group;
 }
 
@@ -645,17 +686,23 @@ SYSCALL_DEFINE1(inotify_init1, int, flags)
 	BUILD_BUG_ON(IN_NONBLOCK != O_NONBLOCK);
 
 	if (flags & ~(IN_CLOEXEC | IN_NONBLOCK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* fsnotify_obtain_group took a reference to group, we put this when we kill the file in the end */
 	group = inotify_new_group(inotify_max_queued_events);
 	if (IS_ERR(group))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(group);
+}
 
 	ret = anon_inode_getfd("inotify", &inotify_fops, group,
 				  O_RDONLY | flags);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fsnotify_destroy_group(group);
+}
 
 	return ret;
 }
@@ -682,29 +729,40 @@ SYSCALL_DEFINE3(inotify_add_watch, int, fd, const char __user *, pathname,
 	 * bits get passed in and set in watches/events.
 	 */
 	if (unlikely(mask & ~ALL_INOTIFY_BITS))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	/*
 	 * Require at least one valid bit set in the mask.
 	 * Without _something_ set, we would have no events to
 	 * watch for.
 	 */
 	if (unlikely(!(mask & ALL_INOTIFY_BITS)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	f = fdget(fd);
 	if (unlikely(!f.file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	/* verify that this is indeed an inotify instance */
 	if (unlikely(f.file->f_op != &inotify_fops)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EINVAL;
 		goto fput_and_out;
 	}
 
 	if (!(mask & IN_DONT_FOLLOW))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= LOOKUP_FOLLOW;
+}
 	if (mask & IN_ONLYDIR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= LOOKUP_DIRECTORY;
+}
 
 	ret = inotify_find_inode(pathname, &path, flags);
 	if (ret)
@@ -731,7 +789,9 @@ SYSCALL_DEFINE2(inotify_rm_watch, int, fd, __s32, wd)
 
 	f = fdget(fd);
 	if (unlikely(!f.file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	/* verify that this is indeed an inotify instance */
 	ret = -EINVAL;
@@ -764,25 +824,44 @@ SYSCALL_DEFINE2(inotify_rm_watch, int, fd, __s32, wd)
  */
 static int __init inotify_user_setup(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_ACCESS != FS_ACCESS);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_MODIFY != FS_MODIFY);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_ATTRIB != FS_ATTRIB);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_CLOSE_WRITE != FS_CLOSE_WRITE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_CLOSE_NOWRITE != FS_CLOSE_NOWRITE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_OPEN != FS_OPEN);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_MOVED_FROM != FS_MOVED_FROM);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_MOVED_TO != FS_MOVED_TO);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_CREATE != FS_CREATE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_DELETE != FS_DELETE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_DELETE_SELF != FS_DELETE_SELF);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_MOVE_SELF != FS_MOVE_SELF);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_UNMOUNT != FS_UNMOUNT);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_Q_OVERFLOW != FS_Q_OVERFLOW);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_IGNORED != FS_IN_IGNORED);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_EXCL_UNLINK != FS_EXCL_UNLINK);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_ISDIR != FS_ISDIR);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(IN_ONESHOT != FS_IN_ONESHOT);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(hweight32(ALL_INOTIFY_BITS) != 21);
 
 	inotify_inode_mark_cachep = KMEM_CACHE(inotify_inode_mark, SLAB_PANIC);
diff --git a/fs/notify/mark.c b/fs/notify/mark.c
index 258d990..dd34b57 100644
--- a/fs/notify/mark.c
+++ b/fs/notify/mark.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Copyright (C) 2008 Red Hat, Inc., Eric Paris <eparis@redhat.com>
  *
@@ -121,9 +123,12 @@ static void __fsnotify_recalc_mask(struct fsnotify_mark_connector *conn)
 	}
 	if (conn->flags & FSNOTIFY_OBJ_TYPE_INODE)
 		conn->inode->i_fsnotify_mask = new_mask;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (conn->flags & FSNOTIFY_OBJ_TYPE_VFSMOUNT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		real_mount(conn->mnt)->mnt_fsnotify_mask = new_mask;
 }
+}
 
 /*
  * Calculate mask of events for a list of marks. The caller must make sure
@@ -134,8 +139,11 @@ static void __fsnotify_recalc_mask(struct fsnotify_mark_connector *conn)
 void fsnotify_recalc_mask(struct fsnotify_mark_connector *conn)
 {
 	if (!conn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&conn->lock);
 	__fsnotify_recalc_mask(conn);
 	spin_unlock(&conn->lock);
@@ -154,6 +162,7 @@ static void fsnotify_connector_destroy_workfn(struct work_struct *work)
 	spin_unlock(&destroy_lock);
 
 	synchronize_srcu(&fsnotify_mark_srcu);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (conn) {
 		free = conn;
 		conn = conn->destroy_next;
@@ -167,6 +176,7 @@ static struct inode *fsnotify_detach_connector_from_object(
 	struct inode *inode = NULL;
 
 	if (conn->flags & FSNOTIFY_OBJ_TYPE_INODE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode = conn->inode;
 		rcu_assign_pointer(inode->i_fsnotify_marks, NULL);
 		inode->i_fsnotify_mask = 0;
@@ -187,6 +197,7 @@ static void fsnotify_final_mark_destroy(struct fsnotify_mark *mark)
 {
 	struct fsnotify_group *group = mark->group;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON_ONCE(!group))
 		return;
 	group->ops->free_mark(mark);
@@ -201,8 +212,12 @@ void fsnotify_put_mark(struct fsnotify_mark *mark)
 
 	/* Catch marks that were actually never attached to object */
 	if (!mark->connector) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (atomic_dec_and_test(&mark->refcnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fsnotify_final_mark_destroy(mark);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
 	}
 
@@ -211,22 +226,29 @@ void fsnotify_put_mark(struct fsnotify_mark *mark)
 	 * safely grab mark reference.
 	 */
 	if (!atomic_dec_and_lock(&mark->refcnt, &mark->connector->lock))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	conn = mark->connector;
 	hlist_del_init_rcu(&mark->obj_list);
 	if (hlist_empty(&conn->list)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode = fsnotify_detach_connector_from_object(conn);
 		free_conn = true;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__fsnotify_recalc_mask(conn);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mark->connector = NULL;
 	spin_unlock(&conn->lock);
 
 	iput(inode);
 
 	if (free_conn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&destroy_lock);
 		conn->destroy_next = connector_destroy_list;
 		connector_destroy_list = conn;
@@ -255,6 +277,7 @@ void fsnotify_put_mark(struct fsnotify_mark *mark)
  */
 static bool fsnotify_get_mark_safe(struct fsnotify_mark *mark)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!mark)
 		return true;
 
@@ -279,6 +302,7 @@ static bool fsnotify_get_mark_safe(struct fsnotify_mark *mark)
  */
 static void fsnotify_put_mark_wake(struct fsnotify_mark *mark)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mark) {
 		struct fsnotify_group *group = mark->group;
 
@@ -314,6 +338,7 @@ bool fsnotify_prepare_user_wait(struct fsnotify_iter_info *iter_info)
 
 void fsnotify_finish_user_wait(struct fsnotify_iter_info *iter_info)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iter_info->srcu_idx = srcu_read_lock(&fsnotify_mark_srcu);
 	fsnotify_put_mark_wake(iter_info->inode_mark);
 	fsnotify_put_mark_wake(iter_info->vfsmount_mark);
@@ -333,6 +358,7 @@ void fsnotify_detach_mark(struct fsnotify_mark *mark)
 {
 	struct fsnotify_group *group = mark->group;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(!mutex_is_locked(&group->mark_mutex));
 	WARN_ON_ONCE(!srcu_read_lock_held(&fsnotify_mark_srcu) &&
 		     atomic_read(&mark->refcnt) < 1 +
@@ -369,6 +395,7 @@ void fsnotify_free_mark(struct fsnotify_mark *mark)
 	spin_lock(&mark->lock);
 	/* something else already called this function on this mark */
 	if (!(mark->flags & FSNOTIFY_MARK_FLAG_ALIVE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&mark->lock);
 		return;
 	}
@@ -387,6 +414,7 @@ void fsnotify_free_mark(struct fsnotify_mark *mark)
 void fsnotify_destroy_mark(struct fsnotify_mark *mark,
 			   struct fsnotify_group *group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock_nested(&group->mark_mutex, SINGLE_DEPTH_NESTING);
 	fsnotify_detach_mark(mark);
 	mutex_unlock(&group->mark_mutex);
@@ -414,6 +442,7 @@ void fsnotify_destroy_mark(struct fsnotify_mark *mark,
  */
 int fsnotify_compare_groups(struct fsnotify_group *a, struct fsnotify_group *b)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (a == b)
 		return 0;
 	if (!a)
@@ -438,13 +467,16 @@ static int fsnotify_attach_connector_to_object(
 
 	conn = kmem_cache_alloc(fsnotify_mark_connector_cachep, GFP_KERNEL);
 	if (!conn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	spin_lock_init(&conn->lock);
 	INIT_HLIST_HEAD(&conn->list);
 	if (inode) {
 		conn->flags = FSNOTIFY_OBJ_TYPE_INODE;
 		conn->inode = igrab(inode);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		conn->flags = FSNOTIFY_OBJ_TYPE_VFSMOUNT;
 		conn->mnt = mnt;
 	}
@@ -455,10 +487,14 @@ static int fsnotify_attach_connector_to_object(
 	if (cmpxchg(connp, NULL, conn)) {
 		/* Someone else created list structure for us */
 		if (inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			iput(inode);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kmem_cache_free(fsnotify_mark_connector_cachep, conn);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -478,9 +514,11 @@ static struct fsnotify_mark_connector *fsnotify_grab_connector(
 	conn = srcu_dereference(*connp, &fsnotify_mark_srcu);
 	if (!conn)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&conn->lock);
 	if (!(conn->flags & (FSNOTIFY_OBJ_TYPE_INODE |
 			     FSNOTIFY_OBJ_TYPE_VFSMOUNT))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&conn->lock);
 		srcu_read_unlock(&fsnotify_mark_srcu, idx);
 		return NULL;
@@ -507,7 +545,9 @@ static int fsnotify_add_mark_list(struct fsnotify_mark *mark,
 	int err = 0;
 
 	if (WARN_ON(!inode && !mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (inode)
 		connp = &inode->i_fsnotify_marks;
 	else
@@ -516,10 +556,13 @@ static int fsnotify_add_mark_list(struct fsnotify_mark *mark,
 	spin_lock(&mark->lock);
 	conn = fsnotify_grab_connector(connp);
 	if (!conn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&mark->lock);
 		err = fsnotify_attach_connector_to_object(connp, inode, mnt);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 		goto restart;
 	}
 
@@ -531,22 +574,27 @@ static int fsnotify_add_mark_list(struct fsnotify_mark *mark,
 
 	/* should mark be in the middle of the current list? */
 	hlist_for_each_entry(lmark, &conn->list, obj_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		last = lmark;
 
 		if ((lmark->group == mark->group) &&
 		    (lmark->flags & FSNOTIFY_MARK_FLAG_ATTACHED) &&
 		    !allow_dups) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EEXIST;
 			goto out_err;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cmp = fsnotify_compare_groups(lmark->group, mark->group);
 		if (cmp >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			hlist_add_before_rcu(&mark->obj_list, &lmark->obj_list);
 			goto added;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(last == NULL);
 	/* mark should be the last entry.  last is the current last entry */
 	hlist_add_behind_rcu(&mark->obj_list, &last->obj_list);
@@ -594,6 +642,7 @@ int fsnotify_add_mark_locked(struct fsnotify_mark *mark, struct inode *inode,
 	if (mark->mask)
 		fsnotify_recalc_mask(mark->connector);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 err:
 	mark->flags &= ~(FSNOTIFY_MARK_FLAG_ALIVE |
@@ -630,16 +679,20 @@ struct fsnotify_mark *fsnotify_find_mark(
 
 	conn = fsnotify_grab_connector(connp);
 	if (!conn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	hlist_for_each_entry(mark, &conn->list, obj_list) {
 		if (mark->group == group &&
 		    (mark->flags & FSNOTIFY_MARK_FLAG_ATTACHED)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fsnotify_get_mark(mark);
 			spin_unlock(&conn->lock);
 			return mark;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&conn->lock);
 	return NULL;
 }
@@ -654,6 +707,7 @@ void fsnotify_clear_marks_by_group(struct fsnotify_group *group,
 
 	/* Skip selection step if we want to clear all marks. */
 	if (type == FSNOTIFY_OBJ_ALL_TYPES) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		head = &group->marks_list;
 		goto clear;
 	}
@@ -698,7 +752,9 @@ void fsnotify_destroy_marks(struct fsnotify_mark_connector __rcu **connp)
 
 	conn = fsnotify_grab_connector(connp);
 	if (!conn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	/*
 	 * We have to be careful since we can race with e.g.
 	 * fsnotify_clear_marks_by_group() and once we drop the conn->lock, the
@@ -707,10 +763,14 @@ void fsnotify_destroy_marks(struct fsnotify_mark_connector __rcu **connp)
 	 * iteration after regaining conn->lock.
 	 */
 	hlist_for_each_entry(mark, &conn->list, obj_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fsnotify_get_mark(mark);
 		spin_unlock(&conn->lock);
 		if (old_mark)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fsnotify_put_mark(old_mark);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		old_mark = mark;
 		fsnotify_destroy_mark(mark, mark->group);
 		spin_lock(&conn->lock);
@@ -723,7 +783,10 @@ void fsnotify_destroy_marks(struct fsnotify_mark_connector __rcu **connp)
 	inode = fsnotify_detach_connector_from_object(conn);
 	spin_unlock(&conn->lock);
 	if (old_mark)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fsnotify_put_mark(old_mark);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	iput(inode);
 }
 
@@ -733,8 +796,10 @@ void fsnotify_destroy_marks(struct fsnotify_mark_connector __rcu **connp)
 void fsnotify_init_mark(struct fsnotify_mark *mark,
 			struct fsnotify_group *group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(mark, 0, sizeof(*mark));
 	spin_lock_init(&mark->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&mark->refcnt, 1);
 	fsnotify_get_group(group);
 	mark->group = group;
@@ -756,6 +821,7 @@ static void fsnotify_mark_destroy_workfn(struct work_struct *work)
 
 	synchronize_srcu(&fsnotify_mark_srcu);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(mark, next, &private_destroy_list, g_list) {
 		list_del_init(&mark->g_list);
 		fsnotify_final_mark_destroy(mark);
@@ -765,5 +831,6 @@ static void fsnotify_mark_destroy_workfn(struct work_struct *work)
 /* Wait for all marks queued for destruction to be actually destroyed */
 void fsnotify_wait_marks_destroyed(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	flush_delayed_work(&reaper_work);
 }
diff --git a/fs/notify/notification.c b/fs/notify/notification.c
index 66f85c6..2a3fddc 100644
--- a/fs/notify/notification.c
+++ b/fs/notify/notification.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  Copyright (C) 2008 Red Hat, Inc., Eric Paris <eparis@redhat.com>
  *
@@ -102,6 +104,7 @@ int fsnotify_add_event(struct fsnotify_group *group,
 	int ret = 0;
 	struct list_head *list = &group->notification_list;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("%s: group=%p event=%p\n", __func__, group, event);
 
 	spin_lock(&group->notification_lock);
@@ -148,6 +151,7 @@ struct fsnotify_event *fsnotify_remove_first_event(struct fsnotify_group *group)
 {
 	struct fsnotify_event *event;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	assert_spin_locked(&group->notification_lock);
 
 	pr_debug("%s: group=%p\n", __func__, group);
@@ -170,6 +174,7 @@ struct fsnotify_event *fsnotify_remove_first_event(struct fsnotify_group *group)
  */
 struct fsnotify_event *fsnotify_peek_first_event(struct fsnotify_group *group)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	assert_spin_locked(&group->notification_lock);
 
 	return list_first_entry(&group->notification_list,
@@ -185,6 +190,7 @@ void fsnotify_flush_notify(struct fsnotify_group *group)
 	struct fsnotify_event *event;
 
 	spin_lock(&group->notification_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (!fsnotify_notify_queue_is_empty(group)) {
 		event = fsnotify_remove_first_event(group);
 		spin_unlock(&group->notification_lock);
diff --git a/fs/nsfs.c b/fs/nsfs.c
index ef243e1..e60db03 100644
--- a/fs/nsfs.c
+++ b/fs/nsfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/mount.h>
 #include <linux/file.h>
@@ -21,6 +23,7 @@ static const struct file_operations ns_file_operations = {
 
 static char *ns_dname(struct dentry *dentry, char *buffer, int buflen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	const struct proc_ns_operations *ns_ops = dentry->d_fsdata;
 
@@ -30,6 +33,7 @@ static char *ns_dname(struct dentry *dentry, char *buffer, int buflen)
 
 static void ns_prune_dentry(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	if (inode) {
 		struct ns_common *ns = inode->i_private;
@@ -65,6 +69,7 @@ static void *__ns_get_path(struct path *path, struct ns_common *ns)
 	dentry = (struct dentry *)d;
 	if (!lockref_get_not_dead(&dentry->d_lockref))
 		goto slow;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	ns->ops->put(ns);
 got_it:
@@ -75,6 +80,7 @@ static void *__ns_get_path(struct path *path, struct ns_common *ns)
 	rcu_read_unlock();
 	inode = new_inode_pseudo(mnt->mnt_sb);
 	if (!inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ns->ops->put(ns);
 		return ERR_PTR(-ENOMEM);
 	}
@@ -87,6 +93,7 @@ static void *__ns_get_path(struct path *path, struct ns_common *ns)
 
 	dentry = d_alloc_pseudo(mnt->mnt_sb, &empty_name);
 	if (!dentry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		iput(inode);
 		return ERR_PTR(-ENOMEM);
 	}
@@ -95,6 +102,7 @@ static void *__ns_get_path(struct path *path, struct ns_common *ns)
 	dentry->d_fsdata = (void *)ns->ops;
 	d = atomic_long_cmpxchg(&ns->stashed, 0, (unsigned long)dentry);
 	if (d) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		d_delete(dentry);	/* make sure ->d_prune() does nothing */
 		dput(dentry);
 		cpu_relax();
@@ -112,11 +120,14 @@ void *ns_get_path(struct path *path, struct task_struct *task,
 again:
 	ns = ns_ops->get(task);
 	if (!ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 
 	ret = __ns_get_path(path, ns);
 	if (IS_ERR(ret) && PTR_ERR(ret) == -EAGAIN)
 		goto again;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -130,7 +141,9 @@ int open_related_ns(struct ns_common *ns,
 
 	fd = get_unused_fd_flags(O_CLOEXEC);
 	if (fd < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return fd;
+}
 
 	while (1) {
 		struct ns_common *relative;
@@ -199,6 +212,7 @@ int ns_get_name(char *buf, size_t size, struct task_struct *task,
 	const char *name;
 	ns = ns_ops->get(task);
 	if (ns) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		name = ns_ops->real_ns_name ? : ns_ops->name;
 		res = snprintf(buf, size, "%s:[%u]", name, ns->inum);
 		ns_ops->put(ns);
@@ -212,11 +226,14 @@ struct file *proc_ns_fget(int fd)
 
 	file = fget(fd);
 	if (!file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EBADF);
+}
 
 	if (file->f_op != &ns_file_operations)
 		goto out_invalid;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return file;
 
 out_invalid:
@@ -226,6 +243,7 @@ struct file *proc_ns_fget(int fd)
 
 static int nsfs_show_path(struct seq_file *seq, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	const struct proc_ns_operations *ns_ops = dentry->d_fsdata;
 
@@ -254,6 +272,8 @@ void __init nsfs_init(void)
 {
 	nsfs_mnt = kern_mount(&nsfs);
 	if (IS_ERR(nsfs_mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("can't set nsfs up\n");
+}
 	nsfs_mnt->mnt_sb->s_flags &= ~MS_NOUSER;
 }
diff --git a/fs/open.c b/fs/open.c
index 7ea1184..8a71d5a 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/open.c
  *
@@ -42,7 +44,9 @@ int do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs,
 
 	/* Not pretty: "inode->i_size" shouldn't really be signed. But it is. */
 	if (length < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	newattrs.ia_size = length;
 	newattrs.ia_valid = ATTR_SIZE | time_attrs;
@@ -54,9 +58,13 @@ int do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs,
 	/* Remove suid, sgid, and file capabilities on truncate too */
 	ret = dentry_needs_remove_privs(dentry);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		newattrs.ia_valid |= ret | ATTR_FORCE;
+}
 
 	inode_lock(dentry->d_inode);
 	/* Note any delegations or leases have already been broken: */
@@ -75,7 +83,9 @@ long vfs_truncate(const struct path *path, loff_t length)
 
 	/* For directories it's -EISDIR, for other non-regulars - -EINVAL */
 	if (S_ISDIR(inode->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EISDIR;
+}
 	if (!S_ISREG(inode->i_mode))
 		return -EINVAL;
 
@@ -135,7 +145,9 @@ static long do_sys_truncate(const char __user *pathname, loff_t length)
 	int error;
 
 	if (length < 0)	/* sorry, but loff_t says... */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 retry:
 	error = user_path_at(AT_FDCWD, pathname, lookup_flags, &path);
@@ -151,13 +163,15 @@ static long do_sys_truncate(const char __user *pathname, loff_t length)
 }
 
 SYSCALL_DEFINE2(truncate, const char __user *, path, long, length)
-{
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_sys_truncate(path, length);
 }
 
 #ifdef CONFIG_COMPAT
 COMPAT_SYSCALL_DEFINE2(truncate, const char __user *, path, compat_off_t, length)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_sys_truncate(path, length);
 }
 #endif
@@ -172,6 +186,7 @@ static long do_sys_ftruncate(unsigned int fd, loff_t length, int small)
 	error = -EINVAL;
 	if (length < 0)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EBADF;
 	f = fdget(fd);
 	if (!f.file)
@@ -179,7 +194,9 @@ static long do_sys_ftruncate(unsigned int fd, loff_t length, int small)
 
 	/* explicitly opened as large or we are on 64-bit box */
 	if (f.file->f_flags & O_LARGEFILE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		small = 0;
+}
 
 	dentry = f.file->f_path.dentry;
 	inode = dentry->d_inode;
@@ -187,11 +204,13 @@ static long do_sys_ftruncate(unsigned int fd, loff_t length, int small)
 	if (!S_ISREG(inode->i_mode) || !(f.file->f_mode & FMODE_WRITE))
 		goto out_putf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EINVAL;
 	/* Cannot ftruncate over 2^31 bytes without large file support */
 	if (small && length > MAX_NON_LFS)
 		goto out_putf;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EPERM;
 	/* Check IS_APPEND on real upper inode */
 	if (IS_APPEND(file_inode(f.file)))
@@ -218,6 +237,7 @@ SYSCALL_DEFINE2(ftruncate, unsigned int, fd, unsigned long, length)
 #ifdef CONFIG_COMPAT
 COMPAT_SYSCALL_DEFINE2(ftruncate, unsigned int, fd, compat_ulong_t, length)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_sys_ftruncate(fd, length, 1);
 }
 #endif
@@ -238,15 +258,20 @@ SYSCALL_DEFINE2(ftruncate64, unsigned int, fd, loff_t, length)
 
 int vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	long ret;
 
 	if (offset < 0 || len <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* Return error if mode is not supported */
 	if (mode & ~FALLOC_FL_SUPPORTED_MASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	/* Punch hole and zero range are mutually exclusive */
 	if ((mode & (FALLOC_FL_PUNCH_HOLE | FALLOC_FL_ZERO_RANGE)) ==
@@ -274,22 +299,30 @@ int vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
 		return -EINVAL;
 
 	if (!(file->f_mode & FMODE_WRITE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	/*
 	 * We can only allow pure fallocate on append only files
 	 */
 	if ((mode & ~FALLOC_FL_KEEP_SIZE) && IS_APPEND(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	if (IS_IMMUTABLE(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	/*
 	 * We cannot allow any fallocate operation on an active swapfile
 	 */
 	if (IS_SWAPFILE(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ETXTBSY;
+}
 
 	/*
 	 * Revalidate the write permissions, in case security policy has
@@ -297,23 +330,35 @@ int vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
 	 */
 	ret = security_file_permission(file, MAY_WRITE);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (S_ISFIFO(inode->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESPIPE;
+}
 
 	if (S_ISDIR(inode->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EISDIR;
+}
 
 	if (!S_ISREG(inode->i_mode) && !S_ISBLK(inode->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODEV;
+}
 
 	/* Check for wrap through zero too */
 	if (((offset + len) > inode->i_sb->s_maxbytes) || ((offset + len) < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFBIG;
+}
 
 	if (!file->f_op->fallocate)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	file_start_write(file);
 	ret = file->f_op->fallocate(file, mode, offset, len);
@@ -364,7 +409,9 @@ SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)
 
 	override_cred = prepare_creds();
 	if (!override_cred)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	override_cred->fsuid = override_cred->uid;
 	override_cred->fsgid = override_cred->gid;
@@ -412,11 +459,14 @@ SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)
 	 * state before we even see this result.
 	 */
 	if (__mnt_is_readonly(path.mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = -EROFS;
+}
 
 out_path_release:
 	path_put(&path);
 	if (retry_estale(res, lookup_flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lookup_flags |= LOOKUP_REVAL;
 		goto retry;
 	}
@@ -450,6 +500,7 @@ SYSCALL_DEFINE1(chdir, const char __user *, filename)
 dput_and_out:
 	path_put(&path);
 	if (retry_estale(error, lookup_flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lookup_flags |= LOOKUP_REVAL;
 		goto retry;
 	}
@@ -466,6 +517,7 @@ SYSCALL_DEFINE1(fchdir, unsigned int, fd)
 	if (!f.file)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -ENOTDIR;
 	if (!d_can_lookup(f.file->f_path.dentry))
 		goto out_putf;
@@ -493,6 +545,7 @@ SYSCALL_DEFINE1(chroot, const char __user *, filename)
 	if (error)
 		goto dput_and_out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = -EPERM;
 	if (!ns_capable(current_user_ns(), CAP_SYS_CHROOT))
 		goto dput_and_out;
@@ -505,6 +558,7 @@ SYSCALL_DEFINE1(chroot, const char __user *, filename)
 dput_and_out:
 	path_put(&path);
 	if (retry_estale(error, lookup_flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lookup_flags |= LOOKUP_REVAL;
 		goto retry;
 	}
@@ -521,7 +575,9 @@ static int chmod_common(const struct path *path, umode_t mode)
 
 	error = mnt_want_write(path->mnt);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 retry_deleg:
 	inode_lock(inode);
 	error = security_path_chmod(path, mode);
@@ -533,6 +589,7 @@ static int chmod_common(const struct path *path, umode_t mode)
 out_unlock:
 	inode_unlock(inode);
 	if (delegated_inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = break_deleg_wait(&delegated_inode);
 		if (!error)
 			goto retry_deleg;
@@ -565,6 +622,7 @@ SYSCALL_DEFINE3(fchmodat, int, dfd, const char __user *, filename, umode_t, mode
 		error = chmod_common(&path, mode);
 		path_put(&path);
 		if (retry_estale(error, lookup_flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lookup_flags |= LOOKUP_REVAL;
 			goto retry;
 		}
@@ -593,29 +651,37 @@ static int chown_common(const struct path *path, uid_t user, gid_t group)
 	newattrs.ia_valid =  ATTR_CTIME;
 	if (user != (uid_t) -1) {
 		if (!uid_valid(uid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 		newattrs.ia_valid |= ATTR_UID;
 		newattrs.ia_uid = uid;
 	}
 	if (group != (gid_t) -1) {
 		if (!gid_valid(gid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 		newattrs.ia_valid |= ATTR_GID;
 		newattrs.ia_gid = gid;
 	}
 	if (!S_ISDIR(inode->i_mode))
 		newattrs.ia_valid |=
 			ATTR_KILL_SUID | ATTR_KILL_SGID | ATTR_KILL_PRIV;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_lock(inode);
 	error = security_path_chown(path, uid, gid);
 	if (!error)
 		error = notify_change(path->dentry, &newattrs, &delegated_inode);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_unlock(inode);
 	if (delegated_inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = break_deleg_wait(&delegated_inode);
 		if (!error)
 			goto retry_deleg;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -631,7 +697,9 @@ SYSCALL_DEFINE5(fchownat, int, dfd, const char __user *, filename, uid_t, user,
 
 	lookup_flags = (flag & AT_SYMLINK_NOFOLLOW) ? 0 : LOOKUP_FOLLOW;
 	if (flag & AT_EMPTY_PATH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lookup_flags |= LOOKUP_EMPTY;
+}
 retry:
 	error = user_path_at(dfd, filename, lookup_flags, &path);
 	if (error)
@@ -644,6 +712,7 @@ SYSCALL_DEFINE5(fchownat, int, dfd, const char __user *, filename, uid_t, user,
 out_release:
 	path_put(&path);
 	if (retry_estale(error, lookup_flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lookup_flags |= LOOKUP_REVAL;
 		goto retry;
 	}
@@ -686,8 +755,11 @@ int open_check_o_direct(struct file *f)
 {
 	/* NB: we're sure to have correct a_ops only after f_op->open */
 	if (f->f_flags & O_DIRECT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!f->f_mapping->a_ops || !f->f_mapping->a_ops->direct_IO)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 	}
 	return 0;
 }
@@ -722,6 +794,7 @@ static int do_dentry_open(struct file *f,
 			goto cleanup_file;
 		error = __mnt_want_write(f->f_path.mnt);
 		if (unlikely(error)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_write_access(inode);
 			goto cleanup_file;
 		}
@@ -734,6 +807,7 @@ static int do_dentry_open(struct file *f,
 
 	f->f_op = fops_get(inode->i_fop);
 	if (unlikely(WARN_ON(!f->f_op))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ENODEV;
 		goto cleanup_all;
 	}
@@ -754,7 +828,9 @@ static int do_dentry_open(struct file *f,
 			goto cleanup_all;
 	}
 	if ((f->f_mode & (FMODE_READ | FMODE_WRITE)) == FMODE_READ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		i_readcount_inc(inode);
+}
 	if ((f->f_mode & FMODE_READ) &&
 	     likely(f->f_op->read || f->f_op->read_iter))
 		f->f_mode |= FMODE_CAN_READ;
@@ -772,6 +848,7 @@ static int do_dentry_open(struct file *f,
 cleanup_all:
 	fops_put(f->f_op);
 	if (f->f_mode & FMODE_WRITER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_write_access(inode);
 		__mnt_drop_write(f->f_path.mnt);
 	}
@@ -809,6 +886,7 @@ int finish_open(struct file *file, struct dentry *dentry,
 		int *opened)
 {
 	int error;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(*opened & FILE_OPENED); /* once it's opened, it's opened */
 
 	file->f_path.dentry = dentry;
@@ -837,6 +915,7 @@ EXPORT_SYMBOL(finish_open);
  */
 int finish_no_open(struct file *file, struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	file->f_path.dentry = dentry;
 	return 1;
 }
@@ -860,7 +939,9 @@ int vfs_open(const struct path *path, struct file *file,
 	struct dentry *dentry = d_real(path->dentry, NULL, file->f_flags, 0);
 
 	if (IS_ERR(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(dentry);
+}
 
 	file->f_path = *path;
 	return do_dentry_open(file, d_backing_inode(dentry), NULL, cred);
@@ -885,10 +966,12 @@ struct file *dentry_open(const struct path *path, int flags,
 			/* from now on we need fput() to dispose of f */
 			error = open_check_o_direct(f);
 			if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fput(f);
 				f = ERR_PTR(error);
 			}
 		} else { 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			put_filp(f);
 			f = ERR_PTR(error);
 		}
@@ -926,10 +1009,16 @@ static inline int build_open_flags(int flags, umode_t mode, struct open_flags *o
 		flags |= O_DSYNC;
 
 	if (flags & __O_TMPFILE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((flags & O_TMPFILE_MASK) != O_TMPFILE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(acc_mode & MAY_WRITE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 	} else if (flags & O_PATH) {
 		/*
 		 * If we have O_PATH in the open flag. Then we
@@ -961,7 +1050,9 @@ static inline int build_open_flags(int flags, umode_t mode, struct open_flags *o
 	}
 
 	if (flags & O_DIRECTORY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lookup_flags |= LOOKUP_DIRECTORY;
+}
 	if (!(flags & O_NOFOLLOW))
 		lookup_flags |= LOOKUP_FOLLOW;
 	op->lookup_flags = lookup_flags;
@@ -983,6 +1074,7 @@ struct file *file_open_name(struct filename *name, int flags, umode_t mode)
 {
 	struct open_flags op;
 	int err = build_open_flags(flags, mode, &op);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err ? ERR_PTR(err) : do_filp_open(AT_FDCWD, name, &op);
 }
 
@@ -999,6 +1091,7 @@ struct file *file_open_name(struct filename *name, int flags, umode_t mode)
  */
 struct file *filp_open(const char *filename, int flags, umode_t mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct filename *name = getname_kernel(filename);
 	struct file *file = ERR_CAST(name);
 	
@@ -1016,7 +1109,9 @@ struct file *file_open_root(struct dentry *dentry, struct vfsmount *mnt,
 	struct open_flags op;
 	int err = build_open_flags(flags, mode, &op);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(err);
+}
 	return do_file_open_root(dentry, mnt, filename, &op);
 }
 EXPORT_SYMBOL(file_open_root);
@@ -1028,7 +1123,9 @@ struct file *filp_clone_open(struct file *oldfile)
 
 	file = get_empty_filp();
 	if (IS_ERR(file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return file;
+}
 
 	file->f_flags = oldfile->f_flags;
 	retval = vfs_open(&oldfile->f_path, file, oldfile->f_cred);
@@ -1048,7 +1145,9 @@ long do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode)
 	struct filename *tmp;
 
 	if (fd)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return fd;
+}
 
 	tmp = getname(filename);
 	if (IS_ERR(tmp))
@@ -1093,6 +1192,7 @@ SYSCALL_DEFINE4(openat, int, dfd, const char __user *, filename, int, flags,
  */
 COMPAT_SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t, mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_sys_open(AT_FDCWD, filename, flags, mode);
 }
 
@@ -1102,6 +1202,7 @@ COMPAT_SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t,
  */
 COMPAT_SYSCALL_DEFINE4(openat, int, dfd, const char __user *, filename, int, flags, umode_t, mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_sys_open(dfd, filename, flags, mode);
 }
 #endif
@@ -1128,12 +1229,15 @@ int filp_close(struct file *filp, fl_owner_t id)
 	int retval = 0;
 
 	if (!file_count(filp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR "VFS: Close: file count is 0\n");
 		return 0;
 	}
 
 	if (filp->f_op->flush)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = filp->f_op->flush(filp, id);
+}
 
 	if (likely(!(filp->f_mode & FMODE_PATH))) {
 		dnotify_flush(filp, id);
@@ -1171,6 +1275,7 @@ EXPORT_SYMBOL(sys_close);
  */
 SYSCALL_DEFINE0(vhangup)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		tty_vhangup_self();
 		return 0;
@@ -1186,6 +1291,7 @@ SYSCALL_DEFINE0(vhangup)
  */
 int generic_file_open(struct inode * inode, struct file * filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(filp->f_flags & O_LARGEFILE) && i_size_read(inode) > MAX_NON_LFS)
 		return -EOVERFLOW;
 	return 0;
diff --git a/fs/overlayfs/copy_up.c b/fs/overlayfs/copy_up.c
index c441f93..c54f7d8 100644
--- a/fs/overlayfs/copy_up.c
+++ b/fs/overlayfs/copy_up.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *
  * Copyright (C) 2011 Novell Inc.
diff --git a/fs/overlayfs/dir.c b/fs/overlayfs/dir.c
index cc961a3..d15e856 100644
--- a/fs/overlayfs/dir.c
+++ b/fs/overlayfs/dir.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *
  * Copyright (C) 2011 Novell Inc.
diff --git a/fs/overlayfs/inode.c b/fs/overlayfs/inode.c
index d60900b..f89cb470 100644
--- a/fs/overlayfs/inode.c
+++ b/fs/overlayfs/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *
  * Copyright (C) 2011 Novell Inc.
diff --git a/fs/overlayfs/namei.c b/fs/overlayfs/namei.c
index 4bb7e4f..fd2452a 100644
--- a/fs/overlayfs/namei.c
+++ b/fs/overlayfs/namei.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2011 Novell Inc.
  * Copyright (C) 2016 Red Hat, Inc.
diff --git a/fs/overlayfs/overlayfs.h b/fs/overlayfs/overlayfs.h
index d9a0edd..4deb18d 100644
--- a/fs/overlayfs/overlayfs.h
+++ b/fs/overlayfs/overlayfs.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *
  * Copyright (C) 2011 Novell Inc.
diff --git a/fs/overlayfs/ovl_entry.h b/fs/overlayfs/ovl_entry.h
index 36b49bd..1aa69a4 100644
--- a/fs/overlayfs/ovl_entry.h
+++ b/fs/overlayfs/ovl_entry.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *
  * Copyright (C) 2011 Novell Inc.
diff --git a/fs/overlayfs/readdir.c b/fs/overlayfs/readdir.c
index 7fa7d68..410ad59 100644
--- a/fs/overlayfs/readdir.c
+++ b/fs/overlayfs/readdir.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *
  * Copyright (C) 2011 Novell Inc.
diff --git a/fs/overlayfs/super.c b/fs/overlayfs/super.c
index b8f8d66..7a34f87 100644
--- a/fs/overlayfs/super.c
+++ b/fs/overlayfs/super.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *
  * Copyright (C) 2011 Novell Inc.
diff --git a/fs/overlayfs/util.c b/fs/overlayfs/util.c
index f60ce2e..73131c8 100644
--- a/fs/overlayfs/util.c
+++ b/fs/overlayfs/util.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2011 Novell Inc.
  * Copyright (C) 2016 Red Hat, Inc.
diff --git a/fs/pipe.c b/fs/pipe.c
index 8ef7d7b..2c6f3f2 100644
--- a/fs/pipe.c
+++ b/fs/pipe.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/pipe.c
@@ -96,6 +98,7 @@ static inline void __pipe_unlock(struct pipe_inode_info *pipe)
 void pipe_double_lock(struct pipe_inode_info *pipe1,
 		      struct pipe_inode_info *pipe2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(pipe1 == pipe2);
 
 	if (pipe1 < pipe2) {
@@ -145,6 +148,7 @@ static int anon_pipe_buf_steal(struct pipe_inode_info *pipe,
 	struct page *page = buf->page;
 
 	if (page_count(page) == 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (memcg_kmem_enabled())
 			memcg_kmem_uncharge(page, 0);
 		__SetPageLocked(page);
@@ -176,6 +180,7 @@ int generic_pipe_buf_steal(struct pipe_inode_info *pipe,
 	 * and return OK.
 	 */
 	if (page_count(page) == 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lock_page(page);
 		return 0;
 	}
@@ -196,6 +201,7 @@ EXPORT_SYMBOL(generic_pipe_buf_steal);
  */
 void generic_pipe_buf_get(struct pipe_inode_info *pipe, struct pipe_buffer *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	get_page(buf->page);
 }
 EXPORT_SYMBOL(generic_pipe_buf_get);
@@ -250,6 +256,7 @@ static const struct pipe_buf_operations packet_pipe_buf_ops = {
 static ssize_t
 pipe_read(struct kiocb *iocb, struct iov_iter *to)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size_t total_len = iov_iter_count(to);
 	struct file *filp = iocb->ki_filp;
 	struct pipe_inode_info *pipe = filp->private_data;
@@ -258,8 +265,11 @@ pipe_read(struct kiocb *iocb, struct iov_iter *to)
 
 	/* Null read succeeds. */
 	if (unlikely(total_len == 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	do_wakeup = 0;
 	ret = 0;
 	__pipe_lock(pipe);
@@ -273,19 +283,27 @@ pipe_read(struct kiocb *iocb, struct iov_iter *to)
 			int error;
 
 			if (chars > total_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				chars = total_len;
+}
 
 			error = pipe_buf_confirm(pipe, buf);
 			if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ret = error;
+}
 				break;
 			}
 
 			written = copy_page_to_iter(buf->page, buf->offset, chars, to);
 			if (unlikely(written < chars)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ret = -EFAULT;
+}
 				break;
 			}
 			ret += chars;
@@ -294,6 +312,7 @@ pipe_read(struct kiocb *iocb, struct iov_iter *to)
 
 			/* Was it a packet buffer? Clean up and exit */
 			if (buf->flags & PIPE_BUF_FLAG_PACKET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				total_len = chars;
 				buf->len = 0;
 			}
@@ -322,13 +341,16 @@ pipe_read(struct kiocb *iocb, struct iov_iter *to)
 			if (ret)
 				break;
 			if (filp->f_flags & O_NONBLOCK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EAGAIN;
 				break;
 			}
 		}
 		if (signal_pending(current)) {
 			if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -ERESTARTSYS;
+}
 			break;
 		}
 		if (do_wakeup) {
@@ -337,6 +359,7 @@ pipe_read(struct kiocb *iocb, struct iov_iter *to)
 		}
 		pipe_wait(pipe);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__pipe_unlock(pipe);
 
 	/* Signal writers asynchronously that there is more room. */
@@ -346,6 +369,7 @@ pipe_read(struct kiocb *iocb, struct iov_iter *to)
 	}
 	if (ret > 0)
 		file_accessed(filp);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -366,8 +390,11 @@ pipe_write(struct kiocb *iocb, struct iov_iter *from)
 
 	/* Null write succeeds. */
 	if (unlikely(total_len == 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__pipe_lock(pipe);
 
 	if (!pipe->readers) {
@@ -391,9 +418,11 @@ pipe_write(struct kiocb *iocb, struct iov_iter *from)
 
 			ret = copy_page_from_iter(buf->page, offset, chars, from);
 			if (unlikely(ret < chars)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EFAULT;
 				goto out;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			do_wakeup = 1;
 			buf->len += ret;
 			if (!iov_iter_count(from))
@@ -407,7 +436,9 @@ pipe_write(struct kiocb *iocb, struct iov_iter *from)
 		if (!pipe->readers) {
 			send_sig(SIGPIPE, current, 0);
 			if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EPIPE;
+}
 			break;
 		}
 		bufs = pipe->nrbufs;
@@ -420,6 +451,7 @@ pipe_write(struct kiocb *iocb, struct iov_iter *from)
 			if (!page) {
 				page = alloc_page(GFP_HIGHUSER | __GFP_ACCOUNT);
 				if (unlikely(!page)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ret = ret ? : -ENOMEM;
 					break;
 				}
@@ -433,8 +465,11 @@ pipe_write(struct kiocb *iocb, struct iov_iter *from)
 			do_wakeup = 1;
 			copied = copy_page_from_iter(page, 0, PAGE_SIZE, from);
 			if (unlikely(copied < PAGE_SIZE && iov_iter_count(from))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ret = -EFAULT;
+}
 				break;
 			}
 			ret += copied;
@@ -446,6 +481,7 @@ pipe_write(struct kiocb *iocb, struct iov_iter *from)
 			buf->len = copied;
 			buf->flags = 0;
 			if (is_packetized(filp)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				buf->ops = &packet_pipe_buf_ops;
 				buf->flags = PIPE_BUF_FLAG_PACKET;
 			}
@@ -458,13 +494,19 @@ pipe_write(struct kiocb *iocb, struct iov_iter *from)
 		if (bufs < pipe->buffers)
 			continue;
 		if (filp->f_flags & O_NONBLOCK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -EAGAIN;
+}
 			break;
 		}
 		if (signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -ERESTARTSYS;
+}
 			break;
 		}
 		if (do_wakeup) {
@@ -485,9 +527,12 @@ pipe_write(struct kiocb *iocb, struct iov_iter *from)
 	if (ret > 0 && sb_start_write_trylock(file_inode(filp)->i_sb)) {
 		int err = file_update_time(filp);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = err;
+}
 		sb_end_write(file_inode(filp)->i_sb);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -503,9 +548,11 @@ static long pipe_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 			buf = pipe->curbuf;
 			nrbufs = pipe->nrbufs;
 			while (--nrbufs >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				count += pipe->bufs[buf].len;
 				buf = (buf+1) & (pipe->buffers - 1);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			__pipe_unlock(pipe);
 
 			return put_user(count, (int __user *)arg);
@@ -555,6 +602,7 @@ static void put_pipe_info(struct inode *inode, struct pipe_inode_info *pipe)
 		inode->i_pipe = NULL;
 		kill = 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&inode->i_lock);
 
 	if (kill)
@@ -577,6 +625,7 @@ pipe_release(struct inode *inode, struct file *file)
 		kill_fasync(&pipe->fasync_readers, SIGIO, POLL_IN);
 		kill_fasync(&pipe->fasync_writers, SIGIO, POLL_OUT);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__pipe_unlock(pipe);
 
 	put_pipe_info(inode, pipe);
@@ -591,7 +640,9 @@ pipe_fasync(int fd, struct file *filp, int on)
 
 	__pipe_lock(pipe);
 	if (filp->f_mode & FMODE_READ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = fasync_helper(fd, filp, on, &pipe->fasync_readers);
+}
 	if ((filp->f_mode & FMODE_WRITE) && retval >= 0) {
 		retval = fasync_helper(fd, filp, on, &pipe->fasync_writers);
 		if (retval < 0 && (filp->f_mode & FMODE_READ))
@@ -620,6 +671,7 @@ static bool too_many_pipe_buffers_hard(unsigned long user_bufs)
 
 static bool is_unprivileged_user(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !capable(CAP_SYS_RESOURCE) && !capable(CAP_SYS_ADMIN);
 }
 
@@ -635,11 +687,15 @@ struct pipe_inode_info *alloc_pipe_info(void)
 		goto out_free_uid;
 
 	if (pipe_bufs * PAGE_SIZE > pipe_max_size && !capable(CAP_SYS_RESOURCE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pipe_bufs = pipe_max_size >> PAGE_SHIFT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	user_bufs = account_pipe_buffers(user, 0, pipe_bufs);
 
 	if (too_many_pipe_buffers_soft(user_bufs) && is_unprivileged_user()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		user_bufs = account_pipe_buffers(user, pipe_bufs, 1);
 		pipe_bufs = 1;
 	}
@@ -747,8 +803,11 @@ int create_pipe_files(struct file **res, int flags)
 	struct path path;
 
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENFILE;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -ENOMEM;
 	path.dentry = d_alloc_pseudo(pipe_mnt->mnt_sb, &empty_name);
 	if (!path.dentry)
@@ -759,6 +818,7 @@ int create_pipe_files(struct file **res, int flags)
 
 	f = alloc_file(&path, FMODE_WRITE, &pipefifo_fops);
 	if (IS_ERR(f)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(f);
 		goto err_dentry;
 	}
@@ -768,6 +828,7 @@ int create_pipe_files(struct file **res, int flags)
 
 	res[0] = alloc_file(&path, FMODE_READ, &pipefifo_fops);
 	if (IS_ERR(res[0])) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = PTR_ERR(res[0]);
 		goto err_file;
 	}
@@ -797,20 +858,26 @@ static int __do_pipe_flags(int *fd, struct file **files, int flags)
 	int fdw, fdr;
 
 	if (flags & ~(O_CLOEXEC | O_NONBLOCK | O_DIRECT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	error = create_pipe_files(files, flags);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	error = get_unused_fd_flags(flags);
 	if (error < 0)
 		goto err_read_pipe;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fdr = error;
 
 	error = get_unused_fd_flags(flags);
 	if (error < 0)
 		goto err_fdr;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fdw = error;
 
 	audit_fd_pair(fdr, fdw);
@@ -831,6 +898,7 @@ int do_pipe_flags(int *fd, int flags)
 	struct file *files[2];
 	int error = __do_pipe_flags(fd, files, flags);
 	if (!error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fd_install(fd[0], files[0]);
 		fd_install(fd[1], files[1]);
 	}
@@ -850,6 +918,7 @@ SYSCALL_DEFINE2(pipe2, int __user *, fildes, int, flags)
 	error = __do_pipe_flags(fd, files, flags);
 	if (!error) {
 		if (unlikely(copy_to_user(fildes, fd, sizeof(fd)))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fput(files[0]);
 			fput(files[1]);
 			put_unused_fd(fd[0]);
@@ -895,17 +964,22 @@ static int fifo_open(struct inode *inode, struct file *filp)
 
 	spin_lock(&inode->i_lock);
 	if (inode->i_pipe) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pipe = inode->i_pipe;
 		pipe->files++;
 		spin_unlock(&inode->i_lock);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&inode->i_lock);
 		pipe = alloc_pipe_info();
 		if (!pipe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 		pipe->files = 1;
 		spin_lock(&inode->i_lock);
 		if (unlikely(inode->i_pipe)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			inode->i_pipe->files++;
 			spin_unlock(&inode->i_lock);
 			free_pipe_info(pipe);
@@ -940,6 +1014,7 @@ static int fifo_open(struct inode *inode, struct file *filp)
 				 * seen a writer */
 				filp->f_version = pipe->w_counter;
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (wait_for_partner(pipe, &pipe->w_counter))
 					goto err_rd;
 			}
@@ -974,12 +1049,16 @@ static int fifo_open(struct inode *inode, struct file *filp)
 	 *  the process can at least talk to itself.
 	 */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pipe->readers++;
 		pipe->writers++;
 		pipe->r_counter++;
 		pipe->w_counter++;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pipe->readers == 1 || pipe->writers == 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			wake_up_partner(pipe);
+}
 		break;
 
 	default:
@@ -993,13 +1072,19 @@ static int fifo_open(struct inode *inode, struct file *filp)
 
 err_rd:
 	if (!--pipe->readers)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wake_up_interruptible(&pipe->wait);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -ERESTARTSYS;
 	goto err;
 
 err_wr:
 	if (!--pipe->writers)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wake_up_interruptible(&pipe->wait);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -ERESTARTSYS;
 	goto err;
 
@@ -1030,7 +1115,9 @@ static inline unsigned int round_pipe_size(unsigned int size)
 	unsigned long nr_pages;
 
 	if (size < pipe_min_size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		size = pipe_min_size;
+}
 
 	nr_pages = (size + PAGE_SIZE - 1) >> PAGE_SHIFT;
 	if (nr_pages == 0)
@@ -1052,7 +1139,9 @@ static long pipe_set_size(struct pipe_inode_info *pipe, unsigned long arg)
 
 	size = round_pipe_size(arg);
 	if (size == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	nr_pages = size >> PAGE_SHIFT;
 
 	if (!nr_pages)
@@ -1140,6 +1229,7 @@ int pipe_proc_fn(struct ctl_table *table, int write, void __user *buf,
 	int ret;
 
 	ret = proc_douintvec_minmax(table, write, buf, lenp, ppos);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret < 0 || !write)
 		return ret;
 
@@ -1158,6 +1248,7 @@ int pipe_proc_fn(struct ctl_table *table, int write, void __user *buf,
  */
 struct pipe_inode_info *get_pipe_info(struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return file->f_op == &pipefifo_fops ? file->private_data : NULL;
 }
 
@@ -1168,7 +1259,9 @@ long pipe_fcntl(struct file *file, unsigned int cmd, unsigned long arg)
 
 	pipe = get_pipe_info(file);
 	if (!pipe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	__pipe_lock(pipe);
 
@@ -1219,6 +1312,7 @@ static int __init init_pipe_fs(void)
 	if (!err) {
 		pipe_mnt = kern_mount(&pipe_fs_type);
 		if (IS_ERR(pipe_mnt)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(pipe_mnt);
 			unregister_filesystem(&pipe_fs_type);
 		}
diff --git a/fs/pnode.c b/fs/pnode.c
index 53d411a..efa7b3c 100644
--- a/fs/pnode.c
+++ b/fs/pnode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/pnode.c
  *
@@ -21,16 +23,19 @@ static inline struct mount *next_peer(struct mount *p)
 
 static inline struct mount *first_slave(struct mount *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return list_entry(p->mnt_slave_list.next, struct mount, mnt_slave);
 }
 
 static inline struct mount *last_slave(struct mount *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return list_entry(p->mnt_slave_list.prev, struct mount, mnt_slave);
 }
 
 static inline struct mount *next_slave(struct mount *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return list_entry(p->mnt_slave.next, struct mount, mnt_slave);
 }
 
@@ -43,11 +48,15 @@ static struct mount *get_peer_under_root(struct mount *mnt,
 	do {
 		/* Check the namespace first for optimization */
 		if (m->mnt_ns == ns && is_path_reachable(m, m->mnt.mnt_root, root))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return m;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		m = next_peer(m);
 	} while (m != mnt);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -64,9 +73,12 @@ int get_dominating_id(struct mount *mnt, const struct path *root)
 	for (m = mnt->mnt_master; m != NULL; m = m->mnt_master) {
 		struct mount *d = get_peer_under_root(m, mnt->mnt_ns, root);
 		if (d)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return d->mnt_group_id;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -83,11 +95,13 @@ static int do_make_slave(struct mount *mnt)
 		if (!master) {
 			struct list_head *p = &mnt->mnt_slave_list;
 			while (!list_empty(p)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				slave_mnt = list_first_entry(p,
 						struct mount, mnt_slave);
 				list_del_init(&slave_mnt->mnt_slave);
 				slave_mnt->mnt_master = NULL;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
 		}
 	} else {
@@ -99,6 +113,7 @@ static int do_make_slave(struct mount *mnt)
 		 */
 		for (m = master = next_peer(mnt); m != mnt; m = next_peer(m)) {
 			if (m->mnt.mnt_root == mnt->mnt.mnt_root) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				master = m;
 				break;
 			}
@@ -130,7 +145,9 @@ void change_mnt_propagation(struct mount *mnt, int type)
 		list_del_init(&mnt->mnt_slave);
 		mnt->mnt_master = NULL;
 		if (type == MS_UNBINDABLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mnt->mnt.mnt_flags |= MNT_UNBINDABLE;
+}
 		else
 			mnt->mnt.mnt_flags &= ~MNT_UNBINDABLE;
 	}
@@ -151,16 +168,22 @@ static struct mount *propagation_next(struct mount *m,
 {
 	/* are there any slaves of this mount? */
 	if (!IS_MNT_NEW(m) && !list_empty(&m->mnt_slave_list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return first_slave(m);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		struct mount *master = m->mnt_master;
 
 		if (master == origin->mnt_master) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			struct mount *next = next_peer(m);
 			return (next == origin) ? NULL : next;
 		} else if (m->mnt_slave.next != &master->mnt_slave_list)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return next_slave(m);
+}
 
 		/* back at master */
 		m = master;
@@ -182,33 +205,49 @@ static struct mount *skip_propagation_subtree(struct mount *m,
 
 static struct mount *next_group(struct mount *m, struct mount *origin)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (1) {
 			struct mount *next;
 			if (!IS_MNT_NEW(m) && !list_empty(&m->mnt_slave_list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return first_slave(m);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			next = next_peer(m);
 			if (m->mnt_group_id == origin->mnt_group_id) {
 				if (next == origin)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					return NULL;
+}
 			} else if (m->mnt_slave.next != &next->mnt_slave)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			m = next;
 		}
 		/* m is the last peer */
 		while (1) {
 			struct mount *master = m->mnt_master;
 			if (m->mnt_slave.next != &master->mnt_slave_list)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return next_slave(m);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			m = next_peer(master);
 			if (master->mnt_group_id == origin->mnt_group_id)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (master->mnt_slave.next == &m->mnt_slave)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			m = master;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (m == origin)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return NULL;
+}
 	}
 }
 
@@ -220,6 +259,7 @@ static struct hlist_head *list;
 
 static inline bool peers(struct mount *m1, struct mount *m2)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return m1->mnt_group_id == m2->mnt_group_id && m1->mnt_group_id;
 }
 
@@ -229,17 +269,26 @@ static int propagate_one(struct mount *m)
 	int type;
 	/* skip ones added by this propagate_mnt() */
 	if (IS_MNT_NEW(m))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	/* skip if mountpoint isn't covered by it */
 	if (!is_subdir(mp->m_dentry, m->mnt.mnt_root))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (peers(m, last_dest)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type = CL_MAKE_SHARED;
 	} else {
 		struct mount *n, *p;
 		bool done;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (n = m; ; n = p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p = n->mnt_master;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (p == dest_master || IS_MNT_MARKED(p))
 				break;
 		}
@@ -247,33 +296,48 @@ static int propagate_one(struct mount *m)
 			struct mount *parent = last_source->mnt_parent;
 			if (last_source == first_source)
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			done = parent->mnt_master == p;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (done && peers(n, parent))
 				break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			last_source = last_source->mnt_master;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (!done);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type = CL_SLAVE;
 		/* beginning of peer group among the slaves? */
 		if (IS_MNT_SHARED(m))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			type |= CL_MAKE_SHARED;
+}
 	}
 		
 	/* Notice when we are propagating across user namespaces */
 	if (m->mnt_ns->user_ns != user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		type |= CL_UNPRIVILEGED;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	child = copy_tree(last_source, last_source->mnt.mnt_root, type);
 	if (IS_ERR(child))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(child);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	child->mnt.mnt_flags &= ~MNT_LOCKED;
 	mnt_set_mountpoint(m, mp, child);
 	last_dest = m;
 	last_source = child;
 	if (m->mnt_master != dest_master) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		read_seqlock_excl(&mount_lock);
 		SET_MNT_MARK(m->mnt_master);
 		read_sequnlock_excl(&mount_lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_add_head(&child->mnt_hash, list);
 	return count_mounts(m->mnt_ns, child);
 }
@@ -323,19 +387,26 @@ int propagate_mnt(struct mount *dest_mnt, struct mountpoint *dest_mp,
 		/* everything in that slave group */
 		n = m;
 		do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = propagate_one(n);
 			if (ret)
 				goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			n = next_peer(n);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		} while (n != m);
 	}
 out:
 	read_seqlock_excl(&mount_lock);
 	hlist_for_each_entry(n, tree_list, mnt_hash) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		m = n->mnt_parent;
 		if (m->mnt_master != dest_mnt->mnt_master)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			CLEAR_MNT_MARK(m->mnt_master);
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_sequnlock_excl(&mount_lock);
 	return ret;
 }
@@ -346,7 +417,9 @@ static struct mount *find_topper(struct mount *mnt)
 	struct mount *child;
 
 	if (!list_is_singular(&mnt->mnt_mounts))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	child = list_first_entry(&mnt->mnt_mounts, struct mount, mnt_child);
 	if (child->mnt_mountpoint != mnt->mnt.mnt_root)
@@ -379,7 +452,9 @@ int propagate_mount_busy(struct mount *mnt, int refcnt)
 	struct mount *parent = mnt->mnt_parent;
 
 	if (mnt == parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return do_refcount_check(mnt, refcnt);
+}
 
 	/*
 	 * quickly check if the current mount can be unmounted.
@@ -387,7 +462,9 @@ int propagate_mount_busy(struct mount *mnt, int refcnt)
 	 * mounts
 	 */
 	if (!list_empty(&mnt->mnt_mounts) || do_refcount_check(mnt, refcnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	for (m = propagation_next(parent, parent); m;
 	     		m = propagation_next(m, parent)) {
@@ -401,13 +478,20 @@ int propagate_mount_busy(struct mount *mnt, int refcnt)
 		 */
 		topper = find_topper(child);
 		if (topper)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			count += 1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (!list_empty(&child->mnt_mounts))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (do_refcount_check(child, count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 1;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -427,12 +511,15 @@ void propagate_mount_unlock(struct mount *mnt)
 			m = propagation_next(m, parent)) {
 		child = __lookup_mnt(&m->mnt, mnt->mnt_mountpoint);
 		if (child)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			child->mnt.mnt_flags &= ~MNT_LOCKED;
+}
 	}
 }
 
 static void umount_one(struct mount *mnt, struct list_head *to_umount)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	CLEAR_MNT_MARK(mnt);
 	mnt->mnt.mnt_flags |= MNT_UMOUNT;
 	list_del_init(&mnt->mnt_child);
@@ -490,10 +577,13 @@ static void umount_list(struct list_head *to_umount,
 {
 	struct mount *mnt, *child, *tmp;
 	list_for_each_entry(mnt, to_umount, mnt_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_for_each_entry_safe(child, tmp, &mnt->mnt_mounts, mnt_child) {
 			/* topper? */
 			if (child->mnt_mountpoint == mnt->mnt.mnt_root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				list_move_tail(&child->mnt_umounting, to_restore);
+}
 			else
 				umount_one(child, to_umount);
 		}
@@ -507,6 +597,7 @@ static void restore_mounts(struct list_head *to_restore)
 		struct mount *mnt, *parent;
 		struct mountpoint *mp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mnt = list_first_entry(to_restore, struct mount, mnt_umounting);
 		CLEAR_MNT_MARK(mnt);
 		list_del_init(&mnt->mnt_umounting);
@@ -514,12 +605,17 @@ static void restore_mounts(struct list_head *to_restore)
 		/* Should this mount be reparented? */
 		mp = mnt->mnt_mp;
 		parent = mnt->mnt_parent;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (parent->mnt.mnt_flags & MNT_UMOUNT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mp = parent->mnt_mp;
 			parent = parent->mnt_parent;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (parent != mnt->mnt_parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mnt_change_mountpoint(parent, mp, mnt);
+}
 	}
 }
 
@@ -568,6 +664,7 @@ int propagate_umount(struct list_head *list)
 			if (!child)
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!list_empty(&child->mnt_umounting)) {
 				/*
 				 * If the child has already been visited it is
diff --git a/fs/pnode.h b/fs/pnode.h
index dc87e65..9504f08 100644
--- a/fs/pnode.h
+++ b/fs/pnode.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/pnode.h
  *
diff --git a/fs/posix_acl.c b/fs/posix_acl.c
index eebf5f6..37b2848 100644
--- a/fs/posix_acl.c
+++ b/fs/posix_acl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2002,2003 by Andreas Gruenbacher <a.gruenbacher@computer.org>
  *
@@ -40,14 +42,17 @@ struct posix_acl *get_cached_acl(struct inode *inode, int type)
 	struct posix_acl *acl;
 
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock();
 		acl = rcu_dereference(*p);
 		if (!acl || is_uncached_acl(acl) ||
 		    atomic_inc_not_zero(&acl->a_refcount))
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		cpu_relax();
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	return acl;
 }
@@ -74,6 +79,7 @@ static void __forget_cached_acl(struct posix_acl **p)
 {
 	struct posix_acl *old;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	old = xchg(p, ACL_NOT_CACHED);
 	if (!is_uncached_acl(old))
 		posix_acl_release(old);
@@ -81,12 +87,14 @@ static void __forget_cached_acl(struct posix_acl **p)
 
 void forget_cached_acl(struct inode *inode, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__forget_cached_acl(acl_by_type(inode, type));
 }
 EXPORT_SYMBOL(forget_cached_acl);
 
 void forget_all_cached_acls(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__forget_cached_acl(&inode->i_acl);
 	__forget_cached_acl(&inode->i_default_acl);
 }
@@ -106,11 +114,16 @@ struct posix_acl *get_acl(struct inode *inode, int type)
 
 	acl = get_cached_acl(inode, type);
 	if (!is_uncached_acl(acl))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return acl;
+}
 
 	if (!IS_POSIXACL(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sentinel = uncached_acl_sentinel(current);
 	p = acl_by_type(inode, type);
 
@@ -134,6 +147,7 @@ struct posix_acl *get_acl(struct inode *inode, int type)
 	 * just create the negative cache entry.
 	 */
 	if (!inode->i_op->get_acl) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_cached_acl(inode, type, NULL);
 		return NULL;
 	}
@@ -154,6 +168,7 @@ struct posix_acl *get_acl(struct inode *inode, int type)
 	posix_acl_dup(acl);
 	if (unlikely(cmpxchg(p, sentinel, acl) != sentinel))
 		posix_acl_release(acl);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return acl;
 }
 EXPORT_SYMBOL(get_acl);
@@ -164,6 +179,7 @@ EXPORT_SYMBOL(get_acl);
 void
 posix_acl_init(struct posix_acl *acl, int count)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&acl->a_refcount, 1);
 	acl->a_count = count;
 }
@@ -179,7 +195,9 @@ posix_acl_alloc(int count, gfp_t flags)
 	                    count * sizeof(struct posix_acl_entry);
 	struct posix_acl *acl = kmalloc(size, flags);
 	if (acl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		posix_acl_init(acl, count);
+}
 	return acl;
 }
 EXPORT_SYMBOL(posix_acl_alloc);
@@ -197,7 +215,9 @@ posix_acl_clone(const struct posix_acl *acl, gfp_t flags)
 		           sizeof(struct posix_acl_entry);
 		clone = kmemdup(acl, size, flags);
 		if (clone)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			atomic_set(&clone->a_refcount, 1);
+}
 	}
 	return clone;
 }
@@ -212,6 +232,7 @@ posix_acl_valid(struct user_namespace *user_ns, const struct posix_acl *acl)
 	int state = ACL_USER_OBJ;
 	int needs_mask = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	FOREACH_ACL_ENTRY(pa, acl, pe) {
 		if (pa->e_perm & ~(ACL_READ|ACL_WRITE|ACL_EXECUTE))
 			return -EINVAL;
@@ -285,7 +306,9 @@ posix_acl_equiv_mode(const struct posix_acl *acl, umode_t *mode_p)
 	 * A null ACL can always be presented as mode bits.
 	 */
 	if (!acl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	FOREACH_ACL_ENTRY(pa, acl, pe) {
 		switch (pa->e_tag) {
@@ -323,6 +346,7 @@ EXPORT_SYMBOL(posix_acl_equiv_mode);
 struct posix_acl *
 posix_acl_from_mode(umode_t mode, gfp_t flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct posix_acl *acl = posix_acl_alloc(3, flags);
 	if (!acl)
 		return ERR_PTR(-ENOMEM);
@@ -351,6 +375,7 @@ posix_acl_permission(struct inode *inode, const struct posix_acl *acl, int want)
 
 	want &= MAY_READ | MAY_WRITE | MAY_EXEC | MAY_NOT_BLOCK;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	FOREACH_ACL_ENTRY(pa, acl, pe) {
                 switch(pa->e_tag) {
                         case ACL_USER_OBJ:
@@ -421,6 +446,7 @@ static int posix_acl_create_masq(struct posix_acl *acl, umode_t *mode_p)
 
 	/* assert(atomic_read(acl->a_refcount) == 1); */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	FOREACH_ACL_ENTRY(pa, acl, pe) {
                 switch(pa->e_tag) {
                         case ACL_USER_OBJ:
@@ -476,6 +502,7 @@ static int __posix_acl_chmod_masq(struct posix_acl *acl, umode_t mode)
 
 	/* assert(atomic_read(acl->a_refcount) == 1); */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	FOREACH_ACL_ENTRY(pa, acl, pe) {
 		switch(pa->e_tag) {
 			case ACL_USER_OBJ:
@@ -517,6 +544,7 @@ static int __posix_acl_chmod_masq(struct posix_acl *acl, umode_t mode)
 int
 __posix_acl_create(struct posix_acl **acl, gfp_t gfp, umode_t *mode_p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct posix_acl *clone = posix_acl_clone(*acl, gfp);
 	int err = -ENOMEM;
 	if (clone) {
@@ -535,6 +563,7 @@ EXPORT_SYMBOL(__posix_acl_create);
 int
 __posix_acl_chmod(struct posix_acl **acl, gfp_t gfp, umode_t mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct posix_acl *clone = posix_acl_clone(*acl, gfp);
 	int err = -ENOMEM;
 	if (clone) {
@@ -557,20 +586,34 @@ posix_acl_chmod(struct inode *inode, umode_t mode)
 	int ret = 0;
 
 	if (!IS_POSIXACL(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!inode->i_op->set_acl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	acl = get_acl(inode, ACL_TYPE_ACCESS);
 	if (IS_ERR_OR_NULL(acl)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (acl == ERR_PTR(-EOPNOTSUPP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(acl);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = __posix_acl_chmod(&acl, GFP_KERNEL, mode);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = inode->i_op->set_acl(inode, acl, ACL_TYPE_ACCESS);
 	posix_acl_release(acl);
 	return ret;
@@ -589,35 +632,49 @@ posix_acl_create(struct inode *dir, umode_t *mode,
 	*default_acl = NULL;
 
 	if (S_ISLNK(*mode) || !IS_POSIXACL(dir))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	p = get_acl(dir, ACL_TYPE_DEFAULT);
 	if (!p || p == ERR_PTR(-EOPNOTSUPP)) {
 		*mode &= ~current_umask();
 		return 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (IS_ERR(p))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(p);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -ENOMEM;
 	clone = posix_acl_clone(p, GFP_NOFS);
 	if (!clone)
 		goto err_release;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = posix_acl_create_masq(clone, mode);
 	if (ret < 0)
 		goto err_release_clone;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ret == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		posix_acl_release(clone);
+}
 	else
 		*acl = clone;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!S_ISDIR(*mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		posix_acl_release(p);
+}
 	else
 		*default_acl = p;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err_release_clone:
@@ -648,7 +705,9 @@ int posix_acl_update_mode(struct inode *inode, umode_t *mode_p,
 
 	error = posix_acl_equiv_mode(*acl, &mode);
 	if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	if (error == 0)
 		*acl = NULL;
 	if (!in_group_p(inode->i_gid) &&
@@ -673,7 +732,9 @@ static void posix_acl_fix_xattr_userns(
 	kgid_t gid;
 
 	if (!value)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	if (size < sizeof(struct posix_acl_xattr_header))
 		return;
 	if (header->a_version != cpu_to_le32(POSIX_ACL_XATTR_VERSION))
@@ -703,6 +764,7 @@ static void posix_acl_fix_xattr_userns(
 
 void posix_acl_fix_xattr_from_user(void *value, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct user_namespace *user_ns = current_user_ns();
 	if (user_ns == &init_user_ns)
 		return;
@@ -711,6 +773,7 @@ void posix_acl_fix_xattr_from_user(void *value, size_t size)
 
 void posix_acl_fix_xattr_to_user(void *value, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct user_namespace *user_ns = current_user_ns();
 	if (user_ns == &init_user_ns)
 		return;
@@ -731,7 +794,9 @@ posix_acl_from_xattr(struct user_namespace *user_ns,
 	struct posix_acl_entry *acl_e;
 
 	if (!value)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	if (size < sizeof(struct posix_acl_xattr_header))
 		 return ERR_PTR(-EINVAL);
 	if (header->a_version != cpu_to_le32(POSIX_ACL_XATTR_VERSION))
@@ -799,7 +864,9 @@ posix_acl_to_xattr(struct user_namespace *user_ns, const struct posix_acl *acl,
 
 	real_size = posix_acl_xattr_size(acl->a_count);
 	if (!buffer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return real_size;
+}
 	if (real_size > size)
 		return -ERANGE;
 
@@ -837,7 +904,9 @@ posix_acl_xattr_get(const struct xattr_handler *handler,
 	int error;
 
 	if (!IS_POSIXACL(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 	if (S_ISLNK(inode->i_mode))
 		return -EOPNOTSUPP;
 
@@ -856,6 +925,7 @@ posix_acl_xattr_get(const struct xattr_handler *handler,
 int
 set_posix_acl(struct inode *inode, int type, struct posix_acl *acl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!IS_POSIXACL(inode))
 		return -EOPNOTSUPP;
 	if (!inode->i_op->set_acl)
@@ -885,6 +955,7 @@ posix_acl_xattr_set(const struct xattr_handler *handler,
 	int ret;
 
 	if (value) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		acl = posix_acl_from_xattr(&init_user_ns, value, size);
 		if (IS_ERR(acl))
 			return PTR_ERR(acl);
@@ -897,6 +968,7 @@ posix_acl_xattr_set(const struct xattr_handler *handler,
 static bool
 posix_acl_xattr_list(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return IS_POSIXACL(d_backing_inode(dentry));
 }
 
@@ -923,6 +995,7 @@ int simple_set_acl(struct inode *inode, struct posix_acl *acl, int type)
 	int error;
 
 	if (type == ACL_TYPE_ACCESS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = posix_acl_update_mode(inode,
 				&inode->i_mode, &acl);
 		if (error)
@@ -941,14 +1014,21 @@ int simple_acl_create(struct inode *dir, struct inode *inode)
 
 	error = posix_acl_create(dir, &inode->i_mode, &default_acl, &acl);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	set_cached_acl(inode, ACL_TYPE_DEFAULT, default_acl);
 	set_cached_acl(inode, ACL_TYPE_ACCESS, acl);
 
 	if (default_acl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		posix_acl_release(default_acl);
+}
 	if (acl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		posix_acl_release(acl);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
diff --git a/fs/proc/array.c b/fs/proc/array.c
index e6094a1..103bf7a 100644
--- a/fs/proc/array.c
+++ b/fs/proc/array.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/proc/array.c
@@ -137,6 +139,7 @@ static const char * const task_state_array[] = {
 
 static inline const char *get_task_state(struct task_struct *tsk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(1 + ilog2(TASK_REPORT_MAX) != ARRAY_SIZE(task_state_array));
 	return task_state_array[__get_task_state(tsk)];
 }
@@ -150,6 +153,7 @@ static inline int get_task_umask(struct task_struct *tsk)
 	fs = tsk->fs;
 	if (fs)
 		umask = fs->umask;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	task_unlock(tsk);
 	return umask;
 }
@@ -157,6 +161,7 @@ static inline int get_task_umask(struct task_struct *tsk)
 static inline void task_state(struct seq_file *m, struct pid_namespace *ns,
 				struct pid *pid, struct task_struct *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct user_namespace *user_ns = seq_user_ns(m);
 	struct group_info *group_info;
 	int g, umask;
@@ -166,12 +171,15 @@ static inline void task_state(struct seq_file *m, struct pid_namespace *ns,
 	unsigned int max_fds = 0;
 
 	rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ppid = pid_alive(p) ?
 		task_tgid_nr_ns(rcu_dereference(p->real_parent), ns) : 0;
 
 	tracer = ptrace_parent(p);
 	if (tracer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tpid = task_pid_nr_ns(tracer, ns);
+}
 
 	tgid = task_tgid_nr_ns(p, ns);
 	ngid = task_numa_group_id(p);
@@ -181,9 +189,11 @@ static inline void task_state(struct seq_file *m, struct pid_namespace *ns,
 	if (umask >= 0)
 		seq_printf(m, "Umask:\t%#04o\n", umask);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	task_lock(p);
 	if (p->files)
 		max_fds = files_fdtable(p->files)->max_fds;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	task_unlock(p);
 	rcu_read_unlock();
 
@@ -424,7 +434,9 @@ static int do_task_stat(struct seq_file *m, struct pid_namespace *ns,
 		 * safe because the task has stopped executing permanently.
 		 */
 		if (permitted && (task->flags & PF_DUMPCORE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (try_get_task_stack(task)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				eip = KSTK_EIP(task);
 				esp = KSTK_ESP(task);
 				put_task_stack(task);
@@ -449,6 +461,7 @@ static int do_task_stat(struct seq_file *m, struct pid_namespace *ns,
 			tty_nr = new_encode_dev(tty_devnum(sig->tty));
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		num_threads = get_nr_threads(task);
 		collect_sigign_sigcatch(task, &sigign, &sigcatch);
 
@@ -484,6 +497,7 @@ static int do_task_stat(struct seq_file *m, struct pid_namespace *ns,
 	if (permitted && (!whole || num_threads < 2))
 		wchan = get_wchan(task);
 	if (!whole) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		min_flt = task->min_flt;
 		maj_flt = task->maj_flt;
 		task_cputime_adjusted(task, &utime, &stime);
@@ -543,7 +557,9 @@ static int do_task_stat(struct seq_file *m, struct pid_namespace *ns,
 	 * This works with older implementations of procps as well.
 	 */
 	if (wchan)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_puts(m, " 1");
+}
 	else
 		seq_puts(m, " 0");
 
@@ -582,6 +598,7 @@ static int do_task_stat(struct seq_file *m, struct pid_namespace *ns,
 int proc_tid_stat(struct seq_file *m, struct pid_namespace *ns,
 			struct pid *pid, struct task_struct *task)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_task_stat(m, ns, pid, task, 0);
 }
 
diff --git a/fs/proc/base.c b/fs/proc/base.c
index 9d357b2..7548a96 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/proc/base.c
@@ -169,6 +171,7 @@ static int get_task_root(struct task_struct *task, struct path *root)
 
 	task_lock(task);
 	if (task->fs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		get_fs_root(task->fs, root);
 		result = 0;
 	}
@@ -178,6 +181,7 @@ static int get_task_root(struct task_struct *task, struct path *root)
 
 static int proc_cwd_link(struct dentry *dentry, struct path *path)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct task_struct *task = get_proc_task(d_inode(dentry));
 	int result = -ENOENT;
 
@@ -195,6 +199,7 @@ static int proc_cwd_link(struct dentry *dentry, struct path *path)
 
 static int proc_root_link(struct dentry *dentry, struct path *path)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct task_struct *task = get_proc_task(d_inode(dentry));
 	int result = -ENOENT;
 
@@ -222,19 +227,25 @@ static ssize_t proc_pid_cmdline_read(struct file *file, char __user *buf,
 
 	tsk = get_proc_task(file_inode(file));
 	if (!tsk)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
 	mm = get_task_mm(tsk);
 	put_task_struct(tsk);
 	if (!mm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	/* Check if process spawned far enough to have cmdline. */
 	if (!mm->env_end) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rv = 0;
 		goto out_mmput;
 	}
 
 	page = (char *)__get_free_page(GFP_KERNEL);
 	if (!page) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rv = -ENOMEM;
 		goto out_mmput;
 	}
@@ -254,6 +265,7 @@ static ssize_t proc_pid_cmdline_read(struct file *file, char __user *buf,
 
 	/* Empty ARGV. */
 	if (len1 == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rv = 0;
 		goto out_free_page;
 	}
@@ -265,6 +277,7 @@ static ssize_t proc_pid_cmdline_read(struct file *file, char __user *buf,
 	if (rv <= 0)
 		goto out_free_page;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rv = 0;
 
 	if (c == '\0') {
@@ -281,11 +294,14 @@ static ssize_t proc_pid_cmdline_read(struct file *file, char __user *buf,
 			_count = min3(count, len, PAGE_SIZE);
 			nr_read = access_remote_vm(mm, p, page, _count, 0);
 			if (nr_read < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rv = nr_read;
+}
 			if (nr_read <= 0)
 				goto out_free_page;
 
 			if (copy_to_user(buf, page, nr_read)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				rv = -EFAULT;
 				goto out_free_page;
 			}
@@ -327,7 +343,9 @@ static ssize_t proc_pid_cmdline_read(struct file *file, char __user *buf,
 				_count = min3(count, len, PAGE_SIZE);
 				nr_read = access_remote_vm(mm, p, page, _count, 0);
 				if (nr_read < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					rv = nr_read;
+}
 				if (nr_read <= 0)
 					goto out_free_page;
 
@@ -343,6 +361,7 @@ static ssize_t proc_pid_cmdline_read(struct file *file, char __user *buf,
 				}
 
 				if (copy_to_user(buf, page, nr_read)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					rv = -EFAULT;
 					goto out_free_page;
 				}
@@ -369,6 +388,7 @@ static ssize_t proc_pid_cmdline_read(struct file *file, char __user *buf,
 	mmput(mm);
 	if (rv > 0)
 		*pos += rv;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rv;
 }
 
@@ -390,6 +410,7 @@ static int proc_pid_wchan(struct seq_file *m, struct pid_namespace *ns,
 
 	wchan = get_wchan(task);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (wchan && ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS)
 			&& !lookup_symbol_name(wchan, symname))
 		seq_printf(m, "%s", symname);
@@ -402,6 +423,7 @@ static int proc_pid_wchan(struct seq_file *m, struct pid_namespace *ns,
 
 static int lock_trace(struct task_struct *task)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int err = mutex_lock_killable(&task->signal->cred_guard_mutex);
 	if (err)
 		return err;
@@ -414,6 +436,7 @@ static int lock_trace(struct task_struct *task)
 
 static void unlock_trace(struct task_struct *task)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_unlock(&task->signal->cred_guard_mutex);
 }
 
@@ -431,7 +454,9 @@ static int proc_pid_stack(struct seq_file *m, struct pid_namespace *ns,
 
 	entries = kmalloc(MAX_STACK_TRACE_DEPTH * sizeof(*entries), GFP_KERNEL);
 	if (!entries)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	trace.nr_entries	= 0;
 	trace.max_entries	= MAX_STACK_TRACE_DEPTH;
@@ -461,6 +486,7 @@ static int proc_pid_stack(struct seq_file *m, struct pid_namespace *ns,
 static int proc_pid_schedstat(struct seq_file *m, struct pid_namespace *ns,
 			      struct pid *pid, struct task_struct *task)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(!sched_info_on()))
 		seq_printf(m, "0 0 0\n");
 	else
@@ -580,7 +606,9 @@ static int proc_pid_limits(struct seq_file *m, struct pid_namespace *ns,
 	struct rlimit rlim[RLIM_NLIMITS];
 
 	if (!lock_task_sighand(task, &flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	memcpy(rlim, task->signal->rlim, sizeof(struct rlimit) * RLIM_NLIMITS);
 	unlock_task_sighand(task, &flags);
 
@@ -622,7 +650,9 @@ static int proc_pid_syscall(struct seq_file *m, struct pid_namespace *ns,
 
 	res = lock_trace(task);
 	if (res)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return res;
+}
 
 	if (task_current_syscall(task, &nr, args, 6, &sp, &pc))
 		seq_puts(m, "running\n");
@@ -667,11 +697,15 @@ int proc_setattr(struct dentry *dentry, struct iattr *attr)
 	struct inode *inode = d_inode(dentry);
 
 	if (attr->ia_valid & ATTR_MODE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	error = setattr_prepare(dentry, attr);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	setattr_copy(inode, attr);
 	mark_inode_dirty(inode);
@@ -687,9 +721,15 @@ static bool has_pid_permissions(struct pid_namespace *pid,
 				 int hide_pid_min)
 {
 	if (pid->hide_pid < hide_pid_min)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (in_group_p(pid->pid_gid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS);
 }
 
@@ -702,11 +742,14 @@ static int proc_pid_permission(struct inode *inode, int mask)
 
 	task = get_proc_task(inode);
 	if (!task)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
 	has_perms = has_pid_permissions(pid, task, HIDEPID_NO_ACCESS);
 	put_task_struct(task);
 
 	if (!has_perms) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pid->hide_pid == HIDEPID_INVISIBLE) {
 			/*
 			 * Let's make getdents(), stat(), and open()
@@ -717,6 +760,7 @@ static int proc_pid_permission(struct inode *inode, int mask)
 			return -ENOENT;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
 	}
 	return generic_permission(inode, mask);
@@ -740,7 +784,9 @@ static int proc_single_show(struct seq_file *m, void *v)
 	pid = proc_pid(inode);
 	task = get_pid_task(pid, PIDTYPE_PID);
 	if (!task)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
 
 	ret = PROC_I(inode)->op.proc_show(m, ns, pid, task);
 
@@ -786,7 +832,9 @@ static int __mem_open(struct inode *inode, struct file *file, unsigned int mode)
 	struct mm_struct *mm = proc_mem_open(inode, mode);
 
 	if (IS_ERR(mm))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(mm);
+}
 
 	file->private_data = mm;
 	return 0;
@@ -812,12 +860,17 @@ static ssize_t mem_rw(struct file *file, char __user *buf,
 	unsigned int flags;
 
 	if (!mm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	page = (char *)__get_free_page(GFP_KERNEL);
 	if (!page)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	copied = 0;
 	if (!mmget_not_zero(mm))
 		goto free;
@@ -828,18 +881,23 @@ static ssize_t mem_rw(struct file *file, char __user *buf,
 		int this_len = min_t(int, count, PAGE_SIZE);
 
 		if (write && copy_from_user(page, buf, this_len)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copied = -EFAULT;
 			break;
 		}
 
 		this_len = access_remote_vm(mm, addr, page, this_len, flags);
 		if (!this_len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!copied)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				copied = -EIO;
+}
 			break;
 		}
 
 		if (!write && copy_to_user(buf, page, this_len)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			copied = -EFAULT;
 			break;
 		}
@@ -860,6 +918,7 @@ static ssize_t mem_rw(struct file *file, char __user *buf,
 static ssize_t mem_read(struct file *file, char __user *buf,
 			size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mem_rw(file, buf, count, ppos, 0);
 }
 
@@ -871,6 +930,7 @@ static ssize_t mem_write(struct file *file, const char __user *buf,
 
 loff_t mem_lseek(struct file *file, loff_t offset, int orig)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (orig) {
 	case 0:
 		file->f_pos = offset;
@@ -917,12 +977,17 @@ static ssize_t environ_read(struct file *file, char __user *buf,
 
 	/* Ensure the process spawned far enough to have an environment. */
 	if (!mm || !mm->env_end)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	page = (char *)__get_free_page(GFP_KERNEL);
 	if (!page)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = 0;
 	if (!mmget_not_zero(mm))
 		goto free;
@@ -947,11 +1012,13 @@ static ssize_t environ_read(struct file *file, char __user *buf,
 		retval = access_remote_vm(mm, (env_start + src), page, this_len, 0);
 
 		if (retval <= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = retval;
 			break;
 		}
 
 		if (copy_to_user(buf, page, retval)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EFAULT;
 			break;
 		}
@@ -988,7 +1055,9 @@ static ssize_t auxv_read(struct file *file, char __user *buf,
 	unsigned int nwords = 0;
 
 	if (!mm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	do {
 		nwords += 2;
 	} while (mm->saved_auxv[nwords - 2] != 0); /* AT_NULL */
@@ -1006,6 +1075,7 @@ static const struct file_operations proc_auxv_operations = {
 static ssize_t oom_adj_read(struct file *file, char __user *buf, size_t count,
 			    loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct task_struct *task = get_proc_task(file_inode(file));
 	char buffer[PROC_NUMBUF];
 	int oom_adj = OOM_ADJUST_MIN;
@@ -1032,12 +1102,16 @@ static int __set_oom_adj(struct file *file, int oom_adj, bool legacy)
 
 	task = get_proc_task(file_inode(file));
 	if (!task)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
 
 	mutex_lock(&oom_adj_mutex);
 	if (legacy) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (oom_adj < task->signal->oom_score_adj &&
 				!capable(CAP_SYS_RESOURCE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EACCES;
 			goto err_unlock;
 		}
@@ -1051,6 +1125,7 @@ static int __set_oom_adj(struct file *file, int oom_adj, bool legacy)
 	} else {
 		if ((short)oom_adj < task->signal->oom_score_adj_min &&
 				!capable(CAP_SYS_RESOURCE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EACCES;
 			goto err_unlock;
 		}
@@ -1066,9 +1141,11 @@ static int __set_oom_adj(struct file *file, int oom_adj, bool legacy)
 
 		if (p) {
 			if (atomic_read(&p->mm->mm_users) > 1) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				mm = p->mm;
 				mmgrab(mm);
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			task_unlock(p);
 		}
 	}
@@ -1082,7 +1159,9 @@ static int __set_oom_adj(struct file *file, int oom_adj, bool legacy)
 		struct task_struct *p;
 
 		rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_process(p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (same_thread_group(task, p))
 				continue;
 
@@ -1090,18 +1169,26 @@ static int __set_oom_adj(struct file *file, int oom_adj, bool legacy)
 			if (p->flags & PF_KTHREAD || is_global_init(p))
 				continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			task_lock(p);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!p->vfork_done && process_shares_mm(p, mm)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pr_info("updating oom_score_adj for %d (%s) from %d to %d because it shares mm with %d (%s). Report if this is unexpected.\n",
 						task_pid_nr(p), p->comm,
 						p->signal->oom_score_adj, oom_adj,
 						task_pid_nr(task), task->comm);
 				p->signal->oom_score_adj = oom_adj;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!legacy && has_capability_noaudit(current, CAP_SYS_RESOURCE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					p->signal->oom_score_adj_min = (short)oom_adj;
+}
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			task_unlock(p);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 		mmdrop(mm);
 	}
@@ -1130,7 +1217,9 @@ static ssize_t oom_adj_write(struct file *file, const char __user *buf,
 
 	memset(buffer, 0, sizeof(buffer));
 	if (count > sizeof(buffer) - 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = sizeof(buffer) - 1;
+}
 	if (copy_from_user(buffer, buf, count)) {
 		err = -EFAULT;
 		goto out;
@@ -1174,7 +1263,9 @@ static ssize_t oom_score_adj_read(struct file *file, char __user *buf,
 	size_t len;
 
 	if (!task)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
 	oom_score_adj = task->signal->oom_score_adj;
 	put_task_struct(task);
 	len = snprintf(buffer, sizeof(buffer), "%hd\n", oom_score_adj);
@@ -1190,8 +1281,11 @@ static ssize_t oom_score_adj_write(struct file *file, const char __user *buf,
 
 	memset(buffer, 0, sizeof(buffer));
 	if (count > sizeof(buffer) - 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = sizeof(buffer) - 1;
+}
 	if (copy_from_user(buffer, buf, count)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EFAULT;
 		goto out;
 	}
@@ -1201,6 +1295,7 @@ static ssize_t oom_score_adj_write(struct file *file, const char __user *buf,
 		goto out;
 	if (oom_score_adj < OOM_SCORE_ADJ_MIN ||
 			oom_score_adj > OOM_SCORE_ADJ_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EINVAL;
 		goto out;
 	}
@@ -1221,6 +1316,7 @@ static const struct file_operations proc_oom_score_adj_operations = {
 static ssize_t proc_loginuid_read(struct file * file, char __user * buf,
 				  size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode * inode = file_inode(file);
 	struct task_struct *task = get_proc_task(inode);
 	ssize_t length;
@@ -1238,6 +1334,7 @@ static ssize_t proc_loginuid_read(struct file * file, char __user * buf,
 static ssize_t proc_loginuid_write(struct file * file, const char __user * buf,
 				   size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode * inode = file_inode(file);
 	uid_t loginuid;
 	kuid_t kloginuid;
@@ -1283,6 +1380,7 @@ static const struct file_operations proc_loginuid_operations = {
 static ssize_t proc_sessionid_read(struct file * file, char __user * buf,
 				  size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode * inode = file_inode(file);
 	struct task_struct *task = get_proc_task(inode);
 	ssize_t length;
@@ -1532,6 +1630,7 @@ static const struct file_operations proc_pid_sched_autogroup_operations = {
 static ssize_t comm_write(struct file *file, const char __user *buf,
 				size_t count, loff_t *offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	struct task_struct *p;
 	char buffer[TASK_COMM_LEN];
@@ -1543,7 +1642,9 @@ static ssize_t comm_write(struct file *file, const char __user *buf,
 
 	p = get_proc_task(inode);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
 
 	if (same_thread_group(current, p))
 		set_task_comm(p, buffer);
@@ -1562,7 +1663,9 @@ static int comm_show(struct seq_file *m, void *v)
 
 	p = get_proc_task(inode);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
 
 	task_lock(p);
 	seq_printf(m, "%s\n", p->comm);
@@ -1593,7 +1696,9 @@ static int proc_exe_link(struct dentry *dentry, struct path *exe_path)
 
 	task = get_proc_task(d_inode(dentry));
 	if (!task)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 	exe_file = get_task_exe_file(task);
 	put_task_struct(task);
 	if (exe_file) {
@@ -1602,8 +1707,10 @@ static int proc_exe_link(struct dentry *dentry, struct path *exe_path)
 		fput(exe_file);
 		return 0;
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
 }
+}
 
 static const char *proc_pid_get_link(struct dentry *dentry,
 				     struct inode *inode,
@@ -1613,7 +1720,9 @@ static const char *proc_pid_get_link(struct dentry *dentry,
 	int error = -EACCES;
 
 	if (!dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ECHILD);
+}
 
 	/* Are we allowed to snoop on the tasks file descriptors? */
 	if (!proc_fd_access_allowed(inode))
@@ -1636,7 +1745,9 @@ static int do_proc_readlink(struct path *path, char __user *buffer, int buflen)
 	int len;
 
 	if (!tmp)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	pathname = d_path(path, tmp, PAGE_SIZE);
 	len = PTR_ERR(pathname);
@@ -1645,9 +1756,13 @@ static int do_proc_readlink(struct path *path, char __user *buffer, int buflen)
 	len = tmp + PAGE_SIZE - 1 - pathname;
 
 	if (len > buflen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = buflen;
+}
 	if (copy_to_user(buffer, pathname, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = -EFAULT;
+}
  out:
 	free_page((unsigned long)tmp);
 	return len;
@@ -1718,16 +1833,22 @@ void task_dump_owner(struct task_struct *task, mode_t mode,
 
 				uid = make_kuid(user_ns, 0);
 				if (!uid_valid(uid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					uid = GLOBAL_ROOT_UID;
+}
 
 				gid = make_kgid(user_ns, 0);
 				if (!gid_valid(gid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					gid = GLOBAL_ROOT_GID;
+}
 			}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uid = GLOBAL_ROOT_UID;
 			gid = GLOBAL_ROOT_GID;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		task_unlock(task);
 	}
 	*ruid = uid;
@@ -1786,6 +1907,7 @@ int pid_getattr(const struct path *path, struct kstat *stat,
 	task = pid_task(proc_pid(inode), PIDTYPE_PID);
 	if (task) {
 		if (!has_pid_permissions(pid, task, HIDEPID_INVISIBLE)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock();
 			/*
 			 * This doesn't prevent learning whether PID exists,
@@ -1795,6 +1917,7 @@ int pid_getattr(const struct path *path, struct kstat *stat,
 		}
 		task_dump_owner(task, inode->i_mode, &stat->uid, &stat->gid);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	return 0;
 }
@@ -1816,8 +1939,11 @@ int pid_revalidate(struct dentry *dentry, unsigned int flags)
 	struct task_struct *task;
 
 	if (flags & LOOKUP_RCU)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ECHILD;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode = d_inode(dentry);
 	task = get_proc_task(inode);
 
@@ -1829,6 +1955,7 @@ int pid_revalidate(struct dentry *dentry, unsigned int flags)
 		put_task_struct(task);
 		return 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1886,11 +2013,13 @@ bool proc_fill_cache(struct file *file, struct dir_context *ctx,
 			int err = instantiate(d_inode(dir), child, task, ptr);
 			d_lookup_done(child);
 			if (err < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				dput(child);
 				goto end_instantiate;
 			}
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode = d_inode(child);
 	ino = inode->i_ino;
 	type = inode->i_mode >> 12;
@@ -1908,6 +2037,7 @@ bool proc_fill_cache(struct file *file, struct dir_context *ctx,
 static int dname_to_vma_addr(struct dentry *dentry,
 			     unsigned long *start, unsigned long *end)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sscanf(dentry->d_name.name, "%lx-%lx", start, end) != 2)
 		return -EINVAL;
 
@@ -1924,7 +2054,9 @@ static int map_files_d_revalidate(struct dentry *dentry, unsigned int flags)
 	int status = 0;
 
 	if (flags & LOOKUP_RCU)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ECHILD;
+}
 
 	inode = d_inode(dentry);
 	task = get_proc_task(inode);
@@ -1975,6 +2107,7 @@ static int map_files_get_link(struct dentry *dentry, struct path *path)
 	if (!task)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mm = get_task_mm(task);
 	put_task_struct(task);
 	if (!mm)
@@ -2016,6 +2149,7 @@ proc_map_files_get_link(struct dentry *dentry,
 			struct inode *inode,
 		        struct delayed_call *done)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!capable(CAP_SYS_ADMIN))
 		return ERR_PTR(-EPERM);
 
@@ -2071,6 +2205,7 @@ static struct dentry *proc_map_files_lookup(struct inode *dir,
 	if (!task)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	result = -EACCES;
 	if (!ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS))
 		goto out_put_task;
@@ -2124,6 +2259,7 @@ proc_map_files_readdir(struct file *file, struct dir_context *ctx)
 	if (!task)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -EACCES;
 	if (!ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS))
 		goto out_put_task;
@@ -2313,6 +2449,7 @@ static const struct file_operations proc_timers_operations = {
 static ssize_t timerslack_ns_write(struct file *file, const char __user *buf,
 					size_t count, loff_t *offset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	struct task_struct *p;
 	u64 slack_ns;
@@ -2360,7 +2497,9 @@ static int timerslack_ns_show(struct seq_file *m, void *v)
 
 	p = get_proc_task(inode);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
 
 	if (p != current) {
 
@@ -2385,6 +2524,7 @@ static int timerslack_ns_show(struct seq_file *m, void *v)
 
 static int timerslack_ns_open(struct inode *inode, struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(filp, timerslack_ns_show, inode);
 }
 
@@ -2407,6 +2547,7 @@ static int proc_pident_instantiate(struct inode *dir,
 	if (!inode)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ei = PROC_I(inode);
 	if (S_ISDIR(inode->i_mode))
 		set_nlink(inode, 2);	/* Use getattr to fix if necessary */
@@ -2419,7 +2560,9 @@ static int proc_pident_instantiate(struct inode *dir,
 	d_add(dentry, inode);
 	/* Close the race of the process dying before we return the dentry */
 	if (pid_revalidate(dentry, 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 out:
 	return -ENOENT;
 }
@@ -2466,7 +2609,9 @@ static int proc_pident_readdir(struct file *file, struct dir_context *ctx,
 	const struct pid_entry *p;
 
 	if (!task)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	if (!dir_emit_dots(file, ctx))
 		goto out;
@@ -2489,6 +2634,7 @@ static int proc_pident_readdir(struct file *file, struct dir_context *ctx,
 static ssize_t proc_pid_attr_read(struct file * file, char __user * buf,
 				  size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode * inode = file_inode(file);
 	char *p = NULL;
 	ssize_t length;
@@ -2510,6 +2656,7 @@ static ssize_t proc_pid_attr_read(struct file * file, char __user * buf,
 static ssize_t proc_pid_attr_write(struct file * file, const char __user * buf,
 				   size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode * inode = file_inode(file);
 	void *page;
 	ssize_t length;
@@ -2571,6 +2718,7 @@ static const struct pid_entry attr_dir_stuff[] = {
 
 static int proc_attr_dir_readdir(struct file *file, struct dir_context *ctx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return proc_pident_readdir(file, ctx, 
 				   attr_dir_stuff, ARRAY_SIZE(attr_dir_stuff));
 }
@@ -2584,6 +2732,7 @@ static const struct file_operations proc_attr_dir_operations = {
 static struct dentry *proc_attr_dir_lookup(struct inode *dir,
 				struct dentry *dentry, unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return proc_pident_lookup(dir, dentry,
 				  attr_dir_stuff, ARRAY_SIZE(attr_dir_stuff));
 }
@@ -2600,6 +2749,7 @@ static const struct inode_operations proc_attr_dir_inode_operations = {
 static ssize_t proc_coredump_filter_read(struct file *file, char __user *buf,
 					 size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct task_struct *task = get_proc_task(file_inode(file));
 	struct mm_struct *mm;
 	char buffer[PROC_NUMBUF];
@@ -2638,8 +2788,11 @@ static ssize_t proc_coredump_filter_write(struct file *file,
 
 	ret = kstrtouint_from_user(buf, count, 0, &val);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -ESRCH;
 	task = get_proc_task(file_inode(file));
 	if (!task)
@@ -2648,6 +2801,7 @@ static ssize_t proc_coredump_filter_write(struct file *file,
 	mm = get_task_mm(task);
 	if (!mm)
 		goto out_no_mm;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = 0;
 
 	for (i = 0, mask = 1; i < MMF_DUMP_FILTER_BITS; i++, mask <<= 1) {
@@ -2662,7 +2816,9 @@ static ssize_t proc_coredump_filter_write(struct file *file,
 	put_task_struct(task);
  out_no_task:
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return count;
 }
 
@@ -2682,7 +2838,9 @@ static int do_io_accounting(struct task_struct *task, struct seq_file *m, int wh
 
 	result = mutex_lock_killable(&task->signal->cred_guard_mutex);
 	if (result)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return result;
+}
 
 	if (!ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS)) {
 		result = -EACCES;
@@ -2723,12 +2881,14 @@ static int do_io_accounting(struct task_struct *task, struct seq_file *m, int wh
 static int proc_tid_io_accounting(struct seq_file *m, struct pid_namespace *ns,
 				  struct pid *pid, struct task_struct *task)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_io_accounting(task, m, 0);
 }
 
 static int proc_tgid_io_accounting(struct seq_file *m, struct pid_namespace *ns,
 				   struct pid *pid, struct task_struct *task)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_io_accounting(task, m, 1);
 }
 #endif /* CONFIG_TASK_IO_ACCOUNTING */
@@ -2868,6 +3028,7 @@ static const struct file_operations proc_setgroups_operations = {
 static int proc_pid_personality(struct seq_file *m, struct pid_namespace *ns,
 				struct pid *pid, struct task_struct *task)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int err = lock_trace(task);
 	if (!err) {
 		seq_printf(m, "%08x\n", task->personality);
@@ -3032,7 +3193,9 @@ static void proc_flush_task_mnt(struct vfsmount *mnt, pid_t pid, pid_t tgid)
 	}
 
 	if (pid == tgid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	name.name = buf;
 	name.len = snprintf(buf, sizeof(buf), "%d", tgid);
@@ -3096,6 +3259,7 @@ void proc_flush_task(struct task_struct *task)
 	tgid = task_tgid(task);
 
 	for (i = 0; i <= pid->level; i++) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		upid = &pid->numbers[i];
 		proc_flush_task_mnt(upid->ns->proc_mnt, upid->nr,
 					tgid->numbers[i].nr);
@@ -3123,7 +3287,9 @@ static int proc_pid_instantiate(struct inode *dir,
 	d_add(dentry, inode);
 	/* Close the race of the process dying before we return the dentry */
 	if (pid_revalidate(dentry, 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 out:
 	return -ENOENT;
 }
@@ -3144,6 +3310,7 @@ struct dentry *proc_pid_lookup(struct inode *dir, struct dentry * dentry, unsign
 	task = find_task_by_pid_ns(tgid, ns);
 	if (task)
 		get_task_struct(task);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	if (!task)
 		goto out;
@@ -3168,6 +3335,7 @@ static struct tgid_iter next_tgid(struct pid_namespace *ns, struct tgid_iter ite
 
 	if (iter.task)
 		put_task_struct(iter.task);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 retry:
 	iter.task = NULL;
@@ -3193,6 +3361,7 @@ static struct tgid_iter next_tgid(struct pid_namespace *ns, struct tgid_iter ite
 		}
 		get_task_struct(iter.task);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	return iter;
 }
@@ -3207,18 +3376,24 @@ int proc_pid_readdir(struct file *file, struct dir_context *ctx)
 	loff_t pos = ctx->pos;
 
 	if (pos >= PID_MAX_LIMIT + TGID_OFFSET)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (pos == TGID_OFFSET - 2) {
 		struct inode *inode = d_inode(ns->proc_self);
 		if (!dir_emit(ctx, "self", 4, inode->i_ino, DT_LNK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 		ctx->pos = pos = pos + 1;
 	}
 	if (pos == TGID_OFFSET - 1) {
 		struct inode *inode = d_inode(ns->proc_thread_self);
 		if (!dir_emit(ctx, "thread-self", 11, inode->i_ino, DT_LNK))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 		ctx->pos = pos = pos + 1;
 	}
 	iter.tgid = pos - TGID_OFFSET;
@@ -3264,7 +3439,10 @@ static int proc_tid_comm_permission(struct inode *inode, int mask)
 
 	task = get_proc_task(inode);
 	if (!task)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ESRCH;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	is_same_tgroup = same_thread_group(current, task);
 	put_task_struct(task);
 
@@ -3276,6 +3454,7 @@ static int proc_tid_comm_permission(struct inode *inode, int mask)
 		return 0;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return generic_permission(inode, mask);
 }
 
@@ -3380,6 +3559,7 @@ static const struct pid_entry tid_base_stuff[] = {
 
 static int proc_tid_base_readdir(struct file *file, struct dir_context *ctx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return proc_pident_readdir(file, ctx,
 				   tid_base_stuff, ARRAY_SIZE(tid_base_stuff));
 }
@@ -3421,7 +3601,9 @@ static int proc_task_instantiate(struct inode *dir,
 	d_add(dentry, inode);
 	/* Close the race of the process dying before we return the dentry */
 	if (pid_revalidate(dentry, 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 out:
 	return -ENOENT;
 }
@@ -3446,6 +3628,7 @@ static struct dentry *proc_task_lookup(struct inode *dir, struct dentry * dentry
 	task = find_task_by_pid_ns(tid, ns);
 	if (task)
 		get_task_struct(task);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	if (!task)
 		goto out;
@@ -3482,6 +3665,7 @@ static struct task_struct *first_tid(struct pid *pid, int tid, loff_t f_pos,
 	if (nr != f_pos)	/* 32bit overflow? */
 		return NULL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	task = pid_task(pid, PIDTYPE_PID);
 	if (!task)
@@ -3489,7 +3673,9 @@ static struct task_struct *first_tid(struct pid *pid, int tid, loff_t f_pos,
 
 	/* Attempt to start with the tid of a thread */
 	if (tid && nr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pos = find_task_by_pid_ns(tid, ns);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pos && same_thread_group(pos, task))
 			goto found;
 	}
@@ -3505,6 +3691,7 @@ static struct task_struct *first_tid(struct pid *pid, int tid, loff_t f_pos,
 	do {
 		if (!nr--)
 			goto found;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while_each_thread(task, pos);
 fail:
 	pos = NULL;
@@ -3527,12 +3714,16 @@ static struct task_struct *next_tid(struct task_struct *start)
 	struct task_struct *pos = NULL;
 	rcu_read_lock();
 	if (pid_alive(start)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pos = next_thread(start);
 		if (thread_group_leader(pos))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pos = NULL;
+}
 		else
 			get_task_struct(pos);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 	put_task_struct(start);
 	return pos;
@@ -3541,16 +3732,21 @@ static struct task_struct *next_tid(struct task_struct *start)
 /* for the /proc/TGID/task/ directories */
 static int proc_task_readdir(struct file *file, struct dir_context *ctx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	struct task_struct *task;
 	struct pid_namespace *ns;
 	int tid;
 
 	if (proc_inode_is_dead(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	if (!dir_emit_dots(file, ctx))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* f_version caches the tgid value that the last readdir call couldn't
 	 * return. lseek aka telldir automagically resets f_version to 0.
@@ -3575,6 +3771,7 @@ static int proc_task_readdir(struct file *file, struct dir_context *ctx)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
diff --git a/fs/proc/cmdline.c b/fs/proc/cmdline.c
index 403cbb1..dc95ffb 100644
--- a/fs/proc/cmdline.c
+++ b/fs/proc/cmdline.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/fs.h>
 #include <linux/init.h>
diff --git a/fs/proc/consoles.c b/fs/proc/consoles.c
index 290ba85..954aff7 100644
--- a/fs/proc/consoles.c
+++ b/fs/proc/consoles.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2010 Werner Fink, Jiri Slaby
  *
diff --git a/fs/proc/cpuinfo.c b/fs/proc/cpuinfo.c
index 96f1087..fbbe855 100644
--- a/fs/proc/cpuinfo.c
+++ b/fs/proc/cpuinfo.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/cpufreq.h>
 #include <linux/fs.h>
diff --git a/fs/proc/devices.c b/fs/proc/devices.c
index 2c7f22b..151c0a3 100644
--- a/fs/proc/devices.c
+++ b/fs/proc/devices.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/fs.h>
 #include <linux/init.h>
@@ -9,6 +11,7 @@ static int devinfo_show(struct seq_file *f, void *v)
 	int i = *(loff_t *) v;
 
 	if (i < CHRDEV_MAJOR_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (i == 0)
 			seq_puts(f, "Character devices:\n");
 		chrdev_show(f, i);
@@ -26,6 +29,7 @@ static int devinfo_show(struct seq_file *f, void *v)
 
 static void *devinfo_start(struct seq_file *f, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (*pos < (BLKDEV_MAJOR_MAX + CHRDEV_MAJOR_MAX))
 		return pos;
 	return NULL;
@@ -33,6 +37,7 @@ static void *devinfo_start(struct seq_file *f, loff_t *pos)
 
 static void *devinfo_next(struct seq_file *f, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	(*pos)++;
 	if (*pos >= (BLKDEV_MAJOR_MAX + CHRDEV_MAJOR_MAX))
 		return NULL;
@@ -53,6 +58,7 @@ static const struct seq_operations devinfo_ops = {
 
 static int devinfo_open(struct inode *inode, struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(filp, &devinfo_ops);
 }
 
diff --git a/fs/proc/fd.c b/fs/proc/fd.c
index 96fc702..3d99089 100644
--- a/fs/proc/fd.c
+++ b/fs/proc/fd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/sched/signal.h>
 #include <linux/errno.h>
@@ -26,7 +28,9 @@ static int seq_show(struct seq_file *m, void *v)
 
 	task = get_proc_task(m->private);
 	if (!task)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	files = get_files_struct(task);
 	put_task_struct(task);
@@ -71,6 +75,7 @@ static int seq_show(struct seq_file *m, void *v)
 
 static int seq_fdinfo_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, seq_show, inode);
 }
 
@@ -89,8 +94,11 @@ static int tid_fd_revalidate(struct dentry *dentry, unsigned int flags)
 	unsigned int fd;
 
 	if (flags & LOOKUP_RCU)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ECHILD;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode = d_inode(dentry);
 	task = get_proc_task(inode);
 	fd = proc_fd(inode);
@@ -113,7 +121,9 @@ static int tid_fd_revalidate(struct dentry *dentry, unsigned int flags)
 				if (S_ISLNK(inode->i_mode)) {
 					unsigned i_mode = S_IFLNK;
 					if (f_mode & FMODE_READ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 						i_mode |= S_IRUSR | S_IXUSR;
+}
 					if (f_mode & FMODE_WRITE)
 						i_mode |= S_IWUSR | S_IXUSR;
 					inode->i_mode = i_mode;
@@ -123,11 +133,14 @@ static int tid_fd_revalidate(struct dentry *dentry, unsigned int flags)
 				put_task_struct(task);
 				return 1;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rcu_read_unlock();
 			put_files_struct(files);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_task_struct(task);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -149,6 +162,7 @@ static int proc_fd_link(struct dentry *dentry, struct path *path)
 	}
 
 	if (files) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unsigned int fd = proc_fd(d_inode(dentry));
 		struct file *fd_file;
 
@@ -159,6 +173,7 @@ static int proc_fd_link(struct dentry *dentry, struct path *path)
 			path_get(&fd_file->f_path);
 			ret = 0;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&files->file_lock);
 		put_files_struct(files);
 	}
@@ -178,6 +193,7 @@ proc_fd_instantiate(struct inode *dir, struct dentry *dentry,
 	if (!inode)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ei = PROC_I(inode);
 	ei->fd = fd;
 
@@ -191,7 +207,9 @@ proc_fd_instantiate(struct inode *dir, struct dentry *dentry,
 
 	/* Close the race of the process dying before we return the dentry */
 	if (tid_fd_revalidate(dentry, 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
  out:
 	return -ENOENT;
 }
@@ -224,7 +242,9 @@ static int proc_readfd_common(struct file *file, struct dir_context *ctx,
 	unsigned int fd;
 
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	if (!dir_emit_dots(file, ctx))
 		goto out;
@@ -232,6 +252,7 @@ static int proc_readfd_common(struct file *file, struct dir_context *ctx,
 	if (!files)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	for (fd = ctx->pos - 2;
 	     fd < files_fdtable(files)->max_fds;
@@ -241,6 +262,7 @@ static int proc_readfd_common(struct file *file, struct dir_context *ctx,
 
 		if (!fcheck_files(files, fd))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_unlock();
 
 		len = snprintf(name, sizeof(name), "%u", fd);
@@ -251,6 +273,7 @@ static int proc_readfd_common(struct file *file, struct dir_context *ctx,
 		cond_resched();
 		rcu_read_lock();
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 out_fd_loop:
 	put_files_struct(files);
@@ -287,12 +310,19 @@ int proc_fd_permission(struct inode *inode, int mask)
 
 	rv = generic_permission(inode, mask);
 	if (rv == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rv;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_lock();
 	p = pid_task(proc_pid(inode), PIDTYPE_PID);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (p && same_thread_group(p, current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rv = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	return rv;
@@ -316,6 +346,7 @@ proc_fdinfo_instantiate(struct inode *dir, struct dentry *dentry,
 	if (!inode)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ei = PROC_I(inode);
 	ei->fd = fd;
 
@@ -334,11 +365,13 @@ proc_fdinfo_instantiate(struct inode *dir, struct dentry *dentry,
 static struct dentry *
 proc_lookupfdinfo(struct inode *dir, struct dentry *dentry, unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return proc_lookupfd_common(dir, dentry, proc_fdinfo_instantiate);
 }
 
 static int proc_readfdinfo(struct file *file, struct dir_context *ctx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return proc_readfd_common(file, ctx,
 				  proc_fdinfo_instantiate);
 }
diff --git a/fs/proc/fd.h b/fs/proc/fd.h
index f371a60..90f6a11 100644
--- a/fs/proc/fd.h
+++ b/fs/proc/fd.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __PROCFS_FD_H__
 #define __PROCFS_FD_H__
diff --git a/fs/proc/generic.c b/fs/proc/generic.c
index 793a675..4f294d0 100644
--- a/fs/proc/generic.c
+++ b/fs/proc/generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * proc/fs/generic.c --- generic routines for the proc-fs
  *
@@ -31,9 +33,13 @@ static DEFINE_RWLOCK(proc_subdir_lock);
 static int proc_match(unsigned int len, const char *name, struct proc_dir_entry *de)
 {
 	if (len < de->namelen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 	if (len > de->namelen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	return memcmp(name, de->name, len);
 }
@@ -69,6 +75,7 @@ static struct proc_dir_entry *pde_subdir_find(struct proc_dir_entry *dir,
 		else
 			return de;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -93,7 +100,9 @@ static bool pde_subdir_insert(struct proc_dir_entry *dir,
 			new = &(*new)->rb_right;
 			leftmost = false;
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
 	}
 
 	/* Add new node and rebalance tree. */
@@ -104,6 +113,7 @@ static bool pde_subdir_insert(struct proc_dir_entry *dir,
 
 static int proc_notify_change(struct dentry *dentry, struct iattr *iattr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	struct proc_dir_entry *de = PDE(inode);
 	int error;
@@ -123,6 +133,7 @@ static int proc_notify_change(struct dentry *dentry, struct iattr *iattr)
 static int proc_getattr(const struct path *path, struct kstat *stat,
 			u32 request_mask, unsigned int query_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(path->dentry);
 	struct proc_dir_entry *de = PDE(inode);
 	if (de && de->nlink)
@@ -150,8 +161,11 @@ static int __xlate_proc_name(const char *name, struct proc_dir_entry **ret,
 
 	de = *ret;
 	if (!de)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		de = &proc_root;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		next = strchr(cp, '/');
 		if (!next)
@@ -160,6 +174,7 @@ static int __xlate_proc_name(const char *name, struct proc_dir_entry **ret,
 		len = next - cp;
 		de = pde_subdir_find(de, cp, len);
 		if (!de) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			WARN(1, "name '%s'\n", name);
 			return -ENOENT;
 		}
@@ -196,7 +211,9 @@ int proc_alloc_inum(unsigned int *inum)
 	i = ida_simple_get(&proc_inum_ida, 0, UINT_MAX - PROC_DYNAMIC_FIRST + 1,
 			   GFP_KERNEL);
 	if (i < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return i;
+}
 
 	*inum = PROC_DYNAMIC_FIRST + (unsigned int)i;
 	return 0;
@@ -223,11 +240,14 @@ struct dentry *proc_lookup_de(struct proc_dir_entry *de, struct inode *dir,
 		read_unlock(&proc_subdir_lock);
 		inode = proc_get_inode(dir->i_sb, de);
 		if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-ENOMEM);
+}
 		d_set_d_op(dentry, &simple_dentry_operations);
 		d_add(dentry, inode);
 		return NULL;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock(&proc_subdir_lock);
 	return ERR_PTR(-ENOENT);
 }
@@ -253,18 +273,22 @@ int proc_readdir_de(struct proc_dir_entry *de, struct file *file,
 	int i;
 
 	if (!dir_emit_dots(file, ctx))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	read_lock(&proc_subdir_lock);
 	de = pde_subdir_first(de);
 	i = ctx->pos - 2;
 	for (;;) {
 		if (!de) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			read_unlock(&proc_subdir_lock);
 			return 0;
 		}
 		if (!i)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		de = pde_subdir_next(de);
 		i--;
 	}
@@ -275,6 +299,7 @@ int proc_readdir_de(struct proc_dir_entry *de, struct file *file,
 		read_unlock(&proc_subdir_lock);
 		if (!dir_emit(ctx, de->name, de->namelen,
 			    de->low_ino, de->mode >> 12)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pde_put(de);
 			return 0;
 		}
@@ -284,12 +309,14 @@ int proc_readdir_de(struct proc_dir_entry *de, struct file *file,
 		pde_put(de);
 		de = next;
 	} while (de);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	read_unlock(&proc_subdir_lock);
 	return 1;
 }
 
 int proc_readdir(struct file *file, struct dir_context *ctx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 
 	return proc_readdir_de(PDE(inode), file, ctx);
@@ -321,17 +348,21 @@ static int proc_register(struct proc_dir_entry * dir, struct proc_dir_entry * dp
 
 	ret = proc_alloc_inum(&dp->low_ino);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	write_lock(&proc_subdir_lock);
 	dp->parent = dir;
 	if (pde_subdir_insert(dir, dp) == false) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN(1, "proc_dir_entry '%s/%s' already registered\n",
 		     dir->name, dp->name);
 		write_unlock(&proc_subdir_lock);
 		proc_free_inum(dp->low_ino);
 		return -EEXIST;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_unlock(&proc_subdir_lock);
 
 	return 0;
@@ -351,14 +382,17 @@ static struct proc_dir_entry *__proc_create(struct proc_dir_entry **parent,
 	qstr.name = fn;
 	qstr.len = strlen(fn);
 	if (qstr.len == 0 || qstr.len >= 256) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN(1, "name len %u\n", qstr.len);
 		return NULL;
 	}
 	if (*parent == &proc_root && name_to_int(&qstr) != ~0U) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN(1, "create '/proc/%s' by hand\n", qstr.name);
 		return NULL;
 	}
 	if (is_empty_pde(*parent)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN(1, "attempt to add to permanently empty directory");
 		return NULL;
 	}
@@ -392,14 +426,17 @@ struct proc_dir_entry *proc_symlink(const char *name,
 	if (ent) {
 		ent->data = kmalloc((ent->size=strlen(dest))+1, GFP_KERNEL);
 		if (ent->data) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			strcpy((char*)ent->data,dest);
 			ent->proc_iops = &proc_link_inode_operations;
 			if (proc_register(parent, ent) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kfree(ent->data);
 				kfree(ent);
 				ent = NULL;
 			}
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(ent);
 			ent = NULL;
 		}
@@ -414,7 +451,9 @@ struct proc_dir_entry *proc_mkdir_data(const char *name, umode_t mode,
 	struct proc_dir_entry *ent;
 
 	if (mode == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mode = S_IRUGO | S_IXUGO;
+}
 
 	ent = __proc_create(&parent, name, S_IFDIR | mode, 2);
 	if (ent) {
@@ -423,6 +462,7 @@ struct proc_dir_entry *proc_mkdir_data(const char *name, umode_t mode,
 		ent->proc_iops = &proc_dir_inode_operations;
 		parent->nlink++;
 		if (proc_register(parent, ent) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(ent);
 			parent->nlink--;
 			ent = NULL;
@@ -458,6 +498,7 @@ struct proc_dir_entry *proc_create_mount_point(const char *name)
 		ent->proc_iops = NULL;
 		parent->nlink++;
 		if (proc_register(parent, ent) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(ent);
 			parent->nlink--;
 			ent = NULL;
@@ -477,6 +518,7 @@ struct proc_dir_entry *proc_create_data(const char *name, umode_t mode,
 		mode |= S_IFREG;
 
 	if (!S_ISREG(mode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(1);	/* use proc_mkdir() */
 		return NULL;
 	}
@@ -493,6 +535,7 @@ struct proc_dir_entry *proc_create_data(const char *name, umode_t mode,
 	pde->proc_iops = &proc_file_inode_operations;
 	if (proc_register(parent, pde) < 0)
 		goto out_free;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return pde;
 out_free:
 	kfree(pde);
@@ -527,7 +570,9 @@ static void free_proc_entry(struct proc_dir_entry *de)
 	proc_free_inum(de->low_ino);
 
 	if (S_ISLNK(de->mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(de->data);
+}
 	kfree(de);
 }
 
@@ -548,6 +593,7 @@ void remove_proc_entry(const char *name, struct proc_dir_entry *parent)
 
 	write_lock(&proc_subdir_lock);
 	if (__xlate_proc_name(name, &parent, &fn) != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_unlock(&proc_subdir_lock);
 		return;
 	}
@@ -556,8 +602,10 @@ void remove_proc_entry(const char *name, struct proc_dir_entry *parent)
 	de = pde_subdir_find(parent, fn, len);
 	if (de)
 		rb_erase_cached(&de->subdir_node, &parent->subdir);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_unlock(&proc_subdir_lock);
 	if (!de) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN(1, "name '%s'\n", name);
 		return;
 	}
@@ -582,6 +630,7 @@ int remove_proc_subtree(const char *name, struct proc_dir_entry *parent)
 
 	write_lock(&proc_subdir_lock);
 	if (__xlate_proc_name(name, &parent, &fn) != 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_unlock(&proc_subdir_lock);
 		return -ENOENT;
 	}
@@ -589,19 +638,23 @@ int remove_proc_subtree(const char *name, struct proc_dir_entry *parent)
 
 	root = pde_subdir_find(parent, fn, len);
 	if (!root) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_unlock(&proc_subdir_lock);
 		return -ENOENT;
 	}
 	rb_erase_cached(&root->subdir_node, &parent->subdir);
 
 	de = root;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		next = pde_subdir_first(de);
 		if (next) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rb_erase_cached(&next->subdir_node, &de->subdir);
 			de = next;
 			continue;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_unlock(&proc_subdir_lock);
 
 		proc_entry_rundown(de);
@@ -611,6 +664,7 @@ int remove_proc_subtree(const char *name, struct proc_dir_entry *parent)
 		de->nlink = 0;
 		if (de == root)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pde_put(de);
 
 		write_lock(&proc_subdir_lock);
@@ -623,6 +677,7 @@ EXPORT_SYMBOL(remove_proc_subtree);
 
 void *proc_get_parent_data(const struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct proc_dir_entry *de = PDE(inode);
 	return de->parent->data;
 }
diff --git a/fs/proc/inode.c b/fs/proc/inode.c
index 225f541..0ca05af 100644
--- a/fs/proc/inode.c
+++ b/fs/proc/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/proc/inode.c
@@ -47,6 +49,7 @@ static void proc_evict_inode(struct inode *inode)
 
 	head = PROC_I(inode)->sysctl;
 	if (head) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		RCU_INIT_POINTER(PROC_I(inode)->sysctl, NULL);
 		proc_sys_evict_inode(inode, head);
 	}
@@ -61,7 +64,9 @@ static struct inode *proc_alloc_inode(struct super_block *sb)
 
 	ei = kmem_cache_alloc(proc_inode_cachep, GFP_KERNEL);
 	if (!ei)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	ei->pid = NULL;
 	ei->fd = 0;
 	ei->op.proc_get_link = NULL;
@@ -75,6 +80,7 @@ static struct inode *proc_alloc_inode(struct super_block *sb)
 
 static void proc_i_callback(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = container_of(head, struct inode, i_rcu);
 	kmem_cache_free(proc_inode_cachep, PROC_I(inode));
 }
@@ -107,9 +113,13 @@ static int proc_show_options(struct seq_file *seq, struct dentry *root)
 	struct pid_namespace *pid = sb->s_fs_info;
 
 	if (!gid_eq(pid->pid_gid, GLOBAL_ROOT_GID))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_printf(seq, ",gid=%u", from_kgid_munged(&init_user_ns, pid->pid_gid));
+}
 	if (pid->hide_pid != HIDEPID_OFF)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_printf(seq, ",hidepid=%u", pid->hide_pid);
+}
 
 	return 0;
 }
@@ -134,8 +144,10 @@ static inline int use_pde(struct proc_dir_entry *pde)
 static void unuse_pde(struct proc_dir_entry *pde)
 {
 	if (atomic_dec_return(&pde->in_use) == BIAS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		complete(pde->pde_unload_completion);
 }
+}
 
 /* pde is locked */
 static void close_pdeo(struct proc_dir_entry *pde, struct pde_opener *pdeo)
@@ -167,7 +179,9 @@ static void close_pdeo(struct proc_dir_entry *pde, struct pde_opener *pdeo)
 		/* After ->release. */
 		list_del(&pdeo->lh);
 		if (pdeo->c)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			complete(pdeo->c);
+}
 		kfree(pdeo);
 	}
 }
@@ -178,28 +192,36 @@ void proc_entry_rundown(struct proc_dir_entry *de)
 	/* Wait until all existing callers into module are done. */
 	de->pde_unload_completion = &c;
 	if (atomic_add_return(BIAS, &de->in_use) != BIAS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wait_for_completion(&c);
+}
 
 	/* ->pde_openers list can't grow from now on. */
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&de->pde_unload_lock);
 	while (!list_empty(&de->pde_openers)) {
 		struct pde_opener *pdeo;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pdeo = list_first_entry(&de->pde_openers, struct pde_opener, lh);
 		close_pdeo(de, pdeo);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&de->pde_unload_lock);
 }
 
 static loff_t proc_reg_llseek(struct file *file, loff_t offset, int whence)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct proc_dir_entry *pde = PDE(file_inode(file));
 	loff_t rv = -EINVAL;
 	if (use_pde(pde)) {
 		loff_t (*llseek)(struct file *, loff_t, int);
 		llseek = pde->proc_fops->llseek;
 		if (!llseek)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			llseek = default_llseek;
+}
 		rv = llseek(file, offset, whence);
 		unuse_pde(pde);
 	}
@@ -226,6 +248,7 @@ static ssize_t proc_reg_write(struct file *file, const char __user *buf, size_t
 	struct proc_dir_entry *pde = PDE(file_inode(file));
 	ssize_t rv = -EIO;
 	if (use_pde(pde)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write = pde->proc_fops->write;
 		if (write)
 			rv = write(file, buf, count, ppos);
@@ -236,13 +259,16 @@ static ssize_t proc_reg_write(struct file *file, const char __user *buf, size_t
 
 static unsigned int proc_reg_poll(struct file *file, struct poll_table_struct *pts)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct proc_dir_entry *pde = PDE(file_inode(file));
 	unsigned int rv = DEFAULT_POLLMASK;
 	unsigned int (*poll)(struct file *, struct poll_table_struct *);
 	if (use_pde(pde)) {
 		poll = pde->proc_fops->poll;
 		if (poll)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rv = poll(file, pts);
+}
 		unuse_pde(pde);
 	}
 	return rv;
@@ -250,13 +276,16 @@ static unsigned int proc_reg_poll(struct file *file, struct poll_table_struct *p
 
 static long proc_reg_unlocked_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct proc_dir_entry *pde = PDE(file_inode(file));
 	long rv = -ENOTTY;
 	long (*ioctl)(struct file *, unsigned int, unsigned long);
 	if (use_pde(pde)) {
 		ioctl = pde->proc_fops->unlocked_ioctl;
 		if (ioctl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rv = ioctl(file, cmd, arg);
+}
 		unuse_pde(pde);
 	}
 	return rv;
@@ -265,6 +294,7 @@ static long proc_reg_unlocked_ioctl(struct file *file, unsigned int cmd, unsigne
 #ifdef CONFIG_COMPAT
 static long proc_reg_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct proc_dir_entry *pde = PDE(file_inode(file));
 	long rv = -ENOTTY;
 	long (*compat_ioctl)(struct file *, unsigned int, unsigned long);
@@ -280,6 +310,7 @@ static long proc_reg_compat_ioctl(struct file *file, unsigned int cmd, unsigned
 
 static int proc_reg_mmap(struct file *file, struct vm_area_struct *vma)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct proc_dir_entry *pde = PDE(file_inode(file));
 	int rv = -EIO;
 	int (*mmap)(struct file *, struct vm_area_struct *);
@@ -297,6 +328,7 @@ proc_reg_get_unmapped_area(struct file *file, unsigned long orig_addr,
 			   unsigned long len, unsigned long pgoff,
 			   unsigned long flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct proc_dir_entry *pde = PDE(file_inode(file));
 	unsigned long rv = -EIO;
 
@@ -320,6 +352,7 @@ proc_reg_get_unmapped_area(struct file *file, unsigned long orig_addr,
 
 static int proc_reg_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct proc_dir_entry *pde = PDE(inode);
 	int rv = 0;
 	int (*open)(struct inode *, struct file *);
@@ -339,9 +372,12 @@ static int proc_reg_open(struct inode *inode, struct file *file)
 	 */
 	pdeo = kmalloc(sizeof(struct pde_opener), GFP_KERNEL);
 	if (!pdeo)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	if (!use_pde(pde)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(pdeo);
 		return -ENOENT;
 	}
@@ -360,7 +396,9 @@ static int proc_reg_open(struct inode *inode, struct file *file)
 		list_add(&pdeo->lh, &pde->pde_openers);
 		spin_unlock(&pde->pde_unload_lock);
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(pdeo);
+}
 
 	unuse_pde(pde);
 	return rv;
@@ -368,6 +406,7 @@ static int proc_reg_open(struct inode *inode, struct file *file)
 
 static int proc_reg_release(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct proc_dir_entry *pde = PDE(inode);
 	struct pde_opener *pdeo;
 	spin_lock(&pde->pde_unload_lock);
@@ -377,6 +416,7 @@ static int proc_reg_release(struct inode *inode, struct file *file)
 			break;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&pde->pde_unload_lock);
 	return 0;
 }
@@ -419,9 +459,13 @@ static const char *proc_get_link(struct dentry *dentry,
 				 struct inode *inode,
 				 struct delayed_call *done)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct proc_dir_entry *pde = PDE(inode);
 	if (unlikely(!use_pde(pde)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	set_delayed_call(done, proc_put_link, pde);
 	return pde->data;
 }
@@ -440,6 +484,7 @@ struct inode *proc_get_inode(struct super_block *sb, struct proc_dir_entry *de)
 		PROC_I(inode)->pde = de;
 
 		if (is_empty_pde(de)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			make_empty_dir_inode(inode);
 			return inode;
 		}
@@ -468,7 +513,10 @@ struct inode *proc_get_inode(struct super_block *sb, struct proc_dir_entry *de)
 			}
 		}
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	       pde_put(de);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return inode;
 }
 
@@ -479,7 +527,9 @@ int proc_fill_super(struct super_block *s, void *data, int silent)
 	int ret;
 
 	if (!proc_parse_options(data, ns))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* User space would break if executables or devices appear on proc */
 	s->s_iflags |= SB_I_USERNS_VISIBLE | SB_I_NOEXEC | SB_I_NODEV;
@@ -500,18 +550,21 @@ int proc_fill_super(struct super_block *s, void *data, int silent)
 	pde_get(&proc_root);
 	root_inode = proc_get_inode(s, &proc_root);
 	if (!root_inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("proc_fill_super: get root inode failed\n");
 		return -ENOMEM;
 	}
 
 	s->s_root = d_make_root(root_inode);
 	if (!s->s_root) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("proc_fill_super: allocate dentry failed\n");
 		return -ENOMEM;
 	}
 
 	ret = proc_setup_self(s);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	}
 	return proc_setup_thread_self(s);
diff --git a/fs/proc/internal.h b/fs/proc/internal.h
index a34195e..e735f22 100644
--- a/fs/proc/internal.h
+++ b/fs/proc/internal.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Internal procfs definitions
  *
  * Copyright (C) 2004 Red Hat, Inc. All Rights Reserved.
diff --git a/fs/proc/interrupts.c b/fs/proc/interrupts.c
index 6a6bee9..ab3055c 100644
--- a/fs/proc/interrupts.c
+++ b/fs/proc/interrupts.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/fs.h>
 #include <linux/init.h>
@@ -11,11 +13,13 @@
  */
 static void *int_seq_start(struct seq_file *f, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (*pos <= nr_irqs) ? pos : NULL;
 }
 
 static void *int_seq_next(struct seq_file *f, void *v, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	(*pos)++;
 	if (*pos > nr_irqs)
 		return NULL;
@@ -36,6 +40,7 @@ static const struct seq_operations int_seq_ops = {
 
 static int interrupts_open(struct inode *inode, struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(filp, &int_seq_ops);
 }
 
diff --git a/fs/proc/kcore.c b/fs/proc/kcore.c
index e8a93bc..46ccae0 100644
--- a/fs/proc/kcore.c
+++ b/fs/proc/kcore.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *	fs/proc/kcore.c kernel ELF core dumper
@@ -85,7 +87,9 @@ static size_t get_kcore_size(int *nphdr, size_t *elf_buflen)
 	list_for_each_entry(m, &kclist_head, list) {
 		try = kc_vaddr_to_offset((size_t)m->addr + m->size);
 		if (try > size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			size = try;
+}
 		*nphdr = *nphdr + 1;
 	}
 	*elf_buflen =	sizeof(struct elfhdr) + 
@@ -104,6 +108,7 @@ static void free_kclist_ents(struct list_head *head)
 	struct kcore_list *tmp, *pos;
 
 	list_for_each_entry_safe(pos, tmp, head, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del(&pos->list);
 		kfree(pos);
 	}
@@ -127,7 +132,9 @@ static void __kcore_update_ram(struct list_head *list)
 		}
 		list_splice_tail(list, &kclist_head);
 	} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_splice(list, &garbage);
+}
 	kcore_need_update = 0;
 	proc_root_kcore->size = get_kcore_size(&nphdr, &size);
 	write_unlock(&kclist_lock);
@@ -180,18 +187,26 @@ get_sparsemem_vmemmap_info(struct kcore_list *ent, struct list_head *head)
 		if (tmp->type != KCORE_VMEMMAP)
 			continue;
 		if (start < tmp->addr + tmp->size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (end > tmp->addr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				end = tmp->addr;
+}
+}
 	}
 	if (start < end) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vmm = kmalloc(sizeof(*vmm), GFP_KERNEL);
 		if (!vmm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 		vmm->addr = start;
 		vmm->size = end - start;
 		vmm->type = KCORE_VMEMMAP;
 		list_add_tail(&vmm->list, head);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 
 }
@@ -212,7 +227,9 @@ kclist_add_private(unsigned long pfn, unsigned long nr_pages, void *arg)
 
 	ent = kmalloc(sizeof(*ent), GFP_KERNEL);
 	if (!ent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	ent->addr = (unsigned long)__va((pfn << PAGE_SHIFT));
 	ent->size = nr_pages << PAGE_SHIFT;
 
@@ -222,24 +239,30 @@ kclist_add_private(unsigned long pfn, unsigned long nr_pages, void *arg)
 
 	/* cut not-mapped area. ....from ppc-32 code. */
 	if (ULONG_MAX - ent->addr < ent->size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ent->size = ULONG_MAX - ent->addr;
+}
 
 	/* cut when vmalloc() area is higher than direct-map area */
 	if (VMALLOC_START > (unsigned long)__va(0)) {
 		if (ent->addr > VMALLOC_START)
 			goto free_out;
 		if (VMALLOC_START - ent->addr < ent->size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ent->size = VMALLOC_START - ent->addr;
+}
 	}
 
 	ent->type = KCORE_RAM;
 	list_add_tail(&ent->list, head);
 
 	if (!get_sparsemem_vmemmap_info(ent, head)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del(&ent->list);
 		goto free_out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 free_out:
 	kfree(ent);
@@ -259,11 +282,14 @@ static int kcore_update_ram(void)
 		unsigned long node_end;
 		node_end = node_end_pfn(nid);
 		if (end_pfn < node_end)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			end_pfn = node_end;
+}
 	}
 	/* scan 0 to max_pfn */
 	ret = walk_system_ram_range(0, end_pfn, &head, kclist_add_private);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		free_kclist_ents(&head);
 		return -ENOMEM;
 	}
@@ -301,6 +327,7 @@ static char *storenote(struct memelfnote *men, char *bufp)
 	en.n_descsz = men->datasz;
 	en.n_type = men->type;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	DUMP_WRITE(&en, sizeof(en));
 	DUMP_WRITE(men->name, en.n_namesz);
 
@@ -332,6 +359,7 @@ static void elf_kcore_store_hdr(char *bufp, int nphdr, int dataoff)
 	elf = (struct elfhdr *) bufp;
 	bufp += sizeof(struct elfhdr);
 	offset += sizeof(struct elfhdr);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(elf->e_ident, ELFMAG, SELFMAG);
 	elf->e_ident[EI_CLASS]	= ELF_CLASS;
 	elf->e_ident[EI_DATA]	= ELF_DATA;
@@ -445,6 +473,7 @@ read_kcore(struct file *file, char __user *buffer, size_t buflen, loff_t *fpos)
 	read_lock(&kclist_lock);
 	size = get_kcore_size(&nphdr, &elf_buflen);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (buflen == 0 || *fpos >= size) {
 		read_unlock(&kclist_lock);
 		return 0;
@@ -542,6 +571,7 @@ read_kcore(struct file *file, char __user *buffer, size_t buflen, loff_t *fpos)
 
 static int open_kcore(struct inode *inode, struct file *filp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!capable(CAP_SYS_RAWIO))
 		return -EPERM;
 
@@ -561,6 +591,7 @@ static int open_kcore(struct inode *inode, struct file *filp)
 
 static int release_kcore(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(file->private_data);
 	return 0;
 }
@@ -576,6 +607,7 @@ static const struct file_operations proc_kcore_operations = {
 static int __meminit kcore_callback(struct notifier_block *self,
 				    unsigned long action, void *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (action) {
 	case MEM_ONLINE:
 	case MEM_OFFLINE:
@@ -632,6 +664,7 @@ static int __init proc_kcore_init(void)
 	proc_root_kcore = proc_create("kcore", S_IRUSR, NULL,
 				      &proc_kcore_operations);
 	if (!proc_root_kcore) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("couldn't create /proc/kcore\n");
 		return 0; /* Always returns 0. */
 	}
diff --git a/fs/proc/kmsg.c b/fs/proc/kmsg.c
index e0f8774..be87fdf 100644
--- a/fs/proc/kmsg.c
+++ b/fs/proc/kmsg.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/proc/kmsg.c
@@ -27,6 +29,7 @@ static int kmsg_open(struct inode * inode, struct file * file)
 
 static int kmsg_release(struct inode * inode, struct file * file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	(void) do_syslog(SYSLOG_ACTION_CLOSE, NULL, 0, SYSLOG_FROM_PROC);
 	return 0;
 }
@@ -42,6 +45,7 @@ static ssize_t kmsg_read(struct file *file, char __user *buf,
 
 static unsigned int kmsg_poll(struct file *file, poll_table *wait)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	poll_wait(file, &log_wait, wait);
 	if (do_syslog(SYSLOG_ACTION_SIZE_UNREAD, NULL, 0, SYSLOG_FROM_PROC))
 		return POLLIN | POLLRDNORM;
diff --git a/fs/proc/loadavg.c b/fs/proc/loadavg.c
index 9bc5c58..e0d42297 100644
--- a/fs/proc/loadavg.c
+++ b/fs/proc/loadavg.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/fs.h>
 #include <linux/init.h>
diff --git a/fs/proc/meminfo.c b/fs/proc/meminfo.c
index 6bb20f8..96bac14 100644
--- a/fs/proc/meminfo.c
+++ b/fs/proc/meminfo.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/fs.h>
 #include <linux/init.h>
@@ -59,7 +61,9 @@ static int meminfo_proc_show(struct seq_file *m, void *v)
 	cached = global_node_page_state(NR_FILE_PAGES) -
 			total_swapcache_pages() - i.bufferram;
 	if (cached < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cached = 0;
+}
 
 	for (lru = LRU_BASE; lru < NR_LRU_LISTS; lru++)
 		pages[lru] = global_node_page_state(NR_LRU_BASE + lru);
diff --git a/fs/proc/namespaces.c b/fs/proc/namespaces.c
index 59b17e5..49bb0e3 100644
--- a/fs/proc/namespaces.c
+++ b/fs/proc/namespaces.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/proc_fs.h>
 #include <linux/nsproxy.h>
@@ -45,11 +47,15 @@ static const char *proc_ns_get_link(struct dentry *dentry,
 	void *error = ERR_PTR(-EACCES);
 
 	if (!dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ECHILD);
+}
 
 	task = get_proc_task(inode);
 	if (!task)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	if (ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS)) {
 		error = ns_get_path(&ns_path, task, ns_ops);
@@ -62,6 +68,7 @@ static const char *proc_ns_get_link(struct dentry *dentry,
 
 static int proc_ns_readlink(struct dentry *dentry, char __user *buffer, int buflen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	const struct proc_ns_operations *ns_ops = PROC_I(inode)->ns_ops;
 	struct task_struct *task;
@@ -98,6 +105,7 @@ static int proc_ns_instantiate(struct inode *dir,
 	if (!inode)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ei = PROC_I(inode);
 	inode->i_op = &proc_ns_link_inode_operations;
 	ei->ns_ops = ns_ops;
@@ -106,13 +114,16 @@ static int proc_ns_instantiate(struct inode *dir,
 	d_add(dentry, inode);
 	/* Close the race of the process dying before we return the dentry */
 	if (pid_revalidate(dentry, 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 out:
 	return -ENOENT;
 }
 
 static int proc_ns_dir_readdir(struct file *file, struct dir_context *ctx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct task_struct *task = get_proc_task(file_inode(file));
 	const struct proc_ns_operations **entry, **last;
 
@@ -157,6 +168,7 @@ static struct dentry *proc_ns_dir_lookup(struct inode *dir,
 	if (!task)
 		goto out_no_task;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	last = &ns_entries[ARRAY_SIZE(ns_entries)];
 	for (entry = ns_entries; entry < last; entry++) {
 		if (strlen((*entry)->name) != len)
diff --git a/fs/proc/page.c b/fs/proc/page.c
index 1491918..f7a444b 100644
--- a/fs/proc/page.c
+++ b/fs/proc/page.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/bootmem.h>
 #include <linux/compiler.h>
@@ -37,6 +39,7 @@ static ssize_t kpagecount_read(struct file *file, char __user *buf,
 	u64 pcount;
 
 	pfn = src / KPMSIZE;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	count = min_t(size_t, count, (max_pfn * KPMSIZE) - src);
 	if (src & KPMMASK || count & KPMMASK)
 		return -EINVAL;
@@ -82,6 +85,7 @@ static const struct file_operations proc_kpagecount_operations = {
 
 static inline u64 kpf_copy_bit(u64 kflags, int ubit, int kbit)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ((kflags >> kbit) & 1) << ubit;
 }
 
@@ -95,7 +99,9 @@ u64 stable_page_flags(struct page *page)
 	 * it differentiates a memory hole from a page with no flags
 	 */
 	if (!page)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1 << KPF_NOPAGE;
+}
 
 	k = page->flags;
 	u = 0;
@@ -209,6 +215,7 @@ static ssize_t kpageflags_read(struct file *file, char __user *buf,
 	ssize_t ret = 0;
 
 	pfn = src / KPMSIZE;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	count = min_t(unsigned long, count, (max_pfn * KPMSIZE) - src);
 	if (src & KPMMASK || count & KPMMASK)
 		return -EINVAL;
diff --git a/fs/proc/proc_net.c b/fs/proc/proc_net.c
index a2bf369..ded9c25 100644
--- a/fs/proc/proc_net.c
+++ b/fs/proc/proc_net.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  linux/fs/proc/net.c
  *
@@ -48,10 +50,13 @@ int seq_open_net(struct inode *ino, struct file *f,
 
 	net = get_proc_net(ino);
 	if (net == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENXIO;
+}
 
 	p = __seq_open_private(f, ops, size);
 	if (p == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		put_net(net);
 		return -ENOMEM;
 	}
@@ -73,6 +78,7 @@ int single_open_net(struct inode *inode, struct file *file,
 	if (net == NULL)
 		goto err_net;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = single_open(file, show, net);
 	if (err < 0)
 		goto err_open;
@@ -115,12 +121,15 @@ static struct net *get_proc_task_net(struct inode *dir)
 	rcu_read_lock();
 	task = pid_task(proc_pid(dir), PIDTYPE_PID);
 	if (task != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		task_lock(task);
 		ns = task->nsproxy;
 		if (ns != NULL)
 			net = get_net(ns->net_ns);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		task_unlock(task);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	return net;
@@ -144,6 +153,7 @@ static struct dentry *proc_tgid_net_lookup(struct inode *dir,
 static int proc_tgid_net_getattr(const struct path *path, struct kstat *stat,
 				 u32 request_mask, unsigned int query_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(path->dentry);
 	struct net *net;
 
@@ -172,6 +182,7 @@ static int proc_tgid_net_readdir(struct file *file, struct dir_context *ctx)
 	ret = -EINVAL;
 	net = get_proc_task_net(file_inode(file));
 	if (net != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = proc_readdir_de(net->proc_net, file, ctx);
 		put_net(net);
 	}
@@ -205,11 +216,15 @@ static __net_init int proc_net_ns_init(struct net *net)
 
 	uid = make_kuid(net->user_ns, 0);
 	if (!uid_valid(uid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		uid = netd->uid;
+}
 
 	gid = make_kgid(net->user_ns, 0);
 	if (!gid_valid(gid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gid = netd->gid;
+}
 
 	proc_set_user(netd, uid, gid);
 
diff --git a/fs/proc/proc_sysctl.c b/fs/proc/proc_sysctl.c
index c5cbbdf..24749a1 100644
--- a/fs/proc/proc_sysctl.c
+++ b/fs/proc/proc_sysctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * /proc/sys support
@@ -40,13 +42,16 @@ static void set_empty_dir(struct ctl_dir *dir)
 static void clear_empty_dir(struct ctl_dir *dir)
 
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dir->header.ctl_table[0].child = NULL;
 }
 
 void proc_sys_poll_notify(struct ctl_table_poll *poll)
 {
 	if (!poll)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	atomic_inc(&poll->event);
 	wake_up_interruptible(&poll->wait);
@@ -80,6 +85,7 @@ static void put_links(struct ctl_table_header *header);
 
 static void sysctl_print_dir(struct ctl_dir *dir)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dir->header.parent)
 		sysctl_print_dir(dir->header.parent);
 	pr_cont("%s/", dir->header.ctl_table[0].procname);
@@ -92,7 +98,9 @@ static int namecmp(const char *name1, int len1, const char *name2, int len2)
 
 	minlen = len1;
 	if (minlen > len2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		minlen = len2;
+}
 
 	cmp = memcmp(name1, name2, minlen);
 	if (cmp == 0)
@@ -114,6 +122,7 @@ static struct ctl_table *find_entry(struct ctl_table_header **phead,
 		const char *procname;
 		int cmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ctl_node = rb_entry(node, struct ctl_node, node);
 		head = ctl_node->header;
 		entry = &head->ctl_table[ctl_node - head->node];
@@ -129,6 +138,7 @@ static struct ctl_table *find_entry(struct ctl_table_header **phead,
 			return entry;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 
@@ -148,6 +158,7 @@ static int insert_entry(struct ctl_table_header *head, struct ctl_table *entry)
 		int cmp;
 
 		parent = *p;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent_node = rb_entry(parent, struct ctl_node, node);
 		parent_head = parent_node->header;
 		parent_entry = &parent_head->ctl_table[parent_node - parent_head->node];
@@ -159,6 +170,7 @@ static int insert_entry(struct ctl_table_header *head, struct ctl_table *entry)
 		else if (cmp > 0)
 			p = &(*p)->rb_right;
 		else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("sysctl duplicate entry: ");
 			sysctl_print_dir(head->parent);
 			pr_cont("/%s\n", entry->procname);
@@ -166,6 +178,7 @@ static int insert_entry(struct ctl_table_header *head, struct ctl_table *entry)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rb_link_node(node, parent, p);
 	rb_insert_color(node, &head->parent->root);
 	return 0;
@@ -214,12 +227,17 @@ static int insert_header(struct ctl_dir *dir, struct ctl_table_header *header)
 
 	/* Is this a permanently empty directory? */
 	if (is_empty_dir(&dir->header))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EROFS;
+}
 
 	/* Am I creating a permanently empty directory? */
 	if (header->ctl_table == sysctl_mount_point) {
 		if (!RB_EMPTY_ROOT(&dir->root))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		set_empty_dir(dir);
 	}
 
@@ -233,13 +251,17 @@ static int insert_header(struct ctl_dir *dir, struct ctl_table_header *header)
 		if (err)
 			goto fail;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 fail:
 	erase_header(header);
 	put_links(header);
 fail_links:
 	if (header->ctl_table == sysctl_mount_point)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		clear_empty_dir(dir);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	header->parent = NULL;
 	drop_sysctl_table(&dir->header);
 	return err;
@@ -249,7 +271,9 @@ static int insert_header(struct ctl_dir *dir, struct ctl_table_header *header)
 static int use_table(struct ctl_table_header *p)
 {
 	if (unlikely(p->unregistering))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	p->used++;
 	return 1;
 }
@@ -259,8 +283,10 @@ static void unuse_table(struct ctl_table_header *p)
 {
 	if (!--p->used)
 		if (unlikely(p->unregistering))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			complete(p->unregistering);
 }
+}
 
 static void proc_sys_prune_dcache(struct ctl_table_header *head)
 {
@@ -274,6 +300,7 @@ static void proc_sys_prune_dcache(struct ctl_table_header *head)
 		node = hlist_first_rcu(&head->inodes);
 		if (!node)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ei = hlist_entry(node, struct proc_inode, sysctl_inodes);
 		spin_lock(&sysctl_lock);
 		hlist_del_init_rcu(&ei->sysctl_inodes);
@@ -286,6 +313,7 @@ static void proc_sys_prune_dcache(struct ctl_table_header *head)
 		inode = igrab(inode);
 		rcu_read_unlock();
 		if (unlikely(!inode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			deactivate_super(sb);
 			rcu_read_lock();
 			continue;
@@ -297,6 +325,7 @@ static void proc_sys_prune_dcache(struct ctl_table_header *head)
 
 		rcu_read_lock();
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
@@ -334,9 +363,13 @@ static void start_unregistering(struct ctl_table_header *p)
 static struct ctl_table_header *sysctl_head_grab(struct ctl_table_header *head)
 {
 	BUG_ON(!head);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&sysctl_lock);
 	if (!use_table(head))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		head = ERR_PTR(-ENOENT);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sysctl_lock);
 	return head;
 }
@@ -344,7 +377,10 @@ static struct ctl_table_header *sysctl_head_grab(struct ctl_table_header *head)
 static void sysctl_head_finish(struct ctl_table_header *head)
 {
 	if (!head)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&sysctl_lock);
 	unuse_table(head);
 	spin_unlock(&sysctl_lock);
@@ -372,6 +408,7 @@ static struct ctl_table *lookup_entry(struct ctl_table_header **phead,
 		*phead = head;
 	else
 		entry = NULL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sysctl_lock);
 	return entry;
 }
@@ -380,6 +417,7 @@ static struct ctl_node *first_usable_entry(struct rb_node *node)
 {
 	struct ctl_node *ctl_node;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (;node; node = rb_next(node)) {
 		ctl_node = rb_entry(node, struct ctl_node, node);
 		if (use_table(ctl_node->header))
@@ -399,6 +437,7 @@ static void first_entry(struct ctl_dir *dir,
 	ctl_node = first_usable_entry(rb_first(&dir->root));
 	spin_unlock(&sysctl_lock);
 	if (ctl_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		head = ctl_node->header;
 		entry = &head->ctl_table[ctl_node - head->node];
 	}
@@ -419,6 +458,7 @@ static void next_entry(struct ctl_table_header **phead, struct ctl_table **pentr
 	spin_unlock(&sysctl_lock);
 	head = NULL;
 	if (ctl_node) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		head = ctl_node->header;
 		entry = &head->ctl_table[ctl_node - head->node];
 	}
@@ -438,7 +478,9 @@ static int test_perm(int mode, int op)
 	else if (in_egroup_p(GLOBAL_ROOT_GID))
 		mode >>= 3;
 	if ((op & ~mode & (MAY_READ|MAY_WRITE|MAY_EXEC)) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return -EACCES;
 }
 
@@ -472,6 +514,7 @@ static struct inode *proc_sys_make_inode(struct super_block *sb,
 
 	spin_lock(&sysctl_lock);
 	if (unlikely(head->unregistering)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&sysctl_lock);
 		iput(inode);
 		inode = NULL;
@@ -506,10 +549,14 @@ static struct inode *proc_sys_make_inode(struct super_block *sb,
 
 void proc_sys_evict_inode(struct inode *inode, struct ctl_table_header *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&sysctl_lock);
 	hlist_del_init_rcu(&PROC_I(inode)->sysctl_inodes);
 	if (!--head->count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree_rcu(head, rcu);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sysctl_lock);
 }
 
@@ -517,7 +564,9 @@ static struct ctl_table_header *grab_header(struct inode *inode)
 {
 	struct ctl_table_header *head = PROC_I(inode)->sysctl;
 	if (!head)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		head = &sysctl_table_root.default_set.dir.header;
+}
 	return sysctl_head_grab(head);
 }
 
@@ -534,8 +583,11 @@ static struct dentry *proc_sys_lookup(struct inode *dir, struct dentry *dentry,
 	int ret;
 
 	if (IS_ERR(head))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(head);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ctl_dir = container_of(head, struct ctl_dir, header);
 
 	p = lookup_entry(&h, ctl_dir, name->name, name->len);
@@ -549,11 +601,13 @@ static struct dentry *proc_sys_lookup(struct inode *dir, struct dentry *dentry,
 			goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = ERR_PTR(-ENOMEM);
 	inode = proc_sys_make_inode(dir->i_sb, h ? h : head, p);
 	if (!inode)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = NULL;
 	d_set_d_op(dentry, &proc_sys_dentry_operations);
 	d_add(dentry, inode);
@@ -568,6 +622,7 @@ static struct dentry *proc_sys_lookup(struct inode *dir, struct dentry *dentry,
 static ssize_t proc_sys_call_handler(struct file *filp, void __user *buf,
 		size_t count, loff_t *ppos, int write)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(filp);
 	struct ctl_table_header *head = grab_header(inode);
 	struct ctl_table *table = PROC_I(inode)->sysctl_entry;
@@ -575,7 +630,9 @@ static ssize_t proc_sys_call_handler(struct file *filp, void __user *buf,
 	size_t res;
 
 	if (IS_ERR(head))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(head);
+}
 
 	/*
 	 * At this point we know that the sysctl was not unregistered
@@ -620,7 +677,9 @@ static int proc_sys_open(struct inode *inode, struct file *filp)
 
 	/* sysctl was unregistered */
 	if (IS_ERR(head))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(head);
+}
 
 	if (table->poll)
 		filp->private_data = proc_sys_poll_event(table->poll);
@@ -632,6 +691,7 @@ static int proc_sys_open(struct inode *inode, struct file *filp)
 
 static unsigned int proc_sys_poll(struct file *filp, poll_table *wait)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(filp);
 	struct ctl_table_header *head = grab_header(inode);
 	struct ctl_table *table = PROC_I(inode)->sysctl_entry;
@@ -640,7 +700,9 @@ static unsigned int proc_sys_poll(struct file *filp, poll_table *wait)
 
 	/* sysctl was unregistered */
 	if (IS_ERR(head))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return POLLERR | POLLHUP;
+}
 
 	if (!table->proc_handler)
 		goto out;
@@ -652,6 +714,7 @@ static unsigned int proc_sys_poll(struct file *filp, poll_table *wait)
 	poll_wait(filp, &table->poll->wait, wait);
 
 	if (event != atomic_read(&table->poll->event)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		filp->private_data = proc_sys_poll_event(table->poll);
 		ret = POLLIN | POLLRDNORM | POLLERR | POLLPRI;
 	}
@@ -682,7 +745,9 @@ static bool proc_sys_fill_cache(struct file *file,
 		DECLARE_WAIT_QUEUE_HEAD_ONSTACK(wq);
 		child = d_alloc_parallel(dir, &qname, &wq);
 		if (IS_ERR(child))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
 		if (d_in_lookup(child)) {
 			inode = proc_sys_make_inode(dir->d_sb, head, table);
 			if (!inode) {
@@ -729,7 +794,9 @@ static int scan(struct ctl_table_header *head, struct ctl_table *table,
 	bool res;
 
 	if ((*pos)++ < ctx->pos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	if (unlikely(S_ISLNK(table->mode)))
 		res = proc_sys_link_fill_cache(file, ctx, head, table);
@@ -744,6 +811,7 @@ static int scan(struct ctl_table_header *head, struct ctl_table *table,
 
 static int proc_sys_readdir(struct file *file, struct dir_context *ctx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ctl_table_header *head = grab_header(file_inode(file));
 	struct ctl_table_header *h = NULL;
 	struct ctl_table *entry;
@@ -783,11 +851,15 @@ static int proc_sys_permission(struct inode *inode, int mask)
 
 	/* Executable files are not allowed under /proc/sys/ */
 	if ((mask & MAY_EXEC) && S_ISREG(inode->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;
+}
 
 	head = grab_header(inode);
 	if (IS_ERR(head))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(head);
+}
 
 	table = PROC_I(inode)->sysctl_entry;
 	if (!table) /* global root - r-xr-xr-x */
@@ -801,15 +873,20 @@ static int proc_sys_permission(struct inode *inode, int mask)
 
 static int proc_sys_setattr(struct dentry *dentry, struct iattr *attr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	int error;
 
 	if (attr->ia_valid & (ATTR_MODE | ATTR_UID | ATTR_GID))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	error = setattr_prepare(dentry, attr);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	setattr_copy(inode, attr);
 	mark_inode_dirty(inode);
@@ -824,7 +901,9 @@ static int proc_sys_getattr(const struct path *path, struct kstat *stat,
 	struct ctl_table *table = PROC_I(inode)->sysctl_entry;
 
 	if (IS_ERR(head))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(head);
+}
 
 	generic_fillattr(inode, stat);
 	if (table)
@@ -864,7 +943,9 @@ static const struct inode_operations proc_sys_dir_operations = {
 static int proc_sys_revalidate(struct dentry *dentry, unsigned int flags)
 {
 	if (flags & LOOKUP_RCU)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ECHILD;
+}
 	return !PROC_I(d_inode(dentry))->sysctl->unregistering;
 }
 
@@ -879,11 +960,16 @@ static int sysctl_is_seen(struct ctl_table_header *p)
 	int res;
 	spin_lock(&sysctl_lock);
 	if (p->unregistering)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = 0;
+}
 	else if (!set->is_seen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = 1;
+}
 	else
 		res = set->is_seen(set);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sysctl_lock);
 	return res;
 }
@@ -899,11 +985,17 @@ static int proc_sys_compare(const struct dentry *dentry,
 	/* AV: can it, indeed? */
 	inode = d_inode_rcu(dentry);
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	if (name->len != len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	if (memcmp(name->name, str, len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 	head = rcu_dereference(PROC_I(inode)->sysctl);
 	return !head || !sysctl_is_seen(head);
 }
@@ -922,9 +1014,13 @@ static struct ctl_dir *find_subdir(struct ctl_dir *dir,
 
 	entry = find_entry(&head, dir, name, namelen);
 	if (!entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 	if (!S_ISDIR(entry->mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOTDIR);
+}
 	return container_of(head, struct ctl_dir, header);
 }
 
@@ -940,11 +1036,14 @@ static struct ctl_dir *new_dir(struct ctl_table_set *set,
 		      sizeof(struct ctl_table)*2 +  namelen + 1,
 		      GFP_KERNEL);
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	node = (struct ctl_node *)(new + 1);
 	table = (struct ctl_table *)(node + 1);
 	new_name = (char *)(table + 2);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(new_name, name, namelen);
 	new_name[namelen] = '\0';
 	table[0].procname = new_name;
@@ -980,6 +1079,7 @@ static struct ctl_dir *get_subdir(struct ctl_dir *dir,
 	if (PTR_ERR(subdir) != -ENOENT)
 		goto failed;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sysctl_lock);
 	new = new_dir(set, name, namelen);
 	spin_lock(&sysctl_lock);
@@ -999,11 +1099,13 @@ static struct ctl_dir *get_subdir(struct ctl_dir *dir,
 	subdir = ERR_PTR(err);
 	if (err)
 		goto failed;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	subdir = new;
 found:
 	subdir->header.nreg++;
 failed:
 	if (IS_ERR(subdir)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("sysctl could not get directory: ");
 		sysctl_print_dir(dir);
 		pr_cont("/%*.*s %ld\n",
@@ -1012,6 +1114,7 @@ static struct ctl_dir *get_subdir(struct ctl_dir *dir,
 	drop_sysctl_table(&dir->header);
 	if (new)
 		drop_sysctl_table(&new->header);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sysctl_lock);
 	return subdir;
 }
@@ -1024,7 +1127,9 @@ static struct ctl_dir *xlate_dir(struct ctl_table_set *set, struct ctl_dir *dir)
 		return &set->dir;
 	parent = xlate_dir(set, dir->header.parent);
 	if (IS_ERR(parent))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return parent;
+}
 	procname = dir->header.ctl_table[0].procname;
 	return find_subdir(parent, procname, strlen(procname));
 }
@@ -1045,7 +1150,9 @@ static int sysctl_follow_link(struct ctl_table_header **phead,
 	set = lookup_header_set(root);
 	dir = xlate_dir(set, (*phead)->parent);
 	if (IS_ERR(dir))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(dir);
+}
 	else {
 		const char *procname = (*pentry)->procname;
 		head = NULL;
@@ -1059,6 +1166,7 @@ static int sysctl_follow_link(struct ctl_table_header **phead,
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sysctl_lock);
 	return ret;
 }
@@ -1086,7 +1194,9 @@ static int sysctl_check_table_array(const char *path, struct ctl_table *table)
 	if ((table->proc_handler == proc_douintvec) ||
 	    (table->proc_handler == proc_douintvec_minmax)) {
 		if (table->maxlen != sizeof(unsigned int))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err |= sysctl_err(path, table, "array now allowed");
+}
 	}
 
 	return err;
@@ -1097,7 +1207,9 @@ static int sysctl_check_table(const char *path, struct ctl_table *table)
 	int err = 0;
 	for (; table->procname; table++) {
 		if (table->child)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err |= sysctl_err(path, table, "Not a file");
+}
 
 		if ((table->proc_handler == proc_dostring) ||
 		    (table->proc_handler == proc_dointvec) ||
@@ -1110,18 +1222,26 @@ static int sysctl_check_table(const char *path, struct ctl_table *table)
 		    (table->proc_handler == proc_doulongvec_minmax) ||
 		    (table->proc_handler == proc_doulongvec_ms_jiffies_minmax)) {
 			if (!table->data)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err |= sysctl_err(path, table, "No data");
+}
 			if (!table->maxlen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				err |= sysctl_err(path, table, "No maxlen");
+}
 			else
 				err |= sysctl_check_table_array(path, table);
 		}
 		if (!table->proc_handler)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err |= sysctl_err(path, table, "No proc_handler");
+}
 
 		if ((table->mode & (S_IRUGO|S_IWUGO)) != table->mode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err |= sysctl_err(path, table, "bogus .mode 0%o",
 				table->mode);
+}
 	}
 	return err;
 }
@@ -1149,7 +1269,9 @@ static struct ctl_table_header *new_links(struct ctl_dir *dir, struct ctl_table
 			GFP_KERNEL);
 
 	if (!links)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	node = (struct ctl_node *)(links + 1);
 	link_table = (struct ctl_table *)(node + nr_entries);
@@ -1180,11 +1302,14 @@ static bool get_links(struct ctl_dir *dir,
 		const char *procname = entry->procname;
 		link = find_entry(&head, dir, procname, strlen(procname));
 		if (!link)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return false;
+}
 		if (S_ISDIR(link->mode) && S_ISDIR(entry->mode))
 			continue;
 		if (S_ISLNK(link->mode) && (link->data == link_root))
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
 	}
 
@@ -1194,6 +1319,7 @@ static bool get_links(struct ctl_dir *dir,
 		link = find_entry(&head, dir, procname, strlen(procname));
 		head->nreg++;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return true;
 }
 
@@ -1205,14 +1331,20 @@ static int insert_links(struct ctl_table_header *head)
 	int err;
 
 	if (head->set == root_set)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	core_parent = xlate_dir(root_set, head->parent);
 	if (IS_ERR(core_parent))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (get_links(core_parent, head->ctl_table, head->root))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	core_parent->header.nreg++;
 	spin_unlock(&sysctl_lock);
@@ -1224,15 +1356,19 @@ static int insert_links(struct ctl_table_header *head)
 	if (!links)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 	if (get_links(core_parent, head->ctl_table, head->root)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(links);
 		goto out;
 	}
 
 	err = insert_header(core_parent, links);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(links);
+}
 out:
 	drop_sysctl_table(&core_parent->header);
 	return err;
@@ -1298,13 +1434,16 @@ struct ctl_table_header *__register_sysctl_table(
 	header = kzalloc(sizeof(struct ctl_table_header) +
 			 sizeof(struct ctl_node)*nr_entries, GFP_KERNEL);
 	if (!header)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	node = (struct ctl_node *)(header + 1);
 	init_header(header, root, set, node, table);
 	if (sysctl_check_table(path, table))
 		goto fail;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&sysctl_lock);
 	dir = &set->dir;
 	/* Reference moved down the diretory tree get_subdir */
@@ -1329,6 +1468,7 @@ struct ctl_table_header *__register_sysctl_table(
 			goto fail;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&sysctl_lock);
 	if (insert_header(dir, header))
 		goto fail_put_dir_locked;
@@ -1369,7 +1509,9 @@ static char *append_path(const char *path, char *pos, const char *name)
 	int namelen;
 	namelen = strlen(name);
 	if (((pos - path) + namelen + 2) >= PATH_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	memcpy(pos, name, namelen);
 	pos[namelen] = '/';
 	pos[namelen + 1] = '\0';
@@ -1385,7 +1527,9 @@ static int count_subheaders(struct ctl_table *table)
 
 	/* special case: no directory and empty directory */
 	if (!table || !table->procname)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	for (entry = table; entry->procname; entry++) {
 		if (entry->child)
@@ -1413,6 +1557,7 @@ static int register_leaf_sysctl_tables(const char *path, char *pos,
 			nr_files++;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	files = table;
 	/* If there are mixed files and directories we need a new table */
 	if (nr_dirs && nr_files) {
@@ -1422,6 +1567,7 @@ static int register_leaf_sysctl_tables(const char *path, char *pos,
 		if (!files)
 			goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ctl_table_arg = files;
 		for (new = files, entry = table; entry->procname; entry++) {
 			if (entry->child)
@@ -1436,6 +1582,7 @@ static int register_leaf_sysctl_tables(const char *path, char *pos,
 		struct ctl_table_header *header;
 		header = __register_sysctl_table(set, path, files);
 		if (!header) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(ctl_table_arg);
 			goto out;
 		}
@@ -1453,6 +1600,7 @@ static int register_leaf_sysctl_tables(const char *path, char *pos,
 		if (!entry->child)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENAMETOOLONG;
 		child_pos = append_path(path, pos, entry->procname);
 		if (!child_pos)
@@ -1464,6 +1612,7 @@ static int register_leaf_sysctl_tables(const char *path, char *pos,
 		if (err)
 			goto out;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 out:
 	/* On failure our caller will unregister all registered subheaders */
@@ -1493,7 +1642,9 @@ struct ctl_table_header *__register_sysctl_paths(
 
 	pos = new_path = kmalloc(PATH_MAX, GFP_KERNEL);
 	if (!new_path)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	pos[0] = '\0';
 	for (component = path; component->procname; component++) {
@@ -1537,6 +1688,7 @@ struct ctl_table_header *__register_sysctl_paths(
 		unregister_sysctl_table(subh);
 		kfree(table);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(header);
 	header = NULL;
 	goto out;
@@ -1586,11 +1738,15 @@ static void put_links(struct ctl_table_header *header)
 	struct ctl_table *entry;
 
 	if (header->set == root_set)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	core_parent = xlate_dir(root_set, parent);
 	if (IS_ERR(core_parent))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for (entry = header->ctl_table; entry->procname; entry++) {
 		struct ctl_table_header *link_head;
@@ -1604,6 +1760,7 @@ static void put_links(struct ctl_table_header *header)
 			drop_sysctl_table(link_head);
 		}
 		else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pr_err("sysctl link missing during unregister: ");
 			sysctl_print_dir(parent);
 			pr_cont("/%s\n", name);
@@ -1616,7 +1773,9 @@ static void drop_sysctl_table(struct ctl_table_header *header)
 	struct ctl_dir *parent = header->parent;
 
 	if (--header->nreg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	put_links(header);
 	start_unregistering(header);
@@ -1640,7 +1799,9 @@ void unregister_sysctl_table(struct ctl_table_header * header)
 	might_sleep();
 
 	if (header == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	nr_subheaders = count_subheaders(header->ctl_table_arg);
 	if (unlikely(nr_subheaders > 1)) {
@@ -1648,16 +1809,19 @@ void unregister_sysctl_table(struct ctl_table_header * header)
 		int i;
 
 		subheaders = (struct ctl_table_header **)(header + 1);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (i = nr_subheaders -1; i >= 0; i--) {
 			struct ctl_table_header *subh = subheaders[i];
 			struct ctl_table *table = subh->ctl_table_arg;
 			unregister_sysctl_table(subh);
 			kfree(table);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(header);
 		return;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&sysctl_lock);
 	drop_sysctl_table(header);
 	spin_unlock(&sysctl_lock);
@@ -1668,6 +1832,7 @@ void setup_sysctl_set(struct ctl_table_set *set,
 	struct ctl_table_root *root,
 	int (*is_seen)(struct ctl_table_set *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(set, 0, sizeof(*set));
 	set->is_seen = is_seen;
 	init_header(&set->dir.header, root, set, NULL, root_table);
diff --git a/fs/proc/proc_tty.c b/fs/proc/proc_tty.c
index d0cf1c5..e8de260 100644
--- a/fs/proc/proc_tty.c
+++ b/fs/proc/proc_tty.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * proc_tty.c -- handles /proc/tty
@@ -34,17 +36,26 @@ static void show_tty_range(struct seq_file *m, struct tty_driver *p,
 		seq_printf(m, "%3d %d-%d ", MAJOR(from), MINOR(from),
 			MINOR(from) + num - 1);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_printf(m, "%3d %7d ", MAJOR(from), MINOR(from));
 	}
 	switch (p->type) {
 	case TTY_DRIVER_TYPE_SYSTEM:
 		seq_puts(m, "system");
 		if (p->subtype == SYSTEM_TYPE_TTY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			seq_puts(m, ":/dev/tty");
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (p->subtype == SYSTEM_TYPE_SYSCONS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			seq_puts(m, ":console");
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (p->subtype == SYSTEM_TYPE_CONSOLE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			seq_puts(m, ":vtmaster");
+}
 		break;
 	case TTY_DRIVER_TYPE_CONSOLE:
 		seq_puts(m, "console");
@@ -164,7 +175,9 @@ void proc_tty_unregister_driver(struct tty_driver *driver)
 
 	ent = driver->proc_entry;
 	if (!ent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 		
 	remove_proc_entry(ent->name, proc_tty_driver);
 	
@@ -177,7 +190,9 @@ void proc_tty_unregister_driver(struct tty_driver *driver)
 void __init proc_tty_init(void)
 {
 	if (!proc_mkdir("tty", NULL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	proc_mkdir("tty/ldisc", NULL);	/* Preserved: it's userspace visible */
 	/*
 	 * /proc/tty/driver/serial reveals the exact character counts for
diff --git a/fs/proc/root.c b/fs/proc/root.c
index 4e42aba..807709d 100644
--- a/fs/proc/root.c
+++ b/fs/proc/root.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/proc/root.c
@@ -43,29 +45,41 @@ int proc_parse_options(char *options, struct pid_namespace *pid)
 	int option;
 
 	if (!options)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((p = strsep(&options, ",")) != NULL) {
 		int token;
 		if (!*p)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		args[0].to = args[0].from = NULL;
 		token = match_token(p, tokens, args);
 		switch (token) {
 		case Opt_gid:
 			if (match_int(&args[0], &option))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pid->pid_gid = make_kgid(current_user_ns(), option);
 			break;
 		case Opt_hidepid:
 			if (match_int(&args[0], &option))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (option < HIDEPID_OFF ||
 			    option > HIDEPID_INVISIBLE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				pr_err("proc: hidepid value must be between 0 and 2.\n");
 				return 0;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pid->hide_pid = option;
 			break;
 		default:
@@ -75,6 +89,7 @@ int proc_parse_options(char *options, struct pid_namespace *pid)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -92,6 +107,7 @@ static struct dentry *proc_mount(struct file_system_type *fs_type,
 	struct pid_namespace *ns;
 
 	if (flags & MS_KERNMOUNT) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ns = data;
 		data = NULL;
 	} else {
@@ -129,7 +145,9 @@ void __init proc_root_init(void)
 	set_proc_pid_nlink();
 	err = register_filesystem(&proc_fs_type);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	proc_self_init();
 	proc_thread_self_init();
@@ -163,7 +181,9 @@ static int proc_root_getattr(const struct path *path, struct kstat *stat,
 static struct dentry *proc_root_lookup(struct inode * dir, struct dentry * dentry, unsigned int flags)
 {
 	if (!proc_pid_lookup(dir, dentry, flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	
 	return proc_lookup(dir, dentry, flags);
 }
@@ -173,7 +193,9 @@ static int proc_root_readdir(struct file *file, struct dir_context *ctx)
 	if (ctx->pos < FIRST_PROCESS_ENTRY) {
 		int error = proc_readdir(file, ctx);
 		if (unlikely(error <= 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return error;
+}
 		ctx->pos = FIRST_PROCESS_ENTRY;
 	}
 
@@ -221,7 +243,9 @@ int pid_ns_prepare_proc(struct pid_namespace *ns)
 
 	mnt = kern_mount_data(&proc_fs_type, ns);
 	if (IS_ERR(mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(mnt);
+}
 
 	ns->proc_mnt = mnt;
 	return 0;
diff --git a/fs/proc/self.c b/fs/proc/self.c
index 31326bb..6abd008 100644
--- a/fs/proc/self.c
+++ b/fs/proc/self.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/sched.h>
 #include <linux/slab.h>
@@ -16,11 +18,15 @@ static const char *proc_self_get_link(struct dentry *dentry,
 	char *name;
 
 	if (!tgid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 	/* 11 for max length of signed int in decimal + NULL term */
 	name = kmalloc(12, dentry ? GFP_KERNEL : GFP_ATOMIC);
 	if (unlikely(!name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return dentry ? ERR_PTR(-ENOMEM) : ERR_PTR(-ECHILD);
+}
 	sprintf(name, "%d", tgid);
 	set_delayed_call(done, kfree_link, name);
 	return name;
@@ -51,14 +57,18 @@ int proc_setup_self(struct super_block *s)
 			inode->i_op = &proc_self_inode_operations;
 			d_add(self, inode);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dput(self);
 			self = ERR_PTR(-ENOMEM);
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		self = ERR_PTR(-ENOMEM);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_unlock(root_inode);
 	if (IS_ERR(self)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("proc_fill_super: can't allocate /proc/self\n");
 		return PTR_ERR(self);
 	}
diff --git a/fs/proc/softirqs.c b/fs/proc/softirqs.c
index 24072cc..16cc90c 100644
--- a/fs/proc/softirqs.c
+++ b/fs/proc/softirqs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/init.h>
 #include <linux/kernel_stat.h>
@@ -12,6 +14,7 @@ static int show_softirqs(struct seq_file *p, void *v)
 	int i, j;
 
 	seq_puts(p, "                    ");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(i)
 		seq_printf(p, "CPU%-8d", i);
 	seq_putc(p, '\n');
@@ -27,6 +30,7 @@ static int show_softirqs(struct seq_file *p, void *v)
 
 static int softirqs_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return single_open(file, show_softirqs, NULL);
 }
 
diff --git a/fs/proc/stat.c b/fs/proc/stat.c
index 59749df..8bb99ff 100644
--- a/fs/proc/stat.c
+++ b/fs/proc/stat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/cpumask.h>
 #include <linux/fs.h>
diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c
index 6744bd7..122f8629 100644
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/mm.h>
 #include <linux/vmacache.h>
@@ -42,10 +44,14 @@ void task_mem(struct seq_file *m, struct mm_struct *mm)
 	 */
 	hiwater_vm = total_vm = mm->total_vm;
 	if (hiwater_vm < mm->hiwater_vm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hiwater_vm = mm->hiwater_vm;
+}
 	hiwater_rss = total_rss = anon + file + shmem;
 	if (hiwater_rss < mm->hiwater_rss)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hiwater_rss = mm->hiwater_rss;
+}
 
 	text = (PAGE_ALIGN(mm->end_code) - (mm->start_code & PAGE_MASK)) >> 10;
 	lib = (mm->exec_vm << (PAGE_SHIFT-10)) - text;
@@ -119,6 +125,7 @@ static void hold_task_mempolicy(struct proc_maps_private *priv)
 }
 static void release_task_mempolicy(struct proc_maps_private *priv)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mpol_put(priv->task_mempolicy);
 }
 #else
@@ -143,7 +150,9 @@ static struct vm_area_struct *
 m_next_vma(struct proc_maps_private *priv, struct vm_area_struct *vma)
 {
 	if (vma == priv->tail_vma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	return vma->vm_next ?: priv->tail_vma;
 }
 
@@ -163,15 +172,21 @@ static void *m_start(struct seq_file *m, loff_t *ppos)
 
 	/* See m_cache_vma(). Zero at the start or after lseek. */
 	if (last_addr == -1UL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	priv->task = get_proc_task(priv->inode);
 	if (!priv->task)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ESRCH);
+}
 
 	mm = priv->mm;
 	if (!mm || !mmget_not_zero(mm))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	down_read(&mm->mmap_sem);
 	hold_task_mempolicy(priv);
@@ -182,22 +197,29 @@ static void *m_start(struct seq_file *m, loff_t *ppos)
 		if (vma && vma->vm_start <= last_addr)
 			vma = m_next_vma(priv, vma);
 		if (vma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return vma;
+}
 	}
 
 	m->version = 0;
 	if (pos < mm->map_count) {
 		for (vma = mm->mmap; pos; pos--) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			m->version = vma->vm_start;
 			vma = vma->vm_next;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return vma;
 	}
 
 	/* we do not bother to update m->version in this case */
 	if (pos == mm->map_count && priv->tail_vma)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return priv->tail_vma;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	vma_stop(priv);
 	return NULL;
 }
@@ -232,17 +254,21 @@ static int proc_maps_open(struct inode *inode, struct file *file,
 	struct proc_maps_private *priv = __seq_open_private(file, ops, psize);
 
 	if (!priv)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	priv->inode = inode;
 	priv->mm = proc_mem_open(inode, PTRACE_MODE_READ);
 	if (IS_ERR(priv->mm)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int err = PTR_ERR(priv->mm);
 
 		seq_release_private(inode, file);
 		return err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -285,6 +311,7 @@ static void show_vma_header_prefix(struct seq_file *m,
 				   vm_flags_t flags, unsigned long long pgoff,
 				   dev_t dev, unsigned long ino)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_setwidth(m, 25 + sizeof(void *) * 6 - 1);
 	seq_printf(m, "%08lx-%08lx %c%c%c%c %08llx %02x:%02x %lu ",
 		   start,
@@ -310,6 +337,7 @@ show_map_vma(struct seq_file *m, struct vm_area_struct *vma, int is_pid)
 	const char *name = NULL;
 
 	if (file) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct inode *inode = file_inode(vma->vm_file);
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
@@ -339,18 +367,22 @@ show_map_vma(struct seq_file *m, struct vm_area_struct *vma, int is_pid)
 	name = arch_vma_name(vma);
 	if (!name) {
 		if (!mm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			name = "[vdso]";
 			goto done;
 		}
 
 		if (vma->vm_start <= mm->brk &&
 		    vma->vm_end >= mm->start_brk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			name = "[heap]";
 			goto done;
 		}
 
 		if (is_stack(vma))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			name = "[stack]";
+}
 	}
 
 done:
@@ -375,6 +407,7 @@ static int show_pid_map(struct seq_file *m, void *v)
 
 static int show_tid_map(struct seq_file *m, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return show_map(m, v, 0);
 }
 
@@ -399,6 +432,7 @@ static int pid_maps_open(struct inode *inode, struct file *file)
 
 static int tid_maps_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_maps_open(inode, file, &proc_tid_maps_op);
 }
 
@@ -461,6 +495,7 @@ struct mem_size_stats {
 static void smaps_account(struct mem_size_stats *mss, struct page *page,
 		bool compound, bool young, bool dirty)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int i, nr = compound ? 1 << compound_order(page) : 1;
 	unsigned long size = nr * PAGE_SIZE;
 
@@ -529,6 +564,7 @@ static void smaps_pte_entry(pte_t *pte, unsigned long addr,
 	struct page *page = NULL;
 
 	if (pte_present(*pte)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		page = vm_normal_page(vma, addr, *pte);
 	} else if (is_swap_pte(*pte)) {
 		swp_entry_t swpent = pte_to_swp_entry(*pte);
@@ -609,6 +645,7 @@ static int smaps_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end,
 
 	ptl = pmd_trans_huge_lock(pmd, vma);
 	if (ptl) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pmd_present(*pmd))
 			smaps_pmd_entry(pmd, addr, walk);
 		spin_unlock(ptl);
@@ -688,6 +725,7 @@ static void show_smap_vma_flags(struct seq_file *m, struct vm_area_struct *vma)
 	size_t i;
 
 	seq_puts(m, "VmFlags: ");
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < BITS_PER_LONG; i++) {
 		if (!mnemonics[i][0])
 			continue;
@@ -709,6 +747,7 @@ static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,
 	struct page *page = NULL;
 
 	if (pte_present(*pte)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		page = vm_normal_page(vma, addr, *pte);
 	} else if (is_swap_pte(*pte)) {
 		swp_entry_t swpent = pte_to_swp_entry(*pte);
@@ -752,6 +791,7 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)
 	bool last_vma;
 
 	if (priv->rollup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rollup_mode = true;
 		mss = priv->rollup;
 		if (mss->first) {
@@ -862,11 +902,13 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)
 
 static int show_pid_smap(struct seq_file *m, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return show_smap(m, v, 1);
 }
 
 static int show_tid_smap(struct seq_file *m, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return show_smap(m, v, 0);
 }
 
@@ -886,6 +928,7 @@ static const struct seq_operations proc_tid_smaps_op = {
 
 static int pid_smaps_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_maps_open(inode, file, &proc_pid_smaps_op);
 }
 
@@ -896,7 +939,9 @@ static int pid_smaps_rollup_open(struct inode *inode, struct file *file)
 	int ret = do_maps_open(inode, file, &proc_pid_smaps_op);
 
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	seq = file->private_data;
 	priv = seq->private;
 	priv->rollup = kzalloc(sizeof(*priv->rollup), GFP_KERNEL);
@@ -910,6 +955,7 @@ static int pid_smaps_rollup_open(struct inode *inode, struct file *file)
 
 static int tid_smaps_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_maps_open(inode, file, &proc_tid_smaps_op);
 }
 
@@ -1017,6 +1063,7 @@ static int clear_refs_pte_range(pmd_t *pmd, unsigned long addr,
 
 	ptl = pmd_trans_huge_lock(pmd, vma);
 	if (ptl) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (cp->type == CLEAR_REFS_SOFT_DIRTY) {
 			clear_soft_dirty_pmd(vma, addr, pmd);
 			goto out;
@@ -1072,7 +1119,9 @@ static int clear_refs_test_walk(unsigned long start, unsigned long end,
 	struct vm_area_struct *vma = walk->vma;
 
 	if (vma->vm_flags & VM_PFNMAP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 1;
+}
 
 	/*
 	 * Writing 1 to /proc/pid/clear_refs affects all pages.
@@ -1101,7 +1150,9 @@ static ssize_t clear_refs_write(struct file *file, const char __user *buf,
 
 	memset(buffer, 0, sizeof(buffer));
 	if (count > sizeof(buffer) - 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = sizeof(buffer) - 1;
+}
 	if (copy_from_user(buffer, buf, count))
 		return -EFAULT;
 	rv = kstrtoint(strstrip(buffer), 10, &itype);
@@ -1205,12 +1256,14 @@ struct pagemapread {
 
 static inline pagemap_entry_t make_pme(u64 frame, u64 flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (pagemap_entry_t) { .pme = (frame & PM_PFRAME_MASK) | flags };
 }
 
 static int add_to_pagemap(unsigned long addr, pagemap_entry_t *pme,
 			  struct pagemapread *pm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pm->buffer[pm->pos++] = *pme;
 	if (pm->pos >= pm->len)
 		return PM_END_OF_BUFFER;
@@ -1224,6 +1277,7 @@ static int pagemap_pte_hole(unsigned long start, unsigned long end,
 	unsigned long addr = start;
 	int err = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (addr < end) {
 		struct vm_area_struct *vma = find_vma(walk->mm, addr);
 		pagemap_entry_t pme = make_pme(0, 0);
@@ -1264,6 +1318,7 @@ static pagemap_entry_t pte_to_pagemap_entry(struct pagemapread *pm,
 	struct page *page = NULL;
 
 	if (pte_present(pte)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (pm->show_pfn)
 			frame = pte_pfn(pte);
 		flags |= PM_PRESENT;
@@ -1363,6 +1418,7 @@ static int pagemap_pmd_range(pmd_t *pmdp, unsigned long addr, unsigned long end,
 	 * goes beyond vma->vm_end.
 	 */
 	orig_pte = pte = pte_offset_map_lock(walk->mm, pmdp, addr, &ptl);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (; addr < end; pte++, addr += PAGE_SIZE) {
 		pagemap_entry_t pme;
 
@@ -1391,7 +1447,9 @@ static int pagemap_hugetlb_range(pte_t *ptep, unsigned long hmask,
 	pte_t pte;
 
 	if (vma->vm_flags & VM_SOFTDIRTY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= PM_SOFT_DIRTY;
+}
 
 	pte = huge_ptep_get(ptep);
 	if (pte_present(pte)) {
@@ -1463,6 +1521,7 @@ static ssize_t pagemap_read(struct file *file, char __user *buf,
 	unsigned long end_vaddr;
 	int ret = 0, copied = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!mm || !mmget_not_zero(mm))
 		goto out;
 
@@ -1549,7 +1608,9 @@ static int pagemap_open(struct inode *inode, struct file *file)
 
 	mm = proc_mem_open(inode, PTRACE_MODE_READ);
 	if (IS_ERR(mm))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(mm);
+}
 	file->private_data = mm;
 	return 0;
 }
@@ -1559,7 +1620,9 @@ static int pagemap_release(struct inode *inode, struct file *file)
 	struct mm_struct *mm = file->private_data;
 
 	if (mm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mmdrop(mm);
+}
 	return 0;
 }
 
@@ -1592,6 +1655,7 @@ struct numa_maps_private {
 static void gather_stats(struct page *page, struct numa_maps *md, int pte_dirty,
 			unsigned long nr_pages)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int count = page_mapcount(page);
 
 	md->pages += nr_pages;
@@ -1623,7 +1687,9 @@ static struct page *can_gather_numa_stats(pte_t pte, struct vm_area_struct *vma,
 	int nid;
 
 	if (!pte_present(pte))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	page = vm_normal_page(vma, addr, pte);
 	if (!page)
@@ -1692,6 +1758,7 @@ static int gather_pte_stats(pmd_t *pmd, unsigned long addr,
 #endif
 	orig_pte = pte = pte_offset_map_lock(walk->mm, pmd, addr, &ptl);
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct page *page = can_gather_numa_stats(*pte, vma, addr);
 		if (!page)
 			continue;
@@ -1706,6 +1773,7 @@ static int gather_pte_stats(pmd_t *pmd, unsigned long addr,
 static int gather_hugetlb_stats(pte_t *pte, unsigned long hmask,
 		unsigned long addr, unsigned long end, struct mm_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pte_t huge_pte = huge_ptep_get(pte);
 	struct numa_maps *md;
 	struct page *page;
@@ -1752,7 +1820,9 @@ static int show_numa_map(struct seq_file *m, void *v, int is_pid)
 	int nid;
 
 	if (!mm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* Ensure we start with an empty set of numa_maps statistics. */
 	memset(md, 0, sizeof(*md));
@@ -1819,11 +1889,13 @@ static int show_numa_map(struct seq_file *m, void *v, int is_pid)
 
 static int show_pid_numa_map(struct seq_file *m, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return show_numa_map(m, v, 1);
 }
 
 static int show_tid_numa_map(struct seq_file *m, void *v)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return show_numa_map(m, v, 0);
 }
 
@@ -1844,17 +1916,20 @@ static const struct seq_operations proc_tid_numa_maps_op = {
 static int numa_maps_open(struct inode *inode, struct file *file,
 			  const struct seq_operations *ops)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return proc_maps_open(inode, file, ops,
 				sizeof(struct numa_maps_private));
 }
 
 static int pid_numa_maps_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return numa_maps_open(inode, file, &proc_pid_numa_maps_op);
 }
 
 static int tid_numa_maps_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return numa_maps_open(inode, file, &proc_tid_numa_maps_op);
 }
 
diff --git a/fs/proc/thread_self.c b/fs/proc/thread_self.c
index b813e3b..078192b 100644
--- a/fs/proc/thread_self.c
+++ b/fs/proc/thread_self.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/sched.h>
 #include <linux/slab.h>
@@ -17,7 +19,9 @@ static const char *proc_thread_self_get_link(struct dentry *dentry,
 	char *name;
 
 	if (!pid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 	name = kmalloc(PROC_NUMBUF + 6 + PROC_NUMBUF,
 				dentry ? GFP_KERNEL : GFP_ATOMIC);
 	if (unlikely(!name))
@@ -52,14 +56,18 @@ int proc_setup_thread_self(struct super_block *s)
 			inode->i_op = &proc_thread_self_inode_operations;
 			d_add(thread_self, inode);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			dput(thread_self);
 			thread_self = ERR_PTR(-ENOMEM);
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		thread_self = ERR_PTR(-ENOMEM);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_unlock(root_inode);
 	if (IS_ERR(thread_self)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_err("proc_fill_super: can't allocate /proc/thread_self\n");
 		return PTR_ERR(thread_self);
 	}
diff --git a/fs/proc/uptime.c b/fs/proc/uptime.c
index 95a708d..bfa6f07 100644
--- a/fs/proc/uptime.c
+++ b/fs/proc/uptime.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/fs.h>
 #include <linux/init.h>
diff --git a/fs/proc/version.c b/fs/proc/version.c
index 94901e8..fad290d 100644
--- a/fs/proc/version.c
+++ b/fs/proc/version.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/fs.h>
 #include <linux/init.h>
diff --git a/fs/proc_namespace.c b/fs/proc_namespace.c
index 7626ee1..ee1b3f5 100644
--- a/fs/proc_namespace.c
+++ b/fs/proc_namespace.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * fs/proc_namespace.c - handling of /proc/<pid>/{mounts,mountinfo,mountstats}
@@ -30,6 +32,7 @@ static unsigned mounts_poll(struct file *file, poll_table *wait)
 
 	event = ACCESS_ONCE(ns->event);
 	if (m->poll_event != event) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		m->poll_event = event;
 		res |= POLLERR | POLLPRI;
 	}
@@ -55,7 +58,9 @@ static int show_sb_opts(struct seq_file *m, struct super_block *sb)
 
 	for (fs_infop = fs_info; fs_infop->flag; fs_infop++) {
 		if (sb->s_flags & fs_infop->flag)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			seq_puts(m, fs_infop->str);
+}
 	}
 
 	return security_sb_show_options(m, sb);
@@ -89,6 +94,7 @@ static void show_type(struct seq_file *m, struct super_block *sb)
 {
 	mangle(m, sb->s_type->name);
 	if (sb->s_subtype && sb->s_subtype[0]) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_putc(m, '.');
 		mangle(m, sb->s_subtype);
 	}
@@ -103,6 +109,7 @@ static int show_vfsmnt(struct seq_file *m, struct vfsmount *mnt)
 	int err;
 
 	if (sb->s_op->show_devname) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sb->s_op->show_devname(m, mnt_path.dentry);
 		if (err)
 			goto out;
@@ -163,16 +170,21 @@ static int show_mountinfo(struct seq_file *m, struct vfsmount *mnt)
 		int dom = get_dominating_id(r, &p->root);
 		seq_printf(m, " master:%i", master);
 		if (dom && dom != master)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			seq_printf(m, " propagate_from:%i", dom);
+}
 	}
 	if (IS_MNT_UNBINDABLE(r))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_puts(m, " unbindable");
+}
 
 	/* Filesystem specific data */
 	seq_puts(m, " - ");
 	show_type(m, sb);
 	seq_putc(m, ' ');
 	if (sb->s_op->show_devname) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = sb->s_op->show_devname(m, mnt->mnt_root);
 		if (err)
 			goto out;
@@ -200,6 +212,7 @@ static int show_vfsstat(struct seq_file *m, struct vfsmount *mnt)
 
 	/* device */
 	if (sb->s_op->show_devname) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_puts(m, "device ");
 		err = sb->s_op->show_devname(m, mnt_path.dentry);
 		if (err)
@@ -249,16 +262,20 @@ static int mounts_open_common(struct inode *inode, struct file *file,
 	if (!task)
 		goto err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	task_lock(task);
 	nsp = task->nsproxy;
 	if (!nsp || !nsp->mnt_ns) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		task_unlock(task);
 		put_task_struct(task);
 		goto err;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ns = nsp->mnt_ns;
 	get_mnt_ns(ns);
 	if (!task->fs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		task_unlock(task);
 		put_task_struct(task);
 		ret = -ENOENT;
@@ -312,6 +329,7 @@ static int mountinfo_open(struct inode *inode, struct file *file)
 
 static int mountstats_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mounts_open_common(inode, file, show_vfsstat);
 }
 
diff --git a/fs/pstore/inode.c b/fs/pstore/inode.c
index d814723..130cae4 100644
--- a/fs/pstore/inode.c
+++ b/fs/pstore/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Persistent Storage - ramfs parts.
  *
diff --git a/fs/quota/dquot.c b/fs/quota/dquot.c
index 4cd0c23..065675f 100644
--- a/fs/quota/dquot.c
+++ b/fs/quota/dquot.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * Implementation of the diskquota system for the LINUX operating system. QUOTA
@@ -135,6 +137,7 @@ static DECLARE_WAIT_QUEUE_HEAD(dquot_ref_wq);
 void __quota_error(struct super_block *sb, const char *func,
 		   const char *fmt, ...)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (printk_ratelimit()) {
 		va_list args;
 		struct va_format vaf;
@@ -163,6 +166,7 @@ static struct kmem_cache *dquot_cachep;
 
 int register_quota_format(struct quota_format_type *fmt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&dq_list_lock);
 	fmt->qf_next = quota_formats;
 	quota_formats = fmt;
@@ -176,6 +180,7 @@ void unregister_quota_format(struct quota_format_type *fmt)
 	struct quota_format_type **actqf;
 
 	spin_lock(&dq_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (actqf = &quota_formats; *actqf && *actqf != fmt;
 	     actqf = &(*actqf)->qf_next)
 		;
@@ -190,6 +195,7 @@ static struct quota_format_type *find_quota_format(int id)
 	struct quota_format_type *actqf;
 
 	spin_lock(&dq_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (actqf = quota_formats; actqf && actqf->qf_fmt_id != id;
 	     actqf = actqf->qf_next)
 		;
@@ -218,6 +224,7 @@ static struct quota_format_type *find_quota_format(int id)
 
 static void put_quota_format(struct quota_format_type *fmt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	module_put(fmt->qf_owner);
 }
 
@@ -256,6 +263,7 @@ static int __dquot_initialize(struct inode *inode, int type);
 static inline unsigned int
 hashfn(const struct super_block *sb, struct kqid qid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int id = from_kqid(&init_user_ns, qid);
 	int type = qid.type;
 	unsigned long tmp;
@@ -276,6 +284,7 @@ static inline void insert_dquot_hash(struct dquot *dquot)
 
 static inline void remove_dquot_hash(struct dquot *dquot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_del_init(&dquot->dq_hash);
 }
 
@@ -285,6 +294,7 @@ static struct dquot *find_dquot(unsigned int hashent, struct super_block *sb,
 	struct hlist_node *node;
 	struct dquot *dquot;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each (node, dquot_hash+hashent) {
 		dquot = hlist_entry(node, struct dquot, dq_hash);
 		if (dquot->dq_sb == sb && qid_eq(dquot->dq_id, qid))
@@ -296,12 +306,14 @@ static struct dquot *find_dquot(unsigned int hashent, struct super_block *sb,
 /* Add a dquot to the tail of the free list */
 static inline void put_dquot_last(struct dquot *dquot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_add_tail(&dquot->dq_free, &free_dquots);
 	dqstats_inc(DQST_FREE_DQUOTS);
 }
 
 static inline void remove_free_dquot(struct dquot *dquot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (list_empty(&dquot->dq_free))
 		return;
 	list_del_init(&dquot->dq_free);
@@ -318,6 +330,7 @@ static inline void put_inuse(struct dquot *dquot)
 
 static inline void remove_inuse(struct dquot *dquot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dqstats_dec(DQST_ALLOC_DQUOTS);
 	list_del(&dquot->dq_inuse);
 }
@@ -327,17 +340,20 @@ static inline void remove_inuse(struct dquot *dquot)
 
 static void wait_on_dquot(struct dquot *dquot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&dquot->dq_lock);
 	mutex_unlock(&dquot->dq_lock);
 }
 
 static inline int dquot_dirty(struct dquot *dquot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return test_bit(DQ_MOD_B, &dquot->dq_flags);
 }
 
 static inline int mark_dquot_dirty(struct dquot *dquot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dquot->dq_sb->dq_op->mark_dirty(dquot);
 }
 
@@ -346,6 +362,7 @@ int dquot_mark_dquot_dirty(struct dquot *dquot)
 {
 	int ret = 1;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_bit(DQ_ACTIVE_B, &dquot->dq_flags))
 		return 0;
 
@@ -373,6 +390,7 @@ static inline int mark_all_dquot_dirty(struct dquot * const *dquot)
 	int ret, err, cnt;
 
 	ret = err = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (cnt = 0; cnt < MAXQUOTAS; cnt++) {
 		if (dquot[cnt])
 			/* Even in case of error we have to continue */
@@ -387,12 +405,14 @@ static inline void dqput_all(struct dquot **dquot)
 {
 	unsigned int cnt;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (cnt = 0; cnt < MAXQUOTAS; cnt++)
 		dqput(dquot[cnt]);
 }
 
 static inline int clear_dquot_dirty(struct dquot *dquot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sb_dqopt(dquot->dq_sb)->flags & DQUOT_NOLIST_DIRTY)
 		return test_and_clear_bit(DQ_MOD_B, &dquot->dq_flags);
 
@@ -408,6 +428,7 @@ static inline int clear_dquot_dirty(struct dquot *dquot)
 
 void mark_info_dirty(struct super_block *sb, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&dq_data_lock);
 	sb_dqopt(sb)->info[type].dqi_flags |= DQF_INFO_DIRTY;
 	spin_unlock(&dq_data_lock);
@@ -424,6 +445,7 @@ int dquot_acquire(struct dquot *dquot)
 	struct quota_info *dqopt = sb_dqopt(dquot->dq_sb);
 
 	mutex_lock(&dquot->dq_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!test_bit(DQ_READ_B, &dquot->dq_flags))
 		ret = dqopt->ops[dquot->dq_id.type]->read_dqblk(dquot);
 	if (ret < 0)
@@ -493,6 +515,7 @@ int dquot_release(struct dquot *dquot)
 	/* Check whether we are not racing with some other dqget() */
 	if (atomic_read(&dquot->dq_count) > 1)
 		goto out_dqlock;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dqopt->ops[dquot->dq_id.type]->release_dqblk) {
 		ret = dqopt->ops[dquot->dq_id.type]->release_dqblk(dquot);
 		/* Write the info */
@@ -512,12 +535,14 @@ EXPORT_SYMBOL(dquot_release);
 
 void dquot_destroy(struct dquot *dquot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kmem_cache_free(dquot_cachep, dquot);
 }
 EXPORT_SYMBOL(dquot_destroy);
 
 static inline void do_destroy_dquot(struct dquot *dquot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dquot->dq_sb->dq_op->destroy_dquot(dquot);
 }
 
@@ -578,6 +603,7 @@ int dquot_scan_active(struct super_block *sb,
 	struct dquot *dquot, *old_dquot = NULL;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(!rwsem_is_locked(&sb->s_umount));
 
 	spin_lock(&dq_list_lock);
@@ -623,6 +649,7 @@ int dquot_writeback_dquots(struct super_block *sb, int type)
 	int cnt;
 	int err, ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(!rwsem_is_locked(&sb->s_umount));
 
 	for (cnt = 0; cnt < MAXQUOTAS; cnt++) {
@@ -666,6 +693,7 @@ EXPORT_SYMBOL(dquot_writeback_dquots);
 /* Write all dquot structures to disk and make them visible from userspace */
 int dquot_quota_sync(struct super_block *sb, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct quota_info *dqopt = sb_dqopt(sb);
 	int cnt;
 	int ret;
@@ -710,6 +738,7 @@ dqcache_shrink_scan(struct shrinker *shrink, struct shrink_control *sc)
 
 	spin_lock(&dq_list_lock);
 	head = free_dquots.prev;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (head != &free_dquots && sc->nr_to_scan) {
 		dquot = list_entry(head, struct dquot, dq_free);
 		remove_dquot_hash(dquot);
@@ -745,7 +774,9 @@ void dqput(struct dquot *dquot)
 	int ret;
 
 	if (!dquot)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 #ifdef CONFIG_QUOTA_DEBUG
 	if (!atomic_read(&dquot->dq_count)) {
 		quota_error(dquot->dq_sb, "trying to free free dquot of %s %d",
@@ -801,6 +832,7 @@ EXPORT_SYMBOL(dqput);
 
 struct dquot *dquot_alloc(struct super_block *sb, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return kmem_cache_zalloc(dquot_cachep, GFP_NOFS);
 }
 EXPORT_SYMBOL(dquot_alloc);
@@ -836,6 +868,7 @@ static struct dquot *get_empty_dquot(struct super_block *sb, int type)
  */
 struct dquot *dqget(struct super_block *sb, struct kqid qid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int hashent = hashfn(sb, qid);
 	struct dquot *dquot, *empty = NULL;
 
@@ -913,6 +946,7 @@ EXPORT_SYMBOL(dqget);
 
 static inline struct dquot **i_dquot(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return inode->i_sb->s_op->get_dquots(inode);
 }
 
@@ -922,7 +956,9 @@ static int dqinit_needed(struct inode *inode, int type)
 	int cnt;
 
 	if (IS_NOQUOTA(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	dquots = i_dquot(inode);
 	if (type != -1)
@@ -943,6 +979,7 @@ static int add_dquot_ref(struct super_block *sb, int type)
 	int err = 0;
 
 	spin_lock(&sb->s_inode_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(inode, &sb->s_inodes, i_sb_list) {
 		spin_lock(&inode->i_lock);
 		if ((inode->i_state & (I_FREEING|I_WILL_FREE|I_NEW)) ||
@@ -997,6 +1034,7 @@ static int add_dquot_ref(struct super_block *sb, int type)
 static void remove_inode_dquot_ref(struct inode *inode, int type,
 				   struct list_head *tofree_head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct dquot **dquots = i_dquot(inode);
 	struct dquot *dquot = dquots[type];
 
@@ -1032,6 +1070,7 @@ static void put_dquot_list(struct list_head *tofree_head)
 	struct dquot *dquot;
 
 	act_head = tofree_head->next;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (act_head != tofree_head) {
 		dquot = list_entry(act_head, struct dquot, dq_free);
 		act_head = act_head->next;
@@ -1048,6 +1087,7 @@ static void remove_dquot_ref(struct super_block *sb, int type,
 	int reserved = 0;
 
 	spin_lock(&sb->s_inode_list_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(inode, &sb->s_inodes, i_sb_list) {
 		/*
 		 *  We have to scan also I_NEW inodes because they can already
@@ -1079,6 +1119,7 @@ static void drop_dquot_ref(struct super_block *sb, int type)
 	LIST_HEAD(tofree_head);
 
 	if (sb->dq_op) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		remove_dquot_ref(sb, type, &tofree_head);
 		synchronize_srcu(&dquot_srcu);
 		put_dquot_list(&tofree_head);
@@ -1088,6 +1129,7 @@ static void drop_dquot_ref(struct super_block *sb, int type)
 static inline
 void dquot_free_reserved_space(struct dquot *dquot, qsize_t number)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (dquot->dq_dqb.dqb_rsvspace >= number)
 		dquot->dq_dqb.dqb_rsvspace -= number;
 	else {
@@ -1102,6 +1144,7 @@ void dquot_free_reserved_space(struct dquot *dquot, qsize_t number)
 
 static void dquot_decr_inodes(struct dquot *dquot, qsize_t number)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sb_dqopt(dquot->dq_sb)->flags & DQUOT_NEGATIVE_USAGE ||
 	    dquot->dq_dqb.dqb_curinodes >= number)
 		dquot->dq_dqb.dqb_curinodes -= number;
@@ -1114,6 +1157,7 @@ static void dquot_decr_inodes(struct dquot *dquot, qsize_t number)
 
 static void dquot_decr_space(struct dquot *dquot, qsize_t number)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sb_dqopt(dquot->dq_sb)->flags & DQUOT_NEGATIVE_USAGE ||
 	    dquot->dq_dqb.dqb_curspace >= number)
 		dquot->dq_dqb.dqb_curspace -= number;
@@ -1133,6 +1177,7 @@ struct dquot_warn {
 
 static int warning_issued(struct dquot *dquot, const int warntype)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int flag = (warntype == QUOTA_NL_BHARDWARN ||
 		warntype == QUOTA_NL_BSOFTLONGWARN) ? DQ_BLKS_B :
 		((warntype == QUOTA_NL_IHARDWARN ||
@@ -1212,6 +1257,7 @@ static void print_warning(struct dquot_warn *warn)
 static void prepare_warning(struct dquot_warn *warn, struct dquot *dquot,
 			    int warntype)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (warning_issued(dquot, warntype))
 		return;
 	warn->w_type = warntype;
@@ -1228,6 +1274,7 @@ static void flush_warnings(struct dquot_warn *warn)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < MAXQUOTAS; i++) {
 		if (warn[i].w_type == QUOTA_NL_NOWARN)
 			continue;
@@ -1241,6 +1288,7 @@ static void flush_warnings(struct dquot_warn *warn)
 
 static int ignore_hardlimit(struct dquot *dquot)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct mem_dqinfo *info = &sb_dqopt(dquot->dq_sb)->info[dquot->dq_id.type];
 
 	return capable(CAP_SYS_RESOURCE) &&
@@ -1365,6 +1413,7 @@ static int info_idq_free(struct dquot *dquot, qsize_t inodes)
 {
 	qsize_t newinodes;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(DQ_FAKE_B, &dquot->dq_flags) ||
 	    dquot->dq_dqb.dqb_curinodes <= dquot->dq_dqb.dqb_isoftlimit ||
 	    !sb_has_quota_limits_enabled(dquot->dq_sb, dquot->dq_id.type))
@@ -1385,6 +1434,7 @@ static int info_bdq_free(struct dquot *dquot, qsize_t space)
 
 	tspace = dquot->dq_dqb.dqb_curspace + dquot->dq_dqb.dqb_rsvspace;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (test_bit(DQ_FAKE_B, &dquot->dq_flags) ||
 	    tspace <= dquot->dq_dqb.dqb_bsoftlimit)
 		return QUOTA_NL_NOWARN;
@@ -1402,7 +1452,9 @@ static int dquot_active(const struct inode *inode)
 	struct super_block *sb = inode->i_sb;
 
 	if (IS_NOQUOTA(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return sb_any_quota_loaded(sb) & ~sb_any_quota_suspended(sb);
 }
 
@@ -1421,7 +1473,9 @@ static int __dquot_initialize(struct inode *inode, int type)
 	int ret = 0;
 
 	if (!dquot_active(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	dquots = i_dquot(inode);
 
@@ -1519,6 +1573,7 @@ static int __dquot_initialize(struct inode *inode, int type)
 
 int dquot_initialize(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __dquot_initialize(inode, -1);
 }
 EXPORT_SYMBOL(dquot_initialize);
@@ -1529,7 +1584,9 @@ bool dquot_initialize_needed(struct inode *inode)
 	int i;
 
 	if (!dquot_active(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	dquots = i_dquot(inode);
 	for (i = 0; i < MAXQUOTAS; i++)
@@ -1554,6 +1611,7 @@ static void __dquot_drop(struct inode *inode)
 	struct dquot *put[MAXQUOTAS];
 
 	spin_lock(&dq_data_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (cnt = 0; cnt < MAXQUOTAS; cnt++) {
 		put[cnt] = dquots[cnt];
 		dquots[cnt] = NULL;
@@ -1568,7 +1626,9 @@ void dquot_drop(struct inode *inode)
 	int cnt;
 
 	if (IS_NOQUOTA(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/*
 	 * Test before calling to rule out calls from proc and such
@@ -1602,6 +1662,7 @@ static qsize_t *inode_reserved_space(struct inode * inode)
 
 static qsize_t __inode_get_rsv_space(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!inode->i_sb->dq_op->get_reserved_space)
 		return 0;
 	return *inode_reserved_space(inode);
@@ -1612,7 +1673,9 @@ static qsize_t inode_get_rsv_space(struct inode *inode)
 	qsize_t ret;
 
 	if (!inode->i_sb->dq_op->get_reserved_space)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	spin_lock(&inode->i_lock);
 	ret = __inode_get_rsv_space(inode);
 	spin_unlock(&inode->i_lock);
@@ -1640,6 +1703,7 @@ int __dquot_alloc_space(struct inode *inode, qsize_t number, int flags)
 	struct dquot **dquots;
 
 	if (!dquot_active(inode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (reserve) {
 			spin_lock(&inode->i_lock);
 			*inode_reserved_space(inode) += number;
@@ -1712,7 +1776,9 @@ int dquot_alloc_inode(struct inode *inode)
 	struct dquot * const *dquots;
 
 	if (!dquot_active(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	for (cnt = 0; cnt < MAXQUOTAS; cnt++)
 		warn[cnt].w_type = QUOTA_NL_NOWARN;
 
@@ -1755,6 +1821,7 @@ int dquot_claim_space_nodirty(struct inode *inode, qsize_t number)
 	int cnt, index;
 
 	if (!dquot_active(inode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 		*inode_reserved_space(inode) -= number;
 		__inode_add_bytes(inode, number);
@@ -1797,6 +1864,7 @@ void dquot_reclaim_space_nodirty(struct inode *inode, qsize_t number)
 	int cnt, index;
 
 	if (!dquot_active(inode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 		*inode_reserved_space(inode) += number;
 		__inode_sub_bytes(inode, number);
@@ -1841,6 +1909,7 @@ void __dquot_free_space(struct inode *inode, qsize_t number, int flags)
 	int reserve = flags & DQUOT_SPACE_RESERVE, index;
 
 	if (!dquot_active(inode)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (reserve) {
 			spin_lock(&inode->i_lock);
 			*inode_reserved_space(inode) -= number;
@@ -1896,7 +1965,9 @@ void dquot_free_inode(struct inode *inode)
 	int index;
 
 	if (!dquot_active(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	dquots = i_dquot(inode);
 	index = srcu_read_lock(&dquot_srcu);
@@ -1946,7 +2017,9 @@ int __dquot_transfer(struct inode *inode, struct dquot **transfer_to)
 	struct dquot_warn warn_from_space[MAXQUOTAS];
 
 	if (IS_NOQUOTA(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (inode->i_sb->dq_op->get_inode_usage) {
 		ret = inode->i_sb->dq_op->get_inode_usage(inode, &inode_usage);
@@ -2067,7 +2140,9 @@ int dquot_transfer(struct inode *inode, struct iattr *iattr)
 	int ret;
 
 	if (!dquot_active(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (iattr->ia_valid & ATTR_UID && !uid_eq(iattr->ia_uid, inode->i_uid)){
 		dquot = dqget(sb, make_kqid_uid(iattr->ia_uid));
@@ -2103,6 +2178,7 @@ EXPORT_SYMBOL(dquot_transfer);
  */
 int dquot_commit_info(struct super_block *sb, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct quota_info *dqopt = sb_dqopt(sb);
 
 	return dqopt->ops[type]->write_file_info(sb, type);
@@ -2111,6 +2187,7 @@ EXPORT_SYMBOL(dquot_commit_info);
 
 int dquot_get_next_id(struct super_block *sb, struct kqid *qid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct quota_info *dqopt = sb_dqopt(sb);
 
 	if (!sb_has_quota_active(sb, qid->type))
@@ -2144,6 +2221,7 @@ int dquot_file_open(struct inode *inode, struct file *file)
 	int error;
 
 	error = generic_file_open(inode, file);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!error && (file->f_mode & FMODE_WRITE))
 		dquot_initialize(inode);
 	return error;
@@ -2278,6 +2356,7 @@ EXPORT_SYMBOL(dquot_disable);
 
 int dquot_quota_off(struct super_block *sb, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dquot_disable(sb, type,
 			     DQUOT_USAGE_ENABLED | DQUOT_LIMITS_ENABLED);
 }
@@ -2294,6 +2373,7 @@ EXPORT_SYMBOL(dquot_quota_off);
 static int vfs_load_quota_inode(struct inode *inode, int type, int format_id,
 	unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct quota_format_type *fmt = find_quota_format(format_id);
 	struct super_block *sb = inode->i_sb;
 	struct quota_info *dqopt = sb_dqopt(sb);
@@ -2399,6 +2479,7 @@ static int vfs_load_quota_inode(struct inode *inode, int type, int format_id,
 /* Reenable quotas on remount RW */
 int dquot_resume(struct super_block *sb, int type)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct quota_info *dqopt = sb_dqopt(sb);
 	struct inode *inode;
 	int ret = 0, cnt;
@@ -2436,6 +2517,7 @@ EXPORT_SYMBOL(dquot_resume);
 int dquot_quota_on(struct super_block *sb, int type, int format_id,
 		   const struct path *path)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int error = security_quota_on(path->dentry);
 	if (error)
 		return error;
@@ -2497,7 +2579,9 @@ int dquot_quota_on_mount(struct super_block *sb, char *qf_name,
 
 	dentry = lookup_one_len_unlocked(qf_name, sb->s_root, strlen(qf_name));
 	if (IS_ERR(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(dentry);
+}
 
 	if (d_really_is_negative(dentry)) {
 		error = -ENOENT;
@@ -2522,7 +2606,9 @@ static int dquot_quota_enable(struct super_block *sb, unsigned int flags)
 	struct quota_info *dqopt = sb_dqopt(sb);
 
 	if (!(dqopt->flags & DQUOT_QUOTA_SYS_FILE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSYS;
+}
 	/* Accounting cannot be turned on while fs is mounted */
 	flags &= ~(FS_QUOTA_UDQ_ACCT | FS_QUOTA_GDQ_ACCT | FS_QUOTA_PDQ_ACCT);
 	if (!flags)
@@ -2559,7 +2645,9 @@ static int dquot_quota_disable(struct super_block *sb, unsigned int flags)
 	struct quota_info *dqopt = sb_dqopt(sb);
 
 	if (!(dqopt->flags & DQUOT_QUOTA_SYS_FILE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSYS;
+}
 	/*
 	 * We don't support turning off accounting via quotactl. In principle
 	 * quota infrastructure can do this but filesystems don't expect
@@ -2620,7 +2708,9 @@ int dquot_get_dqblk(struct super_block *sb, struct kqid qid,
 
 	dquot = dqget(sb, qid);
 	if (IS_ERR(dquot))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(dquot);
+}
 	do_get_dqblk(dquot, di);
 	dqput(dquot);
 
@@ -2635,7 +2725,9 @@ int dquot_get_next_dqblk(struct super_block *sb, struct kqid *qid,
 	int err;
 
 	if (!sb->dq_op->get_next_id)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSYS;
+}
 	err = sb->dq_op->get_next_id(sb, qid);
 	if (err < 0)
 		return err;
@@ -2662,7 +2754,9 @@ static int do_set_dqblk(struct dquot *dquot, struct qc_dqblk *di)
 	struct mem_dqinfo *dqi = &sb_dqopt(dquot->dq_sb)->info[dquot->dq_id.type];
 
 	if (di->d_fieldmask & ~VFS_QC_MASK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (((di->d_fieldmask & QC_SPC_SOFT) &&
 	     di->d_spc_softlimit > dqi->dqi_max_spc_limit) ||
@@ -2754,6 +2848,7 @@ int dquot_set_dqblk(struct super_block *sb, struct kqid qid,
 
 	dquot = dqget(sb, qid);
 	if (IS_ERR(dquot)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rc = PTR_ERR(dquot);
 		goto out;
 	}
@@ -2773,6 +2868,7 @@ int dquot_get_state(struct super_block *sb, struct qc_state *state)
 	int type;
   
 	memset(state, 0, sizeof(*state));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (type = 0; type < MAXQUOTAS; type++) {
 		if (!sb_has_quota_active(sb, type))
 			continue;
@@ -2961,12 +3057,16 @@ static int __init dquot_init(void)
 	order = 0;
 	dquot_hash = (struct hlist_head *)__get_free_pages(GFP_ATOMIC, order);
 	if (!dquot_hash)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Cannot create dquot hash table");
+}
 
 	for (i = 0; i < _DQST_DQSTAT_LAST; i++) {
 		ret = percpu_counter_init(&dqstats.counter[i], 0, GFP_KERNEL);
 		if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			panic("Cannot create dquot stat counters");
+}
 	}
 
 	/* Find power-of-two hlist_heads which can fit into allocation */
@@ -2986,7 +3086,9 @@ static int __init dquot_init(void)
 		" %ld bytes)\n", nr_hash, order, (PAGE_SIZE << order));
 
 	if (register_shrinker(&dqcache_shrinker))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Cannot register dquot shrinker");
+}
 
 	return 0;
 }
diff --git a/fs/quota/netlink.c b/fs/quota/netlink.c
index 95acdae..02a103a 100644
--- a/fs/quota/netlink.c
+++ b/fs/quota/netlink.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/cred.h>
 #include <linux/init.h>
@@ -49,6 +51,7 @@ void quota_send_warning(struct kqid qid, dev_t dev,
 	 * the fs to free some data could cause deadlocks. */
 	skb = genlmsg_new(msg_size, GFP_NOFS);
 	if (!skb) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR
 		  "VFS: Not enough memory to send quota warning.\n");
 		return;
@@ -96,8 +99,10 @@ EXPORT_SYMBOL(quota_send_warning);
 static int __init quota_init(void)
 {
 	if (genl_register_family(&quota_genl_family) != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_ERR
 		       "VFS: Failed to create quota netlink interface.\n");
+}
 	return 0;
 };
 fs_initcall(quota_init);
diff --git a/fs/ramfs/inode.c b/fs/ramfs/inode.c
index 11201b2..9688111 100644
--- a/fs/ramfs/inode.c
+++ b/fs/ramfs/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Resizable simple ram filesystem for Linux.
  *
@@ -61,6 +63,7 @@ static const struct address_space_operations ramfs_aops = {
 struct inode *ramfs_get_inode(struct super_block *sb,
 				const struct inode *dir, umode_t mode, dev_t dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode * inode = new_inode(sb);
 
 	if (inode) {
@@ -101,6 +104,7 @@ struct inode *ramfs_get_inode(struct super_block *sb,
 static int
 ramfs_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode * inode = ramfs_get_inode(dir->i_sb, dir, mode, dev);
 	int error = -ENOSPC;
 
@@ -115,6 +119,7 @@ ramfs_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev)
 
 static int ramfs_mkdir(struct inode * dir, struct dentry * dentry, umode_t mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int retval = ramfs_mknod(dir, dentry, mode | S_IFDIR, 0);
 	if (!retval)
 		inc_nlink(dir);
@@ -123,6 +128,7 @@ static int ramfs_mkdir(struct inode * dir, struct dentry * dentry, umode_t mode)
 
 static int ramfs_create(struct inode *dir, struct dentry *dentry, umode_t mode, bool excl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ramfs_mknod(dir, dentry, mode | S_IFREG, 0);
 }
 
@@ -133,6 +139,7 @@ static int ramfs_symlink(struct inode * dir, struct dentry *dentry, const char *
 
 	inode = ramfs_get_inode(dir->i_sb, dir, S_IFLNK|S_IRWXUGO, 0);
 	if (inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int l = strlen(symname)+1;
 		error = page_symlink(inode, symname, l);
 		if (!error) {
@@ -165,7 +172,9 @@ static int ramfs_show_options(struct seq_file *m, struct dentry *root)
 	struct ramfs_fs_info *fsi = root->d_sb->s_fs_info;
 
 	if (fsi->mount_opts.mode != RAMFS_DEFAULT_MODE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_printf(m, ",mode=%o", fsi->mount_opts.mode);
+}
 	return 0;
 }
 
@@ -194,6 +203,7 @@ static int ramfs_parse_options(char *data, struct ramfs_mount_opts *opts)
 
 	opts->mode = RAMFS_DEFAULT_MODE;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while ((p = strsep(&data, ",")) != NULL) {
 		if (!*p)
 			continue;
@@ -226,7 +236,9 @@ int ramfs_fill_super(struct super_block *sb, void *data, int silent)
 	fsi = kzalloc(sizeof(struct ramfs_fs_info), GFP_KERNEL);
 	sb->s_fs_info = fsi;
 	if (!fsi)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	err = ramfs_parse_options(data, &fsi->mount_opts);
 	if (err)
@@ -250,11 +262,13 @@ int ramfs_fill_super(struct super_block *sb, void *data, int silent)
 struct dentry *ramfs_mount(struct file_system_type *fs_type,
 	int flags, const char *dev_name, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return mount_nodev(fs_type, flags, data, ramfs_fill_super);
 }
 
 static void ramfs_kill_sb(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(sb->s_fs_info);
 	kill_litter_super(sb);
 }
@@ -271,7 +285,9 @@ int __init init_ramfs_fs(void)
 	static unsigned long once;
 
 	if (test_and_set_bit(0, &once))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return register_filesystem(&ramfs_fs_type);
 }
 fs_initcall(init_ramfs_fs);
diff --git a/fs/read_write.c b/fs/read_write.c
index 0046d72..521079c 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/read_write.c
@@ -36,6 +38,7 @@ EXPORT_SYMBOL(generic_ro_fops);
 
 static inline bool unsigned_offsets(struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return file->f_mode & FMODE_UNSIGNED_OFFSET;
 }
 
@@ -54,14 +57,19 @@ static inline bool unsigned_offsets(struct file *file)
 loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize)
 {
 	if (offset < 0 && !unsigned_offsets(file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (offset > maxsize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (offset != file->f_pos) {
 		file->f_pos = offset;
 		file->f_version = 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return offset;
 }
 EXPORT_SYMBOL(vfs_setpos);
@@ -114,7 +122,9 @@ generic_file_llseek_size(struct file *file, loff_t offset, int whence,
 		 * offset isn't at the end of the file then the offset is data.
 		 */
 		if ((unsigned long long)offset >= eof)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENXIO;
+}
 		break;
 	case SEEK_HOLE:
 		/*
@@ -122,7 +132,10 @@ generic_file_llseek_size(struct file *file, loff_t offset, int whence,
 		 * offset isn't i_size or larger, return i_size.
 		 */
 		if ((unsigned long long)offset >= eof)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENXIO;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		offset = eof;
 		break;
 	}
@@ -180,6 +193,7 @@ EXPORT_SYMBOL(fixed_size_llseek);
  */
 loff_t no_seek_end_llseek(struct file *file, loff_t offset, int whence)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (whence) {
 	case SEEK_SET: case SEEK_CUR:
 		return generic_file_llseek_size(file, offset, whence,
@@ -200,6 +214,7 @@ EXPORT_SYMBOL(no_seek_end_llseek);
  */
 loff_t no_seek_end_llseek_size(struct file *file, loff_t offset, int whence, loff_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (whence) {
 	case SEEK_SET: case SEEK_CUR:
 		return generic_file_llseek_size(file, offset, whence,
@@ -235,6 +250,7 @@ EXPORT_SYMBOL(no_llseek);
 
 loff_t default_llseek(struct file *file, loff_t offset, int whence)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	loff_t retval;
 
@@ -257,6 +273,7 @@ loff_t default_llseek(struct file *file, loff_t offset, int whence)
 			 * offset is data.
 			 */
 			if (offset >= inode->i_size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = -ENXIO;
 				goto out;
 			}
@@ -268,18 +285,22 @@ loff_t default_llseek(struct file *file, loff_t offset, int whence)
 			 * i_size.
 			 */
 			if (offset >= inode->i_size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				retval = -ENXIO;
 				goto out;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			offset = inode->i_size;
 			break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = -EINVAL;
 	if (offset >= 0 || unsigned_offsets(file)) {
 		if (offset != file->f_pos) {
 			file->f_pos = offset;
 			file->f_version = 0;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = offset;
 	}
 out:
@@ -295,7 +316,9 @@ loff_t vfs_llseek(struct file *file, loff_t offset, int whence)
 	fn = no_llseek;
 	if (file->f_mode & FMODE_LSEEK) {
 		if (file->f_op->llseek)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			fn = file->f_op->llseek;
+}
 	}
 	return fn(file, offset, whence);
 }
@@ -306,14 +329,19 @@ SYSCALL_DEFINE3(lseek, unsigned int, fd, off_t, offset, unsigned int, whence)
 	off_t retval;
 	struct fd f = fdget_pos(fd);
 	if (!f.file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = -EINVAL;
 	if (whence <= SEEK_MAX) {
 		loff_t res = vfs_llseek(f.file, offset, whence);
 		retval = res;
 		if (res != (loff_t)retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			retval = -EOVERFLOW;	/* LFS: should only happen on 32 bit platforms */
+}
 	}
 	fdput_pos(f);
 	return retval;
@@ -322,6 +350,7 @@ SYSCALL_DEFINE3(lseek, unsigned int, fd, off_t, offset, unsigned int, whence)
 #ifdef CONFIG_COMPAT
 COMPAT_SYSCALL_DEFINE3(lseek, unsigned int, fd, compat_off_t, offset, unsigned int, whence)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sys_lseek(fd, offset, whence);
 }
 #endif
@@ -336,7 +365,9 @@ SYSCALL_DEFINE5(llseek, unsigned int, fd, unsigned long, offset_high,
 	loff_t offset;
 
 	if (!f.file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	retval = -EINVAL;
 	if (whence > SEEK_MAX)
@@ -365,23 +396,36 @@ int rw_verify_area(int read_write, struct file *file, const loff_t *ppos, size_t
 
 	inode = file_inode(file);
 	if (unlikely((ssize_t) count < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 	pos = *ppos;
 	if (unlikely(pos < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!unsigned_offsets(file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (count >= -pos) /* both values are in 0..LLONG_MAX */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EOVERFLOW;
+}
 	} else if (unlikely((loff_t) (pos + count) < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!unsigned_offsets(file))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
 	}
 
 	if (unlikely(inode->i_flctx && mandatory_lock(inode))) {
 		retval = locks_mandatory_area(inode, file, pos, pos + count - 1,
 				read_write == READ ? F_RDLCK : F_WRLCK);
 		if (retval < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return retval;
+}
 	}
 	return security_file_permission(file,
 				read_write == READ ? MAY_READ : MAY_WRITE);
@@ -434,24 +478,34 @@ ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 	ssize_t ret;
 
 	if (!(file->f_mode & FMODE_READ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 	if (!(file->f_mode & FMODE_CAN_READ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (unlikely(!access_ok(VERIFY_WRITE, buf, count)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	ret = rw_verify_area(READ, file, pos, count);
 	if (!ret) {
 		if (count > MAX_RW_COUNT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			count =  MAX_RW_COUNT;
+}
 		ret = __vfs_read(file, buf, count, pos);
 		if (ret > 0) {
 			fsnotify_access(file);
 			add_rchar(current, ret);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inc_syscr(current);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -491,19 +545,24 @@ ssize_t __kernel_write(struct file *file, const void *buf, size_t count, loff_t
 	ssize_t ret;
 
 	if (!(file->f_mode & FMODE_CAN_WRITE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	old_fs = get_fs();
 	set_fs(get_ds());
 	p = (__force const char __user *)buf;
 	if (count > MAX_RW_COUNT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count =  MAX_RW_COUNT;
+}
 	ret = __vfs_write(file, p, count, pos);
 	set_fs(old_fs);
 	if (ret > 0) {
 		fsnotify_modify(file);
 		add_wchar(current, ret);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inc_syscw(current);
 	return ret;
 }
@@ -530,31 +589,42 @@ ssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_
 	ssize_t ret;
 
 	if (!(file->f_mode & FMODE_WRITE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 	if (!(file->f_mode & FMODE_CAN_WRITE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (unlikely(!access_ok(VERIFY_READ, buf, count)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	ret = rw_verify_area(WRITE, file, pos, count);
 	if (!ret) {
 		if (count > MAX_RW_COUNT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			count =  MAX_RW_COUNT;
+}
 		file_start_write(file);
 		ret = __vfs_write(file, buf, count, pos);
 		if (ret > 0) {
 			fsnotify_modify(file);
 			add_wchar(current, ret);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inc_syscw(current);
 		file_end_write(file);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 static inline loff_t file_pos_read(struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return file->f_pos;
 }
 
@@ -602,16 +672,20 @@ SYSCALL_DEFINE4(pread64, unsigned int, fd, char __user *, buf,
 	ssize_t ret = -EBADF;
 
 	if (pos < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	f = fdget(fd);
 	if (f.file) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ESPIPE;
 		if (f.file->f_mode & FMODE_PREAD)
 			ret = vfs_read(f.file, buf, count, &pos);
 		fdput(f);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -622,16 +696,20 @@ SYSCALL_DEFINE4(pwrite64, unsigned int, fd, const char __user *, buf,
 	ssize_t ret = -EBADF;
 
 	if (pos < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	f = fdget(fd);
 	if (f.file) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ESPIPE;
 		if (f.file->f_mode & FMODE_PWRITE)  
 			ret = vfs_write(f.file, buf, count, &pos);
 		fdput(f);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -643,6 +721,7 @@ unsigned long iov_shorten(struct iovec *iov, unsigned long nr_segs, size_t to)
 	unsigned long seg = 0;
 	size_t len = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (seg < nr_segs) {
 		seg++;
 		if (len + iov->iov_len >= to) {
@@ -665,7 +744,9 @@ static ssize_t do_iter_readv_writev(struct file *filp, struct iov_iter *iter,
 	init_sync_kiocb(&kiocb, filp);
 	ret = kiocb_set_rw_flags(&kiocb, flags);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	kiocb.ki_pos = *ppos;
 
 	if (type == READ)
@@ -684,7 +765,9 @@ static ssize_t do_loop_readv_writev(struct file *filp, struct iov_iter *iter,
 	ssize_t ret = 0;
 
 	if (flags & ~RWF_HIPRI)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	while (iov_iter_count(iter)) {
 		struct iovec iovec = iov_iter_iovec(iter);
@@ -700,7 +783,9 @@ static ssize_t do_loop_readv_writev(struct file *filp, struct iov_iter *iter,
 
 		if (nr < 0) {
 			if (!ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = nr;
+}
 			break;
 		}
 		ret += nr;
@@ -709,6 +794,7 @@ static ssize_t do_loop_readv_writev(struct file *filp, struct iov_iter *iter,
 		iov_iter_advance(iter, nr);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -759,6 +845,7 @@ ssize_t rw_copy_check_uvector(int type, const struct iovec __user * uvector,
 	 * traditionally returned zero for zero segments, so...
 	 */
 	if (nr_segs == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 0;
 		goto out;
 	}
@@ -768,17 +855,20 @@ ssize_t rw_copy_check_uvector(int type, const struct iovec __user * uvector,
 	 * verify all the pointers
 	 */
 	if (nr_segs > UIO_MAXIOV) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EINVAL;
 		goto out;
 	}
 	if (nr_segs > fast_segs) {
 		iov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);
 		if (iov == NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -ENOMEM;
 			goto out;
 		}
 	}
 	if (copy_from_user(iov, uvector, nr_segs*sizeof(*uvector))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EFAULT;
 		goto out;
 	}
@@ -800,15 +890,18 @@ ssize_t rw_copy_check_uvector(int type, const struct iovec __user * uvector,
 		/* see if we we're about to use an invalid len or if
 		 * it's about to overflow ssize_t */
 		if (len < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EINVAL;
 			goto out;
 		}
 		if (type >= 0
 		    && unlikely(!access_ok(vrfy_dir(type), buf, len))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EFAULT;
 			goto out;
 		}
 		if (len > MAX_RW_COUNT - ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			len = MAX_RW_COUNT - ret;
 			iov[seg].iov_len = len;
 		}
@@ -838,6 +931,7 @@ ssize_t compat_rw_copy_check_uvector(int type,
 	if (nr_segs == 0)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -EINVAL;
 	if (nr_segs > UIO_MAXIOV)
 		goto out;
@@ -901,16 +995,23 @@ static ssize_t do_iter_read(struct file *file, struct iov_iter *iter,
 	ssize_t ret = 0;
 
 	if (!(file->f_mode & FMODE_READ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 	if (!(file->f_mode & FMODE_CAN_READ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tot_len = iov_iter_count(iter);
 	if (!tot_len)
 		goto out;
 	ret = rw_verify_area(READ, file, pos, tot_len);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (file->f_op->read_iter)
 		ret = do_iter_readv_writev(file, iter, pos, READ, flags);
@@ -919,12 +1020,14 @@ static ssize_t do_iter_read(struct file *file, struct iov_iter *iter,
 out:
 	if (ret >= 0)
 		fsnotify_access(file);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
 ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos,
 		rwf_t flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!file->f_op->read_iter)
 		return -EINVAL;
 	return do_iter_read(file, iter, ppos, flags);
@@ -938,16 +1041,25 @@ static ssize_t do_iter_write(struct file *file, struct iov_iter *iter,
 	ssize_t ret = 0;
 
 	if (!(file->f_mode & FMODE_WRITE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 	if (!(file->f_mode & FMODE_CAN_WRITE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tot_len = iov_iter_count(iter);
 	if (!tot_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	ret = rw_verify_area(WRITE, file, pos, tot_len);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (file->f_op->write_iter)
 		ret = do_iter_readv_writev(file, iter, pos, WRITE, flags);
@@ -955,6 +1067,7 @@ static ssize_t do_iter_write(struct file *file, struct iov_iter *iter,
 		ret = do_loop_readv_writev(file, iter, pos, WRITE, flags);
 	if (ret > 0)
 		fsnotify_modify(file);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -962,7 +1075,9 @@ ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos,
 		rwf_t flags)
 {
 	if (!file->f_op->write_iter)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	return do_iter_write(file, iter, ppos, flags);
 }
 EXPORT_SYMBOL(vfs_iter_write);
@@ -1017,7 +1132,10 @@ static ssize_t do_readv(unsigned long fd, const struct iovec __user *vec,
 	}
 
 	if (ret > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_rchar(current, ret);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inc_syscr(current);
 	return ret;
 }
@@ -1037,7 +1155,10 @@ static ssize_t do_writev(unsigned long fd, const struct iovec __user *vec,
 	}
 
 	if (ret > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_wchar(current, ret);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inc_syscw(current);
 	return ret;
 }
@@ -1055,10 +1176,13 @@ static ssize_t do_preadv(unsigned long fd, const struct iovec __user *vec,
 	ssize_t ret = -EBADF;
 
 	if (pos < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	f = fdget(fd);
 	if (f.file) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ESPIPE;
 		if (f.file->f_mode & FMODE_PREAD)
 			ret = vfs_readv(f.file, vec, vlen, &pos, flags);
@@ -1066,7 +1190,10 @@ static ssize_t do_preadv(unsigned long fd, const struct iovec __user *vec,
 	}
 
 	if (ret > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_rchar(current, ret);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inc_syscr(current);
 	return ret;
 }
@@ -1078,10 +1205,13 @@ static ssize_t do_pwritev(unsigned long fd, const struct iovec __user *vec,
 	ssize_t ret = -EBADF;
 
 	if (pos < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	f = fdget(fd);
 	if (f.file) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ESPIPE;
 		if (f.file->f_mode & FMODE_PWRITE)
 			ret = vfs_writev(f.file, vec, vlen, &pos, flags);
@@ -1089,7 +1219,10 @@ static ssize_t do_pwritev(unsigned long fd, const struct iovec __user *vec,
 	}
 
 	if (ret > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_wchar(current, ret);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inc_syscw(current);
 	return ret;
 }
@@ -1109,6 +1242,7 @@ SYSCALL_DEFINE3(writev, unsigned long, fd, const struct iovec __user *, vec,
 SYSCALL_DEFINE5(preadv, unsigned long, fd, const struct iovec __user *, vec,
 		unsigned long, vlen, unsigned long, pos_l, unsigned long, pos_h)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	loff_t pos = pos_from_hilo(pos_h, pos_l);
 
 	return do_preadv(fd, vec, vlen, pos, 0);
@@ -1118,6 +1252,7 @@ SYSCALL_DEFINE6(preadv2, unsigned long, fd, const struct iovec __user *, vec,
 		unsigned long, vlen, unsigned long, pos_l, unsigned long, pos_h,
 		rwf_t, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	loff_t pos = pos_from_hilo(pos_h, pos_l);
 
 	if (pos == -1)
@@ -1129,6 +1264,7 @@ SYSCALL_DEFINE6(preadv2, unsigned long, fd, const struct iovec __user *, vec,
 SYSCALL_DEFINE5(pwritev, unsigned long, fd, const struct iovec __user *, vec,
 		unsigned long, vlen, unsigned long, pos_l, unsigned long, pos_h)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	loff_t pos = pos_from_hilo(pos_h, pos_l);
 
 	return do_pwritev(fd, vec, vlen, pos, 0);
@@ -1138,6 +1274,7 @@ SYSCALL_DEFINE6(pwritev2, unsigned long, fd, const struct iovec __user *, vec,
 		unsigned long, vlen, unsigned long, pos_l, unsigned long, pos_h,
 		rwf_t, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	loff_t pos = pos_from_hilo(pos_h, pos_l);
 
 	if (pos == -1)
@@ -1158,6 +1295,7 @@ static size_t compat_readv(struct file *file,
 
 	ret = compat_import_iovec(READ, vec, vlen, UIO_FASTIOV, &iov, &iter);
 	if (ret >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = do_iter_read(file, &iter, pos, flags);
 		kfree(iov);
 	}
@@ -1171,6 +1309,7 @@ static size_t do_compat_readv(compat_ulong_t fd,
 				 const struct compat_iovec __user *vec,
 				 compat_ulong_t vlen, rwf_t flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fd f = fdget_pos(fd);
 	ssize_t ret;
 	loff_t pos;
@@ -1190,6 +1329,7 @@ COMPAT_SYSCALL_DEFINE3(readv, compat_ulong_t, fd,
 		const struct compat_iovec __user *,vec,
 		compat_ulong_t, vlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_compat_readv(fd, vec, vlen, 0);
 }
 
@@ -1201,7 +1341,9 @@ static long do_compat_preadv64(unsigned long fd,
 	ssize_t ret;
 
 	if (pos < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	f = fdget(fd);
 	if (!f.file)
 		return -EBADF;
@@ -1217,6 +1359,7 @@ COMPAT_SYSCALL_DEFINE4(preadv64, unsigned long, fd,
 		const struct compat_iovec __user *,vec,
 		unsigned long, vlen, loff_t, pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_compat_preadv64(fd, vec, vlen, pos, 0);
 }
 #endif
@@ -1235,6 +1378,7 @@ COMPAT_SYSCALL_DEFINE5(preadv64v2, unsigned long, fd,
 		const struct compat_iovec __user *,vec,
 		unsigned long, vlen, loff_t, pos, rwf_t, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_compat_preadv64(fd, vec, vlen, pos, flags);
 }
 #endif
@@ -1247,7 +1391,9 @@ COMPAT_SYSCALL_DEFINE6(preadv2, compat_ulong_t, fd,
 	loff_t pos = ((loff_t)pos_high << 32) | pos_low;
 
 	if (pos == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return do_compat_readv(fd, vec, vlen, flags);
+}
 
 	return do_compat_preadv64(fd, vec, vlen, pos, flags);
 }
@@ -1263,6 +1409,7 @@ static size_t compat_writev(struct file *file,
 
 	ret = compat_import_iovec(WRITE, vec, vlen, UIO_FASTIOV, &iov, &iter);
 	if (ret >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		file_start_write(file);
 		ret = do_iter_write(file, &iter, pos, flags);
 		file_end_write(file);
@@ -1278,6 +1425,7 @@ static size_t do_compat_writev(compat_ulong_t fd,
 				  const struct compat_iovec __user* vec,
 				  compat_ulong_t vlen, rwf_t flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fd f = fdget_pos(fd);
 	ssize_t ret;
 	loff_t pos;
@@ -1296,6 +1444,7 @@ COMPAT_SYSCALL_DEFINE3(writev, compat_ulong_t, fd,
 		const struct compat_iovec __user *, vec,
 		compat_ulong_t, vlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_compat_writev(fd, vec, vlen, 0);
 }
 
@@ -1307,7 +1456,9 @@ static long do_compat_pwritev64(unsigned long fd,
 	ssize_t ret;
 
 	if (pos < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	f = fdget(fd);
 	if (!f.file)
 		return -EBADF;
@@ -1323,6 +1474,7 @@ COMPAT_SYSCALL_DEFINE4(pwritev64, unsigned long, fd,
 		const struct compat_iovec __user *,vec,
 		unsigned long, vlen, loff_t, pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_compat_pwritev64(fd, vec, vlen, pos, 0);
 }
 #endif
@@ -1341,6 +1493,7 @@ COMPAT_SYSCALL_DEFINE5(pwritev64v2, unsigned long, fd,
 		const struct compat_iovec __user *,vec,
 		unsigned long, vlen, loff_t, pos, rwf_t, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return do_compat_pwritev64(fd, vec, vlen, pos, flags);
 }
 #endif
@@ -1352,7 +1505,9 @@ COMPAT_SYSCALL_DEFINE6(pwritev2, compat_ulong_t, fd,
 	loff_t pos = ((loff_t)pos_high << 32) | pos_low;
 
 	if (pos == -1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return do_compat_writev(fd, vec, vlen, flags);
+}
 
 	return do_compat_pwritev64(fd, vec, vlen, pos, flags);
 }
@@ -1378,10 +1533,12 @@ static ssize_t do_sendfile(int out_fd, int in_fd, loff_t *ppos,
 		goto out;
 	if (!(in.file->f_mode & FMODE_READ))
 		goto fput_in;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = -ESPIPE;
 	if (!ppos) {
 		pos = in.file->f_pos;
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pos = *ppos;
 		if (!(in.file->f_mode & FMODE_PREAD))
 			goto fput_in;
@@ -1390,7 +1547,9 @@ static ssize_t do_sendfile(int out_fd, int in_fd, loff_t *ppos,
 	if (retval < 0)
 		goto fput_in;
 	if (count > MAX_RW_COUNT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count =  MAX_RW_COUNT;
+}
 
 	/*
 	 * Get output file, and verify that it is ok..
@@ -1401,6 +1560,7 @@ static ssize_t do_sendfile(int out_fd, int in_fd, loff_t *ppos,
 		goto fput_in;
 	if (!(out.file->f_mode & FMODE_WRITE))
 		goto fput_out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	retval = -EINVAL;
 	in_inode = file_inode(in.file);
 	out_inode = file_inode(out.file);
@@ -1413,12 +1573,15 @@ static ssize_t do_sendfile(int out_fd, int in_fd, loff_t *ppos,
 		max = min(in_inode->i_sb->s_maxbytes, out_inode->i_sb->s_maxbytes);
 
 	if (unlikely(pos + count > max)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EOVERFLOW;
 		if (pos >= max)
 			goto fput_out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		count = max - pos;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fl = 0;
 #if 0
 	/*
@@ -1435,21 +1598,27 @@ static ssize_t do_sendfile(int out_fd, int in_fd, loff_t *ppos,
 	file_end_write(out.file);
 
 	if (retval > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		add_rchar(current, retval);
 		add_wchar(current, retval);
 		fsnotify_access(in.file);
 		fsnotify_modify(out.file);
 		out.file->f_pos = out_pos;
 		if (ppos)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*ppos = pos;
+}
 		else
 			in.file->f_pos = pos;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inc_syscr(current);
 	inc_syscw(current);
 	if (pos > max)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = -EOVERFLOW;
+}
 
 fput_out:
 	fdput(out);
@@ -1467,7 +1636,9 @@ SYSCALL_DEFINE4(sendfile, int, out_fd, int, in_fd, off_t __user *, offset, size_
 
 	if (offset) {
 		if (unlikely(get_user(off, offset)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 		pos = off;
 		ret = do_sendfile(out_fd, in_fd, &pos, count, MAX_NON_LFS);
 		if (unlikely(put_user(pos, offset)))
@@ -1485,10 +1656,16 @@ SYSCALL_DEFINE4(sendfile64, int, out_fd, int, in_fd, loff_t __user *, offset, si
 
 	if (offset) {
 		if (unlikely(copy_from_user(&pos, offset, sizeof(loff_t))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = do_sendfile(out_fd, in_fd, &pos, count, 0);
 		if (unlikely(put_user(pos, offset)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	}
 
@@ -1505,7 +1682,9 @@ COMPAT_SYSCALL_DEFINE4(sendfile, int, out_fd, int, in_fd,
 
 	if (offset) {
 		if (unlikely(get_user(off, offset)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 		pos = off;
 		ret = do_sendfile(out_fd, in_fd, &pos, count, MAX_NON_LFS);
 		if (unlikely(put_user(pos, offset)))
@@ -1524,7 +1703,9 @@ COMPAT_SYSCALL_DEFINE4(sendfile64, int, out_fd, int, in_fd,
 
 	if (offset) {
 		if (unlikely(copy_from_user(&pos, offset, sizeof(loff_t))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 		ret = do_sendfile(out_fd, in_fd, &pos, count, 0);
 		if (unlikely(put_user(pos, offset)))
 			return -EFAULT;
@@ -1544,6 +1725,7 @@ ssize_t vfs_copy_file_range(struct file *file_in, loff_t pos_in,
 			    struct file *file_out, loff_t pos_out,
 			    size_t len, unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode_in = file_inode(file_in);
 	struct inode *inode_out = file_inode(file_out);
 	ssize_t ret;
@@ -1632,6 +1814,7 @@ SYSCALL_DEFINE6(copy_file_range, int, fd_in, loff_t __user *, off_in,
 	if (!f_in.file)
 		goto out2;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	f_out = fdget(fd_out);
 	if (!f_out.file)
 		goto out1;
@@ -1682,6 +1865,7 @@ SYSCALL_DEFINE6(copy_file_range, int, fd_in, loff_t __user *, off_in,
 
 static int clone_verify_area(struct file *file, loff_t pos, u64 len, bool write)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 
 	if (unlikely(pos < 0))
@@ -1723,7 +1907,9 @@ int vfs_clone_file_prep_inodes(struct inode *inode_in, loff_t pos_in,
 
 	/* Don't touch certain kinds of inodes */
 	if (IS_IMMUTABLE(inode_out))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	if (IS_SWAPFILE(inode_in) || IS_SWAPFILE(inode_out))
 		return -ETXTBSY;
@@ -1815,14 +2001,19 @@ EXPORT_SYMBOL(vfs_clone_file_prep_inodes);
 int vfs_clone_file_range(struct file *file_in, loff_t pos_in,
 		struct file *file_out, loff_t pos_out, u64 len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode_in = file_inode(file_in);
 	struct inode *inode_out = file_inode(file_out);
 	int ret;
 
 	if (S_ISDIR(inode_in->i_mode) || S_ISDIR(inode_out->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EISDIR;
+}
 	if (!S_ISREG(inode_in->i_mode) || !S_ISREG(inode_out->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/*
 	 * FICLONE/FICLONERANGE ioctls enforce that src and dest files are on
@@ -1830,34 +2021,52 @@ int vfs_clone_file_range(struct file *file_in, loff_t pos_in,
 	 * system.
 	 */
 	if (inode_in->i_sb != inode_out->i_sb)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EXDEV;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(file_in->f_mode & FMODE_READ) ||
 	    !(file_out->f_mode & FMODE_WRITE) ||
 	    (file_out->f_flags & O_APPEND))
 		return -EBADF;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!file_in->f_op->clone_file_range)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = clone_verify_area(file_in, pos_in, len, false);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = clone_verify_area(file_out, pos_out, len, true);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (pos_in + len > i_size_read(inode_in))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = file_in->f_op->clone_file_range(file_in, pos_in,
 			file_out, pos_out, len);
 	if (!ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fsnotify_access(file_in);
 		fsnotify_modify(file_out);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL(vfs_clone_file_range);
@@ -1876,7 +2085,9 @@ static struct page *vfs_dedupe_get_page(struct inode *inode, loff_t offset)
 	mapping = inode->i_mapping;
 	page = read_mapping_page(mapping, n, NULL);
 	if (IS_ERR(page))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return page;
+}
 	if (!PageUptodate(page)) {
 		put_page(page);
 		return ERR_PTR(-EIO);
@@ -1905,6 +2116,7 @@ int vfs_dedupe_file_range_compare(struct inode *src, loff_t srcoff,
 
 	error = -EINVAL;
 	same = true;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (len) {
 		src_poff = srcoff & (PAGE_SIZE - 1);
 		dest_poff = destoff & (PAGE_SIZE - 1);
@@ -1973,7 +2185,9 @@ int vfs_dedupe_file_range(struct file *file, struct file_dedupe_range *same)
 	ssize_t deduped;
 
 	if (!(file->f_mode & FMODE_READ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (same->reserved1 || same->reserved2)
 		return -EINVAL;
diff --git a/fs/readdir.c b/fs/readdir.c
index d336db6..ff07d9a4 100644
--- a/fs/readdir.c
+++ b/fs/readdir.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/readdir.c
@@ -25,11 +27,14 @@
 
 int iterate_dir(struct file *file, struct dir_context *ctx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = file_inode(file);
 	bool shared = false;
 	int res = -ENOTDIR;
 	if (file->f_op->iterate_shared)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		shared = true;
+}
 	else if (!file->f_op->iterate)
 		goto out;
 
@@ -38,6 +43,7 @@ int iterate_dir(struct file *file, struct dir_context *ctx)
 		goto out;
 
 	if (shared) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_lock_shared(inode);
 	} else {
 		res = down_write_killable(&inode->i_rwsem);
@@ -45,6 +51,7 @@ int iterate_dir(struct file *file, struct dir_context *ctx)
 			goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	res = -ENOENT;
 	if (!IS_DEADDIR(inode)) {
 		ctx->pos = file->f_pos;
@@ -57,7 +64,9 @@ int iterate_dir(struct file *file, struct dir_context *ctx)
 		file_accessed(file);
 	}
 	if (shared)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_unlock_shared(inode);
+}
 	else
 		inode_unlock(inode);
 out:
@@ -124,7 +133,7 @@ static int fillonedir(struct dir_context *ctx, const char *name, int namlen,
 
 SYSCALL_DEFINE3(old_readdir, unsigned int, fd,
 		struct old_linux_dirent __user *, dirent, unsigned int, count)
-{
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int error;
 	struct fd f = fdget_pos(fd);
 	struct readdir_callback buf = {
@@ -133,7 +142,9 @@ SYSCALL_DEFINE3(old_readdir, unsigned int, fd,
 	};
 
 	if (!f.file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	error = iterate_dir(f.file, &buf.ctx);
 	if (buf.result)
@@ -176,16 +187,23 @@ static int filldir(struct dir_context *ctx, const char *name, int namlen,
 
 	buf->error = -EINVAL;	/* only used if we fail.. */
 	if (reclen > buf->count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	d_ino = ino;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sizeof(d_ino) < sizeof(ino) && d_ino != ino) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		buf->error = -EOVERFLOW;
 		return -EOVERFLOW;
 	}
 	dirent = buf->previous;
 	if (dirent) {
 		if (signal_pending(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINTR;
+}
 		if (__put_user(offset, &dirent->d_off))
 			goto efault;
 	}
@@ -223,11 +241,15 @@ SYSCALL_DEFINE3(getdents, unsigned int, fd,
 	int error;
 
 	if (!access_ok(VERIFY_WRITE, dirent, count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	f = fdget_pos(fd);
 	if (!f.file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	error = iterate_dir(f.file, &buf.ctx);
 	if (error >= 0)
@@ -235,7 +257,9 @@ SYSCALL_DEFINE3(getdents, unsigned int, fd,
 	lastdirent = buf.previous;
 	if (lastdirent) {
 		if (put_user(buf.ctx.pos, &lastdirent->d_off))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -EFAULT;
+}
 		else
 			error = count - buf.count;
 	}
@@ -262,11 +286,15 @@ static int filldir64(struct dir_context *ctx, const char *name, int namlen,
 
 	buf->error = -EINVAL;	/* only used if we fail.. */
 	if (reclen > buf->count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	dirent = buf->previous;
 	if (dirent) {
 		if (signal_pending(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINTR;
+}
 		if (__put_user(offset, &dirent->d_off))
 			goto efault;
 	}
@@ -306,11 +334,15 @@ SYSCALL_DEFINE3(getdents64, unsigned int, fd,
 	int error;
 
 	if (!access_ok(VERIFY_WRITE, dirent, count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	f = fdget_pos(fd);
 	if (!f.file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	error = iterate_dir(f.file, &buf.ctx);
 	if (error >= 0)
@@ -319,7 +351,9 @@ SYSCALL_DEFINE3(getdents64, unsigned int, fd,
 	if (lastdirent) {
 		typeof(lastdirent->d_off) d_off = buf.ctx.pos;
 		if (__put_user(d_off, &lastdirent->d_off))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -EFAULT;
+}
 		else
 			error = count - buf.count;
 	}
@@ -386,7 +420,9 @@ COMPAT_SYSCALL_DEFINE3(old_readdir, unsigned int, fd,
 	};
 
 	if (!f.file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	error = iterate_dir(f.file, &buf.ctx);
 	if (buf.result)
@@ -470,7 +506,9 @@ COMPAT_SYSCALL_DEFINE3(getdents, unsigned int, fd,
 	int error;
 
 	if (!access_ok(VERIFY_WRITE, dirent, count))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	f = fdget_pos(fd);
 	if (!f.file)
diff --git a/fs/select.c b/fs/select.c
index 063067e..6c13537 100644
--- a/fs/select.c
+++ b/fs/select.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * This file contains the procedures for the handling of select and poll
@@ -55,19 +57,27 @@ static long __estimate_accuracy(struct timespec64 *tv)
 	int divfactor = 1000;
 
 	if (tv->tv_sec < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (task_nice(current) > 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		divfactor = divfactor / 5;
+}
 
 	if (tv->tv_sec > MAX_SLACK / (NSEC_PER_SEC/divfactor))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return MAX_SLACK;
+}
 
 	slack = tv->tv_nsec / divfactor;
 	slack += tv->tv_sec * (NSEC_PER_SEC/divfactor);
 
 	if (slack > MAX_SLACK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return MAX_SLACK;
+}
 
 	return slack;
 }
@@ -82,13 +92,16 @@ u64 select_estimate_accuracy(struct timespec64 *tv)
 	 */
 
 	if (rt_task(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ktime_get_ts64(&now);
 	now = timespec64_sub(*tv, now);
 	ret = __estimate_accuracy(&now);
 	if (ret < current->timer_slack_ns)
 		return current->timer_slack_ns;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -120,6 +133,7 @@ static void __pollwait(struct file *filp, wait_queue_head_t *wait_address,
 
 void poll_initwait(struct poll_wqueues *pwq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	init_poll_funcptr(&pwq->pt, __pollwait);
 	pwq->polling_task = current;
 	pwq->triggered = 0;
@@ -150,6 +164,7 @@ void poll_freewait(struct poll_wqueues *pwq)
 			entry--;
 			free_poll_entry(entry);
 		} while (entry > p->entries);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		old = p;
 		p = p->next;
 		free_page((unsigned long) old);
@@ -169,6 +184,7 @@ static struct poll_table_entry *poll_get_entry(struct poll_wqueues *p)
 
 		new_table = (struct poll_table_page *) __get_free_page(GFP_KERNEL);
 		if (!new_table) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p->error = -ENOMEM;
 			return NULL;
 		}
@@ -211,9 +227,12 @@ static int pollwake(wait_queue_entry_t *wait, unsigned mode, int sync, void *key
 {
 	struct poll_table_entry *entry;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	entry = container_of(wait, struct poll_table_entry, wait);
 	if (key && !((unsigned long)key & entry->key))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return __pollwake(wait, mode, sync, key);
 }
 
@@ -221,10 +240,13 @@ static int pollwake(wait_queue_entry_t *wait, unsigned mode, int sync, void *key
 static void __pollwait(struct file *filp, wait_queue_head_t *wait_address,
 				poll_table *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct poll_wqueues *pwq = container_of(p, struct poll_wqueues, pt);
 	struct poll_table_entry *entry = poll_get_entry(pwq);
 	if (!entry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	entry->filp = get_file(filp);
 	entry->wait_address = wait_address;
 	entry->key = p->_key;
@@ -276,7 +298,9 @@ int poll_select_set_timeout(struct timespec64 *to, time64_t sec, long nsec)
 	struct timespec64 ts = {.tv_sec = sec, .tv_nsec = nsec};
 
 	if (!timespec64_valid(&ts))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/* Optimize for the zero timeout value here */
 	if (!sec && !nsec) {
@@ -285,6 +309,7 @@ int poll_select_set_timeout(struct timespec64 *to, time64_t sec, long nsec)
 		ktime_get_ts64(to);
 		*to = timespec64_add_safe(*to, ts);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -297,14 +322,18 @@ static int poll_select_copy_remaining(struct timespec64 *end_time,
 	struct timeval rtv;
 
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (current->personality & STICKY_TIMEOUTS)
 		goto sticky;
 
 	/* No update for zero timeout */
 	if (!end_time->tv_sec && !end_time->tv_nsec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ktime_get_ts64(&rts64);
 	rts64 = timespec64_sub(*end_time, rts64);
@@ -314,16 +343,23 @@ static int poll_select_copy_remaining(struct timespec64 *end_time,
 	rts = timespec64_to_timespec(rts64);
 
 	if (timeval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sizeof(rtv) > sizeof(rtv.tv_sec) + sizeof(rtv.tv_usec))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memset(&rtv, 0, sizeof(rtv));
+}
 		rtv.tv_sec = rts64.tv_sec;
 		rtv.tv_usec = rts64.tv_nsec / NSEC_PER_USEC;
 
 		if (!copy_to_user(p, &rtv, sizeof(rtv)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
+}
 
 	} else if (!copy_to_user(p, &rts, sizeof(rts)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	/*
 	 * If an application puts its timeval in read-only memory, we
@@ -335,7 +371,10 @@ static int poll_select_copy_remaining(struct timespec64 *end_time,
 
 sticky:
 	if (ret == -ERESTARTNOHAND)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EINTR;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -819,13 +858,16 @@ static inline unsigned int do_pollfd(struct pollfd *pollfd, poll_table *pwait,
 		struct fd f = fdget(fd);
 		mask = POLLNVAL;
 		if (f.file) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			mask = DEFAULT_POLLMASK;
 			if (f.file->f_op->poll) {
 				pwait->_key = pollfd->events|POLLERR|POLLHUP;
 				pwait->_key |= busy_flag;
 				mask = f.file->f_op->poll(f.file, pwait);
 				if (mask & busy_flag)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					*can_busy_poll = true;
+}
 			}
 			/* Mask out unneeded events. */
 			mask &= pollfd->events | POLLERR | POLLHUP;
@@ -891,20 +933,26 @@ static int do_poll(struct poll_list *list, struct poll_wqueues *wait,
 		if (!count) {
 			count = wait->error;
 			if (signal_pending(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				count = -EINTR;
+}
 		}
 		if (count || timed_out)
 			break;
 
 		/* only if found POLL_BUSY_LOOP sockets && not out of time */
 		if (can_busy_loop && !need_resched()) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!busy_start) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				busy_start = busy_loop_current_time();
 				continue;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!busy_loop_timeout(busy_start))
 				continue;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		busy_flag = 0;
 
 		/*
@@ -918,7 +966,9 @@ static int do_poll(struct poll_list *list, struct poll_wqueues *wait,
 		}
 
 		if (!poll_schedule_timeout(wait, TASK_INTERRUPTIBLE, to, slack))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			timed_out = 1;
+}
 	}
 	return count;
 }
@@ -940,7 +990,9 @@ static int do_sys_poll(struct pollfd __user *ufds, unsigned int nfds,
  	unsigned long todo = nfds;
 
 	if (nfds > rlimit(RLIMIT_NOFILE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	len = min_t(unsigned int, nfds, N_STACK_PPS);
 	for (;;) {
@@ -957,10 +1009,12 @@ static int do_sys_poll(struct pollfd __user *ufds, unsigned int nfds,
 		if (!todo)
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = min(todo, POLLFD_PER_PAGE);
 		size = sizeof(struct poll_list) + sizeof(struct pollfd) * len;
 		walk = walk->next = kmalloc(size, GFP_KERNEL);
 		if (!walk) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENOMEM;
 			goto out_fds;
 		}
@@ -979,6 +1033,7 @@ static int do_sys_poll(struct pollfd __user *ufds, unsigned int nfds,
 				goto out_fds;
   	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = fdcount;
 out_fds:
 	walk = head->next;
@@ -988,6 +1043,7 @@ static int do_sys_poll(struct pollfd __user *ufds, unsigned int nfds,
 		kfree(pos);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 }
 
@@ -999,6 +1055,7 @@ static long do_restart_poll(struct restart_block *restart_block)
 	int ret;
 
 	if (restart_block->poll.has_timeout) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		end_time.tv_sec = restart_block->poll.tv_sec;
 		end_time.tv_nsec = restart_block->poll.tv_nsec;
 		to = &end_time;
@@ -1020,6 +1077,7 @@ SYSCALL_DEFINE3(poll, struct pollfd __user *, ufds, unsigned int, nfds,
 	int ret;
 
 	if (timeout_msecs >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		to = &end_time;
 		poll_select_set_timeout(to, timeout_msecs / MSEC_PER_SEC,
 			NSEC_PER_MSEC * (timeout_msecs % MSEC_PER_SEC));
@@ -1036,12 +1094,14 @@ SYSCALL_DEFINE3(poll, struct pollfd __user *, ufds, unsigned int, nfds,
 		restart_block->poll.nfds = nfds;
 
 		if (timeout_msecs >= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			restart_block->poll.tv_sec = end_time.tv_sec;
 			restart_block->poll.tv_nsec = end_time.tv_nsec;
 			restart_block->poll.has_timeout = 1;
 		} else
 			restart_block->poll.has_timeout = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ERESTART_RESTARTBLOCK;
 	}
 	return ret;
@@ -1058,20 +1118,31 @@ SYSCALL_DEFINE5(ppoll, struct pollfd __user *, ufds, unsigned int, nfds,
 
 	if (tsp) {
 		if (copy_from_user(&ts, tsp, sizeof(ts)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		to = &end_time;
 		if (poll_select_set_timeout(to, ts.tv_sec, ts.tv_nsec))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 	}
 
 	if (sigmask) {
 		/* XXX: Don't preclude handling different sized sigset_t's.  */
 		if (sigsetsize != sizeof(sigset_t))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&ksigmask, sigmask, sizeof(ksigmask)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sigdelsetmask(&ksigmask, sigmask(SIGKILL)|sigmask(SIGSTOP));
 		sigprocmask(SIG_SETMASK, &ksigmask, &sigsaved);
 	}
@@ -1090,9 +1161,12 @@ SYSCALL_DEFINE5(ppoll, struct pollfd __user *, ufds, unsigned int, nfds,
 					sizeof(sigsaved));
 			set_restore_sigmask();
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ERESTARTNOHAND;
 	} else if (sigmask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sigprocmask(SIG_SETMASK, &sigsaved, NULL);
+}
 
 	ret = poll_select_copy_remaining(&end_time, tsp, 0, ret);
 
@@ -1109,7 +1183,9 @@ int compat_poll_select_copy_remaining(struct timespec *end_time, void __user *p,
 	struct timespec ts;
 
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (current->personality & STICKY_TIMEOUTS)
 		goto sticky;
@@ -1162,6 +1238,7 @@ static
 int compat_get_fd_set(unsigned long nr, compat_ulong_t __user *ufdset,
 			unsigned long *fdset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ufdset) {
 		return compat_get_bitmap(fdset, ufdset, nr);
 	} else {
@@ -1174,6 +1251,7 @@ static
 int compat_set_fd_set(unsigned long nr, compat_ulong_t __user *ufdset,
 		      unsigned long *fdset)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!ufdset)
 		return 0;
 	return compat_put_bitmap(ufdset, fdset, nr);
@@ -1273,6 +1351,7 @@ COMPAT_SYSCALL_DEFINE5(select, int, n, compat_ulong_t __user *, inp,
 	int ret;
 
 	if (tvp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&tv, tvp, sizeof(tv)))
 			return -EFAULT;
 
@@ -1302,7 +1381,9 @@ COMPAT_SYSCALL_DEFINE1(old_select, struct compat_sel_arg_struct __user *, arg)
 	struct compat_sel_arg_struct a;
 
 	if (copy_from_user(&a, arg, sizeof(a)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	return compat_sys_select(a.n, compat_ptr(a.inp), compat_ptr(a.outp),
 				 compat_ptr(a.exp), compat_ptr(a.tvp));
 }
@@ -1319,6 +1400,7 @@ static long do_compat_pselect(int n, compat_ulong_t __user *inp,
 	int ret;
 
 	if (tsp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&ts, tsp, sizeof(ts)))
 			return -EFAULT;
 
@@ -1388,6 +1470,7 @@ COMPAT_SYSCALL_DEFINE5(ppoll, struct pollfd __user *, ufds,
 	int ret;
 
 	if (tsp) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&ts, tsp, sizeof(ts)))
 			return -EFAULT;
 
diff --git a/fs/seq_file.c b/fs/seq_file.c
index eea09f6..46f0fb2 100644
--- a/fs/seq_file.c
+++ b/fs/seq_file.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * linux/fs/seq_file.c
@@ -53,7 +55,9 @@ int seq_open(struct file *file, const struct seq_operations *op)
 
 	p = kzalloc(sizeof(*p), GFP_KERNEL);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	file->private_data = p;
 
@@ -99,9 +103,12 @@ static int traverse(struct seq_file *m, loff_t offset)
 		return 0;
 	}
 	if (!m->buf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		m->buf = seq_buf_alloc(m->size = PAGE_SIZE);
 		if (!m->buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	}
 	p = m->op->start(m, &index);
 	while (p) {
@@ -112,6 +119,7 @@ static int traverse(struct seq_file *m, loff_t offset)
 		if (error < 0)
 			break;
 		if (unlikely(error)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = 0;
 			m->count = 0;
 		}
@@ -141,6 +149,7 @@ static int traverse(struct seq_file *m, loff_t offset)
 	kvfree(m->buf);
 	m->count = 0;
 	m->buf = seq_buf_alloc(m->size <<= 1);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !m->buf ? -ENOMEM : -EAGAIN;
 }
 
@@ -189,8 +198,10 @@ ssize_t seq_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)
 
 	/* Don't assume *ppos is where we left it */
 	if (unlikely(*ppos != m->read_pos)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while ((err = traverse(m, *ppos)) == -EAGAIN)
 			;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (err) {
 			/* With prejudice... */
 			m->read_pos = 0;
@@ -199,6 +210,7 @@ ssize_t seq_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)
 			m->count = 0;
 			goto Done;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			m->read_pos = *ppos;
 		}
 	}
@@ -230,6 +242,7 @@ ssize_t seq_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)
 	/* we need at least one record in buffer */
 	pos = m->index;
 	p = m->op->start(m, &pos);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		err = PTR_ERR(p);
 		if (!p || IS_ERR(p))
@@ -266,6 +279,7 @@ ssize_t seq_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)
 		loff_t next = pos;
 		p = m->op->next(m, p, &next);
 		if (!p || IS_ERR(p)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(p);
 			break;
 		}
@@ -329,6 +343,7 @@ loff_t seq_lseek(struct file *file, loff_t offset, int whence)
 	case SEEK_SET:
 		if (offset < 0)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		retval = offset;
 		if (offset != m->read_pos) {
 			while ((retval = traverse(m, offset)) == -EAGAIN)
@@ -403,6 +418,7 @@ void seq_vprintf(struct seq_file *m, const char *f, va_list args)
 			return;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_set_overflow(m);
 }
 EXPORT_SYMBOL(seq_vprintf);
@@ -433,18 +449,21 @@ char *mangle_path(char *s, const char *p, const char *esc)
 	while (s <= p) {
 		char c = *p++;
 		if (!c) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return s;
 		} else if (!strchr(esc, c)) {
 			*s++ = c;
 		} else if (s + 4 > p) {
 			break;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*s++ = '\\';
 			*s++ = '0' + ((c & 0300) >> 6);
 			*s++ = '0' + ((c & 070) >> 3);
 			*s++ = '0' + (c & 07);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(mangle_path);
@@ -507,7 +526,9 @@ int seq_path_root(struct seq_file *m, const struct path *path,
 
 		p = __d_path(path, root, buf, size);
 		if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return SEQ_SKIP;
+}
 		res = PTR_ERR(p);
 		if (!IS_ERR(p)) {
 			char *end = mangle_path(buf, p, esc);
@@ -563,6 +584,7 @@ static void single_stop(struct seq_file *p, void *v)
 int single_open(struct file *file, int (*show)(struct seq_file *, void *),
 		void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct seq_operations *op = kmalloc(sizeof(*op), GFP_KERNEL);
 	int res = -ENOMEM;
 
@@ -587,9 +609,12 @@ int single_open_size(struct file *file, int (*show)(struct seq_file *, void *),
 	char *buf = seq_buf_alloc(size);
 	int ret;
 	if (!buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	ret = single_open(file, show, data);
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kvfree(buf);
 		return ret;
 	}
@@ -654,7 +679,9 @@ EXPORT_SYMBOL(seq_open_private);
 void seq_putc(struct seq_file *m, char c)
 {
 	if (m->count >= m->size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	m->buf[m->count++] = c;
 }
@@ -665,6 +692,7 @@ void seq_puts(struct seq_file *m, const char *s)
 	int len = strlen(s);
 
 	if (m->count + len >= m->size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_set_overflow(m);
 		return;
 	}
@@ -769,6 +797,7 @@ int seq_write(struct seq_file *seq, const void *data, size_t len)
 		seq->count += len;
 		return 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_set_overflow(seq);
 	return -1;
 }
@@ -800,6 +829,7 @@ void seq_hex_dump(struct seq_file *m, const char *prefix_str, int prefix_type,
 	size_t size;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (rowsize != 16 && rowsize != 32)
 		rowsize = 16;
 
@@ -835,14 +865,18 @@ struct list_head *seq_list_start(struct list_head *head, loff_t pos)
 
 	list_for_each(lh, head)
 		if (pos-- == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return lh;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NULL;
 }
 EXPORT_SYMBOL(seq_list_start);
 
 struct list_head *seq_list_start_head(struct list_head *head, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pos)
 		return head;
 
@@ -871,6 +905,7 @@ struct hlist_node *seq_hlist_start(struct hlist_head *head, loff_t pos)
 {
 	struct hlist_node *node;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each(node, head)
 		if (pos-- == 0)
 			return node;
@@ -888,6 +923,7 @@ EXPORT_SYMBOL(seq_hlist_start);
  */
 struct hlist_node *seq_hlist_start_head(struct hlist_head *head, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pos)
 		return SEQ_START_TOKEN;
 
@@ -910,7 +946,9 @@ struct hlist_node *seq_hlist_next(void *v, struct hlist_head *head,
 
 	++*ppos;
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return head->first;
+}
 	else
 		return node->next;
 }
@@ -932,6 +970,7 @@ struct hlist_node *seq_hlist_start_rcu(struct hlist_head *head,
 {
 	struct hlist_node *node;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__hlist_for_each_rcu(node, head)
 		if (pos-- == 0)
 			return node;
@@ -954,6 +993,7 @@ EXPORT_SYMBOL(seq_hlist_start_rcu);
 struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *head,
 					    loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!pos)
 		return SEQ_START_TOKEN;
 
@@ -981,7 +1021,9 @@ struct hlist_node *seq_hlist_next_rcu(void *v,
 
 	++*ppos;
 	if (v == SEQ_START_TOKEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return rcu_dereference(head->first);
+}
 	else
 		return rcu_dereference(node->next);
 }
@@ -1000,6 +1042,7 @@ seq_hlist_start_percpu(struct hlist_head __percpu *head, int *cpu, loff_t pos)
 {
 	struct hlist_node *node;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for_each_possible_cpu(*cpu) {
 		hlist_for_each(node, per_cpu_ptr(head, *cpu)) {
 			if (pos-- == 0)
@@ -1028,7 +1071,9 @@ seq_hlist_next_percpu(void *v, struct hlist_head __percpu *head,
 	++*pos;
 
 	if (node->next)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return node->next;
+}
 
 	for (*cpu = cpumask_next(*cpu, cpu_possible_mask); *cpu < nr_cpu_ids;
 	     *cpu = cpumask_next(*cpu, cpu_possible_mask)) {
diff --git a/fs/signalfd.c b/fs/signalfd.c
index 1c667af..91ab1c2 100644
--- a/fs/signalfd.c
+++ b/fs/signalfd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  fs/signalfd.c
@@ -42,7 +44,9 @@ void signalfd_cleanup(struct sighand_struct *sighand)
 	 * sighand_cachep is SLAB_TYPESAFE_BY_RCU, we can safely return.
 	 */
 	if (likely(!waitqueue_active(wqh)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	/* wait_queue_entry_t->func(POLLFREE) should do remove_wait_queue() */
 	wake_up_poll(wqh, POLLHUP | POLLFREE);
@@ -54,6 +58,7 @@ struct signalfd_ctx {
 
 static int signalfd_release(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(file->private_data);
 	return 0;
 }
@@ -83,6 +88,7 @@ static int signalfd_copyinfo(struct signalfd_siginfo __user *uinfo,
 {
 	long err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUILD_BUG_ON(sizeof(struct signalfd_siginfo) != 128);
 
 	/*
@@ -207,7 +213,9 @@ static ssize_t signalfd_read(struct file *file, char __user *buf, size_t count,
 
 	count /= sizeof(struct signalfd_siginfo);
 	if (!count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	siginfo = (struct signalfd_siginfo __user *) buf;
 	do {
@@ -257,6 +265,7 @@ SYSCALL_DEFINE4(signalfd4, int, ufd, sigset_t __user *, user_mask,
 	BUILD_BUG_ON(SFD_CLOEXEC != O_CLOEXEC);
 	BUILD_BUG_ON(SFD_NONBLOCK != O_NONBLOCK);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (flags & ~(SFD_CLOEXEC | SFD_NONBLOCK))
 		return -EINVAL;
 
@@ -304,6 +313,7 @@ SYSCALL_DEFINE4(signalfd4, int, ufd, sigset_t __user *, user_mask,
 SYSCALL_DEFINE3(signalfd, int, ufd, sigset_t __user *, user_mask,
 		size_t, sizemask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sys_signalfd4(ufd, user_mask, sizemask, 0);
 }
 
@@ -318,7 +328,9 @@ COMPAT_SYSCALL_DEFINE4(signalfd4, int, ufd,
 	sigset_t __user *ksigmask;
 
 	if (sigsetsize != sizeof(compat_sigset_t))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (copy_from_user(&ss32, sigmask, sizeof(ss32)))
 		return -EFAULT;
 	sigset_from_compat(&tmp, &ss32);
@@ -333,6 +345,7 @@ COMPAT_SYSCALL_DEFINE3(signalfd, int, ufd,
 		     const compat_sigset_t __user *,sigmask,
 		     compat_size_t, sigsetsize)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return compat_sys_signalfd4(ufd, sigmask, sigsetsize, 0);
 }
 #endif
diff --git a/fs/splice.c b/fs/splice.c
index f3084cc..f9f87ee 100644
--- a/fs/splice.c
+++ b/fs/splice.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * "splice": joining two ropes together by interweaving their strands.
  *
@@ -53,6 +55,7 @@ static int page_cache_pipe_buf_steal(struct pipe_inode_info *pipe,
 
 	mapping = page_mapping(page);
 	if (mapping) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN_ON(!PageUptodate(page));
 
 		/*
@@ -106,6 +109,7 @@ static int page_cache_pipe_buf_confirm(struct pipe_inode_info *pipe,
 	int err;
 
 	if (!PageUptodate(page)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lock_page(page);
 
 		/*
@@ -113,6 +117,7 @@ static int page_cache_pipe_buf_confirm(struct pipe_inode_info *pipe,
 		 * splice, if this is the first page.
 		 */
 		if (!page->mapping) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -ENODATA;
 			goto error;
 		}
@@ -121,6 +126,7 @@ static int page_cache_pipe_buf_confirm(struct pipe_inode_info *pipe,
 		 * Uh oh, read-error from disk.
 		 */
 		if (!PageUptodate(page)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EIO;
 			goto error;
 		}
@@ -131,6 +137,7 @@ static int page_cache_pipe_buf_confirm(struct pipe_inode_info *pipe,
 		unlock_page(page);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 error:
 	unlock_page(page);
@@ -148,6 +155,7 @@ const struct pipe_buf_operations page_cache_pipe_buf_ops = {
 static int user_page_pipe_buf_steal(struct pipe_inode_info *pipe,
 				    struct pipe_buffer *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!(buf->flags & PIPE_BUF_FLAG_GIFT))
 		return 1;
 
@@ -165,6 +173,7 @@ static const struct pipe_buf_operations user_page_pipe_buf_ops = {
 
 static void wakeup_pipe_readers(struct pipe_inode_info *pipe)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	smp_mb();
 	if (waitqueue_active(&pipe->wait))
 		wake_up_interruptible(&pipe->wait);
@@ -189,7 +198,9 @@ ssize_t splice_to_pipe(struct pipe_inode_info *pipe,
 	int ret = 0, page_nr = 0;
 
 	if (!spd_pages)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (unlikely(!pipe->readers)) {
 		send_sig(SIGPIPE, current, 0);
@@ -232,6 +243,7 @@ ssize_t add_to_pipe(struct pipe_inode_info *pipe, struct pipe_buffer *buf)
 	int ret;
 
 	if (unlikely(!pipe->readers)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		send_sig(SIGPIPE, current, 0);
 		ret = -EPIPE;
 	} else if (pipe->nrbufs == pipe->buffers) {
@@ -257,7 +269,9 @@ int splice_grow_spd(const struct pipe_inode_info *pipe, struct splice_pipe_desc
 
 	spd->nr_pages_max = buffers;
 	if (buffers <= PIPE_DEF_BUFFERS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	spd->pages = kmalloc(buffers * sizeof(struct page *), GFP_KERNEL);
 	spd->partial = kmalloc(buffers * sizeof(struct partial_page), GFP_KERNEL);
@@ -272,6 +286,7 @@ int splice_grow_spd(const struct pipe_inode_info *pipe, struct splice_pipe_desc
 
 void splice_shrink_spd(struct splice_pipe_desc *spd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (spd->nr_pages_max <= PIPE_DEF_BUFFERS)
 		return;
 
@@ -309,6 +324,7 @@ ssize_t generic_file_splice_read(struct file *in, loff_t *ppos,
 		*ppos = kiocb.ki_pos;
 		file_accessed(in);
 	} else if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		to.idx = idx;
 		to.iov_offset = 0;
 		iov_iter_advance(&to, 0); /* to free what was emitted */
@@ -317,7 +333,9 @@ ssize_t generic_file_splice_read(struct file *in, loff_t *ppos,
 		 * "can't put anything in there", rather than -EFAULT.
 		 */
 		if (ret == -EFAULT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EAGAIN;
+}
 	}
 
 	return ret;
@@ -335,6 +353,7 @@ const struct pipe_buf_operations default_pipe_buf_ops = {
 static int generic_pipe_buf_nosteal(struct pipe_inode_info *pipe,
 				    struct pipe_buffer *buf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -377,7 +396,9 @@ static ssize_t default_file_splice_read(struct file *in, loff_t *ppos,
 	int i;
 
 	if (pipe->nrbufs == pipe->buffers)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAGAIN;
+}
 
 	/*
 	 * Try to keep page boundaries matching to source pagecache ones -
@@ -389,14 +410,18 @@ static ssize_t default_file_splice_read(struct file *in, loff_t *ppos,
 
 	res = iov_iter_get_pages_alloc(&to, &pages, len + offset, &base);
 	if (res <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	nr_pages = DIV_ROUND_UP(res + base, PAGE_SIZE);
 
 	vec = __vec;
 	if (nr_pages > PIPE_DEF_BUFFERS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		vec = kmalloc(nr_pages * sizeof(struct kvec), GFP_KERNEL);
 		if (unlikely(!vec)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			res = -ENOMEM;
 			goto out;
 		}
@@ -420,7 +445,9 @@ static ssize_t default_file_splice_read(struct file *in, loff_t *ppos,
 	}
 
 	if (vec != __vec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(vec);
+}
 out:
 	for (i = 0; i < nr_pages; i++)
 		put_page(pages[i]);
@@ -441,7 +468,9 @@ static int pipe_to_sendpage(struct pipe_inode_info *pipe,
 	int more;
 
 	if (!likely(file->f_op->sendpage))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	more = (sd->flags & SPLICE_F_MORE) ? MSG_MORE : 0;
 
@@ -454,6 +483,7 @@ static int pipe_to_sendpage(struct pipe_inode_info *pipe,
 
 static void wakeup_pipe_writers(struct pipe_inode_info *pipe)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	smp_mb();
 	if (waitqueue_active(&pipe->wait))
 		wake_up_interruptible(&pipe->wait);
@@ -490,18 +520,26 @@ static int splice_from_pipe_feed(struct pipe_inode_info *pipe, struct splice_des
 
 		sd->len = buf->len;
 		if (sd->len > sd->total_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sd->len = sd->total_len;
+}
 
 		ret = pipe_buf_confirm(pipe, buf);
 		if (unlikely(ret)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ret == -ENODATA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
 		}
 
 		ret = actor(pipe, buf, sd);
 		if (ret <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ret;
+}
 
 		buf->offset += ret;
 		buf->len -= ret;
@@ -516,13 +554,18 @@ static int splice_from_pipe_feed(struct pipe_inode_info *pipe, struct splice_des
 			pipe->curbuf = (pipe->curbuf + 1) & (pipe->buffers - 1);
 			pipe->nrbufs--;
 			if (pipe->files)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sd->need_wakeup = true;
+}
 		}
 
 		if (!sd->total_len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -543,29 +586,47 @@ static int splice_from_pipe_next(struct pipe_inode_info *pipe, struct splice_des
 	 * always buffers available
 	 */
 	if (signal_pending(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ERESTARTSYS;
+}
 
 	while (!pipe->nrbufs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!pipe->writers)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!pipe->waiting_writers && sd->num_spliced)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sd->flags & SPLICE_F_NONBLOCK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EAGAIN;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (signal_pending(current))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ERESTARTSYS;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sd->need_wakeup) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			wakeup_pipe_writers(pipe);
 			sd->need_wakeup = false;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pipe_wait(pipe);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -597,8 +658,10 @@ static void splice_from_pipe_begin(struct splice_desc *sd)
 static void splice_from_pipe_end(struct pipe_inode_info *pipe, struct splice_desc *sd)
 {
 	if (sd->need_wakeup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wakeup_pipe_writers(pipe);
 }
+}
 
 /**
  * __splice_from_pipe - splice data from a pipe to given actor
@@ -694,7 +757,9 @@ iter_file_splice_write(struct pipe_inode_info *pipe, struct file *out,
 	ssize_t ret;
 
 	if (unlikely(!array))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	pipe_lock(pipe);
 
@@ -709,11 +774,13 @@ iter_file_splice_write(struct pipe_inode_info *pipe, struct file *out,
 			break;
 
 		if (unlikely(nbufs < pipe->buffers)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(array);
 			nbufs = pipe->buffers;
 			array = kcalloc(nbufs, sizeof(struct bio_vec),
 					GFP_KERNEL);
 			if (!array) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -ENOMEM;
 				break;
 			}
@@ -726,15 +793,22 @@ iter_file_splice_write(struct pipe_inode_info *pipe, struct file *out,
 			size_t this_len = buf->len;
 
 			if (this_len > left)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				this_len = left;
+}
 
 			if (idx == pipe->buffers - 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				idx = -1;
+}
 
 			ret = pipe_buf_confirm(pipe, buf);
 			if (unlikely(ret)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (ret == -ENODATA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					ret = 0;
+}
 				goto done;
 			}
 
@@ -764,8 +838,11 @@ iter_file_splice_write(struct pipe_inode_info *pipe, struct file *out,
 				pipe->curbuf = (pipe->curbuf + 1) & (pipe->buffers - 1);
 				pipe->nrbufs--;
 				if (pipe->files)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					sd.need_wakeup = true;
+}
 			} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				buf->offset += ret;
 				buf->len -= ret;
 				ret = 0;
@@ -781,6 +858,7 @@ iter_file_splice_write(struct pipe_inode_info *pipe, struct file *out,
 	if (sd.num_spliced)
 		ret = sd.num_spliced;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 
@@ -829,6 +907,7 @@ static ssize_t default_file_splice_write(struct pipe_inode_info *pipe,
 ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe, struct file *out,
 				loff_t *ppos, size_t len, unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return splice_from_pipe(pipe, out, ppos, len, flags, pipe_to_sendpage);
 }
 
@@ -844,7 +923,9 @@ static long do_splice_from(struct pipe_inode_info *pipe, struct file *out,
 				loff_t *, size_t, unsigned int);
 
 	if (out->f_op->splice_write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		splice_write = out->f_op->splice_write;
+}
 	else
 		splice_write = default_file_splice_write;
 
@@ -863,17 +944,25 @@ static long do_splice_to(struct file *in, loff_t *ppos,
 	int ret;
 
 	if (unlikely(!(in->f_mode & FMODE_READ)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	ret = rw_verify_area(READ, in, ppos, len);
 	if (unlikely(ret < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	if (unlikely(len > MAX_RW_COUNT))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = MAX_RW_COUNT;
+}
 
 	if (in->f_op->splice_read)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		splice_read = in->f_op->splice_read;
+}
 	else
 		splice_read = default_file_splice_read;
 
@@ -909,7 +998,9 @@ ssize_t splice_direct_to_actor(struct file *in, struct splice_desc *sd,
 	 */
 	i_mode = file_inode(in)->i_mode;
 	if (unlikely(!S_ISREG(i_mode) && !S_ISBLK(i_mode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	/*
 	 * neither in nor out is a pipe, setup an internal pipe attached to
@@ -919,7 +1010,9 @@ ssize_t splice_direct_to_actor(struct file *in, struct splice_desc *sd,
 	if (unlikely(!pipe)) {
 		pipe = alloc_pipe_info();
 		if (!pipe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
 		/*
 		 * We don't have an immediate reader, but we'll read the stuff
@@ -972,6 +1065,7 @@ ssize_t splice_direct_to_actor(struct file *in, struct splice_desc *sd,
 		 */
 		ret = actor(pipe, sd);
 		if (unlikely(ret <= 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sd->pos = prev_pos;
 			goto out_release;
 		}
@@ -981,6 +1075,7 @@ ssize_t splice_direct_to_actor(struct file *in, struct splice_desc *sd,
 		sd->pos = pos;
 
 		if (ret < read_len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sd->pos = prev_pos + ret;
 			goto out_release;
 		}
@@ -1000,11 +1095,15 @@ ssize_t splice_direct_to_actor(struct file *in, struct splice_desc *sd,
 		struct pipe_buffer *buf = pipe->bufs + i;
 
 		if (buf->ops)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			pipe_buf_release(pipe, buf);
+}
 	}
 
 	if (!bytes)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bytes = ret;
+}
 
 	goto done;
 }
@@ -1049,19 +1148,26 @@ long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
 	long ret;
 
 	if (unlikely(!(out->f_mode & FMODE_WRITE)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	if (unlikely(out->f_flags & O_APPEND))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	ret = rw_verify_area(WRITE, out, opos, len);
 	if (unlikely(ret < 0))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	ret = splice_direct_to_actor(in, &sd, direct_splice_actor);
 	if (ret > 0)
 		*ppos = sd.pos;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL(do_splice_direct);
@@ -1069,6 +1175,7 @@ EXPORT_SYMBOL(do_splice_direct);
 static int wait_for_space(struct pipe_inode_info *pipe, unsigned flags)
 {
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unlikely(!pipe->readers)) {
 			send_sig(SIGPIPE, current, 0);
 			return -EPIPE;
@@ -1104,6 +1211,7 @@ static long do_splice(struct file *in, loff_t __user *off_in,
 	ipipe = get_pipe_info(in);
 	opipe = get_pipe_info(out);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ipipe && opipe) {
 		if (off_in || off_out)
 			return -ESPIPE;
@@ -1197,6 +1305,7 @@ static int iter_to_pipe(struct iov_iter *from,
 	int ret = 0;
 	bool failed = false;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (iov_iter_count(from) && !failed) {
 		struct page *pages[16];
 		ssize_t copied;
@@ -1234,6 +1343,7 @@ static int iter_to_pipe(struct iov_iter *from,
 static int pipe_to_user(struct pipe_inode_info *pipe, struct pipe_buffer *buf,
 			struct splice_desc *sd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int n = copy_page_to_iter(buf->page, buf->offset, sd->len, sd->u.data);
 	return n == sd->len ? n : -EFAULT;
 }
@@ -1254,7 +1364,9 @@ static long vmsplice_to_user(struct file *file, const struct iovec __user *uiov,
 
 	pipe = get_pipe_info(file);
 	if (!pipe)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	ret = import_iovec(READ, uiov, nr_segs,
 			   ARRAY_SIZE(iovstack), &iov, &iter);
@@ -1293,7 +1405,9 @@ static long vmsplice_to_pipe(struct file *file, const struct iovec __user *uiov,
 	unsigned buf_flag = 0;
 
 	if (flags & SPLICE_F_GIFT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		buf_flag = PIPE_BUF_FLAG_GIFT;
+}
 
 	pipe = get_pipe_info(file);
 	if (!pipe)
@@ -1338,7 +1452,9 @@ SYSCALL_DEFINE4(vmsplice, int, fd, const struct iovec __user *, iov,
 	long error;
 
 	if (unlikely(flags & ~SPLICE_F_ALL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (unlikely(nr_segs > UIO_MAXIOV))
 		return -EINVAL;
 	else if (unlikely(!nr_segs))
@@ -1365,7 +1481,9 @@ COMPAT_SYSCALL_DEFINE4(vmsplice, int, fd, const struct compat_iovec __user *, io
 	unsigned i;
 	struct iovec __user *iov;
 	if (nr_segs > UIO_MAXIOV)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	iov = compat_alloc_user_space(nr_segs * sizeof(struct iovec));
 	for (i = 0; i < nr_segs; i++) {
 		struct compat_iovec v;
@@ -1387,7 +1505,9 @@ SYSCALL_DEFINE6(splice, int, fd_in, loff_t __user *, off_in,
 	long error;
 
 	if (unlikely(!len))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (unlikely(flags & ~SPLICE_F_ALL))
 		return -EINVAL;
@@ -1423,7 +1543,9 @@ static int ipipe_prep(struct pipe_inode_info *pipe, unsigned int flags)
 	 * is speculative anyways, so missing one is ok.
 	 */
 	if (pipe->nrbufs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = 0;
 	pipe_lock(pipe);
@@ -1461,7 +1583,9 @@ static int opipe_prep(struct pipe_inode_info *pipe, unsigned int flags)
 	 * is speculative anyways, so missing one is ok.
 	 */
 	if (pipe->nrbufs < pipe->buffers)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = 0;
 	pipe_lock(pipe);
@@ -1622,6 +1746,7 @@ static int link_pipe(struct pipe_inode_info *ipipe,
 	pipe_double_lock(ipipe, opipe);
 
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!opipe->readers) {
 			send_sig(SIGPIPE, current, 0);
 			if (!ret)
@@ -1691,6 +1816,7 @@ static int link_pipe(struct pipe_inode_info *ipipe,
 static long do_tee(struct file *in, struct file *out, size_t len,
 		   unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct pipe_inode_info *ipipe = get_pipe_info(in);
 	struct pipe_inode_info *opipe = get_pipe_info(out);
 	int ret = -EINVAL;
@@ -1721,7 +1847,9 @@ SYSCALL_DEFINE4(tee, int, fdin, int, fdout, size_t, len, unsigned int, flags)
 	int error;
 
 	if (unlikely(flags & ~SPLICE_F_ALL))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (unlikely(!len))
 		return 0;
diff --git a/fs/squashfs/super.c b/fs/squashfs/super.c
index cf01e15..30d5fc1 100644
--- a/fs/squashfs/super.c
+++ b/fs/squashfs/super.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Squashfs - a compressed read only filesystem for Linux
  *
diff --git a/fs/stat.c b/fs/stat.c
index 873785d..cff5d30 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/stat.c
@@ -49,8 +51,10 @@ void generic_fillattr(struct inode *inode, struct kstat *stat)
 	if (IS_NOATIME(inode))
 		stat->result_mask &= ~STATX_ATIME;
 	if (IS_AUTOMOUNT(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		stat->attributes |= STATX_ATTR_AUTOMOUNT;
 }
+}
 EXPORT_SYMBOL(generic_fillattr);
 
 /**
@@ -112,7 +116,9 @@ int vfs_getattr(const struct path *path, struct kstat *stat,
 
 	retval = security_inode_getattr(path);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 	return vfs_getattr_nosec(path, stat, request_mask, query_flags);
 }
 EXPORT_SYMBOL(vfs_getattr);
@@ -136,7 +142,9 @@ int vfs_statx_fd(unsigned int fd, struct kstat *stat,
 	int error = -EBADF;
 
 	if (query_flags & ~KSTAT_QUERY_FLAGS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	f = fdget_raw(fd);
 	if (f.file) {
@@ -144,6 +152,7 @@ int vfs_statx_fd(unsigned int fd, struct kstat *stat,
 				    request_mask, query_flags);
 		fdput(f);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 EXPORT_SYMBOL(vfs_statx_fd);
@@ -175,11 +184,15 @@ int vfs_statx(int dfd, const char __user *filename, int flags,
 		return -EINVAL;
 
 	if (flags & AT_SYMLINK_NOFOLLOW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lookup_flags &= ~LOOKUP_FOLLOW;
+}
 	if (flags & AT_NO_AUTOMOUNT)
 		lookup_flags &= ~LOOKUP_AUTOMOUNT;
 	if (flags & AT_EMPTY_PATH)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lookup_flags |= LOOKUP_EMPTY;
+}
 
 retry:
 	error = user_path_at(dfd, filename, lookup_flags, &path);
@@ -189,6 +202,7 @@ int vfs_statx(int dfd, const char __user *filename, int flags,
 	error = vfs_getattr(&path, stat, request_mask, flags);
 	path_put(&path);
 	if (retry_estale(error, lookup_flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lookup_flags |= LOOKUP_REVAL;
 		goto retry;
 	}
@@ -210,6 +224,7 @@ static int cp_old_stat(struct kstat *stat, struct __old_kernel_stat __user * sta
 	struct __old_kernel_stat tmp;
 
 	if (warncount > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		warncount--;
 		printk(KERN_WARNING "VFS: Warning: %s using old stat() call. Recompile your binary.\n",
 			current->comm);
@@ -249,7 +264,9 @@ SYSCALL_DEFINE2(stat, const char __user *, filename,
 
 	error = vfs_stat(filename, &stat);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	return cp_old_stat(&stat, statbuf);
 }
@@ -262,7 +279,9 @@ SYSCALL_DEFINE2(lstat, const char __user *, filename,
 
 	error = vfs_lstat(filename, &stat);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	return cp_old_stat(&stat, statbuf);
 }
@@ -273,7 +292,9 @@ SYSCALL_DEFINE2(fstat, unsigned int, fd, struct __old_kernel_stat __user *, stat
 	int error = vfs_fstat(fd, &stat);
 
 	if (!error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = cp_old_stat(&stat, statbuf);
+}
 
 	return error;
 }
@@ -297,22 +318,31 @@ static int cp_new_stat(struct kstat *stat, struct stat __user *statbuf)
 {
 	struct stat tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!valid_dev(stat->dev) || !valid_dev(stat->rdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOVERFLOW;
+}
 #if BITS_PER_LONG == 32
 	if (stat->size > MAX_NON_LFS)
 		return -EOVERFLOW;
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_STRUCT_STAT_PADDING(tmp);
 	tmp.st_dev = encode_dev(stat->dev);
 	tmp.st_ino = stat->ino;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (sizeof(tmp.st_ino) < sizeof(stat->ino) && tmp.st_ino != stat->ino)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOVERFLOW;
+}
 	tmp.st_mode = stat->mode;
 	tmp.st_nlink = stat->nlink;
 	if (tmp.st_nlink != stat->nlink)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOVERFLOW;
+}
 	SET_UID(tmp.st_uid, from_kuid_munged(current_user_ns(), stat->uid));
 	SET_GID(tmp.st_gid, from_kgid_munged(current_user_ns(), stat->gid));
 	tmp.st_rdev = encode_dev(stat->rdev);
@@ -388,7 +418,9 @@ SYSCALL_DEFINE4(readlinkat, int, dfd, const char __user *, pathname,
 	unsigned int lookup_flags = LOOKUP_EMPTY;
 
 	if (bufsiz <= 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 retry:
 	error = user_path_at_empty(dfd, pathname, lookup_flags, &path, &empty);
@@ -408,6 +440,7 @@ SYSCALL_DEFINE4(readlinkat, int, dfd, const char __user *, pathname,
 		}
 		path_put(&path);
 		if (retry_estale(error, lookup_flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lookup_flags |= LOOKUP_REVAL;
 			goto retry;
 		}
@@ -543,6 +576,7 @@ cp_statx(const struct kstat *stat, struct statx __user *buffer)
 	tmp.stx_dev_major = MAJOR(stat->dev);
 	tmp.stx_dev_minor = MINOR(stat->dev);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return copy_to_user(buffer, &tmp, sizeof(tmp)) ? -EFAULT : 0;
 }
 
@@ -566,7 +600,9 @@ SYSCALL_DEFINE5(statx,
 	int error;
 
 	if (mask & STATX__RESERVED)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if ((flags & AT_STATX_SYNC_TYPE) == AT_STATX_SYNC_TYPE)
 		return -EINVAL;
 
@@ -582,6 +618,7 @@ static int cp_compat_stat(struct kstat *stat, struct compat_stat __user *ubuf)
 {
 	struct compat_stat tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!old_valid_dev(stat->dev) || !old_valid_dev(stat->rdev))
 		return -EOVERFLOW;
 
@@ -619,7 +656,9 @@ COMPAT_SYSCALL_DEFINE2(newstat, const char __user *, filename,
 
 	error = vfs_stat(filename, &stat);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	return cp_compat_stat(&stat, statbuf);
 }
 
@@ -631,7 +670,9 @@ COMPAT_SYSCALL_DEFINE2(newlstat, const char __user *, filename,
 
 	error = vfs_lstat(filename, &stat);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	return cp_compat_stat(&stat, statbuf);
 }
 
@@ -645,7 +686,9 @@ COMPAT_SYSCALL_DEFINE4(newfstatat, unsigned int, dfd,
 
 	error = vfs_fstatat(dfd, filename, &stat, flag);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	return cp_compat_stat(&stat, statbuf);
 }
 #endif
@@ -657,7 +700,9 @@ COMPAT_SYSCALL_DEFINE2(newfstat, unsigned int, fd,
 	int error = vfs_fstat(fd, &stat);
 
 	if (!error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = cp_compat_stat(&stat, statbuf);
+}
 	return error;
 }
 #endif
@@ -665,6 +710,7 @@ COMPAT_SYSCALL_DEFINE2(newfstat, unsigned int, fd,
 /* Caller is here responsible for sufficient locking (ie. inode->i_lock) */
 void __inode_add_bytes(struct inode *inode, loff_t bytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode->i_blocks += bytes >> 9;
 	bytes &= 511;
 	inode->i_bytes += bytes;
@@ -677,6 +723,7 @@ EXPORT_SYMBOL(__inode_add_bytes);
 
 void inode_add_bytes(struct inode *inode, loff_t bytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&inode->i_lock);
 	__inode_add_bytes(inode, bytes);
 	spin_unlock(&inode->i_lock);
@@ -686,6 +733,7 @@ EXPORT_SYMBOL(inode_add_bytes);
 
 void __inode_sub_bytes(struct inode *inode, loff_t bytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode->i_blocks -= bytes >> 9;
 	bytes &= 511;
 	if (inode->i_bytes < bytes) {
@@ -699,6 +747,7 @@ EXPORT_SYMBOL(__inode_sub_bytes);
 
 void inode_sub_bytes(struct inode *inode, loff_t bytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&inode->i_lock);
 	__inode_sub_bytes(inode, bytes);
 	spin_unlock(&inode->i_lock);
diff --git a/fs/statfs.c b/fs/statfs.c
index c25dd9a..fdddbe9 100644
--- a/fs/statfs.c
+++ b/fs/statfs.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/syscalls.h>
 #include <linux/export.h>
@@ -16,7 +18,9 @@ static int flags_by_mnt(int mnt_flags)
 	int flags = 0;
 
 	if (mnt_flags & MNT_READONLY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= ST_RDONLY;
+}
 	if (mnt_flags & MNT_NOSUID)
 		flags |= ST_NOSUID;
 	if (mnt_flags & MNT_NODEV)
@@ -24,9 +28,13 @@ static int flags_by_mnt(int mnt_flags)
 	if (mnt_flags & MNT_NOEXEC)
 		flags |= ST_NOEXEC;
 	if (mnt_flags & MNT_NOATIME)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= ST_NOATIME;
+}
 	if (mnt_flags & MNT_NODIRATIME)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= ST_NODIRATIME;
+}
 	if (mnt_flags & MNT_RELATIME)
 		flags |= ST_RELATIME;
 	return flags;
@@ -36,9 +44,13 @@ static int flags_by_sb(int s_flags)
 {
 	int flags = 0;
 	if (s_flags & MS_SYNCHRONOUS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= ST_SYNCHRONOUS;
+}
 	if (s_flags & MS_MANDLOCK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags |= ST_MANDLOCK;
+}
 	if (s_flags & MS_RDONLY)
 		flags |= ST_RDONLY;
 	return flags;
@@ -55,15 +67,21 @@ static int statfs_by_dentry(struct dentry *dentry, struct kstatfs *buf)
 	int retval;
 
 	if (!dentry->d_sb->s_op->statfs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOSYS;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(buf, 0, sizeof(*buf));
 	retval = security_sb_statfs(dentry);
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return retval;
+}
 	retval = dentry->d_sb->s_op->statfs(dentry, buf);
 	if (retval == 0 && buf->f_frsize == 0)
 		buf->f_frsize = buf->f_bsize;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 
@@ -89,6 +107,7 @@ int user_statfs(const char __user *pathname, struct kstatfs *st)
 		error = vfs_statfs(&path, st);
 		path_put(&path);
 		if (retry_estale(error, lookup_flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lookup_flags |= LOOKUP_REVAL;
 			goto retry;
 		}
@@ -98,6 +117,7 @@ int user_statfs(const char __user *pathname, struct kstatfs *st)
 
 int fd_statfs(int fd, struct kstatfs *st)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fd f = fdget_raw(fd);
 	int error = -EBADF;
 	if (f.file) {
@@ -112,9 +132,13 @@ static int do_statfs_native(struct kstatfs *st, struct statfs __user *p)
 	struct statfs buf;
 
 	if (sizeof(buf) == sizeof(*st))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(&buf, st, sizeof(*st));
+}
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (sizeof buf.f_blocks == 4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if ((st->f_blocks | st->f_bfree | st->f_bavail |
 			     st->f_bsize | st->f_frsize) &
 			    0xffffffff00000000ULL)
@@ -126,11 +150,13 @@ static int do_statfs_native(struct kstatfs *st, struct statfs __user *p)
 			if (st->f_files != -1 &&
 			    (st->f_files & 0xffffffff00000000ULL))
 				return -EOVERFLOW;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (st->f_ffree != -1 &&
 			    (st->f_ffree & 0xffffffff00000000ULL))
 				return -EOVERFLOW;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		buf.f_type = st->f_type;
 		buf.f_bsize = st->f_bsize;
 		buf.f_blocks = st->f_blocks;
@@ -145,7 +171,9 @@ static int do_statfs_native(struct kstatfs *st, struct statfs __user *p)
 		memset(buf.f_spare, 0, sizeof(buf.f_spare));
 	}
 	if (copy_to_user(p, &buf, sizeof(buf)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	return 0;
 }
 
@@ -153,7 +181,9 @@ static int do_statfs64(struct kstatfs *st, struct statfs64 __user *p)
 {
 	struct statfs64 buf;
 	if (sizeof(buf) == sizeof(*st))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(&buf, st, sizeof(*st));
+}
 	else {
 		buf.f_type = st->f_type;
 		buf.f_bsize = st->f_bsize;
@@ -183,11 +213,13 @@ SYSCALL_DEFINE2(statfs, const char __user *, pathname, struct statfs __user *, b
 }
 
 SYSCALL_DEFINE3(statfs64, const char __user *, pathname, size_t, sz, struct statfs64 __user *, buf)
-{
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kstatfs st;
 	int error;
 	if (sz != sizeof(*buf))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	error = user_statfs(pathname, &st);
 	if (!error)
 		error = do_statfs64(&st, buf);
@@ -195,21 +227,25 @@ SYSCALL_DEFINE3(statfs64, const char __user *, pathname, size_t, sz, struct stat
 }
 
 SYSCALL_DEFINE2(fstatfs, unsigned int, fd, struct statfs __user *, buf)
-{
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kstatfs st;
 	int error = fd_statfs(fd, &st);
 	if (!error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = do_statfs_native(&st, buf);
+}
 	return error;
 }
 
 SYSCALL_DEFINE3(fstatfs64, unsigned int, fd, size_t, sz, struct statfs64 __user *, buf)
-{
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct kstatfs st;
 	int error;
 
 	if (sz != sizeof(*buf))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	error = fd_statfs(fd, &st);
 	if (!error)
@@ -219,6 +255,7 @@ SYSCALL_DEFINE3(fstatfs64, unsigned int, fd, size_t, sz, struct statfs64 __user
 
 int vfs_ustat(dev_t dev, struct kstatfs *sbuf)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct super_block *s = user_get_super(dev);
 	int err;
 	if (!s)
@@ -235,7 +272,9 @@ SYSCALL_DEFINE2(ustat, unsigned, dev, struct ustat __user *, ubuf)
 	struct kstatfs sbuf;
 	int err = vfs_ustat(new_decode_dev(dev), &sbuf);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	memset(&tmp,0,sizeof(struct ustat));
 	tmp.f_tfree = sbuf.f_bfree;
@@ -249,6 +288,7 @@ static int put_compat_statfs(struct compat_statfs __user *ubuf, struct kstatfs *
 {
 	struct compat_statfs buf;
 	if (sizeof ubuf->f_blocks == 4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((kbuf->f_blocks | kbuf->f_bfree | kbuf->f_bavail |
 		     kbuf->f_bsize | kbuf->f_frsize) & 0xffffffff00000000ULL)
 			return -EOVERFLOW;
@@ -288,7 +328,9 @@ COMPAT_SYSCALL_DEFINE2(statfs, const char __user *, pathname, struct compat_stat
 	struct kstatfs tmp;
 	int error = user_statfs(pathname, &tmp);
 	if (!error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = put_compat_statfs(buf, &tmp);
+}
 	return error;
 }
 
@@ -297,7 +339,9 @@ COMPAT_SYSCALL_DEFINE2(fstatfs, unsigned int, fd, struct compat_statfs __user *,
 	struct kstatfs tmp;
 	int error = fd_statfs(fd, &tmp);
 	if (!error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = put_compat_statfs(buf, &tmp);
+}
 	return error;
 }
 
@@ -305,6 +349,7 @@ static int put_compat_statfs64(struct compat_statfs64 __user *ubuf, struct kstat
 {
 	struct compat_statfs64 buf;
 	if (sizeof(ubuf->f_bsize) == 4) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((kbuf->f_type | kbuf->f_bsize | kbuf->f_namelen |
 		     kbuf->f_frsize | kbuf->f_flags) & 0xffffffff00000000ULL)
 			return -EOVERFLOW;
@@ -341,7 +386,9 @@ COMPAT_SYSCALL_DEFINE3(statfs64, const char __user *, pathname, compat_size_t, s
 	int error;
 
 	if (sz != sizeof(*buf))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	error = user_statfs(pathname, &tmp);
 	if (!error)
@@ -355,7 +402,9 @@ COMPAT_SYSCALL_DEFINE3(fstatfs64, unsigned int, fd, compat_size_t, sz, struct co
 	int error;
 
 	if (sz != sizeof(*buf))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	error = fd_statfs(fd, &tmp);
 	if (!error)
@@ -374,7 +423,9 @@ COMPAT_SYSCALL_DEFINE2(ustat, unsigned, dev, struct compat_ustat __user *, u)
 	struct kstatfs sbuf;
 	int err = vfs_ustat(new_decode_dev(dev), &sbuf);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	memset(&tmp, 0, sizeof(struct compat_ustat));
 	tmp.f_tfree = sbuf.f_bfree;
diff --git a/fs/super.c b/fs/super.c
index 79d7fc5..846e5e4 100644
--- a/fs/super.c
+++ b/fs/super.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/fs/super.c
@@ -64,6 +66,7 @@ static unsigned long super_cache_scan(struct shrinker *shrink,
 	long	dentries;
 	long	inodes;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sb = container_of(shrink, struct super_block, s_shrink);
 
 	/*
@@ -117,6 +120,7 @@ static unsigned long super_cache_count(struct shrinker *shrink,
 	struct super_block *sb;
 	long	total_objects = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sb = container_of(shrink, struct super_block, s_shrink);
 
 	/*
@@ -150,6 +154,7 @@ static void destroy_super_work(struct work_struct *work)
 
 static void destroy_super_rcu(struct rcu_head *head)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct super_block *s = container_of(head, struct super_block, rcu);
 	INIT_WORK(&s->destroy_work, destroy_super_work);
 	schedule_work(&s->destroy_work);
@@ -189,7 +194,9 @@ static struct super_block *alloc_super(struct file_system_type *type, int flags,
 	int i;
 
 	if (!s)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	INIT_LIST_HEAD(&s->s_mounts);
 	s->s_user_ns = get_user_ns(user_ns);
@@ -207,7 +214,10 @@ static struct super_block *alloc_super(struct file_system_type *type, int flags,
 	s->s_bdi = &noop_backing_dev_info;
 	s->s_flags = flags;
 	if (s->s_user_ns != &init_user_ns)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		s->s_iflags |= SB_I_NODEV;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	INIT_HLIST_NODE(&s->s_instances);
 	INIT_HLIST_BL_HEAD(&s->s_anon);
 	mutex_init(&s->s_sync_lock);
@@ -222,6 +232,7 @@ static struct super_block *alloc_super(struct file_system_type *type, int flags,
 		goto fail;
 
 	init_rwsem(&s->s_umount);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_class(&s->s_umount, &type->s_umount_key);
 	/*
 	 * sget() can have s_umount recursion.
@@ -242,6 +253,7 @@ static struct super_block *alloc_super(struct file_system_type *type, int flags,
 	s->s_count = 1;
 	atomic_set(&s->s_active, 1);
 	mutex_init(&s->s_vfs_rename_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_class(&s->s_vfs_rename_mutex, &type->s_vfs_rename_key);
 	init_rwsem(&s->s_dquot.dqio_sem);
 	s->s_maxbytes = MAX_NON_LFS;
@@ -283,6 +295,7 @@ static void __put_super(struct super_block *sb)
  */
 static void put_super(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&sb_lock);
 	__put_super(sb);
 	spin_unlock(&sb_lock);
@@ -304,6 +317,7 @@ void deactivate_locked_super(struct super_block *s)
 {
 	struct file_system_type *fs = s->s_type;
 	if (atomic_dec_and_test(&s->s_active)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cleancache_invalidate_fs(s);
 		unregister_shrinker(&s->s_shrink);
 		fs->kill_sb(s);
@@ -319,6 +333,7 @@ void deactivate_locked_super(struct super_block *s)
 		put_filesystem(fs);
 		put_super(s);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up_write(&s->s_umount);
 	}
 }
@@ -365,6 +380,7 @@ static int grab_super(struct super_block *s) __releases(sb_lock)
 		put_super(s);
 		return 1;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	up_write(&s->s_umount);
 	put_super(s);
 	return 0;
@@ -389,6 +405,7 @@ static int grab_super(struct super_block *s) __releases(sb_lock)
  */
 bool trylock_super(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (down_read_trylock(&sb->s_umount)) {
 		if (!hlist_unhashed(&sb->s_instances) &&
 		    sb->s_root && (sb->s_flags & SB_BORN))
@@ -428,6 +445,7 @@ void generic_shutdown_super(struct super_block *sb)
 		evict_inodes(sb);
 
 		if (sb->s_dio_done_wq) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			destroy_workqueue(sb->s_dio_done_wq);
 			sb->s_dio_done_wq = NULL;
 		}
@@ -436,17 +454,20 @@ void generic_shutdown_super(struct super_block *sb)
 			sop->put_super(sb);
 
 		if (!list_empty(&sb->s_inodes)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk("VFS: Busy inodes after unmount of %s. "
 			   "Self-destruct in 5 seconds.  Have a nice day...\n",
 			   sb->s_id);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&sb_lock);
 	/* should be initialized for __put_super_and_need_restart() */
 	hlist_del_init(&sb->s_instances);
 	spin_unlock(&sb_lock);
 	up_write(&sb->s_umount);
 	if (sb->s_bdi != &noop_backing_dev_info) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bdi_put(sb->s_bdi);
 		sb->s_bdi = &noop_backing_dev_info;
 	}
@@ -484,33 +505,42 @@ struct super_block *sget_userns(struct file_system_type *type,
 			if (!test(old, data))
 				continue;
 			if (user_ns != old->s_user_ns) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				spin_unlock(&sb_lock);
 				if (s) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					up_write(&s->s_umount);
 					destroy_super(s);
 				}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ERR_PTR(-EBUSY);
 			}
 			if (!grab_super(old))
 				goto retry;
 			if (s) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				up_write(&s->s_umount);
 				destroy_super(s);
 				s = NULL;
 			}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return old;
 		}
 	}
 	if (!s) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&sb_lock);
 		s = alloc_super(type, (flags & ~SB_SUBMOUNT), user_ns);
 		if (!s)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-ENOMEM);
+}
 		goto retry;
 	}
 
 	err = set(s, data);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&sb_lock);
 		up_write(&s->s_umount);
 		destroy_super(s);
@@ -524,9 +554,11 @@ struct super_block *sget_userns(struct file_system_type *type,
 	get_filesystem(type);
 	err = register_shrinker(&s->s_shrink);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		deactivate_locked_super(s);
 		s = ERR_PTR(err);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return s;
 }
 
@@ -553,11 +585,15 @@ struct super_block *sget(struct file_system_type *type,
 	 * until that changes.
 	 */
 	if (flags & SB_SUBMOUNT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		user_ns = &init_user_ns;
+}
 
 	/* Ensure the requestor has permissions over the target filesystem */
 	if (!(flags & (SB_KERNMOUNT|SB_SUBMOUNT)) && !ns_capable(user_ns, CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EPERM);
+}
 
 	return sget_userns(type, test, set, flags, user_ns, data);
 }
@@ -566,6 +602,7 @@ EXPORT_SYMBOL(sget);
 
 void drop_super(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	up_read(&sb->s_umount);
 	put_super(sb);
 }
@@ -574,6 +611,7 @@ EXPORT_SYMBOL(drop_super);
 
 void drop_super_exclusive(struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	up_write(&sb->s_umount);
 	put_super(sb);
 }
@@ -592,6 +630,7 @@ void iterate_supers(void (*f)(struct super_block *, void *), void *arg)
 	struct super_block *sb, *p = NULL;
 
 	spin_lock(&sb_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(sb, &super_blocks, s_list) {
 		if (hlist_unhashed(&sb->s_instances))
 			continue;
@@ -628,6 +667,7 @@ void iterate_supers_type(struct file_system_type *type,
 	struct super_block *sb, *p = NULL;
 
 	spin_lock(&sb_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hlist_for_each_entry(sb, &type->fs_supers, s_instances) {
 		sb->s_count++;
 		spin_unlock(&sb_lock);
@@ -654,25 +694,36 @@ static struct super_block *__get_super(struct block_device *bdev, bool excl)
 	struct super_block *sb;
 
 	if (!bdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&sb_lock);
 rescan:
 	list_for_each_entry(sb, &super_blocks, s_list) {
 		if (hlist_unhashed(&sb->s_instances))
 			continue;
 		if (sb->s_bdev == bdev) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sb->s_count++;
 			spin_unlock(&sb_lock);
 			if (!excl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				down_read(&sb->s_umount);
+}
 			else
 				down_write(&sb->s_umount);
 			/* still alive? */
 			if (sb->s_root && (sb->s_flags & SB_BORN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return sb;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!excl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				up_read(&sb->s_umount);
+}
 			else
 				up_write(&sb->s_umount);
 			/* nope, got unmounted */
@@ -681,6 +732,7 @@ static struct super_block *__get_super(struct block_device *bdev, bool excl)
 			goto rescan;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sb_lock);
 	return NULL;
 }
@@ -701,6 +753,7 @@ EXPORT_SYMBOL(get_super);
 static struct super_block *__get_super_thawed(struct block_device *bdev,
 					      bool excl)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		struct super_block *s = __get_super(bdev, excl);
 		if (!s || s->s_writers.frozen == SB_UNFROZEN)
@@ -726,6 +779,7 @@ static struct super_block *__get_super_thawed(struct block_device *bdev,
  */
 struct super_block *get_super_thawed(struct block_device *bdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __get_super_thawed(bdev, false);
 }
 EXPORT_SYMBOL(get_super_thawed);
@@ -741,6 +795,7 @@ EXPORT_SYMBOL(get_super_thawed);
  */
 struct super_block *get_super_exclusive_thawed(struct block_device *bdev)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __get_super_thawed(bdev, true);
 }
 EXPORT_SYMBOL(get_super_exclusive_thawed);
@@ -758,7 +813,9 @@ struct super_block *get_active_super(struct block_device *bdev)
 	struct super_block *sb;
 
 	if (!bdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 restart:
 	spin_lock(&sb_lock);
@@ -818,24 +875,35 @@ int do_remount_sb(struct super_block *sb, int sb_flags, void *data, int force)
 	int remount_ro;
 
 	if (sb->s_writers.frozen != SB_UNFROZEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBUSY;
+}
 
 #ifdef CONFIG_BLOCK
 	if (!(sb_flags & SB_RDONLY) && bdev_read_only(sb->s_bdev))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;
+}
 #endif
 
 	remount_ro = (sb_flags & SB_RDONLY) && !sb_rdonly(sb);
 
 	if (remount_ro) {
 		if (!hlist_empty(&sb->s_pins)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up_write(&sb->s_umount);
 			group_pin_kill(&sb->s_pins);
 			down_write(&sb->s_umount);
 			if (!sb->s_root)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (sb->s_writers.frozen != SB_UNFROZEN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EBUSY;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			remount_ro = (sb_flags & SB_RDONLY) && !sb_rdonly(sb);
 		}
 	}
@@ -845,18 +913,22 @@ int do_remount_sb(struct super_block *sb, int sb_flags, void *data, int force)
 	   make sure there are no rw files opened */
 	if (remount_ro) {
 		if (force) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sb->s_readonly_remount = 1;
 			smp_wmb();
 		} else {
 			retval = sb_prepare_remount_readonly(sb);
 			if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return retval;
+}
 		}
 	}
 
 	if (sb->s_op->remount_fs) {
 		retval = sb->s_op->remount_fs(sb, &sb_flags, data);
 		if (retval) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!force)
 				goto cancel_readonly;
 			/* If forced remount, go ahead despite any errors */
@@ -878,7 +950,10 @@ int do_remount_sb(struct super_block *sb, int sb_flags, void *data, int force)
 	 * effort at coherency.
 	 */
 	if (remount_ro && sb->s_bdev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		invalidate_bdev(sb->s_bdev);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 cancel_readonly:
@@ -891,6 +966,7 @@ static void do_emergency_remount(struct work_struct *work)
 	struct super_block *sb, *p = NULL;
 
 	spin_lock(&sb_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(sb, &super_blocks, s_list) {
 		if (hlist_unhashed(&sb->s_instances))
 			continue;
@@ -923,6 +999,7 @@ void emergency_remount(void)
 
 	work = kmalloc(sizeof(*work), GFP_ATOMIC);
 	if (work) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INIT_WORK(work, do_emergency_remount);
 		schedule_work(work);
 	}
@@ -947,23 +1024,33 @@ int get_anon_bdev(dev_t *p)
 
  retry:
 	if (ida_pre_get(&unnamed_dev_ida, GFP_ATOMIC) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&unnamed_dev_lock);
 	error = ida_get_new_above(&unnamed_dev_ida, unnamed_dev_start, &dev);
 	if (!error)
 		unnamed_dev_start = dev + 1;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&unnamed_dev_lock);
 	if (error == -EAGAIN)
 		/* We raced and lost with another CPU. */
 		goto retry;
 	else if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAGAIN;
+}
 
 	if (dev >= (1 << MINORBITS)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&unnamed_dev_lock);
 		ida_remove(&unnamed_dev_ida, dev);
 		if (unnamed_dev_start > dev)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			unnamed_dev_start = dev;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock(&unnamed_dev_lock);
 		return -EMFILE;
 	}
@@ -979,6 +1066,7 @@ void free_anon_bdev(dev_t dev)
 	ida_remove(&unnamed_dev_ida, slot);
 	if (slot < unnamed_dev_start)
 		unnamed_dev_start = slot;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&unnamed_dev_lock);
 }
 EXPORT_SYMBOL(free_anon_bdev);
@@ -1029,17 +1117,22 @@ struct dentry *mount_ns(struct file_system_type *fs_type,
 	 * over the namespace.
 	 */
 	if (!(flags & SB_KERNMOUNT) && !ns_capable(user_ns, CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EPERM);
+}
 
 	sb = sget_userns(fs_type, ns_test_super, ns_set_super, flags,
 			 user_ns, ns);
 	if (IS_ERR(sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(sb);
+}
 
 	if (!sb->s_root) {
 		int err;
 		err = fill_super(sb, data, flags & SB_SILENT ? 1 : 0);
 		if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			deactivate_locked_super(sb);
 			return ERR_PTR(err);
 		}
@@ -1055,6 +1148,7 @@ EXPORT_SYMBOL(mount_ns);
 #ifdef CONFIG_BLOCK
 static int set_bdev_super(struct super_block *s, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	s->s_bdev = data;
 	s->s_dev = s->s_bdev->bd_dev;
 	s->s_bdi = bdi_get(s->s_bdev->bd_bdi);
@@ -1064,6 +1158,7 @@ static int set_bdev_super(struct super_block *s, void *data)
 
 static int test_bdev_super(struct super_block *s, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (void *)s->s_bdev == data;
 }
 
@@ -1077,7 +1172,9 @@ struct dentry *mount_bdev(struct file_system_type *fs_type,
 	int error = 0;
 
 	if (!(flags & SB_RDONLY))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mode |= FMODE_WRITE;
+}
 
 	bdev = blkdev_get_by_path(dev_name, mode, fs_type);
 	if (IS_ERR(bdev))
@@ -1150,6 +1247,7 @@ void kill_block_super(struct super_block *sb)
 	bdev->bd_super = NULL;
 	generic_shutdown_super(sb);
 	sync_blockdev(bdev);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON_ONCE(!(mode & FMODE_EXCL));
 	blkdev_put(bdev, mode | FMODE_EXCL);
 }
@@ -1165,10 +1263,13 @@ struct dentry *mount_nodev(struct file_system_type *fs_type,
 	struct super_block *s = sget(fs_type, NULL, set_anon_super, flags, NULL);
 
 	if (IS_ERR(s))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(s);
+}
 
 	error = fill_super(s, data, flags & SB_SILENT ? 1 : 0);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		deactivate_locked_super(s);
 		return ERR_PTR(error);
 	}
@@ -1191,10 +1292,13 @@ struct dentry *mount_single(struct file_system_type *fs_type,
 
 	s = sget(fs_type, compare_single, set_anon_super, flags, NULL);
 	if (IS_ERR(s))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(s);
+}
 	if (!s->s_root) {
 		error = fill_super(s, data, flags & SB_SILENT ? 1 : 0);
 		if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			deactivate_locked_super(s);
 			return ERR_PTR(error);
 		}
@@ -1226,6 +1330,7 @@ mount_fs(struct file_system_type *type, int flags, const char *name, void *data)
 
 	root = type->mount(type, flags, name, data);
 	if (IS_ERR(root)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = PTR_ERR(root);
 		goto out_free_secdata;
 	}
@@ -1271,7 +1376,9 @@ int super_setup_bdi_name(struct super_block *sb, char *fmt, ...)
 
 	bdi = bdi_alloc(GFP_KERNEL);
 	if (!bdi)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	bdi->name = sb->s_type->name;
 
@@ -1346,6 +1453,7 @@ int __sb_start_write(struct super_block *sb, int level, bool wait)
 	else
 		ret = percpu_down_read_trylock(sb->s_writers.rw_sem + level-1);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	WARN_ON(force_trylock && !ret);
 	return ret;
 }
@@ -1361,6 +1469,7 @@ EXPORT_SYMBOL(__sb_start_write);
  */
 static void sb_wait_write(struct super_block *sb, int level)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	percpu_down_write(sb->s_writers.rw_sem + level-1);
 }
 
@@ -1372,6 +1481,7 @@ static void lockdep_sb_freeze_release(struct super_block *sb)
 {
 	int level;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (level = SB_FREEZE_LEVELS - 1; level >= 0; level--)
 		percpu_rwsem_release(sb->s_writers.rw_sem + level, 0, _THIS_IP_);
 }
@@ -1383,6 +1493,7 @@ static void lockdep_sb_freeze_acquire(struct super_block *sb)
 {
 	int level;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (level = 0; level < SB_FREEZE_LEVELS; ++level)
 		percpu_rwsem_acquire(sb->s_writers.rw_sem + level, 0, _THIS_IP_);
 }
@@ -1391,6 +1502,7 @@ static void sb_freeze_unlock(struct super_block *sb)
 {
 	int level;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (level = SB_FREEZE_LEVELS - 1; level >= 0; level--)
 		percpu_up_write(sb->s_writers.rw_sem + level);
 }
@@ -1435,6 +1547,7 @@ int freeze_super(struct super_block *sb)
 	atomic_inc(&sb->s_active);
 	down_write(&sb->s_umount);
 	if (sb->s_writers.frozen != SB_UNFROZEN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		deactivate_locked_super(sb);
 		return -EBUSY;
 	}
@@ -1503,6 +1616,7 @@ int thaw_super(struct super_block *sb)
 
 	down_write(&sb->s_umount);
 	if (sb->s_writers.frozen != SB_FREEZE_COMPLETE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up_write(&sb->s_umount);
 		return -EINVAL;
 	}
diff --git a/fs/sync.c b/fs/sync.c
index 83ac79a..6be93c8 100644
--- a/fs/sync.c
+++ b/fs/sync.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * High-level sync()-related operations
@@ -59,29 +61,36 @@ int sync_filesystem(struct super_block *sb)
 	 * No point in syncing out anything if the filesystem is read-only.
 	 */
 	if (sb_rdonly(sb))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	ret = __sync_filesystem(sb, 0);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return __sync_filesystem(sb, 1);
 }
 EXPORT_SYMBOL(sync_filesystem);
 
 static void sync_inodes_one_sb(struct super_block *sb, void *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!sb_rdonly(sb))
 		sync_inodes_sb(sb);
 }
 
 static void sync_fs_one_sb(struct super_block *sb, void *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!sb_rdonly(sb) && sb->s_op->sync_fs)
 		sb->s_op->sync_fs(sb, *(int *)arg);
 }
 
 static void fdatawrite_one_bdev(struct block_device *bdev, void *arg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	filemap_fdatawrite(bdev->bd_inode->i_mapping);
 }
 
@@ -116,7 +125,9 @@ SYSCALL_DEFINE0(sync)
 	iterate_bdevs(fdatawrite_one_bdev, NULL);
 	iterate_bdevs(fdatawait_one_bdev, NULL);
 	if (unlikely(laptop_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		laptop_sync_completion();
+}
 	return 0;
 }
 
@@ -144,6 +155,7 @@ void emergency_sync(void)
 
 	work = kmalloc(sizeof(*work), GFP_ATOMIC);
 	if (work) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		INIT_WORK(work, do_sync_work);
 		schedule_work(work);
 	}
@@ -154,6 +166,7 @@ void emergency_sync(void)
  */
 SYSCALL_DEFINE1(syncfs, int, fd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fd f = fdget(fd);
 	struct super_block *sb;
 	int ret;
@@ -186,8 +199,11 @@ int vfs_fsync_range(struct file *file, loff_t start, loff_t end, int datasync)
 	struct inode *inode = file->f_mapping->host;
 
 	if (!file->f_op->fsync)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (!datasync && (inode->i_state & I_DIRTY_TIME)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&inode->i_lock);
 		inode->i_state &= ~I_DIRTY_TIME;
 		spin_unlock(&inode->i_lock);
@@ -293,6 +309,7 @@ SYSCALL_DEFINE4(sync_file_range, int, fd, loff_t, offset, loff_t, nbytes,
 	if (flags & ~VALID_FLAGS)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	endbyte = offset + nbytes;
 
 	if ((s64)offset < 0)
@@ -364,5 +381,6 @@ SYSCALL_DEFINE4(sync_file_range, int, fd, loff_t, offset, loff_t, nbytes,
 SYSCALL_DEFINE4(sync_file_range2, int, fd, unsigned int, flags,
 				 loff_t, offset, loff_t, nbytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sys_sync_file_range(fd, offset, nbytes, flags);
 }
diff --git a/fs/sysfs/dir.c b/fs/sysfs/dir.c
index 2b67bda..4c04366 100644
--- a/fs/sysfs/dir.c
+++ b/fs/sysfs/dir.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/sysfs/dir.c - sysfs core and dir operation implementation
  *
@@ -25,7 +27,9 @@ void sysfs_warn_dup(struct kernfs_node *parent, const char *name)
 
 	buf = kzalloc(PATH_MAX, GFP_KERNEL);
 	if (buf)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kernfs_path(parent, buf, PATH_MAX);
+}
 
 	WARN(1, KERN_WARNING "sysfs: cannot create duplicate filename '%s/%s'\n",
 	     buf, name);
@@ -50,13 +54,19 @@ int sysfs_create_dir_ns(struct kobject *kobj, const void *ns)
 		parent = sysfs_root_kn;
 
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	kn = kernfs_create_dir_ns(parent, kobject_name(kobj),
 				  S_IRWXU | S_IRUGO | S_IXUGO, kobj, ns);
 	if (IS_ERR(kn)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (PTR_ERR(kn) == -EEXIST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sysfs_warn_dup(parent, kobject_name(kobj));
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(kn);
 	}
 
@@ -116,6 +126,7 @@ int sysfs_move_dir_ns(struct kobject *kobj, struct kobject *new_parent_kobj,
 	struct kernfs_node *kn = kobj->sd;
 	struct kernfs_node *new_parent;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	new_parent = new_parent_kobj && new_parent_kobj->sd ?
 		new_parent_kobj->sd : sysfs_root_kn;
 
@@ -133,11 +144,16 @@ int sysfs_create_mount_point(struct kobject *parent_kobj, const char *name)
 
 	kn = kernfs_create_empty_dir(parent, name);
 	if (IS_ERR(kn)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (PTR_ERR(kn) == -EEXIST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sysfs_warn_dup(parent, name);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(kn);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL_GPL(sysfs_create_mount_point);
diff --git a/fs/sysfs/file.c b/fs/sysfs/file.c
index 39c75a8..a7179fa 100644
--- a/fs/sysfs/file.c
+++ b/fs/sysfs/file.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/sysfs/file.c - sysfs regular (text) file implementation
  *
@@ -30,7 +32,9 @@ static const struct sysfs_ops *sysfs_file_ops(struct kernfs_node *kn)
 	struct kobject *kobj = kn->parent->priv;
 
 	if (kn->flags & KERNFS_LOCKDEP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lockdep_assert_held(kn);
+}
 	return kobj->ktype ? kobj->ktype->sysfs_ops : NULL;
 }
 
@@ -50,6 +54,7 @@ static int sysfs_kf_seq_show(struct seq_file *sf, void *v)
 	/* acquire buffer and ensure that it's >= PAGE_SIZE and clear */
 	count = seq_get_buf(sf, &buf);
 	if (count < PAGE_SIZE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		seq_commit(sf, -1);
 		return 0;
 	}
@@ -62,7 +67,9 @@ static int sysfs_kf_seq_show(struct seq_file *sf, void *v)
 	if (ops->show) {
 		count = ops->show(kobj, of->kn->priv, buf);
 		if (count < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return count;
+}
 	}
 
 	/*
@@ -70,6 +77,7 @@ static int sysfs_kf_seq_show(struct seq_file *sf, void *v)
 	 * indicate truncated result or overflow in normal use cases.
 	 */
 	if (count >= (ssize_t)PAGE_SIZE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		print_symbol("fill_read_buffer: %s returned bad count\n",
 			(unsigned long)ops->show);
 		/* Try to struggle along */
@@ -87,7 +95,9 @@ static ssize_t sysfs_kf_bin_read(struct kernfs_open_file *of, char *buf,
 	loff_t size = file_inode(of->file)->i_size;
 
 	if (!count)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (size) {
 		if (pos >= size)
@@ -106,6 +116,7 @@ static ssize_t sysfs_kf_bin_read(struct kernfs_open_file *of, char *buf,
 static ssize_t sysfs_kf_read(struct kernfs_open_file *of, char *buf,
 			     size_t count, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct sysfs_ops *ops = sysfs_file_ops(of->kn);
 	struct kobject *kobj = of->kn->parent->priv;
 	ssize_t len;
@@ -132,6 +143,7 @@ static ssize_t sysfs_kf_read(struct kernfs_open_file *of, char *buf,
 static ssize_t sysfs_kf_write(struct kernfs_open_file *of, char *buf,
 			      size_t count, loff_t pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct sysfs_ops *ops = sysfs_file_ops(of->kn);
 	struct kobject *kobj = of->kn->parent->priv;
 
@@ -150,6 +162,7 @@ static ssize_t sysfs_kf_bin_write(struct kernfs_open_file *of, char *buf,
 	loff_t size = file_inode(of->file)->i_size;
 
 	if (size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (size <= pos)
 			return -EFBIG;
 		count = min_t(ssize_t, count, size - pos);
@@ -176,6 +189,7 @@ void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr)
 {
 	struct kernfs_node *kn = kobj->sd, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (kn && dir)
 		kn = kernfs_find_and_get(kn, dir);
 	else
@@ -266,34 +280,53 @@ int sysfs_add_file_mode_ns(struct kernfs_node *parent,
 
 		if (sysfs_ops->show && sysfs_ops->store) {
 			if (mode & SYSFS_PREALLOC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ops = &sysfs_prealloc_kfops_rw;
+}
 			else
 				ops = &sysfs_file_kfops_rw;
 		} else if (sysfs_ops->show) {
 			if (mode & SYSFS_PREALLOC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ops = &sysfs_prealloc_kfops_ro;
+}
 			else
 				ops = &sysfs_file_kfops_ro;
 		} else if (sysfs_ops->store) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (mode & SYSFS_PREALLOC)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ops = &sysfs_prealloc_kfops_wo;
+}
 			else
 				ops = &sysfs_file_kfops_wo;
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ops = &sysfs_file_kfops_empty;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		size = PAGE_SIZE;
 	} else {
 		struct bin_attribute *battr = (void *)attr;
 
 		if (battr->mmap)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ops = &sysfs_bin_kfops_mmap;
+}
 		else if (battr->read && battr->write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ops = &sysfs_bin_kfops_rw;
+}
 		else if (battr->read)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ops = &sysfs_bin_kfops_ro;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		else if (battr->write)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ops = &sysfs_bin_kfops_wo;
+}
 		else
 			ops = &sysfs_file_kfops_empty;
 
@@ -307,10 +340,15 @@ int sysfs_add_file_mode_ns(struct kernfs_node *parent,
 	kn = __kernfs_create_file(parent, attr->name, mode & 0777, size, ops,
 				  (void *)attr, ns, key);
 	if (IS_ERR(kn)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (PTR_ERR(kn) == -EEXIST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			sysfs_warn_dup(parent, attr->name);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(kn);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -344,8 +382,10 @@ int sysfs_create_files(struct kobject *kobj, const struct attribute **ptr)
 	for (i = 0; ptr[i] && !err; i++)
 		err = sysfs_create_file(kobj, ptr[i]);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (--i >= 0)
 			sysfs_remove_file(kobj, ptr[i]);
+}
 	return err;
 }
 EXPORT_SYMBOL_GPL(sysfs_create_files);
@@ -363,6 +403,7 @@ int sysfs_add_file_to_group(struct kobject *kobj,
 	int error;
 
 	if (group) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = kernfs_find_and_get(kobj->sd, group);
 	} else {
 		parent = kobj->sd;
@@ -395,7 +436,9 @@ int sysfs_chmod_file(struct kobject *kobj, const struct attribute *attr,
 
 	kn = kernfs_find_and_get(kobj->sd, attr->name);
 	if (!kn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	newattrs.ia_mode = (mode & S_IALLUGO) | (kn->mode & ~S_IALLUGO);
 	newattrs.ia_valid = ATTR_MODE;
@@ -438,6 +481,7 @@ bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr)
 	bool ret;
 
 	kn = kernfs_find_and_get(parent, attr->name);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON_ONCE(!kn))
 		return false;
 
@@ -450,6 +494,7 @@ bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr)
 void sysfs_remove_files(struct kobject *kobj, const struct attribute **ptr)
 {
 	int i;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; ptr[i]; i++)
 		sysfs_remove_file(kobj, ptr[i]);
 }
@@ -467,6 +512,7 @@ void sysfs_remove_file_from_group(struct kobject *kobj,
 	struct kernfs_node *parent;
 
 	if (group) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = kernfs_find_and_get(kobj->sd, group);
 	} else {
 		parent = kobj->sd;
@@ -502,6 +548,7 @@ EXPORT_SYMBOL_GPL(sysfs_create_bin_file);
 void sysfs_remove_bin_file(struct kobject *kobj,
 			   const struct bin_attribute *attr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kernfs_remove_by_name(kobj->sd, attr->attr.name);
 }
 EXPORT_SYMBOL_GPL(sysfs_remove_bin_file);
diff --git a/fs/sysfs/group.c b/fs/sysfs/group.c
index ac2de0e..5bc8409 100644
--- a/fs/sysfs/group.c
+++ b/fs/sysfs/group.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/sysfs/group.c - Operations for adding/removing multiple files at once.
  *
@@ -28,9 +30,13 @@ static void remove_files(struct kernfs_node *parent,
 		for (attr = grp->attrs; *attr; attr++)
 			kernfs_remove_by_name(parent, (*attr)->name);
 	if (grp->bin_attrs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for (bin_attr = grp->bin_attrs; *bin_attr; bin_attr++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kernfs_remove_by_name(parent, (*bin_attr)->attr.name);
 }
+}
+}
 
 static int create_files(struct kernfs_node *parent, struct kobject *kobj,
 			const struct attribute_group *grp, int update)
@@ -49,7 +55,9 @@ static int create_files(struct kernfs_node *parent, struct kobject *kobj,
 			 * re-adding (if required) the file.
 			 */
 			if (update)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kernfs_remove_by_name(parent, (*attr)->name);
+}
 			if (grp->is_visible) {
 				mode = grp->is_visible(kobj, *attr, i);
 				if (!mode)
@@ -67,6 +75,7 @@ static int create_files(struct kernfs_node *parent, struct kobject *kobj,
 				break;
 		}
 		if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			remove_files(parent, grp);
 			goto exit;
 		}
@@ -77,8 +86,10 @@ static int create_files(struct kernfs_node *parent, struct kobject *kobj,
 			umode_t mode = (*bin_attr)->attr.mode;
 
 			if (update)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kernfs_remove_by_name(parent,
 						(*bin_attr)->attr.name);
+}
 			if (grp->is_bin_visible) {
 				mode = grp->is_bin_visible(kobj, *bin_attr, i);
 				if (!mode)
@@ -97,7 +108,9 @@ static int create_files(struct kernfs_node *parent, struct kobject *kobj,
 				break;
 		}
 		if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			remove_files(parent, grp);
+}
 	}
 exit:
 	return error;
@@ -114,8 +127,11 @@ static int internal_create_group(struct kobject *kobj, int update,
 
 	/* Updates may happen before the object has been instantiated */
 	if (unlikely(update && !kobj->sd))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (!grp->attrs && !grp->bin_attrs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		WARN(1, "sysfs: (bin_)attrs not set by subsystem for group: %s/%s\n",
 			kobj->name, grp->name ?: "");
 		return -EINVAL;
@@ -124,8 +140,12 @@ static int internal_create_group(struct kobject *kobj, int update,
 		kn = kernfs_create_dir(kobj->sd, grp->name,
 				       S_IRWXU | S_IRUGO | S_IXUGO, kobj);
 		if (IS_ERR(kn)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (PTR_ERR(kn) == -EEXIST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				sysfs_warn_dup(kobj->sd, grp->name);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return PTR_ERR(kn);
 		}
 	} else
@@ -133,8 +153,11 @@ static int internal_create_group(struct kobject *kobj, int update,
 	kernfs_get(kn);
 	error = create_files(kn, kobj, grp, update);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (grp->name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kernfs_remove(kn);
+}
 	}
 	kernfs_put(kn);
 	return error;
@@ -177,16 +200,20 @@ int sysfs_create_groups(struct kobject *kobj,
 	int i;
 
 	if (!groups)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	for (i = 0; groups[i]; i++) {
 		error = sysfs_create_group(kobj, groups[i]);
 		if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			while (--i >= 0)
 				sysfs_remove_group(kobj, groups[i]);
 			break;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 EXPORT_SYMBOL_GPL(sysfs_create_groups);
@@ -211,6 +238,7 @@ EXPORT_SYMBOL_GPL(sysfs_create_groups);
 int sysfs_update_group(struct kobject *kobj,
 		       const struct attribute_group *grp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return internal_create_group(kobj, 1, grp);
 }
 EXPORT_SYMBOL_GPL(sysfs_update_group);
@@ -232,12 +260,14 @@ void sysfs_remove_group(struct kobject *kobj,
 	if (grp->name) {
 		kn = kernfs_find_and_get(parent, grp->name);
 		if (!kn) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			WARN(!kn, KERN_WARNING
 			     "sysfs group '%s' not found for kobject '%s'\n",
 			     grp->name, kobject_name(kobj));
 			return;
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kn = parent;
 		kernfs_get(kn);
 	}
@@ -264,7 +294,9 @@ void sysfs_remove_groups(struct kobject *kobj,
 	int i;
 
 	if (!groups)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	for (i = 0; groups[i]; i++)
 		sysfs_remove_group(kobj, groups[i]);
 }
@@ -289,11 +321,14 @@ int sysfs_merge_group(struct kobject *kobj,
 
 	parent = kernfs_find_and_get(kobj->sd, grp->name);
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	for ((i = 0, attr = grp->attrs); *attr && !error; (++i, ++attr))
 		error = sysfs_add_file(parent, *attr, false);
 	if (error) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (--i >= 0)
 			kernfs_remove_by_name(parent, (*--attr)->name);
 	}
@@ -338,7 +373,9 @@ int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,
 
 	parent = kernfs_find_and_get(kobj->sd, group_name);
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	error = sysfs_create_link_sd(parent, target, link_name);
 	kernfs_put(parent);
@@ -360,6 +397,7 @@ void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,
 
 	parent = kernfs_find_and_get(kobj->sd, group_name);
 	if (parent) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kernfs_remove_by_name(parent, link_name);
 		kernfs_put(parent);
 	}
@@ -389,7 +427,9 @@ int __compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj,
 	spin_lock(&sysfs_symlink_target_lock);
 	target = target_kobj->sd;
 	if (target)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kernfs_get(target);
+}
 	spin_unlock(&sysfs_symlink_target_lock);
 	if (!target)
 		return -ENOENT;
diff --git a/fs/sysfs/mount.c b/fs/sysfs/mount.c
index 20b8f82..5bf55e2 100644
--- a/fs/sysfs/mount.c
+++ b/fs/sysfs/mount.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/sysfs/symlink.c - operations for initializing and mounting sysfs
  *
@@ -32,7 +34,9 @@ static struct dentry *sysfs_mount(struct file_system_type *fs_type,
 
 	if (!(flags & MS_KERNMOUNT)) {
 		if (!kobj_ns_current_may_mount(KOBJ_NS_TYPE_NET))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-EPERM);
+}
 	}
 
 	ns = kobj_ns_grab_current(KOBJ_NS_TYPE_NET);
@@ -40,9 +44,11 @@ static struct dentry *sysfs_mount(struct file_system_type *fs_type,
 				SYSFS_MAGIC, &new_sb, ns);
 	if (IS_ERR(root) || !new_sb)
 		kobj_ns_drop(KOBJ_NS_TYPE_NET, ns);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (new_sb)
 		root->d_sb->s_iflags |= SB_I_USERNS_VISIBLE;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return root;
 }
 
@@ -68,15 +74,19 @@ int __init sysfs_init(void)
 	sysfs_root = kernfs_create_root(NULL, KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK,
 					NULL);
 	if (IS_ERR(sysfs_root))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(sysfs_root);
+}
 
 	sysfs_root_kn = sysfs_root->kn;
 
 	err = register_filesystem(&sysfs_fs_type);
 	if (err) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kernfs_destroy_root(sysfs_root);
 		return err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
diff --git a/fs/sysfs/symlink.c b/fs/sysfs/symlink.c
index aecb15f..4f31bb6 100644
--- a/fs/sysfs/symlink.c
+++ b/fs/sysfs/symlink.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * fs/sysfs/symlink.c - sysfs symlink implementation
  *
@@ -33,22 +35,32 @@ static int sysfs_do_create_link_sd(struct kernfs_node *parent,
 	 */
 	spin_lock(&sysfs_symlink_target_lock);
 	if (target_kobj->sd) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		target = target_kobj->sd;
 		kernfs_get(target);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sysfs_symlink_target_lock);
 
 	if (!target)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 
 	kn = kernfs_create_link(parent, name, target);
 	kernfs_put(target);
 
 	if (!IS_ERR(kn))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (warn && PTR_ERR(kn) == -EEXIST)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		sysfs_warn_dup(parent, name);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return PTR_ERR(kn);
 }
 
@@ -61,6 +73,7 @@ static int sysfs_do_create_link_sd(struct kernfs_node *parent,
 int sysfs_create_link_sd(struct kernfs_node *kn, struct kobject *target,
 			 const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sysfs_do_create_link_sd(kn, target, name, 1);
 }
 
@@ -70,12 +83,16 @@ static int sysfs_do_create_link(struct kobject *kobj, struct kobject *target,
 	struct kernfs_node *parent = NULL;
 
 	if (!kobj)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = sysfs_root_kn;
+}
 	else
 		parent = kobj->sd;
 
 	if (!parent)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	return sysfs_do_create_link_sd(parent, target, name, warn);
 }
@@ -105,6 +122,7 @@ EXPORT_SYMBOL_GPL(sysfs_create_link);
 int sysfs_create_link_nowarn(struct kobject *kobj, struct kobject *target,
 			     const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sysfs_do_create_link(kobj, target, name, 0);
 }
 
@@ -130,6 +148,7 @@ void sysfs_delete_link(struct kobject *kobj, struct kobject *targ,
 	spin_lock(&sysfs_symlink_target_lock);
 	if (targ->sd && kernfs_ns_enabled(kobj->sd))
 		ns = targ->sd->ns;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&sysfs_symlink_target_lock);
 	kernfs_remove_by_name_ns(kobj->sd, name, ns);
 }
@@ -144,7 +163,9 @@ void sysfs_remove_link(struct kobject *kobj, const char *name)
 	struct kernfs_node *parent = NULL;
 
 	if (!kobj)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = sysfs_root_kn;
+}
 	else
 		parent = kobj->sd;
 
@@ -170,7 +191,9 @@ int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *targ,
 	int result;
 
 	if (!kobj)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = sysfs_root_kn;
+}
 	else
 		parent = kobj->sd;
 
diff --git a/fs/timerfd.c b/fs/timerfd.c
index 040612e..d441935 100644
--- a/fs/timerfd.c
+++ b/fs/timerfd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  fs/timerfd.c
@@ -72,6 +74,7 @@ static void timerfd_triggered(struct timerfd_ctx *ctx)
 
 static enum hrtimer_restart timerfd_tmrproc(struct hrtimer *htmr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct timerfd_ctx *ctx = container_of(htmr, struct timerfd_ctx,
 					       t.tmr);
 	timerfd_triggered(ctx);
@@ -81,6 +84,7 @@ static enum hrtimer_restart timerfd_tmrproc(struct hrtimer *htmr)
 static enum alarmtimer_restart timerfd_alarmproc(struct alarm *alarm,
 	ktime_t now)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct timerfd_ctx *ctx = container_of(alarm, struct timerfd_ctx,
 					       t.alarm);
 	timerfd_triggered(ctx);
@@ -101,22 +105,29 @@ void timerfd_clock_was_set(void)
 
 	rcu_read_lock();
 	list_for_each_entry_rcu(ctx, &cancel_list, clist) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ctx->might_cancel)
 			continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irqsave(&ctx->wqh.lock, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (ctx->moffs != moffs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ctx->moffs = KTIME_MAX;
 			ctx->ticks++;
 			wake_up_locked(&ctx->wqh);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irqrestore(&ctx->wqh.lock, flags);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 }
 
 static void __timerfd_remove_cancel(struct timerfd_ctx *ctx)
 {
 	if (ctx->might_cancel) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ctx->might_cancel = false;
 		spin_lock(&cancel_lock);
 		list_del_rcu(&ctx->clist);
@@ -126,6 +137,7 @@ static void __timerfd_remove_cancel(struct timerfd_ctx *ctx)
 
 static void timerfd_remove_cancel(struct timerfd_ctx *ctx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&ctx->cancel_lock);
 	__timerfd_remove_cancel(ctx);
 	spin_unlock(&ctx->cancel_lock);
@@ -134,18 +146,24 @@ static void timerfd_remove_cancel(struct timerfd_ctx *ctx)
 static bool timerfd_canceled(struct timerfd_ctx *ctx)
 {
 	if (!ctx->might_cancel || ctx->moffs != KTIME_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ctx->moffs = ktime_mono_to_real(0);
 	return true;
 }
 
 static void timerfd_setup_cancel(struct timerfd_ctx *ctx, int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&ctx->cancel_lock);
 	if ((ctx->clockid == CLOCK_REALTIME ||
 	     ctx->clockid == CLOCK_REALTIME_ALARM) &&
 	    (flags & TFD_TIMER_ABSTIME) && (flags & TFD_TIMER_CANCEL_ON_SET)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ctx->might_cancel) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ctx->might_cancel = true;
 			spin_lock(&cancel_lock);
 			list_add_rcu(&ctx->clist, &cancel_list);
@@ -154,6 +172,7 @@ static void timerfd_setup_cancel(struct timerfd_ctx *ctx, int flags)
 	} else {
 		__timerfd_remove_cancel(ctx);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&ctx->cancel_lock);
 }
 
@@ -162,7 +181,9 @@ static ktime_t timerfd_get_remaining(struct timerfd_ctx *ctx)
 	ktime_t remaining;
 
 	if (isalarm(ctx))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		remaining = alarm_expires_remaining(&ctx->t.alarm);
+}
 	else
 		remaining = hrtimer_expires_remaining_adjusted(&ctx->t.tmr);
 
@@ -197,8 +218,11 @@ static int timerfd_setup(struct timerfd_ctx *ctx, int flags,
 
 	if (texp != 0) {
 		if (isalarm(ctx)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (flags & TFD_TIMER_ABSTIME)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				alarm_start(&ctx->t.alarm, texp);
+}
 			else
 				alarm_start_relative(&ctx->t.alarm, texp);
 		} else {
@@ -206,7 +230,9 @@ static int timerfd_setup(struct timerfd_ctx *ctx, int flags,
 		}
 
 		if (timerfd_canceled(ctx))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ECANCELED;
+}
 	}
 
 	ctx->settime_flags = flags & TFD_SETTIME_FLAGS;
@@ -220,7 +246,9 @@ static int timerfd_release(struct inode *inode, struct file *file)
 	timerfd_remove_cancel(ctx);
 
 	if (isalarm(ctx))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alarm_cancel(&ctx->t.alarm);
+}
 	else
 		hrtimer_cancel(&ctx->t.tmr);
 	kfree_rcu(ctx, rcu);
@@ -237,7 +265,10 @@ static unsigned int timerfd_poll(struct file *file, poll_table *wait)
 
 	spin_lock_irqsave(&ctx->wqh.lock, flags);
 	if (ctx->ticks)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		events |= POLLIN;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irqrestore(&ctx->wqh.lock, flags);
 
 	return events;
@@ -251,10 +282,15 @@ static ssize_t timerfd_read(struct file *file, char __user *buf, size_t count,
 	u64 ticks = 0;
 
 	if (count < sizeof(ticks))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_irq(&ctx->wqh.lock);
 	if (file->f_flags & O_NONBLOCK)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		res = -EAGAIN;
+}
 	else
 		res = wait_event_interruptible_locked_irq(ctx->wqh, ctx->ticks);
 
@@ -264,12 +300,14 @@ static ssize_t timerfd_read(struct file *file, char __user *buf, size_t count,
 	 * reevaluate anyway.
 	 */
 	if (timerfd_canceled(ctx)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ctx->ticks = 0;
 		ctx->expired = 0;
 		res = -ECANCELED;
 	}
 
 	if (ctx->ticks) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ticks = ctx->ticks;
 
 		if (ctx->expired && ctx->tintv) {
@@ -280,6 +318,7 @@ static ssize_t timerfd_read(struct file *file, char __user *buf, size_t count,
 			 * short timer period.
 			 */
 			if (isalarm(ctx)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ticks += alarm_forward_now(
 					&ctx->t.alarm, ctx->tintv) - 1;
 				alarm_restart(&ctx->t.alarm);
@@ -292,9 +331,11 @@ static ssize_t timerfd_read(struct file *file, char __user *buf, size_t count,
 		ctx->expired = 0;
 		ctx->ticks = 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock_irq(&ctx->wqh.lock);
 	if (ticks)
 		res = put_user(ticks, (u64 __user *) buf) ? -EFAULT: sizeof(ticks);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return res;
 }
 
@@ -375,8 +416,11 @@ static int timerfd_fget(int fd, struct fd *p)
 {
 	struct fd f = fdget(fd);
 	if (!f.file)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 	if (f.file->f_op != &timerfd_fops) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fdput(f);
 		return -EINVAL;
 	}
@@ -408,7 +452,9 @@ SYSCALL_DEFINE2(timerfd_create, int, clockid, int, flags)
 
 	ctx = kzalloc(sizeof(*ctx), GFP_KERNEL);
 	if (!ctx)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	init_waitqueue_head(&ctx->wqh);
 	spin_lock_init(&ctx->cancel_lock);
@@ -427,7 +473,9 @@ SYSCALL_DEFINE2(timerfd_create, int, clockid, int, flags)
 	ufd = anon_inode_getfd("[timerfd]", &timerfd_fops, ctx,
 			       O_RDWR | (flags & TFD_SHARED_FCNTL_FLAGS));
 	if (ufd < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(ctx);
+}
 
 	return ufd;
 }
@@ -446,10 +494,13 @@ static int do_timerfd_settime(int ufd, int flags,
 
 	ret = timerfd_fget(ufd, &f);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	ctx = f.file->private_data;
 
 	if (isalarm(ctx) && !capable(CAP_WAKE_ALARM)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		fdput(f);
 		return -EPERM;
 	}
@@ -461,15 +512,18 @@ static int do_timerfd_settime(int ufd, int flags,
 	 * it to the new values.
 	 */
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock_irq(&ctx->wqh.lock);
 
 		if (isalarm(ctx)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (alarm_try_to_cancel(&ctx->t.alarm) >= 0)
 				break;
 		} else {
 			if (hrtimer_try_to_cancel(&ctx->t.tmr) >= 0)
 				break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_unlock_irq(&ctx->wqh.lock);
 		cpu_relax();
 	}
@@ -481,8 +535,11 @@ static int do_timerfd_settime(int ufd, int flags,
 	 * re-programmed again in the following timerfd_setup() call.
 	 */
 	if (ctx->expired && ctx->tintv) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (isalarm(ctx))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			alarm_forward_now(&ctx->t.alarm, ctx->tintv);
+}
 		else
 			hrtimer_forward_now(&ctx->t.tmr, ctx->tintv);
 	}
@@ -506,7 +563,9 @@ static int do_timerfd_gettime(int ufd, struct itimerspec64 *t)
 	struct timerfd_ctx *ctx;
 	int ret = timerfd_fget(ufd, &f);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	ctx = f.file->private_data;
 
 	spin_lock_irq(&ctx->wqh.lock);
@@ -540,12 +599,18 @@ SYSCALL_DEFINE4(timerfd_settime, int, ufd, int, flags,
 	int ret;
 
 	if (get_itimerspec64(&new, utmr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	ret = do_timerfd_settime(ufd, flags, &new, &old);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	if (otmr && put_itimerspec64(&old, otmr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 
 	return ret;
 }
@@ -555,7 +620,9 @@ SYSCALL_DEFINE2(timerfd_gettime, int, ufd, struct itimerspec __user *, otmr)
 	struct itimerspec64 kotmr;
 	int ret = do_timerfd_gettime(ufd, &kotmr);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return put_itimerspec64(&kotmr, otmr) ? -EFAULT : 0;
 }
 
@@ -568,7 +635,9 @@ COMPAT_SYSCALL_DEFINE4(timerfd_settime, int, ufd, int, flags,
 	int ret;
 
 	if (get_compat_itimerspec64(&new, utmr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EFAULT;
+}
 	ret = do_timerfd_settime(ufd, flags, &new, &old);
 	if (ret)
 		return ret;
@@ -583,7 +652,9 @@ COMPAT_SYSCALL_DEFINE2(timerfd_gettime, int, ufd,
 	struct itimerspec64 kotmr;
 	int ret = do_timerfd_gettime(ufd, &kotmr);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return put_compat_itimerspec64(&kotmr, otmr) ? -EFAULT : 0;
 }
 #endif
diff --git a/fs/tracefs/inode.c b/fs/tracefs/inode.c
index bea8ad8..b519730 100644
--- a/fs/tracefs/inode.c
+++ b/fs/tracefs/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  inode.c - part of tracefs, a pseudo file system for activating tracing
  *
@@ -34,12 +36,14 @@ static bool tracefs_registered;
 static ssize_t default_read_file(struct file *file, char __user *buf,
 				 size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static ssize_t default_write_file(struct file *file, const char __user *buf,
 				   size_t count, loff_t *ppos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return count;
 }
 
@@ -174,30 +178,47 @@ static int tracefs_parse_options(char *data, struct tracefs_mount_opts *opts)
 	opts->mode = TRACEFS_DEFAULT_MODE;
 
 	while ((p = strsep(&data, ",")) != NULL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!*p)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		token = match_token(p, tokens, args);
 		switch (token) {
 		case Opt_uid:
 			if (match_int(&args[0], &option))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			uid = make_kuid(current_user_ns(), option);
 			if (!uid_valid(uid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opts->uid = uid;
 			break;
 		case Opt_gid:
 			if (match_int(&args[0], &option))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gid = make_kgid(current_user_ns(), option);
 			if (!gid_valid(gid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opts->gid = gid;
 			break;
 		case Opt_mode:
 			if (match_octal(&args[0], &option))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			opts->mode = option & S_IALLUGO;
 			break;
 		/*
@@ -207,6 +228,7 @@ static int tracefs_parse_options(char *data, struct tracefs_mount_opts *opts)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -235,6 +257,7 @@ static int tracefs_remount(struct super_block *sb, int *flags, char *data)
 	if (err)
 		goto fail;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tracefs_apply_options(sb);
 
 fail:
@@ -273,6 +296,7 @@ static int trace_fill_super(struct super_block *sb, void *data, int silent)
 	fsi = kzalloc(sizeof(struct tracefs_fs_info), GFP_KERNEL);
 	sb->s_fs_info = fsi;
 	if (!fsi) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -ENOMEM;
 		goto fail;
 	}
@@ -317,12 +341,15 @@ static struct dentry *start_creating(const char *name, struct dentry *parent)
 	struct dentry *dentry;
 	int error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_debug("tracefs: creating file '%s'\n",name);
 
 	error = simple_pin_fs(&trace_fs_type, &tracefs_mount,
 			      &tracefs_mount_count);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(error);
+}
 
 	/* If the parent is not specified, we create it in the root.
 	 * We need the root dentry to do this, which is in the super
@@ -335,20 +362,24 @@ static struct dentry *start_creating(const char *name, struct dentry *parent)
 	inode_lock(parent->d_inode);
 	dentry = lookup_one_len(name, parent, strlen(name));
 	if (!IS_ERR(dentry) && dentry->d_inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		dput(dentry);
 		dentry = ERR_PTR(-EEXIST);
 	}
 
 	if (IS_ERR(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode_unlock(parent->d_inode);
 		simple_release_fs(&tracefs_mount, &tracefs_mount_count);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return dentry;
 }
 
 static struct dentry *failed_creating(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_unlock(dentry->d_parent->d_inode);
 	dput(dentry);
 	simple_release_fs(&tracefs_mount, &tracefs_mount_count);
@@ -400,11 +431,15 @@ struct dentry *tracefs_create_file(const char *name, umode_t mode,
 	dentry = start_creating(name, parent);
 
 	if (IS_ERR(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	inode = tracefs_get_inode(dentry->d_sb);
 	if (unlikely(!inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return failed_creating(dentry);
+}
 
 	inode->i_mode = mode;
 	inode->i_fop = fops ? fops : &tracefs_file_operations;
@@ -421,11 +456,15 @@ static struct dentry *__create_dir(const char *name, struct dentry *parent,
 	struct inode *inode;
 
 	if (IS_ERR(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	inode = tracefs_get_inode(dentry->d_sb);
 	if (unlikely(!inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return failed_creating(dentry);
+}
 
 	inode->i_mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;
 	inode->i_op = ops;
@@ -486,11 +525,15 @@ struct dentry *tracefs_create_instance_dir(const char *name, struct dentry *pare
 
 	/* Only allow one instance of the instances directory. */
 	if (WARN_ON(tracefs_ops.mkdir || tracefs_ops.rmdir))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	dentry = __create_dir(name, parent, &tracefs_dir_inode_operations);
 	if (!dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	tracefs_ops.mkdir = mkdir;
 	tracefs_ops.rmdir = rmdir;
@@ -503,6 +546,7 @@ static int __tracefs_remove(struct dentry *dentry, struct dentry *parent)
 	int ret = 0;
 
 	if (simple_positive(dentry)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (dentry->d_inode) {
 			dget(dentry);
 			switch (dentry->d_inode->i_mode & S_IFMT) {
@@ -536,7 +580,9 @@ void tracefs_remove(struct dentry *dentry)
 	int ret;
 
 	if (IS_ERR_OR_NULL(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	parent = dentry->d_parent;
 	inode_lock(parent->d_inode);
@@ -559,7 +605,9 @@ void tracefs_remove_recursive(struct dentry *dentry)
 	struct dentry *child, *parent;
 
 	if (IS_ERR_OR_NULL(dentry))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	parent = dentry;
  down:
@@ -627,12 +675,15 @@ static int __init tracefs_init(void)
 
 	retval = sysfs_create_mount_point(kernel_kobj, "tracing");
 	if (retval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	retval = register_filesystem(&trace_fs_type);
 	if (!retval)
 		tracefs_registered = true;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return retval;
 }
 core_initcall(tracefs_init);
diff --git a/fs/udf/super.c b/fs/udf/super.c
index 08bf097..ebe60e2 100644
--- a/fs/udf/super.c
+++ b/fs/udf/super.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * super.c
  *
diff --git a/fs/utimes.c b/fs/utimes.c
index e4b3d7c..7a73785 100644
--- a/fs/utimes.c
+++ b/fs/utimes.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/file.h>
 #include <linux/mount.h>
@@ -40,7 +42,9 @@ SYSCALL_DEFINE2(utime, char __user *, filename, struct utimbuf __user *, times)
 static bool nsec_valid(long nsec)
 {
 	if (nsec == UTIME_OMIT || nsec == UTIME_NOW)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return true;
+}
 
 	return nsec >= 0 && nsec <= 999999999;
 }
@@ -63,7 +67,9 @@ static int utimes_common(const struct path *path, struct timespec64 *times)
 	newattrs.ia_valid = ATTR_CTIME | ATTR_MTIME | ATTR_ATIME;
 	if (times) {
 		if (times[0].tv_nsec == UTIME_OMIT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			newattrs.ia_valid &= ~ATTR_ATIME;
+}
 		else if (times[0].tv_nsec != UTIME_NOW) {
 			newattrs.ia_atime.tv_sec = times[0].tv_sec;
 			newattrs.ia_atime.tv_nsec = times[0].tv_nsec;
@@ -71,7 +77,9 @@ static int utimes_common(const struct path *path, struct timespec64 *times)
 		}
 
 		if (times[1].tv_nsec == UTIME_OMIT)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			newattrs.ia_valid &= ~ATTR_MTIME;
+}
 		else if (times[1].tv_nsec != UTIME_NOW) {
 			newattrs.ia_mtime.tv_sec = times[1].tv_sec;
 			newattrs.ia_mtime.tv_nsec = times[1].tv_nsec;
@@ -91,6 +99,7 @@ static int utimes_common(const struct path *path, struct timespec64 *times)
 	error = notify_change(path->dentry, &newattrs, &delegated_inode);
 	inode_unlock(inode);
 	if (delegated_inode) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = break_deleg_wait(&delegated_inode);
 		if (!error)
 			goto retry_deleg;
@@ -147,7 +156,9 @@ long do_utimes(int dfd, const char __user *filename, struct timespec64 *times,
 		int lookup_flags = 0;
 
 		if (!(flags & AT_SYMLINK_NOFOLLOW))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lookup_flags |= LOOKUP_FOLLOW;
+}
 retry:
 		error = user_path_at(dfd, filename, lookup_flags, &path);
 		if (error)
@@ -156,6 +167,7 @@ long do_utimes(int dfd, const char __user *filename, struct timespec64 *times,
 		error = utimes_common(&path, times);
 		path_put(&path);
 		if (retry_estale(error, lookup_flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lookup_flags |= LOOKUP_REVAL;
 			goto retry;
 		}
@@ -191,8 +203,11 @@ SYSCALL_DEFINE3(futimesat, int, dfd, const char __user *, filename,
 	struct timespec64 tstimes[2];
 
 	if (utimes) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (copy_from_user(&times, utimes, sizeof(times)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EFAULT;
+}
 
 		/* This test is needed to catch all invalid values.  If we
 		   would test only in do_utimes we would miss those invalid
@@ -203,6 +218,7 @@ SYSCALL_DEFINE3(futimesat, int, dfd, const char __user *, filename,
 		    times[1].tv_usec >= 1000000 || times[1].tv_usec < 0)
 			return -EINVAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tstimes[0].tv_sec = times[0].tv_sec;
 		tstimes[0].tv_nsec = 1000 * times[0].tv_usec;
 		tstimes[1].tv_sec = times[1].tv_sec;
@@ -243,6 +259,7 @@ COMPAT_SYSCALL_DEFINE4(utimensat, unsigned int, dfd, const char __user *, filena
 	struct timespec64 tv[2];
 
 	if  (t) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (compat_get_timespec64(&tv[0], &t[0]) ||
 		    compat_get_timespec64(&tv[1], &t[1]))
 			return -EFAULT;
@@ -274,6 +291,7 @@ COMPAT_SYSCALL_DEFINE3(futimesat, unsigned int, dfd, const char __user *, filena
 
 COMPAT_SYSCALL_DEFINE2(utimes, const char __user *, filename, struct compat_timeval __user *, t)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return compat_sys_futimesat(AT_FDCWD, filename, t);
 }
 #endif
diff --git a/fs/xattr.c b/fs/xattr.c
index 61cd28b..a1c6815 100644
--- a/fs/xattr.c
+++ b/fs/xattr.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
   File: fs/xattr.c
 
@@ -58,7 +60,9 @@ xattr_resolve_name(struct inode *inode, const char **name)
 
 	if (!(inode->i_opflags & IOP_XATTR)) {
 		if (unlikely(is_bad_inode(inode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return ERR_PTR(-EIO);
+}
 		return ERR_PTR(-EOPNOTSUPP);
 	}
 	for_each_xattr_handler(handlers, handler) {
@@ -67,14 +71,17 @@ xattr_resolve_name(struct inode *inode, const char **name)
 		n = strcmp_prefix(*name, xattr_prefix(handler));
 		if (n) {
 			if (!handler->prefix ^ !*n) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (*n)
 					continue;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ERR_PTR(-EINVAL);
 			}
 			*name = n;
 			return handler;
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(-EOPNOTSUPP);
 }
 
@@ -91,14 +98,18 @@ xattr_permission(struct inode *inode, const char *name, int mask)
 	 */
 	if (mask & MAY_WRITE) {
 		if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 		/*
 		 * Updating an xattr will likely cause i_uid and i_gid
 		 * to be writen back improperly if their true value is
 		 * unknown to the vfs.
 		 */
 		if (HAS_UNMAPPED_ID(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 	}
 
 	/*
@@ -114,7 +125,10 @@ xattr_permission(struct inode *inode, const char *name, int mask)
 	 */
 	if (!strncmp(name, XATTR_TRUSTED_PREFIX, XATTR_TRUSTED_PREFIX_LEN)) {
 		if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (mask & MAY_WRITE) ? -EPERM : -ENODATA;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 
@@ -124,13 +138,18 @@ xattr_permission(struct inode *inode, const char *name, int mask)
 	 * privileged users can write attributes.
 	 */
 	if (!strncmp(name, XATTR_USER_PREFIX, XATTR_USER_PREFIX_LEN)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!S_ISREG(inode->i_mode) && !S_ISDIR(inode->i_mode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return (mask & MAY_WRITE) ? -EPERM : -ENODATA;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (S_ISDIR(inode->i_mode) && (inode->i_mode & S_ISVTX) &&
 		    (mask & MAY_WRITE) && !inode_owner_or_capable(inode))
 			return -EPERM;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return inode_permission(inode, mask);
 }
 
@@ -142,11 +161,17 @@ __vfs_setxattr(struct dentry *dentry, struct inode *inode, const char *name,
 
 	handler = xattr_resolve_name(inode, &name);
 	if (IS_ERR(handler))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(handler);
+}
 	if (!handler->set)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 	if (size == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		value = "";  /* empty EA, do not remove */
+}
 	return handler->set(handler, dentry, inode, name, value, size, flags);
 }
 EXPORT_SYMBOL(__vfs_setxattr);
@@ -176,7 +201,9 @@ int __vfs_setxattr_noperm(struct dentry *dentry, const char *name,
 				   XATTR_SECURITY_PREFIX_LEN);
 
 	if (issec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		inode->i_flags &= ~S_NOSEC;
+}
 	if (inode->i_opflags & IOP_XATTR) {
 		error = __vfs_setxattr(dentry, inode, name, value, size, flags);
 		if (!error) {
@@ -185,10 +212,14 @@ int __vfs_setxattr_noperm(struct dentry *dentry, const char *name,
 						     size, flags);
 		}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (unlikely(is_bad_inode(inode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EIO;
+}
 	}
 	if (error == -EAGAIN) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EOPNOTSUPP;
 
 		if (issec) {
@@ -197,10 +228,13 @@ int __vfs_setxattr_noperm(struct dentry *dentry, const char *name,
 			error = security_inode_setsecurity(inode, suffix, value,
 							   size, flags);
 			if (!error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				fsnotify_xattr(dentry);
+}
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -214,8 +248,11 @@ vfs_setxattr(struct dentry *dentry, const char *name, const void *value,
 
 	error = xattr_permission(inode, name, MAY_WRITE);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_lock(inode);
 	error = security_inode_setxattr(dentry, name, value, size, flags);
 	if (error)
@@ -243,11 +280,16 @@ xattr_getsecurity(struct inode *inode, const char *name, void *value,
 
 	len = security_inode_getsecurity(inode, name, &buffer, true);
 	if (len < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return len;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (size < len) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		len = -ERANGE;
 		goto out;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(value, buffer, len);
 out:
 	kfree(buffer);
@@ -275,24 +317,36 @@ vfs_getxattr_alloc(struct dentry *dentry, const char *name, char **xattr_value,
 
 	error = xattr_permission(inode, name, MAY_READ);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	handler = xattr_resolve_name(inode, &name);
 	if (IS_ERR(handler))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(handler);
+}
 	if (!handler->get)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 	error = handler->get(handler, dentry, inode, name, NULL, 0);
 	if (error < 0)
 		return error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!value || (error > xattr_size)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		value = krealloc(*xattr_value, error + 1, flags);
 		if (!value)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memset(value, 0, error + 1);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	error = handler->get(handler, dentry, inode, name, value, error);
 	*xattr_value = value;
 	return error;
@@ -308,7 +362,9 @@ __vfs_getxattr(struct dentry *dentry, struct inode *inode, const char *name,
 	if (IS_ERR(handler))
 		return PTR_ERR(handler);
 	if (!handler->get)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 	return handler->get(handler, dentry, inode, name, value, size);
 }
 EXPORT_SYMBOL(__vfs_getxattr);
@@ -321,11 +377,15 @@ vfs_getxattr(struct dentry *dentry, const char *name, void *value, size_t size)
 
 	error = xattr_permission(inode, name, MAY_READ);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	error = security_inode_getxattr(dentry, name);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	if (!strncmp(name, XATTR_SECURITY_PREFIX,
 				XATTR_SECURITY_PREFIX_LEN)) {
@@ -347,20 +407,29 @@ EXPORT_SYMBOL_GPL(vfs_getxattr);
 ssize_t
 vfs_listxattr(struct dentry *dentry, char *list, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	ssize_t error;
 
 	error = security_inode_listxattr(dentry);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	if (inode->i_op->listxattr && (inode->i_opflags & IOP_XATTR)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -EOPNOTSUPP;
 		error = inode->i_op->listxattr(dentry, list, size);
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = security_inode_listsecurity(inode, list, size);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (size && error > size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -ERANGE;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 EXPORT_SYMBOL_GPL(vfs_listxattr);
@@ -368,6 +437,7 @@ EXPORT_SYMBOL_GPL(vfs_listxattr);
 int
 __vfs_removexattr(struct dentry *dentry, const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_inode(dentry);
 	const struct xattr_handler *handler;
 
@@ -375,7 +445,9 @@ __vfs_removexattr(struct dentry *dentry, const char *name)
 	if (IS_ERR(handler))
 		return PTR_ERR(handler);
 	if (!handler->set)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 	return handler->set(handler, dentry, inode, name, NULL, 0, XATTR_REPLACE);
 }
 EXPORT_SYMBOL(__vfs_removexattr);
@@ -388,8 +460,11 @@ vfs_removexattr(struct dentry *dentry, const char *name)
 
 	error = xattr_permission(inode, name, MAY_WRITE);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	inode_lock(inode);
 	error = security_inode_removexattr(dentry, name);
 	if (error)
@@ -421,7 +496,9 @@ setxattr(struct dentry *d, const char __user *name, const void __user *value,
 	char kname[XATTR_NAME_MAX + 1];
 
 	if (flags & ~(XATTR_CREATE|XATTR_REPLACE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	error = strncpy_from_user(kname, name, sizeof(kname));
 	if (error == 0 || error == sizeof(kname))
@@ -484,6 +561,7 @@ SYSCALL_DEFINE5(setxattr, const char __user *, pathname,
 		const char __user *, name, const void __user *, value,
 		size_t, size, int, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return path_setxattr(pathname, name, value, size, flags, LOOKUP_FOLLOW);
 }
 
@@ -491,12 +569,14 @@ SYSCALL_DEFINE5(lsetxattr, const char __user *, pathname,
 		const char __user *, name, const void __user *, value,
 		size_t, size, int, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return path_setxattr(pathname, name, value, size, flags, 0);
 }
 
 SYSCALL_DEFINE5(fsetxattr, int, fd, const char __user *, name,
 		const void __user *,value, size_t, size, int, flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fd f = fdget(fd);
 	int error = -EBADF;
 
@@ -525,25 +605,38 @@ getxattr(struct dentry *d, const char __user *name, void __user *value,
 
 	error = strncpy_from_user(kname, name, sizeof(kname));
 	if (error == 0 || error == sizeof(kname))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = -ERANGE;
+}
 	if (error < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 
 	if (size) {
 		if (size > XATTR_SIZE_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			size = XATTR_SIZE_MAX;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kvalue = kvzalloc(size, GFP_KERNEL);
 		if (!kvalue)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 	}
 
 	error = vfs_getxattr(d, kname, kvalue, size);
 	if (error > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((strcmp(kname, XATTR_NAME_POSIX_ACL_ACCESS) == 0) ||
 		    (strcmp(kname, XATTR_NAME_POSIX_ACL_DEFAULT) == 0))
 			posix_acl_fix_xattr_to_user(kvalue, size);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (size && copy_to_user(value, kvalue, error))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			error = -EFAULT;
+}
 	} else if (error == -ERANGE && size >= XATTR_SIZE_MAX) {
 		/* The file system tried to returned a value bigger
 		   than XATTR_SIZE_MAX bytes. Not possible. */
@@ -564,13 +657,17 @@ static ssize_t path_getxattr(const char __user *pathname,
 retry:
 	error = user_path_at(AT_FDCWD, pathname, lookup_flags, &path);
 	if (error)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return error;
+}
 	error = getxattr(path.dentry, name, value, size);
 	path_put(&path);
 	if (retry_estale(error, lookup_flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		lookup_flags |= LOOKUP_REVAL;
 		goto retry;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return error;
 }
 
@@ -589,6 +686,7 @@ SYSCALL_DEFINE4(lgetxattr, const char __user *, pathname,
 SYSCALL_DEFINE4(fgetxattr, int, fd, const char __user *, name,
 		void __user *, value, size_t, size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fd f = fdget(fd);
 	ssize_t error = -EBADF;
 
@@ -610,6 +708,7 @@ listxattr(struct dentry *d, char __user *list, size_t size)
 	char *klist = NULL;
 
 	if (size) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (size > XATTR_LIST_MAX)
 			size = XATTR_LIST_MAX;
 		klist = kvmalloc(size, GFP_KERNEL);
@@ -653,17 +752,20 @@ static ssize_t path_listxattr(const char __user *pathname, char __user *list,
 SYSCALL_DEFINE3(listxattr, const char __user *, pathname, char __user *, list,
 		size_t, size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return path_listxattr(pathname, list, size, LOOKUP_FOLLOW);
 }
 
 SYSCALL_DEFINE3(llistxattr, const char __user *, pathname, char __user *, list,
 		size_t, size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return path_listxattr(pathname, list, size, 0);
 }
 
 SYSCALL_DEFINE3(flistxattr, int, fd, char __user *, list, size_t, size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fd f = fdget(fd);
 	ssize_t error = -EBADF;
 
@@ -685,6 +787,7 @@ removexattr(struct dentry *d, const char __user *name)
 	char kname[XATTR_NAME_MAX + 1];
 
 	error = strncpy_from_user(kname, name, sizeof(kname));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (error == 0 || error == sizeof(kname))
 		error = -ERANGE;
 	if (error < 0)
@@ -718,17 +821,20 @@ static int path_removexattr(const char __user *pathname,
 SYSCALL_DEFINE2(removexattr, const char __user *, pathname,
 		const char __user *, name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return path_removexattr(pathname, name, LOOKUP_FOLLOW);
 }
 
 SYSCALL_DEFINE2(lremovexattr, const char __user *, pathname,
 		const char __user *, name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return path_removexattr(pathname, name, 0);
 }
 
 SYSCALL_DEFINE2(fremovexattr, int, fd, const char __user *, name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct fd f = fdget(fd);
 	int error = -EBADF;
 
@@ -755,6 +861,7 @@ generic_listxattr(struct dentry *dentry, char *buffer, size_t buffer_size)
 	unsigned int size = 0;
 
 	if (!buffer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		for_each_xattr_handler(handlers, handler) {
 			if (!handler->name ||
 			    (handler->list && !handler->list(dentry)))
@@ -800,6 +907,7 @@ EXPORT_SYMBOL(generic_listxattr);
 const char *xattr_full_name(const struct xattr_handler *handler,
 			    const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size_t prefix_len = strlen(xattr_prefix(handler));
 
 	return name - prefix_len;
@@ -817,11 +925,16 @@ struct simple_xattr *simple_xattr_alloc(const void *value, size_t size)
 	/* wrap around? */
 	len = sizeof(*new_xattr) + size;
 	if (len < sizeof(*new_xattr))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	new_xattr = kmalloc(len, GFP_KERNEL);
 	if (!new_xattr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	new_xattr->size = size;
 	memcpy(new_xattr->value, value, size);
@@ -845,12 +958,15 @@ int simple_xattr_get(struct simple_xattrs *xattrs, const char *name,
 		ret = xattr->size;
 		if (buffer) {
 			if (size < xattr->size)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = -ERANGE;
+}
 			else
 				memcpy(buffer, xattr->value, xattr->size);
 		}
 		break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&xattrs->lock);
 	return ret;
 }
@@ -880,22 +996,28 @@ int simple_xattr_set(struct simple_xattrs *xattrs, const char *name,
 	if (value) {
 		new_xattr = simple_xattr_alloc(value, size);
 		if (!new_xattr)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 
 		new_xattr->name = kstrdup(name, GFP_KERNEL);
 		if (!new_xattr->name) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(new_xattr);
 			return -ENOMEM;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&xattrs->lock);
 	list_for_each_entry(xattr, &xattrs->head, list) {
 		if (!strcmp(name, xattr->name)) {
 			if (flags & XATTR_CREATE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				xattr = new_xattr;
 				err = -EEXIST;
 			} else if (new_xattr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				list_replace(&xattr->list, &new_xattr->list);
 			} else {
 				list_del(&xattr->list);
@@ -904,6 +1026,7 @@ int simple_xattr_set(struct simple_xattrs *xattrs, const char *name,
 		}
 	}
 	if (flags & XATTR_REPLACE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xattr = new_xattr;
 		err = -ENODATA;
 	} else {
@@ -916,18 +1039,21 @@ int simple_xattr_set(struct simple_xattrs *xattrs, const char *name,
 		kfree(xattr->name);
 		kfree(xattr);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return err;
 
 }
 
 static bool xattr_is_trusted(const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !strncmp(name, XATTR_TRUSTED_PREFIX, XATTR_TRUSTED_PREFIX_LEN);
 }
 
 static int xattr_list_one(char **buffer, ssize_t *remaining_size,
 			  const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size_t len = strlen(name) + 1;
 	if (*buffer) {
 		if (*remaining_size < len)
@@ -952,29 +1078,38 @@ ssize_t simple_xattr_list(struct inode *inode, struct simple_xattrs *xattrs,
 
 #ifdef CONFIG_FS_POSIX_ACL
 	if (inode->i_acl) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = xattr_list_one(&buffer, &remaining_size,
 				     XATTR_NAME_POSIX_ACL_ACCESS);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	}
 	if (inode->i_default_acl) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = xattr_list_one(&buffer, &remaining_size,
 				     XATTR_NAME_POSIX_ACL_DEFAULT);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	}
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&xattrs->lock);
 	list_for_each_entry(xattr, &xattrs->head, list) {
 		/* skip "trusted." attributes for unprivileged callers */
 		if (!trusted && xattr_is_trusted(xattr->name))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = xattr_list_one(&buffer, &remaining_size, xattr->name);
 		if (err)
 			break;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&xattrs->lock);
 
 	return err ? err : size - remaining_size;
@@ -986,6 +1121,7 @@ ssize_t simple_xattr_list(struct inode *inode, struct simple_xattrs *xattrs,
 void simple_xattr_list_add(struct simple_xattrs *xattrs,
 			   struct simple_xattr *new_xattr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&xattrs->lock);
 	list_add(&new_xattr->list, &xattrs->head);
 	spin_unlock(&xattrs->lock);
diff --git a/fs/xfs/kmem.h b/fs/xfs/kmem.h
index 4d85992..47bfd9e 100644
--- a/fs/xfs/kmem.h
+++ b/fs/xfs/kmem.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2000-2005 Silicon Graphics, Inc.
  * All Rights Reserved.
diff --git a/fs/xfs/libxfs/xfs_da_btree.c b/fs/xfs/libxfs/xfs_da_btree.c
index 6d43358..78e5cce 100644
--- a/fs/xfs/libxfs/xfs_da_btree.c
+++ b/fs/xfs/libxfs/xfs_da_btree.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2000-2005 Silicon Graphics, Inc.
  * Copyright (c) 2013 Red Hat, Inc.
diff --git a/fs/xfs/libxfs/xfs_defer.c b/fs/xfs/libxfs/xfs_defer.c
index 072ebfe..34ff109 100644
--- a/fs/xfs/libxfs/xfs_defer.c
+++ b/fs/xfs/libxfs/xfs_defer.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2016 Oracle.  All Rights Reserved.
  *
diff --git a/fs/xfs/libxfs/xfs_dir2_block.c b/fs/xfs/libxfs/xfs_dir2_block.c
index 43c902f..5ebe638 100644
--- a/fs/xfs/libxfs/xfs_dir2_block.c
+++ b/fs/xfs/libxfs/xfs_dir2_block.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2000-2003,2005 Silicon Graphics, Inc.
  * Copyright (c) 2013 Red Hat, Inc.
diff --git a/fs/xfs/xfs_buf.c b/fs/xfs/xfs_buf.c
index 16f93d7..0c68859 100644
--- a/fs/xfs/xfs_buf.c
+++ b/fs/xfs/xfs_buf.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2000-2006 Silicon Graphics, Inc.
  * All Rights Reserved.
diff --git a/fs/xfs/xfs_dquot.c b/fs/xfs/xfs_dquot.c
index 5a86495..b2cf95b 100644
--- a/fs/xfs/xfs_dquot.c
+++ b/fs/xfs/xfs_dquot.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2000-2003 Silicon Graphics, Inc.
  * All Rights Reserved.
diff --git a/fs/xfs/xfs_mru_cache.c b/fs/xfs/xfs_mru_cache.c
index f8a674d..780896b 100644
--- a/fs/xfs/xfs_mru_cache.c
+++ b/fs/xfs/xfs_mru_cache.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2006-2007 Silicon Graphics, Inc.
  * All Rights Reserved.
diff --git a/fs/xfs/xfs_stats.c b/fs/xfs/xfs_stats.c
index 056e12b..eecf4af 100644
--- a/fs/xfs/xfs_stats.c
+++ b/fs/xfs/xfs_stats.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2000-2003,2005 Silicon Graphics, Inc.
  * All Rights Reserved.
diff --git a/fs/xfs/xfs_super.c b/fs/xfs/xfs_super.c
index f663022..1e46f61 100644
--- a/fs/xfs/xfs_super.c
+++ b/fs/xfs/xfs_super.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2000-2006 Silicon Graphics, Inc.
  * All Rights Reserved.
diff --git a/fs/xfs/xfs_sysctl.c b/fs/xfs/xfs_sysctl.c
index afe1f66..2506fc2 100644
--- a/fs/xfs/xfs_sysctl.c
+++ b/fs/xfs/xfs_sysctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2001-2005 Silicon Graphics, Inc.
  * All Rights Reserved.
diff --git a/fs/xfs/xfs_sysfs.h b/fs/xfs/xfs_sysfs.h
index d046371..fa80da9 100644
--- a/fs/xfs/xfs_sysfs.h
+++ b/fs/xfs/xfs_sysfs.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2014 Red Hat, Inc.
  * All Rights Reserved.
diff --git a/fs/xfs/xfs_trace.h b/fs/xfs/xfs_trace.h
index bb55146..c2e7bdb 100644
--- a/fs/xfs/xfs_trace.h
+++ b/fs/xfs/xfs_trace.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2009, Christoph Hellwig
  * All Rights Reserved.
diff --git a/fs/xfs/xfs_trans_bmap.c b/fs/xfs/xfs_trans_bmap.c
index 14543d9..a6c599b 100644
--- a/fs/xfs/xfs_trans_bmap.c
+++ b/fs/xfs/xfs_trans_bmap.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2016 Oracle.  All Rights Reserved.
  *
diff --git a/fs/xfs/xfs_trans_extfree.c b/fs/xfs/xfs_trans_extfree.c
index ab43864..800fab4 100644
--- a/fs/xfs/xfs_trans_extfree.c
+++ b/fs/xfs/xfs_trans_extfree.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (c) 2000,2005 Silicon Graphics, Inc.
  * All Rights Reserved.
diff --git a/fs/xfs/xfs_trans_refcount.c b/fs/xfs/xfs_trans_refcount.c
index 94c1877..422f393 100644
--- a/fs/xfs/xfs_trans_refcount.c
+++ b/fs/xfs/xfs_trans_refcount.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2016 Oracle.  All Rights Reserved.
  *
diff --git a/fs/xfs/xfs_trans_rmap.c b/fs/xfs/xfs_trans_rmap.c
index 9b577be..f5075ec 100644
--- a/fs/xfs/xfs_trans_rmap.c
+++ b/fs/xfs/xfs_trans_rmap.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2016 Oracle.  All Rights Reserved.
  *
-- 
2.7.4

