From 94a3fdd48e5b331b80bc8b5e45ea2783cc70fba9 Mon Sep 17 00:00:00 2001
From: Yiwen Li <detectivelyw@gmail.com>
Date: Tue, 4 Jun 2019 15:59:28 -0400
Subject: [PATCH 11/11] instrumented security.

---
 security/commoncap.c                     | 187 +++++++++++++++++++++++++++++++
 security/device_cgroup.c                 |   2 +
 security/inode.c                         |   2 +
 security/integrity/iint.c                |  15 +++
 security/keys/big_key.c                  |   2 +
 security/keys/encrypted-keys/encrypted.c |   2 +
 security/keys/gc.c                       |  35 ++++++
 security/keys/internal.h                 |   2 +
 security/keys/key.c                      |  63 +++++++++++
 security/keys/keyctl.c                   |  36 ++++++
 security/keys/keyring.c                  |  73 ++++++++++++
 security/keys/permission.c               |  15 +++
 security/keys/proc.c                     |  24 ++++
 security/keys/process_keys.c             |  87 ++++++++++++++
 security/min_addr.c                      |   6 +
 security/security.c                      | 164 +++++++++++++++++++++++++++
 security/yama/yama_lsm.c                 |   2 +
 17 files changed, 717 insertions(+)

diff --git a/security/commoncap.c b/security/commoncap.c
index 7b01431..3cfe25a 100644
--- a/security/commoncap.c
+++ b/security/commoncap.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Common capabilities, needed by capability.o.
  *
  *	This program is free software; you can redistribute it and/or modify
@@ -46,6 +48,7 @@ static void warn_setuid_and_fcaps_mixed(const char *fname)
 {
 	static int warned;
 	if (!warned) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_INFO "warning: `%s' has both setuid-root and"
 			" effective capabilities. Therefore not raising all"
 			" capabilities.\n", fname);
@@ -87,14 +90,18 @@ int cap_capable(const struct cred *cred, struct user_namespace *targ_ns,
 		 * we're done searching.
 		 */
 		if (ns->level <= cred->user_ns->level)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 
 		/* 
 		 * The owner of the user namespace in the parent of the
 		 * user namespace has all caps.
 		 */
 		if ((ns->parent == cred->user_ns) && uid_eq(ns->owner, cred->euid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 
 		/*
 		 * If you have a capability in a parent user ns, then you have
@@ -117,7 +124,9 @@ int cap_capable(const struct cred *cred, struct user_namespace *targ_ns,
 int cap_settime(const struct timespec64 *ts, const struct timezone *tz)
 {
 	if (!capable(CAP_SYS_TIME))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 	return 0;
 }
 
@@ -152,8 +161,10 @@ int cap_ptrace_access_check(struct task_struct *child, unsigned int mode)
 	if (cred->user_ns == child_cred->user_ns &&
 	    cap_issubset(child_cred->cap_permitted, *caller_caps))
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ns_capable(child_cred->user_ns, CAP_SYS_PTRACE))
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -EPERM;
 out:
 	rcu_read_unlock();
@@ -184,8 +195,10 @@ int cap_ptrace_traceme(struct task_struct *parent)
 	if (cred->user_ns == child_cred->user_ns &&
 	    cap_issubset(child_cred->cap_permitted, cred->cap_permitted))
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (has_ns_capability(parent, child_cred->user_ns, CAP_SYS_PTRACE))
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -EPERM;
 out:
 	rcu_read_unlock();
@@ -230,6 +243,7 @@ static inline int cap_inh_is_capped(void)
 	if (cap_capable(current_cred(), current_cred()->user_ns,
 			CAP_SETPCAP, SECURITY_CAP_AUDIT) == 0)
 		return 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 1;
 }
 
@@ -266,11 +280,15 @@ int cap_capset(struct cred *new,
 
 	/* verify restrictions on target's new Permitted set */
 	if (!cap_issubset(*permitted, old->cap_permitted))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	/* verify the _new_Effective_ is a subset of the _new_Permitted_ */
 	if (!cap_issubset(*effective, *permitted))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	new->cap_effective   = *effective;
 	new->cap_inheritable = *inheritable;
@@ -284,7 +302,9 @@ int cap_capset(struct cred *new,
 					 cap_intersect(*permitted,
 						       *inheritable));
 	if (WARN_ON(!cap_ambient_invariant_ok(new)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	return 0;
 }
 
@@ -301,6 +321,7 @@ int cap_capset(struct cred *new,
  */
 int cap_inode_need_killpriv(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_backing_inode(dentry);
 	int error;
 
@@ -322,7 +343,9 @@ int cap_inode_killpriv(struct dentry *dentry)
 
 	error = __vfs_removexattr(dentry, XATTR_NAME_CAPS);
 	if (error == -EOPNOTSUPP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		error = 0;
+}
 	return error;
 }
 
@@ -331,7 +354,9 @@ static bool rootid_owns_currentns(kuid_t kroot)
 	struct user_namespace *ns;
 
 	if (!uid_valid(kroot))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 
 	for (ns = current_user_ns(); ; ns = ns->parent) {
 		if (from_kuid(ns, kroot) == 0)
@@ -345,11 +370,13 @@ static bool rootid_owns_currentns(kuid_t kroot)
 
 static __u32 sansflags(__u32 m)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return m & ~VFS_CAP_FLAGS_EFFECTIVE;
 }
 
 static bool is_v2header(size_t size, const struct vfs_cap_data *cap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (size != XATTR_CAPS_SZ_2)
 		return false;
 	return sansflags(le32_to_cpu(cap->magic_etc)) == VFS_CAP_REVISION_2;
@@ -357,6 +384,7 @@ static bool is_v2header(size_t size, const struct vfs_cap_data *cap)
 
 static bool is_v3header(size_t size, const struct vfs_cap_data *cap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (size != XATTR_CAPS_SZ_3)
 		return false;
 	return sansflags(le32_to_cpu(cap->magic_etc)) == VFS_CAP_REVISION_3;
@@ -386,35 +414,48 @@ int cap_inode_getsecurity(struct inode *inode, const char *name, void **buffer,
 	struct user_namespace *fs_ns;
 
 	if (strcmp(name, "capability") != 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 
 	dentry = d_find_alias(inode);
 	if (!dentry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	size = sizeof(struct vfs_ns_cap_data);
 	ret = (int) vfs_getxattr_alloc(dentry, XATTR_NAME_CAPS,
 				 &tmpbuf, size, GFP_NOFS);
 	dput(dentry);
 
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	fs_ns = inode->i_sb->s_user_ns;
 	cap = (struct vfs_cap_data *) tmpbuf;
 	if (is_v2header((size_t) ret, cap)) {
 		/* If this is sizeof(vfs_cap_data) then we're ok with the
 		 * on-disk value, so return that.  */
 		if (alloc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*buffer = tmpbuf;
+}
 		else
 			kfree(tmpbuf);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
 	} else if (!is_v3header((size_t) ret, cap)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(tmpbuf);
 		return -EINVAL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	nscap = (struct vfs_ns_cap_data *) tmpbuf;
 	root = le32_to_cpu(nscap->rootid);
 	kroot = make_kuid(fs_ns, root);
@@ -422,16 +463,24 @@ int cap_inode_getsecurity(struct inode *inode, const char *name, void **buffer,
 	/* If the root kuid maps to a valid uid in current ns, then return
 	 * this as a nscap. */
 	mappedroot = from_kuid(current_user_ns(), kroot);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (mappedroot != (uid_t)-1 && mappedroot != (uid_t)0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (alloc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			*buffer = tmpbuf;
 			nscap->rootid = cpu_to_le32(mappedroot);
 		} else
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kfree(tmpbuf);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return size;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!rootid_owns_currentns(kroot)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(tmpbuf);
 		return -EOPNOTSUPP;
 	}
@@ -439,6 +488,7 @@ int cap_inode_getsecurity(struct inode *inode, const char *name, void **buffer,
 	/* This comes from a parent namespace.  Return as a v2 capability */
 	size = sizeof(struct vfs_cap_data);
 	if (alloc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*buffer = kmalloc(size, GFP_ATOMIC);
 		if (*buffer) {
 			struct vfs_cap_data *cap = *buffer;
@@ -446,11 +496,15 @@ int cap_inode_getsecurity(struct inode *inode, const char *name, void **buffer,
 			magic = VFS_CAP_REVISION_2;
 			nsmagic = le32_to_cpu(nscap->magic_etc);
 			if (nsmagic & VFS_CAP_FLAGS_EFFECTIVE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				magic |= VFS_CAP_FLAGS_EFFECTIVE;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memcpy(&cap->data, &nscap->data, sizeof(__le32) * 2 * VFS_CAP_U32);
 			cap->magic_etc = cpu_to_le32(magic);
 		}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(tmpbuf);
 	return size;
 }
@@ -462,13 +516,16 @@ static kuid_t rootid_from_xattr(const void *value, size_t size,
 	uid_t rootid = 0;
 
 	if (size == XATTR_CAPS_SZ_3)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rootid = le32_to_cpu(nscap->rootid);
+}
 
 	return make_kuid(task_ns, rootid);
 }
 
 static bool validheader(size_t size, const struct vfs_cap_data *cap)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return is_v2header(size, cap) || is_v3header(size, cap);
 }
 
@@ -491,7 +548,9 @@ int cap_convert_nscap(struct dentry *dentry, void **ivalue, size_t size)
 	size_t newsize;
 
 	if (!*ivalue)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 	if (!validheader(size, cap))
 		return -EINVAL;
 	if (!capable_wrt_inode_uidgid(inode, CAP_SETFCAP))
@@ -540,7 +599,9 @@ static inline int bprm_caps_from_vfs_caps(struct cpu_vfs_cap_data *caps,
 	int ret = 0;
 
 	if (caps->magic_etc & VFS_CAP_FLAGS_EFFECTIVE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*effective = true;
+}
 
 	if (caps->magic_etc & VFS_CAP_REVISION_MASK)
 		*has_cap = true;
@@ -575,6 +636,7 @@ static inline int bprm_caps_from_vfs_caps(struct cpu_vfs_cap_data *caps,
  */
 int get_vfs_caps_from_disk(const struct dentry *dentry, struct cpu_vfs_cap_data *cpu_caps)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct inode *inode = d_backing_inode(dentry);
 	__u32 magic_etc;
 	unsigned tocopy, i;
@@ -587,7 +649,9 @@ int get_vfs_caps_from_disk(const struct dentry *dentry, struct cpu_vfs_cap_data
 	memset(cpu_caps, 0, sizeof(struct cpu_vfs_cap_data));
 
 	if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODATA;
+}
 
 	fs_ns = inode->i_sb->s_user_ns;
 	size = __vfs_getxattr((struct dentry *)dentry, inode,
@@ -596,29 +660,45 @@ int get_vfs_caps_from_disk(const struct dentry *dentry, struct cpu_vfs_cap_data
 		/* no data, that's ok */
 		return -ENODATA;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (size < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return size;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (size < sizeof(magic_etc))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpu_caps->magic_etc = magic_etc = le32_to_cpu(caps->magic_etc);
 
 	rootkuid = make_kuid(fs_ns, 0);
 	switch (magic_etc & VFS_CAP_REVISION_MASK) {
 	case VFS_CAP_REVISION_1:
 		if (size != XATTR_CAPS_SZ_1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tocopy = VFS_CAP_U32_1;
 		break;
 	case VFS_CAP_REVISION_2:
 		if (size != XATTR_CAPS_SZ_2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tocopy = VFS_CAP_U32_2;
 		break;
 	case VFS_CAP_REVISION_3:
 		if (size != XATTR_CAPS_SZ_3)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tocopy = VFS_CAP_U32_3;
 		rootkuid = make_kuid(fs_ns, le32_to_cpu(nscaps->rootid));
 		break;
@@ -630,15 +710,21 @@ int get_vfs_caps_from_disk(const struct dentry *dentry, struct cpu_vfs_cap_data
 	 * or the more limited uid specified in the xattr.
 	 */
 	if (!rootid_owns_currentns(rootkuid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENODATA;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	CAP_FOR_EACH_U32(i) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (i >= tocopy)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cpu_caps->permitted.cap[i] = le32_to_cpu(caps->data[i].permitted);
 		cpu_caps->inheritable.cap[i] = le32_to_cpu(caps->data[i].inheritable);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	cpu_caps->permitted.cap[CAP_LAST_U32] &= CAP_LAST_U32_VALID_MASK;
 	cpu_caps->inheritable.cap[CAP_LAST_U32] &= CAP_LAST_U32_VALID_MASK;
 
@@ -658,10 +744,14 @@ static int get_file_caps(struct linux_binprm *bprm, bool *effective, bool *has_c
 	cap_clear(bprm->cred->cap_permitted);
 
 	if (!file_caps_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!mnt_may_suid(bprm->file->f_path.mnt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/*
 	 * This check is redundant with mnt_may_suid() but is kept to make
@@ -669,27 +759,39 @@ static int get_file_caps(struct linux_binprm *bprm, bool *effective, bool *has_c
 	 * descendants.
 	 */
 	if (!current_in_userns(bprm->file->f_path.mnt->mnt_sb->s_user_ns))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	rc = get_vfs_caps_from_disk(bprm->file->f_path.dentry, &vcaps);
 	if (rc < 0) {
 		if (rc == -EINVAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			printk(KERN_NOTICE "Invalid argument reading file caps for %s\n",
 					bprm->filename);
+}
 		else if (rc == -ENODATA)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rc = 0;
+}
 		goto out;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rc = bprm_caps_from_vfs_caps(&vcaps, bprm, effective, has_cap);
 	if (rc == -EINVAL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		printk(KERN_NOTICE "%s: cap_from_disk returned %d for %s\n",
 		       __func__, rc, bprm->filename);
+}
 
 out:
 	if (rc)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cap_clear(bprm->cred->cap_permitted);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rc;
 }
 
@@ -710,12 +812,16 @@ int cap_bprm_set_creds(struct linux_binprm *bprm)
 	kuid_t root_uid;
 
 	if (WARN_ON(!cap_ambient_invariant_ok(old)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	effective = false;
 	ret = get_file_caps(bprm, &effective, &has_cap);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	root_uid = make_kuid(new->user_ns, 0);
 
@@ -726,6 +832,7 @@ int cap_bprm_set_creds(struct linux_binprm *bprm)
 		 * for a root user just to cause least surprise to an admin.
 		 */
 		if (has_cap && !uid_eq(new->uid, root_uid) && uid_eq(new->euid, root_uid)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			warn_setuid_and_fcaps_mixed(bprm->filename);
 			goto skip;
 		}
@@ -748,7 +855,9 @@ int cap_bprm_set_creds(struct linux_binprm *bprm)
 
 	/* if we have fs caps, clear dangerous personality flags */
 	if (!cap_issubset(new->cap_permitted, old->cap_permitted))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bprm->per_clear |= PER_CLEAR_ON_SETID;
+}
 
 
 	/* Don't let someone trace a set[ug]id/setpcap binary with the revised
@@ -763,11 +872,14 @@ int cap_bprm_set_creds(struct linux_binprm *bprm)
 	    ((bprm->unsafe & ~LSM_UNSAFE_PTRACE) ||
 	     !ptracer_capable(current, new->user_ns))) {
 		/* downgrade; they get no more than they had, and maybe less */
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!ns_capable(new->user_ns, CAP_SETUID) ||
 		    (bprm->unsafe & LSM_UNSAFE_NO_NEW_PRIVS)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			new->euid = new->uid;
 			new->egid = new->gid;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new->cap_permitted = cap_intersect(new->cap_permitted,
 						   old->cap_permitted);
 	}
@@ -777,7 +889,9 @@ int cap_bprm_set_creds(struct linux_binprm *bprm)
 
 	/* File caps or setid cancels ambient. */
 	if (has_cap || is_setid)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		cap_clear(new->cap_ambient);
+}
 
 	/*
 	 * Now that we've computed pA', update pP' to give:
@@ -795,7 +909,9 @@ int cap_bprm_set_creds(struct linux_binprm *bprm)
 		new->cap_effective = new->cap_ambient;
 
 	if (WARN_ON(!cap_ambient_invariant_ok(new)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	/*
 	 * Audit candidate if current->cap_effective is set
@@ -815,18 +931,23 @@ int cap_bprm_set_creds(struct linux_binprm *bprm)
 		    issecure(SECURE_NOROOT)) {
 			ret = audit_log_bprm_fcaps(bprm, new, old);
 			if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return ret;
+}
 		}
 	}
 
 	new->securebits &= ~issecure_mask(SECURE_KEEP_CAPS);
 
 	if (WARN_ON(!cap_ambient_invariant_ok(new)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	/* Check for privilege-elevated exec. */
 	bprm->cap_elevated = 0;
 	if (is_setid) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		bprm->cap_elevated = 1;
 	} else if (!uid_eq(new->uid, root_uid)) {
 		if (effective ||
@@ -834,6 +955,7 @@ int cap_bprm_set_creds(struct linux_binprm *bprm)
 			bprm->cap_elevated = 1;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -864,10 +986,16 @@ int cap_inode_setxattr(struct dentry *dentry, const char *name,
 	 * cap_convert_nscap(), called by setxattr()
 	 */
 	if (strcmp(name, XATTR_NAME_CAPS) == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -889,18 +1017,29 @@ int cap_inode_removexattr(struct dentry *dentry, const char *name)
 			sizeof(XATTR_SECURITY_PREFIX) - 1) != 0)
 		return 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (strcmp(name, XATTR_NAME_CAPS) == 0) {
 		/* security.capability gets namespaced */
 		struct inode *inode = d_backing_inode(dentry);
 		if (!inode)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!capable_wrt_inode_uidgid(inode, CAP_SETFCAP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!capable(CAP_SYS_ADMIN))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -958,8 +1097,10 @@ static inline void cap_emulate_setxuid(struct cred *new, const struct cred *old)
 	if (uid_eq(old->euid, root_uid) && !uid_eq(new->euid, root_uid))
 		cap_clear(new->cap_effective);
 	if (!uid_eq(old->euid, root_uid) && uid_eq(new->euid, root_uid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new->cap_effective = new->cap_permitted;
 }
+}
 
 /**
  * cap_task_fix_setuid - Fix up the results of setuid() call
@@ -990,11 +1131,14 @@ int cap_task_fix_setuid(struct cred *new, const struct cred *old, int flags)
 		 *          if not, we might be a bit too harsh here.
 		 */
 		if (!issecure(SECURE_NO_SETUID_FIXUP)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kuid_t root_uid = make_kuid(old->user_ns, 0);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (uid_eq(old->fsuid, root_uid) && !uid_eq(new->fsuid, root_uid))
 				new->cap_effective =
 					cap_drop_fs_set(new->cap_effective);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!uid_eq(old->fsuid, root_uid) && uid_eq(new->fsuid, root_uid))
 				new->cap_effective =
 					cap_raise_fs_set(new->cap_effective,
@@ -1006,6 +1150,7 @@ int cap_task_fix_setuid(struct cred *new, const struct cred *old, int flags)
 		return -EINVAL;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1027,7 +1172,10 @@ static int cap_safe_nice(struct task_struct *p)
 	is_subset = cap_issubset(__task_cred(p)->cap_permitted,
 				 current_cred()->cap_permitted);
 	if (!is_subset && !ns_capable(__task_cred(p)->user_ns, CAP_SYS_NICE))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EPERM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rcu_read_unlock();
 
 	return ret;
@@ -1055,6 +1203,7 @@ int cap_task_setscheduler(struct task_struct *p)
  */
 int cap_task_setioprio(struct task_struct *p, int ioprio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return cap_safe_nice(p);
 }
 
@@ -1080,13 +1229,19 @@ static int cap_prctl_drop(unsigned long cap)
 	struct cred *new;
 
 	if (!ns_capable(current_user_ns(), CAP_SETPCAP))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 	if (!cap_valid(cap))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	new = prepare_creds();
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	cap_lower(new->cap_bset, cap);
 	return commit_creds(new);
 }
@@ -1112,7 +1267,10 @@ int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
 	switch (option) {
 	case PR_CAPBSET_READ:
 		if (!cap_valid(arg2))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return !!cap_raised(old->cap_bset, arg2);
 
 	case PR_CAPBSET_DROP:
@@ -1156,9 +1314,13 @@ int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
 			/* cannot change a locked bit */
 			return -EPERM;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new = prepare_creds();
 		if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new->securebits = arg2;
 		return commit_creds(new);
 
@@ -1170,13 +1332,19 @@ int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
 
 	case PR_SET_KEEPCAPS:
 		if (arg2 > 1) /* Note, we rely on arg2 being unsigned here */
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 		if (issecure(SECURE_KEEP_CAPS_LOCKED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EPERM;
+}
 
 		new = prepare_creds();
 		if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 		if (arg2)
 			new->securebits |= issecure_mask(SECURE_KEEP_CAPS);
 		else
@@ -1185,23 +1353,35 @@ int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
 
 	case PR_CAP_AMBIENT:
 		if (arg2 == PR_CAP_AMBIENT_CLEAR_ALL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (arg3 | arg4 | arg5)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			new = prepare_creds();
 			if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -ENOMEM;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cap_clear(new->cap_ambient);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return commit_creds(new);
 		}
 
 		if (((!cap_valid(arg3)) | arg4 | arg5))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
+}
 
 		if (arg2 == PR_CAP_AMBIENT_IS_SET) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return !!cap_raised(current_cred()->cap_ambient, arg3);
 		} else if (arg2 != PR_CAP_AMBIENT_RAISE &&
 			   arg2 != PR_CAP_AMBIENT_LOWER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EINVAL;
 		} else {
 			if (arg2 == PR_CAP_AMBIENT_RAISE &&
@@ -1213,9 +1393,13 @@ int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
 
 			new = prepare_creds();
 			if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				return -ENOMEM;
+}
 			if (arg2 == PR_CAP_AMBIENT_RAISE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				cap_raise(new->cap_ambient, arg3);
+}
 			else
 				cap_lower(new->cap_ambient, arg3);
 			return commit_creds(new);
@@ -1259,11 +1443,14 @@ int cap_mmap_addr(unsigned long addr)
 	int ret = 0;
 
 	if (addr < dac_mmap_min_addr) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = cap_capable(current_cred(), &init_user_ns, CAP_SYS_RAWIO,
 				  SECURITY_CAP_AUDIT);
 		/* set PF_SUPERPRIV if it turns out we allow the low mmap */
 		if (ret == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			current->flags |= PF_SUPERPRIV;
+}
 	}
 	return ret;
 }
diff --git a/security/device_cgroup.c b/security/device_cgroup.c
index 5ef7e52..7f9a022 100644
--- a/security/device_cgroup.c
+++ b/security/device_cgroup.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 /*
  * device_cgroup.c - device cgroup subsystem
diff --git a/security/inode.c b/security/inode.c
index 8dd9ca8..262b542 100644
--- a/security/inode.c
+++ b/security/inode.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  *  inode.c - securityfs
  *
diff --git a/security/integrity/iint.c b/security/integrity/iint.c
index 6fc888c..ac946a20 100644
--- a/security/integrity/iint.c
+++ b/security/integrity/iint.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2008 IBM Corporation
  *
@@ -35,6 +37,7 @@ static struct integrity_iint_cache *__integrity_iint_find(struct inode *inode)
 	struct integrity_iint_cache *iint;
 	struct rb_node *n = integrity_iint_tree.rb_node;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (n) {
 		iint = rb_entry(n, struct integrity_iint_cache, rb_node);
 
@@ -59,7 +62,9 @@ struct integrity_iint_cache *integrity_iint_find(struct inode *inode)
 	struct integrity_iint_cache *iint;
 
 	if (!IS_IMA(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	read_lock(&integrity_iint_lock);
 	iint = __integrity_iint_find(inode);
@@ -70,6 +75,7 @@ struct integrity_iint_cache *integrity_iint_find(struct inode *inode)
 
 static void iint_free(struct integrity_iint_cache *iint)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(iint->ima_hash);
 	iint->ima_hash = NULL;
 	iint->version = 0;
@@ -98,7 +104,9 @@ struct integrity_iint_cache *integrity_inode_get(struct inode *inode)
 
 	iint = integrity_iint_find(inode);
 	if (iint)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return iint;
+}
 
 	iint = kmem_cache_alloc(iint_cache, GFP_NOFS);
 	if (!iint)
@@ -138,8 +146,11 @@ void integrity_inode_free(struct inode *inode)
 	struct integrity_iint_cache *iint;
 
 	if (!IS_IMA(inode))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	write_lock(&integrity_iint_lock);
 	iint = __integrity_iint_find(inode);
 	rb_erase(&iint->rb_node, &integrity_iint_tree);
@@ -189,7 +200,9 @@ int integrity_kernel_read(struct file *file, loff_t offset,
 	ssize_t ret;
 
 	if (!(file->f_mode & FMODE_READ))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EBADF;
+}
 
 	old_fs = get_fs();
 	set_fs(get_ds());
@@ -215,6 +228,7 @@ int __init integrity_read_file(const char *path, char **data)
 	char *buf;
 	int rc = -EINVAL;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!path || !*path)
 		return -EINVAL;
 
@@ -256,6 +270,7 @@ int __init integrity_read_file(const char *path, char **data)
  */
 void __init integrity_load_keys(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ima_load_x509();
 	evm_load_x509();
 }
diff --git a/security/keys/big_key.c b/security/keys/big_key.c
index 929e149..1a0b2b5 100644
--- a/security/keys/big_key.c
+++ b/security/keys/big_key.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Large capacity key type
  *
  * Copyright (C) 2017 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.
diff --git a/security/keys/encrypted-keys/encrypted.c b/security/keys/encrypted-keys/encrypted.c
index d92cbf9..0239581 100644
--- a/security/keys/encrypted-keys/encrypted.c
+++ b/security/keys/encrypted-keys/encrypted.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2010 IBM Corporation
  * Copyright (C) 2010 Politecnico di Torino, Italy
diff --git a/security/keys/gc.c b/security/keys/gc.c
index f01d48c..9ce684e 100644
--- a/security/keys/gc.c
+++ b/security/keys/gc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Key garbage collector
  *
  * Copyright (C) 2009-2011 Red Hat, Inc. All Rights Reserved.
@@ -58,6 +60,7 @@ void key_schedule_gc(time_t gc_at)
 	unsigned long expires;
 	time_t now = current_kernel_time().tv_sec;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("%ld", gc_at - now);
 
 	if (gc_at <= now || test_bit(KEY_GC_REAP_KEYTYPE, &key_gc_flags)) {
@@ -76,6 +79,7 @@ void key_schedule_gc(time_t gc_at)
  */
 void key_schedule_gc_links(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	set_bit(KEY_GC_KEY_EXPIRED, &key_gc_flags);
 	schedule_work(&key_gc_work);
 }
@@ -86,6 +90,7 @@ void key_schedule_gc_links(void)
  */
 static void key_gc_timer_func(unsigned long data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("");
 	key_gc_next_run = LONG_MAX;
 	key_schedule_gc_links();
@@ -103,6 +108,7 @@ static void key_gc_timer_func(unsigned long data)
  */
 void key_gc_keytype(struct key_type *ktype)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("%s", ktype->name);
 
 	key_gc_dead_keytype = ktype;
@@ -133,7 +139,9 @@ static noinline void key_gc_unused_keys(struct list_head *keys)
 
 		list_del(&key->graveyard_link);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kdebug("- %u", key->serial);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key_check(key);
 
 		/* Throw away the key data if the key is instantiated */
@@ -186,6 +194,7 @@ static void key_garbage_collector(struct work_struct *work)
 	struct key *key;
 	time_t new_timer, limit;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("[%lx,%x]", key_gc_flags, gc_state);
 
 	limit = current_kernel_time().tv_sec;
@@ -198,10 +207,15 @@ static void key_garbage_collector(struct work_struct *work)
 	gc_state &= KEY_GC_REAPING_DEAD_1 | KEY_GC_REAPING_DEAD_2;
 	gc_state <<= 1;
 	if (test_and_clear_bit(KEY_GC_KEY_EXPIRED, &key_gc_flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gc_state |= KEY_GC_REAPING_LINKS | KEY_GC_SET_TIMER;
+}
 
 	if (test_and_clear_bit(KEY_GC_REAP_KEYTYPE, &key_gc_flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		gc_state |= KEY_GC_REAPING_DEAD_1;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kdebug("new pass %x", gc_state);
 
 	new_timer = LONG_MAX;
@@ -222,7 +236,9 @@ static void key_garbage_collector(struct work_struct *work)
 			goto found_unreferenced_key;
 
 		if (unlikely(gc_state & KEY_GC_REAPING_DEAD_1)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (key->type == key_gc_dead_keytype) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				gc_state |= KEY_GC_FOUND_DEAD_KEY;
 				set_bit(KEY_FLAG_DEAD, &key->flags);
 				key->perm = 0;
@@ -234,7 +250,9 @@ static void key_garbage_collector(struct work_struct *work)
 		}
 
 		if (gc_state & KEY_GC_SET_TIMER) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (key->expiry > limit && key->expiry < new_timer) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				kdebug("will expire %x in %ld",
 				       key_serial(key), key->expiry - limit);
 				new_timer = key->expiry;
@@ -242,18 +260,25 @@ static void key_garbage_collector(struct work_struct *work)
 		}
 
 		if (unlikely(gc_state & KEY_GC_REAPING_DEAD_2))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (key->type == key_gc_dead_keytype)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				gc_state |= KEY_GC_FOUND_DEAD_KEY;
+}
+}
 
 		if ((gc_state & KEY_GC_REAPING_LINKS) ||
 		    unlikely(gc_state & KEY_GC_REAPING_DEAD_2)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (key->type == &key_type_keyring)
 				goto found_keyring;
 		}
 
 		if (unlikely(gc_state & KEY_GC_REAPING_DEAD_3))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (key->type == key_gc_dead_keytype)
 				goto destroy_dead_key;
+}
 
 	skip_dead_key:
 		if (spin_is_contended(&key_serial_lock) || need_resched())
@@ -277,6 +302,7 @@ static void key_garbage_collector(struct work_struct *work)
 	kdebug("pass complete");
 
 	if (gc_state & KEY_GC_SET_TIMER && new_timer != (time_t)LONG_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		new_timer += key_gc_delay;
 		key_schedule_gc(new_timer);
 	}
@@ -293,12 +319,14 @@ static void key_garbage_collector(struct work_struct *work)
 	}
 
 	if (!list_empty(&graveyard)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kdebug("gc keys");
 		key_gc_unused_keys(&graveyard);
 	}
 
 	if (unlikely(gc_state & (KEY_GC_REAPING_DEAD_1 |
 				 KEY_GC_REAPING_DEAD_2))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!(gc_state & KEY_GC_FOUND_DEAD_KEY)) {
 			/* No remaining dead keys: short circuit the remaining
 			 * keytype reap cycles.
@@ -307,11 +335,13 @@ static void key_garbage_collector(struct work_struct *work)
 			gc_state &= ~(KEY_GC_REAPING_DEAD_1 | KEY_GC_REAPING_DEAD_2);
 			gc_state |= KEY_GC_REAPING_DEAD_3;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			gc_state |= KEY_GC_REAP_AGAIN;
 		}
 	}
 
 	if (unlikely(gc_state & KEY_GC_REAPING_DEAD_3)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kdebug("dead wake");
 		smp_mb();
 		clear_bit(KEY_GC_REAPING_KEYTYPE, &key_gc_flags);
@@ -320,6 +350,7 @@ static void key_garbage_collector(struct work_struct *work)
 
 	if (gc_state & KEY_GC_REAP_AGAIN)
 		schedule_work(&key_gc_work);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kleave(" [end %x]", gc_state);
 	return;
 
@@ -358,11 +389,15 @@ static void key_garbage_collector(struct work_struct *work)
 	 */
 destroy_dead_key:
 	spin_unlock(&key_serial_lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kdebug("destroy key %d", key->serial);
 	down_write(&key->sem);
 	key->type = &key_type_dead;
 	if (key_gc_dead_keytype->destroy)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key_gc_dead_keytype->destroy(key);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memset(&key->payload, KEY_DESTROY, sizeof(key->payload));
 	up_write(&key->sem);
 	goto maybe_resched;
diff --git a/security/keys/internal.h b/security/keys/internal.h
index 503adba..964a275 100644
--- a/security/keys/internal.h
+++ b/security/keys/internal.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Authentication token and access key management internal defs
  *
  * Copyright (C) 2003-5, 2007 Red Hat, Inc. All Rights Reserved.
diff --git a/security/keys/key.c b/security/keys/key.c
index 83bf4b4..9ef4d7c 100644
--- a/security/keys/key.c
+++ b/security/keys/key.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Basic authentication token and access key management
  *
  * Copyright (C) 2004-2008 Red Hat, Inc. All Rights Reserved.
@@ -63,13 +65,19 @@ struct key_user *key_user_lookup(kuid_t uid)
 
 	/* search the tree for a user record with a matching UID */
 	while (*p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = *p;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		user = rb_entry(parent, struct key_user, node);
 
 		if (uid_lt(uid, user->uid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p = &(*p)->rb_left;
+}
 		else if (uid_gt(uid, user->uid))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			p = &(*p)->rb_right;
+}
 		else
 			goto found;
 	}
@@ -99,9 +107,12 @@ struct key_user *key_user_lookup(kuid_t uid)
 	candidate->uid = uid;
 	candidate->qnkeys = 0;
 	candidate->qnbytes = 0;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock_init(&candidate->lock);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_init(&candidate->cons_lock);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	rb_link_node(&candidate->node, parent, p);
 	rb_insert_color(&candidate->node, &key_user_tree);
 	spin_unlock(&key_user_lock);
@@ -123,6 +134,7 @@ struct key_user *key_user_lookup(kuid_t uid)
 void key_user_put(struct key_user *user)
 {
 	if (refcount_dec_and_lock(&user->usage, &key_user_lock)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rb_erase(&user->node, &key_user_tree);
 		spin_unlock(&key_user_lock);
 
@@ -147,6 +159,7 @@ static inline void key_alloc_serial(struct key *key)
 		key->serial >>= 1; /* negative numbers are not permitted */
 	} while (key->serial < 3);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_lock(&key_serial_lock);
 
 attempt_insertion:
@@ -154,7 +167,9 @@ static inline void key_alloc_serial(struct key *key)
 	p = &key_serial_tree.rb_node;
 
 	while (*p) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = *p;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xkey = rb_entry(parent, struct key, serial_node);
 
 		if (key->serial < xkey->serial)
@@ -176,16 +191,20 @@ static inline void key_alloc_serial(struct key *key)
 	 * that point looking for the next unused serial number */
 serial_exists:
 	for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key->serial++;
 		if (key->serial < 3) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			key->serial = 3;
 			goto attempt_insertion;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		parent = rb_next(parent);
 		if (!parent)
 			goto attempt_insertion;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		xkey = rb_entry(parent, struct key, serial_node);
 		if (key->serial < xkey->serial)
 			goto attempt_insertion;
@@ -240,13 +259,16 @@ struct key *key_alloc(struct key_type *type, const char *desc,
 		goto error;
 
 	if (type->vet_description) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = type->vet_description(desc);
 		if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			key = ERR_PTR(ret);
 			goto error;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	desclen = strlen(desc);
 	quotalen = desclen + 1 + type->def_datalen;
 
@@ -258,8 +280,10 @@ struct key *key_alloc(struct key_type *type, const char *desc,
 	/* check that the user's quota permits allocation of another key and
 	 * its description */
 	if (!(flags & KEY_ALLOC_NOT_IN_QUOTA)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unsigned maxkeys = uid_eq(uid, GLOBAL_ROOT_UID) ?
 			key_quota_root_maxkeys : key_quota_maxkeys;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unsigned maxbytes = uid_eq(uid, GLOBAL_ROOT_UID) ?
 			key_quota_root_maxbytes : key_quota_maxbytes;
 
@@ -286,8 +310,10 @@ struct key *key_alloc(struct key_type *type, const char *desc,
 	if (!key->index_key.description)
 		goto no_memory_3;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	refcount_set(&key->usage, 1);
 	init_rwsem(&key->sem);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lockdep_set_class(&key->sem, &type->lock_class);
 	key->index_key.type = type;
 	key->user = user;
@@ -301,7 +327,9 @@ struct key *key_alloc(struct key_type *type, const char *desc,
 	if (!(flags & KEY_ALLOC_NOT_IN_QUOTA))
 		key->flags |= 1 << KEY_FLAG_IN_QUOTA;
 	if (flags & KEY_ALLOC_BUILT_IN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key->flags |= 1 << KEY_FLAG_BUILTIN;
+}
 	if (flags & KEY_ALLOC_UID_KEYRING)
 		key->flags |= 1 << KEY_FLAG_UID_KEYRING;
 
@@ -325,11 +353,13 @@ struct key *key_alloc(struct key_type *type, const char *desc,
 	kfree(key->description);
 	kmem_cache_free(key_jar, key);
 	if (!(flags & KEY_ALLOC_NOT_IN_QUOTA)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&user->lock);
 		user->qnkeys--;
 		user->qnbytes -= quotalen;
 		spin_unlock(&user->lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_user_put(user);
 	key = ERR_PTR(ret);
 	goto error;
@@ -338,11 +368,13 @@ struct key *key_alloc(struct key_type *type, const char *desc,
 	kmem_cache_free(key_jar, key);
 no_memory_2:
 	if (!(flags & KEY_ALLOC_NOT_IN_QUOTA)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		spin_lock(&user->lock);
 		user->qnkeys--;
 		user->qnbytes -= quotalen;
 		spin_unlock(&user->lock);
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_user_put(user);
 no_memory_1:
 	key = ERR_PTR(-ENOMEM);
@@ -372,6 +404,7 @@ int key_payload_reserve(struct key *key, size_t datalen)
 	int delta = (int)datalen - key->datalen;
 	int ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_check(key);
 
 	/* contemplate the quota adjustment */
@@ -384,6 +417,7 @@ int key_payload_reserve(struct key *key, size_t datalen)
 		if (delta > 0 &&
 		    (key->user->qnbytes + delta >= maxbytes ||
 		     key->user->qnbytes + delta < key->user->qnbytes)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = -EDQUOT;
 		}
 		else {
@@ -427,9 +461,12 @@ static int __key_instantiate_and_link(struct key *key,
 {
 	int ret, awaken;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_check(key);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_check(keyring);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	awaken = 0;
 	ret = -EBUSY;
 
@@ -446,21 +483,30 @@ static int __key_instantiate_and_link(struct key *key,
 			mark_key_instantiated(key, 0);
 
 			if (test_and_clear_bit(KEY_FLAG_USER_CONSTRUCT, &key->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				awaken = 1;
+}
 
 			/* and link it into the destination keyring */
 			if (keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (test_bit(KEY_FLAG_KEEP, &keyring->flags))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 					set_bit(KEY_FLAG_KEEP, &key->flags);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				__key_link(key, _edit);
 			}
 
 			/* disable the authorisation key */
 			if (authkey)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				key_revoke(authkey);
+}
 
 			if (prep->expiry != TIME_T_MAX) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				key->expiry = prep->expiry;
 				key_schedule_gc(prep->expiry + key_gc_delay);
 			}
@@ -471,7 +517,9 @@ static int __key_instantiate_and_link(struct key *key,
 
 	/* wake up anyone waiting for a key to be constructed */
 	if (awaken)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		wake_up_bit(&key->flags, KEY_FLAG_USER_CONSTRUCT);
+}
 
 	return ret;
 }
@@ -514,10 +562,12 @@ int key_instantiate_and_link(struct key *key,
 	}
 
 	if (keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = __key_link_begin(keyring, &key->index_key, &edit);
 		if (ret < 0)
 			goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (keyring->restrict_link && keyring->restrict_link->check) {
 			struct key_restriction *keyres = keyring->restrict_link;
 
@@ -532,7 +582,9 @@ int key_instantiate_and_link(struct key *key,
 
 error_link_end:
 	if (keyring)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__key_link_end(keyring, &key->index_key, edit);
+}
 
 error:
 	if (key->type->preparse)
@@ -573,6 +625,7 @@ int key_reject_and_link(struct key *key,
 	struct timespec now;
 	int ret, awaken, link_ret = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_check(key);
 	key_check(keyring);
 
@@ -635,6 +688,7 @@ EXPORT_SYMBOL(key_reject_and_link);
 void key_put(struct key *key)
 {
 	if (key) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key_check(key);
 
 		if (refcount_dec_and_test(&key->usage))
@@ -717,6 +771,7 @@ void key_set_timeout(struct key *key, unsigned timeout)
 	down_write(&key->sem);
 
 	if (timeout > 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		now = current_kernel_time();
 		expiry = now.tv_sec + timeout;
 	}
@@ -733,6 +788,7 @@ EXPORT_SYMBOL_GPL(key_set_timeout);
  */
 void key_type_put(struct key_type *ktype)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	up_read(&key_types_sem);
 }
 
@@ -745,6 +801,7 @@ void key_type_put(struct key_type *ktype)
 static inline key_ref_t __key_update(key_ref_t key_ref,
 				     struct key_preparsed_payload *prep)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct key *key = key_ref_to_ptr(key_ref);
 	int ret;
 
@@ -815,6 +872,7 @@ key_ref_t key_create_or_update(key_ref_t keyring_ref,
 	};
 	struct key_preparsed_payload prep;
 	struct assoc_array_edit *edit;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct cred *cred = current_cred();
 	struct key *keyring, *key = NULL;
 	key_ref_t key_ref;
@@ -979,6 +1037,7 @@ int key_update(key_ref_t key_ref, const void *payload, size_t plen)
 	struct key *key = key_ref_to_ptr(key_ref);
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_check(key);
 
 	/* the key must be writable */
@@ -1031,6 +1090,7 @@ void key_revoke(struct key *key)
 	struct timespec now;
 	time_t time;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_check(key);
 
 	/* make sure no one's trying to change or use the key when we mark it
@@ -1064,6 +1124,7 @@ EXPORT_SYMBOL(key_revoke);
  */
 void key_invalidate(struct key *key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("%d", key_serial(key));
 
 	key_check(key);
@@ -1091,6 +1152,7 @@ int generic_key_instantiate(struct key *key, struct key_preparsed_payload *prep)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_devel("==>%s()\n", __func__);
 
 	ret = key_payload_reserve(key, prep->quotalen);
@@ -1155,6 +1217,7 @@ EXPORT_SYMBOL(register_key_type);
  */
 void unregister_key_type(struct key_type *ktype)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	down_write(&key_types_sem);
 	list_del_init(&ktype->link);
 	downgrade_write(&key_types_sem);
diff --git a/security/keys/keyctl.c b/security/keys/keyctl.c
index 1ffe60b..d399e34 100644
--- a/security/keys/keyctl.c
+++ b/security/keys/keyctl.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Userspace key control operations
  *
  * Copyright (C) 2004-5 Red Hat, Inc. All Rights Reserved.
@@ -38,7 +40,9 @@ static int key_get_type_from_user(char *type,
 
 	ret = strncpy_from_user(type, _type, len);
 	if (ret < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	if (ret == 0 || ret >= len)
 		return -EINVAL;
 	if (type[0] == '.')
@@ -252,6 +256,7 @@ long keyctl_get_keyring_ID(key_serial_t id, int create)
 	unsigned long lflags;
 	long ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	lflags = create ? KEY_LOOKUP_CREATE : 0;
 	key_ref = lookup_user_key(id, lflags, KEY_NEED_SEARCH);
 	if (IS_ERR(key_ref)) {
@@ -286,10 +291,12 @@ long keyctl_join_session_keyring(const char __user *_name)
 	if (_name) {
 		name = strndup_user(_name, KEY_MAX_DESC_SIZE);
 		if (IS_ERR(name)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = PTR_ERR(name);
 			goto error;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -EPERM;
 		if (name[0] == '.')
 			goto error_name;
@@ -375,6 +382,7 @@ long keyctl_revoke_key(key_serial_t id)
 
 	key_ref = lookup_user_key(id, 0, KEY_NEED_WRITE);
 	if (IS_ERR(key_ref)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(key_ref);
 		if (ret != -EACCES)
 			goto error;
@@ -414,6 +422,7 @@ long keyctl_invalidate_key(key_serial_t id)
 	struct key *key;
 	long ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("%d", id);
 
 	key_ref = lookup_user_key(id, 0, KEY_NEED_SEARCH);
@@ -463,6 +472,7 @@ long keyctl_keyring_clear(key_serial_t ringid)
 
 	keyring_ref = lookup_user_key(ringid, KEY_LOOKUP_CREATE, KEY_NEED_WRITE);
 	if (IS_ERR(keyring_ref)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(keyring_ref);
 
 		/* Root is permitted to invalidate certain special keyrings */
@@ -509,6 +519,7 @@ long keyctl_keyring_link(key_serial_t id, key_serial_t ringid)
 
 	keyring_ref = lookup_user_key(ringid, KEY_LOOKUP_CREATE, KEY_NEED_WRITE);
 	if (IS_ERR(keyring_ref)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(keyring_ref);
 		goto error;
 	}
@@ -547,6 +558,7 @@ long keyctl_keyring_unlink(key_serial_t id, key_serial_t ringid)
 
 	keyring_ref = lookup_user_key(ringid, 0, KEY_NEED_WRITE);
 	if (IS_ERR(keyring_ref)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(keyring_ref);
 		goto error;
 	}
@@ -600,8 +612,10 @@ long keyctl_describe_key(key_serial_t keyid,
 		/* viewing a key under construction is permitted if we have the
 		 * authorisation token handy */
 		if (PTR_ERR(key_ref) == -EACCES) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			instkey = key_get_instantiation_authkey(keyid);
 			if (!IS_ERR(instkey)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				key_put(instkey);
 				key_ref = lookup_user_key(keyid,
 							  KEY_LOOKUP_PARTIAL,
@@ -611,6 +625,7 @@ long keyctl_describe_key(key_serial_t keyid,
 			}
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(key_ref);
 		goto error;
 	}
@@ -672,6 +687,7 @@ long keyctl_keyring_search(key_serial_t ringid,
 	if (ret < 0)
 		goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	description = strndup_user(_description, KEY_MAX_DESC_SIZE);
 	if (IS_ERR(description)) {
 		ret = PTR_ERR(description);
@@ -760,6 +776,7 @@ long keyctl_read_key(key_serial_t keyid, char __user *buffer, size_t buflen)
 	/* find the key first */
 	key_ref = lookup_user_key(keyid, 0, 0);
 	if (IS_ERR(key_ref)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = -ENOKEY;
 		goto error;
 	}
@@ -833,6 +850,7 @@ long keyctl_chown_key(key_serial_t id, uid_t user, gid_t group)
 	uid = make_kuid(current_user_ns(), user);
 	gid = make_kgid(current_user_ns(), group);
 	ret = -EINVAL;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if ((user != (uid_t) -1) && !uid_valid(uid))
 		goto error;
 	if ((group != (gid_t) -1) && !gid_valid(gid))
@@ -951,10 +969,12 @@ long keyctl_setperm_key(key_serial_t id, key_perm_t perm)
 	key_ref = lookup_user_key(id, KEY_LOOKUP_CREATE | KEY_LOOKUP_PARTIAL,
 				  KEY_NEED_SETATTR);
 	if (IS_ERR(key_ref)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(key_ref);
 		goto error;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key = key_ref_to_ptr(key_ref);
 
 	/* make the changes with the locks held to prevent chown/chmod races */
@@ -987,7 +1007,9 @@ static long get_instantiation_keyring(key_serial_t ringid,
 
 	/* just return a NULL pointer if we weren't asked to make a link */
 	if (ringid == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	/* if a specific keyring is nominated by ID, then use that */
 	if (ringid > 0) {
@@ -1020,7 +1042,9 @@ static int keyctl_change_reqkey_auth(struct key *key)
 
 	new = prepare_creds();
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	key_put(new->request_key_auth);
 	new->request_key_auth = key_get(key);
@@ -1041,6 +1065,7 @@ long keyctl_instantiate_key_common(key_serial_t id,
 				   struct iov_iter *from,
 				   key_serial_t ringid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct cred *cred = current_cred();
 	struct request_key_auth *rka;
 	struct key *instkey, *dest_keyring;
@@ -1122,6 +1147,7 @@ long keyctl_instantiate_key(key_serial_t id,
 			    size_t plen,
 			    key_serial_t ringid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (_payload && plen) {
 		struct iovec iov;
 		struct iov_iter from;
@@ -1157,7 +1183,9 @@ long keyctl_instantiate_key_iov(key_serial_t id,
 	long ret;
 
 	if (!_payload_iov)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ioc = 0;
+}
 
 	ret = import_iovec(WRITE, _payload_iov, ioc,
 				    ARRAY_SIZE(iovstack), &iov, &from);
@@ -1185,6 +1213,7 @@ long keyctl_instantiate_key_iov(key_serial_t id,
  */
 long keyctl_negate_key(key_serial_t id, unsigned timeout, key_serial_t ringid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return keyctl_reject_key(id, timeout, ENOKEY, ringid);
 }
 
@@ -1206,6 +1235,7 @@ long keyctl_negate_key(key_serial_t id, unsigned timeout, key_serial_t ringid)
 long keyctl_reject_key(key_serial_t id, unsigned timeout, unsigned error,
 		       key_serial_t ringid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct cred *cred = current_cred();
 	struct request_key_auth *rka;
 	struct key *instkey, *dest_keyring;
@@ -1266,6 +1296,7 @@ long keyctl_set_reqkey_keyring(int reqkey_defl)
 	struct cred *new;
 	int ret, old_setting;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	old_setting = current_cred_xxx(jit_keyring);
 
 	if (reqkey_defl == KEY_REQKEY_DEFL_NO_CHANGE)
@@ -1438,6 +1469,7 @@ long keyctl_get_security(key_serial_t keyid,
 
 	key_ref = lookup_user_key(keyid, KEY_LOOKUP_PARTIAL, KEY_NEED_VIEW);
 	if (IS_ERR(key_ref)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (PTR_ERR(key_ref) != -EACCES)
 			return PTR_ERR(key_ref);
 
@@ -1502,7 +1534,9 @@ long keyctl_session_to_parent(void)
 
 	keyring_r = lookup_user_key(KEY_SPEC_SESSION_KEYRING, 0, KEY_NEED_LINK);
 	if (IS_ERR(keyring_r))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(keyring_r);
+}
 
 	ret = -ENOMEM;
 
@@ -1603,7 +1637,9 @@ long keyctl_restrict_keyring(key_serial_t id, const char __user *_type,
 
 	key_ref = lookup_user_key(id, 0, KEY_NEED_SETATTR);
 	if (IS_ERR(key_ref))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(key_ref);
+}
 
 	ret = -EINVAL;
 	if (_type) {
diff --git a/security/keys/keyring.c b/security/keys/keyring.c
index 36f842e..990a639 100644
--- a/security/keys/keyring.c
+++ b/security/keys/keyring.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Keyring handling
  *
  * Copyright (C) 2004-2005, 2008, 2013 Red Hat, Inc. All Rights Reserved.
@@ -41,10 +43,12 @@
 
 static inline bool keyring_ptr_is_keyring(const struct assoc_array_ptr *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (unsigned long)x & KEYRING_PTR_SUBTYPE;
 }
 static inline struct key *keyring_ptr_to_key(const struct assoc_array_ptr *x)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	void *object = assoc_array_ptr_to_leaf(x);
 	return (struct key *)((unsigned long)object & ~KEYRING_PTR_SUBTYPE);
 }
@@ -52,6 +56,7 @@ static inline void *keyring_key_to_ptr(struct key *key)
 {
 	if (key->type == &key_type_keyring)
 		return (void *)((unsigned long)key | KEYRING_PTR_SUBTYPE);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return key;
 }
 
@@ -148,6 +153,7 @@ static void keyring_free_preparse(struct key_preparsed_payload *prep)
 static int keyring_instantiate(struct key *keyring,
 			       struct key_preparsed_payload *prep)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	assoc_array_init(&keyring->keys);
 	/* make the keyring available by name if it has one */
 	keyring_publish_name(keyring);
@@ -170,6 +176,7 @@ static u64 mult_64x32_and_fold(u64 x, u32 y)
  */
 static unsigned long hash_key_type_and_desc(const struct keyring_index_key *index_key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const unsigned level_shift = ASSOC_ARRAY_LEVEL_STEP;
 	const unsigned long fan_mask = ASSOC_ARRAY_FAN_MASK;
 	const char *description = index_key->description;
@@ -271,6 +278,7 @@ static unsigned long keyring_get_key_chunk(const void *data, int level)
 
 static unsigned long keyring_get_object_key_chunk(const void *object, int level)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct key *key = keyring_ptr_to_key(object);
 	return keyring_get_key_chunk(&key->index_key, level);
 }
@@ -292,6 +300,7 @@ static bool keyring_compare_object(const void *object, const void *data)
  */
 static int keyring_diff_objects(const void *object, const void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct key *key_a = keyring_ptr_to_key(object);
 	const struct keyring_index_key *a = &key_a->index_key;
 	const struct keyring_index_key *b = data;
@@ -359,6 +368,7 @@ static int keyring_diff_objects(const void *object, const void *data)
  */
 static void keyring_free_object(void *object)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_put(keyring_ptr_to_key(object));
 }
 
@@ -391,6 +401,7 @@ static void keyring_destroy(struct key *keyring)
 		    !list_empty(&keyring->name_link))
 			list_del(&keyring->name_link);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		write_unlock(&keyring_name_lock);
 	}
 
@@ -409,6 +420,7 @@ static void keyring_destroy(struct key *keyring)
  */
 static void keyring_describe(const struct key *keyring, struct seq_file *m)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (keyring->description)
 		seq_puts(m, keyring->description);
 	else
@@ -434,6 +446,7 @@ static int keyring_read_iterator(const void *object, void *data)
 	const struct key *key = keyring_ptr_to_key(object);
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("{%s,%d},,{%zu/%zu}",
 	       key->type->name, key->serial, ctx->count, ctx->buflen);
 
@@ -461,6 +474,7 @@ static long keyring_read(const struct key *keyring,
 	struct keyring_read_iterator_context ctx;
 	long ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("{%d},,%zu", key_serial(keyring), buflen);
 
 	if (buflen & (sizeof(key_serial_t) - 1))
@@ -505,6 +519,7 @@ struct key *keyring_alloc(const char *description, kuid_t uid, kgid_t gid,
 	if (!IS_ERR(keyring)) {
 		ret = key_instantiate_and_link(keyring, NULL, 0, dest, NULL);
 		if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			key_put(keyring);
 			keyring = ERR_PTR(ret);
 		}
@@ -533,6 +548,7 @@ int restrict_link_reject(struct key *keyring,
 			 const union key_payload *payload,
 			 struct key *restriction_key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EPERM;
 }
 
@@ -542,6 +558,7 @@ int restrict_link_reject(struct key *keyring,
 bool key_default_cmp(const struct key *key,
 		     const struct key_match_data *match_data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return strcmp(key->description, match_data->raw_data) == 0;
 }
 
@@ -552,31 +569,42 @@ static int keyring_search_iterator(const void *object, void *iterator_data)
 {
 	struct keyring_search_context *ctx = iterator_data;
 	const struct key *key = keyring_ptr_to_key(object);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long kflags = READ_ONCE(key->flags);
 	short state = READ_ONCE(key->state);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("{%d}", key->serial);
 
 	/* ignore keys not of this type */
 	if (key->type != ctx->index_key.type) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kleave(" = 0 [!type]");
 		return 0;
 	}
 
 	/* skip invalidated, revoked and expired keys */
 	if (ctx->flags & KEYRING_SEARCH_DO_STATE_CHECK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		time_t expiry = READ_ONCE(key->expiry);
 
 		if (kflags & ((1 << KEY_FLAG_INVALIDATED) |
 			      (1 << KEY_FLAG_REVOKED))) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ctx->result = ERR_PTR(-EKEYREVOKED);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kleave(" = %d [invrev]", ctx->skipped_ret);
 			goto skipped;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (expiry && ctx->now.tv_sec >= expiry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!(ctx->flags & KEYRING_SEARCH_SKIP_EXPIRED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ctx->result = ERR_PTR(-EKEYEXPIRED);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kleave(" = %d [expire]", ctx->skipped_ret);
 			goto skipped;
 		}
@@ -584,6 +612,7 @@ static int keyring_search_iterator(const void *object, void *iterator_data)
 
 	/* keys that don't match */
 	if (!ctx->match_data.cmp(key, &ctx->match_data)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kleave(" = 0 [!match]");
 		return 0;
 	}
@@ -592,7 +621,9 @@ static int keyring_search_iterator(const void *object, void *iterator_data)
 	if (!(ctx->flags & KEYRING_SEARCH_NO_CHECK_PERM) &&
 	    key_task_permission(make_key_ref(key, ctx->possessed),
 				ctx->cred, KEY_NEED_SEARCH) < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ctx->result = ERR_PTR(-EACCES);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kleave(" = %d [!perm]", ctx->skipped_ret);
 		goto skipped;
 	}
@@ -600,7 +631,9 @@ static int keyring_search_iterator(const void *object, void *iterator_data)
 	if (ctx->flags & KEYRING_SEARCH_DO_STATE_CHECK) {
 		/* we set a different error code if we pass a negative key */
 		if (state < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ctx->result = ERR_PTR(state);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kleave(" = %d [neg]", ctx->skipped_ret);
 			goto skipped;
 		}
@@ -608,6 +641,7 @@ static int keyring_search_iterator(const void *object, void *iterator_data)
 
 	/* Found */
 	ctx->result = make_key_ref(key, ctx->possessed);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kleave(" = 1 [found]");
 	return 1;
 
@@ -630,6 +664,7 @@ static int search_keyring(struct key *keyring, struct keyring_search_context *ct
 					  &ctx->index_key);
 		return object ? ctx->iterator(object, ctx) : 0;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return assoc_array_iterate(&keyring->keys, ctx->iterator, ctx);
 }
 
@@ -971,6 +1006,7 @@ static DECLARE_RWSEM(keyring_serialise_restrict_sem);
 static bool keyring_detect_restriction_cycle(const struct key *dest_keyring,
 					     struct key_restriction *keyres)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (keyres && keyres->key &&
 	       keyres->key->type == &key_type_keyring) {
 		if (keyres->key == dest_keyring)
@@ -997,6 +1033,7 @@ int keyring_restrict(key_ref_t keyring_ref, const char *type,
 	int ret = 0;
 
 	keyring = key_ref_to_ptr(keyring_ref);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_check(keyring);
 
 	if (keyring->type != &key_type_keyring)
@@ -1071,6 +1108,7 @@ key_ref_t find_key_to_update(key_ref_t keyring_ref,
 
 	keyring = key_ref_to_ptr(keyring_ref);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("{%d},{%s,%s}",
 	       keyring->serial, index_key->type->name, index_key->description);
 
@@ -1112,7 +1150,9 @@ struct key *find_keyring_by_name(const char *name, bool uid_keyring)
 	int bucket;
 
 	if (!name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	bucket = keyring_hash(name);
 
@@ -1135,6 +1175,7 @@ struct key *find_keyring_by_name(const char *name, bool uid_keyring)
 				continue;
 
 			if (uid_keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!test_bit(KEY_FLAG_UID_KEYRING,
 					      &keyring->flags))
 					continue;
@@ -1154,6 +1195,7 @@ struct key *find_keyring_by_name(const char *name, bool uid_keyring)
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	keyring = ERR_PTR(-ENOKEY);
 out:
 	read_unlock(&keyring_name_lock);
@@ -1166,6 +1208,7 @@ static int keyring_detect_cycle_iterator(const void *object,
 	struct keyring_search_context *ctx = iterator_data;
 	const struct key *key = keyring_ptr_to_key(object);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("{%d}", key->serial);
 
 	/* We might get a keyring with matching index-key that is nonetheless a
@@ -1215,13 +1258,16 @@ int __key_link_begin(struct key *keyring,
 	struct assoc_array_edit *edit;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("%d,%s,%s,",
 	       keyring->serial, index_key->type->name, index_key->description);
 
 	BUG_ON(index_key->desc_len == 0);
 
 	if (keyring->type != &key_type_keyring)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTDIR;
+}
 
 	down_write(&keyring->sem);
 
@@ -1242,6 +1288,7 @@ int __key_link_begin(struct key *keyring,
 				  index_key,
 				  NULL);
 	if (IS_ERR(edit)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(edit);
 		goto error_sem;
 	}
@@ -1257,6 +1304,7 @@ int __key_link_begin(struct key *keyring,
 	}
 
 	*_edit = edit;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kleave(" = 0");
 	return 0;
 
@@ -1264,9 +1312,12 @@ int __key_link_begin(struct key *keyring,
 	assoc_array_cancel_edit(edit);
 error_sem:
 	if (index_key->type == &key_type_keyring)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up_write(&keyring_serialise_link_sem);
+}
 error_krsem:
 	up_write(&keyring->sem);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kleave(" = %d", ret);
 	return ret;
 }
@@ -1283,6 +1334,7 @@ int __key_link_check_live_key(struct key *keyring, struct key *key)
 		/* check that we aren't going to create a cycle by linking one
 		 * keyring to another */
 		return keyring_detect_cycle(keyring, key);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -1296,6 +1348,7 @@ int __key_link_check_live_key(struct key *keyring, struct key *key)
  */
 void __key_link(struct key *key, struct assoc_array_edit **_edit)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	__key_get(key);
 	assoc_array_insert_set_object(*_edit, keyring_key_to_ptr(key));
 	assoc_array_apply_edit(*_edit);
@@ -1314,16 +1367,20 @@ void __key_link_end(struct key *keyring,
 	__releases(&keyring_serialise_link_sem)
 {
 	BUG_ON(index_key->type == NULL);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("%d,%s,", keyring->serial, index_key->type->name);
 
 	if (index_key->type == &key_type_keyring)
 		up_write(&keyring_serialise_link_sem);
 
 	if (edit) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!edit->dead_leaf) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			key_payload_reserve(keyring,
 				keyring->datalen - KEYQUOTA_LINK_BYTES);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		assoc_array_cancel_edit(edit);
 	}
 	up_write(&keyring->sem);
@@ -1335,7 +1392,10 @@ void __key_link_end(struct key *keyring,
 static int __key_link_check_restriction(struct key *keyring, struct key *key)
 {
 	if (!keyring->restrict_link || !keyring->restrict_link->check)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return keyring->restrict_link->check(keyring, key->type, &key->payload,
 					     keyring->restrict_link->key);
 }
@@ -1365,13 +1425,17 @@ int key_link(struct key *keyring, struct key *key)
 	struct assoc_array_edit *edit;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("{%d,%d}", keyring->serial, refcount_read(&keyring->usage));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_check(keyring);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_check(key);
 
 	ret = __key_link_begin(keyring, &key->index_key, &edit);
 	if (ret == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kdebug("begun {%d,%d}", keyring->serial, refcount_read(&keyring->usage));
 		ret = __key_link_check_restriction(keyring, key);
 		if (ret == 0)
@@ -1381,6 +1445,7 @@ int key_link(struct key *keyring, struct key *key)
 		__key_link_end(keyring, &key->index_key, edit);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kleave(" = %d {%d,%d}", ret, keyring->serial, refcount_read(&keyring->usage));
 	return ret;
 }
@@ -1408,6 +1473,7 @@ int key_unlink(struct key *keyring, struct key *key)
 	struct assoc_array_edit *edit;
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	key_check(keyring);
 	key_check(key);
 
@@ -1450,7 +1516,9 @@ int keyring_clear(struct key *keyring)
 	int ret;
 
 	if (keyring->type != &key_type_keyring)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOTDIR;
+}
 
 	down_write(&keyring->sem);
 
@@ -1480,6 +1548,7 @@ static void keyring_revoke(struct key *keyring)
 
 	edit = assoc_array_clear(&keyring->keys, &keyring_assoc_array_ops);
 	if (!IS_ERR(edit)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (edit)
 			assoc_array_apply_edit(edit);
 		key_payload_reserve(keyring, 0);
@@ -1488,6 +1557,7 @@ static void keyring_revoke(struct key *keyring)
 
 static bool keyring_gc_select_iterator(void *object, void *iterator_data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct key *key = keyring_ptr_to_key(object);
 	time_t *limit = iterator_data;
 
@@ -1499,6 +1569,7 @@ static bool keyring_gc_select_iterator(void *object, void *iterator_data)
 
 static int keyring_gc_check_iterator(const void *object, void *iterator_data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct key *key = keyring_ptr_to_key(object);
 	time_t *limit = iterator_data;
 
@@ -1516,6 +1587,7 @@ void keyring_gc(struct key *keyring, time_t limit)
 {
 	int result;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("%x{%s}", keyring->serial, keyring->description ?: "");
 
 	if (keyring->flags & ((1 << KEY_FLAG_INVALIDATED) |
@@ -1561,6 +1633,7 @@ void keyring_restriction_gc(struct key *keyring, struct key_type *dead_type)
 {
 	struct key_restriction *keyres;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("%x{%s}", keyring->serial, keyring->description ?: "");
 
 	/*
diff --git a/security/keys/permission.c b/security/keys/permission.c
index a72b4dd..783f47f 100644
--- a/security/keys/permission.c
+++ b/security/keys/permission.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Key permission checking
  *
  * Copyright (C) 2005 Red Hat, Inc. All Rights Reserved.
@@ -45,13 +47,17 @@ int key_task_permission(const key_ref_t key_ref, const struct cred *cred,
 	/* use the third 8-bits of permissions for keys the caller has a group
 	 * membership in common with */
 	if (gid_valid(key->gid) && key->perm & KEY_GRP_ALL) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (gid_eq(key->gid, cred->fsgid)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kperm = key->perm >> 8;
 			goto use_these_perms;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = groups_search(cred->group_info, key->gid);
 		if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			kperm = key->perm >> 8;
 			goto use_these_perms;
 		}
@@ -71,7 +77,9 @@ int key_task_permission(const key_ref_t key_ref, const struct cred *cred,
 	kperm = kperm & perm & KEY_NEED_ALL;
 
 	if (kperm != perm)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EACCES;
+}
 
 	/* let LSM be the final arbiter */
 	return security_key_permission(key_ref, cred, perm);
@@ -88,11 +96,14 @@ EXPORT_SYMBOL(key_task_permission);
  */
 int key_validate(const struct key *key)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long flags = READ_ONCE(key->flags);
 	time_t expiry = READ_ONCE(key->expiry);
 
 	if (flags & (1 << KEY_FLAG_INVALIDATED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOKEY;
+}
 
 	/* check it's still accessible */
 	if (flags & ((1 << KEY_FLAG_REVOKED) |
@@ -101,11 +112,15 @@ int key_validate(const struct key *key)
 
 	/* check it hasn't expired */
 	if (expiry) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		struct timespec now = current_kernel_time();
 		if (now.tv_sec >= expiry)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -EKEYEXPIRED;
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 EXPORT_SYMBOL(key_validate);
diff --git a/security/keys/proc.c b/security/keys/proc.c
index 6d1fcbb..46b7a0c 100644
--- a/security/keys/proc.c
+++ b/security/keys/proc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* procfs files for key database enumeration
  *
  * Copyright (C) 2004 Red Hat, Inc. All Rights Reserved.
@@ -67,11 +69,15 @@ static int __init key_proc_init(void)
 
 	p = proc_create("keys", 0, NULL, &proc_keys_fops);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Cannot create /proc/keys\n");
+}
 
 	p = proc_create("key-users", 0, NULL, &proc_key_users_fops);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("Cannot create /proc/key-users\n");
+}
 
 	return 0;
 }
@@ -84,6 +90,7 @@ __initcall(key_proc_init);
  */
 static struct rb_node *key_serial_next(struct seq_file *p, struct rb_node *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct user_namespace *user_ns = seq_user_ns(p);
 
 	n = rb_next(n);
@@ -98,11 +105,13 @@ static struct rb_node *key_serial_next(struct seq_file *p, struct rb_node *n)
 
 static int proc_keys_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &proc_keys_ops);
 }
 
 static struct key *find_ge_key(struct seq_file *p, key_serial_t id)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct user_namespace *user_ns = seq_user_ns(p);
 	struct rb_node *n = key_serial_tree.rb_node;
 	struct key *minkey = NULL;
@@ -144,7 +153,9 @@ static void *proc_keys_start(struct seq_file *p, loff_t *_pos)
 	spin_lock(&key_serial_lock);
 
 	if (*_pos > INT_MAX)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 	key = find_ge_key(p, pos);
 	if (!key)
 		return NULL;
@@ -154,6 +165,7 @@ static void *proc_keys_start(struct seq_file *p, loff_t *_pos)
 
 static inline key_serial_t key_node_serial(struct rb_node *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct key *key = rb_entry(n, struct key, serial_node);
 	return key->serial;
 }
@@ -164,19 +176,23 @@ static void *proc_keys_next(struct seq_file *p, void *v, loff_t *_pos)
 
 	n = key_serial_next(p, v);
 	if (n)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*_pos = key_node_serial(n);
+}
 	return n;
 }
 
 static void proc_keys_stop(struct seq_file *p, void *v)
 	__releases(key_serial_lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&key_serial_lock);
 }
 
 static int proc_keys_show(struct seq_file *m, void *v)
 {
 	struct rb_node *_p = v;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct key *key = rb_entry(_p, struct key, serial_node);
 	struct timespec now;
 	time_t expiry;
@@ -274,6 +290,7 @@ static int proc_keys_show(struct seq_file *m, void *v)
 
 static struct rb_node *__key_user_next(struct user_namespace *user_ns, struct rb_node *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (n) {
 		struct key_user *user = rb_entry(n, struct key_user, node);
 		if (kuid_has_mapping(user_ns, user->uid))
@@ -285,11 +302,13 @@ static struct rb_node *__key_user_next(struct user_namespace *user_ns, struct rb
 
 static struct rb_node *key_user_next(struct user_namespace *user_ns, struct rb_node *n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return __key_user_next(user_ns, rb_next(n));
 }
 
 static struct rb_node *key_user_first(struct user_namespace *user_ns, struct rb_root *r)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rb_node *n = rb_first(r);
 	return __key_user_next(user_ns, n);
 }
@@ -300,6 +319,7 @@ static struct rb_node *key_user_first(struct user_namespace *user_ns, struct rb_
  */
 static int proc_key_users_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &proc_key_users_ops);
 }
 
@@ -312,6 +332,7 @@ static void *proc_key_users_start(struct seq_file *p, loff_t *_pos)
 	spin_lock(&key_user_lock);
 
 	_p = key_user_first(seq_user_ns(p), &key_user_tree);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (pos > 0 && _p) {
 		pos--;
 		_p = key_user_next(seq_user_ns(p), _p);
@@ -322,6 +343,7 @@ static void *proc_key_users_start(struct seq_file *p, loff_t *_pos)
 
 static void *proc_key_users_next(struct seq_file *p, void *v, loff_t *_pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	(*_pos)++;
 	return key_user_next(seq_user_ns(p), (struct rb_node *)v);
 }
@@ -329,12 +351,14 @@ static void *proc_key_users_next(struct seq_file *p, void *v, loff_t *_pos)
 static void proc_key_users_stop(struct seq_file *p, void *v)
 	__releases(key_user_lock)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spin_unlock(&key_user_lock);
 }
 
 static int proc_key_users_show(struct seq_file *m, void *v)
 {
 	struct rb_node *_p = v;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct key_user *user = rb_entry(_p, struct key_user, node);
 	unsigned maxkeys = uid_eq(user->uid, GLOBAL_ROOT_UID) ?
 		key_quota_root_maxkeys : key_quota_maxkeys;
diff --git a/security/keys/process_keys.c b/security/keys/process_keys.c
index 740affd..ae14a32 100644
--- a/security/keys/process_keys.c
+++ b/security/keys/process_keys.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Manage a process's keyrings
  *
  * Copyright (C) 2004-2005, 2008 Red Hat, Inc. All Rights Reserved.
@@ -56,9 +58,11 @@ int install_user_keyrings(void)
 	user = cred->user;
 	uid = from_kuid(cred->user_ns, user->uid);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kenter("%p{%u}", user, uid);
 
 	if (user->uid_keyring && user->session_keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kleave(" = 0 [exist]");
 		return 0;
 	}
@@ -81,6 +85,7 @@ int install_user_keyrings(void)
 							KEY_ALLOC_IN_QUOTA,
 						    NULL, NULL);
 			if (IS_ERR(uid_keyring)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = PTR_ERR(uid_keyring);
 				goto error;
 			}
@@ -99,6 +104,7 @@ int install_user_keyrings(void)
 						  KEY_ALLOC_IN_QUOTA,
 					      NULL, NULL);
 			if (IS_ERR(session_keyring)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = PTR_ERR(session_keyring);
 				goto error_release;
 			}
@@ -116,6 +122,7 @@ int install_user_keyrings(void)
 	}
 
 	mutex_unlock(&key_user_keyring_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kleave(" = 0");
 	return 0;
 
@@ -125,6 +132,7 @@ int install_user_keyrings(void)
 	key_put(uid_keyring);
 error:
 	mutex_unlock(&key_user_keyring_mutex);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kleave(" = %d", ret);
 	return ret;
 }
@@ -140,7 +148,9 @@ int install_thread_keyring_to_cred(struct cred *new)
 	struct key *keyring;
 
 	if (new->thread_keyring)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	keyring = keyring_alloc("_tid", new->uid, new->gid, new,
 				KEY_POS_ALL | KEY_USR_VIEW,
@@ -165,7 +175,9 @@ static int install_thread_keyring(void)
 
 	new = prepare_creds();
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ret = install_thread_keyring_to_cred(new);
 	if (ret < 0) {
@@ -187,7 +199,9 @@ int install_process_keyring_to_cred(struct cred *new)
 	struct key *keyring;
 
 	if (new->process_keyring)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	keyring = keyring_alloc("_pid", new->uid, new->gid, new,
 				KEY_POS_ALL | KEY_USR_VIEW,
@@ -212,7 +226,9 @@ static int install_process_keyring(void)
 
 	new = prepare_creds();
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ret = install_process_keyring_to_cred(new);
 	if (ret < 0) {
@@ -239,16 +255,23 @@ int install_session_keyring_to_cred(struct cred *cred, struct key *keyring)
 
 	/* create an empty session keyring */
 	if (!keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		flags = KEY_ALLOC_QUOTA_OVERRUN;
 		if (cred->session_keyring)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			flags = KEY_ALLOC_IN_QUOTA;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		keyring = keyring_alloc("_ses", cred->uid, cred->gid, cred,
 					KEY_POS_ALL | KEY_USR_VIEW | KEY_USR_READ,
 					flags, NULL, NULL);
 		if (IS_ERR(keyring))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return PTR_ERR(keyring);
+}
 	} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__key_get(keyring);
 	}
 
@@ -257,8 +280,11 @@ int install_session_keyring_to_cred(struct cred *cred, struct key *keyring)
 	rcu_assign_pointer(cred->session_keyring, keyring);
 
 	if (old)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key_put(old);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -276,7 +302,9 @@ static int install_session_keyring(struct key *keyring)
 
 	new = prepare_creds();
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	ret = install_session_keyring_to_cred(new, keyring);
 	if (ret < 0) {
@@ -295,6 +323,7 @@ void key_fsuid_changed(struct task_struct *tsk)
 	/* update the ownership of the thread keyring */
 	BUG_ON(!tsk->cred);
 	if (tsk->cred->thread_keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		down_write(&tsk->cred->thread_keyring->sem);
 		tsk->cred->thread_keyring->uid = tsk->cred->fsuid;
 		up_write(&tsk->cred->thread_keyring->sem);
@@ -309,6 +338,7 @@ void key_fsgid_changed(struct task_struct *tsk)
 	/* update the ownership of the thread keyring */
 	BUG_ON(!tsk->cred);
 	if (tsk->cred->thread_keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		down_write(&tsk->cred->thread_keyring->sem);
 		tsk->cred->thread_keyring->gid = tsk->cred->fsgid;
 		up_write(&tsk->cred->thread_keyring->sem);
@@ -358,6 +388,7 @@ key_ref_t search_my_process_keyrings(struct keyring_search_context *ctx)
 		if (!IS_ERR(key_ref))
 			goto found;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (PTR_ERR(key_ref)) {
 		case -EAGAIN: /* no key */
 		case -ENOKEY: /* negative key */
@@ -376,6 +407,7 @@ key_ref_t search_my_process_keyrings(struct keyring_search_context *ctx)
 		if (!IS_ERR(key_ref))
 			goto found;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (PTR_ERR(key_ref)) {
 		case -EAGAIN: /* no key */
 			if (ret)
@@ -391,6 +423,7 @@ key_ref_t search_my_process_keyrings(struct keyring_search_context *ctx)
 
 	/* search the session keyring */
 	if (ctx->cred->session_keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock();
 		key_ref = keyring_search_aux(
 			make_key_ref(rcu_dereference(ctx->cred->session_keyring), 1),
@@ -400,6 +433,7 @@ key_ref_t search_my_process_keyrings(struct keyring_search_context *ctx)
 		if (!IS_ERR(key_ref))
 			goto found;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (PTR_ERR(key_ref)) {
 		case -EAGAIN: /* no key */
 			if (ret)
@@ -420,6 +454,7 @@ key_ref_t search_my_process_keyrings(struct keyring_search_context *ctx)
 		if (!IS_ERR(key_ref))
 			goto found;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		switch (PTR_ERR(key_ref)) {
 		case -EAGAIN: /* no key */
 			if (ret)
@@ -458,6 +493,7 @@ key_ref_t search_process_keyrings(struct keyring_search_context *ctx)
 	key_ref = search_my_process_keyrings(ctx);
 	if (!IS_ERR(key_ref))
 		goto found;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = key_ref;
 
 	/* if this process has an instantiation authorisation key, then we also
@@ -474,6 +510,7 @@ key_ref_t search_process_keyrings(struct keyring_search_context *ctx)
 		down_read(&cred->request_key_auth->sem);
 
 		if (key_validate(ctx->cred->request_key_auth) == 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rka = ctx->cred->request_key_auth->payload.data[0];
 
 			ctx->cred = rka->cred;
@@ -485,17 +522,24 @@ key_ref_t search_process_keyrings(struct keyring_search_context *ctx)
 			if (!IS_ERR(key_ref))
 				goto found;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = key_ref;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			up_read(&cred->request_key_auth->sem);
 		}
 	}
 
 	/* no key - decide on the error we're going to go for */
 	if (err == ERR_PTR(-ENOKEY) || ret == ERR_PTR(-ENOKEY))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key_ref = ERR_PTR(-ENOKEY);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	else if (err == ERR_PTR(-EACCES))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key_ref = ret;
+}
 	else
 		key_ref = err;
 
@@ -550,17 +594,21 @@ key_ref_t lookup_user_key(key_serial_t id, unsigned long lflags,
 	switch (id) {
 	case KEY_SPEC_THREAD_KEYRING:
 		if (!ctx.cred->thread_keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!(lflags & KEY_LOOKUP_CREATE))
 				goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = install_thread_keyring();
 			if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				key_ref = ERR_PTR(ret);
 				goto error;
 			}
 			goto reget_creds;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key = ctx.cred->thread_keyring;
 		__key_get(key);
 		key_ref = make_key_ref(key, 1);
@@ -568,17 +616,21 @@ key_ref_t lookup_user_key(key_serial_t id, unsigned long lflags,
 
 	case KEY_SPEC_PROCESS_KEYRING:
 		if (!ctx.cred->process_keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (!(lflags & KEY_LOOKUP_CREATE))
 				goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = install_process_keyring();
 			if (ret < 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				key_ref = ERR_PTR(ret);
 				goto error;
 			}
 			goto reget_creds;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key = ctx.cred->process_keyring;
 		__key_get(key);
 		key_ref = make_key_ref(key, 1);
@@ -591,25 +643,32 @@ key_ref_t lookup_user_key(key_serial_t id, unsigned long lflags,
 			ret = install_user_keyrings();
 			if (ret < 0)
 				goto error;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (lflags & KEY_LOOKUP_CREATE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				ret = join_session_keyring(NULL);
+}
 			else
 				ret = install_session_keyring(
 					ctx.cred->user->session_keyring);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			if (ret < 0)
 				goto error;
 			goto reget_creds;
 		} else if (ctx.cred->session_keyring ==
 			   ctx.cred->user->session_keyring &&
 			   lflags & KEY_LOOKUP_CREATE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = join_session_keyring(NULL);
 			if (ret < 0)
 				goto error;
 			goto reget_creds;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rcu_read_lock();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key = rcu_dereference(ctx.cred->session_keyring);
 		__key_get(key);
 		rcu_read_unlock();
@@ -618,11 +677,13 @@ key_ref_t lookup_user_key(key_serial_t id, unsigned long lflags,
 
 	case KEY_SPEC_USER_KEYRING:
 		if (!ctx.cred->user->uid_keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = install_user_keyrings();
 			if (ret < 0)
 				goto error;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key = ctx.cred->user->uid_keyring;
 		__key_get(key);
 		key_ref = make_key_ref(key, 1);
@@ -630,11 +691,13 @@ key_ref_t lookup_user_key(key_serial_t id, unsigned long lflags,
 
 	case KEY_SPEC_USER_SESSION_KEYRING:
 		if (!ctx.cred->user->session_keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = install_user_keyrings();
 			if (ret < 0)
 				goto error;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key = ctx.cred->user->session_keyring;
 		__key_get(key);
 		key_ref = make_key_ref(key, 1);
@@ -650,6 +713,7 @@ key_ref_t lookup_user_key(key_serial_t id, unsigned long lflags,
 		if (!key)
 			goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__key_get(key);
 		key_ref = make_key_ref(key, 1);
 		break;
@@ -658,19 +722,25 @@ key_ref_t lookup_user_key(key_serial_t id, unsigned long lflags,
 		if (!ctx.cred->request_key_auth)
 			goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		down_read(&ctx.cred->request_key_auth->sem);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (test_bit(KEY_FLAG_REVOKED,
 			     &ctx.cred->request_key_auth->flags)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			key_ref = ERR_PTR(-EKEYREVOKED);
 			key = NULL;
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rka = ctx.cred->request_key_auth->payload.data[0];
 			key = rka->dest_keyring;
 			__key_get(key);
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		up_read(&ctx.cred->request_key_auth->sem);
 		if (!key)
 			goto error;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key_ref = make_key_ref(key, 1);
 		break;
 
@@ -681,10 +751,12 @@ key_ref_t lookup_user_key(key_serial_t id, unsigned long lflags,
 
 		key = key_lookup(id);
 		if (IS_ERR(key)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			key_ref = ERR_CAST(key);
 			goto error;
 		}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		key_ref = make_key_ref(key, 0);
 
 		/* check to see if we possess the key */
@@ -692,8 +764,10 @@ key_ref_t lookup_user_key(key_serial_t id, unsigned long lflags,
 		ctx.index_key.description	= key->description;
 		ctx.index_key.desc_len		= strlen(key->description);
 		ctx.match_data.raw_data		= key;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kdebug("check possessed");
 		skey_ref = search_process_keyrings(&ctx);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kdebug("possessed=%p", skey_ref);
 
 		if (!IS_ERR(skey_ref)) {
@@ -707,11 +781,13 @@ key_ref_t lookup_user_key(key_serial_t id, unsigned long lflags,
 	/* unlink does not use the nominated key in any way, so can skip all
 	 * the permission checks as it is only concerned with the keyring */
 	if (lflags & KEY_LOOKUP_FOR_UNLINK) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 0;
 		goto error;
 	}
 
 	if (!(lflags & KEY_LOOKUP_PARTIAL)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = wait_for_key_construction(key, true);
 		switch (ret) {
 		case -ERESTARTSYS:
@@ -728,6 +804,7 @@ key_ref_t lookup_user_key(key_serial_t id, unsigned long lflags,
 			goto invalid_key;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -EIO;
 	if (!(lflags & KEY_LOOKUP_PARTIAL) &&
 	    key_read_state(key) == KEY_IS_UNINSTANTIATED)
@@ -776,19 +853,25 @@ long join_session_keyring(const char *name)
 
 	new = prepare_creds();
 	if (!new)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	old = current_cred();
 
 	/* if no name is provided, install an anonymous keyring */
 	if (!name) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = install_session_keyring_to_cred(new, NULL);
 		if (ret < 0)
 			goto error;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		serial = new->session_keyring->serial;
 		ret = commit_creds(new);
 		if (ret == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = serial;
+}
 		goto okay;
 	}
 
@@ -804,13 +887,16 @@ long join_session_keyring(const char *name)
 			KEY_POS_ALL | KEY_USR_VIEW | KEY_USR_READ | KEY_USR_LINK,
 			KEY_ALLOC_IN_QUOTA, NULL, NULL);
 		if (IS_ERR(keyring)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			ret = PTR_ERR(keyring);
 			goto error2;
 		}
 	} else if (IS_ERR(keyring)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = PTR_ERR(keyring);
 		goto error2;
 	} else if (keyring == new->session_keyring) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ret = 0;
 		goto error3;
 	}
@@ -843,6 +929,7 @@ long join_session_keyring(const char *name)
  */
 void key_change_session_keyring(struct callback_head *twork)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct cred *old = current_cred();
 	struct cred *new = container_of(twork, struct cred, rcu);
 
diff --git a/security/min_addr.c b/security/min_addr.c
index 94d2b0c..b1271e0 100644
--- a/security/min_addr.c
+++ b/security/min_addr.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/init.h>
 #include <linux/mm.h>
@@ -17,7 +19,9 @@ static void update_mmap_min_addr(void)
 {
 #ifdef CONFIG_LSM_MMAP_MIN_ADDR
 	if (dac_mmap_min_addr > CONFIG_LSM_MMAP_MIN_ADDR)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		mmap_min_addr = dac_mmap_min_addr;
+}
 	else
 		mmap_min_addr = CONFIG_LSM_MMAP_MIN_ADDR;
 #else
@@ -35,7 +39,9 @@ int mmap_min_addr_handler(struct ctl_table *table, int write,
 	int ret;
 
 	if (write && !capable(CAP_SYS_RAWIO))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EPERM;
+}
 
 	ret = proc_doulongvec_minmax(table, write, buffer, lenp, ppos);
 
diff --git a/security/security.c b/security/security.c
index 4bf0f57..bb919e8 100644
--- a/security/security.c
+++ b/security/security.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Security plug functions
  *
@@ -85,6 +87,7 @@ int __init security_init(void)
 /* Save user chosen LSM */
 static int __init choose_lsm(char *str)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	strncpy(chosen_lsm, str, SECURITY_NAME_MAX);
 	return 1;
 }
@@ -95,7 +98,9 @@ static bool match_last_lsm(const char *list, const char *lsm)
 	const char *last;
 
 	if (WARN_ON(!list || !lsm))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return false;
+}
 	last = strrchr(list, ',');
 	if (last)
 		/* Pass the comma, strcmp() will check for '\0' */
@@ -114,13 +119,18 @@ static int lsm_append(char *new, char **result)
 	} else {
 		/* Check if it is the last registered name */
 		if (match_last_lsm(*result, new))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return 0;
+}
 		cp = kasprintf(GFP_KERNEL, "%s,%s", *result, new);
 		if (cp == NULL)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return -ENOMEM;
+}
 		kfree(*result);
 		*result = cp;
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -144,6 +154,7 @@ static int lsm_append(char *new, char **result)
  */
 int __init security_module_enable(const char *module)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return !strcmp(module, chosen_lsm);
 }
 
@@ -165,23 +176,28 @@ void __init security_add_hooks(struct security_hook_list *hooks, int count,
 		list_add_tail_rcu(&hooks[i].list, hooks[i].head);
 	}
 	if (lsm_append(lsm, &lsm_names) < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		panic("%s - Cannot get early memory.\n", __func__);
 }
+}
 
 int call_lsm_notifier(enum lsm_event event, void *data)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_call_chain(&lsm_notifier_chain, event, data);
 }
 EXPORT_SYMBOL(call_lsm_notifier);
 
 int register_lsm_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_chain_register(&lsm_notifier_chain, nb);
 }
 EXPORT_SYMBOL(register_lsm_notifier);
 
 int unregister_lsm_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return atomic_notifier_chain_unregister(&lsm_notifier_chain, nb);
 }
 EXPORT_SYMBOL(unregister_lsm_notifier);
@@ -222,24 +238,28 @@ EXPORT_SYMBOL(unregister_lsm_notifier);
 
 int security_binder_set_context_mgr(struct task_struct *mgr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(binder_set_context_mgr, 0, mgr);
 }
 
 int security_binder_transaction(struct task_struct *from,
 				struct task_struct *to)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(binder_transaction, 0, from, to);
 }
 
 int security_binder_transfer_binder(struct task_struct *from,
 				    struct task_struct *to)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(binder_transfer_binder, 0, from, to);
 }
 
 int security_binder_transfer_file(struct task_struct *from,
 				  struct task_struct *to, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(binder_transfer_file, 0, from, to, file);
 }
 
@@ -285,11 +305,13 @@ int security_capable_noaudit(const struct cred *cred, struct user_namespace *ns,
 
 int security_quotactl(int cmds, int type, int id, struct super_block *sb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(quotactl, 0, cmds, type, id, sb);
 }
 
 int security_quota_on(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(quota_on, 0, dentry);
 }
 
@@ -319,6 +341,7 @@ int security_vm_enough_memory_mm(struct mm_struct *mm, long pages)
 	list_for_each_entry(hp, &security_hook_heads.vm_enough_memory, list) {
 		rc = hp->hook.vm_enough_memory(mm, pages);
 		if (rc <= 0) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			cap_sys_admin = 0;
 			break;
 		}
@@ -337,7 +360,9 @@ int security_bprm_check(struct linux_binprm *bprm)
 
 	ret = call_int_hook(bprm_check_security, 0, bprm);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return ima_bprm_check(bprm);
 }
 
@@ -408,6 +433,7 @@ int security_sb_set_mnt_opts(struct super_block *sb,
 				unsigned long kern_flags,
 				unsigned long *set_kern_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(sb_set_mnt_opts,
 				opts->num_mnt_opts ? -EOPNOTSUPP : 0, sb,
 				opts, kern_flags, set_kern_flags);
@@ -419,6 +445,7 @@ int security_sb_clone_mnt_opts(const struct super_block *oldsb,
 				unsigned long kern_flags,
 				unsigned long *set_kern_flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(sb_clone_mnt_opts, 0, oldsb, newsb,
 				kern_flags, set_kern_flags);
 }
@@ -426,6 +453,7 @@ EXPORT_SYMBOL(security_sb_clone_mnt_opts);
 
 int security_sb_parse_opts_str(char *options, struct security_mnt_opts *opts)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(sb_parse_opts_str, 0, options, opts);
 }
 EXPORT_SYMBOL(security_sb_parse_opts_str);
@@ -446,6 +474,7 @@ int security_dentry_init_security(struct dentry *dentry, int mode,
 					const struct qstr *name, void **ctx,
 					u32 *ctxlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(dentry_init_security, -EOPNOTSUPP, dentry, mode,
 				name, ctx, ctxlen);
 }
@@ -469,11 +498,15 @@ int security_inode_init_security(struct inode *inode, struct inode *dir,
 	int ret;
 
 	if (unlikely(IS_PRIVATE(inode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	if (!initxattrs)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return call_int_hook(inode_init_security, -EOPNOTSUPP, inode,
 				     dir, qstr, NULL, NULL, NULL);
+}
 	memset(new_xattrs, 0, sizeof(new_xattrs));
 	lsm_xattr = new_xattrs;
 	ret = call_int_hook(inode_init_security, -EOPNOTSUPP, inode, dir, qstr,
@@ -483,14 +516,18 @@ int security_inode_init_security(struct inode *inode, struct inode *dir,
 	if (ret)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	evm_xattr = lsm_xattr + 1;
 	ret = evm_inode_init_security(inode, lsm_xattr, evm_xattr);
 	if (ret)
 		goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = initxattrs(inode, new_xattrs, fs_data);
 out:
 	for (xattr = new_xattrs; xattr->value != NULL; xattr++)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(xattr->value);
+}
 	return (ret == -EOPNOTSUPP) ? 0 : ret;
 }
 EXPORT_SYMBOL(security_inode_init_security);
@@ -499,6 +536,7 @@ int security_old_inode_init_security(struct inode *inode, struct inode *dir,
 				     const struct qstr *qstr, const char **name,
 				     void **value, size_t *len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(IS_PRIVATE(inode)))
 		return -EOPNOTSUPP;
 	return call_int_hook(inode_init_security, -EOPNOTSUPP, inode, dir,
@@ -605,7 +643,9 @@ int security_path_chroot(const struct path *path)
 int security_inode_create(struct inode *dir, struct dentry *dentry, umode_t mode)
 {
 	if (unlikely(IS_PRIVATE(dir)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_create, 0, dir, dentry, mode);
 }
 EXPORT_SYMBOL_GPL(security_inode_create);
@@ -614,14 +654,18 @@ int security_inode_link(struct dentry *old_dentry, struct inode *dir,
 			 struct dentry *new_dentry)
 {
 	if (unlikely(IS_PRIVATE(d_backing_inode(old_dentry))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_link, 0, old_dentry, dir, new_dentry);
 }
 
 int security_inode_unlink(struct inode *dir, struct dentry *dentry)
 {
 	if (unlikely(IS_PRIVATE(d_backing_inode(dentry))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_unlink, 0, dir, dentry);
 }
 
@@ -629,14 +673,18 @@ int security_inode_symlink(struct inode *dir, struct dentry *dentry,
 			    const char *old_name)
 {
 	if (unlikely(IS_PRIVATE(dir)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_symlink, 0, dir, dentry, old_name);
 }
 
 int security_inode_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
 {
 	if (unlikely(IS_PRIVATE(dir)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_mkdir, 0, dir, dentry, mode);
 }
 EXPORT_SYMBOL_GPL(security_inode_mkdir);
@@ -644,14 +692,18 @@ EXPORT_SYMBOL_GPL(security_inode_mkdir);
 int security_inode_rmdir(struct inode *dir, struct dentry *dentry)
 {
 	if (unlikely(IS_PRIVATE(d_backing_inode(dentry))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_rmdir, 0, dir, dentry);
 }
 
 int security_inode_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev)
 {
 	if (unlikely(IS_PRIVATE(dir)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_mknod, 0, dir, dentry, mode, dev);
 }
 
@@ -664,10 +716,13 @@ int security_inode_rename(struct inode *old_dir, struct dentry *old_dentry,
 		return 0;
 
 	if (flags & RENAME_EXCHANGE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		int err = call_int_hook(inode_rename, 0, new_dir, new_dentry,
 						     old_dir, old_dentry);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	}
 
 	return call_int_hook(inode_rename, 0, old_dir, old_dentry,
@@ -677,7 +732,9 @@ int security_inode_rename(struct inode *old_dir, struct dentry *old_dentry,
 int security_inode_readlink(struct dentry *dentry)
 {
 	if (unlikely(IS_PRIVATE(d_backing_inode(dentry))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_readlink, 0, dentry);
 }
 
@@ -685,14 +742,18 @@ int security_inode_follow_link(struct dentry *dentry, struct inode *inode,
 			       bool rcu)
 {
 	if (unlikely(IS_PRIVATE(inode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_follow_link, 0, dentry, inode, rcu);
 }
 
 int security_inode_permission(struct inode *inode, int mask)
 {
 	if (unlikely(IS_PRIVATE(inode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_permission, 0, inode, mask);
 }
 
@@ -701,10 +762,14 @@ int security_inode_setattr(struct dentry *dentry, struct iattr *attr)
 	int ret;
 
 	if (unlikely(IS_PRIVATE(d_backing_inode(dentry))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	ret = call_int_hook(inode_setattr, 0, dentry, attr);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return evm_inode_setattr(dentry, attr);
 }
 EXPORT_SYMBOL_GPL(security_inode_setattr);
@@ -712,7 +777,9 @@ EXPORT_SYMBOL_GPL(security_inode_setattr);
 int security_inode_getattr(const struct path *path)
 {
 	if (unlikely(IS_PRIVATE(d_backing_inode(path->dentry))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_getattr, 0, path);
 }
 
@@ -722,7 +789,9 @@ int security_inode_setxattr(struct dentry *dentry, const char *name,
 	int ret;
 
 	if (unlikely(IS_PRIVATE(d_backing_inode(dentry))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	/*
 	 * SELinux and Smack integrate the cap call,
 	 * so assume that all LSMs supplying this call do so.
@@ -733,10 +802,15 @@ int security_inode_setxattr(struct dentry *dentry, const char *name,
 	if (ret == 1)
 		ret = cap_inode_setxattr(dentry, name, value, size, flags);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = ima_inode_setxattr(dentry, name, value, size);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return evm_inode_setxattr(dentry, name, value, size);
 }
 
@@ -744,22 +818,29 @@ void security_inode_post_setxattr(struct dentry *dentry, const char *name,
 				  const void *value, size_t size, int flags)
 {
 	if (unlikely(IS_PRIVATE(d_backing_inode(dentry))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	call_void_hook(inode_post_setxattr, dentry, name, value, size, flags);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	evm_inode_post_setxattr(dentry, name, value, size);
 }
 
 int security_inode_getxattr(struct dentry *dentry, const char *name)
 {
 	if (unlikely(IS_PRIVATE(d_backing_inode(dentry))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_getxattr, 0, dentry, name);
 }
 
 int security_inode_listxattr(struct dentry *dentry)
 {
 	if (unlikely(IS_PRIVATE(d_backing_inode(dentry))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	return call_int_hook(inode_listxattr, 0, dentry);
 }
 
@@ -768,7 +849,9 @@ int security_inode_removexattr(struct dentry *dentry, const char *name)
 	int ret;
 
 	if (unlikely(IS_PRIVATE(d_backing_inode(dentry))))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 	/*
 	 * SELinux and Smack integrate the cap call,
 	 * so assume that all LSMs supplying this call do so.
@@ -777,10 +860,15 @@ int security_inode_removexattr(struct dentry *dentry, const char *name)
 	if (ret == 1)
 		ret = cap_inode_removexattr(dentry, name);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = ima_inode_removexattr(dentry, name);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return evm_inode_removexattr(dentry, name);
 }
 
@@ -791,6 +879,7 @@ int security_inode_need_killpriv(struct dentry *dentry)
 
 int security_inode_killpriv(struct dentry *dentry)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(inode_killpriv, 0, dentry);
 }
 
@@ -800,15 +889,20 @@ int security_inode_getsecurity(struct inode *inode, const char *name, void **buf
 	int rc;
 
 	if (unlikely(IS_PRIVATE(inode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 	/*
 	 * Only one module will provide an attribute with a given name.
 	 */
 	list_for_each_entry(hp, &security_hook_heads.inode_getsecurity, list) {
 		rc = hp->hook.inode_getsecurity(inode, name, buffer, alloc);
 		if (rc != -EOPNOTSUPP)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return rc;
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EOPNOTSUPP;
 }
 
@@ -818,7 +912,9 @@ int security_inode_setsecurity(struct inode *inode, const char *name, const void
 	int rc;
 
 	if (unlikely(IS_PRIVATE(inode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EOPNOTSUPP;
+}
 	/*
 	 * Only one module will provide an attribute with a given name.
 	 */
@@ -833,6 +929,7 @@ int security_inode_setsecurity(struct inode *inode, const char *name, const void
 
 int security_inode_listsecurity(struct inode *inode, char *buffer, size_t buffer_size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(IS_PRIVATE(inode)))
 		return 0;
 	return call_int_hook(inode_listsecurity, 0, inode, buffer, buffer_size);
@@ -841,6 +938,7 @@ EXPORT_SYMBOL(security_inode_listsecurity);
 
 void security_inode_getsecid(struct inode *inode, u32 *secid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_void_hook(inode_getsecid, inode, secid);
 }
 
@@ -852,6 +950,7 @@ EXPORT_SYMBOL(security_inode_copy_up);
 
 int security_inode_copy_up_xattr(const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(inode_copy_up_xattr, -EOPNOTSUPP, name);
 }
 EXPORT_SYMBOL(security_inode_copy_up_xattr);
@@ -862,7 +961,9 @@ int security_file_permission(struct file *file, int mask)
 
 	ret = call_int_hook(file_permission, 0, file, mask);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	return fsnotify_perm(file, mask);
 }
@@ -889,9 +990,13 @@ static inline unsigned long mmap_prot(struct file *file, unsigned long prot)
 	 * it to imply PROT_EXEC?  If not, nothing to talk about...
 	 */
 	if ((prot & (PROT_READ | PROT_EXEC)) != PROT_READ)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return prot;
+}
 	if (!(current->personality & READ_IMPLIES_EXEC))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return prot;
+}
 	/*
 	 * if that's an anonymous mapping, let it.
 	 */
@@ -922,7 +1027,9 @@ int security_mmap_file(struct file *file, unsigned long prot,
 	ret = call_int_hook(mmap_file, 0, file, prot,
 					mmap_prot(file, prot), flags);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 	return ima_file_mmap(file, prot);
 }
 
@@ -949,12 +1056,14 @@ int security_file_fcntl(struct file *file, unsigned int cmd, unsigned long arg)
 
 void security_file_set_fowner(struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_void_hook(file_set_fowner, file);
 }
 
 int security_file_send_sigiotask(struct task_struct *tsk,
 				  struct fown_struct *fown, int sig)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(file_send_sigiotask, 0, tsk, fown, sig);
 }
 
@@ -969,7 +1078,9 @@ int security_file_open(struct file *file, const struct cred *cred)
 
 	ret = call_int_hook(file_open, 0, file, cred);
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	return fsnotify_perm(file, MAY_OPEN);
 }
@@ -986,6 +1097,7 @@ void security_task_free(struct task_struct *task)
 
 int security_cred_alloc_blank(struct cred *cred, gfp_t gfp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(cred_alloc_blank, 0, cred, gfp);
 }
 
@@ -1001,16 +1113,19 @@ int security_prepare_creds(struct cred *new, const struct cred *old, gfp_t gfp)
 
 void security_transfer_creds(struct cred *new, const struct cred *old)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_void_hook(cred_transfer, new, old);
 }
 
 int security_kernel_act_as(struct cred *new, u32 secid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(kernel_act_as, 0, new, secid);
 }
 
 int security_kernel_create_files_as(struct cred *new, struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(kernel_create_files_as, 0, new, inode);
 }
 
@@ -1023,6 +1138,7 @@ int security_kernel_read_file(struct file *file, enum kernel_read_file_id id)
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = call_int_hook(kernel_read_file, 0, file, id);
 	if (ret)
 		return ret;
@@ -1035,6 +1151,7 @@ int security_kernel_post_read_file(struct file *file, char *buf, loff_t size,
 {
 	int ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = call_int_hook(kernel_post_read_file, 0, file, buf, size, id);
 	if (ret)
 		return ret;
@@ -1055,11 +1172,13 @@ int security_task_setpgid(struct task_struct *p, pid_t pgid)
 
 int security_task_getpgid(struct task_struct *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(task_getpgid, 0, p);
 }
 
 int security_task_getsid(struct task_struct *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(task_getsid, 0, p);
 }
 
@@ -1077,17 +1196,20 @@ int security_task_setnice(struct task_struct *p, int nice)
 
 int security_task_setioprio(struct task_struct *p, int ioprio)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(task_setioprio, 0, p, ioprio);
 }
 
 int security_task_getioprio(struct task_struct *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(task_getioprio, 0, p);
 }
 
 int security_task_prlimit(const struct cred *cred, const struct cred *tcred,
 			  unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(task_prlimit, 0, cred, tcred, flags);
 }
 
@@ -1109,6 +1231,7 @@ int security_task_getscheduler(struct task_struct *p)
 
 int security_task_movememory(struct task_struct *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(task_movememory, 0, p);
 }
 
@@ -1128,6 +1251,7 @@ int security_task_prctl(int option, unsigned long arg2, unsigned long arg3,
 	list_for_each_entry(hp, &security_hook_heads.task_prctl, list) {
 		thisrc = hp->hook.task_prctl(option, arg2, arg3, arg4, arg5);
 		if (thisrc != -ENOSYS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			rc = thisrc;
 			if (thisrc != 0)
 				break;
@@ -1148,74 +1272,88 @@ int security_ipc_permission(struct kern_ipc_perm *ipcp, short flag)
 
 void security_ipc_getsecid(struct kern_ipc_perm *ipcp, u32 *secid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*secid = 0;
 	call_void_hook(ipc_getsecid, ipcp, secid);
 }
 
 int security_msg_msg_alloc(struct msg_msg *msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(msg_msg_alloc_security, 0, msg);
 }
 
 void security_msg_msg_free(struct msg_msg *msg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_void_hook(msg_msg_free_security, msg);
 }
 
 int security_msg_queue_alloc(struct msg_queue *msq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(msg_queue_alloc_security, 0, msq);
 }
 
 void security_msg_queue_free(struct msg_queue *msq)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_void_hook(msg_queue_free_security, msq);
 }
 
 int security_msg_queue_associate(struct msg_queue *msq, int msqflg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(msg_queue_associate, 0, msq, msqflg);
 }
 
 int security_msg_queue_msgctl(struct msg_queue *msq, int cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(msg_queue_msgctl, 0, msq, cmd);
 }
 
 int security_msg_queue_msgsnd(struct msg_queue *msq,
 			       struct msg_msg *msg, int msqflg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(msg_queue_msgsnd, 0, msq, msg, msqflg);
 }
 
 int security_msg_queue_msgrcv(struct msg_queue *msq, struct msg_msg *msg,
 			       struct task_struct *target, long type, int mode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(msg_queue_msgrcv, 0, msq, msg, target, type, mode);
 }
 
 int security_shm_alloc(struct shmid_kernel *shp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(shm_alloc_security, 0, shp);
 }
 
 void security_shm_free(struct shmid_kernel *shp)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_void_hook(shm_free_security, shp);
 }
 
 int security_shm_associate(struct shmid_kernel *shp, int shmflg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(shm_associate, 0, shp, shmflg);
 }
 
 int security_shm_shmctl(struct shmid_kernel *shp, int cmd)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(shm_shmctl, 0, shp, cmd);
 }
 
 int security_shm_shmat(struct shmid_kernel *shp, char __user *shmaddr, int shmflg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(shm_shmat, 0, shp, shmaddr, shmflg);
 }
 
@@ -1248,18 +1386,22 @@ int security_sem_semop(struct sem_array *sma, struct sembuf *sops,
 void security_d_instantiate(struct dentry *dentry, struct inode *inode)
 {
 	if (unlikely(inode && IS_PRIVATE(inode)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 	call_void_hook(d_instantiate, dentry, inode);
 }
 EXPORT_SYMBOL(security_d_instantiate);
 
 int security_getprocattr(struct task_struct *p, char *name, char **value)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(getprocattr, -EINVAL, p, name, value);
 }
 
 int security_setprocattr(const char *name, void *value, size_t size)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(setprocattr, -EINVAL, name, value, size);
 }
 
@@ -1270,12 +1412,14 @@ int security_netlink_send(struct sock *sk, struct sk_buff *skb)
 
 int security_ismaclabel(const char *name)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(ismaclabel, 0, name);
 }
 EXPORT_SYMBOL(security_ismaclabel);
 
 int security_secid_to_secctx(u32 secid, char **secdata, u32 *seclen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(secid_to_secctx, -EOPNOTSUPP, secid, secdata,
 				seclen);
 }
@@ -1283,6 +1427,7 @@ EXPORT_SYMBOL(security_secid_to_secctx);
 
 int security_secctx_to_secid(const char *secdata, u32 seclen, u32 *secid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*secid = 0;
 	return call_int_hook(secctx_to_secid, 0, secdata, seclen, secid);
 }
@@ -1290,12 +1435,14 @@ EXPORT_SYMBOL(security_secctx_to_secid);
 
 void security_release_secctx(char *secdata, u32 seclen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_void_hook(release_secctx, secdata, seclen);
 }
 EXPORT_SYMBOL(security_release_secctx);
 
 void security_inode_invalidate_secctx(struct inode *inode)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_void_hook(inode_invalidate_secctx, inode);
 }
 EXPORT_SYMBOL(security_inode_invalidate_secctx);
@@ -1308,12 +1455,14 @@ EXPORT_SYMBOL(security_inode_notifysecctx);
 
 int security_inode_setsecctx(struct dentry *dentry, void *ctx, u32 ctxlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(inode_setsecctx, 0, dentry, ctx, ctxlen);
 }
 EXPORT_SYMBOL(security_inode_setsecctx);
 
 int security_inode_getsecctx(struct inode *inode, void **ctx, u32 *ctxlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(inode_getsecctx, -EOPNOTSUPP, inode, ctx, ctxlen);
 }
 EXPORT_SYMBOL(security_inode_getsecctx);
@@ -1409,6 +1558,7 @@ EXPORT_SYMBOL(security_sock_rcv_skb);
 int security_socket_getpeersec_stream(struct socket *sock, char __user *optval,
 				      int __user *optlen, unsigned len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(socket_getpeersec_stream, -ENOPROTOOPT, sock,
 				optval, optlen, len);
 }
@@ -1475,54 +1625,63 @@ void security_inet_conn_established(struct sock *sk,
 
 int security_secmark_relabel_packet(u32 secid)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(secmark_relabel_packet, 0, secid);
 }
 EXPORT_SYMBOL(security_secmark_relabel_packet);
 
 void security_secmark_refcount_inc(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_void_hook(secmark_refcount_inc);
 }
 EXPORT_SYMBOL(security_secmark_refcount_inc);
 
 void security_secmark_refcount_dec(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_void_hook(secmark_refcount_dec);
 }
 EXPORT_SYMBOL(security_secmark_refcount_dec);
 
 int security_tun_dev_alloc_security(void **security)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(tun_dev_alloc_security, 0, security);
 }
 EXPORT_SYMBOL(security_tun_dev_alloc_security);
 
 void security_tun_dev_free_security(void *security)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_void_hook(tun_dev_free_security, security);
 }
 EXPORT_SYMBOL(security_tun_dev_free_security);
 
 int security_tun_dev_create(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(tun_dev_create, 0);
 }
 EXPORT_SYMBOL(security_tun_dev_create);
 
 int security_tun_dev_attach_queue(void *security)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(tun_dev_attach_queue, 0, security);
 }
 EXPORT_SYMBOL(security_tun_dev_attach_queue);
 
 int security_tun_dev_attach(struct sock *sk, void *security)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(tun_dev_attach, 0, sk, security);
 }
 EXPORT_SYMBOL(security_tun_dev_attach);
 
 int security_tun_dev_open(void *security)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(tun_dev_open, 0, security);
 }
 EXPORT_SYMBOL(security_tun_dev_open);
@@ -1673,6 +1832,7 @@ int security_key_permission(key_ref_t key_ref,
 
 int security_key_getsecurity(struct key *key, char **_buffer)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*_buffer = NULL;
 	return call_int_hook(key_getsecurity, 0, key, _buffer);
 }
@@ -1683,22 +1843,26 @@ int security_key_getsecurity(struct key *key, char **_buffer)
 
 int security_audit_rule_init(u32 field, u32 op, char *rulestr, void **lsmrule)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(audit_rule_init, 0, field, op, rulestr, lsmrule);
 }
 
 int security_audit_rule_known(struct audit_krule *krule)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(audit_rule_known, 0, krule);
 }
 
 void security_audit_rule_free(void *lsmrule)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	call_void_hook(audit_rule_free, lsmrule);
 }
 
 int security_audit_rule_match(u32 secid, u32 field, u32 op, void *lsmrule,
 			      struct audit_context *actx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return call_int_hook(audit_rule_match, 0, secid, field, op, lsmrule,
 				actx);
 }
diff --git a/security/yama/yama_lsm.c b/security/yama/yama_lsm.c
index 8298e09..fc2b128 100644
--- a/security/yama/yama_lsm.c
+++ b/security/yama/yama_lsm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Yama Linux Security Module
  *
-- 
2.7.4

