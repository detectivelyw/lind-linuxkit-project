From b04d49770657ea37bd0279cbd3ef197f54a40f89 Mon Sep 17 00:00:00 2001
From: Yiwen Li <detectivelyw@gmail.com>
Date: Tue, 4 Jun 2019 17:37:52 -0400
Subject: [PATCH 4/5] instrumented crypto.

---
 crypto/842.c                             |   2 +
 crypto/aead.c                            |  31 +++++++++
 crypto/aes_generic.c                     |   8 +++
 crypto/af_alg.c                          |   2 +
 crypto/ahash.c                           |  61 ++++++++++++++++
 crypto/akcipher.c                        |  11 +++
 crypto/algapi.c                          | 115 +++++++++++++++++++++++++++++++
 crypto/algboss.c                         |  18 +++++
 crypto/algif_aead.c                      |   2 +
 crypto/algif_hash.c                      |   2 +
 crypto/algif_rng.c                       |   2 +
 crypto/algif_skcipher.c                  |   2 +
 crypto/ansi_cprng.c                      |   2 +
 crypto/anubis.c                          |   2 +
 crypto/api.c                             |  52 ++++++++++++++
 crypto/arc4.c                            |   8 +++
 crypto/asymmetric_keys/asymmetric_type.c |   2 +
 crypto/asymmetric_keys/x509_public_key.c |   2 +
 crypto/authenc.c                         |  18 +++++
 crypto/authencesn.c                      |  21 ++++++
 crypto/blkcipher.c                       |  28 ++++++++
 crypto/blowfish_generic.c                |   2 +
 crypto/camellia_generic.c                |   2 +
 crypto/cast5_generic.c                   |   2 +
 crypto/cast6_generic.c                   |   2 +
 crypto/cbc.c                             |  19 +++++
 crypto/ccm.c                             |  44 ++++++++++++
 crypto/chacha20_generic.c                |   2 +
 crypto/chacha20poly1305.c                |   2 +
 crypto/cipher.c                          |   8 +++
 crypto/cmac.c                            |  13 ++++
 crypto/crc32_generic.c                   |   2 +
 crypto/crc32c_generic.c                  |  11 +++
 crypto/crct10dif_generic.c               |   2 +
 crypto/cryptd.c                          |   2 +
 crypto/crypto_null.c                     |  13 ++++
 crypto/crypto_user.c                     |   2 +
 crypto/crypto_wq.c                       |   5 ++
 crypto/ctr.c                             |  23 +++++++
 crypto/cts.c                             |   2 +
 crypto/deflate.c                         |   2 +
 crypto/des_generic.c                     |  10 +++
 crypto/dh.c                              |   2 +
 crypto/drbg.c                            |  31 +++++++++
 crypto/ecb.c                             |   2 +
 crypto/echainiv.c                        |   8 +++
 crypto/fcrypt.c                          |   2 +
 crypto/gcm.c                             |  29 ++++++++
 crypto/ghash-generic.c                   |   9 +++
 crypto/hmac.c                            |  16 +++++
 crypto/internal.h                        |   2 +
 crypto/jitterentropy-kcapi.c             |  16 +++++
 crypto/jitterentropy.c                   |  29 ++++++++
 crypto/keywrap.c                         |   2 +
 crypto/khazad.c                          |   2 +
 crypto/kpp.c                             |   8 +++
 crypto/lrw.c                             |   2 +
 crypto/lz4.c                             |   2 +
 crypto/lz4hc.c                           |   2 +
 crypto/lzo.c                             |   2 +
 crypto/md4.c                             |   2 +
 crypto/md5.c                             |  11 +++
 crypto/michael_mic.c                     |   2 +
 crypto/pcbc.c                            |   2 +
 crypto/poly1305_generic.c                |   2 +
 crypto/proc.c                            |   8 +++
 crypto/rmd128.c                          |   2 +
 crypto/rmd160.c                          |   2 +
 crypto/rmd256.c                          |   2 +
 crypto/rmd320.c                          |   2 +
 crypto/rng.c                             |  19 +++++
 crypto/rsa.c                             |   2 +
 crypto/salsa20_generic.c                 |   2 +
 crypto/scompress.c                       |  28 ++++++++
 crypto/seed.c                            |   2 +
 crypto/seqiv.c                           |  11 +++
 crypto/serpent_generic.c                 |   2 +
 crypto/sha1_generic.c                    |   7 ++
 crypto/sha256_generic.c                  |  11 +++
 crypto/sha512_generic.c                  |   2 +
 crypto/shash.c                           |  53 ++++++++++++++
 crypto/skcipher.c                        |  61 ++++++++++++++++
 crypto/tea.c                             |   2 +
 crypto/tgr192.c                          |   2 +
 crypto/twofish_generic.c                 |   2 +
 crypto/vmac.c                            |   2 +
 crypto/wp512.c                           |   2 +
 crypto/xcbc.c                            |   2 +
 crypto/xts.c                             |   2 +
 89 files changed, 976 insertions(+)

diff --git a/crypto/842.c b/crypto/842.c
index bc26dc9..3b430e5 100644
--- a/crypto/842.c
+++ b/crypto/842.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API for the 842 software compression algorithm.
  *
diff --git a/crypto/aead.c b/crypto/aead.c
index f794b30..c5ed1fc 100644
--- a/crypto/aead.c
+++ b/crypto/aead.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * AEAD: Authenticated Encryption with Associated Data
  *
@@ -32,6 +34,7 @@
 static int setkey_unaligned(struct crypto_aead *tfm, const u8 *key,
 			    unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long alignmask = crypto_aead_alignmask(tfm);
 	int ret;
 	u8 *buffer, *alignbuffer;
@@ -53,6 +56,7 @@ static int setkey_unaligned(struct crypto_aead *tfm, const u8 *key,
 int crypto_aead_setkey(struct crypto_aead *tfm,
 		       const u8 *key, unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long alignmask = crypto_aead_alignmask(tfm);
 
 	if ((unsigned long)key & alignmask)
@@ -67,12 +71,16 @@ int crypto_aead_setauthsize(struct crypto_aead *tfm, unsigned int authsize)
 	int err;
 
 	if (authsize > crypto_aead_maxauthsize(tfm))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (crypto_aead_alg(tfm)->setauthsize) {
 		err = crypto_aead_alg(tfm)->setauthsize(tfm, authsize);
 		if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return err;
+}
 	}
 
 	tfm->authsize = authsize;
@@ -82,6 +90,7 @@ EXPORT_SYMBOL_GPL(crypto_aead_setauthsize);
 
 static void crypto_aead_exit_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *aead = __crypto_aead_cast(tfm);
 	struct aead_alg *alg = crypto_aead_alg(aead);
 
@@ -90,6 +99,7 @@ static void crypto_aead_exit_tfm(struct crypto_tfm *tfm)
 
 static int crypto_aead_init_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *aead = __crypto_aead_cast(tfm);
 	struct aead_alg *alg = crypto_aead_alg(aead);
 
@@ -101,6 +111,7 @@ static int crypto_aead_init_tfm(struct crypto_tfm *tfm)
 	if (alg->init)
 		return alg->init(aead);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -108,6 +119,7 @@ static int crypto_aead_init_tfm(struct crypto_tfm *tfm)
 static int crypto_aead_report(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_report_aead raead;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_alg *aead = container_of(alg, struct aead_alg, base);
 
 	strncpy(raead.type, "aead", sizeof(raead.type));
@@ -136,6 +148,7 @@ static void crypto_aead_show(struct seq_file *m, struct crypto_alg *alg)
 	__maybe_unused;
 static void crypto_aead_show(struct seq_file *m, struct crypto_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_alg *aead = container_of(alg, struct aead_alg, base);
 
 	seq_printf(m, "type         : aead\n");
@@ -149,6 +162,7 @@ static void crypto_aead_show(struct seq_file *m, struct crypto_alg *alg)
 
 static void crypto_aead_free_instance(struct crypto_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_instance *aead = aead_instance(inst);
 
 	if (!aead->free) {
@@ -176,6 +190,7 @@ static const struct crypto_type crypto_aead_type = {
 static int aead_geniv_setkey(struct crypto_aead *tfm,
 			     const u8 *key, unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_geniv_ctx *ctx = crypto_aead_ctx(tfm);
 
 	return crypto_aead_setkey(ctx->child, key, keylen);
@@ -184,6 +199,7 @@ static int aead_geniv_setkey(struct crypto_aead *tfm,
 static int aead_geniv_setauthsize(struct crypto_aead *tfm,
 				  unsigned int authsize)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_geniv_ctx *ctx = crypto_aead_ctx(tfm);
 
 	return crypto_aead_setauthsize(ctx->child, authsize);
@@ -203,7 +219,9 @@ struct aead_instance *aead_geniv_alloc(struct crypto_template *tmpl,
 
 	algt = crypto_get_attr_type(tb);
 	if (IS_ERR(algt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(algt);
+}
 
 	if ((algt->type ^ CRYPTO_ALG_TYPE_AEAD) & algt->mask)
 		return ERR_PTR(-EINVAL);
@@ -271,6 +289,7 @@ EXPORT_SYMBOL_GPL(aead_geniv_alloc);
 
 void aead_geniv_free(struct aead_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_drop_aead(aead_instance_ctx(inst));
 	kfree(inst);
 }
@@ -278,6 +297,7 @@ EXPORT_SYMBOL_GPL(aead_geniv_free);
 
 int aead_init_geniv(struct crypto_aead *aead)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_geniv_ctx *ctx = crypto_aead_ctx(aead);
 	struct aead_instance *inst = aead_alg_instance(aead);
 	struct crypto_aead *child;
@@ -322,6 +342,7 @@ EXPORT_SYMBOL_GPL(aead_init_geniv);
 
 void aead_exit_geniv(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_geniv_ctx *ctx = crypto_aead_ctx(tfm);
 
 	crypto_free_aead(ctx->child);
@@ -332,6 +353,7 @@ EXPORT_SYMBOL_GPL(aead_exit_geniv);
 int crypto_grab_aead(struct crypto_aead_spawn *spawn, const char *name,
 		     u32 type, u32 mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spawn->base.frontend = &crypto_aead_type;
 	return crypto_grab_spawn(&spawn->base, name, type, mask);
 }
@@ -352,7 +374,9 @@ static int aead_prepare_alg(struct aead_alg *alg)
 		return -EINVAL;
 
 	if (!alg->chunksize)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alg->chunksize = base->cra_blocksize;
+}
 
 	base->cra_type = &crypto_aead_type;
 	base->cra_flags &= ~CRYPTO_ALG_TYPE_MASK;
@@ -368,7 +392,9 @@ int crypto_register_aead(struct aead_alg *alg)
 
 	err = aead_prepare_alg(alg);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return crypto_register_alg(base);
 }
@@ -376,6 +402,7 @@ EXPORT_SYMBOL_GPL(crypto_register_aead);
 
 void crypto_unregister_aead(struct aead_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_alg(&alg->base);
 }
 EXPORT_SYMBOL_GPL(crypto_unregister_aead);
@@ -384,6 +411,7 @@ int crypto_register_aeads(struct aead_alg *algs, int count)
 {
 	int i, ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < count; i++) {
 		ret = crypto_register_aead(&algs[i]);
 		if (ret)
@@ -404,6 +432,7 @@ void crypto_unregister_aeads(struct aead_alg *algs, int count)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = count - 1; i >= 0; --i)
 		crypto_unregister_aead(&algs[i]);
 }
@@ -416,7 +445,9 @@ int aead_register_instance(struct crypto_template *tmpl,
 
 	err = aead_prepare_alg(&inst->alg);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return crypto_register_instance(tmpl, aead_crypto_instance(inst));
 }
diff --git a/crypto/aes_generic.c b/crypto/aes_generic.c
index ca554d5..99586b8 100644
--- a/crypto/aes_generic.c
+++ b/crypto/aes_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
@@ -58,6 +60,7 @@
 
 static inline u8 byte(const u32 x, const unsigned n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return x >> (n << 3);
 }
 
@@ -1219,6 +1222,7 @@ int crypto_aes_expand_key(struct crypto_aes_ctx *ctx, const u8 *in_key,
 {
 	u32 i, t, u, v, w, j;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (key_len != AES_KEYSIZE_128 && key_len != AES_KEYSIZE_192 &&
 			key_len != AES_KEYSIZE_256)
 		return -EINVAL;
@@ -1287,6 +1291,7 @@ EXPORT_SYMBOL_GPL(crypto_aes_expand_key);
 int crypto_aes_set_key(struct crypto_tfm *tfm, const u8 *in_key,
 		unsigned int key_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aes_ctx *ctx = crypto_tfm_ctx(tfm);
 	u32 *flags = &tfm->crt_flags;
 	int ret;
@@ -1333,6 +1338,7 @@ EXPORT_SYMBOL_GPL(crypto_aes_set_key);
 
 static void aes_encrypt(struct crypto_tfm *tfm, u8 *out, const u8 *in)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct crypto_aes_ctx *ctx = crypto_tfm_ctx(tfm);
 	u32 b0[4], b1[4];
 	const u32 *kp = ctx->key_enc + 4;
@@ -1403,6 +1409,7 @@ static void aes_encrypt(struct crypto_tfm *tfm, u8 *out, const u8 *in)
 
 static void aes_decrypt(struct crypto_tfm *tfm, u8 *out, const u8 *in)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	const struct crypto_aes_ctx *ctx = crypto_tfm_ctx(tfm);
 	u32 b0[4], b1[4];
 	const int key_len = ctx->key_length;
@@ -1466,6 +1473,7 @@ static int __init aes_init(void)
 
 static void __exit aes_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_alg(&aes_alg);
 }
 
diff --git a/crypto/af_alg.c b/crypto/af_alg.c
index 4e4640b..a3ff030 100644
--- a/crypto/af_alg.c
+++ b/crypto/af_alg.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * af_alg: User-space algorithm interface
  *
diff --git a/crypto/ahash.c b/crypto/ahash.c
index f75b5c1..75a3d17 100644
--- a/crypto/ahash.c
+++ b/crypto/ahash.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Asynchronous Cryptographic Hash operations.
  *
@@ -38,6 +40,7 @@ struct ahash_request_priv {
 
 static inline struct ahash_alg *crypto_ahash_alg(struct crypto_ahash *hash)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return container_of(crypto_hash_alg_common(hash), struct ahash_alg,
 			    halg);
 }
@@ -46,6 +49,7 @@ static int hash_walk_next(struct crypto_hash_walk *walk)
 {
 	unsigned int alignmask = walk->alignmask;
 	unsigned int offset = walk->offset;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int nbytes = min(walk->entrylen,
 				  ((unsigned int)(PAGE_SIZE)) - offset);
 
@@ -77,7 +81,9 @@ static int hash_walk_new_entry(struct crypto_hash_walk *walk)
 	walk->entrylen = sg->length;
 
 	if (walk->entrylen > walk->total)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		walk->entrylen = walk->total;
+}
 	walk->total -= walk->entrylen;
 
 	return hash_walk_next(walk);
@@ -90,6 +96,7 @@ int crypto_hash_walk_done(struct crypto_hash_walk *walk, int err)
 
 	walk->data -= walk->offset;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (nbytes && walk->offset & alignmask && !err) {
 		walk->offset = ALIGN(walk->offset, alignmask + 1);
 		walk->data += walk->offset;
@@ -133,6 +140,7 @@ EXPORT_SYMBOL_GPL(crypto_hash_walk_done);
 int crypto_hash_walk_first(struct ahash_request *req,
 			   struct crypto_hash_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->total = req->nbytes;
 
 	if (!walk->total) {
@@ -151,6 +159,7 @@ EXPORT_SYMBOL_GPL(crypto_hash_walk_first);
 int crypto_ahash_walk_first(struct ahash_request *req,
 			    struct crypto_hash_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->total = req->nbytes;
 
 	if (!walk->total) {
@@ -172,6 +181,7 @@ EXPORT_SYMBOL_GPL(crypto_ahash_walk_first);
 static int ahash_setkey_unaligned(struct crypto_ahash *tfm, const u8 *key,
 				unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long alignmask = crypto_ahash_alignmask(tfm);
 	int ret;
 	u8 *buffer, *alignbuffer;
@@ -192,6 +202,7 @@ static int ahash_setkey_unaligned(struct crypto_ahash *tfm, const u8 *key,
 int crypto_ahash_setkey(struct crypto_ahash *tfm, const u8 *key,
 			unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long alignmask = crypto_ahash_alignmask(tfm);
 	int err;
 
@@ -211,17 +222,20 @@ EXPORT_SYMBOL_GPL(crypto_ahash_setkey);
 static int ahash_nosetkey(struct crypto_ahash *tfm, const u8 *key,
 			  unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOSYS;
 }
 
 static inline unsigned int ahash_align_buffer_size(unsigned len,
 						   unsigned long mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return len + (mask & ~(crypto_tfm_ctx_alignment() - 1));
 }
 
 static int ahash_save_req(struct ahash_request *req, crypto_completion_t cplt)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ahash *tfm = crypto_ahash_reqtfm(req);
 	unsigned long alignmask = crypto_ahash_alignmask(tfm);
 	unsigned int ds = crypto_ahash_digestsize(tfm);
@@ -282,8 +296,10 @@ static void ahash_restore_req(struct ahash_request *req, int err)
 	struct ahash_request_priv *priv = req->priv;
 
 	if (!err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(priv->result, req->result,
 		       crypto_ahash_digestsize(crypto_ahash_reqtfm(req)));
+}
 
 	/* Restore the original crypto request. */
 	req->result = priv->result;
@@ -311,6 +327,7 @@ static void ahash_op_unaligned_done(struct crypto_async_request *req, int err)
 	struct ahash_request *areq = req->data;
 
 	if (err == -EINPROGRESS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ahash_notify_einprogress(areq);
 		return;
 	}
@@ -338,7 +355,9 @@ static int ahash_op_unaligned(struct ahash_request *req,
 
 	err = ahash_save_req(req, ahash_op_unaligned_done);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	err = op(req);
 	if (err == -EINPROGRESS ||
@@ -354,6 +373,7 @@ static int ahash_op_unaligned(struct ahash_request *req,
 static int crypto_ahash_op(struct ahash_request *req,
 			   int (*op)(struct ahash_request *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ahash *tfm = crypto_ahash_reqtfm(req);
 	unsigned long alignmask = crypto_ahash_alignmask(tfm);
 
@@ -365,18 +385,21 @@ static int crypto_ahash_op(struct ahash_request *req,
 
 int crypto_ahash_final(struct ahash_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_ahash_op(req, crypto_ahash_reqtfm(req)->final);
 }
 EXPORT_SYMBOL_GPL(crypto_ahash_final);
 
 int crypto_ahash_finup(struct ahash_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_ahash_op(req, crypto_ahash_reqtfm(req)->finup);
 }
 EXPORT_SYMBOL_GPL(crypto_ahash_finup);
 
 int crypto_ahash_digest(struct ahash_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ahash *tfm = crypto_ahash_reqtfm(req);
 
 	if (crypto_ahash_get_flags(tfm) & CRYPTO_TFM_NEED_KEY)
@@ -391,7 +414,9 @@ static void ahash_def_finup_done2(struct crypto_async_request *req, int err)
 	struct ahash_request *areq = req->data;
 
 	if (err == -EINPROGRESS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	ahash_restore_req(areq, err);
 
@@ -400,6 +425,7 @@ static void ahash_def_finup_done2(struct crypto_async_request *req, int err)
 
 static int ahash_def_finup_finish1(struct ahash_request *req, int err)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (err)
 		goto out;
 
@@ -421,6 +447,7 @@ static void ahash_def_finup_done1(struct crypto_async_request *req, int err)
 	struct ahash_request *areq = req->data;
 
 	if (err == -EINPROGRESS) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		ahash_notify_einprogress(areq);
 		return;
 	}
@@ -436,6 +463,7 @@ static void ahash_def_finup_done1(struct crypto_async_request *req, int err)
 
 static int ahash_def_finup(struct ahash_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ahash *tfm = crypto_ahash_reqtfm(req);
 	int err;
 
@@ -454,16 +482,19 @@ static int ahash_def_finup(struct ahash_request *req)
 
 static int ahash_no_export(struct ahash_request *req, void *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOSYS;
 }
 
 static int ahash_no_import(struct ahash_request *req, const void *in)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOSYS;
 }
 
 static int crypto_ahash_init_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ahash *hash = __crypto_ahash_cast(tfm);
 	struct ahash_alg *alg = crypto_ahash_alg(hash);
 
@@ -474,30 +505,45 @@ static int crypto_ahash_init_tfm(struct crypto_tfm *tfm)
 	if (tfm->__crt_alg->cra_type != &crypto_ahash_type)
 		return crypto_init_shash_ops_async(tfm);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hash->init = alg->init;
 	hash->update = alg->update;
 	hash->final = alg->final;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	hash->finup = alg->finup ?: ahash_def_finup;
 	hash->digest = alg->digest;
 
 	if (alg->setkey) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hash->setkey = alg->setkey;
 		if (!(alg->halg.base.cra_flags & CRYPTO_ALG_OPTIONAL_KEY))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			crypto_ahash_set_flags(hash, CRYPTO_TFM_NEED_KEY);
+}
 	}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (alg->export)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hash->export = alg->export;
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (alg->import)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		hash->import = alg->import;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static unsigned int crypto_ahash_extsize(struct crypto_alg *alg)
 {
 	if (alg->cra_type != &crypto_ahash_type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sizeof(struct crypto_shash *);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_alg_extsize(alg);
 }
 
@@ -514,6 +560,7 @@ static int crypto_ahash_report(struct sk_buff *skb, struct crypto_alg *alg)
 	if (nla_put(skb, CRYPTOCFGA_REPORT_HASH,
 		    sizeof(struct crypto_report_hash), &rhash))
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 nla_put_failure:
@@ -530,6 +577,7 @@ static void crypto_ahash_show(struct seq_file *m, struct crypto_alg *alg)
 	__maybe_unused;
 static void crypto_ahash_show(struct seq_file *m, struct crypto_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_printf(m, "type         : ahash\n");
 	seq_printf(m, "async        : %s\n", alg->cra_flags & CRYPTO_ALG_ASYNC ?
 					     "yes" : "no");
@@ -555,12 +603,14 @@ EXPORT_SYMBOL_GPL(crypto_ahash_type);
 struct crypto_ahash *crypto_alloc_ahash(const char *alg_name, u32 type,
 					u32 mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_alloc_tfm(alg_name, &crypto_ahash_type, type, mask);
 }
 EXPORT_SYMBOL_GPL(crypto_alloc_ahash);
 
 int crypto_has_ahash(const char *alg_name, u32 type, u32 mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_type_has_alg(alg_name, &crypto_ahash_type, type, mask);
 }
 EXPORT_SYMBOL_GPL(crypto_has_ahash);
@@ -588,7 +638,9 @@ int crypto_register_ahash(struct ahash_alg *alg)
 
 	err = ahash_prepare_alg(alg);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return crypto_register_alg(base);
 }
@@ -596,6 +648,7 @@ EXPORT_SYMBOL_GPL(crypto_register_ahash);
 
 int crypto_unregister_ahash(struct ahash_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_unregister_alg(&alg->halg.base);
 }
 EXPORT_SYMBOL_GPL(crypto_unregister_ahash);
@@ -604,6 +657,7 @@ int crypto_register_ahashes(struct ahash_alg *algs, int count)
 {
 	int i, ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < count; i++) {
 		ret = crypto_register_ahash(&algs[i]);
 		if (ret)
@@ -624,6 +678,7 @@ void crypto_unregister_ahashes(struct ahash_alg *algs, int count)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = count - 1; i >= 0; --i)
 		crypto_unregister_ahash(&algs[i]);
 }
@@ -636,7 +691,9 @@ int ahash_register_instance(struct crypto_template *tmpl,
 
 	err = ahash_prepare_alg(&inst->alg);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return crypto_register_instance(tmpl, ahash_crypto_instance(inst));
 }
@@ -644,6 +701,7 @@ EXPORT_SYMBOL_GPL(ahash_register_instance);
 
 void ahash_free_instance(struct crypto_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_drop_spawn(crypto_instance_ctx(inst));
 	kfree(ahash_instance(inst));
 }
@@ -663,6 +721,7 @@ struct hash_alg_common *ahash_attr_alg(struct rtattr *rta, u32 type, u32 mask)
 	struct crypto_alg *alg;
 
 	alg = crypto_attr_alg2(rta, &crypto_ahash_type, type, mask);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return IS_ERR(alg) ? ERR_CAST(alg) : __crypto_hash_alg_common(alg);
 }
 EXPORT_SYMBOL_GPL(ahash_attr_alg);
@@ -672,7 +731,9 @@ bool crypto_hash_alg_has_setkey(struct hash_alg_common *halg)
 	struct crypto_alg *alg = &halg->base;
 
 	if (alg->cra_type != &crypto_ahash_type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return crypto_shash_alg_has_setkey(__crypto_shash_alg(alg));
+}
 
 	return __crypto_ahash_alg(alg)->setkey != NULL;
 }
diff --git a/crypto/akcipher.c b/crypto/akcipher.c
index cfbdb06..44113f3 100644
--- a/crypto/akcipher.c
+++ b/crypto/akcipher.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Public Key Encryption
  *
@@ -35,6 +37,7 @@ static int crypto_akcipher_report(struct sk_buff *skb, struct crypto_alg *alg)
 	if (nla_put(skb, CRYPTOCFGA_REPORT_AKCIPHER,
 		    sizeof(struct crypto_report_akcipher), &rakcipher))
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 nla_put_failure:
@@ -52,11 +55,13 @@ static void crypto_akcipher_show(struct seq_file *m, struct crypto_alg *alg)
 
 static void crypto_akcipher_show(struct seq_file *m, struct crypto_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_puts(m, "type         : akcipher\n");
 }
 
 static void crypto_akcipher_exit_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_akcipher *akcipher = __crypto_akcipher_tfm(tfm);
 	struct akcipher_alg *alg = crypto_akcipher_alg(akcipher);
 
@@ -65,6 +70,7 @@ static void crypto_akcipher_exit_tfm(struct crypto_tfm *tfm)
 
 static int crypto_akcipher_init_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_akcipher *akcipher = __crypto_akcipher_tfm(tfm);
 	struct akcipher_alg *alg = crypto_akcipher_alg(akcipher);
 
@@ -79,6 +85,7 @@ static int crypto_akcipher_init_tfm(struct crypto_tfm *tfm)
 
 static void crypto_akcipher_free_instance(struct crypto_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct akcipher_instance *akcipher = akcipher_instance(inst);
 
 	akcipher->free(akcipher);
@@ -101,6 +108,7 @@ static const struct crypto_type crypto_akcipher_type = {
 int crypto_grab_akcipher(struct crypto_akcipher_spawn *spawn, const char *name,
 			 u32 type, u32 mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spawn->base.frontend = &crypto_akcipher_type;
 	return crypto_grab_spawn(&spawn->base, name, type, mask);
 }
@@ -109,6 +117,7 @@ EXPORT_SYMBOL_GPL(crypto_grab_akcipher);
 struct crypto_akcipher *crypto_alloc_akcipher(const char *alg_name, u32 type,
 					      u32 mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_alloc_tfm(alg_name, &crypto_akcipher_type, type, mask);
 }
 EXPORT_SYMBOL_GPL(crypto_alloc_akcipher);
@@ -133,6 +142,7 @@ EXPORT_SYMBOL_GPL(crypto_register_akcipher);
 
 void crypto_unregister_akcipher(struct akcipher_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_alg(&alg->base);
 }
 EXPORT_SYMBOL_GPL(crypto_unregister_akcipher);
@@ -140,6 +150,7 @@ EXPORT_SYMBOL_GPL(crypto_unregister_akcipher);
 int akcipher_register_instance(struct crypto_template *tmpl,
 			       struct akcipher_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	akcipher_prepare_alg(&inst->alg);
 	return crypto_register_instance(tmpl, akcipher_crypto_instance(inst));
 }
diff --git a/crypto/algapi.c b/crypto/algapi.c
index 50eb828..d61d91d 100644
--- a/crypto/algapi.c
+++ b/crypto/algapi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API for algorithms (i.e., low-level API).
  *
@@ -32,11 +34,15 @@ static inline int crypto_set_driver_name(struct crypto_alg *alg)
 	int len;
 
 	if (*driver_name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	len = strlcpy(driver_name, alg->cra_name, CRYPTO_MAX_ALG_NAME);
 	if (len + sizeof(suffix) > CRYPTO_MAX_ALG_NAME)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENAMETOOLONG;
+}
 
 	memcpy(driver_name + len, suffix, sizeof(suffix));
 	return 0;
@@ -44,6 +50,7 @@ static inline int crypto_set_driver_name(struct crypto_alg *alg)
 
 static inline void crypto_check_module_sig(struct module *mod)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (fips_enabled && mod && !module_sig_ok(mod))
 		panic("Module %s signature verification failed in FIPS mode\n",
 		      module_name(mod));
@@ -51,17 +58,25 @@ static inline void crypto_check_module_sig(struct module *mod)
 
 static int crypto_check_alg(struct crypto_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_check_module_sig(alg->cra_module);
 
 	if (alg->cra_alignmask & (alg->cra_alignmask + 1))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (alg->cra_blocksize > PAGE_SIZE / 8)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if (alg->cra_priority < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&alg->cra_refcnt, 1);
 
 	return crypto_set_driver_name(alg);
@@ -69,6 +84,7 @@ static int crypto_check_alg(struct crypto_alg *alg)
 
 static void crypto_free_instance(struct crypto_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!inst->alg.cra_type->free) {
 		inst->tmpl->free(inst);
 		return;
@@ -95,16 +111,24 @@ static struct list_head *crypto_more_spawns(struct crypto_alg *alg,
 
 	spawn = list_first_entry_or_null(stack, struct crypto_spawn, list);
 	if (!spawn)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	n = list_next_entry(spawn, list);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (spawn->alg && &n->list != stack && !n->alg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		n->alg = (n->list.next == stack) ? alg :
 			 &list_next_entry(n, list)->inst->alg;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_move(&spawn->list, secondary_spawns);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return &n->list == stack ? top : &n->inst->alg.cra_users;
 }
 
@@ -114,7 +138,9 @@ static void crypto_remove_instance(struct crypto_instance *inst,
 	struct crypto_template *tmpl = inst->tmpl;
 
 	if (crypto_is_dead(&inst->alg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	inst->alg.cra_flags |= CRYPTO_ALG_DEAD;
 	if (hlist_unhashed(&inst->list))
@@ -143,28 +169,35 @@ void crypto_remove_spawns(struct crypto_alg *alg, struct list_head *list,
 
 	spawns = &alg->cra_users;
 	list_for_each_entry_safe(spawn, n, spawns, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if ((spawn->alg->cra_flags ^ new_type) & spawn->mask)
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_move(&spawn->list, &top);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spawns = &top;
 	do {
 		while (!list_empty(spawns)) {
 			struct crypto_instance *inst;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spawn = list_first_entry(spawns, struct crypto_spawn,
 						 list);
 			inst = spawn->inst;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			BUG_ON(&inst->alg == alg);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			list_move(&spawn->list, &stack);
 
 			if (&inst->alg == nalg)
 				break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			spawn->alg = NULL;
 			spawns = &inst->alg.cra_users;
 
@@ -180,12 +213,16 @@ void crypto_remove_spawns(struct crypto_alg *alg, struct list_head *list,
 			if (spawns->next == NULL)
 				break;
 		}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	} while ((spawns = crypto_more_spawns(alg, &stack, &top,
 					      &secondary_spawns)));
 
 	list_for_each_entry_safe(spawn, n, &secondary_spawns, list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (spawn->alg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			list_move(&spawn->list, &spawn->alg->cra_users);
+}
 		else
 			crypto_remove_instance(spawn->inst, list);
 	}
@@ -231,11 +268,13 @@ static struct crypto_larval *__crypto_register_alg(struct crypto_alg *alg)
 	if (IS_ERR(larval))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	ret = -ENOENT;
 	larval->adult = crypto_mod_get(alg);
 	if (!larval->adult)
 		goto free_larval;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&larval->alg.cra_refcnt, 1);
 	memcpy(larval->alg.cra_driver_name, alg->cra_driver_name,
 	       CRYPTO_MAX_ALG_NAME);
@@ -266,12 +305,14 @@ void crypto_alg_tested(const char *name, int err)
 		if (crypto_is_moribund(q) || !crypto_is_larval(q))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		test = (struct crypto_larval *)q;
 
 		if (!strcmp(q->cra_driver_name, name))
 			goto found;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_err("alg: Unexpected test result for %s: %d\n", name, err);
 	goto unlock;
 
@@ -339,6 +380,7 @@ void crypto_remove_final(struct list_head *list)
 	struct crypto_alg *n;
 
 	list_for_each_entry_safe(alg, n, list, cra_list) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		list_del_init(&alg->cra_list);
 		crypto_alg_put(alg);
 	}
@@ -351,8 +393,10 @@ static void crypto_wait_for_test(struct crypto_larval *larval)
 
 	err = crypto_probing_notify(CRYPTO_MSG_ALG_REGISTER, larval->adult);
 	if (err != NOTIFY_STOP) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (WARN_ON(err != NOTIFY_DONE))
 			goto out;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_alg_tested(larval->alg.cra_driver_name, 0);
 	}
 
@@ -371,14 +415,18 @@ int crypto_register_alg(struct crypto_alg *alg)
 	alg->cra_flags &= ~CRYPTO_ALG_DEAD;
 	err = crypto_check_alg(alg);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	down_write(&crypto_alg_sem);
 	larval = __crypto_register_alg(alg);
 	up_write(&crypto_alg_sem);
 
 	if (IS_ERR(larval))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(larval);
+}
 
 	crypto_wait_for_test(larval);
 	return 0;
@@ -387,6 +435,7 @@ EXPORT_SYMBOL_GPL(crypto_register_alg);
 
 static int crypto_remove_alg(struct crypto_alg *alg, struct list_head *list)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(list_empty(&alg->cra_list)))
 		return -ENOENT;
 
@@ -409,7 +458,9 @@ int crypto_unregister_alg(struct crypto_alg *alg)
 	up_write(&crypto_alg_sem);
 
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
 	BUG_ON(atomic_read(&alg->cra_refcnt) != 1);
 	if (alg->cra_destroy)
@@ -430,12 +481,16 @@ int crypto_register_algs(struct crypto_alg *algs, int count)
 			goto err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err:
 	for (--i; i >= 0; --i)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_unregister_alg(&algs[i]);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(crypto_register_algs);
@@ -444,6 +499,7 @@ int crypto_unregister_algs(struct crypto_alg *algs, int count)
 {
 	int i, ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < count; i++) {
 		ret = crypto_unregister_alg(&algs[i]);
 		if (ret)
@@ -487,6 +543,7 @@ void crypto_unregister_template(struct crypto_template *tmpl)
 
 	down_write(&crypto_alg_sem);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG_ON(list_empty(&tmpl->list));
 	list_del_init(&tmpl->list);
 
@@ -520,6 +577,7 @@ static struct crypto_template *__crypto_lookup_template(const char *name)
 		if (unlikely(!crypto_tmpl_get(q)))
 			continue;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tmpl = q;
 		break;
 	}
@@ -543,13 +601,17 @@ int crypto_register_instance(struct crypto_template *tmpl,
 
 	err = crypto_check_alg(&inst->alg);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	inst->alg.cra_module = tmpl->module;
 	inst->alg.cra_flags |= CRYPTO_ALG_INSTANCE;
 
 	if (unlikely(!crypto_mod_get(&inst->alg)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAGAIN;
+}
 
 	down_write(&crypto_alg_sem);
 
@@ -571,7 +633,10 @@ int crypto_register_instance(struct crypto_template *tmpl,
 
 	/* Remove instance if test failed */
 	if (!(inst->alg.cra_flags & CRYPTO_ALG_TESTED))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_unregister_instance(inst);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = 0;
 
 err:
@@ -642,7 +707,9 @@ int crypto_grab_spawn(struct crypto_spawn *spawn, const char *name,
 
 	alg = crypto_find_alg(name, spawn->frontend, type, mask);
 	if (IS_ERR(alg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(alg);
+}
 
 	err = crypto_init_spawn(spawn, alg, spawn->inst, mask);
 	crypto_mod_put(alg);
@@ -652,6 +719,7 @@ EXPORT_SYMBOL_GPL(crypto_grab_spawn);
 
 void crypto_drop_spawn(struct crypto_spawn *spawn)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!spawn->alg)
 		return;
 
@@ -674,11 +742,16 @@ static struct crypto_alg *crypto_spawn_alg(struct crypto_spawn *spawn)
 	up_read(&crypto_alg_sem);
 
 	if (!alg2) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (alg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			crypto_shoot_alg(alg);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EAGAIN);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return alg;
 }
 
@@ -690,8 +763,11 @@ struct crypto_tfm *crypto_spawn_tfm(struct crypto_spawn *spawn, u32 type,
 
 	alg = crypto_spawn_alg(spawn);
 	if (IS_ERR(alg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(alg);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	tfm = ERR_PTR(-EINVAL);
 	if (unlikely((alg->cra_flags ^ type) & mask))
 		goto out_put_alg;
@@ -700,6 +776,7 @@ struct crypto_tfm *crypto_spawn_tfm(struct crypto_spawn *spawn, u32 type,
 	if (IS_ERR(tfm))
 		goto out_put_alg;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return tfm;
 
 out_put_alg:
@@ -715,12 +792,15 @@ void *crypto_spawn_tfm2(struct crypto_spawn *spawn)
 
 	alg = crypto_spawn_alg(spawn);
 	if (IS_ERR(alg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(alg);
+}
 
 	tfm = crypto_create_tfm(alg, spawn->frontend);
 	if (IS_ERR(tfm))
 		goto out_put_alg;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return tfm;
 
 out_put_alg:
@@ -737,6 +817,7 @@ EXPORT_SYMBOL_GPL(crypto_register_notifier);
 
 int crypto_unregister_notifier(struct notifier_block *nb)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return blocking_notifier_chain_unregister(&crypto_chain, nb);
 }
 EXPORT_SYMBOL_GPL(crypto_unregister_notifier);
@@ -747,11 +828,17 @@ struct crypto_attr_type *crypto_get_attr_type(struct rtattr **tb)
 	struct crypto_attr_type *algt;
 
 	if (!rta)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 	if (RTA_PAYLOAD(rta) < sizeof(*algt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 	if (rta->rta_type != CRYPTOA_TYPE)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
 	algt = RTA_DATA(rta);
 
@@ -765,10 +852,14 @@ int crypto_check_attr_type(struct rtattr **tb, u32 type)
 
 	algt = crypto_get_attr_type(tb);
 	if (IS_ERR(algt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(algt);
+}
 
 	if ((algt->type ^ type) & algt->mask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	return 0;
 }
@@ -779,12 +870,19 @@ const char *crypto_attr_alg_name(struct rtattr *rta)
 	struct crypto_attr_alg *alga;
 
 	if (!rta)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 	if (RTA_PAYLOAD(rta) < sizeof(*alga))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 	if (rta->rta_type != CRYPTOA_ALG)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-EINVAL);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	alga = RTA_DATA(rta);
 	alga->name[CRYPTO_MAX_ALG_NAME - 1] = 0;
 
@@ -800,7 +898,9 @@ struct crypto_alg *crypto_attr_alg2(struct rtattr *rta,
 
 	name = crypto_attr_alg_name(rta);
 	if (IS_ERR(name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(name);
+}
 
 	return crypto_find_alg(name, frontend, type, mask);
 }
@@ -811,7 +911,9 @@ int crypto_attr_u32(struct rtattr *rta, u32 *num)
 	struct crypto_attr_u32 *nu32;
 
 	if (!rta)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOENT;
+}
 	if (RTA_PAYLOAD(rta) < sizeof(*nu32))
 		return -EINVAL;
 	if (rta->rta_type != CRYPTOA_U32)
@@ -849,7 +951,9 @@ void *crypto_alloc_instance2(const char *name, struct crypto_alg *alg,
 	p = kzalloc(head + sizeof(*inst) + sizeof(struct crypto_spawn),
 		    GFP_KERNEL);
 	if (!p)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	inst = (void *)(p + head);
 
@@ -857,6 +961,7 @@ void *crypto_alloc_instance2(const char *name, struct crypto_alg *alg,
 	if (err)
 		goto err_free_inst;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return p;
 
 err_free_inst:
@@ -876,6 +981,7 @@ struct crypto_instance *crypto_alloc_instance(const char *name,
 	if (IS_ERR(inst))
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spawn = crypto_instance_ctx(inst);
 	err = crypto_init_spawn(spawn, alg, inst,
 				CRYPTO_ALG_TYPE_MASK | CRYPTO_ALG_ASYNC);
@@ -883,6 +989,7 @@ struct crypto_instance *crypto_alloc_instance(const char *name,
 	if (err)
 		goto err_free_inst;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return inst;
 
 err_free_inst:
@@ -909,6 +1016,7 @@ int crypto_enqueue_request(struct crypto_queue *queue,
 	int err = -EINPROGRESS;
 
 	if (unlikely(queue->qlen >= queue->max_qlen)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = -EBUSY;
 		if (!(request->flags & CRYPTO_TFM_REQ_MAY_BACKLOG))
 			goto out;
@@ -929,7 +1037,9 @@ struct crypto_async_request *crypto_dequeue_request(struct crypto_queue *queue)
 	struct list_head *request;
 
 	if (unlikely(!queue->qlen))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	queue->qlen--;
 
@@ -947,6 +1057,7 @@ int crypto_tfm_in_queue(struct crypto_queue *queue, struct crypto_tfm *tfm)
 {
 	struct crypto_async_request *req;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(req, &queue->list, list) {
 		if (req->tfm == tfm)
 			return 1;
@@ -961,6 +1072,7 @@ static inline void crypto_inc_byte(u8 *a, unsigned int size)
 	u8 *b = (a + size);
 	u8 c;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (; size; size--) {
 		c = *--b + 1;
 		*b = c;
@@ -997,6 +1109,7 @@ void __crypto_xor(u8 *dst, const u8 *src1, const u8 *src2, unsigned int len)
 			 ((unsigned long)dst ^ (unsigned long)src2)) &
 			(size - 1);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		relalign = d ? 1 << __ffs(d) : size;
 
 		/*
@@ -1054,6 +1167,7 @@ int crypto_type_has_alg(const char *name, const struct crypto_type *frontend,
 	struct crypto_alg *alg = crypto_find_alg(name, frontend, type, mask);
 
 	if (!IS_ERR(alg)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_mod_put(alg);
 		ret = 1;
 	}
@@ -1070,6 +1184,7 @@ static int __init crypto_algapi_init(void)
 
 static void __exit crypto_algapi_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_exit_proc();
 }
 
diff --git a/crypto/algboss.c b/crypto/algboss.c
index 960d854..2a4a6bf 100644
--- a/crypto/algboss.c
+++ b/crypto/algboss.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Create default crypto algorithm instances.
  *
@@ -78,11 +80,16 @@ static int cryptomgr_probe(void *data)
 
 		inst = tmpl->alloc(param->tb);
 		if (IS_ERR(inst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(inst);
+}
 		else if ((err = crypto_register_instance(tmpl, inst)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			tmpl->free(inst);
+}
 	} while (err == -EAGAIN && !signal_pending(current));
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_tmpl_put(tmpl);
 
 out:
@@ -131,14 +138,18 @@ static int cryptomgr_schedule_probe(struct crypto_larval *larval)
 			int recursion = 0;
 
 			for (;;) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (!*++p)
 					goto err_free_param;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				if (*p == '(')
 					recursion++;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 				else if (*p == ')' && !recursion--)
 					break;
 			}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			notnum = 1;
 			p++;
 		}
@@ -153,6 +164,7 @@ static int cryptomgr_schedule_probe(struct crypto_larval *larval)
 			param->attrs[i].alg.attr.rta_type = CRYPTOA_ALG;
 			memcpy(param->attrs[i].alg.data.name, name, len);
 		} else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			param->attrs[i].nu32.attr.rta_len =
 				sizeof(param->attrs[i].nu32);
 			param->attrs[i].nu32.attr.rta_type = CRYPTOA_U32;
@@ -169,6 +181,7 @@ static int cryptomgr_schedule_probe(struct crypto_larval *larval)
 		if (*p == ')')
 			break;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (*p != ',')
 			goto err_free_param;
 	}
@@ -218,9 +231,11 @@ static int cryptomgr_test(void *data)
 	goto skiptest;
 #endif
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (type & CRYPTO_ALG_TESTED)
 		goto skiptest;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = alg_test(param->driver, param->alg, type, CRYPTO_ALG_TESTED);
 
 skiptest:
@@ -257,6 +272,7 @@ static int cryptomgr_schedule_test(struct crypto_alg *alg)
 	if (IS_ERR(thread))
 		goto err_free_param;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NOTIFY_STOP;
 
 err_free_param:
@@ -277,6 +293,7 @@ static int cryptomgr_notify(struct notifier_block *this, unsigned long msg,
 		return cryptomgr_schedule_test(data);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return NOTIFY_DONE;
 }
 
@@ -291,6 +308,7 @@ static int __init cryptomgr_init(void)
 
 static void __exit cryptomgr_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int err = crypto_unregister_notifier(&cryptomgr_notifier);
 	BUG_ON(err);
 }
diff --git a/crypto/algif_aead.c b/crypto/algif_aead.c
index f138af1..ee4dea1 100644
--- a/crypto/algif_aead.c
+++ b/crypto/algif_aead.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * algif_aead: User-space interface for AEAD algorithms
  *
diff --git a/crypto/algif_hash.c b/crypto/algif_hash.c
index 39cebd3..a83a96b 100644
--- a/crypto/algif_hash.c
+++ b/crypto/algif_hash.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * algif_hash: User-space interface for hash algorithms
  *
diff --git a/crypto/algif_rng.c b/crypto/algif_rng.c
index 150c2b6..59e3625 100644
--- a/crypto/algif_rng.c
+++ b/crypto/algif_rng.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * algif_rng: User-space interface for random number generators
  *
diff --git a/crypto/algif_skcipher.c b/crypto/algif_skcipher.c
index 90bc4e0..152e694 100644
--- a/crypto/algif_skcipher.c
+++ b/crypto/algif_skcipher.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * algif_skcipher: User-space interface for skcipher algorithms
  *
diff --git a/crypto/ansi_cprng.c b/crypto/ansi_cprng.c
index eff337c..e4b137d 100644
--- a/crypto/ansi_cprng.c
+++ b/crypto/ansi_cprng.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * PRNG: Pseudo Random Number Generator
  *       Based on NIST Recommended PRNG From ANSI X9.31 Appendix A.2.4 using
diff --git a/crypto/anubis.c b/crypto/anubis.c
index 4bb187c..6538c9a 100644
--- a/crypto/anubis.c
+++ b/crypto/anubis.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/api.c b/crypto/api.c
index 941cd4c..891f488 100644
--- a/crypto/api.c
+++ b/crypto/api.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Scatterlist Cryptographic API.
  *
@@ -53,6 +55,7 @@ EXPORT_SYMBOL_GPL(crypto_mod_put);
 
 static inline int crypto_is_test_larval(struct crypto_larval *larval)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return larval->alg.cra_driver_name[0];
 }
 
@@ -87,6 +90,7 @@ static struct crypto_alg *__crypto_alg_lookup(const char *name, u32 type,
 		best = q->cra_priority;
 		if (alg)
 			crypto_mod_put(alg);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alg = q;
 
 		if (exact)
@@ -112,7 +116,9 @@ struct crypto_larval *crypto_larval_alloc(const char *name, u32 type, u32 mask)
 
 	larval = kzalloc(sizeof(*larval), GFP_KERNEL);
 	if (!larval)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOMEM);
+}
 
 	larval->mask = mask;
 	larval->alg.cra_flags = CRYPTO_ALG_LARVAL | type;
@@ -134,8 +140,11 @@ static struct crypto_alg *crypto_larval_add(const char *name, u32 type,
 
 	larval = crypto_larval_alloc(name, type, mask);
 	if (IS_ERR(larval))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(larval);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	atomic_set(&larval->alg.cra_refcnt, 2);
 
 	down_write(&crypto_alg_sem);
@@ -147,11 +156,15 @@ static struct crypto_alg *crypto_larval_add(const char *name, u32 type,
 	up_write(&crypto_alg_sem);
 
 	if (alg != &larval->alg) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		kfree(larval);
 		if (crypto_is_larval(alg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			alg = crypto_larval_wait(alg);
+}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return alg;
 }
 
@@ -177,16 +190,24 @@ static struct crypto_alg *crypto_larval_wait(struct crypto_alg *alg)
 
 	alg = larval->adult;
 	if (timeout < 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alg = ERR_PTR(-EINTR);
+}
 	else if (!timeout)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alg = ERR_PTR(-ETIMEDOUT);
+}
 	else if (!alg)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alg = ERR_PTR(-ENOENT);
+}
 	else if (crypto_is_test_larval(larval) &&
 		 !(alg->cra_flags & CRYPTO_ALG_TESTED))
 		alg = ERR_PTR(-EAGAIN);
 	else if (!crypto_mod_get(alg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alg = ERR_PTR(-EAGAIN);
+}
 	crypto_mod_put(&larval->alg);
 
 	return alg;
@@ -209,7 +230,9 @@ struct crypto_alg *crypto_larval_lookup(const char *name, u32 type, u32 mask)
 	struct crypto_alg *alg;
 
 	if (!name)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(-ENOENT);
+}
 
 	type &= ~(CRYPTO_ALG_LARVAL | CRYPTO_ALG_DEAD);
 	mask &= ~(CRYPTO_ALG_LARVAL | CRYPTO_ALG_DEAD);
@@ -238,6 +261,7 @@ int crypto_probing_notify(unsigned long val, void *v)
 
 	ok = blocking_notifier_call_chain(&crypto_chain, val, v);
 	if (ok == NOTIFY_DONE) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		request_module("cryptomgr");
 		ok = blocking_notifier_call_chain(&crypto_chain, val, v);
 	}
@@ -269,13 +293,16 @@ struct crypto_alg *crypto_alg_mod_lookup(const char *name, u32 type, u32 mask)
 
 	larval = crypto_larval_lookup(name, type, mask);
 	if (IS_ERR(larval) || !crypto_is_larval(larval))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return larval;
+}
 
 	ok = crypto_probing_notify(CRYPTO_MSG_ALG_REQUEST, larval);
 
 	if (ok == NOTIFY_STOP)
 		alg = crypto_larval_wait(larval);
 	else {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_mod_put(larval);
 		alg = ERR_PTR(-ENOENT);
 	}
@@ -302,7 +329,9 @@ static int crypto_init_ops(struct crypto_tfm *tfm, u32 type, u32 mask)
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	BUG();
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -EINVAL;
 }
 
@@ -336,11 +365,13 @@ static unsigned int crypto_ctxsize(struct crypto_alg *alg, u32 type, u32 mask)
 		break;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return len;
 }
 
 void crypto_shoot_alg(struct crypto_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	down_write(&crypto_alg_sem);
 	alg->cra_flags |= CRYPTO_ALG_DYING;
 	up_write(&crypto_alg_sem);
@@ -374,7 +405,10 @@ struct crypto_tfm *__crypto_alloc_tfm(struct crypto_alg *alg, u32 type,
 	crypto_exit_ops(tfm);
 out_free_tfm:
 	if (err == -EAGAIN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_shoot_alg(alg);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(tfm);
 out_err:
 	tfm = ERR_PTR(err);
@@ -415,6 +449,7 @@ struct crypto_tfm *crypto_alloc_base(const char *alg_name, u32 type, u32 mask)
 
 		alg = crypto_alg_mod_lookup(alg_name, type, mask);
 		if (IS_ERR(alg)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(alg);
 			goto err;
 		}
@@ -471,7 +506,10 @@ void *crypto_create_tfm(struct crypto_alg *alg,
 	crypto_exit_ops(tfm);
 out_free_tfm:
 	if (err == -EAGAIN)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_shoot_alg(alg);
+}
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(mem);
 out_err:
 	mem = ERR_PTR(err);
@@ -494,7 +532,9 @@ struct crypto_alg *crypto_find_alg(const char *alg_name,
 		mask |= frontend->maskset;
 
 		if (frontend->lookup)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			lookup = frontend->lookup;
+}
 	}
 
 	return lookup(alg_name, type, mask);
@@ -532,26 +572,33 @@ void *crypto_alloc_tfm(const char *alg_name,
 
 		alg = crypto_find_alg(alg_name, frontend, type, mask);
 		if (IS_ERR(alg)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = PTR_ERR(alg);
 			goto err;
 		}
 
 		tfm = crypto_create_tfm(alg, frontend);
 		if (!IS_ERR(tfm))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return tfm;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_mod_put(alg);
 		err = PTR_ERR(tfm);
 
 err:
 		if (err != -EAGAIN)
 			break;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (fatal_signal_pending(current)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			err = -EINTR;
 			break;
 		}
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ERR_PTR(err);
 }
 EXPORT_SYMBOL_GPL(crypto_alloc_tfm);
@@ -569,12 +616,16 @@ void crypto_destroy_tfm(void *mem, struct crypto_tfm *tfm)
 	struct crypto_alg *alg;
 
 	if (unlikely(!mem))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	alg = tfm->__crt_alg;
 
 	if (!tfm->exit && alg->cra_exit)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alg->cra_exit(tfm);
+}
 	crypto_exit_ops(tfm);
 	crypto_mod_put(alg);
 	kzfree(mem);
@@ -587,6 +638,7 @@ int crypto_has_alg(const char *name, u32 type, u32 mask)
 	struct crypto_alg *alg = crypto_alg_mod_lookup(name, type, mask);
 
 	if (!IS_ERR(alg)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_mod_put(alg);
 		ret = 1;
 	}
diff --git a/crypto/arc4.c b/crypto/arc4.c
index f1a8192..5d6f2db 100644
--- a/crypto/arc4.c
+++ b/crypto/arc4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API
  *
@@ -29,6 +31,7 @@ struct arc4_ctx {
 static int arc4_set_key(struct crypto_tfm *tfm, const u8 *in_key,
 			unsigned int key_len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct arc4_ctx *ctx = crypto_tfm_ctx(tfm);
 	int i, j = 0, k = 0;
 
@@ -58,7 +61,9 @@ static void arc4_crypt(struct arc4_ctx *ctx, u8 *out, const u8 *in,
 	u32 ty, ta, tb;
 
 	if (len == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	x = ctx->x;
 	y = ctx->y;
@@ -89,12 +94,14 @@ static void arc4_crypt(struct arc4_ctx *ctx, u8 *out, const u8 *in,
 
 static void arc4_crypt_one(struct crypto_tfm *tfm, u8 *out, const u8 *in)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	arc4_crypt(crypto_tfm_ctx(tfm), out, in, 1);
 }
 
 static int ecb_arc4_crypt(struct blkcipher_desc *desc, struct scatterlist *dst,
 			  struct scatterlist *src, unsigned int nbytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct arc4_ctx *ctx = crypto_blkcipher_ctx(desc->tfm);
 	struct blkcipher_walk walk;
 	int err;
@@ -157,6 +164,7 @@ static int __init arc4_init(void)
 
 static void __exit arc4_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_algs(arc4_algs, ARRAY_SIZE(arc4_algs));
 }
 
diff --git a/crypto/asymmetric_keys/asymmetric_type.c b/crypto/asymmetric_keys/asymmetric_type.c
index 39aecad..f6346eb 100644
--- a/crypto/asymmetric_keys/asymmetric_type.c
+++ b/crypto/asymmetric_keys/asymmetric_type.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Asymmetric public-key cryptography key type
  *
  * See Documentation/security/asymmetric-keys.txt
diff --git a/crypto/asymmetric_keys/x509_public_key.c b/crypto/asymmetric_keys/x509_public_key.c
index 1bd0cf7..e8b9fa5 100644
--- a/crypto/asymmetric_keys/x509_public_key.c
+++ b/crypto/asymmetric_keys/x509_public_key.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Instantiate a public key crypto key from an X.509 Certificate
  *
  * Copyright (C) 2012 Red Hat, Inc. All Rights Reserved.
diff --git a/crypto/authenc.c b/crypto/authenc.c
index 875470b..32eee1f 100644
--- a/crypto/authenc.c
+++ b/crypto/authenc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Authenc: Simple AEAD wrapper for IPsec
  *
@@ -44,6 +46,7 @@ struct authenc_request_ctx {
 
 static void authenc_request_complete(struct aead_request *req, int err)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (err != -EINPROGRESS)
 		aead_request_complete(req, err);
 }
@@ -54,6 +57,7 @@ int crypto_authenc_extractkeys(struct crypto_authenc_keys *keys, const u8 *key,
 	struct rtattr *rta = (struct rtattr *)key;
 	struct crypto_authenc_key_param *param;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!RTA_OK(rta, keylen))
 		return -EINVAL;
 	if (rta->rta_type != CRYPTO_AUTHENC_KEYA_PARAM)
@@ -81,6 +85,7 @@ EXPORT_SYMBOL_GPL(crypto_authenc_extractkeys);
 static int crypto_authenc_setkey(struct crypto_aead *authenc, const u8 *key,
 				 unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_authenc_ctx *ctx = crypto_aead_ctx(authenc);
 	struct crypto_ahash *auth = ctx->auth;
 	struct crypto_skcipher *enc = ctx->enc;
@@ -137,6 +142,7 @@ static void authenc_geniv_ahash_done(struct crypto_async_request *areq, int err)
 
 static int crypto_authenc_genicv(struct aead_request *req, unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
 	struct aead_instance *inst = aead_alg_instance(authenc);
 	struct crypto_authenc_ctx *ctx = crypto_aead_ctx(authenc);
@@ -174,6 +180,7 @@ static void crypto_authenc_encrypt_done(struct crypto_async_request *req,
 	if (err)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = crypto_authenc_genicv(areq, 0);
 
 out:
@@ -182,6 +189,7 @@ static void crypto_authenc_encrypt_done(struct crypto_async_request *req,
 
 static int crypto_authenc_copy_assoc(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
 	struct crypto_authenc_ctx *ctx = crypto_aead_ctx(authenc);
 	SKCIPHER_REQUEST_ON_STACK(skreq, ctx->null);
@@ -197,6 +205,7 @@ static int crypto_authenc_copy_assoc(struct aead_request *req)
 
 static int crypto_authenc_encrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
 	struct aead_instance *inst = aead_alg_instance(authenc);
 	struct crypto_authenc_ctx *ctx = crypto_aead_ctx(authenc);
@@ -235,6 +244,7 @@ static int crypto_authenc_encrypt(struct aead_request *req)
 static int crypto_authenc_decrypt_tail(struct aead_request *req,
 				       unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
 	struct aead_instance *inst = aead_alg_instance(authenc);
 	struct crypto_authenc_ctx *ctx = crypto_aead_ctx(authenc);
@@ -275,6 +285,7 @@ static void authenc_verify_ahash_done(struct crypto_async_request *areq,
 	if (err)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = crypto_authenc_decrypt_tail(req, 0);
 
 out:
@@ -283,6 +294,7 @@ static void authenc_verify_ahash_done(struct crypto_async_request *areq,
 
 static int crypto_authenc_decrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
 	unsigned int authsize = crypto_aead_authsize(authenc);
 	struct aead_instance *inst = aead_alg_instance(authenc);
@@ -312,6 +324,7 @@ static int crypto_authenc_decrypt(struct aead_request *req)
 
 static int crypto_authenc_init_tfm(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_instance *inst = aead_alg_instance(tfm);
 	struct authenc_instance_ctx *ictx = aead_instance_ctx(inst);
 	struct crypto_authenc_ctx *ctx = crypto_aead_ctx(tfm);
@@ -359,6 +372,7 @@ static int crypto_authenc_init_tfm(struct crypto_aead *tfm)
 
 static void crypto_authenc_exit_tfm(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_authenc_ctx *ctx = crypto_aead_ctx(tfm);
 
 	crypto_free_ahash(ctx->auth);
@@ -368,6 +382,7 @@ static void crypto_authenc_exit_tfm(struct crypto_aead *tfm)
 
 static void crypto_authenc_free(struct aead_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct authenc_instance_ctx *ctx = aead_instance_ctx(inst);
 
 	crypto_drop_skcipher(&ctx->enc);
@@ -389,7 +404,9 @@ static int crypto_authenc_create(struct crypto_template *tmpl,
 
 	algt = crypto_get_attr_type(tb);
 	if (IS_ERR(algt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(algt);
+}
 
 	if ((algt->type ^ CRYPTO_ALG_TYPE_AEAD) & algt->mask)
 		return -EINVAL;
@@ -496,6 +513,7 @@ static int __init crypto_authenc_module_init(void)
 
 static void __exit crypto_authenc_module_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_template(&crypto_authenc_tmpl);
 }
 
diff --git a/crypto/authencesn.c b/crypto/authencesn.c
index 0cf5fef..0eb8472 100644
--- a/crypto/authencesn.c
+++ b/crypto/authencesn.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * authencesn.c - AEAD wrapper for IPsec with extended sequence numbers,
  *                 derived from authenc.c
@@ -47,6 +49,7 @@ struct authenc_esn_request_ctx {
 
 static void authenc_esn_request_complete(struct aead_request *req, int err)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (err != -EINPROGRESS)
 		aead_request_complete(req, err);
 }
@@ -54,6 +57,7 @@ static void authenc_esn_request_complete(struct aead_request *req, int err)
 static int crypto_authenc_esn_setauthsize(struct crypto_aead *authenc_esn,
 					  unsigned int authsize)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (authsize > 0 && authsize < 4)
 		return -EINVAL;
 
@@ -63,6 +67,7 @@ static int crypto_authenc_esn_setauthsize(struct crypto_aead *authenc_esn,
 static int crypto_authenc_esn_setkey(struct crypto_aead *authenc_esn, const u8 *key,
 				     unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_authenc_esn_ctx *ctx = crypto_aead_ctx(authenc_esn);
 	struct crypto_ahash *auth = ctx->auth;
 	struct crypto_skcipher *enc = ctx->enc;
@@ -100,6 +105,7 @@ static int crypto_authenc_esn_setkey(struct crypto_aead *authenc_esn, const u8 *
 static int crypto_authenc_esn_genicv_tail(struct aead_request *req,
 					  unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *authenc_esn = crypto_aead_reqtfm(req);
 	struct crypto_authenc_esn_ctx *ctx = crypto_aead_ctx(authenc_esn);
 	struct authenc_esn_request_ctx *areq_ctx = aead_request_ctx(req);
@@ -126,6 +132,7 @@ static void authenc_esn_geniv_ahash_done(struct crypto_async_request *areq,
 {
 	struct aead_request *req = areq->data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = err ?: crypto_authenc_esn_genicv_tail(req, 0);
 	aead_request_complete(req, err);
 }
@@ -133,6 +140,7 @@ static void authenc_esn_geniv_ahash_done(struct crypto_async_request *areq,
 static int crypto_authenc_esn_genicv(struct aead_request *req,
 				     unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *authenc_esn = crypto_aead_reqtfm(req);
 	struct authenc_esn_request_ctx *areq_ctx = aead_request_ctx(req);
 	struct crypto_authenc_esn_ctx *ctx = crypto_aead_ctx(authenc_esn);
@@ -173,13 +181,16 @@ static void crypto_authenc_esn_encrypt_done(struct crypto_async_request *req,
 	struct aead_request *areq = req->data;
 
 	if (!err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		err = crypto_authenc_esn_genicv(areq, 0);
+}
 
 	authenc_esn_request_complete(areq, err);
 }
 
 static int crypto_authenc_esn_copy(struct aead_request *req, unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *authenc_esn = crypto_aead_reqtfm(req);
 	struct crypto_authenc_esn_ctx *ctx = crypto_aead_ctx(authenc_esn);
 	SKCIPHER_REQUEST_ON_STACK(skreq, ctx->null);
@@ -194,6 +205,7 @@ static int crypto_authenc_esn_copy(struct aead_request *req, unsigned int len)
 
 static int crypto_authenc_esn_encrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *authenc_esn = crypto_aead_reqtfm(req);
 	struct authenc_esn_request_ctx *areq_ctx = aead_request_ctx(req);
 	struct crypto_authenc_esn_ctx *ctx = crypto_aead_ctx(authenc_esn);
@@ -233,6 +245,7 @@ static int crypto_authenc_esn_encrypt(struct aead_request *req)
 static int crypto_authenc_esn_decrypt_tail(struct aead_request *req,
 					   unsigned int flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *authenc_esn = crypto_aead_reqtfm(req);
 	unsigned int authsize = crypto_aead_authsize(authenc_esn);
 	struct authenc_esn_request_ctx *areq_ctx = aead_request_ctx(req);
@@ -277,12 +290,14 @@ static void authenc_esn_verify_ahash_done(struct crypto_async_request *areq,
 {
 	struct aead_request *req = areq->data;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = err ?: crypto_authenc_esn_decrypt_tail(req, 0);
 	aead_request_complete(req, err);
 }
 
 static int crypto_authenc_esn_decrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *authenc_esn = crypto_aead_reqtfm(req);
 	struct authenc_esn_request_ctx *areq_ctx = aead_request_ctx(req);
 	struct crypto_authenc_esn_ctx *ctx = crypto_aead_ctx(authenc_esn);
@@ -335,6 +350,7 @@ static int crypto_authenc_esn_decrypt(struct aead_request *req)
 
 static int crypto_authenc_esn_init_tfm(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_instance *inst = aead_alg_instance(tfm);
 	struct authenc_esn_instance_ctx *ictx = aead_instance_ctx(inst);
 	struct crypto_authenc_esn_ctx *ctx = crypto_aead_ctx(tfm);
@@ -385,6 +401,7 @@ static int crypto_authenc_esn_init_tfm(struct crypto_aead *tfm)
 
 static void crypto_authenc_esn_exit_tfm(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_authenc_esn_ctx *ctx = crypto_aead_ctx(tfm);
 
 	crypto_free_ahash(ctx->auth);
@@ -394,6 +411,7 @@ static void crypto_authenc_esn_exit_tfm(struct crypto_aead *tfm)
 
 static void crypto_authenc_esn_free(struct aead_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct authenc_esn_instance_ctx *ctx = aead_instance_ctx(inst);
 
 	crypto_drop_skcipher(&ctx->enc);
@@ -415,7 +433,9 @@ static int crypto_authenc_esn_create(struct crypto_template *tmpl,
 
 	algt = crypto_get_attr_type(tb);
 	if (IS_ERR(algt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(algt);
+}
 
 	if ((algt->type ^ CRYPTO_ALG_TYPE_AEAD) & algt->mask)
 		return -EINVAL;
@@ -519,6 +539,7 @@ static int __init crypto_authenc_esn_module_init(void)
 
 static void __exit crypto_authenc_esn_module_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_template(&crypto_authenc_esn_tmpl);
 }
 
diff --git a/crypto/blkcipher.c b/crypto/blkcipher.c
index 6c43a0a..26785ab 100644
--- a/crypto/blkcipher.c
+++ b/crypto/blkcipher.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Block chaining cipher operations.
  *
@@ -44,21 +46,25 @@ static int blkcipher_walk_first(struct blkcipher_desc *desc,
 
 static inline void blkcipher_map_src(struct blkcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->src.virt.addr = scatterwalk_map(&walk->in);
 }
 
 static inline void blkcipher_map_dst(struct blkcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->dst.virt.addr = scatterwalk_map(&walk->out);
 }
 
 static inline void blkcipher_unmap_src(struct blkcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scatterwalk_unmap(walk->src.virt.addr);
 }
 
 static inline void blkcipher_unmap_dst(struct blkcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	scatterwalk_unmap(walk->dst.virt.addr);
 }
 
@@ -68,6 +74,7 @@ static inline void blkcipher_unmap_dst(struct blkcipher_walk *walk)
 static inline u8 *blkcipher_get_spot(u8 *start, unsigned int len)
 {
 	u8 *end_page = (u8 *)(((unsigned long)(start + len - 1)) & PAGE_MASK);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return max(start, end_page);
 }
 
@@ -85,6 +92,7 @@ static inline unsigned int blkcipher_done_slow(struct blkcipher_walk *walk,
 static inline unsigned int blkcipher_done_fast(struct blkcipher_walk *walk,
 					       unsigned int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (walk->flags & BLKCIPHER_WALK_COPY) {
 		blkcipher_map_dst(walk);
 		memcpy(walk->dst.virt.addr, walk->page, n);
@@ -110,7 +118,9 @@ int blkcipher_walk_done(struct blkcipher_desc *desc,
 		unsigned int n = walk->nbytes - err;
 
 		if (likely(!(walk->flags & BLKCIPHER_WALK_SLOW)))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			n = blkcipher_done_fast(walk, n);
+}
 		else if (WARN_ON(err)) {
 			err = -EINVAL;
 			goto err;
@@ -155,6 +165,7 @@ static inline int blkcipher_next_slow(struct blkcipher_desc *desc,
 	if (walk->buffer)
 		goto ok;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->buffer = walk->page;
 	if (walk->buffer)
 		goto ok;
@@ -185,6 +196,7 @@ static inline int blkcipher_next_copy(struct blkcipher_walk *walk)
 	u8 *tmp = walk->page;
 
 	blkcipher_map_src(walk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(tmp, walk->src.virt.addr, walk->nbytes);
 	blkcipher_unmap_src(walk);
 
@@ -205,7 +217,9 @@ static inline int blkcipher_next_fast(struct blkcipher_desc *desc,
 	walk->dst.phys.offset = offset_in_page(walk->out.offset);
 
 	if (walk->flags & BLKCIPHER_WALK_PHYS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	diff = walk->src.phys.offset - walk->dst.phys.offset;
 	diff |= walk->src.virt.page - walk->dst.virt.page;
@@ -230,6 +244,7 @@ static int blkcipher_walk_next(struct blkcipher_desc *desc,
 
 	n = walk->total;
 	if (unlikely(n < walk->cipher_blocksize)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		desc->flags |= CRYPTO_TFM_RES_BAD_BLOCK_LEN;
 		return blkcipher_walk_done(desc, walk, -EINVAL);
 	}
@@ -300,6 +315,7 @@ static inline int blkcipher_copy_iv(struct blkcipher_walk *walk)
 int blkcipher_walk_virt(struct blkcipher_desc *desc,
 			struct blkcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->flags &= ~BLKCIPHER_WALK_PHYS;
 	walk->walk_blocksize = crypto_blkcipher_blocksize(desc->tfm);
 	walk->cipher_blocksize = walk->walk_blocksize;
@@ -312,6 +328,7 @@ EXPORT_SYMBOL_GPL(blkcipher_walk_virt);
 int blkcipher_walk_phys(struct blkcipher_desc *desc,
 			struct blkcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->flags |= BLKCIPHER_WALK_PHYS;
 	walk->walk_blocksize = crypto_blkcipher_blocksize(desc->tfm);
 	walk->cipher_blocksize = walk->walk_blocksize;
@@ -324,6 +341,7 @@ EXPORT_SYMBOL_GPL(blkcipher_walk_phys);
 static int blkcipher_walk_first(struct blkcipher_desc *desc,
 				struct blkcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON_ONCE(in_irq()))
 		return -EDEADLK;
 
@@ -350,6 +368,7 @@ int blkcipher_walk_virt_block(struct blkcipher_desc *desc,
 			      struct blkcipher_walk *walk,
 			      unsigned int blocksize)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->flags &= ~BLKCIPHER_WALK_PHYS;
 	walk->walk_blocksize = blocksize;
 	walk->cipher_blocksize = crypto_blkcipher_blocksize(desc->tfm);
@@ -364,6 +383,7 @@ int blkcipher_aead_walk_virt_block(struct blkcipher_desc *desc,
 				   struct crypto_aead *tfm,
 				   unsigned int blocksize)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->flags &= ~BLKCIPHER_WALK_PHYS;
 	walk->walk_blocksize = blocksize;
 	walk->cipher_blocksize = crypto_aead_blocksize(tfm);
@@ -385,7 +405,9 @@ static int setkey_unaligned(struct crypto_tfm *tfm, const u8 *key,
 	absize = keylen + alignmask;
 	buffer = kmalloc(absize, GFP_ATOMIC);
 	if (!buffer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	alignbuffer = (u8 *)ALIGN((unsigned long)buffer, alignmask + 1);
 	memcpy(alignbuffer, key, keylen);
@@ -400,6 +422,7 @@ static int setkey(struct crypto_tfm *tfm, const u8 *key, unsigned int keylen)
 	struct blkcipher_alg *cipher = &tfm->__crt_alg->cra_blkcipher;
 	unsigned long alignmask = crypto_tfm_alg_alignmask(tfm);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (keylen < cipher->min_keysize || keylen > cipher->max_keysize) {
 		tfm->crt_flags |= CRYPTO_TFM_RES_BAD_KEY_LEN;
 		return -EINVAL;
@@ -414,6 +437,7 @@ static int setkey(struct crypto_tfm *tfm, const u8 *key, unsigned int keylen)
 static int async_setkey(struct crypto_ablkcipher *tfm, const u8 *key,
 			unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return setkey(crypto_ablkcipher_tfm(tfm), key, keylen);
 }
 
@@ -497,7 +521,9 @@ static int crypto_init_blkcipher_ops(struct crypto_tfm *tfm, u32 type, u32 mask)
 	struct blkcipher_alg *alg = &tfm->__crt_alg->cra_blkcipher;
 
 	if (alg->ivsize > PAGE_SIZE / 8)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	if ((mask & CRYPTO_ALG_TYPE_MASK) == CRYPTO_ALG_TYPE_MASK)
 		return crypto_init_blkcipher_ops_sync(tfm);
@@ -511,6 +537,7 @@ static int crypto_blkcipher_report(struct sk_buff *skb, struct crypto_alg *alg)
 	struct crypto_report_blkcipher rblkcipher;
 
 	strncpy(rblkcipher.type, "blkcipher", sizeof(rblkcipher.type));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	strncpy(rblkcipher.geniv, alg->cra_blkcipher.geniv ?: "<default>",
 		sizeof(rblkcipher.geniv));
 
@@ -538,6 +565,7 @@ static void crypto_blkcipher_show(struct seq_file *m, struct crypto_alg *alg)
 	__maybe_unused;
 static void crypto_blkcipher_show(struct seq_file *m, struct crypto_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_printf(m, "type         : blkcipher\n");
 	seq_printf(m, "blocksize    : %u\n", alg->cra_blocksize);
 	seq_printf(m, "min keysize  : %u\n", alg->cra_blkcipher.min_keysize);
diff --git a/crypto/blowfish_generic.c b/crypto/blowfish_generic.c
index 87b392a..e5169e6 100644
--- a/crypto/blowfish_generic.c
+++ b/crypto/blowfish_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/camellia_generic.c b/crypto/camellia_generic.c
index a02286b..2955b3e 100644
--- a/crypto/camellia_generic.c
+++ b/crypto/camellia_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C) 2006
  * NTT (Nippon Telegraph and Telephone Corporation).
diff --git a/crypto/cast5_generic.c b/crypto/cast5_generic.c
index df5c726..50a784a 100644
--- a/crypto/cast5_generic.c
+++ b/crypto/cast5_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel cryptographic api.
 * cast5.c - Cast5 cipher algorithm (rfc2144).
 *
diff --git a/crypto/cast6_generic.c b/crypto/cast6_generic.c
index 058c8d7..a97aec1 100644
--- a/crypto/cast6_generic.c
+++ b/crypto/cast6_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* Kernel cryptographic api.
  * cast6.c - Cast6 cipher algorithm [rfc2612].
  *
diff --git a/crypto/cbc.c b/crypto/cbc.c
index b761b1f..0344c89 100644
--- a/crypto/cbc.c
+++ b/crypto/cbc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * CBC: Cipher Block Chaining mode
  *
@@ -27,6 +29,7 @@ struct crypto_cbc_ctx {
 static int crypto_cbc_setkey(struct crypto_skcipher *parent, const u8 *key,
 			     unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_cbc_ctx *ctx = crypto_skcipher_ctx(parent);
 	struct crypto_cipher *child = ctx->child;
 	int err;
@@ -43,6 +46,7 @@ static int crypto_cbc_setkey(struct crypto_skcipher *parent, const u8 *key,
 static inline void crypto_cbc_encrypt_one(struct crypto_skcipher *tfm,
 					  const u8 *src, u8 *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_cbc_ctx *ctx = crypto_skcipher_ctx(tfm);
 
 	crypto_cipher_encrypt_one(ctx->child, dst, src);
@@ -50,12 +54,14 @@ static inline void crypto_cbc_encrypt_one(struct crypto_skcipher *tfm,
 
 static int crypto_cbc_encrypt(struct skcipher_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_cbc_encrypt_walk(req, crypto_cbc_encrypt_one);
 }
 
 static inline void crypto_cbc_decrypt_one(struct crypto_skcipher *tfm,
 					  const u8 *src, u8 *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_cbc_ctx *ctx = crypto_skcipher_ctx(tfm);
 
 	crypto_cipher_decrypt_one(ctx->child, dst, src);
@@ -63,6 +69,7 @@ static inline void crypto_cbc_decrypt_one(struct crypto_skcipher *tfm,
 
 static int crypto_cbc_decrypt(struct skcipher_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
 	struct skcipher_walk walk;
 	int err;
@@ -80,6 +87,7 @@ static int crypto_cbc_decrypt(struct skcipher_request *req)
 
 static int crypto_cbc_init_tfm(struct crypto_skcipher *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct skcipher_instance *inst = skcipher_alg_instance(tfm);
 	struct crypto_spawn *spawn = skcipher_instance_ctx(inst);
 	struct crypto_cbc_ctx *ctx = crypto_skcipher_ctx(tfm);
@@ -87,7 +95,9 @@ static int crypto_cbc_init_tfm(struct crypto_skcipher *tfm)
 
 	cipher = crypto_spawn_cipher(spawn);
 	if (IS_ERR(cipher))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(cipher);
+}
 
 	ctx->child = cipher;
 	return 0;
@@ -95,6 +105,7 @@ static int crypto_cbc_init_tfm(struct crypto_skcipher *tfm)
 
 static void crypto_cbc_exit_tfm(struct crypto_skcipher *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_cbc_ctx *ctx = crypto_skcipher_ctx(tfm);
 
 	crypto_free_cipher(ctx->child);
@@ -102,6 +113,7 @@ static void crypto_cbc_exit_tfm(struct crypto_skcipher *tfm)
 
 static void crypto_cbc_free(struct skcipher_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_drop_skcipher(skcipher_instance_ctx(inst));
 	kfree(inst);
 }
@@ -117,11 +129,15 @@ static int crypto_cbc_create(struct crypto_template *tmpl, struct rtattr **tb)
 
 	err = crypto_check_attr_type(tb, CRYPTO_ALG_TYPE_SKCIPHER);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	inst = kzalloc(sizeof(*inst) + sizeof(*spawn), GFP_KERNEL);
 	if (!inst)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	algt = crypto_get_attr_type(tb);
 	err = PTR_ERR(algt);
@@ -137,6 +153,7 @@ static int crypto_cbc_create(struct crypto_template *tmpl, struct rtattr **tb)
 	if (IS_ERR(alg))
 		goto err_free_inst;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	spawn = skcipher_instance_ctx(inst);
 	err = crypto_init_spawn(spawn, alg, skcipher_crypto_instance(inst),
 				CRYPTO_ALG_TYPE_MASK);
@@ -148,6 +165,7 @@ static int crypto_cbc_create(struct crypto_template *tmpl, struct rtattr **tb)
 	if (err)
 		goto err_drop_spawn;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	err = -EINVAL;
 	if (!is_power_of_2(alg->cra_blocksize))
 		goto err_drop_spawn;
@@ -198,6 +216,7 @@ static int __init crypto_cbc_module_init(void)
 
 static void __exit crypto_cbc_module_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_template(&crypto_cbc_tmpl);
 }
 
diff --git a/crypto/ccm.c b/crypto/ccm.c
index 0a08334..d6da480 100644
--- a/crypto/ccm.c
+++ b/crypto/ccm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * CCM: Counter with CBC-MAC
  *
@@ -64,6 +66,7 @@ struct cbcmac_desc_ctx {
 static inline struct crypto_ccm_req_priv_ctx *crypto_ccm_reqctx(
 	struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long align = crypto_aead_alignmask(crypto_aead_reqtfm(req));
 
 	return (void *)PTR_ALIGN((u8 *)aead_request_ctx(req), align + 1);
@@ -77,7 +80,9 @@ static int set_msg_len(u8 *block, unsigned int msglen, int csize)
 	block += csize;
 
 	if (csize >= 4)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		csize = 4;
+}
 	else if (msglen > (1 << (8 * csize)))
 		return -EOVERFLOW;
 
@@ -90,6 +95,7 @@ static int set_msg_len(u8 *block, unsigned int msglen, int csize)
 static int crypto_ccm_setkey(struct crypto_aead *aead, const u8 *key,
 			     unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ccm_ctx *ctx = crypto_aead_ctx(aead);
 	struct crypto_skcipher *ctr = ctx->ctr;
 	struct crypto_ahash *mac = ctx->mac;
@@ -118,6 +124,7 @@ static int crypto_ccm_setkey(struct crypto_aead *aead, const u8 *key,
 static int crypto_ccm_setauthsize(struct crypto_aead *tfm,
 				  unsigned int authsize)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (authsize) {
 	case 4:
 	case 6:
@@ -137,6 +144,7 @@ static int crypto_ccm_setauthsize(struct crypto_aead *tfm,
 static int format_input(u8 *info, struct aead_request *req,
 			unsigned int cryptlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *aead = crypto_aead_reqtfm(req);
 	unsigned int lp = req->iv[0];
 	unsigned int l = lp + 1;
@@ -164,6 +172,7 @@ static int format_adata(u8 *adata, unsigned int a)
 	 * RFC 3610 and NIST Special Publication 800-38C
 	 */
 	if (a < 65280) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		*(__be16 *)adata = cpu_to_be16(a);
 		len = 2;
 	} else  {
@@ -178,6 +187,7 @@ static int format_adata(u8 *adata, unsigned int a)
 static int crypto_ccm_auth(struct aead_request *req, struct scatterlist *plain,
 			   unsigned int cryptlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);
 	struct crypto_aead *aead = crypto_aead_reqtfm(req);
 	struct crypto_ccm_ctx *ctx = crypto_aead_ctx(aead);
@@ -259,6 +269,7 @@ static inline int crypto_ccm_check_iv(const u8 *iv)
 
 static int crypto_ccm_init_crypt(struct aead_request *req, u8 *tag)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);
 	struct scatterlist *sg;
 	u8 *iv = req->iv;
@@ -294,6 +305,7 @@ static int crypto_ccm_init_crypt(struct aead_request *req, u8 *tag)
 
 static int crypto_ccm_encrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *aead = crypto_aead_reqtfm(req);
 	struct crypto_ccm_ctx *ctx = crypto_aead_ctx(aead);
 	struct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);
@@ -342,6 +354,7 @@ static void crypto_ccm_decrypt_done(struct crypto_async_request *areq,
 
 	pctx->flags = 0;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	dst = sg_next(req->src == req->dst ? pctx->src : pctx->dst);
 
 	if (!err) {
@@ -354,6 +367,7 @@ static void crypto_ccm_decrypt_done(struct crypto_async_request *areq,
 
 static int crypto_ccm_decrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *aead = crypto_aead_reqtfm(req);
 	struct crypto_ccm_ctx *ctx = crypto_aead_ctx(aead);
 	struct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);
@@ -402,6 +416,7 @@ static int crypto_ccm_decrypt(struct aead_request *req)
 
 static int crypto_ccm_init_tfm(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_instance *inst = aead_alg_instance(tfm);
 	struct ccm_instance_ctx *ictx = aead_instance_ctx(inst);
 	struct crypto_ccm_ctx *ctx = crypto_aead_ctx(tfm);
@@ -438,6 +453,7 @@ static int crypto_ccm_init_tfm(struct crypto_aead *tfm)
 
 static void crypto_ccm_exit_tfm(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ccm_ctx *ctx = crypto_aead_ctx(tfm);
 
 	crypto_free_ahash(ctx->mac);
@@ -446,6 +462,7 @@ static void crypto_ccm_exit_tfm(struct crypto_aead *tfm)
 
 static void crypto_ccm_free(struct aead_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ccm_instance_ctx *ctx = aead_instance_ctx(inst);
 
 	crypto_drop_ahash(&ctx->mac);
@@ -469,7 +486,9 @@ static int crypto_ccm_create_common(struct crypto_template *tmpl,
 
 	algt = crypto_get_attr_type(tb);
 	if (IS_ERR(algt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(algt);
+}
 
 	if ((algt->type ^ CRYPTO_ALG_TYPE_AEAD) & algt->mask)
 		return -EINVAL;
@@ -568,7 +587,9 @@ static int crypto_ccm_create(struct crypto_template *tmpl, struct rtattr **tb)
 
 	cipher_name = crypto_attr_alg_name(tb[1]);
 	if (IS_ERR(cipher_name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(cipher_name);
+}
 
 	if (snprintf(ctr_name, CRYPTO_MAX_ALG_NAME, "ctr(%s)",
 		     cipher_name) >= CRYPTO_MAX_ALG_NAME)
@@ -601,7 +622,9 @@ static int crypto_ccm_base_create(struct crypto_template *tmpl,
 
 	ctr_name = crypto_attr_alg_name(tb[1]);
 	if (IS_ERR(ctr_name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(ctr_name);
+}
 
 	cipher_name = crypto_attr_alg_name(tb[2]);
 	if (IS_ERR(cipher_name))
@@ -624,6 +647,7 @@ static struct crypto_template crypto_ccm_base_tmpl = {
 static int crypto_rfc4309_setkey(struct crypto_aead *parent, const u8 *key,
 				 unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc4309_ctx *ctx = crypto_aead_ctx(parent);
 	struct crypto_aead *child = ctx->child;
 	int err;
@@ -647,6 +671,7 @@ static int crypto_rfc4309_setkey(struct crypto_aead *parent, const u8 *key,
 static int crypto_rfc4309_setauthsize(struct crypto_aead *parent,
 				      unsigned int authsize)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc4309_ctx *ctx = crypto_aead_ctx(parent);
 
 	switch (authsize) {
@@ -663,6 +688,7 @@ static int crypto_rfc4309_setauthsize(struct crypto_aead *parent,
 
 static struct aead_request *crypto_rfc4309_crypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc4309_req_ctx *rctx = aead_request_ctx(req);
 	struct aead_request *subreq = &rctx->subreq;
 	struct crypto_aead *aead = crypto_aead_reqtfm(req);
@@ -707,6 +733,7 @@ static struct aead_request *crypto_rfc4309_crypt(struct aead_request *req)
 
 static int crypto_rfc4309_encrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (req->assoclen != 16 && req->assoclen != 20)
 		return -EINVAL;
 
@@ -717,6 +744,7 @@ static int crypto_rfc4309_encrypt(struct aead_request *req)
 
 static int crypto_rfc4309_decrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (req->assoclen != 16 && req->assoclen != 20)
 		return -EINVAL;
 
@@ -727,6 +755,7 @@ static int crypto_rfc4309_decrypt(struct aead_request *req)
 
 static int crypto_rfc4309_init_tfm(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_instance *inst = aead_alg_instance(tfm);
 	struct crypto_aead_spawn *spawn = aead_instance_ctx(inst);
 	struct crypto_rfc4309_ctx *ctx = crypto_aead_ctx(tfm);
@@ -752,6 +781,7 @@ static int crypto_rfc4309_init_tfm(struct crypto_aead *tfm)
 
 static void crypto_rfc4309_exit_tfm(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc4309_ctx *ctx = crypto_aead_ctx(tfm);
 
 	crypto_free_aead(ctx->child);
@@ -759,6 +789,7 @@ static void crypto_rfc4309_exit_tfm(struct crypto_aead *tfm)
 
 static void crypto_rfc4309_free(struct aead_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_drop_aead(aead_instance_ctx(inst));
 	kfree(inst);
 }
@@ -775,7 +806,9 @@ static int crypto_rfc4309_create(struct crypto_template *tmpl,
 
 	algt = crypto_get_attr_type(tb);
 	if (IS_ERR(algt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(algt);
+}
 
 	if ((algt->type ^ CRYPTO_ALG_TYPE_AEAD) & algt->mask)
 		return -EINVAL;
@@ -860,6 +893,7 @@ static struct crypto_template crypto_rfc4309_tmpl = {
 static int crypto_cbcmac_digest_setkey(struct crypto_shash *parent,
 				     const u8 *inkey, unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cbcmac_tfm_ctx *ctx = crypto_shash_ctx(parent);
 
 	return crypto_cipher_setkey(ctx->child, inkey, keylen);
@@ -867,6 +901,7 @@ static int crypto_cbcmac_digest_setkey(struct crypto_shash *parent,
 
 static int crypto_cbcmac_digest_init(struct shash_desc *pdesc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cbcmac_desc_ctx *ctx = shash_desc_ctx(pdesc);
 	int bs = crypto_shash_digestsize(pdesc->tfm);
 	u8 *dg = (u8 *)ctx + crypto_shash_descsize(pdesc->tfm) - bs;
@@ -887,6 +922,7 @@ static int crypto_cbcmac_digest_update(struct shash_desc *pdesc, const u8 *p,
 	int bs = crypto_shash_digestsize(parent);
 	u8 *dg = (u8 *)ctx + crypto_shash_descsize(parent) - bs;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (len > 0) {
 		unsigned int l = min(len, bs - ctx->len);
 
@@ -914,7 +950,9 @@ static int crypto_cbcmac_digest_final(struct shash_desc *pdesc, u8 *out)
 	u8 *dg = (u8 *)ctx + crypto_shash_descsize(parent) - bs;
 
 	if (ctx->len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_cipher_encrypt_one(tfm, dg, dg);
+}
 
 	memcpy(out, dg, bs);
 	return 0;
@@ -929,7 +967,9 @@ static int cbcmac_init_tfm(struct crypto_tfm *tfm)
 
 	cipher = crypto_spawn_cipher(spawn);
 	if (IS_ERR(cipher))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(cipher);
+}
 
 	ctx->child = cipher;
 
@@ -938,6 +978,7 @@ static int cbcmac_init_tfm(struct crypto_tfm *tfm)
 
 static void cbcmac_exit_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cbcmac_tfm_ctx *ctx = crypto_tfm_ctx(tfm);
 	crypto_free_cipher(ctx->child);
 }
@@ -950,7 +991,9 @@ static int cbcmac_create(struct crypto_template *tmpl, struct rtattr **tb)
 
 	err = crypto_check_attr_type(tb, CRYPTO_ALG_TYPE_SHASH);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	alg = crypto_get_attr_alg(tb, CRYPTO_ALG_TYPE_CIPHER,
 				  CRYPTO_ALG_TYPE_MASK);
@@ -1037,6 +1080,7 @@ static int __init crypto_ccm_module_init(void)
 
 static void __exit crypto_ccm_module_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_template(&crypto_rfc4309_tmpl);
 	crypto_unregister_template(&crypto_ccm_tmpl);
 	crypto_unregister_template(&crypto_ccm_base_tmpl);
diff --git a/crypto/chacha20_generic.c b/crypto/chacha20_generic.c
index 4a45fa4..345ad84 100644
--- a/crypto/chacha20_generic.c
+++ b/crypto/chacha20_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ChaCha20 256-bit cipher algorithm, RFC7539
  *
diff --git a/crypto/chacha20poly1305.c b/crypto/chacha20poly1305.c
index 600afa9..91ed1c3 100644
--- a/crypto/chacha20poly1305.c
+++ b/crypto/chacha20poly1305.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ChaCha20-Poly1305 AEAD, RFC7539
  *
diff --git a/crypto/cipher.c b/crypto/cipher.c
index 94fa355..fb50588 100644
--- a/crypto/cipher.c
+++ b/crypto/cipher.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
@@ -32,7 +34,9 @@ static int setkey_unaligned(struct crypto_tfm *tfm, const u8 *key,
 	absize = keylen + alignmask;
 	buffer = kmalloc(absize, GFP_ATOMIC);
 	if (!buffer)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	alignbuffer = (u8 *)ALIGN((unsigned long)buffer, alignmask + 1);
 	memcpy(alignbuffer, key, keylen);
@@ -49,6 +53,7 @@ static int setkey(struct crypto_tfm *tfm, const u8 *key, unsigned int keylen)
 	unsigned long alignmask = crypto_tfm_alg_alignmask(tfm);
 
 	tfm->crt_flags &= ~CRYPTO_TFM_RES_MASK;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (keylen < cia->cia_min_keysize || keylen > cia->cia_max_keysize) {
 		tfm->crt_flags |= CRYPTO_TFM_RES_BAD_KEY_LEN;
 		return -EINVAL;
@@ -65,6 +70,7 @@ static void cipher_crypt_unaligned(void (*fn)(struct crypto_tfm *, u8 *,
 				   struct crypto_tfm *tfm,
 				   u8 *dst, const u8 *src)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long alignmask = crypto_tfm_alg_alignmask(tfm);
 	unsigned int size = crypto_tfm_alg_blocksize(tfm);
 	u8 buffer[size + alignmask];
@@ -78,6 +84,7 @@ static void cipher_crypt_unaligned(void (*fn)(struct crypto_tfm *, u8 *,
 static void cipher_encrypt_unaligned(struct crypto_tfm *tfm,
 				     u8 *dst, const u8 *src)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long alignmask = crypto_tfm_alg_alignmask(tfm);
 	struct cipher_alg *cipher = &tfm->__crt_alg->cra_cipher;
 
@@ -92,6 +99,7 @@ static void cipher_encrypt_unaligned(struct crypto_tfm *tfm,
 static void cipher_decrypt_unaligned(struct crypto_tfm *tfm,
 				     u8 *dst, const u8 *src)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long alignmask = crypto_tfm_alg_alignmask(tfm);
 	struct cipher_alg *cipher = &tfm->__crt_alg->cra_cipher;
 
diff --git a/crypto/cmac.c b/crypto/cmac.c
index 16301f5..5fdf638 100644
--- a/crypto/cmac.c
+++ b/crypto/cmac.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * CMAC: Cipher Block Mode for Authentication
  *
@@ -54,6 +56,7 @@ struct cmac_desc_ctx {
 static int crypto_cmac_digest_setkey(struct crypto_shash *parent,
 				     const u8 *inkey, unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long alignmask = crypto_shash_alignmask(parent);
 	struct cmac_tfm_ctx *ctx = crypto_shash_ctx(parent);
 	unsigned int bs = crypto_shash_blocksize(parent);
@@ -108,6 +111,7 @@ static int crypto_cmac_digest_setkey(struct crypto_shash *parent,
 
 static int crypto_cmac_digest_init(struct shash_desc *pdesc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long alignmask = crypto_shash_alignmask(pdesc->tfm);
 	struct cmac_desc_ctx *ctx = shash_desc_ctx(pdesc);
 	int bs = crypto_shash_blocksize(pdesc->tfm);
@@ -133,6 +137,7 @@ static int crypto_cmac_digest_update(struct shash_desc *pdesc, const u8 *p,
 
 	/* checking the data can fill the block */
 	if ((ctx->len + len) <= bs) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		memcpy(odds + ctx->len, p, len);
 		ctx->len += len;
 		return 0;
@@ -189,7 +194,9 @@ static int crypto_cmac_digest_final(struct shash_desc *pdesc, u8 *out)
 
 		rlen = bs - ctx->len - 1;
 		if (rlen)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			memset(p, 0, rlen);
+}
 
 		offset += bs;
 	}
@@ -211,7 +218,9 @@ static int cmac_init_tfm(struct crypto_tfm *tfm)
 
 	cipher = crypto_spawn_cipher(spawn);
 	if (IS_ERR(cipher))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(cipher);
+}
 
 	ctx->child = cipher;
 
@@ -220,6 +229,7 @@ static int cmac_init_tfm(struct crypto_tfm *tfm)
 
 static void cmac_exit_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct cmac_tfm_ctx *ctx = crypto_tfm_ctx(tfm);
 	crypto_free_cipher(ctx->child);
 }
@@ -233,7 +243,9 @@ static int cmac_create(struct crypto_template *tmpl, struct rtattr **tb)
 
 	err = crypto_check_attr_type(tb, CRYPTO_ALG_TYPE_SHASH);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	alg = crypto_get_attr_alg(tb, CRYPTO_ALG_TYPE_CIPHER,
 				  CRYPTO_ALG_TYPE_MASK);
@@ -310,6 +322,7 @@ static int __init crypto_cmac_module_init(void)
 
 static void __exit crypto_cmac_module_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_template(&crypto_cmac_tmpl);
 }
 
diff --git a/crypto/crc32_generic.c b/crypto/crc32_generic.c
index 718cbce..b1b90d8 100644
--- a/crypto/crc32_generic.c
+++ b/crypto/crc32_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* GPL HEADER START
  *
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
diff --git a/crypto/crc32c_generic.c b/crypto/crc32c_generic.c
index 3723203..521e569 100644
--- a/crypto/crc32c_generic.c
+++ b/crypto/crc32c_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
@@ -60,6 +62,7 @@ struct chksum_desc_ctx {
 
 static int chksum_init(struct shash_desc *desc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct chksum_ctx *mctx = crypto_shash_ctx(desc->tfm);
 	struct chksum_desc_ctx *ctx = shash_desc_ctx(desc);
 
@@ -76,6 +79,7 @@ static int chksum_init(struct shash_desc *desc)
 static int chksum_setkey(struct crypto_shash *tfm, const u8 *key,
 			 unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct chksum_ctx *mctx = crypto_shash_ctx(tfm);
 
 	if (keylen != sizeof(mctx->key)) {
@@ -89,6 +93,7 @@ static int chksum_setkey(struct crypto_shash *tfm, const u8 *key,
 static int chksum_update(struct shash_desc *desc, const u8 *data,
 			 unsigned int length)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct chksum_desc_ctx *ctx = shash_desc_ctx(desc);
 
 	ctx->crc = __crc32c_le(ctx->crc, data, length);
@@ -97,6 +102,7 @@ static int chksum_update(struct shash_desc *desc, const u8 *data,
 
 static int chksum_final(struct shash_desc *desc, u8 *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct chksum_desc_ctx *ctx = shash_desc_ctx(desc);
 
 	*(__le32 *)out = ~cpu_to_le32p(&ctx->crc);
@@ -105,6 +111,7 @@ static int chksum_final(struct shash_desc *desc, u8 *out)
 
 static int __chksum_finup(u32 *crcp, const u8 *data, unsigned int len, u8 *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	*(__le32 *)out = ~cpu_to_le32(__crc32c_le(*crcp, data, len));
 	return 0;
 }
@@ -112,6 +119,7 @@ static int __chksum_finup(u32 *crcp, const u8 *data, unsigned int len, u8 *out)
 static int chksum_finup(struct shash_desc *desc, const u8 *data,
 			unsigned int len, u8 *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct chksum_desc_ctx *ctx = shash_desc_ctx(desc);
 
 	return __chksum_finup(&ctx->crc, data, len, out);
@@ -120,6 +128,7 @@ static int chksum_finup(struct shash_desc *desc, const u8 *data,
 static int chksum_digest(struct shash_desc *desc, const u8 *data,
 			 unsigned int length, u8 *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct chksum_ctx *mctx = crypto_shash_ctx(desc->tfm);
 
 	return __chksum_finup(&mctx->key, data, length, out);
@@ -127,6 +136,7 @@ static int chksum_digest(struct shash_desc *desc, const u8 *data,
 
 static int crc32c_cra_init(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct chksum_ctx *mctx = crypto_tfm_ctx(tfm);
 
 	mctx->key = ~0;
@@ -162,6 +172,7 @@ static int __init crc32c_mod_init(void)
 
 static void __exit crc32c_mod_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_shash(&alg);
 }
 
diff --git a/crypto/crct10dif_generic.c b/crypto/crct10dif_generic.c
index 8e94e29..9afb6c9 100644
--- a/crypto/crct10dif_generic.c
+++ b/crypto/crct10dif_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/cryptd.c b/crypto/cryptd.c
index 248f6ba..c3b9c6b 100644
--- a/crypto/cryptd.c
+++ b/crypto/cryptd.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Software async crypto daemon.
  *
diff --git a/crypto/crypto_null.c b/crypto/crypto_null.c
index 20ff2c7..311a5ff 100644
--- a/crypto/crypto_null.c
+++ b/crypto/crypto_null.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
@@ -32,6 +34,7 @@ static int crypto_default_null_skcipher_refcnt;
 static int null_compress(struct crypto_tfm *tfm, const u8 *src,
 			 unsigned int slen, u8 *dst, unsigned int *dlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (slen > *dlen)
 		return -EINVAL;
 	memcpy(dst, src, slen);
@@ -41,23 +44,27 @@ static int null_compress(struct crypto_tfm *tfm, const u8 *src,
 
 static int null_init(struct shash_desc *desc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int null_update(struct shash_desc *desc, const u8 *data,
 		       unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int null_final(struct shash_desc *desc, u8 *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static int null_digest(struct shash_desc *desc, const u8 *data,
 		       unsigned int len, u8 *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -71,6 +78,7 @@ static int null_setkey(struct crypto_tfm *tfm, const u8 *key,
 
 static void null_crypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(dst, src, NULL_BLOCK_SIZE);
 }
 
@@ -84,6 +92,7 @@ static int skcipher_null_crypt(struct blkcipher_desc *desc,
 	blkcipher_walk_init(&walk, dst, src, nbytes);
 	err = blkcipher_walk_virt(desc, &walk);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (walk.nbytes) {
 		if (walk.src.virt.addr != walk.dst.virt.addr)
 			memcpy(walk.dst.virt.addr, walk.src.virt.addr,
@@ -161,6 +170,7 @@ struct crypto_skcipher *crypto_get_default_null_skcipher(void)
 	tfm = crypto_default_null_skcipher;
 
 	if (!tfm) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tfm = crypto_alloc_skcipher("ecb(cipher_null)",
 					    0, CRYPTO_ALG_ASYNC);
 		if (IS_ERR(tfm))
@@ -180,6 +190,7 @@ EXPORT_SYMBOL_GPL(crypto_get_default_null_skcipher);
 
 void crypto_put_default_null_skcipher(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&crypto_default_null_skcipher_lock);
 	if (!--crypto_default_null_skcipher_refcnt) {
 		crypto_free_skcipher(crypto_default_null_skcipher);
@@ -201,6 +212,7 @@ static int __init crypto_null_mod_init(void)
 	if (ret < 0)
 		goto out_unregister_algs;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_unregister_algs:
@@ -211,6 +223,7 @@ static int __init crypto_null_mod_init(void)
 
 static void __exit crypto_null_mod_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_shash(&digest_null);
 	crypto_unregister_algs(null_algs, ARRAY_SIZE(null_algs));
 }
diff --git a/crypto/crypto_user.c b/crypto/crypto_user.c
index 0dbe2be7..44a7cba 100644
--- a/crypto/crypto_user.c
+++ b/crypto/crypto_user.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Crypto user configuration API.
  *
diff --git a/crypto/crypto_wq.c b/crypto/crypto_wq.c
index 2f1b8d1..2a162a1 100644
--- a/crypto/crypto_wq.c
+++ b/crypto/crypto_wq.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Workqueue for crypto subsystem
  *
@@ -24,12 +26,15 @@ static int __init crypto_wq_init(void)
 	kcrypto_wq = alloc_workqueue("crypto",
 				     WQ_MEM_RECLAIM | WQ_CPU_INTENSIVE, 1);
 	if (unlikely(!kcrypto_wq))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 	return 0;
 }
 
 static void __exit crypto_wq_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	destroy_workqueue(kcrypto_wq);
 }
 
diff --git a/crypto/ctr.c b/crypto/ctr.c
index 854d924..3bc0e54 100644
--- a/crypto/ctr.c
+++ b/crypto/ctr.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * CTR: Counter mode
  *
@@ -38,6 +40,7 @@ struct crypto_rfc3686_req_ctx {
 static int crypto_ctr_setkey(struct crypto_tfm *parent, const u8 *key,
 			     unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ctr_ctx *ctx = crypto_tfm_ctx(parent);
 	struct crypto_cipher *child = ctx->child;
 	int err;
@@ -55,6 +58,7 @@ static int crypto_ctr_setkey(struct crypto_tfm *parent, const u8 *key,
 static void crypto_ctr_crypt_final(struct blkcipher_walk *walk,
 				   struct crypto_cipher *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned int bsize = crypto_cipher_blocksize(tfm);
 	unsigned long alignmask = crypto_cipher_alignmask(tfm);
 	u8 *ctrblk = walk->iv;
@@ -137,6 +141,7 @@ static int crypto_ctr_crypt(struct blkcipher_desc *desc,
 	blkcipher_walk_init(&walk, dst, src, nbytes);
 	err = blkcipher_walk_virt_block(desc, &walk, bsize);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (walk.nbytes >= bsize) {
 		if (walk.src.virt.addr == walk.dst.virt.addr)
 			nbytes = crypto_ctr_crypt_inplace(&walk, child);
@@ -163,7 +168,9 @@ static int crypto_ctr_init_tfm(struct crypto_tfm *tfm)
 
 	cipher = crypto_spawn_cipher(spawn);
 	if (IS_ERR(cipher))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(cipher);
+}
 
 	ctx->child = cipher;
 
@@ -172,6 +179,7 @@ static int crypto_ctr_init_tfm(struct crypto_tfm *tfm)
 
 static void crypto_ctr_exit_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ctr_ctx *ctx = crypto_tfm_ctx(tfm);
 
 	crypto_free_cipher(ctx->child);
@@ -187,11 +195,15 @@ static struct crypto_instance *crypto_ctr_alloc(struct rtattr **tb)
 
 	err = crypto_check_attr_type(tb, CRYPTO_ALG_TYPE_BLKCIPHER);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_PTR(err);
+}
 
 	algt = crypto_get_attr_type(tb);
 	if (IS_ERR(algt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(algt);
+}
 
 	mask = CRYPTO_ALG_TYPE_MASK |
 		crypto_requires_off(algt->type, algt->mask,
@@ -199,7 +211,9 @@ static struct crypto_instance *crypto_ctr_alloc(struct rtattr **tb)
 
 	alg = crypto_attr_alg(tb[1], CRYPTO_ALG_TYPE_CIPHER, mask);
 	if (IS_ERR(alg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ERR_CAST(alg);
+}
 
 	/* Block size must be >= 4 bytes. */
 	err = -EINVAL;
@@ -246,6 +260,7 @@ static struct crypto_instance *crypto_ctr_alloc(struct rtattr **tb)
 
 static void crypto_ctr_free(struct crypto_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_drop_spawn(crypto_instance_ctx(inst));
 	kfree(inst);
 }
@@ -260,6 +275,7 @@ static struct crypto_template crypto_ctr_tmpl = {
 static int crypto_rfc3686_setkey(struct crypto_skcipher *parent,
 				 const u8 *key, unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc3686_ctx *ctx = crypto_skcipher_ctx(parent);
 	struct crypto_skcipher *child = ctx->child;
 	int err;
@@ -285,6 +301,7 @@ static int crypto_rfc3686_setkey(struct crypto_skcipher *parent,
 
 static int crypto_rfc3686_crypt(struct skcipher_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
 	struct crypto_rfc3686_ctx *ctx = crypto_skcipher_ctx(tfm);
 	struct crypto_skcipher *child = ctx->child;
@@ -313,6 +330,7 @@ static int crypto_rfc3686_crypt(struct skcipher_request *req)
 
 static int crypto_rfc3686_init_tfm(struct crypto_skcipher *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct skcipher_instance *inst = skcipher_alg_instance(tfm);
 	struct crypto_skcipher_spawn *spawn = skcipher_instance_ctx(inst);
 	struct crypto_rfc3686_ctx *ctx = crypto_skcipher_ctx(tfm);
@@ -337,6 +355,7 @@ static int crypto_rfc3686_init_tfm(struct crypto_skcipher *tfm)
 
 static void crypto_rfc3686_exit_tfm(struct crypto_skcipher *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc3686_ctx *ctx = crypto_skcipher_ctx(tfm);
 
 	crypto_free_skcipher(ctx->child);
@@ -344,6 +363,7 @@ static void crypto_rfc3686_exit_tfm(struct crypto_skcipher *tfm)
 
 static void crypto_rfc3686_free(struct skcipher_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_skcipher_spawn *spawn = skcipher_instance_ctx(inst);
 
 	crypto_drop_skcipher(spawn);
@@ -364,7 +384,9 @@ static int crypto_rfc3686_create(struct crypto_template *tmpl,
 
 	algt = crypto_get_attr_type(tb);
 	if (IS_ERR(algt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(algt);
+}
 
 	if ((algt->type ^ CRYPTO_ALG_TYPE_SKCIPHER) & algt->mask)
 		return -EINVAL;
@@ -474,6 +496,7 @@ static int __init crypto_ctr_module_init(void)
 
 static void __exit crypto_ctr_module_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_template(&crypto_rfc3686_tmpl);
 	crypto_unregister_template(&crypto_ctr_tmpl);
 }
diff --git a/crypto/cts.c b/crypto/cts.c
index 243f591..47fee62 100644
--- a/crypto/cts.c
+++ b/crypto/cts.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * CTS: Cipher Text Stealing mode
  *
diff --git a/crypto/deflate.c b/crypto/deflate.c
index 94ec3b3..3649cf7 100644
--- a/crypto/deflate.c
+++ b/crypto/deflate.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/des_generic.c b/crypto/des_generic.c
index a717205..f1a1799 100644
--- a/crypto/des_generic.c
+++ b/crypto/des_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
@@ -781,6 +783,7 @@ static void dkey(u32 *pe, const u8 *k)
 static int des_setkey(struct crypto_tfm *tfm, const u8 *key,
 		      unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct des_ctx *dctx = crypto_tfm_ctx(tfm);
 	u32 *flags = &tfm->crt_flags;
 	u32 tmp[DES_EXPKEY_WORDS];
@@ -802,6 +805,7 @@ static int des_setkey(struct crypto_tfm *tfm, const u8 *key,
 
 static void des_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct des_ctx *ctx = crypto_tfm_ctx(tfm);
 	const u32 *K = ctx->expkey;
 	const __le32 *s = (const __le32 *)src;
@@ -825,6 +829,7 @@ static void des_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
 
 static void des_decrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct des_ctx *ctx = crypto_tfm_ctx(tfm);
 	const u32 *K = ctx->expkey + DES_EXPKEY_WORDS - 2;
 	const __le32 *s = (const __le32 *)src;
@@ -864,6 +869,7 @@ int __des3_ede_setkey(u32 *expkey, u32 *flags, const u8 *key,
 {
 	const u32 *K = (const u32 *)key;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (unlikely(!((K[0] ^ K[2]) | (K[1] ^ K[3])) ||
 		     !((K[2] ^ K[4]) | (K[3] ^ K[5]))) &&
 		     (*flags & CRYPTO_TFM_REQ_WEAK_KEY)) {
@@ -882,6 +888,7 @@ EXPORT_SYMBOL_GPL(__des3_ede_setkey);
 static int des3_ede_setkey(struct crypto_tfm *tfm, const u8 *key,
 			   unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct des3_ede_ctx *dctx = crypto_tfm_ctx(tfm);
 	u32 *flags = &tfm->crt_flags;
 	u32 *expkey = dctx->expkey;
@@ -891,6 +898,7 @@ static int des3_ede_setkey(struct crypto_tfm *tfm, const u8 *key,
 
 static void des3_ede_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct des3_ede_ctx *dctx = crypto_tfm_ctx(tfm);
 	const u32 *K = dctx->expkey;
 	const __le32 *s = (const __le32 *)src;
@@ -922,6 +930,7 @@ static void des3_ede_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
 
 static void des3_ede_decrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct des3_ede_ctx *dctx = crypto_tfm_ctx(tfm);
 	const u32 *K = dctx->expkey + DES3_EDE_EXPKEY_WORDS - 2;
 	const __le32 *s = (const __le32 *)src;
@@ -990,6 +999,7 @@ static int __init des_generic_mod_init(void)
 
 static void __exit des_generic_mod_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_algs(des_algs, ARRAY_SIZE(des_algs));
 }
 
diff --git a/crypto/dh.c b/crypto/dh.c
index aadaf36..51ef7f6 100644
--- a/crypto/dh.c
+++ b/crypto/dh.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*  Diffie-Hellman Key Agreement Method [RFC2631]
  *
  * Copyright (c) 2016, Intel Corporation
diff --git a/crypto/drbg.c b/crypto/drbg.c
index 7001839..23d1dd08 100644
--- a/crypto/drbg.c
+++ b/crypto/drbg.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * DRBG: Deterministic Random Bits Generator
  *       Based on NIST Recommended DRBG from NIST SP800-90A with the following
@@ -207,6 +209,7 @@ static int drbg_uninstantiate(struct drbg_state *drbg);
  */
 static inline unsigned short drbg_sec_strength(drbg_flag_t flags)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	switch (flags & DRBG_STRENGTH_MASK) {
 	case DRBG_STRENGTH128:
 		return 16;
@@ -988,6 +991,7 @@ static const struct drbg_state_ops drbg_hash_ops = {
 static inline int __drbg_seed(struct drbg_state *drbg, struct list_head *seed,
 			      int reseed)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int ret = drbg->d_ops->update(drbg, seed, reseed);
 
 	if (ret)
@@ -1004,6 +1008,7 @@ static void drbg_async_seed(struct work_struct *work)
 {
 	struct drbg_string data;
 	LIST_HEAD(seedlist);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct drbg_state *drbg = container_of(work, struct drbg_state,
 					       seed_work);
 	unsigned int entropylen = drbg_sec_strength(drbg->core->flags);
@@ -1131,6 +1136,7 @@ static int drbg_seed(struct drbg_state *drbg, struct drbg_string *pers,
 /* Free all substructures in a DRBG state without the DRBG state structure */
 static inline void drbg_dealloc_state(struct drbg_state *drbg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!drbg)
 		return;
 	kzfree(drbg->Vbuf);
@@ -1248,6 +1254,7 @@ static int drbg_generate(struct drbg_state *drbg,
 	LIST_HEAD(addtllist);
 
 	if (!drbg->core) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_devel("DRBG: not yet seeded\n");
 		return -EINVAL;
 	}
@@ -1377,6 +1384,7 @@ static int drbg_generate_long(struct drbg_state *drbg,
 		int err = 0;
 		unsigned int chunk = 0;
 		slice = ((buflen - len) / drbg_max_request_bytes(drbg));
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		chunk = slice ? drbg_max_request_bytes(drbg) : (buflen - len);
 		mutex_lock(&drbg->drbg_mutex);
 		err = drbg_generate(drbg, buf + len, chunk, addtl);
@@ -1390,6 +1398,7 @@ static int drbg_generate_long(struct drbg_state *drbg,
 
 static void drbg_schedule_async_seed(struct random_ready_callback *rdy)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct drbg_state *drbg = container_of(rdy, struct drbg_state,
 					       random_ready);
 
@@ -1402,7 +1411,9 @@ static int drbg_prepare_hrng(struct drbg_state *drbg)
 
 	/* We do not need an HRNG in test mode. */
 	if (list_empty(&drbg->test_data.list))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	INIT_WORK(&drbg->seed_work, drbg_async_seed);
 
@@ -1458,6 +1469,7 @@ static int drbg_instantiate(struct drbg_state *drbg, struct drbg_string *pers,
 	int ret;
 	bool reseed = true;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	pr_devel("DRBG: Initializing DRBG core %d with prediction resistance "
 		 "%s\n", coreref, pr ? "enabled" : "disabled");
 	mutex_lock(&drbg->drbg_mutex);
@@ -1526,6 +1538,7 @@ static int drbg_instantiate(struct drbg_state *drbg, struct drbg_string *pers,
  */
 static int drbg_uninstantiate(struct drbg_state *drbg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (drbg->random_ready.func) {
 		del_random_ready_callback(&drbg->random_ready);
 		cancel_work_sync(&drbg->seed_work);
@@ -1550,6 +1563,7 @@ static int drbg_uninstantiate(struct drbg_state *drbg)
 static void drbg_kcapi_set_entropy(struct crypto_rng *tfm,
 				   const u8 *data, unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct drbg_state *drbg = crypto_rng_ctx(tfm);
 
 	mutex_lock(&drbg->drbg_mutex);
@@ -1574,6 +1588,7 @@ static int drbg_init_hash_kernel(struct drbg_state *drbg)
 
 	tfm = crypto_alloc_shash(drbg->core->backend_cra_name, 0, 0);
 	if (IS_ERR(tfm)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("DRBG: could not allocate digest TFM handle: %s\n",
 				drbg->core->backend_cra_name);
 		return PTR_ERR(tfm);
@@ -1597,6 +1612,7 @@ static int drbg_fini_hash_kernel(struct drbg_state *drbg)
 {
 	struct sdesc *sdesc = (struct sdesc *)drbg->priv_data;
 	if (sdesc) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_free_shash(sdesc->shash.tfm);
 		kzfree(sdesc);
 	}
@@ -1619,6 +1635,7 @@ static int drbg_kcapi_hash(struct drbg_state *drbg, unsigned char *outval,
 	struct drbg_string *input = NULL;
 
 	crypto_shash_init(&sdesc->shash);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry(input, in, list)
 		crypto_shash_update(&sdesc->shash, input->buf, input->len);
 	return crypto_shash_final(&sdesc->shash, outval);
@@ -1816,6 +1833,7 @@ static inline void drbg_convert_tfm_core(const char *cra_driver_name,
 	*pr = true;
 	/* disassemble the names */
 	if (!memcmp(cra_driver_name, "drbg_nopr_", 10)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		start = 10;
 		*pr = false;
 	} else if (!memcmp(cra_driver_name, "drbg_pr_", 8)) {
@@ -1837,6 +1855,7 @@ static inline void drbg_convert_tfm_core(const char *cra_driver_name,
 
 static int drbg_kcapi_init(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct drbg_state *drbg = crypto_tfm_ctx(tfm);
 
 	mutex_init(&drbg->drbg_mutex);
@@ -1846,6 +1865,7 @@ static int drbg_kcapi_init(struct crypto_tfm *tfm)
 
 static void drbg_kcapi_cleanup(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	drbg_uninstantiate(crypto_tfm_ctx(tfm));
 }
 
@@ -1862,6 +1882,7 @@ static int drbg_kcapi_random(struct crypto_rng *tfm,
 			     const u8 *src, unsigned int slen,
 			     u8 *dst, unsigned int dlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct drbg_state *drbg = crypto_rng_ctx(tfm);
 	struct drbg_string *addtl = NULL;
 	struct drbg_string string;
@@ -1881,6 +1902,7 @@ static int drbg_kcapi_random(struct crypto_rng *tfm,
 static int drbg_kcapi_seed(struct crypto_rng *tfm,
 			   const u8 *seed, unsigned int slen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct drbg_state *drbg = crypto_rng_ctx(tfm);
 	struct crypto_tfm *tfm_base = crypto_rng_tfm(tfm);
 	bool pr = false;
@@ -1927,7 +1949,9 @@ static inline int __init drbg_healthcheck_sanity(void)
 
 	/* only perform test in FIPS mode */
 	if (!fips_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 #ifdef CONFIG_CRYPTO_DRBG_CTR
 	drbg_convert_tfm_core("drbg_nopr_ctr_aes128", &coreref, &pr);
@@ -2008,7 +2032,9 @@ static inline void __init drbg_fill_array(struct rng_alg *alg,
 	 * it is selected.
 	 */
 	if (fips_enabled)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		alg->base.cra_priority += 200;
+}
 
 	alg->base.cra_ctxsize 	= sizeof(struct drbg_state);
 	alg->base.cra_module	= THIS_MODULE;
@@ -2028,9 +2054,13 @@ static int __init drbg_init(void)
 
 	ret = drbg_healthcheck_sanity();
 	if (ret)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return ret;
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (ARRAY_SIZE(drbg_cores) * 2 > ARRAY_SIZE(drbg_algs)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("DRBG: Cannot register all DRBG types"
 			"(slots needed: %zu, slots available: %zu)\n",
 			ARRAY_SIZE(drbg_cores) * 2, ARRAY_SIZE(drbg_algs));
@@ -2055,6 +2085,7 @@ static int __init drbg_init(void)
 
 static void __exit drbg_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_rngs(drbg_algs, (ARRAY_SIZE(drbg_cores) * 2));
 }
 
diff --git a/crypto/ecb.c b/crypto/ecb.c
index 12011af..b6867fa 100644
--- a/crypto/ecb.c
+++ b/crypto/ecb.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * ECB: Electronic CodeBook mode
  *
diff --git a/crypto/echainiv.c b/crypto/echainiv.c
index e3d889b..5635a3e 100644
--- a/crypto/echainiv.c
+++ b/crypto/echainiv.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * echainiv: Encrypted Chain IV Generator
  *
@@ -30,6 +32,7 @@
 
 static int echainiv_encrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *geniv = crypto_aead_reqtfm(req);
 	struct aead_geniv_ctx *ctx = crypto_aead_ctx(geniv);
 	struct aead_request *subreq = aead_request_ctx(req);
@@ -89,6 +92,7 @@ static int echainiv_encrypt(struct aead_request *req)
 
 static int echainiv_decrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *geniv = crypto_aead_reqtfm(req);
 	struct aead_geniv_ctx *ctx = crypto_aead_ctx(geniv);
 	struct aead_request *subreq = aead_request_ctx(req);
@@ -125,7 +129,9 @@ static int echainiv_aead_create(struct crypto_template *tmpl,
 	inst = aead_geniv_alloc(tmpl, tb, 0, 0);
 
 	if (IS_ERR(inst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(inst);
+}
 
 	spawn = aead_instance_ctx(inst);
 	alg = crypto_spawn_aead_alg(spawn);
@@ -159,6 +165,7 @@ static int echainiv_aead_create(struct crypto_template *tmpl,
 
 static void echainiv_free(struct crypto_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	aead_geniv_free(aead_instance(inst));
 }
 
@@ -176,6 +183,7 @@ static int __init echainiv_module_init(void)
 
 static void __exit echainiv_module_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_template(&echainiv_tmpl);
 }
 
diff --git a/crypto/fcrypt.c b/crypto/fcrypt.c
index 77286ea..213a05a 100644
--- a/crypto/fcrypt.c
+++ b/crypto/fcrypt.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* FCrypt encryption algorithm
  *
  * Copyright (C) 2006 Red Hat, Inc. All Rights Reserved.
diff --git a/crypto/gcm.c b/crypto/gcm.c
index 3841b5e..728485c 100644
--- a/crypto/gcm.c
+++ b/crypto/gcm.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * GCM: Galois/Counter Mode.
  *
@@ -761,7 +763,9 @@ static int crypto_gcm_base_create(struct crypto_template *tmpl,
 
 	ctr_name = crypto_attr_alg_name(tb[1]);
 	if (IS_ERR(ctr_name))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(ctr_name);
+}
 
 	ghash_name = crypto_attr_alg_name(tb[2]);
 	if (IS_ERR(ghash_name))
@@ -784,6 +788,7 @@ static struct crypto_template crypto_gcm_base_tmpl = {
 static int crypto_rfc4106_setkey(struct crypto_aead *parent, const u8 *key,
 				 unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc4106_ctx *ctx = crypto_aead_ctx(parent);
 	struct crypto_aead *child = ctx->child;
 	int err;
@@ -807,6 +812,7 @@ static int crypto_rfc4106_setkey(struct crypto_aead *parent, const u8 *key,
 static int crypto_rfc4106_setauthsize(struct crypto_aead *parent,
 				      unsigned int authsize)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc4106_ctx *ctx = crypto_aead_ctx(parent);
 
 	switch (authsize) {
@@ -823,6 +829,7 @@ static int crypto_rfc4106_setauthsize(struct crypto_aead *parent,
 
 static struct aead_request *crypto_rfc4106_crypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc4106_req_ctx *rctx = aead_request_ctx(req);
 	struct crypto_aead *aead = crypto_aead_reqtfm(req);
 	struct crypto_rfc4106_ctx *ctx = crypto_aead_ctx(aead);
@@ -864,6 +871,7 @@ static struct aead_request *crypto_rfc4106_crypt(struct aead_request *req)
 
 static int crypto_rfc4106_encrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (req->assoclen != 16 && req->assoclen != 20)
 		return -EINVAL;
 
@@ -874,6 +882,7 @@ static int crypto_rfc4106_encrypt(struct aead_request *req)
 
 static int crypto_rfc4106_decrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (req->assoclen != 16 && req->assoclen != 20)
 		return -EINVAL;
 
@@ -884,6 +893,7 @@ static int crypto_rfc4106_decrypt(struct aead_request *req)
 
 static int crypto_rfc4106_init_tfm(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_instance *inst = aead_alg_instance(tfm);
 	struct crypto_aead_spawn *spawn = aead_instance_ctx(inst);
 	struct crypto_rfc4106_ctx *ctx = crypto_aead_ctx(tfm);
@@ -909,6 +919,7 @@ static int crypto_rfc4106_init_tfm(struct crypto_aead *tfm)
 
 static void crypto_rfc4106_exit_tfm(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc4106_ctx *ctx = crypto_aead_ctx(tfm);
 
 	crypto_free_aead(ctx->child);
@@ -916,6 +927,7 @@ static void crypto_rfc4106_exit_tfm(struct crypto_aead *tfm)
 
 static void crypto_rfc4106_free(struct aead_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_drop_aead(aead_instance_ctx(inst));
 	kfree(inst);
 }
@@ -932,7 +944,9 @@ static int crypto_rfc4106_create(struct crypto_template *tmpl,
 
 	algt = crypto_get_attr_type(tb);
 	if (IS_ERR(algt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(algt);
+}
 
 	if ((algt->type ^ CRYPTO_ALG_TYPE_AEAD) & algt->mask)
 		return -EINVAL;
@@ -1017,6 +1031,7 @@ static struct crypto_template crypto_rfc4106_tmpl = {
 static int crypto_rfc4543_setkey(struct crypto_aead *parent, const u8 *key,
 				 unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc4543_ctx *ctx = crypto_aead_ctx(parent);
 	struct crypto_aead *child = ctx->child;
 	int err;
@@ -1040,6 +1055,7 @@ static int crypto_rfc4543_setkey(struct crypto_aead *parent, const u8 *key,
 static int crypto_rfc4543_setauthsize(struct crypto_aead *parent,
 				      unsigned int authsize)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc4543_ctx *ctx = crypto_aead_ctx(parent);
 
 	if (authsize != 16)
@@ -1050,6 +1066,7 @@ static int crypto_rfc4543_setauthsize(struct crypto_aead *parent,
 
 static int crypto_rfc4543_crypt(struct aead_request *req, bool enc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *aead = crypto_aead_reqtfm(req);
 	struct crypto_rfc4543_ctx *ctx = crypto_aead_ctx(aead);
 	struct crypto_rfc4543_req_ctx *rctx = aead_request_ctx(req);
@@ -1081,6 +1098,7 @@ static int crypto_rfc4543_crypt(struct aead_request *req, bool enc)
 
 static int crypto_rfc4543_copy_src_to_dst(struct aead_request *req, bool enc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *aead = crypto_aead_reqtfm(req);
 	struct crypto_rfc4543_ctx *ctx = crypto_aead_ctx(aead);
 	unsigned int authsize = crypto_aead_authsize(aead);
@@ -1097,16 +1115,19 @@ static int crypto_rfc4543_copy_src_to_dst(struct aead_request *req, bool enc)
 
 static int crypto_rfc4543_encrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_rfc4543_crypt(req, true);
 }
 
 static int crypto_rfc4543_decrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_rfc4543_crypt(req, false);
 }
 
 static int crypto_rfc4543_init_tfm(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_instance *inst = aead_alg_instance(tfm);
 	struct crypto_rfc4543_instance_ctx *ictx = aead_instance_ctx(inst);
 	struct crypto_aead_spawn *spawn = &ictx->aead;
@@ -1145,6 +1166,7 @@ static int crypto_rfc4543_init_tfm(struct crypto_aead *tfm)
 
 static void crypto_rfc4543_exit_tfm(struct crypto_aead *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc4543_ctx *ctx = crypto_aead_ctx(tfm);
 
 	crypto_free_aead(ctx->child);
@@ -1153,6 +1175,7 @@ static void crypto_rfc4543_exit_tfm(struct crypto_aead *tfm)
 
 static void crypto_rfc4543_free(struct aead_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_rfc4543_instance_ctx *ctx = aead_instance_ctx(inst);
 
 	crypto_drop_aead(&ctx->aead);
@@ -1173,7 +1196,9 @@ static int crypto_rfc4543_create(struct crypto_template *tmpl,
 
 	algt = crypto_get_attr_type(tb);
 	if (IS_ERR(algt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(algt);
+}
 
 	if ((algt->type ^ CRYPTO_ALG_TYPE_AEAD) & algt->mask)
 		return -EINVAL;
@@ -1262,7 +1287,9 @@ static int __init crypto_gcm_module_init(void)
 
 	gcm_zeroes = kzalloc(sizeof(*gcm_zeroes), GFP_KERNEL);
 	if (!gcm_zeroes)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOMEM;
+}
 
 	sg_init_one(&gcm_zeroes->sg, gcm_zeroes->buf, sizeof(gcm_zeroes->buf));
 
@@ -1282,6 +1309,7 @@ static int __init crypto_gcm_module_init(void)
 	if (err)
 		goto out_undo_rfc4106;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 out_undo_rfc4106:
@@ -1297,6 +1325,7 @@ static int __init crypto_gcm_module_init(void)
 
 static void __exit crypto_gcm_module_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kfree(gcm_zeroes);
 	crypto_unregister_template(&crypto_rfc4543_tmpl);
 	crypto_unregister_template(&crypto_rfc4106_tmpl);
diff --git a/crypto/ghash-generic.c b/crypto/ghash-generic.c
index 12ad3e3..651b0e1 100644
--- a/crypto/ghash-generic.c
+++ b/crypto/ghash-generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * GHASH: digest algorithm for GCM (Galois/Counter Mode).
  *
@@ -23,6 +25,7 @@
 
 static int ghash_init(struct shash_desc *desc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ghash_desc_ctx *dctx = shash_desc_ctx(desc);
 
 	memset(dctx, 0, sizeof(*dctx));
@@ -33,6 +36,7 @@ static int ghash_init(struct shash_desc *desc)
 static int ghash_setkey(struct crypto_shash *tfm,
 			const u8 *key, unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ghash_ctx *ctx = crypto_shash_ctx(tfm);
 
 	if (keylen != GHASH_BLOCK_SIZE) {
@@ -52,6 +56,7 @@ static int ghash_setkey(struct crypto_shash *tfm,
 static int ghash_update(struct shash_desc *desc,
 			 const u8 *src, unsigned int srclen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ghash_desc_ctx *dctx = shash_desc_ctx(desc);
 	struct ghash_ctx *ctx = crypto_shash_ctx(desc->tfm);
 	u8 *dst = dctx->buffer;
@@ -96,6 +101,7 @@ static void ghash_flush(struct ghash_ctx *ctx, struct ghash_desc_ctx *dctx)
 	if (dctx->bytes) {
 		u8 *tmp = dst + (GHASH_BLOCK_SIZE - dctx->bytes);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		while (dctx->bytes--)
 			*tmp++ ^= 0;
 
@@ -107,6 +113,7 @@ static void ghash_flush(struct ghash_ctx *ctx, struct ghash_desc_ctx *dctx)
 
 static int ghash_final(struct shash_desc *desc, u8 *dst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ghash_desc_ctx *dctx = shash_desc_ctx(desc);
 	struct ghash_ctx *ctx = crypto_shash_ctx(desc->tfm);
 	u8 *buf = dctx->buffer;
@@ -122,6 +129,7 @@ static int ghash_final(struct shash_desc *desc, u8 *dst)
 
 static void ghash_exit_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct ghash_ctx *ctx = crypto_tfm_ctx(tfm);
 	if (ctx->gf128)
 		gf128mul_free_4k(ctx->gf128);
@@ -153,6 +161,7 @@ static int __init ghash_mod_init(void)
 
 static void __exit ghash_mod_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_shash(&ghash_alg);
 }
 
diff --git a/crypto/hmac.c b/crypto/hmac.c
index e747302..e0ae6ab 100644
--- a/crypto/hmac.c
+++ b/crypto/hmac.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
@@ -32,11 +34,13 @@ struct hmac_ctx {
 
 static inline void *align_ptr(void *p, unsigned int align)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (void *)ALIGN((unsigned long)p, align);
 }
 
 static inline struct hmac_ctx *hmac_ctx(struct crypto_shash *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return align_ptr(crypto_shash_ctx_aligned(tfm) +
 			 crypto_shash_statesize(tfm) * 2,
 			 crypto_tfm_ctx_alignment());
@@ -45,6 +49,7 @@ static inline struct hmac_ctx *hmac_ctx(struct crypto_shash *tfm)
 static int hmac_setkey(struct crypto_shash *parent,
 		       const u8 *inkey, unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	int bs = crypto_shash_blocksize(parent);
 	int ds = crypto_shash_digestsize(parent);
 	int ss = crypto_shash_statesize(parent);
@@ -89,6 +94,7 @@ static int hmac_setkey(struct crypto_shash *parent,
 
 static int hmac_export(struct shash_desc *pdesc, void *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct shash_desc *desc = shash_desc_ctx(pdesc);
 
 	desc->flags = pdesc->flags & CRYPTO_TFM_REQ_MAY_SLEEP;
@@ -98,6 +104,7 @@ static int hmac_export(struct shash_desc *pdesc, void *out)
 
 static int hmac_import(struct shash_desc *pdesc, const void *in)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct shash_desc *desc = shash_desc_ctx(pdesc);
 	struct hmac_ctx *ctx = hmac_ctx(pdesc->tfm);
 
@@ -109,12 +116,14 @@ static int hmac_import(struct shash_desc *pdesc, const void *in)
 
 static int hmac_init(struct shash_desc *pdesc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return hmac_import(pdesc, crypto_shash_ctx_aligned(pdesc->tfm));
 }
 
 static int hmac_update(struct shash_desc *pdesc,
 		       const u8 *data, unsigned int nbytes)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct shash_desc *desc = shash_desc_ctx(pdesc);
 
 	desc->flags = pdesc->flags & CRYPTO_TFM_REQ_MAY_SLEEP;
@@ -132,6 +141,7 @@ static int hmac_final(struct shash_desc *pdesc, u8 *out)
 
 	desc->flags = pdesc->flags & CRYPTO_TFM_REQ_MAY_SLEEP;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_shash_final(desc, out) ?:
 	       crypto_shash_import(desc, opad) ?:
 	       crypto_shash_finup(desc, out, ds, out);
@@ -149,6 +159,7 @@ static int hmac_finup(struct shash_desc *pdesc, const u8 *data,
 
 	desc->flags = pdesc->flags & CRYPTO_TFM_REQ_MAY_SLEEP;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_shash_finup(desc, data, nbytes, out) ?:
 	       crypto_shash_import(desc, opad) ?:
 	       crypto_shash_finup(desc, out, ds, out);
@@ -156,6 +167,7 @@ static int hmac_finup(struct shash_desc *pdesc, const u8 *data,
 
 static int hmac_init_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_shash *parent = __crypto_shash_cast(tfm);
 	struct crypto_shash *hash;
 	struct crypto_instance *inst = (void *)tfm->__crt_alg;
@@ -175,6 +187,7 @@ static int hmac_init_tfm(struct crypto_tfm *tfm)
 
 static void hmac_exit_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct hmac_ctx *ctx = hmac_ctx(__crypto_shash_cast(tfm));
 	crypto_free_shash(ctx->hash);
 }
@@ -190,7 +203,9 @@ static int hmac_create(struct crypto_template *tmpl, struct rtattr **tb)
 
 	err = crypto_check_attr_type(tb, CRYPTO_ALG_TYPE_SHASH);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	salg = shash_attr_alg(tb[1], 0, 0);
 	if (IS_ERR(salg))
@@ -265,6 +280,7 @@ static int __init hmac_module_init(void)
 
 static void __exit hmac_module_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_template(&hmac_tmpl);
 }
 
diff --git a/crypto/internal.h b/crypto/internal.h
index f073204..0f7a6aa 100644
--- a/crypto/internal.h
+++ b/crypto/internal.h
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/jitterentropy-kcapi.c b/crypto/jitterentropy-kcapi.c
index 787dccc..9423a9f 100644
--- a/crypto/jitterentropy-kcapi.c
+++ b/crypto/jitterentropy-kcapi.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Non-physical true random number generator based on timing jitter --
  * Linux Kernel Crypto API specific code
@@ -58,31 +60,37 @@ void jent_entropy_collector_free(struct rand_data *entropy_collector);
 
 __u64 jent_rol64(__u64 word, unsigned int shift)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return rol64(word, shift);
 }
 
 void *jent_zalloc(unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return kzalloc(len, GFP_KERNEL);
 }
 
 void jent_zfree(void *ptr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	kzfree(ptr);
 }
 
 int jent_fips_enabled(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return fips_enabled;
 }
 
 void jent_panic(char *s)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	panic("%s", s);
 }
 
 void jent_memcpy(void *dest, const void *src, unsigned int n)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(dest, src, n);
 }
 
@@ -107,7 +115,9 @@ void jent_get_nstime(__u64 *out)
 	 * hoping that there are timers we can work with.
 	 */
 	if (tmp == 0)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		tmp = ktime_get_ns();
+}
 
 	*out = tmp;
 }
@@ -123,6 +133,7 @@ struct jitterentropy {
 
 static int jent_kcapi_init(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct jitterentropy *rng = crypto_tfm_ctx(tfm);
 	int ret = 0;
 
@@ -136,6 +147,7 @@ static int jent_kcapi_init(struct crypto_tfm *tfm)
 
 static void jent_kcapi_cleanup(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct jitterentropy *rng = crypto_tfm_ctx(tfm);
 
 	spin_lock(&rng->jent_lock);
@@ -149,6 +161,7 @@ static int jent_kcapi_random(struct crypto_rng *tfm,
 			     const u8 *src, unsigned int slen,
 			     u8 *rdata, unsigned int dlen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct jitterentropy *rng = crypto_rng_ctx(tfm);
 	int ret = 0;
 
@@ -162,6 +175,7 @@ static int jent_kcapi_random(struct crypto_rng *tfm,
 static int jent_kcapi_reset(struct crypto_rng *tfm,
 			    const u8 *seed, unsigned int slen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -187,6 +201,7 @@ static int __init jent_mod_init(void)
 
 	ret = jent_entropy_init();
 	if (ret) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		pr_info("jitterentropy: Initialization failed with host not compliant with requirements: %d\n", ret);
 		return -EFAULT;
 	}
@@ -195,6 +210,7 @@ static int __init jent_mod_init(void)
 
 static void __exit jent_mod_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_rng(&jent_alg);
 }
 
diff --git a/crypto/jitterentropy.c b/crypto/jitterentropy.c
index acf44b2..7a94189 100644
--- a/crypto/jitterentropy.c
+++ b/crypto/jitterentropy.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Non-physical true random number generator based on timing jitter --
  * Jitter RNG standalone code.
@@ -144,7 +146,9 @@ static __u64 jent_loop_shuffle(struct rand_data *ec,
 	 * calculation to balance that shuffle a bit more
 	 */
 	if (ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		time ^= ec->data;
+}
 	/*
 	 * we fold the time value as much as possible to ensure that as many
 	 * bits of the time stamp are included as possible
@@ -266,6 +270,7 @@ static unsigned int jent_memaccess(struct rand_data *ec, __u64 loop_cnt)
 	__u64 acc_loop_cnt =
 		jent_loop_shuffle(ec, MAX_ACC_LOOP_BIT, MIN_ACC_LOOP_BIT);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (NULL == ec || NULL == ec->mem)
 		return 0;
 	wrap = ec->memblocksize * ec->memblocks;
@@ -324,6 +329,7 @@ static void jent_stuck(struct rand_data *ec, __u64 current_delta)
 	ec->last_delta = current_delta;
 	ec->last_delta2 = delta2;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!current_delta || !delta2 || !delta3)
 		ec->stuck = 1;
 }
@@ -389,6 +395,7 @@ static __u64 jent_measure_jitter(struct rand_data *ec)
 static __u64 jent_unbiased_bit(struct rand_data *entropy_collector)
 {
 	do {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		__u64 a = jent_measure_jitter(entropy_collector);
 		__u64 b = jent_measure_jitter(entropy_collector);
 
@@ -453,6 +460,7 @@ static void jent_stir_pool(struct rand_data *entropy_collector)
 	mixer.u32[1] = 0x98badcfe;
 	mixer.u32[0] = 0x10325476;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < DATA_SIZE_BITS; i++) {
 		/*
 		 * get the i-th bit of the input random number and only XOR
@@ -479,6 +487,7 @@ static void jent_gen_entropy(struct rand_data *ec)
 	/* priming of the ->prev_time value */
 	jent_measure_jitter(ec);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (1) {
 		__u64 data = 0;
 
@@ -544,6 +553,7 @@ static void jent_gen_entropy(struct rand_data *ec)
  */
 static void jent_fips_test(struct rand_data *ec)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!jent_fips_enabled())
 		return;
 
@@ -587,7 +597,9 @@ int jent_read_entropy(struct rand_data *ec, unsigned char *data,
 	unsigned char *p = data;
 
 	if (!ec)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -1;
+}
 
 	while (0 < len) {
 		unsigned int tocopy;
@@ -618,7 +630,9 @@ struct rand_data *jent_entropy_collector_alloc(unsigned int osr,
 
 	entropy_collector = jent_zalloc(sizeof(struct rand_data));
 	if (!entropy_collector)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	if (!(flags & JENT_DISABLE_MEMORY_ACCESS)) {
 		/* Allocate memory for adding variations based on memory
@@ -653,6 +667,7 @@ struct rand_data *jent_entropy_collector_alloc(unsigned int osr,
 
 void jent_entropy_collector_free(struct rand_data *entropy_collector)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	jent_zfree(entropy_collector->mem);
 	entropy_collector->mem = NULL;
 	jent_zfree(entropy_collector);
@@ -705,7 +720,9 @@ int jent_entropy_init(void)
 
 		/* test whether timer works */
 		if (!time || !time2)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return JENT_ENOTIME;
+}
 		delta = time2 - time;
 		/*
 		 * test whether timer is fine grained enough to provide
@@ -713,7 +730,9 @@ int jent_entropy_init(void)
 		 * implies that we also have a high resolution timer
 		 */
 		if (!delta)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			return JENT_ECOARSETIME;
+}
 
 		/*
 		 * up to here we did not modify any variable that will be
@@ -727,7 +746,9 @@ int jent_entropy_init(void)
 
 		/* test whether we have an increasing timer */
 		if (!(time2 > time))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 			time_backwards++;
+}
 
 		/*
 		 * Avoid modulo of 64 bit integer to allow code to compile
@@ -762,10 +783,14 @@ int jent_entropy_init(void)
 	 * performed during our test run.
 	 */
 	if (3 < time_backwards)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return JENT_ENOMONOTONIC;
+}
 	/* Error if the time variances are always identical */
 	if (!delta_sum)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return JENT_EVARVAR;
+}
 
 	/*
 	 * Variations of deltas of time must on average be larger
@@ -773,7 +798,9 @@ int jent_entropy_init(void)
 	 * implied with 1 is preserved
 	 */
 	if (delta_sum <= 1)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return JENT_EMINVARVAR;
+}
 
 	/*
 	 * Ensure that we have variations in the time stamp below 10 for at
@@ -781,7 +808,9 @@ int jent_entropy_init(void)
 	 * increments in multiples of 100, but not always
 	 */
 	if ((TESTLOOPCOUNT/10 * 9) < count_mod)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return JENT_ECOARSETIME;
+}
 
 	return 0;
 }
diff --git a/crypto/keywrap.c b/crypto/keywrap.c
index 72014f9..87f1eee 100644
--- a/crypto/keywrap.c
+++ b/crypto/keywrap.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Key Wrapping: RFC3394 / NIST SP800-38F
  *
diff --git a/crypto/khazad.c b/crypto/khazad.c
index 873eb5d..91b5a36 100644
--- a/crypto/khazad.c
+++ b/crypto/khazad.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/kpp.c b/crypto/kpp.c
index a90edc2..829e4a2 100644
--- a/crypto/kpp.c
+++ b/crypto/kpp.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Key-agreement Protocol Primitives (KPP)
  *
@@ -35,6 +37,7 @@ static int crypto_kpp_report(struct sk_buff *skb, struct crypto_alg *alg)
 	if (nla_put(skb, CRYPTOCFGA_REPORT_KPP,
 		    sizeof(struct crypto_report_kpp), &rkpp))
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 nla_put_failure:
@@ -52,11 +55,13 @@ static void crypto_kpp_show(struct seq_file *m, struct crypto_alg *alg)
 
 static void crypto_kpp_show(struct seq_file *m, struct crypto_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_puts(m, "type         : kpp\n");
 }
 
 static void crypto_kpp_exit_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_kpp *kpp = __crypto_kpp_tfm(tfm);
 	struct kpp_alg *alg = crypto_kpp_alg(kpp);
 
@@ -65,6 +70,7 @@ static void crypto_kpp_exit_tfm(struct crypto_tfm *tfm)
 
 static int crypto_kpp_init_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_kpp *kpp = __crypto_kpp_tfm(tfm);
 	struct kpp_alg *alg = crypto_kpp_alg(kpp);
 
@@ -92,6 +98,7 @@ static const struct crypto_type crypto_kpp_type = {
 
 struct crypto_kpp *crypto_alloc_kpp(const char *alg_name, u32 type, u32 mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_alloc_tfm(alg_name, &crypto_kpp_type, type, mask);
 }
 EXPORT_SYMBOL_GPL(crypto_alloc_kpp);
@@ -116,6 +123,7 @@ EXPORT_SYMBOL_GPL(crypto_register_kpp);
 
 void crypto_unregister_kpp(struct kpp_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_alg(&alg->base);
 }
 EXPORT_SYMBOL_GPL(crypto_unregister_kpp);
diff --git a/crypto/lrw.c b/crypto/lrw.c
index eb681e9..6c8bd62 100644
--- a/crypto/lrw.c
+++ b/crypto/lrw.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* LRW: as defined by Cyril Guyot in
  *	http://grouper.ieee.org/groups/1619/email/pdf00017.pdf
  *
diff --git a/crypto/lz4.c b/crypto/lz4.c
index 2ce2660..5a63335 100644
--- a/crypto/lz4.c
+++ b/crypto/lz4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/lz4hc.c b/crypto/lz4hc.c
index 2be14f0..df9c730 100644
--- a/crypto/lz4hc.c
+++ b/crypto/lz4hc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/lzo.c b/crypto/lzo.c
index 218567d..a5b1300 100644
--- a/crypto/lzo.c
+++ b/crypto/lzo.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/md4.c b/crypto/md4.c
index 3515af4..a598075 100644
--- a/crypto/md4.c
+++ b/crypto/md4.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* 
  * Cryptographic API.
  *
diff --git a/crypto/md5.c b/crypto/md5.c
index f7ae1a4..318e20b 100644
--- a/crypto/md5.c
+++ b/crypto/md5.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* 
  * Cryptographic API.
  *
@@ -35,6 +37,7 @@ EXPORT_SYMBOL_GPL(md5_zero_message_hash);
 /* XXX: this stuff can be optimized */
 static inline void le32_to_cpu_array(u32 *buf, unsigned int words)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (words--) {
 		__le32_to_cpus(buf);
 		buf++;
@@ -43,6 +46,7 @@ static inline void le32_to_cpu_array(u32 *buf, unsigned int words)
 
 static inline void cpu_to_le32_array(u32 *buf, unsigned int words)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (words--) {
 		__cpu_to_le32s(buf);
 		buf++;
@@ -142,12 +146,14 @@ static void md5_transform(__u32 *hash, __u32 const *in)
 
 static inline void md5_transform_helper(struct md5_state *ctx)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	le32_to_cpu_array(ctx->block, sizeof(ctx->block) / sizeof(u32));
 	md5_transform(ctx->hash, ctx->block);
 }
 
 static int md5_init(struct shash_desc *desc)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct md5_state *mctx = shash_desc_ctx(desc);
 
 	mctx->hash[0] = MD5_H0;
@@ -161,6 +167,7 @@ static int md5_init(struct shash_desc *desc)
 
 static int md5_update(struct shash_desc *desc, const u8 *data, unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct md5_state *mctx = shash_desc_ctx(desc);
 	const u32 avail = sizeof(mctx->block) - (mctx->byte_count & 0x3f);
 
@@ -193,6 +200,7 @@ static int md5_update(struct shash_desc *desc, const u8 *data, unsigned int len)
 
 static int md5_final(struct shash_desc *desc, u8 *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct md5_state *mctx = shash_desc_ctx(desc);
 	const unsigned int offset = mctx->byte_count & 0x3f;
 	char *p = (char *)mctx->block + offset;
@@ -221,6 +229,7 @@ static int md5_final(struct shash_desc *desc, u8 *out)
 
 static int md5_export(struct shash_desc *desc, void *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct md5_state *ctx = shash_desc_ctx(desc);
 
 	memcpy(out, ctx, sizeof(*ctx));
@@ -229,6 +238,7 @@ static int md5_export(struct shash_desc *desc, void *out)
 
 static int md5_import(struct shash_desc *desc, const void *in)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct md5_state *ctx = shash_desc_ctx(desc);
 
 	memcpy(ctx, in, sizeof(*ctx));
@@ -259,6 +269,7 @@ static int __init md5_mod_init(void)
 
 static void __exit md5_mod_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_shash(&alg);
 }
 
diff --git a/crypto/michael_mic.c b/crypto/michael_mic.c
index 46195e0..d1b9d4b 100644
--- a/crypto/michael_mic.c
+++ b/crypto/michael_mic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API
  *
diff --git a/crypto/pcbc.c b/crypto/pcbc.c
index d9e45a9..9fb9fad 100644
--- a/crypto/pcbc.c
+++ b/crypto/pcbc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * PCBC: Propagating Cipher Block Chaining mode
  *
diff --git a/crypto/poly1305_generic.c b/crypto/poly1305_generic.c
index ba39eb3..b470f72d 100644
--- a/crypto/poly1305_generic.c
+++ b/crypto/poly1305_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Poly1305 authenticator algorithm, RFC7539
  *
diff --git a/crypto/proc.c b/crypto/proc.c
index 2cc10c9..e645687 100644
--- a/crypto/proc.c
+++ b/crypto/proc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Scatterlist Cryptographic API.
  *
@@ -24,22 +26,26 @@
 
 static void *c_start(struct seq_file *m, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	down_read(&crypto_alg_sem);
 	return seq_list_start(&crypto_alg_list, *pos);
 }
 
 static void *c_next(struct seq_file *m, void *p, loff_t *pos)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_list_next(p, &crypto_alg_list, pos);
 }
 
 static void c_stop(struct seq_file *m, void *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	up_read(&crypto_alg_sem);
 }
 
 static int c_show(struct seq_file *m, void *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_alg *alg = list_entry(p, struct crypto_alg, cra_list);
 	
 	seq_printf(m, "name         : %s\n", alg->cra_name);
@@ -96,6 +102,7 @@ static const struct seq_operations crypto_seq_ops = {
 
 static int crypto_info_open(struct inode *inode, struct file *file)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return seq_open(file, &crypto_seq_ops);
 }
         
@@ -113,5 +120,6 @@ void __init crypto_init_proc(void)
 
 void __exit crypto_exit_proc(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	remove_proc_entry("crypto", NULL);
 }
diff --git a/crypto/rmd128.c b/crypto/rmd128.c
index 049486e..5ae287e 100644
--- a/crypto/rmd128.c
+++ b/crypto/rmd128.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/rmd160.c b/crypto/rmd160.c
index de585e5..9c5ff64 100644
--- a/crypto/rmd160.c
+++ b/crypto/rmd160.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/rmd256.c b/crypto/rmd256.c
index 4ec02a7..a13ec6d 100644
--- a/crypto/rmd256.c
+++ b/crypto/rmd256.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/rmd320.c b/crypto/rmd320.c
index 770f2cb..dc28101 100644
--- a/crypto/rmd320.c
+++ b/crypto/rmd320.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/rng.c b/crypto/rng.c
index b4a6186..483f91d 100644
--- a/crypto/rng.c
+++ b/crypto/rng.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
@@ -38,6 +40,7 @@ int crypto_rng_reset(struct crypto_rng *tfm, const u8 *seed, unsigned int slen)
 	u8 *buf = NULL;
 	int err;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!seed && slen) {
 		buf = kmalloc(slen, GFP_KERNEL);
 		if (!buf)
@@ -58,11 +61,13 @@ EXPORT_SYMBOL_GPL(crypto_rng_reset);
 
 static int crypto_rng_init_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
 static unsigned int seedsize(struct crypto_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct rng_alg *ralg = container_of(alg, struct rng_alg, base);
 
 	return ralg->seedsize;
@@ -80,6 +85,7 @@ static int crypto_rng_report(struct sk_buff *skb, struct crypto_alg *alg)
 	if (nla_put(skb, CRYPTOCFGA_REPORT_RNG,
 		    sizeof(struct crypto_report_rng), &rrng))
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 nla_put_failure:
@@ -96,6 +102,7 @@ static void crypto_rng_show(struct seq_file *m, struct crypto_alg *alg)
 	__maybe_unused;
 static void crypto_rng_show(struct seq_file *m, struct crypto_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_printf(m, "type         : rng\n");
 	seq_printf(m, "seedsize     : %u\n", seedsize(alg));
 }
@@ -115,6 +122,7 @@ static const struct crypto_type crypto_rng_type = {
 
 struct crypto_rng *crypto_alloc_rng(const char *alg_name, u32 type, u32 mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_alloc_tfm(alg_name, &crypto_rng_type, type, mask);
 }
 EXPORT_SYMBOL_GPL(crypto_alloc_rng);
@@ -126,6 +134,7 @@ int crypto_get_default_rng(void)
 
 	mutex_lock(&crypto_default_rng_lock);
 	if (!crypto_default_rng) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		rng = crypto_alloc_rng("stdrng", 0, 0);
 		err = PTR_ERR(rng);
 		if (IS_ERR(rng))
@@ -152,6 +161,7 @@ EXPORT_SYMBOL_GPL(crypto_get_default_rng);
 
 void crypto_put_default_rng(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	mutex_lock(&crypto_default_rng_lock);
 	crypto_default_rng_refcnt--;
 	mutex_unlock(&crypto_default_rng_lock);
@@ -167,6 +177,7 @@ int crypto_del_default_rng(void)
 	if (crypto_default_rng_refcnt)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_free_rng(crypto_default_rng);
 	crypto_default_rng = NULL;
 
@@ -185,7 +196,9 @@ int crypto_register_rng(struct rng_alg *alg)
 	struct crypto_alg *base = &alg->base;
 
 	if (alg->seedsize > PAGE_SIZE / 8)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EINVAL;
+}
 
 	base->cra_type = &crypto_rng_type;
 	base->cra_flags &= ~CRYPTO_ALG_TYPE_MASK;
@@ -197,6 +210,7 @@ EXPORT_SYMBOL_GPL(crypto_register_rng);
 
 void crypto_unregister_rng(struct rng_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_alg(&alg->base);
 }
 EXPORT_SYMBOL_GPL(crypto_unregister_rng);
@@ -211,12 +225,16 @@ int crypto_register_rngs(struct rng_alg *algs, int count)
 			goto err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err:
 	for (--i; i >= 0; --i)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_unregister_rng(algs + i);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(crypto_register_rngs);
@@ -225,6 +243,7 @@ void crypto_unregister_rngs(struct rng_alg *algs, int count)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = count - 1; i >= 0; --i)
 		crypto_unregister_rng(algs + i);
 }
diff --git a/crypto/rsa.c b/crypto/rsa.c
index b067f3a..bd417d1 100644
--- a/crypto/rsa.c
+++ b/crypto/rsa.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* RSA asymmetric public-key algorithm [RFC3447]
  *
  * Copyright (c) 2015, Intel Corporation
diff --git a/crypto/salsa20_generic.c b/crypto/salsa20_generic.c
index d7da0ee..aae97b6 100644
--- a/crypto/salsa20_generic.c
+++ b/crypto/salsa20_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Salsa20: Salsa20 stream cipher algorithm
  *
diff --git a/crypto/scompress.c b/crypto/scompress.c
index 2075e2c..c6617f2 100644
--- a/crypto/scompress.c
+++ b/crypto/scompress.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Synchronous Compression operations
  *
@@ -45,6 +47,7 @@ static int crypto_scomp_report(struct sk_buff *skb, struct crypto_alg *alg)
 	if (nla_put(skb, CRYPTOCFGA_REPORT_COMPRESS,
 		    sizeof(struct crypto_report_comp), &rscomp))
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 nla_put_failure:
@@ -62,6 +65,7 @@ static void crypto_scomp_show(struct seq_file *m, struct crypto_alg *alg)
 
 static void crypto_scomp_show(struct seq_file *m, struct crypto_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	seq_puts(m, "type         : scomp\n");
 }
 
@@ -70,7 +74,9 @@ static void crypto_scomp_free_scratches(void * __percpu *scratches)
 	int i;
 
 	if (!scratches)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	for_each_possible_cpu(i)
 		vfree(*per_cpu_ptr(scratches, i));
@@ -85,7 +91,9 @@ static void * __percpu *crypto_scomp_alloc_scratches(void)
 
 	scratches = alloc_percpu(void *);
 	if (!scratches)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	for_each_possible_cpu(i) {
 		void *scratch;
@@ -105,6 +113,7 @@ static void * __percpu *crypto_scomp_alloc_scratches(void)
 
 static void crypto_scomp_free_all_scratches(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!--scomp_scratch_users) {
 		crypto_scomp_free_scratches(scomp_src_scratches);
 		crypto_scomp_free_scratches(scomp_dst_scratches);
@@ -115,6 +124,7 @@ static void crypto_scomp_free_all_scratches(void)
 
 static int crypto_scomp_alloc_all_scratches(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (!scomp_scratch_users++) {
 		scomp_src_scratches = crypto_scomp_alloc_scratches();
 		if (!scomp_src_scratches)
@@ -146,7 +156,9 @@ static void crypto_scomp_sg_free(struct scatterlist *sgl)
 	struct page *page;
 
 	if (!sgl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return;
+}
 
 	n = sg_nents(sgl);
 	for_each_sg(sgl, sgl, n, i) {
@@ -168,7 +180,9 @@ static struct scatterlist *crypto_scomp_sg_alloc(size_t size, gfp_t gfp)
 
 	sgl = kmalloc_array(n, sizeof(struct scatterlist), gfp);
 	if (!sgl)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return NULL;
+}
 
 	sg_init_table(sgl, n);
 
@@ -189,6 +203,7 @@ static struct scatterlist *crypto_scomp_sg_alloc(size_t size, gfp_t gfp)
 
 static int scomp_acomp_comp_decomp(struct acomp_req *req, int dir)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_acomp *tfm = crypto_acomp_reqtfm(req);
 	void **tfm_ctx = acomp_tfm_ctx(tfm);
 	struct crypto_scomp *scomp = *tfm_ctx;
@@ -234,16 +249,19 @@ static int scomp_acomp_comp_decomp(struct acomp_req *req, int dir)
 
 static int scomp_acomp_compress(struct acomp_req *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scomp_acomp_comp_decomp(req, 1);
 }
 
 static int scomp_acomp_decompress(struct acomp_req *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return scomp_acomp_comp_decomp(req, 0);
 }
 
 static void crypto_exit_scomp_ops_async(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_scomp **ctx = crypto_tfm_ctx(tfm);
 
 	crypto_free_scomp(*ctx);
@@ -261,7 +279,9 @@ int crypto_init_scomp_ops_async(struct crypto_tfm *tfm)
 	struct crypto_scomp *scomp;
 
 	if (!crypto_mod_get(calg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAGAIN;
+}
 
 	scomp = crypto_create_tfm(calg, &crypto_scomp_type);
 	if (IS_ERR(scomp)) {
@@ -282,6 +302,7 @@ int crypto_init_scomp_ops_async(struct crypto_tfm *tfm)
 
 struct acomp_req *crypto_acomp_scomp_alloc_ctx(struct acomp_req *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_acomp *acomp = crypto_acomp_reqtfm(req);
 	struct crypto_tfm *tfm = crypto_acomp_tfm(acomp);
 	struct crypto_scomp **tfm_ctx = crypto_tfm_ctx(tfm);
@@ -301,6 +322,7 @@ struct acomp_req *crypto_acomp_scomp_alloc_ctx(struct acomp_req *req)
 
 void crypto_acomp_scomp_free_ctx(struct acomp_req *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_acomp *acomp = crypto_acomp_reqtfm(req);
 	struct crypto_tfm *tfm = crypto_acomp_tfm(acomp);
 	struct crypto_scomp **tfm_ctx = crypto_tfm_ctx(tfm);
@@ -338,6 +360,7 @@ EXPORT_SYMBOL_GPL(crypto_register_scomp);
 
 int crypto_unregister_scomp(struct scomp_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_unregister_alg(&alg->base);
 }
 EXPORT_SYMBOL_GPL(crypto_unregister_scomp);
@@ -352,12 +375,16 @@ int crypto_register_scomps(struct scomp_alg *algs, int count)
 			goto err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err:
 	for (--i; i >= 0; --i)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_unregister_scomp(&algs[i]);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(crypto_register_scomps);
@@ -366,6 +393,7 @@ void crypto_unregister_scomps(struct scomp_alg *algs, int count)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = count - 1; i >= 0; --i)
 		crypto_unregister_scomp(&algs[i]);
 }
diff --git a/crypto/seed.c b/crypto/seed.c
index c6ba843..016888d 100644
--- a/crypto/seed.c
+++ b/crypto/seed.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/seqiv.c b/crypto/seqiv.c
index 570b7d1..c401a49 100644
--- a/crypto/seqiv.c
+++ b/crypto/seqiv.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * seqiv: Sequence Number IV Generator
  *
@@ -27,6 +29,7 @@ static void seqiv_free(struct crypto_instance *inst);
 
 static void seqiv_aead_encrypt_complete2(struct aead_request *req, int err)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct aead_request *subreq = aead_request_ctx(req);
 	struct crypto_aead *geniv;
 
@@ -54,6 +57,7 @@ static void seqiv_aead_encrypt_complete(struct crypto_async_request *base,
 
 static int seqiv_aead_encrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *geniv = crypto_aead_reqtfm(req);
 	struct aead_geniv_ctx *ctx = crypto_aead_ctx(geniv);
 	struct aead_request *subreq = aead_request_ctx(req);
@@ -116,6 +120,7 @@ static int seqiv_aead_encrypt(struct aead_request *req)
 
 static int seqiv_aead_decrypt(struct aead_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *geniv = crypto_aead_reqtfm(req);
 	struct aead_geniv_ctx *ctx = crypto_aead_ctx(geniv);
 	struct aead_request *subreq = aead_request_ctx(req);
@@ -151,7 +156,9 @@ static int seqiv_aead_create(struct crypto_template *tmpl, struct rtattr **tb)
 	inst = aead_geniv_alloc(tmpl, tb, 0, 0);
 
 	if (IS_ERR(inst))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(inst);
+}
 
 	spawn = aead_instance_ctx(inst);
 	alg = crypto_spawn_aead_alg(spawn);
@@ -187,7 +194,9 @@ static int seqiv_create(struct crypto_template *tmpl, struct rtattr **tb)
 
 	algt = crypto_get_attr_type(tb);
 	if (IS_ERR(algt))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return PTR_ERR(algt);
+}
 
 	if ((algt->type ^ CRYPTO_ALG_TYPE_AEAD) & CRYPTO_ALG_TYPE_MASK)
 		return -EINVAL;
@@ -197,6 +206,7 @@ static int seqiv_create(struct crypto_template *tmpl, struct rtattr **tb)
 
 static void seqiv_free(struct crypto_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	aead_geniv_free(aead_instance(inst));
 }
 
@@ -214,6 +224,7 @@ static int __init seqiv_module_init(void)
 
 static void __exit seqiv_module_exit(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_template(&seqiv_tmpl);
 }
 
diff --git a/crypto/serpent_generic.c b/crypto/serpent_generic.c
index 7c3382f..0f5c8d8 100644
--- a/crypto/serpent_generic.c
+++ b/crypto/serpent_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/sha1_generic.c b/crypto/sha1_generic.c
index 6877cbb..7a245d5 100644
--- a/crypto/sha1_generic.c
+++ b/crypto/sha1_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
@@ -38,6 +40,7 @@ static void sha1_generic_block_fn(struct sha1_state *sst, u8 const *src,
 {
 	u32 temp[SHA_WORKSPACE_WORDS];
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (blocks--) {
 		sha_transform(sst->state, src, temp);
 		src += SHA1_BLOCK_SIZE;
@@ -48,12 +51,14 @@ static void sha1_generic_block_fn(struct sha1_state *sst, u8 const *src,
 int crypto_sha1_update(struct shash_desc *desc, const u8 *data,
 		       unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sha1_base_do_update(desc, data, len, sha1_generic_block_fn);
 }
 EXPORT_SYMBOL(crypto_sha1_update);
 
 static int sha1_final(struct shash_desc *desc, u8 *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sha1_base_do_finalize(desc, sha1_generic_block_fn);
 	return sha1_base_finish(desc, out);
 }
@@ -61,6 +66,7 @@ static int sha1_final(struct shash_desc *desc, u8 *out)
 int crypto_sha1_finup(struct shash_desc *desc, const u8 *data,
 		      unsigned int len, u8 *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sha1_base_do_update(desc, data, len, sha1_generic_block_fn);
 	return sha1_final(desc, out);
 }
@@ -89,6 +95,7 @@ static int __init sha1_generic_mod_init(void)
 
 static void __exit sha1_generic_mod_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_shash(&alg);
 }
 
diff --git a/crypto/sha256_generic.c b/crypto/sha256_generic.c
index 8f9c47e..b79b8a0 100644
--- a/crypto/sha256_generic.c
+++ b/crypto/sha256_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
@@ -45,11 +47,13 @@ EXPORT_SYMBOL_GPL(sha256_zero_message_hash);
 
 static inline u32 Ch(u32 x, u32 y, u32 z)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return z ^ (x & (y ^ z));
 }
 
 static inline u32 Maj(u32 x, u32 y, u32 z)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return (x & y) | (z & (x | y));
 }
 
@@ -60,11 +64,13 @@ static inline u32 Maj(u32 x, u32 y, u32 z)
 
 static inline void LOAD_OP(int I, u32 *W, const u8 *input)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	W[I] = get_unaligned_be32((__u32 *)input + I);
 }
 
 static inline void BLEND_OP(int I, u32 *W)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	W[I] = s1(W[I-2]) + W[I-7] + s0(W[I-15]) + W[I-16];
 }
 
@@ -234,6 +240,7 @@ static void sha256_transform(u32 *state, const u8 *input)
 static void sha256_generic_block_fn(struct sha256_state *sst, u8 const *src,
 				    int blocks)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	while (blocks--) {
 		sha256_transform(sst->state, src);
 		src += SHA256_BLOCK_SIZE;
@@ -243,12 +250,14 @@ static void sha256_generic_block_fn(struct sha256_state *sst, u8 const *src,
 int crypto_sha256_update(struct shash_desc *desc, const u8 *data,
 			  unsigned int len)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return sha256_base_do_update(desc, data, len, sha256_generic_block_fn);
 }
 EXPORT_SYMBOL(crypto_sha256_update);
 
 static int sha256_final(struct shash_desc *desc, u8 *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sha256_base_do_finalize(desc, sha256_generic_block_fn);
 	return sha256_base_finish(desc, out);
 }
@@ -256,6 +265,7 @@ static int sha256_final(struct shash_desc *desc, u8 *out)
 int crypto_sha256_finup(struct shash_desc *desc, const u8 *data,
 			unsigned int len, u8 *hash)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	sha256_base_do_update(desc, data, len, sha256_generic_block_fn);
 	return sha256_final(desc, hash);
 }
@@ -298,6 +308,7 @@ static int __init sha256_generic_mod_init(void)
 
 static void __exit sha256_generic_mod_fini(void)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_shashes(sha256_algs, ARRAY_SIZE(sha256_algs));
 }
 
diff --git a/crypto/sha512_generic.c b/crypto/sha512_generic.c
index eba965d..d8af453 100644
--- a/crypto/sha512_generic.c
+++ b/crypto/sha512_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* SHA-512 code by Jean-Luc Cooke <jlcooke@certainkey.com>
  *
  * Copyright (c) Jean-Luc Cooke <jlcooke@certainkey.com>
diff --git a/crypto/shash.c b/crypto/shash.c
index 5d732c6..02e8f09 100644
--- a/crypto/shash.c
+++ b/crypto/shash.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Synchronous Cryptographic Hash operations.
  *
@@ -28,6 +30,7 @@ static const struct crypto_type crypto_shash_type;
 int shash_no_setkey(struct crypto_shash *tfm, const u8 *key,
 		    unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return -ENOSYS;
 }
 EXPORT_SYMBOL_GPL(shash_no_setkey);
@@ -35,6 +38,7 @@ EXPORT_SYMBOL_GPL(shash_no_setkey);
 static int shash_setkey_unaligned(struct crypto_shash *tfm, const u8 *key,
 				  unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct shash_alg *shash = crypto_shash_alg(tfm);
 	unsigned long alignmask = crypto_shash_alignmask(tfm);
 	unsigned long absize;
@@ -56,6 +60,7 @@ static int shash_setkey_unaligned(struct crypto_shash *tfm, const u8 *key,
 int crypto_shash_setkey(struct crypto_shash *tfm, const u8 *key,
 			unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct shash_alg *shash = crypto_shash_alg(tfm);
 	unsigned long alignmask = crypto_shash_alignmask(tfm);
 	int err;
@@ -77,6 +82,7 @@ static inline unsigned int shash_align_buffer_size(unsigned len,
 						   unsigned long mask)
 {
 	typedef u8 __aligned_largest u8_aligned;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return len + (mask & ~(__alignof__(u8_aligned) - 1));
 }
 
@@ -94,7 +100,9 @@ static int shash_update_unaligned(struct shash_desc *desc, const u8 *data,
 	int err;
 
 	if (unaligned_len > len)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		unaligned_len = len;
+}
 
 	memcpy(buf, data, unaligned_len);
 	err = shash->update(desc, buf, unaligned_len);
@@ -112,7 +120,9 @@ int crypto_shash_update(struct shash_desc *desc, const u8 *data,
 	unsigned long alignmask = crypto_shash_alignmask(tfm);
 
 	if ((unsigned long)data & alignmask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return shash_update_unaligned(desc, data, len);
+}
 
 	return shash->update(desc, data, len);
 }
@@ -133,6 +143,7 @@ static int shash_final_unaligned(struct shash_desc *desc, u8 *out)
 	if (err)
 		goto out;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(out, buf, ds);
 
 out:
@@ -147,7 +158,9 @@ int crypto_shash_final(struct shash_desc *desc, u8 *out)
 	unsigned long alignmask = crypto_shash_alignmask(tfm);
 
 	if ((unsigned long)out & alignmask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return shash_final_unaligned(desc, out);
+}
 
 	return shash->final(desc, out);
 }
@@ -156,6 +169,7 @@ EXPORT_SYMBOL_GPL(crypto_shash_final);
 static int shash_finup_unaligned(struct shash_desc *desc, const u8 *data,
 				 unsigned int len, u8 *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_shash_update(desc, data, len) ?:
 	       crypto_shash_final(desc, out);
 }
@@ -168,7 +182,9 @@ int crypto_shash_finup(struct shash_desc *desc, const u8 *data,
 	unsigned long alignmask = crypto_shash_alignmask(tfm);
 
 	if (((unsigned long)data | (unsigned long)out) & alignmask)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return shash_finup_unaligned(desc, data, len, out);
+}
 
 	return shash->finup(desc, data, len, out);
 }
@@ -177,6 +193,7 @@ EXPORT_SYMBOL_GPL(crypto_shash_finup);
 static int shash_digest_unaligned(struct shash_desc *desc, const u8 *data,
 				  unsigned int len, u8 *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_shash_init(desc) ?:
 	       crypto_shash_finup(desc, data, len, out);
 }
@@ -189,7 +206,9 @@ int crypto_shash_digest(struct shash_desc *desc, const u8 *data,
 	unsigned long alignmask = crypto_shash_alignmask(tfm);
 
 	if (crypto_shash_get_flags(tfm) & CRYPTO_TFM_NEED_KEY)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -ENOKEY;
+}
 
 	if (((unsigned long)data | (unsigned long)out) & alignmask)
 		return shash_digest_unaligned(desc, data, len, out);
@@ -200,12 +219,14 @@ EXPORT_SYMBOL_GPL(crypto_shash_digest);
 
 static int shash_default_export(struct shash_desc *desc, void *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(out, shash_desc_ctx(desc), crypto_shash_descsize(desc->tfm));
 	return 0;
 }
 
 static int shash_default_import(struct shash_desc *desc, const void *in)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(shash_desc_ctx(desc), in, crypto_shash_descsize(desc->tfm));
 	return 0;
 }
@@ -213,6 +234,7 @@ static int shash_default_import(struct shash_desc *desc, const void *in)
 static int shash_async_setkey(struct crypto_ahash *tfm, const u8 *key,
 			      unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_shash **ctx = crypto_ahash_ctx(tfm);
 
 	return crypto_shash_setkey(*ctx, key, keylen);
@@ -220,6 +242,7 @@ static int shash_async_setkey(struct crypto_ahash *tfm, const u8 *key,
 
 static int shash_async_init(struct ahash_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_shash **ctx = crypto_ahash_ctx(crypto_ahash_reqtfm(req));
 	struct shash_desc *desc = ahash_request_ctx(req);
 
@@ -234,6 +257,7 @@ int shash_ahash_update(struct ahash_request *req, struct shash_desc *desc)
 	struct crypto_hash_walk walk;
 	int nbytes;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (nbytes = crypto_hash_walk_first(req, &walk); nbytes > 0;
 	     nbytes = crypto_hash_walk_done(&walk, nbytes))
 		nbytes = crypto_shash_update(desc, walk.data, nbytes);
@@ -244,11 +268,13 @@ EXPORT_SYMBOL_GPL(shash_ahash_update);
 
 static int shash_async_update(struct ahash_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return shash_ahash_update(req, ahash_request_ctx(req));
 }
 
 static int shash_async_final(struct ahash_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_shash_final(ahash_request_ctx(req), req->result);
 }
 
@@ -259,7 +285,9 @@ int shash_ahash_finup(struct ahash_request *req, struct shash_desc *desc)
 
 	nbytes = crypto_hash_walk_first(req, &walk);
 	if (!nbytes)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return crypto_shash_final(desc, req->result);
+}
 
 	do {
 		nbytes = crypto_hash_walk_last(&walk) ?
@@ -275,6 +303,7 @@ EXPORT_SYMBOL_GPL(shash_ahash_finup);
 
 static int shash_async_finup(struct ahash_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_shash **ctx = crypto_ahash_ctx(crypto_ahash_reqtfm(req));
 	struct shash_desc *desc = ahash_request_ctx(req);
 
@@ -311,6 +340,7 @@ EXPORT_SYMBOL_GPL(shash_ahash_digest);
 
 static int shash_async_digest(struct ahash_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_shash **ctx = crypto_ahash_ctx(crypto_ahash_reqtfm(req));
 	struct shash_desc *desc = ahash_request_ctx(req);
 
@@ -322,11 +352,13 @@ static int shash_async_digest(struct ahash_request *req)
 
 static int shash_async_export(struct ahash_request *req, void *out)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_shash_export(ahash_request_ctx(req), out);
 }
 
 static int shash_async_import(struct ahash_request *req, const void *in)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_shash **ctx = crypto_ahash_ctx(crypto_ahash_reqtfm(req));
 	struct shash_desc *desc = ahash_request_ctx(req);
 
@@ -338,6 +370,7 @@ static int shash_async_import(struct ahash_request *req, const void *in)
 
 static void crypto_exit_shash_ops_async(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_shash **ctx = crypto_tfm_ctx(tfm);
 
 	crypto_free_shash(*ctx);
@@ -352,10 +385,13 @@ int crypto_init_shash_ops_async(struct crypto_tfm *tfm)
 	struct crypto_shash *shash;
 
 	if (!crypto_mod_get(calg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAGAIN;
+}
 
 	shash = crypto_create_tfm(calg, &crypto_shash_type);
 	if (IS_ERR(shash)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_mod_put(calg);
 		return PTR_ERR(shash);
 	}
@@ -385,6 +421,7 @@ int crypto_init_shash_ops_async(struct crypto_tfm *tfm)
 
 static int crypto_shash_init_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_shash *hash = __crypto_shash_cast(tfm);
 	struct shash_alg *alg = crypto_shash_alg(hash);
 
@@ -411,6 +448,7 @@ static int crypto_shash_report(struct sk_buff *skb, struct crypto_alg *alg)
 	if (nla_put(skb, CRYPTOCFGA_REPORT_HASH,
 		    sizeof(struct crypto_report_hash), &rhash))
 		goto nla_put_failure;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 nla_put_failure:
@@ -427,6 +465,7 @@ static void crypto_shash_show(struct seq_file *m, struct crypto_alg *alg)
 	__maybe_unused;
 static void crypto_shash_show(struct seq_file *m, struct crypto_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct shash_alg *salg = __crypto_shash_alg(alg);
 
 	seq_printf(m, "type         : shash\n");
@@ -479,6 +518,7 @@ static int shash_prepare_alg(struct shash_alg *alg)
 	if (!alg->setkey)
 		alg->setkey = shash_no_setkey;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -489,7 +529,9 @@ int crypto_register_shash(struct shash_alg *alg)
 
 	err = shash_prepare_alg(alg);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return crypto_register_alg(base);
 }
@@ -497,6 +539,7 @@ EXPORT_SYMBOL_GPL(crypto_register_shash);
 
 int crypto_unregister_shash(struct shash_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_unregister_alg(&alg->base);
 }
 EXPORT_SYMBOL_GPL(crypto_unregister_shash);
@@ -511,12 +554,16 @@ int crypto_register_shashes(struct shash_alg *algs, int count)
 			goto err;
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 
 err:
 	for (--i; i >= 0; --i)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_unregister_shash(&algs[i]);
+}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(crypto_register_shashes);
@@ -525,6 +572,7 @@ int crypto_unregister_shashes(struct shash_alg *algs, int count)
 {
 	int i, ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = count - 1; i >= 0; --i) {
 		ret = crypto_unregister_shash(&algs[i]);
 		if (ret)
@@ -544,7 +592,9 @@ int shash_register_instance(struct crypto_template *tmpl,
 
 	err = shash_prepare_alg(&inst->alg);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return crypto_register_instance(tmpl, shash_crypto_instance(inst));
 }
@@ -552,6 +602,7 @@ EXPORT_SYMBOL_GPL(shash_register_instance);
 
 void shash_free_instance(struct crypto_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_drop_spawn(crypto_instance_ctx(inst));
 	kfree(shash_instance(inst));
 }
@@ -561,6 +612,7 @@ int crypto_init_shash_spawn(struct crypto_shash_spawn *spawn,
 			    struct shash_alg *alg,
 			    struct crypto_instance *inst)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_init_spawn2(&spawn->base, &alg->base, inst,
 				  &crypto_shash_type);
 }
@@ -571,6 +623,7 @@ struct shash_alg *shash_attr_alg(struct rtattr *rta, u32 type, u32 mask)
 	struct crypto_alg *alg;
 
 	alg = crypto_attr_alg2(rta, &crypto_shash_type, type, mask);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return IS_ERR(alg) ? ERR_CAST(alg) :
 	       container_of(alg, struct shash_alg, base);
 }
diff --git a/crypto/skcipher.c b/crypto/skcipher.c
index 11af5fd..d47e285 100644
--- a/crypto/skcipher.c
+++ b/crypto/skcipher.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Symmetric key cipher operations.
  *
@@ -48,12 +50,14 @@ static int skcipher_walk_next(struct skcipher_walk *walk);
 
 static inline void skcipher_unmap(struct scatter_walk *walk, void *vaddr)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (PageHighMem(scatterwalk_page(walk)))
 		kunmap_atomic(vaddr);
 }
 
 static inline void *skcipher_map(struct scatter_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct page *page = scatterwalk_page(walk);
 
 	return (PageHighMem(page) ? kmap_atomic(page) : page_address(page)) +
@@ -62,26 +66,31 @@ static inline void *skcipher_map(struct scatter_walk *walk)
 
 static inline void skcipher_map_src(struct skcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->src.virt.addr = skcipher_map(&walk->in);
 }
 
 static inline void skcipher_map_dst(struct skcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->dst.virt.addr = skcipher_map(&walk->out);
 }
 
 static inline void skcipher_unmap_src(struct skcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skcipher_unmap(&walk->in, walk->src.virt.addr);
 }
 
 static inline void skcipher_unmap_dst(struct skcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	skcipher_unmap(&walk->out, walk->dst.virt.addr);
 }
 
 static inline gfp_t skcipher_walk_gfp(struct skcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return walk->flags & SKCIPHER_WALK_SLEEP ? GFP_KERNEL : GFP_ATOMIC;
 }
 
@@ -92,6 +101,7 @@ static inline u8 *skcipher_get_spot(u8 *start, unsigned int len)
 {
 	u8 *end_page = (u8 *)(((unsigned long)(start + len - 1)) & PAGE_MASK);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return max(start, end_page);
 }
 
@@ -114,6 +124,7 @@ int skcipher_walk_done(struct skcipher_walk *walk, int err)
 	nbytes = walk->total - n;
 
 	if (unlikely(err < 0)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		nbytes = 0;
 		n = 0;
 	} else if (likely(!(walk->flags & (SKCIPHER_WALK_PHYS |
@@ -177,6 +188,7 @@ void skcipher_walk_complete(struct skcipher_walk *walk, int err)
 {
 	struct skcipher_walk_buffer *p, *tmp;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	list_for_each_entry_safe(p, tmp, &walk->buffers, entry) {
 		u8 *data;
 
@@ -212,6 +224,7 @@ EXPORT_SYMBOL_GPL(skcipher_walk_complete);
 static void skcipher_queue_write(struct skcipher_walk *walk,
 				 struct skcipher_walk_buffer *p)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	p->dst = walk->out;
 	list_add_tail(&p->entry, &walk->buffers);
 }
@@ -227,6 +240,7 @@ static int skcipher_next_slow(struct skcipher_walk *walk, unsigned int bsize)
 	void *v;
 
 	if (!phys) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		if (!walk->buffer)
 			walk->buffer = walk->page;
 		buffer = walk->buffer;
@@ -283,6 +297,7 @@ static int skcipher_next_copy(struct skcipher_walk *walk)
 	u8 *tmp = walk->page;
 
 	skcipher_map_src(walk);
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	memcpy(tmp, walk->src.virt.addr, walk->nbytes);
 	skcipher_unmap_src(walk);
 
@@ -319,7 +334,9 @@ static int skcipher_next_fast(struct skcipher_walk *walk)
 	walk->dst.phys.offset = offset_in_page(walk->out.offset);
 
 	if (walk->flags & SKCIPHER_WALK_PHYS)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return 0;
+}
 
 	diff = walk->src.phys.offset - walk->dst.phys.offset;
 	diff |= walk->src.virt.page - walk->dst.virt.page;
@@ -345,6 +362,7 @@ static int skcipher_walk_next(struct skcipher_walk *walk)
 			 SKCIPHER_WALK_DIFF);
 
 	n = walk->total;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	bsize = min(walk->stride, max(n, walk->blocksize));
 	n = scatterwalk_clamp(&walk->in, n);
 	n = scatterwalk_clamp(&walk->out, n);
@@ -391,6 +409,7 @@ EXPORT_SYMBOL_GPL(skcipher_walk_next);
 
 static int skcipher_copy_iv(struct skcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned a = crypto_tfm_ctx_alignment() - 1;
 	unsigned alignmask = walk->alignmask;
 	unsigned ivsize = walk->ivsize;
@@ -426,6 +445,7 @@ static int skcipher_copy_iv(struct skcipher_walk *walk)
 
 static int skcipher_walk_first(struct skcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	if (WARN_ON_ONCE(in_irq()))
 		return -EDEADLK;
 
@@ -445,6 +465,7 @@ static int skcipher_walk_first(struct skcipher_walk *walk)
 static int skcipher_walk_skcipher(struct skcipher_walk *walk,
 				  struct skcipher_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
 
 	walk->total = req->cryptlen;
@@ -479,6 +500,7 @@ int skcipher_walk_virt(struct skcipher_walk *walk,
 
 	err = skcipher_walk_skcipher(walk, req);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->flags &= atomic ? ~SKCIPHER_WALK_SLEEP : ~0;
 
 	return err;
@@ -487,6 +509,7 @@ EXPORT_SYMBOL_GPL(skcipher_walk_virt);
 
 void skcipher_walk_atomise(struct skcipher_walk *walk)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->flags &= ~SKCIPHER_WALK_SLEEP;
 }
 EXPORT_SYMBOL_GPL(skcipher_walk_atomise);
@@ -494,6 +517,7 @@ EXPORT_SYMBOL_GPL(skcipher_walk_atomise);
 int skcipher_walk_async(struct skcipher_walk *walk,
 			struct skcipher_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->flags |= SKCIPHER_WALK_PHYS;
 
 	INIT_LIST_HEAD(&walk->buffers);
@@ -505,6 +529,7 @@ EXPORT_SYMBOL_GPL(skcipher_walk_async);
 static int skcipher_walk_aead_common(struct skcipher_walk *walk,
 				     struct aead_request *req, bool atomic)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *tfm = crypto_aead_reqtfm(req);
 	int err;
 
@@ -547,6 +572,7 @@ static int skcipher_walk_aead_common(struct skcipher_walk *walk,
 int skcipher_walk_aead(struct skcipher_walk *walk, struct aead_request *req,
 		       bool atomic)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->total = req->cryptlen;
 
 	return skcipher_walk_aead_common(walk, req, atomic);
@@ -556,6 +582,7 @@ EXPORT_SYMBOL_GPL(skcipher_walk_aead);
 int skcipher_walk_aead_encrypt(struct skcipher_walk *walk,
 			       struct aead_request *req, bool atomic)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	walk->total = req->cryptlen;
 
 	return skcipher_walk_aead_common(walk, req, atomic);
@@ -565,6 +592,7 @@ EXPORT_SYMBOL_GPL(skcipher_walk_aead_encrypt);
 int skcipher_walk_aead_decrypt(struct skcipher_walk *walk,
 			       struct aead_request *req, bool atomic)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_aead *tfm = crypto_aead_reqtfm(req);
 
 	walk->total = req->cryptlen - crypto_aead_authsize(tfm);
@@ -576,7 +604,9 @@ EXPORT_SYMBOL_GPL(skcipher_walk_aead_decrypt);
 static unsigned int crypto_skcipher_extsize(struct crypto_alg *alg)
 {
 	if (alg->cra_type == &crypto_blkcipher_type)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return sizeof(struct crypto_blkcipher *);
+}
 
 	if (alg->cra_type == &crypto_ablkcipher_type ||
 	    alg->cra_type == &crypto_givcipher_type)
@@ -588,6 +618,7 @@ static unsigned int crypto_skcipher_extsize(struct crypto_alg *alg)
 static int skcipher_setkey_blkcipher(struct crypto_skcipher *tfm,
 				     const u8 *key, unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_blkcipher **ctx = crypto_skcipher_ctx(tfm);
 	struct crypto_blkcipher *blkcipher = *ctx;
 	int err;
@@ -608,6 +639,7 @@ static int skcipher_crypt_blkcipher(struct skcipher_request *req,
 						 struct scatterlist *,
 						 unsigned int))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
 	struct crypto_blkcipher **ctx = crypto_skcipher_ctx(tfm);
 	struct blkcipher_desc desc = {
@@ -622,6 +654,7 @@ static int skcipher_crypt_blkcipher(struct skcipher_request *req,
 
 static int skcipher_encrypt_blkcipher(struct skcipher_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_skcipher *skcipher = crypto_skcipher_reqtfm(req);
 	struct crypto_tfm *tfm = crypto_skcipher_tfm(skcipher);
 	struct blkcipher_alg *alg = &tfm->__crt_alg->cra_blkcipher;
@@ -631,6 +664,7 @@ static int skcipher_encrypt_blkcipher(struct skcipher_request *req)
 
 static int skcipher_decrypt_blkcipher(struct skcipher_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_skcipher *skcipher = crypto_skcipher_reqtfm(req);
 	struct crypto_tfm *tfm = crypto_skcipher_tfm(skcipher);
 	struct blkcipher_alg *alg = &tfm->__crt_alg->cra_blkcipher;
@@ -640,6 +674,7 @@ static int skcipher_decrypt_blkcipher(struct skcipher_request *req)
 
 static void crypto_exit_skcipher_ops_blkcipher(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_blkcipher **ctx = crypto_tfm_ctx(tfm);
 
 	crypto_free_blkcipher(*ctx);
@@ -654,15 +689,19 @@ static int crypto_init_skcipher_ops_blkcipher(struct crypto_tfm *tfm)
 	struct crypto_tfm *btfm;
 
 	if (!crypto_mod_get(calg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAGAIN;
+}
 
 	btfm = __crypto_alloc_tfm(calg, CRYPTO_ALG_TYPE_BLKCIPHER,
 					CRYPTO_ALG_TYPE_MASK);
 	if (IS_ERR(btfm)) {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		crypto_mod_put(calg);
 		return PTR_ERR(btfm);
 	}
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	blkcipher = __crypto_blkcipher_cast(btfm);
 	*ctx = blkcipher;
 	tfm->exit = crypto_exit_skcipher_ops_blkcipher;
@@ -680,6 +719,7 @@ static int crypto_init_skcipher_ops_blkcipher(struct crypto_tfm *tfm)
 static int skcipher_setkey_ablkcipher(struct crypto_skcipher *tfm,
 				      const u8 *key, unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ablkcipher **ctx = crypto_skcipher_ctx(tfm);
 	struct crypto_ablkcipher *ablkcipher = *ctx;
 	int err;
@@ -699,6 +739,7 @@ static int skcipher_setkey_ablkcipher(struct crypto_skcipher *tfm,
 static int skcipher_crypt_ablkcipher(struct skcipher_request *req,
 				     int (*crypt)(struct ablkcipher_request *))
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
 	struct crypto_ablkcipher **ctx = crypto_skcipher_ctx(tfm);
 	struct ablkcipher_request *subreq = skcipher_request_ctx(req);
@@ -714,6 +755,7 @@ static int skcipher_crypt_ablkcipher(struct skcipher_request *req,
 
 static int skcipher_encrypt_ablkcipher(struct skcipher_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_skcipher *skcipher = crypto_skcipher_reqtfm(req);
 	struct crypto_tfm *tfm = crypto_skcipher_tfm(skcipher);
 	struct ablkcipher_alg *alg = &tfm->__crt_alg->cra_ablkcipher;
@@ -723,6 +765,7 @@ static int skcipher_encrypt_ablkcipher(struct skcipher_request *req)
 
 static int skcipher_decrypt_ablkcipher(struct skcipher_request *req)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_skcipher *skcipher = crypto_skcipher_reqtfm(req);
 	struct crypto_tfm *tfm = crypto_skcipher_tfm(skcipher);
 	struct ablkcipher_alg *alg = &tfm->__crt_alg->cra_ablkcipher;
@@ -732,6 +775,7 @@ static int skcipher_decrypt_ablkcipher(struct skcipher_request *req)
 
 static void crypto_exit_skcipher_ops_ablkcipher(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_ablkcipher **ctx = crypto_tfm_ctx(tfm);
 
 	crypto_free_ablkcipher(*ctx);
@@ -746,7 +790,9 @@ static int crypto_init_skcipher_ops_ablkcipher(struct crypto_tfm *tfm)
 	struct crypto_tfm *abtfm;
 
 	if (!crypto_mod_get(calg))
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return -EAGAIN;
+}
 
 	abtfm = __crypto_alloc_tfm(calg, 0, 0);
 	if (IS_ERR(abtfm)) {
@@ -773,6 +819,7 @@ static int crypto_init_skcipher_ops_ablkcipher(struct crypto_tfm *tfm)
 static int skcipher_setkey_unaligned(struct crypto_skcipher *tfm,
 				     const u8 *key, unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	unsigned long alignmask = crypto_skcipher_alignmask(tfm);
 	struct skcipher_alg *cipher = crypto_skcipher_alg(tfm);
 	u8 *buffer, *alignbuffer;
@@ -794,6 +841,7 @@ static int skcipher_setkey_unaligned(struct crypto_skcipher *tfm,
 static int skcipher_setkey(struct crypto_skcipher *tfm, const u8 *key,
 			   unsigned int keylen)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct skcipher_alg *cipher = crypto_skcipher_alg(tfm);
 	unsigned long alignmask = crypto_skcipher_alignmask(tfm);
 
@@ -810,6 +858,7 @@ static int skcipher_setkey(struct crypto_skcipher *tfm, const u8 *key,
 
 static void crypto_skcipher_exit_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_skcipher *skcipher = __crypto_skcipher_cast(tfm);
 	struct skcipher_alg *alg = crypto_skcipher_alg(skcipher);
 
@@ -818,6 +867,7 @@ static void crypto_skcipher_exit_tfm(struct crypto_tfm *tfm)
 
 static int crypto_skcipher_init_tfm(struct crypto_tfm *tfm)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct crypto_skcipher *skcipher = __crypto_skcipher_cast(tfm);
 	struct skcipher_alg *alg = crypto_skcipher_alg(skcipher);
 
@@ -840,6 +890,7 @@ static int crypto_skcipher_init_tfm(struct crypto_tfm *tfm)
 	if (alg->init)
 		return alg->init(skcipher);
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return 0;
 }
 
@@ -855,6 +906,7 @@ static void crypto_skcipher_show(struct seq_file *m, struct crypto_alg *alg)
 	__maybe_unused;
 static void crypto_skcipher_show(struct seq_file *m, struct crypto_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct skcipher_alg *skcipher = container_of(alg, struct skcipher_alg,
 						     base);
 
@@ -873,6 +925,7 @@ static void crypto_skcipher_show(struct seq_file *m, struct crypto_alg *alg)
 static int crypto_skcipher_report(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_report_blkcipher rblkcipher;
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	struct skcipher_alg *skcipher = container_of(alg, struct skcipher_alg,
 						     base);
 
@@ -930,6 +983,7 @@ EXPORT_SYMBOL_GPL(crypto_alloc_skcipher);
 
 int crypto_has_skcipher2(const char *alg_name, u32 type, u32 mask)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	return crypto_type_has_alg(alg_name, &crypto_skcipher_type2,
 				   type, mask);
 }
@@ -962,7 +1016,9 @@ int crypto_register_skcipher(struct skcipher_alg *alg)
 
 	err = skcipher_prepare_alg(alg);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return crypto_register_alg(base);
 }
@@ -970,6 +1026,7 @@ EXPORT_SYMBOL_GPL(crypto_register_skcipher);
 
 void crypto_unregister_skcipher(struct skcipher_alg *alg)
 {
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	crypto_unregister_alg(&alg->base);
 }
 EXPORT_SYMBOL_GPL(crypto_unregister_skcipher);
@@ -978,6 +1035,7 @@ int crypto_register_skciphers(struct skcipher_alg *algs, int count)
 {
 	int i, ret;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = 0; i < count; i++) {
 		ret = crypto_register_skcipher(&algs[i]);
 		if (ret)
@@ -998,6 +1056,7 @@ void crypto_unregister_skciphers(struct skcipher_alg *algs, int count)
 {
 	int i;
 
+if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 	for (i = count - 1; i >= 0; --i)
 		crypto_unregister_skcipher(&algs[i]);
 }
@@ -1010,7 +1069,9 @@ int skcipher_register_instance(struct crypto_template *tmpl,
 
 	err = skcipher_prepare_alg(&inst->alg);
 	if (err)
+{ if (kernel_init_done) printk("We reached unpopular paths: %s:%i\n", __FILE__, __LINE__);
 		return err;
+}
 
 	return crypto_register_instance(tmpl, skcipher_crypto_instance(inst));
 }
diff --git a/crypto/tea.c b/crypto/tea.c
index b70b441..32c9355 100644
--- a/crypto/tea.c
+++ b/crypto/tea.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* 
  * Cryptographic API.
  *
diff --git a/crypto/tgr192.c b/crypto/tgr192.c
index 321bc6f..8983bef 100644
--- a/crypto/tgr192.c
+++ b/crypto/tgr192.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/twofish_generic.c b/crypto/twofish_generic.c
index ebf7a3e..87887f4 100644
--- a/crypto/twofish_generic.c
+++ b/crypto/twofish_generic.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Twofish for CryptoAPI
  *
diff --git a/crypto/vmac.c b/crypto/vmac.c
index df76a81..9d1f9fb 100644
--- a/crypto/vmac.c
+++ b/crypto/vmac.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Modified to interface to the Linux kernel
  * Copyright (c) 2009, Intel Corporation.
diff --git a/crypto/wp512.c b/crypto/wp512.c
index 7ee5a04..719677b 100644
--- a/crypto/wp512.c
+++ b/crypto/wp512.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Cryptographic API.
  *
diff --git a/crypto/xcbc.c b/crypto/xcbc.c
index df90b33..62e8677 100644
--- a/crypto/xcbc.c
+++ b/crypto/xcbc.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /*
  * Copyright (C)2006 USAGI/WIDE Project
  *
diff --git a/crypto/xts.c b/crypto/xts.c
index e31828e..9ee4b52 100644
--- a/crypto/xts.c
+++ b/crypto/xts.c
@@ -1,3 +1,5 @@
+extern int kernel_init_done;
+int printk(const char *fmt, ...);
 /* XTS: as defined in IEEE1619/D16
  *	http://grouper.ieee.org/groups/1619/email/pdf00086.pdf
  *	(sector sizes which are not a multiple of 16 bytes are,
-- 
2.7.4

